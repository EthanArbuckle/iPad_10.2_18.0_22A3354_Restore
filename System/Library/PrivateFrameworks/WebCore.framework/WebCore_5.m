uint64_t WebCore::RenderObject::setPreferredLogicalWidthsDirty(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int isAtomicInlineLevelBox;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38[3];
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;

  v3 = *(_DWORD *)(result + 20);
  if (a2)
    v4 = 0x2000;
  else
    v4 = 0;
  *(_DWORD *)(result + 20) = v3 & 0xFFFFDFFF | v4;
  if (!a2)
    return result;
  if (a3 != 1)
    return result;
  if ((v3 & 0x2000) != 0)
    return result;
  v5 = *(_BYTE *)(result + 45);
  if ((v5 & 2) == 0 && (*(_QWORD *)(result + 96) & 0x180000) == 0x100000)
    return result;
  v6 = *(unsigned __int8 *)(result + 46);
  if (v6 == 37)
  {
    result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)result);
    v11 = result;
    goto LABEL_21;
  }
  v41 = 0;
  v40 = 0;
  if ((v5 & 2) != 0 || v6 == 17)
    goto LABEL_19;
  v38[0] = &v40;
  v38[1] = &v41;
  v38[2] = &v39;
  v39 = result;
  if ((v5 & 1) != 0)
    goto LABEL_134;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
  if (!v7)
    goto LABEL_134;
  if ((*(_WORD *)(v7 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942910D4);
  }
  if ((*(_BYTE *)(v7 + 23) & 0x20) == 0)
  {
LABEL_134:
    v8 = *(_QWORD *)(result + 96);
    if ((v8 & 0xF80000000000) != 0x480000000000)
    {
      v9 = (v8 >> 19) & 7;
      if (v9 <= 3 && v9 != 2)
      {
LABEL_19:
        v10 = *(_QWORD *)(result + 32);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          goto LABEL_21;
        }
        goto LABEL_88;
      }
      v13 = *(_QWORD *)(result + 32);
      if (v13)
      {
        result = *(_QWORD *)(v13 + 8);
        v37 = result;
        if (result)
          ++*(_DWORD *)(result + 16);
      }
      else
      {
        result = 0;
        v37 = 0;
      }
      if (v9 == 2)
      {
        if (result)
        {
          do
          {
            v14 = *(unsigned __int8 *)(result + 46);
            if (v14 == 49
              || (*(_BYTE *)(result + 98) & 0x38) != 0
              || ((*(_BYTE *)(result + 45) & 0x40) != 0 || (v14 - 36) <= 4 && v14 != 38)
              && (*(_BYTE *)(result + 22) & 2) != 0)
            {
              break;
            }
            v15 = *(_QWORD *)(*(_QWORD *)(result + 88) + 40);
            if (*(_DWORD *)(*(_QWORD *)(v15 + 72) + 20))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)
                             + 1272) != *(_QWORD *)(*(_QWORD *)(result + 24) + 8))
                break;
            }
            if ((*(_BYTE *)(result + 45) & 0x40) != 0 && *(_QWORD *)(v15 + 200))
            {
              v32 = result;
              result = WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(*(WebCore::WillChangeData **)(v15 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(result + 24) + 8));
              if ((result & 1) != 0)
                break;
              result = v32;
              v14 = *(unsigned __int8 *)(v32 + 46);
            }
            if (v14 == 67 || v14 == 90)
              break;
            v16 = *(_QWORD *)(*(_QWORD *)(result + 88) + 40);
            v17 = *(_BYTE *)(v16 + 462);
            v18 = *(_BYTE *)(v16 + 642) & 3;
            v19 = v17 | 0x19;
            if (v18 == 1)
              v17 |= 0x15u;
            v20 = v18 == 2 ? v19 : v17;
            if ((v20 & 3) != 0)
            {
              if ((*(_BYTE *)(result + 20) & 1) != 0
                || (v33 = result,
                    isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)result),
                    result = v33,
                    isAtomicInlineLevelBox))
              {
                if ((*(_QWORD *)(result + 96) & 0x1FLL) != 0x19
                  && (*(unsigned __int8 *)(result + 46) - 36 > 4 || (*(_BYTE *)(result + 52) & 7) == 1))
                {
                  break;
                }
              }
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 40) + 636) & 0xC0000) != 0)
            {
              if ((*(_BYTE *)(result + 20) & 1) != 0
                || (v35 = result,
                    v36 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)result),
                    result = v35,
                    v36))
              {
                if ((*(_QWORD *)(result + 96) & 0x1FLL) != 0x19)
                {
                  v30 = *(unsigned __int8 *)(result + 46);
                  if ((v30 - 36) <= 4)
                  {
                    if (v30 == 36)
                      break;
                  }
                  else if (v30 != 63 && v30 != 35)
                  {
                    break;
                  }
                }
              }
            }
            v21 = v37;
            if (v40 && v37 == v41)
              *v40 = 1;
            v22 = *(_QWORD *)(v21 + 32);
            if (v22)
            {
              result = *(_QWORD *)(v22 + 8);
              if (result)
                ++*(_DWORD *)(result + 16);
            }
            else
            {
              result = 0;
            }
            v37 = result;
            v23 = *(_DWORD *)(v21 + 16);
            if (!v23)
            {
              __break(0xC471u);
              JUMPOUT(0x194291180);
            }
            *(_DWORD *)(v21 + 16) = v23 - 1;
          }
          while (result);
          v26 = v37;
LABEL_101:
          v11 = v26;
LABEL_102:
          if (v26)
          {
            v31 = *(_DWORD *)(v26 + 16);
            if (!v31)
            {
              __break(0xC471u);
              JUMPOUT(0x194291268);
            }
            *(_DWORD *)(v26 + 16) = v31 - 1;
          }
          goto LABEL_21;
        }
      }
      else if (result)
      {
        while (1)
        {
          result = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)result);
          v26 = v37;
          if ((result & 1) != 0)
            goto LABEL_101;
          if ((*(_BYTE *)(v37 + 45) & 1) == 0)
          {
            v27 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 8);
            if (v27)
            {
              if ((*(_WORD *)(v27 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194291290);
              }
              if ((*(_BYTE *)(v27 + 23) & 0x20) != 0)
                goto LABEL_109;
            }
          }
          if ((*(_QWORD *)(v37 + 96) & 0xF80000000000) == 0x480000000000)
          {
LABEL_109:
            result = (uint64_t)WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v38);
            v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 24) + 8) + 40) + 8) + 1944);
            v26 = v37;
            goto LABEL_102;
          }
          if (v40 && v37 == v41)
            *v40 = 1;
          v28 = *(_QWORD *)(v26 + 32);
          if (v28)
            v29 = *(_QWORD *)(v28 + 8);
          else
            v29 = 0;
          WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v37, v29);
          v11 = 0;
          result = v37;
          if (!v37)
            goto LABEL_21;
        }
      }
LABEL_88:
      v11 = 0;
      goto LABEL_21;
    }
  }
  result = (uint64_t)WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v38);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 24) + 8) + 40) + 8) + 1944);
LABEL_21:
  if (v11)
  {
    ++*(_DWORD *)(v11 + 16);
    while ((*(_BYTE *)(v11 + 21) & 0x20) == 0)
    {
      if (*(_BYTE *)(v11 + 46) == 37)
        result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v11);
      else
        result = WebCore::RenderObject::container((WebCore::RenderObject *)v11);
      if (result)
      {
        ++*(_DWORD *)(result + 16);
        *(_DWORD *)(v11 + 20) |= 0x2000u;
        if ((*(_QWORD *)(v11 + 96) & 0x180000) == 0x100000)
        {
          v25 = *(_DWORD *)(result + 16);
          if (!v25)
          {
            __break(0xC471u);
            JUMPOUT(0x1942912B0);
          }
          *(_DWORD *)(result + 16) = v25 - 1;
          break;
        }
      }
      else
      {
        if (*(_BYTE *)(v11 + 46) != 49)
          break;
        *(_DWORD *)(v11 + 20) |= 0x2000u;
        if ((*(_QWORD *)(v11 + 96) & 0x180000) == 0x100000)
          break;
      }
      v24 = *(_DWORD *)(v11 + 16);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1942911D8);
      }
      *(_DWORD *)(v11 + 16) = v24 - 1;
      v11 = result;
      if (!result)
        return result;
    }
    v12 = *(_DWORD *)(v11 + 16);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1942910B4);
    }
    *(_DWORD *)(v11 + 16) = v12 - 1;
  }
  return result;
}

uint64_t WebCore::RenderElement::attachRendererInternal(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  WTF *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  WTF *v29;
  uint64_t result;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  WTF *v52;
  int v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;

  v5 = a1;
  v6 = *a2;
  if (a1)
  {
    a1 = *(_QWORD *)(a1 + 8);
    if (!a1)
    {
      a1 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 8) = v5;
      v56 = *(WTF **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = a1;
      if (v56)
      {
        if (*(_DWORD *)v56 == 1)
        {
          WTF::fastFree(v56, a2);
          a1 = *(_QWORD *)(v5 + 8);
          if (!a1)
            goto LABEL_2;
        }
        else
        {
          --*(_DWORD *)v56;
        }
      }
    }
    ++*(_DWORD *)a1;
  }
LABEL_2:
  v7 = *(WTF **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = a1;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = *(unsigned int *)(v5 + 64);
  v9 = v8 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32);
  if (v9)
    v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)) + 8);
  if (v9 == a3)
  {
    v10 = *a2;
    if (!*a2)
    {
      v11 = 0;
      goto LABEL_10;
    }
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
    {
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v10;
      v59 = *(WTF **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v11;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
        {
          WTF::fastFree(v59, a2);
          v11 = *(_QWORD *)(v10 + 8);
          if (!v11)
          {
LABEL_10:
            v12 = (WTF *)(*(unsigned int *)(v5 + 64) | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32));
            *(_DWORD *)(v5 + 64) = v11;
            *(_BYTE *)(v5 + 68) = BYTE4(v11);
            if (v12)
            {
              if (*(_DWORD *)v12 == 1)
                WTF::fastFree(v12, a2);
              else
                --*(_DWORD *)v12;
            }
            goto LABEL_13;
          }
        }
        else
        {
          --*(_DWORD *)v59;
        }
      }
    }
    ++*(_DWORD *)v11;
    goto LABEL_10;
  }
LABEL_13:
  if (!a3)
  {
    v13 = *(unsigned int *)(v5 + 71);
    if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v5 + 75) << 32))
      || (v14 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v5 + 75) << 32)) + 8)) == 0)
    {
      v14 = 0;
      v19 = 0;
      v18 = *a2;
      v20 = 1;
      goto LABEL_23;
    }
    ++*(_DWORD *)(v14 + 16);
    v15 = *a2;
    if (*a2)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (!v16)
      {
        v16 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = v15;
        v58 = *(WTF **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = v16;
        if (v58)
        {
          if (*(_DWORD *)v58 == 1)
          {
            WTF::fastFree(v58, a2);
            v16 = *(_QWORD *)(v15 + 8);
            if (!v16)
              goto LABEL_18;
          }
          else
          {
            --*(_DWORD *)v58;
          }
        }
      }
      ++*(_DWORD *)v16;
    }
    else
    {
      v16 = 0;
    }
LABEL_18:
    v17 = (WTF *)(*(unsigned int *)(v14 + 47) | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32));
    *(_DWORD *)(v14 + 47) = v16;
    *(_BYTE *)(v14 + 51) = BYTE4(v16);
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, a2);
      else
        --*(_DWORD *)v17;
    }
    v18 = *a2;
    v19 = *(_QWORD *)(v14 + 8);
    if (v19)
      goto LABEL_22;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v14;
    v31 = *(WTF **)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v19;
    if (!v31)
      goto LABEL_22;
    if (*(_DWORD *)v31 != 1)
    {
      --*(_DWORD *)v31;
LABEL_22:
      v20 = 0;
      ++*(_DWORD *)v19;
      goto LABEL_23;
    }
    WTF::fastFree(v31, a2);
    v19 = *(_QWORD *)(v14 + 8);
    if (v19)
      goto LABEL_22;
    v20 = 0;
LABEL_23:
    v22 = *(_DWORD *)(v18 + 40);
    v21 = v18 + 40;
    v23 = (WTF *)(v22 | ((unint64_t)*(unsigned __int8 *)(v21 + 4) << 32));
    *(_DWORD *)v21 = v19;
    *(_BYTE *)(v21 + 4) = BYTE4(v19);
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, a2);
      else
        --*(_DWORD *)v23;
    }
    if ((v20 & 1) == 0)
    {
      v24 = *(_DWORD *)(v14 + 16);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1942917E0);
      }
      *(_DWORD *)(v14 + 16) = v24 - 1;
    }
    v25 = *a2;
    if (*a2)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (!v26)
      {
        v26 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = v25;
        v57 = *(WTF **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v26;
        if (v57)
        {
          if (*(_DWORD *)v57 == 1)
          {
            WTF::fastFree(v57, a2);
            v26 = *(_QWORD *)(v25 + 8);
            if (!v26)
              goto LABEL_31;
          }
          else
          {
            --*(_DWORD *)v57;
          }
        }
      }
      ++*(_DWORD *)v26;
    }
    else
    {
      v26 = 0;
    }
LABEL_31:
    v28 = *(_DWORD *)(v5 + 71);
    v27 = v5 + 71;
    v29 = (WTF *)(v28 | ((unint64_t)*(unsigned __int8 *)(v27 + 4) << 32));
    *(_DWORD *)v27 = v26;
    *(_BYTE *)(v27 + 4) = BYTE4(v26);
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree(v29, a2);
      else
        --*(_DWORD *)v29;
    }
    result = *a2;
    *a2 = 0;
    return result;
  }
  v32 = *(unsigned int *)(a3 + 40);
  if (!(v32 | ((unint64_t)*(unsigned __int8 *)(a3 + 44) << 32))
    || (v33 = *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(a3 + 44) << 32)) + 8)) == 0)
  {
    v33 = 0;
    v38 = 0;
    v37 = *a2;
    v39 = 1;
    goto LABEL_54;
  }
  ++*(_DWORD *)(v33 + 16);
  v34 = *a2;
  if (*a2)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (!v35)
    {
      v35 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = v34;
      v61 = *(WTF **)(v34 + 8);
      *(_QWORD *)(v34 + 8) = v35;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1)
        {
          WTF::fastFree(v61, a2);
          v35 = *(_QWORD *)(v34 + 8);
          if (!v35)
            goto LABEL_49;
        }
        else
        {
          --*(_DWORD *)v61;
        }
      }
    }
    ++*(_DWORD *)v35;
  }
  else
  {
    v35 = 0;
  }
LABEL_49:
  v36 = (WTF *)(*(unsigned int *)(v33 + 47) | ((unint64_t)*(unsigned __int8 *)(v33 + 51) << 32));
  *(_DWORD *)(v33 + 47) = v35;
  *(_BYTE *)(v33 + 51) = BYTE4(v35);
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::fastFree(v36, a2);
    else
      --*(_DWORD *)v36;
  }
  v37 = *a2;
  v38 = *(_QWORD *)(v33 + 8);
  if (v38)
    goto LABEL_53;
  v38 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v38 = 1;
  *(_QWORD *)(v38 + 8) = v33;
  v55 = *(WTF **)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v38;
  if (!v55)
    goto LABEL_53;
  if (*(_DWORD *)v55 != 1)
  {
    --*(_DWORD *)v55;
LABEL_53:
    v39 = 0;
    ++*(_DWORD *)v38;
    goto LABEL_54;
  }
  WTF::fastFree(v55, a2);
  v38 = *(_QWORD *)(v33 + 8);
  if (v38)
    goto LABEL_53;
  v39 = 0;
LABEL_54:
  v41 = *(_DWORD *)(v37 + 40);
  v40 = v37 + 40;
  v42 = (WTF *)(v41 | ((unint64_t)*(unsigned __int8 *)(v40 + 4) << 32));
  *(_DWORD *)v40 = v38;
  *(_BYTE *)(v40 + 4) = BYTE4(v38);
  if (v42)
  {
    if (*(_DWORD *)v42 == 1)
      WTF::fastFree(v42, a2);
    else
      --*(_DWORD *)v42;
  }
  v43 = *a2;
  v44 = *(_QWORD *)(a3 + 8);
  if (v44)
    goto LABEL_58;
  v44 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v44 = 1;
  *(_QWORD *)(v44 + 8) = a3;
  v54 = *(WTF **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v44;
  if (!v54)
    goto LABEL_58;
  if (*(_DWORD *)v54 != 1)
  {
    --*(_DWORD *)v54;
LABEL_58:
    ++*(_DWORD *)v44;
    goto LABEL_59;
  }
  WTF::fastFree(v54, a2);
  v44 = *(_QWORD *)(a3 + 8);
  if (v44)
    goto LABEL_58;
LABEL_59:
  v46 = *(_DWORD *)(v43 + 47);
  v45 = v43 + 47;
  v47 = (WTF *)(v46 | ((unint64_t)*(unsigned __int8 *)(v45 + 4) << 32));
  *(_DWORD *)v45 = v44;
  *(_BYTE *)(v45 + 4) = BYTE4(v44);
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::fastFree(v47, a2);
    else
      --*(_DWORD *)v47;
  }
  v48 = *a2;
  if (*a2)
  {
    v49 = *(_QWORD *)(v48 + 8);
    if (!v49)
    {
      v49 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = v48;
      v60 = *(WTF **)(v48 + 8);
      *(_QWORD *)(v48 + 8) = v49;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1)
        {
          WTF::fastFree(v60, a2);
          v49 = *(_QWORD *)(v48 + 8);
          if (!v49)
            goto LABEL_64;
        }
        else
        {
          --*(_DWORD *)v60;
        }
      }
    }
    ++*(_DWORD *)v49;
  }
  else
  {
    v49 = 0;
  }
LABEL_64:
  v51 = *(_DWORD *)(a3 + 40);
  v50 = a3 + 40;
  v52 = (WTF *)(v51 | ((unint64_t)*(unsigned __int8 *)(v50 + 4) << 32));
  *(_DWORD *)v50 = v49;
  *(_BYTE *)(v50 + 4) = BYTE4(v49);
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::fastFree(v52, a2);
    else
      --*(_DWORD *)v52;
  }
  result = *a2;
  *a2 = 0;
  if ((v39 & 1) == 0)
  {
    v53 = *(_DWORD *)(v33 + 16);
    if (!v53)
    {
      __break(0xC471u);
      JUMPOUT(0x194291890);
    }
    *(_DWORD *)(v33 + 16) = v53 - 1;
  }
  return result;
}

void WebCore::RenderBlockFlow::dirtyLinesFromChangedChild(WebCore::RenderBlockFlow *this, WebCore::RenderObject *a2)
{
  uint64_t v2;

  if (*((_DWORD *)this + 60) == 2)
  {
    v2 = *((_QWORD *)this + 29);
    if (v2)
      WebCore::RenderLineBoxList::dirtyLinesFromChangedChild((WebCore::RenderLineBoxList *)(v2 + 8), this, a2);
  }
}

uint64_t WebCore::RenderBlockFlow::setChildrenInline(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;

  v3 = this;
  v4 = *(_DWORD *)(this + 20);
  if ((v4 & 0x40000) == 0 || (a2 & 1) != 0)
    goto LABEL_3;
  *(_WORD *)(this + 69) &= 0x1FFFu;
  v6 = *(unsigned int *)(this + 240);
  if ((_DWORD)v6 != -1)
  {
    if (!(_DWORD)v6)
      goto LABEL_3;
    this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v6])(&v7, this + 232);
    v4 = *(_DWORD *)(v3 + 20);
  }
  *(_DWORD *)(v3 + 240) = 0;
LABEL_3:
  if (a2)
    v5 = 0x40000;
  else
    v5 = 0;
  *(_DWORD *)(v3 + 20) = v4 & 0xFFFBFFFF | v5;
  return this;
}

uint64_t WebCore::RenderElement::layerParent(WebCore::RenderElement *this, void *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 21) & 0x80) == 0)
    goto LABEL_9;
  if ((*((_BYTE *)this + 45) & 1) != 0 || (v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) == 0)
  {
    if ((*((_QWORD *)this + 12) & 0xF80000000000) != 0x480000000000)
      goto LABEL_9;
    goto LABEL_28;
  }
  if ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194291CC0);
  }
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  if ((*(_BYTE *)(v3 + 23) & 0x20) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(v3 + 24) = v4;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    goto LABEL_28;
  }
  v5 = *((_QWORD *)this + 12) & 0xF80000000000;
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  if (v5 == 0x480000000000)
  {
LABEL_28:
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    return *(_QWORD *)(v6 + 144);
  }
LABEL_9:
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
  {
    v7 = *(_QWORD *)(v6 + 32);
    if (!v7)
      return 0;
    v6 = *(_QWORD *)(v7 + 8);
    if (!v6)
      return 0;
    result = 0;
    while ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
    {
      v9 = *(_QWORD *)(v6 + 32);
      if (!v9)
        return 0;
      v6 = *(_QWORD *)(v9 + 8);
      if (!v6)
        return result;
    }
  }
LABEL_22:
  if ((*(_BYTE *)(v6 + 21) & 0x80) != 0)
    return *(_QWORD *)(v6 + 144);
  while (1)
  {
    v10 = *(_QWORD *)(v6 + 32);
    if (!v10)
      return 0;
    v6 = *(_QWORD *)(v10 + 8);
    if (!v6)
      return 0;
    if ((*(_BYTE *)(v6 + 45) & 0x10) != 0)
      goto LABEL_22;
  }
}

WebCore::RenderTableRow *WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(WebCore::RenderTreeBuilder::Table *this, WebCore::RenderTableRow *Cell, const WebCore::RenderObject *a3, WebCore::RenderObject **a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::RenderObject *v11;
  uint64_t v12;
  WebCore::RenderTableCell *v14;
  uint64_t *v15;
  WebCore::RenderObject **v16;

  if (*((_BYTE *)a3 + 46) == 37)
    return Cell;
  v14 = Cell;
  Cell = *a4;
  if (*a4)
  {
    if ((*((_BYTE *)Cell + 45) & 1) == 0)
    {
      v6 = *((_QWORD *)Cell + 4);
      if (v6)
      {
        if (*(WebCore::RenderTableCell **)(v6 + 8) == v14)
        {
          v12 = *((unsigned int *)Cell + 10);
          if (v12 | ((unint64_t)*((unsigned __int8 *)Cell + 44) << 32))
          {
            v4 = *(_QWORD *)((v12 | ((unint64_t)*((unsigned __int8 *)Cell + 44) << 32)) + 8);
            if (v4)
            {
              if (*(_BYTE *)(v4 + 46) == 37 && (*(_BYTE *)(v4 + 45) & 1) != 0)
              {
                *a4 = 0;
                return (WebCore::RenderTableRow *)v4;
              }
            }
          }
        }
      }
    }
    v15 = (uint64_t *)this;
    v16 = a4;
  }
  else
  {
    v15 = (uint64_t *)this;
    v16 = a4;
    Cell = (WebCore::RenderTableRow *)WebCore::RenderTableRow::lastCell(*(unsigned int *)((char *)v14 + 71) | ((unint64_t)*((unsigned __int8 *)v14 + 75) << 32));
    if (!Cell)
    {
LABEL_14:
      Cell = v14;
      return (WebCore::RenderTableRow *)WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(WebCore::RenderTableRow &,WebCore::RenderObject const&,WebCore::RenderObject*&)::$_0::operator()<WebCore::RenderTableRow>(&v15, Cell, a3);
    }
  }
  v7 = *((unsigned __int8 *)Cell + 46);
  if (v7 == 37
    && (*((_BYTE *)Cell + 45) & 1) != 0
    && ((*((_BYTE *)Cell + 45) & 2) != 0 || (*((_QWORD *)Cell + 12) & 0xF00000000000) != 0x300000000000))
  {
    if (*a4 == Cell)
    {
      v10 = *((unsigned int *)Cell + 16);
      v11 = (WebCore::RenderObject *)(v10 | ((unint64_t)*((unsigned __int8 *)Cell + 68) << 32));
      if (v11)
        v11 = *(WebCore::RenderObject **)((v10 | ((unint64_t)*((unsigned __int8 *)Cell + 68) << 32)) + 8);
      *a4 = v11;
    }
    return Cell;
  }
  v8 = *((_QWORD *)Cell + 4);
  if (!v8)
    goto LABEL_14;
  Cell = *(WebCore::RenderTableRow **)(v8 + 8);
  if (!Cell
    || (*((_BYTE *)Cell + 45) & 1) == 0
    || (*((_BYTE *)Cell + 45) & 2) == 0 && (*((_QWORD *)Cell + 12) & 0xF00000000000) == 0x300000000000)
  {
    goto LABEL_14;
  }
  v9 = *((unsigned __int8 *)Cell + 46);
  if (v9 == 38)
    goto LABEL_14;
  if (v7 != 37)
    return Cell;
  if (v9 != 39)
    goto LABEL_14;
  return (WebCore::RenderTableRow *)WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(WebCore::RenderTableRow &,WebCore::RenderObject const&,WebCore::RenderObject*&)::$_0::operator()<WebCore::RenderTableRow>(&v15, Cell, a3);
}

WebCore::RenderTableSection *WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(WebCore::RenderTreeBuilder::Table *this, WebCore::RenderTableSection *a2, const WebCore::RenderObject *a3, WebCore::RenderObject **a4)
{
  uint64_t Row;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*((_BYTE *)a3 + 46) == 39)
    return a2;
  Row = (uint64_t)*a4;
  if (*a4
    || (Row = WebCore::RenderTableSection::lastRow(*(unsigned int *)((char *)a2 + 71) | ((unint64_t)*((unsigned __int8 *)a2 + 75) << 32))) != 0)
  {
    if (*(_BYTE *)(Row + 46) == 39
      && (*(_BYTE *)(Row + 45) & 1) != 0
      && ((*(_BYTE *)(Row + 45) & 2) != 0 || (*(_QWORD *)(Row + 96) & 0xF00000000000) != 0x300000000000))
    {
      if (*a4 == (WebCore::RenderObject *)Row)
        *a4 = (WebCore::RenderObject *)WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)Row);
      return (WebCore::RenderTableSection *)Row;
    }
    v9 = Row;
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t)*a4;
  if (*a4
    && (*(_BYTE *)(v10 + 45) & 1) == 0
    && (v11 = *(_QWORD *)(v10 + 32)) != 0
    && *(WebCore::RenderTableSection **)(v11 + 8) == a2
    && (v15 = *(unsigned int *)(v10 + 40) | ((unint64_t)*(unsigned __int8 *)(v10 + 44) << 32)) != 0
    && (Row = *(_QWORD *)(v15 + 8)) != 0
    && *(_BYTE *)(Row + 46) == 39
    && (*(_BYTE *)(Row + 45) & 1) != 0)
  {
    *a4 = 0;
  }
  else
  {
    if (!v9)
      goto LABEL_18;
    do
    {
      Row = v9;
      v12 = *(_QWORD *)(v9 + 32);
      if (!v12)
        break;
      v9 = *(_QWORD *)(v12 + 8);
      if (!v9)
        break;
    }
    while ((*(_BYTE *)(v9 + 45) & 1) != 0 && *(_BYTE *)(Row + 46) != 39);
    if (*(_BYTE *)(Row + 46) != 39
      || (*(_BYTE *)(Row + 45) & 1) == 0
      || (*(_BYTE *)(Row + 45) & 2) == 0 && (*(_QWORD *)(Row + 96) & 0xF00000000000) == 0x300000000000)
    {
LABEL_18:
      WebCore::RenderTableRow::createAnonymousWithParentRenderer(a2, a3, &v17);
      Row = v17;
      v13 = *(_QWORD *)this;
      v16 = v17;
      v17 = 0;
      WebCore::RenderTreeBuilder::attach(v13, a2, (unint64_t *)&v16);
      if (v16)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v16, v16);
      *a4 = 0;
      v14 = v17;
      v17 = 0;
      if (v14)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v17, v14);
    }
  }
  return (WebCore::RenderTableSection *)Row;
}

void WebCore::RenderTableSection::willInsertTableRow(WebCore::RenderTableSection *this, WebCore::RenderTableRow *a2, WebCore::RenderObject *a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;

  if (a3)
    WebCore::RenderTableSection::setNeedsCellRecalc(this);
  v6 = *((_DWORD *)this + 59);
  v7 = v6 + 1;
  *((_DWORD *)this + 58) = 0;
  *((_DWORD *)this + 59) = v7;
  v8 = (uint64_t *)((char *)this + 200);
  v9 = *((unsigned int *)this + 53);
  LODWORD(v10) = v9;
  if (v9 < v7)
  {
    WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)this + 200, v7);
    v25 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    v26 = *(unsigned __int8 *)(v25 + 46);
    if (v26 != 35 && v26 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x194292270);
    }
    LODWORD(v10) = *((_DWORD *)this + 53);
    if (v10 > v9)
    {
      v27 = *(_DWORD *)(v25 + 228);
      if (v27 <= 1)
        v28 = 1;
      else
        v28 = v27;
      v29 = 40 * v9;
      do
      {
        WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit(*((_QWORD *)this + 25) + v29, v28);
        ++v9;
        v10 = *((unsigned int *)this + 53);
        v29 += 40;
      }
      while (v9 < v10);
    }
  }
  if (v10 <= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194292278);
  }
  *(_QWORD *)(*v8 + 40 * v6 + 16) = a2;
  if (v6 >= 0x7FFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x194292280);
  }
  *((_DWORD *)a2 + 50) = *((_DWORD *)a2 + 50) & 0x80000000 | v6;
  if (!a3)
  {
    if (*((_DWORD *)this + 53) <= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x194292288);
    }
    v11 = *v8;
    v12 = *(_QWORD *)(*v8 + 40 * v6 + 16);
    v13 = ((*(_DWORD *)(v12 + 124) >> 13) & 6) - 2;
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 8);
    v15 = v13 >= 4;
    v16 = v14 + 4;
    v17 = v14 + 12;
    if (v15)
      v18 = v17;
    else
      v18 = v16;
    v19 = (_DWORD *)(v11 + 40 * v6 + 28);
    if (v19 != (_DWORD *)v18)
    {
      v20 = v11 + 40 * v6;
      v22 = *(unsigned __int8 *)(v20 + 32);
      v21 = (_BYTE *)(v20 + 32);
      if (v22 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v19);
      }
      v23 = *(unsigned __int8 *)(v18 + 4);
      *v21 = v23;
      *(_BYTE *)(v11 + 40 * v6 + 33) = *(_BYTE *)(v18 + 5);
      if (v23 <= 0xD)
      {
        v24 = 1 << v23;
        if ((v24 & 0x7FC) != 0)
        {
          *(_BYTE *)(v11 + 40 * v6 + 34) = *(_BYTE *)(v18 + 6);
          *v19 = *(_DWORD *)v18;
        }
        else if ((v24 & 0x3003) != 0)
        {
          *v19 = 0;
        }
        else
        {
          *v19 = *(_DWORD *)v18;
          WebCore::Length::ref((int *)(v11 + 40 * v6 + 28));
        }
      }
    }
  }
}

void WebCore::RenderTreeBuilder::Inline::attach(uint64_t *a1, WebCore::RenderObject *a2, const WebCore::RenderObject **a3, WebCore::RenderObject *a4)
{
  const WebCore::RenderObject *v4;
  const WebCore::RenderObject *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WebCore::RenderTreeBuilder::MultiColumn *v21;
  WebCore::RenderObject *v22;
  uint64_t *v23;
  const WebCore::RenderObject **v24;
  WebCore::RenderObject *v25;
  const WebCore::RenderObject *v26;
  const WebCore::RenderObject *v27;

  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v23 = a1;
    v24 = a3;
    v25 = a4;
    v22 = a2;
    v21 = (WebCore::RenderTreeBuilder::MultiColumn *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 648))(a2);
    if (v21)
    {
      a4 = WebCore::RenderTreeBuilder::MultiColumn::resolveMovedChild(v21, v21, v25);
      a2 = v22;
    }
    else
    {
      a2 = v22;
      a4 = v25;
    }
    a1 = v23;
    a3 = v24;
  }
  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
    goto LABEL_3;
  ++dword_1ECE91378;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v9 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v12);
  if (v13 == -1 || v13 != v7)
  {
    v18 = 1;
    do
    {
      v12 = ((_DWORD)v12 + v18) & v8;
      v19 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v12);
      ++v18;
    }
    while (v19 == -1 || v19 != v7);
  }
  v15 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v12 + 8) + 16);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_3:
    v4 = *a3;
    *a3 = 0;
LABEL_4:
    v26 = v4;
    WebCore::RenderTreeBuilder::Inline::attachIgnoringContinuation(a1, a2, (uint64_t *)&v26, (uint64_t)a4);
    v5 = v26;
    if (!v26)
      return;
    v6 = (uint64_t *)&v26;
    goto LABEL_6;
  }
  v17 = *(_QWORD *)(v16 + 8);
  v4 = *a3;
  *a3 = 0;
  if (!v17)
    goto LABEL_4;
  v27 = v4;
  WebCore::RenderTreeBuilder::Inline::insertChildToContinuation(a1, a2, &v27, (uint64_t)a4);
  v5 = v27;
  if (v27)
  {
    v6 = (uint64_t *)&v27;
LABEL_6:
    WebCore::RenderObjectDeleter::operator()((uint64_t)v6, (uint64_t)v5);
  }
}

void WebCore::RenderTreeBuilder::Inline::attachIgnoringContinuation(uint64_t *a1, WebCore::RenderObject *this, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  int v16;
  const WTF::StringImpl *v17;
  WebCore::RenderObject *v18;
  WebCore::RenderObject *v19;
  WebCore::RenderObject *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const WebCore::Element *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::RenderBoxModelObject *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v51;
  uint64_t v52;
  WebCore::RenderBoxModelObject *v53;
  _QWORD v54[2];
  unint64_t v55;

  v4 = a4;
  if (!a4)
  {
    v8 = *(unsigned int *)((char *)this + 71);
    if (!(v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32))
      || (v4 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8)) != 0
      && ((*(_BYTE *)(v4 + 45) & 2) != 0 || (*(_QWORD *)(v4 + 96) & 0xF80000000000) != 0x380000000000))
    {
      v4 = 0;
    }
  }
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 20);
  if ((v10 & 1) != 0)
  {
    switch(*(_BYTE *)(v9 + 46))
    {
      case '$':
      case '(':
        v22 = *((unsigned __int8 *)this + 46);
        goto LABEL_35;
      case '%':
        if (*((_BYTE *)this + 46) != 39)
          goto LABEL_37;
        goto LABEL_16;
      case '&':
        v22 = *((unsigned __int8 *)this + 46);
        if (v22 == 38 && (*(_QWORD *)(v9 + 96) & 0x1FLL) == 11)
          goto LABEL_16;
LABEL_35:
        if (v22 == 35 || v22 == 63)
          goto LABEL_16;
LABEL_37:
        if ((*((_BYTE *)this + 96) & 0x1F) == 0)
          goto LABEL_5;
LABEL_16:
        if ((v10 & 0x800) != 0 || (v10 & 0x1800000) == 0x1000000)
          goto LABEL_5;
        v18 = WebCore::RenderObject::containingBlock(this);
        v19 = this;
        if (v18)
          v19 = WebCore::RenderObject::containingBlock(this);
        WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)v19 + 10, (WTF::StringImpl *)1, v17, (uint64_t)v54);
        v20 = this;
        break;
      case '\'':
        if (*((_BYTE *)this + 46) != 40)
          goto LABEL_37;
        goto LABEL_16;
      default:
        goto LABEL_16;
    }
    while ((*((_BYTE *)v20 + 45) & 0x20) != 0)
    {
      if ((*((_BYTE *)v20 + 22) & 0x80) != 0)
      {
        v55 = v55 & 0xFFFFFFFFFFC7FFFFLL | (((*((_QWORD *)v20 + 12) >> 19) & 7) << 19);
        break;
      }
      v21 = *((_QWORD *)v20 + 4);
      if (v21)
      {
        v20 = *(WebCore::RenderObject **)(v21 + 8);
        if (v20)
          continue;
      }
      break;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    v24 = bmalloc::api::isoAllocate();
    v25 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v24, 1, v23, v54, 76, 1);
    *(_OWORD *)(v25 + 184) = 0u;
    *(_OWORD *)(v25 + 168) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    *(_QWORD *)v25 = off_1E341F9F8;
    *(_DWORD *)(v25 + 200) = -1;
    *(_BYTE *)(v25 + 204) &= 0xFCu;
    *(_BYTE *)(v25 + 208) = 0;
    *(_BYTE *)(v25 + 212) = 0;
    *(_DWORD *)(v25 + 240) = 0;
    *(_QWORD *)(v25 + 216) = 0;
    *(_QWORD *)(v25 + 224) = 0;
    *(_DWORD *)(v25 + 20) |= 0x40000u;
    WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v25, v26, v27, v28);
    v30 = 0;
    *(_WORD *)(v24 + 69) |= 0x20u;
    if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) != 0)
    {
      ++dword_1ECE91378;
      v37 = *((_QWORD *)this + 1);
      v38 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v39 = (~(v37 << 32) + v37) ^ ((unint64_t)(~(v37 << 32) + v37) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v42 = v38 & ((v41 >> 31) ^ v41);
      v43 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v42);
      if (v43 == -1 || v43 != v37)
      {
        v47 = 1;
        do
        {
          v42 = ((_DWORD)v42 + v47) & v38;
          v48 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v42);
          ++v47;
        }
        while (v48 == -1 || v48 != v37);
      }
      v45 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v42 + 8) + 16);
      if (v45 && (v46 = *v45) != 0)
      {
        v30 = *(_QWORD *)(v46 + 8);
        if (v30)
        {
          *(_WORD *)(v30 + 69) &= ~0x10u;
          WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::remove((uint64_t)&WebCore::continuationChainNodeMap(void)::map, (_QWORD *)v30);
        }
      }
      else
      {
        v30 = 0;
      }
    }
    v31 = WebCore::RenderBoxModelObject::ensureContinuationChainNode(this, v29);
    v33 = WebCore::RenderBoxModelObject::ensureContinuationChainNode((WebCore::RenderBoxModelObject *)v24, v32);
    v34 = *(_QWORD *)(v31 + 16);
    *(_QWORD *)(v33 + 16) = v34;
    if (v34)
      *(_QWORD *)(v34 + 8) = v33;
    *(_QWORD *)(v33 + 8) = v31;
    *(_QWORD *)(v31 + 16) = v33;
    v35 = *a3;
    *a3 = 0;
    v52 = v35;
    v53 = (WebCore::RenderBoxModelObject *)v24;
    WebCore::RenderTreeBuilder::Inline::splitFlow(a1, this, v4, &v53, (unint64_t *)&v52, (WebCore::RenderBoxModelObject *)v30);
    if (v52)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v52, v52);
    v36 = v53;
    if (v53)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v53, (uint64_t)v53);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v54, v36);
  }
  else
  {
LABEL_5:
    v11 = *a1;
    *a3 = 0;
    v51 = v9;
    WebCore::RenderTreeBuilder::attachToRenderElement(v11, (uint64_t)this, (const WebCore::RenderStyle *)&v51, v4);
    v12 = v51;
    v51 = 0;
    if (v12)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v51, v12);
    v13 = *(_DWORD *)(v9 + 20);
    if ((v13 & 8) == 0)
    {
      *(_DWORD *)(v9 + 20) = v13 | 8;
      v14 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v9, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v9, v14);
      if ((*(_BYTE *)(v9 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v9 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19429263CLL);
        }
        v15 = *(_QWORD *)(v9 + 144);
        if (v15)
        {
          v16 = *(_DWORD *)(v15 + 8) + 1;
          *(_DWORD *)(v15 + 8) = v16;
        }
        else
        {
          v16 = MEMORY[8];
        }
        *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x194292668);
        }
        *(_DWORD *)(v15 + 8) = v16 - 1;
      }
    }
    WebCore::RenderObject::setPreferredLogicalWidthsDirty(v9, 1, 1);
  }
}

void WebCore::RenderLineBoxList::dirtyLinesFromChangedChild(WebCore::RenderLineBoxList *this, WebCore::RenderBoxModelObject *a2, WebCore::RenderObject *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  int v12;
  WebCore::RenderElement *v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 46);
  if (v4 == 83 || v4 == 103)
    goto LABEL_3;
  v14 = *((_BYTE *)a2 + 52) & 7;
  if (v14 == 1)
  {
    if ((*((_BYTE *)a2 + 53) & 8) != 0)
      goto LABEL_3;
  }
  else if (v14 == 4)
  {
    goto LABEL_3;
  }
  if ((v4 - 71) <= 0xF && ((1 << (v4 - 71)) & 0xA001) != 0)
  {
LABEL_3:
    v5 = *((_QWORD *)a2 + 4);
    if (!v5)
      return;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || (*((_BYTE *)a2 + 52) & 7) == 1 && (*((_BYTE *)a2 + 20) & 8) != 0)
      return;
    v7 = v4 - 71;
    v8 = v7 > 0xF;
    v9 = (1 << v7) & 0xA001;
    if (!v8 && v9 != 0)
      this = (WebCore::RenderBoxModelObject *)((char *)a2 + 152);
    v11 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      do
      {
        v18 = v11;
        v11 = *(_QWORD *)(v11 + 24);
      }
      while (v11);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 88))(v18) & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 176))(v18, 1);
        return;
      }
    }
    else
    {
      if ((*((_BYTE *)a2 + 20) & 1) != 0)
        return;
      if ((*(_WORD *)((_BYTE *)a2 + 69) & 1) != 0)
        return;
      (*(void (**)(uint64_t, WebCore::RenderBoxModelObject *))(*(_QWORD *)v6 + 672))(v6, a2);
      *(_WORD *)((char *)a2 + 69) |= 1u;
      v12 = *((_DWORD *)a2 + 5);
      if ((v12 & 8) != 0)
        return;
      *((_DWORD *)a2 + 5) = v12 | 8;
      v13 = WebCore::RenderObject::markContainingBlocksForLayout(a2, 0);
      WebCore::RenderObject::scheduleLayout(a2, v13);
      if ((*((_BYTE *)a2 + 21) & 0x80) == 0)
        return;
      if ((*((_BYTE *)a2 + 45) & 0x10) != 0)
      {
        v16 = *((_QWORD *)a2 + 18);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 8) + 1;
          *(_DWORD *)(v16 + 8) = v17;
        }
        else
        {
          v17 = MEMORY[8];
        }
        *(_QWORD *)(v16 + 24) = *(_QWORD *)(v16 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v17)
        {
          __break(0xC471u);
          JUMPOUT(0x194292A98);
        }
        *(_DWORD *)(v16 + 8) = v17 - 1;
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x194292A6CLL);
  }
}

void WebCore::RenderInline::dirtyLinesFromChangedChild(WebCore::RenderInline *this, WebCore::RenderObject *a2)
{
  WebCore::RenderLineBoxList::dirtyLinesFromChangedChild((WebCore::RenderInline *)((char *)this + 152), this, a2);
}

void WebCore::RenderTable::willInsertTableSection(WebCore::RenderTable *this, WebCore::RenderTableSection *a2, WebCore::RenderObject *a3)
{
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  WebCore::RenderElement *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  unint64_t j;
  uint64_t v29;
  WTF *v30;

  v6 = *((_DWORD *)a2 + 24) & 0x1F;
  if (v6 == 6)
  {
LABEL_2:
    v7 = (char *)this + 288;
    v8 = *((_QWORD *)this + 36);
    if (a3)
    {
      if (!v8)
        goto LABEL_4;
      v24 = *(_QWORD *)(v8 + 8);
      if (!v24)
        goto LABEL_4;
      for (i = *((unsigned int *)a3 + 10) | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32);
            i;
            i = *(unsigned int *)(v26 + 40) | ((unint64_t)*(unsigned __int8 *)(v26 + 44) << 32))
      {
        v26 = *(_QWORD *)(i + 8);
        if (!v26)
          break;
        if (v24 == v26)
          goto LABEL_3;
      }
      WTF::WeakPtr<WebCore::RenderTableSection,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::clear((WTF **)this + 36, a2);
      v8 = *(_QWORD *)v7;
    }
LABEL_3:
    if (v8 && *(_QWORD *)(v8 + 8))
      goto LABEL_9;
LABEL_4:
    v9 = *((_QWORD *)a2 + 1);
    if (!v9)
    {
      v9 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = a2;
      v18 = (WTF *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v9;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
        {
          WTF::fastFree(v18, a2);
          v9 = *((_QWORD *)a2 + 1);
          if (!v9)
            goto LABEL_6;
        }
        else
        {
          --*(_DWORD *)v18;
        }
      }
    }
    ++*(_DWORD *)v9;
LABEL_6:
    v10 = *(WTF **)v7;
    *(_QWORD *)v7 = v9;
    if (!v10)
      goto LABEL_9;
    if (*(_DWORD *)v10 != 1)
    {
      --*(_DWORD *)v10;
      goto LABEL_9;
    }
    v19 = v10;
LABEL_31:
    WTF::fastFree(v19, a2);
    goto LABEL_9;
  }
  if (v6 != 7)
  {
    if (v6 != 8)
      goto LABEL_9;
    v16 = (WTF **)((char *)this + 280);
    WebCore::resetSectionPointerIfNotBefore((WTF **)this + 35, a3);
    v20 = *((_QWORD *)this + 35);
    if (v20 && *(_QWORD *)(v20 + 8))
      goto LABEL_2;
LABEL_36:
    WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v30, (uint64_t)a2);
    v22 = (uint64_t)v30;
    v30 = 0;
    v19 = *v16;
    *v16 = (WTF *)v22;
    if (!v19)
      goto LABEL_9;
    v23 = *(_DWORD *)v19 - 1;
    if (*(_DWORD *)v19 != 1)
      goto LABEL_38;
    WTF::fastFree(v19, v21);
    v19 = v30;
    v30 = 0;
    if (!v19)
      goto LABEL_9;
    v23 = *(_DWORD *)v19 - 1;
    if (*(_DWORD *)v19 != 1)
    {
LABEL_38:
      *(_DWORD *)v19 = v23;
      goto LABEL_9;
    }
    goto LABEL_31;
  }
  v7 = (char *)this + 272;
  v15 = *((_QWORD *)this + 34);
  if (a3)
  {
    if (!v15)
      goto LABEL_4;
    v27 = *(_QWORD *)(v15 + 8);
    if (!v27)
      goto LABEL_4;
    for (j = *((unsigned int *)a3 + 10) | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32);
          j;
          j = *(unsigned int *)(v29 + 40) | ((unint64_t)*(unsigned __int8 *)(v29 + 44) << 32))
    {
      v29 = *(_QWORD *)(j + 8);
      if (!v29)
        break;
      if (v27 == v29)
        goto LABEL_22;
    }
    WTF::WeakPtr<WebCore::RenderTableSection,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::clear((WTF **)this + 34, a2);
    v15 = *(_QWORD *)v7;
  }
LABEL_22:
  if (!v15 || !*(_QWORD *)(v15 + 8))
    goto LABEL_4;
  v16 = (WTF **)((char *)this + 288);
  WebCore::resetSectionPointerIfNotBefore((WTF **)this + 36, a3);
  v17 = *((_QWORD *)this + 36);
  if (!v17 || !*(_QWORD *)(v17 + 8))
    goto LABEL_36;
LABEL_9:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    *((_BYTE *)this + 328) |= 8u;
    v11 = *((_DWORD *)this + 5);
    if ((v11 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v11 | 8;
      v12 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v12);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194292D98);
        }
        v13 = *((_QWORD *)this + 18);
        if (v13)
        {
          v14 = *(_DWORD *)(v13 + 8) + 1;
          *(_DWORD *)(v13 + 8) = v14;
        }
        else
        {
          v14 = MEMORY[8];
        }
        *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x194292DC4);
        }
        *(_DWORD *)(v13 + 8) = v14 - 1;
      }
    }
  }
}

void WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  void *v12;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    v6 = v4 + (v4 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= a2)
      v7 = a2;
    if (v7 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x194292F08);
    }
    v8 = *(WTF **)a1;
    v9 = (WTF *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12));
    v10 = 40 * v7;
    v11 = WTF::fastMalloc((WTF *)(40 * v7));
    *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v11;
    WTF::VectorMover<false,WebCore::RenderTableSection::RowStruct>::move(v8, v9, v11);
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, v12);
    }
  }
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(a1 + 12);
    if (v5 != a2)
      bzero((void *)(*(_QWORD *)a1 + 40 * v5), 40 * ((40 * a2 - 40 * v5 - 40) / 0x28) + 40);
  }
  *(_DWORD *)(a1 + 12) = a2;
}

uint64_t WebCore::RenderTableSection::lastRow(unint64_t this)
{
  uint64_t result;

  if ((this & 0xFFFFFFFFFFLL) == 0)
    return 0;
  result = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
  if (result && *(_BYTE *)(result + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x194292F54);
  }
  return result;
}

uint64_t WebCore::RenderTableRow::lastCell(unint64_t this)
{
  uint64_t result;

  if ((this & 0xFFFFFFFFFFLL) == 0)
    return 0;
  result = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
  if (result)
  {
    if (*(_BYTE *)(result + 46) != 37)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::FrameTree::parent(WebCore::FrameTree *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

BOOL WebCore::WebLockManager::virtualHasPendingActivity(WebCore::WebLockManager *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 7);
  if (v1 && *(_DWORD *)(v1 - 12))
    return 1;
  v3 = *((_QWORD *)this + 6);
  return v3 && *(_DWORD *)(v3 - 12) != 0;
}

BOOL WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor(WebCore::RenderObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  _BOOL8 result;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  int16x8_t *v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  int v29;

  if ((*(_BYTE *)(a2 + 45) & 2) == 0)
  {
    v8 = *(_DWORD *)(a2 + 20);
    result = 1;
    if ((v8 & 0x800) != 0 || (v8 & 0x1800000) == 0x1000000)
      return result;
    if (*(_BYTE *)(a2 + 46) != 17)
    {
      if ((*(_BYTE *)(a2 + 52) & 7) == 3)
      {
        if (a4)
          return result;
      }
      else
      {
        if (a4)
          return result;
        if ((*(_BYTE *)(a2 + 45) & 0x20) == 0)
          return result;
        v24 = *(unsigned int *)(a2 + 64);
        if (v24 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
        {
          if (*(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8))
            return result;
        }
      }
    }
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    return 1;
  v11 = *(_BYTE **)(v10 + 8);
  if (!v11 || (v11[52] & 7) != 1 && ((v11[45] & 0x20) == 0 || (v11[21] & 2) != 0))
    return 1;
  if (((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a1 + 1672))(a1) & 1) != 0
    || **(_BYTE **)(a3 + 40))
  {
    return 1;
  }
  if ((*(_BYTE *)(a2 + 45) & 2) != 0)
  {
    v12 = *(unsigned __int16 *)(a2 + 116);
    if (v12 <= 0xFF)
    {
      v13 = *(_QWORD *)(a2 + 104);
      if (v13)
      {
        v14 = *(int16x8_t **)(v13 + 8);
        v15 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v14 = 0;
        v15 = 0x100000000;
      }
      LOWORD(v12) = WebCore::Layout::TextUtil::containsStrongDirectionalityText(v14, v15);
      *(_WORD *)(a2 + 116) = v12 | 0x100;
    }
    if ((_BYTE)v12)
      return 1;
  }
  else if ((*(_BYTE *)(a2 + 45) & 0x20) != 0
         && ((*(_BYTE *)(a2 + 123) & 4) != 0 || (*(_BYTE *)(a2 + 124) & 0x10) == 0 && (*(_WORD *)(a2 + 98) & 0x1C0) != 0))
  {
    return 1;
  }
  if ((*((_BYTE *)a1 + 102) & 2) != 0
    || (*((_BYTE *)a1 + 45) & 1) != 0
    && WebCore::RenderObject::containingBlock(a1)
    && (*((_BYTE *)WebCore::RenderObject::containingBlock(a1) + 102) & 2) != 0)
  {
    return 1;
  }
  v16 = *(_BYTE **)(a3 + 72);
  if (v16)
  {
    if (*v16 != 1 || !v16[40])
      return 1;
  }
  v17 = *((_DWORD *)a1 + 30);
  v19 = (v17 & 0x40000000) == 0 && (*((_DWORD *)a1 + 31) & 3) == 1;
  result = 1;
  if ((v17 & 0x4000000) == 0 && !v19)
  {
    if (a4 != 1)
    {
      if (!a4)
      {
        v25 = *(unsigned int *)(a2 + 47);
        if (v25 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)
          && *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8))
        {
          return WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor(WebCore::RenderBlockFlow const&,WebCore::RenderObject const&,WebCore::LayoutIntegration::LineLayout const&,WebCore::LayoutIntegration::TypeOfChangeForInvalidation)::$_4::operator()((uint64_t)a1);
        }
        return 0;
      }
      if (a4 != 2)
        return result;
      for (i = *((unsigned int *)a1 + 16) | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32);
            i;
            i = *(unsigned int *)(v27 + 47) | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32))
      {
        v27 = *(_QWORD *)(i + 8);
        if (!v27)
          break;
        if ((*(_BYTE *)(v27 + 45) & 2) == 0 && *(_BYTE *)(v27 + 46) != 17 && (*(_BYTE *)(v27 + 52) & 7) != 3)
          return 1;
      }
LABEL_72:
      if ((*((_BYTE *)a1 + 52) & 7) == 1 && (*((_BYTE *)a1 + 53) & 8) != 0)
      {
        v29 = *((unsigned __int8 *)a1 + 46);
        return v29 != 67 && v29 != 90;
      }
      return 0;
    }
    v20 = *(unsigned int *)(a2 + 40);
    if (v20 | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32)
      && *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32)) + 8)
      || (v21 = *(unsigned int *)(a2 + 47), v21 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32))
      && *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8))
    {
      v22 = *((unsigned int *)a1 + 16) | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32);
      if (v22)
      {
        while (1)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (!v23)
            break;
          if ((*(_BYTE *)(v23 + 45) & 2) == 0 && *(_BYTE *)(v23 + 46) != 17 && (*(_BYTE *)(v23 + 52) & 7) != 3)
            return 1;
          v22 = *(unsigned int *)(v23 + 47) | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32);
          if (!v22)
            goto LABEL_72;
        }
      }
      goto LABEL_72;
    }
  }
  return result;
}

uint64_t ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VisionKitCore.framework/VisionKitCore", 2);
  qword_1ECE7EE48 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL19AVFoundationLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
  qword_1ECE7D5F0 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WTF::Function<void ()(BOOL)>::operator=<std::function<void ()(BOOL)>,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<std::function<void ()(BOOL)>,void,BOOL>,std::function<void ()(BOOL)>>(a2, &v7);
  v3 = v7;
  v7 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v7;
    v7 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

BOOL WebCore::LocalDOMWindow::shouldHaveWebKitNamespaceForWorld(WebCore::LocalDOMWindow *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL8 v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1942935BCLL);
  }
  v4 = *(_QWORD *)(v3 + 240);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v7 = (unsigned int *)(v5 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(v5 + 24);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    ++*(_DWORD *)v10;
    v22 = 0;
    v11 = *(_DWORD **)(v10 + 936);
    ++v11[2];
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E33FF878;
    v12[1] = a2;
    v12[2] = &v22;
    v23 = v12;
    (*(void (**)(_DWORD *, _QWORD **))(*(_QWORD *)v11 + 32))(v11, &v23);
    v13 = v23;
    v23 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
    v14 = v22 != 0;
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::Page::~Page(v10);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  else
  {
    v14 = 0;
  }
  do
  {
    v15 = __ldaxr(v7);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v7));
  if (!v16)
  {
    atomic_store(1u, v7);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E31FE290;
    v20[1] = v7;
    v23 = v20;
    WTF::ensureOnMainThread();
    v21 = v23;
    v23 = 0;
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  }
  return v14;
}

void WebCore::IOSurface::createFromSendRight(mach_port_t *a1@<X0>, uint64_t *a2@<X8>)
{
  IOSurfaceRef v3;
  __IOSurface *v4;
  uint64_t v5;
  int v6;
  CFTypeRef cf;
  unsigned __int8 v8;

  v3 = IOSurfaceLookupFromMachPort(*a1);
  LOBYTE(cf) = 0;
  v8 = 0;
  if (v3)
  {
    v4 = v3;
    v5 = WTF::fastMalloc((WTF *)0x40);
    WebCore::IOSurface::IOSurface(v5, v4, (uint64_t *)&cf);
    v6 = v8;
    *a2 = v5;
    if (v6)
    {
      if (cf)
        CFRelease(cf);
    }
    CFRelease(v4);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_194293694(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  const void *v10;
  WTF *v11;

  WTF::fastFree(v11, a2);
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t WebCore::IOSurface::IOSurface(uint64_t a1, IOSurfaceRef buffer, uint64_t *a3)
{
  signed int PixelFormat;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int Width;
  CFPropertyListRef v11;

  PixelFormat = IOSurfaceGetPixelFormat(buffer);
  if (PixelFormat <= 1380401728)
  {
    if (PixelFormat == 875704934)
    {
      v7 = 0x100000000;
      v8 = 2;
      goto LABEL_13;
    }
    if (PixelFormat == 1111970369)
    {
      v7 = 0x100000000;
      v8 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    switch(PixelFormat)
    {
      case 1380401729:
        v7 = 0x100000000;
        v8 = 5;
        goto LABEL_13;
      case 1647534392:
        v7 = 0x100000000;
        v8 = 4;
        goto LABEL_13;
      case 1999843442:
        v7 = 0x100000000;
        v8 = 3;
        goto LABEL_13;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_13:
  *(_QWORD *)a1 = v8 | v7;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = buffer;
  if (buffer)
    CFRetain(buffer);
  Width = IOSurfaceGetWidth(buffer);
  *(_QWORD *)(a1 + 24) = Width | ((unint64_t)IOSurfaceGetHeight(buffer) << 32);
  *(_QWORD *)(a1 + 32) = IOSurfaceGetAllocSize(buffer);
  if (*(_BYTE *)(a1 + 16))
  {
    v11 = CGColorSpaceCopyPropertyList(*(CGColorSpaceRef *)(a1 + 8));
    IOSurfaceSetValue(*(IOSurfaceRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E0CBBF90], v11);
    if (v11)
      CFRelease(v11);
  }
  return a1;
}

void sub_194293850(_Unwind_Exception *a1)
{
  uint64_t v1;
  WTF::MachSendRight *v2;
  const void *v4;

  WTF::MachSendRight::~MachSendRight(v2);
  if (*(_BYTE *)(v1 + 16))
  {
    v4 = *(const void **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v4)
      CFRelease(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::HTMLMetaElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  return v3 & 1;
}

BOOL WebCore::HTMLBodyElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  result = 0;
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 120);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
            if (v10 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24)
              || v10 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLLinkElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  _QWORD *v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int **v9;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((v3 & 1) == 0)
    return 0;
  v5 = *(_QWORD **)(a1 + 40);
  if (*v5)
    v6 = (*(_WORD *)(*v5 + 28) & 0x80) == 0;
  else
    v6 = 1;
  if (v6)
    v9 = (unsigned int **)(v5[1] + 1328);
  else
    v9 = (unsigned int **)(*v5 + 216);
  v7 = *v9;
  *(_QWORD *)(a1 + 184) = *v9;
  WebCore::Style::Scope::addStyleSheetCandidateNode(v7, (WebCore::Node *)a1, (*(unsigned __int8 *)(a1 + 291) >> 1) & 1);
  return 1;
}

uint64_t WebCore::HTMLImageElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a1 + 128;
  WebCore::FormAssociatedElement::elementInsertedIntoAncestor((unsigned int *)(a1 + 128), a1);
  v9 = *(_QWORD *)(a1 + 136);
  if (!v9 || !*(_QWORD *)(v9 + 8))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      v11 = *(_WORD *)(v10 + 28);
      if ((v11 & 8) != 0)
      {
        while ((v11 & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
        {
          v10 = *(_QWORD *)(v10 + 32);
          if (!v10)
            goto LABEL_5;
          v11 = *(_WORD *)(v10 + 28);
          if ((v11 & 8) == 0)
            goto LABEL_4;
        }
        *(_DWORD *)(v10 + 24) += 2;
      }
      else
      {
LABEL_4:
        v10 = 0;
      }
    }
LABEL_5:
    v19 = v10;
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
    if (v10 != v9)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 80))(v6, &v19);
      v10 = v19;
    }
    v19 = 0;
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        v16 = *(_WORD *)(v10 + 30);
        if ((v16 & 0x400) == 0)
        {
          v17 = *(_WORD *)(v10 + 28);
          if ((v17 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v10, v8);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
              v16 = *(_WORD *)(v10 + 30);
            }
            *(_WORD *)(v10 + 30) = v16 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
          }
        }
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
  v12 = WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((a2 & 0x100) != 0 && *(_QWORD *)(a1 + 248))
    WebCore::TreeScope::addImageElementByUsemap(*(WebCore::TreeScope **)(a1 + 40), (WTF::StringImpl **)(a1 + 248), (const WebCore::TreeScope **)a1);
  if ((*(_WORD *)(a3 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
    && (v18 = *(_QWORD *)(a1 + 32)) != 0
    && v18 == a3
    && (*(_WORD *)(v18 + 28) & 8) != 0)
  {
    WebCore::HTMLImageElement::setPictureElement(a1, (_QWORD *)a3);
    WebCore::HTMLImageElement::selectImageSource(a1, (void *)1);
  }
  else if ((a2 & 1) != 0)
  {
    v14 = *(_QWORD *)(a1 + 176);
    v15 = *(_QWORD *)(v14 + 24);
    if (!v15 || !*(_QWORD *)(v15 + 8))
      WebCore::ImageLoader::updateFromElement(v14, 0);
  }
  return v12;
}

uint64_t WebCore::HTMLStyleElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  uint64_t v5;

  v3 = a2;
  v5 = WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((v3 & 1) != 0)
    WebCore::InlineStyleSheetOwner::insertedIntoDocument((WebCore::InlineStyleSheetOwner *)(a1 + 112), (WebCore::Element *)a1);
  return v5;
}

BOOL WebCore::HTMLScriptElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  return (v3 & 1) != 0 && (*(_WORD *)(a1 + 133) & 1) == 0;
}

uint64_t WebCore::HTMLElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::String *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  WebCore *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  WebCore::ContentSecurityPolicy *v31;
  unsigned int v32;
  int v33;
  unsigned int v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int16 v39;
  __int16 v40;
  WebCore::ContentSecurityPolicy *v41;
  WTF *v42;
  WebCore::ContentSecurityPolicy *v44;
  WTF *v45;
  WTF::StringImpl *v47;
  WebCore::ContentSecurityPolicy *v48;
  WTF::StringImpl *v49;
  char v50;
  WTF::StringImpl *v51;

  v7 = WebCore::Element::insertedIntoAncestor((WebCore::Element *)a1, (WebCore::Element *)a2, a3);
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v9 = *(_QWORD *)(a1 + 104);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        v11 = *(uint64_t **)(v9 + 40);
        LODWORD(v12) = *(_DWORD *)(v9 + 52);
        if (!(_DWORD)v12)
          goto LABEL_9;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 32);
        LODWORD(v12) = v10 >> 5;
        if (!(_DWORD)v12)
          goto LABEL_9;
      }
      v12 = v12;
      while (1)
      {
        v13 = *v11;
        if (*v11 == WebCore::HTMLNames::nonceAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v12)
          goto LABEL_9;
      }
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      *(_DWORD *)(v30 + 24) += 2;
      v31 = *(WebCore::ContentSecurityPolicy **)(v30 + 208);
      if (!v31)
      {
        (*(void (**)(WebCore::ContentSecurityPolicy **__return_ptr, uint64_t))(*(_QWORD *)(v30 + 192) + 56))(&v48, v30 + 192);
        v31 = v48;
        v48 = 0;
        v41 = *(WebCore::ContentSecurityPolicy **)(v30 + 208);
        *(_QWORD *)(v30 + 208) = v31;
        if (v41)
        {
          WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v41, v4);
          if (atomic_load((unsigned int *)v42))
          {
            v8 = 0uLL;
            *((_OWORD *)v42 + 13) = 0u;
            *((_OWORD *)v42 + 14) = 0u;
            *((_OWORD *)v42 + 11) = 0u;
            *((_OWORD *)v42 + 12) = 0u;
            *((_OWORD *)v42 + 9) = 0u;
            *((_OWORD *)v42 + 10) = 0u;
            *((_OWORD *)v42 + 7) = 0u;
            *((_OWORD *)v42 + 8) = 0u;
            *((_OWORD *)v42 + 5) = 0u;
            *((_OWORD *)v42 + 6) = 0u;
            *((_OWORD *)v42 + 3) = 0u;
            *((_OWORD *)v42 + 4) = 0u;
            *((_OWORD *)v42 + 1) = 0u;
            *((_OWORD *)v42 + 2) = 0u;
            *(_OWORD *)v42 = 0u;
          }
          else
          {
            WTF::fastFree(v42, v4);
          }
          v44 = v48;
          v48 = 0;
          if (v44)
          {
            WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v44, v4);
            if (atomic_load((unsigned int *)v45))
            {
              v8 = 0uLL;
              *((_OWORD *)v45 + 13) = 0u;
              *((_OWORD *)v45 + 14) = 0u;
              *((_OWORD *)v45 + 11) = 0u;
              *((_OWORD *)v45 + 12) = 0u;
              *((_OWORD *)v45 + 9) = 0u;
              *((_OWORD *)v45 + 10) = 0u;
              *((_OWORD *)v45 + 7) = 0u;
              *((_OWORD *)v45 + 8) = 0u;
              *((_OWORD *)v45 + 5) = 0u;
              *((_OWORD *)v45 + 6) = 0u;
              *((_OWORD *)v45 + 3) = 0u;
              *((_OWORD *)v45 + 4) = 0u;
              *((_OWORD *)v45 + 1) = 0u;
              *((_OWORD *)v45 + 2) = 0u;
              *(_OWORD *)v45 = 0u;
            }
            else
            {
              WTF::fastFree(v45, v4);
            }
          }
          v31 = *(WebCore::ContentSecurityPolicy **)(v30 + 208);
        }
      }
      do
        v32 = __ldaxr((unsigned int *)v31);
      while (__stlxr(v32 + 1, (unsigned int *)v31));
      v33 = *((unsigned __int8 *)v31 + 232);
      if (!atomic_load((unsigned int *)v31))
      {
        __break(0xC471u);
        JUMPOUT(0x194294000);
      }
      do
        v35 = __ldaxr((unsigned int *)v31);
      while (__stlxr(v35 - 1, (unsigned int *)v31));
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        v39 = *(_WORD *)(v30 + 30);
        if ((v39 & 0x400) == 0)
        {
          v40 = *(_WORD *)(v30 + 28);
          if ((v40 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v30, v4);
          }
          else
          {
            if ((v40 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 160) + 16))(*(_QWORD *)(v30 + 160));
              v39 = *(_WORD *)(v30 + 30);
            }
            *(_WORD *)(v30 + 30) = v39 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
          }
        }
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
      if (v33)
      {
        if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && WebCore::Element::isNonceable((WebCore::Element *)a1, (unsigned __int8 *)v4, v5, v6, v8))
        {
          v36 = (WTF::StringImpl **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 216);
        }
        else
        {
          v36 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
        }
        v37 = *v36;
        if (*v36)
        {
          *(_DWORD *)v37 += 2;
          v51 = v37;
          WebCore::Element::setAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::nonceAttr, MEMORY[0x1E0CBF3B8], 0, &v48, v8);
          if (v50 && v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v38);
            else
              *(_DWORD *)v49 -= 2;
          }
          WebCore::Element::setNonce((_QWORD *)a1, (const WTF::AtomString *)&v51);
          if (*(_DWORD *)v37 != 2)
          {
            *(_DWORD *)v37 -= 2;
            if (!a1)
              goto LABEL_11;
            goto LABEL_10;
          }
          WTF::StringImpl::destroy(v37, v4);
        }
        else
        {
          v51 = 0;
          WebCore::Element::setAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::nonceAttr, MEMORY[0x1E0CBF3B8], 0, &v48, v8);
          if (v50 && v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v47);
            else
              *(_DWORD *)v49 -= 2;
          }
          WebCore::Element::setNonce((_QWORD *)a1, (const WTF::AtomString *)&v51);
        }
      }
    }
  }
LABEL_9:
  if (!a1)
  {
LABEL_11:
    v14 = (uint64_t *)(a1 + 32);
    goto LABEL_12;
  }
LABEL_10:
  if ((*(_WORD *)(a1 + 28) & 0x80) == 0)
    goto LABEL_11;
  v21 = *(_QWORD *)(a1 + 200);
  if (!v21)
    return v7;
  v14 = (uint64_t *)(v21 + 8);
LABEL_12:
  v15 = *v14;
  if (!*v14)
    return v7;
  v16 = *(_WORD *)(v15 + 28);
  if ((v16 & 0x80) != 0)
  {
    v22 = *(_QWORD *)(v15 + 200);
    if (!v22)
      return v7;
    v15 = *(_QWORD *)(v22 + 8);
    if (!v15)
      return v7;
  }
  else if ((v16 & 8) == 0)
  {
    return v7;
  }
  v17 = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v17 + 2;
  if ((*(_BYTE *)(v15 + 79) & 0x40) != 0)
  {
    v23 = *(WebCore **)(*(_QWORD *)(a1 + 96) + 24);
    v24 = v23 == *(WebCore **)(WebCore::HTMLNames::inputTag + 24) ? a1 : 0;
    if (!WebCore::elementAffectsDirectionality(v23, *(const WebCore::HTMLElement **)(a1 + 104))
      && (!v24 || *(_DWORD *)(*(_QWORD *)(v24 + 240) + 12) != 0x20000))
    {
      v25 = *(_QWORD *)(a1 + 72) | 0x4000000000000000;
      *(_QWORD *)(a1 + 72) = v25;
      v26 = *(_QWORD *)(v15 + 72);
      if ((v26 & 0x4000000000000000) != 0)
        v27 = v26 >> 63;
      else
        LODWORD(v27) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 8) + 3360) != 0;
      v28 = (_DWORD)v27 == 0;
      v29 = 0x8000000000000000;
      if (v28)
        v29 = 0;
      *(_QWORD *)(a1 + 72) = v29 & 0x8000000000000000 | v25 & 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  if (v17)
  {
    *(_DWORD *)(v15 + 24) = v17;
  }
  else
  {
    v19 = *(_WORD *)(v15 + 30);
    if ((v19 & 0x400) == 0)
    {
      v20 = *(_WORD *)(v15 + 28);
      if ((v20 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v15, v4);
      }
      else
      {
        if ((v20 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
          v19 = *(_WORD *)(v15 + 30);
        }
        *(_WORD *)(v15 + 30) = v19 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      }
    }
  }
  return v7;
}

uint64_t WebCore::Element::insertedIntoAncestor(WebCore::Element *Ref, WebCore::Element *a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v5;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned int v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  const WebCore::TreeScope *v45;
  WebCore::TreeScopeOrderedMap *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::String *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **Attribute;
  void *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl **v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t i;
  uint64_t *v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  uint64_t v105;
  uint64_t j;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  WebCore::Document *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF **v115;
  const WTF::StringImpl **v116;
  const WTF::StringImpl *v117;
  const WTF::StringImpl *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF **v124;
  const WTF::StringImpl **v125;
  const WTF::StringImpl *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  uint64_t *v140;
  uint64_t IdentifierInternal;
  unint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WebCore::Page *v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176[2];
  char v177;
  uint64_t v178[2];
  char v179;
  char v180;
  char *v181;

  v5 = (__int16)a2;
  v6 = Ref;
  v7 = *((_QWORD *)Ref + 2);
  if ((a2 & 1) != 0)
  {
    v7 |= 0x8000000000000uLL;
    *((_QWORD *)Ref + 2) = v7;
  }
  if ((*(_BYTE *)(a3 + 22) & 0x10) != 0)
  {
    v17 = v7 | 0x10000000000000;
    *((_QWORD *)Ref + 2) = v17;
    if ((v17 & 0x8000000000000) == 0)
      goto LABEL_53;
  }
  else if ((v7 & 0x8000000000000) == 0)
  {
    goto LABEL_53;
  }
  v8 = *(_QWORD *)(*((_QWORD *)Ref + 5) + 8);
  if (*(_QWORD *)(v8 + 1944) && !*(_BYTE *)(v8 + 3405) && !*(_BYTE *)(v8 + 3392))
  {
    v9 = *((_WORD *)Ref + 15);
    v10 = *((_QWORD *)Ref + 8);
    if ((v10 & 0x4000000000000) == 0)
      *((_QWORD *)Ref + 8) = v10 & 0xFFF8FFFFFFFFFFFFLL | 0x4000000000000;
    *((_WORD *)Ref + 15) = v9 | 0x30;
    *((_DWORD *)Ref + 6) += 2;
    v11 = *((unsigned __int16 *)Ref + 14);
    if ((v11 & 0x80) != 0)
    {
      v19 = *((_QWORD *)Ref + 25);
      if (!v19)
        goto LABEL_44;
    }
    else if ((~v11 & 0x408) == 0
           && (Ref = (WebCore::Element *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)Ref + 368))(Ref),
               (_DWORD)Ref))
    {
      v19 = *((_QWORD *)v6 + 14);
      if (!v19)
        goto LABEL_44;
    }
    else
    {
      a2 = (WebCore::Element *)*((_QWORD *)v6 + 4);
      if (!a2)
        goto LABEL_44;
      v12 = *((_WORD *)a2 + 14);
      if ((v12 & 0x80) == 0)
      {
        if ((v12 & 8) == 0)
          goto LABEL_44;
        if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_17;
        v16 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (!v16)
          goto LABEL_17;
        Ref = *(WebCore::Element **)(v16 + 224);
        if (!Ref)
          goto LABEL_44;
        Ref = (WebCore::Element *)(*(uint64_t (**)(WebCore::Element *, WebCore::Element *))(*(_QWORD *)Ref + 16))(Ref, v6);
        a2 = Ref;
LABEL_38:
        if (!a2)
        {
LABEL_44:
          if (*((_DWORD *)v6 + 6) == 2)
          {
            v56 = *((_WORD *)v6 + 15);
            if ((v56 & 0x400) == 0)
            {
              v57 = *((_WORD *)v6 + 14);
              if ((v57 & 0xF000) == 0x9000)
              {
                Ref = (WebCore::Element *)WebCore::Document::removedLastRef(v6, a2);
              }
              else
              {
                if ((v57 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v6 + 20) + 16))(*((_QWORD *)v6 + 20));
                  v56 = *((_WORD *)v6 + 15);
                }
                *((_WORD *)v6 + 15) = v56 | 0x400;
                Ref = (WebCore::Element *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v6 + 72))(v6);
              }
            }
          }
          else
          {
            *((_DWORD *)v6 + 6) -= 2;
          }
LABEL_46:
          v21 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
          v22 = *(_QWORD *)(v21 + 1272);
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 64);
            if ((v23 & 0x8000000000000) != 0 || (v23 & 0x7000000000000) != 0 || (*(_WORD *)(v22 + 30) & 0x20) != 0)
            {
              *(_DWORD *)(v21 + 24) += 2;
              *(_QWORD *)(v21 + 64) |= 0x8000000000000uLL;
              if (((*(_QWORD *)(v21 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                 || *(double *)((*(_QWORD *)(v21 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                && !*(_BYTE *)(v21 + 3362))
              {
                *(_QWORD *)(v21 + 1528) = 0;
                WTF::MonotonicTime::now(Ref);
                Ref = (WebCore::Element *)WebCore::TimerBase::setNextFireTime(v21 + 1504, v24 + 0.0);
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  v82 = *(_QWORD *)(v21 + 528);
                  if (v82)
                  {
                    v83 = *(_QWORD *)(v82 + 8);
                    if (v83)
                    {
                      v84 = *(_QWORD *)(v83 + 24);
                      if (v84)
                      {
                        v85 = *(_QWORD *)(v84 + 8);
                        if (v85)
                          goto LABEL_197;
                      }
                    }
                  }
                  v86 = *(_QWORD *)(v21 + 2632);
                  if (v86)
                  {
                    v87 = *(_QWORD *)(v86 + 8);
                    if (v87)
                    {
                      v88 = *(_QWORD *)(v87 + 528);
                      if (v88)
                      {
                        v89 = *(_QWORD *)(v88 + 8);
                        if (v89)
                        {
                          v90 = *(_QWORD *)(v89 + 24);
                          if (v90)
                          {
                            v85 = *(_QWORD *)(v90 + 8);
                            if (v85)
                            {
LABEL_197:
                              Ref = *(WebCore::Element **)(*(_QWORD *)(v85 + 80) + 8);
                              if (Ref)
                                Ref = WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(Ref, (WebCore::Document *)v21);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (*(_DWORD *)(v21 + 24) == 2)
              {
                v54 = *(_WORD *)(v21 + 30);
                if ((v54 & 0x400) == 0)
                {
                  v55 = *(_WORD *)(v21 + 28);
                  if ((v55 & 0xF000) == 0x9000)
                  {
                    Ref = (WebCore::Element *)WebCore::Document::removedLastRef((WebCore::Document *)v21, a2);
                  }
                  else
                  {
                    if ((v55 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
                      v54 = *(_WORD *)(v21 + 30);
                    }
                    *(_WORD *)(v21 + 30) = v54 | 0x400;
                    Ref = (WebCore::Element *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v21 + 24) -= 2;
              }
            }
          }
          goto LABEL_53;
        }
LABEL_17:
        *((_QWORD *)a2 + 8) |= 0x10000000000000uLL;
        do
        {
          if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v15 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (v15)
              *(_QWORD *)(v15 + 64) |= 0x8000000000000uLL;
          }
          v13 = *((_QWORD *)a2 + 8);
          if ((v13 & 0x8000000000000) != 0)
            break;
          *((_QWORD *)a2 + 8) = v13 | 0x8000000000000;
          Ref = (WebCore::Element *)*((_QWORD *)a2 + 4);
          if (!Ref)
            break;
          v14 = *((_WORD *)Ref + 14);
          if ((v14 & 0x80) != 0)
          {
            v20 = *((_QWORD *)Ref + 25);
            if (!v20)
              break;
            Ref = *(WebCore::Element **)(v20 + 8);
          }
          else
          {
            if ((v14 & 8) == 0)
              break;
            if ((*((_QWORD *)Ref + 9) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v18 = *(_QWORD *)((*((_QWORD *)Ref + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
              if (v18)
              {
                Ref = *(WebCore::Element **)(v18 + 224);
                if (!Ref)
                  break;
                Ref = (WebCore::Element *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)Ref + 16))(Ref);
              }
            }
          }
          a2 = Ref;
        }
        while (Ref);
        if (!v6)
          goto LABEL_46;
        goto LABEL_44;
      }
      v19 = *((_QWORD *)a2 + 25);
      if (!v19)
        goto LABEL_44;
    }
    a2 = *(WebCore::Element **)(v19 + 8);
    goto LABEL_38;
  }
LABEL_53:
  if ((v5 & 0x100) == 0)
    goto LABEL_69;
  if ((v5 & 1) != 0
    && (*(_QWORD *)(a3 + 16) & 0x18000000000000) == 0x8000000000000
    && (v26 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8), (*(_WORD *)(v26 + 3358) & 1) != 0))
  {
    v27 = 0;
    *(_DWORD *)(v26 + 24) += 2;
  }
  else
  {
    v26 = 0;
    v27 = 1;
  }
  v28 = *((_QWORD *)v6 + 13);
  if (!v28)
  {
    v29 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    v30 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_62;
    goto LABEL_99;
  }
  if (*(_QWORD *)(v28 + 24))
  {
    v60 = *(_DWORD *)(v28 + 4);
    if ((v60 & 1) != 0)
    {
      v61 = *(_QWORD **)(v28 + 40);
      LODWORD(v62) = *(_DWORD *)(v28 + 52);
    }
    else
    {
      v61 = (_QWORD *)(v28 + 32);
      LODWORD(v62) = v60 >> 5;
    }
    if ((_DWORD)v62)
    {
      v62 = v62;
      while (1)
      {
        v63 = *v61;
        if (*v61 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v63 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v63 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v61 += 2;
        if (!--v62)
          goto LABEL_148;
      }
    }
    else
    {
LABEL_148:
      v61 = 0;
    }
    v29 = (WTF::StringImpl **)(v61 + 1);
  }
  else
  {
    v29 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v30 = *v29;
  if (*v29)
  {
LABEL_99:
    if (*((_DWORD *)v30 + 1))
    {
      Ref = (WebCore::Element *)WebCore::TreeScope::addElementById(*((WebCore::TreeScope **)v6 + 5), v29, (const WebCore::TreeScope **)v6, 1);
      if (v26)
        WebCore::Element::updateIdForDocument(v6, v26, MEMORY[0x1E0CBF2F8], v29, 0);
    }
  }
LABEL_62:
  v31 = *((_QWORD *)v6 + 13);
  if (!v31)
  {
    v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    v34 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_66;
    goto LABEL_103;
  }
  v32 = *(_DWORD *)(v31 + 4);
  if ((v32 & 2) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v75 = *(_QWORD **)(v31 + 40);
      LODWORD(v76) = *(_DWORD *)(v31 + 52);
    }
    else
    {
      v75 = (_QWORD *)(v31 + 32);
      LODWORD(v76) = v32 >> 5;
    }
    if ((_DWORD)v76)
    {
      v76 = v76;
      while (1)
      {
        v77 = *v75;
        if (*v75 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v77 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v77 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v75 += 2;
        if (!--v76)
          goto LABEL_184;
      }
    }
    else
    {
LABEL_184:
      v75 = 0;
    }
    v33 = (WTF::StringImpl **)(v75 + 1);
  }
  else
  {
    v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v34 = *v33;
  if (*v33)
  {
LABEL_103:
    if (*((_DWORD *)v34 + 1))
    {
      v45 = (const WebCore::TreeScope *)*((_QWORD *)v6 + 5);
      v46 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)v45 + 4);
      if (!v46)
      {
        v3 = v27;
        v46 = (WebCore::TreeScopeOrderedMap *)WTF::fastMalloc((WTF *)8);
        *(_QWORD *)v46 = 0;
        v92 = (uint64_t *)*((_QWORD *)v45 + 4);
        *((_QWORD *)v45 + 4) = v46;
        if (v92)
        {
          if (*v92)
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v92, v91);
          WTF::fastFree((WTF *)v92, v91);
          v46 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)v45 + 4);
        }
        LOBYTE(v27) = v3;
      }
      WebCore::TreeScopeOrderedMap::add(v46, v33, (const WebCore::TreeScope **)v6, v45);
      if (v26)
        WebCore::Element::updateNameForDocument(v6, (WebCore::HTMLDocument *)v26, MEMORY[0x1E0CBF2F8], v33);
    }
  }
LABEL_66:
  if ((v27 & 1) == 0)
  {
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
      {
        Ref = (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v26, a2);
        if ((v5 & 1) == 0)
          goto LABEL_80;
        goto LABEL_70;
      }
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
LABEL_69:
  if ((v5 & 1) == 0)
    goto LABEL_80;
LABEL_70:
  v35 = *((_QWORD *)v6 + 9);
  if ((v35 & 0x3000000000000000) == 0x1000000000000000)
  {
    Ref = WebCore::CustomElementReactionQueue::tryToUpgradeElement(v6, a2);
    v35 = *((_QWORD *)v6 + 9);
  }
  if ((v35 & 0x3000000000000000) == 0x2000000000000000)
  {
    v78 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFLL) + 0x60);
    v79 = *(_QWORD *)(*(_QWORD *)(v78 + 8) + 40);
    if (v79)
    {
      if (*(_QWORD *)v79 && (*(_BYTE *)(v79 + 8) & 3) == 0)
      {
        LOBYTE(v178[0]) = 2;
        v80 = *(_DWORD *)(v78 + 28);
        if (v80 == *(_DWORD *)(v78 + 24))
        {
          WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem::Type>(v78 + 16, v178);
        }
        else
        {
          v81 = (_BYTE *)(*(_QWORD *)(v78 + 16) + 56 * v80);
          *v81 = 2;
          v81[8] = 0;
          v81[48] = 0;
          ++*(_DWORD *)(v78 + 28);
        }
        Ref = WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v6, a2);
      }
    }
  }
  v36 = *((_QWORD *)v6 + 13);
  if (!v36)
    goto LABEL_80;
  v37 = *(_DWORD *)(v36 + 4);
  if ((v37 & 1) != 0)
  {
    v38 = *(uint64_t **)(v36 + 40);
    LODWORD(v39) = *(_DWORD *)(v36 + 52);
    if (!(_DWORD)v39)
      goto LABEL_80;
  }
  else
  {
    v38 = (uint64_t *)(v36 + 32);
    LODWORD(v39) = v37 >> 5;
    if (!(_DWORD)v39)
      goto LABEL_80;
  }
  v39 = v39;
  while (1)
  {
    v40 = *v38;
    if (*v38 == WebCore::HTMLNames::autofocusAttr
      || *(_QWORD *)(v40 + 24) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 24)
      && *(_QWORD *)(v40 + 32) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 32))
    {
      break;
    }
    v38 += 2;
    if (!--v39)
      goto LABEL_80;
  }
  v94 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
  *(_DWORD *)(v94 + 24) += 2;
  if ((*((_QWORD *)v6 + 2) & 0x18000000000000) != 0x8000000000000)
    goto LABEL_303;
  v95 = *(_QWORD *)(v94 + 528);
  if (!v95)
    goto LABEL_303;
  v96 = *(_QWORD *)(v95 + 8);
  if (!v96)
    goto LABEL_303;
  if ((*(_BYTE *)(v94 + 268) & 0x80) != 0)
    goto LABEL_300;
  v97 = *(_QWORD *)(*(_QWORD *)(v96 + 128) + 8);
  if (v97 == v96)
    goto LABEL_243;
  if ((*(_QWORD *)(*(_QWORD *)(v94 + 680) + 696) & 0x2000000000) != 0)
  {
    v156 = (unsigned int *)(v96 + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 + 1, v156));
    v158 = *(_QWORD *)(*(_QWORD *)(v96 + 128) + 8);
    if (!*(_BYTE *)(v158 + 144))
    {
      v159 = (unsigned int *)(v158 + 8);
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 + 1, v159));
      v161 = *(_QWORD *)(v158 + 296);
      if (v161)
      {
        *(_DWORD *)(v161 + 24) += 2;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v161 + 192), a2);
        v102 = v163;
        if (*(_DWORD *)(v161 + 24) == 2)
        {
          if ((*(_WORD *)(v161 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v161, v162);
        }
        else
        {
          *(_DWORD *)(v161 + 24) -= 2;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v159);
        goto LABEL_337;
      }
      Ref = (WebCore::Element *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v158 + 8));
    }
    v170 = *(_QWORD *)(v94 + 528);
    if (v170
      && (v171 = *(_QWORD *)(v170 + 8)) != 0
      && (v172 = *(_QWORD *)(v171 + 24)) != 0
      && (v173 = *(WebCore::Page **)(v172 + 8)) != 0)
    {
      ++*(_DWORD *)v173;
      WebCore::Page::mainFrameOrigin(v173);
      v102 = v174;
      WTF::RefCounted<WebCore::Page>::deref(v173);
    }
    else
    {
      WebCore::SecurityOrigin::opaqueOrigin(Ref);
      v102 = v175;
    }
LABEL_337:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v156);
    goto LABEL_238;
  }
  if (*(_BYTE *)(v94 + 3362) || *(_BYTE *)(v94 + 3405))
  {
    v147 = *(_QWORD *)(v96 + 120);
    i = v94;
    if (v147)
    {
      v148 = *(_QWORD *)(v147 + 8);
      for (i = v94; v148; v148 = *(_QWORD *)(v151 + 8))
      {
        i = *(_QWORD *)(*(_QWORD *)(v148 + 40) + 8);
        v149 = *(_QWORD *)(i + 528);
        if (!v149)
          break;
        v150 = *(_QWORD *)(v149 + 8);
        if (!v150)
          break;
        v151 = *(_QWORD *)(v150 + 120);
        if (!v151)
          break;
      }
    }
  }
  else
  {
    if (v97)
      v98 = *(_BYTE *)(v97 + 144) == 0;
    else
      v98 = 0;
    i = v94;
    if (v98)
    {
      i = v94;
      if (*(_QWORD *)(v97 + 296))
        i = *(_QWORD *)(v97 + 296);
    }
  }
  v100 = *(uint64_t **)(i + 200);
  if (v100)
    goto LABEL_236;
  if (!*(_BYTE *)(i + 280))
    goto LABEL_315;
  v102 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v102 = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v142 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v142 != -1)
  {
    v178[0] = (uint64_t)&v181;
    v176[0] = (WTF::StringImpl *)v178;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v120 = WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_338;
  v143 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(v102 + 8) = IdentifierInternal;
  *(_QWORD *)(v102 + 16) = v143;
  *(_DWORD *)(v102 + 32) = 1;
  v144 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v144 += 2;
  *(_QWORD *)(v102 + 40) = v144;
  *(_QWORD *)(v102 + 48) = 0;
  *(_QWORD *)(v102 + 54) = 0;
  *(_WORD *)(v102 + 62) = 1;
  v100 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v100 = 1;
  v100[1] = v102;
  v145 = *(uint64_t **)(i + 200);
  *(_QWORD *)(i + 200) = v100;
  if (!v145)
    goto LABEL_236;
  if (*(_DWORD *)v145 != 1)
  {
    --*(_DWORD *)v145;
    goto LABEL_236;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v145 + 1, a2);
  WTF::fastFree((WTF *)v145, v153);
  v100 = *(uint64_t **)(i + 200);
  if (!v100)
  {
LABEL_315:
    v102 = 0;
    goto LABEL_238;
  }
LABEL_236:
  v101 = (*(_DWORD *)v100)++;
  v102 = v100[1];
  if (v101)
  {
    *(_DWORD *)v100 = v101;
  }
  else
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v100 + 1, a2);
    WTF::fastFree((WTF *)v100, v134);
  }
LABEL_238:
  v103 = *(uint64_t **)(v94 + 200);
  if (v103)
    goto LABEL_239;
  if (!*(_BYTE *)(v94 + 280))
    goto LABEL_313;
  v135 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v135 = 1;
  v136 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v137 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v137 != -1)
  {
    v178[0] = (uint64_t)&v181;
    v176[0] = (WTF::StringImpl *)v178;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v120 = WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
LABEL_338:
    __break(1u);
    goto LABEL_339;
  }
  v138 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(v135 + 8) = v136;
  *(_QWORD *)(v135 + 16) = v138;
  *(_DWORD *)(v135 + 32) = 1;
  v139 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v139 += 2;
  *(_QWORD *)(v135 + 40) = v139;
  *(_QWORD *)(v135 + 48) = 0;
  *(_QWORD *)(v135 + 54) = 0;
  *(_WORD *)(v135 + 62) = 1;
  v103 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v103 = 1;
  v103[1] = v135;
  v140 = *(uint64_t **)(v94 + 200);
  *(_QWORD *)(v94 + 200) = v103;
  if (!v140)
    goto LABEL_239;
  if (*(_DWORD *)v140 != 1)
  {
    --*(_DWORD *)v140;
    goto LABEL_239;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v140 + 1, a2);
  WTF::fastFree((WTF *)v140, v152);
  v103 = *(uint64_t **)(v94 + 200);
  if (!v103)
  {
LABEL_313:
    v3 = 0;
    goto LABEL_241;
  }
LABEL_239:
  v104 = (*(_DWORD *)v103)++;
  v3 = v103[1];
  if (v104)
  {
    *(_DWORD *)v103 = v104;
  }
  else
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v103 + 1, a2);
    WTF::fastFree((WTF *)v103, v133);
  }
LABEL_241:
  if (v102 == v3 || *(_BYTE *)(v102 + 56))
  {
LABEL_243:
    if (*(_BYTE *)(v94 + 3362))
    {
      v105 = *(_QWORD *)(v94 + 528);
    }
    else
    {
      v105 = *(_QWORD *)(v94 + 528);
      if (!*(_BYTE *)(v94 + 3405))
      {
        j = v94;
        if (v105)
        {
          v107 = *(_QWORD *)(v105 + 8);
          j = v94;
          if (v107)
          {
            v108 = *(_QWORD *)(*(_QWORD *)(v107 + 128) + 8);
            v109 = v108 && *(_BYTE *)(v108 + 144) == 0;
            j = v94;
            if (v109)
            {
              v110 = *(_QWORD *)(v108 + 296);
              j = v94;
              if (v110)
                j = v110;
            }
          }
        }
LABEL_254:
        LODWORD(v102) = *(unsigned __int8 *)(j + 3401) == 0;
        goto LABEL_255;
      }
    }
    j = v94;
    if (v105)
    {
      v164 = *(_QWORD *)(v105 + 8);
      j = v94;
      if (v164)
      {
        v165 = *(_QWORD *)(v164 + 120);
        j = v94;
        if (v165)
        {
          v166 = *(_QWORD *)(v165 + 8);
          for (j = v94; v166; v166 = *(_QWORD *)(v169 + 8))
          {
            j = *(_QWORD *)(*(_QWORD *)(v166 + 40) + 8);
            v167 = *(_QWORD *)(j + 528);
            if (!v167)
              break;
            v168 = *(_QWORD *)(v167 + 8);
            if (!v168)
              break;
            v169 = *(_QWORD *)(v168 + 120);
            if (!v169)
              break;
          }
        }
      }
    }
    goto LABEL_254;
  }
  v112 = *(unsigned int *)(v102 + 32);
  if ((_DWORD)v112 == 1 || *(_DWORD *)(v3 + 32) == 1)
  {
    if ((_DWORD)v112 != -1)
    {
      v154 = v102 + 8;
      v176[0] = (WTF::StringImpl *)&v181;
      v102 = (uint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix;
      ((void (*)(uint64_t *__return_ptr, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v112])(v178, v176, v154);
      v155 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v155 != -1)
      {
        v181 = &v180;
        ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v155])(v176, &v181, v3 + 8);
        if (v179 && v177)
        {
          if ((WTF::StringImpl *)v178[0] == v176[0] && (WTF::StringImpl *)v178[1] == v176[1])
            goto LABEL_243;
        }
        else if ((v179 != 0) == (v177 != 0))
        {
          goto LABEL_243;
        }
        goto LABEL_300;
      }
    }
    goto LABEL_355;
  }
  if ((_DWORD)v112 == -1)
    goto LABEL_355;
  v178[0] = (uint64_t)v176;
  v113 = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v112])(v178, v102 + 8);
  v114 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v114 == -1)
    goto LABEL_355;
  v115 = (WTF **)v113;
  v178[0] = (uint64_t)v176;
  v116 = (const WTF::StringImpl **)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v114])(v178, v3 + 8);
  if (!WTF::equal(*v115, *v116, v117))
    goto LABEL_300;
  v119 = *(unsigned __int8 *)(v102 + 57);
  v120 = *(unsigned __int8 *)(v3 + 57);
  if (v119 | v120)
  {
LABEL_339:
    if (v119 && v120 && (WTF::equal(*(WTF **)(v102 + 40), *(const WTF::StringImpl **)(v3 + 40), v118) & 1) != 0)
      goto LABEL_276;
    goto LABEL_300;
  }
  v121 = *(unsigned int *)(v102 + 32);
  if ((_DWORD)v121 == -1)
    goto LABEL_355;
  v178[0] = (uint64_t)v176;
  v122 = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v121])(v178, v102 + 8);
  v123 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v123 == -1)
    goto LABEL_355;
  v124 = (WTF **)v122;
  v178[0] = (uint64_t)v176;
  v125 = (const WTF::StringImpl **)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v123])(v178, v3 + 8);
  if (!WTF::equal(*v124, *v125, v126))
    goto LABEL_300;
  v127 = *(unsigned int *)(v102 + 32);
  if ((_DWORD)v127 == -1
    || (v178[0] = (uint64_t)v176,
        v128 = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v127])(v178, v102 + 8), v129 = *(unsigned int *)(v3 + 32), (_DWORD)v129 == -1))
  {
LABEL_355:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_356:
    if (!(_DWORD)v102)
      goto LABEL_80;
    goto LABEL_257;
  }
  v130 = v128;
  v178[0] = (uint64_t)v176;
  v131 = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v129])(v178, v3 + 8);
  v132 = v131 & 0xFF0000;
  if ((v130 & 0xFF0000) != 0 && v132)
  {
    if ((unsigned __int16)v130 != (unsigned __int16)v131)
      goto LABEL_300;
LABEL_276:
    if (!*(_BYTE *)(v102 + 63) || !(*(unsigned __int8 *)(v102 + 59) | *(unsigned __int8 *)(v3 + 59)))
      goto LABEL_243;
    goto LABEL_300;
  }
  if (((v130 & 0xFF0000) != 0) == (v132 != 0))
    goto LABEL_276;
LABEL_300:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v176[0] = (WTF::StringImpl *)v178[0];
  WebCore::Document::addConsoleMessage((_QWORD *)v94, 8, 2, v176, 0);
  v146 = v176[0];
  v176[0] = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
      WTF::StringImpl::destroy(v146, a2);
    else
      *(_DWORD *)v146 -= 2;
  }
LABEL_303:
  LODWORD(v102) = 0;
LABEL_255:
  if (*(_DWORD *)(v94 + 24) == 2)
  {
    if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v94, a2);
      if ((v102 & 1) == 0)
        goto LABEL_80;
      goto LABEL_257;
    }
    goto LABEL_356;
  }
  *(_DWORD *)(v94 + 24) -= 2;
  if ((v102 & 1) != 0)
  {
LABEL_257:
    v111 = (WebCore::Document *)WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8));
    *((_DWORD *)v111 + 6) += 2;
    v178[0] = (uint64_t)v111;
    WebCore::Document::appendAutofocusCandidate(v111, v6);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v178);
  }
LABEL_80:
  if (*((_QWORD *)v6 + 4) == a3 && (*(_WORD *)(a3 + 28) & 8) != 0 && (*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v47 = *(_QWORD *)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v47)
    {
      v48 = *(_DWORD *)(v47 + 24) + 2;
      *(_DWORD *)(v47 + 24) = v48;
      v49 = *(_QWORD *)(v47 + 224);
      if (v49)
      {
        (*(void (**)(uint64_t, WebCore::Element *, uint64_t))(*(_QWORD *)v49 + 80))(v49, v6, v47);
        v48 = *(_DWORD *)(v47 + 24);
      }
      v50 = v48 - 2;
      if (v50)
      {
        *(_DWORD *)(v47 + 24) = v50;
      }
      else if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v47, a2);
      }
    }
  }
  v41 = *((_QWORD *)v6 + 4);
  if (v41 == a3 && (*(_WORD *)(a3 + 28) & 0xF000) == 0x9000)
  {
    WebCore::Element::clearEffectiveLangStateOnNewDocumentElement(v6, a2);
    v69 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
    *(_DWORD *)(v69 + 24) += 2;
    v70 = *((_QWORD *)v6 + 2);
    if ((v70 & 0x400000000000000) != 0)
    {
      v93 = &WebCore::XMLNames::langAttr;
    }
    else
    {
      if ((v70 & 0x200000000000000) == 0)
      {
        Attribute = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        goto LABEL_168;
      }
      v93 = &WebCore::HTMLNames::langAttr;
    }
    Attribute = (WTF::StringImpl **)WebCore::Element::getAttribute(v6, (const WebCore::QualifiedName *)v93, v66, v67, v68);
LABEL_168:
    WebCore::Document::setDocumentElementLanguage((WebCore::Document *)v69, Attribute, v66, v67);
    if (*(_DWORD *)(v69 + 24) == 2)
    {
      if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v69, v72);
    }
    else
    {
      *(_DWORD *)(v69 + 24) -= 2;
    }
    return 0;
  }
  if ((*((_BYTE *)v6 + 23) & 6) != 0)
    return 0;
  if ((*((_WORD *)v6 + 14) & 0x80) != 0)
  {
    v51 = *((_QWORD *)v6 + 25);
    if (!v51)
      goto LABEL_135;
    v41 = *(_QWORD *)(v51 + 8);
  }
  if (v41)
  {
    v42 = *(_WORD *)(v41 + 28);
    if ((v42 & 0x80) == 0)
    {
      if ((v42 & 8) != 0)
      {
LABEL_90:
        *(_DWORD *)(v41 + 24) += 2;
        if (v41 != *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 5) + 8) + 1272))
        {
          *((_WORD *)v6 + 15) = *((_WORD *)v6 + 15) & 0xFFF7 | *(_WORD *)(v41 + 30) & 8;
          if ((*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) == 0
            || (v73 = *(WTF::StringImpl **)((*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) + 0x40)) == 0)
          {
            v43 = *((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL;
            if (!v43)
              goto LABEL_93;
            v58 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *v58 += 2;
            v59 = *(WTF::StringImpl **)(v43 + 64);
            *(_QWORD *)(v43 + 64) = v58;
            if (!v59)
              goto LABEL_93;
LABEL_139:
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, a2);
            else
              *(_DWORD *)v59 -= 2;
LABEL_93:
            if (*(_DWORD *)(v41 + 24) == 2)
            {
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v41, a2);
            }
            else
            {
              *(_DWORD *)(v41 + 24) -= 2;
            }
            return 0;
          }
          if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v74 = (WTF::StringImpl **)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 64);
          }
          else
          {
            WebCore::Node::materializeRareData(v6);
            v73 = *(WTF::StringImpl **)((*(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
            v74 = (WTF::StringImpl **)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 64);
            if (!v73)
            {
LABEL_175:
              v59 = *v74;
              *v74 = v73;
              if (!v59)
                goto LABEL_93;
              goto LABEL_139;
            }
          }
          *(_DWORD *)v73 += 2;
          goto LABEL_175;
        }
        v52 = 0;
        LOWORD(v51) = 8;
        goto LABEL_117;
      }
      v41 = 0;
      goto LABEL_115;
    }
    v51 = *(_QWORD *)(v41 + 200);
    if (v51)
    {
      v41 = *(_QWORD *)(v51 + 8);
      if (v41)
        goto LABEL_90;
      goto LABEL_115;
    }
LABEL_135:
    v41 = 0;
    goto LABEL_116;
  }
LABEL_115:
  LOWORD(v51) = 0;
LABEL_116:
  v52 = 1;
LABEL_117:
  *((_WORD *)v6 + 15) = *((_WORD *)v6 + 15) & 0xFFF7 | v51;
  v53 = *((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL;
  if (v53)
  {
    v64 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v64 += 2;
    v65 = *(WTF::StringImpl **)(v53 + 64);
    *(_QWORD *)(v53 + 64) = v64;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, a2);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  if ((v52 & 1) == 0)
    goto LABEL_93;
  return 0;
}

void WebCore::Element::updateIdForDocument(WebCore::Element *a1, uint64_t a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5)
{
  uint64_t *NameAttribute;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!a5)
    goto LABEL_2;
  v14 = *((_WORD *)a1 + 14);
  if ((v14 & 0x10) == 0 || (v14 & 0x110) == 0x110)
  {
    if ((v14 & 0x10) == 0)
      goto LABEL_2;
    v15 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 24);
  }
  else
  {
    v15 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 24);
    if (v15 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24))
    {
LABEL_21:
      NameAttribute = WebCore::Element::getNameAttribute(a1);
      goto LABEL_3;
    }
  }
  if (v15 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24)
    || v15 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
    || v15 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
  {
    goto LABEL_21;
  }
LABEL_2:
  NameAttribute = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_3:
  v11 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 && *(_DWORD *)(v11 + 4) && v11 != *NameAttribute)
    WebCore::TreeScopeOrderedMap::remove((WebCore::TreeScopeOrderedMap *)(a2 + 3520), a3, a1);
  v12 = *a4;
  if (*a4 && *((_DWORD *)v12 + 1) && v12 != (WTF::StringImpl *)*NameAttribute)
    WebCore::TreeScopeOrderedMap::add((WebCore::TreeScopeOrderedMap *)(a2 + 3520), a4, (const WebCore::TreeScope **)a1, (const WebCore::TreeScope *)(a2 + 96));
  if ((*((_WORD *)a1 + 14) & 0x10) != 0)
  {
    if ((v13 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 24), v13 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
      && *((_BYTE *)a1 + 288)
      || v13 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      && (v16 = *((_QWORD *)a1 + 13)) != 0
      && (*(_BYTE *)(v16 + 4) & 2) != 0
      && (v17 = WebCore::Element::getNameAttribute(a1), *v17)
      && *(_DWORD *)(*v17 + 4))
    {
      if (a5 && WebCore::DocumentNameCollection::elementMatchesIfNameAttributeMatch(a1, (const WebCore::Element *)a2))
        v18 = WebCore::Element::getNameAttribute(a1);
      else
        v18 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      v19 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 && *(_DWORD *)(v19 + 4) && v19 != *v18)
        WebCore::HTMLDocument::removeDocumentNamedItem((WebCore::HTMLDocument *)a2, a3, a1);
      v20 = *a4;
      if (*a4 && *((_DWORD *)v20 + 1) && v20 != (WTF::StringImpl *)*v18)
        WebCore::HTMLDocument::addDocumentNamedItem((WebCore::HTMLDocument *)a2, a4, (const WebCore::TreeScope **)a1);
    }
  }
}

void WebCore::TreeScopeOrderedMap::add(WebCore::TreeScopeOrderedMap *this, WTF::StringImpl **a2, const WebCore::TreeScope **a3, const WebCore::TreeScope *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;

  if (a3[5] != a4)
  {
    __break(0xC471u);
    JUMPOUT(0x1942958D0);
  }
  if ((*((_BYTE *)a3 + 22) & 0x18) != 0)
  {
    v7 = *(_QWORD *)this;
    if (*(_QWORD *)this
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)this, 8u, 0), (v7 = *(_QWORD *)this) != 0))
    {
      v8 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      v8 = 0;
    }
    v9 = 0;
    v10 = *a2;
    v11 = *((_DWORD *)*a2 + 4) >> 8;
    for (i = 1; ; ++i)
    {
      v13 = v11 & v8;
      v14 = v7 + 40 * (v11 & v8);
      v15 = *(WTF::StringImpl **)v14;
      if (*(_QWORD *)v14 == -1)
      {
        v9 = v7 + 40 * v13;
      }
      else
      {
        if (!v15)
        {
          if (v9)
          {
            *(_QWORD *)(v9 + 32) = 0;
            *(_OWORD *)v9 = 0u;
            *(_OWORD *)(v9 + 16) = 0u;
            --*(_DWORD *)(*(_QWORD *)this - 16);
            v10 = *a2;
            v14 = v9;
          }
          if (v10)
            *(_DWORD *)v10 += 2;
          *(_QWORD *)v14 = v10;
          v24 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
          if (v24)
          {
            do
              v26 = __ldaxr(v24);
            while (__stlxr(v26 + 1, v24));
          }
          v27 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = v24;
          if (v27)
          {
            do
            {
              v28 = __ldaxr((unsigned int *)v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, (unsigned int *)v27));
            if (!v29)
            {
              atomic_store(1u, (unsigned int *)v27);
              v40 = *(unsigned int *)(v27 + 28);
              if ((_DWORD)v40)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v40));
              v41 = *(WTF **)(v27 + 16);
              if (v41)
              {
                *(_QWORD *)(v27 + 16) = 0;
                *(_DWORD *)(v27 + 24) = 0;
                WTF::fastFree(v41, v25);
              }
              WTF::fastFree((WTF *)v27, v25);
            }
          }
          *(_DWORD *)(v14 + 16) = 1;
          v30 = (uint64_t *)(v14 + 24);
          v31 = *(unsigned int *)(v14 + 36);
          if ((_DWORD)v31)
            WTF::VectorTypeOperations<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>::destruct(*v30, (uint64_t *)(*v30 + 8 * v31));
          v32 = (WTF *)*v30;
          if (*v30)
          {
            *(_QWORD *)(v14 + 24) = 0;
            *(_DWORD *)(v14 + 32) = 0;
            WTF::fastFree(v32, v25);
          }
          *v30 = 0;
          *(_QWORD *)(v14 + 32) = 0;
          v33 = *(_QWORD *)this;
          if (*(_QWORD *)this)
            v34 = *(_DWORD *)(v33 - 12) + 1;
          else
            v34 = 1;
          *(_DWORD *)(v33 - 12) = v34;
          v35 = *(_QWORD *)this;
          if (*(_QWORD *)this)
            v36 = *(_DWORD *)(v35 - 12);
          else
            v36 = 0;
          v37 = (*(_DWORD *)(v35 - 16) + v36);
          v38 = *(unsigned int *)(v35 - 4);
          if (v38 > 0x400)
          {
            if (v38 > 2 * v37)
              return;
          }
          else
          {
            if (3 * v38 > 4 * v37)
              return;
            if (!(_DWORD)v38)
            {
              v39 = 8;
LABEL_39:
              WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)this, v39, (WTF::StringImpl **)v14);
              return;
            }
          }
          v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
          goto LABEL_39;
        }
        if (v15 == v10)
        {
          v16 = v7 + 40 * v13;
          v18 = *(_DWORD *)(v16 + 16);
          v17 = (_DWORD *)(v16 + 16);
          if (!v18)
          {
            __break(0xC471u);
            JUMPOUT(0x194295914);
          }
          v19 = v7 + 40 * v13;
          v20 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr((unsigned int *)v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, (unsigned int *)v20));
            if (!v22)
            {
              atomic_store(1u, (unsigned int *)v20);
              v42 = *(unsigned int *)(v20 + 28);
              if ((_DWORD)v42)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v42));
              v43 = *(WTF **)(v20 + 16);
              if (v43)
              {
                *(_QWORD *)(v20 + 16) = 0;
                *(_DWORD *)(v20 + 24) = 0;
                WTF::fastFree(v43, a2);
              }
              WTF::fastFree((WTF *)v20, a2);
            }
          }
          ++*v17;
          v23 = v7 + 40 * v13;
          if (*(_DWORD *)(v23 + 32))
          {
            v44 = v23 + 24;
            v45 = *(unsigned int *)(v23 + 36);
            if ((_DWORD)v45)
            {
              WTF::VectorTypeOperations<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>::destruct(*(_QWORD *)v44, (uint64_t *)(*(_QWORD *)v44 + 8 * v45));
              *(_DWORD *)(v44 + 12) = 0;
            }
            v46 = *(WTF **)v44;
            if (*(_QWORD *)v44)
            {
              *(_QWORD *)v44 = 0;
              *(_DWORD *)(v44 + 8) = 0;
              WTF::fastFree(v46, a2);
            }
          }
          return;
        }
      }
      v11 = i + v13;
    }
  }
}

WTF::StringImpl **WebCore::TreeScope::addElementById(WebCore::TreeScope *this, WTF::StringImpl **a2, const WebCore::TreeScope **a3, int a4)
{
  WebCore::TreeScopeOrderedMap *v8;
  WTF::StringImpl **result;
  BOOL v10;
  void *v11;
  uint64_t *v12;
  WTF::StringImpl *v13;

  v8 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)this + 3);
  if (!v8)
  {
    v8 = (WebCore::TreeScopeOrderedMap *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v8 = 0;
    v12 = (uint64_t *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v8;
    if (v12)
    {
      if (*v12)
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v12, v11);
      WTF::fastFree((WTF *)v12, v11);
      v8 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)this + 3);
    }
  }
  WebCore::TreeScopeOrderedMap::add(v8, a2, a3, this);
  result = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (result)
    v10 = a4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v13 = result[1];
    if (v13)
    {
      if (*((_DWORD *)v13 - 3))
        return WebCore::IdTargetObserverRegistry::notifyObserversInternal(result, (const WTF::AtomString *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InlineStyleSheetOwner::insertedIntoDocument(WebCore::InlineStyleSheetOwner *this, WebCore::Element *a2)
{
  _QWORD *v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *result;
  WTF::StringBuilder *v13;
  uint64_t **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v4 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (*v4)
    v5 = (*(_WORD *)(*v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5)
    v14 = (uint64_t **)(v4[1] + 1328);
  else
    v14 = (uint64_t **)(*v4 + 216);
  v6 = *v14;
  v7 = **v14;
  if (v7)
    goto LABEL_30;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = v6;
  v15 = (unsigned int *)*v6;
  *v6 = v7;
  if (!v15)
    goto LABEL_30;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, a2);
  }
  v7 = *v6;
  if (*v6)
  {
LABEL_30:
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
  }
  v9 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
    v7 = *((_QWORD *)this + 5);
  }
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  result = (WTF::StringImpl *)WebCore::Style::Scope::addStyleSheetCandidateNode((unsigned int *)v7, a2, *(unsigned __int8 *)this);
  if (!*(_BYTE *)this)
  {
    WebCore::TextNodeTraversal::contentsAsString(a2, v13, &v19);
    WebCore::InlineStyleSheetOwner::createSheet(this, a2, &v19);
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Style::Scope::addStyleSheetCandidateNode(unsigned int *this, WebCore::Node *a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  WTF **v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int j;
  unsigned int v38;
  unsigned int **v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int **v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  uint64_t v64;
  unsigned int **v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  unsigned int **v69;
  unsigned int **v70;
  _BYTE v71[24];

  if ((*((_BYTE *)a2 + 22) & 8) == 0)
    return this;
  v4 = this;
  if (a3)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 1272);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        v6 = *(_QWORD *)(v5 + 80);
        if (v6)
        {
          while ((*(_WORD *)(v6 + 28) & 0x10) == 0)
          {
            v6 = *(_QWORD *)(v6 + 56);
            if (!v6)
              goto LABEL_9;
          }
          v9 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
          for (i = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24); i != v9; i = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24))
          {
            if (i == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
              break;
            do
            {
              v6 = *(_QWORD *)(v6 + 56);
              if (!v6)
                goto LABEL_9;
            }
            while ((*(_WORD *)(v6 + 28) & 0x10) == 0);
          }
          return (unsigned int *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>((uint64_t)(v4 + 48), (uint64_t)a2, (uint64_t)v71);
        }
      }
    }
  }
LABEL_9:
  v8 = (uint64_t *)(this + 48);
  v7 = *((_QWORD *)this + 24);
  if (!v7 || !*(_DWORD *)(v7 - 12))
    return (unsigned int *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>((uint64_t)(v4 + 48), (uint64_t)a2, (uint64_t)v71);
  v11 = (WTF **)(this + 50);
  v12 = (_QWORD *)*((_QWORD *)this + 25);
  if (!v12)
  {
LABEL_20:
    WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteAllNodes((uint64_t)(this + 48), a2);
    v14 = *v8;
    if (*v8)
    {
      *v8 = 0;
      WTF::fastFree((WTF *)(v14 - 16), v13);
      v14 = *v8;
      *v11 = 0;
      *((_QWORD *)v4 + 26) = 0;
      v4[54] = 0;
      if (v14)
      {
        LODWORD(v14) = *(_DWORD *)(v14 - 12);
        if (v14 > 0x7FFFFFFE)
          LODWORD(v14) = 0x7FFFFFFF;
      }
    }
    else
    {
      *v11 = 0;
      *((_QWORD *)v4 + 26) = 0;
      v4[54] = 0;
    }
    v4[55] = 2 * v14;
    return (unsigned int *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Node>((uint64_t)(v4 + 48), (uint64_t)a2, (uint64_t)v71);
  }
  v15 = (_QWORD *)*((_QWORD *)this + 25);
  while (!*(_QWORD *)(*v15 + 8))
  {
    v15 = (_QWORD *)v15[2];
    if (!v15)
      goto LABEL_20;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 25);
  do
  {
    if (*(_QWORD *)(*v16 + 8))
      break;
    v16 = (_QWORD *)v16[2];
  }
  while (v16);
  v17 = 0;
  v18 = 0;
  v19 = (unsigned int **)(this + 52);
  while (1)
  {
    v20 = v18;
    v21 = (_QWORD **)(v17 + 1);
    if (!v17)
      v21 = (_QWORD **)(v4 + 52);
    v22 = *v21;
    v17 = v12;
    if (v22 != v12)
    {
      do
      {
        if (*(_QWORD *)(*v22 + 8))
        {
          v17 = v22;
          goto LABEL_32;
        }
        v22 = (_QWORD *)v22[1];
      }
      while (v22 != v12);
      v17 = v12;
    }
LABEL_32:
    ++v4[54];
    v18 = *(_QWORD *)(*v17 + 8);
    *(_DWORD *)(v18 + 24) += 2;
    if (WebCore::Node::compareDocumentPosition((WebCore::Node *)v18, a2) == 4)
      break;
    if (v20)
    {
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, v23);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
    if (v17 == v16)
    {
      this = (unsigned int *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::insertBefore<WebCore::Node,WebCore::Node>((uint64_t)v71, (uint64_t)(v4 + 48), v18, (uint64_t)a2);
      v20 = v18;
      goto LABEL_68;
    }
  }
  if (v20)
  {
    this = (unsigned int *)WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::insertBefore<WebCore::Node,WebCore::Node>((uint64_t)v71, (uint64_t)(v4 + 48), v20, (uint64_t)a2);
    goto LABEL_65;
  }
  v24 = v4[55];
  v25 = v4[54] + 1;
  v4[54] = v25;
  if (v25 > v24)
  {
    v62 = *v11;
    if (*v11)
    {
      do
      {
        v63 = (WTF *)*((_QWORD *)v62 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v62 + 8))
          WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)v4 + 24, v4 + 48, v62);
        v62 = v63;
      }
      while (v63);
    }
    v4[54] = 0;
    v64 = *((_QWORD *)v4 + 24);
    if (v64)
    {
      LODWORD(v64) = *(_DWORD *)(v64 - 12);
      if (v64 > 0x7FFFFFFE)
        LODWORD(v64) = 0x7FFFFFFF;
    }
    v4[55] = 2 * v64;
  }
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v55 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v55 = 1;
    *(_QWORD *)(v55 + 16) = 0;
    *(_QWORD *)(v55 + 24) = 0;
    *(_QWORD *)(v55 + 8) = a2;
    *(_BYTE *)(v55 + 32) = 0;
    v56 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v56 & 0xFFFF000000000000 | v55;
    v57 = v56 & 0xFFFFFFFFFFFFLL;
    if ((v56 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v58 = __ldaxr((unsigned int *)v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, (unsigned int *)v57));
      if (!v59)
      {
        atomic_store(1u, (unsigned int *)v57);
        v60 = *(unsigned int *)(v57 + 28);
        if ((_DWORD)v60)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v57 + 16), (WTF::StringImpl *)(*(_QWORD *)(v57 + 16) + 32 * v60));
        v61 = *(WTF **)(v57 + 16);
        if (v61)
        {
          *(_QWORD *)(v57 + 16) = 0;
          *(_DWORD *)(v57 + 24) = 0;
          WTF::fastFree(v61, v23);
        }
        WTF::fastFree((WTF *)v57, v23);
      }
    }
  }
  v26 = *((_QWORD *)a2 + 2);
  v27 = v26 & 0xFFFFFFFFFFFFLL;
  do
    v28 = __ldaxr((unsigned int *)v27);
  while (__stlxr(v28 + 1, (unsigned int *)v27));
  do
    v29 = __ldaxr((unsigned int *)v27);
  while (__stlxr(v29 + 1, (unsigned int *)v27));
  v30 = *v8;
  if (*v8
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::expand(v8, 0), (v30 = *v8) != 0))
  {
    v31 = *(_DWORD *)(v30 - 8);
  }
  else
  {
    v31 = 0;
  }
  v32 = 0;
  v33 = (v27 + ~(v26 << 32)) ^ ((unint64_t)(v27 + ~(v26 << 32)) >> 22);
  v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
  v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
  v36 = (v35 >> 31) ^ v35;
  for (j = 1; ; ++j)
  {
    v38 = v36 & v31;
    v39 = (unsigned int **)(v30 + 8 * v38);
    this = *v39;
    if (!*v39)
    {
      if (v32)
      {
        *v32 = 0;
        --*(_DWORD *)(*v8 - 16);
        v39 = v32;
      }
      this = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = v27;
      *v39 = this;
      v40 = *v8;
      if (*v8)
        v41 = *(_DWORD *)(v40 - 12) + 1;
      else
        v41 = 1;
      *(_DWORD *)(v40 - 12) = v41;
      v42 = *v8;
      if (*v8)
        v43 = *(_DWORD *)(v42 - 12);
      else
        v43 = 0;
      v44 = (*(_DWORD *)(v42 - 16) + v43);
      v45 = *(unsigned int *)(v42 - 4);
      if (v45 > 0x400)
      {
        if (v45 > 2 * v44)
          goto LABEL_57;
      }
      else if (3 * v45 > 4 * v44)
      {
LABEL_57:
        v46 = 0;
        goto LABEL_58;
      }
      v65 = (unsigned int **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::expand(v8, (_QWORD **)v39);
      v46 = 0;
      this = *v65;
      goto LABEL_58;
    }
    if (this != (unsigned int *)-1)
    {
      v39 = v32;
      if (*(_QWORD *)this == v27)
        break;
    }
    v36 = j + v38;
    v32 = v39;
  }
  v68 = *((_QWORD *)this + 1);
  v69 = (unsigned int **)*((_QWORD *)this + 2);
  if (v68)
  {
    *(_QWORD *)(v68 + 16) = v69;
    v69 = (unsigned int **)*((_QWORD *)this + 2);
  }
  else
  {
    *v11 = (WTF *)v69;
  }
  if (v69)
    v70 = v69 + 1;
  else
    v70 = v19;
  *v70 = (unsigned int *)v68;
  v46 = v27;
LABEL_58:
  v47 = *v19;
  *((_QWORD *)this + 1) = *v19;
  *((_QWORD *)this + 2) = 0;
  if (v47)
    v48 = (unsigned int **)(v47 + 4);
  else
    v48 = (unsigned int **)v11;
  *v48 = this;
  *v19 = this;
  if (v46)
  {
    do
    {
      v51 = __ldaxr((unsigned int *)v46);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)v46));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)v46);
      v53 = *(unsigned int *)(v46 + 28);
      if ((_DWORD)v53)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v46 + 16), (WTF::StringImpl *)(*(_QWORD *)(v46 + 16) + 32 * v53));
      v54 = *(WTF **)(v46 + 16);
      if (v54)
      {
        *(_QWORD *)(v46 + 16) = 0;
        *(_DWORD *)(v46 + 24) = 0;
        WTF::fastFree(v54, v23);
      }
      this = (unsigned int *)WTF::fastFree((WTF *)v46, v23);
    }
  }
  if (v27)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v27);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v27));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v27);
      v66 = *(unsigned int *)(v27 + 28);
      if ((_DWORD)v66)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v66));
      v67 = *(WTF **)(v27 + 16);
      if (v67)
      {
        *(_QWORD *)(v27 + 16) = 0;
        *(_DWORD *)(v27 + 24) = 0;
        WTF::fastFree(v67, v23);
      }
      this = (unsigned int *)WTF::fastFree((WTF *)v27, v23);
    }
  }
LABEL_65:
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v18, v23);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  if (v20)
  {
LABEL_68:
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v20, v23);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::Node::compareDocumentPosition(WebCore::Node *this, WebCore::Node *a2)
{
  WebCore::Node *v4;
  unsigned __int8 *v5;
  WebCore::Node *v6;
  WTF::String *v7;
  __n128 v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  uint64_t v29;
  WebCore::Node *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WebCore::Node *v40;
  WTF *v41;
  uint64_t v42;
  _QWORD v43[16];
  WTF *v44;
  uint64_t v45;
  _QWORD v46[16];

  if (a2 == this)
    return 0;
  if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 184))(this))
    v4 = this;
  else
    v4 = 0;
  if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a2 + 184))(a2))
    v9 = a2;
  else
    v9 = 0;
  v10 = this;
  if (v4)
  {
    v10 = (WebCore::Node *)*((_QWORD *)v4 + 10);
    if (v10)
      v10 = (WebCore::Node *)*((_QWORD *)v10 + 1);
  }
  v11 = a2;
  if (v9)
  {
    v29 = *((_QWORD *)v9 + 10);
    if (!v29)
      return WebCore::compareDetachedElementsPosition(this, a2, v6);
    v11 = *(WebCore::Node **)(v29 + 8);
  }
  if (v10 && v11)
  {
    v44 = (WTF *)v46;
    v8.n128_u64[0] = 16;
    v45 = 16;
    v41 = (WTF *)v43;
    v42 = 16;
    if (v4)
    {
      v46[0] = v4;
      v12 = 1;
      HIDWORD(v45) = 1;
    }
    else
    {
      v12 = 0;
    }
    if (v9)
    {
      v43[0] = v9;
      HIDWORD(v42) = 1;
    }
    if (v4 && v9 && v10 == v11)
    {
      v30 = v9;
      v31 = *((_QWORD *)v4 + 10);
      if (v31)
        v32 = *(WTF::StringImpl **)(v31 + 8);
      else
        v32 = 0;
      WebCore::Element::synchronizeAllAttributes(v32, v5, (uint64_t)v6, v7, v8);
      v33 = *((_QWORD *)v32 + 13);
      v34 = *(_DWORD *)(v33 + 4);
      if ((v34 & 1) != 0)
      {
        v35 = *(_QWORD *)(v33 + 40);
        v36 = *(_DWORD *)(v33 + 52);
      }
      else
      {
        v35 = v33 + 32;
        v36 = v34 >> 5;
      }
      if (v36)
      {
        v37 = 0;
        v23 = 1;
        while (1)
        {
          v38 = *(_QWORD *)(v35 + 16 * v37);
          if (*((_QWORD *)v4 + 11) == v38)
          {
            v23 = 36;
            goto LABEL_51;
          }
          if (*((_QWORD *)v30 + 11) == v38)
            break;
          v39 = v37 + 1;
          v37 = (v37 + 1);
          if (v36 == v39)
            goto LABEL_51;
        }
        v23 = 34;
      }
      else
      {
        v23 = 1;
      }
      goto LABEL_51;
    }
    if (((*((unsigned __int8 *)v10 + 22) ^ *((unsigned __int8 *)v11 + 22)) & 8) != 0
      || *((_QWORD *)v10 + 5) != *((_QWORD *)v11 + 5))
    {
      goto LABEL_63;
    }
    v40 = v10;
    do
    {
      if (v12 == (_DWORD)v45)
      {
        v13 = (_QWORD *)WTF::Vector<WebCore::Node *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v12 + 1, (unint64_t)&v40);
        v12 = HIDWORD(v45);
        *((_QWORD *)v44 + HIDWORD(v45)) = *v13;
      }
      else
      {
        *((_QWORD *)v44 + v12) = v10;
      }
      HIDWORD(v45) = ++v12;
      v10 = (WebCore::Node *)*((_QWORD *)v40 + 4);
      v40 = v10;
    }
    while (v10);
    v40 = v11;
    v14 = HIDWORD(v42);
    do
    {
      if (v14 == (_DWORD)v42)
      {
        v16 = (_QWORD *)WTF::Vector<WebCore::Node *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, v14 + 1, (unint64_t)&v40);
        v15 = HIDWORD(v42);
        *((_QWORD *)v41 + HIDWORD(v42)) = *v16;
      }
      else
      {
        *((_QWORD *)v41 + v14) = v11;
        v15 = v14;
      }
      v14 = v15 + 1;
      HIDWORD(v42) = v15 + 1;
      v11 = (WebCore::Node *)*((_QWORD *)v40 + 4);
      v40 = v11;
    }
    while (v11);
    if (!HIDWORD(v45))
    {
      __break(0xC471u);
      JUMPOUT(0x19429666CLL);
    }
    if (v15 == -1)
    {
LABEL_91:
      __break(0xC471u);
      JUMPOUT(0x19429665CLL);
    }
    v17 = HIDWORD(v45) - 1;
    if (*((_QWORD *)v44 + (HIDWORD(v45) - 1)) != *((_QWORD *)v41 + v15))
    {
LABEL_63:
      v23 = WebCore::compareDetachedElementsPosition(this, a2, v6);
      goto LABEL_51;
    }
    if (v14 >= HIDWORD(v45))
      v18 = HIDWORD(v45);
    else
      v18 = v15 + 1;
    v19 = v14 - v18;
    v20 = HIDWORD(v45) - v18;
    while (1)
    {
      if (HIDWORD(v45) <= v17)
        goto LABEL_91;
      if (v14 <= v15)
      {
        __break(0xC471u);
        JUMPOUT(0x194296664);
      }
      v21 = *((_QWORD *)v44 + v17);
      v22 = *((_QWORD *)v41 + v15);
      if (v21 != v22)
        break;
      --v15;
      --v17;
      if (!--v18)
      {
        if (v20 >= v19)
          v23 = 10;
        else
          v23 = 20;
        goto LABEL_51;
      }
    }
    if ((*(_WORD *)(v21 + 28) & 0xF000) != 0x2000)
    {
      if ((*(_WORD *)(v22 + 28) & 0xF000) == 0x2000)
      {
LABEL_62:
        v23 = 2;
LABEL_51:
        v24 = v41;
        if (v43 != (_QWORD *)v41 && v41 != 0)
        {
          v41 = 0;
          LODWORD(v42) = 0;
          WTF::fastFree(v24, v5);
        }
        v26 = v44;
        if (v46 != (_QWORD *)v44 && v44 != 0)
        {
          v44 = 0;
          LODWORD(v45) = 0;
          WTF::fastFree(v26, v5);
        }
        return v23;
      }
      if (*(_QWORD *)(v22 + 56))
      {
        if (*(_QWORD *)(v21 + 56))
        {
          while (1)
          {
            v22 = *(_QWORD *)(v22 + 48) & 0xFFFFFFFFFFFFLL;
            if (!v22)
              break;
            if (v21 == v22)
              goto LABEL_50;
          }
        }
        goto LABEL_62;
      }
    }
LABEL_50:
    v23 = 4;
    goto LABEL_51;
  }
  return WebCore::compareDetachedElementsPosition(this, a2, v6);
}

uint64_t WebCore::Node::isAttributeNode(WebCore::Node *this)
{
  return 0;
}

unsigned int *WebCore::FormAssociatedElement::elementInsertedIntoAncestor(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  uint64_t i;
  uint64_t j;
  WTF *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;

  v2 = *((_QWORD *)result + 2);
  if (!v2)
    goto LABEL_2;
  v4 = *(unsigned int **)(v2 + 8);
  if (!v4)
    goto LABEL_2;
  v17 = result;
  v18 = a2;
  if ((*((_BYTE *)v4 + 22) & 8) != 0)
  {
    v5 = v4[6];
    v4[6] = v5 + 2;
    v19 = v4;
    v6 = *((_QWORD *)result + 1);
    if (v6 && v4 == *(unsigned int **)(v6 + 8))
    {
      v19 = 0;
    }
    else
    {
      (*(void (**)(unsigned int *, unsigned int **))(*(_QWORD *)result + 80))(result, &v19);
      v4 = v19;
      v19 = 0;
      if (!v4)
        goto LABEL_11;
      v5 = v4[6] - 2;
    }
    if (v5)
    {
      v4[6] = v5;
    }
    else if ((*((_WORD *)v4 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, (void *)a2);
    }
LABEL_11:
    result = v17;
    a2 = v18;
    v7 = (unsigned int *)*((_QWORD *)v17 + 2);
    *((_QWORD *)v17 + 2) = 0;
    if (!v7)
      goto LABEL_2;
    goto LABEL_12;
  }
  *((_QWORD *)result + 2) = 0;
  v7 = (unsigned int *)v2;
  do
  {
LABEL_12:
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    v16 = (WTF *)v7;
    v10 = v7[7];
    if ((_DWORD)v10)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v10));
    v11 = (WTF *)*((_QWORD *)v16 + 2);
    if (v11)
    {
      *((_QWORD *)v16 + 2) = 0;
      *((_DWORD *)v16 + 6) = 0;
      WTF::fastFree(v11, (void *)a2);
    }
    WTF::fastFree(v16, (void *)a2);
    result = v17;
    a2 = v18;
  }
LABEL_2:
  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    v12 = *(_QWORD *)(v3 + 8);
    if (v12)
    {
      if ((*(_BYTE *)(a2 + 22) & 8) != 0)
      {
        a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 1272);
      }
      else
      {
        for (i = *(_QWORD *)(a2 + 32); i; i = *(_QWORD *)(i + 32))
        {
          if ((*(_WORD *)(i + 28) & 8) == 0)
            break;
          a2 = i;
        }
      }
      if ((*(_BYTE *)(v12 + 22) & 8) != 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 1272);
      }
      else
      {
        for (j = *(_QWORD *)(v12 + 32); j; j = *(_QWORD *)(j + 32))
        {
          if ((*(_WORD *)(j + 28) & 8) == 0)
            break;
          v12 = j;
        }
      }
      if (a2 != v12)
      {
        v19 = 0;
        (*(void (**)(unsigned int *, unsigned int **))(*(_QWORD *)result + 80))(result, &v19);
        result = v19;
        v19 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)result, v13);
          }
          else
          {
            result[6] -= 2;
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::TextNodeTraversal::contentsAsString@<X0>(WebCore::TextNodeTraversal *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  WebCore::TextNodeTraversal::appendContents(this, (const WebCore::ContainerNode *)&v8, a2);
  result = v8;
  if (v8
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8),
        (result = v8) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a3 = result;
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      result = v8;
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::TextNodeTraversal::appendContents(_QWORD *this, const WebCore::ContainerNode *a2, WTF::StringBuilder *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  __int16 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  __int16 v14;
  _QWORD *v15;
  BOOL v16;

  v3 = (_QWORD *)this[10];
  if (v3)
  {
    v5 = this;
    v6 = *((_WORD *)v3 + 14);
    if ((v6 & 2) != 0)
    {
      v7 = this[10];
      goto LABEL_15;
    }
    do
    {
      if ((v6 & 4) == 0 || (v7 = v3[10]) == 0)
      {
        if (v3 == this)
          return this;
        while (1)
        {
          v7 = v3[7];
          if (v7)
            break;
          v3 = (_QWORD *)v3[4];
          if (v3)
            v8 = v3 == this;
          else
            v8 = 1;
          if (v8)
            return this;
        }
      }
      v6 = *(_WORD *)(v7 + 28);
      v3 = (_QWORD *)v7;
    }
    while ((v6 & 2) == 0);
    while (1)
    {
LABEL_15:
      v9 = *(_QWORD *)(v7 + 80);
      if (!*((_DWORD *)a2 + 4) && *((_QWORD *)a2 + 1) == 0)
      {
        if (v9)
          *(_DWORD *)v9 += 2;
        this = *(_QWORD **)a2;
        *(_QWORD *)a2 = v9;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *(_DWORD *)this -= 2;
        }
        v11 = *(_QWORD *)(v7 + 80);
        if (v11)
          LODWORD(v11) = *(_DWORD *)(v11 + 4);
        *((_DWORD *)a2 + 4) = v11;
      }
      else
      {
        this = (_QWORD *)(v9 && (*(_BYTE *)(v9 + 16) & 4) == 0
                        ? WTF::StringBuilder::append()
                        : WTF::StringBuilder::append());
      }
      if ((_QWORD *)v7 == v5)
        break;
      if (!*(_QWORD *)(v7 + 56))
      {
        v12 = (_QWORD *)v7;
        while (1)
        {
          v12 = (_QWORD *)v12[4];
          if (!v12 || v12 == v5)
            return this;
          v7 = v12[7];
          if (v7)
            goto LABEL_36;
        }
      }
      v7 = *(_QWORD *)(v7 + 56);
LABEL_36:
      v14 = *(_WORD *)(v7 + 28);
      if ((v14 & 2) == 0)
      {
        v15 = (_QWORD *)v7;
        do
        {
          if ((v14 & 4) == 0 || (v7 = v15[10]) == 0)
          {
            if (v15 == v5)
              return this;
            while (1)
            {
              v7 = v15[7];
              if (v7)
                break;
              v15 = (_QWORD *)v15[4];
              if (v15)
                v16 = v15 == v5;
              else
                v16 = 1;
              if (v16)
                return this;
            }
          }
          v14 = *(_WORD *)(v7 + 28);
          v15 = (_QWORD *)v7;
        }
        while ((v14 & 2) == 0);
      }
    }
  }
  return this;
}

unsigned int *WebCore::Document::childrenChanged(uint64_t a1, _BYTE *a2)
{
  void *v3;
  uint64_t v4;
  WTF::String *v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *result;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Style::Resolver *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t IgnoringASCIICase;
  uint64_t v30;

  WebCore::ContainerNode::childrenChanged(a1, a2);
  v7 = *(_QWORD *)(a1 + 528);
  if (v7)
  {
    v8 = *(_QWORD **)(v7 + 8);
    if (v8)
    {
      v9 = v8[3];
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_DWORD *)v10 + 1;
          *(_DWORD *)v10 = v11;
          if (*(_QWORD **)(v8[16] + 8) == v8)
          {
            v23 = *(_QWORD *)(v10 + 48);
            v24 = *(_QWORD *)(v8[37] + 80);
            if (v24)
            {
              while ((*(_WORD *)(v24 + 28) & 0xF000) != 0xA000)
              {
                v24 = *(_QWORD *)(v24 + 56);
                if (!v24)
                  goto LABEL_32;
              }
              v26 = *(_QWORD *)(v23 + 16);
              if (*(_QWORD *)(v24 + 88))
              {
                v30 = *(_QWORD *)(v23 + 16);
                IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
                v26 = v30;
                v25 = IgnoringASCIICase != -1;
              }
              else
              {
                v25 = 0;
              }
            }
            else
            {
LABEL_32:
              v25 = 0;
              v26 = *(_QWORD *)(v23 + 16);
            }
            (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v26 + 632))(v26, v25);
            v11 = *(_DWORD *)v10;
          }
          if (v11 == 1)
          {
            WebCore::Page::~Page(v10);
            WTF::fastFree(v27, v28);
          }
          else
          {
            *(_DWORD *)v10 = v11 - 1;
          }
        }
      }
    }
  }
  v12 = *(_QWORD *)(a1 + 80);
  if (v12)
  {
    result = 0;
    while ((*(_WORD *)(v12 + 28) & 8) == 0)
    {
      v12 = *(_QWORD *)(v12 + 56);
      if (!v12)
        goto LABEL_10;
    }
    *(_DWORD *)(v12 + 24) += 2;
    result = (unsigned int *)v12;
  }
  else
  {
    result = 0;
  }
LABEL_10:
  v14 = *(_QWORD *)(a1 + 1272);
  if (result == (unsigned int *)v14)
  {
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v3);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1272) = result;
    if (v14)
    {
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v3);
          result = *(unsigned int **)(a1 + 1272);
        }
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    if (result)
      v15 = (WTF::StringImpl **)WebCore::Element::langFromAttribute((WebCore::Element *)result, v6, (uint64_t)v3, v4, v5);
    else
      v15 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    WebCore::Document::setDocumentElementLanguage((WebCore::Document *)a1, v15, v4, v5);
    v17 = *(_QWORD *)(a1 + 1272);
    if (v17)
      LOBYTE(v17) = (*(_WORD *)(v17 + 28) & 0x10) != 0
                 && (*(_BYTE *)(v17 + 79) & 0x40) != 0
                 && WebCore::Node::effectiveTextDirection((WebCore::Node *)v17);
    *(_BYTE *)(a1 + 3360) = v17;
    v18 = *(_QWORD *)(a1 + 1328);
    v19 = *(WebCore::Style::Resolver **)(v18 + 32);
    *(_QWORD *)(v18 + 32) = 0;
    if (v19)
      WTF::RefCounted<WebCore::Style::Resolver>::deref(v19);
    v20 = *(unsigned int **)(v18 + 296);
    result = v20 + 4;
    v21 = *((_QWORD *)v20 + 2);
    if (v21 && *(_DWORD *)(v21 - 12))
    {
      WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear((WTF::StringImpl ***)result, v16);
      result = WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v20, MEMORY[0x1E0CBF2F8]);
    }
    v22 = *(_QWORD *)(v18 + 304);
    if (*(_QWORD *)v22)
    {
      if (*(_DWORD *)(*(_QWORD *)v22 - 12))
      {
        result = (unsigned int *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v18 + 304), v16);
        *(_BYTE *)(v22 + 8) = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::ContainerNode::childrenChanged(uint64_t result, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl ***v63;
  uint64_t v64;
  WTF::StringImpl ***v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl ***v74;
  uint64_t v75;
  WTF::StringImpl ***v76;
  uint64_t v77;
  unsigned int v78;
  WTF::StringImpl ***v79;
  WTF::StringImpl **v80;
  uint64_t v81;
  _QWORD *v82;
  BOOL v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  BOOL v96;
  _BOOL4 v97;
  unsigned __int8 *v99;
  WTF::StringImpl ***v100;
  WTF::StringImpl ***v101;
  uint64_t v102;
  WTF::StringImpl ***v103;
  WTF::StringImpl ***v104;
  BOOL v105;
  _BOOL4 v106;
  uint64_t v108;
  unsigned __int8 *v109;
  BOOL v110;
  _BOOL4 v111;
  unsigned __int8 *v113;
  BOOL v114;
  _BOOL4 v115;
  _QWORD *v117;
  WTF::StringImpl **v118;
  uint64_t v119;
  int v120;
  WTF::StringImpl **v121;
  uint64_t v122;
  WTF *v124;
  void *v125;
  unint64_t v126;
  WTF::StringImpl ***v127;
  uint64_t v128;
  _BYTE v129[64];

  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  *(_QWORD *)(v4 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  if (a2[33] == 2)
  {
    v5 = *(uint64_t **)(v4 + 1928);
    if (v5)
    {
      *(_QWORD *)(v4 + 1928) = 0;
      if (*v5)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v5, a2);
      result = WTF::fastFree((WTF *)v5, a2);
    }
  }
  if (v2[32] == 1 && *v2 != 4)
  {
    v9 = *(_QWORD *)(v4 + 1320);
    if (v9)
    {
      v47 = *(unsigned int *)(v9 - 4);
      v11 = v9 + 8 * v47;
      if (*(_DWORD *)(v9 - 12))
      {
        v10 = *(_QWORD *)(v4 + 1320);
        if ((_DWORD)v47)
        {
          v48 = 8 * v47;
          v10 = *(_QWORD *)(v4 + 1320);
          while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
          {
            v10 += 8;
            v48 -= 8;
            if (!v48)
            {
              v10 = v11;
              break;
            }
          }
        }
      }
      else
      {
        v10 = v9 + 8 * v47;
        v11 = v10;
      }
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    if (v9)
      v12 = v9 + 8 * *(unsigned int *)(v9 - 4);
    else
      v12 = 0;
    while (v10 != v12)
    {
      result = *(_QWORD *)(*(_QWORD *)v10 + 8);
      v13 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = v13 + 1;
      v14 = *(_QWORD *)(result + 48);
      if (v14)
        v15 = *(_QWORD *)(result + 32) == v3;
      else
        v15 = 0;
      if (v15)
      {
        v50 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
        if (v50)
        {
          v51 = 1;
          do
          {
            ++v51;
            v50 = *(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v50);
        }
        else
        {
          v51 = 1;
        }
        *(_DWORD *)(result + 40) = v51;
      }
      v16 = *(_QWORD *)(result + 72);
      if (v16)
        v17 = *(_QWORD *)(result + 56) == v3;
      else
        v17 = 0;
      if (v17)
      {
        v52 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
        if (v52)
        {
          v53 = 1;
          do
          {
            ++v53;
            v52 = *(_QWORD *)(v52 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v52);
        }
        else
        {
          v53 = 1;
        }
        *(_DWORD *)(result + 64) = v53;
      }
      *(_BYTE *)(result + 81) = 1;
      if (v13)
        *(_DWORD *)(result + 8) = v13;
      else
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v18 = v10 + 8;
      v10 = v11;
      if (v18 != v11)
      {
        v10 = v18;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 8;
          if (v10 == v11)
          {
            v10 = v11;
            break;
          }
        }
      }
    }
  }
  if (v2[33] == 2)
  {
    if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v30 = *(uint64_t **)(*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL);
      if (v30)
      {
        v31 = *v30;
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 8);
          if (v32)
          {
            *(_QWORD *)(v32 + 40) = 0;
            *(_BYTE *)(v32 + 72) &= 0xFCu;
            v33 = *(unsigned int *)(v32 + 68);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)(v32 + 56);
              v35 = &v34[v33];
              do
              {
                v36 = *v34;
                *v34 = 0;
                if (v36)
                {
                  do
                  {
                    v37 = __ldaxr((unsigned int *)v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, (unsigned int *)v36));
                  if (!v38)
                  {
                    atomic_store(1u, (unsigned int *)v36);
                    v54 = *(unsigned int *)(v36 + 28);
                    if ((_DWORD)v54)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v54));
                    v55 = *(WTF **)(v36 + 16);
                    if (v55)
                    {
                      *(_QWORD *)(v36 + 16) = 0;
                      *(_DWORD *)(v36 + 24) = 0;
                      WTF::fastFree(v55, a2);
                    }
                    WTF::fastFree((WTF *)v36, a2);
                  }
                }
                ++v34;
              }
              while (v34 != v35);
            }
            *(_DWORD *)(v32 + 68) = 0;
          }
        }
      }
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
    result = *(_QWORD *)(v7 + 2176);
    if (result && *(_DWORD *)(result - 12))
    {
      v39 = *(unsigned int *)(result - 4);
      v40 = *(uint64_t **)(v7 + 2176);
      if ((_DWORD)v39)
      {
        v41 = 16 * v39;
        v40 = *(uint64_t **)(v7 + 2176);
        while ((unint64_t)(*v40 + 1) <= 1)
        {
          v40 += 2;
          v41 -= 16;
          if (!v41)
            goto LABEL_126;
        }
      }
      v42 = (uint64_t *)(result + 16 * v39);
      if (v40 != v42)
      {
        v43 = *v40;
LABEL_79:
        if (*(_QWORD *)(v43 + 8))
        {
          *(_DWORD *)(v3 + 24) += 2;
          v44 = v3;
          do
          {
            v45 = v44;
            v46 = *(_QWORD *)(v44 + 16);
            if ((v46 & 0x40000000000000) != 0)
            {
              v49 = *(_DWORD *)(v7 + 2184);
              *(_DWORD *)(v7 + 2184) = v49 + 1;
              if (v49 > *(_DWORD *)(v7 + 2188))
              {
                result = WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(v7 + 2176, a2);
                v46 = *(_QWORD *)(v44 + 16);
              }
              a2 = (_BYTE *)(v46 & 0xFFFFFFFFFFFFLL);
              if ((v46 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v46 & 0xFFFFFFFFFFFFLL) + 8))
              {
                result = WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v7 + 2176), a2);
                v46 = *(_QWORD *)(v44 + 16);
              }
              *(_QWORD *)(v44 + 16) = v46 & 0xFFBFFFFFFFFFFFFFLL;
            }
            v44 = *(_QWORD *)(v44 + 32);
            if (v44)
              *(_DWORD *)(v44 + 24) += 2;
            if (*(_DWORD *)(v45 + 24) == 2)
            {
              if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v45, a2);
            }
            else
            {
              *(_DWORD *)(v45 + 24) -= 2;
            }
          }
          while (v44);
          goto LABEL_11;
        }
        while (1)
        {
          v40 += 2;
          if (v40 == v42)
            break;
          v43 = *v40;
          if ((unint64_t)(*v40 + 1) > 1)
          {
            if (v40 != v42)
              goto LABEL_79;
            break;
          }
        }
      }
LABEL_126:
      *(_QWORD *)(v7 + 2176) = 0;
      result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, (WTF::StringImpl *)a2);
      v58 = 0;
      v59 = *(_QWORD *)(v7 + 2176);
      *(_DWORD *)(v7 + 2184) = 0;
      if (v59)
      {
        v58 = *(_DWORD *)(v59 - 12);
        if (v58 > 0x7FFFFFFE)
          v58 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v7 + 2188) = 2 * v58;
    }
LABEL_11:
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
    if (!*(_DWORD *)(v8 + 1768)
      && !*(_DWORD *)(v8 + 1772)
      && !*(_DWORD *)(v8 + 1776)
      && !*(_DWORD *)(v8 + 1780)
      && !*(_DWORD *)(v8 + 1784)
      && !*(_DWORD *)(v8 + 1788)
      && !*(_DWORD *)(v8 + 1792)
      && !*(_DWORD *)(v8 + 1796))
    {
      goto LABEL_19;
    }
    v127 = (WTF::StringImpl ***)v129;
    v128 = 8;
    v19 = *(_QWORD **)(v8 + 1752);
    if (!v19)
    {
LABEL_45:
      v127 = (WTF::StringImpl ***)v129;
      v128 = 8;
      v20 = *(_QWORD **)(v8 + 1760);
      if (!v20)
        goto LABEL_195;
      v60 = *((unsigned int *)v20 - 3);
      if (v60 >= 9)
      {
        v70 = v8;
        if (v60 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194297558);
        }
        result = WTF::fastMalloc((WTF *)(8 * v60));
        v61 = (WTF *)result;
        LODWORD(v128) = v60;
        v127 = (WTF::StringImpl ***)result;
        v20 = *(_QWORD **)(v70 + 1760);
        if (!v20)
          goto LABEL_139;
        LODWORD(v60) = *((_DWORD *)v20 - 3);
      }
      else
      {
        v61 = (WTF *)v129;
      }
      if ((_DWORD)v60)
      {
        v62 = *((unsigned int *)v20 - 1);
        v63 = (WTF::StringImpl ***)v20;
        if ((_DWORD)v62)
        {
          v64 = 8 * v62;
          v63 = (WTF::StringImpl ***)v20;
          while ((unint64_t)*v63 + 1 <= 1)
          {
            ++v63;
            v64 -= 8;
            if (!v64)
              goto LABEL_139;
          }
        }
        v65 = (WTF::StringImpl ***)&v20[v62];
        if (v63 != v65)
        {
          v66 = HIDWORD(v128);
          v71 = *v63;
          do
          {
            v127[v66++] = v71;
            do
            {
              if (++v63 == v65)
                goto LABEL_157;
              v71 = *v63;
            }
            while ((unint64_t)*v63 + 1 <= 1);
          }
          while (v63 != v65);
LABEL_157:
          HIDWORD(v128) = v66;
          v61 = (WTF *)v127;
          goto LABEL_140;
        }
      }
LABEL_139:
      v66 = HIDWORD(v128);
LABEL_140:
      if (v66)
      {
        v67 = 8 * v66;
        do
        {
          v68 = *(_QWORD **)v61;
          v61 = (WTF *)((char *)v61 + 8);
          result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v68 + 72))(v68, *(_QWORD *)(*(_QWORD *)(v68[3] + 40) + 8));
          v67 -= 8;
        }
        while (v67);
        v61 = (WTF *)v127;
      }
      if (v129 != (_BYTE *)v61 && v61 != 0)
      {
        v127 = 0;
        LODWORD(v128) = 0;
        result = WTF::fastFree(v61, a2);
      }
LABEL_195:
      while (1)
      {
        v84 = (_QWORD *)(*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL);
        if (v84)
        {
          v85 = (_QWORD *)*v84;
          if (*v84)
            break;
        }
LABEL_194:
        v3 = *(_QWORD *)(v3 + 32);
        if (!v3)
          goto LABEL_19;
      }
      v86 = v85[2];
      if (v86)
      {
        v88 = *(unsigned int *)(v86 - 4);
        v89 = (unsigned __int8 *)(v86 + 24 * v88);
        if (*(_DWORD *)(v86 - 12))
        {
          v87 = (unsigned __int8 *)v85[2];
          if ((_DWORD)v88)
          {
            v108 = 24 * v88;
            v87 = (unsigned __int8 *)v85[2];
            while (1)
            {
              v105 = !*v87 && *((_QWORD *)v87 + 1) == 0;
              v106 = v105;
              if (*v87 != 255 && !v106)
                break;
              v87 += 24;
              v108 -= 24;
              if (!v108)
              {
                v87 = v89;
                break;
              }
            }
          }
LABEL_200:
          if (v86)
            v90 = (unsigned __int8 *)(v86 + 24 * *(unsigned int *)(v86 - 4));
          else
            v90 = 0;
          while (v87 != v90)
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v87 + 2) + 80))(*((_QWORD *)v87 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v87 + 2) + 24) + 40) + 8));
            v113 = v87 + 24;
            v87 = v89;
            if (v113 != v89)
            {
              v87 = v113;
              while (1)
              {
                v114 = !*v87 && *((_QWORD *)v87 + 1) == 0;
                v115 = v114;
                if (*v87 != 255 && !v115)
                  break;
                v87 += 24;
                if (v87 == v89)
                {
                  v87 = v89;
                  break;
                }
              }
            }
          }
          v91 = v85[4];
          if (v91)
          {
            v92 = *(unsigned int *)(v91 - 4);
            v93 = (unsigned __int8 *)(v91 + 24 * v92);
            if (*(_DWORD *)(v91 - 12))
            {
              v94 = (unsigned __int8 *)v85[4];
              if ((_DWORD)v92)
              {
                v95 = 24 * v92;
                v94 = (unsigned __int8 *)v85[4];
                while (1)
                {
                  v96 = !*v94 && *((_QWORD *)v94 + 1) == 0;
                  v97 = v96;
                  if (*v94 != 255 && !v97)
                    break;
                  v94 += 24;
                  v95 -= 24;
                  if (!v95)
                  {
                    v94 = v93;
                    break;
                  }
                }
              }
LABEL_219:
              if (v91)
                v99 = (unsigned __int8 *)(v91 + 24 * *(unsigned int *)(v91 - 4));
              else
                v99 = 0;
              while (v94 != v99)
              {
                result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v94 + 2) + 72))(*((_QWORD *)v94 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v94 + 2) + 24) + 40) + 8));
                v109 = v94 + 24;
                v94 = v93;
                if (v109 != v93)
                {
                  v94 = v109;
                  while (1)
                  {
                    v110 = !*v94 && *((_QWORD *)v94 + 1) == 0;
                    v111 = v110;
                    if (*v94 != 255 && !v111)
                      break;
                    v94 += 24;
                    if (v94 == v93)
                    {
                      v94 = v93;
                      break;
                    }
                  }
                }
              }
              v100 = (WTF::StringImpl ***)v85[3];
              if (v100)
              {
                v102 = *((unsigned int *)v100 - 1);
                v103 = &v100[2 * v102];
                if (*((_DWORD *)v100 - 3))
                {
                  if ((_DWORD)v102)
                  {
                    v117 = v85;
                    v118 = (WTF::StringImpl **)WebCore::nullName;
                    v119 = 16 * v102;
                    if (WebCore::nullName)
                    {
                      while (1)
                      {
                        if (v118)
                        {
                          v120 = (*(_DWORD *)v118)++;
                          v121 = *v100;
                          if (v120)
                          {
                            *(_DWORD *)v118 = v120;
                            v122 = (uint64_t)v118;
                          }
                          else
                          {
                            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v118);
                            result = WTF::fastFree(v124, v125);
                            v122 = WebCore::nullName;
                          }
                        }
                        else
                        {
                          v122 = 0;
                          v121 = *v100;
                        }
                        if (v121 != v118 && (WTF::StringImpl **)((char *)*v100 + 1) != 0)
                          break;
                        v100 += 2;
                        v118 = (WTF::StringImpl **)v122;
                        v119 -= 16;
                        if (!v119)
                        {
                          v100 = v103;
                          break;
                        }
                      }
                      v101 = v100;
                      v100 = (WTF::StringImpl ***)v117[3];
                    }
                    else
                    {
                      v126 = 0;
                      while ((unint64_t)v100[v126 / 8] + 1 <= 1)
                      {
                        v126 += 16;
                        if (v119 == v126)
                        {
                          v101 = &v100[2 * v102];
                          goto LABEL_225;
                        }
                      }
                      v101 = &v100[v126 / 8];
                    }
                  }
                  else
                  {
                    v101 = (WTF::StringImpl ***)v85[3];
                  }
                  goto LABEL_225;
                }
                v101 = &v100[2 * v102];
              }
              else
              {
                v101 = 0;
                v102 = 0;
              }
              v103 = &v100[2 * v102];
LABEL_225:
              v127 = v101;
              v128 = (uint64_t)v103;
              if (v100)
                v104 = &v100[2 * *((unsigned int *)v100 - 1)];
              else
                v104 = 0;
              if (v104 != v101)
              {
                do
                {
                  (*((void (**)(WTF::StringImpl **, _QWORD))*v101[1] + 9))(v101[1], *(_QWORD *)(*((_QWORD *)v101[1][3] + 5) + 8));
                  result = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(&v127);
                  v101 = v127;
                }
                while (v127 != v104);
              }
              goto LABEL_194;
            }
            v94 = (unsigned __int8 *)(v91 + 24 * v92);
          }
          else
          {
            v94 = 0;
            LODWORD(v92) = 0;
          }
          v93 = (unsigned __int8 *)(v91 + 24 * v92);
          goto LABEL_219;
        }
        v87 = (unsigned __int8 *)(v86 + 24 * v88);
      }
      else
      {
        v87 = 0;
        LODWORD(v88) = 0;
      }
      v89 = (unsigned __int8 *)(v86 + 24 * v88);
      goto LABEL_200;
    }
    v72 = v8;
    v73 = *((unsigned int *)v19 - 3);
    if (v73 < 9)
    {
      v74 = (WTF::StringImpl ***)v129;
    }
    else
    {
      if (v73 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194297568);
      }
      result = WTF::fastMalloc((WTF *)(8 * v73));
      v74 = (WTF::StringImpl ***)result;
      LODWORD(v128) = v73;
      v127 = (WTF::StringImpl ***)result;
      v19 = *(_QWORD **)(v72 + 1752);
      if (!v19)
        goto LABEL_167;
      LODWORD(v73) = *((_DWORD *)v19 - 3);
    }
    if ((_DWORD)v73)
    {
      v75 = *((unsigned int *)v19 - 1);
      v76 = (WTF::StringImpl ***)v19;
      if ((_DWORD)v75)
      {
        v77 = 8 * v75;
        v76 = (WTF::StringImpl ***)v19;
        while ((unint64_t)*v76 + 1 <= 1)
        {
          ++v76;
          v77 -= 8;
          if (!v77)
            goto LABEL_167;
        }
      }
      v79 = (WTF::StringImpl ***)&v19[v75];
      if (v76 != v79)
      {
        v78 = HIDWORD(v128);
        v80 = *v76;
        do
        {
          v127[v78++] = v80;
          do
          {
            if (++v76 == v79)
              goto LABEL_174;
            v80 = *v76;
          }
          while ((unint64_t)*v76 + 1 <= 1);
        }
        while (v76 != v79);
LABEL_174:
        HIDWORD(v128) = v78;
        v74 = v127;
        goto LABEL_175;
      }
    }
LABEL_167:
    v78 = HIDWORD(v128);
LABEL_175:
    if (v78)
    {
      v81 = 8 * v78;
      do
      {
        v82 = *v74++;
        result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v82 + 80))(v82, *(_QWORD *)(*(_QWORD *)(v82[3] + 40) + 8));
        v81 -= 8;
      }
      while (v81);
      v74 = v127;
    }
    v83 = v129 == (_BYTE *)v74 || v74 == 0;
    v8 = v72;
    if (!v83)
    {
      v127 = 0;
      LODWORD(v128) = 0;
      result = WTF::fastFree((WTF *)v74, a2);
      v8 = v72;
    }
    goto LABEL_45;
  }
  if (*v2 != 4 && (*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v21 = *(uint64_t **)(*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL);
    if (v21)
    {
      v22 = *v21;
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          *(_QWORD *)(v23 + 40) = 0;
          *(_BYTE *)(v23 + 72) &= 0xFCu;
          v24 = *(unsigned int *)(v23 + 68);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)(v23 + 56);
            v26 = &v25[v24];
            do
            {
              v27 = *v25;
              *v25 = 0;
              if (v27)
              {
                do
                {
                  v28 = __ldaxr((unsigned int *)v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, (unsigned int *)v27));
                if (!v29)
                {
                  atomic_store(1u, (unsigned int *)v27);
                  v56 = *(unsigned int *)(v27 + 28);
                  if ((_DWORD)v56)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v56));
                  v57 = *(WTF **)(v27 + 16);
                  if (v57)
                  {
                    *(_QWORD *)(v27 + 16) = 0;
                    *(_DWORD *)(v27 + 24) = 0;
                    WTF::fastFree(v57, a2);
                  }
                  result = WTF::fastFree((WTF *)v27, a2);
                }
              }
              ++v25;
            }
            while (v25 != v26);
          }
          *(_DWORD *)(v23 + 68) = 0;
        }
      }
    }
  }
LABEL_19:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

void WebCore::Document::setDocumentElementLanguage(WebCore::Document *this, WTF::StringImpl **a2, uint64_t a3, WTF::String *a4)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WebCore::Element *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WebCore::Element *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v5 = (WTF::StringImpl *)*((_QWORD *)this + 215);
  v6 = *a2;
  if (v5 == *a2)
    return;
  v8 = (WTF::StringImpl **)((char *)this + 1720);
  v9 = 1720;
  if (!v5)
    v9 = 1712;
  v10 = *(WTF::StringImpl **)((char *)this + v9);
  if (v10)
    *(_DWORD *)v10 += 2;
  if (v6)
    *(_DWORD *)v6 += 2;
  *v8 = v6;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      v6 = *v8;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v6)
    v11 = (WTF::StringImpl **)((char *)this + 1720);
  else
    v11 = (WTF::StringImpl **)((char *)this + 1712);
  if (v10 != *v11)
  {
    v12 = *((_QWORD *)this + 216);
    v13 = 0uLL;
    v14 = *((_QWORD *)this + 217);
    *((_OWORD *)this + 108) = 0u;
    v42[0] = v12;
    v42[1] = v14;
    if (v12)
    {
      v16 = *(unsigned int *)(v12 - 4);
      v17 = v12 + 8 * v16;
      if (*(_DWORD *)(v12 - 12))
      {
        v15 = v12;
        if ((_DWORD)v16)
        {
          v21 = 8 * v16;
          v15 = v12;
          while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
          {
            v15 += 8;
            v21 -= 8;
            if (!v21)
            {
              v15 = v17;
              goto LABEL_19;
            }
          }
        }
        goto LABEL_19;
      }
      v15 = v12 + 8 * v16;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = v12 + 8 * v16;
LABEL_19:
    v37 = v42;
    v38 = v15;
    v39 = v17;
    if (v12)
    {
      v19 = *(unsigned int *)(v12 - 4);
      v18 = v12 + 8 * v19;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v40 = v18;
    v41 = v12 + 8 * v19;
    if (v15 != v18)
    {
      if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
      {
        v31 = v15;
        do
        {
          v32 = v31 + 8;
          v31 = v17;
          if (v32 != v17)
          {
            v31 = v32;
            while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
            {
              v31 += 8;
              if (v31 == v17)
              {
                v31 = v17;
                break;
              }
            }
          }
          v15 = v18;
          if (v31 == v18)
            break;
          v15 = v31;
        }
        while (!*(_QWORD *)(*(_QWORD *)v31 + 8));
      }
      v38 = v15;
    }
    if (v12)
      v20 = v12 + 8 * *(unsigned int *)(v12 - 4);
    else
      v20 = 0;
    if (v15 != v20)
    {
      do
      {
        v30 = *(WebCore::Element **)(*(_QWORD *)v15 + 8);
        *((_DWORD *)v30 + 6) += 2;
        v36 = v30;
        WebCore::Element::updateEffectiveLangStateAndPropagateToDescendants(v30, a2, a3, a4, v13);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v36);
        WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
        v15 = v38;
      }
      while (v38 != v20);
      v12 = v42[0];
    }
    if (v12)
    {
      v22 = *(unsigned int *)(v12 - 4);
      if ((_DWORD)v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v24 = *(_QWORD *)(v12 + 8 * i);
          if (v24 != -1)
          {
            *(_QWORD *)(v12 + 8 * i) = 0;
            if (v24)
            {
              do
              {
                v25 = __ldaxr((unsigned int *)v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, (unsigned int *)v24));
              if (!v26)
              {
                v33 = v22;
                v34 = i;
                v27 = v12;
                atomic_store(1u, (unsigned int *)v24);
                v35 = (WTF *)v24;
                v28 = *(unsigned int *)(v24 + 28);
                if ((_DWORD)v28)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v28));
                v29 = (WTF *)*((_QWORD *)v35 + 2);
                if (v29)
                {
                  *((_QWORD *)v35 + 2) = 0;
                  *((_DWORD *)v35 + 6) = 0;
                  WTF::fastFree(v29, a2);
                }
                WTF::fastFree(v35, a2);
                v12 = v27;
                v22 = v33;
                i = v34;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v12 - 16), a2);
    }
  }
  if (*((WTF::StringImpl **)this + 214) != *a2)
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(*((WebCore::Style::Scope **)this + 166), a2);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl **v58;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v55 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 40 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF::StringImpl *)-1)
        {
          v16 = *a1;
          v58 = v12;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v15 + 4) >> 8;
          do
          {
            v20 = v19 & v17;
            v21 = (WTF::StringImpl **)(v16 + 40 * (v19 & v17));
            v19 = ++v18 + (v19 & v17);
          }
          while (*v21);
          v22 = v16 + 40 * v20;
          v23 = (_QWORD *)(v22 + 24);
          WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 + 24, v8);
          v27 = *(_QWORD *)(v22 + 8);
          v26 = (_QWORD *)(v22 + 8);
          v25 = v27;
          *v26 = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr((unsigned int *)v25);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, (unsigned int *)v25));
            if (!v29)
            {
              atomic_store(1u, (unsigned int *)v25);
              v49 = *(unsigned int *)(v25 + 28);
              if ((_DWORD)v49)
              {
                v54 = v25;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v49));
                v25 = v54;
              }
              v50 = *(WTF **)(v25 + 16);
              if (v50)
              {
                *(_QWORD *)(v25 + 16) = 0;
                *(_DWORD *)(v25 + 24) = 0;
                v53 = v25;
                WTF::fastFree(v50, v24);
                v25 = v53;
              }
              WTF::fastFree((WTF *)v25, v24);
            }
          }
          v30 = *v21;
          *v21 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *v14;
          *v14 = 0;
          *v21 = v31;
          v32 = v4 + 40 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *v26 = v33;
          v34 = (_DWORD *)(v16 + 40 * v20);
          v34[4] = *(_DWORD *)(v32 + 16);
          *v23 = 0;
          v23[1] = 0;
          v35 = *(_QWORD *)(v32 + 24);
          *(_QWORD *)(v32 + 24) = 0;
          *v23 = v35;
          v36 = *(_DWORD *)(v32 + 32);
          *(_DWORD *)(v32 + 32) = 0;
          v34[8] = v36;
          v37 = *(_DWORD *)(v32 + 36);
          *(_DWORD *)(v32 + 36) = 0;
          v34[9] = v37;
          WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v32 + 24, v24);
          v38 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v12 = v58;
          v13 = v55;
          if (v38)
          {
            do
            {
              v39 = __ldaxr((unsigned int *)v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, (unsigned int *)v38));
            if (!v40)
            {
              atomic_store(1u, (unsigned int *)v38);
              v51 = *(unsigned int *)(v38 + 28);
              if ((_DWORD)v51)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v38 + 16), (WTF::StringImpl *)(*(_QWORD *)(v38 + 16) + 32 * v51));
              v52 = *(WTF **)(v38 + 16);
              if (v52)
              {
                *(_QWORD *)(v38 + 16) = 0;
                *(_DWORD *)(v38 + 24) = 0;
                WTF::fastFree(v52, v8);
              }
              WTF::fastFree((WTF *)v38, v8);
            }
          }
          v41 = *v14;
          *v14 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v41 -= 2;
          }
          if (v14 == a3)
            v12 = v21;
        }
      }
      else
      {
        v42 = v4 + 40 * v11;
        WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v42 + 24, v8);
        v43 = *(_QWORD *)(v42 + 8);
        *(_QWORD *)(v42 + 8) = 0;
        if (v43)
        {
          do
          {
            v44 = __ldaxr((unsigned int *)v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, (unsigned int *)v43));
          if (!v45)
          {
            atomic_store(1u, (unsigned int *)v43);
            v47 = *(unsigned int *)(v43 + 28);
            if ((_DWORD)v47)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v43 + 16), (WTF::StringImpl *)(*(_QWORD *)(v43 + 16) + 32 * v47));
            v48 = *(WTF **)(v43 + 16);
            if (v48)
            {
              *(_QWORD *)(v43 + 16) = 0;
              *(_DWORD *)(v43 + 24) = 0;
              WTF::fastFree(v48, v8);
            }
            WTF::fastFree((WTF *)v43, v8);
          }
        }
        v46 = *v14;
        *v14 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::Element::langFromAttribute(WebCore::Element *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t *v7;

  v5 = *((_QWORD *)this + 2);
  if ((v5 & 0x400000000000000) != 0)
  {
    v7 = &WebCore::XMLNames::langAttr;
  }
  else
  {
    if ((v5 & 0x200000000000000) == 0)
      return MEMORY[0x1E0CBF2F8];
    v7 = &WebCore::HTMLNames::langAttr;
  }
  return WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)v7, a4, a5, a2);
}

WebCore::Element *WebCore::Element::clearEffectiveLangStateOnNewDocumentElement(WebCore::Element *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  _DWORD *v3;
  WebCore::Document *v4;
  WebCore::Element *v5;
  WebCore::Document *v6;

  if ((*((_BYTE *)this + 23) & 6) != 0 && (*((_WORD *)this + 15) & 8) != 0)
  {
    v4 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
    *((_DWORD *)v4 + 6) += 2;
    v5 = this;
    v6 = v4;
    WebCore::Document::removeElementWithLangAttrMatchingDocumentElement(v4, this);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v6);
    this = v5;
    *((_WORD *)v5 + 15) &= ~8u;
  }
  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v3 += 2;
    this = *(WebCore::Element **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v3;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WebCore::Element *)WTF::StringImpl::destroy(this, a2);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void WebCore::Element::updateNameForDocument(WebCore::Element *this, WebCore::HTMLDocument *a2, const WTF::AtomString *a3, WTF::StringImpl **a4)
{
  __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *IdAttribute;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t *v21;

  v8 = *((_WORD *)this + 14);
  if ((v8 & 0x10) == 0 || (v8 & 0x110) == 0x110)
  {
    if ((v8 & 0x10) == 0)
      goto LABEL_7;
    v9 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    goto LABEL_4;
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v9 != *(_QWORD *)(WebCore::HTMLNames::embedTag + 24))
  {
LABEL_4:
    if (v9 != *(_QWORD *)(WebCore::HTMLNames::formTag + 24)
      && v9 != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      && v9 != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      goto LABEL_7;
    }
  }
  IdAttribute = WebCore::Element::getIdAttribute(this);
  v13 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (*(_DWORD *)(v13 + 4) && v13 != *IdAttribute)
    {
      v21 = IdAttribute;
      WebCore::TreeScopeOrderedMap::remove((WebCore::HTMLDocument *)((char *)a2 + 3520), a3, this);
      IdAttribute = v21;
    }
  }
  v14 = *a4;
  if (*a4)
  {
    if (*((_DWORD *)v14 + 1) && v14 != (WTF::StringImpl *)*IdAttribute)
      WebCore::TreeScopeOrderedMap::add((WebCore::HTMLDocument *)((char *)a2 + 3520), a4, (const WebCore::TreeScope **)this, (WebCore::HTMLDocument *)((char *)a2 + 96));
  }
LABEL_7:
  v10 = *((unsigned __int16 *)this + 14);
  if ((v10 & 0x10) != 0)
  {
    if ((v11 = *(_QWORD *)(*((_QWORD *)this + 12) + 24), v11 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
      && *((_BYTE *)this + 288)
      || (~v10 & 0x110) != 0 && v11 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24)
      || v11 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24)
      || v11 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
      || v11 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      if (WebCore::DocumentNameCollection::elementMatchesIfIdAttributeMatch(this, a2))
        v17 = WebCore::Element::getIdAttribute(this);
      else
        v17 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      v18 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 && *(_DWORD *)(v18 + 4) && v18 != *v17)
      {
        v20 = v17;
        WebCore::HTMLDocument::removeDocumentNamedItem(a2, a3, this);
        v17 = v20;
      }
      v19 = *a4;
      if (*a4 && *((_DWORD *)v19 + 1) && v19 != (WTF::StringImpl *)*v17)
        WebCore::HTMLDocument::addDocumentNamedItem(a2, a4, (const WebCore::TreeScope **)this);
    }
  }
}

uint64_t *WebCore::sleepDisablerClient(WebCore *this)
{
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  return &WebCore::sleepDisablerClient(void)::client;
}

WTF::StringImpl *WebCore::CachedResourceLoader::loadResource(WTF *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *result;
  _QWORD *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;

  if ((WTF::isMainThread(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194298480);
  }
  {
    WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
  }
  WebCore::createResource((uint64_t *)a1, a3, a5, a4, a6, a7);
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((*(_BYTE *)(v16 + 131) & 4) == 0 && a8)
  {
    WebCore::MemoryCache::add((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, (WebCore::CachedResource *)v16);
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  }
  v17 = (WTF::StringImpl *)(a2 + 216);
  v18 = *(WTF::StringImpl **)(v16 + 520);
  if (v18)
    *(_DWORD *)v18 += 2;
  v31 = v18;
  v19 = *(_QWORD *)(a2 + 80);
  if (v19
    && (v20 = *(_QWORD *)(v19 + 8)) != 0
    && (v21 = *(_QWORD *)(v20 - 40)) != 0
    && (v22 = *(_QWORD *)(v21 + 8)) != 0)
  {
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    WebCore::ResourceTimingInformation::storeResourceTimingInitiatorInformation(v17, (uint64_t)a1, &v31, v22);
    do
    {
      v26 = __ldaxr(v23);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v23));
    if (!v27)
    {
      atomic_store(1u, v23);
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v29 = off_1E31FE290;
      v29[1] = v23;
      v32 = v29;
      WTF::ensureOnMainThread();
      v30 = v32;
      v32 = 0;
      if (v30)
        (*(void (**)(_QWORD *))(*v30 + 8))(v30);
    }
  }
  else
  {
    WebCore::ResourceTimingInformation::storeResourceTimingInitiatorInformation(v17, (uint64_t)a1, &v31, 0);
  }
  result = v31;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v31, v25);
    else
      *(_DWORD *)v31 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceTimingInformation::storeResourceTimingInitiatorInformation(WTF::StringImpl *result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v9[56];
  WTF::StringImpl *v10;
  int v11;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_BYTE *)(v4 + 556) & 0x1F) != 0)
  {
    v5 = *a3;
    if (!*a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(a4 + 120);
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return result;
  v5 = *(WTF::StringImpl **)(*(_QWORD *)(v8 + 96) + 24);
  if (v5)
LABEL_3:
    *(_DWORD *)v5 += 2;
LABEL_4:
  v10 = v5;
  v11 = 0;
  WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::add<WebCore::ResourceTimingInformation::InitiatorInfo&>((uint64_t)result, (_QWORD *)v4, (uint64_t)&v10, (uint64_t)v9);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::add<WebCore::ResourceTimingInformation::InitiatorInfo&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  unsigned int v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *result;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  WTF::StringImpl **v47;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  v10 = a2[1];
  if (v10
    || (v10 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v10 = 1,
        *(_QWORD *)(v10 + 8) = a2,
        v42 = (unsigned int *)a2[1],
        a2[1] = v10,
        !v42))
  {
    do
      v11 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v11 + 1, (unsigned int *)v10));
    do
      v12 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v12 + 1, (unsigned int *)v10));
  }
  else
  {
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, a2);
    }
    v10 = a2[1];
    do
      v45 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v45 + 1, (unsigned int *)v10));
    do
      v46 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v46 + 1, (unsigned int *)v10));
    if (!v10)
      goto LABEL_9;
  }
  do
  {
    v13 = __ldaxr((unsigned int *)v10);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v10));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v10);
    WTF::fastFree((WTF *)v10, a2);
  }
LABEL_9:
  v15 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, 8u, 0), (v15 = *(_QWORD *)a1) != 0))
  {
    v16 = 0;
    v17 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v17 = 0;
    v16 = 1;
  }
  v18 = 0;
  v19 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = (v21 >> 31) ^ v21;
  for (i = 1; ; ++i)
  {
    v24 = v22 & v17;
    v25 = (WTF::StringImpl **)(v15 + 24 * v24);
    result = *v25;
    if (!*v25)
    {
      if (v18)
      {
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        --*(_DWORD *)(*(_QWORD *)a1 - 16);
        *(_QWORD *)v18 = v10;
      }
      else
      {
        *v25 = (WTF::StringImpl *)v10;
        v18 = (WTF::StringImpl *)(v15 + 24 * v24);
      }
      v27 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v27 += 2;
      result = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = v27;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *((_DWORD *)v18 + 4) = *(_DWORD *)(a3 + 8);
      v28 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v29 = *(_DWORD *)(v28 - 12) + 1;
      else
        v29 = 1;
      *(_DWORD *)(v28 - 12) = v29;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(v30 - 16) + v31);
      v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_29;
      }
      else
      {
        if (3 * v33 > 4 * v32)
        {
LABEL_29:
          v34 = v30 + 24 * v33;
          v35 = 1;
          v25 = (WTF::StringImpl **)v18;
          goto LABEL_30;
        }
        if (!(_DWORD)v33)
        {
          v41 = 8;
LABEL_50:
          result = (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v41, (unsigned int **)v18);
          v18 = result;
          v30 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            LODWORD(v33) = *(_DWORD *)(v30 - 4);
          else
            LODWORD(v33) = 0;
          goto LABEL_29;
        }
      }
      v41 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
      goto LABEL_50;
    }
    if (result != (WTF::StringImpl *)-1)
      break;
    v18 = (WTF::StringImpl *)(v15 + 24 * v24);
LABEL_15:
    v22 = i + v24;
  }
  if (result != (WTF::StringImpl *)v10)
    goto LABEL_15;
  if ((v16 & 1) != 0)
    v39 = 0;
  else
    v39 = *(_DWORD *)(v15 - 4);
  v34 = v15 + 24 * v39;
  if (v10)
  {
    do
      v40 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v40 - 1, (unsigned int *)v10));
    if (v40 == 1)
    {
      atomic_store(1u, (unsigned int *)v10);
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v10, a2);
    }
  }
  v35 = 0;
LABEL_30:
  v36 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v37 = *(_DWORD *)(v36 - 4);
    v38 = v36 + 24 * v37;
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  if (v25 != (WTF::StringImpl **)v38)
  {
    while (!*((_QWORD *)*v25 + 1))
    {
      v47 = v25 + 3;
      v25 = (WTF::StringImpl **)v34;
      if (v47 != (WTF::StringImpl **)v34)
      {
        v25 = v47;
        while ((unint64_t)*v25 + 1 <= 1)
        {
          v25 += 3;
          if (v25 == (WTF::StringImpl **)v34)
          {
            v25 = (WTF::StringImpl **)v34;
            break;
          }
        }
      }
      if (v25 == (WTF::StringImpl **)v38)
      {
        v25 = (WTF::StringImpl **)v38;
        break;
      }
    }
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v25;
  *(_QWORD *)(a4 + 16) = v34;
  *(_QWORD *)(a4 + 24) = v38;
  *(_QWORD *)(a4 + 32) = v36 + 24 * v37;
  *(_DWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = v35;
  return result;
}

uint64_t *WebCore::createResource(uint64_t *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9;
  WebCore::CachedResourceHandleBase *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WebCore::CachedResource *v36;
  WebCore::CachedResource *v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WebCore::CachedResourceHandleBase *v43;

  v9 = a2;
  v10 = (WebCore::CachedResourceHandleBase *)result;
  if (a2 == 1)
  {
    v11 = WTF::fastMalloc((WTF *)0x2E0);
    v12 = WebCore::CachedResource::CachedResource(v11, a3, 1, a4, a5);
    *(_QWORD *)v12 = off_1E33F8488;
    *(_OWORD *)(v12 + 656) = 0u;
    *(_OWORD *)(v12 + 672) = 0u;
    *(_OWORD *)(v12 + 688) = 0u;
    *(_OWORD *)(v12 + 704) = 0u;
    *(_BYTE *)(v12 + 720) = -112;
    *(_WORD *)(v12 + 557) &= 0xFF1Fu;
    result = *(uint64_t **)(v12 + 8);
    if (result)
      goto LABEL_54;
    result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    result[1] = v11;
    v25 = *(unsigned int **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = result;
    if (!v25)
      goto LABEL_54;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v24);
    }
    result = *(uint64_t **)(v11 + 8);
    if (result)
    {
LABEL_54:
      do
        v13 = __ldaxr((unsigned int *)result);
      while (__stlxr(v13 + 1, (unsigned int *)result));
LABEL_4:
      *(_QWORD *)v10 = result;
      v14 = result[1];
      if (v14)
      {
        v43 = v10;
        ++*(_DWORD *)(v14 + 548);
        v15 = *(_QWORD *)(v14 + 488);
        if (v15)
        {
          if (*(_QWORD *)(v15 + 8))
            return WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v14 + 464), (uint64_t *)&v43, (uint64_t)&v42);
        }
      }
    }
    else
    {
LABEL_51:
      *(_QWORD *)v10 = 0;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        v17 = WTF::fastMalloc((WTF *)0x2C0);
        v18 = WebCore::CachedResource::CachedResource(v17, a3, v9, a4, a5);
        *(_QWORD *)v18 = off_1E33F85F8;
        *(_BYTE *)(v18 + 688) = 0;
        *(_QWORD *)(v18 + 656) = 0;
        *(_QWORD *)(v18 + 672) = 0;
        *(_QWORD *)(v18 + 664) = 0;
        *(_BYTE *)(v18 + 680) = 0;
        *(_WORD *)(v18 + 696) = 1;
        result = *(uint64_t **)(v18 + 8);
        if (!result)
        {
          result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)result = 1;
          result[1] = v17;
          v29 = *(unsigned int **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = result;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v28);
            }
            result = *(uint64_t **)(v17 + 8);
            if (!result)
              goto LABEL_51;
          }
        }
        do
          v19 = __ldaxr((unsigned int *)result);
        while (__stlxr(v19 + 1, (unsigned int *)result));
        goto LABEL_4;
      case 2:
        v22 = WTF::fastMalloc((WTF *)0x2B0);
        result = *(uint64_t **)(WebCore::CachedCSSStyleSheet::CachedCSSStyleSheet(v22, a3, a4, a5) + 8);
        if (!result)
        {
          result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)result = 1;
          result[1] = v22;
          v39 = *(unsigned int **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = result;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              WTF::fastFree((WTF *)v39, v38);
            }
            result = *(uint64_t **)(v22 + 8);
            if (!result)
              goto LABEL_51;
          }
        }
        do
          v23 = __ldaxr((unsigned int *)result);
        while (__stlxr(v23 + 1, (unsigned int *)result));
        goto LABEL_4;
      case 3:
        v20 = WTF::fastMalloc((WTF *)0x2B0);
        result = *(uint64_t **)(WebCore::CachedScript::CachedScript(v20, a3, a4, a5) + 8);
        if (!result)
        {
          result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)result = 1;
          result[1] = v20;
          v33 = *(unsigned int **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = result;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v32);
            }
            result = *(uint64_t **)(v20 + 8);
            if (!result)
              goto LABEL_51;
          }
        }
        do
          v21 = __ldaxr((unsigned int *)result);
        while (__stlxr(v21 + 1, (unsigned int *)result));
        goto LABEL_4;
      case 4:
        v37 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x2A0);
        WebCore::CachedFont::CachedFont((uint64_t)v37, a3, a4, a5, 4);
        goto LABEL_45;
      case 5:
        v36 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x2C0);
        WebCore::CachedSVGFont::CachedSVGFont((uint64_t)v36, a3, a4, a5, a6);
        goto LABEL_38;
      case 12:
        v37 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x2A0);
        WebCore::CachedXSLStyleSheet::CachedXSLStyleSheet((uint64_t)v37, a3, a4, a5);
        goto LABEL_45;
      case 13:
        v37 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x290);
        WebCore::CachedResource::CachedResource((uint64_t)v37, a3, 13, a4, a5);
        goto LABEL_45;
      case 14:
        v37 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x290);
        WebCore::CachedTextTrack::CachedTextTrack((uint64_t)v37, a3, a4, a5);
        goto LABEL_45;
      case 15:
        v37 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x2B0);
        WebCore::CachedApplicationManifest::CachedApplicationManifest((uint64_t)v37, a3, a4, a5);
LABEL_45:
        result = (uint64_t *)WebCore::CachedResourceHandleBase::CachedResourceHandleBase(v10, v37);
        break;
      case 16:
        v36 = (WebCore::CachedResource *)WTF::fastMalloc((WTF *)0x2B0);
        WebCore::CachedSVGDocument::CachedSVGDocument(v36, a3, a4, a5, a6);
LABEL_38:
        result = (uint64_t *)WebCore::CachedResourceHandleBase::CachedResourceHandleBase(v10, v36);
        break;
      default:
        goto LABEL_51;
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_33;
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_23:
    *(_DWORD *)(v2 + 8) = 0;
    goto LABEL_24;
  }
  v5 = 0;
  do
  {
    v6 = (uint64_t *)(v3 + 24 * --v4);
    result = *v6;
    if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
    {
      *v6 = 0;
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        WTF::fastFree((WTF *)result, a2);
      }
      *v6 = -1;
      v9 = v3 + 24 * v4;
      result = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++v5;
    }
  }
  while (v4);
  v3 = *(_QWORD *)v2;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v14 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v5;
    v3 = *(_QWORD *)v2;
  }
  if (!v3)
  {
LABEL_33:
    v12 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    goto LABEL_25;
  }
  v10 = *(_DWORD *)(v3 - 4);
  if (v10 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v10)
    goto LABEL_23;
  result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ResourceTimingInformation::InitiatorInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v2);
  v3 = *(_QWORD *)v2;
  *(_DWORD *)(v2 + 8) = 0;
  if (!v3)
  {
    v12 = 0;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_DWORD *)(v3 - 12);
  v13 = 0x7FFFFFFF;
  if (v12 < 0x7FFFFFFF)
LABEL_25:
    v13 = v12;
  *(_DWORD *)(v2 + 12) = 2 * v13;
  return result;
}

uint64_t WebCore::CachedScript::CachedScript(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  const WTF::String *v15;
  PAL *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  __int128 v19;
  WTF::StringImpl *v20;
  uint64_t *v22;
  _QWORD v23[2];
  __int16 v24;
  WTF::StringImpl *v25;
  const char *v26[2];

  v6 = WebCore::CachedResource::CachedResource(a1, a2, 3, a3, a4);
  *(_QWORD *)v6 = off_1E33F8C40;
  *(_QWORD *)(v6 + 656) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  *(_BYTE *)(v6 + 668) = 0;
  *(_DWORD *)(v6 + 672) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = *(_QWORD *)(a2 + 200);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v10 = (const char *)PAL::atomCanonicalTextEncodingName(v8, (const char *)v9);
  v12 = v11;
  v23[0] = v10;
  v23[1] = v11;
  v26[0] = v10;
  v26[1] = v11;
  if (v11 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v26))
    {
      v13 = 165;
    }
    else
    {
      v13 = 92;
    }
  }
  else
  {
    v13 = 92;
  }
  v24 = v13;
  v14 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v14 = 1;
  v16 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v25, v15);
  *(_DWORD *)(v14 + 4) = (_DWORD)v16;
  if ((_DWORD)v16 == 2)
  {
    v22 = PAL::UTF8Encoding(v16);
  }
  else
  {
    if (v12)
    {
      v18 = v23;
      goto LABEL_13;
    }
    v22 = PAL::Latin1Encoding(v16);
  }
  v18 = v22 + 1;
LABEL_13:
  *(_QWORD *)(v14 + 8) = &off_1E31F4A18;
  v19 = *(_OWORD *)v18;
  *(_WORD *)(v14 + 32) = *((_WORD *)v18 + 8);
  *(_OWORD *)(v14 + 16) = v19;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 87) = 0;
  *(_QWORD *)(a1 + 680) = v14;
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  return a1;
}

uint64_t WebCore::NetworkLoadMetrics::NetworkLoadMetrics(uint64_t result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _DWORD **a13, __int16 a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26)
{
  _DWORD *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = *a3;
  *(_QWORD *)(result + 16) = *a4;
  *(_QWORD *)(result + 24) = *a5;
  *(_QWORD *)(result + 32) = *a6;
  *(_QWORD *)(result + 40) = *a7;
  *(_QWORD *)(result + 48) = *a8;
  *(_QWORD *)(result + 56) = *a9;
  *(_QWORD *)(result + 64) = *a10;
  *(_QWORD *)(result + 72) = *a11;
  *(_QWORD *)(result + 80) = *a12;
  v26 = *a13;
  if (*a13)
    *v26 += 2;
  *(_QWORD *)(result + 88) = v26;
  *(_WORD *)(result + 96) = a14;
  if (a16)
    v27 = 2;
  else
    v27 = 0;
  v28 = v27 | a15;
  if (a17)
    v29 = 4;
  else
    v29 = 0;
  if (a18)
    v30 = 8;
  else
    v30 = 0;
  v31 = v28 | v29 | v30;
  if (a19)
    v32 = 16;
  else
    v32 = 0;
  if (a20)
    v33 = 32;
  else
    v33 = 0;
  if (a21)
    v34 = 64;
  else
    v34 = 0;
  if (a22)
    v35 = 0x80;
  else
    v35 = 0;
  *(_BYTE *)(result + 98) = v31 | v32 | v33 | v34 | v35;
  *(_BYTE *)(result + 99) = a23;
  *(_QWORD *)(result + 104) = a24;
  *(_QWORD *)(result + 112) = a25;
  v36 = *a26;
  *a26 = 0;
  *(_QWORD *)(result + 120) = v36;
  return result;
}

{
  _DWORD *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = *a3;
  *(_QWORD *)(result + 16) = *a4;
  *(_QWORD *)(result + 24) = *a5;
  *(_QWORD *)(result + 32) = *a6;
  *(_QWORD *)(result + 40) = *a7;
  *(_QWORD *)(result + 48) = *a8;
  *(_QWORD *)(result + 56) = *a9;
  *(_QWORD *)(result + 64) = *a10;
  *(_QWORD *)(result + 72) = *a11;
  *(_QWORD *)(result + 80) = *a12;
  v26 = *a13;
  if (*a13)
    *v26 += 2;
  *(_QWORD *)(result + 88) = v26;
  *(_WORD *)(result + 96) = a14;
  if (a16)
    v27 = 2;
  else
    v27 = 0;
  v28 = v27 | a15;
  if (a17)
    v29 = 4;
  else
    v29 = 0;
  if (a18)
    v30 = 8;
  else
    v30 = 0;
  v31 = v28 | v29 | v30;
  if (a19)
    v32 = 16;
  else
    v32 = 0;
  if (a20)
    v33 = 32;
  else
    v33 = 0;
  if (a21)
    v34 = 64;
  else
    v34 = 0;
  if (a22)
    v35 = 0x80;
  else
    v35 = 0;
  *(_BYTE *)(result + 98) = v31 | v32 | v33 | v34 | v35;
  *(_BYTE *)(result + 99) = a23;
  *(_QWORD *)(result + 104) = a24;
  *(_QWORD *)(result + 112) = a25;
  v36 = *a26;
  *a26 = 0;
  *(_QWORD *)(result + 120) = v36;
  return result;
}

WebCore::Scrollbar *WebCore::RenderLayerScrollableArea::updateScrollbarSteps(WebCore::RenderLayerScrollableArea *this)
{
  WebCore::RenderBox *v2;
  WebCore::Scrollbar *result;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
    v2 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  else
    v2 = 0;
  v21 = 0;
  v22 = WebCore::RenderBox::clientWidth(v2);
  v23 = WebCore::RenderBox::clientHeight(v2);
  result = (WebCore::Scrollbar *)WebCore::RenderBox::scrollPaddingForViewportRect(v2, (const WebCore::LayoutRect *)&v21);
  v6 = (v21 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v21, v5))
    v6 = v21 + v5;
  v7 = (HIDWORD(v21) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v21), (_DWORD)result))
    v7 = HIDWORD(v21) + (_DWORD)result;
  v21 = __PAIR64__(v7, v6);
  v8 = (v5 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v5, HIDWORD(result)))
    v8 = v5 + HIDWORD(result);
  v9 = (_DWORD)result + v4;
  if (__OFADD__((_DWORD)result, v4))
    v9 = (result >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v22, v8);
  v11 = v22 - v8;
  if (v10)
    v11 = (v22 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v23, v9);
  v12 = v23 - v9;
  if (v10)
    v12 = (v23 >> 31) + 0x7FFFFFFF;
  v22 = v11;
  v23 = v12;
  v13 = (_DWORD *)*((_QWORD *)this + 16);
  if (v13)
  {
    v18 = ((int)(v11 - (v12 & 0xFFFFFFC0) + 32) >> 6) + v11 / 64;
    v19 = llroundf((float)v18 * 0.8);
    result = (WebCore::Scrollbar *)WebCore::Scrollbar::maxOverlapBetweenPages(result);
    v20 = llroundf((float)(v18 - (int)result));
    if (v19 > v20)
      v20 = v19;
    if (v20 <= 1)
      v20 = 1;
    v13[26] = 40;
    v13[27] = v20;
    v13[28] = 1065353216;
  }
  v14 = (_DWORD *)*((_QWORD *)this + 17);
  if (v14)
  {
    v15 = ((int)(v23 - (v12 & 0xFFFFFFC0) + 32) >> 6) + v23 / 64;
    v16 = llroundf((float)v15 * 0.8);
    result = (WebCore::Scrollbar *)WebCore::Scrollbar::maxOverlapBetweenPages(result);
    v17 = llroundf((float)(v15 - (int)result));
    if (v16 > v17)
      v17 = v16;
    if (v17 <= 1)
      v17 = 1;
    v14[26] = 40;
    v14[27] = v17;
    v14[28] = 1065353216;
  }
  return result;
}

unint64_t WebCore::RenderBox::scrollPaddingForViewportRect(WebCore::RenderBox *this, const WebCore::LayoutRect *a2)
{
  unsigned __int8 *v3;
  int v4;
  float v5;
  double v6;
  unsigned int v7;
  int v8;
  float v9;
  double v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  float v16;
  int v17;
  float v18;

  v3 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 40);
  v4 = v3[164];
  if (v4 == 4)
  {
    v5 = *((float *)v3 + 40);
    if (!v3[166])
      v5 = (float)SLODWORD(v5);
  }
  else
  {
    v15 = *((_DWORD *)a2 + 3);
    if (v4 == 3)
    {
      v16 = *((float *)v3 + 40);
      if (!v3[166])
        v16 = (float)SLODWORD(v16);
      v5 = (float)((float)((float)v15 * 0.015625) * v16) / 100.0;
    }
    else
    {
      if (v4 != 11)
      {
        v7 = 0;
        goto LABEL_7;
      }
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v3 + 160), (float)v15 * 0.015625);
    }
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    v7 = 0x7FFFFFFF;
  }
  else if (v6 <= -2147483650.0)
  {
    v7 = 0x80000000;
  }
  else
  {
    v7 = (int)v6;
  }
LABEL_7:
  v8 = v3[172];
  if (v8 == 4)
  {
    v9 = *((float *)v3 + 42);
    if (!v3[174])
      v9 = (float)SLODWORD(v9);
  }
  else
  {
    v17 = *((_DWORD *)a2 + 2);
    if (v8 == 3)
    {
      v18 = *((float *)v3 + 42);
      if (!v3[174])
        v18 = (float)SLODWORD(v18);
      v9 = (float)((float)((float)v17 * 0.015625) * v18) / 100.0;
    }
    else
    {
      if (v8 != 11)
      {
        v11 = 0;
        goto LABEL_13;
      }
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v3 + 168), (float)v17 * 0.015625);
    }
  }
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFFLL;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
LABEL_13:
  v12 = v3[180];
  if (v12 != 4 && v12 != 3 && v12 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v3 + 176), (float)*((int *)a2 + 3) * 0.015625);
  v13 = v3[188];
  if (v13 != 4 && v13 != 3 && v13 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v3 + 184), (float)*((int *)a2 + 2) * 0.015625);
  return v7 | (unint64_t)(v11 << 32);
}

uint64_t WebCore::Scrollbar::maxOverlapBetweenPages(WebCore::Scrollbar *this)
{
  uint64_t result;
  uint64_t *v2;

    return WebCore::Scrollbar::maxOverlapBetweenPages(void)::maxOverlapBetweenPages;
  v2 = WebCore::ScrollbarTheme::theme(this);
  result = (*(uint64_t (**)(uint64_t *))(*v2 + 192))(v2);
  WebCore::Scrollbar::maxOverlapBetweenPages(void)::maxOverlapBetweenPages = result;
  return result;
}

double WebCore::StaticCSSValuePool::StaticCSSValuePool(WebCore::StaticCSSValuePool *this)
{
  uint64_t v1;
  int *v2;
  char v3;
  unsigned int v4;
  uint64_t i;
  double result;
  int *v7;
  char v8;
  char v9;
  int *v10;
  char v11;

  WebCore::CSSPrimitiveValue::CSSPrimitiveValue((uint64_t)WebCore::staticCSSValuePool);
  WTF::LazyNeverDestroyed<WebCore::CSSPrimitiveValue,WTF::AnyThreadsAccessTraits>::constructWithoutAccessCheck<WebCore::CSSValue::StaticCSSValueTag,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&dword_1ECE88BB8, 0, 0);
  WTF::LazyNeverDestroyed<WebCore::CSSPrimitiveValue,WTF::AnyThreadsAccessTraits>::constructWithoutAccessCheck<WebCore::CSSValue::StaticCSSValueTag,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&dword_1ECE88BC8, 0, 0xFFFFFFFF);
  WTF::LazyNeverDestroyed<WebCore::CSSPrimitiveValue,WTF::AnyThreadsAccessTraits>::constructWithoutAccessCheck<WebCore::CSSValue::StaticCSSValueTag,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>((uint64_t)&dword_1ECE88BD8, 0, 0xFF000000);
  v1 = 0;
  v2 = &WebCore::staticCSSValuePool[3090];
  do
  {
    v3 = *((_BYTE *)v2 - 2);
    *((_WORD *)v2 - 2) = 80;
    *((_BYTE *)v2 - 2) = v3 & 0xFC;
    *(_WORD *)v2 = v1;
    *(v2 - 2) = 3;
    ++v1;
    v2 += 4;
  }
  while (v1 != 1166);
  v4 = 0;
  for (i = 0; i != 1024; i += 4)
  {
    result = (double)v4;
    v7 = &WebCore::staticCSSValuePool[i];
    v8 = BYTE2(WebCore::staticCSSValuePool[i + 17]);
    *((_WORD *)v7 + 34) = 6;
    *((_BYTE *)v7 + 70) = v8 & 0xFC;
    *((double *)v7 + 9) = (double)v4;
    v7[16] = 3;
    v9 = BYTE2(WebCore::staticCSSValuePool[i + 1041]);
    *((_WORD *)v7 + 2082) = 3;
    BYTE2(WebCore::staticCSSValuePool[i + 1041]) = v9 & 0xFC;
    *((double *)v7 + 521) = (double)v4;
    v7[1040] = 3;
    v10 = &WebCore::staticCSSValuePool[i + 2065];
    v11 = BYTE2(WebCore::staticCSSValuePool[i + 2065]);
    *(_WORD *)v10 = 1;
    *((_BYTE *)v10 + 2) = v11 & 0xFC;
    *((double *)v7 + 1033) = (double)v4;
    v7[2064] = 3;
    ++v4;
  }
  return result;
}

unsigned int *WTF::LazyNeverDestroyed<WebCore::CSSPrimitiveValue,WTF::AnyThreadsAccessTraits>::constructWithoutAccessCheck<WebCore::CSSValue::StaticCSSValueTag,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v7 = bswap32(a3) | 0x1104000000000000;
  result = (unsigned int *)WebCore::CSSPrimitiveValue::CSSPrimitiveValue(a1, a2, &v7);
  if ((v7 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::CSSPrimitiveValue(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;

  v3 = *a3;
  if (*a3)
    *a3 = 0;
  v4 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 24;
  *(_BYTE *)(result + 6) = v4 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)result = 3;
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::CSSPrimitiveValue(uint64_t result)
{
  char v1;

  v1 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 8) = 2;
  *(_DWORD *)result = 3;
  *(_WORD *)(result + 4) = 336;
  *(_BYTE *)(result + 6) = v1 & 0xFC;
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::setMediaCapabilityGrantsEnabled(uint64_t this)
{
  WebCore::PlatformMediaSessionManager::s_mediaCapabilityGrantsEnabled = this;
  return this;
}

uint64_t WebCore::MediaSessionManagerCocoa::setSampleBufferContentKeySessionSupportEnabled(uint64_t this)
{
  WebCore::s_sampleBufferContentKeySessionSupportEnabled = this;
  return this;
}

uint64_t PAL::SOAuthorizationFunction(PAL *this)
{
  return qword_1ECE7D588;
}

void WebCore::Document::updateRenderTree(uint64_t a1, WebCore::Style::Update **a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  WebCore::Style::Update *v7;
  void *v8;
  WebCore::Style::Update *v9;
  uint64_t v10;
  void *v11;
  WebCore::Style::Update *v12;
  _QWORD v13[6];
  uint64_t v14;
  char v15;

  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v15, a1, 1);
  v4 = *(_BYTE *)(a1 + 3392);
  *(_BYTE *)(a1 + 3392) = 1;
  v13[0] = a1;
  memset(&v13[1], 0, 24);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = v13;
  v5[1] = 0;
  v13[4] = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v13;
  v13[5] = v6;
  WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)&v14, *(WebCore::RenderView **)(v13[0] + 1944));
  v7 = *a2;
  *a2 = 0;
  v12 = v7;
  WebCore::RenderTreeUpdater::commit((uint64_t)v13, (uint64_t)&v12);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    WebCore::Style::Update::~Update(v9, v8);
    if (*(_DWORD *)v10)
    {
      *(_QWORD *)(v10 + 80) = 0;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v10, v8);
    }
  }
  WebCore::RenderTreeUpdater::~RenderTreeUpdater((WebCore::RenderTreeUpdater *)v13, v8);
  *(_BYTE *)(a1 + 3392) = v4;
  WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v15, v11);
}

uint64_t WebCore::Document::resolveStyle(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v8;
  const WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WebCore::Style::Scope *v17;
  uint64_t v18;
  WebCore::RenderView *v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WebCore::DocumentFontLoader *v30;
  WebCore::Style::Update *v31;
  void *v32;
  WebCore::Style::Update *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  WebCore::Style::Update *v39;
  uint64_t v40;
  void *v41;
  int v42;
  WebCore::Document *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  const WebCore::RenderStyle *v53;
  const WebCore::RenderStyle *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  WebCore::RenderStyle *v63;
  WTF *v64;
  void *v65;
  WTF::JSONImpl::Object *v66;
  _QWORD *v67;
  WebCore::Style::Update *v68;
  char v69;
  char v70;
  void *v71;
  void *v72;
  uint64_t v73;
  WebCore::RenderLayerCompositor *v74;
  WebCore::RenderLayerCompositor *v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  WebCore::Node *ElementSibling;
  WebCore::Element *v83;
  WebCore::Style::Update *v84;
  WebCore::Style::Update *v85;
  WebCore::Style::Update *v86;
  WebCore::Style::Update *v87;
  WTF *v88;
  _DWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD v92[3];
  _DWORD *v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE v96[776];
  uint64_t v97;
  unsigned __int8 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[26];
  uint64_t v102;
  char v103;
  WTF *v104[2];

  ++WebCore::ScriptDisallowedScope::s_count;
  v2 = *(_QWORD *)(result + 1944);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)(v2 + 248);
    v6 = *(_DWORD *)(v5 + 8);
    *(_DWORD *)(v5 + 8) = v6 + 1;
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0)
    {
      if (*(_BYTE *)(v5 + 1374))
      {
        __break(0xC471u);
        JUMPOUT(0x19429A0A0);
      }
      if (*(_BYTE *)(result + 3391))
      {
        __break(0xC471u);
        JUMPOUT(0x19429A0C0);
      }
    }
    else if (*(_BYTE *)(v5 + 1374) || *(_BYTE *)(result + 3391))
    {
      goto LABEL_63;
    }
    kdebug_trace();
    WebCore::RenderView::RepaintRegionAccumulator::RepaintRegionAccumulator((WebCore::RenderView::RepaintRegionAccumulator *)v104, *(WebCore::RenderView **)(v4 + 1944));
    v88 = 0;
    v89 = 0;
    WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>&&)#1},WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t *)&v88, v4 + 3168);
    v10 = v88;
    if (HIDWORD(v89))
    {
      v11 = 8 * HIDWORD(v89);
      v12 = v11;
      v13 = v88;
      do
      {
        v14 = *(_QWORD *)v13;
        v13 = (WTF *)((char *)v13 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1096))(v14);
        v12 -= 8;
      }
      while (v12);
      v15 = v10;
      do
      {
        v16 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v16)
        {
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
        }
        v15 = (WTF *)((char *)v15 + 8);
        v11 -= 8;
      }
      while (v11);
    }
    if (v10)
      WTF::fastFree(v10, v8);
    v17 = *(WebCore::Style::Scope **)(v4 + 1328);
    if (*((_BYTE *)v17 + 234))
      WebCore::Style::Scope::flushPendingDescendantUpdates(*(WebCore::Style::Scope **)(v4 + 1328), (uint64_t)v8, v9);
    if (*((_BYTE *)v17 + 233))
      WebCore::Style::Scope::flushPendingSelfUpdate(v17, (uint64_t)v8, v9);
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 328) + 296);
    if (v18)
    {
      v19 = *(WebCore::RenderView **)(v18 + 1944);
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 50);
        if (!v20)
        {
          v74 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v20 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v74, v19);
          v75 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v19 + 50);
          *((_QWORD *)v19 + 50) = v20;
          if (v75)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v75);
            WTF::fastFree(v76, v77);
            v20 = *((_QWORD *)v19 + 50);
          }
        }
        WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags(v20);
      }
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v66 = (WTF::JSONImpl::Object *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v4, (WebCore::Document *)v8);
      if (v66)
        WebCore::InspectorInstrumentation::willRecalculateStyleImpl(v66, v4);
    }
    WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v103, v4, 1);
    ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    *(_BYTE *)(v4 + 3391) = 1;
    if (*(_BYTE *)(v4 + 3390) || (a2 & 1) != 0)
    {
      *(_BYTE *)(v4 + 3378) = 0;
      WebCore::Style::resolveForDocument((WebCore::Style *)v4, (uint64_t)&v88);
      v54 = *(const WebCore::RenderStyle **)(v4 + 1952);
      if (!v54 || WebCore::Style::determineChange((WebCore::Style *)&v88, v54, v53))
      {
        v58 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v58 = 0;
        v59 = v89;
        ++*v89;
        *(_QWORD *)(v58 + 8) = v59;
        *(_QWORD *)(v58 + 16) = v90;
        v60 = v91;
        ++*(_DWORD *)v91;
        *(_QWORD *)(v58 + 24) = v60;
        v61 = v92[0];
        ++*(_DWORD *)v92[0];
        *(_QWORD *)(v58 + 32) = v61;
        *(_QWORD *)(v58 + 40) = v92[1];
        *(_QWORD *)(v58 + 48) = 0;
        v62 = v93;
        ++*v93;
        *(_QWORD *)(v58 + 56) = v62;
        v63 = *(WebCore::RenderStyle **)(v4 + 1952);
        *(_QWORD *)(v4 + 1952) = v58;
        if (v63)
        {
          WebCore::RenderStyle::~RenderStyle(v63, v57);
          if (*(_DWORD *)v64)
          {
            *((_OWORD *)v64 + 2) = 0u;
            *((_OWORD *)v64 + 3) = 0u;
            *(_OWORD *)v64 = 0u;
            *((_OWORD *)v64 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v64, v65);
          }
        }
        WebCore::RenderElement::setStyle(*(_QWORD *)(v4 + 1944), &v88, 0);
      }
      v56 = *(_QWORD *)(v4 + 1272);
      if (v56)
      {
        *(_DWORD *)(v56 + 24) += 2;
        WebCore::Node::invalidateStyle(v56, 4u, 0);
        if ((*(_BYTE *)(v56 + 71) & 1) != 0)
        {
          v81 = *(_QWORD *)(v56 + 32);
          if (!v81 || (*(_WORD *)(v81 + 28) & 8) == 0 || (*(_BYTE *)(v81 + 70) & 4) == 0)
          {
            ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v56);
            WebCore::invalidateForSiblingCombinators(ElementSibling, v83);
          }
        }
        if (*(_DWORD *)(v56 + 24) == 2)
        {
          if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v56);
        }
        else
        {
          *(_DWORD *)(v56 + 24) -= 2;
        }
      }
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v88, v55);
    }
    v23 = *(_QWORD *)(v4 + 1560);
    *(_QWORD *)(v4 + 1560) = 0;
    v88 = (WTF *)v4;
    v89 = 0;
    v90 = v92;
    v91 = 4;
    v94 = v96;
    v95 = 32;
    v96[768] = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0u;
    v100 = 0u;
    memset(v101, 0, sizeof(v101));
    v102 = v23;
    WebCore::Style::TreeResolver::resolve((WebCore::Style::TreeResolver *)&v88, v22, &v87);
    while (1)
    {
      v25 = v101[24];
      if (!(v98 | v101[24]))
        break;
      v68 = v87;
      if (v87)
      {
        v69 = *(_BYTE *)(v4 + 3394);
        *(_BYTE *)(v4 + 3394) = v98;
        v70 = *(_BYTE *)(v4 + 3395);
        *(_BYTE *)(v4 + 3395) = v25;
        v86 = v68;
        v87 = 0;
        WebCore::Document::updateRenderTree(v4, &v86);
        std::unique_ptr<WebCore::Style::Update>::~unique_ptr[abi:sn180100](&v86, v71);
        if (WebCore::LocalFrameViewLayoutContext::needsLayout((WebCore::LocalFrameViewLayoutContext *)(v5 + 336)))
          WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v5 + 336));
        *(_BYTE *)(v4 + 3395) = v70;
        *(_BYTE *)(v4 + 3394) = v69;
      }
      WebCore::Style::TreeResolver::resolve((WebCore::Style::TreeResolver *)&v88, v24, &v85);
      std::unique_ptr<WebCore::Style::Update>::operator=[abi:sn180100](&v87, &v85);
      std::unique_ptr<WebCore::Style::Update>::~unique_ptr[abi:sn180100](&v85, v72);
    }
    if (v87)
    {
      v26 = *((_QWORD *)v87 + 8);
      if (v26)
        LODWORD(v26) = *(_DWORD *)(v26 - 12);
      v27 = *((_QWORD *)v87 + 9);
      if (v27)
        LODWORD(v27) = *(_DWORD *)(v27 - 12);
      v28 = v27 + v26;
    }
    else
    {
      v28 = 0;
    }
    *(_DWORD *)(v4 + 3332) = v28;
    v29 = *(_QWORD *)(v4 + 64);
    *(_WORD *)(v4 + 30) &= 0xFF8Fu;
    *(_QWORD *)(v4 + 64) = v29 & 0xFFE0FFFFFFFFFFFFLL;
    if ((*(_QWORD *)(v4 + 1536) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 1504));
    *(_WORD *)(v4 + 3390) = 0;
    v30 = *(WebCore::DocumentFontLoader **)(v4 + 2656);
    if (v30)
      WebCore::DocumentFontLoader::loadPendingFonts(v30, v24);
    v31 = v87;
    if (v87)
    {
      v87 = 0;
      v84 = v31;
      WebCore::Document::updateRenderTree(v4, &v84);
      v33 = v84;
      v84 = 0;
      if (v33)
      {
        WebCore::Style::Update::~Update(v33, v32);
        if (*(_DWORD *)v34)
        {
          *(_QWORD *)(v34 + 80) = 0;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_OWORD *)(v34 + 64) = 0u;
          *(_OWORD *)(v34 + 16) = 0u;
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)v34 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v34, v35);
        }
      }
      WebCore::LocalFrameView::styleAndRenderTreeDidChange((WebCore::LocalFrameView *)v5);
    }
    v37 = WebCore::LocalFrameView::updateCompositingLayersAfterStyleChange((WebCore::LocalFrameView *)v5);
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 1944) + 20) & 0xF8) != 0)
      WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v5 + 336));
    v38 = *(_QWORD *)(v4 + 1256);
    if (v38)
    {
      v73 = *(_QWORD *)(v38 + 64) & 0xFFFFFFFFFFFFLL;
      if (v73)
      {
        if ((*(_BYTE *)(v73 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19429A210);
        }
      }
      else
      {
        v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 328) + 128) + 8);
        if (v78 && !*(_BYTE *)(v78 + 144))
        {
          v79 = (unsigned int *)(v78 + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 + 1, v79));
          WebCore::EventHandler::dispatchFakeMouseMoveEventSoon(*(WebCore::EventHandler **)(v78 + 640));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v79);
        }
      }
    }
    ++*(_DWORD *)(v4 + 3352);
    v39 = v87;
    v87 = 0;
    if (v39)
    {
      WebCore::Style::Update::~Update(v39, v36);
      if (*(_DWORD *)v40)
      {
        *(_QWORD *)(v40 + 80) = 0;
        *(_OWORD *)(v40 + 48) = 0u;
        *(_OWORD *)(v40 + 64) = 0u;
        *(_OWORD *)(v40 + 16) = 0u;
        *(_OWORD *)(v40 + 32) = 0u;
        *(_OWORD *)v40 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v40, v36);
      }
    }
    WebCore::Style::TreeResolver::~TreeResolver((WebCore::Style::TreeResolver *)&v88, v36);
    v42 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
      && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
    {
      WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v88, v41);
      v42 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    }
    WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v42 - 1;
    WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v103, v41);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v67 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v4, v44);
      if (v67)
        WebCore::InspectorInstrumentation::didRecalculateStyleImpl(v67);
    }
    if (v37)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 344) + 8) + 328) + 296);
      if (v46)
        v46 = *(_QWORD *)(v46 + 1944);
      if (((*(_QWORD *)(v5 + 384) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v5 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && (!v46 || (*(_BYTE *)(v46 + 20) & 0xF8) == 0))
      {
        v47 = *(_QWORD *)(v5 + 464);
        if ((!v47 || !*(_QWORD *)(v47 + 8)) && (!*(_DWORD *)(v5 + 488) || !*(_BYTE *)(v5 + 478)))
        {
          v48 = *(_QWORD *)(v5 + 328);
          if (*(_QWORD *)(v48 + 288))
          {
            v49 = *(_QWORD *)(v48 + 24);
            if (v49)
            {
              v50 = *(_QWORD *)(v49 + 8);
              if (v50)
              {
                v51 = *(_QWORD *)(v50 + 232);
                if (v51)
                  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 48))(v51);
              }
            }
            v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v52 = off_1E33FF9B8;
            v88 = v52;
            WebCore::LocalFrameView::applyRecursivelyWithVisibleRect((WebCore::LocalFrameView *)v5, &v88);
            (*(void (**)(WTF *))(*(_QWORD *)v52 + 8))(v52);
          }
        }
      }
    }
    WebCore::RenderView::RepaintRegionAccumulator::~RepaintRegionAccumulator(v104, v44);
    result = kdebug_trace();
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 8) - 1;
LABEL_63:
      if (v6)
        *(_DWORD *)(v5 + 8) = v6;
      else
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

void WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler(WebCore::Style::PostResolutionCallbackDisabler *this, void *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v2 = WebCore::Style::resolutionNestingDepth;
  if (WebCore::Style::resolutionNestingDepth == 1)
  {
    if (*(_BYTE *)this)
    {
      {
        v3 = dword_1EE2F96B4;
        if (dword_1EE2F96B4)
        {
          v18 = 0;
          do
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(WebCore::Style::postResolutionCallbackQueue(void)::vector
                                                         + 8 * v18)
                                           + 16))(*(_QWORD *)(WebCore::Style::postResolutionCallbackQueue(void)::vector
                                                              + 8 * v18));
            ++v18;
            v3 = dword_1EE2F96B4;
            v4 = dword_1EE2F96B4;
          }
          while (v18 < dword_1EE2F96B4);
        }
        else
        {
          v4 = 0;
        }
      }
      else
      {
        v3 = 0;
        v4 = 0;
        WebCore::Style::postResolutionCallbackQueue(void)::vector = 0;
        *(_QWORD *)&dword_1EE2F96B0 = 0;
      }
      if (dword_1EE2F96B0)
      {
        v19 = (WTF *)WebCore::Style::postResolutionCallbackQueue(void)::vector;
        if (v3)
        {
          v20 = 8 * v4;
          do
          {
            v21 = *(_QWORD *)v19;
            *(_QWORD *)v19 = 0;
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v19 = (WTF *)((char *)v19 + 8);
            v20 -= 8;
          }
          while (v20);
          dword_1EE2F96B4 = 0;
          v19 = (WTF *)WebCore::Style::postResolutionCallbackQueue(void)::vector;
        }
        if (v19)
        {
          WebCore::Style::postResolutionCallbackQueue(void)::vector = 0;
          dword_1EE2F96B0 = 0;
          WTF::fastFree(v19, a2);
        }
      }
    }
    if ((byte_1ECE84C51 & 1) != 0)
    {
      v5 = dword_1ECE84C6C;
      if (dword_1ECE84C6C)
      {
        v6 = 0;
        v7 = qword_1ECE84C60;
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 24);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              WebCore::Page::setMemoryCacheClientCallsEnabled(v9, (void *)1);
              v7 = qword_1ECE84C60;
              v5 = dword_1ECE84C6C;
            }
          }
          ++v6;
        }
        while (v6 < v5);
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
      *(_QWORD *)&dword_1ECE84C68 = 0;
      qword_1ECE84C60 = 0;
      byte_1ECE84C51 = 1;
    }
    if (dword_1ECE84C68)
    {
      v10 = (WTF *)qword_1ECE84C60;
      if (v5)
      {
        v11 = qword_1ECE84C60 + 8 * v5;
        do
        {
          v12 = *(_QWORD *)v10;
          *(_QWORD *)v10 = 0;
          if (v12)
          {
            v13 = (unsigned int *)(v12 + 8);
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v22 = off_1E31FE290;
              v22[1] = v13;
              v23 = v22;
              WTF::ensureOnMainThread();
              if (v23)
                (*(void (**)(_QWORD *))(*v23 + 8))(v23);
            }
          }
          v10 = (WTF *)((char *)v10 + 8);
        }
        while (v10 != (WTF *)v11);
        dword_1ECE84C6C = 0;
        v10 = (WTF *)qword_1ECE84C60;
      }
      if (v10)
      {
        qword_1ECE84C60 = 0;
        dword_1ECE84C68 = 0;
        WTF::fastFree(v10, a2);
      }
    }
    v16 = WebCore::s_platformStrategies;
    v17 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v17)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v16 + 8) = v17;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
    v2 = WebCore::Style::resolutionNestingDepth;
  }
  WebCore::Style::resolutionNestingDepth = v2 - 1;
}

uint64_t WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  WTF::MemoryPressureHandler *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  int v31;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 24)
                                                                                         + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 528)
                                         + 8)
                             + 24)
                 + 8);
  v3 = *(_QWORD *)(v2 + 112);
  if ((*(_QWORD *)(v3 + 664) & 0x10) != 0)
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1056))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
    *(_DWORD *)(v1 + 128) = this;
    v4 = this != 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = (uint64_t *)(v3 + 664);
  if (*(_BYTE *)(v3 + 247))
    LODWORD(v6) = *(_BYTE *)(v3 + 246) != 0;
  else
    v6 = (*(_QWORD *)(v3 + 696) >> 28) & 1;
  if (*(_BYTE *)(v3 + 249))
  {
    LODWORD(v8) = *(_BYTE *)(v3 + 248) != 0;
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    v8 = (*(_QWORD *)(v3 + 696) >> 31) & 1;
  }
  v9 = *(_BYTE *)(v1 + 198) != 0;
  v10 = *(_QWORD **)(v1 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10[31] + 328) + 632) + 8) == *(_QWORD *)(v10[31] + 328))
    v9 = v4 & (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10[3] + 8) + 40)
                                                                                                 + 8)
                                                                                     + 528)
                                                                         + 8)
                                                             + 24)
                                                 + 8)
                                     + 112)
                         + 680) >> 7);
  v11 = (v7 >> 6) & 1;
  if (*(unsigned __int8 *)(v1 + 132) != v4
    || *(unsigned __int8 *)(v1 + 192) != (_DWORD)v6
    || (*(unsigned __int8 *)(v1 + 193) == (_DWORD)v8 ? (v12 = *(unsigned __int8 *)(v1 + 198) == v9) : (v12 = 0), !v12))
  {
    v22 = v10[18];
    if (v22)
    {
      v31 = v6;
      v30 = v4;
      v29 = v8;
      v27 = v11;
      v28 = v9;
      WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate(v10[18]);
      this = WebCore::RenderLayer::setDescendantsNeedUpdateBackingAndHierarchyTraversal(v22);
      LOBYTE(v11) = v27;
      LOBYTE(v9) = v28;
      LOBYTE(v8) = v29;
      LOBYTE(v4) = v30;
      LODWORD(v6) = v31;
    }
  }
  v13 = *(unsigned __int8 *)(v1 + 192);
  *(_BYTE *)(v1 + 132) = v4;
  *(_BYTE *)(v1 + 198) = v9;
  *(_BYTE *)(v1 + 192) = v6;
  *(_BYTE *)(v1 + 193) = v8;
  *(_BYTE *)(v1 + 194) = v11;
  if (v13 != (_DWORD)v6)
  {
    v23 = *(_QWORD *)(v1 + 264);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 616))(v23);
    v24 = *(_QWORD *)(v1 + 272);
    if (v24)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 616))(v24, *(unsigned __int8 *)(v1 + 192));
    this = *(_QWORD *)(v1 + 280);
    if (this)
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 616))(this, *(unsigned __int8 *)(v1 + 192));
  }
  if (*(_BYTE *)(v1 + 195))
  {
    v14 = *(unsigned __int8 *)(v1 + 133);
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 24)
                                                                                + 8)
                                                                    + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v15)
    {
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 8) + 1135);
      if (v16 >= 0x100)
      {
        *(_BYTE *)(v1 + 133) = v16;
        if ((v14 != 0) == (v16 != 0))
          return this;
        return WebCore::RenderLayer::setDescendantsNeedCompositingRequirementsTraversal(*(_QWORD *)(*(_QWORD *)(v1 + 8)
                                                                                                  + 144));
      }
    }
    if (*(_BYTE *)(v1 + 184))
      return this;
    this = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v1 + 152));
    if ((this & 1) != 0)
      return this;
    v17 = (unsigned __int8 *)WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)this);
    v18 = atomic_load(v17 + 4);
    v19 = 1;
    if (v18 != 2 && !v17[7])
    {
      v17 = (unsigned __int8 *)WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v17);
      v19 = atomic_load(v17 + 4);
      if (v19 != 1)
        v19 = v17[6] != 0;
    }
    if ((byte_1EE3381C2 & 1) != 0)
    {
      if (byte_1EE3381C1 != v19)
      {
        v25 = v19;
        v26 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v17);
        this = WTF::MemoryPressureHandler::currentMemoryUsagePolicy(v26);
        _MergedGlobals_1140 = this;
        byte_1EE3381C1 = v25;
        goto LABEL_30;
      }
    }
    else
    {
      byte_1EE3381C1 = v19;
      byte_1EE3381C2 = 1;
    }
    this = _MergedGlobals_1140;
LABEL_30:
    v20 = this != 0;
    *(_BYTE *)(v1 + 133) = v20;
    v21 = (v14 != 0) ^ v20;
    if ((_DWORD)this && v21)
    {
      PAL::HysteresisActivity::impulse((_BYTE *)(v1 + 136));
    }
    else if (!v21)
    {
      return this;
    }
    return WebCore::RenderLayer::setDescendantsNeedCompositingRequirementsTraversal(*(_QWORD *)(*(_QWORD *)(v1 + 8)
                                                                                              + 144));
  }
  return this;
}

uint64_t WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(_BYTE *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;

  *a1 = a3;
  if (!WebCore::Style::resolutionNestingDepth++)
  {
    v6 = WebCore::s_platformStrategies;
    v7 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v7)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v6 + 8) = v7;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  }
  v8 = *(_QWORD *)(a2 + 528);
  if (!v8)
    return (uint64_t)a1;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return (uint64_t)a1;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    return (uint64_t)a1;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11 || !*(_BYTE *)(v11 + 345))
    return (uint64_t)a1;
  result = WebCore::Page::setMemoryCacheClientCallsEnabled(v11, 0);
  v13 = *(_QWORD *)(v11 + 160);
  if (!v13 || *(_BYTE *)(v13 + 144) != 0)
    return (uint64_t)a1;
  if ((byte_1ECE84C51 & 1) != 0)
  {
    v15 = dword_1ECE84C6C;
    v16 = (_QWORD *)qword_1ECE84C60;
    if (dword_1ECE84C6C != dword_1ECE84C68)
    {
      v27 = (unsigned int *)(v13 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      v16[v15] = v13;
      v26 = dword_1ECE84C6C;
LABEL_31:
      dword_1ECE84C6C = v26 + 1;
      return (uint64_t)a1;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
    *(_QWORD *)&dword_1ECE84C68 = 0;
    qword_1ECE84C60 = 0;
    byte_1ECE84C51 = 1;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    dword_1ECE84C68 = v19;
    qword_1ECE84C60 = (uint64_t)v20;
    memcpy(v20, v16, 8 * v15);
    if (v16)
    {
      if ((_QWORD *)qword_1ECE84C60 == v16)
      {
        qword_1ECE84C60 = 0;
        dword_1ECE84C68 = 0;
      }
      WTF::fastFree((WTF *)v16, v21);
    }
    v22 = dword_1ECE84C6C;
    v23 = qword_1ECE84C60;
    v24 = (unsigned int *)(v13 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    v26 = dword_1ECE84C6C;
    *(_QWORD *)(v23 + 8 * v22) = v13;
    goto LABEL_31;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Page::setMemoryCacheClientCallsEnabled(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;

  if (*(unsigned __int8 *)(this + 345) != (_DWORD)a2)
  {
    v2 = this;
    *(_BYTE *)(this + 345) = (_BYTE)a2;
    if ((_DWORD)a2)
    {
      if (*(_BYTE *)(this + 346))
      {
        v3 = *(_QWORD *)(this + 160);
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        while (v3)
        {
          v6 = (unsigned int *)(v3 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          if (*(_BYTE *)(v3 + 144))
          {
            do
            {
              v17 = __ldaxr(v6);
              v10 = --v17 == 0;
            }
            while (__stlxr(v17, v6));
          }
          else
          {
            v8 = *(_QWORD **)(v3 + 280);
            ++*(_DWORD *)v8;
            WebCore::FrameLoader::tellClientAboutPastMemoryCacheLoads(v8, a2);
            if (!*(_DWORD *)v8)
            {
              __break(0xC471u);
              JUMPOUT(0x19429AC38);
            }
            --*(_DWORD *)v8;
            do
            {
              v9 = __ldaxr(v6);
              v10 = --v9 == 0;
            }
            while (__stlxr(v9, v6));
          }
          if (v10)
          {
            atomic_store(1u, v6);
            v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v15 = off_1E31FE290;
            v15[1] = v6;
            v18 = v15;
            WTF::ensureOnMainThread();
            if (v18)
              (*(void (**)(_QWORD *))(*v18 + 8))(v18);
          }
          this = WebCore::FrameTree::traverseNext((_QWORD *)(v3 + 48), 0);
          v3 = this;
          if (this)
          {
            v11 = (unsigned int *)(this + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
          }
          do
          {
            v13 = __ldaxr(v6);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v6));
          if (!v14)
          {
            atomic_store(1u, v6);
            v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v16 = off_1E31FE290;
            v16[1] = v6;
            v19 = (uint64_t)v16;
            WTF::ensureOnMainThread();
            this = v19;
            if (v19)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
        }
        *(_BYTE *)(v2 + 346) = 0;
      }
    }
  }
  return this;
}

void WebCore::Style::TreeResolver::~TreeResolver(WebCore::Style::TreeResolver *this, void *a2)
{
  WebCore::Style::Update *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v14;
  WTF *v15;
  WebCore::RenderStyle *v17;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Style::TreeResolver::Scope **v31;
  uint64_t v32;
  WebCore::Style::TreeResolver::Scope *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = (WebCore::Style::Update *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v3)
  {
    WebCore::Style::Update::~Update(v3, a2);
    if (*(_DWORD *)v4)
    {
      *(_QWORD *)(v4 + 80) = 0;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)v4 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v5 = *((unsigned int *)this + 231);
  if ((_DWORD)v5)
  {
    v20 = (uint64_t *)*((_QWORD *)this + 114);
    v21 = 8 * v5;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v6 = (WTF *)*((_QWORD *)this + 114);
  if (v6)
  {
    *((_QWORD *)this + 114) = 0;
    *((_DWORD *)this + 230) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 113);
  if (v7)
    WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::deallocateTable(v7, a2);
  v8 = *((_QWORD *)this + 112);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  v9 = *((_QWORD *)this + 111);
  if (v9)
  {
    v36 = *((_QWORD *)this + 111);
    v23 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v23)
    {
      v24 = (uint64_t *)*((_QWORD *)this + 111);
      do
      {
        v25 = *v24;
        if (*v24 != -1)
        {
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              {
                v26 = v23;
                WebCore::Node::removedLastRef((WebCore::Node *)v25);
                v23 = v26;
              }
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
        }
        ++v24;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v36 - 16), a2);
  }
  v10 = *((_QWORD *)this + 109);
  if (v10)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v10, (WTF *)a2);
  v11 = *((_QWORD *)this + 107);
  if (v11)
  {
    v37 = *((_QWORD *)this + 107);
    v27 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v27)
    {
      v28 = (uint64_t *)*((_QWORD *)this + 107);
      do
      {
        v29 = *v28;
        if (*v28 != -1)
        {
          *v28 = 0;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              {
                v30 = v27;
                WebCore::Node::removedLastRef((WebCore::Node *)v29);
                v27 = v30;
              }
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
            }
          }
        }
        v28 += 2;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v37 - 16), a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 8);
  if ((WebCore::Style::TreeResolver *)((char *)this + 80) != v12 && v12 != 0)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v12, a2);
  }
  v14 = *((unsigned int *)this + 7);
  if ((_DWORD)v14)
  {
    v31 = (WebCore::Style::TreeResolver::Scope **)*((_QWORD *)this + 2);
    v32 = 8 * v14;
    do
    {
      v33 = *v31;
      *v31 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
        {
          WebCore::Style::TreeResolver::Scope::~Scope(v33, a2);
          WTF::fastFree(v34, v35);
        }
        else
        {
          --*(_DWORD *)v33;
        }
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v15 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::Style::TreeResolver *)((char *)this + 32) != v15 && v15 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v15, a2);
  }
  v17 = (WebCore::RenderStyle *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    WebCore::RenderStyle::~RenderStyle(v17, a2);
    if (*(_DWORD *)v18)
    {
      *((_OWORD *)v18 + 2) = 0u;
      *((_OWORD *)v18 + 3) = 0u;
      *(_OWORD *)v18 = 0u;
      *((_OWORD *)v18 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v18, v19);
    }
  }
}

uint64_t WebCore::LocalFrameView::updateCompositingLayersAfterStyleChange(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  WebCore::RenderView *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderLayerCompositor *v7;
  WebCore::RenderLayerCompositor *v8;
  WTF *v9;
  void *v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (!v1)
    return 0;
  v2 = *(WebCore::RenderView **)(v1 + 1944);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8) + 328) + 296);
  if (v3)
    v3 = *(_QWORD *)(v3 + 1944);
  if ((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return 0;
  }
  if (v3 && (*(_BYTE *)(v3 + 20) & 0xF8) != 0)
    return 0;
  v4 = *((_QWORD *)this + 58);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
      return 0;
  }
  if (*((_DWORD *)this + 122) && *((_BYTE *)this + 478) || *((_BYTE *)this + 480))
    return 0;
  v5 = *((_QWORD *)v2 + 50);
  if (!v5)
  {
    v7 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v5 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v7, v2);
    v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v5;
    if (v8)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v8);
      WTF::fastFree(v9, v10);
      v5 = *((_QWORD *)v2 + 50);
    }
  }
  return WebCore::RenderLayerCompositor::updateCompositingLayers(v5, 0, 0);
}

uint64_t WebCore::Style::determineChange(WebCore::Style *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::SVGRenderStyle *v27;
  _QWORD *v28;
  const WebCore::SVGRenderStyle *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  WebCore::Length *v38;
  float v39;
  float v40;
  int v41;
  WebCore::Length *v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  WebCore::Length *v64;
  float v65;
  float v66;
  int v67;
  WebCore::Length *v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WebCore::SVGRenderStyle *v98;
  const WebCore::SVGRenderStyle *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  WebCore::Length *v111;
  float v112;
  float v113;
  int v114;
  WebCore::Length *v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  WebCore::Length *v137;
  float v138;
  float v139;
  int v140;
  WebCore::Length *v141;
  float v142;
  float v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  int v174;
  __int128 v175;
  __int128 v176;

  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)a2 + 2);
  if (((v6 ^ v5) & 0x1F) != 0 || ((v5 & 0x2000000000000) == 0) == ((v6 >> 49) & 1))
  {
    if (((v6 ^ v5) & 0x1F) != 0 || ((v5 >> 49) & 1) != ((v6 >> 49) & 1))
      return 5;
    v79 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v80 = *(_BYTE *)(*(_QWORD *)(v79 + 24) + 56) & 8;
    v81 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
    v82 = *(unsigned __int8 *)(*(_QWORD *)(v81 + 24) + 56);
    if ((v82 & v80) != 0)
    {
      if (((*((_QWORD *)this + 2) & 0xE000000) != 0) != ((*((_QWORD *)a2 + 2) & 0xE000000) != 0)
        || ((v5 & 0x180000) == 0x100000) != ((v6 & 0x180000) == 0x100000))
      {
        return 5;
      }
    }
    else if ((((v80 != 0) ^ ((v82 & 8) >> 3)) & 1) != 0)
    {
      return 5;
    }
    v83 = *(_QWORD *)(v81 + 80);
    v84 = *(_QWORD *)(v79 + 80);
    v85 = v84 == 0;
    if (v84)
      v86 = v83 == 0;
    else
      v86 = 1;
    if (!v86)
    {
      do
      {
        v174 = *(_DWORD *)(v84 + 24);
        if (v174 != *(_DWORD *)(v83 + 24))
          return 5;
        switch(v174)
        {
          case 3:
            if ((WTF::equal(*(WTF **)(v84 + 32), *(const WTF::StringImpl **)(v83 + 32), a3) & 1) == 0)
              return 5;
            break;
          case 2:
            if (*(unsigned __int8 *)(v84 + 28) != *(unsigned __int8 *)(v83 + 28))
              return 5;
            break;
          case 1:
            if (*(_QWORD *)(v84 + 32) != *(_QWORD *)(v83 + 32))
              return 5;
            break;
          default:
            if (v174 || !WebCore::operator==(v84, v83))
              return 5;
            break;
        }
        v83 = *(_QWORD *)(v83 + 8);
        v84 = *(_QWORD *)(v84 + 8);
        v85 = v84 == 0;
      }
      while (v84 && v83);
    }
    result = 5;
    if (!v85 || v83)
      return result;
    v87 = *((_QWORD *)this + 3);
    v88 = *((_QWORD *)a2 + 3);
    if (((*(unsigned __int8 *)(v87 + 231) ^ *(unsigned __int8 *)(v88 + 231)) & 1) == 0)
    {
      v89 = *((_QWORD *)this + 1);
      v90 = *(_QWORD *)(v89 + 40);
      v91 = *((_QWORD *)a2 + 1);
      v92 = *(_QWORD *)(v91 + 40);
      if ((unint64_t)((*(_BYTE *)(v92 + 642) ^ *(_BYTE *)(v90 + 642)) & 3) << 48)
        return 4;
      v93 = *(unsigned int *)(v90 + 348);
      if ((_DWORD)v93 != *(_DWORD *)(v92 + 348))
        return 4;
      if ((_DWORD)v93)
      {
        v156 = *(_QWORD *)(v90 + 336);
        v157 = *(_QWORD *)(v92 + 336);
        if (*(_QWORD *)v156 != *(_QWORD *)v157
          || *(unsigned __int8 *)(v156 + 8) != *(unsigned __int8 *)(v157 + 8)
          || *(unsigned __int8 *)(v156 + 9) != *(unsigned __int8 *)(v157 + 9))
        {
          return 4;
        }
        v158 = (unsigned __int8 *)(v157 + 25);
        v159 = (unsigned __int8 *)(v156 + 25);
        v160 = 1;
        while (v93 != v160)
        {
          v161 = v160;
          if (*(_QWORD *)(v159 - 9) == *(_QWORD *)(v158 - 9) && *(v159 - 1) == *(v158 - 1))
          {
            v163 = *v159;
            v159 += 16;
            v162 = v163;
            v164 = *v158;
            v158 += 16;
            ++v160;
            if (v162 == v164)
              continue;
          }
          if (v161 >= v93)
            break;
          return 4;
        }
      }
      if (v89 != v91)
      {
        v94 = *(_QWORD *)(v89 + 32);
        v95 = *(_QWORD *)(v91 + 32);
        if (v94 != v95
          && (((*(_BYTE *)(v95 + 124) ^ *(_BYTE *)(v94 + 124)) & 0x7F) != 0
           || ((*(_BYTE *)(v95 + 126) ^ *(_BYTE *)(v94 + 126)) & 0x7F) != 0))
        {
          return 3;
        }
      }
      if (((*((_QWORD *)a2 + 5) ^ *((_QWORD *)this + 5)) & 0x3FFFFF7FFFFFCFLL) != 0)
        return 3;
      v96 = *((_QWORD *)this + 4);
      v97 = *((_QWORD *)a2 + 4);
      if (v96 != v97)
      {
        v110 = *(unsigned __int8 *)(v96 + 16);
        if (v110 != *(unsigned __int8 *)(v97 + 16) || (*(_BYTE *)(v96 + 17) != 0) != (*(_BYTE *)(v97 + 17) != 0))
          return 3;
        if (v110 != 13)
        {
          v111 = (WebCore::Length *)(v96 + 12);
          if (v110 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v111, (const WebCore::Length *)(v97 + 12)) & 1) == 0)
              return 3;
          }
          else
          {
            if (*(_BYTE *)(v96 + 18))
              v112 = *(float *)v111;
            else
              v112 = (float)*(int *)v111;
            v113 = *(float *)(v97 + 12);
            if (!*(_BYTE *)(v97 + 18))
              v113 = (float)SLODWORD(v113);
            if (v112 != v113)
              return 3;
          }
        }
        v114 = *(unsigned __int8 *)(v96 + 24);
        if (v114 != *(unsigned __int8 *)(v97 + 24) || (*(_BYTE *)(v96 + 25) != 0) != (*(_BYTE *)(v97 + 25) != 0))
          return 3;
        if (v114 != 13)
        {
          v115 = (WebCore::Length *)(v96 + 20);
          if (v114 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v115, (const WebCore::Length *)(v97 + 20)) & 1) == 0)
              return 3;
          }
          else
          {
            if (*(_BYTE *)(v96 + 26))
              v116 = *(float *)v115;
            else
              v116 = (float)*(int *)v115;
            v117 = *(float *)(v97 + 20);
            if (!*(_BYTE *)(v97 + 26))
              v117 = (float)SLODWORD(v117);
            if (v116 != v117)
              return 3;
          }
        }
        v118 = *(unsigned int *)(v96 + 60);
        if ((_DWORD)v118 != *(_DWORD *)(v97 + 60))
          return 3;
        if (memcmp(*(const void **)(v96 + 48), *(const void **)(v97 + 48), 8 * v118))
          return 3;
        v119 = *(unsigned int *)(v96 + 76);
        if ((_DWORD)v119 != *(_DWORD *)(v97 + 76)
          || memcmp(*(const void **)(v96 + 64), *(const void **)(v97 + 64), 8 * v119))
        {
          return 3;
        }
        v120 = *(unsigned __int8 *)(v96 + 145);
        v121 = *(unsigned __int8 *)(v97 + 145);
        if (v121 | v120)
        {
          if ((v120 != 0) == (v121 == 0))
            return 3;
        }
        else if (!WebCore::operator==(v96 + 80, v97 + 80, a3))
        {
          return 3;
        }
        v122 = *(unsigned __int8 *)(v96 + 152);
        v123 = *(unsigned __int8 *)(v97 + 152);
        if (v122 == 3)
        {
          if (v123 != 3 || *(_QWORD *)(v96 + 160) != *(_QWORD *)(v97 + 160))
            return 3;
        }
        else if (v122 != v123)
        {
          return 3;
        }
        if (*(unsigned __int8 *)(v96 + 168) != *(unsigned __int8 *)(v97 + 168)
          || (*(_BYTE *)(v96 + 169) == 0) == (*(_BYTE *)(v97 + 169) != 0)
          || *(float *)(v96 + 172) != *(float *)(v97 + 172)
          || *(_QWORD *)(v96 + 176) != *(_QWORD *)(v97 + 176)
          || *(_QWORD *)(v96 + 184) != *(_QWORD *)(v97 + 184)
          || (float)((float)*(__int16 *)(v96 + 192) * 0.25) != (float)((float)*(__int16 *)(v97 + 192) * 0.25)
          || (float)((float)*(__int16 *)(v96 + 194) * 0.25) != (float)((float)*(__int16 *)(v97 + 194) * 0.25))
        {
          return 3;
        }
        if (*(_BYTE *)(v96 + 198) && *(_BYTE *)(v97 + 198))
        {
          if ((float)((float)*(__int16 *)(v96 + 196) * 0.25) != (float)((float)*(__int16 *)(v97 + 196) * 0.25))
            return 3;
        }
        else if ((*(_BYTE *)(v96 + 198) != 0) != (*(_BYTE *)(v97 + 198) != 0))
        {
          return 3;
        }
        if ((*(_BYTE *)(v96 + 200) == 0) == (*(_BYTE *)(v97 + 200) != 0))
          return 3;
        if ((*(_BYTE *)(v96 + 201) == 0) == (*(_BYTE *)(v97 + 201) != 0))
          return 3;
        if (*(float *)(v96 + 204) != *(float *)(v97 + 204))
          return 3;
        if (((*(_DWORD *)(v97 + 208) ^ *(_DWORD *)(v96 + 208)) & 0x7FFFFFFF) != 0)
          return 3;
        if ((((*(unsigned __int16 *)(v97 + 212) | (*(unsigned __int8 *)(v97 + 214) << 16)) ^ (*(unsigned __int16 *)(v96 + 212) | (*(unsigned __int8 *)(v96 + 214) << 16))) & 0x3FFFF) != 0)
          return 3;
        v128 = *(_QWORD *)(v96 + 216);
        v129 = *(_QWORD *)(v97 + 216);
        v130 = *(unsigned int *)(v128 + 4);
        if ((_DWORD)v130 != *(_DWORD *)(v129 + 4))
          return 3;
        if ((_DWORD)v130)
        {
          if (*(_QWORD *)(v128 + 8) != *(_QWORD *)(v129 + 8))
            return 3;
          v131 = 0;
          v132 = v129 + 16;
          v133 = v128 + 16;
          while (v130 - 1 != v131)
          {
            v134 = *(_QWORD *)(v133 + 8 * v131);
            v135 = *(_QWORD *)(v132 + 8 * v131++);
            if (v134 != v135)
            {
              if (v131 < v130)
                return 3;
              break;
            }
          }
        }
        if (*(float *)(v96 + 224) != *(float *)(v97 + 224))
          return 3;
        if (((*(_WORD *)(v97 + 228) ^ *(_WORD *)(v96 + 228)) & 0x3FF) != 0)
          return 3;
        v136 = *(unsigned __int8 *)(v96 + 236);
        if (v136 != *(unsigned __int8 *)(v97 + 236) || (*(_BYTE *)(v96 + 237) != 0) != (*(_BYTE *)(v97 + 237) != 0))
          return 3;
        if (v136 != 13)
        {
          v137 = (WebCore::Length *)(v96 + 232);
          if (v136 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v137, (const WebCore::Length *)(v97 + 232)) & 1) == 0)
              return 3;
          }
          else
          {
            if (*(_BYTE *)(v96 + 238))
              v138 = *(float *)v137;
            else
              v138 = (float)*(int *)v137;
            v139 = *(float *)(v97 + 232);
            if (!*(_BYTE *)(v97 + 238))
              v139 = (float)SLODWORD(v139);
            if (v138 != v139)
              return 3;
          }
        }
        v140 = *(unsigned __int8 *)(v96 + 244);
        if (v140 != *(unsigned __int8 *)(v97 + 244) || (*(_BYTE *)(v96 + 245) != 0) != (*(_BYTE *)(v97 + 245) != 0))
          return 3;
        if (v140 != 13)
        {
          v141 = (WebCore::Length *)(v96 + 240);
          if (v140 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v141, (const WebCore::Length *)(v97 + 240)) & 1) == 0)
              return 3;
          }
          else
          {
            if (*(_BYTE *)(v96 + 246))
              v142 = *(float *)v141;
            else
              v142 = (float)*(int *)v141;
            v143 = *(float *)(v97 + 240);
            if (!*(_BYTE *)(v97 + 246))
              v143 = (float)SLODWORD(v143);
            if (v142 != v143)
              return 3;
          }
        }
        v144 = *(_QWORD *)(v96 + 248);
        v145 = *(_QWORD *)(v97 + 248);
        if (v144 != v145)
        {
          result = 3;
          if (!v144
            || !v145
            || *(_QWORD *)(v144 + 112) != *(_QWORD *)(v145 + 112)
            || *(_DWORD *)(v144 + 144) != *(_DWORD *)(v145 + 144)
            || *(unsigned __int16 *)(v144 + 148) != *(unsigned __int16 *)(v145 + 148))
          {
            return result;
          }
        }
        if (*(float *)(v96 + 4) != *(float *)(v97 + 4) || *(float *)(v96 + 8) != *(float *)(v97 + 8))
          return 3;
        v87 = *((_QWORD *)this + 3);
        v88 = *((_QWORD *)a2 + 3);
      }
      if (v87 != v88 && (WebCore::StyleRareInheritedData::operator==(v87, v88) & 1) == 0)
        return 3;
      v28 = (_QWORD *)((char *)this + 56);
      v98 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
      v30 = (_QWORD *)((char *)a2 + 56);
      v99 = (const WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
      if (v98 != v99)
      {
        WebCore::SVGRenderStyle::inheritedEqual(v98, v99, a3);
        if ((v146 & 1) == 0)
          return 3;
      }
      if (((*((_DWORD *)a2 + 10) ^ *((_DWORD *)this + 10)) & 0x30) == 0)
      {
        v100 = *((_QWORD *)this + 4);
        v101 = *((_QWORD *)a2 + 4);
        if (v100 != v101)
        {
          v124 = *(_QWORD *)(v100 + 328);
          v125 = *(_QWORD *)(v101 + 328);
          if ((v124 & 0x8000000000000) != 0)
          {
            if ((v125 & 0x8000000000000) == 0)
              return 2;
            v176 = *(_OWORD *)((v124 & 0xFFFFFFFFFFFFLL) + 4);
            v175 = *(_OWORD *)((v125 & 0xFFFFFFFFFFFFLL) + 4);
            if (!WebCore::operator==<float,4ul>((float *)&v176, (float *)&v175))
              return 2;
            v169 = *(_QWORD *)(v100 + 328);
            v170 = *(_QWORD *)(v101 + 328);
            if (HIBYTE(v169) != HIBYTE(v170) || BYTE6(v169) != BYTE6(v170))
              return 2;
          }
          else
          {
            result = 2;
            if (v124 != v125 || (v125 & 0x8000000000000) != 0)
              return result;
          }
          v126 = *(_QWORD *)(v100 + 336);
          v127 = *(_QWORD *)(v101 + 336);
          if ((v126 & 0x8000000000000) != 0)
          {
            if ((v127 & 0x8000000000000) == 0)
              return 2;
            v176 = *(_OWORD *)((v126 & 0xFFFFFFFFFFFFLL) + 4);
            v175 = *(_OWORD *)((v127 & 0xFFFFFFFFFFFFLL) + 4);
            if (!WebCore::operator==<float,4ul>((float *)&v176, (float *)&v175))
              return 2;
            v171 = *(_QWORD *)(v100 + 336);
            v172 = *(_QWORD *)(v101 + 336);
            if (HIBYTE(v171) != HIBYTE(v172) || BYTE6(v171) != BYTE6(v172))
              return 2;
          }
          else
          {
            result = 2;
            if (v126 != v127 || (v127 & 0x8000000000000) != 0)
              return result;
          }
        }
        if (((*((_DWORD *)a2 + 10) ^ *((_DWORD *)this + 10)) & 0x7FFFFFFF) == 0
          && ((*((_DWORD *)a2 + 11) ^ *((_DWORD *)this + 11)) & 0x3FFFFF) == 0)
        {
          v102 = *((_QWORD *)this + 2);
          v103 = *((_QWORD *)a2 + 2);
          result = 1;
          if (((v103 ^ v102) & 0xFFFFFFFFFFFFLL) != 0 || HIWORD(v102) != HIWORD(v103))
            return result;
          v104 = (_QWORD *)*((_QWORD *)this + 1);
          v105 = (_QWORD *)*((_QWORD *)a2 + 1);
          if (v104 == v105 || (WebCore::StyleNonInheritedData::operator==(v104, v105, a3) & 1) != 0)
          {
            v106 = *((_QWORD *)this + 3);
            v107 = *((_QWORD *)a2 + 3);
            if (v106 == v107 || (WebCore::StyleRareInheritedData::operator==(v106, v107) & 1) != 0)
            {
              v108 = *((_QWORD *)this + 4);
              v109 = *((_QWORD *)a2 + 4);
              if (v108 == v109
                || WebCore::StyleInheritedData::fastPathInheritedEqual(v108, v109)
                && WebCore::StyleInheritedData::nonFastPathInheritedEqual(v108, v109))
              {
                goto LABEL_124;
              }
            }
          }
        }
        return 1;
      }
      return 2;
    }
    return 5;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v8 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 56) & 8;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 24) + 56);
  if ((v10 & v8) != 0)
  {
    if (((*((_QWORD *)this + 2) & 0xE000000) != 0) != ((*((_QWORD *)a2 + 2) & 0xE000000) != 0)
      || ((v5 & 0x180000) == 0x100000) != ((v6 & 0x180000) == 0x100000))
    {
      return 5;
    }
  }
  else if ((((v8 != 0) ^ ((v10 & 8) >> 3)) & 1) != 0)
  {
    return 5;
  }
  v11 = *(_QWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v7 + 80);
  v13 = v12 == 0;
  if (v12)
    v14 = v11 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v173 = *(_DWORD *)(v12 + 24);
      if (v173 != *(_DWORD *)(v11 + 24))
        return 5;
      if (v173 == 3)
      {
        if ((WTF::equal(*(WTF **)(v12 + 32), *(const WTF::StringImpl **)(v11 + 32), a3) & 1) == 0)
          return 5;
      }
      else if (v173)
      {
        if (v173 == 2)
        {
          if (*(unsigned __int8 *)(v12 + 28) != *(unsigned __int8 *)(v11 + 28))
            return 5;
        }
        else if (v173 != 1 || *(_QWORD *)(v12 + 32) != *(_QWORD *)(v11 + 32))
        {
          return 5;
        }
      }
      else if (!WebCore::operator==(v12, v11))
      {
        return 5;
      }
      v11 = *(_QWORD *)(v11 + 8);
      v12 = *(_QWORD *)(v12 + 8);
      v13 = v12 == 0;
    }
    while (v12 && v11);
  }
  result = 5;
  if (!v13 || v11)
    return result;
  v16 = *((_QWORD *)this + 3);
  v17 = *((_QWORD *)a2 + 3);
  if (((*(unsigned __int8 *)(v16 + 231) ^ *(unsigned __int8 *)(v17 + 231)) & 1) != 0)
    return 5;
  v18 = *((_QWORD *)this + 1);
  v19 = *(_QWORD *)(v18 + 40);
  v20 = *((_QWORD *)a2 + 1);
  v21 = *(_QWORD *)(v20 + 40);
  if ((unint64_t)((*(_BYTE *)(v21 + 642) ^ *(_BYTE *)(v19 + 642)) & 3) << 48)
    return 4;
  v22 = *(unsigned int *)(v19 + 348);
  if ((_DWORD)v22 != *(_DWORD *)(v21 + 348))
    return 4;
  if (!(_DWORD)v22)
    goto LABEL_17;
  v147 = *(_QWORD *)(v19 + 336);
  v148 = *(_QWORD *)(v21 + 336);
  if (*(_QWORD *)v147 != *(_QWORD *)v148
    || *(unsigned __int8 *)(v147 + 8) != *(unsigned __int8 *)(v148 + 8)
    || *(unsigned __int8 *)(v147 + 9) != *(unsigned __int8 *)(v148 + 9))
  {
    return 4;
  }
  v149 = (unsigned __int8 *)(v147 + 25);
  v150 = (unsigned __int8 *)(v148 + 25);
  v151 = 1;
  while (v22 != v151)
  {
    v152 = v151;
    if (*(_QWORD *)(v149 - 9) == *(_QWORD *)(v150 - 9) && *(v149 - 1) == *(v150 - 1))
    {
      v154 = *v149;
      v149 += 16;
      v153 = v154;
      v155 = *v150;
      v150 += 16;
      ++v151;
      if (v153 == v155)
        continue;
    }
    if (v152 >= v22)
      break;
    return 4;
  }
LABEL_17:
  if (v18 != v20)
  {
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_QWORD *)(v20 + 32);
    if (v23 != v24
      && (((*(_BYTE *)(v24 + 124) ^ *(_BYTE *)(v23 + 124)) & 0x7F) != 0
       || ((*(_BYTE *)(v24 + 126) ^ *(_BYTE *)(v23 + 126)) & 0x7F) != 0))
    {
      return 3;
    }
  }
  if (((*((_QWORD *)a2 + 5) ^ *((_QWORD *)this + 5)) & 0x3FFFFF7FFFFFCFLL) != 0)
    return 3;
  v25 = *((_QWORD *)this + 4);
  v26 = *((_QWORD *)a2 + 4);
  if (v25 != v26)
  {
    v37 = *(unsigned __int8 *)(v25 + 16);
    if (v37 != *(unsigned __int8 *)(v26 + 16) || (*(_BYTE *)(v25 + 17) != 0) != (*(_BYTE *)(v26 + 17) != 0))
      return 3;
    if (v37 != 13)
    {
      v38 = (WebCore::Length *)(v25 + 12);
      if (v37 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v38, (const WebCore::Length *)(v26 + 12)) & 1) == 0)
          return 3;
      }
      else
      {
        if (*(_BYTE *)(v25 + 18))
          v39 = *(float *)v38;
        else
          v39 = (float)*(int *)v38;
        v40 = *(float *)(v26 + 12);
        if (!*(_BYTE *)(v26 + 18))
          v40 = (float)SLODWORD(v40);
        if (v39 != v40)
          return 3;
      }
    }
    v41 = *(unsigned __int8 *)(v25 + 24);
    if (v41 != *(unsigned __int8 *)(v26 + 24) || (*(_BYTE *)(v25 + 25) != 0) != (*(_BYTE *)(v26 + 25) != 0))
      return 3;
    if (v41 != 13)
    {
      v42 = (WebCore::Length *)(v25 + 20);
      if (v41 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v42, (const WebCore::Length *)(v26 + 20)) & 1) == 0)
          return 3;
      }
      else
      {
        if (*(_BYTE *)(v25 + 26))
          v43 = *(float *)v42;
        else
          v43 = (float)*(int *)v42;
        v44 = *(float *)(v26 + 20);
        if (!*(_BYTE *)(v26 + 26))
          v44 = (float)SLODWORD(v44);
        if (v43 != v44)
          return 3;
      }
    }
    v45 = *(unsigned int *)(v25 + 60);
    if ((_DWORD)v45 != *(_DWORD *)(v26 + 60))
      return 3;
    if (memcmp(*(const void **)(v25 + 48), *(const void **)(v26 + 48), 8 * v45))
      return 3;
    v46 = *(unsigned int *)(v25 + 76);
    if ((_DWORD)v46 != *(_DWORD *)(v26 + 76) || memcmp(*(const void **)(v25 + 64), *(const void **)(v26 + 64), 8 * v46))
      return 3;
    v47 = *(unsigned __int8 *)(v25 + 145);
    v48 = *(unsigned __int8 *)(v26 + 145);
    if (v48 | v47)
    {
      if ((v47 != 0) == (v48 == 0))
        return 3;
    }
    else if ((WebCore::operator==(v25 + 80, v26 + 80, a3) & 1) == 0)
    {
      return 3;
    }
    v49 = *(unsigned __int8 *)(v25 + 152);
    v50 = *(unsigned __int8 *)(v26 + 152);
    if (v49 == 3)
    {
      if (v50 != 3 || *(_QWORD *)(v25 + 160) != *(_QWORD *)(v26 + 160))
        return 3;
    }
    else if (v49 != v50)
    {
      return 3;
    }
    if (*(unsigned __int8 *)(v25 + 168) != *(unsigned __int8 *)(v26 + 168)
      || (*(_BYTE *)(v25 + 169) == 0) == (*(_BYTE *)(v26 + 169) != 0)
      || *(float *)(v25 + 172) != *(float *)(v26 + 172)
      || *(_QWORD *)(v25 + 176) != *(_QWORD *)(v26 + 176)
      || *(_QWORD *)(v25 + 184) != *(_QWORD *)(v26 + 184)
      || (float)((float)*(__int16 *)(v25 + 192) * 0.25) != (float)((float)*(__int16 *)(v26 + 192) * 0.25)
      || (float)((float)*(__int16 *)(v25 + 194) * 0.25) != (float)((float)*(__int16 *)(v26 + 194) * 0.25))
    {
      return 3;
    }
    if (*(_BYTE *)(v25 + 198) && *(_BYTE *)(v26 + 198))
    {
      if ((float)((float)*(__int16 *)(v25 + 196) * 0.25) != (float)((float)*(__int16 *)(v26 + 196) * 0.25))
        return 3;
    }
    else if ((*(_BYTE *)(v25 + 198) != 0) != (*(_BYTE *)(v26 + 198) != 0))
    {
      return 3;
    }
    if ((*(_BYTE *)(v25 + 200) == 0) == (*(_BYTE *)(v26 + 200) != 0))
      return 3;
    if ((*(_BYTE *)(v25 + 201) == 0) == (*(_BYTE *)(v26 + 201) != 0))
      return 3;
    if (*(float *)(v25 + 204) != *(float *)(v26 + 204))
      return 3;
    if (((*(_DWORD *)(v26 + 208) ^ *(_DWORD *)(v25 + 208)) & 0x7FFFFFFF) != 0)
      return 3;
    if ((((*(unsigned __int16 *)(v26 + 212) | (*(unsigned __int8 *)(v26 + 214) << 16)) ^ (*(unsigned __int16 *)(v25 + 212) | (*(unsigned __int8 *)(v25 + 214) << 16))) & 0x3FFFF) != 0)
      return 3;
    v55 = *(_QWORD *)(v25 + 216);
    v56 = *(_QWORD *)(v26 + 216);
    v57 = *(unsigned int *)(v55 + 4);
    if ((_DWORD)v57 != *(_DWORD *)(v56 + 4))
      return 3;
    if ((_DWORD)v57)
    {
      if (*(_QWORD *)(v55 + 8) != *(_QWORD *)(v56 + 8))
        return 3;
      v58 = 0;
      v59 = v56 + 16;
      v60 = v55 + 16;
      while (v57 - 1 != v58)
      {
        v61 = *(_QWORD *)(v60 + 8 * v58);
        v62 = *(_QWORD *)(v59 + 8 * v58++);
        if (v61 != v62)
        {
          if (v58 < v57)
            return 3;
          break;
        }
      }
    }
    if (*(float *)(v25 + 224) != *(float *)(v26 + 224))
      return 3;
    if (((*(_WORD *)(v26 + 228) ^ *(_WORD *)(v25 + 228)) & 0x3FF) != 0)
      return 3;
    v63 = *(unsigned __int8 *)(v25 + 236);
    if (v63 != *(unsigned __int8 *)(v26 + 236) || (*(_BYTE *)(v25 + 237) != 0) != (*(_BYTE *)(v26 + 237) != 0))
      return 3;
    if (v63 != 13)
    {
      v64 = (WebCore::Length *)(v25 + 232);
      if (v63 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v64, (const WebCore::Length *)(v26 + 232)) & 1) == 0)
          return 3;
      }
      else
      {
        if (*(_BYTE *)(v25 + 238))
          v65 = *(float *)v64;
        else
          v65 = (float)*(int *)v64;
        v66 = *(float *)(v26 + 232);
        if (!*(_BYTE *)(v26 + 238))
          v66 = (float)SLODWORD(v66);
        if (v65 != v66)
          return 3;
      }
    }
    v67 = *(unsigned __int8 *)(v25 + 244);
    if (v67 != *(unsigned __int8 *)(v26 + 244) || (*(_BYTE *)(v25 + 245) != 0) != (*(_BYTE *)(v26 + 245) != 0))
      return 3;
    if (v67 != 13)
    {
      v68 = (WebCore::Length *)(v25 + 240);
      if (v67 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v68, (const WebCore::Length *)(v26 + 240)) & 1) == 0)
          return 3;
      }
      else
      {
        if (*(_BYTE *)(v25 + 246))
          v69 = *(float *)v68;
        else
          v69 = (float)*(int *)v68;
        v70 = *(float *)(v26 + 240);
        if (!*(_BYTE *)(v26 + 246))
          v70 = (float)SLODWORD(v70);
        if (v69 != v70)
          return 3;
      }
    }
    v71 = *(_QWORD *)(v25 + 248);
    v72 = *(_QWORD *)(v26 + 248);
    if (v71 != v72)
    {
      result = 3;
      if (!v71
        || !v72
        || *(_QWORD *)(v71 + 112) != *(_QWORD *)(v72 + 112)
        || *(_DWORD *)(v71 + 144) != *(_DWORD *)(v72 + 144)
        || *(unsigned __int16 *)(v71 + 148) != *(unsigned __int16 *)(v72 + 148))
      {
        return result;
      }
    }
    if (*(float *)(v25 + 4) == *(float *)(v26 + 4) && *(float *)(v25 + 8) == *(float *)(v26 + 8))
    {
      v16 = *((_QWORD *)this + 3);
      v17 = *((_QWORD *)a2 + 3);
      goto LABEL_23;
    }
    return 3;
  }
LABEL_23:
  if (v16 != v17 && !WebCore::StyleRareInheritedData::operator==(v16, v17))
    return 3;
  v28 = (_QWORD *)((char *)this + 56);
  v27 = (WebCore::SVGRenderStyle *)*((_QWORD *)this + 7);
  v30 = (_QWORD *)((char *)a2 + 56);
  v29 = (const WebCore::SVGRenderStyle *)*((_QWORD *)a2 + 7);
  if (v27 != v29)
  {
    WebCore::SVGRenderStyle::inheritedEqual(v27, v29, a3);
    if (!v78)
      return 3;
  }
  if (((*((_DWORD *)a2 + 10) ^ *((_DWORD *)this + 10)) & 0x30) != 0)
    return 2;
  v31 = *((_QWORD *)this + 4);
  v32 = *((_QWORD *)a2 + 4);
  if (v31 == v32)
    goto LABEL_27;
  v51 = *(_QWORD *)(v31 + 328);
  v52 = *(_QWORD *)(v32 + 328);
  if ((v51 & 0x8000000000000) != 0)
  {
    if ((v52 & 0x8000000000000) == 0)
      return 2;
    v176 = *(_OWORD *)((v51 & 0xFFFFFFFFFFFFLL) + 4);
    v175 = *(_OWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v176, (float *)&v175))
      return 2;
    v165 = *(_QWORD *)(v31 + 328);
    v166 = *(_QWORD *)(v32 + 328);
    if (HIBYTE(v165) != HIBYTE(v166) || BYTE6(v165) != BYTE6(v166))
      return 2;
  }
  else
  {
    result = 2;
    if (v51 != v52 || (v52 & 0x8000000000000) != 0)
      return result;
  }
  v53 = *(_QWORD *)(v31 + 336);
  v54 = *(_QWORD *)(v32 + 336);
  if ((v53 & 0x8000000000000) != 0)
  {
    if ((v54 & 0x8000000000000) != 0)
    {
      v176 = *(_OWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
      v175 = *(_OWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)&v176, (float *)&v175))
      {
        v167 = *(_QWORD *)(v31 + 336);
        v168 = *(_QWORD *)(v32 + 336);
        if (HIBYTE(v167) == HIBYTE(v168) && BYTE6(v167) == BYTE6(v168))
          goto LABEL_27;
      }
    }
    return 2;
  }
  result = 2;
  if (v53 != v54 || (v54 & 0x8000000000000) != 0)
    return result;
LABEL_27:
  if (((*((_DWORD *)a2 + 10) ^ *((_DWORD *)this + 10)) & 0x7FFFFFFF) != 0
    || ((*((_DWORD *)a2 + 11) ^ *((_DWORD *)this + 11)) & 0x3FFFFF) != 0)
  {
    return 1;
  }
  v33 = *((_QWORD *)this + 2);
  v34 = *((_QWORD *)a2 + 2);
  result = 1;
  if (((v34 ^ v33) & 0xFFFFFFFFFFFFLL) == 0 && HIWORD(v33) == HIWORD(v34))
  {
    v35 = (_QWORD *)*((_QWORD *)this + 1);
    v36 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (v35 == v36 || WebCore::StyleNonInheritedData::operator==(v35, v36, a3))
    {
      v73 = *((_QWORD *)this + 3);
      v74 = *((_QWORD *)a2 + 3);
      if (v73 == v74 || WebCore::StyleRareInheritedData::operator==(v73, v74))
      {
        v75 = *((_QWORD *)this + 4);
        v76 = *((_QWORD *)a2 + 4);
        if (v75 == v76
          || WebCore::StyleInheritedData::fastPathInheritedEqual(v75, v76)
          && WebCore::StyleInheritedData::nonFastPathInheritedEqual(v75, v76))
        {
LABEL_124:
          WTF::DataRef<WebCore::SVGRenderStyle>::operator==(v28, v30, a3);
          return v77 ^ 1u;
        }
      }
    }
    return 1;
  }
  return result;
}

void WebCore::RenderTreeUpdater::~RenderTreeUpdater(WebCore::RenderTreeUpdater *this, void *a2)
{
  void *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WebCore::Style::Update *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  WTF *v14;
  char *v15;

  WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeUpdater *)((char *)this + 48), a2);
  v4 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::fastFree(v4, v3);
  v5 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = (WTF *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, v3);
      else
        --*(_DWORD *)v6;
    }
    WTF::fastFree(v5, v3);
  }
  v7 = *((unsigned int *)this + 7);
  v8 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v7)
  {
    v12 = 72 * v7;
    v13 = (char *)v8 + 24;
    do
    {
      if (v13[16])
      {
        v14 = *(WTF **)v13;
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          v15 = v13;
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v3);
          else
            --*(_DWORD *)v14;
          v13 = v15;
        }
      }
      v13 += 72;
      v12 -= 72;
    }
    while (v12);
    v8 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, v3);
  }
  v9 = (WebCore::Style::Update *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    WebCore::Style::Update::~Update(v9, v3);
    if (*(_DWORD *)v10)
    {
      *(_QWORD *)(v10 + 80) = 0;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v10, v11);
    }
  }
}

void WebCore::RenderTreeBuilder::~RenderTreeBuilder(WebCore::RenderTreeBuilder *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  int v18;

  WebCore::RenderTreeBuilder::s_current = *((_QWORD *)this + 2);
  v3 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *((_QWORD *)this + 16);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 16);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x19429C7A0);
    }
    *(_DWORD *)(v4 + 16) = v5 - 1;
  }
  v6 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
    WTF::fastFree(v6, a2);
  v7 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v8)
    WTF::fastFree(v8, a2);
  v9 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
    WTF::fastFree(v9, a2);
  v10 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
    WTF::fastFree(v10, a2);
  v11 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
    WTF::fastFree(v11, a2);
  v12 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
    WTF::fastFree(v12, a2);
  v13 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
    WTF::fastFree(v13, a2);
  v14 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v14)
    WTF::fastFree(v14, a2);
  v15 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v15)
    WTF::fastFree(v15, a2);
  v16 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
    WTF::fastFree(v16, a2);
  v17 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
    WTF::fastFree(v17, a2);
  v18 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets(this, a2);
    v18 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v18 - 1;
}

WTF *WebCore::LocalFrameView::styleAndRenderTreeDidChange(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::RenderLayer *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 19);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 288))(v2);
  result = (WTF *)*((_QWORD *)this + 20);
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 288))(result);
  v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 1944);
    if (v5)
    {
      WebCore::LocalFrameView::checkAndDispatchDidReachVisuallyNonEmptyState((uint64_t)this);
      result = *(WTF **)(v5 + 336);
      if (result)
      {
        v7 = (WebCore::RenderLayer *)*((_QWORD *)result + 1);
        *(_QWORD *)(v5 + 336) = 0;
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, v6);
        else
          --*(_DWORD *)result;
        if (v7)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8) + 328) + 296);
          if (v8)
            v8 = *(_QWORD *)(v8 + 1944);
          if (((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) == 0
             || *(double *)((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
            && (!v8 || (*(_BYTE *)(v8 + 20) & 0xF8) == 0))
          {
            v9 = *((_QWORD *)this + 58);
            if ((!v9 || !*(_QWORD *)(v9 + 8)) && (!*((_DWORD *)this + 122) || !*((_BYTE *)this + 478)))
              return (WTF *)WebCore::RenderLayer::updateLayerPositionsAfterStyleChange(v7, v6);
          }
        }
      }
      else
      {
        *(_QWORD *)(v5 + 336) = 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::checkAndDispatchDidReachVisuallyNonEmptyState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  _QWORD *v21;

  if (!*(_BYTE *)(this + 1375))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 328);
    v3 = *(_QWORD *)(v2 + 296);
    v4 = *(_QWORD *)(v3 + 1272);
    if (v4)
    {
      if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19429CB60);
        }
        if (*(_BYTE *)(v3 + 3436))
          goto LABEL_30;
        this = WebCore::Style::Scope::hasPendingSheetsBeforeBody(*(WebCore::Style::Scope **)(v3 + 1328));
        if ((this & 1) != 0)
          return this;
        v2 = *(_QWORD *)(v1 + 328);
        v5 = *(_QWORD *)(v2 + 280);
        if (*(int *)(v5 + 64) < 2 || *(unsigned __int8 *)(v3 + 3363) - 1 > 1)
        {
          v6 = 1;
        }
        else
        {
          if (*(_BYTE *)(v5 + 216))
            goto LABEL_30;
          v6 = 0;
        }
        if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19429CB80);
          }
          if (*(float *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 4) != 0.0
            && (*(_BYTE *)(*(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 239) & 4) == 0
            && (*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x30) == 0)
          {
            this = WebCore::Document::body((WebCore::Document *)v3);
            if (this)
            {
              if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19429CBC4);
                }
                if (*(float *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 4) != 0.0
                  && (*(_BYTE *)(*(_QWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x68) + 239) & 4) == 0
                  && (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x30) == 0)
                {
                  if (*(_DWORD *)(v1 + 1156) <= 0xC8u)
                  {
                    v7 = *(_DWORD *)(v1 + 1160);
                    if (v7 > 0x400)
                      v8 = 1;
                    else
                      v8 = v6;
                    if ((v8 & 1) != 0)
                    {
                      if (v7 < 0x401)
                        return this;
                      goto LABEL_30;
                    }
                    v9 = *(_QWORD *)(v5 + 88);
                    if (v9)
                    {
                      v10 = *(_QWORD *)(v9 + 72);
                      if (*(_DWORD *)(v10 + 88))
                      {
                        v11 = *(_QWORD **)(v10 + 64);
                        if (v11)
                        {
                          v12 = *((unsigned int *)v11 - 1);
                          v13 = &v11[2 * v12];
                          if (*((_DWORD *)v11 - 3))
                          {
                            v14 = v11;
                            if ((_DWORD)v12)
                            {
                              v15 = 16 * v12;
                              v14 = v11;
                              while ((unint64_t)(*v14 + 1) <= 1)
                              {
                                v14 += 2;
                                v15 -= 16;
                                if (!v15)
                                {
                                  v14 = v13;
                                  goto LABEL_41;
                                }
                              }
                            }
                            goto LABEL_41;
                          }
                          v14 = &v11[2 * v12];
                        }
                        else
                        {
                          v14 = 0;
                          v12 = 0;
                        }
                        v13 = &v11[2 * v12];
LABEL_41:
                        if (v11)
                          v11 += 2 * *((unsigned int *)v11 - 1);
                        while (v14 != v11)
                        {
                          v16 = v14[1];
                          if (v16)
                          {
                            v17 = *(_QWORD *)(v16 + 8);
                            v18 = *(_WORD *)(v17 + 557);
                            if ((v18 & 0x400) != 0 && (v18 & 0x1C) != 0)
                            {
                              v19 = *(_BYTE *)(v17 + 556) & 0x1F;
                              if (v19 == 2 || v19 == 4)
                                return this;
                            }
                          }
                          else if ((MEMORY[0x22D] & 0x400) != 0 && (MEMORY[0x22D] & 0x1C) != 0)
                          {
                            return this;
                          }
                          v21 = v14 + 2;
                          v14 = v13;
                          if (v21 != v13)
                          {
                            v14 = v21;
                            while ((unint64_t)(*v14 + 1) <= 1)
                            {
                              v14 += 2;
                              if (v14 == v13)
                              {
                                v14 = v13;
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_30:
                  *(_BYTE *)(v1 + 1375) = 1;
                  if (*(_QWORD *)(*(_QWORD *)(v2 + 632) + 8) == v2)
                    return WebCore::FrameLoader::didReachVisuallyNonEmptyState(*(WebCore::FrameLoader **)(v2 + 280));
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::Style::resolveForDocument(WebCore::Style *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  const WebCore::Document *v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  double *v43;
  int v44;
  uint64_t v45;
  int *v46;
  int *v47;
  int *v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  int v56;
  float v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WebCore *v70;
  unsigned int *v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  WebCore::StyleRareInheritedData *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WebCore::StyleRareInheritedData *v84;
  WTF *v85;
  void *v86;
  uint64_t v87;
  WTF *v88;
  void *v89;
  WTF *v90;
  _DWORD *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WebCore::StyleRareNonInheritedData *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WebCore::StyleRareInheritedData *v99;
  WTF *v100;
  void *v101;
  unsigned int v102;
  WTF *v103;
  void *v104;
  float v105;
  WebCore *v106;
  unsigned int v107[4];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  _DWORD *v115;
  __int16 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  int v122;
  unsigned int v123;
  unsigned __int16 v124;
  unsigned __int8 v125;
  WTF *v126;
  float v127;
  unsigned __int16 v128;

  v5 = (_QWORD *)*((_QWORD *)this + 243);
  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  *(_DWORD *)a2 = 0;
  v6 = qword_1ECE913C0;
  *(_QWORD *)(a2 + 8) = qword_1ECE913C0;
  v7 = (WTF **)(a2 + 8);
  ++*(_DWORD *)v6;
  v8 = qword_1ECE913C8;
  v9 = qword_1ECE913D0;
  *(_QWORD *)(a2 + 16) = qword_1ECE913C8;
  ++*(_DWORD *)v9;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  v11 = qword_1ECE913E0;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = 0;
  v12 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 16) = v8 & 0xFFFFFFFFFFFFFC00 | 0x21;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a2 + 44) & 0xFFFFFFEF | (16 * *((unsigned __int8 *)this + 3388));
  v13 = 1.0;
  if (!*((_BYTE *)this + 3382))
    v13 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[3] + 8) + 40) + 8) + 528)
                               + 8)
                   + 592);
  v14 = *(float *)(v9 + 184);
  v15 = v13 * v14;
  if (v14 != (float)(v13 * v14))
  {
    if (*(_DWORD *)v9 != 1)
    {
      v105 = v13 * v14;
      v97 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v97, v9);
      v99 = *(WebCore::StyleRareInheritedData **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v97;
      if (v99)
      {
        if (*(_DWORD *)v99 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v99, v98);
          WTF::fastFree(v103, v104);
          v97 = *(_QWORD *)(a2 + 24);
        }
        else
        {
          --*(_DWORD *)v99;
        }
      }
      v7 = (WTF **)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 8);
      v9 = v97;
      v15 = v105;
    }
    *(float *)(v9 + 184) = v15;
  }
  if (*(float *)(*(_QWORD *)(v6 + 40) + 588) != v13)
  {
    v90 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v7);
    v91 = (_DWORD *)*((_QWORD *)v90 + 5);
    if (*v91 == 1)
    {
      v94 = *((_QWORD *)v90 + 5);
    }
    else
    {
      v92 = v90;
      v93 = WTF::fastMalloc((WTF *)0x288);
      v94 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v93, (uint64_t)v91);
      v96 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v92 + 5);
      *((_QWORD *)v92 + 5) = v94;
      if (v96)
      {
        if (*(_DWORD *)v96 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v96, v95);
          WTF::fastFree(v100, v101);
          v94 = *((_QWORD *)v92 + 5);
        }
        else
        {
          --*(_DWORD *)v96;
        }
      }
    }
    *(float *)(v94 + 588) = v13;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[3] + 8) + 40) + 8) + 528) + 8);
  v17 = *(_QWORD *)(v16 + 24);
  v18 = 1.0;
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
    {
      v20 = (*(_DWORD *)v19)++;
      if (*(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) == v16 && !*(_BYTE *)(v19 + 1098))
        v18 = *(float *)(v19 + 356);
      if (v20)
      {
        *(_DWORD *)v19 = v20;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)v19);
        WTF::fastFree(v72, v73);
      }
    }
  }
  WebCore::RenderStyle::setPageScaleTransform((int *)a2, v18);
  v22 = *((unsigned __int8 *)this + 3361);
  v23 = *(_DWORD **)(a2 + 24);
  v24 = v23[57];
  if (((v24 >> 4) & 3) == v22)
  {
    if (!*((_BYTE *)this + 3361))
      goto LABEL_21;
    goto LABEL_17;
  }
  if (*v23 != 1)
  {
    v78 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v78, (uint64_t)v23);
    v81 = *(WebCore::StyleRareInheritedData **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v79;
    if (v81)
    {
      if (*(_DWORD *)v81 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v81, v80);
        WTF::fastFree(v85, v86);
        v79 = *(_DWORD **)(a2 + 24);
      }
      else
      {
        --*(_DWORD *)v81;
      }
    }
    v24 = v79[57];
    v23 = v79;
  }
  v23[57] = v24 & 0xFFFFFFCF | (16 * v22);
  if (*((_BYTE *)this + 3361))
  {
LABEL_17:
    v25 = *(_QWORD *)(a2 + 24);
    if (*(float *)(v25 + 344) != -2.0)
    {
      if (*(_DWORD *)v25 == 1)
      {
        v26 = *(_QWORD *)(a2 + 24);
      }
      else
      {
        v82 = WTF::fastMalloc((WTF *)0x1A0);
        WebCore::StyleRareInheritedData::StyleRareInheritedData(v82, v25);
        v84 = *(WebCore::StyleRareInheritedData **)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v26;
        if (v84)
        {
          if (*(_DWORD *)v84 == 1)
          {
            WebCore::StyleRareInheritedData::~StyleRareInheritedData(v84, v83);
            WTF::fastFree(v88, v89);
            v26 = *(_QWORD *)(a2 + 24);
          }
          else
          {
            --*(_DWORD *)v84;
          }
        }
      }
      *(_DWORD *)(v26 + 344) = -1073741824;
    }
  }
LABEL_21:
  WebCore::Style::Adjuster::adjustEventListenerRegionTypesForRootStyle((WebCore::EventNames **)a2, this, v21);
  v27 = v5[31];
  v28 = (unsigned __int8 *)(v27 + 1316);
  v29 = *(unsigned __int8 *)(v27 + 1316);
  if (*(_BYTE *)(v27 + 1316))
    goto LABEL_30;
  if (!*(_BYTE *)(v27 + 1317) && !*(_DWORD *)(v27 + 1320) && !*(_DWORD *)(v27 + 1324))
  {
    v30 = *(_QWORD *)(v27 + 328);
    if (*(_QWORD *)(*(_QWORD *)(v30 + 128) + 8) == v30)
    {
      v31 = *(_QWORD *)(v30 + 24);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
          v28 = (unsigned __int8 *)(v32 + 468);
        v29 = *v28;
        if (*v28)
        {
LABEL_30:
          WebCore::RenderStyle::setColumnStylesFromPaginationMode(a2, v29);
          v33 = *((_DWORD *)v28 + 2);
          LOBYTE(v107[0]) = 0;
          LOWORD(v107[2]) = 4;
          BYTE2(v107[2]) = 0;
          v107[1] = v33;
          WebCore::RenderStyle::setColumnGap(a2, (float *)v107);
          if (LOBYTE(v107[2]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v107[1]);
          }
          v34 = v5[28];
          if (v34)
          {
            v87 = *(_QWORD *)(v34 + 24);
            if (v87)
            {
              if (*(_QWORD *)(v87 + 8))
                WebCore::RenderBlockFlow::updateColumnProgressionFromStyle((uint64_t)v5, (const WebCore::RenderStyle *)a2);
            }
          }
        }
      }
    }
  }
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[3] + 8) + 40) + 8) + 528)
                              + 8)
                  + 136);
  v113 = 256;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  v114 = 0;
  v36 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v36 += 2;
  v115 = v36;
  v116 = 0;
  v117 = 2143289344;
  v118 = 0;
  v119 = 0;
  v120 = 26216000;
  v121 = 257;
  v122 = 0;
  v123 = v123 & 0x80000000 | 0xE000;
  v124 = 0;
  v125 &= 0xFCu;
  v37 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v37 = 0x100000001;
  *((_QWORD *)v37 + 1) = 0;
  v126 = v37;
  v127 = 0.0;
  v128 &= 0xFC00u;
  WebCore::FontDescription::setSpecifiedLocale((WebCore::FontDescription *)v107, (WebCore::Style *)((char *)this + 1712));
  v39 = v126;
  if (!*((_DWORD *)v126 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x19429D2ECLL);
  }
  v40 = WebCore::WebKitFontFamilyNames::standardFamily;
  if (WebCore::WebKitFontFamilyNames::standardFamily)
    *(_DWORD *)WebCore::WebKitFontFamilyNames::standardFamily += 2;
  v41 = (WTF::StringImpl *)*((_QWORD *)v39 + 1);
  *((_QWORD *)v39 + 1) = v40;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v38);
    else
      *(_DWORD *)v41 -= 2;
  }
  v125 = ((32 * *(_DWORD *)(v35 + 696)) & 0x10000 | (v124 | (v125 << 16)) & 0xFFFEFFFF) >> 16;
  v42 = v128;
  v128 = v128 & 0xFF87 | 0x20;
  v43 = (double *)*((_QWORD *)this + 85);
  v44 = (int)v43[42];
  v45 = (v44 - 9);
  if (v45 > 7)
  {
    v49 = v43[63];
    if (v49 < 1.0)
      v49 = 1.0;
    if (v49 <= (float)v44)
      v49 = (float)v44;
  }
  else
  {
    v46 = (int *)((char *)&WebCore::Style::quirksFontSizeTable + 32 * v45 + 12);
    v47 = &WebCore::Style::strictFontSizeTable[8 * v45 + 3];
    if (*((_BYTE *)this + 3384) == 2)
      v48 = v46;
    else
      v48 = v47;
    v49 = (float)*v48;
  }
  v50 = (float)(int)v49;
  v127 = v50;
  if ((*((_WORD *)this + 1679) & 0x20) != 0)
  {
    if (fabsf(v50) >= 0.00000011921)
    {
LABEL_59:
      v60 = 2139095039;
      if (v50 < 3.4028e38)
      {
        v60 = LODWORD(v50);
        if (v50 <= -3.4028e38)
          v60 = -8388609;
      }
      goto LABEL_62;
    }
LABEL_100:
    v60 = 0;
    goto LABEL_62;
  }
  v51 = *(_QWORD *)(a2 + 24);
  v52 = *(float *)(v51 + 184);
  v53 = *((_QWORD *)this + 66);
  if (v53)
  {
    v54 = *(_QWORD *)(v53 + 8);
    if (v54)
    {
      if ((*(_BYTE *)(v51 + 236) & 0x20) == 0)
        v52 = v52 * *(float *)(v54 + 596);
    }
  }
  if (fabsf(v50) < 0.00000011921)
    goto LABEL_100;
  v55 = v43[63];
  v56 = (int)v43[62];
  v57 = v52 * v50;
  v58 = (int)v55;
  if (v57 < (float)v56)
    v57 = (float)v56;
  v59 = (float)v58 > v50;
  if (v57 >= (float)v58)
    v50 = v57;
  else
    v50 = (float)v58;
  if ((v42 & v59) != 0)
    v50 = v57;
  v60 = 1232348160;
  if (v50 < 1000000.0)
    goto LABEL_59;
LABEL_62:
  v122 = v60;
  if ((*(_DWORD *)(a2 + 44) & 0xC000) != 0x4000
    || (v102 = (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 232) >> 4) & 3, v102 == 3))
  {
    v61 = 0;
    v62 = 0;
  }
  else
  {
    v61 = dword_1969FE5A0[v102];
    v62 = dword_1969FE5AC[v102];
  }
  v123 = v62 | v61 | v123 & 0xFFFFFFFC;
  WebCore::RenderStyle::setFontDescription(a2, (uint64_t)v107);
  v63 = *(_QWORD *)(a2 + 32);
  v64 = (WebCore *)*((_QWORD *)this + 331);
  if (!v64)
    v64 = (WebCore *)WebCore::Document::ensureFontSelector(this);
  v65 = v63 + 32;
  ++*((_DWORD *)v64 + 2);
  v106 = v64;
  v66 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v66 || (v67 = *(_QWORD *)(v66 + 96)) == 0)
    v67 = WebCore::threadGlobalDataSlow(v64);
  v68 = *(_QWORD *)(v67 + 80);
  if (!v68)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v67);
    v68 = *(_QWORD *)(v67 + 80);
  }
  WebCore::FontCache::updateFontCascade(v68, v65, &v106);
  v70 = v106;
  v106 = 0;
  if (v70)
  {
    if (*((_DWORD *)v70 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v70 + 8))(v70);
    else
      --*((_DWORD *)v70 + 2);
  }
  v71 = (unsigned int *)v126;
  v126 = 0;
  if (v71)
  {
    if (*v71 == 1)
    {
      v74 = v71[1];
      if ((_DWORD)v74)
      {
        v75 = (WTF::StringImpl **)(v71 + 2);
        v76 = 8 * v74;
        do
        {
          v77 = *v75;
          *v75 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v69);
            else
              *(_DWORD *)v77 -= 2;
          }
          ++v75;
          v76 -= 8;
        }
        while (v76);
      }
      WTF::fastFree((WTF *)v71, v69);
    }
    else
    {
      --*v71;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v107, v69);
}

uint64_t WebCore::Style::Adjuster::computeEventListenerRegionTypes(WebCore::EventNames **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v9;
  WebCore::EventNames *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::EventNames *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::EventNames **v27;
  WebCore::EventNames **v28;
  unint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  if ((v5 & 0x1000000000000) != 0 && *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(StatusReg + 736);
    if (!v9 || (a1 = *(WebCore::EventNames ***)(v9 + 96)) == 0)
      a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v10 = a1[5];
    if (!v10)
    {
      v29 = StatusReg;
      v27 = a1;
      a1 = WebCore::ThreadGlobalData::initializeEventNames(a1);
      v10 = v27[5];
      StatusReg = v29;
    }
    v11 = *(unsigned int *)((((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) + 16) & ((uint64_t)(*(_QWORD *)(a3 + 16) << 15) >> 63))
                          + 0xC);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) + 16) & ((uint64_t)(*(_QWORD *)(a3 + 16) << 15) >> 63));
      v13 = *((_QWORD *)v10 + 314);
      v14 = 32 * v11;
      while (*(_QWORD *)v12 != v13)
      {
        v12 += 32;
        v14 -= 32;
        if (!v14)
          goto LABEL_13;
      }
      v21 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD *)(v12 + 8);
        v23 = 8 * v21;
        while ((*(_BYTE *)(*(_QWORD *)v22 + 4) & 2) != 0)
        {
          v22 += 8;
          v23 -= 8;
          if (!v23)
            goto LABEL_27;
        }
        a4 = a4 | 3;
      }
      else
      {
LABEL_27:
        a4 = a4 | 1;
      }
    }
LABEL_13:
    v15 = *(_QWORD *)(StatusReg + 736);
    if (!v15 || (a1 = *(WebCore::EventNames ***)(v15 + 96)) == 0)
      a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v16 = a1[5];
    if (!v16)
    {
      v28 = a1;
      WebCore::ThreadGlobalData::initializeEventNames(a1);
      v16 = v28[5];
    }
    v17 = *(unsigned int *)((((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) + 16) & ((uint64_t)(*(_QWORD *)(a3 + 16) << 15) >> 63))
                          + 0xC);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) + 16) & ((uint64_t)(*(_QWORD *)(a3 + 16) << 15) >> 63));
      v19 = *((_QWORD *)v16 + 158);
      v20 = 32 * v17;
      while (*(_QWORD *)v18 != v19)
      {
        v18 += 32;
        v20 -= 32;
        if (!v20)
          return a4;
      }
      v24 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v18 + 8);
        v26 = 8 * v24;
        while ((*(_BYTE *)(*(_QWORD *)v25 + 4) & 2) != 0)
        {
          v25 += 8;
          v26 -= 8;
          if (!v26)
            return a4 | 1;
        }
        return a4 | 3;
      }
      else
      {
        return a4 | 1;
      }
    }
  }
  return a4;
}

WTF::StringImpl *WebCore::FontDescription::setSpecifiedLocale(WebCore::FontDescription *this, const WTF::AtomString *a2)
{
  WebCore *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  void (*v8)(void *);
  WTF::StringImpl *v9;
  WTF::StringImpl *result;

  v3 = (WebCore::FontDescription *)((char *)this + 136);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)v3;
  *(_QWORD *)v3 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = WebCore::localeToScriptCodeForFontSelection(v3, a2);
  *((_DWORD *)this + 40) = *((_DWORD *)this + 40) & 0xFFFFE03F | ((v6 & 0x7F) << 6);
  if ((v6 & 0x7F) == 0x11)
  {
    WebCore::specializedChineseLocale((WebCore *)v6, (uint64_t)v7, v8);
    v3 = (WebCore *)&qword_1ECE83C48;
  }
  v9 = *(WTF::StringImpl **)v3;
  if (*(_QWORD *)v3)
    *(_DWORD *)v9 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v9;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::localeToScriptCodeForFontSelection(WebCore *this, const WTF::String *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  char v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;

  if (!*(_QWORD *)this)
    return 0;
  WTF::StringImpl::replace();
  v3 = v29;
  if (!v29)
    return 0;
  v4 = *((_BYTE *)v29 + 16);
  v5 = (WTF::StringImpl *)*((_QWORD *)v29 + 1);
  v6 = *((_DWORD *)v29 + 1);
  v29 = v5;
  LODWORD(v30) = v6;
  BYTE4(v30) = (v4 & 4) != 0;
  if (!v6)
  {
LABEL_4:
    v7 = 0;
LABEL_5:
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v3 -= 2;
    return v7;
  }
  while (1)
  {
    if ((v30 & 0xFF00000000) != 0)
    {
      v11 = WTF::SortedArrayKeyTraits<WTF::PackedASCIISubsetLiteral<unsigned long long,(WTF::ASCIISubset)1>>::parse<unsigned char>((char *)v5, v30);
      goto LABEL_12;
    }
    if (v30 <= 8uLL)
    {
      v9 = 0;
      if (!(_DWORD)v30)
      {
LABEL_25:
        v10 = v9 & 0xFFFFFFFFFFFFFF00;
        v9 = v9;
        v2 = 1;
        goto LABEL_11;
      }
      v18 = 56;
      while (1)
      {
        v20 = *(unsigned __int16 *)v5;
        v5 = (WTF::StringImpl *)((char *)v5 + 2);
        v19 = v20;
        if (v20 > 0x7F)
          break;
        v9 |= (unint64_t)(v19 | (32 * (v19 - 65 < 0x1A))) << v18;
        v18 -= 8;
        if (8 * v30 + v18 == 56)
          goto LABEL_25;
      }
    }
    v9 = 0;
    v2 = 0;
    v10 = 0;
LABEL_11:
    v11 = v10 | v9;
LABEL_12:
    if ((_BYTE)v2)
    {
      v12 = (char *)&WebCore::localeToScriptCodeForFontSelection(WTF::String const&)::localeScriptList;
      v13 = 198;
      do
      {
        v14 = v13 >> 1;
        v15 = (unint64_t *)&v12[16 * (v13 >> 1)];
        v17 = *v15;
        v16 = (char *)(v15 + 2);
        v13 += ~(v13 >> 1);
        if (v17 < v11)
          v12 = v16;
        else
          v13 = v14;
      }
      while (v13);
      if (v12 != (char *)&WebCore::upperCaseToFieldTypeMap && *(_QWORD *)v12 == v11)
      {
        v7 = *((unsigned int *)v12 + 2);
        goto LABEL_5;
      }
    }
    result = WTF::StringView::reverseFind((uint64_t)&v29, 0x5Fu, 0xFFFFFFFF);
    if (result == -1)
      goto LABEL_4;
    v21 = result;
    v22 = (result + 1);
    v23 = v30;
    if (v30 <= v22)
    {
      v25 = 0x100000000;
      v24 = (unsigned __int16 *)&str_144;
      goto LABEL_33;
    }
    if ((_DWORD)result == -1)
    {
      v24 = (unsigned __int16 *)v29;
      v25 = v30;
      goto LABEL_33;
    }
    v25 = (v30 - v22);
    v28 = v30 - (unint64_t)v22;
    if (!BYTE4(v30))
      break;
    if (v28 < v25)
      goto LABEL_50;
    v24 = (unsigned __int16 *)((char *)v29 + v22);
    v25 |= 0x100000000uLL;
LABEL_33:
    v26 = WebCore::scriptNameToCode(v24, v25);
    if ((_DWORD)v26 != 103)
    {
      v7 = v26;
      if ((_DWORD)v26 != -1)
        goto LABEL_5;
    }
    if (v23)
    {
      if (v23 <= v21)
        v27 = v30;
      else
        v27 = BYTE4(v30) ? v21 | 0x100000000 : v21;
      v5 = v29;
      LODWORD(v30) = v27;
      BYTE4(v30) = BYTE4(v27);
      if ((_DWORD)v27)
        continue;
    }
    goto LABEL_4;
  }
  if (v28 >= v25)
  {
    v24 = (unsigned __int16 *)((char *)v29 + 2 * v22);
    goto LABEL_33;
  }
LABEL_50:
  __break(1u);
  return result;
}

int *WebCore::RenderStyle::setPageScaleTransform(int *this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  double v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 != 1.0)
  {
    v15 = v5;
    v16 = v4;
    v17 = v2;
    v18 = v3;
    v6 = (WTF **)this;
    v7 = a2;
    v8 = WTF::fastMalloc((WTF *)0x28);
    v11 = (_DWORD *)WebCore::ScaleTransformOperation::ScaleTransformOperation(v8, 2u, v7, v7, 1.0);
    WebCore::TransformOperations::TransformOperations((uint64_t)&v12, &v11);
    WebCore::RenderStyle::setTransform(v6, (uint64_t)&v12);
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v9);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
    v12 = 0;
    v13 = 4;
    v14 = 0;
    WebCore::RenderStyle::setTransformOriginX((uint64_t)v6, (WebCore::Length *)&v12);
    if (v13 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
    }
    v12 = 0;
    v13 = 4;
    v14 = 0;
    this = (int *)WebCore::RenderStyle::setTransformOriginY((uint64_t)v6, (WebCore::Length *)&v12);
    if (v13 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v12);
    }
  }
  return this;
}

void WebCore::Style::Scope::flushPendingSelfUpdate(WebCore::Style::Scope *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v4;

  if (*((_BYTE *)this + 233))
  {
    v4 = (WTF **)*((unsigned __int8 *)this + 232);
    if ((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::Style::Scope *)((char *)this + 80));
    *((_WORD *)this + 116) = 0;
    WebCore::Style::Scope::updateActiveStyleSheets((uint64_t)this, v4, a3);
  }
  else
  {
    __break(1u);
  }
}

BOOL WebCore::StyleInheritedData::nonFastPathInheritedEqual(uint64_t a1, uint64_t a2)
{
  int v2;
  WebCore::Length *v5;
  float v6;
  float v7;
  int v8;
  WebCore::Length *v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int16x4_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WebCore::Length *v32;
  float v33;
  float v34;
  int v35;
  WebCore::Length *v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != *(unsigned __int8 *)(a2 + 16) || (*(_BYTE *)(a1 + 17) != 0) != (*(_BYTE *)(a2 + 17) != 0))
    return 0;
  if (v2 != 13)
  {
    v5 = (WebCore::Length *)(a1 + 12);
    if (v2 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v5, (const WebCore::Length *)(a2 + 12)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 18))
        v6 = *(float *)v5;
      else
        v6 = (float)*(int *)v5;
      v7 = *(float *)(a2 + 12);
      if (!*(_BYTE *)(a2 + 18))
        v7 = (float)SLODWORD(v7);
      if (v6 != v7)
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + 24);
  if (v8 != *(unsigned __int8 *)(a2 + 24) || (*(_BYTE *)(a1 + 25) != 0) != (*(_BYTE *)(a2 + 25) != 0))
    return 0;
  if (v8 != 13)
  {
    v9 = (WebCore::Length *)(a1 + 20);
    if (v8 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v9, (const WebCore::Length *)(a2 + 20)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 26))
        v10 = *(float *)v9;
      else
        v10 = (float)*(int *)v9;
      v11 = *(float *)(a2 + 20);
      if (!*(_BYTE *)(a2 + 26))
        v11 = (float)SLODWORD(v11);
      if (v10 != v11)
        return 0;
    }
  }
  v12 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v12 != *(_DWORD *)(a2 + 60))
    return 0;
  if (memcmp(*(const void **)(a1 + 48), *(const void **)(a2 + 48), 8 * v12))
    return 0;
  v13 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v13 != *(_DWORD *)(a2 + 76) || memcmp(*(const void **)(a1 + 64), *(const void **)(a2 + 64), 8 * v13))
    return 0;
  v18 = *(unsigned __int8 *)(a1 + 145);
  v19 = *(unsigned __int8 *)(a2 + 145);
  if (v19 | v18)
  {
    if ((v18 != 0) == (v19 == 0))
      return 0;
  }
  else if ((WebCore::operator==(a1 + 80, a2 + 80, v14) & 1) == 0)
  {
    return 0;
  }
  v20 = *(unsigned __int8 *)(a1 + 152);
  v21 = *(unsigned __int8 *)(a2 + 152);
  if (v20 == 3)
  {
    if (v21 != 3 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
      return 0;
  }
  else if (v20 != v21)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168))
    return 0;
  if ((*(_BYTE *)(a1 + 169) == 0) == (*(_BYTE *)(a2 + 169) != 0))
    return 0;
  v15.i32[0] = *(_DWORD *)(a2 + 172);
  if (*(float *)(a1 + 172) != *(float *)v15.i32)
    return 0;
  if (*(_QWORD *)(a1 + 176) != *(_QWORD *)(a2 + 176))
    return 0;
  if (*(_QWORD *)(a1 + 184) != *(_QWORD *)(a2 + 184))
    return 0;
  v15.i16[0] = *(_WORD *)(a1 + 192);
  *(float *)v16.i32 = (float)vmovl_s16(v15).i32[0] * 0.25;
  v17.i16[0] = *(_WORD *)(a2 + 192);
  v22 = (int16x4_t)vmovl_s16(v17).u64[0];
  *(float *)v22.i32 = (float)v22.i32[0] * 0.25;
  if (*(float *)v16.i32 != *(float *)v22.i32)
    return 0;
  v16.i16[0] = *(_WORD *)(a1 + 194);
  v22.i16[0] = *(_WORD *)(a2 + 194);
  if ((float)((float)vmovl_s16(v16).i32[0] * 0.25) != (float)((float)vmovl_s16(v22).i32[0] * 0.25))
    return 0;
  if (*(_BYTE *)(a1 + 198) && *(_BYTE *)(a2 + 198))
  {
    if ((float)((float)*(__int16 *)(a1 + 196) * 0.25) != (float)((float)*(__int16 *)(a2 + 196) * 0.25))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 198) != 0) != (*(_BYTE *)(a2 + 198) != 0))
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 200) == 0) == (*(_BYTE *)(a2 + 200) != 0))
    return 0;
  if ((*(_BYTE *)(a1 + 201) == 0) == (*(_BYTE *)(a2 + 201) != 0))
    return 0;
  if (*(float *)(a1 + 204) != *(float *)(a2 + 204))
    return 0;
  if (((*(_DWORD *)(a2 + 208) ^ *(_DWORD *)(a1 + 208)) & 0x7FFFFFFF) != 0)
    return 0;
  if ((((*(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16)) ^ (*(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16))) & 0x3FFFF) != 0)
    return 0;
  v23 = *(_QWORD *)(a1 + 216);
  v24 = *(_QWORD *)(a2 + 216);
  v25 = *(unsigned int *)(v23 + 4);
  if ((_DWORD)v25 != *(_DWORD *)(v24 + 4))
    return 0;
  if ((_DWORD)v25)
  {
    if (*(_QWORD *)(v23 + 8) != *(_QWORD *)(v24 + 8))
      return 0;
    v26 = 0;
    v27 = v24 + 16;
    v28 = v23 + 16;
    while (v25 - 1 != v26)
    {
      v29 = *(_QWORD *)(v28 + 8 * v26);
      v30 = *(_QWORD *)(v27 + 8 * v26++);
      if (v29 != v30)
      {
        if (v26 < v25)
          return 0;
        break;
      }
    }
  }
  if (*(float *)(a1 + 224) != *(float *)(a2 + 224))
    return 0;
  if (((*(_WORD *)(a2 + 228) ^ *(_WORD *)(a1 + 228)) & 0x3FF) != 0)
    return 0;
  v31 = *(unsigned __int8 *)(a1 + 236);
  if (v31 != *(unsigned __int8 *)(a2 + 236) || (*(_BYTE *)(a1 + 237) != 0) != (*(_BYTE *)(a2 + 237) != 0))
    return 0;
  if (v31 != 13)
  {
    v32 = (WebCore::Length *)(a1 + 232);
    if (v31 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v32, (const WebCore::Length *)(a2 + 232)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 238))
        v33 = *(float *)v32;
      else
        v33 = (float)*(int *)v32;
      v34 = *(float *)(a2 + 232);
      if (!*(_BYTE *)(a2 + 238))
        v34 = (float)SLODWORD(v34);
      if (v33 != v34)
        return 0;
    }
  }
  v35 = *(unsigned __int8 *)(a1 + 244);
  if (v35 != *(unsigned __int8 *)(a2 + 244) || (*(_BYTE *)(a1 + 245) != 0) != (*(_BYTE *)(a2 + 245) != 0))
    return 0;
  if (v35 != 13)
  {
    v36 = (WebCore::Length *)(a1 + 240);
    if (v35 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v36, (const WebCore::Length *)(a2 + 240)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 246))
        v37 = *(float *)v36;
      else
        v37 = (float)*(int *)v36;
      v38 = *(float *)(a2 + 240);
      if (!*(_BYTE *)(a2 + 246))
        v38 = (float)SLODWORD(v38);
      if (v37 != v38)
        return 0;
    }
  }
  v39 = *(_QWORD *)(a1 + 248);
  v40 = *(_QWORD *)(a2 + 248);
  if (v39 == v40)
  {
LABEL_72:
    if (*(float *)(a1 + 4) == *(float *)(a2 + 4))
      return *(float *)(a1 + 8) == *(float *)(a2 + 8);
    return 0;
  }
  result = 0;
  if (v39 && v40)
  {
    if (*(_QWORD *)(v39 + 112) != *(_QWORD *)(v40 + 112)
      || *(_DWORD *)(v39 + 144) != *(_DWORD *)(v40 + 144)
      || *(unsigned __int16 *)(v39 + 148) != *(unsigned __int16 *)(v40 + 148))
    {
      return 0;
    }
    goto LABEL_72;
  }
  return result;
}

BOOL WebCore::StyleInheritedData::fastPathInheritedEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 328);
  v3 = *(_QWORD *)(a2 + 328);
  if ((v2 & 0x8000000000000) != 0)
  {
    v13 = a2;
    v15 = a1;
    if ((v3 & 0x8000000000000) == 0)
      return 0;
    v18 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v17 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v18, (float *)&v17))
      return 0;
    v6 = *(_QWORD *)(v15 + 328);
    v7 = *(_QWORD *)(v13 + 328);
    if (HIBYTE(v6) != HIBYTE(v7))
      return 0;
    a2 = v13;
    a1 = v15;
    if (BYTE6(v6) != BYTE6(v7))
      return 0;
  }
  else if (v2 != v3 || (v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 336);
  v9 = *(_QWORD *)(a2 + 336);
  if ((v8 & 0x8000000000000) == 0)
    return (v9 & 0x8000000000000) == 0 && v8 == v9;
  v14 = a2;
  v16 = a1;
  if ((v9 & 0x8000000000000) == 0)
    return 0;
  v18 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
  v17 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)&v18, (float *)&v17);
  if (result)
  {
    v11 = *(_QWORD *)(v16 + 336);
    v12 = *(_QWORD *)(v14 + 336);
    return HIBYTE(v11) == HIBYTE(v12) && BYTE6(v11) == BYTE6(v12);
  }
  return result;
}

unint64_t WTF::SortedArrayKeyTraits<WTF::PackedASCIISubsetLiteral<unsigned long long,(WTF::ASCIISubset)1>>::parse<unsigned char>(char *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  unint64_t v6;

  if (a2 > 8)
  {
LABEL_8:
    v2 = 0;
    v6 = 0;
    return v6 | v2;
  }
  v2 = 0;
  if (a2)
  {
    v3 = 56;
    do
    {
      v5 = *a1++;
      v4 = v5;
      if (v5 < 0)
        goto LABEL_8;
      v2 |= (unint64_t)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4) << v3;
      v3 -= 8;
    }
    while (--a2);
  }
  v6 = v2 & 0xFFFFFFFFFFFFFF00;
  v2 = v2;
  return v6 | v2;
}

uint64_t WebCore::scriptNameToCode(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;

  if ((a2 & 0xFF00000000) == 0)
  {
    if (a2 <= 4uLL)
    {
      if ((_DWORD)a2)
      {
        v9 = 0;
        v3 = 0;
        while (1)
        {
          v11 = *a1++;
          v10 = v11;
          if (v11 > 0x7F)
            goto LABEL_9;
          v3 |= (v10 | 0x20) << (v9 + 24);
          v9 -= 8;
          if (!(8 * a2 + v9))
            goto LABEL_16;
        }
      }
      goto LABEL_15;
    }
LABEL_9:
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_17;
  }
  if (a2 > 4uLL)
    goto LABEL_9;
  if ((_DWORD)a2)
  {
    v2 = 0;
    v3 = 0;
    while (1)
    {
      v5 = *(char *)a1;
      a1 = (unsigned __int16 *)((char *)a1 + 1);
      v4 = v5;
      if (v5 < 0)
        goto LABEL_9;
      v3 |= (v4 | 0x20) << (v2 + 24);
      v2 -= 8;
      if (!(8 * a2 + v2))
        goto LABEL_16;
    }
  }
LABEL_15:
  v3 = 0;
LABEL_16:
  v8 = v3 & 0xFFFFFF00;
  v7 = v3;
  v6 = 0x100000000;
LABEL_17:
  v12 = v8 | v7;
  if ((v6 & 0x100000000) == 0)
    return 0xFFFFFFFFLL;
  v13 = v12 | v6;
  v14 = 106;
  v15 = (char *)&WebCore::scriptNameToCode(WTF::StringView)::scriptNameCodeList;
  do
  {
    v16 = v14 >> 1;
    v17 = &v15[8 * (v14 >> 1)];
    v19 = *(_DWORD *)v17;
    v18 = v17 + 8;
    v14 += ~(v14 >> 1);
    if (v19 < v13)
      v15 = v18;
    else
      v14 = v16;
  }
  while (v14);
  if (v15 != (char *)&unk_1969F9CCC && *(_DWORD *)v15 == v13)
    return *((unsigned int *)v15 + 1);
  else
    return 0xFFFFFFFFLL;
}

WebCore::RenderLayerCompositor *WebCore::RenderLayerCompositor::RenderLayerCompositor(WebCore::RenderLayerCompositor *this, WebCore::RenderView *a2)
{
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  WTF::RunLoop *v10;
  WTF::RunLoop *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  WTF *v19;

  *(_QWORD *)this = off_1E3428E28;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = *(unsigned int **)(StatusReg + 736);
  if (!v4)
    v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 7) = v4;
  *((_QWORD *)this + 2) = off_1E31F7378;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34291F8;
  v6[1] = WebCore::RenderLayerCompositor::updateCompositingLayersTimerFired;
  v6[2] = 0;
  v6[3] = this;
  *((_QWORD *)this + 8) = v6;
  *((_QWORD *)this + 9) = off_1E3407128;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *((_QWORD *)this + 14) = v7;
  *((_QWORD *)this + 9) = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E34291F8;
  v9[1] = WebCore::RenderLayerCompositor::scheduleRenderingUpdate;
  v9[2] = 0;
  v9[3] = this;
  *((_QWORD *)this + 15) = v9;
  *((_DWORD *)this + 32) = -1;
  *((_WORD *)this + 66) = 1;
  v10 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E3429220;
  *((_QWORD *)this + 17) = v10;
  *((_QWORD *)this + 18) = 0x4000000000000000;
  v11 = (WTF::RunLoop *)WTF::RunLoop::main(v10);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E3355738;
  v12[1] = PAL::HysteresisActivity::hysteresisTimerFired;
  v12[2] = 0;
  v12[3] = (char *)this + 136;
  WTF::RunLoop::TimerBase::TimerBase((WebCore::RenderLayerCompositor *)((char *)this + 152), v11);
  *((_QWORD *)this + 19) = off_1E32051C0;
  *((_QWORD *)this + 22) = v12;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_BYTE *)this + 288) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  v13 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)(v13 + 248);
  if (*(_QWORD *)(v14 + 40))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 328) + 632) + 8) == *(_QWORD *)(v14 + 328);
    v18 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v18 = v15;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_BYTE *)(v18 + 40) = v16;
    v19 = (WTF *)*((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = v18;
    if (v19)
      std::default_delete<WebCore::LegacyWebKitScrollingLayerCoordinator>::operator()[abi:sn180100](v19, v17);
  }
  return this;
}

uint64_t WebCore::Node::nextElementSibling(uint64_t this)
{
  do
    this = *(_QWORD *)(this + 56);
  while (this && (*(_WORD *)(this + 28) & 8) == 0);
  return this;
}

void PAL::CryptoDigest::~CryptoDigest(unsigned int **this, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  char v4;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = v2[4];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v4, v2 + 2);
    v2[4] = -1;
    WTF::fastFree((WTF *)v2, a2);
  }
}

{
  unsigned int *v2;
  uint64_t v3;
  char v4;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = v2[4];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v4, v2 + 2);
    v2[4] = -1;
    WTF::fastFree((WTF *)v2, a2);
  }
}

WTF *WebCore::RenderTreeUpdater::tearDownRenderers(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  WebCore::RenderTreeBuilder *v3;
  WebCore::RenderTreeBuilder *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WebCore::RenderObject *v20;
  WebCore::RenderObject *v21;
  int v22;
  void *v23;
  uint64_t v24;
  WebCore::RenderElement *v25;
  void *v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  BOOL v34;
  WebCore::RenderObject *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::RenderObject *v49;
  WebCore::RenderObject *v50;
  int v51;
  WebCore::RenderElement *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  WTF *v56;
  WTF *v58;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  WTF *v65;
  WTF *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::SVGTextLayoutAttributes **v72;
  uint64_t v73;
  __int128 *v74;
  WTF *v75;
  int v76;
  uint64_t v77;
  int v78;
  WTF *v79;
  unsigned int v80;
  uint64_t v81;
  _DWORD *v82;
  unsigned int v83;
  WebCore::Node *v84;
  __int16 v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  WebCore::RenderObject *v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::RenderObject *v108;
  uint64_t v109;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF::StringImpl *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *k;
  uint64_t v125;
  uint64_t *j;
  WTF::StringImpl *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  WTF::StringImpl *v153;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  WTF::StringImpl *v174;
  _QWORD *v176;
  WTF *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  WTF *v181;
  uint64_t v182;
  const WebCore::RenderStyle *v183;
  const WebCore::RenderStyle *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  WebCore::RenderObject *v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  unsigned int v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  BOOL v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  BOOL v222;
  int v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  WebCore::Animation **v230;
  WTF *v231;
  WebCore::Animation *v232;
  WTF *v233;
  uint64_t v234;
  WebCore::Animation **v235;
  WTF *v236;
  WebCore::Animation *v237;
  WTF *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  WebCore::RenderElement *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  WTF *v251;
  WTF *v253;
  WTF *v255;
  WTF *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  WTF *v260;
  WTF *v262;
  unsigned int v264;
  char *v265;
  uint64_t v266;
  WTF *v267;
  uint64_t v268;
  WTF *v269;
  int v270;
  int v271;
  _QWORD *v272;
  WTF *v273;
  void *v274;
  WTF *v275;
  void *v276;
  int v277;
  __int128 *v278;
  WTF *v279;
  int v280;
  WebCore::RenderObject *v281;
  int v282;
  WTF *v283;
  uint64_t v284;
  uint64_t m;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  WebCore::RenderObject *v290;
  uint64_t v291;
  WTF::StringImpl *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  WTF::StringImpl *v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *ii;
  uint64_t v307;
  uint64_t *n;
  WTF::StringImpl *v309;
  uint64_t v310;
  WTF *result;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  WTF::StringImpl *v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  WTF::StringImpl *v344;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  WTF::StringImpl *v358;
  _QWORD *v360;
  uint64_t v361;
  WTF *v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  WTF *v366;
  WTF *v367;
  WTF *v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  unsigned int v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  BOOL v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  unsigned int v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  BOOL v390;
  unint64_t v391;
  uint64_t v392;
  WebCore::Animation **v393;
  uint64_t v394;
  WebCore::Animation *v395;
  WTF *v396;
  uint64_t v397;
  WebCore::Animation **v398;
  uint64_t v399;
  WebCore::Animation *v400;
  WTF *v401;
  int v402;
  int v403;
  WTF *v404;
  void *v405;
  WTF *v406;
  void *v407;
  WTF *v408;
  int v409;
  WebCore::RenderObject *v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  __int16 v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v422;
  WTF *v423;
  WTF *v424;
  _DWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v432;
  WTF *v433;
  WTF *v434;
  _DWORD *v435;
  __int16 v436;
  WTF *v437;
  _DWORD *v438;
  WTF *v439;
  _DWORD *v440;
  uint64_t v441;
  WTF *v442;
  WTF *v443;
  WTF *v444;
  uint64_t v445;
  WTF *v446;
  uint64_t v447;
  _BYTE v448[240];
  WTF *v449;
  WTF *v450;
  WTF::StringImpl *v451;
  uint64_t v452;
  _BYTE *v453;
  uint64_t v454;
  _BYTE v455[256];
  int v456;
  uint64_t v457;
  _BYTE *v458;
  uint64_t v459;
  _BYTE v460[256];
  int v461;
  uint64_t v462;
  __int128 v463;
  WTF::StringImpl *v464;
  _BYTE v465[4672];
  WebCore::Animation ***v466;
  int v467;
  WTF::StringImpl *v468;
  char v469;
  __int128 v470;
  WTF::StringImpl *v471;
  char v472;

  v2 = (_BYTE *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = (uint64_t)v2;
  v446 = (WTF *)v448;
  v447 = 30;
  v8 = v2[29];
  v442 = (WTF *)v448;
  if ((v8 & 4) != 0)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 1056))(v2);
    v9 = HIDWORD(v447);
    *(_QWORD *)&v463 = v7;
    v11 = v446;
    v10 = HIDWORD(v447);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = (WTF *)v448;
  }
  *((_QWORD *)v11 + v9) = v7;
  HIDWORD(v447) = v10 + 1;
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v12 & 0xFFFFFFFFFFFFLL;
  v445 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_22;
  v14 = *(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D);
  if ((v14 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19429E8C4);
  }
  v15 = *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
  if (!*(_BYTE *)(v16 + 3405))
  {
    if ((v14 & 1) == 0
      && (*(_WORD *)(v15 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(v16 + 1944));
    }
    else
    {
      if ((v14 & 0x10) == 0 || (v17 = *(_QWORD *)(v13 + 144)) == 0 || (*(_BYTE *)(v17 + 26) & 3u) - 1 >= 2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 1944) + 24) + 8) + 40)
                                  + 8)
                      + 3382))
          goto LABEL_16;
        LOBYTE(v463) = 0;
        LOBYTE(v464) = 0;
        LOBYTE(v449) = 0;
        LOBYTE(v451) = 0;
        v18 = v13;
        v19 = 0;
        goto LABEL_15;
      }
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 1944) + 24) + 8) + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v463) = 0;
        LOBYTE(v464) = 0;
        LOBYTE(v449) = 0;
        LOBYTE(v451) = 0;
        v18 = v13;
        v19 = 1;
LABEL_15:
        WebCore::RenderObject::issueRepaint(v18, &v463, 0, v19, (uint64_t)&v449);
      }
    }
LABEL_16:
    if ((*(_BYTE *)(v13 + 21) & 0x40) != 0)
    {
      v27 = *(WTF **)(WebCore::RenderObject::rareData((WebCore::RenderObject *)v13) + 16);
      if (v27)
      {
        v28 = *(_DWORD *)v27 + 1;
        *(_DWORD *)v27 = v28;
        v29 = *((_QWORD *)v27 + 1);
        if (v29)
        {
          WebCore::RenderObject::repaint(v29, 1);
          v28 = *(_DWORD *)v27;
        }
        v30 = v28 - 1;
        if (v30)
          *(_DWORD *)v27 = v30;
        else
          WTF::fastFree(v27, v26);
      }
    }
    v20 = (WebCore::RenderObject *)WebCore::RenderObject::container((WebCore::RenderObject *)v13);
    if (v20)
    {
      v21 = v20;
      if ((*(_DWORD *)(v13 + 20) & 0x1800000) == 0x1000000)
      {
        WebCore::RenderElement::setNeedsSimplifiedNormalFlowLayout(v20);
      }
      else
      {
        v22 = *((_DWORD *)v20 + 5);
        if ((v22 & 0x20) == 0)
        {
          *((_DWORD *)v20 + 5) = v22 | 0x20;
          v25 = WebCore::RenderObject::markContainingBlocksForLayout(v20, 0);
          WebCore::RenderObject::scheduleLayout(v21, v25);
        }
        WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v21, 1, 1);
      }
    }
    else
    {
      WebCore::RenderObject::setNeedsLayout((WebCore::RenderObject *)v13, 1);
    }
LABEL_22:
    WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v463, v7);
    LOWORD(v449) = 0;
    v444 = (WTF *)&v452;
    v450 = (WTF *)&v452;
    v452 = 0;
    v453 = v455;
    v454 = 16;
    v456 = 0;
    v457 = 0;
    v458 = v460;
    v459 = 16;
    v461 = 0;
    v462 = -1;
    v451 = (WTF::StringImpl *)0x100000008;
    v24 = HIDWORD(v464);
    if (!HIDWORD(v464))
    {
LABEL_136:
      __break(0xC471u);
      JUMPOUT(0x19429EEA4);
    }
    while (1)
    {
      if (!HIDWORD(v451))
      {
        __break(0xC471u);
        JUMPOUT(0x19429EE9CLL);
      }
      v31 = *((_QWORD *)&v463 + 1) + 584 * v24 - 584;
      v32 = v450;
      v33 = *(_QWORD *)v31;
      if (*(_QWORD *)v31 == *((_QWORD *)v450 + 73 * HIDWORD(v451) - 73)
        || !*(_DWORD *)(v31 + 280) && !*((_DWORD *)v450 + 146 * HIDWORD(v451) - 76))
      {
        v53 = 0;
        v54 = 584 * HIDWORD(v451);
        do
        {
          v55 = (char *)v32 + v53;
          v56 = *(WTF **)((char *)v32 + v53 + 296);
          if ((WTF *)((char *)v32 + v53 + 312) != v56 && v56 != 0)
          {
            *((_QWORD *)v55 + 37) = 0;
            *((_DWORD *)v55 + 76) = 0;
            WTF::fastFree(v56, v23);
          }
          v58 = (WTF *)*((_QWORD *)v55 + 1);
          if (v55 + 24 != (char *)v58 && v58 != 0)
          {
            *((_QWORD *)v55 + 1) = 0;
            *(_DWORD *)((char *)v32 + v53 + 16) = 0;
            WTF::fastFree(v58, v23);
          }
          v53 += 584;
        }
        while (v54 != v53);
        v60 = v450;
        if (v444 != v450 && v450)
        {
          v450 = 0;
          LODWORD(v451) = 0;
          WTF::fastFree(v60, v23);
        }
        v61 = (WTF *)*((_QWORD *)&v463 + 1);
        if (HIDWORD(v464))
        {
          v62 = 0;
          v63 = 584 * HIDWORD(v464);
          do
          {
            v64 = (char *)v61 + v62;
            v65 = *(WTF **)((char *)v61 + v62 + 296);
            if ((WTF *)((char *)v61 + v62 + 312) != v65 && v65 != 0)
            {
              *((_QWORD *)v64 + 37) = 0;
              *((_DWORD *)v64 + 76) = 0;
              WTF::fastFree(v65, v23);
            }
            v67 = (WTF *)*((_QWORD *)v64 + 1);
            if (v64 + 24 != (char *)v67 && v67 != 0)
            {
              *((_QWORD *)v64 + 1) = 0;
              *(_DWORD *)((char *)v61 + v62 + 16) = 0;
              WTF::fastFree(v67, v23);
            }
            v62 += 584;
          }
          while (v63 != v62);
          v61 = (WTF *)*((_QWORD *)&v463 + 1);
        }
        if (v465 != (_BYTE *)v61 && v61)
        {
          *((_QWORD *)&v463 + 1) = 0;
          LODWORD(v464) = 0;
          WTF::fastFree(v61, v23);
        }
        goto LABEL_120;
      }
      if (v33)
        v34 = (*(_WORD *)(v33 + 28) & 8) == 0;
      else
        v34 = 1;
      if (!v34)
      {
        v35 = (WebCore::RenderObject *)(*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL);
        if (v35)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19429EDA8);
          }
          v36 = *(_DWORD *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
          if ((v36 & 0x200) != 0
            && ((v36 & 0x1800000) == 0x1000000 || (v36 & 0x1800800) != 0 && (!v445 || (*(_BYTE *)(v445 + 22) & 1) == 0)))
          {
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v33 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                                                                                       + 1944)
                                                                           + 24)
                                                               + 8)
                                                   + 40)
                                       + 8)
                           + 3382))
            {
              LOBYTE(v470) = 0;
              LOBYTE(v471) = 0;
              LOBYTE(v466) = 0;
              LOBYTE(v468) = 0;
              WebCore::RenderObject::issueRepaint((uint64_t)v35, &v470, 0, 0, (uint64_t)&v466);
            }
            v36 = *((_DWORD *)v35 + 5);
          }
          if ((v36 & 0x4000) != 0)
          {
            v75 = *(WTF **)(WebCore::RenderObject::rareData(v35) + 16);
            if (v75)
            {
              v76 = *(_DWORD *)v75 + 1;
              *(_DWORD *)v75 = v76;
              v77 = *((_QWORD *)v75 + 1);
              if (v77)
              {
                WebCore::RenderObject::repaint(v77, 1);
                v76 = *(_DWORD *)v75;
              }
              v78 = v76 - 1;
              if (v78)
                *(_DWORD *)v75 = v78;
              else
                WTF::fastFree(v75, v23);
            }
          }
          if ((*((_DWORD *)v35 + 5) & 0x1800000) == 0x1000000)
          {
            v49 = (WebCore::RenderObject *)WebCore::RenderObject::container(v35);
            if (v49)
            {
              v50 = v49;
              if ((*((_DWORD *)v35 + 5) & 0x1800000) == 0x1000000)
              {
                WebCore::RenderElement::setNeedsSimplifiedNormalFlowLayout(v49);
              }
              else
              {
                v51 = *((_DWORD *)v49 + 5);
                if ((v51 & 0x20) == 0)
                {
                  *((_DWORD *)v49 + 5) = v51 | 0x20;
                  v52 = WebCore::RenderObject::markContainingBlocksForLayout(v49, 0);
                  WebCore::RenderObject::scheduleLayout(v50, v52);
                }
                WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v50, 1, 1);
              }
            }
            else
            {
              WebCore::RenderObject::setNeedsLayout(v35, 1);
            }
          }
        }
      }
      if (!HIDWORD(v464))
      {
        __break(0xC471u);
        JUMPOUT(0x19429EEACLL);
      }
      v37 = *((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 584;
      v38 = *(_QWORD *)v37;
      v39 = *(_WORD *)(*(_QWORD *)v37 + 28);
      if (*(_QWORD *)v37)
        v40 = (v39 & 8) == 0;
      else
        v40 = 1;
      if (!v40 && (*(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v23 = *(void **)((*(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v23)
        {
          WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)&v463, (WebCore::ShadowRoot *)v23);
          goto LABEL_37;
        }
      }
      if (HIDWORD(v464) > 1 || (_BYTE)v463)
      {
        WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)&v463, v23);
        goto LABEL_37;
      }
      if ((v39 & 4) != 0)
      {
        v41 = *(_QWORD *)(v38 + 80);
        if (v41)
        {
          do
          {
            if ((*(_WORD *)(v41 + 28) & 0xA) != 0)
            {
              v42 = v41;
              goto LABEL_64;
            }
            v42 = 0;
            v41 = *(_QWORD *)(v41 + 56);
          }
          while (v41);
          goto LABEL_64;
        }
      }
      v42 = 0;
      v38 = *(_QWORD *)(v38 + 56);
      if (!v38)
        break;
      while ((*(_WORD *)(v38 + 28) & 0xA) == 0)
      {
LABEL_64:
        v38 = *(_QWORD *)(v38 + 56);
        if (!v38)
          goto LABEL_72;
      }
      if (v42)
      {
        v43 = (uint64_t *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 576);
        *(_QWORD *)&v470 = v38;
        DWORD2(v470) = *(_DWORD *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 304);
        v44 = *(unsigned int *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 564);
        if ((_DWORD)v44 == *(_DWORD *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 568))
        {
          v74 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v470);
          v44 = *(unsigned int *)(v37 + 20);
          v45 = *(_QWORD *)(v37 + 8);
          v46 = *v74;
        }
        else
        {
          v45 = *v43;
          v46 = v470;
        }
        *(_OWORD *)(v45 + 16 * v44) = v46;
        ++*(_DWORD *)(v37 + 20);
LABEL_70:
        ++*(_DWORD *)(v37 + 280);
        *(_QWORD *)v37 = v42;
        goto LABEL_37;
      }
      *(_QWORD *)v37 = v38;
LABEL_37:
      v24 = HIDWORD(v464);
      if (!HIDWORD(v464))
        goto LABEL_136;
    }
LABEL_72:
    if (!v42)
    {
      v47 = *(unsigned int *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 564);
      if (!(_DWORD)v47)
      {
        __break(0xC471u);
        JUMPOUT(0x19429EEB4);
      }
      v48 = *(_QWORD *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 576) + 16 * v47;
      *(_QWORD *)v37 = *(_QWORD *)(v48 - 16);
      *(_DWORD *)(v37 + 280) = *(_DWORD *)(v48 - 8);
      *(_DWORD *)(v37 + 20) = v47 - 1;
      goto LABEL_37;
    }
    goto LABEL_70;
  }
LABEL_120:
  WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v463, v7);
  LOWORD(v449) = 0;
  v443 = (WTF *)&v452;
  v450 = (WTF *)&v452;
  v452 = 0;
  v453 = v455;
  v454 = 16;
  v456 = 0;
  v457 = 0;
  v458 = v460;
  v459 = 16;
  v461 = 0;
  v462 = -1;
  v451 = (WTF::StringImpl *)0x100000008;
  v73 = HIDWORD(v464);
  if (!HIDWORD(v464))
  {
LABEL_584:
    __break(0xC471u);
    JUMPOUT(0x1942A0390);
  }
  v444 = (WTF *)((char *)&v470 + 8);
  while (1)
  {
    if (!HIDWORD(v451))
    {
      __break(0xC471u);
      JUMPOUT(0x1942A0388);
    }
    v79 = v450;
    if (*(_QWORD *)(*((_QWORD *)&v463 + 1) + 584 * v73 - 584) == *((_QWORD *)v450 + 73 * HIDWORD(v451) - 73)
      || !*(_DWORD *)(*((_QWORD *)&v463 + 1) + 584 * v73 - 304) && !*((_DWORD *)v450 + 146 * HIDWORD(v451) - 76))
    {
      break;
    }
    v80 = 0;
    v81 = 584 * v73;
    v82 = (_DWORD *)(*((_QWORD *)&v463 + 1) + 280);
    do
    {
      v80 += *v82;
      v82 += 146;
      v81 -= 584;
    }
    while (v81);
    v83 = HIDWORD(v447);
    if (HIDWORD(v447) > v80)
    {
      while (1)
      {
        v102 = *((_QWORD *)v446 + v83 - 1);
        HIDWORD(v447) = v83 - 1;
        if ((~*(unsigned __int16 *)(v102 + 28) & 0x408) != 0
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 368))(v102))
        {
          *(_QWORD *)&v470 = v102;
          BYTE8(v470) = 0;
          v472 = 0;
          goto LABEL_197;
        }
        v112 = *(_QWORD *)(v102 + 112);
        if (v112)
        {
          v113 = *(_QWORD *)(v112 + 8);
          if ((~*(unsigned __int16 *)(v102 + 28) & 0x408) != 0)
          {
LABEL_227:
            v114 = 0;
            goto LABEL_228;
          }
        }
        else
        {
          v113 = 0;
          if ((~*(unsigned __int16 *)(v102 + 28) & 0x408) != 0)
            goto LABEL_227;
        }
        v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 368))(v102);
LABEL_228:
        v115 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (!*MEMORY[0x1E0CBF2F8])
        {
          *(_QWORD *)&v470 = v113;
          DWORD2(v470) = v114;
          v471 = 0;
          v472 = 1;
LABEL_197:
          if ((*(_WORD *)(v102 + 28) & 0x10) == 0)
            goto LABEL_199;
          goto LABEL_198;
        }
        v116 = *(_DWORD *)v115;
        *(_QWORD *)&v470 = v113;
        DWORD2(v470) = v114;
        *(_DWORD *)v115 = v116 + 4;
        v471 = v115;
        v472 = 1;
        if (v116 == -2)
        {
          WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v69);
          goto LABEL_197;
        }
        *(_DWORD *)v115 = v116 + 2;
        if ((*(_WORD *)(v102 + 28) & 0x10) == 0)
          goto LABEL_199;
LABEL_198:
        if (*(_QWORD *)(*(_QWORD *)(v102 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
          goto LABEL_201;
LABEL_199:
        if ((*(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && *(_QWORD *)((*(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
        {
LABEL_201:
          for (i = *(_QWORD *)(v102 + 80); i; i = *(_QWORD *)(i + 56))
          {
            if ((*(_QWORD *)(i + 64) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v436 = *(_WORD *)(i + 28);
              if ((v436 & 2) != 0)
              {
                WebCore::RenderTreeUpdater::tearDownTextRenderer(i, v102, v4, 0, v71, v72);
              }
              else if ((v436 & 8) != 0)
              {
                WebCore::RenderTreeUpdater::tearDownRenderers(i, 0, v4);
              }
            }
          }
        }
        switch(v6)
        {
          case 0:
            v104 = v470;
            v105 = *(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL;
            if (!v105)
              goto LABEL_204;
            v125 = *(unsigned int *)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if (!(_DWORD)v125)
              goto LABEL_204;
            v136 = *(uint64_t **)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
            if (v472)
            {
              v137 = 8 * v125;
              while (1)
              {
                v138 = *v136;
                if (*(_BYTE *)(*v136 + 96))
                {
                  if (*(_DWORD *)(v138 + 80) == DWORD2(v470) && *(_QWORD *)(v138 + 88) == (_QWORD)v471)
                    break;
                }
                ++v136;
                v137 -= 8;
                if (!v137)
                  goto LABEL_347;
              }
            }
            else
            {
              v160 = 8 * v125;
              while (1)
              {
                v138 = *v136;
                if (!*(_BYTE *)(*v136 + 96))
                  break;
                ++v136;
                v160 -= 8;
                if (!v160)
                  goto LABEL_347;
              }
            }
            v161 = *(_QWORD **)(v138 + 24);
            if (!v161)
              goto LABEL_347;
            do
            {
              v188 = (_QWORD *)*v161;
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v161 + 104))(*v161))
              {
                WebCore::StyleOriginatedAnimation::cancel(v188, 0);
                WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v188);
                v466 = 0;
                if ((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v187 = *(unsigned int *)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
                  if ((_DWORD)v187)
                  {
                    v243 = *(uint64_t **)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                    if (v472)
                    {
                      v244 = 8 * v187;
                      while (1)
                      {
                        v245 = *v243;
                        if (*(_BYTE *)(*v243 + 96))
                        {
                          if (*(_DWORD *)(v245 + 80) == DWORD2(v470) && *(_QWORD *)(v245 + 88) == (_QWORD)v471)
                            break;
                        }
                        ++v243;
                        v244 -= 8;
                        if (!v244)
                          goto LABEL_406;
                      }
                    }
                    else
                    {
                      v268 = 8 * v187;
                      while (1)
                      {
                        v245 = *v243;
                        if (!*(_BYTE *)(*v243 + 96))
                          break;
                        ++v243;
                        v268 -= 8;
                        if (!v268)
                          goto LABEL_406;
                      }
                    }
                    WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v245, (const WebCore::RenderStyle **)&v466);
                    if (v466)
                    {
                      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v466, (void *)v69);
                      if (*(_DWORD *)v269)
                      {
                        *((_OWORD *)v269 + 2) = 0u;
                        *((_OWORD *)v269 + 3) = 0u;
                        *(_OWORD *)v269 = 0u;
                        *((_OWORD *)v269 + 1) = 0u;
                      }
                      else
                      {
                        WTF::fastFree(v269, (void *)v69);
                      }
                    }
                  }
                }
              }
LABEL_406:
              v161 = (_QWORD *)v161[2];
            }
            while (v161);
            v104 = v470;
            v105 = *(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL;
LABEL_347:
            if (v105)
            {
              v162 = *(unsigned int *)(v105 + 164);
              if ((_DWORD)v162)
              {
                v163 = *(uint64_t **)(v105 + 152);
                if (v472)
                {
                  v164 = 8 * v162;
                  while (1)
                  {
                    v165 = *v163;
                    if (*(_BYTE *)(*v163 + 96))
                    {
                      if (*(_DWORD *)(v165 + 80) == DWORD2(v470) && *(_QWORD *)(v165 + 88) == (_QWORD)v471)
                        break;
                    }
                    ++v163;
                    v164 -= 8;
                    if (!v164)
                      goto LABEL_363;
                  }
                }
                else
                {
                  v167 = 8 * v162;
                  while (1)
                  {
                    v165 = *v163;
                    if (!*(_BYTE *)(*v163 + 96))
                      break;
                    ++v163;
                    v167 -= 8;
                    if (!v167)
                      goto LABEL_363;
                  }
                }
                v168 = *(_QWORD *)v165;
                if (*(_QWORD *)v165)
                {
                  v466 = 0;
                  WebCore::KeyframeEffectStack::setCSSAnimationList(v168, (WTF::StringImpl *)&v466);
                  v184 = (const WebCore::RenderStyle *)v466;
                  if (v466)
                  {
                    if (*(_DWORD *)v466 == 1)
                    {
                      v234 = *((unsigned int *)v466 + 5);
                      if ((_DWORD)v234)
                      {
                        v235 = v466[1];
                        v236 = (WTF *)(8 * v234);
                        do
                        {
                          v237 = *v235;
                          *v235 = 0;
                          if (v237)
                          {
                            if (*(_DWORD *)v237 == 1)
                            {
                              v441 = (uint64_t)v236;
                              WebCore::Animation::~Animation(v237, (WTF::StringImpl *)v69);
                              WTF::fastFree(v275, v276);
                              v236 = (WTF *)v441;
                            }
                            else
                            {
                              --*(_DWORD *)v237;
                            }
                          }
                          ++v235;
                          v236 = (WTF *)((char *)v236 - 8);
                        }
                        while (v236);
                      }
                      v238 = (WTF *)*((_QWORD *)v184 + 1);
                      if (v238)
                      {
                        *((_QWORD *)v184 + 1) = 0;
                        *((_DWORD *)v184 + 4) = 0;
                        WTF::fastFree(v238, (void *)v69);
                      }
                      WTF::fastFree(v184, (void *)v69);
                    }
                    else
                    {
                      --*(_DWORD *)v466;
                    }
                  }
                  v104 = v470;
                  v105 = *(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL;
                }
LABEL_363:
                if (v105)
                {
                  v169 = *(unsigned int *)(v105 + 164);
                  if ((_DWORD)v169)
                  {
                    v170 = *(uint64_t **)(v105 + 152);
                    v171 = 8 * v169;
                    if (v472)
                    {
                      while (1)
                      {
                        v172 = *v170;
                        if (*(_BYTE *)(*v170 + 96))
                        {
                          v173 = *(_DWORD *)(v172 + 80);
                          v174 = *(WTF::StringImpl **)(v172 + 88);
                          if (v173 == DWORD2(v470) && v174 == v471)
                            break;
                        }
                        ++v170;
                        v171 -= 8;
                        if (!v171)
                          goto LABEL_204;
                      }
                    }
                    else
                    {
                      while (*(_BYTE *)(*v170 + 96))
                      {
                        ++v170;
                        v171 -= 8;
                        if (!v171)
                          goto LABEL_204;
                      }
                    }
                    v176 = (_QWORD *)WebCore::Element::ensureAnimationRareData(v104, v444);
                    v178 = v176[5];
                    v177 = (WTF *)v176[6];
                    v176[6] = 0;
                    v176[7] = 0;
                    v176[5] = 0;
                    while (v177)
                    {
                      v437 = v177;
                      v177 = (WTF *)*((_QWORD *)v177 + 2);
                      v438 = *(_DWORD **)v437;
                      v441 = (uint64_t)v437;
                      *(_QWORD *)v437 = 0;
                      if (v438)
                      {
                        if (v438[6] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v438 + 72))(v438);
                        else
                          --v438[6];
                      }
                      WTF::fastFree((WTF *)v441, (void *)v69);
                    }
                    if (v178)
                      WTF::fastFree((WTF *)(v178 - 16), (void *)v69);
                  }
                }
              }
            }
LABEL_204:
            if ((*(_BYTE *)(v102 + 54) & 2) == 0)
              goto LABEL_205;
            v193 = *(_QWORD *)(*(_QWORD *)(v102 + 40) + 8);
            v194 = *(_DWORD *)(v193 + 24);
            *(_DWORD *)(v193 + 24) = v194 + 4;
            v195 = *(_QWORD *)(v193 + 1280);
            if (!v195)
              goto LABEL_577;
            v196 = *(_DWORD *)(v195 - 8);
            v197 = (~(v102 << 32) + v102) ^ ((unint64_t)(~(v102 << 32) + v102) >> 22);
            v198 = 9 * ((v197 + ~(v197 << 13)) ^ ((v197 + ~(v197 << 13)) >> 8));
            v199 = (v198 ^ (v198 >> 15)) + ~((v198 ^ (v198 >> 15)) << 27);
            v200 = v196 & ((v199 >> 31) ^ v199);
            v201 = *(_QWORD *)(v195 + 16 * v200);
            if (v201 == v102)
            {
LABEL_428:
              v202 = (*(_BYTE *)(v195 + 16 * v200 + 8) & 4) == 0;
            }
            else
            {
              v270 = 1;
              while (v201)
              {
                v200 = ((_DWORD)v200 + v270) & v196;
                v201 = *(_QWORD *)(v195 + 16 * v200);
                ++v270;
                if (v201 == v102)
                  goto LABEL_428;
              }
LABEL_577:
              v202 = 1;
            }
            v203 = v194 + 2;
            if (v203)
            {
              *(_DWORD *)(v193 + 24) = v203;
            }
            else if ((*(_WORD *)(v193 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v193);
            }
            if (!v202)
              WebCore::Document::hoveredElementDidDetach(v193, (WebCore::Element *)v102);
            if ((*(_BYTE *)(v102 + 54) & 2) == 0)
              goto LABEL_441;
            v204 = *(_QWORD *)(*(_QWORD *)(v102 + 40) + 8);
            v205 = *(_DWORD *)(v204 + 24);
            *(_DWORD *)(v204 + 24) = v205 + 2;
            v206 = *(_QWORD *)(v204 + 1280);
            if (!v206)
              goto LABEL_576;
            v207 = *(_DWORD *)(v206 - 8);
            v208 = (~(v102 << 32) + v102) ^ ((unint64_t)(~(v102 << 32) + v102) >> 22);
            v209 = 9 * ((v208 + ~(v208 << 13)) ^ ((v208 + ~(v208 << 13)) >> 8));
            v210 = (v209 ^ (v209 >> 15)) + ~((v209 ^ (v209 >> 15)) << 27);
            v211 = v207 & ((v210 >> 31) ^ v210);
            v212 = *(_QWORD *)(v206 + 16 * v211);
            if (v212 != v102)
            {
              v271 = 1;
              do
              {
                if (!v212)
                  goto LABEL_576;
                v211 = ((_DWORD)v211 + v271) & v207;
                v212 = *(_QWORD *)(v206 + 16 * v211);
                ++v271;
              }
              while (v212 != v102);
            }
            goto LABEL_436;
          case 1:
            if (v102 != v7)
            {
              if ((*(_BYTE *)(v102 + 54) & 2) == 0)
                goto LABEL_205;
              v193 = *(_QWORD *)(*(_QWORD *)(v102 + 40) + 8);
              v214 = *(_DWORD *)(v193 + 24);
              *(_DWORD *)(v193 + 24) = v214 + 4;
              v215 = *(_QWORD *)(v193 + 1280);
              v216 = ~(v102 << 32);
              if (v215)
              {
                v217 = *(_DWORD *)(v215 - 8);
                v218 = ((v216 + v102) ^ ((unint64_t)(v216 + v102) >> 22))
                     + ~(((v216 + v102) ^ ((unint64_t)(v216 + v102) >> 22)) << 13);
                v219 = (9 * (v218 ^ (v218 >> 8))) ^ ((9 * (v218 ^ (v218 >> 8))) >> 15);
                v220 = v217 & (((v219 + ~(v219 << 27)) >> 31) ^ ((_DWORD)v219 + ~((_DWORD)v219 << 27)));
                v221 = *(_QWORD *)(v215 + 16 * v220);
                if (v221 == v102)
                {
LABEL_445:
                  v222 = (*(_BYTE *)(v215 + 16 * v220 + 8) & 4) == 0;
                  goto LABEL_446;
                }
                v277 = 1;
                while (v221)
                {
                  v220 = ((_DWORD)v220 + v277) & v217;
                  v221 = *(_QWORD *)(v215 + 16 * v220);
                  ++v277;
                  if (v221 == v102)
                    goto LABEL_445;
                }
              }
              v222 = 1;
LABEL_446:
              v223 = v214 + 2;
              if (v223)
              {
                *(_DWORD *)(v193 + 24) = v223;
              }
              else if ((*(_WORD *)(v193 + 30) & 0x400) == 0)
              {
                v441 = ~(v102 << 32);
                WebCore::Node::removedLastRef((WebCore::Node *)v193);
                v216 = v441;
              }
              if (!v222)
              {
                v283 = (WTF *)v216;
                WebCore::Document::hoveredElementDidDetach(v193, (WebCore::Element *)v102);
                v216 = (uint64_t)v283;
              }
              if ((*(_BYTE *)(v102 + 54) & 2) != 0)
              {
                v204 = *(_QWORD *)(*(_QWORD *)(v102 + 40) + 8);
                v205 = *(_DWORD *)(v204 + 24);
                *(_DWORD *)(v204 + 24) = v205 + 2;
                v206 = *(_QWORD *)(v204 + 1280);
                if (!v206)
                  goto LABEL_576;
                v224 = *(_DWORD *)(v206 - 8);
                v225 = ((v216 + v102) ^ ((unint64_t)(v216 + v102) >> 22))
                     + ~(((v216 + v102) ^ ((unint64_t)(v216 + v102) >> 22)) << 13);
                v226 = (9 * (v225 ^ (v225 >> 8))) ^ ((9 * (v225 ^ (v225 >> 8))) >> 15);
                v211 = v224 & (((v226 + ~(v226 << 27)) >> 31) ^ ((_DWORD)v226 + ~((_DWORD)v226 << 27)));
                v227 = *(_QWORD *)(v206 + 16 * v211);
                if (v227 == v102)
                {
LABEL_436:
                  v213 = (*(_BYTE *)(v206 + 16 * v211 + 8) & 2) == 0;
                }
                else
                {
                  v228 = 1;
                  while (v227)
                  {
                    v211 = ((_DWORD)v211 + v228) & v224;
                    v227 = *(_QWORD *)(v206 + 16 * v211);
                    ++v228;
                    if (v227 == v102)
                      goto LABEL_436;
                  }
LABEL_576:
                  v213 = 1;
                }
                if (v205)
                {
                  *(_DWORD *)(v204 + 24) = v205;
                }
                else if ((*(_WORD *)(v204 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v204);
                }
                if (!v213)
                  WebCore::Document::elementInActiveChainDidDetach(v193, (WebCore::Element *)v102);
              }
LABEL_441:
              WebCore::UserActionElementSet::clearFlags((uint64_t *)(v193 + 1280), v102, 7);
              if (*(_DWORD *)(v193 + 24) == 2)
              {
                if ((*(_WORD *)(v193 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v193);
              }
              else
              {
                *(_DWORD *)(v193 + 24) -= 2;
              }
              goto LABEL_205;
            }
            if ((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v123 = *(unsigned int *)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
              if ((_DWORD)v123)
              {
                v156 = *(uint64_t **)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                if (v472)
                {
                  v157 = 8 * v123;
                  while (1)
                  {
                    v158 = *v156;
                    if (*(_BYTE *)(*v156 + 96))
                    {
                      if (*(_DWORD *)(v158 + 80) == DWORD2(v470) && *(_QWORD *)(v158 + 88) == (_QWORD)v471)
                        break;
                    }
                    ++v156;
                    v157 -= 8;
                    if (!v157)
                      goto LABEL_205;
                  }
                }
                else
                {
                  v189 = 8 * v123;
                  while (1)
                  {
                    v158 = *v156;
                    if (!*(_BYTE *)(*v156 + 96))
                      break;
                    ++v156;
                    v189 -= 8;
                    if (!v189)
                      goto LABEL_205;
                  }
                }
                for (j = *(uint64_t **)(v158 + 24); j; j = (uint64_t *)j[2])
                  WebCore::WebAnimation::willChangeRenderer(*j);
              }
            }
LABEL_205:
            v106 = *(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL;
            if (v106)
            {
              v117 = *(_QWORD *)((*(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
              if (!v117
                || (WebCore::RenderTreeUpdater::tearDownRenderers(v117, 0, v4),
                    (*(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                && (WebCore::Element::clearBeforePseudoElementSlow((WebCore::Element *)v102, (WebCore::Page *)v69),
                    (v106 = *(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) != 0))
              {
                v118 = *(_QWORD *)(v106 + 176);
                if (v118)
                {
                  WebCore::RenderTreeUpdater::tearDownRenderers(v118, 0, v4);
                  if ((*(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                    WebCore::Element::clearAfterPseudoElementSlow((WebCore::Element *)v102, (WebCore::Page *)v69);
                }
              }
            }
            if (((~*(unsigned __int16 *)(v102 + 28) & 0x408) != 0
               || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 368))(v102))
              && (*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19429FA94);
              }
              if (*(_BYTE *)((*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
              {
                v107 = *(_QWORD *)((*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL) + 0xF8);
                if (v107)
                {
                  if (*(_QWORD *)(v107 + 8))
                  {
                    v127 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                    if (*MEMORY[0x1E0CBF2F8])
                      *(_DWORD *)v127 += 4;
                    v466 = (WebCore::Animation ***)v102;
                    v467 = 5;
                    v468 = v127;
                    v469 = 1;
                    WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v466);
                    if (v469)
                    {
                      v140 = v468;
                      v468 = 0;
                      if (v140)
                      {
                        if (*(_DWORD *)v140 == 2)
                          WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v69);
                        else
                          *(_DWORD *)v140 -= 2;
                      }
                    }
                    if (v127)
                    {
                      if (*(_DWORD *)v127 == 2)
                        WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v127 -= 2;
                    }
                  }
                }
              }
            }
            v108 = (WebCore::RenderObject *)(*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL);
            if (v108)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19429FA48);
              }
              if ((*(_BYTE *)((*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x40) != 0)
              {
                v279 = *(WTF **)(WebCore::RenderObject::rareData((WebCore::RenderObject *)(*(_QWORD *)(v102 + 64) & 0xFFFFFFFFFFFFLL))
                               + 16);
                if (v279)
                {
                  v280 = *(_DWORD *)v279 + 1;
                  *(_DWORD *)v279 = v280;
                  v281 = (WebCore::RenderObject *)*((_QWORD *)v279 + 1);
                  if (v281)
                  {
                    WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(v4, v281, 0, v70, v71, v72);
                    v280 = *(_DWORD *)v279;
                  }
                  v282 = v280 - 1;
                  if (v282)
                    *(_DWORD *)v279 = v282;
                  else
                    WTF::fastFree(v279, v281);
                }
              }
              v109 = *(_QWORD *)(v7 + 64);
              if ((v109 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v109 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19429FA74);
              }
              WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(v4, v108, (const WebCore::RenderElement *)(v109 & 0xFFFFFFFFFFFFLL), v70, v71, v72);
              *(_QWORD *)(v102 + 64) = (unint64_t)*(unsigned __int16 *)(v102 + 70) << 48;
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v102);
            }
            if ((*(_WORD *)(v102 + 28) & 0x400) != 0)
              (*(void (**)(uint64_t))(*(_QWORD *)v102 + 1064))(v102);
            if (v472)
            {
              v111 = v471;
              v471 = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v111 -= 2;
              }
            }
            v83 = HIDWORD(v447);
            if (HIDWORD(v447) <= v80)
            {
              v73 = HIDWORD(v464);
              goto LABEL_148;
            }
            break;
          case 2:
            if ((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_205;
            v119 = *(unsigned int *)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if (!(_DWORD)v119)
              goto LABEL_205;
            v128 = *(uint64_t **)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
            if (v472)
            {
              v129 = 8 * v119;
              while (1)
              {
                v130 = *v128;
                if (*(_BYTE *)(*v128 + 96))
                {
                  if (*(_DWORD *)(v130 + 80) == DWORD2(v470) && *(_QWORD *)(v130 + 88) == (_QWORD)v471)
                    break;
                }
                ++v128;
                v129 -= 8;
                if (!v129)
                  goto LABEL_205;
              }
            }
            else
            {
              v155 = 8 * v119;
              while (1)
              {
                v130 = *v128;
                if (!*(_BYTE *)(*v128 + 96))
                  break;
                ++v128;
                v155 -= 8;
                if (!v155)
                  goto LABEL_205;
              }
            }
            for (k = *(uint64_t **)(v130 + 24); k; k = (uint64_t *)k[2])
              WebCore::WebAnimation::willChangeRenderer(*k);
            goto LABEL_205;
          case 3:
            v120 = v470;
            v121 = *(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL;
            if (!v121)
              goto LABEL_205;
            v122 = *(unsigned int *)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if (!(_DWORD)v122)
              goto LABEL_205;
            v132 = *(uint64_t **)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
            v133 = 8 * v122;
            if (v472)
            {
              while (1)
              {
                v134 = *v132;
                if (*(_BYTE *)(*v132 + 96))
                {
                  if (*(_DWORD *)(v134 + 80) == DWORD2(v470) && *(_QWORD *)(v134 + 88) == (_QWORD)v471)
                    break;
                }
                ++v132;
                v133 -= 8;
                if (!v133)
                  goto LABEL_302;
              }
            }
            else
            {
              while (1)
              {
                v134 = *v132;
                if (!*(_BYTE *)(*v132 + 96))
                  break;
                ++v132;
                v133 -= 8;
                if (!v133)
                  goto LABEL_302;
              }
            }
            v141 = *(_QWORD **)(v134 + 24);
            if (!v141)
              goto LABEL_302;
            do
            {
              v186 = (_QWORD *)*v141;
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v141 + 104))(*v141))
              {
                WebCore::StyleOriginatedAnimation::cancel(v186, 0);
                WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v186);
                v466 = 0;
                if ((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v185 = *(unsigned int *)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
                  if ((_DWORD)v185)
                  {
                    v239 = *(uint64_t **)((*(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                    if (v472)
                    {
                      v240 = 8 * v185;
                      while (1)
                      {
                        v241 = *v239;
                        if (*(_BYTE *)(*v239 + 96))
                        {
                          if (*(_DWORD *)(v241 + 80) == DWORD2(v470) && *(_QWORD *)(v241 + 88) == (_QWORD)v471)
                            break;
                        }
                        ++v239;
                        v240 -= 8;
                        if (!v240)
                          goto LABEL_400;
                      }
                    }
                    else
                    {
                      v266 = 8 * v185;
                      while (1)
                      {
                        v241 = *v239;
                        if (!*(_BYTE *)(*v239 + 96))
                          break;
                        ++v239;
                        v266 -= 8;
                        if (!v266)
                          goto LABEL_400;
                      }
                    }
                    WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v241, (const WebCore::RenderStyle **)&v466);
                    if (v466)
                    {
                      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v466, (void *)v69);
                      if (*(_DWORD *)v267)
                      {
                        *((_OWORD *)v267 + 2) = 0u;
                        *((_OWORD *)v267 + 3) = 0u;
                        *(_OWORD *)v267 = 0u;
                        *((_OWORD *)v267 + 1) = 0u;
                      }
                      else
                      {
                        WTF::fastFree(v267, (void *)v69);
                      }
                    }
                  }
                }
              }
LABEL_400:
              v141 = (_QWORD *)v141[2];
            }
            while (v141);
            v120 = v470;
            v121 = *(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL;
LABEL_302:
            if (v121)
            {
              v142 = *(unsigned int *)(v121 + 164);
              if ((_DWORD)v142)
              {
                v143 = *(uint64_t **)(v121 + 152);
                v144 = 8 * v142;
                if (v472)
                {
                  while (1)
                  {
                    v145 = *v143;
                    if (*(_BYTE *)(*v143 + 96))
                    {
                      if (*(_DWORD *)(v145 + 80) == DWORD2(v470) && *(_QWORD *)(v145 + 88) == (_QWORD)v471)
                        break;
                    }
                    ++v143;
                    v144 -= 8;
                    if (!v144)
                      goto LABEL_316;
                  }
                }
                else
                {
                  while (1)
                  {
                    v145 = *v143;
                    if (!*(_BYTE *)(*v143 + 96))
                      break;
                    ++v143;
                    v144 -= 8;
                    if (!v144)
                      goto LABEL_316;
                  }
                }
                v147 = *(_QWORD *)v145;
                if (*(_QWORD *)v145)
                {
                  v466 = 0;
                  WebCore::KeyframeEffectStack::setCSSAnimationList(v147, (WTF::StringImpl *)&v466);
                  v183 = (const WebCore::RenderStyle *)v466;
                  if (v466)
                  {
                    if (*(_DWORD *)v466 == 1)
                    {
                      v229 = *((unsigned int *)v466 + 5);
                      if ((_DWORD)v229)
                      {
                        v230 = v466[1];
                        v231 = (WTF *)(8 * v229);
                        do
                        {
                          v232 = *v230;
                          *v230 = 0;
                          if (v232)
                          {
                            if (*(_DWORD *)v232 == 1)
                            {
                              v441 = (uint64_t)v231;
                              WebCore::Animation::~Animation(v232, (WTF::StringImpl *)v69);
                              WTF::fastFree(v273, v274);
                              v231 = (WTF *)v441;
                            }
                            else
                            {
                              --*(_DWORD *)v232;
                            }
                          }
                          ++v230;
                          v231 = (WTF *)((char *)v231 - 8);
                        }
                        while (v231);
                      }
                      v233 = (WTF *)*((_QWORD *)v183 + 1);
                      if (v233)
                      {
                        *((_QWORD *)v183 + 1) = 0;
                        *((_DWORD *)v183 + 4) = 0;
                        WTF::fastFree(v233, (void *)v69);
                      }
                      WTF::fastFree(v183, (void *)v69);
                    }
                    else
                    {
                      --*(_DWORD *)v466;
                    }
                  }
                  v120 = v470;
                  v121 = *(_QWORD *)(v470 + 72) & 0xFFFFFFFFFFFFLL;
                }
LABEL_316:
                if (v121)
                {
                  v148 = *(unsigned int *)(v121 + 164);
                  if ((_DWORD)v148)
                  {
                    v149 = *(uint64_t **)(v121 + 152);
                    if (v472)
                    {
                      v150 = 8 * v148;
                      while (1)
                      {
                        v151 = *v149;
                        if (*(_BYTE *)(*v149 + 96))
                        {
                          v152 = *(_DWORD *)(v151 + 80);
                          v153 = *(WTF::StringImpl **)(v151 + 88);
                          if (v152 == DWORD2(v470) && v153 == v471)
                            break;
                        }
                        ++v149;
                        v150 -= 8;
                        if (!v150)
                          goto LABEL_205;
                      }
                    }
                    else
                    {
                      v179 = 8 * v148;
                      while (*(_BYTE *)(*v149 + 96))
                      {
                        ++v149;
                        v179 -= 8;
                        if (!v179)
                          goto LABEL_205;
                      }
                    }
                    v180 = (_QWORD *)WebCore::Element::ensureAnimationRareData(v120, v444);
                    v182 = v180[5];
                    v181 = (WTF *)v180[6];
                    v180[6] = 0;
                    v180[7] = 0;
                    v180[5] = 0;
                    while (v181)
                    {
                      v439 = v181;
                      v181 = (WTF *)*((_QWORD *)v181 + 2);
                      v440 = *(_DWORD **)v439;
                      v441 = (uint64_t)v439;
                      *(_QWORD *)v439 = 0;
                      if (v440)
                      {
                        if (v440[6] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v440 + 72))(v440);
                        else
                          --v440[6];
                      }
                      WTF::fastFree((WTF *)v441, (void *)v69);
                    }
                    if (v182)
                      WTF::fastFree((WTF *)(v182 - 16), (void *)v69);
                  }
                }
              }
            }
            goto LABEL_205;
          default:
            goto LABEL_205;
        }
      }
    }
LABEL_148:
    if (!v73)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A03A0);
    }
    v84 = *(WebCore::Node **)(*((_QWORD *)&v463 + 1) + 584 * v73 - 584);
    v85 = *((_WORD *)v84 + 14);
    if (v84)
      v86 = (v85 & 2) == 0;
    else
      v86 = 1;
    if (v86)
    {
      if ((v85 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A00FCLL);
      }
      if ((*((_WORD *)v84 + 14) & 0x400) != 0)
      {
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v84 + 1056))(v84);
        v83 = HIDWORD(v447);
      }
      *(_QWORD *)&v470 = v84;
      if (v83 == (_DWORD)v447)
      {
        v272 = (_QWORD *)WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v446, v83 + 1, (unint64_t)&v470);
        v83 = HIDWORD(v447);
        *((_QWORD *)v446 + HIDWORD(v447)) = *v272;
      }
      else
      {
        *((_QWORD *)v446 + v83) = v84;
      }
      HIDWORD(v447) = v83 + 1;
    }
    else
    {
      v97 = (WebCore::RenderObject *)(*((_QWORD *)v84 + 8) & 0xFFFFFFFFFFFFLL);
      if (v97)
      {
        if ((*(_BYTE *)((*((_QWORD *)v84 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A01E8);
        }
        if (!v445)
        {
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v84 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v470) = 0;
            LOBYTE(v471) = 0;
            LOBYTE(v466) = 0;
            LOBYTE(v468) = 0;
            WebCore::RenderObject::issueRepaint((uint64_t)v97, &v470, 0, 0, (uint64_t)&v466);
          }
          v190 = *((_QWORD *)v97 + 4);
          if (v190)
          {
            v191 = *(WebCore::RenderObject **)(v190 + 8);
            if (v191)
            {
              v192 = *((_DWORD *)v191 + 5);
              if ((v192 & 0x20) == 0)
              {
                *((_DWORD *)v191 + 5) = v192 | 0x20;
                v247 = WebCore::RenderObject::markContainingBlocksForLayout(v191, 0);
                WebCore::RenderObject::scheduleLayout(v191, v247);
              }
              WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v191, 1, 1);
            }
          }
        }
        v98 = *(_QWORD *)(v7 + 64);
        if ((v98 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v98 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A0234);
        }
        WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(v4, v97, (const WebCore::RenderElement *)(v98 & 0xFFFFFFFFFFFFLL), v70, v71, v72);
        *((_QWORD *)v84 + 8) = (unint64_t)*((unsigned __int16 *)v84 + 35) << 48;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          WebCore::Node::notifyInspectorOfRendererChange(v84);
      }
    }
    if (!HIDWORD(v464))
    {
      __break(0xC471u);
      JUMPOUT(0x1942A0398);
    }
    v87 = *((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 584;
    v88 = *(_QWORD *)v87;
    v89 = *(_WORD *)(*(_QWORD *)v87 + 28);
    if (*(_QWORD *)v87)
      v90 = (v89 & 8) == 0;
    else
      v90 = 1;
    if (!v90 && (*(_QWORD *)(v88 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v69 = *(_QWORD *)((*(_QWORD *)(v88 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v69)
      {
        WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)&v463, (WebCore::ShadowRoot *)v69);
        goto LABEL_141;
      }
    }
    if (HIDWORD(v464) > 1 || (_BYTE)v463)
    {
      WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)&v463, (void *)v69);
      goto LABEL_141;
    }
    if ((v89 & 4) != 0)
    {
      v91 = *(_QWORD *)(v88 + 80);
      if (v91)
      {
        do
        {
          if ((*(_WORD *)(v91 + 28) & 0xA) != 0)
          {
            v92 = v91;
            goto LABEL_172;
          }
          v92 = 0;
          v91 = *(_QWORD *)(v91 + 56);
        }
        while (v91);
        goto LABEL_172;
      }
    }
    v92 = 0;
    v88 = *(_QWORD *)(v88 + 56);
    if (v88)
    {
      while ((*(_WORD *)(v88 + 28) & 0xA) == 0)
      {
LABEL_172:
        v88 = *(_QWORD *)(v88 + 56);
        if (!v88)
          goto LABEL_139;
      }
      if (!v92)
      {
        *(_QWORD *)v87 = v88;
        goto LABEL_141;
      }
      v93 = (uint64_t *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 576);
      *(_QWORD *)&v470 = v88;
      DWORD2(v470) = *(_DWORD *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 304);
      v94 = *(unsigned int *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 564);
      if ((_DWORD)v94 == *(_DWORD *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 568))
      {
        v278 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v470);
        v94 = *(unsigned int *)(v87 + 20);
        v95 = *(_QWORD *)(v87 + 8);
        v96 = *v278;
      }
      else
      {
        v95 = *v93;
        v96 = v470;
      }
      *(_OWORD *)(v95 + 16 * v94) = v96;
      ++*(_DWORD *)(v87 + 20);
    }
    else
    {
LABEL_139:
      if (!v92)
      {
        v100 = *(unsigned int *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 564);
        if (!(_DWORD)v100)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A03A8);
        }
        v101 = *(_QWORD *)(*((_QWORD *)&v463 + 1) + 584 * HIDWORD(v464) - 576) + 16 * v100;
        *(_QWORD *)v87 = *(_QWORD *)(v101 - 16);
        *(_DWORD *)(v87 + 280) = *(_DWORD *)(v101 - 8);
        *(_DWORD *)(v87 + 20) = v100 - 1;
        goto LABEL_141;
      }
    }
    ++*(_DWORD *)(v87 + 280);
    *(_QWORD *)v87 = v92;
LABEL_141:
    v73 = HIDWORD(v464);
    if (!HIDWORD(v464))
      goto LABEL_584;
  }
  v248 = 0;
  v249 = 584 * HIDWORD(v451);
  do
  {
    v250 = (char *)v79 + v248;
    v251 = *(WTF **)((char *)v79 + v248 + 296);
    if ((WTF *)((char *)v79 + v248 + 312) != v251 && v251 != 0)
    {
      *((_QWORD *)v250 + 37) = 0;
      *((_DWORD *)v250 + 76) = 0;
      WTF::fastFree(v251, (void *)v69);
    }
    v253 = (WTF *)*((_QWORD *)v250 + 1);
    if (v250 + 24 != (char *)v253 && v253 != 0)
    {
      *((_QWORD *)v250 + 1) = 0;
      *(_DWORD *)((char *)v79 + v248 + 16) = 0;
      WTF::fastFree(v253, (void *)v69);
    }
    v248 += 584;
  }
  while (v249 != v248);
  v255 = v450;
  if (v443 != v450 && v450)
  {
    v450 = 0;
    LODWORD(v451) = 0;
    WTF::fastFree(v255, (void *)v69);
  }
  v256 = (WTF *)*((_QWORD *)&v463 + 1);
  if (HIDWORD(v464))
  {
    v257 = 0;
    v258 = 584 * HIDWORD(v464);
    do
    {
      v259 = (char *)v256 + v257;
      v260 = *(WTF **)((char *)v256 + v257 + 296);
      if ((WTF *)((char *)v256 + v257 + 312) != v260 && v260 != 0)
      {
        *((_QWORD *)v259 + 37) = 0;
        *((_DWORD *)v259 + 76) = 0;
        WTF::fastFree(v260, (void *)v69);
      }
      v262 = (WTF *)*((_QWORD *)v259 + 1);
      if (v259 + 24 != (char *)v262 && v262 != 0)
      {
        *((_QWORD *)v259 + 1) = 0;
        *(_DWORD *)((char *)v256 + v257 + 16) = 0;
        WTF::fastFree(v262, (void *)v69);
      }
      v257 += 584;
    }
    while (v258 != v257);
    v256 = (WTF *)*((_QWORD *)&v463 + 1);
  }
  if (v465 != (_BYTE *)v256 && v256)
  {
    *((_QWORD *)&v463 + 1) = 0;
    LODWORD(v464) = 0;
    WTF::fastFree(v256, (void *)v69);
  }
  v264 = HIDWORD(v447);
  if (HIDWORD(v447))
  {
    v265 = (char *)&v463 + 8;
    while (1)
    {
      v284 = *((_QWORD *)v446 + v264 - 1);
      HIDWORD(v447) = v264 - 1;
      if ((~*(unsigned __int16 *)(v284 + 28) & 0x408) != 0
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v284 + 368))(v284))
      {
        *(_QWORD *)&v463 = v284;
        BYTE8(v463) = 0;
        v465[0] = 0;
      }
      else
      {
        v294 = *(_QWORD *)(v284 + 112);
        if (v294)
          v295 = *(_QWORD *)(v294 + 8);
        else
          v295 = 0;
        if ((~*(unsigned __int16 *)(v284 + 28) & 0x408) != 0)
          v296 = 0;
        else
          v296 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v284 + 368))(v284);
        v297 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
        {
          v298 = *(_DWORD *)v297;
          *(_QWORD *)&v463 = v295;
          DWORD2(v463) = v296;
          *(_DWORD *)v297 = v298 + 4;
          v464 = v297;
          v465[0] = 1;
          if (v298 == -2)
            WTF::StringImpl::destroy(v297, (WTF::StringImpl *)v69);
          else
            *(_DWORD *)v297 = v298 + 2;
        }
        else
        {
          *(_QWORD *)&v463 = v295;
          DWORD2(v463) = v296;
          v464 = 0;
          v465[0] = 1;
        }
      }
      if ((*(_WORD *)(v284 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v284 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24)
        || (*(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && *(_QWORD *)((*(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
      {
        for (m = *(_QWORD *)(v284 + 80); m; m = *(_QWORD *)(m + 56))
        {
          if ((*(_QWORD *)(m + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v415 = *(_WORD *)(m + 28);
            if ((v415 & 2) != 0)
            {
              WebCore::RenderTreeUpdater::tearDownTextRenderer(m, v284, v4, 0, v71, v72);
            }
            else if ((v415 & 8) != 0)
            {
              WebCore::RenderTreeUpdater::tearDownRenderers(m, 0, v4);
            }
          }
        }
      }
      switch(v6)
      {
        case 0:
          v286 = v463;
          v287 = *(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL;
          if (v287)
          {
            v307 = *(unsigned int *)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if ((_DWORD)v307)
            {
              v445 = (uint64_t)v265;
              v321 = *(uint64_t **)(v287 + 152);
              v322 = 8 * v307;
              if (v465[0])
              {
                while (1)
                {
                  v323 = *v321;
                  if (*(_BYTE *)(*v321 + 96))
                  {
                    if (*(_DWORD *)(v323 + 80) == DWORD2(v463) && *(_QWORD *)(v323 + 88) == (_QWORD)v464)
                      break;
                  }
                  ++v321;
                  v322 -= 8;
                  if (!v322)
                    goto LABEL_715;
                }
              }
              else
              {
                while (1)
                {
                  v323 = *v321;
                  if (!*(_BYTE *)(*v321 + 96))
                    break;
                  ++v321;
                  v322 -= 8;
                  if (!v322)
                    goto LABEL_715;
                }
              }
              v332 = *(_QWORD **)(v323 + 24);
              if (v332)
              {
                do
                {
                  v417 = (_QWORD *)*v332;
                  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v332 + 104))(*v332))
                  {
                    WebCore::StyleOriginatedAnimation::cancel(v417, 0);
                    WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v417);
                    v449 = 0;
                    if ((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v416 = *(unsigned int *)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
                      if ((_DWORD)v416)
                      {
                        v418 = *(uint64_t **)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                        if (v465[0])
                        {
                          v419 = 8 * v416;
                          while (1)
                          {
                            v420 = *v418;
                            if (*(_BYTE *)(*v418 + 96))
                            {
                              if (*(_DWORD *)(v420 + 80) == DWORD2(v463) && *(_QWORD *)(v420 + 88) == (_QWORD)v464)
                                break;
                            }
                            ++v418;
                            v419 -= 8;
                            if (!v419)
                              goto LABEL_890;
                          }
                        }
                        else
                        {
                          v422 = 8 * v416;
                          while (1)
                          {
                            v420 = *v418;
                            if (!*(_BYTE *)(*v418 + 96))
                              break;
                            ++v418;
                            v422 -= 8;
                            if (!v422)
                              goto LABEL_890;
                          }
                        }
                        WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v420, &v449);
                        if (v449)
                        {
                          WebCore::RenderStyle::~RenderStyle(v449, (void *)v69);
                          if (*(_DWORD *)v423)
                          {
                            *((_OWORD *)v423 + 2) = 0u;
                            *((_OWORD *)v423 + 3) = 0u;
                            *(_OWORD *)v423 = 0u;
                            *((_OWORD *)v423 + 1) = 0u;
                          }
                          else
                          {
                            WTF::fastFree(v423, (void *)v69);
                          }
                        }
                      }
                    }
                  }
LABEL_890:
                  v332 = (_QWORD *)v332[2];
                }
                while (v332);
                v286 = v463;
                v287 = *(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL;
              }
LABEL_715:
              v265 = (char *)v445;
              if (v287)
              {
                v333 = *(unsigned int *)(v287 + 164);
                if ((_DWORD)v333)
                {
                  v334 = *(uint64_t **)(v287 + 152);
                  if (v465[0])
                  {
                    v335 = 8 * v333;
                    while (1)
                    {
                      v336 = *v334;
                      if (*(_BYTE *)(*v334 + 96))
                      {
                        if (*(_DWORD *)(v336 + 80) == DWORD2(v463) && *(_QWORD *)(v336 + 88) == (_QWORD)v464)
                          break;
                      }
                      ++v334;
                      v335 -= 8;
                      if (!v335)
                        goto LABEL_761;
                    }
                  }
                  else
                  {
                    v351 = 8 * v333;
                    while (1)
                    {
                      v336 = *v334;
                      if (!*(_BYTE *)(*v334 + 96))
                        break;
                      ++v334;
                      v351 -= 8;
                      if (!v351)
                        goto LABEL_761;
                    }
                  }
                  v352 = *(_QWORD *)v336;
                  if (*(_QWORD *)v336)
                  {
                    v449 = 0;
                    WebCore::KeyframeEffectStack::setCSSAnimationList(v352, (WTF::StringImpl *)&v449);
                    v368 = v449;
                    if (v449)
                    {
                      if (*(_DWORD *)v449 == 1)
                      {
                        v397 = *((unsigned int *)v449 + 5);
                        if ((_DWORD)v397)
                        {
                          v398 = (WebCore::Animation **)*((_QWORD *)v449 + 1);
                          v399 = 8 * v397;
                          do
                          {
                            v400 = *v398;
                            *v398 = 0;
                            if (v400)
                            {
                              if (*(_DWORD *)v400 == 1)
                              {
                                WebCore::Animation::~Animation(v400, (WTF::StringImpl *)v69);
                                WTF::fastFree(v406, v407);
                              }
                              else
                              {
                                --*(_DWORD *)v400;
                              }
                            }
                            ++v398;
                            v399 -= 8;
                          }
                          while (v399);
                        }
                        v401 = (WTF *)*((_QWORD *)v368 + 1);
                        if (v401)
                        {
                          *((_QWORD *)v368 + 1) = 0;
                          *((_DWORD *)v368 + 4) = 0;
                          WTF::fastFree(v401, (void *)v69);
                        }
                        WTF::fastFree(v368, (void *)v69);
                        v265 = (char *)v445;
                      }
                      else
                      {
                        --*(_DWORD *)v449;
                      }
                    }
                    v286 = v463;
                    v287 = *(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL;
                  }
LABEL_761:
                  if (v287)
                  {
                    v353 = *(unsigned int *)(v287 + 164);
                    if ((_DWORD)v353)
                    {
                      v354 = *(uint64_t **)(v287 + 152);
                      v355 = 8 * v353;
                      if (v465[0])
                      {
                        while (1)
                        {
                          v356 = *v354;
                          if (*(_BYTE *)(*v354 + 96))
                          {
                            v357 = *(_DWORD *)(v356 + 80);
                            v358 = *(WTF::StringImpl **)(v356 + 88);
                            if (v357 == DWORD2(v463) && v358 == v464)
                              break;
                          }
                          ++v354;
                          v355 -= 8;
                          if (!v355)
                            goto LABEL_599;
                        }
                      }
                      else
                      {
                        while (*(_BYTE *)(*v354 + 96))
                        {
                          ++v354;
                          v355 -= 8;
                          if (!v355)
                            goto LABEL_599;
                        }
                      }
                      v360 = (_QWORD *)WebCore::Element::ensureAnimationRareData(v286, v265);
                      v361 = v360[5];
                      v362 = (WTF *)v360[6];
                      v360[6] = 0;
                      v360[7] = 0;
                      v360[5] = 0;
                      while (v362)
                      {
                        v424 = v362;
                        v362 = (WTF *)*((_QWORD *)v362 + 2);
                        v425 = *(_DWORD **)v424;
                        *(_QWORD *)v424 = 0;
                        if (v425)
                        {
                          if (v425[6] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v425 + 72))(v425);
                          else
                            --v425[6];
                        }
                        WTF::fastFree(v424, (void *)v69);
                      }
                      v265 = (char *)v445;
                      if (v361)
                        WTF::fastFree((WTF *)(v361 - 16), (void *)v69);
                    }
                  }
                }
              }
            }
          }
LABEL_599:
          if ((*(_BYTE *)(v284 + 54) & 2) == 0)
            goto LABEL_600;
          v370 = *(_QWORD *)(*(_QWORD *)(v284 + 40) + 8);
          v371 = *(_DWORD *)(v370 + 24);
          *(_DWORD *)(v370 + 24) = v371 + 4;
          v372 = *(_QWORD *)(v370 + 1280);
          if (!v372)
            goto LABEL_875;
          v373 = *(_DWORD *)(v372 - 8);
          v374 = (~(v284 << 32) + v284) ^ ((unint64_t)(~(v284 << 32) + v284) >> 22);
          v375 = 9 * ((v374 + ~(v374 << 13)) ^ ((v374 + ~(v374 << 13)) >> 8));
          v376 = (v375 ^ (v375 >> 15)) + ~((v375 ^ (v375 >> 15)) << 27);
          v377 = v373 & ((v376 >> 31) ^ v376);
          v378 = *(_QWORD *)(v372 + 16 * v377);
          if (v378 == v284)
          {
LABEL_807:
            v379 = (*(_BYTE *)(v372 + 16 * v377 + 8) & 4) == 0;
          }
          else
          {
            v402 = 1;
            while (v378)
            {
              v377 = ((_DWORD)v377 + v402) & v373;
              v378 = *(_QWORD *)(v372 + 16 * v377);
              ++v402;
              if (v378 == v284)
                goto LABEL_807;
            }
LABEL_875:
            v379 = 1;
          }
          v380 = v371 + 2;
          if (v380)
          {
            *(_DWORD *)(v370 + 24) = v380;
          }
          else if ((*(_WORD *)(v370 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v370);
          }
          if (!v379)
            WebCore::Document::hoveredElementDidDetach(v370, (WebCore::Element *)v284);
          if ((*(_BYTE *)(v284 + 54) & 2) == 0)
            goto LABEL_820;
          v381 = *(_QWORD *)(*(_QWORD *)(v284 + 40) + 8);
          v382 = *(_DWORD *)(v381 + 24);
          *(_DWORD *)(v381 + 24) = v382 + 2;
          v383 = *(_QWORD *)(v381 + 1280);
          if (!v383)
            goto LABEL_876;
          v384 = *(_DWORD *)(v383 - 8);
          v385 = (~(v284 << 32) + v284) ^ ((unint64_t)(~(v284 << 32) + v284) >> 22);
          v386 = 9 * ((v385 + ~(v385 << 13)) ^ ((v385 + ~(v385 << 13)) >> 8));
          v387 = (v386 ^ (v386 >> 15)) + ~((v386 ^ (v386 >> 15)) << 27);
          v388 = v384 & ((v387 >> 31) ^ v387);
          v389 = *(_QWORD *)(v383 + 16 * v388);
          if (v389 == v284)
          {
LABEL_815:
            v390 = (*(_BYTE *)(v383 + 16 * v388 + 8) & 2) == 0;
          }
          else
          {
            v403 = 1;
            while (v389)
            {
              v388 = ((_DWORD)v388 + v403) & v384;
              v389 = *(_QWORD *)(v383 + 16 * v388);
              ++v403;
              if (v389 == v284)
                goto LABEL_815;
            }
LABEL_876:
            v390 = 1;
          }
          if (v382)
          {
            *(_DWORD *)(v381 + 24) = v382;
          }
          else if ((*(_WORD *)(v381 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v381);
          }
          if (!v390)
            WebCore::Document::elementInActiveChainDidDetach(v370, (WebCore::Element *)v284);
LABEL_820:
          WebCore::UserActionElementSet::clearFlags((uint64_t *)(v370 + 1280), v284, 7);
          if (*(_DWORD *)(v370 + 24) == 2)
          {
            if ((*(_WORD *)(v370 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v370);
          }
          else
          {
            *(_DWORD *)(v370 + 24) -= 2;
          }
LABEL_600:
          v288 = *(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL;
          if (v288)
          {
            v299 = *(_QWORD *)((*(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
            if (!v299
              || (WebCore::RenderTreeUpdater::tearDownRenderers(v299, 0, v4),
                  (*(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) != 0)
              && (WebCore::Element::clearBeforePseudoElementSlow((WebCore::Element *)v284, (WebCore::Page *)v69),
                  (v288 = *(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) != 0))
            {
              v300 = *(_QWORD *)(v288 + 176);
              if (v300)
              {
                WebCore::RenderTreeUpdater::tearDownRenderers(v300, 0, v4);
                if ((*(_QWORD *)(v284 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                  WebCore::Element::clearAfterPseudoElementSlow((WebCore::Element *)v284, (WebCore::Page *)v69);
              }
            }
          }
          if (((~*(unsigned __int16 *)(v284 + 28) & 0x408) != 0
             || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v284 + 368))(v284))
            && (*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942A0CE8);
            }
            if (*(_BYTE *)((*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
            {
              v289 = *(_QWORD *)((*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL) + 0xF8);
              if (v289)
              {
                if (*(_QWORD *)(v289 + 8))
                {
                  v309 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                  if (*MEMORY[0x1E0CBF2F8])
                    *(_DWORD *)v309 += 4;
                  v449 = (WTF *)v284;
                  LODWORD(v450) = 5;
                  v451 = v309;
                  LOBYTE(v452) = 1;
                  WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v449);
                  if ((_BYTE)v452)
                  {
                    v325 = v451;
                    v451 = 0;
                    if (v325)
                    {
                      if (*(_DWORD *)v325 == 2)
                        WTF::StringImpl::destroy(v325, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v325 -= 2;
                    }
                  }
                  if (v309)
                  {
                    if (*(_DWORD *)v309 == 2)
                      WTF::StringImpl::destroy(v309, (WTF::StringImpl *)v69);
                    else
                      *(_DWORD *)v309 -= 2;
                  }
                }
              }
            }
          }
          v290 = (WebCore::RenderObject *)(*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL);
          if (v290)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942A0C9CLL);
            }
            if ((*(_BYTE *)((*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x40) != 0)
            {
              v408 = *(WTF **)(WebCore::RenderObject::rareData((WebCore::RenderObject *)(*(_QWORD *)(v284 + 64) & 0xFFFFFFFFFFFFLL))
                             + 16);
              if (v408)
              {
                v409 = *(_DWORD *)v408 + 1;
                *(_DWORD *)v408 = v409;
                v410 = (WebCore::RenderObject *)*((_QWORD *)v408 + 1);
                if (v410)
                {
                  WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(v4, v410, 0, v70, v71, v72);
                  v409 = *(_DWORD *)v408;
                }
                v411 = v409 - 1;
                if (v411)
                  *(_DWORD *)v408 = v411;
                else
                  WTF::fastFree(v408, v410);
              }
            }
            v291 = *(_QWORD *)(v7 + 64);
            if ((v291 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v291 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942A0CC8);
            }
            WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(v4, v290, (const WebCore::RenderElement *)(v291 & 0xFFFFFFFFFFFFLL), v70, v71, v72);
            *(_QWORD *)(v284 + 64) = (unint64_t)*(unsigned __int16 *)(v284 + 70) << 48;
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v284);
          }
          if ((*(_WORD *)(v284 + 28) & 0x400) != 0)
            (*(void (**)(uint64_t))(*(_QWORD *)v284 + 1064))(v284);
          if (v465[0])
          {
            v293 = v464;
            v464 = 0;
            if (v293)
            {
              if (*(_DWORD *)v293 == 2)
                WTF::StringImpl::destroy(v293, (WTF::StringImpl *)v69);
              else
                *(_DWORD *)v293 -= 2;
            }
          }
          v264 = HIDWORD(v447);
          if (!HIDWORD(v447))
            goto LABEL_662;
          break;
        case 1:
          if (v284 == v7)
          {
            if ((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v305 = *(unsigned int *)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
              if ((_DWORD)v305)
              {
                v346 = *(uint64_t **)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                if (v465[0])
                {
                  v347 = 8 * v305;
                  while (1)
                  {
                    v348 = *v346;
                    if (*(_BYTE *)(*v346 + 96))
                    {
                      if (*(_DWORD *)(v348 + 80) == DWORD2(v463) && *(_QWORD *)(v348 + 88) == (_QWORD)v464)
                        break;
                    }
                    ++v346;
                    v347 -= 8;
                    if (!v347)
                      goto LABEL_600;
                  }
                }
                else
                {
                  v369 = 8 * v305;
                  while (1)
                  {
                    v348 = *v346;
                    if (!*(_BYTE *)(*v346 + 96))
                      break;
                    ++v346;
                    v369 -= 8;
                    if (!v369)
                      goto LABEL_600;
                  }
                }
                for (n = *(uint64_t **)(v348 + 24); n; n = (uint64_t *)n[2])
                  WebCore::WebAnimation::willChangeRenderer(*n);
              }
            }
          }
          else
          {
            WebCore::Element::clearHoverAndActiveStatusBeforeDetachingRenderer(v284);
          }
          goto LABEL_600;
        case 2:
          if ((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v301 = *(unsigned int *)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if ((_DWORD)v301)
            {
              v313 = *(uint64_t **)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
              if (v465[0])
              {
                v314 = 8 * v301;
                while (1)
                {
                  v315 = *v313;
                  if (*(_BYTE *)(*v313 + 96))
                  {
                    if (*(_DWORD *)(v315 + 80) == DWORD2(v463) && *(_QWORD *)(v315 + 88) == (_QWORD)v464)
                      break;
                  }
                  ++v313;
                  v314 -= 8;
                  if (!v314)
                    goto LABEL_600;
                }
              }
              else
              {
                v350 = 8 * v301;
                while (1)
                {
                  v315 = *v313;
                  if (!*(_BYTE *)(*v313 + 96))
                    break;
                  ++v313;
                  v350 -= 8;
                  if (!v350)
                    goto LABEL_600;
                }
              }
              for (ii = *(uint64_t **)(v315 + 24); ii; ii = (uint64_t *)ii[2])
                WebCore::WebAnimation::willChangeRenderer(*ii);
            }
          }
          goto LABEL_600;
        case 3:
          v302 = v463;
          v303 = *(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL;
          if (v303)
          {
            v304 = *(unsigned int *)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if ((_DWORD)v304)
            {
              v445 = (uint64_t)v265;
              v317 = *(uint64_t **)(v303 + 152);
              v318 = 8 * v304;
              if (v465[0])
              {
                while (1)
                {
                  v319 = *v317;
                  if (*(_BYTE *)(*v317 + 96))
                  {
                    if (*(_DWORD *)(v319 + 80) == DWORD2(v463) && *(_QWORD *)(v319 + 88) == (_QWORD)v464)
                      break;
                  }
                  ++v317;
                  v318 -= 8;
                  if (!v318)
                    goto LABEL_701;
                }
              }
              else
              {
                while (1)
                {
                  v319 = *v317;
                  if (!*(_BYTE *)(*v317 + 96))
                    break;
                  ++v317;
                  v318 -= 8;
                  if (!v318)
                    goto LABEL_701;
                }
              }
              v326 = *(_QWORD **)(v319 + 24);
              if (v326)
              {
                do
                {
                  v427 = (_QWORD *)*v326;
                  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v326 + 104))(*v326))
                  {
                    WebCore::StyleOriginatedAnimation::cancel(v427, 0);
                    WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v427);
                    v449 = 0;
                    if ((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v426 = *(unsigned int *)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
                      if ((_DWORD)v426)
                      {
                        v428 = *(uint64_t **)((*(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                        if (v465[0])
                        {
                          v429 = 8 * v426;
                          while (1)
                          {
                            v430 = *v428;
                            if (*(_BYTE *)(*v428 + 96))
                            {
                              if (*(_DWORD *)(v430 + 80) == DWORD2(v463) && *(_QWORD *)(v430 + 88) == (_QWORD)v464)
                                break;
                            }
                            ++v428;
                            v429 -= 8;
                            if (!v429)
                              goto LABEL_919;
                          }
                        }
                        else
                        {
                          v432 = 8 * v426;
                          while (1)
                          {
                            v430 = *v428;
                            if (!*(_BYTE *)(*v428 + 96))
                              break;
                            ++v428;
                            v432 -= 8;
                            if (!v432)
                              goto LABEL_919;
                          }
                        }
                        WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v430, &v449);
                        if (v449)
                        {
                          WebCore::RenderStyle::~RenderStyle(v449, (void *)v69);
                          if (*(_DWORD *)v433)
                          {
                            *((_OWORD *)v433 + 2) = 0u;
                            *((_OWORD *)v433 + 3) = 0u;
                            *(_OWORD *)v433 = 0u;
                            *((_OWORD *)v433 + 1) = 0u;
                          }
                          else
                          {
                            WTF::fastFree(v433, (void *)v69);
                          }
                        }
                      }
                    }
                  }
LABEL_919:
                  v326 = (_QWORD *)v326[2];
                }
                while (v326);
                v302 = v463;
                v303 = *(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL;
              }
LABEL_701:
              v265 = (char *)v445;
              if (v303)
              {
                v327 = *(unsigned int *)(v303 + 164);
                if ((_DWORD)v327)
                {
                  v328 = *(uint64_t **)(v303 + 152);
                  v329 = 8 * v327;
                  if (v465[0])
                  {
                    while (1)
                    {
                      v330 = *v328;
                      if (*(_BYTE *)(*v328 + 96))
                      {
                        if (*(_DWORD *)(v330 + 80) == DWORD2(v463) && *(_QWORD *)(v330 + 88) == (_QWORD)v464)
                          break;
                      }
                      ++v328;
                      v329 -= 8;
                      if (!v329)
                        goto LABEL_730;
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      v330 = *v328;
                      if (!*(_BYTE *)(*v328 + 96))
                        break;
                      ++v328;
                      v329 -= 8;
                      if (!v329)
                        goto LABEL_730;
                    }
                  }
                  v338 = *(_QWORD *)v330;
                  if (*(_QWORD *)v330)
                  {
                    v449 = 0;
                    WebCore::KeyframeEffectStack::setCSSAnimationList(v338, (WTF::StringImpl *)&v449);
                    v367 = v449;
                    if (v449)
                    {
                      if (*(_DWORD *)v449 == 1)
                      {
                        v392 = *((unsigned int *)v449 + 5);
                        if ((_DWORD)v392)
                        {
                          v393 = (WebCore::Animation **)*((_QWORD *)v449 + 1);
                          v394 = 8 * v392;
                          do
                          {
                            v395 = *v393;
                            *v393 = 0;
                            if (v395)
                            {
                              if (*(_DWORD *)v395 == 1)
                              {
                                WebCore::Animation::~Animation(v395, (WTF::StringImpl *)v69);
                                WTF::fastFree(v404, v405);
                              }
                              else
                              {
                                --*(_DWORD *)v395;
                              }
                            }
                            ++v393;
                            v394 -= 8;
                          }
                          while (v394);
                        }
                        v396 = (WTF *)*((_QWORD *)v367 + 1);
                        if (v396)
                        {
                          *((_QWORD *)v367 + 1) = 0;
                          *((_DWORD *)v367 + 4) = 0;
                          WTF::fastFree(v396, (void *)v69);
                        }
                        WTF::fastFree(v367, (void *)v69);
                        v265 = (char *)v445;
                      }
                      else
                      {
                        --*(_DWORD *)v449;
                      }
                    }
                    v302 = v463;
                    v303 = *(_QWORD *)(v463 + 72) & 0xFFFFFFFFFFFFLL;
                  }
LABEL_730:
                  if (v303)
                  {
                    v339 = *(unsigned int *)(v303 + 164);
                    if ((_DWORD)v339)
                    {
                      v340 = *(uint64_t **)(v303 + 152);
                      if (v465[0])
                      {
                        v341 = 8 * v339;
                        while (1)
                        {
                          v342 = *v340;
                          if (*(_BYTE *)(*v340 + 96))
                          {
                            v343 = *(_DWORD *)(v342 + 80);
                            v344 = *(WTF::StringImpl **)(v342 + 88);
                            if (v343 == DWORD2(v463) && v344 == v464)
                              break;
                          }
                          ++v340;
                          v341 -= 8;
                          if (!v341)
                            goto LABEL_600;
                        }
                      }
                      else
                      {
                        v363 = 8 * v339;
                        while (*(_BYTE *)(*v340 + 96))
                        {
                          ++v340;
                          v363 -= 8;
                          if (!v363)
                            goto LABEL_600;
                        }
                      }
                      v364 = (_QWORD *)WebCore::Element::ensureAnimationRareData(v302, v265);
                      v365 = v364[5];
                      v366 = (WTF *)v364[6];
                      v364[6] = 0;
                      v364[7] = 0;
                      v364[5] = 0;
                      while (v366)
                      {
                        v434 = v366;
                        v366 = (WTF *)*((_QWORD *)v366 + 2);
                        v435 = *(_DWORD **)v434;
                        *(_QWORD *)v434 = 0;
                        if (v435)
                        {
                          if (v435[6] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v435 + 72))(v435);
                          else
                            --v435[6];
                        }
                        WTF::fastFree(v434, (void *)v69);
                      }
                      v265 = (char *)v445;
                      if (v365)
                        WTF::fastFree((WTF *)(v365 - 16), (void *)v69);
                    }
                  }
                }
              }
            }
          }
          goto LABEL_600;
        default:
          goto LABEL_600;
      }
    }
  }
LABEL_662:
  v310 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
  if (*(_QWORD *)(v310 + 1272) == v7)
  {
    v391 = *(unsigned int *)(*(_QWORD *)(v310 + 1944) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v310 + 1944) + 68) << 32);
    if (v391)
    {
      v69 = *(_QWORD *)(v391 + 8);
      if (v69)
      {
        do
        {
          v413 = *(unsigned int *)(v69 + 47);
          if (v413 | ((unint64_t)*(unsigned __int8 *)(v69 + 51) << 32))
            v412 = *(_QWORD *)((v413 | ((unint64_t)*(unsigned __int8 *)(v69 + 51) << 32)) + 8);
          else
            v412 = 0;
          if (*(unsigned __int8 *)(v69 + 46) - 25 <= 1)
          {
            v414 = *(_QWORD *)(v7 + 64);
            if ((v414 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v414 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942A10D0);
            }
            WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(v4, (WebCore::RenderObject *)v69, (const WebCore::RenderElement *)(v414 & 0xFFFFFFFFFFFFLL), v70, v71, v72);
          }
          v69 = v412;
        }
        while (v412);
      }
    }
  }
  result = v446;
  if (v442 != v446 && v446 != 0)
  {
    v446 = 0;
    LODWORD(v447) = 0;
    return (WTF *)WTF::fastFree(result, (void *)v69);
  }
  return result;
}

uint64_t WebCore::Element::childShouldCreateRenderer(WebCore::Element *this, const WebCore::Node *a2)
{
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  return 0;
}

uint64_t WebCore::RenderTreePosition::nextSiblingRenderer(WebCore::RenderTreePosition *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  __int128 *v13;
  unsigned int v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  char *v23;
  const void **v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  WTF *v34;
  WTF *v36;
  uint64_t v39;
  unsigned int v40;
  WTF *v41;
  WTF *v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  WTF *v60;
  WTF *v62;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  WTF *v68;
  WTF *v70;
  WTF *v72;
  uint64_t v74;
  WebCore::Node *v75;
  void *v76;
  uint64_t v77;
  WTF *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  WTF *v84;
  WTF *v86;
  uint64_t v88;
  uint64_t v89;
  WebCore::ShadowRoot *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  WTF *v94;
  WTF *v96;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  unsigned int v112;
  WebCore::Node *v113;
  WTF *v114;
  uint64_t v115;
  _BYTE v116[240];
  __int16 v117;
  WTF *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  _BYTE v130[256];
  int v131;
  uint64_t v132;
  int v133;
  WTF *v134;
  uint64_t v135;
  _QWORD v136[3];
  _DWORD v137[66];
  uint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  _DWORD v141[66];
  uint64_t v142;
  uint64_t v143;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v143 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(v2 + 45) & 1) != 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
  if (!v4)
    return 0;
  if ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942A1F98);
  }
  v5 = v3;
  if (v4 == v3)
    return 0;
  v113 = 0;
  v114 = (WTF *)v116;
  v115 = 30;
  v6 = *(_QWORD *)(v3 + 32);
  if (!v6
    || (*(_WORD *)(v6 + 28) & 8) == 0
    || (v7 = *(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v98 = *(_QWORD *)(v7 + 88)) == 0
    || (v99 = *(_QWORD *)(v98 + 224)) == 0
    || (v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v3)) == 0)
  {
    if ((~*(unsigned __int16 *)(v5 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 368))(v5))
    {
      v8 = *(_QWORD *)(v5 + 32);
      if (!v8)
        goto LABEL_16;
      v9 = *(_WORD *)(v8 + 28);
      if ((v9 & 0x80) == 0)
      {
        if ((v9 & 8) != 0)
          goto LABEL_16;
        goto LABEL_15;
      }
      v10 = *(_QWORD *)(v8 + 200);
      if (!v10)
      {
LABEL_15:
        v8 = 0;
        goto LABEL_16;
      }
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 112);
      if (!v10)
        goto LABEL_15;
    }
    v8 = *(_QWORD *)(v10 + 8);
  }
  while (1)
  {
LABEL_16:
    v113 = (WebCore::Node *)v8;
    v11 = HIDWORD(v115);
    if (HIDWORD(v115) == (_DWORD)v115)
    {
      WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>((uint64_t)&v114, (unint64_t)&v113);
    }
    else
    {
      *((_QWORD *)v114 + HIDWORD(v115)) = v8;
      HIDWORD(v115) = v11 + 1;
    }
    if (v113 == (WebCore::Node *)v4)
      break;
    v8 = WebCore::Node::parentElementInComposedTree(v113);
  }
  v12 = HIDWORD(v115);
  if (HIDWORD(v115) >= 2)
  {
    v106 = 0;
    v107 = (HIDWORD(v115) - 1);
    v108 = 8 * (HIDWORD(v115) >> 1);
    v109 = 8 * HIDWORD(v115);
    do
    {
      if (v109 == v106)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A2248);
      }
      if (v107 >= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A2250);
      }
      v110 = v114;
      v111 = *(_QWORD *)((char *)v114 + v106);
      *(_QWORD *)((char *)v114 + v106) = *((_QWORD *)v114 + v107);
      *((_QWORD *)v110 + v107--) = v111;
      v106 += 8;
    }
    while (v108 != v106);
  }
  v13 = &xmmword_1968C0000;
  if ((~*(unsigned __int16 *)(v5 + 28) & 0x408) != 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 368))(v5))
  {
    LOBYTE(v117) = (*(_QWORD *)(v4 + 16) & 0x10000000000000) != 0;
    HIBYTE(v117) = 0;
    v118 = (WTF *)&v120;
    v119 = 8;
    if ((*(_BYTE *)(v4 + 28) & 8) != 0 && (*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
        v100 = 0;
      else
        v100 = *(_QWORD *)(v5 + 32) == v4;
      if (v100)
        goto LABEL_24;
    }
    else if (*(_QWORD *)(v5 + 32) == v4)
    {
LABEL_24:
      v120 = v5;
      v121 = &v123;
      v123 = 0;
      v124 = 0;
      v125 = v133;
      v122 = 0x100000010;
      v14 = 1;
      v126 = 1;
      v127 = 0;
      v128 = v130;
      v129 = 16;
      v131 = 0;
      v132 = -1;
      v15 = (WTF *)&v120;
      HIDWORD(v119) = 1;
LABEL_25:
      v16 = v14;
      v17 = v14 - 1;
      v18 = (char *)v15 + 584 * v17;
      v19 = *(_QWORD *)v18;
      while (1)
      {
        v19 = *(_QWORD *)(v19 + 56);
        if (!v19)
          break;
        if ((*(_WORD *)(v19 + 28) & 0xA) != 0)
        {
          *(_QWORD *)v18 = v19;
          goto LABEL_29;
        }
      }
      v88 = *((unsigned int *)v18 + 5);
      if (!(_DWORD)v88)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A2228);
      }
      v89 = *((_QWORD *)v18 + 1) + 16 * v88;
      v19 = *(_QWORD *)(v89 - 16);
      *(_QWORD *)v18 = v19;
      *((_DWORD *)v18 + 70) = *(_DWORD *)(v89 - 8);
      *((_DWORD *)v18 + 5) = v88 - 1;
LABEL_29:
      if (v19 == *((_QWORD *)v15 + 73 * v17 + 36) || !*((_DWORD *)v18 + 70) && !*((_DWORD *)v15 + 146 * v17 + 142))
      {
        WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)&v117, (void *)v3);
        v16 = HIDWORD(v119);
        v14 = HIDWORD(v119);
      }
      LOWORD(v133) = v117;
      v20 = (WTF *)v136;
      v134 = (WTF *)v136;
      LODWORD(v135) = 8;
      HIDWORD(v135) = v14;
      if (v14 >= 9)
      {
        if (v14 >= 0x70381D)
        {
LABEL_242:
          __break(0xC471u);
          JUMPOUT(0x1942A1A50);
        }
        v112 = 584 * v16;
        v20 = (WTF *)WTF::fastMalloc((WTF *)(584 * v16));
        LODWORD(v135) = v112 / 0x248;
        v134 = v20;
        v16 = HIDWORD(v119);
        v14 = HIDWORD(v119);
      }
      v21 = v118;
      if (v14)
      {
        v22 = 0;
        v23 = (char *)v118 + 584 * v16;
        do
        {
          v24 = (const void **)((char *)v21 + v22);
          v25 = (char *)v20 + v22;
          *(_QWORD *)v25 = *(_QWORD *)((char *)v21 + v22);
          v26 = *(unsigned int *)((char *)v21 + v22 + 20);
          v27 = (char *)v20 + v22 + 24;
          *((_QWORD *)v25 + 1) = v27;
          *((_DWORD *)v25 + 4) = 16;
          *((_DWORD *)v25 + 5) = v26;
          if (v26 >= 0x11)
          {
            if (v26 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1942A2210);
            }
            v27 = (char *)WTF::fastMalloc((WTF *)(16 * v26));
            *((_DWORD *)v25 + 4) = v26;
            *((_QWORD *)v25 + 1) = v27;
          }
          memcpy(v27, v24[1], 16 * *((unsigned int *)v24 + 5));
          *((_DWORD *)v25 + 70) = *((_DWORD *)v24 + 70);
          *((_QWORD *)v25 + 36) = v24[36];
          v28 = *((unsigned int *)v24 + 77);
          v29 = v25 + 312;
          *((_QWORD *)v25 + 37) = v25 + 312;
          *((_DWORD *)v25 + 76) = 16;
          *((_DWORD *)v25 + 77) = v28;
          if (v28 >= 0x11)
          {
            if (v28 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1942A2218);
            }
            v29 = (void *)WTF::fastMalloc((WTF *)(16 * v28));
            *((_DWORD *)v25 + 76) = v28;
            *((_QWORD *)v25 + 37) = v29;
          }
          memcpy(v29, v24[37], 16 * *((unsigned int *)v24 + 77));
          v30 = (char *)v20 + v22;
          *((_DWORD *)v30 + 142) = *((_DWORD *)v24 + 142);
          *((_QWORD *)v30 + 72) = v24[72];
          v22 += 584;
        }
        while (v24 + 73 != (const void **)v23);
        v21 = v118;
        if (HIDWORD(v119))
        {
          v31 = 0;
          v32 = 584 * HIDWORD(v119);
          v13 = &xmmword_1968C0000;
          do
          {
            v33 = (char *)v21 + v31;
            v34 = *(WTF **)((char *)v21 + v31 + 296);
            if ((WTF *)((char *)v21 + v31 + 312) != v34 && v34 != 0)
            {
              *((_QWORD *)v33 + 37) = 0;
              *((_DWORD *)v33 + 76) = 0;
              WTF::fastFree(v34, (void *)v3);
            }
            v36 = (WTF *)*((_QWORD *)v33 + 1);
            if (v33 + 24 != (char *)v36 && v36 != 0)
            {
              *((_QWORD *)v33 + 1) = 0;
              *(_DWORD *)((char *)v21 + v31 + 16) = 0;
              WTF::fastFree(v36, (void *)v3);
            }
            v31 += 584;
          }
          while (v32 != v31);
          v21 = v118;
        }
        else
        {
          v13 = &xmmword_1968C0000;
        }
      }
      if (&v120 != (uint64_t *)v21 && v21 != 0)
        goto LABEL_152;
      goto LABEL_56;
    }
    WebCore::ComposedTreeIterator::initializeContextStack((WebCore::ComposedTreeIterator *)&v117, (WebCore::ContainerNode *)v4, (WebCore::Node *)v5);
    v14 = HIDWORD(v119);
    if (!HIDWORD(v119))
    {
      __break(0xC471u);
      JUMPOUT(0x1942A2240);
    }
    v15 = v118;
    goto LABEL_25;
  }
  v74 = *(_QWORD *)(v5 + 112);
  if (v74)
    v75 = *(WebCore::Node **)(v74 + 8);
  else
    v75 = 0;
  if ((~*(unsigned __int16 *)(v5 + 28) & 0x408) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 368))(v5) != 6)
  {
    if (!HIDWORD(v115))
    {
      __break(0xC471u);
      JUMPOUT(0x1942A2220);
    }
    --HIDWORD(v115);
    if (v75 == (WebCore::Node *)v4)
    {
      LOWORD(v133) = 0;
      v134 = (WTF *)v136;
      v136[0] = 0;
      v136[1] = v137;
      v136[2] = 16;
      v137[64] = 0;
      v138 = 0;
      v139 = v141;
      v140 = 16;
      v141[64] = 0;
      v142 = -1;
      v135 = 0x100000008;
      goto LABEL_56;
    }
    WebCore::ComposedTreeIterator::ComposedTreeIterator((WebCore::ComposedTreeIterator *)&v117, (WebCore::ContainerNode *)v4, v75);
    if (!HIDWORD(v119))
    {
      __break(0xC471u);
      JUMPOUT(0x1942A2230);
    }
    v77 = HIDWORD(v119) - 1;
    v78 = v118;
    v79 = (char *)v118 + 584 * v77;
    v80 = *(_QWORD *)v79;
    while (1)
    {
      v80 = *(_QWORD *)(v80 + 56);
      if (!v80)
        break;
      if ((*(_WORD *)(v80 + 28) & 0xA) != 0)
      {
        *(_QWORD *)v79 = v80;
        goto LABEL_134;
      }
    }
    v101 = *((unsigned int *)v79 + 5);
    if (!(_DWORD)v101)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A2238);
    }
    v102 = *((_QWORD *)v79 + 1) + 16 * v101;
    v80 = *(_QWORD *)(v102 - 16);
    *(_QWORD *)v79 = v80;
    *((_DWORD *)v79 + 70) = *(_DWORD *)(v102 - 8);
    *((_DWORD *)v79 + 5) = v101 - 1;
LABEL_134:
    if (v80 == *((_QWORD *)v78 + 73 * v77 + 36) || !*((_DWORD *)v79 + 70) && !*((_DWORD *)v78 + 146 * v77 + 142))
      WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)&v117, v76);
    LOWORD(v133) = v117;
    WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v134, (uint64_t *)&v118);
    v21 = v118;
    if (HIDWORD(v119))
    {
      v81 = 0;
      v82 = 584 * HIDWORD(v119);
      do
      {
        v83 = (char *)v21 + v81;
        v84 = *(WTF **)((char *)v21 + v81 + 296);
        if ((WTF *)((char *)v21 + v81 + 312) != v84 && v84 != 0)
        {
          *((_QWORD *)v83 + 37) = 0;
          *((_DWORD *)v83 + 76) = 0;
          WTF::fastFree(v84, (void *)v3);
        }
        v86 = (WTF *)*((_QWORD *)v83 + 1);
        if (v83 + 24 != (char *)v86 && v86 != 0)
        {
          *((_QWORD *)v83 + 1) = 0;
          *(_DWORD *)((char *)v21 + v81 + 16) = 0;
          WTF::fastFree(v86, (void *)v3);
        }
        v81 += 584;
      }
      while (v82 != v81);
      v21 = v118;
    }
  }
  else
  {
    if (v75 == (WebCore::Node *)v4)
    {
      WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v133, v4);
      goto LABEL_56;
    }
    WebCore::ComposedTreeIterator::ComposedTreeIterator((WebCore::ComposedTreeIterator *)&v117, (WebCore::ContainerNode *)v4, v75);
    WebCore::ComposedTreeIterator::traverseNext((WebCore::ComposedTreeIterator *)&v117, v90);
    LOWORD(v133) = v117;
    WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v134, (uint64_t *)&v118);
    v21 = v118;
    if (HIDWORD(v119))
    {
      v91 = 0;
      v92 = 584 * HIDWORD(v119);
      do
      {
        v93 = (char *)v21 + v91;
        v94 = *(WTF **)((char *)v21 + v91 + 296);
        if ((WTF *)((char *)v21 + v91 + 312) != v94 && v94 != 0)
        {
          *((_QWORD *)v93 + 37) = 0;
          *((_DWORD *)v93 + 76) = 0;
          WTF::fastFree(v94, (void *)v3);
        }
        v96 = (WTF *)*((_QWORD *)v93 + 1);
        if (v93 + 24 != (char *)v96 && v96 != 0)
        {
          *((_QWORD *)v93 + 1) = 0;
          *(_DWORD *)((char *)v21 + v91 + 16) = 0;
          WTF::fastFree(v96, (void *)v3);
        }
        v91 += 584;
      }
      while (v92 != v91);
      v21 = v118;
    }
  }
  if (&v120 != (uint64_t *)v21 && v21)
  {
LABEL_152:
    v118 = 0;
    LODWORD(v119) = 0;
    WTF::fastFree(v21, (void *)v3);
  }
LABEL_56:
  v117 = 0;
  v118 = (WTF *)&v120;
  v120 = 0;
  v121 = &v123;
  v122 = *((_QWORD *)v13 + 456);
  v126 = 0;
  v127 = 0;
  v128 = v130;
  v129 = v122;
  v131 = 0;
  v132 = -1;
  v119 = 0x100000008;
  v39 = HIDWORD(v135);
  if (!HIDWORD(v135))
    goto LABEL_242;
  while (1)
  {
    v40 = HIDWORD(v119);
    if (!HIDWORD(v119))
    {
      __break(0xC471u);
      JUMPOUT(0x1942A21E0);
    }
    v41 = v134;
    v42 = v118;
    if (*((_QWORD *)v134 + 73 * v39 - 73) == *((_QWORD *)v118 + 73 * HIDWORD(v119) - 73)
      || !*((_DWORD *)v134 + 146 * v39 - 76) && !*((_DWORD *)v118 + 146 * HIDWORD(v119) - 76))
    {
      break;
    }
    v43 = 0;
    v44 = 584 * v39;
    v45 = (_DWORD *)((char *)v134 + 280);
    do
    {
      v43 += *v45;
      v45 += 146;
      v44 -= 584;
    }
    while (v44);
    v46 = HIDWORD(v115);
    if (HIDWORD(v115) > v43)
    {
      v47 = (char *)v114 + 8 * HIDWORD(v115) - 8;
      while (1)
      {
        if ((*(_QWORD *)(*(_QWORD *)v47 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v48 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v47 + 72) & 0xFFFFFFFFFFFFLL) + 0xB0);
          if (v48)
          {
            v49 = *(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL;
            if (v49)
              break;
          }
        }
        --v46;
        v47 -= 8;
        if (v43 >= v46)
        {
          HIDWORD(v115) = v43;
          goto LABEL_70;
        }
      }
      HIDWORD(v115) = v46 - 1;
      if ((*(_BYTE *)(v49 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A1FB8);
      }
      goto LABEL_91;
    }
LABEL_70:
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A21E8);
    }
    v50 = v39 - 1;
    v3 = *((_QWORD *)v134 + 73 * v39 - 73);
    v49 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
    if (v49)
      goto LABEL_91;
    if ((*(_WORD *)(v3 + 28) & 8) != 0)
    {
      if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0
        || (v55 = *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
        || (*(_QWORD *)(v55 + 16) & 0x1FLL) != 0x12)
      {
        v50 = v39 - 1;
        goto LABEL_75;
      }
      v56 = WebCore::RenderTreePosition::nextSiblingRenderer(WebCore::Node const&)const::$_1::operator()((uint64_t)&v114, v3);
      if (v56)
      {
        v49 = v56;
        v40 = HIDWORD(v119);
        v42 = v118;
        goto LABEL_91;
      }
      WebCore::ComposedTreeIterator::traverseNext((WebCore::ComposedTreeIterator *)&v133, (WebCore::ShadowRoot *)v3);
      v39 = HIDWORD(v135);
      if (!HIDWORD(v135))
        goto LABEL_242;
    }
    else
    {
LABEL_75:
      v51 = (char *)v134 + 584 * v50;
      v52 = *(_QWORD *)v51;
      while (1)
      {
        v52 = *(_QWORD *)(v52 + 56);
        if (!v52)
          break;
        if ((*(_WORD *)(v52 + 28) & 0xA) != 0)
        {
          *(_QWORD *)v51 = v52;
          goto LABEL_79;
        }
      }
      v53 = *((unsigned int *)v51 + 5);
      if (!(_DWORD)v53)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A21F8);
      }
      v54 = *((_QWORD *)v51 + 1) + 16 * v53;
      v52 = *(_QWORD *)(v54 - 16);
      *(_QWORD *)v51 = v52;
      *((_DWORD *)v51 + 70) = *(_DWORD *)(v54 - 8);
      *((_DWORD *)v51 + 5) = v53 - 1;
LABEL_79:
      if (v52 == *((_QWORD *)v41 + 73 * v50 + 36) || !*((_DWORD *)v51 + 70) && !*((_DWORD *)v41 + 146 * v50 + 142))
      {
        WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)&v133, (void *)v3);
        v39 = HIDWORD(v135);
      }
      if (!v39)
        goto LABEL_242;
    }
  }
  if (!HIDWORD(v115))
  {
    v49 = 0;
    goto LABEL_92;
  }
  v103 = 1 - HIDWORD(v115);
  v104 = (char *)v114 + 8 * HIDWORD(v115) - 8;
  while (1)
  {
    if ((*(_QWORD *)(*(_QWORD *)v104 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v105 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v104 + 72) & 0xFFFFFFFFFFFFLL) + 0xB0);
      if (v105)
      {
        v49 = *(_QWORD *)(v105 + 64) & 0xFFFFFFFFFFFFLL;
        if (v49)
          break;
      }
    }
    ++v103;
    v104 -= 8;
    if (v103 == 1)
    {
      v49 = 0;
      HIDWORD(v115) = 0;
      goto LABEL_91;
    }
  }
  HIDWORD(v115) = -v103;
  if ((*(_BYTE *)(v49 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942A1F30);
  }
LABEL_91:
  if (!v40)
    goto LABEL_105;
LABEL_92:
  v57 = 0;
  v58 = 584 * v40;
  do
  {
    v59 = (char *)v42 + v57;
    v60 = *(WTF **)((char *)v42 + v57 + 296);
    if ((WTF *)((char *)v42 + v57 + 312) != v60 && v60 != 0)
    {
      *((_QWORD *)v59 + 37) = 0;
      *((_DWORD *)v59 + 76) = 0;
      WTF::fastFree(v60, (void *)v3);
    }
    v62 = (WTF *)*((_QWORD *)v59 + 1);
    if (v59 + 24 != (char *)v62 && v62 != 0)
    {
      *((_QWORD *)v59 + 1) = 0;
      *(_DWORD *)((char *)v42 + v57 + 16) = 0;
      WTF::fastFree(v62, (void *)v3);
    }
    v57 += 584;
  }
  while (v58 != v57);
  v42 = v118;
LABEL_105:
  if (&v120 != (uint64_t *)v42 && v42)
  {
    v118 = 0;
    LODWORD(v119) = 0;
    WTF::fastFree(v42, (void *)v3);
  }
  v64 = v134;
  if (HIDWORD(v135))
  {
    v65 = 0;
    v66 = 584 * HIDWORD(v135);
    do
    {
      v67 = (char *)v64 + v65;
      v68 = *(WTF **)((char *)v64 + v65 + 296);
      if ((WTF *)((char *)v64 + v65 + 312) != v68 && v68 != 0)
      {
        *((_QWORD *)v67 + 37) = 0;
        *((_DWORD *)v67 + 76) = 0;
        WTF::fastFree(v68, (void *)v3);
      }
      v70 = (WTF *)*((_QWORD *)v67 + 1);
      if (v67 + 24 != (char *)v70 && v70 != 0)
      {
        *((_QWORD *)v67 + 1) = 0;
        *(_DWORD *)((char *)v64 + v65 + 16) = 0;
        WTF::fastFree(v70, (void *)v3);
      }
      v65 += 584;
    }
    while (v66 != v65);
    v64 = v134;
  }
  if (v136 != (_QWORD *)v64 && v64)
  {
    v134 = 0;
    LODWORD(v135) = 0;
    WTF::fastFree(v64, (void *)v3);
  }
  v72 = v114;
  if (v116 != (_BYTE *)v114 && v114)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree(v72, (void *)v3);
  }
  return v49;
}

uint64_t WebCore::ComposedTreeIterator::traverseNextLeavingContext(uint64_t this, void *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(this + 20);
  if (!(_DWORD)v2)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1942A2450);
  }
  v3 = *(_QWORD *)(this + 8);
LABEL_3:
  while (1)
  {
    v4 = v2 - 1;
    v5 = v3 + 584 * (v2 - 1);
    if (*(_QWORD *)v5 != *(_QWORD *)(v5 + 288))
      break;
    if (v2 < 2)
      return this;
LABEL_7:
    v6 = v3 + 584 * v4;
    v7 = *(WTF **)(v6 + 296);
    if ((WTF *)(v6 + 312) != v7 && v7 != 0)
    {
      *(_QWORD *)(v6 + 296) = 0;
      *(_DWORD *)(v3 + 584 * v4 + 304) = 0;
      v19 = this;
      v16 = v5;
      v17 = v4;
      WTF::fastFree(v7, a2);
      v5 = v16;
      LODWORD(v4) = v17;
      this = v19;
    }
    v9 = *(WTF **)(v5 + 8);
    if ((WTF *)(v5 + 24) != v9 && v9 != 0)
    {
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)(v5 + 16) = 0;
      v20 = this;
      v18 = v4;
      WTF::fastFree(v9, a2);
      LODWORD(v4) = v18;
      this = v20;
    }
    *(_DWORD *)(this + 20) = v4;
    if (!(_DWORD)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A2458);
    }
    v2 = v4;
    v3 = *(_QWORD *)(this + 8);
    v11 = *(_QWORD *)(v3 + 584 * v4 - 584);
    if ((*(_WORD *)(v11 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
    {
      v21 = this;
      this = WebCore::ComposedTreeIterator::advanceInSlot(this, 1, v11);
      if ((this & 1) != 0)
        return this;
      v2 = *(unsigned int *)(v21 + 20);
      if (!(_DWORD)v2)
        goto LABEL_38;
      this = v21;
      v3 = *(_QWORD *)(v21 + 8);
    }
    v12 = (uint64_t *)(v3 + 584 * (v2 - 1));
    v13 = *v12;
    if (*v12 == v12[36] || !*((_DWORD *)v12 + 70) && !*(_DWORD *)(v3 + 584 * (v2 - 1) + 568))
      return this;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 56);
      if (!v13)
        break;
      if ((*(_WORD *)(v13 + 28) & 0xA) != 0)
      {
        *v12 = v13;
        goto LABEL_3;
      }
    }
    v14 = *((unsigned int *)v12 + 5);
    if (!(_DWORD)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A2460);
    }
    v15 = v12[1] + 16 * v14;
    *v12 = *(_QWORD *)(v15 - 16);
    *((_DWORD *)v12 + 70) = *(_DWORD *)(v15 - 8);
    *((_DWORD *)v12 + 5) = v14 - 1;
  }
  if (!*(_DWORD *)(v5 + 280) && v2 >= 2 && !*(_DWORD *)(v3 + 584 * v4 + 568))
    goto LABEL_7;
  return this;
}

void WebCore::ElementAndTextDescendantIterator::ElementAndTextDescendantIterator(WebCore::ElementAndTextDescendantIterator *this, const WebCore::ContainerNode *a2, WebCore::Node *a3)
{
  char *v3;
  char **v4;
  const WebCore::ContainerNode *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  int v12;
  int v13;
  _OWORD *v14;
  WebCore::ElementAndTextDescendantIterator *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ElementAndTextDescendantIterator *v19;
  uint64_t v20;
  __int128 v21;
  const WebCore::ContainerNode *v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[160];

  *(_QWORD *)this = a3;
  v3 = (char *)this + 24;
  *((_QWORD *)this + 1) = (char *)this + 24;
  v4 = (char **)((char *)this + 8);
  *((_QWORD *)this + 2) = 16;
  *((_DWORD *)this + 70) = 0;
  if (!a3 || a3 == a2)
    return;
  v24 = 20;
  v5 = (const WebCore::ContainerNode *)*((_QWORD *)a3 + 4);
  v22 = v5;
  v23 = (WTF *)v25;
  if (v5 == a2)
  {
    v6 = 0;
    *(_QWORD *)&v21 = 0;
    DWORD2(v21) = 0;
LABEL_5:
    *(_OWORD *)&v3[16 * v6] = v21;
    goto LABEL_6;
  }
  v19 = this;
  do
  {
    v12 = HIDWORD(v24);
    if (HIDWORD(v24) == (_DWORD)v24)
    {
      WTF::Vector<WebCore::Node *,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode *&>((uint64_t)&v23, &v22);
    }
    else
    {
      *((_QWORD *)v23 + HIDWORD(v24)) = v5;
      HIDWORD(v24) = v12 + 1;
    }
    v5 = (const WebCore::ContainerNode *)*((_QWORD *)v5 + 4);
    v22 = v5;
  }
  while (v5 != a2);
  v13 = *((_DWORD *)v19 + 4);
  v6 = *((unsigned int *)v19 + 5);
  *(_QWORD *)&v21 = 0;
  DWORD2(v21) = 0;
  if ((_DWORD)v6 != v13)
  {
    v3 = *v4;
    this = v19;
    goto LABEL_5;
  }
  v14 = (_OWORD *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v21);
  this = v19;
  *(_OWORD *)(*((_QWORD *)v19 + 1) + 16 * *((unsigned int *)v19 + 5)) = *v14;
LABEL_6:
  ++*((_DWORD *)this + 5);
  v7 = HIDWORD(v24);
  if (HIDWORD(v24))
  {
    v20 = (uint64_t)v4;
    v15 = this;
    while (1)
    {
      v16 = v7 - 1;
      if (HIDWORD(v24) <= (v7 - 1))
        break;
      v17 = *((_QWORD *)v23 + v16);
      while (1)
      {
        v17 = *(_QWORD *)(v17 + 56);
        if (!v17)
          break;
        if ((*(_WORD *)(v17 + 28) & 0xA) != 0)
        {
          *(_QWORD *)&v21 = v17;
          DWORD2(v21) = v7;
          v18 = *((unsigned int *)v15 + 5);
          if ((_DWORD)v18 == *((_DWORD *)v15 + 4))
          {
            WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ElementAndTextDescendantIterator::AncestorSibling>(v20, (unint64_t)&v21);
          }
          else
          {
            *(_OWORD *)(*((_QWORD *)v15 + 1) + 16 * v18) = v21;
            ++*((_DWORD *)v15 + 5);
          }
          break;
        }
      }
      v7 = v16;
      if (!(_DWORD)v16)
      {
        v8 = HIDWORD(v24) + 1;
        this = v15;
        goto LABEL_8;
      }
    }
    __break(0xC471u);
  }
  else
  {
    v8 = 1;
LABEL_8:
    *((_DWORD *)this + 70) = v8;
    v9 = v23;
    if (v25 != (_BYTE *)v23 && v23 != 0)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v9, a2);
    }
  }
}

uint64_t WebCore::Element::clearHoverAndActiveStatusBeforeDetachingRenderer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    v1 = this;
    v2 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 4;
    v4 = *(_QWORD *)(v2 + 1280);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(v4 + 16 * v9);
      if (v10 == this)
      {
LABEL_5:
        v11 = (*(_BYTE *)(v4 + 16 * v9 + 8) & 4) == 0;
        goto LABEL_6;
      }
      v24 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v24) & v5;
        v10 = *(_QWORD *)(v4 + 16 * v9);
        ++v24;
        if (v10 == this)
          goto LABEL_5;
      }
    }
    v11 = 1;
LABEL_6:
    v12 = v3 + 2;
    if (v12)
    {
      *(_DWORD *)(v2 + 24) = v12;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      v30 = this;
      v27 = v11;
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
      v11 = v27;
      v1 = v30;
    }
    v13 = (uint64_t *)(v2 + 1280);
    if (!v11)
    {
      v33 = v1;
      WebCore::Document::hoveredElementDidDetach(v2, (WebCore::Element *)v1);
      v13 = (uint64_t *)(v2 + 1280);
      v1 = v33;
    }
    if ((*(_BYTE *)(v1 + 54) & 2) == 0)
      goto LABEL_16;
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
    v15 = *(_DWORD *)(v14 + 24);
    *(_DWORD *)(v14 + 24) = v15 + 2;
    v16 = *(_QWORD *)(v14 + 1280);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = (~(v1 << 32) + v1) ^ ((unint64_t)(~(v1 << 32) + v1) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(_QWORD *)(v16 + 16 * v21);
      if (v22 == v1)
      {
LABEL_13:
        v23 = (*(_BYTE *)(v16 + 16 * v21 + 8) & 2) == 0;
        goto LABEL_14;
      }
      v25 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v25) & v17;
        v22 = *(_QWORD *)(v16 + 16 * v21);
        ++v25;
        if (v22 == v1)
          goto LABEL_13;
      }
    }
    v23 = 1;
LABEL_14:
    if (v15)
    {
      *(_DWORD *)(v14 + 24) = v15;
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v26 = v23;
      v28 = v13;
      v31 = v1;
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
      v13 = v28;
      v1 = v31;
      if (v26)
        goto LABEL_16;
    }
    v29 = v13;
    v32 = v1;
    WebCore::Document::elementInActiveChainDidDetach(v2, (WebCore::Element *)v1);
    v13 = v29;
    v1 = v32;
LABEL_16:
    this = (uint64_t)WebCore::UserActionElementSet::clearFlags(v13, v1, 7);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::RenderInline::canHaveChildren(WebCore::RenderInline *this)
{
  return 1;
}

void *WebCore::RenderTreeBuilder::Table::collapseAndDestroyAnonymousSiblingCells(WebCore::RenderTreeBuilder::Table *this, const WebCore::RenderTableCell *a2)
{
  uint64_t v3;
  WebCore::RenderObject *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *result;
  WebCore::RenderBlockFlow *v10;
  WebCore::RenderBlockFlow *v11;

  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    v4 = *(WebCore::RenderObject **)(v3 + 8);
    if (v4 && *((_BYTE *)v4 + 46) != 39)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = *((unsigned int *)a2 + 10);
  if (v5 | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32))
  {
    v6 = *(_QWORD *)((v5 | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32)) + 8);
    if (v6 && *(_BYTE *)(v6 + 46) != 37)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A29D8);
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)((char *)a2 + 47) | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8 && *(_BYTE *)(v8 + 46) != 37)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A29F8);
    }
  }
  else
  {
    v8 = 0;
  }
  WebCore::RenderTreeBuilder::Table::collapseAndDetachAnonymousNextSibling<WebCore::RenderTableRow,WebCore::RenderTableCell>((uint64_t *)this, v4, v6, v8, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (*((_BYTE *)v11 + 46) == 37)
    {
      result = WebCore::RenderBlockFlow::deleteLines((uint64_t *)v11);
      v10 = v11;
      v11 = 0;
      if (v10)
        return (void *)WebCore::RenderObjectDeleter::operator()((uint64_t)&v11, (uint64_t)v10);
      return result;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x1942A29B8);
  }
  return result;
}

void WebCore::RenderTreeBuilder::Table::collapseAndDetachAnonymousNextSibling<WebCore::RenderTableRow,WebCore::RenderTableCell>(uint64_t *a1@<X0>, WebCore::RenderObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v10;
  WebCore::RenderTextFragment *v11;
  _BOOL4 v12;
  WebCore::SVGTextLayoutAttributes **v13;

  if (a2
    && a3
    && a4
    && (v10 = *(unsigned int *)(a4 + 64) | ((unint64_t)*(unsigned __int8 *)(a4 + 68) << 32),
        (WebCore::canCollapseNextSibling((WebCore *)*(unsigned __int8 *)(a3 + 45), *(unsigned int *)(a3 + 64) | ((unint64_t)*(unsigned __int8 *)(a3 + 68) << 32), (const WebCore::RenderBox *)*(unsigned __int8 *)(a4 + 45), v10) & 1) != 0))
  {
    if ((v10 & 0xFFFFFFFFFFLL) != 0)
      v11 = *(WebCore::RenderTextFragment **)((v10 & 0xFFFFFFFFFFLL) + 8);
    else
      v11 = 0;
    WebCore::RenderTreeBuilder::moveChildren(*a1, a4, (WebCore::RenderTable *)a3, v11, 0, 0, 0);
    if (WebCore::RenderElement::firstInFlowChild((WebCore::RenderElement *)a3))
      v12 = (*(_BYTE *)(WebCore::RenderElement::firstInFlowChild((WebCore::RenderElement *)a3) + 20) & 1) == 0;
    else
      v12 = 1;
    WebCore::RenderBlockFlow::setChildrenInline(a3, v12);
    WebCore::RenderTreeBuilder::detach(a5, a2, (uint64_t **)a4, (uint64_t *)*a1, 1, 1, v13);
  }
  else
  {
    *a5 = 0;
  }
}

_QWORD *WebCore::ChromeClient::ChromeClient(_QWORD *this)
{
  *this = &unk_1E33FD818;
  return this;
}

uint64_t WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];
  WTF::StringImpl **v15;

  v1 = *(unsigned int *)(this + 108);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = (WTF::StringImpl *)(this + 96);
    v4 = *(unsigned __int16 **)(this + 96);
    v5 = *(unsigned int *)(this + 108);
    while (1)
    {
      v6 = *v4;
      v4 += 8;
      if (v6 == 60)
        break;
      if (!--v5)
        return this;
    }
    if ((*(_BYTE *)(this + 184) & 1) != 0
      || (this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this),
          *(_BYTE *)(v2 + 184) |= 1u,
          v1 = *(unsigned int *)(v2 + 108),
          (_DWORD)v1))
    {
      v7 = 0;
      v8 = (WTF::StringImpl **)(*(_QWORD *)v3 + 8);
      while (*((_WORD *)v8 - 4) != 60)
      {
        ++v7;
        v8 += 2;
        if (v1 == v7)
          goto LABEL_10;
      }
      if (v7 >= v1)
      {
        __break(0xC471u);
        return this;
      }
      v9 = *v8;
      if (*v8)
        *(_DWORD *)v9 += 2;
    }
    else
    {
LABEL_10:
      v9 = 0;
    }
    v13 = v9;
    MEMORY[0x19AEA52D4](v14, &v13, 0);
    WebCore::SecurityPolicy::referrerToOriginString((WebCore::SecurityPolicy *)v14, &v15);
    if ((*(_BYTE *)(v2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v2);
      *(_BYTE *)(v2 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set(v3, (WTF::StringImpl *)0x3C, (WTF::StringImpl **)&v15);
    *(_BYTE *)(v2 + 184) &= ~2u;
    v11 = (WTF::StringImpl *)v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v14[0];
    v14[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    this = (uint64_t)v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void WebCore::DocumentThreadableLoader::loadRequest(uint64_t a1, WebCore::ResourceRequest *this, const WTF::StringImpl *a3)
{
  char v3;
  WebCore::ResourceRequest *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *updated;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  _DWORD *v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  WTF::StringImpl *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  WebCore::CachedResource *v60;
  void *v61;
  uint64_t v62;
  WebCore::Document *v63;
  uint64_t v64;
  void *v65;
  WebCore::CachedResource *v66;
  void *v67;
  uint64_t v68;
  const WTF::String *v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  void *v78;
  unint64_t v79;
  WTF::MonotonicTime *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  char shouldBlockRequestForRunnableContent;
  WTF::StringImpl *v88;
  WebCore::FrameLoader *v89;
  Inspector::IdentifiersFactory *ResourceSynchronously;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  __int128 *v94;
  WebCore::SecurityOrigin *v95;
  uint64_t v96;
  WebCore::SecurityOrigin *v97;
  WebCore::LocalDOMWindow *v98;
  void *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  void *v104;
  unsigned int *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  const WTF::String *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  const WTF::String *v113;
  WTF::StringImpl *v114;
  const WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  __int16 v117;
  WTF::StringImpl *v118;
  char isAllowedByContentSecurityPolicy;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  const WTF::String *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  __int128 v143;
  unsigned int *v144;
  _OWORD v145[5];
  __int128 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _DWORD *v157;
  uint64_t v158;
  __int128 v159;
  _DWORD *v160;
  WTF::StringImpl *v161;
  _QWORD v162[8];
  char v163;
  unsigned int v164;
  WTF::StringImpl *v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD v186[2];
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  char v195;
  __int16 v196;
  uint64_t v197;
  _DWORD *v198;
  char v199;
  __int128 v200;
  _DWORD *v201;
  __int16 v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  WTF *v205;
  uint64_t v206;
  __int16 v207;
  uint64_t v208;

  v3 = (char)a3;
  v4 = this;
  v208 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)v4 + 184) |= 1u;
  }
  v6 = *(WTF::StringImpl **)v4;
  if (*(_QWORD *)v4)
    *(_DWORD *)v6 += 2;
  updated = *(WTF::StringImpl **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v6;
  if (updated)
  {
    if (*(_DWORD *)updated == 2)
      updated = (WTF::StringImpl *)WTF::StringImpl::destroy(updated, this);
    else
      *(_DWORD *)updated -= 2;
  }
  v8 = *(_OWORD *)((char *)v4 + 8);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)((char *)v4 + 24);
  *(_OWORD *)(a1 + 584) = v8;
  if ((*((_BYTE *)v4 + 184) & 1) == 0)
  {
    updated = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(v4);
    *((_BYTE *)v4 + 184) |= 1u;
  }
  v9 = *(_QWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 178) = *(_DWORD *)(a1 + 178) & 0xFFFFFFBF | ((v3 & 3) << 6);
  if (v9)
    updated = WebCore::ResourceRequestBase::setHTTPReferrer(v4, (WTF::StringImpl **)(a1 + 240));
  v10 = &v161;
  if (*(_BYTE *)(a1 + 250))
  {
    LODWORD(v151) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)((char *)&v151 + 3) = *(_DWORD *)(a1 + 67);
    v11 = *(_DWORD **)(a1 + 72);
    if (v11)
      *v11 += 2;
    v12 = *(_OWORD *)(a1 + 96);
    v152 = *(_OWORD *)(a1 + 80);
    v153 = v12;
    v13 = *(_QWORD *)(a1 + 112);
    *((_QWORD *)&v151 + 1) = v11;
    v154 = v13;
    v14 = *(unsigned int *)(a1 + 132);
    LODWORD(v155) = 0;
    DWORD1(v155) = v14;
    if ((_DWORD)v14)
    {
      if (v14 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1942A3CD4);
      }
      updated = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v14));
      LODWORD(v155) = v14;
      *((_QWORD *)&v154 + 1) = updated;
      v135 = *(unsigned int *)(a1 + 132);
      if ((_DWORD)v135)
      {
        v136 = *(_QWORD *)(a1 + 120);
        v137 = v136 + 16 * v135;
        do
        {
          v138 = *(_DWORD **)v136;
          if (*(_QWORD *)v136)
            *v138 += 2;
          *(_QWORD *)updated = v138;
          *((_BYTE *)updated + 8) = *(_BYTE *)(v136 + 8);
          v136 += 16;
          updated = (WTF::StringImpl *)((char *)updated + 16);
        }
        while (v136 != v137);
      }
    }
    DWORD2(v155) = *(_DWORD *)(a1 + 136);
    BYTE12(v155) = *(_BYTE *)(a1 + 140);
    LOBYTE(v156) = 0;
    LOBYTE(v158) = 0;
    if (*(_BYTE *)(a1 + 168))
    {
      LOWORD(v156) = *(_WORD *)(a1 + 144);
      v15 = *(_DWORD **)(a1 + 152);
      if (v15)
        *v15 += 2;
      *((_QWORD *)&v156 + 1) = v15;
      v16 = *(_DWORD **)(a1 + 160);
      if (v16)
        *v16 += 2;
      v157 = v16;
      LOBYTE(v158) = 1;
    }
    v159 = *(_OWORD *)(a1 + 176);
    v17 = *(_DWORD **)(a1 + 192);
    if (v17)
      *v17 += 2;
    v160 = v17;
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(updated);
    v20 = *(_QWORD *)(v19 + 32);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v19);
      v20 = *(_QWORD *)(v19 + 32);
    }
    if (WTF::equal(*(WTF **)(a1 + 208), *(const WTF::StringImpl **)(v20 + 16), a3))
      v21 = 0x1000000;
    else
      v21 = 0;
    v22 = v21 | *(_DWORD *)((_BYTE *)&v159 + 2) & 0xFEF7FEFF | (*(unsigned __int8 *)(a1 + 248) << 19);
    *(_DWORD *)((char *)&v159 + 2) = v22;
    v23 = *(_QWORD *)(a1 + 72);
    if (v23 && *(_DWORD *)(v23 + 4))
      *(_DWORD *)((char *)&v159 + 2) = v22 & 0xFFFFFEF7;
    v24 = *(_DWORD *)(a1 + 178) & 0x30;
    v25 = *((_BYTE *)v4 + 184);
    if ((v25 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v4);
      v25 = *((_BYTE *)v4 + 184) | 1;
      *((_BYTE *)v4 + 184) = v25;
    }
    v26 = *((_BYTE *)v4 + 148);
    if ((v24 == 16) == ((v26 & 2) == 0))
    {
      *((_BYTE *)v4 + 148) = v26 & 0xFD | (2 * (v24 == 16));
      *((_BYTE *)v4 + 184) = v25 & 0xFD;
    }
    v27 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = 0;
    v28 = *(_OWORD *)((char *)v4 + 24);
    v166 = *(_OWORD *)((char *)v4 + 8);
    v167 = v28;
    *((_DWORD *)v4 + 2) = v166 & 0xFFFFFFFE;
    v29 = *((_QWORD *)v4 + 5);
    *((_QWORD *)v4 + 5) = 0;
    v165 = v27;
    v168 = v29;
    v30 = *((_OWORD *)v4 + 4);
    v169 = *((_OWORD *)v4 + 3);
    v170 = v30;
    *((_DWORD *)v4 + 12) = v169 & 0xFFFFFFFE;
    v31 = *((_QWORD *)v4 + 10);
    v32 = *(_OWORD *)((char *)v4 + 88);
    *(_OWORD *)((char *)v4 + 88) = 0u;
    v172 = v32;
    *(_QWORD *)&v32 = *((_QWORD *)v4 + 13);
    *((_QWORD *)v4 + 13) = 0;
    v171 = v31;
    v173 = v32;
    v33 = *((_QWORD *)v4 + 14);
    *((_QWORD *)v4 + 14) = 0;
    v174 = v33;
    v34 = *((_QWORD *)v4 + 15);
    *((_QWORD *)v4 + 15) = 0;
    v175 = v34;
    v35 = *((_QWORD *)v4 + 16);
    *((_QWORD *)v4 + 16) = 0;
    v176 = v35;
    v36 = *((_QWORD *)v4 + 17);
    *((_QWORD *)v4 + 17) = 0;
    v177 = v36;
    LODWORD(v35) = *((_DWORD *)v4 + 36);
    v179 = *((_BYTE *)v4 + 148);
    v178 = v35;
    v37 = *(_OWORD *)((char *)v4 + 152);
    *(_OWORD *)((char *)v4 + 152) = 0u;
    v180 = v37;
    v38 = *((_QWORD *)v4 + 21);
    v39 = *((_QWORD *)v4 + 22);
    *((_QWORD *)v4 + 21) = 0;
    v183 = *((_BYTE *)v4 + 184);
    v181 = v38;
    v182 = v39;
    v40 = *((_QWORD *)v4 + 24);
    *((_QWORD *)v4 + 24) = 0;
    v184 = v40;
    v185 = 0;
    *(_DWORD *)((char *)v186 + 3) = *(_DWORD *)((char *)&v151 + 3);
    v186[0] = v151;
    v41 = *((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1))
      **((_DWORD **)&v151 + 1) += 2;
    v188 = v152;
    v189 = v153;
    v187 = v41;
    v190 = v154;
    v192 = 0;
    v191 = 0;
    v193 = DWORD1(v155);
    if (!DWORD1(v155))
    {
LABEL_40:
      v194 = DWORD2(v155);
      v195 = BYTE12(v155);
      LOBYTE(v196) = 0;
      v199 = 0;
      if ((_BYTE)v158)
      {
        v196 = v156;
        v42 = *((_QWORD *)&v156 + 1);
        if (*((_QWORD *)&v156 + 1))
          **((_DWORD **)&v156 + 1) += 2;
        v197 = v42;
        v43 = v157;
        if (v157)
          *v157 += 2;
        v198 = v43;
        v199 = 1;
      }
      v200 = v159;
      v44 = v160;
      if (v160)
        *v160 += 2;
      v201 = v44;
      v202 = 0;
      v205 = 0;
      v203 = 0;
      v204 = 0;
      WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v165, &v206);
      v207 = 0;
      v46 = *(WTF::StringImpl **)(a1 + 208);
      if (v46)
      {
        if ((*((_BYTE *)v46 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v46 += 2;
LABEL_51:
          v47 = 0;
          *(_DWORD *)v46 += 2;
LABEL_52:
          v48 = v204;
          v204 = v46;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v45);
            else
              *(_DWORD *)v48 -= 2;
          }
          if ((v47 & 1) == 0)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v45);
            else
              *(_DWORD *)v46 -= 2;
          }
          v49 = *(unsigned int **)(a1 + 232);
          if (!v49)
          {
            v50 = *(_QWORD *)(a1 + 48);
            if (v50)
              v50 = *(_QWORD *)(v50 + 8);
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v50 + 192), v45);
          }
          do
            v51 = __ldaxr(v49);
          while (__stlxr(v51 + 1, v49));
          v52 = v205;
          v205 = (WTF *)v49;
          if (v52)
          {
            do
            {
              v53 = __ldaxr((unsigned int *)v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, (unsigned int *)v52));
            if (!v54)
            {
              atomic_store(1u, (unsigned int *)v52);
              v106 = (WTF::StringImpl *)*((_QWORD *)v52 + 6);
              *((_QWORD *)v52 + 6) = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 2)
                  WTF::StringImpl::destroy(v106, v45);
                else
                  *(_DWORD *)v106 -= 2;
              }
              v107 = (WTF::StringImpl *)*((_QWORD *)v52 + 5);
              *((_QWORD *)v52 + 5) = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 2)
                  WTF::StringImpl::destroy(v107, v45);
                else
                  *(_DWORD *)v107 -= 2;
              }
              v108 = *((unsigned int *)v52 + 8);
              if ((_DWORD)v108 != -1)
                ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v108])(v145, (char *)v52 + 8);
              *((_DWORD *)v52 + 8) = -1;
              WTF::fastFree(v52, v45);
            }
          }
          v4 = (WebCore::ResourceRequest *)(a1 + 32);
          v55 = *(_QWORD *)(a1 + 32);
          if (v55)
          {
            do
              v56 = __ldaxr((unsigned int *)v55);
            while (__stlxr(v56 + 1, (unsigned int *)v55));
            *(_QWORD *)&v143 = v55;
            v57 = *(_QWORD *)(v55 + 8);
            if (v57)
            {
              v161 = (WTF::StringImpl *)&v143;
              ++*(_DWORD *)(v57 + 548);
              v58 = *(_QWORD *)(v57 + 488);
              if (v58)
              {
                if (*(_QWORD *)(v58 + 8))
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v57 + 464), (uint64_t *)&v161, (uint64_t)v145);
              }
            }
          }
          else
          {
            *(_QWORD *)&v143 = 0;
          }
          WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 32), 0);
          if ((_QWORD)v143)
          {
            v60 = *(WebCore::CachedResource **)(v143 + 8);
            if (v60)
              WebCore::CachedResource::removeClient(v60, (unsigned int **)(a1 + 16));
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v143, v59);
          v62 = *(_QWORD *)(a1 + 48);
          if (v62)
            v63 = *(WebCore::Document **)(v62 + 8);
          else
            v63 = 0;
          v64 = *((_QWORD *)v63 + 90);
          if (!v64)
            v64 = WebCore::Document::ensureCachedResourceLoader(v63, v61);
          ++*(_DWORD *)v64;
          WebCore::CachedResourceLoader::requestResource((WTF::StringImpl **)v145, (WebCore::ResourceRequest *)&v165, (_QWORD *)v64, (WTF::StringImpl *)8, 0, 0);
          WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)&v161, v145);
          if ((_DWORD)v146 != -1)
            (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
             + v146))((int)&v143, (WebCore::CachedResourceHandleBase *)v145);
          if (*(_DWORD *)v64 == 1)
          {
            WebCore::CachedResourceLoader::~CachedResourceLoader((WebCore::CachedResourceLoader *)v64, v65);
            WTF::fastFree(v77, v78);
          }
          else
          {
            --*(_DWORD *)v64;
          }
          if (v164)
          {
            v66 = 0;
            *(_QWORD *)&v145[0] = 0;
          }
          else
          {
            WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)v145, (const WebCore::CachedResourceHandleBase *)&v161);
            if (*(_QWORD *)&v145[0])
              v66 = *(WebCore::CachedResource **)(*(_QWORD *)&v145[0] + 8);
            else
              v66 = 0;
          }
          WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 32), v66);
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v145, v67);
          v70 = *(unsigned int **)v4;
          if (*(_QWORD *)v4)
          {
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 + 1, v70));
            v144 = v70;
            v72 = *((_QWORD *)v70 + 1);
            if (v72)
            {
              *(_QWORD *)&v143 = &v144;
              ++*(_DWORD *)(v72 + 548);
              v73 = *(_QWORD *)(v72 + 488);
              if (!v73
                || !*(_QWORD *)(v73 + 8)
                || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v72 + 464), (uint64_t *)&v143, (uint64_t)v145), (v70 = v144) != 0))
              {
                v4 = (WebCore::ResourceRequest *)*((_QWORD *)v70 + 1);
                if (v4)
                {
                  if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v70 + 1), (WebCore::CachedResourceClient *)(a1 + 16)))(*(void (**)(WebCore::ResourceRequest *, uint64_t))(*(_QWORD *)v4 + 88))(v4, a1 + 16);
                  goto LABEL_93;
                }
              }
            }
          }
          else
          {
            v144 = 0;
          }
          if (v164 == 1)
          {
            WebCore::DocumentThreadableLoader::logErrorAndFail((WebCore::DocumentThreadableLoader *)a1, &v161, v68, v69);
LABEL_93:
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v144, v74);
            if (v164 != -1)
              (*(&off_1E33F36F0 + v164))((int)v145, (WebCore::CachedResourceHandleBase *)&v161);
            WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v165, v75);
            WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v151, v76);
            goto LABEL_96;
          }
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_217:
          v92 = (*((uint64_t (**)(WTF::StringImpl **))*v10 + 2))(v10);
          v10[1] = (WTF::StringImpl *)v92;
          goto LABEL_124;
        }
        WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)(a1 + 208), v45);
        v46 = *(WTF::StringImpl **)&v145[0];
        if (*(_QWORD *)&v145[0])
          goto LABEL_51;
      }
      v47 = 1;
      goto LABEL_52;
    }
    if (!(DWORD1(v155) >> 28))
    {
      v139 = WTF::fastMalloc((WTF *)(16 * DWORD1(v155)));
      v192 = DWORD1(v155);
      v191 = v139;
      v140 = *((_QWORD *)&v154 + 1);
      v141 = *((_QWORD *)&v154 + 1) + 16 * DWORD1(v155);
      do
      {
        v142 = *(_DWORD **)v140;
        if (*(_QWORD *)v140)
          *v142 += 2;
        *(_QWORD *)v139 = v142;
        *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
        v140 += 16;
        v139 += 16;
      }
      while (v140 != v141);
      goto LABEL_40;
    }
    __break(0xC471u);
LABEL_221:
    __break(1u);
LABEL_222:
    JUMPOUT(0x1942A3C3CLL);
  }
  WTF::MonotonicTime::now(updated);
  v143 = v79;
  v144 = 0;
  v161 = 0;
  v162[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v162);
  v162[7] = 0;
  memset(&v162[5], 0, 14);
  v163 = 1;
  v80 = WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v165);
  *(_QWORD *)&v189 = 0;
  BYTE8(v189) = 0;
  BYTE2(v177) = BYTE2(v177) & 0xF1 | 4;
  v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 528);
  if (v82 && (v83 = *(_QWORD *)(v82 + 8)) != 0)
  {
    v84 = (unsigned int *)(v83 + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 + 1, v84));
    v86 = *(_QWORD *)(a1 + 48);
    if (v86)
      v86 = *(_QWORD *)(v86 + 8);
    WebCore::SecurityContext::protectedSecurityOrigin((WebCore::SecurityContext *)(v86 + 192), v81, (unsigned int **)&v151);
    *(_QWORD *)&v145[0] = v151;
    shouldBlockRequestForRunnableContent = WebCore::MixedContentChecker::shouldBlockRequestForRunnableContent((WebCore **)v83, (WebCore::Document *)v151, v4, 1);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v145, v88);
    if ((shouldBlockRequestForRunnableContent & 1) != 0)
    {
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v83 + 8));
      goto LABEL_140;
    }
    v89 = *(WebCore::FrameLoader **)(v83 + 280);
    ++*(_DWORD *)v89;
    if (!*(_BYTE *)(a1 + 568))
      goto LABEL_221;
    ResourceSynchronously = WebCore::FrameLoader::loadResourceSynchronously(v89, v4, (*(_DWORD *)(a1 + 178) >> 19) & 1, a1 + 64, a1 + 536, (WebCore::ResourceError *)&v161, (uint64_t)&v165, (uint64_t *)&v144);
    if (!*(_DWORD *)v89)
    {
      __break(0xC471u);
      goto LABEL_222;
    }
    v64 = (uint64_t)ResourceSynchronously;
    --*(_DWORD *)v89;
    v80 = (WTF::MonotonicTime *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v84);
  }
  else
  {
    v64 = -1;
  }
  WTF::MonotonicTime::now(v80);
  *((_QWORD *)&v143 + 1) = v91;
  if (BYTE4(v162[6]))
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v165, 1);
    if ((__int16)v177 <= 0)
    {
      if (WTF::URL::protocolIs())
      {
        WebCore::DocumentThreadableLoader::didReceiveResponse(a1, (Inspector::IdentifiersFactory *)v64, (uint64_t)&v165);
        LODWORD(v157) = 0;
        v155 = 0u;
        v156 = 0u;
        v153 = 0u;
        v154 = 0u;
        v151 = 0u;
        v152 = 0u;
        v158 = -1;
        v159 = 0xFFFFFFFFFFFFFFFFLL;
        WebCore::DocumentThreadableLoader::didFinishLoading(a1, v64, (uint64_t)&v151);
        WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v151, v111);
      }
      else
      {
        WebCore::DocumentThreadableLoader::logErrorAndFail((WebCore::DocumentThreadableLoader *)a1, &v161, v109, v110);
      }
      goto LABEL_140;
    }
  }
  if (WebCore::ResourceResponseBase::containsInvalidHTTPHeaders((WebCore::ResourceResponseBase *)&v165))
  {
    if ((*((_BYTE *)v4 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(v4);
      *((_BYTE *)v4 + 184) |= 1u;
    }
    WebCore::badResponseHeadersError(v4, (uint64_t)&v151);
    WebCore::DocumentThreadableLoader::didFail((WebCore::DocumentThreadableLoader *)a1, (WebCore::ScriptExecutionContext *)&v151, v112, v113);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v151, v114);
    goto LABEL_140;
  }
  v10 = (WTF::StringImpl **)WebCore::s_platformStrategies;
  v92 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v92)
    goto LABEL_217;
LABEL_124:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 144))(v92) & 1) != 0)
    goto LABEL_125;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v165, 1);
  if ((WTF::equal(*(WTF **)v4, v165, v115) & 1) != 0)
    goto LABEL_163;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v165, 1);
  *(_QWORD *)&v151 = 0;
  WTF::URL::invalidate((WTF::URL *)&v151);
  isAllowedByContentSecurityPolicy = WebCore::DocumentThreadableLoader::isAllowedByContentSecurityPolicy(a1, (WTF::URL *)&v165, 1u, (WTF::URL *)&v151);
  v120 = (WTF::StringImpl *)v151;
  *(_QWORD *)&v151 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, v118);
    else
      *(_DWORD *)v120 -= 2;
  }
  if ((isAllowedByContentSecurityPolicy & 1) != 0)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v165, 1);
    if ((WebCore::DocumentThreadableLoader::isAllowedRedirect((WebCore::DocumentThreadableLoader *)a1, (const WTF::URL *)&v165) & 1) != 0)
    {
LABEL_163:
      if (*(_BYTE *)(a1 + 248))
        goto LABEL_125;
      v117 = WORD4(v188) & 0xFCFF;
      if (*(_BYTE *)(a1 + 65) == 2)
      {
        WORD4(v188) = v117 | 0x200;
        goto LABEL_125;
      }
      WORD4(v188) = v117 | 0x100;
      v121 = (WTF::StringImpl *)((*(unsigned __int8 *)(a1 + 178) >> 4) & 3);
      v122 = *(unsigned int **)(a1 + 232);
      if (!v122)
      {
        v123 = *(_QWORD *)(a1 + 48);
        if (v123)
          v123 = *(_QWORD *)(v123 + 8);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v123 + 192), v116);
        v122 = v124;
      }
      do
        v125 = __ldaxr(v122);
      while (__stlxr(v125 + 1, v122));
      *(_QWORD *)&v151 = v122;
      {
        WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler = (uint64_t)&off_1E33F3298;
        unk_1ECE90770 = 1;
      }
      WebCore::passesAccessControlCheck((uint64_t)&v165, v121, (WTF::StringImpl *)v122, (uint64_t)&WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler, v145);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v151, v126);
      if (!BYTE8(v145[0]))
      {
        std::optional<WTF::String>::~optional((uint64_t)v145, v127);
LABEL_125:
        WebCore::DocumentThreadableLoader::didReceiveResponse(a1, (Inspector::IdentifiersFactory *)v64, (uint64_t)&v165);
        v93 = (WTF::StringImpl *)v144;
        if (v144 && !*(_BYTE *)(a1 + 251))
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
        if (v174)
        {
          v94 = (__int128 *)(v174 + 8);
        }
        else
        {
          v94 = &WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
          {
            dword_1EE2F9230 = 0;
            xmmword_1EE2F9210 = 0u;
            unk_1EE2F9220 = 0u;
            xmmword_1EE2F91F0 = 0u;
            *(_OWORD *)&qword_1EE2F9200 = 0u;
            WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics = 0u;
            *(_OWORD *)&qword_1EE2F91E0 = 0u;
            qword_1EE2F9238 = -1;
            unk_1EE2F9240 = -1;
            qword_1EE2F9248 = 0;
          }
        }
        v95 = *(WebCore::SecurityOrigin **)(a1 + 232);
        if (!v95)
        {
          v96 = *(_QWORD *)(a1 + 48);
          if (v96)
            v96 = *(_QWORD *)(v96 + 8);
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v96 + 192), v93);
          v95 = v97;
        }
        WebCore::ResourceTiming::fromSynchronousLoad((uint64_t)v4, (_DWORD **)(a1 + 208), &v143, (uint64_t)v94, (uint64_t)&v165, v95, (uint64_t)&v151);
        if ((*(_BYTE *)(a1 + 179) & 0x10) != 0)
        {
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), &v151);
        }
        else
        {
          v98 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 696);
          if (v98)
          {
            ++*((_DWORD *)v98 + 6);
            WebCore::LocalDOMWindow::protectedPerformance(v98, v145);
            WebCore::Performance::addResourceTiming(*(uint64_t *)&v145[0], (uint64_t)&v151);
            WTF::Ref<WebCore::Performance,WTF::RawPtrTraits<WebCore::Performance>,WTF::DefaultRefDerefTraits<WebCore::Performance>>::~Ref((WebCore::Performance **)v145, v99);
            if (*((_DWORD *)v98 + 6) == 1)
              (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v98 + 72))(v98);
            else
              --*((_DWORD *)v98 + 6);
          }
        }
        v147 = 0;
        v146 = 0u;
        memset(v145, 0, sizeof(v145));
        v148 = -1;
        v149 = -1;
        v150 = 0;
        WebCore::DocumentThreadableLoader::didFinishLoading(a1, v64, (uint64_t)v145);
        WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v145, v100);
        WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)&v151, v101);
        goto LABEL_140;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v128 = (WTF::StringImpl *)v151;
      WebCore::ResourceResponse::platformLazyInit((uint64_t)&v165, 1);
      if (BYTE8(v145[0]))
      {
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)&v151 = v128;
        v131 = v165;
        if (v165)
          *(_DWORD *)v165 += 2;
        *((_QWORD *)&v151 + 1) = v131;
        v152 = v166;
        v153 = v167;
        v132 = *(_QWORD *)&v145[0];
        if (*(_QWORD *)&v145[0])
          **(_DWORD **)&v145[0] += 2;
        *(_QWORD *)&v154 = v132;
        DWORD2(v154) = 0;
        WORD6(v154) = 2;
        *(_QWORD *)&v155 = 0;
        BYTE8(v155) = 1;
        WebCore::DocumentThreadableLoader::logErrorAndFail((WebCore::DocumentThreadableLoader *)a1, (WTF::StringImpl **)&v151, v129, v130);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v151, v133);
        if (v128)
        {
          if (*(_DWORD *)v128 == 2)
            WTF::StringImpl::destroy(v128, v134);
          else
            *(_DWORD *)v128 -= 2;
        }
        std::optional<WTF::String>::~optional((uint64_t)v145, v134);
        goto LABEL_140;
      }
      goto LABEL_221;
    }
    WebCore::DocumentThreadableLoader::reportCrossOriginResourceSharingError((WebCore::DocumentThreadableLoader *)a1, v4);
  }
  else
  {
    WebCore::DocumentThreadableLoader::reportContentSecurityPolicyError((WebCore::DocumentThreadableLoader *)a1, v4);
  }
LABEL_140:
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)&v165, v102);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v161, v103);
  v105 = v144;
  v144 = 0;
  if (v105)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v105, v104);
LABEL_96:
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

WTF::StringImpl *WebCore::ResourceRequestBase::setHTTPReferrer(WebCore::ResourceRequestBase *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  NSObject *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[5];
  WebCore::SecurityOrigin *v12;
  WTF::StringImpl *v13;
  uint8_t buf[40];
  WTF::StringImpl *v15;

  if (*a2 && *((_DWORD *)*a2 + 1) > 0x1000u)
  {
    v5 = qword_1ECE7C478;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "Truncating HTTP referer", buf, 2u);
    }
    WTF::URL::URL((uint64_t)v11, a2);
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v11, (uint64_t *)&v12);
    WebCore::SecurityOrigin::toString(v12, &v13);
    MEMORY[0x19AEA52D4](buf, &v13, 0);
    v7 = *(WTF::StringImpl **)buf;
    if (*(_QWORD *)buf)
    {
      v8 = **(_DWORD **)buf;
      **(_DWORD **)buf += 2;
      v15 = v7;
      *(_QWORD *)buf = 0;
      if (v8)
        *(_DWORD *)v7 = v8;
      else
        WTF::StringImpl::destroy(v7, v6);
    }
    else
    {
      v15 = 0;
      *(_QWORD *)buf = 0;
    }
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v12, v6);
    result = v11[0];
    v11[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (v7)
    {
      if (*((_DWORD *)v7 + 1) <= 0x1000u)
        result = WebCore::ResourceRequestBase::setHTTPHeaderField(this, (WTF::StringImpl *)0x3C, &v15);
      if (*(_DWORD *)v7 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
      else
        *(_DWORD *)v7 -= 2;
    }
    else
    {
      return WebCore::ResourceRequestBase::setHTTPHeaderField(this, (WTF::StringImpl *)0x3C, &v15);
    }
  }
  else
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    result = WebCore::HTTPHeaderMap::set((WebCore::ResourceRequestBase *)((char *)this + 96), (WTF::StringImpl *)0x3C, a2);
    *((_BYTE *)this + 184) &= ~2u;
  }
  return result;
}

WTF::StringImpl *WebCore::SecurityOrigin::createFromString@<X0>(WTF::StringImpl **this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9[5];
  WTF::StringImpl *v10;

  v4 = *this;
  if (*this)
    *(_DWORD *)v4 += 2;
  v10 = v4;
  MEMORY[0x19AEA52D4](v9, &v10, 0);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v9, a2);
  result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::toString@<X0>(WebCore::SecurityOrigin *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v5;
  _QWORD *v6;
  uint64_t v8;
  char v9;
  char *v10;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 == 1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((_DWORD)v3 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>(v8);
  }
  else
  {
    v5 = (WebCore::SecurityOrigin *)((char *)this + 8);
    v10 = &v9;
    v6 = (_QWORD *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v3])(&v10, (char *)this + 8);
    if (MEMORY[0x19AEA53F4](*v6, "file", 4) && *((_BYTE *)this + 59))
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      return WebCore::SecurityOriginData::toString(v5, a2);
  }
}

void WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>(uint64_t a1, _DWORD *a2)
{
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18[10];
  unsigned int *v19;
  unsigned int **v20;

  v3 = a2[20];
  if (!v3)
  {
    if (!*(_QWORD *)a2)
      goto LABEL_4;
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (!v4)
      goto LABEL_4;
    v6 = *(unsigned int **)(v4 + 8);
    if (v6
      || (v13 = *(_QWORD *)(*(_QWORD *)a2 + 8),
          v6 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10),
          *v6 = 1,
          *((_QWORD *)v6 + 1) = v13,
          v14 = *(unsigned int **)(v13 + 8),
          v17 = v13,
          *(_QWORD *)(v13 + 8) = v6,
          !v14))
    {
      do
LABEL_10:
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v19 = v6;
      v8 = *((_QWORD *)v6 + 1);
      if (!v8
        || (v20 = &v19, ++*(_DWORD *)(v8 + 548), (v9 = *(_QWORD *)(v8 + 488)) == 0)
        || !*(_QWORD *)(v9 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v20, (uint64_t)v18), (v6 = v19) != 0))
      {
        do
          v10 = __ldaxr(v6);
        while (__stlxr(v10 + 1, v6));
        *(_QWORD *)a1 = v6;
        v11 = *((_QWORD *)v6 + 1);
        if (v11)
        {
          v20 = (unsigned int **)a1;
          ++*(_DWORD *)(v11 + 548);
          v12 = *(_QWORD *)(v11 + 488);
          if (v12)
          {
            if (*(_QWORD *)(v12 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), (uint64_t *)&v20, (uint64_t)v18);
          }
        }
        goto LABEL_6;
      }
LABEL_5:
      *(_QWORD *)a1 = 0;
LABEL_6:
      *(_DWORD *)(a1 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v19, a2);
      return;
    }
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (v16)
    {
LABEL_24:
      v6 = *(unsigned int **)(v17 + 8);
      if (!v6)
      {
LABEL_4:
        v19 = 0;
        goto LABEL_5;
      }
      goto LABEL_10;
    }
LABEL_27:
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
    goto LABEL_24;
  }
  if (v3 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_27;
  }
  makeUnexpected<WebCore::ResourceError &>((uint64_t)v18, (uint64_t)a2);
  std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(a1, v18);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v18, v5);
}

WTF *WebCore::CachedRawResource::didAddClient(WebCore::CachedRawResource *this, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF *result;
  void *v27;
  WTF *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  __int128 v80;
  CFTypeRef v81;
  CFTypeRef v82;
  void *v83;
  WTF *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  unsigned int **v88;
  unsigned int *v89;
  WTF *v90;
  _QWORD *v91;
  unsigned int *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[19];
  CFTypeRef cf;
  char v150;
  uint64_t v151[2];

  if ((*((unsigned int (**)(WTF **))*a2 + 4))(a2) != 5)
  {
    __break(0xC471u);
    goto LABEL_68;
  }
  v4 = *((unsigned int *)this + 169);
  v93 = 0;
  v94 = 0;
  if (!(_DWORD)v4)
    goto LABEL_3;
  if (v4 >= 0x8FB824)
  {
    __break(0xC471u);
    JUMPOUT(0x1942A4998);
  }
  v37 = (WTF *)(456 * v4);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  LODWORD(v94) = v37 / 0x1C8;
  v93 = (WTF *)WTF::fastMalloc(v37);
  v41 = v4 - 1;
  do
  {
    if (v41 >= *((unsigned int *)this + 169))
    {
      __break(0xC471u);
LABEL_68:
      JUMPOUT(0x1942A44F4);
    }
    std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>::pair[abi:sn180100]<true,0>((uint64_t)&v95, (uint64_t)v37 + v38 + *((_QWORD *)this + 83) - 456, (uint64_t)v37 + v38 + *((_QWORD *)this + 83) - 256);
    v43 = (char *)v39 + (_QWORD)v93;
    v44 = v95;
    v95 = 0;
    *(_QWORD *)v43 = v44;
    v45 = *((_DWORD *)v43 + 2) & 0xFFFFFFFE | v96 & 1;
    *((_DWORD *)v43 + 2) = v45;
    v46 = v45 & 0xFFFFFFFD | (2 * ((v96 >> 1) & 1));
    *((_DWORD *)v43 + 2) = v46;
    v47 = v46 & 0xFFFFFFFB | (4 * ((v96 >> 2) & 1));
    *((_DWORD *)v43 + 2) = v47;
    v48 = v47 & 0xFFFFFFC7 | (8 * ((v96 >> 3) & 7));
    *((_DWORD *)v43 + 2) = v48;
    *((_DWORD *)v43 + 2) = v96 & 0xFFFFFFC0 | v48 & 0x3F;
    *(_OWORD *)(v43 + 12) = v97;
    *(_QWORD *)(v43 + 28) = v98;
    *((_DWORD *)v43 + 9) = v99;
    v96 &= ~1u;
    v49 = v100;
    v100 = 0;
    *((_QWORD *)v43 + 5) = v49;
    v50 = *((_DWORD *)v43 + 12) & 0xFFFFFFFE | v101 & 1;
    *((_DWORD *)v43 + 12) = v50;
    v51 = v50 & 0xFFFFFFFD | (2 * ((v101 >> 1) & 1));
    *((_DWORD *)v43 + 12) = v51;
    v52 = v51 & 0xFFFFFFFB | (4 * ((v101 >> 2) & 1));
    *((_DWORD *)v43 + 12) = v52;
    v53 = v52 & 0xFFFFFFC7 | (8 * ((v101 >> 3) & 7));
    *((_DWORD *)v43 + 12) = v53;
    *((_DWORD *)v43 + 12) = v101 & 0xFFFFFFC0 | v53 & 0x3F;
    *(_OWORD *)(v43 + 52) = v102;
    *(_QWORD *)(v43 + 68) = v103;
    *((_DWORD *)v43 + 19) = v104;
    v101 &= ~1u;
    *((_QWORD *)v43 + 10) = v105;
    v54 = v106;
    v106 = 0;
    *((_QWORD *)v43 + 12) = 0;
    *((_QWORD *)v43 + 13) = 0;
    *((_QWORD *)v43 + 11) = v54;
    v55 = v107;
    v107 = 0;
    *((_QWORD *)v43 + 12) = v55;
    LODWORD(v55) = v108;
    v108 = 0;
    *((_DWORD *)v43 + 26) = v55;
    LODWORD(v55) = v109;
    v109 = 0;
    *((_DWORD *)v43 + 27) = v55;
    *((_QWORD *)v43 + 14) = 0;
    *((_QWORD *)v43 + 15) = 0;
    v56 = v110;
    v110 = 0;
    *((_QWORD *)v43 + 14) = v56;
    LODWORD(v56) = v111;
    v111 = 0;
    *((_DWORD *)v43 + 30) = v56;
    LODWORD(v56) = v112;
    v112 = 0;
    *((_DWORD *)v43 + 31) = v56;
    *((_QWORD *)v43 + 16) = 0;
    *((_QWORD *)v43 + 17) = 0;
    v57 = v113;
    v113 = 0;
    *((_QWORD *)v43 + 16) = v57;
    LODWORD(v57) = v114;
    v114 = 0;
    *((_DWORD *)v43 + 34) = v57;
    LODWORD(v57) = v115;
    v115 = 0;
    *((_DWORD *)v43 + 35) = v57;
    LODWORD(v57) = v116;
    v43[148] = v117;
    *((_DWORD *)v43 + 36) = v57;
    v58 = v118;
    v118 = 0;
    *((_QWORD *)v43 + 19) = v58;
    v59 = v119;
    v119 = 0;
    *((_QWORD *)v43 + 20) = v59;
    v60 = v120;
    v120 = 0;
    *((_QWORD *)v43 + 21) = v60;
    v61 = v121;
    v43[184] = v122;
    *((_QWORD *)v43 + 22) = v61;
    v62 = v123;
    v123 = 0;
    *((_QWORD *)v43 + 24) = v62;
    v63 = v124;
    v124 = 0;
    *((_QWORD *)v43 + 25) = v63;
    v64 = *((_DWORD *)v43 + 52) & 0xFFFFFFFE | v125 & 1;
    *((_DWORD *)v43 + 52) = v64;
    v65 = v64 & 0xFFFFFFFD | (2 * ((v125 >> 1) & 1));
    *((_DWORD *)v43 + 52) = v65;
    v66 = v65 & 0xFFFFFFFB | (4 * ((v125 >> 2) & 1));
    *((_DWORD *)v43 + 52) = v66;
    v67 = v66 & 0xFFFFFFC7 | (8 * ((v125 >> 3) & 7));
    *((_DWORD *)v43 + 52) = v67;
    *((_DWORD *)v43 + 52) = v125 & 0xFFFFFFC0 | v67 & 0x3F;
    *(_OWORD *)(v43 + 212) = v126;
    *(_QWORD *)(v43 + 228) = v127;
    *((_DWORD *)v43 + 59) = v128;
    v125 &= ~1u;
    v68 = v129;
    v129 = 0;
    *((_QWORD *)v43 + 30) = v68;
    *((_QWORD *)v43 + 31) = v130;
    v69 = v131;
    v131 = 0;
    *((_QWORD *)v43 + 32) = v69;
    v70 = v132;
    v132 = 0;
    *((_QWORD *)v43 + 33) = v70;
    v71 = v133;
    v133 = 0;
    *((_QWORD *)v43 + 35) = 0;
    *((_QWORD *)v43 + 36) = 0;
    *((_QWORD *)v43 + 34) = v71;
    v72 = v134;
    v134 = 0;
    *((_QWORD *)v43 + 35) = v72;
    LODWORD(v72) = v135;
    v135 = 0;
    *((_DWORD *)v43 + 72) = v72;
    LODWORD(v72) = v136;
    v136 = 0;
    *((_DWORD *)v43 + 73) = v72;
    *((_QWORD *)v43 + 37) = 0;
    *((_QWORD *)v43 + 38) = 0;
    v73 = v137;
    v137 = 0;
    *((_QWORD *)v43 + 37) = v73;
    LODWORD(v73) = v138;
    v138 = 0;
    *((_DWORD *)v43 + 76) = v73;
    LODWORD(v73) = v139;
    v139 = 0;
    *((_DWORD *)v43 + 77) = v73;
    v74 = v140;
    v140 = 0;
    *((_QWORD *)v43 + 39) = v74;
    v43[320] = 0;
    v43[328] = 0;
    if (v142)
    {
      v75 = v141;
      v141 = 0;
      *((_QWORD *)v43 + 40) = v75;
      v43[328] = 1;
    }
    v76 = v143;
    v77 = v145;
    *((_OWORD *)v43 + 22) = v144;
    *((_OWORD *)v43 + 23) = v77;
    *((_OWORD *)v43 + 21) = v76;
    v78 = *(_DWORD *)&v148[15];
    v79 = v146;
    v80 = *(_OWORD *)v148;
    *((_OWORD *)v43 + 25) = v147;
    *((_OWORD *)v43 + 26) = v80;
    *((_OWORD *)v43 + 24) = v79;
    *(_DWORD *)(v43 + 431) = v78;
    v81 = cf;
    cf = 0;
    *((_QWORD *)v43 + 55) = v81;
    v43[448] = v150;
    v82 = cf;
    cf = 0;
    if (v82)
      CFRelease(v82);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v124, v42);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v95, v83);
    v39 = (WTF *)((char *)v39 + 456);
    v38 -= 456;
    --v41;
    ++v40;
  }
  while (v37 != v39);
  HIDWORD(v94) = v40;
LABEL_3:
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = this;
    v30 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v29);
      }
      v5 = *((_QWORD *)this + 1);
      if (!v5)
      {
        v92 = 0;
        v88 = (unsigned int **)this;
        goto LABEL_42;
      }
    }
  }
  do
    v6 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v6 + 1, (unsigned int *)v5));
  v92 = (unsigned int *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  if (v7)
  {
    v88 = &v92;
    ++*(_DWORD *)(v7 + 548);
    v8 = *(_QWORD *)(v7 + 488);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v7 + 464), (uint64_t *)&v88, (uint64_t)&v95);
    }
  }
  v9 = *((_QWORD *)this + 1);
  v88 = (unsigned int **)this;
  if (v9)
  {
    do
LABEL_10:
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
    v89 = (unsigned int *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v151[0] = (uint64_t)&v89;
      ++*(_DWORD *)(v11 + 548);
      v12 = *(_QWORD *)(v11 + 488);
      if (v12)
      {
        if (*(_QWORD *)(v12 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), v151, (uint64_t)&v95);
      }
    }
  }
  else
  {
LABEL_42:
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = this;
    v34 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v9;
    if (!v34)
      goto LABEL_10;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v33);
    }
    v9 = *((_QWORD *)this + 1);
    if (v9)
      goto LABEL_10;
    v89 = 0;
  }
  v13 = a2[1];
  if (v13)
    goto LABEL_16;
  v13 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  *((_QWORD *)v13 + 1) = a2;
  v28 = a2[1];
  a2[1] = v13;
  if (!v28)
    goto LABEL_16;
  if (*(_DWORD *)v28 != 1)
  {
    --*(_DWORD *)v28;
    goto LABEL_16;
  }
  WTF::fastFree(v28, v27);
  v13 = a2[1];
  if (v13)
LABEL_16:
    ++*(_DWORD *)v13;
  v90 = v13;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E33F88C0;
  v14[1] = v88;
  v15 = (unsigned int **)(v14 + 2);
  v16 = v89;
  if (v89)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    *v15 = v16;
    v18 = *((_QWORD *)v16 + 1);
    if (v18)
    {
      v151[0] = (uint64_t)(v14 + 2);
      ++*(_DWORD *)(v18 + 548);
      v19 = *(_QWORD *)(v18 + 488);
      if (v19)
      {
        if (*(_QWORD *)(v19 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), v151, (uint64_t)&v95);
      }
    }
  }
  else
  {
    *v15 = 0;
  }
  v20 = v90;
  v90 = 0;
  v91 = v14;
  v14[3] = v20;
  WebCore::iterateRedirects((uint64_t *)&v92, a2, (uint64_t)&v93, (uint64_t *)&v91);
  v22 = (uint64_t)v91;
  v91 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v90;
  v90 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, v21);
    else
      --*(_DWORD *)v23;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v89, v21);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v92, v24);
  if (HIDWORD(v94))
  {
    v84 = v93;
    v85 = 456 * HIDWORD(v94);
    do
    {
      v86 = (const void *)*((_QWORD *)v84 + 55);
      *((_QWORD *)v84 + 55) = 0;
      if (v86)
        CFRelease(v86);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WTF *)((char *)v84 + 200), v25);
      WebCore::ResourceRequest::~ResourceRequest(v84, v87);
      v84 = (WTF *)((char *)v84 + 456);
      v85 -= 456;
    }
    while (v85);
  }
  result = v93;
  if (v93)
    return (WTF *)WTF::fastFree(v93, v25);
  return result;
}

void WebCore::iterateRedirects(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  char v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[7];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  char v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  if (*a1)
    v8 = *(_QWORD *)(*a1 + 8);
  else
    v8 = 0;
  if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)(v8 + 360), (uint64_t)a2) & 1) == 0)
  {
    ++*(_DWORD *)(v8 + 456);
    v9 = a2[1];
    if (!v9)
      goto LABEL_13;
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_13;
    v10 = *(_QWORD *)(v8 + 448);
    if (!v10)
      goto LABEL_13;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    for (i = 1; ; ++i)
    {
      v17 = *(_QWORD *)(v10 + 16 * v15);
      if (v17 != -1)
      {
        if (!v17)
          goto LABEL_13;
        if (v17 == v9)
          break;
      }
      v15 = (v15 + i) & v11;
    }
  }
  if (!*(_DWORD *)(a3 + 12))
  {
LABEL_13:
    v49 = 0;
    WTF::URL::invalidate((WTF::URL *)&v49);
    v18 = v49;
    if (v49)
      *v49 += 2;
    v32 = v18;
    v33 = v50;
    v34 = v51;
    v35[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v35);
    v35[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35[6] = v52;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0x10000;
    v20 = v40 & 0x80 | 4;
    v40 = v20;
    v41 = 0;
    v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v21 += 2;
      v20 = v40;
    }
    v42 = v21;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = v46 & 0xE0 | 5;
    v40 = v20 | 2;
    v22 = (WTF::StringImpl *)v49;
    v49 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v47 = 0;
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v23 + 16))(v23, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v32, v24);
    return;
  }
  WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v32, (uint64_t *)a3);
  v25 = *a1;
  if (*a1)
    v26 = *(_QWORD *)(v25 + 8);
  else
    v26 = 0;
  WebCore::CachedResourceHandle<WebCore::CachedResource>::CachedResourceHandle(&v49, v25);
  WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v50, (uint64_t)a2);
  *((_QWORD *)&v50 + 1) = *(_QWORD *)a3;
  v27 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)&v51 = v27;
  v28 = *a4;
  *a4 = 0;
  *((_QWORD *)&v51 + 1) = v28;
  WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::CompletionHandler<WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,void (&&)(WebCore::ResourceRequest &&))::$_0,void>(&v52, (uint64_t *)&v49);
  (*(void (**)(_QWORD *, uint64_t, _DWORD **, uint64_t *, uint64_t *))(*a2 + 80))(a2, v26, &v32, &v48, &v52);
  v30 = v52;
  v52 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WebCore::CachedRawResourceClient &::CrashOnOverflow,16ul,WebCore::CachedRawResourceClient &::FastMalloc> &&,WebCore::CachedRawResourceClient &::CompletionHandler<void ()(std::pair&&)> &&)::$_0::~$_0((WebCore::CachedResourceHandleBase *)&v49, v29);
  std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>::~pair(&v32, v31);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1,void,WebCore::ResourceRequest &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E33F88C0;
  v3 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

{
  WTF *v3;

  *(_QWORD *)a1 = off_1E33F88C0;
  v3 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return a1;
}

void WTF::Detail::CallableWrapper<WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1,void,WebCore::ResourceRequest &&>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  CFTypeRef v36;
  void *v37;
  WTF *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[29];
  __int16 v42;
  CFTypeRef cf;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  WTF *v47;
  uint64_t v48[3];
  _QWORD *v49;

  v1 = a1[3];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = a1[1];
      if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)(v4 + 360), *(_QWORD *)(v1 + 8)) & 1) == 0)
      {
        ++*(_DWORD *)(v4 + 456);
        v5 = *(_QWORD *)(v2 + 8);
        if (!v5)
          return;
        if (!*(_QWORD *)(v5 + 8))
          return;
        v6 = *(_QWORD *)(v4 + 448);
        if (!v6)
          return;
        v7 = *(_DWORD *)(v6 - 8);
        v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = *(_QWORD *)(v6 + 16 * v11);
          if (v13 != -1)
          {
            if (!v13)
              return;
            if (v13 == v5)
              break;
          }
          v11 = (v11 + i) & v7;
        }
      }
      v45 = v4;
      v14 = a1[2];
      if (v14)
      {
        do
          v15 = __ldaxr((unsigned int *)v14);
        while (__stlxr(v15 + 1, (unsigned int *)v14));
        v46 = (unsigned int *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        if (v16)
        {
          v48[0] = (uint64_t)&v46;
          ++*(_DWORD *)(v16 + 548);
          v17 = *(_QWORD *)(v16 + 488);
          if (v17)
          {
            if (*(_QWORD *)(v17 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v16 + 464), v48, (uint64_t)v41);
          }
        }
      }
      else
      {
        v46 = 0;
      }
      v18 = (WTF *)a1[3];
      if (v18)
        ++*(_DWORD *)v18;
      v47 = v18;
      v19 = *(uint64_t **)(v4 + 400);
      if (!v19)
      {
        v39 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v39 != -1)
        {
          v41[0] = &v49;
          v48[0] = (uint64_t)v41;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v19 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      if ((*((_BYTE *)v19 + 138) & 1) != 0)
      {
        WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1::operator()(WebCore::ResourceRequest &&)::{lambda(void)#1}::operator()((uint64_t)&v45);
      }
      else
      {
        v20 = *(uint64_t **)(v4 + 400);
        if (!v20)
        {
          v40 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v40 != -1)
          {
            v41[0] = &v49;
            v48[0] = (uint64_t)v41;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v20 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v41, (const WebCore::ResourceResponseBase *)v20);
        v21 = (const void *)v20[30];
        cf = v21;
        if (v21)
          CFRetain(v21);
        v44 = *((_BYTE *)v20 + 248);
        v22 = *(_QWORD *)(v4 + 496);
        if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0 && (*(_WORD *)(v23 + 557) & 0x2000) != 0)
          v24 = 5120;
        else
          v24 = 4096;
        v42 = v42 & 0xC3FF | v24;
        v25 = a1[3];
        if (v25)
          v26 = *(_QWORD *)(v25 + 8);
        else
          v26 = 0;
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v27 = off_1E33F88E8;
        v27[1] = v45;
        v28 = (unsigned int **)(v27 + 2);
        v29 = v46;
        if (v46)
        {
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          *v28 = v29;
          v31 = *((_QWORD *)v29 + 1);
          if (v31)
          {
            v49 = v27 + 2;
            ++*(_DWORD *)(v31 + 548);
            v32 = *(_QWORD *)(v31 + 488);
            if (v32)
            {
              if (*(_QWORD *)(v32 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v31 + 464), (uint64_t *)&v49, (uint64_t)v48);
            }
          }
        }
        else
        {
          *v28 = 0;
        }
        v33 = v47;
        v47 = 0;
        v48[0] = (uint64_t)v27;
        v27[3] = v33;
        (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v26 + 56))(v26, v4, v41, v48);
        v35 = v48[0];
        v48[0] = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = cf;
        cf = 0;
        if (v36)
          CFRelease(v36);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v41, v34);
      }
      v38 = v47;
      v47 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
          WTF::fastFree(v38, v37);
        else
          --*(_DWORD *)v38;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v46, v37);
    }
  }
}

uint64_t WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1::operator()(WebCore::ResourceRequest &&)::{lambda(void)#1}::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int j;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  _QWORD *v43;
  char v44;

  v2 = result + 16;
  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)result;
      v5 = (uint64_t *)(*(_QWORD *)result + 360);
      result = WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains(v5, *(_QWORD *)(v1 + 8));
      if ((result & 1) == 0)
      {
        ++*(_DWORD *)(v4 + 456);
        v6 = *(_QWORD *)(v3 + 8);
        if (!v6)
          return result;
        if (!*(_QWORD *)(v6 + 8))
          return result;
        v7 = *(_QWORD *)(v4 + 448);
        if (!v7)
          return result;
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v7 + 16 * v12);
          if (v14 != -1)
          {
            if (!v14)
              return result;
            if (v14 == v6)
              break;
          }
          v12 = (v12 + i) & v8;
        }
      }
      v15 = *(_QWORD *)(v4 + 392);
      if (v15)
      {
        do
          v16 = __ldaxr((unsigned int *)v15);
        while (__stlxr(v16 + 1, (unsigned int *)v15));
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v17 = off_1E33F8910;
        v17[1] = v4;
        v17[2] = v2;
        v43 = v17;
        WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer(v15, &v43);
        result = (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
        do
        {
          v19 = __ldaxr((unsigned int *)v15);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)v15));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)v15);
          v32 = *(unsigned int *)(v15 + 20);
          if ((_DWORD)v32)
          {
            v33 = *(_QWORD *)(v15 + 8);
            v34 = v33 + 16 * v32;
            do
            {
              v35 = *(unsigned int **)(v33 + 8);
              *(_QWORD *)(v33 + 8) = 0;
              if (v35)
              {
                do
                {
                  v36 = __ldaxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                {
                  v41 = v34;
                  v42 = (WTF *)v35;
                  atomic_store(1u, v35);
                  v40 = v35[6];
                  if ((_DWORD)v40 != -1)
                    ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v40])(&v44, v35 + 2);
                  *((_DWORD *)v42 + 6) = -1;
                  WTF::fastFree(v42, v18);
                  v34 = v41;
                }
              }
              v33 += 16;
            }
            while (v33 != v34);
          }
          v38 = *(WTF **)(v15 + 8);
          if ((WTF *)(v15 + 24) != v38 && v38 != 0)
          {
            *(_QWORD *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
            WTF::fastFree(v38, v18);
          }
          result = WTF::fastFree((WTF *)v15, v18);
        }
      }
      v21 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          result = WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains(v5, *(_QWORD *)(v21 + 8));
          if ((result & 1) != 0)
            return WebCore::CachedResource::didAddClient(v4, *(WTF ***)(*(_QWORD *)v2 + 8));
          ++*(_DWORD *)(v4 + 456);
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            if (*(_QWORD *)(v23 + 8))
            {
              v24 = *(_QWORD *)(v4 + 448);
              if (v24)
              {
                v25 = *(_DWORD *)(v24 - 8);
                v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
                v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
                v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
                v29 = v25 & ((v28 >> 31) ^ v28);
                for (j = 1; ; ++j)
                {
                  v31 = *(_QWORD *)(v24 + 16 * v29);
                  if (v31 != -1)
                  {
                    if (!v31)
                      return result;
                    if (v31 == v23)
                      break;
                  }
                  v29 = (v29 + j) & v25;
                }
                return WebCore::CachedResource::didAddClient(v4, *(WTF ***)(*(_QWORD *)v2 + 8));
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  ++*((_DWORD *)a1 + 2);
  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  if (!*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = *(_QWORD *)(v3 + 16 * v8);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (v10 == v2)
        break;
    }
    v8 = (v8 + i) & v4;
  }
  return 1;
}

uint64_t WebCore::CachedRawResourceClient::resourceClientType(WebCore::CachedRawResourceClient *this)
{
  return 5;
}

uint64_t WebCore::LoadableNonModuleScriptBase::load(WebCore::LoadableNonModuleScriptBase *this, WebCore::Document *a2, const WTF::URL *a3)
{
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  __int16 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::CachedResource *v17;
  void *v18;
  uint64_t v19;
  WebCore::CachedResourceClient *v20;
  uint64_t v21;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int *v28;

  v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  v8 = v6;
  if (v6)
  {
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 + 1, v6));
  }
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v23 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v23)
      {
        v26 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v23));
        v10 = v26;
      }
      v24 = *(WTF **)(v10 + 16);
      if (v24)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v25 = v10;
        WTF::fastFree(v24, v7);
        v10 = v25;
      }
      WTF::fastFree((WTF *)v10, v7);
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  if (v13)
    *(_DWORD *)v13 += 2;
  v27 = v13;
  if (*((_BYTE *)this + 160))
    v14 = 258;
  else
    v14 = 0;
  WebCore::CachedScriptFetcher::requestScriptWithCache((uint64_t)this, a2, (uint64_t)a3, (uint64_t *)this + 6, (uint64_t *)&v27, v14, (WebCore::CachedResourceHandleBase *)&v28);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v28)
    v17 = (WebCore::CachedResource *)*((_QWORD *)v28 + 1);
  else
    v17 = 0;
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 11, v17);
  if (v28 && (v19 = *((_QWORD *)v28 + 1)) != 0)
  {
    v20 = (WebCore::LoadableNonModuleScriptBase *)((char *)this + 72);
    if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v28 + 1), v20))
      (*(void (**)(uint64_t, WebCore::CachedResourceClient *))(*(_QWORD *)v19 + 88))(v19, v20);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v28, v18);
  return v21;
}

uint64_t WebCore::CachedResource::didAddClient(uint64_t this, WTF **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  _OWORD v10[5];
  WTF::StringImpl *v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  v3 = this;
  v4 = *(_QWORD *)(this + 400);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 288);
    *(_QWORD *)(v4 + 288) = v5 & 0xFDFFFFFFFFFFFFLL;
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
      this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 256));
  }
  v6 = *(_DWORD *)(v3 + 456);
  *(_DWORD *)(v3 + 456) = v6 + 1;
  if (v6 > *(_DWORD *)(v3 + 460))
    this = WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v3 + 448, a2);
  v7 = a2[1];
  if (v7)
  {
    if (*((_QWORD *)v7 + 1))
    {
      this = WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((uint64_t *)(v3 + 448), v7);
      if ((_DWORD)this)
      {
        v16 = 0;
        this = (uint64_t)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::add<int>(v3 + 360, a2, &v16, (uint64_t)v10);
        ++*(_DWORD *)(*((_QWORD *)&v10[0] + 1) + 8);
      }
    }
  }
  if ((*(_WORD *)(v3 + 557) & 0x400) == 0)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
    if ((this & 1) == 0)
    {
      v12 = 0;
      *(_OWORD *)v11 = 0u;
      memset(v10, 0, sizeof(v10));
      v13 = -1;
      v14 = -1;
      v15 = 0;
      (*((void (**)(WTF **, uint64_t, _OWORD *, _QWORD))*a2 + 2))(a2, v3, v10, 0);
      v9 = v15;
      v15 = 0;
      if (v9)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v9, v8);
      this = (uint64_t)v11[1];
      v11[1] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if (!(_DWORD)v3)
      goto LABEL_19;
    v7 = 0;
    v8 = v3 - 1;
    do
    {
      v9 = v2 + 16 * v8;
      if ((unint64_t)(*(_QWORD *)v9 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v9 + 8))
      {
        v19 = a1;
        v18 = v7;
        v17 = v8;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v2 + 16 * v8, a2);
        v8 = v17;
        a1 = v19;
        v7 = v18 + 1;
      }
    }
    while ((unint64_t)v8--);
    v2 = *(_QWORD *)a1;
    v3 = v7 != 0;
    if (v7)
    {
      *(_DWORD *)(v2 - 16) += v7;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v14 = *(_DWORD *)(v13 - 12);
      else
        v14 = 0;
      *(_DWORD *)(v13 - 12) = v14 - v7;
      v2 = *(_QWORD *)a1;
    }
    if (!v2)
      goto LABEL_3;
    v11 = *(_DWORD *)(v2 - 4);
    if (v11 < 9 || 6 * *(_DWORD *)(v2 - 12) >= v11)
    {
LABEL_19:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v20 = v3;
      v15 = a1;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v16 = *(_QWORD *)v15;
      a1 = v15;
      *(_DWORD *)(v15 + 8) = 0;
      if (!v16)
      {
        v4 = 0;
        v3 = v20;
        goto LABEL_4;
      }
      v2 = v16;
      v3 = v20;
    }
    v4 = *(_DWORD *)(v2 - 12);
    v5 = 0x7FFFFFFF;
    if (v4 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
  v3 = 0;
LABEL_3:
  v4 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
  v5 = v4;
LABEL_5:
  *(_DWORD *)(a1 + 12) = 2 * v5;
  return v3;
}

void WebCore::Layout::Line::TrimmableTrailingContent::remove(WebCore::Layout::Line::TrimmableTrailingContent *this, float a2, uint64_t a3, const WebCore::FontCascade *a4, uint64_t a5)
{
  WebCore::Layout::Line::TrimmableTrailingContent *v5;
  WebCore::Layout::Line::Run *v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;

  if (!*((_BYTE *)this + 16))
    goto LABEL_17;
  v5 = this;
  v10 = *(uint64_t **)this;
  v7 = *((_QWORD *)this + 1);
  if (v7 >= *(unsigned int *)(*(_QWORD *)this + 12))
  {
    __break(0xC471u);
  }
  else
  {
    v8 = *v10;
    v6 = (WebCore::Layout::Line::Run *)(*v10 + 120 * v7);
    v9 = *((float *)this + 7);
    if (*((_BYTE *)this + 24))
    {
      WebCore::Layout::Line::Run::removeTrailingWhitespace(v6, a4, a5, *((unsigned __int8 *)this + 24), a2);
      v9 = v9 + v11;
    }
    if (*((float *)v5 + 9) != 0.0)
      goto LABEL_18;
    while (1)
    {
      if (*((_BYTE *)v5 + 16))
      {
        v6 = *(WebCore::Layout::Line::Run **)v5;
        v12 = *((_QWORD *)v5 + 1);
        v13 = *(unsigned int *)(*(_QWORD *)v5 + 12);
        if (v12 + 1 < (unint64_t)v13)
        {
          v16 = ~v12 + v13;
          v17 = (float *)(*(_QWORD *)v6 + 120 * v12 + 144);
          do
          {
            *v17 = *v17 - v9;
            v17 += 30;
            --v16;
          }
          while (v16);
        }
        v14 = v8 + 120 * v7;
        if (*(_BYTE *)(v14 + 112))
          break;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      WebCore::Layout::Line::Run::removeTrailingLetterSpacing((uint64_t)v6);
      v9 = v9 + v18;
    }
    if (!*(_QWORD *)(v14 + 96))
    {
      v15 = *(_QWORD *)v6 + 120 * v12;
      if (v15 + 120 != *(_QWORD *)v6 + 120 * v13)
      {
        memmove((void *)v15, (const void *)(v15 + 120), 120 * ((120 * (v13 - v12) - 240) / 0x78uLL) + 120);
        LODWORD(v13) = *((_DWORD *)v6 + 3);
      }
      *((_DWORD *)v6 + 3) = v13 - 1;
    }
    *((_BYTE *)v5 + 24) = 0;
    *((_BYTE *)v5 + 8) = 0;
    *((_BYTE *)v5 + 16) = 0;
    *((_QWORD *)v5 + 4) = 0;
    *((_DWORD *)v5 + 7) = 0;
  }
}

void WebCore::Layout::Line::Run::removeTrailingWhitespace(WebCore::Layout::Line::Run *this@<X0>, const WebCore::FontCascade *a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  WebCore::Layout::Line::Run *v10;

  v6 = *((unsigned __int8 *)this + 64);
  if (!*((_BYTE *)this + 64))
    goto LABEL_17;
  a4 = (unint64_t)this;
  a5 = *((float *)this + 13);
  if (*((_BYTE *)this + 80))
  {
    v6 = *((_QWORD *)this + 2);
    if ((*(_BYTE *)(v6 + 43) & 4) != 0)
    {
      v10 = this;
      this = (WebCore::Layout::Line::Run *)*((_QWORD *)this + 1);
      if ((*((_WORD *)this + 6) & 0x20) == 0)
        goto LABEL_19;
      a4 = *((unsigned __int8 *)v10 + 112);
      if (!*((_BYTE *)v10 + 112))
        goto LABEL_17;
      a2 = (const WebCore::FontCascade *)*((_QWORD *)v10 + 9);
      a3 = *((_QWORD *)v10 + 12) + *((_QWORD *)v10 + 11);
      if ((unint64_t)a2 >= a3 - 1)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x1942A5AD8);
      }
      v7 = *((_QWORD *)this + 15);
      if (!v7)
        goto LABEL_16;
      v5 = *(unsigned int *)(v7 + 4);
      if (v5 <= (int)a3 - 1)
        goto LABEL_16;
      v5 = *(_QWORD *)(v7 + 8);
      a4 = (a3 - 1);
      if ((*(_BYTE *)(v7 + 16) & 4) == 0)
        goto LABEL_18;
      v8 = *(unsigned __int8 *)(v5 + a4);
      goto LABEL_13;
    }
  }
  while (1)
  {
    v6 = *(unsigned __int8 *)(a4 + 112);
    if (*(_BYTE *)(a4 + 112))
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    v8 = *(unsigned __int16 *)(v5 + 2 * a4);
LABEL_13:
    v9 = v8 == 32;
    a4 = (unint64_t)v10;
    if (v9)
    {
      a5 = WebCore::Layout::TextUtil::trailingWhitespaceWidth(this, (const WebCore::Layout::InlineTextBox *)(*(_QWORD *)(v6 + 32) + 32), a2, a3);
LABEL_16:
      a4 = (unint64_t)v10;
    }
  }
  --*(_QWORD *)(a4 + 96);
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 64) = 0;
  *(float *)(a4 + 28) = *(float *)(a4 + 28) - a5;
}

uint64_t WebCore::Page::takeAnyMediaCanStartListener(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *started;
  __int128 v7;
  void *v8;
  __int128 v9;

  v2 = this;
  if (a2)
  {
    v3 = a2;
    while (1)
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v4 = *(_QWORD *)(v3 + 296);
        if (v4)
        {
          *(_DWORD *)(v4 + 24) += 2;
          started = WebCore::Document::takeAnyMediaCanStartListener((WebCore::Document *)v4);
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
          if (started)
            break;
        }
      }
      this = WebCore::FrameTree::traverseNext((_QWORD *)(v3 + 48), 0);
      v3 = this;
      if (!this)
        goto LABEL_2;
    }
    std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>::pair[abi:sn180100]<WebCore::MediaCanStartListener&,WebCore::Document&,0>((unsigned int **)&v9, (uint64_t)started, *(_QWORD *)(v3 + 296));
    v7 = v9;
    v9 = 0uLL;
    *(_OWORD *)v2 = v7;
    *(_BYTE *)(v2 + 16) = 1;
    return std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>::~pair((uint64_t)&v9, v8);
  }
  else
  {
LABEL_2:
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::ScrollView::setFrameRect(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  const CGRect *v20;
  uint64_t v21;
  CGRect v22;

  ++*((_DWORD *)this + 2);
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
      v4 = (void *)objc_msgSend(v4, "superview");
    objc_msgSend(v4, "frame");
    v22.origin.x = v16;
    v22.origin.y = v17;
    v22.size.width = v18;
    v22.size.height = v19;
    result = WebCore::enclosingIntRect(&v22, v20);
    v6 = v21;
  }
  else
  {
    result = *((_QWORD *)this + 6);
    v6 = *((_QWORD *)this + 7);
  }
  v7 = *(_DWORD *)a2 == (_DWORD)result && *((_DWORD *)a2 + 1) == HIDWORD(result);
  if (!v7 || (*((_DWORD *)a2 + 2) == (_DWORD)v6 ? (v8 = *((_DWORD *)a2 + 3) == HIDWORD(v6)) : (v8 = 0), !v8))
  {
    WebCore::Widget::setFrameRect(this, a2);
    if (*((_QWORD *)this + 5))
    {
LABEL_23:
      if (*((_BYTE *)this + 321) || v6 == *((_QWORD *)a2 + 1))
      {
        *(_QWORD *)&v22.origin.x = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
        result = WebCore::ScrollView::updateScrollbars((uint64_t)this, (const WebCore::IntPoint *)&v22);
      }
      else
      {
        result = (*(uint64_t (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 568))(this, 1);
      }
      goto LABEL_26;
    }
    v9 = *((_QWORD *)this + 18);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 - 4);
      v11 = (_QWORD *)(v9 + 8 * v10);
      if (*(_DWORD *)(v9 - 12))
      {
        v12 = (_QWORD *)*((_QWORD *)this + 18);
        if ((_DWORD)v10)
        {
          v13 = 8 * v10;
          v12 = (_QWORD *)*((_QWORD *)this + 18);
          while ((unint64_t)(*v12 + 1) <= 1)
          {
            ++v12;
            v13 -= 8;
            if (!v13)
            {
              v12 = v11;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v12 = (_QWORD *)(v9 + 8 * v10);
    }
    else
    {
      v12 = 0;
      v10 = 0;
    }
    v11 = (_QWORD *)(v9 + 8 * v10);
LABEL_20:
    if (v9)
      v14 = (_QWORD *)(v9 + 8 * *(unsigned int *)(v9 - 4));
    else
      v14 = 0;
    while (v12 != v14)
    {
      v15 = v12 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 136))(*v12);
      v12 = v11;
      if (v15 != v11)
      {
        v12 = v15;
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          if (++v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    goto LABEL_23;
  }
LABEL_26:
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

uint64_t WebCore::LocalFrameView::availableContentSizeChanged(WebCore::LocalFrameView *this, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = (int)a2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v4 && (*((_BYTE *)this + 480) != 3 || !*((_BYTE *)this + 321)))
    WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v4 + 1328), a2);
  WebCore::LocalFrameView::updateLayoutViewport(this);
  WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameView *)((char *)this + 336));
  result = WebCore::ScrollableArea::availableContentSizeChanged((WebCore::LocalFrameView *)((char *)this + 64));
  if (!*((_QWORD *)this + 5))
  {
    if (v2)
    {
      v6 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
      return WebCore::ScrollView::updateScrollbars((uint64_t)this, (const WebCore::IntPoint *)&v6);
    }
  }
  return result;
}

uint64_t WebCore::Style::Scope::didChangeViewportSize(uint64_t this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  char v15;

  v2 = (_QWORD *)this;
  v3 = *(_QWORD *)(this + 16);
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  v5 = *(_QWORD *)(this + 24);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    v3 = v5;
  }
  else
  {
    if (!*(_BYTE *)(v3 + 3407))
      goto LABEL_3;
    v6 = *(_QWORD **)(v3 + 2696);
    if (v6)
    {
      while (1)
      {
        v7 = *(_QWORD *)(*v6 + 8);
        if (v7)
          break;
        v6 = (_QWORD *)v6[2];
        if (!v6)
          goto LABEL_14;
      }
LABEL_8:
      if (*(_BYTE *)(v7 + 193))
        this = WebCore::Style::Scope::didChangeViewportSize(*(WebCore::Style::Scope **)(v7 + 216));
      while (1)
      {
        v6 = (_QWORD *)v6[2];
        if (!v6)
          break;
        v7 = *(_QWORD *)(*v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)(v3 + 2712);
          goto LABEL_8;
        }
      }
      ++*(_DWORD *)(v3 + 2712);
    }
  }
LABEL_14:
  v8 = v2[4];
  if (!v8)
    goto LABEL_15;
  WebCore::Style::MatchedDeclarationsCache::clearEntriesAffectedByViewportUnits((WebCore::Style::MatchedDeclarationsCache *)(v8 + 416), a2);
  v9 = v2[37];
  v10 = v2[2];
  v15 = 0;
  v14[0] = v10;
  v14[1] = v9;
  v14[2] = &v15;
  WebCore::Style::CustomPropertyRegistry::invalidatePropertiesWithViewportUnits(WebCore::Document &)::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>>((uint64_t)v14, (_QWORD *)(v9 + 8));
  this = WebCore::Style::CustomPropertyRegistry::invalidatePropertiesWithViewportUnits(WebCore::Document &)::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>>((uint64_t)v14, (_QWORD *)(v9 + 16));
  if (v15)
  {
    if (!v2[3])
    {
      this = *(_QWORD *)(v2[2] + 1272);
      if (this)
        this = (uint64_t)WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)this);
    }
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v3 + 80);
  if (v12)
  {
    while ((*(_WORD *)(v12 + 28) & 8) == 0)
    {
      v12 = *(_QWORD *)(v12 + 56);
      if (!v12)
        goto LABEL_15;
    }
    *(_DWORD *)(v12 + 24) += 2;
    do
    {
      v13 = v12;
      if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A611CLL);
        }
        if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x63) & 0x20) != 0)
          WebCore::Element::invalidateStyle((WebCore::Node *)v12);
      }
      this = v12;
      while (1)
      {
        this = WebCore::NodeTraversal::nextIncludingPseudo((WebCore::NodeTraversal *)this, 0, v11);
        v12 = this;
        if (!this)
          break;
        if ((*(_WORD *)(this + 28) & 8) != 0)
        {
          *(_DWORD *)(this + 24) += 2;
          break;
        }
      }
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    while (v12);
LABEL_15:
    if (!v3)
      return this;
  }
  v4 = *(_DWORD *)(v3 + 24) - 2;
LABEL_3:
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  return this;
}

uint64_t WebCore::SettingsBase::setNeedsRelayoutAllFrames(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderObject *v4;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 160);
      if (v3)
      {
        do
        {
          if (!*(_BYTE *)(v3 + 144))
          {
            if (WebCore::Frame::ownerRenderer((WebCore::Frame *)v3))
            {
              v4 = (WebCore::RenderObject *)WebCore::Frame::ownerRenderer((WebCore::Frame *)v3);
              WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(v4);
            }
          }
          this = WebCore::FrameTree::traverseNext((_QWORD *)(v3 + 48), 0);
          v3 = this;
        }
        while (this);
      }
    }
  }
  return this;
}

uint64_t WebCore::FrameTree::traverseNext(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  result = a1[5];
  if (!result)
  {
    v4 = *(_QWORD *)(*a1 + 8);
    if (v4 == a2)
      return 0;
    result = a1[3];
    if (!result)
    {
      if (a2)
      {
        while (1)
        {
          v7 = *(_QWORD *)(v4 + 56);
          if (!v7)
            break;
          v4 = *(_QWORD *)(v7 + 8);
          if (v4 == a2 || v4 == 0)
            break;
          result = *(_QWORD *)(v4 + 72);
          if (result)
            return result;
        }
      }
      else
      {
        while (1)
        {
          v5 = *(_QWORD *)(v4 + 56);
          if (!v5)
            break;
          v4 = *(_QWORD *)(v5 + 8);
          if (!v4)
            break;
          result = *(_QWORD *)(v4 + 72);
          if (result)
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

double WebCore::LocalFrameView::willDoLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;
  int v11;
  unsigned __int8 ***v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  WebCore::RenderObject *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 ***v36;
  char *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned __int8 **v42;
  int v43;
  unsigned __int8 **v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  char v47;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 46) != 49)
    return result;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 296) + 1272);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v5 = *(_QWORD *)(v4 + 80);
      if (v5)
      {
        while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            goto LABEL_16;
        }
        v6 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
        v8 = *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24);
LABEL_10:
        if (v7 == v6)
        {
          if (v6 != v8)
            goto LABEL_16;
        }
        else if (v7 != v8)
        {
          while (1)
          {
            v5 = *(_QWORD *)(v5 + 56);
            if (!v5)
              goto LABEL_16;
            if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
            {
              v7 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
              goto LABEL_10;
            }
          }
        }
        v35 = *(_QWORD *)(v5 + 64);
        if ((v35 & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((v35 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942A6778);
          }
          WebCore::RenderElement::setChildNeedsLayout((WebCore::RenderObject *)(v35 & 0xFFFFFFFFFFFFLL), 1);
        }
      }
    }
  }
LABEL_16:
  v9 = *(unsigned __int8 *)(a1 + 475);
  if (*(_BYTE *)(a1 + 475))
  {
    if (*(_BYTE *)(a1 + 1204))
    {
      v32 = *(_QWORD *)(a1 + 1196);
    }
    else if (!*(_BYTE *)(a1 + 321)
           || (v32 = *(_QWORD *)(a1 + 248), (int)v32 < 1)
           || SHIDWORD(v32) < 1
           || !*(_BYTE *)(a1 + 312))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 1, 0);
    }
    *(_QWORD *)(a1 + 1032) = v32;
    *(_DWORD *)(a1 + 1152) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 88) + 40) + 588);
    *(_BYTE *)(a1 + 1368) = 1;
    v46 = 0;
    v45 = 0;
    WebCore::LocalFrameView::calculateScrollbarModesForLayout(a1, (char *)&v46, (char *)&v45, 1);
    if (*(_BYTE *)(a1 + 481) != 2)
    {
      if (!*(_BYTE *)(a1 + 318))
      {
        *(_BYTE *)(a1 + 318) = 1;
        if (*(_QWORD *)(a1 + 40))
          WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)a1, 0);
      }
      v33 = v45;
      if (!v45)
      {
        LOBYTE(v44) = 0;
        v47 = 0;
        if (*(_QWORD *)(a1 + 40))
        {
          v36 = &v44;
          WebCore::ScrollView::platformScrollbarModes(a1, (uint64_t)&v44, (uint64_t)&v47);
        }
        else
        {
          v36 = (unsigned __int8 ***)(a1 + 168);
        }
        WebCore::ScrollView::setScrollbarModes(a1, *(unsigned __int8 *)v36, 2, *(unsigned __int8 *)(a1 + 313), 0);
      }
      v34 = v46;
      if (!v46)
      {
        LOBYTE(v44) = 0;
        v47 = 0;
        if (*(_QWORD *)(a1 + 40))
        {
          WebCore::ScrollView::platformScrollbarModes(a1, (uint64_t)&v44, (uint64_t)&v47);
          v37 = &v47;
        }
        else
        {
          v37 = (char *)(a1 + 169);
        }
        WebCore::ScrollView::setScrollbarModes(a1, 1, *v37, 0, *(unsigned __int8 *)(a1 + 314));
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 328) + 24) + 8) + 968))
      {
        v43 = v9;
        v38 = (unsigned __int8 *)WebCore::ScrollableArea::scrollAnimator((WebCore::ScrollableArea *)(a1 + 64));
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 24);
        if (v39)
          v40 = *(_QWORD *)(v39 + 8);
        else
          v40 = 0;
        WebCore::Page::wheelEventTestMonitor(v40, &v44);
        WebCore::ScrollAnimator::setWheelEventTestMonitor(v38, &v44);
        v42 = v44;
        v44 = 0;
        if (v42)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v42, v41);
        v9 = v43;
      }
      WebCore::ScrollView::setScrollbarModes(a1, v34, v33, 0, 0);
      WebCore::ScrollView::setScrollbarsSuppressed(a1, 0, 1);
      goto LABEL_24;
    }
  }
  else
  {
    v46 = 0;
    v45 = 0;
    WebCore::LocalFrameView::calculateScrollbarModesForLayout(a1, (char *)&v46, (char *)&v45, 1);
  }
  v11 = v46;
  LOBYTE(v44) = 0;
  v47 = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    v12 = &v44;
    WebCore::ScrollView::platformScrollbarModes(a1, (uint64_t)&v44, (uint64_t)&v47);
  }
  else
  {
    v12 = (unsigned __int8 ***)(a1 + 168);
  }
  v13 = *(unsigned __int8 *)v12;
  v14 = v45;
  if (v11 != v13
    || ((LOBYTE(v44) = 0, v47 = 0, *(_QWORD *)(a1 + 40))
      ? (WebCore::ScrollView::platformScrollbarModes(a1, (uint64_t)&v44, (uint64_t)&v47), v15 = &v47)
      : (v15 = (char *)(a1 + 169)),
        v14 != *v15))
  {
    WebCore::ScrollView::setScrollbarModes(a1, v11, v14, 0, 0);
  }
LABEL_24:
  v16 = *(_DWORD *)(a1 + 1016);
  v17 = *(_DWORD *)(a1 + 1020);
  if (*(int *)(a1 + 248) >= 1 && *(int *)(a1 + 252) >= 1 && *(_BYTE *)(a1 + 321))
    v18 = *(_QWORD *)(a1 + 248);
  else
    v18 = WebCore::ScrollView::sizeForUnobscuredContent((id *)a1, 0);
  LODWORD(v19) = (_DWORD)v18 << 6;
  if ((int)v18 < -33554432)
    LODWORD(v19) = 0x80000000;
  if ((int)v18 <= 0x1FFFFFF)
    v19 = v19;
  else
    v19 = 0x7FFFFFFFLL;
  if (SHIDWORD(v18) >= -33554432)
    v20 = HIDWORD(v18) << 6;
  else
    v20 = 0x80000000;
  if (SHIDWORD(v18) <= 0x1FFFFFF)
    v21 = v20;
  else
    v21 = 0x7FFFFFFFLL;
  if ((_DWORD)v19 != v16 || (_DWORD)v21 != v17)
  {
    *(_QWORD *)(a1 + 1016) = v19 | (v21 << 32);
    *(_BYTE *)(a1 + 476) = 1;
    if (!v9)
      WebCore::LocalFrameView::markRootOrBodyRendererDirty(*(WebCore::LocalFrameView **)(*(_QWORD *)(a1 + 328) + 296));
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 120);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      v24 = *(_DWORD *)(v23 + 24);
      *(_DWORD *)(v23 + 24) = v24 + 2;
      if ((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A6658);
        }
        v25 = (*(unsigned __int8 *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          LOBYTE(v25) = 0;
        if ((v25 & 1) != 0)
          v26 = (WebCore::RenderObject *)(*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL);
        else
          v26 = 0;
      }
      else
      {
        v26 = 0;
      }
      if (v24)
      {
        *(_DWORD *)(v23 + 24) = v24;
      }
      else if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
      }
      if (v26)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
        if (v27)
        {
          v28 = *(_QWORD *)(v27 + 1944);
          if (v28)
          {
            v29 = *(unsigned int *)(v28 + 64) | ((unint64_t)*(unsigned __int8 *)(v28 + 68) << 32);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 8);
              if (v30)
              {
                v31 = *(unsigned __int8 *)(v30 + 46);
                if ((v31 == 103 || v31 == 83) && (*(_DWORD *)(v30 + 20) & 0x2F8) != 0x200)
                {
                  WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(v26);
                  return WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 3) + 8) + 40) + 8) + 1944) + 248) + 336));
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Frame::ownerRenderer(WebCore::Frame *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v5 = 0;
LABEL_10:
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    return v5;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    v4 = (*(unsigned __int8 *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v4) = 0;
    if ((v4 & 1) != 0)
      v5 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v5 = 0;
    goto LABEL_10;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LocalFrameView::calculateScrollbarModesForLayout(uint64_t result, char *a2, char *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v7 = result;
  *(_BYTE *)(result + 1328) = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(result + 328) + 120);
  if (v8)
  {
    result = *(_QWORD *)(v8 + 8);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1248))(result);
      if ((_DWORD)result == 1)
      {
        *a2 = 1;
        *a3 = 1;
        return result;
      }
    }
  }
  if (a4)
    v9 = *(_BYTE *)(v7 + 1364) == 0;
  else
    v9 = 0;
  v10 = v9;
  *a2 = v10;
  *a3 = v10;
  v11 = *(_QWORD *)(v7 + 464);
  if (!v11 || !*(_QWORD *)(v11 + 8))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 296);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 1272);
      if (v13)
      {
        if ((*(_WORD *)(v13 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          v14 = *(_QWORD *)(v13 + 80);
          if (v14)
          {
            while ((*(_WORD *)(v14 + 28) & 0x10) == 0)
            {
              v14 = *(_QWORD *)(v14 + 56);
              if (!v14)
                goto LABEL_29;
            }
            v15 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
            v16 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
            if (v16 != v15)
            {
LABEL_23:
              if (v16 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
              {
                while (1)
                {
                  v14 = *(_QWORD *)(v14 + 56);
                  if (!v14)
                    break;
                  if ((*(_WORD *)(v14 + 28) & 0x10) != 0)
                  {
                    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
                    if (v16 != v15)
                      goto LABEL_23;
                    break;
                  }
                }
              }
            }
          }
        }
        else
        {
          v14 = 0;
        }
LABEL_29:
        v17 = *(_QWORD *)(v13 + 64);
        v18 = v17 & 0xFFFFFFFFFFFFLL;
        if ((v17 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v17 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A6A9CLL);
        }
        if (v14 && (*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942A6ABCLL);
          }
          v19 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
          if (v19 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          {
            *a3 = 1;
            *a2 = 1;
            return result;
          }
          if (v18 && v19 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            if ((*(_BYTE *)((v17 & 0xFFFFFFFFFFFFLL) + 0x16) & 8) == 0
              && (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1C00) == 0
              && (*(_WORD *)(v13 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              result = WebCore::LocalFrameView::applyOverflowToViewport(v7, *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL, a2, a3);
              v20 = 2;
LABEL_42:
              *(_BYTE *)(v7 + 1328) = v20;
              return result;
            }
LABEL_44:
            result = WebCore::LocalFrameView::applyOverflowToViewport(v7, v18, a2, a3);
            v20 = 1;
            goto LABEL_42;
          }
        }
        else if (v18)
        {
          goto LABEL_44;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ScrollView::setScrollbarModes(uint64_t this, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;

  v5 = this;
  if (*(_QWORD *)(this + 40))
  {
    v18 = 0;
    v9 = a2;
    v11 = a5;
    v13 = a4;
    v15 = a3;
    this = WebCore::ScrollView::platformScrollbarModes(this, (uint64_t)&v18 + 1, (uint64_t)&v18);
    v6 = (unsigned __int8 *)&v18 + 1;
    a2 = v9;
    a5 = v11;
    a4 = v13;
    a3 = v15;
  }
  else
  {
    v6 = (unsigned __int8 *)(this + 168);
  }
  if (*v6 == a2 || *(_BYTE *)(v5 + 313))
  {
    v7 = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 168) = a2;
    v7 = 1;
  }
  if (*(_QWORD *)(v5 + 40))
  {
    v19 = 0;
    v14 = a4;
    v16 = a3;
    v10 = v7;
    v12 = a5;
    this = WebCore::ScrollView::platformScrollbarModes(v5, (uint64_t)&v19 + 1, (uint64_t)&v19);
    v8 = (unsigned __int8 *)&v19;
    v7 = v10;
    a5 = v12;
    a4 = v14;
    a3 = v16;
  }
  else
  {
    v8 = (unsigned __int8 *)(v5 + 169);
  }
  if (*v8 != a3 && !*(_BYTE *)(v5 + 314))
  {
    *(_BYTE *)(v5 + 169) = a3;
    v7 = 1;
  }
  if (a4)
    *(_BYTE *)(v5 + 313) = 1;
  if (a5)
    *(_BYTE *)(v5 + 314) = 1;
  if (v7)
  {
    if (*(_QWORD *)(v5 + 40))
    {
      return WebCore::ScrollView::platformSetScrollbarModes((id *)v5);
    }
    else
    {
      v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 1);
      return WebCore::ScrollView::updateScrollbars(v5, (const WebCore::IntPoint *)&v17);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::applyOverflowToViewport(uint64_t result, uint64_t a2, char *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;

  v7 = *(_QWORD *)(result + 328);
  if (*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7)
  {
    v8 = result;
    v9 = *(_QWORD *)(v7 + 24);
    if (v9)
    {
      result = *(_QWORD *)(v9 + 8);
      if (result)
      {
        v10 = (*(_DWORD *)result)++;
        v11 = *(_BYTE *)(result + 1098) ? 1.0 : *(float *)(result + 356);
        if (v10)
        {
          *(_DWORD *)result = v10;
        }
        else
        {
          WebCore::Page::~Page((WebCore::Page *)result);
          result = WTF::fastFree(v32, v33);
        }
        if (v11 > 1.0)
          goto LABEL_45;
      }
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 720))(v8);
    v12 = (unsigned int *)(result + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (*(_QWORD *)(*(_QWORD *)(result + 128) + 8) == result
      && (v28 = *(_QWORD *)(result + 24)) != 0
      && (v29 = *(_QWORD *)(v28 + 8)) != 0)
    {
      v14 = *(_DWORD *)(v29 + 664);
    }
    else
    {
      v14 = 0;
    }
    do
    {
      v15 = __ldaxr(v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v12));
    if (!v16)
    {
      atomic_store(1u, v12);
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = off_1E31FE290;
      v35[1] = v12;
      v38 = v35;
      WTF::ensureOnMainThread();
      result = (uint64_t)v38;
      if (v38)
        result = (*(uint64_t (**)(_QWORD *))(*v38 + 8))(v38);
    }
    if (v14)
    {
LABEL_45:
      v22 = 0;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 720))(v8);
      v17 = (unsigned int *)(result + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      if (*(_QWORD *)(*(_QWORD *)(result + 128) + 8) == result
        && (v30 = *(_QWORD *)(result + 24)) != 0
        && (v31 = *(_QWORD *)(v30 + 8)) != 0)
      {
        v19 = *(_DWORD *)(v31 + 668);
      }
      else
      {
        v19 = 0;
      }
      do
      {
        v20 = __ldaxr(v17);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v17));
      if (!v21)
      {
        atomic_store(1u, v17);
        v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v36 = off_1E31FE290;
        v36[1] = v17;
        v39 = v36;
        WTF::ensureOnMainThread();
        result = (uint64_t)v39;
        if (v39)
          result = (*(uint64_t (**)(_QWORD *))(*v39 + 8))(v39);
      }
      v22 = v19 == 0;
    }
  }
  else
  {
    v22 = 1;
  }
  v23 = *(_DWORD *)(a2 + 96);
  v24 = (v23 >> 10) & 7;
  v25 = (unsigned __int16)v23 >> 13;
  v26 = *(unsigned __int8 *)(a2 + 46);
  if (v26 == 83)
  {
    ++*(_DWORD *)(a2 + 16);
    result = WebCore::RenderSVGRoot::isEmbeddedThroughFrameContainingSVGDocument((WebCore::RenderSVGRoot *)a2);
    v37 = *(_DWORD *)(a2 + 16);
    if (!v37)
      goto LABEL_61;
    if ((_DWORD)result)
    {
      v25 = 1;
      v24 = 1;
    }
    *(_DWORD *)(a2 + 16) = v37 - 1;
    v26 = *(unsigned __int8 *)(a2 + 46);
  }
  if (v26 != 103)
    goto LABEL_27;
  ++*(_DWORD *)(a2 + 16);
  result = WebCore::LegacyRenderSVGRoot::isEmbeddedThroughFrameContainingSVGDocument((WebCore::LegacyRenderSVGRoot *)a2);
  v27 = *(_DWORD *)(a2 + 16);
  if (!v27)
  {
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x1942A6E38);
  }
  *(_DWORD *)(a2 + 16) = v27 - 1;
  if ((result & 1) != 0)
  {
    v25 = 1;
    goto LABEL_43;
  }
LABEL_27:
  if (v24 == 3)
  {
    v34 = 2;
    goto LABEL_44;
  }
  if (v24 == 4)
  {
    v34 = 0;
    goto LABEL_44;
  }
  if ((v24 - 1) > 1)
    goto LABEL_30;
LABEL_43:
  v34 = v22;
LABEL_44:
  *a3 = v34;
LABEL_30:
  if ((v25 - 1) < 2)
  {
LABEL_57:
    *a4 = v22;
    return result;
  }
  if (v25 == 3)
  {
    v22 = 2;
    goto LABEL_57;
  }
  if (v25 == 4)
  {
    v22 = 0;
    goto LABEL_57;
  }
  return result;
}

uint64_t WebCore::ScrollableArea::edgePinnedState(WebCore::ScrollableArea *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  int v14;
  int v15;
  int v16;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 424))(this);
  v6 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 432))(this);
  v7 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
  if (v7)
    v8 = *(_BYTE *)(v7 + 136) == 0;
  else
    v8 = 1;
  v9 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this);
  if (v9)
  {
    v10 = *(_BYTE *)(v9 + 136) == 0;
    v11 = (int)v4 <= SHIDWORD(v5) || *(_BYTE *)(v9 + 136) == 0;
  }
  else
  {
    v10 = 1;
    v11 = 1;
  }
  v12 = v3 >= (int)v6 || v8;
  if ((int)v4 >= SHIDWORD(v6))
    v10 = 1;
  if (v3 <= (int)v5 || v8)
    v14 = 0x1000000;
  else
    v14 = 0;
  if (v10)
    v15 = 0x10000;
  else
    v15 = 0;
  if (v12)
    v16 = 256;
  else
    v16 = 0;
  return v16 | v14 | v11 | v15;
}

uint64_t WebCore::ScrollView::updateScrollbars(uint64_t this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16[2];

  if (!*(_BYTE *)(this + 319))
  {
    v2 = this;
    if (!*(_BYTE *)(this + 315) && !*(_QWORD *)(this + 40))
    {
      v4 = *(_DWORD *)a2;
      v3 = *((_DWORD *)a2 + 1);
      v5 = this + 64;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 64) + 624))(this + 64) & 1) == 0
        && *(_BYTE *)(v2 + 104)
        && !*(_BYTE *)(v2 + 316))
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 64) + 424))(v2 + 64);
        v7 = v6;
        v8 = HIDWORD(v6);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 456))(v2);
        v10 = HIDWORD(v9);
        if (v4 >= (int)v9)
          v11 = v9;
        else
          v11 = v4;
        if (v7 <= v11)
          v4 = v11;
        else
          v4 = v7;
        if (v3 < SHIDWORD(v9))
          LODWORD(v10) = v3;
        if ((int)v8 <= (int)v10)
          v3 = v10;
        else
          v3 = v8;
      }
      this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 832))(v2 + 64, 0, 1);
      v12 = v4 == (_DWORD)this && v3 == HIDWORD(this);
      if (!v12 || *(_BYTE *)(v2 + 111))
      {
        v16[0] = (float)v4;
        v16[1] = (float)v3;
        v13 = *(_QWORD *)(v2 + 80);
        if (!v13)
        {
          v13 = WTF::fastMalloc((WTF *)0xB0);
          *(_QWORD *)v13 = off_1E3405EF0;
          *(_QWORD *)(v13 + 8) = v5;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = &off_1E3406D78;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_QWORD *)(v13 + 80) = 0;
          *(_QWORD *)(v13 + 88) = v13;
          *(_QWORD *)(v13 + 96) = 0;
          *(_QWORD *)(v13 + 104) = 0;
          *(_QWORD *)(v13 + 110) = 0;
          *(_QWORD *)(v13 + 120) = 0;
          v14 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = v5;
          *(_BYTE *)(v14 + 24) = 0;
          *(_QWORD *)(v13 + 128) = v14;
          *(_BYTE *)(v13 + 136) = 0;
          *(_QWORD *)v13 = off_1E3354B08;
          *(_QWORD *)(v13 + 168) = 0;
          *(_DWORD *)(v13 + 140) = 0;
          *(_DWORD *)(v13 + 143) = 0;
          *(_QWORD *)(v13 + 156) = 0;
          *(_QWORD *)(v13 + 148) = 0;
          v15 = *(_QWORD *)(v2 + 80);
          *(_QWORD *)(v2 + 80) = v13;
          if (v15)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            v13 = *(_QWORD *)(v2 + 80);
          }
        }
        this = WebCore::ScrollAnimator::scrollToPositionWithoutAnimation((float32x2_t *)v13, v16, 1);
        *(_BYTE *)(v2 + 111) = 0;
      }
    }
  }
  return this;
}

unint64_t `non-virtual thunk to'WebCore::LocalFrameView::minimumScrollPosition(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;

  v1 = -*((_DWORD *)this + 8);
  v2 = v1 - (*((_QWORD *)this + 4) & 0xFFFFFFFF00000000);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 128) + 8) == *((_QWORD *)this + 33)
    && *((_BYTE *)this + 1265) == 2)
  {
    v5 = (unint64_t)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 496))(this) >> 32;
    v6 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 528))(this);
    v7 = v6 + (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 536))(this) + v5;
    v8 = (((unint64_t)(v7
                                          - ((unint64_t)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 488))(this) >> 32)) << 32)
        - ((unint64_t)*((unsigned int *)this + 9) << 32)) >> 32;
    v2 = (unint64_t)(v8 & ~((int)v8 >> 31)) << 32;
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 128) + 8) == *((_QWORD *)this + 33)
      && *((_BYTE *)this + 1265) == 1)
    {
      v2 = WebCore::LocalFrameView::minimumScrollPosition((WebCore::LocalFrameView *)((char *)this - 64)) & 0xFFFFFFFF00000000;
    }
  }
  return v2 & 0xFFFFFFFF00000000 | v1;
}

unint64_t WebCore::LocalFrameView::minimumScrollPosition(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v1 = -*((_DWORD *)this + 24);
  v2 = v1 - (*((_QWORD *)this + 12) & 0xFFFFFFFF00000000);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41)
    && *((_BYTE *)this + 1329) == 2)
  {
    v5 = -*((_DWORD *)this + 24);
    v4 = WebCore::LocalFrameView::maximumScrollPosition(this);
    v1 = v5;
    v2 = v4;
  }
  return v2 & 0xFFFFFFFF00000000 | v1;
}

unint64_t WebCore::LocalFrameView::maximumScrollPosition(WebCore::LocalFrameView *this)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v5;

  v2 = WebCore::ScrollView::maximumScrollPosition(this);
  v3 = v2;
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41)
    && *((_BYTE *)this + 1329) == 1)
  {
    v5 = v2;
    v2 = WebCore::LocalFrameView::minimumScrollPosition(this);
    v3 = v5;
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::isRubberBandInProgress(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (*((_BYTE *)this + 254))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (!v2 || (v3 = *(WebCore::Page **)(v2 + 8)) == 0 || (v4 = WebCore::Page::scrollingCoordinator(v3)) == 0)
  {
    v11 = *((_QWORD *)this + 2);
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 216))(v11);
    return 0;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256)) != 0)
  {
    v8 = *(_QWORD *)(v7 + 224);
    v9 = *(_QWORD *)(v7 + 232);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 400))(v4, v8, v9);
}

unint64_t `non-virtual thunk to'WebCore::LocalFrameView::maximumScrollPosition(WebCore::LocalFrameView *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 496))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 528))(this);
  v6 = v5 + (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 536))(this) + v4;
  v7 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 488))(this);
  v8 = *((_QWORD *)this + 4);
  v9 = (((unint64_t)(v6 - HIDWORD(v7)) << 32) - (v8 & 0xFFFFFFFF00000000)) >> 32;
  v10 = (unint64_t)(v9 & ~((int)v9 >> 31)) << 32;
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 128) + 8) == *((_QWORD *)this + 33)
    && *((_BYTE *)this + 1265) == 1)
  {
    v10 = -(uint64_t)(v8 & 0xFFFFFFFF00000000);
  }
  return v10 | (v3 - ((_DWORD)v7 + (_DWORD)v8)) & ~((v3 - ((int)v7 + (int)v8)) >> 31);
}

uint64_t WebCore::ScrollableArea::scrollPositionChanged(WebCore::ScrollableArea *this, const WebCore::IntPoint *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  WebCore::Widget *v7;
  WebCore::Scrollbar *v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  WebCore::Widget *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;

  v4 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  v5 = v4;
  v6 = HIDWORD(v4);
  v18 = ((*((_QWORD *)this + 4) & 0xFFFFFFFF00000000) + *(_QWORD *)a2) & 0xFFFFFFFF00000000 | (*((_QWORD *)this + 4)
                                                                                                 + *(_QWORD *)a2);
  (*(void (**)(WebCore::ScrollableArea *, unint64_t *))(*(_QWORD *)this + 840))(this, &v18);
  v7 = (WebCore::Widget *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this);
  v8 = (WebCore::Scrollbar *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
  if (!v8
    || (v13 = v8,
        WebCore::Scrollbar::offsetDidChange(v8),
        !(*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)v13 + 272))(v13))
    || (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 672))(this))
  {
    if (!v7)
      goto LABEL_3;
    goto LABEL_13;
  }
  if (v7)
  {
    v14 = WebCore::Widget::boundsRect(v13);
    v16 = v15;
    v18 = v14;
    v19 = v15;
    WebCore::Widget::frameRect(v7);
    LODWORD(v19) = v17 + v16;
    (*(void (**)(WebCore::Widget *, unint64_t *))(*(_QWORD *)v13 + 32))(v13, &v18);
LABEL_13:
    WebCore::Scrollbar::offsetDidChange(v7);
    if (!(*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)v7 + 272))(v7)
      || (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 680))(this))
    {
      goto LABEL_3;
    }
    goto LABEL_15;
  }
  v7 = v13;
LABEL_15:
  WebCore::Widget::invalidate((id *)v7);
LABEL_3:
  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  if ((_DWORD)result != v5 || HIDWORD(result) != (_DWORD)v6)
  {
    v11 = WebCore::ScrollableArea::scrollbarsController(this);
    v12 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
    *(float *)&v18 = (float)(v12 - v5);
    *((float *)&v18 + 1) = (float)(HIDWORD(v12) - (int)v6);
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v11 + 40))(v11, &v18);
    (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 776))(this);
    return (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 760))(this);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::scrollPosition(WebCore::ScrollView *this)
{
  return (*(uint64_t (**)(WebCore::ScrollView *, _QWORD, uint64_t))(*(_QWORD *)this + 832))(this, 0, 1);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::setScrollOffset(_BYTE *a1, unint64_t *a2)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;

  v3 = *a2;
  if (a1[40])
  {
    v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 496))(a1);
    v8 = v7;
    v9 = HIDWORD(v7);
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 528))(a1);
    v11 = v10 + (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 536))(a1) + v9;
    v12 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 488))(a1);
    v13 = v8 - v12;
    v14 = v11 - HIDWORD(v12);
    if ((int)v3 < v8 - (int)v12)
      v13 = v3;
    v15 = v13 & ~(v13 >> 31);
    if (SHIDWORD(v3) < v14)
      v14 = HIDWORD(v3);
    v3 = v15 | ((unint64_t)(v14 & ~(v14 >> 31)) << 32);
  }
  v5 = *((_QWORD *)a1 - 8);
  v4 = a1 - 64;
  v16 = (v3 - (*((_QWORD *)v4 + 12) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v3
                                                                                     - *((_QWORD *)v4 + 12));
  return (*(uint64_t (**)(_BYTE *, unint64_t *))(v5 + 304))(v4, &v16);
}

unsigned int *WebCore::AsyncScrollingCoordinator::reconcileScrollingState(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  char v7;
  uint64_t v8;
  float32x2_t **v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *result;
  double v23;
  uint64_t v24;
  WebCore::RenderView *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::RenderLayerCompositor *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::RenderLayerCompositor *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::RenderLayerCompositor *v36;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  float v46;
  float v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WebCore::RenderView *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  _BYTE *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int *v71;
  WebCore::RenderLayerCompositor *v72;
  WebCore::RenderLayerCompositor *v73;
  WTF *v74;
  void *v75;
  WebCore::RenderLayerCompositor *v76;
  WebCore::RenderLayerCompositor *v77;
  WTF *v78;
  void *v79;
  WebCore::RenderLayerCompositor *v80;
  WebCore::RenderLayerCompositor *v81;
  WTF *v82;
  void *v83;
  WebCore::RenderLayerCompositor *v84;
  WebCore::RenderLayerCompositor *v85;
  WTF *v86;
  void *v87;
  WebCore::RenderLayerCompositor *v88;
  WebCore::RenderLayerCompositor *v89;
  WTF *v90;
  void *v91;
  WebCore::ScrollingCoordinator *v92;
  WebCore::LocalFrameView *v93;
  int v94;
  unint64_t v95;
  char v96;
  char v97;
  _DWORD v98[2];
  _BYTE v99[16];
  char v100;
  unsigned int *v101;
  _BYTE *v102;
  unsigned int **v103;

  v7 = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a2 + 108) = a5;
  v99[0] = 0;
  v100 = 0;
  v101 = (unsigned int *)a2;
  v102 = v99;
  v8 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v8 == -1)
  {
    v92 = (WebCore::ScrollingCoordinator *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::ScrollingCoordinator::scrolledContentsLayerForFrameView(v92, v93);
  }
  v15 = (float32x2_t **)(a2 + 64);
  v103 = &v101;
  ((void (*)(unsigned int ***, uint64_t))off_1E3403C98[v8])(&v103, a4 + 4);
  *(_BYTE *)(a2 + 104) = 0;
  v16 = roundf(*a3);
  v17 = 0x7FFFFFFFLL;
  v18 = (int)v16;
  if (v16 <= -2147500000.0)
    v18 = 0x80000000;
  if (v16 < 2147500000.0)
    v17 = v18;
  v19 = roundf(a3[1]);
  v20 = 0x7FFFFFFF00000000;
  v21 = 0x8000000000000000;
  if (v19 > -2147500000.0)
    v21 = (unint64_t)(int)v19 << 32;
  if (v19 < 2147500000.0)
    v20 = v21;
  v101 = (unsigned int *)(v20 | v17);
  result = (unsigned int *)WebCore::ScrollableArea::notifyScrollPositionChanged(v15, (const WebCore::IntPoint *)&v101);
  *(_BYTE *)(a2 + 104) = 1;
  *(_BYTE *)(a2 + 108) = v7;
  if ((a5 & 1) == 0 && (_DWORD)a7)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
    if (v62 && (v63 = *(_QWORD *)(v62 + 1944)) != 0 && (v64 = *(_QWORD *)(*(_QWORD *)(v63 + 144) + 256)) != 0)
    {
      v65 = *(_QWORD *)(v64 + 224);
      v66 = *(_QWORD *)(v64 + 232);
    }
    else
    {
      v65 = 0;
      v66 = 0;
    }
    if (a6)
    {
      if (!v100)
        goto LABEL_11;
      WebCore::LayoutRect::LayoutRect((int *)&v101, (const WebCore::FloatRect *)v99);
    }
    else
    {
      WebCore::LocalFrameView::rectForFixedPositionLayout((WebCore::LocalFrameView *)a2, v23);
      v101 = v67;
      v102 = v68;
    }
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int **, uint64_t))(*(_QWORD *)a1 + 368))(a1, v65, v66, &v101, a7);
  }
LABEL_11:
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
  if (v24)
  {
    v25 = *(WebCore::RenderView **)(v24 + 1944);
    if (v25)
    {
      result = (unsigned int *)*((_QWORD *)v25 + 50);
      if (!result)
      {
        v72 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        result = (unsigned int *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v72, v25);
        v73 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v25 + 50);
        *((_QWORD *)v25 + 50) = result;
        if (v73)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v73);
          WTF::fastFree(v74, v75);
          result = (unsigned int *)*((_QWORD *)v25 + 50);
        }
      }
      if (*((_QWORD *)result + 31))
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 1944);
          if (v27)
          {
            v28 = *(WebCore::RenderLayerCompositor **)(v27 + 400);
            if (!v28)
            {
              v76 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
              v28 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v76, (WebCore::RenderView *)v27);
              v77 = *(WebCore::RenderLayerCompositor **)(v27 + 400);
              *(_QWORD *)(v27 + 400) = v28;
              if (v77)
              {
                WebCore::RenderLayerCompositor::~RenderLayerCompositor(v77);
                WTF::fastFree(v78, v79);
                v28 = *(WebCore::RenderLayerCompositor **)(v27 + 400);
              }
            }
            v29 = *(_QWORD *)(*((_QWORD *)v28 + 1) + 144);
            if (!v29)
              goto LABEL_21;
            v30 = *(_QWORD *)(v29 + 256);
            if (!v30 || !*(_BYTE *)(v30 + 294))
              goto LABEL_21;
            v27 = *(_QWORD *)(v30 + 88);
            if (v27)
            {
              v97 = 0;
              ++*(_DWORD *)(v27 + 8);
LABEL_23:
              v31 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
              if (v31)
              {
                v32 = *(_QWORD *)(v31 + 1944);
                if (v32)
                {
                  v33 = *(WebCore::RenderLayerCompositor **)(v32 + 400);
                  if (!v33)
                  {
                    v80 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                    v33 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v80, (WebCore::RenderView *)v32);
                    v81 = *(WebCore::RenderLayerCompositor **)(v32 + 400);
                    *(_QWORD *)(v32 + 400) = v33;
                    if (v81)
                    {
                      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v81);
                      WTF::fastFree(v82, v83);
                      v33 = *(WebCore::RenderLayerCompositor **)(v32 + 400);
                    }
                  }
                  v32 = *((_QWORD *)v33 + 29);
                  if (v32)
                  {
                    v96 = 0;
                    ++*(_DWORD *)(v32 + 8);
                    goto LABEL_28;
                  }
                }
              }
              else
              {
                v32 = 0;
              }
              v96 = 1;
LABEL_28:
              v34 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
              v94 = a7;
              if (v34)
              {
                v35 = *(_QWORD *)(v34 + 1944);
                if (v35)
                {
                  v36 = *(WebCore::RenderLayerCompositor **)(v35 + 400);
                  if (!v36)
                  {
                    v84 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                    v36 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v84, (WebCore::RenderView *)v35);
                    v85 = *(WebCore::RenderLayerCompositor **)(v35 + 400);
                    *(_QWORD *)(v35 + 400) = v36;
                    if (v85)
                    {
                      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v85);
                      WTF::fastFree(v86, v87);
                      v36 = *(WebCore::RenderLayerCompositor **)(v35 + 400);
                    }
                  }
                  v35 = *((_QWORD *)v36 + 28);
                  if (v35)
                  {
                    v37 = 0;
                    ++*(_DWORD *)(v35 + 8);
LABEL_33:
                    v38 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)a2);
                    v39 = v38;
                    v95 = HIDWORD(v38);
                    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 720))(a2);
                    v41 = (unsigned int *)(v40 + 8);
                    do
                      v42 = __ldaxr(v41);
                    while (__stlxr(v42 + 1, v41));
                    v43 = 0.0;
                    if (*(_QWORD *)(*(_QWORD *)(v40 + 128) + 8) == v40)
                    {
                      v60 = *(_QWORD *)(v40 + 24);
                      if (v60)
                      {
                        v61 = *(_QWORD *)(v60 + 8);
                        if (v61)
                          v43 = *(float *)(v61 + 372);
                      }
                    }
                    do
                    {
                      v44 = __ldaxr(v41);
                      v45 = v44 - 1;
                    }
                    while (__stlxr(v45, v41));
                    if (!v45)
                    {
                      atomic_store(1u, v41);
                      v69 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v69 = off_1E31FE290;
                      *((_QWORD *)v69 + 1) = v41;
                      v101 = v69;
                      WTF::ensureOnMainThread();
                      v70 = v101;
                      v101 = 0;
                      if (v70)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 8))(v70);
                    }
                    v103 = 0;
                    if (v32)
                    {
                      if (v43 == 0.0)
                      {
                        v47 = 0.0;
                      }
                      else
                      {
                        v46 = fmaxf(a3[1], 0.0);
                        if (v46 >= v43)
                          v47 = 0.0;
                        else
                          v47 = v43 - v46;
                      }
                      LODWORD(v103) = *(_DWORD *)(v32 + 56);
                      *((float *)&v103 + 1) = v47;
                    }
                    v98[0] = WebCore::LocalFrameView::positionForRootContentLayer((WebCore::LocalFrameView *)a2);
                    v98[1] = v48;
                    (*(void (**)(float32x2_t **))(*(_QWORD *)(a2 + 64) + 496))(v15);
                    (*(void (**)(float32x2_t **))(*(_QWORD *)(a2 + 64) + 528))(v15);
                    (*(void (**)(float32x2_t **))(*(_QWORD *)(a2 + 64) + 536))(v15);
                    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 720))(a2);
                    v49 = result + 2;
                    do
                      v50 = __ldaxr(v49);
                    while (__stlxr(v50 + 1, v49));
                    do
                    {
                      v51 = __ldaxr(v49);
                      v52 = v51 - 1;
                    }
                    while (__stlxr(v52, v49));
                    if (!v52)
                    {
                      atomic_store(1u, v49);
                      v71 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v71 = off_1E31FE290;
                      *((_QWORD *)v71 + 1) = v49;
                      v101 = v71;
                      WTF::ensureOnMainThread();
                      result = v101;
                      v101 = 0;
                      if (result)
                        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                    }
                    if ((a5 & 1) != 0 || !v94)
                    {
                      v53 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
                      if (v53)
                      {
                        v54 = *(WebCore::RenderView **)(v53 + 1944);
                        if (v54)
                        {
                          result = (unsigned int *)*((_QWORD *)v54 + 50);
                          if (!result)
                          {
                            v88 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                            result = (unsigned int *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v88, v54);
                            v89 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v54 + 50);
                            *((_QWORD *)v54 + 50) = result;
                            if (v89)
                            {
                              WebCore::RenderLayerCompositor::~RenderLayerCompositor(v89);
                              WTF::fastFree(v90, v91);
                              result = (unsigned int *)*((_QWORD *)v54 + 50);
                            }
                          }
                          v55 = *((_QWORD *)result + 30);
                          if (v55)
                          {
                            v56 = ((uint64_t (*)(float32x2_t **, _QWORD, uint64_t))(*v15)[104])(v15, 0, 1);
                            *(float *)&v101 = (float)(int)v56;
                            *((float *)&v101 + 1) = (float)SHIDWORD(v56);
                            result = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int **))(*(_QWORD *)v55 + 168))(v55, &v101);
                          }
                        }
                      }
                      if (v27)
                      {
                        *(float *)&v101 = (float)v39 * 0.015625;
                        *((float *)&v101 + 1) = (float)(int)v95 * 0.015625;
                        result = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int **))(*(_QWORD *)v27 + 128))(v27, &v101);
                      }
                      v58 = v96;
                      v57 = v97;
                      if (v32)
                        result = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int ***))(*(_QWORD *)v32 + 128))(v32, &v103);
                      if (!v35)
                        goto LABEL_61;
                      v59 = 16;
                    }
                    else
                    {
                      result = (unsigned int *)WebCore::AsyncScrollingCoordinator::reconcileScrollPosition((WebCore::RenderView *)a2, 2);
                      if (v27)
                      {
                        *(float *)&v101 = (float)v39 * 0.015625;
                        *((float *)&v101 + 1) = (float)(int)v95 * 0.015625;
                        result = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int **))(*(_QWORD *)v27 + 144))(v27, &v101);
                      }
                      v58 = v96;
                      v57 = v97;
                      if (v32)
                        result = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int ***))(*(_QWORD *)v32 + 144))(v32, &v103);
                      if (!v35)
                        goto LABEL_61;
                      v59 = 18;
                    }
                    result = (unsigned int *)(*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v35 + 8 * v59))(v35, v98);
LABEL_61:
                    if ((v37 & 1) == 0)
                    {
                      if (*(_DWORD *)(v35 + 8) == 1)
                        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
                      else
                        --*(_DWORD *)(v35 + 8);
                    }
                    if ((v58 & 1) == 0)
                    {
                      if (*(_DWORD *)(v32 + 8) == 1)
                        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
                      else
                        --*(_DWORD *)(v32 + 8);
                    }
                    if ((v57 & 1) == 0)
                    {
                      if (*(_DWORD *)(v27 + 8) == 1)
                        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
                      else
                        --*(_DWORD *)(v27 + 8);
                    }
                    return result;
                  }
                }
              }
              else
              {
                v35 = 0;
              }
              v37 = 1;
              goto LABEL_33;
            }
          }
LABEL_22:
          v97 = 1;
          goto LABEL_23;
        }
LABEL_21:
        v27 = 0;
        goto LABEL_22;
      }
    }
  }
  return result;
}

uint64_t WebCore::ScrollingCoordinator::scrolledContentsLayerForFrameView(uint64_t this, WebCore::LocalFrameView *a2)
{
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WTF *v6;
  void *v7;

  if (this)
  {
    v2 = *(WebCore::RenderView **)(this + 1944);
    if (v2)
    {
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
      if (!v3)
      {
        v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v2);
        v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        *((_QWORD *)v2 + 50) = v3;
        if (v5)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
          WTF::fastFree(v6, v7);
          v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
        }
      }
      return *((_QWORD *)v3 + 31);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t WebCore::ScrollableArea::notifyScrollPositionChanged(float32x2_t **this, const WebCore::IntPoint *a2)
{
  float32x2_t *v4;
  float32x2_t *v5;
  float32x2_t *v7;

  WebCore::ScrollableArea::scrollPositionChanged((WebCore::ScrollableArea *)this, a2);
  v4 = this[2];
  if (!v4)
  {
    WebCore::ScrollAnimator::create((WebCore::ScrollAnimator *)this, (uint64_t *)&v7);
    v4 = v7;
    v5 = this[2];
    this[2] = v7;
    if (v5)
    {
      (*(void (**)(float32x2_t *))(*(_QWORD *)v5 + 8))(v5);
      v4 = this[2];
    }
  }
  v7 = (float32x2_t *)vcvt_f32_s32(*(int32x2_t *)a2);
  return WebCore::ScrollAnimator::setCurrentPosition(v4, (float32x2_t *)&v7, 0);
}

uint64_t WebCore::ScrollableArea::scrollAnimator(WebCore::ScrollableArea *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    WebCore::ScrollAnimator::create(this, &v4);
    result = v4;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v4;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return *((_QWORD *)this + 2);
    }
  }
  return result;
}

uint64_t WebCore::ScrollAnimator::setCurrentPosition(float32x2_t *this, float32x2_t *a2, int a3)
{
  float32x2_t v4;
  float32x2_t v5;
  uint64_t result;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float32x2_t v20;
  _DWORD v21[4];

  v4 = *a2;
  v20 = vsub_f32(*a2, this[15]);
  this[15] = v4;
  if (a3)
  {
    result = WebCore::ScrollAnimator::notifyPositionChanged((WebCore::ScrollableArea **)this, (const WebCore::FloatSize *)&v20);
  }
  else
  {
    v5 = this[1];
    (*(void (**)(float32x2_t))(**(_QWORD **)&v5 + 776))(v5);
    result = (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v5 + 760))(v5);
  }
  if (this[13])
  {
    v7 = roundf((*(float (**)(_QWORD))(**(_QWORD **)&this[11] + 96))(*(_QWORD *)&this[11]));
    v9 = 0x7FFFFFFFLL;
    v10 = 0x80000000;
    if (v7 > -2147500000.0)
      v10 = (int)v7;
    if (v7 < 2147500000.0)
      v9 = v10;
    v11 = roundf(v8);
    v12 = 0x7FFFFFFF00000000;
    v13 = 0x8000000000000000;
    if (v11 > -2147500000.0)
      v13 = (unint64_t)(int)v11 << 32;
    if (v11 < 2147500000.0)
      v12 = v13;
    v14 = v12 | v9;
    v15 = (uint64_t)this[13];
    v21[0] = (*(float (**)(_QWORD))(**(_QWORD **)&this[11] + 160))(*(_QWORD *)&this[11]);
    v21[1] = v16;
    v21[2] = v17;
    v21[3] = v18;
    v19 = (*(float (**)(_QWORD))(**(_QWORD **)&this[11] + 152))(*(_QWORD *)&this[11]);
    result = WebCore::ScrollSnapAnimatorState::setNearestScrollSnapIndexForOffset(v15, v14, (uint64_t)v21, v19);
    if ((_DWORD)result)
      this[14].i8[0] = 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::invalidateScrollAnchoringElement(WebCore::LocalFrameView *this, const WebCore::RenderObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 161);
  if (result)
    return WebCore::ScrollAnchoringController::invalidateAnchorElement(result, a2);
  return result;
}

WebCore::ScrollAnchoringController *`non-virtual thunk to'WebCore::LocalFrameView::updateScrollAnchoringElement(WebCore::LocalFrameView *this)
{
  WebCore::ScrollAnchoringController *result;

  result = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 161);
  if (result)
    return (WebCore::ScrollAnchoringController *)WebCore::ScrollAnchoringController::updateAnchorElement(result);
  return result;
}

uint64_t WebCore::ScrollingEffectsController::updateActiveScrollSnapIndexForClientOffset(uint64_t this)
{
  uint64_t v1;
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float v14;
  _DWORD v15[4];

  if (*(_QWORD *)(this + 80))
  {
    v1 = this;
    v2 = roundf((*(float (**)(_QWORD))(**(_QWORD **)(this + 64) + 96))(*(_QWORD *)(this + 64)));
    v4 = 0x7FFFFFFFLL;
    v5 = 0x80000000;
    if (v2 > -2147500000.0)
      v5 = (int)v2;
    if (v2 < 2147500000.0)
      v4 = v5;
    v6 = roundf(v3);
    v7 = 0x7FFFFFFF00000000;
    v8 = 0x8000000000000000;
    if (v6 > -2147500000.0)
      v8 = (unint64_t)(int)v6 << 32;
    if (v6 < 2147500000.0)
      v7 = v8;
    v9 = v7 | v4;
    v10 = *(_QWORD *)(v1 + 80);
    v15[0] = (*(float (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 160))(*(_QWORD *)(v1 + 64));
    v15[1] = v11;
    v15[2] = v12;
    v15[3] = v13;
    v14 = (*(float (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 152))(*(_QWORD *)(v1 + 64));
    this = WebCore::ScrollSnapAnimatorState::setNearestScrollSnapIndexForOffset(v10, v9, (uint64_t)v15, v14);
    if ((_DWORD)this)
      *(_BYTE *)(v1 + 88) = 1;
  }
  return this;
}

double WebCore::LocalFrameView::rectForFixedPositionLayout(WebCore::LocalFrameView *this, double result)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const CGRect *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  void *v10;
  CGRect v11;

  v2 = *((_QWORD *)this + 41);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 136) + 704) & 0x1000) == 0)
    return WebCore::LocalFrameView::viewportConstrainedVisibleContentRect(this);
  if (!*((_BYTE *)this + 1104))
  {
    v3 = *(_QWORD *)(v2 + 296);
    if (!v3 || !*(_QWORD *)(v3 + 1944))
    {
      v4 = (void *)*((_QWORD *)this + 5);
      if (v4)
      {
        v10 = (void *)*((_QWORD *)this + 5);
        if (objc_msgSend(v4, "conformsToProtocol:", &unk_1EE342188))
          objc_msgSend((id)objc_msgSend(v10, "superview"), "frame");
        else
          objc_msgSend(v10, "frame");
        v11.origin.x = v6;
        v11.origin.y = v7;
        v11.size.width = v8;
        v11.size.height = v9;
        WebCore::enclosingIntRect(&v11, v5);
      }
    }
  }
  return result;
}

uint64_t WebCore::reconcileLayerPositionsRecursive(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v3 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 72);
    v5 = 8 * v3;
    do
    {
      result = *v4;
      if (*(unsigned __int8 *)(*v4 + 16) >= 2u)
        result = WebCore::reconcileLayerPositionsRecursive();
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void WebCore::LocalFrameView::markRootOrBodyRendererDirty(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::RenderBox *v3;
  uint64_t v4;
  const WebCore::RenderBox *v5;
  WebCore::RenderBox *v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 159);
  if (v1 && (v2 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(v2 + 45) & 4) != 0)
      v3 = (WebCore::RenderBox *)v2;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = WebCore::Document::bodyOrFrameset(this);
  if (v3 && v4)
  {
    v7 = *(_QWORD *)(v4 + 64);
    v6 = (WebCore::RenderBox *)(v7 & 0xFFFFFFFFFFFFLL);
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0
      && (WebCore::RenderBox::stretchesToViewport(v6, v5) & 1) != 0)
    {
      goto LABEL_14;
    }
  }
  else if (!v3)
  {
    return;
  }
  v6 = v3;
  if (WebCore::RenderBox::stretchesToViewport(v3, v5))
LABEL_14:
    WebCore::RenderElement::setChildNeedsLayout(v6, 1);
}

uint64_t WebCore::RenderBox::stretchesToViewport(WebCore::RenderBox *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  if (*(_BYTE *)(v3 + 3384) != 2)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v7 = v6 + 4;
  v8 = v6 + 12;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v7 = v8;
  if (*(_BYTE *)(v7 + 4))
    return 0;
  result = 0;
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x800) == 0 && (v9 & 0x1800000) != 0x1000000)
  {
    if ((*(_QWORD *)(v3 + 1272) == v2
       || (*((_BYTE *)this + 45) & 1) == 0
       && (*(_WORD *)(v2 + 28) & 0x10) != 0
       && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      && !WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(this, a2))
    {
      return *((_BYTE *)this + 20) & 1;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::Document::bodyOrFrameset(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 159);
  if (!v1
    || (*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    return 0;
  }
  result = *(_QWORD *)(v1 + 80);
  if (result)
  {
    while ((*(_WORD *)(result + 28) & 0x10) == 0)
    {
      result = *(_QWORD *)(result + 56);
      if (!result)
        return result;
    }
    v3 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    v4 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
    if (v4 != v3)
    {
LABEL_9:
      if (v4 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      {
        while (1)
        {
          result = *(_QWORD *)(result + 56);
          if (!result)
            break;
          if ((*(_WORD *)(result + 28) & 0x10) != 0)
          {
            v4 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
            if (v4 != v3)
              goto LABEL_9;
            return result;
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::HTMLFrameElementBase::scrollingMode(WebCore::HTMLFrameElementBase *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int **v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v2 = *((_QWORD *)this + 13);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (int **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::scrollingAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::scrollingAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::scrollingAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (int **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (int **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (!*v6)
    return 0;
  v9 = *v8;
  v10 = v8[1];
  *v8 += 2;
  if (v10 == 2)
  {
    v13 = *((_QWORD *)v8 + 1);
    if ((v8[4] & 4) != 0)
    {
      if ((*(_BYTE *)v13 & 0xDF) != 0x4E)
        goto LABEL_14;
      v14 = *(unsigned __int8 *)(v13 + 1);
    }
    else
    {
      if ((*(_WORD *)v13 & 0xFFDF) != 0x4E)
        goto LABEL_14;
      v14 = *(unsigned __int16 *)(v13 + 2);
    }
    if ((v14 & 0xFFFFFFDF) != 0x4F)
      goto LABEL_14;
LABEL_24:
    v11 = 1;
    goto LABEL_15;
  }
  if (v10 == 8)
  {
    v15 = *((_QWORD *)v8 + 1);
    if ((v8[4] & 4) != 0)
    {
      if ((*(_BYTE *)v15 & 0xDF) != 0x4E
        || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x53
        || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x43
        || (*(_BYTE *)(v15 + 4) & 0xDF) != 0x52
        || (*(_BYTE *)(v15 + 5) & 0xDF) != 0x4F
        || (*(_BYTE *)(v15 + 6) & 0xDF) != 0x4C)
      {
        goto LABEL_14;
      }
      v16 = *(unsigned __int8 *)(v15 + 7);
    }
    else
    {
      if ((*(_WORD *)v15 & 0xFFDF) != 0x4E
        || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x53
        || (*(_WORD *)(v15 + 6) & 0xFFDF) != 0x43
        || (*(_WORD *)(v15 + 8) & 0xFFDF) != 0x52
        || (*(_WORD *)(v15 + 10) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v15 + 12) & 0xFFDF) != 0x4C)
      {
        goto LABEL_14;
      }
      v16 = *(unsigned __int16 *)(v15 + 14);
    }
    if ((v16 & 0xFFFFFFDF) != 0x4C)
    {
LABEL_14:
      v11 = 0;
      goto LABEL_15;
    }
    goto LABEL_24;
  }
  if (v10 != 3)
    goto LABEL_14;
  v17 = *((_QWORD *)v8 + 1);
  if ((v8[4] & 4) != 0)
  {
    if ((*(_BYTE *)v17 & 0xDF) != 0x4F || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x46)
      goto LABEL_14;
    v18 = *(unsigned __int8 *)(v17 + 2);
  }
  else
  {
    if ((*(_WORD *)v17 & 0xFFDF) != 0x4F || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x46)
      goto LABEL_14;
    v18 = *(unsigned __int16 *)(v17 + 4);
  }
  v11 = (v18 & 0xFFFFFFDF) == 70;
LABEL_15:
  if (v9)
    *v8 = v9;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
  return v11;
}

uint64_t WebCore::ScrollView::setScrollbarsSuppressed(uint64_t this, int a2, uint64_t a3)
{
  WebCore::ScrollView *v3;
  id *v4;
  uint64_t v5;
  CGFloat v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  const CGRect *v14;
  uint64_t v15;
  void *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  const CGRect *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  CGRect v25;

  if (*(unsigned __int8 *)(this + 318) != a2)
  {
    v3 = (WebCore::ScrollView *)this;
    *(_BYTE *)(this + 318) = a2;
    if (*(_QWORD *)(this + 40))
      return WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)this, a3);
    if ((_DWORD)a3 && (a2 & 1) == 0)
    {
      v4 = *(id **)(this + 152);
      if (v4)
        WebCore::Widget::invalidate(v4);
      v5 = *((_QWORD *)v3 + 20);
      if (!v5)
        goto LABEL_9;
      v7 = *(void **)(v5 + 40);
      if (v7)
      {
        v24 = *((_QWORD *)v3 + 20);
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EE342188))
          v7 = (void *)objc_msgSend(v7, "superview");
        objc_msgSend(v7, "frame");
        v25.origin.x = v10;
        v25.origin.y = v11;
        v25.size.width = v12;
        v25.size.height = v13;
        WebCore::enclosingIntRect(&v25, v14);
        v22 = v15;
        v16 = *(void **)(v24 + 40);
        if (v16)
        {
          if (objc_msgSend(*(id *)(v24 + 40), "conformsToProtocol:", &unk_1EE342188))
            v16 = (void *)objc_msgSend(v16, "superview");
          objc_msgSend(v16, "frame", v22);
          v25.origin.x = v17;
          v25.origin.y = v18;
          v25.size.width = v19;
          v25.size.height = v20;
          WebCore::enclosingIntRect(&v25, v21);
          v5 = v24;
          v8 = v23;
          goto LABEL_13;
        }
        v8 = v15;
        v5 = v24;
      }
      else
      {
        v8 = *(_DWORD *)(v5 + 56);
      }
      v9 = *(_QWORD *)(v5 + 56);
LABEL_13:
      v25.origin.x = 0.0;
      *(_QWORD *)&v25.origin.y = v9 & 0xFFFFFFFF00000000 | v8;
      (*(void (**)(uint64_t, CGRect *))(*(_QWORD *)v5 + 32))(v5, &v25);
LABEL_9:
      *(_QWORD *)&v25.origin.x = WebCore::ScrollView::scrollCornerRect(v3);
      v25.origin.y = v6;
      return (*(uint64_t (**)(WebCore::ScrollView *, CGRect *))(*(_QWORD *)v3 + 32))(v3, &v25);
    }
  }
  return this;
}

uint64_t WebCore::ScrollView::scrollCornerRect(WebCore::ScrollView *this)
{
  char *v2;
  void *v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  const CGRect *v38;
  int v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  const CGRect *v44;
  int32x2_t v45[2];
  CGRect v46;

  v45[0] = 0;
  v45[1] = 0;
  v2 = (char *)this + 64;
  if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 400))((char *)this + 64)
    || (v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 400))(v2),
        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8) & 1) == 0))
  {
    if (!(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 392))(v2)
      || (v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 392))(v2),
          ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 272))(v21) & 1) == 0))
    {
      v3 = (void *)*((_QWORD *)this + 5);
      if (v3)
      {
        if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
          v3 = (void *)objc_msgSend(v3, "superview");
        objc_msgSend(v3, "frame");
        v46.origin.x = v34;
        v46.origin.y = v35;
        v46.size.width = v36;
        v46.size.height = v37;
        WebCore::enclosingIntRect(&v46, v38);
        HIDWORD(v4) = v39;
      }
      else
      {
        v4 = *((_QWORD *)this + 7);
      }
      v5 = (*(float (**)(WebCore::ScrollView *, _QWORD))(*(_QWORD *)this + 408))(this, 0);
      if (*((_QWORD *)this + 19))
      {
        WebCore::Widget::frameRect(this);
        v23 = v22;
        WebCore::Widget::frameRect(*((WebCore::Widget **)this + 19));
        if (v23 > v24)
        {
          if (((*(uint64_t (**)(char *))(*(_QWORD *)v2 + 704))(v2) & 1) != 0)
          {
            v25 = 0;
          }
          else
          {
            WebCore::Widget::frameRect(*((WebCore::Widget **)this + 19));
            v25 = v26;
          }
          WebCore::Widget::frameRect(this);
          v28 = HIDWORD(v27);
          WebCore::Widget::frameRect(*((WebCore::Widget **)this + 19));
          v30 = v28 - v29;
          WebCore::Widget::frameRect(this);
          LODWORD(v28) = v31;
          WebCore::Widget::frameRect(*((WebCore::Widget **)this + 19));
          LODWORD(v28) = v28 - v32;
          WebCore::Widget::frameRect(*((WebCore::Widget **)this + 19));
          *(_QWORD *)&v46.origin.x = __PAIR64__(v30, v25);
          *(_QWORD *)&v46.origin.y = __PAIR64__(v33, v28);
          WebCore::IntRect::unite(v45, (int32x2_t *)&v46);
        }
      }
      v6 = *((_QWORD *)this + 20);
      if (v6)
      {
        v9 = *(void **)(v6 + 40);
        if (v9)
        {
          if (objc_msgSend(*(id *)(v6 + 40), "conformsToProtocol:", &unk_1EE342188))
            v9 = (void *)objc_msgSend(v9, "superview");
          objc_msgSend(v9, "frame");
          v46.origin.x = v40;
          v46.origin.y = v41;
          v46.size.width = v42;
          v46.size.height = v43;
          WebCore::enclosingIntRect(&v46, v44);
        }
        else
        {
          v10 = *(_QWORD *)(v6 + 56);
        }
        v11 = (int)(float)((float)SHIDWORD(v4) - v5);
        if (SHIDWORD(v10) < v11)
        {
          if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v2 + 704))(v2, v10) & 1) != 0)
          {
            v15 = 0;
          }
          else
          {
            WebCore::Widget::frameRect(this);
            v13 = v12;
            WebCore::Widget::frameRect(*((WebCore::Widget **)this + 20));
            v15 = v13 - v14;
          }
          WebCore::Widget::frameRect(*((WebCore::Widget **)this + 20));
          v17 = (int)(float)((*(float (**)(WebCore::ScrollView *, _QWORD))(*(_QWORD *)this + 408))(this, 0)+ (float)v16);
          WebCore::Widget::frameRect(*((WebCore::Widget **)this + 20));
          v19 = v18;
          WebCore::Widget::frameRect(*((WebCore::Widget **)this + 20));
          *(_QWORD *)&v46.origin.x = __PAIR64__(v17, v15);
          LODWORD(v46.origin.y) = v19;
          HIDWORD(v46.origin.y) = v11 - v20;
          WebCore::IntRect::unite(v45, (int32x2_t *)&v46);
        }
      }
    }
  }
  return (uint64_t)v45[0];
}

uint64_t WebCore::FrameView::invalidateRect(WebCore::FrameView *this, const WebCore::IntRect *a2)
{
  uint64_t result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _BYTE v40[20];
  __int128 v41;
  char v42;

  result = (*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this);
  v6 = (unsigned int *)(result + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)this + 4);
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    v9 = *(_QWORD *)(result + 120);
    if (v9)
    {
      result = *(_QWORD *)(v9 + 8);
      if (result)
      {
        v10 = *(_DWORD *)(result + 24);
        *(_DWORD *)(result + 24) = v10 + 2;
        if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942A9170);
          }
          v11 = (*(unsigned __int8 *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
          if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
            LOBYTE(v11) = 0;
          if ((v11 & 1) != 0)
            v12 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
          else
            v12 = 0;
        }
        else
        {
          v12 = 0;
        }
        if (v10)
        {
          *(_DWORD *)(result + 24) = v10;
        }
        else if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
        }
        if (v12)
        {
          ++*(_DWORD *)(v12 + 16);
          v14 = *(_DWORD *)a2;
          v13 = *((_DWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 1);
          result = WebCore::RenderBox::contentBoxLocation((WebCore::RenderBox *)v12);
          v18 = v14 + (int)result / 64 + ((int)(result - (v16 & 0xFFFFFFC0) + 32) >> 6);
          v19 = v13 + SHIDWORD(result) / 64 + ((int)(HIDWORD(result) - (v17 & 0xFFFFFFC0) + 32) >> 6);
          v20 = v18 << 6;
          if (v18 < -33554432)
            v20 = 0x80000000;
          if (v18 <= 0x1FFFFFF)
            v21 = v20;
          else
            v21 = 0x7FFFFFFF;
          v22 = v19 << 6;
          if (v19 < -33554432)
            v22 = 0x80000000;
          if (v19 <= 0x1FFFFFF)
            v23 = v22;
          else
            v23 = 0x7FFFFFFF;
          v24 = ((_DWORD)v15 << 6);
          if ((int)v15 < -33554432)
            v24 = 0x80000000;
          if ((int)v15 > 0x1FFFFFF)
            v24 = 0x7FFFFFFFLL;
          v25 = 0x8000000000000000;
          if (SHIDWORD(v15) >= -33554432)
            v25 = HIDWORD(v15) << 38;
          if (SHIDWORD(v15) > 0x1FFFFFF)
            v25 = 0x7FFFFFFF00000000;
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1944);
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40) + 8) + 3382))
          {
            v27 = *(_QWORD *)(v26 + 248);
            v28 = *(unsigned int *)(v27 + 508);
            if ((_DWORD)v28 && (v28 = *(_QWORD *)(*(_QWORD *)(v27 + 496) + 8 * v28 - 8)) != 0)
            {
              v29 = *(_DWORD *)(v28 + 64);
              LODWORD(v28) = *(_DWORD *)(v28 + 68);
            }
            else
            {
              v29 = 0;
            }
            v30 = __OFADD__(v21, v29);
            v31 = v21 + v29;
            if (v30)
              v31 = (v21 >> 31) + 0x7FFFFFFF;
            v32 = v25 | v24;
            v33 = v23 + v28;
            if (__OFADD__(v23, (_DWORD)v28))
              v33 = (v23 >> 31) + 0x7FFFFFFF;
            *(_QWORD *)&v41 = __PAIR64__(v33, v31);
            *((_QWORD *)&v41 + 1) = v32;
            v42 = 1;
            v40[0] = 0;
            v40[16] = 0;
            result = WebCore::RenderObject::issueRepaint(v12, &v41, 1, 0, (uint64_t)v40);
          }
          v34 = *(_DWORD *)(v12 + 16);
          if (!v34)
          {
            __break(0xC471u);
            JUMPOUT(0x1942A9150);
          }
          *(_DWORD *)(v12 + 16) = v34 - 1;
        }
      }
    }
  }
  else
  {
    v37 = *(_QWORD *)(result + 24);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
        result = (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**(_QWORD **)(v38 + 48) + 64))(*(_QWORD *)(v38 + 48), a2);
    }
  }
  do
  {
    v35 = __ldaxr(v6);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v6));
  if (!v36)
  {
    atomic_store(1u, v6);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v39 = off_1E31FE290;
    v39[1] = v6;
    *(_QWORD *)&v41 = v39;
    WTF::ensureOnMainThread();
    result = v41;
    *(_QWORD *)&v41 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::ScrollableArea::scrollbarsController(WebCore::ScrollableArea *this)
{
  uint64_t result;
  void *v3;
  WTF *v4;
  uint64_t v5;
  WebCore::ScrollableArea *v6;
  WTF *v7;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = this;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v7, (uint64_t)this, (uint64_t *)&v6);
      v4 = v7;
      v7 = 0;
      v5 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v7, v3);
    }
    else
    {
      (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 304))(this);
    }
    result = *((_QWORD *)this + 3);
    if (!result)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A9200);
    }
  }
  return result;
}

uint64_t WebCore::Chrome::invalidateContentsAndRootView(WebCore::Chrome *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 320))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::Page::layoutIfNeeded(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(result + 144);
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
LABEL_24:
    v4 = v2 + 8 * v3;
    goto LABEL_8;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 8 * v3;
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = v2 + 8 * v3;
    goto LABEL_24;
  }
  v5 = *(_QWORD *)(result + 144);
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    v5 = *(_QWORD *)(result + 144);
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_8:
  if (v2)
    v7 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v7 = 0;
  if (v7 != v5)
  {
    v8 = a2;
    do
    {
      v9 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 288);
      if (v9)
      {
        ++v9[2];
        result = WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v9, (void *)v8);
        if (v9[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v10 = v5 + 8;
      v5 = v4;
      if (v10 != v4)
      {
        v5 = v10;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
    }
    while (v5 != v7);
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::hasRunningAcceleratedAnimations(WebCore::RenderBoxModelObject *this, void *a2)
{
  WebCore::RenderBoxModelObject *v2;
  uint64_t v3;
  uint64_t hasAcceleratedEffects;
  int v5;
  char v6;
  WTF *v7;
  char v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF **v21;
  uint64_t v22;
  WTF *v23;
  WebCore::RenderBoxModelObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WebCore::RenderBoxModelObject *v28;
  char v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  char v33;

  v2 = this;
  v3 = (*((_QWORD *)this + 12) >> 43) & 0x1FLL;
  if ((_DWORD)v3)
  {
    hasAcceleratedEffects = 0;
    switch((int)v3)
    {
      case 5:
        v17 = *((_QWORD *)this + 4);
        if (!v17)
          return 0;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          return 0;
        while (1)
        {
          if (*(_BYTE *)(v18 + 46) == 19)
          {
            if (WebCore::RenderElement::element((WebCore::RenderElement *)v18))
            {
              v25 = *(_QWORD *)(v18 + 248);
              if (v25)
              {
                if (*(WebCore::RenderBoxModelObject **)(v25 + 8) == v2)
                  break;
              }
            }
          }
          v26 = *(_QWORD *)(v18 + 32);
          if (!v26)
            return 0;
          hasAcceleratedEffects = 0;
          v18 = *(_QWORD *)(v26 + 8);
          if (!v18)
            return hasAcceleratedEffects;
        }
        v7 = (WTF *)WebCore::RenderElement::element((WebCore::RenderElement *)v18);
        v2 = (WebCore::RenderBoxModelObject *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v2 += 4;
        LODWORD(v3) = 5;
        goto LABEL_53;
      case 6:
      case 7:
        goto LABEL_2;
      case 9:
        v21 = *(WTF ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3096);
        if (!v21)
          return 0;
        break;
      case 12:
        v7 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
        if (!v7)
          return 0;
        v2 = (WebCore::RenderBoxModelObject *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v2 += 4;
        LODWORD(v3) = 12;
        goto LABEL_53;
      case 13:
      case 14:
      case 15:
      case 16:
        v7 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
        if (!v7)
          return 0;
        v2 = *(WebCore::RenderBoxModelObject **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 592);
        if (v2)
          *(_DWORD *)v2 += 4;
        goto LABEL_53;
      default:
        return hasAcceleratedEffects;
    }
    while (1)
    {
      v22 = *((_QWORD *)*v21 + 8) & 0xFFFFFFFFFFFFLL;
      if (v22)
      {
        if ((*(_BYTE *)((*((_QWORD *)*v21 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A96E4);
        }
        WebCore::RenderElement::backdropRenderer(v22, &v30);
        v23 = v30;
        if (v30)
        {
          v24 = (WebCore::RenderBoxModelObject *)*((_QWORD *)v30 + 1);
          v30 = 0;
          if (*(_DWORD *)v23 == 1)
            WTF::fastFree(v23, a2);
          else
            --*(_DWORD *)v23;
          if (v24 == v2)
            break;
        }
      }
      hasAcceleratedEffects = 0;
      v21 = (WTF **)v21[2];
      if (!v21)
        return hasAcceleratedEffects;
    }
    v7 = *v21;
    v2 = (WebCore::RenderBoxModelObject *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v2 += 4;
    LODWORD(v3) = 9;
LABEL_53:
    v27 = v3;
    v28 = v2;
    v29 = 1;
    v30 = v7;
    v31 = v3;
    v33 = 1;
    v32 = 0;
    WebCore::Styleable::~Styleable((WebCore::Styleable *)&v30, (WTF::StringImpl *)a2);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v27, v20);
    goto LABEL_39;
  }
LABEL_2:
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  hasAcceleratedEffects = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (hasAcceleratedEffects)
  {
    v5 = *(unsigned __int16 *)(hasAcceleratedEffects + 28);
    if ((v5 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A95D0);
    }
    if ((~v5 & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)hasAcceleratedEffects + 368))(hasAcceleratedEffects))
    {
      LODWORD(v3) = 0;
      v6 = 1;
      v7 = (WTF *)hasAcceleratedEffects;
    }
    else
    {
      v10 = *(_QWORD *)(hasAcceleratedEffects + 112);
      if (v10)
        v7 = *(WTF **)(v10 + 8);
      else
        v7 = 0;
      if ((~*(unsigned __int16 *)(hasAcceleratedEffects + 28) & 0x408) != 0)
        LODWORD(v3) = 0;
      else
        LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)hasAcceleratedEffects + 368))(hasAcceleratedEffects);
      v2 = (WebCore::RenderBoxModelObject *)*MEMORY[0x1E0CBF2F8];
      if (!*MEMORY[0x1E0CBF2F8])
        goto LABEL_39;
      v11 = *(_DWORD *)v2;
      *(_DWORD *)v2 += 4;
      v12 = v11 + 2;
      if (!v12)
      {
        WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
        v12 = *(_DWORD *)v2;
        *(_DWORD *)v2 += 2;
        if (!v12)
        {
          WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
LABEL_39:
          v6 = 0;
          goto LABEL_7;
        }
      }
      v6 = 0;
      *(_DWORD *)v2 = v12;
    }
    if ((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_8;
    v13 = *(unsigned int *)((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v13)
      goto LABEL_8;
LABEL_7:
    v14 = *(uint64_t **)((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
    v15 = 8 * v13;
    if ((v6 & 1) != 0)
    {
      hasAcceleratedEffects = 0;
      do
      {
        v16 = *v14;
        if (!*(_BYTE *)(*v14 + 96))
          break;
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    else
    {
      while (1)
      {
        v16 = *v14;
        if (*(_BYTE *)(*v14 + 96))
        {
          if (*(_DWORD *)(v16 + 80) == (_DWORD)v3 && *(_QWORD *)(v16 + 88) == (_QWORD)v2)
            break;
        }
        hasAcceleratedEffects = 0;
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_9;
      }
    }
    if (*(_QWORD *)v16)
      hasAcceleratedEffects = WebCore::KeyframeEffectStack::hasAcceleratedEffects(*(WebCore::KeyframeEffectStack **)v16, *(const WebCore::Settings **)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 8) + 680));
    else
LABEL_8:
      hasAcceleratedEffects = 0;
LABEL_9:
    if (v2)
      v8 = v6;
    else
      v8 = 1;
    if ((v8 & 1) == 0)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
  return hasAcceleratedEffects;
}

double WebCore::RenderLayer::currentTransform@<D0>(WebCore::RenderLayer *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  int v10;
  char v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v33;
  int isCurrentlyAffectingProperty;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  WebCore::KeyframeEffect *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF **v48;
  uint64_t v49;
  WTF *v51;
  int v52;
  WTF::StringImpl *v53;
  char v54;
  WTF *v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  char v59;

  if (!*((_QWORD *)this + 25))
  {
    *(_OWORD *)(a3 + 64) = xmmword_1969FCC00;
    *(float64x2_t *)(a3 + 80) = xmmword_1969FCC10;
    *(_OWORD *)(a3 + 96) = xmmword_1969FCC20;
    *(_OWORD *)(a3 + 112) = unk_1969FCC30;
    *(_OWORD *)a3 = constinit_103;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1969FCBD0;
    *(_QWORD *)&v19 = 0;
    *(_OWORD *)(a3 + 32) = xmmword_1969FCBE0;
    *(float64x2_t *)(a3 + 48) = xmmword_1969FCBF0;
    return *(double *)&v19;
  }
  v6 = *((_QWORD *)this + 4);
  v7 = (*(_QWORD *)(v6 + 96) >> 43) & 0x1FLL;
  if ((_DWORD)v7)
  {
    v10 = 0;
    LOBYTE(v14) = 1;
    switch((int)v7)
    {
      case 5:
        v30 = *(_QWORD *)(v6 + 32);
        if (!v30)
          goto LABEL_38;
        v31 = *(_QWORD *)(v30 + 8);
        if (!v31)
          goto LABEL_38;
        while (1)
        {
          if (*(_BYTE *)(v31 + 46) == 19)
          {
            if (WebCore::RenderElement::element((WebCore::RenderElement *)v31))
            {
              v46 = *(_QWORD *)(v31 + 248);
              if (v46)
              {
                if (*(_QWORD *)(v46 + 8) == v6)
                  break;
              }
            }
          }
          v14 = *(_QWORD *)(v31 + 32);
          if (!v14)
            goto LABEL_38;
          v10 = 0;
          v31 = *(_QWORD *)(v14 + 8);
          LOBYTE(v14) = 1;
          if (!v31)
            goto LABEL_10;
        }
        v12 = (WTF *)WebCore::RenderElement::element((WebCore::RenderElement *)v31);
        v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v3 += 4;
        LODWORD(v7) = 5;
        goto LABEL_80;
      case 6:
      case 7:
        goto LABEL_3;
      case 9:
        v48 = *(WTF ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 3096);
        if (!v48)
          goto LABEL_38;
        break;
      case 12:
        v12 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 1272);
        if (!v12)
          goto LABEL_38;
        v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v3 += 4;
        LODWORD(v7) = 12;
        goto LABEL_80;
      case 13:
      case 14:
      case 15:
      case 16:
        v12 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 1272);
        if (!v12)
          goto LABEL_38;
        v3 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 592);
        if (v3)
          *(_DWORD *)v3 += 4;
        goto LABEL_80;
      default:
        goto LABEL_10;
    }
    while (1)
    {
      v49 = *((_QWORD *)*v48 + 8) & 0xFFFFFFFFFFFFLL;
      if (v49)
      {
        if ((*(_BYTE *)((*((_QWORD *)*v48 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942A9D18);
        }
        WebCore::RenderElement::backdropRenderer(v49, &v55);
        if (v55)
        {
          v3 = (WTF::StringImpl *)*((_QWORD *)v55 + 1);
          if (*(_DWORD *)v55 == 1)
            WTF::fastFree(v55, a2);
          else
            --*(_DWORD *)v55;
          if (v3 == (WTF::StringImpl *)v6)
            break;
        }
      }
      v10 = 0;
      v48 = (WTF **)v48[2];
      LOBYTE(v14) = 1;
      if (!v48)
        goto LABEL_10;
    }
    v12 = *v48;
    v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v3 += 4;
    LODWORD(v7) = 9;
LABEL_80:
    v52 = v7;
    v53 = v3;
    v10 = 1;
    v54 = 1;
    v55 = v12;
    v56 = v7;
    v59 = 1;
    v58 = 0;
    WebCore::Styleable::~Styleable((WebCore::Styleable *)&v55, (WTF::StringImpl *)a2);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v52, v47);
    v11 = 0;
  }
  else
  {
LABEL_3:
    if ((*(_BYTE *)(v6 + 45) & 1) != 0 || (v8 = *(WTF **)(*(_QWORD *)(v6 + 24) + 8)) == 0)
    {
LABEL_38:
      v10 = 0;
      LOBYTE(v14) = 1;
      goto LABEL_10;
    }
    v9 = *((unsigned __int16 *)v8 + 14);
    if ((v9 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942A9AB4);
    }
    if ((~v9 & 0x408) == 0 && (*(unsigned int (**)(WTF *))(*(_QWORD *)v8 + 368))(v8))
    {
      v23 = *((_QWORD *)v8 + 14);
      if (v23)
        v24 = *(_QWORD *)(v23 + 8);
      else
        v24 = 0;
      if ((~*((unsigned __int16 *)v8 + 14) & 0x408) != 0)
        LODWORD(v7) = 0;
      else
        LODWORD(v7) = (*(uint64_t (**)(WTF *))(*(_QWORD *)v8 + 368))(v8);
      v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        v25 = *(_DWORD *)v3;
        *(_DWORD *)v3 += 4;
        v26 = v25 + 2;
        if (v25 != -2
          || (WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2), v26 = *(_DWORD *)v3, *(_DWORD *)v3 += 2, v26))
        {
          v11 = 0;
          *(_DWORD *)v3 = v26;
          goto LABEL_25;
        }
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      }
      v11 = 0;
LABEL_25:
      v10 = 1;
      v13 = *(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL;
      if (v13)
        goto LABEL_26;
      goto LABEL_9;
    }
    v10 = 0;
    LODWORD(v7) = 0;
    v11 = 1;
    v12 = v8;
  }
  v13 = *((_QWORD *)v12 + 9) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
LABEL_26:
    v27 = *(unsigned int *)(v13 + 164);
    if ((_DWORD)v27)
    {
      v28 = *(uint64_t **)(v13 + 152);
      if ((v11 & 1) != 0)
      {
        v14 = 8 * v27;
        while (1)
        {
          v29 = *v28;
          if (!*(_BYTE *)(*v28 + 96))
            break;
          ++v28;
          v14 -= 8;
          if (!v14)
            goto LABEL_10;
        }
      }
      else
      {
        v14 = 8 * v27;
        while (1)
        {
          v29 = *v28;
          if (*(_BYTE *)(*v28 + 96))
          {
            if (*(_DWORD *)(v29 + 80) == (_DWORD)v7 && *(_QWORD *)(v29 + 88) == (_QWORD)v3)
              break;
          }
          ++v28;
          v14 -= 8;
          if (!v14)
            goto LABEL_10;
        }
      }
      if (*(_QWORD *)v29)
      {
        WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)&v55, *(unsigned int ***)v29);
        v33 = v55;
        if (v57)
        {
          v51 = (WTF *)((char *)v55 + 8 * v57);
          v37 = 8 * v57 - 8;
          v38 = v55;
          do
          {
            v39 = v38;
            v40 = *(_QWORD *)v38;
            if (v40)
              v41 = *(WebCore::KeyframeEffect **)(v40 + 8);
            else
              v41 = 0;
            isCurrentlyAffectingProperty = WebCore::KeyframeEffect::isCurrentlyAffectingProperty(v41, 273, 1);
            if ((isCurrentlyAffectingProperty & 1) != 0)
              break;
            v38 = (WTF *)((char *)v39 + 8);
            v42 = v37;
            v37 -= 8;
          }
          while (v42);
          do
          {
            v43 = *(unsigned int **)v33;
            *(_QWORD *)v33 = 0;
            if (v43)
            {
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                atomic_store(1u, v43);
                WTF::fastFree((WTF *)v43, a2);
              }
            }
            v33 = (WTF *)((char *)v33 + 8);
          }
          while (v33 != v51);
          v33 = v55;
        }
        else
        {
          isCurrentlyAffectingProperty = 0;
        }
        if (v33)
          WTF::fastFree(v33, a2);
        if (isCurrentlyAffectingProperty)
        {
          WebCore::RenderElement::animatedStyle(*((WebCore::RenderElement **)this + 4), (const WebCore::RenderElement *)a2, &v55);
          *(_OWORD *)(a3 + 64) = xmmword_1969FCC00;
          *(float64x2_t *)(a3 + 80) = xmmword_1969FCC10;
          *(_OWORD *)(a3 + 96) = xmmword_1969FCC20;
          *(_OWORD *)(a3 + 112) = unk_1969FCC30;
          *(_OWORD *)a3 = constinit_103;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1969FCBD0;
          *(_OWORD *)(a3 + 32) = xmmword_1969FCBE0;
          *(float64x2_t *)(a3 + 48) = xmmword_1969FCBF0;
          v35 = v55;
          WebCore::RenderLayer::updateTransformFromStyle((uint64_t)this, a3, (uint64_t)v55, 0x1Fu);
          WebCore::RenderStyle::~RenderStyle(v35, v36);
          if (*(_DWORD *)v35)
          {
            *(_QWORD *)&v19 = 0;
            *((_OWORD *)v35 + 2) = 0u;
            *((_OWORD *)v35 + 3) = 0u;
            *(_OWORD *)v35 = 0u;
            *((_OWORD *)v35 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v35, a2);
          }
          LOBYTE(v14) = 0;
          goto LABEL_11;
        }
      }
    }
  }
LABEL_9:
  LOBYTE(v14) = 0;
LABEL_10:
  v15 = (__int128 *)*((_QWORD *)this + 25);
  v16 = v15[3];
  v18 = *v15;
  v17 = v15[1];
  *(_OWORD *)(a3 + 32) = v15[2];
  *(_OWORD *)(a3 + 48) = v16;
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v17;
  v19 = v15[6];
  v20 = v15[7];
  v22 = v15[4];
  v21 = v15[5];
  *(_OWORD *)(a3 + 96) = v19;
  *(_OWORD *)(a3 + 112) = v20;
  *(_OWORD *)(a3 + 64) = v22;
  *(_OWORD *)(a3 + 80) = v21;
LABEL_11:
  if (v3 && (v14 & 1) == 0 && v10)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return *(double *)&v19;
}

WebCore::KeyframeEffectStack *WebCore::Styleable::computeAnimatedStyle@<X0>(WebCore::KeyframeEffectStack *this@<X0>, WebCore::RenderStyle **a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  unsigned int v18;

  *a2 = 0;
  if ((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
      if (*((_BYTE *)this + 24))
      {
        v5 = 8 * v3;
        while (1)
        {
          v6 = *v4;
          if (*(_BYTE *)(*v4 + 96))
          {
            if (*(_DWORD *)(v6 + 80) == *((_DWORD *)this + 2) && *(_QWORD *)(v6 + 88) == *((_QWORD *)this + 2))
              break;
          }
          ++v4;
          v5 -= 8;
          if (!v5)
            return this;
        }
      }
      else
      {
        v8 = 8 * v3;
        while (1)
        {
          v6 = *v4;
          if (!*(_BYTE *)(*v4 + 96))
            break;
          ++v4;
          v8 -= 8;
          if (!v8)
            return this;
        }
      }
      this = *(WebCore::KeyframeEffectStack **)v6;
      if (*(_QWORD *)v6)
      {
        this = (WebCore::KeyframeEffectStack *)WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)&v17, this);
        v10 = v17;
        if (v18)
        {
          v11 = 8 * v18;
          v12 = v17;
          v13 = (WTF *)((char *)v17 + v11);
          do
          {
            if (*(_QWORD *)v12)
              v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
            else
              v14 = 0;
            WebCore::KeyframeEffect::getAnimatedStyle(v14, a2);
            v12 = (WTF *)((char *)v12 + 8);
            v11 -= 8;
          }
          while (v11);
          do
          {
            this = *(WebCore::KeyframeEffectStack **)v10;
            *(_QWORD *)v10 = 0;
            if (this)
            {
              do
              {
                v15 = __ldaxr((unsigned int *)this);
                v16 = v15 - 1;
              }
              while (__stlxr(v16, (unsigned int *)this));
              if (!v16)
              {
                atomic_store(1u, (unsigned int *)this);
                this = (WebCore::KeyframeEffectStack *)WTF::fastFree(this, v9);
              }
            }
            v10 = (WTF *)((char *)v10 + 8);
          }
          while (v10 != v13);
          v10 = v17;
        }
        if (v10)
          return (WebCore::KeyframeEffectStack *)WTF::fastFree(v10, v9);
      }
    }
  }
  return this;
}

void WebCore::KeyframeEffectStack::sortedEffects(unsigned int ***__return_ptr a1@<X8>, unsigned int **this@<X0>)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  const std::nothrow_t *v14;
  unint64_t v15;
  unsigned int **v16;
  BOOL v17;
  unsigned int **v18;

  if (!*((_BYTE *)this + 72))
  {
    v4 = *((unsigned int *)this + 3);
    if (v4 >= 2)
    {
      v12 = *this;
      v13 = &(*this)[2 * v4];
      v14 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v15 = *((unsigned int *)this + 3);
      while (1)
      {
        v16 = (unsigned int **)operator new(8 * v15, v14);
        if (v16)
          break;
        v17 = v15 > 1;
        v15 >>= 1;
        if (!v17)
        {
          std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(v12, v13, v4, 0, 0);
          goto LABEL_16;
        }
      }
      v18 = v16;
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(v12, v13, v4, v16, v15);
      operator delete(v18);
LABEL_16:
      *((_BYTE *)this + 72) = 1;
    }
  }
  v5 = *((unsigned int *)this + 3);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 3) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)a1 + 2) = v5;
      *a1 = v6;
      v7 = *((unsigned int *)this + 3);
      if ((_DWORD)v7)
      {
        v8 = (unsigned int **)*this;
        v9 = (uint64_t)&(*this)[2 * v7];
        do
        {
          v10 = *v8;
          if (*v8)
          {
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
          }
          *v6++ = v10;
          ++v8;
        }
        while (v8 != (unsigned int **)v9);
      }
    }
  }
}

uint64_t WebCore::RenderLayerBacking::updateAfterDescendants(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 IsKnownToBeOpaqueInRect;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t hasVisibleNonCompositedDescendants;
  uint64_t result;
  WebCore::RenderLayer *v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v39;
  int v40;
  unsigned int v42;
  int v43;
  BOOL v44;
  __int128 v45;
  _QWORD v46[2];
  int v47;

  v46[0] = this;
  v46[1] = 0;
  v47 = 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  if ((v2 & 1) == 0)
  {
    LOBYTE(v45) = 0;
    if ((v2 & 0x80000) == 0
      || (WebCore::RenderLayerBacking::updateDirectlyCompositedBackgroundColor((uint64_t)this, (const WebCore::RenderBoxModelObject *)v46, &v45), !(_BYTE)v45))
    {
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 576))(*((_QWORD *)this + 9)))
        WebCore::RenderLayerBacking::resetContentsRect(this);
    }
  }
  WebCore::RenderLayerBacking::updateDrawsContent(this, (WebCore::PaintedContentsInfo *)v46);
  if (!*((_BYTE *)this + 289) && !*((_BYTE *)this + 290) && !*((_BYTE *)this + 295))
  {
    v3 = *((_QWORD *)this + 9);
    if (*((_BYTE *)this + 296))
    {
      IsKnownToBeOpaqueInRect = 0;
    }
    else
    {
      v24 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
      v45 = *((_OWORD *)this + 11);
      IsKnownToBeOpaqueInRect = WebCore::RenderLayer::backgroundIsKnownToBeOpaqueInRect(v24, (const WebCore::LayoutRect *)&v45);
    }
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 264))(v3, IsKnownToBeOpaqueInRect);
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 32);
  if (*(_BYTE *)(v6 + 46) == 30)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
    if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942AA2DCLL);
    }
  }
  v7 = *(_QWORD *)(v6 + 88);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 40);
  v9 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = 8 * v9;
    do
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)v10 + 12);
      v13 = v12 > 0x14;
      v14 = (1 << v12) & 0x1DE0C0;
      if (!v13 && v14 != 0)
        goto LABEL_26;
      v10 += 8;
      v11 -= 8;
    }
    while (v11);
  }
  v16 = *(_QWORD **)(v7 + 40);
  v17 = v16[40];
  if (v17)
  {
    v36 = *(unsigned __int8 *)(v17 + 12);
    v13 = v36 > 0x14;
    v37 = (1 << v36) & 0x1DE0C0;
    if (!v13 && v37 != 0)
      goto LABEL_26;
  }
  v18 = v16[39];
  if (v18)
  {
    v39 = *(unsigned __int8 *)(v18 + 12);
    v13 = v39 > 0x14;
    v40 = (1 << v39) & 0x1DE0C0;
    if (!v13 && v40 != 0)
      goto LABEL_26;
  }
  if ((v19 = v16[38]) != 0
    && ((v42 = *(unsigned __int8 *)(v19 + 12), v13 = v42 > 0x14, v43 = (1 << v42) & 0x1DE0C0, !v13)
      ? (v44 = v43 == 0)
      : (v44 = 1),
        !v44)
    || (v20 = *(_QWORD *)(v5 + 264)) != 0 && *(_BYTE *)(v20 + 79))
  {
LABEL_26:
    (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 344))(*((_QWORD *)this + 9));
    v5 = *((_QWORD *)this + 1);
  }
  v21 = *((_QWORD *)this + 9);
  if ((*(_BYTE *)(v5 + 26) & 8) != 0)
    hasVisibleNonCompositedDescendants = 1;
  else
    hasVisibleNonCompositedDescendants = WebCore::RenderLayerBacking::hasVisibleNonCompositedDescendants((WebCore::RenderLayerBacking *)v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 224))(v21, hasVisibleNonCompositedDescendants);
  result = *((_QWORD *)this + 20);
  if (result)
  {
    v25 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v26 = (*(_BYTE *)(*(_QWORD *)(v25 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v25 + 120) & 0x30) == 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)result + 224))(result, v26);
    v27 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    if ((*(_BYTE *)(*(_QWORD *)(v27 + 104) + 239) & 4) != 0)
      goto LABEL_76;
    if ((*(_BYTE *)(v27 + 120) & 0x30) != 0)
      goto LABEL_76;
    v28 = *(_QWORD *)(v27 + 32);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v29 + 104) + 239) & 0x18) != 0)
          goto LABEL_76;
      }
    }
    v30 = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8);
    v31 = *(_QWORD *)(*(_QWORD *)(v30 + 40) + 8);
    if (*(_BYTE *)(v31 + 3441))
    {
      if (*(_QWORD *)(v31 + 1272) != v30)
        goto LABEL_76;
    }
    v32 = *(_BYTE *)(v27 + 45) & 2;
    if ((*(_BYTE *)(v27 + 45) & 2) != 0)
      v27 = 0;
    if (v28 && v32)
      v27 = *(_QWORD *)(v28 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v27 + 104) + 239) & 1) != 0)
LABEL_76:
      v33 = 0;
    else
      v33 = (*(_WORD *)(v27 + 124) & 0x3C0) != 0;
    (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 20) + 232))(*((_QWORD *)this + 20), v33);
    v34 = *((_QWORD *)this + 16);
    if (v34)
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v34 + 232))(v34, v33);
    v35 = *((_QWORD *)this + 17);
    if (v35)
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v35 + 232))(v35, v33);
    result = *((_QWORD *)this + 18);
    if (result)
      return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)result + 232))(result, v33);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setContentsVisible(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x40) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 64;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFFFBF;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    v6 = this;
    WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x2000000, 0);
    this = v6;
    if (*(_QWORD *)(v6 + 664) || *(_QWORD *)(v6 + 640))
      return WebCore::GraphicsLayerCA::noteSublayersChanged(v6, 0);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setContentsOpaque(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 2) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 2;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFFFFD;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 1024, 0);
  }
  return this;
}

unsigned int *WebCore::RenderLayerBacking::updateDirectlyCompositedBackgroundColor(uint64_t a1, const WebCore::RenderBoxModelObject *a2, _BYTE *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *result;
  void *v9;
  WebCore::BackgroundPainter *v10;
  const WebCore::RenderBox *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  if (!*(_QWORD *)(a1 + 88) || *(_BYTE *)(a1 + 294))
    goto LABEL_2;
  v19 = *((_DWORD *)a2 + 2);
  if (!v19)
  {
    if (WebCore::RenderLayerBacking::paintsBoxDecorations(*(WebCore::RenderLayerBacking **)(*(_QWORD *)a2 + 8)))
      v19 = 3;
    else
      v19 = 2;
    *((_DWORD *)a2 + 2) = v19;
  }
  if ((v19 - 3) < 2)
  {
LABEL_2:
    v6 = *((_DWORD *)a2 + 4);
    if (!v6)
    {
      if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(*(_QWORD **)a2, a2) & 1) != 0)
      {
        v6 = 1;
      }
      else if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage(*(WebCore::RenderLayerBacking **)a2) & 1) != 0)
      {
        v6 = 2;
      }
      else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly(*(WebCore::RenderLayerBacking **)a2))
      {
        v6 = 3;
      }
      else
      {
        v6 = 4;
      }
      *((_DWORD *)a2 + 4) = v6;
    }
    if (v6 == 1
      && ((v10 = *(WebCore::BackgroundPainter **)(*(_QWORD *)(a1 + 8) + 32), (*((_BYTE *)v10 + 45) & 4) == 0)
       || WebCore::BackgroundPainter::paintsOwnBackground(v10, a2)))
    {
      WebCore::RenderLayerBacking::rendererBackgroundColor((WebCore::RenderLayerBacking *)&v36, a1);
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 72) + 504))(*(_QWORD *)(a1 + 72), &v36);
      WebCore::RenderLayerBacking::backgroundBoxForSimpleContainerPainting((WebCore::RenderLayerBacking *)a1, v11);
      *(_QWORD *)&v40 = __PAIR64__(v13, v12);
      *((_QWORD *)&v40 + 1) = __PAIR64__(v15, v14);
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 72) + 368))(*(_QWORD *)(a1 + 72), &v40);
      v16 = *(_QWORD *)(a1 + 72);
      v38 = 0u;
      v39 = 0u;
      v37 = v40;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 376))(v16, &v37);
      *a3 = 1;
      if ((v36 & 0x8000000000000) == 0)
        return result;
      result = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
      do
      {
        v17 = __ldaxr(result);
        v18 = --v17 == 0;
      }
      while (__stlxr(v17, result));
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)&v37 = 0;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 504))(v7, &v37);
      if ((v37 & 0x8000000000000) == 0)
        return result;
      result = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(result);
        v18 = --v29 == 0;
      }
      while (__stlxr(v29, result));
    }
    if (v18)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)&v37 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v20 + 504))(v20, &v37);
    if ((v37 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v21);
      }
    }
    v22 = *(_QWORD *)(a1 + 88);
    WebCore::RenderLayerBacking::rendererBackgroundColor((WebCore::RenderLayerBacking *)&v37, a1);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 504))(v22, &v37);
    if ((v37 & 0x8000000000000) != 0)
    {
      v33 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v23);
      }
    }
    WebCore::RenderLayerBacking::backgroundBoxForSimpleContainerPainting((WebCore::RenderLayerBacking *)a1, (const WebCore::RenderBox *)v23);
    *(float *)&v40 = v24 - v26;
    *((float *)&v40 + 1) = v25 - v27;
    *((float *)&v40 + 2) = v26 + (float)(v26 + v26);
    *((float *)&v40 + 3) = v27 + (float)(v27 + v27);
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 88) + 368))(*(_QWORD *)(a1 + 88), &v40);
    v28 = *(_QWORD *)(a1 + 88);
    v38 = 0u;
    v39 = 0u;
    v37 = v40;
    return (unsigned int *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v28 + 376))(v28, &v37);
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::updateDrawsContent(uint64_t a1, _QWORD **a2)
{
  int v4;
  int v5;
  WTF::StringImpl *v6;
  _BOOL8 hasVisibleBoxDecorationsOrBackground;
  WTF::StringImpl *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WebCore::RenderView *v14;
  WebCore::RenderLayerCompositor *v15;
  WebCore::RenderView *v16;
  WebCore::RenderLayerCompositor *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)();
  BOOL v30;
  int v31;
  _BOOL8 v32;
  uint64_t v33;
  int v34;
  WebCore::RenderLayerCompositor *v35;
  WebCore::RenderLayerCompositor *v36;
  WTF *v37;
  void *v38;
  float v39;
  WebCore::RenderLayerCompositor *v40;
  WebCore::RenderLayerCompositor *v41;
  WTF *v42;
  void *v43;
  char shouldDisplayVideo;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50[2];
  WTF::StringImpl *v51;
  char v52;
  char v53;

  if (*(_QWORD *)(a1 + 160))
  {
    v18 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v18 + 26) & 8) == 0)
      goto LABEL_47;
    v19 = *(_QWORD *)(v18 + 32);
    if ((*(_BYTE *)(v19 + 23) & 0x60) != 0)
    {
      v21 = 1;
      goto LABEL_48;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v19 + 88) + 16);
    if ((*(_BYTE *)(v20 + 52) & 0xE) != 0)
    {
      v39 = 0.0;
      if ((*(_BYTE *)(v20 + 52) & 0xF) != 0)
      {
        v39 = *(float *)(v20 + 48);
        if ((*(_BYTE *)(v20 + 52) & 0x10) != 0 && v39 < 3.0)
          v39 = 3.0;
      }
      v21 = v39 > 0.0;
    }
    else
    {
LABEL_47:
      v21 = 0;
    }
LABEL_48:
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 72) + 216))(*(_QWORD *)(a1 + 72), v21);
    v23 = *(_QWORD *)(a1 + 16);
    if (v23 && *(_DWORD *)(v23 - 12))
    {
      v24 = *(_QWORD **)(a1 + 24);
      if (v24)
      {
        while (!*(_QWORD *)(*v24 + 8))
        {
          v24 = (_QWORD *)v24[2];
          if (!v24)
            goto LABEL_51;
        }
        goto LABEL_111;
      }
LABEL_51:
      WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(a1 + 16, v22);
    }
    v25 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v25 + 26) & 8) == 0)
    {
      v32 = 0;
      return (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 168) + 216))(*(_QWORD *)(a1 + 168), v32);
    }
    v26 = *(_QWORD *)(v25 + 32);
    WebCore::RenderStyle::visitedDependentColor(v26 + 80, 61, 0, v50);
    if ((v50[0] & 0x8000000000000) != 0)
    {
      v46 = (unsigned int *)(v50[0] & 0xFFFFFFFFFFFFLL);
      if (*(float *)((v50[0] & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
      {
        v30 = 1;
        do
        {
LABEL_105:
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (v48)
          goto LABEL_61;
        v32 = 1;
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v27);
        if (!v30)
          goto LABEL_62;
        return (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 168) + 216))(*(_QWORD *)(a1 + 168), v32);
      }
LABEL_55:
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 88) + 16) + 8);
      if (*(_QWORD *)(v28 + 8))
      {
        do
        {
          v49 = *(_QWORD *)(v28 + 16);
          v30 = v49 != 0;
          if (v49)
            break;
          v28 = *(_QWORD *)(v28 + 8);
        }
        while (v28);
      }
      else
      {
        if (*(_QWORD *)(v28 + 16))
          v29 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v29 = 0;
        v30 = v29 != 0;
      }
      if ((v50[0] & 0x8000000000000) == 0)
      {
LABEL_61:
        if (!v30)
        {
LABEL_62:
          v31 = *((_DWORD *)a2 + 3);
          if (!v31)
          {
            LODWORD(v50[0]) = 0;
            if (WebCore::RenderLayerBacking::paintsContent((uint64_t)*a2, (int *)v50))
              v31 = 3;
            else
              v31 = 2;
            *((_DWORD *)a2 + 3) = v31;
          }
          v32 = v31 == 3 || v31 == 4;
          return (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 168) + 216))(*(_QWORD *)(a1 + 168), v32);
        }
        goto LABEL_111;
      }
      v46 = (unsigned int *)(v50[0] & 0xFFFFFFFFFFFFLL);
      goto LABEL_105;
    }
    if (!LOBYTE(v50[0]))
      goto LABEL_55;
LABEL_111:
    v32 = 1;
    return (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 168) + 216))(*(_QWORD *)(a1 + 168), v32);
  }
  v4 = *((_DWORD *)a2 + 4);
  if (!v4)
  {
    if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(*a2, a2) & 1) != 0)
    {
      v4 = 1;
    }
    else if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage((WebCore::RenderLayerBacking *)*a2) & 1) != 0)
    {
      v4 = 2;
    }
    else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly((WebCore::RenderLayerBacking *)*a2))
    {
      v4 = 3;
    }
    else
    {
      v4 = 4;
    }
    *((_DWORD *)a2 + 4) = v4;
  }
  if (v4 == 1)
    goto LABEL_43;
  if (!*(_BYTE *)(a1 + 290))
  {
    v13 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v13 + 24) & 1) != 0)
    {
      v14 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 24) + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
      if (!v15)
      {
        v35 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v15 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v35, v14);
        v36 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
        *((_QWORD *)v14 + 50) = v15;
        if (v36)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v36);
          WTF::fastFree(v37, v38);
          v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
        }
      }
      if (!*((_BYTE *)v15 + 198))
      {
        v16 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                  + 32)
                                                                                      + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944);
        v17 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v16 + 50);
        if (!v17)
        {
          v40 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v17 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v40, v16);
          v41 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v16 + 50);
          *((_QWORD *)v16 + 50) = v17;
          if (v41)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v41);
            WTF::fastFree(v42, v43);
            v17 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v16 + 50);
          }
        }
        if (*((_DWORD *)v17 + 54) != 2)
          goto LABEL_43;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 291) || *(_BYTE *)(a1 + 288) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 46) == 30)
    goto LABEL_43;
  v5 = *((_DWORD *)a2 + 4);
  if (!v5)
  {
    if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(*a2, a2) & 1) != 0)
    {
      v5 = 1;
    }
    else if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage((WebCore::RenderLayerBacking *)*a2) & 1) != 0)
    {
      v5 = 2;
    }
    else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly((WebCore::RenderLayerBacking *)*a2))
    {
      v5 = 3;
    }
    else
    {
      v5 = 4;
    }
    *((_DWORD *)a2 + 4) = v5;
  }
  if (v5 == 2)
  {
LABEL_43:
    hasVisibleBoxDecorationsOrBackground = 0;
    goto LABEL_22;
  }
  WebCore::Styleable::fromRenderer(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (const WebCore::RenderElement *)a2, (uint64_t)v50);
  hasVisibleBoxDecorationsOrBackground = !v53
                                      || WebCore::Styleable::mayHaveNonZeroOpacity((WebCore::Styleable *)v50);
  if (v53)
  {
    if (v52)
    {
      v8 = v51;
      v51 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  if (!hasVisibleBoxDecorationsOrBackground)
    goto LABEL_22;
  v9 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 32);
  v10 = v9[46];
  if (v10 != 48)
  {
LABEL_20:
    if (v10 == 13 && WebCore::canvasCompositingStrategy((WebCore *)v9, v6) == 2)
    {
      hasVisibleBoxDecorationsOrBackground = WebCore::RenderLayer::hasVisibleBoxDecorationsOrBackground(*(WebCore::RenderLayer **)(*(_QWORD *)(a1 + 8) + 32));
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  shouldDisplayVideo = WebCore::RenderVideo::shouldDisplayVideo(*(WebCore::RenderVideo **)(*(_QWORD *)(a1 + 8) + 32));
  v45 = *(_QWORD *)(a1 + 8);
  if ((shouldDisplayVideo & 1) == 0)
  {
    v9 = *(unsigned __int8 **)(v45 + 32);
    v10 = v9[46];
    goto LABEL_20;
  }
  if (!WebCore::RenderLayer::hasVisibleBoxDecorationsOrBackground(*(WebCore::RenderLayer **)(v45 + 32)))
  {
    if ((WebCore::RenderVideo::supportsAcceleratedRendering((WebCore::RenderVideo *)v9) & 1) == 0)
    {
      hasVisibleBoxDecorationsOrBackground = *(_BYTE *)(a1 + 291) != 0;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_21:
  hasVisibleBoxDecorationsOrBackground = 1;
LABEL_22:
  (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 72) + 216))(*(_QWORD *)(a1 + 72), hasVisibleBoxDecorationsOrBackground);
  v11 = *(_QWORD *)(a1 + 80);
  if (v11)
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v11 + 216))(v11, hasVisibleBoxDecorationsOrBackground);
  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    if (!*(_BYTE *)(a1 + 294))
    {
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *((_DWORD *)a2 + 2);
      if (!v34)
      {
        if (WebCore::RenderLayerBacking::paintsBoxDecorations((WebCore::RenderLayerBacking *)(*a2)[1]))
          v34 = 3;
        else
          v34 = 2;
        *((_DWORD *)a2 + 2) = v34;
      }
      hasVisibleBoxDecorationsOrBackground = (v34 - 3) < 2;
      result = v33;
    }
    return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)result + 216))(result, hasVisibleBoxDecorationsOrBackground);
  }
  return result;
}

uint64_t WebCore::Styleable::fromRenderer@<X0>(uint64_t this@<X0>, const WebCore::RenderElement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  _DWORD *v22;
  WTF *v23;
  _DWORD *v24;
  WTF **v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  char v34;
  WTF *v35;
  int v36;
  uint64_t v37;
  char v38;

  v4 = (*(_QWORD *)(this + 96) >> 43) & 0x1FLL;
  if (!(_DWORD)v4)
  {
LABEL_2:
    if ((*(_BYTE *)(this + 45) & 1) != 0 || (v5 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8)) == 0)
    {
LABEL_22:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return this;
    }
    v6 = *(unsigned __int16 *)(v5 + 28);
    if ((v6 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942AAE34);
    }
    if ((~v6 & 0x408) != 0
      || (this = (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)v5 + 368))(v5, a2),
          !(_DWORD)this))
    {
      *(_QWORD *)a3 = v5;
      *(_BYTE *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      goto LABEL_7;
    }
    v8 = *(_QWORD *)(v5 + 112);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if ((~*(unsigned __int16 *)(v5 + 28) & 0x408) != 0)
        goto LABEL_11;
    }
    else
    {
      v9 = 0;
      if ((~*(unsigned __int16 *)(v5 + 28) & 0x408) != 0)
      {
LABEL_11:
        v10 = 0;
LABEL_12:
        v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
        {
          v12 = *(_DWORD *)v11;
          *(_DWORD *)v11 += 4;
          v13 = v12 + 2;
          if (!v13)
          {
            this = WTF::StringImpl::destroy(v11, v7);
            v13 = *(_DWORD *)v11;
          }
          *(_QWORD *)a3 = v9;
          *(_DWORD *)(a3 + 8) = v10;
          *(_DWORD *)v11 = v13 + 2;
          *(_QWORD *)(a3 + 16) = v11;
          *(_BYTE *)(a3 + 24) = 1;
          *(_BYTE *)(a3 + 32) = 1;
          if (!v13)
            return WTF::StringImpl::destroy(v11, v7);
          *(_DWORD *)v11 = v13;
          return this;
        }
        *(_QWORD *)a3 = v9;
        *(_DWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 1;
LABEL_7:
        *(_BYTE *)(a3 + 32) = 1;
        return this;
      }
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 368))(v5);
    v10 = this;
    goto LABEL_12;
  }
  switch((int)v4)
  {
    case 5:
      v14 = *(_QWORD *)(this + 32);
      if (!v14)
        goto LABEL_22;
      while (2)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (!v15)
          goto LABEL_22;
        v16 = this;
        if (*(_BYTE *)(v15 + 46) == 19)
        {
          this = WebCore::RenderElement::element((WebCore::RenderElement *)v15);
          if (this)
          {
            v17 = *(_QWORD *)(v15 + 248);
            if (v17)
            {
              if (*(_QWORD *)(v17 + 8) == v16)
              {
                v21 = (WTF *)WebCore::RenderElement::element((WebCore::RenderElement *)v15);
                v22 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
                if (*MEMORY[0x1E0CBF2F8])
                  *v22 += 4;
                v32 = 5;
                v33 = v22;
                v34 = 1;
                v35 = v21;
                v36 = 5;
                v38 = 1;
                *(_QWORD *)a3 = v21;
                *(_DWORD *)(a3 + 8) = 5;
                v37 = 0;
                *(_QWORD *)(a3 + 16) = v22;
                *(_BYTE *)(a3 + 24) = 1;
                *(_BYTE *)(a3 + 32) = 1;
                goto LABEL_36;
              }
            }
          }
        }
        v14 = *(_QWORD *)(v15 + 32);
        if (v14)
        {
          this = v16;
          continue;
        }
        goto LABEL_22;
      }
    case 6:
    case 7:
      goto LABEL_2;
    case 9:
      v25 = *(WTF ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 3096);
      if (!v25)
        goto LABEL_22;
      break;
    case 12:
      v23 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1272);
      if (!v23)
        goto LABEL_22;
      v24 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *v24 += 4;
      v32 = 12;
      v33 = v24;
      v34 = 1;
      v35 = v23;
      v36 = 12;
      v38 = 1;
      *(_QWORD *)a3 = v23;
      *(_DWORD *)(a3 + 8) = 12;
      v37 = 0;
      *(_QWORD *)(a3 + 16) = v24;
      goto LABEL_35;
    case 13:
    case 14:
    case 15:
    case 16:
      v18 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1272);
      if (!v18)
        goto LABEL_22;
      v19 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(this + 88) + 40) + 592);
      if (v19)
        *v19 += 4;
      v32 = v4;
      v33 = v19;
      v34 = 1;
      v35 = v18;
      v36 = v4;
      v38 = 1;
      *(_QWORD *)a3 = v18;
      *(_DWORD *)(a3 + 8) = v4;
      v37 = 0;
      *(_QWORD *)(a3 + 16) = v19;
      goto LABEL_35;
    default:
      goto LABEL_22;
  }
  while (1)
  {
    v26 = this;
    v27 = *((_QWORD *)*v25 + 8) & 0xFFFFFFFFFFFFLL;
    if (v27)
    {
      if ((*(_BYTE *)((*((_QWORD *)*v25 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942AB044);
      }
      WebCore::RenderElement::backdropRenderer(v27, &v35);
      v28 = v35;
      if (v35)
      {
        v29 = *((_QWORD *)v35 + 1);
        v35 = 0;
        if (*(_DWORD *)v28 == 1)
          WTF::fastFree(v28, a2);
        else
          --*(_DWORD *)v28;
        if (v29 == v26)
          break;
      }
    }
    v25 = (WTF **)v25[2];
    this = v26;
    if (!v25)
      goto LABEL_22;
  }
  v30 = *v25;
  v31 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v31 += 4;
  v32 = 9;
  v33 = v31;
  v34 = 1;
  v35 = v30;
  v36 = 9;
  v38 = 1;
  *(_QWORD *)a3 = v30;
  *(_DWORD *)(a3 + 8) = 9;
  v37 = 0;
  *(_QWORD *)(a3 + 16) = v31;
LABEL_35:
  *(_BYTE *)(a3 + 24) = 1;
  *(_BYTE *)(a3 + 32) = 1;
LABEL_36:
  WebCore::Styleable::~Styleable((WebCore::Styleable *)&v35, a2);
  return WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v32, v20);
}

uint64_t WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WebCore::RenderEmbeddedObject *v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;

  v2 = a1[1];
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    return 0;
  v7 = a1[2];
  v5 = (uint64_t)(a1 + 2);
  v6 = v7;
  if (v7 && *(_DWORD *)(v6 - 12))
  {
    v8 = (_QWORD *)a1[3];
    if (v8)
    {
      while (!*(_QWORD *)(*v8 + 8))
      {
        v8 = (_QWORD *)v8[2];
        if (!v8)
          goto LABEL_5;
      }
      return 0;
    }
LABEL_5:
    WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v5, a2);
    v2 = a1[1];
  }
  v9 = *(WebCore::RenderEmbeddedObject **)(v2 + 32);
  v10 = *((_BYTE *)v9 + 52);
  if ((v10 & 7) != 3)
    goto LABEL_7;
  if (*((_BYTE *)v9 + 46) != 7)
    return 0;
  result = WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing(v9);
  if ((_DWORD)result)
  {
    v9 = *(WebCore::RenderEmbeddedObject **)(a1[1] + 32);
    v10 = *((_BYTE *)v9 + 52);
LABEL_7:
    if ((v10 & 7) != 1 || (*((_BYTE *)v9 + 53) & 4) == 0)
    {
      v11 = a2[2];
      if (!v11)
      {
        if (WebCore::RenderLayerBacking::paintsBoxDecorations(*(WebCore::RenderLayerBacking **)(*(_QWORD *)a2 + 8)))
          v11 = 3;
        else
          v11 = 2;
        a2[2] = v11;
      }
      if ((v11 - 3) >= 2)
      {
        v12 = a2[3];
        if (!v12)
        {
          v17 = 0;
          if (WebCore::RenderLayerBacking::paintsContent(*(_QWORD *)a2, &v17))
            v12 = 3;
          else
            v12 = 2;
          a2[3] = v12;
        }
        if ((v12 - 3) >= 2)
        {
          v13 = a1[1];
          v14 = *(_QWORD *)(v13 + 32);
          if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16) + 8) + 58) & 0x1C) != 0xC)
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8))
              return 1;
            v16 = *(_QWORD *)(v13 + 24);
            if ((v16 & 0x400000000000) == 0 || (v16 & 0xA) == 0)
              return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::isDirectlyCompositedImage(WebCore::RenderLayerBacking *this)
{
  WebCore::RenderLayer *v1;
  uint64_t v2;
  BOOL v3;
  int v6;
  uint64_t v7;
  const WebCore::FilterOperations *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];

  v1 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
  v2 = *((_QWORD *)v1 + 4);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 52) & 7) == 3;
  else
    v3 = 0;
  if (!v3 || (*(_BYTE *)(v2 + 53) & 1) == 0)
    return 0;
  v6 = *(_DWORD *)(v2 + 16) + 1;
  *(_DWORD *)(v2 + 16) = v6;
  if (WebCore::RenderLayer::hasVisibleBoxDecorationsOrBackground((WebCore::RenderLayer *)v2))
  {
    result = 0;
    goto LABEL_13;
  }
  if (!WebCore::RenderLayer::paintsWithFilters(v1, v7, v8))
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    if ((*(_DWORD *)(v10 + 20) & 0x1800000) != 0x1000000
      || ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
    {
      v11 = *(_BYTE *)(v10 + 52) & 7;
      v12 = *(_BYTE *)(v10 + 53) & 2;
      if (v11 != 3 || v12 == 0)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v2 + 224) + 24);
        if (v14)
        {
          result = *(_QWORD *)(v14 + 8);
          if (!result)
            goto LABEL_12;
          if (*(_QWORD *)(result + 688))
          {
            result = (uint64_t)WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)result, (const WebCore::RenderObject *)v2);
            if (result)
            {
              v15 = result;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              if ((_DWORD)result)
              {
                v16 = *(_QWORD *)(v15 + 64);
                v18[0] = 0;
                v18[4] = 0;
                v17 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 120))(v16, v18);
                result = 0;
                if (*(_BYTE *)(v17 + 44) == 1)
                  result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 488))(*((_QWORD *)this + 9), v15);
              }
            }
            goto LABEL_12;
          }
        }
      }
    }
  }
  result = 0;
LABEL_12:
  v6 = *(_DWORD *)(v2 + 16);
LABEL_13:
  if (v6)
  {
    *(_DWORD *)(v2 + 16) = v6 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::isUnscaledBitmapOnly(WebCore::RenderLayerBacking *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  WebCore::RenderView *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::RenderLayerCompositor *v26;
  WebCore::RenderLayerCompositor *v27;
  WTF *v28;
  void *v29;
  float v30;
  _BYTE v31[8];

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v3 = (*(_BYTE *)(v2 + 52) & 7) != 3 || (*(_BYTE *)(v2 + 53) & 1) == 0;
  if (v3 && *(_BYTE *)(v2 + 46) != 13 || (*(_BYTE *)(v2 + 23) & 0x60) != 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 16);
  v6 = *(unsigned __int8 *)(v5 + 52);
  v7 = (v6 & 0xE) == 0 || (v6 & 0xF) == 0;
  if (v7 || (result = 0, v30 = *(float *)(v5 + 48), ((v30 < 3.0) & (v6 >> 4)) == 0 && v30 <= 0.0))
  {
    v8 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8)
                                 + 1944);
    v9 = *((_QWORD *)v8 + 50);
    if (!v9)
    {
      v26 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v9 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v26, v8);
      v27 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v8 + 50);
      *((_QWORD *)v8 + 50) = v9;
      if (v27)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v27);
        WTF::fastFree(v28, v29);
        v9 = *((_QWORD *)v8 + 50);
      }
    }
    if (*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 356) >= 1.0)
    {
      v10 = WebCore::RenderLayerBacking::contentsBox(this);
      if (!v10)
      {
        v13 = v11;
        v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
        if (v14)
        {
          if ((*(_BYTE *)(v14 + 52) & 7) == 3 && (*(_BYTE *)(v14 + 53) & 1) != 0)
          {
            ++*(_DWORD *)(v14 + 16);
            v16 = *(_QWORD *)(*(_QWORD *)(v14 + 224) + 24);
            if (v16)
            {
              result = *(_QWORD *)(v16 + 8);
              if (!result)
              {
LABEL_33:
                v21 = *(_DWORD *)(v14 + 16);
                if (v21)
                {
                  *(_DWORD *)(v14 + 16) = v21 - 1;
                  return result;
                }
                __break(0xC471u);
                goto LABEL_50;
              }
              if (*(_QWORD *)(result + 688))
              {
                result = (uint64_t)WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)result, (const WebCore::RenderObject *)v14);
                if (result)
                {
                  v17 = result;
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                  if ((_DWORD)result)
                  {
                    v18 = *(_QWORD *)(v17 + 64);
                    v31[0] = 0;
                    v31[4] = 0;
                    v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 120))(v18, v31);
                    result = 0;
                    if (*(_BYTE *)(v19 + 44) == 1)
                    {
                      v20 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v17 + 64) + 176))(*(_QWORD *)(v17 + 64), 0);
                      result = (float)((float)SHIDWORD(v13) * 0.015625) == (float)SHIDWORD(v20)
                            && (float)((float)(int)v13 * 0.015625) == (float)(int)v20;
                    }
                  }
                }
                goto LABEL_33;
              }
            }
            result = 0;
            goto LABEL_33;
          }
        }
        if ((*(_WORD *)(*(_QWORD *)(v14 + 104) + 234) & 7u) - 3 >= 2)
        {
          if (*(_BYTE *)(v14 + 46) == 13)
          {
            v22 = (int)v11 / 64 + ((int)(v11 - (v12 & 0xFFFFFFC0) + 32) >> 6);
            v23 = (HIDWORD(v10) + HIDWORD(v11)) / 64
                - ((HIDWORD(v10) + 32) >> 6)
                + ((int)(HIDWORD(v10) + HIDWORD(v11) - (v11 & 0xFFFFFFC0) + 32) >> 6);
            v24 = WebCore::RenderHTMLCanvas::canvasElement((WebCore::RenderHTMLCanvas *)v14);
            return v22 == *(_DWORD *)(v24 + 120) && v23 == *(_DWORD *)(v24 + 124);
          }
          __break(0xC471u);
LABEL_50:
          JUMPOUT(0x1942AB698);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setDrawsContent(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x20) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 32;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFFFDF;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 2147483904, 0);
  }
  return this;
}

unint64_t *WebCore::GraphicsLayerCA::setContentsToSolidColor(WebCore::GraphicsLayerCA *this, const WebCore::Color *a2)
{
  unint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  const WebCore::Color *v17;
  __int128 v18;
  WTF::StringImpl *v19[2];

  result = (unint64_t *)((char *)this + 760);
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)this + 95);
  if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_14;
    v17 = a2;
    v7 = result;
    *(_OWORD *)v19 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v18 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)v19, (float *)&v18) || HIBYTE(*(_QWORD *)v17) != HIBYTE(*v7))
    {
      result = v7;
      a2 = v17;
      goto LABEL_14;
    }
    result = v7;
    a2 = v17;
    if (BYTE6(*(_QWORD *)v17) != BYTE6(*v7))
    {
LABEL_14:
      v8 = *WebCore::Color::operator=(result, a2);
      if ((v8 & 0x8000000000000) != 0)
      {
        if (*(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
        {
LABEL_16:
          v9 = *((_QWORD *)this + 83);
          if (v9)
            v10 = WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::unspecifiedBoolTypeInstance;
          else
            v10 = 0;
          *((_BYTE *)this + 888) = 0;
          *((_QWORD *)this + 83) = 0;
          if (v9)
            WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
          v11 = (_DWORD *)*((_QWORD *)this + 100);
          *((_QWORD *)this + 100) = 0;
          if (v11)
          {
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              --v11[2];
          }
          if (!v10)
            return (unint64_t *)WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x20000, 0);
          goto LABEL_39;
        }
      }
      else if (!(_BYTE)v8)
      {
        goto LABEL_16;
      }
      if (*((_QWORD *)this + 83) && *((_BYTE *)this + 888) == 4)
      {
        v12 = (_DWORD *)*((_QWORD *)this + 100);
        *((_QWORD *)this + 100) = 0;
        if (v12)
        {
          if (v12[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          else
            --v12[2];
        }
        return (unint64_t *)WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x20000, 0);
      }
      *((_BYTE *)this + 888) = 4;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::GraphicsLayerCA *, _QWORD, char *))(*(_QWORD *)this + 1208))(v19, this, 0, (char *)this + 608);
      WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::operator=<WebCore::PlatformCALayer>((uint64_t *)this + 83, (uint64_t *)v19);
      WTF::Ref<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::~Ref(v19);
      v13 = *((_QWORD *)this + 83);
      WebCore::GraphicsLayerCA::setContentsToSolidColor(WebCore::Color const&)::$_0::operator() const(void)::impl += 2;
      v19[0] = (WTF::StringImpl *)&WebCore::GraphicsLayerCA::setContentsToSolidColor(WebCore::Color const&)::$_0::operator() const(void)::impl;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 640))(v13, v19);
      v15 = v19[0];
      v19[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = (_DWORD *)*((_QWORD *)this + 100);
      *((_QWORD *)this + 100) = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
LABEL_39:
      WebCore::GraphicsLayerCA::noteSublayersChanged((uint64_t)this, 0);
      return (unint64_t *)WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x20000, 0);
    }
  }
  else if (v4 != v5 || (v5 & 0x8000000000000) != 0)
  {
    goto LABEL_14;
  }
  return result;
}

BOOL WebCore::RenderLayerBacking::paintsBoxDecorations(WebCore::RenderLayerBacking *this)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  _QWORD *v7;
  _BOOL8 result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;

  if ((*((_BYTE *)this + 26) & 8) == 0)
    return 0;
  v1 = *((_QWORD *)this + 4);
  v2 = *(_DWORD *)(v1 + 20);
  v3 = *(_QWORD **)(v1 + 88);
  if ((v2 & 0x60000000) == 0)
  {
    v4 = v3[2];
    v5 = *(unsigned __int8 *)(v4 + 52);
    v6 = (v5 & 0xE) == 0 || (v5 & 0xF) == 0;
    if (v6 || (v21 = *(float *)(v4 + 48), ((v21 < 3.0) & (v5 >> 4)) == 0 && v21 <= 0.0))
    {
      v7 = (_QWORD *)*((_QWORD *)this + 33);
      if (!v7
        || !v7[16]
        && !v7[17]
        && !v7[19]
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7[12] + 32) + 88) + 32) + 151) & 0x38) == 0)
      {
        return 0;
      }
    }
  }
  if ((v2 & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(v3[5] + 636) | ((unint64_t)(*(unsigned __int16 *)(v3[5] + 640) | (*(unsigned __int8 *)(v3[5] + 642) << 16)) << 32)) & 0x20000000000000) != 0)
  {
    return 1;
  }
  v9 = v3[3];
  if (*(float *)(v9 + 120) != 0.0 && (*(_BYTE *)(v9 + 124) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 112))
    {
      v17 = *(_QWORD *)(v9 + 104);
      if ((v17 & 0x4000000000000) != 0)
      {
        if ((v17 & 0x8000000000000) != 0)
        {
          if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_19;
        }
        else if (!*(_QWORD *)(v9 + 104))
        {
          goto LABEL_19;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 124) & 0xF) != 1)
      return 1;
  }
LABEL_19:
  if (*(float *)(v9 + 144) != 0.0 && (*(_BYTE *)(v9 + 148) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 136))
    {
      v18 = *(_QWORD *)(v9 + 128);
      if ((v18 & 0x4000000000000) != 0)
      {
        if ((v18 & 0x8000000000000) != 0)
        {
          if (*(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_21;
        }
        else if (!*(_QWORD *)(v9 + 128))
        {
          goto LABEL_21;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 148) & 0xF) != 1)
      return 1;
  }
LABEL_21:
  if (*(float *)(v9 + 168) != 0.0 && (*(_BYTE *)(v9 + 172) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 160))
    {
      v19 = *(_QWORD *)(v9 + 152);
      if ((v19 & 0x4000000000000) != 0)
      {
        if ((v19 & 0x8000000000000) != 0)
        {
          if (*(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_23;
        }
        else if (!*(_QWORD *)(v9 + 152))
        {
          goto LABEL_23;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 172) & 0xF) != 1)
      return 1;
  }
LABEL_23:
  if (*(float *)(v9 + 192) != 0.0)
  {
    v10 = *(_BYTE *)(v9 + 196) & 0xF;
    if ((*(_BYTE *)(v9 + 196) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v9 + 184))
      {
        v20 = *(_QWORD *)(v9 + 176);
        if ((v20 & 0x4000000000000) != 0)
        {
          if ((v20 & 0x8000000000000) != 0)
          {
            if (*(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_25;
          }
          else if (!(_BYTE)v20)
          {
            goto LABEL_25;
          }
        }
      }
      if (v10 != 1)
        return 1;
    }
  }
LABEL_25:
  if ((WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v1 + 80)) & 1) != 0)
    return 1;
  v11 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(unsigned __int8 *)(v12 + 52);
  v14 = (v13 & 0xE) == 0 || (v13 & 0xF) == 0;
  if (v14 || (v22 = *(float *)(v12 + 48), (result = 1, ((v22 < 3.0) & (v13 >> 4)) == 0) && v22 <= 0.0))
  {
    v15 = *(_QWORD *)(v11 + 32);
    if ((*(_DWORD *)(v15 + 148) & 0x1FC000) != 0)
      return 1;
    if (*(_QWORD *)(v15 + 88))
      return 1;
    if (*(_DWORD *)(*(_QWORD *)(v15 + 32) + 20))
      return 1;
    if (WebCore::RenderStyle::hasBackgroundImage((WebCore::RenderStyle *)(v1 + 80)))
      return 1;
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 40);
    return *(float *)(v16 + 260) != -1.0 || (*(_DWORD *)(v16 + 636) & 0x380) == 0x80;
  }
  return result;
}

uint64_t WebCore::Styleable::mayHaveNonZeroOpacity(WebCore::Styleable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  unsigned int **v15;
  unsigned int v16;
  char v17;

  v2 = WebCore::Styleable::renderer(this);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 88);
  if (*(float *)(*(_QWORD *)(v3 + 32) + 4) != 0.0)
    return 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 200);
  if (v6)
  {
    if (WebCore::WillChangeData::containsProperty(v6, 183))
      return 1;
  }
  v7 = WebCore::Element::keyframeEffectStack(*(_QWORD *)this, (uint64_t)this + 8);
  if (!v7 || !*(_DWORD *)(v7 + 12))
    return 0;
  WebCore::KeyframeEffectStack::sortedEffects(&v15, (unsigned int **)v7);
  if (v16)
  {
    v9 = v15;
    v10 = 8 * v16 - 8;
    do
    {
      if (*v9)
        v11 = *((_QWORD *)*v9 + 1);
      else
        v11 = 0;
      v13 = 183;
      v14 = 0;
      v4 = WebCore::KeyframeEffect::animatesProperty(v11, (uint64_t)&v13);
      if (v14 != -1)
        ((void (*)(char *, __int16 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                 + v14))(&v17, &v13);
      ++v9;
      if (v10)
        v12 = v4;
      else
        v12 = 1;
      v10 -= 8;
    }
    while (v12 != 1);
  }
  else
  {
    v4 = 0;
  }
  WTF::Vector<WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v8);
  return v4;
}

uint64_t WebCore::Styleable::renderer(WebCore::Styleable *this)
{
  uint64_t result;
  int v2;
  void *v3;
  int v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;

  if (*((_BYTE *)this + 24))
  {
    v2 = *((_DWORD *)this + 2) - 5;
    result = 0;
    switch(v2)
    {
      case 0:
        if ((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) == 0)
          return 0;
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_64;
        if (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 19)
          return 0;
        v6 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0xF8);
        if (!v6)
          return 0;
        v7 = *(_QWORD *)(v6 + 8);
        if (!v7)
          return 0;
        result = v7;
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 80))
        {
          v8 = *(_QWORD *)(v7 + 96);
          if ((v8 & 0x4000000000) != 0 || (v8 & 0xF00000000000) == 0x300000000000)
            return 0;
        }
        return result;
      case 1:
        if ((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) == 0)
          return 0;
        v9 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
        if (!v9)
          return 0;
        result = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
        if (result && (*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942AC048);
        }
        return result;
      case 2:
        if ((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) == 0)
          return 0;
        v14 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0xB0);
        if (!v14)
          return 0;
        result = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL;
        if (result && (*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942AC1A4);
        }
        return result;
      case 3:
      case 5:
      case 6:
        return result;
      case 4:
        v10 = *(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL;
        if (!v10)
          return 0;
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942AC214);
        }
        WebCore::RenderElement::backdropRenderer(v10, &v17);
        goto LABEL_44;
      case 7:
        if ((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) == 0)
          return 0;
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_66;
        WebCore::RenderView::viewTransitionRoot(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL)+ 0x18)+ 8)+ 40)+ 8)+ 1944), &v17);
LABEL_44:
        v12 = v17;
        if (!v17)
          return 0;
        v13 = *((_QWORD *)v17 + 1);
        v17 = 0;
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v11);
        else
          --*(_DWORD *)v12;
        return v13;
      case 8:
      case 9:
      case 10:
      case 11:
        if ((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) == 0)
          return 0;
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          goto LABEL_63;
        }
        WebCore::RenderView::viewTransitionRoot(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL)+ 0x18)+ 8)+ 40)+ 8)+ 1944), &v20);
        if (!v20)
          return 0;
        if (*((_QWORD *)v20 + 1)
          && (v19 = *((_QWORD *)v20 + 1),
              v17 = (WTF *)WebCore::RenderChildIteratorAdapter<WebCore::RenderBlockFlow>::begin(&v19),
              v18 = (uint64_t)v3,
              (v15 = (uint64_t)v3) != 0))
        {
          while (1)
          {
            if (!*((_BYTE *)this + 24))
              goto LABEL_63;
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 592) == *((_QWORD *)this + 2))
              break;
            WebCore::RenderChildIterator<WebCore::RenderBlockFlow>::operator++((uint64_t)&v17);
            v15 = v18;
            if (!v18)
              goto LABEL_15;
          }
          if (*((_DWORD *)this + 2) != 13)
          {
            v17 = (WTF *)WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBox>::begin(v15);
            v18 = (uint64_t)v3;
            v15 = (uint64_t)v3;
            if (v3)
            {
              while (*((_BYTE *)this + 24))
              {
                if (((*(_QWORD *)(v15 + 96) >> 43) & 0x1F) == *((_DWORD *)this + 2))
                  goto LABEL_16;
                WebCore::RenderDescendantIterator<WebCore::RenderBox>::operator++((uint64_t *)&v17);
                v15 = v18;
                if (!v18)
                  goto LABEL_55;
              }
LABEL_63:
              __break(1u);
LABEL_64:
              __break(0xC471u);
              JUMPOUT(0x1942AC1F4);
            }
LABEL_55:
            v15 = 0;
            v4 = 2;
            goto LABEL_17;
          }
        }
        else
        {
LABEL_15:
          v15 = 0;
        }
LABEL_16:
        v4 = 1;
LABEL_17:
        v5 = v20;
        v20 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, v3);
          else
            --*(_DWORD *)v5;
        }
        result = v15;
        if (v4 == 1)
          return result;
        return 0;
      default:
        return 0;
    }
  }
  result = *(_QWORD *)(*(_QWORD *)this + 64) & 0xFFFFFFFFFFFFLL;
  if (result && (*(_BYTE *)(result + 45) & 2) != 0)
  {
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x1942ABE88);
  }
  return result;
}

BOOL WebCore::RenderLayer::backgroundIsKnownToBeOpaqueInRect(WebCore::RenderLayer *this, const WebCore::LayoutRect *a2)
{
  const WebCore::FilterOperations *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderView *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int ***v16;
  int v17;
  uint64_t v18;
  WebCore::RenderLayerCompositor *v19;
  WebCore::RenderLayerCompositor *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((*((_BYTE *)this + 25) & 0x18) == 0)
    return 0;
  if ((WebCore::RenderLayer::paintsWithTransparency(this, 0) & 1) != 0)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8)
    || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 239) & 4) != 0
    || (*(_BYTE *)(v5 + 120) & 0x30) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 32) + 32);
  v7 = *(_DWORD *)(v6 + 20);
  if (v7)
  {
    if ((v16 = (unsigned int ***)(v6 + 8), v17 = *(unsigned __int8 *)(v5 + 46), v17 != 103) && v17 != 83
      || v7 != 1
      || *((_BYTE *)**v16 + 12))
    {
      if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v5, v16, v4) & 1) == 0)
      {
        v18 = *((_QWORD *)this + 32);
        if ((!v18 || !*(_BYTE *)(v18 + 292))
          && (WebCore::FilterOperations::hasFilterThatAffectsOpacity((uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 88) + 32)
                                                                                            + 32)
                                                                                + 8)) & 1) != 0)
        {
          return 0;
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 32);
  if (v8)
  {
    if (!*(_BYTE *)(v8 + 290))
    {
      v12 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      {
        v13 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944);
        v14 = *((_QWORD *)v13 + 50);
        if (!v14)
        {
          v23 = *((_QWORD *)this + 32);
          v19 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v14 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v19, v13);
          v20 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v13 + 50);
          *((_QWORD *)v13 + 50) = v14;
          if (v20)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v20);
            WTF::fastFree(v21, v22);
            v14 = *((_QWORD *)v13 + 50);
          }
          v8 = v23;
        }
        if (!*(_BYTE *)(v14 + 198))
        {
          v15 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 32) + 24) + 8)
                                                                                                + 40)
                                                                                    + 8)
                                                                        + 1944));
          if (*((_QWORD *)this + 25))
          {
            if (*(_DWORD *)(v15 + 216) != 2)
              return 0;
          }
        }
      }
    }
  }
  else if (*((_QWORD *)this + 25))
  {
    return 0;
  }
  if ((*((_WORD *)this + 12) & 0x180) != 0)
    return 0;
  v10 = *((_QWORD *)this + 4);
  if (*(unsigned __int8 *)(v10 + 46) - 36 < 5)
    return 0;
  if ((*(_BYTE *)(v10 + 45) & 1) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (v11)
    {
      if ((*(_WORD *)(v11 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        return 0;
      }
    }
  }
  if (((*(uint64_t (**)(uint64_t, const WebCore::LayoutRect *))(*(_QWORD *)v10 + 808))(v10, a2) & 1) != 0)
    return 1;
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 1) != 0)
    return 0;
  v26 = *((_QWORD *)this + 11);
  if (WebCore::RenderLayer::listBackgroundIsKnownToBeOpaqueInRect((uint64_t)this, &v26, (__int128 *)a2))
    return 1;
  v25 = *((_QWORD *)this + 12);
  if (WebCore::RenderLayer::listBackgroundIsKnownToBeOpaqueInRect((uint64_t)this, &v25, (__int128 *)a2))
    return 1;
  v24 = *((_QWORD *)this + 13);
  return WebCore::RenderLayer::listBackgroundIsKnownToBeOpaqueInRect((uint64_t)this, &v24, (__int128 *)a2);
}

BOOL WebCore::RenderLayer::listBackgroundIsKnownToBeOpaqueInRect(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t i;
  uint64_t v11;
  WebCore::RenderLayer *v12;
  WebCore::RenderLayer *v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;

  v3 = *a2;
  if (!*a2)
    return 0;
  v4 = *(unsigned int *)(v3 + 12);
  if (!(_DWORD)v4)
    return 0;
  for (i = *(_QWORD *)v3 + 8 * v4; ; i -= 8)
  {
    v11 = v3 ? *(_QWORD *)v3 : 0;
    v5 = i != v11;
    if (i == v11)
      break;
    v13 = *(WebCore::RenderLayer **)(i - 8);
    v12 = v13;
    if (!*((_QWORD *)v13 + 32))
    {
      v14 = *((_QWORD *)v12 + 4);
      v15 = *(_DWORD *)(v14 + 20);
      if ((v15 & 0x20000) == 0)
        goto LABEL_39;
      v23 = *((_QWORD *)v12 + 4);
      if ((*(_BYTE *)(v14 + 45) & 2) != 0)
        v23 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8);
      v24 = *(_QWORD *)(v23 + 88);
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 40) + 20))
      {
        v25 = *(_QWORD **)(v24 + 40);
        if (!v25[41] && !v25[38] && !v25[39] && !v25[40] && (v15 & 0x100000) == 0)
        {
LABEL_39:
          v16 = *(unsigned __int8 *)(v14 + 46);
          if (v16 != 83 && v16 != 103)
          {
            v26 = *a3;
            v17 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)v12, a1, 0);
            if (HIDWORD(v17) == 0x80000000)
              v18 = 0x7FFFFFFF;
            else
              v18 = -HIDWORD(v17);
            if ((_DWORD)v17 == 0x80000000)
              v19 = 0x7FFFFFFF;
            else
              v19 = -(int)v17;
            v20 = __OFADD__((_DWORD)v26, v19);
            v21 = v26 + v19;
            if (v20)
              v21 = (v26 >> 31) + 0x7FFFFFFF;
            v20 = __OFADD__(DWORD1(v26), v18);
            v22 = DWORD1(v26) + v18;
            if (v20)
              v22 = (DWORD1(v26) >> 31) + 0x7FFFFFFF;
            *(_QWORD *)&v26 = __PAIR64__(v22, v21);
            if ((WebCore::RenderLayer::backgroundIsKnownToBeOpaqueInRect(v12, (const WebCore::LayoutRect *)&v26) & 1) != 0)
              return v5;
            v3 = *a2;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t WebCore::RenderLayerBacking::paintsContent(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  WebCore::RenderLayer *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  _QWORD *v16;
  char v17;

  WebCore::RenderLayer::updateDescendantDependentFlags(*(WebCore::RenderLayer **)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v4 + 26) & 8) != 0)
  {
    v15 = 0;
    WebCore::determineNonLayerDescendantsPaintedContent(*(_QWORD *)(v4 + 32), (WebCore::RenderObject *)&v15, a2);
    v5 = *a2;
    v6 = (*a2 - 3) < 2;
  }
  else
  {
    v6 = 0;
    v5 = *a2;
  }
  if (!v5)
  {
    v17 = 0;
    v8 = *(WebCore::RenderLayer **)(a1 + 8);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v9 = off_1E34291A8;
    v9[1] = &v17;
    v9[2] = a2;
    v9[3] = a1;
    v16 = v9;
    WebCore::traverseVisibleNonCompositedDescendantLayers(v8, &v16);
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    if (v17)
      v6 = 1;
    else
      v6 = v6;
    if (!*a2)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(v11 + 32);
      if ((*(_BYTE *)(v12 + 52) & 7) == 4 && (*(_BYTE *)(v12 + 53) & 1) == 0)
      {
        v6 = (*(_BYTE *)(v11 + 26) & 8) != 0 && WebCore::lineageOfType<WebCore::RenderSVGHiddenContainer>(v12) == 0;
        v14 = 3;
      }
      else
      {
        v14 = 2;
      }
      *a2 = v14;
    }
  }
  return v6;
}

uint64_t WebCore::determineNonLayerDescendantsPaintedContent(uint64_t result, WebCore::RenderObject *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v32;
  float v33;

  if (!(*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)))
    return result;
  v3 = *(_QWORD *)((*(unsigned int *)(result + 64) | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
  if (!v3)
    return result;
  v6 = result;
  while (1)
  {
    v7 = *(_DWORD *)a2 + 1;
    *(_DWORD *)a2 = v7;
    if (v7 >= 0xC9)
    {
      if (!*a3)
        *a3 = 4;
      return result;
    }
    v8 = *(_BYTE *)(v3 + 45);
    if ((v8 & 2) != 0)
      break;
LABEL_22:
    if ((v8 & 2) != 0)
      v19 = 0;
    else
      v19 = v3;
    if (v19)
    {
      ++*(_DWORD *)(v19 + 16);
      if ((v8 & 2) != 0)
        goto LABEL_57;
      v8 = *(_BYTE *)(v3 + 45);
    }
    else if ((v8 & 2) != 0)
    {
      goto LABEL_44;
    }
    if ((v8 & 0x10) != 0)
    {
      v20 = *(_QWORD *)(v3 + 144);
      if (v20)
      {
        if ((*(_BYTE *)(v20 + 25) & 8) != 0)
        {
LABEL_57:
          v24 = 3;
          goto LABEL_38;
        }
      }
    }
    if ((*(_BYTE *)(v3 + 23) & 0x60) != 0
      || ((v21 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16), v22 = *(unsigned __int8 *)(v21 + 52), (v22 & 0xE) != 0)
        ? (v23 = (v22 & 0xF) == 0)
        : (v23 = 1),
          !v23 && (v33 = *(float *)(v21 + 48), ((v33 < 3.0) & (v22 >> 4)) != 0 || v33 > 0.0)
       || (*(_BYTE *)(v3 + 52) & 7) == 3))
    {
      *a3 = 3;
      v24 = 1;
    }
    else
    {
      result = WebCore::determineNonLayerDescendantsPaintedContent(v3, a2, a3);
      v24 = *a3 != 0;
    }
LABEL_38:
    v25 = *(_DWORD *)(v19 + 16);
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x1942ACA24);
    }
    *(_DWORD *)(v19 + 16) = v25 - 1;
    if (v24 != 3 && v24)
      return result;
LABEL_44:
    v27 = *(unsigned int *)(v3 + 47);
    if (v27 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
    {
      v3 = *(_QWORD *)((v27 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
      if (v3)
        continue;
    }
    return result;
  }
  ++*(_DWORD *)(v3 + 16);
  result = WebCore::RenderText::hasRenderedText((WebCore::RenderText *)v3, a2);
  if (!(_DWORD)result)
  {
    v26 = *(_DWORD *)(v3 + 16);
    if (!v26)
      goto LABEL_64;
    *(_DWORD *)(v3 + 16) = v26 - 1;
    goto LABEL_44;
  }
  v9 = *(_QWORD *)(v6 + 104);
  if ((*(_BYTE *)(v9 + 239) & 1) == 0)
  {
    if ((v10 = *(_DWORD *)(v9 + 228), (v10 & 0x30) != 0)
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 32) + 148) & 0xC00000) != 0x800000
      || (v10 & 0x18000) != 0)
    {
      *a3 = 3;
    }
  }
  v11 = *(_QWORD *)(v3 + 104);
  if (!v11)
    goto LABEL_19;
  v12 = *(unsigned __int8 **)(v11 + 8);
  v13 = *(unsigned int *)(v11 + 4);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
    if ((_DWORD)v13)
    {
      while (1)
      {
        v14 = *v12;
        v15 = v14 > 0x20;
        v16 = (1 << v14) & 0x100003600;
        if (v15 || v16 == 0)
          goto LABEL_60;
        ++v12;
        if (!--v13)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  if (!(_DWORD)v13)
  {
LABEL_19:
    if (*a3)
      goto LABEL_61;
    v18 = *(_DWORD *)(v3 + 16);
    if (!v18)
      goto LABEL_64;
    *(_DWORD *)(v3 + 16) = v18 - 1;
    v8 = *(_BYTE *)(v3 + 45);
    goto LABEL_22;
  }
  v28 = 2 * v13;
  while (1)
  {
    v29 = *(unsigned __int16 *)v12;
    v15 = v29 > 0x20;
    v30 = (1 << v29) & 0x100003600;
    if (v15 || v30 == 0)
      break;
    v12 += 2;
    v28 -= 2;
    if (!v28)
      goto LABEL_19;
  }
LABEL_60:
  *a3 = 3;
LABEL_61:
  v32 = *(_DWORD *)(v3 + 16);
  if (!v32)
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1942AC9FCLL);
  }
  *(_DWORD *)(v3 + 16) = v32 - 1;
  return result;
}

uint64_t WebCore::traverseVisibleNonCompositedDescendantLayers(WebCore::RenderLayer *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  WebCore::RenderLayer::updateLayerListsIfNeeded(a1);
  v4 = *((_QWORD *)a1 + 13);
  if (v4)
  {
    v9 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)v4;
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        v13 = *(_QWORD *)(*v10 + 256);
        if (!v13 || !*(_BYTE *)(v13 + 291))
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v10);
          if ((_DWORD)result == 1)
            return result;
          if (WebCore::traverseVisibleNonCompositedDescendantLayers(v12, a2))
            return 1;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  if ((*((_QWORD *)a1 + 3) & 0x4ALL) == 0 || (*((_QWORD *)a1 + 3) & 0x200000) != 0)
  {
    v6 = *((_QWORD *)a1 + 12);
    if (v6)
    {
      v14 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD **)v6;
        v16 = 8 * v14;
        do
        {
          v17 = *v15;
          v18 = *(_QWORD *)(*v15 + 256);
          if (!v18 || !*(_BYTE *)(v18 + 291))
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v15);
            if ((_DWORD)result == 1)
              return result;
            if (WebCore::traverseVisibleNonCompositedDescendantLayers(v17, a2))
              return 1;
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
    v7 = *((_QWORD *)a1 + 11);
    if (v7)
    {
      v19 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD **)v7;
        v21 = 8 * v19;
        while (1)
        {
          v22 = *v20;
          v23 = *(_QWORD *)(*v20 + 256);
          if (!v23 || !*(_BYTE *)(v23 + 291))
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v20);
            if ((_DWORD)result == 1)
              return result;
            if (WebCore::traverseVisibleNonCompositedDescendantLayers(v22, a2))
              break;
          }
          result = 0;
          ++v20;
          v21 -= 8;
          if (!v21)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsLayerCA::setUserInteractionEnabled(uint64_t this, int a2)
{
  int v2;
  char v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(this + 177) | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x40000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v3 = 4;
    else
      v3 = 0;
    v4 = v2 & 0xFFFBFFFF;
    *(_WORD *)(this + 177) = v4;
    *(_BYTE *)(this + 179) = BYTE2(v4) | v3;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x1000000000, 0);
  }
  return this;
}

uint64_t WebCore::KeyframeEffect::animatesProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int i;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;

  if (*(_DWORD *)(a1 + 156))
  {
    v3 = *(_QWORD *)(a1 + 160);
    if (!v3)
      return 0;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      v5 = *(_DWORD *)(v3 - 8);
      v20[0] = &v21;
      v6 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v4])(v20, a2);
      for (i = 0; ; v6 = i + v8)
      {
        v8 = v6 & v5;
        v9 = (unsigned __int16 *)(v3 + 16 * (v6 & v5));
        v10 = *((unsigned int *)v9 + 2);
        v11 = *(_DWORD *)(a2 + 8);
        v13 = v11 == (_DWORD)v10 && v11 != -1;
        if ((_DWORD)v10 == -1 || !v13)
        {
          v15 = v11 == -1;
          if ((_DWORD)v10 != -1)
            v15 = v13;
          if (v15)
            return 1;
        }
        else
        {
          v20[0] = &v21;
          if ((((uint64_t (*)(_QWORD *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v10])(v20, v3 + 16 * v8, a2) & 1) != 0)return 1;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
        }
        if ((_DWORD)v10)
          v16 = 0;
        else
          v16 = *v9 == 0;
        if (v16)
          return 0;
        ++i;
      }
    }
  }
  else
  {
    v20[0] = a1;
    v20[1] = a1;
    v18 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v18 != -1)
    {
      v21 = v20;
      return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14KeyframeEffect16animatesPropertyERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEE3__0JZNKS9_16animatesPropertyESF_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v21, a2) != -1;
    }
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Vector<WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WebCore::ContentSecurityPolicy::allowStyleFromSource(uint64_t a1, WTF::URL *this, unsigned __int8 a3, WTF::URL *a4)
{
  uint64_t v4;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 v20;
  _QWORD v21[2];
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 148))
    return 1;
  v10 = (unsigned __int8 *)WTF::URL::protocol(this);
  if ((WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(v10, v11, v12, v13) & 1) != 0)
    return 1;
  v24 = 0;
  if (!*(_QWORD *)a4)
    a4 = this;
  v23 = 0xFFFFFFFFLL;
  WTF::String::trim();
  v14 = operator new(0x30uLL);
  *v14 = &off_1E3403558;
  v14[1] = this;
  v14[2] = a1;
  v14[3] = a4;
  v14[4] = &v24;
  v14[5] = &v23;
  v26 = v14;
  v21[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForStyle;
  v21[1] = 0;
  v20 = a3;
  v4 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL,WTF::String const&)const,WTF::URL const&,BOOL,WTF::String&>(a1, (uint64_t)v25, (uint64_t)v21, (uint64_t)this, &v20, (uint64_t)&v22);
  v16 = v26;
  if (v26 == v25)
  {
    v17 = 4;
    v16 = v25;
    goto LABEL_10;
  }
  if (v26)
  {
    v17 = 5;
LABEL_10:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  return v4;
}

uint64_t WebCore::ContentSecurityPolicy::allowResourceFromSource(uint64_t a1, WTF::URL *this, unsigned __int8 a3, uint64_t a4, uint64_t a5, WTF::URL *a6)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::URL *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD v23[2];
  _BYTE v24[24];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23[0] = a4;
  v23[1] = a5;
  if (!*(_DWORD *)(a1 + 148))
    return 1;
  v9 = (unsigned __int8 *)WTF::URL::protocol(this);
  if ((WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(v9, v10, v11, v12) & 1) != 0)
    return 1;
  v22 = 0;
  if (*(_QWORD *)a6)
    v13 = a6;
  else
    v13 = this;
  v21 = 0xFFFFFFFFLL;
  v14 = operator new(0x30uLL);
  *v14 = &off_1E3403480;
  v14[1] = this;
  v14[2] = a1;
  v14[3] = v13;
  v14[4] = &v22;
  v14[5] = &v21;
  v25 = v14;
  v20 = a3;
  v19 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*&)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(*(_QWORD **)(a1 + 136), *(_DWORD *)(a1 + 148), (uint64_t)v24, (uint64_t)v23, (uint64_t)this, &v20);
  (*(void (**)(_QWORD *))(*v14 + 40))(v14);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  return v19;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFont(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  const WTF::URL *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v4 = a2;
  v6 = *((_QWORD *)this + 8);
  if (qword_1EE2E4148)
  {
    a2 = (const WTF::URL *)(qword_1EE2E4148 - 1);
    if (qword_1EE2E4148 == 1)
    {
      v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v8 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v8;
      if (v6)
      {
LABEL_6:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_7;
      }
      v11 = (uint64_t *)((char *)this + 56);
      v16 = *((_QWORD *)this + 7);
      if (v16)
      {
        v13 = (WTF::StringImpl **)(v16 + 32);
LABEL_14:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_15;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v18;
      if (v6)
      {
        if (!v18)
          goto LABEL_7;
        v8 = *(_DWORD *)v18;
        goto LABEL_6;
      }
      v12 = *((_QWORD *)this + 7);
      v11 = (uint64_t *)((char *)this + 56);
      v10 = v12;
      if (v12)
      {
        v13 = (WTF::StringImpl **)(v10 + 32);
        if (!v18)
          goto LABEL_15;
        v8 = *(_DWORD *)v18;
        goto LABEL_14;
      }
    }
LABEL_18:
    v6 = *v11;
LABEL_19:
    if (!v7)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (!v6)
  {
    v11 = (uint64_t *)((char *)this + 56);
    v17 = *((_QWORD *)this + 7);
    if (v17)
    {
      v7 = 0;
      v13 = (WTF::StringImpl **)(v17 + 32);
LABEL_15:
      v14 = *v13;
      *v13 = v7;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      goto LABEL_18;
    }
    v7 = 0;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_7:
  v9 = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v7;
  if (!v9)
    goto LABEL_19;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    *(_DWORD *)v9 -= 2;
    if (!v7)
      goto LABEL_22;
  }
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, a2);
  else
    *(_DWORD *)v7 -= 2;
LABEL_22:
  if (!v6
    || *(_QWORD *)v4
    && *(_DWORD *)(*(_QWORD *)v4 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v6 + 40), v4, a3))
  {
    return 0;
  }
  return v6;
}

uint64_t WebCore::ContentSecurityPolicySourceList::matches(WebCore::ContentSecurityPolicySourceList *this, const WTF::URL *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  size_t v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  size_t v39;
  BOOL v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v47;
  size_t v48;
  int v49;

  if (!*((_BYTE *)this + 74))
    goto LABEL_18;
  v6 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (!*(_BYTE *)(v7 + 178) && (*(_QWORD *)(*(_QWORD *)(v7 + 392) + 664) & 0x2000) != 0)
        return 1;
    }
  }
  if ((*((_BYTE *)a2 + 8) & 2) != 0 || (WTF::URL::protocolIs() & 1) != 0 || (WTF::URL::protocolIs() & 1) != 0)
    v8 = 1;
  else
    v8 = WTF::URL::protocolIs();
  v9 = *((_QWORD *)this + 8);
  if (!v9)
    goto LABEL_17;
  if (WebCore::ContentSecurityPolicyDirectiveNames::imgSrc)
    v10 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::imgSrc);
  else
    v10 = 0;
  v11 = *(unsigned int *)(v9 + 4);
  if (v10 == v11)
  {
    v24 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if (v10)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v24) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                    + *WebCore::ContentSecurityPolicyDirectiveNames::imgSrc))
          goto LABEL_14;
        v25 = 0;
        v26 = v24 + 1;
        while (v10 - 1 != v25)
        {
          v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v26[v25]);
          v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::imgSrc[++v25]);
          if (v27 != v28)
            goto LABEL_57;
        }
      }
    }
    else if (v10)
    {
      if ((*(unsigned __int16 *)v24 | (32 * (*(unsigned __int16 *)v24 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::imgSrc))
        goto LABEL_14;
      v25 = 0;
      v41 = v24 + 2;
      while (v10 - 1 != v25)
      {
        v42 = *(unsigned __int16 *)&v41[2 * v25] | (32 * (*(unsigned __int16 *)&v41[2 * v25] - 65 < 0x1A));
        v43 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::imgSrc[++v25]);
        if (v42 != v43)
        {
LABEL_57:
          if (v25 < v10)
            goto LABEL_14;
          break;
        }
      }
    }
    if (((v8 | WTF::URL::protocolIs()) & 1) != 0)
      return 1;
    goto LABEL_18;
  }
LABEL_14:
  if (WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc)
    v12 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc);
  else
    v12 = 0;
  if (v12 == v11)
  {
    v29 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v29) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                    + *WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc))
          goto LABEL_17;
        v30 = 0;
        v31 = v29 + 1;
        while (v11 - 1 != v30)
        {
          v32 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[v30]);
          v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc[++v30]);
          if (v32 != v33)
            goto LABEL_66;
        }
      }
    }
    else if ((_DWORD)v11)
    {
      if ((*(unsigned __int16 *)v29 | (32 * (*(unsigned __int16 *)v29 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc))
        goto LABEL_17;
      v30 = 0;
      v44 = v29 + 2;
      while (v11 - 1 != v30)
      {
        v45 = *(unsigned __int16 *)&v44[2 * v30] | (32 * (*(unsigned __int16 *)&v44[2 * v30] - 65 < 0x1A));
        v46 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                 + WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc[++v30]);
        if (v45 != v46)
        {
LABEL_66:
          if (v30 < v11)
            goto LABEL_17;
          break;
        }
      }
    }
    if ((WTF::URL::protocolIs() & 1) != 0)
      v34 = 1;
    else
      v34 = WTF::URL::protocolIs();
    if (v34 | v8)
      return 1;
    goto LABEL_18;
  }
LABEL_17:
  if ((v8 & 1) != 0)
    return 1;
LABEL_18:
  if (!*((_BYTE *)this + 73))
    goto LABEL_26;
  v13 = *((_QWORD *)this + 8);
  if (!v13)
    goto LABEL_23;
  v14 = WebCore::ContentSecurityPolicyDirectiveNames::frameSrc
      ? strlen(WebCore::ContentSecurityPolicyDirectiveNames::frameSrc)
      : 0;
  if (v14 != *(_DWORD *)(v13 + 4))
    goto LABEL_23;
  v35 = *(unsigned __int8 **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    if (v14)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v35) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *WebCore::ContentSecurityPolicyDirectiveNames::frameSrc))
      {
        v36 = 1;
        while (v14 != v36)
        {
          v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[v36]);
          v38 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::frameSrc[v36++]);
          if (v37 != v38)
          {
            v39 = v36 - 1;
            goto LABEL_77;
          }
        }
        v39 = v14;
LABEL_77:
        v40 = v39 >= v14;
        goto LABEL_78;
      }
LABEL_23:
      v15 = 0;
      goto LABEL_24;
    }
LABEL_105:
    v15 = 1;
    goto LABEL_24;
  }
  if (!v14)
    goto LABEL_105;
  if ((*(unsigned __int16 *)v35 | (32 * (*(unsigned __int16 *)v35 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::frameSrc))
    goto LABEL_23;
  v47 = 1;
  do
  {
    v48 = v47;
    if (v14 == v47)
      break;
    v49 = *(unsigned __int16 *)&v35[2 * v47] | (32 * (*(unsigned __int16 *)&v35[2 * v47] - 65 < 0x1A));
    ++v47;
  }
  while (v49 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                    + WebCore::ContentSecurityPolicyDirectiveNames::frameSrc[v48]));
  v40 = v48 >= v14;
LABEL_78:
  v15 = v40;
LABEL_24:
  if (WebCore::ContentSecurityPolicy::urlMatchesSelf(*(WebCore::ContentSecurityPolicy **)this, a2, v15))
    return 1;
LABEL_26:
  v17 = *((unsigned int *)this + 5);
  if ((_DWORD)v17)
  {
    v18 = *((_QWORD *)this + 1);
    v19 = 5 * v17;
    if ((a3 & 1) != 0)
    {
      v20 = 8 * v19;
      while (1)
      {
        if (WebCore::ContentSecurityPolicySource::schemeMatches((WebCore::ContentSecurityPolicySource *)v18, a2))
        {
          v21 = *(_QWORD *)(v18 + 16);
          if ((!v21 || !*(_DWORD *)(v21 + 4)) && !*(_BYTE *)(v18 + 36))
            break;
          if (WebCore::ContentSecurityPolicySource::hostMatches((WebCore::ContentSecurityPolicySource *)v18, a2)
            && (WebCore::ContentSecurityPolicySource::portMatches((WebCore::ContentSecurityPolicySource *)v18, a2) & 1) != 0)
          {
            break;
          }
        }
        v18 += 40;
        v20 -= 40;
        if (!v20)
          return 0;
      }
    }
    else
    {
      v22 = 8 * v19;
      while (1)
      {
        if (WebCore::ContentSecurityPolicySource::schemeMatches((WebCore::ContentSecurityPolicySource *)v18, a2))
        {
          v23 = *(_QWORD *)(v18 + 16);
          if ((!v23 || !*(_DWORD *)(v23 + 4)) && !*(_BYTE *)(v18 + 36))
            break;
          if (WebCore::ContentSecurityPolicySource::hostMatches((WebCore::ContentSecurityPolicySource *)v18, a2)
            && WebCore::ContentSecurityPolicySource::portMatches((WebCore::ContentSecurityPolicySource *)v18, a2)&& WebCore::ContentSecurityPolicySource::pathMatches((WebCore::ContentSecurityPolicySource *)v18, a2))
          {
            break;
          }
        }
        v18 += 40;
        v22 -= 40;
        if (!v22)
          return 0;
      }
    }
    return 1;
  }
  return 0;
}

BOOL WebCore::ContentSecurityPolicySource::schemeMatches(WebCore::ContentSecurityPolicySource *this, const WTF::URL *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  _QWORD v11[2];
  WTF::StringImpl *v12;

  v4 = (WTF **)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  if (!v3 || !*(_DWORD *)(v3 + 4))
    v4 = (WTF **)(*(_QWORD *)this + 128);
  v11[0] = WTF::URL::protocol(a2);
  v11[1] = v5;
  WTF::StringView::convertToASCIILowercase((WTF::StringView *)v11);
  v8 = (WTF::equal(*v4, v12, v6) & 1) != 0
    || MEMORY[0x19AEA53F4](*v4, "http", 4) && (MEMORY[0x19AEA53F4](v12, "https", 5) & 1) != 0
    || MEMORY[0x19AEA53F4](*v4, "ws", 2)
    && ((MEMORY[0x19AEA53F4](v12, "wss", 3) & 1) != 0
     || (MEMORY[0x19AEA53F4](v12, "https", 5) & 1) != 0
     || (MEMORY[0x19AEA53F4](v12, "http", 4) & 1) != 0)
    || MEMORY[0x19AEA53F4](*v4, "wss", 3) && (MEMORY[0x19AEA53F4](v12, "https", 5) & 1) != 0
    || *((_BYTE *)this + 38)
    && ((MEMORY[0x19AEA53F4](v12, "https", 5) & 1) != 0
     || (MEMORY[0x19AEA53F4](v12, "wss", 3) & 1) != 0
     || MEMORY[0x19AEA53F4](*v4, "http", 4) && (MEMORY[0x19AEA53F4](v12, "ws", 2) & 1) != 0);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v8;
}

BOOL WebCore::ContentSecurityPolicySource::hostMatches(WebCore::ContentSecurityPolicySource *this, const WTF::URL *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;

  v3 = (unsigned __int8 *)WTF::URL::host(a2);
  v5 = v4;
  v6 = *((_QWORD *)this + 2);
  if (*((_BYTE *)this + 36))
  {
    if (!v6)
      return 1;
    v17 = *(_DWORD *)(v6 + 4);
    if (!v17)
      return 1;
    v28 = v3;
    v29 = v4;
    v3 = (unsigned __int8 *)WTF::StringView::endsWithIgnoringASCIICase();
    if ((_DWORD)v3)
      v18 = v17 >= v5;
    else
      v18 = 1;
    if (v18)
      return 0;
    v8 = ~v17 + v5;
    v10 = BYTE4(v29);
    v11 = v29;
    if (BYTE4(v29))
    {
      if (v29 > v8)
      {
        v19 = v28[v8];
        return v19 == 46;
      }
    }
    else if (v29 > v8)
    {
      v19 = *(unsigned __int16 *)&v28[2 * v8];
      return v19 == 46;
    }
    __break(1u);
  }
  else
  {
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      v9 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v8 = 0;
      v9 = 0x100000000;
    }
    if ((_DWORD)v4 != (_DWORD)v9)
      return 0;
    v10 = v9 & 0x100000000;
    v11 = v4;
    if ((v4 & 0xFF00000000) != 0)
    {
      if (v10)
      {
        if (!(_DWORD)v4)
          return 1;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v3) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                   + *(unsigned __int8 *)v8))
        {
          v12 = 1;
          do
          {
            v13 = v12;
            if (v4 == v12)
              break;
            v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v3[v12]);
            v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v8 + v12++));
          }
          while (v14 == v15);
          return v13 >= v11;
        }
      }
      else
      {
        if (!(_DWORD)v4)
          return 1;
        if ((*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v3))
        {
          v22 = 1;
          do
          {
            v13 = v22;
            if (v4 == v22)
              break;
            v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v3[v22]);
            v24 = *(unsigned __int16 *)(v8 + 2 * v22) | (32
                                                       * (*(unsigned __int16 *)(v8 + 2 * v22) - 65 < 0x1A));
            ++v22;
          }
          while (v24 == v23);
          return v13 >= v11;
        }
      }
      return 0;
    }
  }
  if (!v10)
  {
    if (!v11)
      return 1;
    if ((*(unsigned __int16 *)v3 | (32 * (*(unsigned __int16 *)v3 - 65 < 0x1A))) == (*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))))
    {
      v25 = 1;
      do
      {
        v26 = v25;
        if (v11 == v25)
          break;
        v27 = *(unsigned __int16 *)&v3[2 * v25] | (32 * (*(unsigned __int16 *)&v3[2 * v25] - 65 < 0x1A));
        ++v25;
      }
      while (v27 == (*(unsigned __int16 *)(v8 + 2 * v26) | (32
                                                           * (*(unsigned __int16 *)(v8 + 2 * v26) - 65 < 0x1A))));
      return v26 >= v11;
    }
    return 0;
  }
  if (!v11)
    return 1;
  if ((*(unsigned __int16 *)v3 | (32 * (*(unsigned __int16 *)v3 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v8))
    return 0;
  v20 = 1;
  do
  {
    v13 = v20;
    if (v11 == v20)
      break;
    v21 = *(unsigned __int16 *)&v3[2 * v20] | (32 * (*(unsigned __int16 *)&v3[2 * v20] - 65 < 0x1A));
    ++v20;
  }
  while (v21 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v8 + v13)));
  return v13 >= v11;
}

uint64_t WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v12;

  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 2))
    return 0;
  v4 = *((unsigned __int8 *)a1 + 12);
  v5 = *a1;
  if (!v4)
  {
    v12 = (uint64_t)*a2;
    if (*((_BYTE *)a2 + 12))
      return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((_BOOL8)v5, v3, v12, v3, v3);
    else
      return WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>((_BOOL8)v5, v3, v12, v3, v3);
  }
  if (!*((_BYTE *)a2 + 12))
    return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>((_BOOL8)v5, v3, (uint64_t)*a2, v3, v3);
  if (!(_DWORD)v3)
    return 1;
  v6 = *a2;
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v6))
    return 0;
  v7 = 1;
  do
  {
    v8 = v7;
    if (v3 == v7)
      break;
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v7]);
    v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v6[v7++]);
  }
  while (v9 == v10);
  return v8 >= v3;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForImage(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  const WTF::URL *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v4 = a2;
  v6 = *((_QWORD *)this + 12);
  if (qword_1EE2E40C8)
  {
    a2 = (const WTF::URL *)(qword_1EE2E40C8 - 1);
    if (qword_1EE2E40C8 == 1)
    {
      v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v8 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v8;
      if (v6)
      {
LABEL_6:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_7;
      }
      v11 = (uint64_t *)((char *)this + 56);
      v16 = *((_QWORD *)this + 7);
      if (v16)
      {
        v13 = (WTF::StringImpl **)(v16 + 32);
LABEL_14:
        *(_DWORD *)v7 = v8 + 2;
        goto LABEL_15;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v18;
      if (v6)
      {
        if (!v18)
          goto LABEL_7;
        v8 = *(_DWORD *)v18;
        goto LABEL_6;
      }
      v12 = *((_QWORD *)this + 7);
      v11 = (uint64_t *)((char *)this + 56);
      v10 = v12;
      if (v12)
      {
        v13 = (WTF::StringImpl **)(v10 + 32);
        if (!v18)
          goto LABEL_15;
        v8 = *(_DWORD *)v18;
        goto LABEL_14;
      }
    }
LABEL_18:
    v6 = *v11;
LABEL_19:
    if (!v7)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (!v6)
  {
    v11 = (uint64_t *)((char *)this + 56);
    v17 = *((_QWORD *)this + 7);
    if (v17)
    {
      v7 = 0;
      v13 = (WTF::StringImpl **)(v17 + 32);
LABEL_15:
      v14 = *v13;
      *v13 = v7;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      goto LABEL_18;
    }
    v7 = 0;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_7:
  v9 = *(WTF::StringImpl **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v7;
  if (!v9)
    goto LABEL_19;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    *(_DWORD *)v9 -= 2;
    if (!v7)
      goto LABEL_22;
  }
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, a2);
  else
    *(_DWORD *)v7 -= 2;
LABEL_22:
  if (!v6
    || *(_QWORD *)v4
    && *(_DWORD *)(*(_QWORD *)v4 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v6 + 40), v4, a3))
  {
    return 0;
  }
  return v6;
}

uint64_t WebCore::ContentSecurityPolicySource::portMatches(WebCore::ContentSecurityPolicySource *this, const WTF::URL *a2)
{
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  unsigned __int16 v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  int v20;
  WebCore::ContentSecurityPolicySource *v21;
  const WTF::URL *v22;

  if (*((_BYTE *)this + 37))
    return 1;
  v5 = WTF::URL::port(a2);
  v6 = v5;
  v7 = v5 & 0xFF0000;
  if ((v5 & 0xFF0000) != 0 && *((_BYTE *)this + 34))
  {
    if (*((unsigned __int16 *)this + 16) == (unsigned __int16)v5)
      return 1;
  }
  else if ((v7 != 0) == (*((_BYTE *)this + 34) != 0))
  {
    return 1;
  }
  v8 = WTF::defaultPortForProtocol();
  if ((v8 & 0xFF0000) != 0)
    v9 = v8;
  else
    v9 = 443;
  v10 = WTF::defaultPortForProtocol();
  if ((v10 & 0xFF0000) != 0)
    v11 = v10;
  else
    v11 = 80;
  v12 = v9 == v6;
  if (v7)
    goto LABEL_38;
  v13 = WTF::URL::protocol(a2);
  if ((char *)v13 == "https" || v14 != 5)
  {
    if ((char *)v13 != "https" || v14 != 5)
      goto LABEL_27;
    goto LABEL_24;
  }
  if ((v14 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)v13 != 104 || *(_QWORD *)(v13 + 2) != 0x73007000740074)
      goto LABEL_27;
LABEL_24:
    v12 = 1;
    goto LABEL_38;
  }
  if (*(_BYTE *)v13 == 104 && *(_WORD *)(v13 + 1) == 29812 && *(_WORD *)(v13 + 3) == 29552)
    goto LABEL_24;
LABEL_27:
  v15 = (const char *)WTF::URL::protocol(a2);
  v12 = v16 == 3 && v15 == "wss";
  if (v15 != "wss" && v16 == 3)
  {
    if ((v16 & 0xFF00000000) != 0)
    {
      if (*v15 == 119)
      {
        v17 = *(unsigned __int16 *)(v15 + 1) == 29555;
        goto LABEL_35;
      }
    }
    else if (*(_WORD *)v15 == 119)
    {
      v17 = *(_DWORD *)(v15 + 2) == 7536755;
LABEL_35:
      v12 = v17;
      goto LABEL_38;
    }
    v12 = 0;
  }
LABEL_38:
  if (*((_BYTE *)this + 34) && *((unsigned __int16 *)this + 16) == v11)
  {
    v18 = 0;
    goto LABEL_44;
  }
  v19 = MEMORY[0x19AEA53F4](*((_QWORD *)this + 1), "http", 4);
  v20 = *((unsigned __int8 *)this + 34);
  if (!v19)
    goto LABEL_46;
  if (*((_BYTE *)this + 34))
  {
    v18 = *((unsigned __int16 *)this + 16) != v9;
LABEL_44:
    v20 = 1;
    if (!v12)
      goto LABEL_46;
LABEL_45:
    if (v18)
      goto LABEL_46;
    return 1;
  }
  v18 = 0;
  if (v12)
    goto LABEL_45;
LABEL_46:
  if (v7)
  {
    if (v20)
      return 0;
    goto LABEL_50;
  }
  if (v20)
  {
LABEL_50:
    WTF::URL::protocol(a2);
    return WTF::isDefaultPortForProtocol();
  }
  v21 = (WebCore::ContentSecurityPolicySource *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::ContentSecurityPolicySource::pathMatches(v21, v22);
}

BOOL WebCore::ContentSecurityPolicySource::pathMatches(WebCore::ContentSecurityPolicySource *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int16 v12;
  int v13;
  const WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21[2];

  v2 = *((_QWORD *)this + 3);
  if (!v2 || !*(_DWORD *)(v2 + 4))
    return 1;
  v6 = WTF::URL::path(a2);
  v9 = (WTF::StringImpl *)v6;
  {
    if ((_DWORD)v7)
    {
LABEL_7:
      PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v9, v7, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, v21, v8);
      goto LABEL_19;
    }
  }
  else
  {
    v19 = (WTF::StringImpl *)v6;
    v20 = v7;
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", (const char *)v7);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v11;
    v21[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
    v21[1] = v11;
    if (v11 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v21))
      {
        v12 = 165;
      }
      else
      {
        v12 = 92;
      }
    }
    else
    {
      v12 = 92;
    }
    word_1ECE86C90 = v12;
    v9 = v19;
    v7 = v20;
    if ((_DWORD)v20)
      goto LABEL_7;
  }
  if ((v7 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
LABEL_19:
  if (*((_QWORD *)this + 3))
  {
    v13 = WTF::StringImpl::endsWith();
    v14 = (const WTF::StringImpl *)*((_QWORD *)this + 3);
    if (v13)
    {
      if (v14)
        v15 = *((_DWORD *)v14 + 1);
      else
        v15 = 0;
      if (!v21[0])
        return v15 == 0;
      v16 = WTF::StringImpl::startsWith();
      goto LABEL_28;
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = WTF::equal(v21[0], v14, v10);
LABEL_28:
  v3 = v16;
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v3;
}

int *WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyleRange@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  int *result;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _DWORD *v11;
  double v12;
  unint64_t v13;
  _DWORD *v14;
  double v15;
  uint64_t v16;
  int v17;
  int64x2_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  int64x2_t v24;
  int *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  unsigned __int16 *v29;

  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90,(WebCore::CSSValueID)47,(WebCore::CSSValueID)48>((uint64_t)a1, &v25);
  v7 = v25;
  if (!v25)
  {
    *a3 = 0;
    return result;
  }
  if ((v25[1] & 0x7F) != 0x50 || *((_WORD *)v25 + 4) != 48 || (v8 = a1[1], *a1 == v8))
  {
    v25 = 0;
    v19 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v19 = 2;
    v20 = (*(unsigned __int8 *)(v19 + 6) << 16) & 0xFC0000;
    *(_WORD *)(v19 + 4) = 0x2000;
    *(_BYTE *)(v19 + 6) = (v20 | 0x10000u) >> 16;
    *(_QWORD *)(v19 + 8) = v7;
    *(_QWORD *)(v19 + 16) = 0;
LABEL_30:
    *a3 = v19;
    goto LABEL_31;
  }
  v27.i64[0] = *a1;
  v27.i64[1] = v8;
  v28 = 0;
  v29 = 0;
  v9 = a2 | 0x10100000000;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve((uint64_t)&v27, &v29, (uint64_t)&v28, v9, &v26);
  if (v28)
    WTF::fastFree((WTF *)(v28 - 16), v10);
  if (v29)
    WTF::fastFree((WTF *)(v29 - 8), v10);
  v11 = (_DWORD *)v26;
  if (!v26)
    goto LABEL_46;
  if ((*(_WORD *)(v26 + 4) & 0x7F) != 0x49)
  {
    v12 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v26, 0xCu));
    if (!(_BYTE)v10)
      v12 = 0.0;
    v11 = (_DWORD *)v26;
    if (v12 < -90.0 || v12 > 90.0)
    {
      v26 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v10);
        else
          *v11 -= 2;
      }
    }
    else if (v26)
    {
      goto LABEL_16;
    }
LABEL_46:
    *a3 = 0;
    goto LABEL_31;
  }
LABEL_16:
  v13 = v27.u64[1];
  if (v27.i64[0] == v27.i64[1])
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v16 = 2;
    v21 = (*(unsigned __int8 *)(v16 + 6) << 16) & 0xFC0000;
    *(_DWORD *)(v16 + 8) = 1;
    *(_WORD *)(v16 + 4) = -10240;
    *(_BYTE *)(v16 + 6) = (v21 | 0x10000u) >> 16;
    *(_QWORD *)(v16 + 16) = v11;
    v18 = vdupq_n_s64(v13);
    goto LABEL_41;
  }
  v28 = 0;
  v29 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve((uint64_t)&v27, &v29, (uint64_t)&v28, v9, &v26);
  if (v28)
    WTF::fastFree((WTF *)(v28 - 16), v10);
  if (v29)
    WTF::fastFree((WTF *)(v29 - 8), v10);
  v14 = (_DWORD *)v26;
  if (v26)
  {
    if ((*(_WORD *)(v26 + 4) & 0x7F) == 0x49)
    {
LABEL_28:
      v24 = v27;
      v16 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v16 = 2;
      v17 = (*(unsigned __int8 *)(v16 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v16 + 8) = 2;
      *(_WORD *)(v16 + 4) = -10240;
      *(_BYTE *)(v16 + 6) = BYTE2(v17) | 1;
      *(_QWORD *)(v16 + 16) = v11;
      *(_QWORD *)(v16 + 24) = v14;
      v18 = v24;
LABEL_41:
      *(int64x2_t *)a1 = v18;
      v22 = v25;
      v25 = 0;
      v19 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v19 = 2;
      v23 = (*(unsigned __int8 *)(v19 + 6) << 16) & 0xFC0000;
      *(_WORD *)(v19 + 4) = 0x2000;
      *(_BYTE *)(v19 + 6) = (v23 | 0x10000u) >> 16;
      *(_QWORD *)(v19 + 8) = v22;
      *(_QWORD *)(v19 + 16) = v16;
      goto LABEL_30;
    }
    v15 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v26, 0xCu));
    if (!(_BYTE)v10)
      v15 = 0.0;
    v14 = (_DWORD *)v26;
    if (v15 < -90.0 || v15 > 90.0)
    {
      v26 = 0;
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, (WTF::StringImpl *)v10);
        else
          *v14 -= 2;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
  }
  *a3 = 0;
  if (*v11 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v10);
  else
    *v11 -= 2;
LABEL_31:
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v10);
    else
      *result -= 2;
  }
  return result;
}

int *WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyle@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int **a3@<X8>)
{
  int *result;
  int *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  int *v13;

  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90,(WebCore::CSSValueID)47,(WebCore::CSSValueID)48>(a1, &v13);
  v7 = v13;
  if (!v13 || (v13[1] & 0x7F) != 0x50 || *((_WORD *)v13 + 4) != 48 || *(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_4;
  result = WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyleAngle(&v12, (__int128 *)a1, a2);
  if (!v12)
  {
    v7 = v13;
LABEL_4:
    *a3 = v7;
    return result;
  }
  v10 = (_DWORD *)v12;
  WebCore::CSSFontStyleWithAngleValue::create((uint64_t *)&v10, (uint64_t *)&v11);
  v9 = v10;
  *a3 = v11;
  v10 = 0;
  v11 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
    else
      *v9 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v8);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90,(WebCore::CSSValueID)47,(WebCore::CSSValueID)48>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 47 > 0x2B
    || ((1 << (result - 47)) & 0x80000000003) == 0)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v10 = *(__int128 **)v2;
    v9 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v9)
    {
      v12 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v11 = *(__int128 **)v2;
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v11 = (__int128 *)((char *)v10 + 24);
      *(_QWORD *)v2 = (char *)v10 + 24;
    }
    while (1)
    {
      if ((unint64_t)v11 < v9 || (v12 & 1) != 0)
      {
        if ((unint64_t)v11 >= v9)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = *(_DWORD *)v11;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v12 = 1;
      }
      if ((v13 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v11;
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v10 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
        *((_DWORD *)v10 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1942AE98CLL);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

WTF *WebCore::SelectorFilter::initializeParentStack(WebCore::SelectorFilter *this, WebCore::Element *a2)
{
  int v3;
  void *v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  WTF **v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF *v14;
  int *v15;
  int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  void *v52;
  _DWORD *v53;
  int v54;
  unint64_t v55;
  _QWORD *v56;
  WTF *result;
  _DWORD *v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  _BYTE v62[160];
  WebCore::Element *v63;
  WTF *v64;
  uint64_t v65;
  _BYTE v66[24];

  v60 = (WTF *)v62;
  v61 = 20;
  do
  {
    v63 = a2;
    v3 = HIDWORD(v61);
    if (HIDWORD(v61) == (_DWORD)v61)
    {
      WTF::Vector<WebCore::Element *,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>((uint64_t)&v60, (unint64_t)&v63);
    }
    else
    {
      *((_QWORD *)v60 + HIDWORD(v61)) = a2;
      HIDWORD(v61) = v3 + 1;
    }
    a2 = (WebCore::Element *)*((_QWORD *)v63 + 4);
  }
  while (a2 && (*((_WORD *)a2 + 14) & 8) != 0);
  WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)this, HIDWORD(v61) + (unint64_t)*((unsigned int *)this + 2));
  v5 = HIDWORD(v61);
  if (HIDWORD(v61))
  {
    v6 = (char *)this + 16;
    do
    {
      if (HIDWORD(v61) <= --v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1942AEFE4);
      }
      v7 = *((_QWORD *)v60 + v5);
      v63 = (WebCore::Element *)v7;
      v64 = (WTF *)v66;
      v65 = 4;
      v8 = *((unsigned int *)this + 3);
      if ((_DWORD)v8 == *((_DWORD *)this + 2))
      {
        v55 = WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this, v8 + 1, (unint64_t)&v63);
        v56 = (_QWORD *)(*(_QWORD *)this + 40 * *((unsigned int *)this + 3));
        *v56 = *(_QWORD *)v55;
        v56[1] = v56 + 3;
        v56[2] = 4;
        v4 = *(void **)(v55 + 8);
        if (v4 == (void *)(v55 + 24))
        {
          memcpy(v56 + 3, v4, 4 * *(unsigned int *)(v55 + 20));
        }
        else
        {
          *(_QWORD *)(v55 + 8) = v55 + 24;
          v56[1] = v4;
          v59 = *(_DWORD *)(v55 + 16);
          *(_DWORD *)(v55 + 16) = 4;
          *((_DWORD *)v56 + 4) = v59;
        }
        v12 = (_DWORD *)v56 + 5;
        v15 = (int *)(v55 + 20);
      }
      else
      {
        v9 = (_QWORD *)(*(_QWORD *)this + 40 * v8);
        *v9 = v7;
        v10 = v9 + 3;
        v9[1] = v9 + 3;
        v11 = (WTF **)(v9 + 1);
        v12 = (_DWORD *)v9 + 5;
        v9[2] = 4;
        v13 = v9 + 2;
        v14 = v64;
        if (v64 == (WTF *)v66)
        {
          memcpy(v10, v66, 4 * HIDWORD(v65));
        }
        else
        {
          v64 = (WTF *)v66;
          *v11 = v14;
          *v13 = v65;
        }
        v15 = (int *)&v65 + 1;
      }
      v16 = *v15;
      *v15 = 0;
      *v12 = v16;
      v17 = *((_DWORD *)this + 3) + 1;
      *((_DWORD *)this + 3) = v17;
      v18 = v64;
      if (v66 != (_BYTE *)v64 && v64)
      {
        v64 = 0;
        LODWORD(v65) = 0;
        WTF::fastFree(v18, v4);
        v17 = *((_DWORD *)this + 3);
      }
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1942AEFECLL);
      }
      v19 = *(_QWORD *)this + 40 * v17;
      v20 = v19 - 32;
      v21 = 13 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 40) + 16) >> 8);
      LODWORD(v63) = v21;
      v22 = *(unsigned int *)(v19 - 20);
      if ((_DWORD)v22 == *(_DWORD *)(v19 - 24))
      {
        v53 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v22 + 1, (unint64_t)&v63);
        v23 = *(_DWORD **)v20;
        *(_DWORD *)(*(_QWORD *)v20 + 4 * *(unsigned int *)(v20 + 12)) = *v53;
      }
      else
      {
        v23 = *(_DWORD **)v20;
        *(_DWORD *)(*(_QWORD *)v20 + 4 * v22) = v21;
      }
      v24 = (*(_DWORD *)(v20 + 12) + 1);
      *(_DWORD *)(v20 + 12) = v24;
      v25 = *(_QWORD *)(v7 + 104);
      if (v25 && (v26 = *(_QWORD *)(v25 + 24)) != 0 || (v26 = *MEMORY[0x1E0CBF2F8]) != 0)
      {
        v54 = 17 * (*(_DWORD *)(v26 + 16) >> 8);
        LODWORD(v63) = v54;
        if ((_DWORD)v24 == *(_DWORD *)(v20 + 8))
        {
          v58 = (_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v24 + 1, (unint64_t)&v63);
          v23 = *(_DWORD **)v20;
          *(_DWORD *)(*(_QWORD *)v20 + 4 * *(unsigned int *)(v20 + 12)) = *v58;
          v25 = *(_QWORD *)(v7 + 104);
        }
        else
        {
          v23[v24] = v54;
        }
        LODWORD(v24) = *(_DWORD *)(v20 + 12) + 1;
        *(_DWORD *)(v20 + 12) = v24;
      }
      if (v25)
      {
        v27 = *(_QWORD *)(v25 + 16);
        if (v27)
        {
          v28 = *(unsigned int *)(v27 + 12) + (unint64_t)v24;
          if (v28 > *(unsigned int *)(v20 + 8))
          {
            if (v28 < 5)
            {
              v52 = (void *)(v20 + 16);
              *(_QWORD *)v20 = v20 + 16;
              *(_DWORD *)(v20 + 8) = 4;
            }
            else
            {
              if (v28 >> 30)
                goto LABEL_97;
              v52 = (void *)WTF::fastMalloc((WTF *)(4 * v28));
              *(_DWORD *)(v20 + 8) = v28;
              *(_QWORD *)v20 = v52;
            }
            memcpy(v52, v23, 4 * v24);
            if ((_DWORD *)(v20 + 16) != v23)
            {
              if (*(_DWORD **)v20 == v23)
              {
                *(_QWORD *)v20 = 0;
                *(_DWORD *)(v20 + 8) = 0;
              }
              WTF::fastFree((WTF *)v23, v4);
            }
          }
          v29 = *(_QWORD *)(v25 + 16);
          if (v29)
            v30 = (uint64_t *)(v29 + 16);
          else
            v30 = 0;
          if (v29)
            v31 = v29 + 16 + 8 * *(unsigned int *)(v29 + 12);
          else
            v31 = 0;
          if (v30 != (uint64_t *)v31)
          {
            v32 = *(_DWORD **)v20;
            v33 = *(_DWORD *)(v20 + 12);
            do
            {
              v34 = *v30++;
              v32[v33] = 19 * (*(_DWORD *)(v34 + 16) >> 8);
              v33 = *(_DWORD *)(v20 + 12) + 1;
              *(_DWORD *)(v20 + 12) = v33;
            }
            while (v30 != (uint64_t *)v31);
          }
        }
        v35 = *(_QWORD *)(v7 + 104);
        if (v35)
        {
          v36 = *(_DWORD *)(v35 + 4);
          if ((v36 & 1) != 0)
          {
            v38 = *(_DWORD *)(v35 + 52);
            if (v38)
            {
              v37 = *(_QWORD *)(v35 + 40);
LABEL_37:
              v39 = 0;
              while (2)
              {
                v40 = *(_QWORD *)(v37 + 16 * v39);
                if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
                  v41 = (WTF::StringImpl **)(v40 + 24);
                else
                  v41 = (WTF::StringImpl **)(v40 + 40);
                v42 = *v41;
                if (*v41)
                  *(_DWORD *)v42 += 2;
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::classAttr + 24) == v42
                  || *(WTF::StringImpl **)(WebCore::HTMLNames::idAttr + 24) == v42
                  || *(WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24) == v42)
                {
                  if (v42)
                    goto LABEL_48;
                }
                else
                {
                  v43 = 23 * (*((_DWORD *)v42 + 4) >> 8);
                  LODWORD(v63) = v43;
                  v44 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v44 == *(_DWORD *)(v20 + 8))
                    *(_DWORD *)(*(_QWORD *)v20 + 4 * *(unsigned int *)(v20 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v44 + 1, (unint64_t)&v63);
                  else
                    *(_DWORD *)(*(_QWORD *)v20 + 4 * v44) = v43;
                  ++*(_DWORD *)(v20 + 12);
LABEL_48:
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v4);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v45 = v39 + 1;
                v39 = (v39 + 1);
                if (v38 == v45)
                  break;
                continue;
              }
            }
          }
          else if (v36 >= 0x20)
          {
            v37 = v35 + 32;
            v38 = v36 >> 5;
            goto LABEL_37;
          }
        }
      }
      v46 = *(unsigned int *)(v20 + 12);
      if ((_DWORD)v46)
      {
        v47 = 0;
        while (v47 < *(unsigned int *)(v20 + 12))
        {
          v48 = *(unsigned int *)(*(_QWORD *)v20 + 4 * v47);
          v49 = v6[v48 & 0xFFF];
          if (v49 != 255)
            v6[v48 & 0xFFF] = v49 + 1;
          v50 = (v48 >> 16) & 0xFFF;
          v51 = v6[v50];
          if (v51 != 255)
            v6[v50] = v51 + 1;
          if (v46 == ++v47)
            goto LABEL_65;
        }
LABEL_97:
        __break(0xC471u);
        JUMPOUT(0x1942AEFDCLL);
      }
LABEL_65:
      ;
    }
    while (v5);
  }
  result = v60;
  if (v62 != (_BYTE *)v60)
  {
    if (v60)
    {
      v60 = 0;
      LODWORD(v61) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

WebCore::Style::Adjuster *WebCore::Style::TreeResolver::resolve@<X0>(WebCore::Style::TreeResolver *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::Style::Adjuster *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WebCore::Style::Update *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Style::TreeResolver::Scope *v30;
  WebCore::Style::TreeResolver::Scope *v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  const WebCore::Document *v36;
  WTF *v37;
  uint64_t v38;
  int v39;
  WebCore::Style::TreeResolver::Scope *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  WebCore::Element **v55;
  WebCore::Element **v56;
  WebCore::Element **v57;
  WebCore::Element **v58;
  WebCore::Element **v59;
  WebCore::Element *v60;
  WebCore::Style::TreeResolver::Scope *v61;
  WebCore::Style::TreeResolver::Scope *v62;
  WTF **v63;
  WTF *v64;
  uint64_t v65;
  char v66[8];
  WebCore::Style::TreeResolver::Scope *v67;
  WebCore::Style::TreeResolver::Scope *v68[2];
  uint64_t v69;

  *((_BYTE *)this + 864) = 0;
  v5 = (uint64_t *)*((_QWORD *)this + 111);
  if (v5)
  {
    *((_QWORD *)this + 111) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v5, a2);
  }
  v6 = *((_QWORD *)this + 113);
  if (v6)
  {
    *((_QWORD *)this + 113) = 0;
    WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::deallocateTable(v6, a2);
  }
  if (*((_DWORD *)this + 230))
  {
    v63 = (WTF **)((char *)this + 912);
    if (*((_DWORD *)this + 231))
      WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)this + 912, 0);
    v64 = *v63;
    if (*v63)
    {
      *((_QWORD *)this + 114) = 0;
      *((_DWORD *)this + 230) = 0;
      WTF::fastFree(v64, a2);
    }
  }
  result = (WebCore::Style::Adjuster *)*((_QWORD *)this + 112);
  if (result)
  {
    *((_QWORD *)this + 112) = 0;
    result = (WebCore::Style::Adjuster *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, a2);
  }
  *((_WORD *)this + 464) = 256;
  v8 = *(_QWORD *)this;
  v9 = *(_QWORD *)(*(_QWORD *)this + 1272);
  if (!v9)
  {
    v42 = *(_QWORD *)(v8 + 1328);
    if (!*(_QWORD *)(v42 + 32))
    {
      if (*(_QWORD *)(v42 + 24))
        result = (WebCore::Style::Adjuster *)WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v42);
      else
        result = (WebCore::Style::Adjuster *)WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v42);
      v49 = *(_QWORD *)(v42 + 32);
      if (*(_DWORD *)(v49 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        result = (WebCore::Style::Adjuster *)WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v49 + 32));
      if (*(_BYTE *)(v49 + 242)
        || *(_BYTE *)(v49 + 243)
        || *(_BYTE *)(v49 + 244)
        || *(_BYTE *)(v49 + 245)
        || *(_BYTE *)(v49 + 246)
        || *(_BYTE *)(v49 + 247)
        || *(_BYTE *)(v49 + 248))
      {
        v41 = 0;
        *(_BYTE *)(v42 + 236) = 1;
        goto LABEL_43;
      }
    }
    goto LABEL_49;
  }
  if ((*(_BYTE *)(v9 + 70) & 0xF) == 0 && (*(_WORD *)(v9 + 30) & 0x20) == 0)
    goto LABEL_42;
  *((_BYTE *)this + 848) = WebCore::Style::Scope::hasPendingSheetsBeforeBody(*(WebCore::Style::Scope **)(v8 + 1328));
  if (!*((_QWORD *)this + 117))
  {
    v10 = *(_QWORD *)this;
    v12 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v12 = 0;
    *(_DWORD *)(v10 + 24) += 2;
    *(_QWORD *)(v12 + 8) = v10;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_QWORD *)(v12 + 80) = 0;
    v13 = (WebCore::Style::Update *)*((_QWORD *)this + 117);
    *((_QWORD *)this + 117) = v12;
    if (v13)
    {
      WebCore::Style::Update::~Update(v13, v11);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 80) = 0;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x1078);
  v17 = *(_QWORD *)this;
  v18 = (_DWORD *)*((_QWORD *)this + 117);
  *(_DWORD *)v16 = 1;
  v19 = *(_QWORD *)(v17 + 1328);
  if (!*(_QWORD *)(v19 + 32))
  {
    if (*(_QWORD *)(v19 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(v17 + 1328));
    else
      WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(v17 + 1328));
    v48 = *(_QWORD *)(v19 + 32);
    if (*(_DWORD *)(v48 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v48 + 32));
    if (*(_BYTE *)(v48 + 242)
      || *(_BYTE *)(v48 + 243)
      || *(_BYTE *)(v48 + 244)
      || *(_BYTE *)(v48 + 245)
      || *(_BYTE *)(v48 + 246)
      || *(_BYTE *)(v48 + 247)
      || *(_BYTE *)(v48 + 248))
    {
      *(_BYTE *)(v19 + 236) = 1;
    }
  }
  v20 = *(_DWORD **)(v19 + 32);
  v21 = v20;
  ++*v20;
  v16[1] = v20;
  bzero(v16 + 2, 0x1038uLL);
  v16[521] = v17;
  v16[522] = v21 + 8;
  v16[523] = v16 + 2;
  v16[524] = 0;
  v16[526] = 0;
  v16[525] = 0;
  if (*(_BYTE *)(v17 + 3393))
  {
    __break(0xC471u);
    JUMPOUT(0x1942AF464);
  }
  *(_BYTE *)(v17 + 3393) = 1;
  v23 = *(_QWORD **)(v17 + 2696);
  if (v23)
  {
    while (1)
    {
      v24 = *(_QWORD *)(*v23 + 8);
      if (v24)
        break;
      v23 = (_QWORD *)v23[2];
      if (!v23)
        goto LABEL_131;
    }
LABEL_18:
    v25 = *(_QWORD *)(v24 + 216);
    if (!*(_QWORD *)(v25 + 32))
    {
      if (*(_QWORD *)(v25 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v25);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v25);
      v47 = *(_QWORD *)(v25 + 32);
      if (*(_DWORD *)(v47 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v65 = *(_QWORD *)(v25 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v47 + 32));
        v47 = v65;
      }
      if (*(_BYTE *)(v47 + 242)
        || *(_BYTE *)(v47 + 243)
        || *(_BYTE *)(v47 + 244)
        || *(_BYTE *)(v47 + 245)
        || *(_BYTE *)(v47 + 246)
        || *(_BYTE *)(v47 + 247)
        || *(_BYTE *)(v47 + 248))
      {
        *(_BYTE *)(v25 + 236) = 1;
      }
    }
    while (1)
    {
      v23 = (_QWORD *)v23[2];
      if (!v23)
        break;
      v24 = *(_QWORD *)(*v23 + 8);
      if (v24)
      {
        ++*(_DWORD *)(v17 + 2712);
        goto LABEL_18;
      }
    }
    ++*(_DWORD *)(v17 + 2712);
    v26 = (_DWORD *)v16[518];
    ++*v18;
    v16[518] = v18;
    if (v26)
    {
      if (!*v26)
      {
        __break(0xC471u);
        JUMPOUT(0x1942AF484);
      }
      --*v26;
    }
  }
  else
  {
LABEL_131:
    ++*v18;
    v16[518] = v18;
  }
  v27 = (_QWORD *)((char *)this + 16);
  v68[0] = (WebCore::Style::TreeResolver::Scope *)v16;
  v28 = *((unsigned int *)this + 7);
  if ((_DWORD)v28 == *((_DWORD *)this + 6))
  {
    WTF::Vector<WTF::Ref<WebCore::Style::TreeResolver::Scope,WTF::RawPtrTraits<WebCore::Style::TreeResolver::Scope>,WTF::DefaultRefDerefTraits<WebCore::Style::TreeResolver::Scope>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Style::TreeResolver::Scope,WTF::RawPtrTraits<WebCore::Style::TreeResolver::Scope>,WTF::DefaultRefDerefTraits<WebCore::Style::TreeResolver::Scope>>>((uint64_t)this + 16, (unint64_t)v68);
  }
  else
  {
    v29 = *((_QWORD *)this + 2);
    v68[0] = 0;
    *(_QWORD *)(v29 + 8 * v28) = v16;
    *((_DWORD *)this + 7) = v28 + 1;
  }
  v30 = v68[0];
  v68[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      WebCore::Style::TreeResolver::Scope::~Scope(v30, v22);
      WTF::fastFree(v43, v44);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  v31 = *(WebCore::Style::TreeResolver::Scope **)(*(_QWORD *)this + 1952);
  v68[0] = 0;
  v68[1] = v31;
  LODWORD(v69) = 0;
  WORD2(v69) = 0;
  v32 = *((_DWORD *)this + 19);
  if (v32 == *((_DWORD *)this + 18))
  {
    WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::TreeResolver::Parent>((uint64_t)this + 64, (unint64_t)v68);
  }
  else
  {
    v33 = *((_QWORD *)this + 8) + 24 * v32;
    v34 = *(_OWORD *)v68;
    *(_QWORD *)(v33 + 16) = v69;
    *(_OWORD *)v33 = v34;
    ++*((_DWORD *)this + 19);
  }
  WebCore::Style::TreeResolver::resolveComposedTree(this, (uint64_t)v22);
  if (*((_DWORD *)this + 18))
  {
    if (*((_DWORD *)this + 19))
      *((_DWORD *)this + 19) = 0;
    v37 = (WTF *)*((_QWORD *)this + 8);
    if ((WebCore::Style::TreeResolver *)((char *)this + 80) != v37)
    {
      if (!v37)
      {
LABEL_80:
        *((_QWORD *)this + 8) = (char *)this + 80;
        *((_DWORD *)this + 18) = 32;
        goto LABEL_35;
      }
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v37, v35);
      v37 = (WTF *)*((_QWORD *)this + 8);
    }
    if (v37)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_35:
  v38 = *((unsigned int *)this + 7);
  if (!(_DWORD)v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1942AF6ECLL);
  }
  v39 = v38 - 1;
  v40 = *(WebCore::Style::TreeResolver::Scope **)(*v27 + 8 * (v38 - 1));
  *(_QWORD *)(*v27 + 8 * (v38 - 1)) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      WebCore::Style::TreeResolver::Scope::~Scope(v40, v35);
      WTF::fastFree(v45, v46);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
  *((_DWORD *)this + 7) = v39;
  if (*((_BYTE *)this + 864))
  {
    v50 = (_QWORD *)*((_QWORD *)this + 107);
    v51 = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::begin(v50);
    v52 = v51;
    v54 = v53;
    if (v50)
      v50 += 2 * *((unsigned int *)v50 - 1);
    if (v50 != v51)
    {
      do
      {
        if (*((_BYTE *)v52 + 10))
          WebCore::Element::invalidateForResumingQueryContainerResolution((WebCore::Element *)*v52);
        while (1)
        {
          v52 += 2;
          if (v52 == v54)
            break;
          if ((unint64_t)(*v52 + 1) > 1)
            goto LABEL_108;
        }
        v52 = v54;
LABEL_108:
        ;
      }
      while (v52 != v50);
    }
  }
  if (*((_BYTE *)this + 928))
  {
    v55 = (WebCore::Element **)*((_QWORD *)this + 111);
    v56 = (WebCore::Element **)WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::begin(v55);
    v57 = v56;
    v59 = v58;
    if (v55)
      v55 += *((unsigned int *)v55 - 1);
    if (v55 != v56)
    {
      do
      {
        v60 = *v57++;
        WebCore::Element::invalidateForResumingQueryContainerResolution(v60);
        while (v57 != v59)
        {
          if ((unint64_t)*v57 + 1 > 1)
            goto LABEL_118;
          ++v57;
        }
        v57 = v59;
LABEL_118:
        ;
      }
      while (v57 != v55);
    }
    WTF::WeakHashMap<WebCore::Element,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WebCore::WeakPtrImplWithEventTargetData>::begin((uint64_t)v68, (uint64_t *)this + 109);
    WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::end((uint64_t)v66, (uint64_t *)this + 109);
    v61 = v68[1];
    v62 = v67;
    while (v61 != v62)
    {
      if (!*(_BYTE *)(*((_QWORD *)v61 + 1) + 18))
        WebCore::Element::invalidateForResumingAnchorPositionedElementResolution(*(WebCore::Element **)(*(_QWORD *)v61 + 8));
      WTF::WeakHashMap<WebCore::Element,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WebCore::WeakPtrImplWithEventTargetData>::WeakHashMapIterator::operator++((uint64_t)v68);
      v61 = v68[1];
    }
  }
  result = (WebCore::Style::Adjuster *)*((_QWORD *)this + 117);
  v41 = *((_QWORD *)result + 2);
  if (v41)
  {
    if (*(_DWORD *)(v41 - 12))
    {
      result = (WebCore::Style::Adjuster *)WebCore::Style::Adjuster::propagateToDocumentElementAndInitialContainingBlock(result, *(WebCore::Style::Update **)this, v36);
LABEL_42:
      v41 = *((_QWORD *)this + 117);
      *((_QWORD *)this + 117) = 0;
      goto LABEL_43;
    }
LABEL_49:
    v41 = 0;
  }
LABEL_43:
  *a3 = v41;
  return result;
}

WTF *WebCore::SelectorFilter::pushParent(WebCore::SelectorFilter *this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  WTF **v7;
  int *v8;
  _DWORD *v9;
  _DWORD *v10;
  WTF *v11;
  int v12;
  unsigned int v13;
  WTF *result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  void *v50;
  int v51;
  unint64_t v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  _DWORD *v56;
  int v57;
  WebCore::Element *v58;
  WTF *v59;
  uint64_t v60;
  _BYTE v61[16];

  v2 = a2;
  v58 = a2;
  v59 = (WTF *)v61;
  v60 = 4;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4 == *((_DWORD *)this + 2))
  {
    v52 = WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this, v4 + 1, (unint64_t)&v58);
    v53 = (_QWORD *)(*(_QWORD *)this + 40 * *((unsigned int *)this + 3));
    *v53 = *(_QWORD *)v52;
    v54 = v53 + 3;
    v53[1] = v53 + 3;
    v55 = v53 + 1;
    v9 = (_DWORD *)v53 + 5;
    v53[2] = 4;
    v56 = v53 + 2;
    a2 = *(WebCore::Element **)(v52 + 8);
    if (a2 == (WebCore::Element *)(v52 + 24))
    {
      memcpy(v54, a2, 4 * *(unsigned int *)(v52 + 20));
    }
    else
    {
      *(_QWORD *)(v52 + 8) = v52 + 24;
      *v55 = a2;
      v57 = *(_DWORD *)(v52 + 16);
      *(_DWORD *)(v52 + 16) = 4;
      *v56 = v57;
    }
    v8 = (int *)(v52 + 20);
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)this + 40 * v4);
    *v5 = a2;
    v6 = v5 + 3;
    v5[1] = v5 + 3;
    v7 = (WTF **)(v5 + 1);
    v8 = (int *)&v60 + 1;
    v9 = (_DWORD *)v5 + 5;
    v5[2] = 4;
    v10 = v5 + 2;
    v11 = v59;
    if (v59 == (WTF *)v61)
    {
      memcpy(v6, v61, 4 * HIDWORD(v60));
    }
    else
    {
      v59 = (WTF *)v61;
      *v7 = v11;
      *v10 = v60;
    }
  }
  v12 = *v8;
  *v8 = 0;
  *v9 = v12;
  v13 = *((_DWORD *)this + 3) + 1;
  *((_DWORD *)this + 3) = v13;
  result = v59;
  if (v61 != (_BYTE *)v59 && v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
    v13 = *((_DWORD *)this + 3);
  }
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1942AFC0CLL);
  }
  v15 = *(_QWORD *)this + 40 * v13;
  v16 = v15 - 32;
  v17 = 13 * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 12) + 40) + 16) >> 8);
  LODWORD(v58) = v17;
  v18 = *(unsigned int *)(v15 - 20);
  if ((_DWORD)v18 == *(_DWORD *)(v15 - 24))
  {
    result = (WTF *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v18 + 1, (unint64_t)&v58);
    v19 = *(_DWORD **)v16;
    *(_DWORD *)(*(_QWORD *)v16 + 4 * *(unsigned int *)(v16 + 12)) = *(_DWORD *)result;
  }
  else
  {
    v19 = *(_DWORD **)v16;
    *(_DWORD *)(*(_QWORD *)v16 + 4 * v18) = v17;
  }
  v20 = (*(_DWORD *)(v16 + 12) + 1);
  *(_DWORD *)(v16 + 12) = v20;
  v21 = *((_QWORD *)v2 + 13);
  if (v21 && (v22 = *(_QWORD *)(v21 + 24)) != 0 || (v22 = *MEMORY[0x1E0CBF2F8]) != 0)
  {
    v51 = 17 * (*(_DWORD *)(v22 + 16) >> 8);
    LODWORD(v58) = v51;
    if ((_DWORD)v20 == *(_DWORD *)(v16 + 8))
    {
      result = (WTF *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v20 + 1, (unint64_t)&v58);
      v19 = *(_DWORD **)v16;
      *(_DWORD *)(*(_QWORD *)v16 + 4 * *(unsigned int *)(v16 + 12)) = *(_DWORD *)result;
      v21 = *((_QWORD *)v2 + 13);
    }
    else
    {
      v19[v20] = v51;
    }
    LODWORD(v20) = *(_DWORD *)(v16 + 12) + 1;
    *(_DWORD *)(v16 + 12) = v20;
  }
  if (v21)
  {
    v23 = *(_QWORD *)(v21 + 16);
    if (v23)
    {
      v24 = *(unsigned int *)(v23 + 12) + (unint64_t)v20;
      if (v24 > *(unsigned int *)(v16 + 8))
      {
        if (v24 < 5)
        {
          v50 = (void *)(v16 + 16);
          *(_QWORD *)v16 = v16 + 16;
          *(_DWORD *)(v16 + 8) = 4;
        }
        else
        {
          if (v24 >> 30)
            goto LABEL_75;
          v50 = (void *)WTF::fastMalloc((WTF *)(4 * v24));
          *(_DWORD *)(v16 + 8) = v24;
          *(_QWORD *)v16 = v50;
        }
        result = (WTF *)memcpy(v50, v19, 4 * v20);
        if ((_DWORD *)(v16 + 16) != v19)
        {
          if (*(_DWORD **)v16 == v19)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
          }
          result = (WTF *)WTF::fastFree((WTF *)v19, a2);
        }
      }
      v25 = *(_QWORD *)(v21 + 16);
      if (v25)
      {
        v26 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v26)
        {
          v27 = (uint64_t *)(v25 + 16);
          v28 = *(_DWORD **)v16;
          v29 = *(_DWORD *)(v16 + 12);
          v30 = 8 * v26;
          do
          {
            v31 = *v27++;
            v28[v29] = 19 * (*(_DWORD *)(v31 + 16) >> 8);
            v29 = *(_DWORD *)(v16 + 12) + 1;
            *(_DWORD *)(v16 + 12) = v29;
            v30 -= 8;
          }
          while (v30);
        }
      }
    }
    v32 = *((_QWORD *)v2 + 13);
    if (v32)
    {
      v33 = *(_DWORD *)(v32 + 4);
      if ((v33 & 1) != 0)
      {
        v35 = *(_DWORD *)(v32 + 52);
        if (v35)
        {
          v34 = *(_QWORD *)(v32 + 40);
          goto LABEL_24;
        }
      }
      else if (v33 >= 0x20)
      {
        v34 = v32 + 32;
        v35 = v33 >> 5;
LABEL_24:
        v36 = 0;
        while (1)
        {
          v37 = *(_QWORD *)(v34 + 16 * v36);
          if ((*((_WORD *)v2 + 14) & 0x10) != 0)
            v38 = (WTF::StringImpl **)(v37 + 24);
          else
            v38 = (WTF::StringImpl **)(v37 + 40);
          v39 = *v38;
          if (*v38)
            *(_DWORD *)v39 += 2;
          if (*(WTF::StringImpl **)(WebCore::HTMLNames::classAttr + 24) != v39
            && *(WTF::StringImpl **)(WebCore::HTMLNames::idAttr + 24) != v39
            && *(WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24) != v39)
          {
            break;
          }
          if (v39)
            goto LABEL_35;
LABEL_37:
          v42 = v36 + 1;
          v36 = (v36 + 1);
          if (v35 == v42)
            goto LABEL_44;
        }
        v40 = 23 * (*((_DWORD *)v39 + 4) >> 8);
        LODWORD(v58) = v40;
        v41 = *(unsigned int *)(v16 + 12);
        if ((_DWORD)v41 == *(_DWORD *)(v16 + 8))
        {
          result = (WTF *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v41 + 1, (unint64_t)&v58);
          *(_DWORD *)(*(_QWORD *)v16 + 4 * *(unsigned int *)(v16 + 12)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v16 + 4 * v41) = v40;
        }
        ++*(_DWORD *)(v16 + 12);
LABEL_35:
        if (*(_DWORD *)v39 == 2)
          result = (WTF *)WTF::StringImpl::destroy(v39, a2);
        else
          *(_DWORD *)v39 -= 2;
        goto LABEL_37;
      }
    }
  }
LABEL_44:
  v43 = *(unsigned int *)(v16 + 12);
  if ((_DWORD)v43)
  {
    v44 = 0;
    v45 = (char *)this + 16;
    while (v44 < *(unsigned int *)(v16 + 12))
    {
      v46 = *(unsigned int *)(*(_QWORD *)v16 + 4 * v44);
      v47 = v45[v46 & 0xFFF];
      if (v47 != 255)
        v45[v46 & 0xFFF] = v47 + 1;
      v48 = (v46 >> 16) & 0xFFF;
      v49 = v45[v48];
      if (v49 != 255)
        v45[v48] = v49 + 1;
      if (v43 == ++v44)
        return result;
    }
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x1942AFC04);
  }
  return result;
}

uint64_t WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v9 >> 30))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 4 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::ComposedTreeIterator::ComposedTreeIterator(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  _DWORD *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  _DWORD *result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[256];
  int v38;
  uint64_t v39;

  *(_BYTE *)a1 = (*(_QWORD *)(a2 + 16) & 0x10000000000000) != 0;
  *(_BYTE *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 8;
  v5 = *(_WORD *)(a2 + 28);
  if ((v5 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
    goto LABEL_3;
  v25 = v4;
  result = (_DWORD *)WebCore::HTMLSlotElement::assignedNodes((WebCore::HTMLSlotElement *)a2);
  if (!result)
  {
    v5 = *(_WORD *)(a2 + 28);
    v4 = v25;
LABEL_3:
    if ((v5 & 8) != 0
      && (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v22 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
    {
      if ((*(_WORD *)(v22 + 28) & 4) != 0 && (v23 = *(_QWORD *)(v22 + 80)) != 0)
      {
        while ((*(_WORD *)(v23 + 28) & 0xA) == 0)
        {
          v23 = *(_QWORD *)(v23 + 56);
          if (!v23)
            goto LABEL_31;
        }
        v28 = v23;
        v29 = (WTF *)&v31;
        v31 = 0;
        v30 = 0x100000010;
        v32 = 0;
        v33 = 1;
      }
      else
      {
LABEL_31:
        v28 = 0;
        v29 = (WTF *)&v31;
        v30 = 16;
        v33 = 0;
        v23 = a2;
      }
      WebCore::ComposedTreeIterator::initializeContextStack((WebCore::ComposedTreeIterator *)a1, (WebCore::ContainerNode *)a2, (WebCore::Node *)v23);
      v20 = v29;
      if (&v31 == (uint64_t *)v29 || v29 == 0)
        return (_DWORD *)a1;
    }
    else
    {
      if ((v5 & 4) != 0 && (v6 = *(_QWORD *)(a2 + 80)) != 0)
      {
        while ((*(_WORD *)(v6 + 28) & 0xA) == 0)
        {
          v6 = *(_QWORD *)(v6 + 56);
          if (!v6)
            goto LABEL_29;
        }
        v28 = v6;
        v29 = (WTF *)&v31;
        v31 = 0;
        v30 = 0x100000010;
        v7 = 1;
        v32 = 0;
        v33 = 1;
      }
      else
      {
LABEL_29:
        v7 = 0;
        v6 = 0;
        v28 = 0;
        v29 = (WTF *)&v31;
        v30 = 16;
        v33 = 0;
      }
      v34 = 0;
      v35 = (WTF *)v37;
      v36 = 16;
      v38 = 0;
      v39 = -1;
      v8 = *(_DWORD *)(a1 + 20);
      if (v8 == *(_DWORD *)(a1 + 16))
      {
        WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>((uint64_t)v4, (unint64_t)&v28);
      }
      else
      {
        v9 = *v4;
        v10 = *v4 + 584 * v8;
        *(_QWORD *)v10 = v6;
        *(_QWORD *)(v10 + 8) = v10 + 24;
        *(_QWORD *)(v10 + 16) = 16;
        v11 = v29;
        v12 = &v31;
        if (v29 == (WTF *)&v31)
        {
          memcpy((void *)(v10 + 24), &v31, 16 * HIDWORD(v30));
          v7 = v33;
        }
        else
        {
          v29 = (WTF *)&v31;
          *(_QWORD *)(v10 + 8) = v11;
          v26 = v30;
          LODWORD(v30) = 16;
          *(_DWORD *)(v10 + 16) = v26;
        }
        v13 = HIDWORD(v30);
        HIDWORD(v30) = 0;
        *(_DWORD *)(v10 + 20) = v13;
        *(_DWORD *)(v10 + 280) = v7;
        v14 = (_QWORD *)(v9 + 584 * v8);
        v14[36] = v34;
        v14[37] = v14 + 39;
        v15 = (_DWORD *)v14 + 77;
        v14[38] = 16;
        v16 = v35;
        if (v35 == (WTF *)v37)
        {
          memcpy(v14 + 39, v37, 16 * HIDWORD(v36));
        }
        else
        {
          v35 = (WTF *)v37;
          v14[37] = v16;
          v27 = v36;
          LODWORD(v36) = 16;
          *((_DWORD *)v14 + 76) = v27;
        }
        v17 = HIDWORD(v36);
        HIDWORD(v36) = 0;
        *v15 = v17;
        v18 = v9 + 584 * v8;
        *(_DWORD *)(v18 + 568) = v38;
        *(_QWORD *)(v18 + 576) = v39;
        ++*(_DWORD *)(a1 + 20);
      }
      v19 = v35;
      if (v37 != (_BYTE *)v35 && v35)
      {
        v35 = 0;
        LODWORD(v36) = 0;
        WTF::fastFree(v19, v12);
      }
      v20 = v29;
      if (&v31 == (uint64_t *)v29 || !v29)
        return (_DWORD *)a1;
    }
    v29 = 0;
    LODWORD(v30) = 0;
    WTF::fastFree(v20, v12);
    return (_DWORD *)a1;
  }
  if (result[3])
  {
    WebCore::ComposedTreeIterator::initializeContextStack((WebCore::ComposedTreeIterator *)a1, (WebCore::ContainerNode *)a2, *(WebCore::Node **)(**(_QWORD **)result + 8));
    return (_DWORD *)a1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::Element::resetComputedStyle(WebCore::Element *this, void *a2)
{
  uint64_t v2;
  WebCore::RenderStyle *v4;
  WTF *v5;
  uint64_t v6;
  WebCore::Element *v7;
  BOOL v8;
  WebCore::Element *v9;
  BOOL v10;
  WebCore::RenderStyle *v11;
  uint64_t v12;
  WTF *v13;
  WebCore::Node *v14;

  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return;
  v4 = *(WebCore::RenderStyle **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x30);
  if (!v4)
    return;
  if ((*((_WORD *)this + 14) & 0x400) == 0)
  {
    *(_QWORD *)(v2 + 48) = 0;
    goto LABEL_6;
  }
  (*(void (**)(WebCore::Element *))(*(_QWORD *)this + 1032))(this);
  v4 = *(WebCore::RenderStyle **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x30);
  *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x30) = 0;
  if (v4)
  {
LABEL_6:
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, a2);
    }
  }
  v6 = *((_QWORD *)this + 10);
  if (!v6)
    return;
  while ((*(_WORD *)(v6 + 28) & 8) == 0)
  {
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      return;
  }
  v14 = (WebCore::Node *)v6;
  do
  {
LABEL_15:
    *((_DWORD *)v14 + 6) += 2;
    if ((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v11 = *(WebCore::RenderStyle **)((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) + 0x30);
      if (v11)
      {
        v12 = *(_QWORD *)((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (!v12 || (*(_DWORD *)(v12 + 16) & 0x17 | 8) != 0x1ALL)
        {
          if ((*((_WORD *)v14 + 14) & 0x400) != 0)
          {
            (*(void (**)(WebCore::Node *))(*(_QWORD *)v14 + 1032))(v14);
            v11 = *(WebCore::RenderStyle **)((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) + 0x30);
            *(_QWORD *)((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) + 0x30) = 0;
            if (!v11)
              goto LABEL_16;
          }
          else
          {
            *(_QWORD *)((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) + 0x30) = 0;
          }
          WebCore::RenderStyle::~RenderStyle(v11, a2);
          if (*(_DWORD *)v13)
          {
            *((_OWORD *)v13 + 2) = 0u;
            *((_OWORD *)v13 + 3) = 0u;
            *(_OWORD *)v13 = 0u;
            *((_OWORD *)v13 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v13, a2);
          }
        }
      }
    }
LABEL_16:
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
    v7 = (WebCore::Element *)*((_QWORD *)v14 + 10);
    if (!v7)
    {
      v9 = v14;
      if (v14 == this)
        return;
      while (1)
      {
        v7 = (WebCore::Element *)*((_QWORD *)v9 + 7);
        if (v7)
          break;
        v9 = (WebCore::Element *)*((_QWORD *)v14 + 4);
        if (v9)
          v10 = v9 == this;
        else
          v10 = 1;
        if (v10)
          return;
        v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
      }
    }
    v14 = v7;
  }
  while ((*((_WORD *)v7 + 14) & 8) != 0);
  while (v7 != this)
  {
    while (1)
    {
      v14 = (WebCore::Node *)*((_QWORD *)v7 + 7);
      if (v14)
        break;
      v7 = (WebCore::Element *)*((_QWORD *)v7 + 4);
      if (v7)
        v8 = v7 == this;
      else
        v8 = 1;
      if (v8)
        return;
    }
    v7 = (WebCore::Element *)*((_QWORD *)v7 + 7);
    if ((*((_WORD *)v14 + 14) & 8) != 0)
      goto LABEL_15;
  }
}

double WebCore::LocalFrameViewLayoutContext::scheduleLayout(WebCore::LocalFrameViewLayoutContext *this)
{
  uint64_t v2;
  WTF::MonotonicTime *shouldScheduleLayout;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  WTF::MonotonicTime *v16;
  WTF::MonotonicTime *v17;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296))
  {
    v2 = *((_QWORD *)this + 16);
    if (v2 && *(_QWORD *)(v2 + 8))
      WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout(this);
    if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      if (*((_BYTE *)this + 138))
      {
        shouldScheduleLayout = (WTF::MonotonicTime *)WebCore::Document::shouldScheduleLayout(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296));
        if ((_DWORD)shouldScheduleLayout)
        {
          v4 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328);
          v5 = *((_QWORD *)v4 + 37);
          if (v5)
            v5 = *(_QWORD *)(v5 + 1944);
          if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) != 0
            && (result = *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8), result != 0.0)
            || v5 && (*(_BYTE *)(v5 + 20) & 0xF8) != 0
            || (v6 = *((_QWORD *)this + 16)) != 0 && *(_QWORD *)(v6 + 8)
            || *((_DWORD *)this + 38) && *((_BYTE *)this + 142))
          {
            v8 = v4 + 2;
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 + 1, v8));
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v14 = *((_QWORD *)v4 + 3);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (v15)
                  shouldScheduleLayout = WebCore::InspectorInstrumentation::didInvalidateLayoutImpl(*(WTF::JSONImpl::Object **)(*(_QWORD *)(v15 + 80) + 8), (WebCore::Frame *)v4);
              }
            }
            do
            {
              v11 = __ldaxr(v8);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v8));
            if (!v12)
            {
              atomic_store(1u, v8);
              v16 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v16 = off_1E31FE290;
              *((_QWORD *)v16 + 1) = v8;
              v17 = v16;
              WTF::ensureOnMainThread();
              shouldScheduleLayout = v17;
              if (v17)
                shouldScheduleLayout = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v17 + 8))(v17);
            }
            *((_QWORD *)this + 5) = 0;
            WTF::MonotonicTime::now(shouldScheduleLayout);
            WebCore::TimerBase::setNextFireTime((uint64_t)this + 16, v13 + 0.0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::shouldScheduleLayout(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 159);
  if (!v1)
    return 0;
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v2 = *(_QWORD *)(v1 + 80);
    if (!v2)
      return 0;
    while ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        return 0;
    }
    v5 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
    if (v6 != v5)
    {
LABEL_9:
      if (v6 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
      {
        while (1)
        {
          v2 = *(_QWORD *)(v2 + 56);
          if (!v2)
            return 0;
          if ((*(_WORD *)(v2 + 28) & 0x10) != 0)
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
            if (v6 != v5)
              goto LABEL_9;
            break;
          }
        }
      }
    }
    if (WebCore::Style::Scope::hasPendingSheetsBeforeBody(*((WebCore::Style::Scope **)this + 166)))
      return 0;
    v7 = *((_QWORD *)this + 66);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 288);
        if (v9)
        {
          if (!*(_BYTE *)(v9 + 1375))
            return 0;
        }
      }
    }
  }
  return 1;
}

BOOL WebCore::Style::Scope::hasPendingSheetsBeforeBody(WebCore::Style::Scope *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WebCore::Style::Scope *v11;
  uint64_t *v12[5];
  uint64_t *v13[5];

  v1 = *((_QWORD *)this + 20);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v6 = *(unsigned int *)(v1 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = *((_QWORD *)this + 20);
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 8;
        v7 -= 8;
        if (!v7)
          goto LABEL_2;
      }
    }
    else
    {
      v8 = *((_QWORD *)this + 20);
    }
    v10 = v1 + 8 * v6;
    if (v8 != v10)
    {
      if (*(_QWORD *)(*(_QWORD *)v8 + 8))
        return 1;
      v11 = this;
      while (1)
      {
        v8 += 8;
        this = v11;
        if (v8 == v10)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
        {
          this = v11;
          if (v8 == v10)
            break;
          result = 1;
          if (*(_QWORD *)(*(_QWORD *)v8 + 8))
            return result;
        }
      }
    }
  }
LABEL_2:
  v4 = *((_QWORD *)this + 18);
  v2 = (uint64_t *)((char *)this + 144);
  v3 = v4;
  if (!v4 || !*(_DWORD *)(v3 - 12))
    return 0;
  v9 = v2;
  WTF::WeakHashSet<WebCore::ProcessingInstruction const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v2, v13);
  WTF::WeakHashSet<WebCore::ProcessingInstruction const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v9, v12);
  return v13[1] != v12[1];
}

uint64_t WebCore::Style::Scope::createDocumentResolver(WebCore::Style::Scope *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WebCore::Style::Resolver *v6;
  uint64_t v7;
  WebCore::Style::RuleSet *v8;
  WebCore::Style::RuleSet **v9;
  WebCore::Style::RuleSet *v10;
  WebCore::CSSFontSelector *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t result;
  bmalloc::api *v15;
  void *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;

  v2 = *((_BYTE *)this + 237);
  *((_BYTE *)this + 237) = 1;
  v3 = *((_QWORD *)this + 2);
  v4 = bmalloc::api::isoAllocate();
  WebCore::Style::Resolver::Resolver(v4, v3, 0);
  v6 = (WebCore::Style::Resolver *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::Style::Resolver::~Resolver(v6);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
    goto LABEL_8;
  v7 = WTF::fastMalloc((WTF *)0x328);
  *(_DWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_QWORD *)(v7 + 72) = v7 + 88;
  *(_QWORD *)(v7 + 80) = 1;
  *(_QWORD *)(v7 + 120) = v7 + 136;
  *(_QWORD *)(v7 + 128) = 1;
  *(_QWORD *)(v7 + 168) = v7 + 184;
  *(_QWORD *)(v7 + 176) = 1;
  *(_QWORD *)(v7 + 216) = v7 + 232;
  *(_QWORD *)(v7 + 224) = 1;
  *(_QWORD *)(v7 + 264) = v7 + 280;
  *(_QWORD *)(v7 + 272) = 1;
  *(_QWORD *)(v7 + 312) = v7 + 328;
  *(_QWORD *)(v7 + 320) = 1;
  *(_QWORD *)(v7 + 360) = v7 + 376;
  *(_QWORD *)(v7 + 368) = 1;
  *(_QWORD *)(v7 + 408) = v7 + 424;
  *(_QWORD *)(v7 + 416) = 1;
  *(_QWORD *)(v7 + 645) = 0;
  *(_OWORD *)(v7 + 616) = 0u;
  *(_OWORD *)(v7 + 632) = 0u;
  *(_OWORD *)(v7 + 584) = 0u;
  *(_OWORD *)(v7 + 600) = 0u;
  *(_OWORD *)(v7 + 552) = 0u;
  *(_OWORD *)(v7 + 568) = 0u;
  *(_OWORD *)(v7 + 520) = 0u;
  *(_OWORD *)(v7 + 536) = 0u;
  *(_OWORD *)(v7 + 488) = 0u;
  *(_OWORD *)(v7 + 504) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_QWORD *)(v7 + 672) = 0;
  *(_DWORD *)(v7 + 680) = 0;
  *(_OWORD *)(v7 + 656) = 0u;
  *(_OWORD *)(v7 + 688) = 0u;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_OWORD *)(v7 + 720) = 0u;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_OWORD *)(v7 + 784) = 0u;
  *(_WORD *)(v7 + 800) = 0;
  v8 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v7;
  if (!v8)
    goto LABEL_8;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_8:
    v9 = (WebCore::Style::RuleSet **)(*((_QWORD *)this + 4) + 48);
LABEL_9:
    ++*(_DWORD *)v7;
    goto LABEL_10;
  }
  WebCore::Style::RuleSet::~RuleSet(v8, v5);
  WTF::fastFree(v19, v20);
  v7 = *((_QWORD *)this + 9);
  v9 = (WebCore::Style::RuleSet **)(*((_QWORD *)this + 4) + 48);
  if (v7)
    goto LABEL_9;
LABEL_10:
  v10 = *v9;
  *v9 = (WebCore::Style::RuleSet *)v7;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v10, v5);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *(WebCore::CSSFontSelector **)(*((_QWORD *)this + 2) + 2648);
  if (!v11)
    v11 = (WebCore::CSSFontSelector *)WebCore::Document::ensureFontSelector(*((WebCore::Document **)this + 2));
  WebCore::CSSFontSelector::buildStarted(v11);
  WebCore::Style::ScopeRuleSets::initializeUserStyle((WebCore::Style::ScopeRuleSets *)(*((_QWORD *)this + 4) + 32));
  WebCore::Style::Resolver::addCurrentSVGFontFaceRules(*((_QWORD **)this + 4));
  WebCore::Style::Resolver::appendAuthorStyleSheets(*((_QWORD **)this + 4), (uint64_t)this + 56);
  v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 2648);
  if (!v13)
    v13 = WebCore::Document::ensureFontSelector(*((WebCore::Document **)this + 2));
  result = WebCore::CSSFontSelector::buildCompleted(v13, v12);
  *((_BYTE *)this + 237) = v2;
  return result;
}

_BYTE *WebCore::Style::Adjuster::restoreUsedDocumentElementStyleToComputed@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  int v4;
  int v5;

  if ((this[45] & 0xE0) != 0 || (this[43] & 4) != 0)
  {
    v3 = this;
    this = (_BYTE *)WebCore::RenderStyle::clonePtr((WebCore::RenderStyle *)this, a2);
    v4 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 32) + 148);
    if ((v4 & 0x10) == 0)
    {
      v5 = *(_DWORD *)(*a2 + 44);
      if ((v5 & 0xE000) != 0)
      {
        *(_DWORD *)(*a2 + 44) = v5 & 0xFFFF1FFF;
        v4 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 32) + 148);
      }
    }
    if ((v4 & 8) == 0)
      *(_DWORD *)(*a2 + 40) &= ~0x4000000u;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::CSSFontSelector::buildCompleted(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::CSSFontFace **v4;
  uint64_t v5;
  WebCore::CSSFontFace **v6;
  WebCore::CSSFontFace **v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  WebCore::CSSFontFace **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;

  if (!*(_BYTE *)(this + 173))
    return this;
  v2 = this;
  *(_BYTE *)(this + 173) = 0;
  v3 = *(_QWORD *)(this + 128);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    v6 = (WebCore::CSSFontFace **)(v3 + 8 * v5);
    if (*(_DWORD *)(v3 - 12))
    {
      v4 = *(WebCore::CSSFontFace ***)(this + 128);
      if ((_DWORD)v5)
      {
        v12 = 8 * v5;
        v4 = *(WebCore::CSSFontFace ***)(this + 128);
        while ((unint64_t)*v4 + 1 <= 1)
        {
          ++v4;
          v12 -= 8;
          if (!v12)
          {
            v4 = v6;
            goto LABEL_5;
          }
        }
      }
      goto LABEL_5;
    }
    v4 = (WebCore::CSSFontFace **)(v3 + 8 * v5);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = (WebCore::CSSFontFace **)(v3 + 8 * v5);
LABEL_5:
  if (v3)
    v7 = (WebCore::CSSFontFace **)(v3 + 8 * *(unsigned int *)(v3 - 4));
  else
    v7 = 0;
  while (v4 != v7)
  {
    v10 = WebCore::CSSFontFace::cssConnection(*v4);
    if ((WTF::HashSet<JSC::ArrayBuffer *,WTF::DefaultHash<JSC::ArrayBuffer *>,WTF::HashTraits<JSC::ArrayBuffer *>,WTF::HashTableTraits>::contains(*(_QWORD *)(v2 + 136), v10) & 1) == 0)WebCore::CSSFontFaceSet::remove(*(WebCore::CSSFontFaceSet **)(v2 + 96), *v4);
    v11 = v4 + 1;
    v4 = v6;
    if (v11 != v6)
    {
      v4 = v11;
      while ((unint64_t)*v4 + 1 <= 1)
      {
        if (++v4 == v6)
        {
          v4 = v6;
          break;
        }
      }
    }
  }
  v8 = *(unsigned int *)(v2 + 76);
  if ((_DWORD)v8)
  {
    v13 = *(_QWORD *)(v2 + 64);
    v14 = v13 + 16 * v8;
    do
    {
      WebCore::CSSFontSelector::addFontFaceRule(v2, *(_QWORD *)v13, *(unsigned __int8 *)(v13 + 8));
      v13 += 16;
    }
    while (v13 != v14);
  }
  v9 = *(_DWORD ***)(v2 + 136);
  if (v9)
  {
    *(_QWORD *)(v2 + 136) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>>::deallocateTable(v9, a2);
  }
  if (*(_DWORD *)(v2 + 72))
  {
    if (*(_DWORD *)(v2 + 76))
      *(_DWORD *)(v2 + 76) = 0;
    v15 = *(WTF **)(v2 + 64);
    if (v15)
    {
      *(_QWORD *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      WTF::fastFree(v15, a2);
    }
  }
  this = *(_QWORD *)(v2 + 128);
  if (this)
  {
    *(_QWORD *)(v2 + 128) = 0;
    return WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::deallocateTable((WebCore::CSSFontFace **)this, a2);
  }
  return this;
}

uint64_t WebCore::Element::resetAllDescendantStyleRelations(uint64_t this)
{
  *(_QWORD *)(this + 64) &= 0xF3FFFFFFFFFFFFFuLL;
  return this;
}

unint64_t WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 40 * (unint64_t)a1[3] > a3)
  {
    v8 = a3 - v4;
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::SelectorFilter::ParentStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 40 * v4;
        do
        {
          v10 = (char *)v3 + v8;
          v11 = &v7[v8 / 4];
          v12 = &v7[v8 / 4 + 6];
          *(_QWORD *)v11 = *(_QWORD *)((char *)v3 + v8);
          *((_QWORD *)v11 + 1) = v12;
          *((_QWORD *)v11 + 2) = 4;
          v6 = *(void **)((char *)v3 + v8 + 8);
          v13 = (uint64_t)v3 + v8 + 24;
          if ((void *)v13 == v6)
          {
            memcpy(v12, v6, 4 * *((unsigned int *)v10 + 5));
          }
          else
          {
            *((_QWORD *)v10 + 1) = v13;
            *((_QWORD *)v11 + 1) = v6;
            v15 = *((_DWORD *)v10 + 4);
            *((_DWORD *)v10 + 4) = 4;
            v11[4] = v15;
          }
          v14 = *(_DWORD *)((char *)v3 + v8 + 20);
          *(_DWORD *)((char *)v3 + v8 + 20) = 0;
          v11[5] = v14;
          result = (unsigned int *)*((_QWORD *)v10 + 1);
          if ((unsigned int *)v13 != result && result)
          {
            *((_QWORD *)v10 + 1) = 0;
            *(_DWORD *)((char *)v3 + v8 + 16) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v8 += 40;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WebCore::Style::Resolver::addCurrentSVGFontFaceRules(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = this[2];
  if (!v1)
    return this;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 1808);
  if (!v2)
    return this;
  v3 = this;
  v6 = *(_QWORD *)(v2 + 32);
  v5 = v2 + 32;
  v4 = v6;
  if (v6)
  {
    v8 = *(unsigned int *)(v4 - 4);
    v9 = v4 + 8 * v8;
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = v4;
      if ((_DWORD)v8)
      {
        v18 = 8 * v8;
        v7 = v4;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          v18 -= 8;
          if (!v18)
          {
            v7 = v9;
            goto LABEL_7;
          }
        }
      }
      goto LABEL_7;
    }
    v7 = v4 + 8 * v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = v4 + 8 * v8;
LABEL_7:
  v23 = v5;
  v24 = v7;
  v25 = v9;
  if (v4)
  {
    v11 = *(unsigned int *)(v4 - 4);
    v10 = v4 + 8 * v11;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v26 = v10;
  v27 = v4 + 8 * v11;
  if (v7 != v10)
  {
    if (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v20 = v7;
      do
      {
        v21 = v20 + 8;
        v20 = v9;
        if (v21 != v9)
        {
          v20 = v21;
          while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
          {
            v20 += 8;
            if (v20 == v9)
            {
              v20 = v9;
              break;
            }
          }
        }
        v7 = v10;
        if (v20 == v10)
          break;
        v7 = v20;
      }
      while (!*(_QWORD *)(*(_QWORD *)v20 + 8));
    }
    v24 = v7;
  }
  if (v4)
    v12 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v12 = 0;
  while (v7 != v12)
  {
    v13 = (WebCore::Document *)v3[2];
    if (v13)
      v13 = (WebCore::Document *)*((_QWORD *)v13 + 1);
    v14 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v15 = *((_QWORD *)v13 + 331);
    if (!v15)
    {
      v22 = v14;
      v15 = WebCore::Document::ensureFontSelector(v13);
      v14 = v22;
    }
    v16 = **(_QWORD **)(v14 + 40);
    if (v16)
      v17 = (*(_WORD *)(v16 + 28) & 0x80) == 0;
    else
      v17 = 1;
    v19 = !v17 && *(unsigned __int8 *)(v16 + 193) == 0;
    WebCore::CSSFontSelector::addFontFaceRule(v15, *(_QWORD *)(v14 + 176), v19);
    this = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
    v7 = v24;
  }
  return this;
}

uint64_t WebCore::CSSFontSelector::buildStarted(WebCore::CSSFontSelector *this)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  WebCore::CSSFontFace *v6;
  WebCore::CSSFontFace *v7;
  uint64_t v8;
  WebCore::CSSFontFace *v9;

  *((_BYTE *)this + 173) = 1;
  WebCore::CSSFontFaceSet::purge(*((WebCore::CSSFontFaceSet **)this + 12));
  ++*((_DWORD *)this + 41);
  v3 = *((_QWORD *)this + 12);
  if (*(_DWORD *)(v3 + 36))
  {
    v5 = 0;
    do
    {
      v6 = *(WebCore::CSSFontFace **)(*(_QWORD *)(v3 + 24) + 8 * v5);
      if (WebCore::CSSFontFace::cssConnection(v6))
      {
        ++*((_DWORD *)v6 + 2);
        v9 = v6;
        WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::add((uint64_t)this + 128, &v9, (uint64_t)&v8);
        v7 = v9;
        v9 = 0;
        if (v7)
          WTF::RefCounted<WebCore::CSSFontFace>::deref((_DWORD *)v7 + 2);
      }
      ++v5;
      v3 = *((_QWORD *)this + 12);
    }
    while (v5 < *(unsigned int *)(v3 + 36));
  }
  result = *((_QWORD *)this + 14);
  if (result)
  {
    *((_QWORD *)this + 14) = 0;
    return WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>>,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(result, v2);
  }
  return result;
}

void WebCore::CSSFontFaceSet::purge(WebCore::CSSFontFaceSet *this)
{
  uint64_t v1;
  WebCore::CSSFontFace **v3;
  uint64_t v4;
  void *v5;
  int v6;
  WebCore::CSSFontFace *v7;
  int v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  const WebCore::CSSFontFace *v13;
  WTF *v14;
  WebCore::CSSFontFace *v15;
  WTF *v16;
  void *v17;
  WebCore::CSSFontFace *v18;
  WTF *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  v1 = *((unsigned int *)this + 9);
  if ((_DWORD)v1)
  {
    v3 = (WebCore::CSSFontFace **)*((_QWORD *)this + 3);
    v4 = 8 * v1;
    do
    {
      WebCore::CSSFontFace::purgeable(*v3);
      if (v6)
      {
        v7 = *v3;
        *((_DWORD *)v7 + 2) = *((_DWORD *)*v3 + 2) + 1;
        v18 = v7;
        v8 = HIDWORD(v20);
        if (HIDWORD(v20) == (_DWORD)v20)
        {
          WTF::Vector<std::unique_ptr<WebCore::DetachedOffscreenCanvas>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::DetachedOffscreenCanvas>>((uint64_t)&v19, (unint64_t)&v18);
        }
        else
        {
          v18 = 0;
          *((_QWORD *)v19 + HIDWORD(v20)) = v7;
          HIDWORD(v20) = v8 + 1;
        }
        WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>::~Ref(&v18);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
    v9 = v19;
    if (HIDWORD(v20))
    {
      v10 = 8 * HIDWORD(v20);
      v11 = v10;
      v12 = v19;
      do
      {
        v13 = *(const WebCore::CSSFontFace **)v12;
        v12 = (WTF *)((char *)v12 + 8);
        WebCore::CSSFontFaceSet::remove(this, v13);
        v11 -= 8;
      }
      while (v11);
      v14 = v9;
      do
      {
        v15 = *(WebCore::CSSFontFace **)v14;
        *(_QWORD *)v14 = 0;
        if (v15)
        {
          if (*((_DWORD *)v15 + 2) == 1)
          {
            WebCore::CSSFontFace::~CSSFontFace(v15);
            WTF::fastFree(v16, v17);
          }
          else
          {
            --*((_DWORD *)v15 + 2);
          }
        }
        v14 = (WTF *)((char *)v14 + 8);
        v10 -= 8;
      }
      while (v10);
    }
    if (v9)
      WTF::fastFree(v9, v5);
  }
}

void WTF::HashTable<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WebCore::Style::ElementUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::RenderStyle *v25;
  _QWORD *v26;
  WebCore::RenderStyle *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  WebCore::RenderStyle *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 24 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    while (1)
    {
      v12 = (uint64_t *)(v3 + 24 * v10);
      v13 = *v12;
      if (!*v12)
        break;
      if (v13 != -1)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = (uint64_t *)(v14 + 24 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (*v22);
        v23 = v21;
        v24 = v14 + 24 * v21;
        v27 = *(WebCore::RenderStyle **)(v24 + 8);
        v26 = (_QWORD *)(v24 + 8);
        v25 = v27;
        *v26 = 0;
        if (v27)
        {
          WebCore::RenderStyle::~RenderStyle(v25, v7);
          if (*(_DWORD *)v28)
          {
            *((_OWORD *)v28 + 2) = 0u;
            *((_OWORD *)v28 + 3) = 0u;
            *(_OWORD *)v28 = 0u;
            *((_OWORD *)v28 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v28, v7);
          }
        }
        v29 = *v22;
        *v22 = 0;
        if (v29)
        {
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        v30 = *v12;
        *v12 = 0;
        *v22 = v30;
        v31 = v3 + 24 * v10;
        v32 = *(_QWORD *)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        *v26 = v32;
        v33 = v14 + 24 * v23;
        v34 = *(_WORD *)(v31 + 16);
        *(_BYTE *)(v33 + 18) = *(_BYTE *)(v31 + 18);
        *(_WORD *)(v33 + 16) = v34;
        v35 = *(WebCore::RenderStyle **)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        if (v35)
        {
LABEL_25:
          WebCore::RenderStyle::~RenderStyle(v35, v7);
          if (*(_DWORD *)v36)
          {
            *((_OWORD *)v36 + 2) = 0u;
            *((_OWORD *)v36 + 3) = 0u;
            *(_OWORD *)v36 = 0u;
            *((_OWORD *)v36 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v36, v7);
          }
        }
LABEL_27:
        v37 = *v12;
        *v12 = 0;
        if (v37)
        {
          if (*(_DWORD *)(v37 + 24) == 2)
          {
            if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v37);
          }
          else
          {
            *(_DWORD *)(v37 + 24) -= 2;
          }
        }
      }
      if (++v10 == v11)
        goto LABEL_35;
    }
    v38 = v3 + 24 * v10;
    v35 = *(WebCore::RenderStyle **)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    if (v35)
      goto LABEL_25;
    goto LABEL_27;
  }
  if (v3)
LABEL_35:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

double WebCore::Style::Update::addText(uint64_t a1, WebCore::Node *a2, WebCore::Element *a3, uint64_t a4)
{
  void *v7;
  double result;
  WebCore::Node *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::Node *v13;
  uint64_t v14;
  char v15;

  WebCore::Style::Update::addPossibleRoot((unsigned int *)a1, a3);
  *((_DWORD *)a2 + 6) += 2;
  v13 = a2;
  WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::add<WebCore::Style::TextUpdate>((uint64_t *)(a1 + 72), (uint64_t *)&v13, a4, (uint64_t)&v14);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v7);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  if (!v15)
  {
    v10 = v14;
    v11 = *(_DWORD *)(v14 + 8);
    v12 = *(_DWORD *)(v14 + 12) + v11;
    if (*(_DWORD *)a4 < v11)
      v11 = *(_DWORD *)a4;
    if (v12 <= *(_DWORD *)(a4 + 4) + *(_DWORD *)a4)
      v12 = *(_DWORD *)(a4 + 4) + *(_DWORD *)a4;
    *(_DWORD *)(v14 + 8) = v11;
    *(_DWORD *)(v10 + 12) = v12 - v11;
    if (!*(_BYTE *)(v10 + 24))
      return std::__optional_storage_base<std::unique_ptr<WebCore::RenderStyle>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::unique_ptr<WebCore::RenderStyle>,false>>(v10 + 16, (unsigned __int8 *)(a4 + 8));
  }
  return result;
}

unsigned int *WebCore::Style::Update::addPossibleRoot(unsigned int *this, WebCore::Element *a2)
{
  unsigned int *v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  WebCore::Element *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unsigned int **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  unsigned int **v22;
  WebCore::Element **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unsigned int **v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int j;
  unsigned int v34;
  WebCore::Element **v35;
  WebCore::Node *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int **v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t *v52;

  v2 = this;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 54) & 8) != 0)
      return this;
    v4 = *((_QWORD *)this + 8);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(WebCore::Element **)(v4 + 24 * v9);
      if (v10 == a2)
        return this;
      v11 = 1;
      while (v10)
      {
        v9 = (v9 + v11) & v5;
        v10 = *(WebCore::Element **)(v4 + 24 * v9);
        ++v11;
        if (v10 == a2)
          return this;
      }
    }
    *((_DWORD *)a2 + 6) += 2;
    v13 = (uint64_t *)(this + 4);
    v12 = *((_QWORD *)this + 2);
    if (v12
      || (this = (unsigned int *)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash((uint64_t *)this + 2, 8u, 0), (v12 = *v13) != 0))
    {
      v14 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
    v16 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = (v18 >> 31) ^ v18;
    for (i = 1; ; ++i)
    {
      v21 = v19 & v14;
      v22 = (unsigned int **)(v12 + 8 * v21);
      v23 = (WebCore::Element **)*v22;
      if (!*v22)
        break;
      if (v23 != (WebCore::Element **)-1)
      {
        v22 = v15;
        if (*v23 == a2)
        {
          if (*((_DWORD *)a2 + 6) != 2)
          {
            *((_DWORD *)a2 + 6) -= 2;
            return this;
          }
          if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          {
            v36 = a2;
            return WebCore::Node::removedLastRef(v36, a2);
          }
          return this;
        }
      }
      v19 = i + v21;
      v15 = v22;
    }
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*v13 - 16);
      v22 = v15;
    }
    this = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = a2;
    *v22 = this;
    v37 = *v13;
    if (*v13)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v39 = *v13;
    if (*v13)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 > 2 * v41)
        goto LABEL_39;
    }
    else
    {
      if (3 * v42 > 4 * v41)
        goto LABEL_39;
      if (!(_DWORD)v42)
      {
        v51 = 8;
        goto LABEL_67;
      }
    }
    v51 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
LABEL_67:
    v52 = (uint64_t *)(v2 + 4);
    goto LABEL_68;
  }
  v24 = *((_QWORD *)this + 1);
  *(_DWORD *)(v24 + 24) += 2;
  v26 = (uint64_t *)(this + 4);
  v25 = *((_QWORD *)this + 2);
  if (v25
    || (this = (unsigned int *)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash((uint64_t *)this + 2, 8u, 0), (v25 = *v26) != 0))
  {
    v27 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = 0;
  v29 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
  v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  v32 = (v31 >> 31) ^ v31;
  for (j = 1; ; ++j)
  {
    v34 = v32 & v27;
    v22 = (unsigned int **)(v25 + 8 * v34);
    v35 = (WebCore::Element **)*v22;
    if (!*v22)
    {
      if (v28)
      {
        *v28 = 0;
        --*(_DWORD *)(*v26 - 16);
        v22 = v28;
      }
      this = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = v24;
      *v22 = this;
      v45 = *v26;
      if (*v26)
        v46 = *(_DWORD *)(v45 - 12) + 1;
      else
        v46 = 1;
      *(_DWORD *)(v45 - 12) = v46;
      v47 = *v26;
      if (*v26)
        v48 = *(_DWORD *)(v47 - 12);
      else
        v48 = 0;
      v49 = (*(_DWORD *)(v47 - 16) + v48);
      v50 = *(unsigned int *)(v47 - 4);
      if (v50 > 0x400)
      {
        if (v50 <= 2 * v49)
          goto LABEL_70;
      }
      else if (3 * v50 <= 4 * v49)
      {
        if (!(_DWORD)v50)
        {
          v51 = 8;
          goto LABEL_58;
        }
LABEL_70:
        v51 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
LABEL_58:
        v52 = (uint64_t *)(v2 + 4);
LABEL_68:
        this = (unsigned int *)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v52, v51, (_QWORD **)v22);
      }
LABEL_39:
      v43 = *((_QWORD *)v2 + 4);
      *((_QWORD *)this + 1) = v43;
      *((_QWORD *)this + 2) = 0;
      if (v43)
        v44 = (unsigned int **)(v43 + 16);
      else
        v44 = (unsigned int **)(v2 + 6);
      *v44 = this;
      *((_QWORD *)v2 + 4) = this;
      return this;
    }
    if (v35 != (WebCore::Element **)-1)
    {
      v22 = v28;
      if (*v35 == (WebCore::Element *)v24)
        break;
    }
    v32 = j + v34;
    v28 = v22;
  }
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      {
        v36 = (WebCore::Node *)v24;
        return WebCore::Node::removedLastRef(v36, a2);
      }
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  return this;
}

void WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::add<WebCore::Style::TextUpdate>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 32 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 32 * v29;
        goto LABEL_21;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = ((_DWORD)v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 32 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *(_OWORD *)v18 = 0u;
      *((_OWORD *)v18 + 1) = 0u;
      *((_DWORD *)v18 + 3) = -1;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *a2 = 0;
  v20 = *v16;
  *v16 = v11;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v16[1] = *(_QWORD *)a3;
  std::__optional_storage_base<std::unique_ptr<WebCore::RenderStyle>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::unique_ptr<WebCore::RenderStyle>,false>>((uint64_t)(v16 + 2), (unsigned __int8 *)(a3 + 8));
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a1;
  if (*a1)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_20;
    goto LABEL_36;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v30 = 8;
      goto LABEL_37;
    }
LABEL_36:
    v30 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_37:
    v16 = WTF::HashTable<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>>::rehash(a1, v30, v16);
    v23 = *a1;
    if (*a1)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
LABEL_20:
  v27 = v23 + 32 * v26;
  v28 = 1;
LABEL_21:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>>::deallocateTable(_DWORD **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*v5 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
          else
            --*v5;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _BYTE *v27;
  WebCore::RenderStyle *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE *v36;
  WebCore::RenderStyle **v37;
  uint64_t v38;
  WebCore::RenderStyle *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::RenderStyle *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t *result;
  uint64_t v48;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = a2;
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v11 = v9 + 28;
    do
    {
      *(_OWORD *)(v11 - 12) = 0uLL;
      *(_OWORD *)(v11 + 4) = 0uLL;
      *(_DWORD *)v11 = -1;
      v11 += 32;
      --v8;
    }
    while (v8);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v48 = v6;
    do
    {
      v14 = (uint64_t *)(v5 + 32 * v12);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 32 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = v23;
          v26 = (uint64_t *)(v16 + 32 * v23);
          v27 = v26 + 3;
          if (*((_BYTE *)v26 + 24))
          {
            v28 = (WebCore::RenderStyle *)v26[2];
            v26[2] = 0;
            if (v28)
            {
              WebCore::RenderStyle::~RenderStyle(v28, v10);
              if (*(_DWORD *)v29)
              {
                *((_OWORD *)v29 + 2) = 0u;
                *((_OWORD *)v29 + 3) = 0u;
                *(_OWORD *)v29 = 0u;
                *((_OWORD *)v29 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v29, v10);
              }
            }
          }
          v30 = *v26;
          *v26 = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          v31 = *v14;
          *v14 = 0;
          *v26 = v31;
          v32 = v16 + 32 * v25;
          v33 = v5 + 32 * v12;
          v34 = *(_QWORD *)(v33 + 8);
          *(_BYTE *)(v32 + 16) = 0;
          v35 = (_QWORD *)(v32 + 16);
          *(v35 - 1) = v34;
          *v27 = 0;
          v36 = (_BYTE *)(v33 + 24);
          if (*(_BYTE *)(v33 + 24))
          {
            v38 = *(_QWORD *)(v33 + 16);
            v37 = (WebCore::RenderStyle **)(v33 + 16);
            *v37 = 0;
            *v35 = v38;
            *v27 = 1;
            if (*v36)
            {
              v39 = *v37;
              *v37 = 0;
              if (v39)
              {
                WebCore::RenderStyle::~RenderStyle(v39, v10);
                if (*(_DWORD *)v40)
                {
                  *((_OWORD *)v40 + 2) = 0u;
                  *((_OWORD *)v40 + 3) = 0u;
                  *(_OWORD *)v40 = 0u;
                  *((_OWORD *)v40 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v40, v10);
                }
              }
            }
          }
          v41 = *v14;
          *v14 = 0;
          if (v41)
          {
            if (*(_DWORD *)(v41 + 24) == 2)
            {
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v41);
            }
            else
            {
              *(_DWORD *)(v41 + 24) -= 2;
            }
          }
          if (v14 == a3)
            v13 = v26;
        }
      }
      else
      {
        if (*((_BYTE *)v14 + 24))
        {
          v42 = v5 + 32 * v12;
          v43 = *(WebCore::RenderStyle **)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v43)
          {
            WebCore::RenderStyle::~RenderStyle(v43, v10);
            if (*(_DWORD *)v44)
            {
              *((_OWORD *)v44 + 2) = 0u;
              *((_OWORD *)v44 + 3) = 0u;
              *(_OWORD *)v44 = 0u;
              *((_OWORD *)v44 + 1) = 0u;
            }
            else
            {
              WTF::fastFree(v44, v10);
            }
          }
        }
        v45 = *v14;
        *v14 = 0;
        if (v45)
        {
          if (*(_DWORD *)(v45 + 24) == 2)
          {
            if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v45);
          }
          else
          {
            *(_DWORD *)(v45 + 24) -= 2;
          }
        }
      }
      ++v12;
    }
    while (v12 != v48);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v10);
  return v13;
}

uint64_t WebCore::setPresentingApplicationPID(uint64_t this)
{
  WebCore::presentingApplicationPIDOverride(void)::pid = this;
  byte_1ECE90D38 = 1;
  return this;
}

WebCore::SWRegistrationDatabase *WebCore::SWRegistrationDatabase::SWRegistrationDatabase(WebCore::SWRegistrationDatabase *this, const WTF::String *a2)
{
  _DWORD *v3;
  void *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = 3;
  v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *((_DWORD *)this + 6) = 3;
  *((_QWORD *)this + 2) = v4;
  bzero(v4, 8 * *((unsigned int *)this + 7));
  *((_QWORD *)this + 4) = 0;
  return this;
}

WebCore::LayoutIntegration::LineLayout *WebCore::LayoutIntegration::LineLayout::LineLayout(WebCore::LayoutIntegration::LineLayout *this, WebCore::RenderBlockFlow *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Layout::LayoutState *v10;
  uint64_t v11;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  *(_DWORD *)this = 0;
  v4 = (uint64_t *)((char *)this + 8);
  WebCore::LayoutIntegration::BoxTree::BoxTree((WebCore::LayoutIntegration::LineLayout *)((char *)this + 8), a2);
  v5 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)
                   + 272);
  v6 = *v5;
  if (*v5)
    goto LABEL_24;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v5;
  v14 = (unsigned int *)*v5;
  *v5 = v6;
  if (!v14)
    goto LABEL_24;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v13);
  }
  v6 = *v5;
  if (*v5)
  {
LABEL_24:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    *((_QWORD *)this + 3) = v6;
    v6 = *(_QWORD *)(v6 + 8);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v8 && (*(_WORD *)(v8 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B20BCLL);
  }
  *((_QWORD *)this + 4) = WebCore::Layout::LayoutState::ensureBlockFormattingState((WebCore::Layout::LayoutState *)v6, v8);
  v9 = *((_QWORD *)this + 3);
  if (v9)
    v10 = *(WebCore::Layout::LayoutState **)(v9 + 8);
  else
    v10 = 0;
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v11 && (*(_WORD *)(v11 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B20DCLL);
  }
  *((_QWORD *)this + 5) = WebCore::Layout::LayoutState::inlineContentCache(v10, v11);
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 68) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  WebCore::LayoutIntegration::BoxGeometryUpdater::BoxGeometryUpdater((uint64_t *)this + 11, v4, *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)+ 272));
  return this;
}

WTF *WebCore::LayoutIntegration::LineLayout::layout@<X0>(WebCore::LayoutIntegration::LineLayout *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::LayoutIntegration::InlineContent *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  const WebCore::RenderStyle *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  double v38;
  uint64_t v39;
  WebCore::LayoutIntegration::InlineContent *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  WTF *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  double v56;
  double v57;
  double v58;
  unsigned int v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  _WORD *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  int v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  WTF *v98;
  unsigned int v99;
  __int128 *v100;
  unsigned int v101;
  WTF *v102;
  double v103;
  unsigned int v104;
  float32x2_t *v105;
  uint64_t v106;
  float32x2_t v107;
  float32x2_t v108;
  int8x8_t v109;
  int8x8_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  WTF *v114;
  int v115;
  WTF *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  char v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  float v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  _DWORD *v145;
  _DWORD *v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  WTF *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  BOOL v162;
  int v163;
  double v164;
  int v166;
  double v167;
  int v169;
  double v170;
  WebCore::Layout::InlineDamage *v172;
  bmalloc::api *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v185;
  uint64_t v186;
  _UNKNOWN *__ptr32 *v187;
  _UNKNOWN *__ptr32 *v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  unsigned int v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  BOOL v198;
  int v201;
  uint64_t v202;
  unint64_t v204;
  uint64_t v205;
  WTF *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  unsigned int **v215;
  unsigned int *v216;
  uint64_t v217;
  BOOL v218;
  _UNKNOWN *__ptr32 *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  unint64_t v226;
  int v227;
  int v228;
  _BYTE *v229;
  unsigned __int8 *v230;
  _BOOL4 v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  BOOL v243;
  unsigned int v244;
  double v245;
  BOOL v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _DWORD **v252;
  WebCore::RenderBox *v253;
  BOOL v254;
  _QWORD *v255;
  WebCore::RenderBox *v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  int v262;
  uint64_t v264;
  uint64_t v265;
  _UNKNOWN *__ptr32 *v266;
  _UNKNOWN *__ptr32 *v267;
  int isOverflowVisible;
  uint64_t v269;
  uint64_t v270;
  uint64_t v273;
  char v274;
  WTF *v275;
  WTF *v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  uint64_t v280;
  int v281;
  WTF *v282;
  WTF *result;
  uint64_t v284;
  int v285;
  WTF *v286;
  void *v287;
  uint64_t v288;
  int v290;
  WebCore::RenderBlockFlow *v292;
  uint64_t *inserted;
  unsigned int v294;
  uint64_t v295;
  unsigned int v296;
  int v297;
  char v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  unsigned int v308;
  unint64_t v309;
  unsigned int v310;
  int v311;
  int v312;
  int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  __int128 v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  int v330;
  unsigned int v331;
  int v332;
  WTF *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _DWORD **v340;
  _DWORD *v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  __int128 *v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  float *v362;
  float v363;
  uint64_t v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  float *v380;
  float v381;
  uint64_t v382;
  float v383;
  float v384;
  float v385;
  uint64_t v386;
  unint64_t v387;
  _QWORD *v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t *v391;
  unsigned int v392;
  unsigned int v393;
  _BOOL4 v394;
  int v395;
  int v396;
  int j;
  uint64_t v398;
  __int128 *v399;
  unsigned int v400;
  WebCore::RenderObject *v401;
  WebCore::RenderObject *v402;
  int v403;
  BOOL v404;
  WebCore::RenderObject *v405;
  WebCore::RenderObject *v406;
  BOOL v407;
  uint64_t v408;
  WTF *i;
  uint64_t v410;
  unint64_t v411;
  const WebCore::RenderBox *v412;
  WebCore::ShapeOutsideInfo *v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  float32x2_t *v417;
  double v418;
  double v419;
  _OWORD *v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _BYTE *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  int v438;
  unint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unint64_t v442;
  unint64_t v443;
  unsigned int v444;
  int v445;
  BOOL v446;
  char v447;
  int v448;
  unsigned int v449;
  BOOL v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  void *v456;
  float v457;
  int v458;
  BOOL v459;
  int v460;
  void *v461;
  int v462;
  unint64_t v463;
  uint64_t v464;
  int v465;
  unsigned int v466;
  int v467;
  signed int v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  char v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  char v476;
  uint64_t v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  char v485;
  int v486;
  char v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  int v491;
  uint64_t v492;
  unsigned int v493;
  int v494;
  unsigned int started;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unint64_t v499;
  int v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  unsigned int v504;
  WebCore::RenderBox *v505;
  WebCore::RenderBox *v506;
  unsigned int v507;
  int v508;
  WebCore::RenderBox *v509;
  unsigned int v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  int v526;
  _QWORD *v527;
  uint64_t v528;
  char v529;
  WTF *v530;
  uint64_t v531;
  WTF *v532;
  __int128 *v533;
  WTF *v534;
  double v535;
  char v536;
  _BYTE v537[32];
  uint64_t v538;
  __int128 v539;
  uint64_t v540;
  __int128 *v541;
  uint64_t v542;
  char v543;
  char v544;
  uint64_t v545;
  char v546;
  uint64_t v547;
  uint64_t v548;
  char v549;
  char v550;
  WTF *v551;
  int v552;
  char v553;
  char v554;
  char v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  _BYTE v560[28];
  WebCore::Font *v561;
  __int128 v562;
  char v563;
  unint64_t v564;
  char *v565;
  uint64_t v566;
  __int128 v567;
  __int128 *v568;
  WebCore::LayoutIntegration::LineLayout *v569;
  char v570;
  __int128 v571;
  _QWORD *v572;
  _OWORD v573[2];
  uint64_t v574;

  v574 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(v4 + 48))
  {
    v125 = *(unsigned int *)(v4 + 52);
    if ((_DWORD)v125)
    {
      v338 = a3;
      v339 = 120 * v125;
      v340 = (_DWORD **)(*(_QWORD *)(v4 + 40) + 96);
      do
      {
        v341 = *v340;
        *v340 = 0;
        if (v341)
        {
          if (v341[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v341 + 8))(v341);
          else
            --v341[2];
        }
        v342 = (uint64_t)*(v340 - 12);
        if (v342)
        {
          v343 = *(_DWORD *)(v342 + 8);
          if (!v343)
          {
            __break(0xC471u);
            JUMPOUT(0x1942B4F1CLL);
          }
          *(_DWORD *)(v342 + 8) = v343 - 1;
        }
        v340 += 15;
        v339 -= 120;
      }
      while (v339);
      *(_DWORD *)(v4 + 52) = 0;
      a3 = v338;
    }
    v126 = *(WTF **)(v4 + 40);
    if (v126)
    {
      *(_QWORD *)(v4 + 40) = 0;
      *(_DWORD *)(v4 + 48) = 0;
      v127 = a3;
      WTF::fastFree(v126, a2);
      a3 = v127;
    }
  }
  *(_DWORD *)(v4 + 56) = 0;
  v5 = (_BYTE *)*((_QWORD *)this + 2);
  if ((v5[52] & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B2B48);
  }
  v528 = a3;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v5 + 1672))(v5))
  {
    v401 = (WebCore::RenderObject *)*((_QWORD *)this + 2);
    if ((*((_BYTE *)v401 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1942B5298);
    }
    if (WebCore::RenderObject::containingBlock(v401))
    {
      v402 = (WebCore::RenderObject *)*((_QWORD *)this + 2);
      if ((*((_BYTE *)v402 + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B5324);
      }
      v403 = (unsigned __int16)*((_DWORD *)WebCore::RenderObject::containingBlock(v402) + 31) >> 13;
      v487 = 2;
      switch(v403)
      {
        case 1:
        case 2:
          goto LABEL_709;
        case 3:
        case 5:
          LOBYTE(v403) = 3;
          goto LABEL_709;
        case 4:
          goto LABEL_710;
        default:
          LOBYTE(v403) = 0;
LABEL_709:
          v487 = v403;
LABEL_710:
          v404 = (v487 & 6) != 2;
          break;
      }
    }
    else
    {
      v404 = 1;
    }
    LOBYTE(v564) = v404;
    v405 = (WebCore::RenderObject *)*((_QWORD *)this + 2);
    if ((*((_BYTE *)v405 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1942B52B8);
    }
    if (WebCore::RenderObject::containingBlock(v405))
    {
      v406 = (WebCore::RenderObject *)*((_QWORD *)this + 2);
      if ((*((_BYTE *)v406 + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B5344);
      }
      v407 = (*((_BYTE *)WebCore::RenderObject::containingBlock(v406) + 123) & 4) == 0;
    }
    else
    {
      v407 = 1;
    }
    LOBYTE(v571) = v407;
    *(_BYTE *)(v4 + 60) = v407;
    v408 = *((_QWORD *)this + 2);
    if ((*(_BYTE *)(v408 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1942B52D8);
    }
    for (i = *(WTF **)(*(_QWORD *)(v408 + 216) + 8); i; i = (WTF *)*((_QWORD *)i + 2))
    {
      v410 = *(_QWORD *)i + 8;
      v532 = i;
      v533 = &v571;
      v559 = 0u;
      memset(v560, 0, 24);
      v557 = 0u;
      v558 = 0u;
      *(_QWORD *)&v567 = &v564;
      *((_QWORD *)&v567 + 1) = v410;
      v568 = &v571;
      v569 = this;
      v411 = WebCore::LayoutIntegration::LineLayout::preparePlacedFloats(void)::$_1::operator()((unint64_t)&v567);
      *(_QWORD *)&v557 = v411;
      *((_QWORD *)&v557 + 1) = v412;
      v558 = 0u;
      v559 = 0u;
      *(_OWORD *)v560 = 0u;
      v413 = (WebCore::ShapeOutsideInfo *)WebCore::RenderBox::shapeOutsideInfo(*(WebCore::RenderBox **)(**(_QWORD **)i + 8), v412);
      if (v413)
        v414 = WebCore::ShapeOutsideInfo::computedShape(v413);
      else
        v414 = 0;
      v415 = WebCore::LayoutIntegration::LineLayout::preparePlacedFloats(void)::$_0::operator()((_BYTE **)&v532);
      WebCore::Layout::PlacedFloats::Item::Item((uint64_t)v537, v415, (uint64_t)&v557, v411, v414);
      WebCore::Layout::PlacedFloats::append(v4 + 32, (unint64_t)v537);
      WebCore::Layout::PlacedFloats::Item::~Item((WebCore::Layout::PlacedFloats::Item *)v537);
    }
  }
  v8 = *((_QWORD *)this + 9);
  if (v8 && *(_BYTE *)(v8 + 40))
  {
    v529 = 0;
  }
  else
  {
    v9 = (WebCore::LayoutIntegration::InlineContent *)*((_QWORD *)this + 10);
    if (v9)
    {
      *((_QWORD *)this + 10) = 0;
      WebCore::LayoutIntegration::InlineContent::~InlineContent(v9);
      WTF::fastFree(v10, v11);
    }
    v529 = 1;
  }
  v12 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v12 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B2B68);
  }
  v13 = (__int128 *)*((_QWORD *)this + 4);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 496) + 8 * *(unsigned int *)(v14 + 508) - 8);
  if (*(_BYTE *)(v15 + 136))
  {
    v16 = *(_QWORD *)(v15 + 104);
    v7 = *(_QWORD *)(v15 + 112);
    v17 = *(WTF **)(v15 + 128);
    v18 = v16 >> 8;
    if (v17)
    {
      v19 = (*(_DWORD *)v17)++;
      if (v19)
      {
        *(_DWORD *)v17 = v19;
      }
      else
      {
        v118 = v7;
        WTF::fastFree(v17, v6);
        v7 = v118;
        v12 = *((_QWORD *)this + 2);
      }
    }
    v20 = 1;
  }
  else
  {
    v18 = 0;
    LOBYTE(v16) = 0;
    v20 = 0;
  }
  if ((*(_BYTE *)(v12 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B2B88);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v22 = *(unsigned int *)(v21 + 508);
  if ((_DWORD)v22 && (v89 = *(_QWORD *)(*(_QWORD *)(v21 + 496) + 8 * v22 - 8)) != 0 && *(_BYTE *)(v89 + 160))
  {
    v23 = *(_BYTE *)(v89 + 144) != 0;
    v90 = *(_QWORD *)(v89 + 152);
    if (v90 && *(_QWORD *)(v90 + 8) == v12)
      v23 = v23 | 2;
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_QWORD *)(v12 + 216);
  if (v24 && (v24 = *(_QWORD *)(v24 + 8)) != 0)
  {
    v120 = v7;
    v121 = 0;
    v122 = 0;
    v123 = 1;
    do
    {
      while (1)
      {
        v124 = *(_DWORD **)v24;
        if ((*(_BYTE *)(*(_QWORD *)v24 + 36) & 0x10) == 0)
          break;
        if (!*(_QWORD *)v124)
          break;
        v464 = *(_QWORD *)(*(_QWORD *)v124 + 8);
        if ((*(_QWORD *)(v464 + 96) & 0xF80000000000) != 0x100000000000
          || *(int *)(*(_QWORD *)(*(_QWORD *)(v464 + 88) + 40) + 52) < 1)
        {
          break;
        }
        v465 = v122 | (v121 << 8);
        if ((v123 & 1) != 0)
          v465 = 0;
        if ((*(_BYTE *)(v12 + 21) & 0x10) != 0)
        {
          v466 = v124[2];
          v467 = v124[4];
        }
        else
        {
          v466 = v124[3];
          v467 = v124[5];
        }
        v446 = __OFADD__(v466, v467);
        v468 = v466 + v467;
        v469 = (v466 >> 31) + 0x7FFFFFFF;
        if (v446)
          v468 = v469;
        v123 = 0;
        if (v465 <= v468)
          v444 = v468;
        else
          v444 = v465;
        v122 = v444;
        v121 = v444 >> 8;
        v24 = *(_QWORD *)(v24 + 16);
        if (!v24)
          goto LABEL_788;
      }
      v24 = *(_QWORD *)(v24 + 16);
    }
    while (v24);
    if ((v123 & 1) != 0)
    {
      v24 = 0;
      v25 = 0;
      goto LABEL_795;
    }
    v444 = v122 | (v121 << 8);
LABEL_788:
    if (!*((_BYTE *)this + 68))
      goto LABEL_152;
    v445 = *((_DWORD *)this + 15);
    v446 = __OFSUB__(v444, v445);
    v25 = v444 - v445;
    v24 = 0x100000000;
    if (v446)
      v24 = 0x100000000;
    if (v446)
      v25 = 0x7FFFFFFF;
LABEL_795:
    v7 = v120;
  }
  else
  {
    v25 = 0;
  }
  v26 = v13 + 2;
  v13 = &v557;
  v27 = v24 | v25;
  v28 = *(_QWORD *)(*(_QWORD *)(v21 + 496) + 8 * v22 - 8);
  v29 = *(_QWORD *)(v28 + 24);
  if (v29)
  {
    v525 = v7;
    v527 = *(_QWORD **)(v29 + 8);
    if (v527
      && (v448 = (unsigned __int16)*((_DWORD *)v527 + 31) >> 13, v448 == (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13))
    {
      v449 = v448 - 2;
      v450 = v449 >= 4;
      if (v449 >= 4)
        v451 = *(_QWORD *)(v28 + 84);
      else
        v451 = HIDWORD(*(_QWORD *)(v28 + 84));
      v523 = v451;
      if (v450)
        v452 = HIDWORD(*(_QWORD *)(v28 + 84));
      else
        v452 = *(_QWORD *)(v28 + 84);
      v521 = v452;
      if (v450)
        v453 = *(_QWORD *)(v28 + 56);
      else
        v453 = HIDWORD(*(_QWORD *)(v28 + 56));
      if (v450)
        v454 = HIDWORD(*(_QWORD *)(v28 + 56));
      else
        v454 = *(_QWORD *)(v28 + 56);
      v515 = v454;
      v519 = v453;
      v455 = *(_DWORD *)(WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(v527[14] + 32), v6) + 80);
      v457 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(v527 + 10), v456) * 64.0);
      if (v457 > -2147500000.0)
        v458 = (int)v457;
      else
        v458 = 0x80000000;
      if (v457 < 2147500000.0)
      {
        v459 = v457 <= -2147500000.0;
      }
      else
      {
        v458 = 0x7FFFFFFF;
        v459 = 1;
      }
      if (!v459)
        v458 = (int)v457;
      v512 = v458;
      v507 = (*(uint64_t (**)(_QWORD *))(*v527 + 1048))(v527);
      v460 = (*(uint64_t (**)(_QWORD *))(*v527 + 960))(v527);
      v462 = v507 + v460;
      if (__OFADD__(v507, v460))
        v462 = (v507 >> 31) + 0x7FFFFFFF;
      v508 = v462;
      if ((*(_BYTE *)v28 & 2) != 0)
      {
        v473 = *(_QWORD *)(v28 + 92);
        if (((*((_DWORD *)v527 + 31) >> 13) & 6u) - 2 <= 3)
          v463 = HIDWORD(v473);
        else
          v463 = *(_QWORD *)(v28 + 92);
        if (((*((_DWORD *)v527 + 31) >> 13) & 6u) - 2 <= 3)
          v474 = v473;
        else
          v474 = HIDWORD(v473);
        v499 = v474;
        v503 = v463 & 0xFFFFFF00;
        LOBYTE(v492) = 1;
        HIDWORD(v492) = WebCore::RenderBlockFlow::pageLogicalTopForOffset(v12, 0);
      }
      else
      {
        v499 = 0;
        v503 = 0;
        LOBYTE(v463) = 0;
        v492 = 0;
      }
      *(_QWORD *)v537 = v519 | (v515 << 32);
      *(_QWORD *)&v537[8] = v523 | (v521 << 32);
      *(_DWORD *)&v537[16] = v455;
      *(_DWORD *)&v537[20] = v512;
      *(_DWORD *)&v537[24] = v508;
      v12 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(v527[14] + 32), v461);
      ++*(_DWORD *)v12;
      v475 = v503 | v463 | (v499 << 32);
      BYTE8(v539) = v492;
      HIDWORD(v539) = HIDWORD(v492);
      v30 = v537[0];
      v573[0] = *(_OWORD *)&v537[1];
      *(_OWORD *)((char *)v573 + 11) = *(_OWORD *)&v537[12];
      v538 = 0;
      *(_QWORD *)&v539 = v475;
      v556 = v539;
      WebCore::Layout::BlockLayoutState::LineGrid::~LineGrid((WebCore::Layout::BlockLayoutState::LineGrid *)v537);
      v31 = 0;
    }
    else
    {
      v30 = 0;
      v31 = 1;
    }
    v7 = v525;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  *(_QWORD *)&v557 = v26;
  *((_QWORD *)&v557 + 1) = v16 | (v18 << 8);
  *(_QWORD *)&v558 = v7;
  BYTE8(v558) = v20;
  LOBYTE(v559) = v23;
  *(_QWORD *)((char *)&v559 + 4) = v27;
  v560[0] = 0;
  v563 = 0;
  v23 = (unint64_t)this + 72;
  if ((v31 & 1) == 0)
  {
    v560[0] = v30;
    *(_OWORD *)&v560[1] = v573[0];
    *(_OWORD *)&v560[12] = *(_OWORD *)((char *)v573 + 11);
    v83 = (*(_DWORD *)v12)++;
    v561 = (WebCore::Font *)v12;
    v562 = v556;
    v563 = 1;
    if (!v83)
      goto LABEL_153;
    *(_DWORD *)v12 = v83;
  }
  while (1)
  {
    v32 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
    if (v32 && (*(_WORD *)(v32 + 12) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942B2BC8);
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    *(_QWORD *)v537 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
    *(_QWORD *)&v537[8] = v12;
    v33 = v557;
    *(_QWORD *)&v537[16] = v32;
    ++*(_DWORD *)(v32 + 8);
    *(_QWORD *)&v537[24] = v12;
    v538 = v33;
    *(_QWORD *)&v539 = v537;
    *((_QWORD *)&v539 + 1) = v537;
    v540 = WebCore::Layout::LayoutState::inlineContentCache((WebCore::Layout::LayoutState *)v12, v32);
    v541 = &v557;
    v544 = 0;
    LOBYTE(v545) = 0;
    v546 = 0;
    v550 = 0;
    LOBYTE(v551) = 0;
    v553 = 0;
    v555 = 0;
    v542 = 0;
    v543 = 0;
    v547 = 0;
    v548 = 0;
    v549 = 0;
    if (*(__int16 *)(*(_QWORD *)(*(_QWORD *)v537 + 40) + 300) != -1)
    {
      v545 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)v537 + 40) + 300);
      v546 = 1;
    }
    v554 = 1;
    if (!*(_DWORD *)(v12 + 48))
      v555 = 1;
    v35 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    v548 = v35;
    if ((v529 & 1) != 0 || (v84 = *((_QWORD *)this + 10)) == 0)
    {
      if (*((_BYTE *)this + 68))
      {
        v567 = *((_OWORD *)this + 3);
        LODWORD(v568) = *((_DWORD *)this + 16);
        v36 = *((_QWORD *)this + 9);
        goto LABEL_31;
      }
      goto LABEL_152;
    }
    v36 = *(_QWORD *)v23;
    if (!*(_BYTE *)(*(_QWORD *)v23 + 40))
      goto LABEL_152;
    v85 = *(_QWORD *)(v36 + 8);
    if (v85)
      break;
    if (*((_BYTE *)this + 68))
      goto LABEL_150;
LABEL_152:
    __break(1u);
LABEL_153:
    WebCore::Font::~Font((WTF **)v12);
    WTF::fastFree(v116, v117);
  }
  if (v85 < *(unsigned int *)(v84 + 44))
  {
    if (*((_BYTE *)this + 68))
    {
      v86 = *(_QWORD *)((char *)this + 52);
      v87 = *(_DWORD *)(v36 + 32);
      v88 = *((_DWORD *)this + 16);
      LOBYTE(v567) = 2;
      *(_QWORD *)((char *)v13 + 148) = v86;
      HIDWORD(v567) = v87;
      LODWORD(v568) = v88;
      goto LABEL_31;
    }
    goto LABEL_152;
  }
  if (!*((_BYTE *)this + 68))
    goto LABEL_152;
LABEL_150:
  v567 = *((_OWORD *)this + 3);
  LODWORD(v568) = *((_DWORD *)this + 16);
LABEL_31:
  v38 = WebCore::Layout::InlineFormattingContext::layout((uint64_t *)v537, (uint64_t)&v567, v36, v34, (uint64_t)&v532);
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B2BA8);
  }
  v564 = *((_QWORD *)this + 2);
  v565 = (char *)this + 8;
  v39 = *((_QWORD *)this + 10);
  if (!v39)
  {
    v39 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v39 = 0;
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 14) = 0;
    ++*(_DWORD *)this;
    *(_QWORD *)(v39 + 24) = this;
    HIDWORD(v38) = 0;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(_OWORD *)(v39 + 64) = 0u;
    *(_BYTE *)(v39 + 80) = 0;
    v40 = (WebCore::LayoutIntegration::InlineContent *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v39;
    if (v40)
    {
      WebCore::LayoutIntegration::InlineContent::~InlineContent(v40);
      WTF::fastFree(v41, v42);
      v39 = *((_QWORD *)this + 10);
    }
  }
  v43 = *(_QWORD *)v23;
  v44 = *(WTF **)(v39 + 64);
  *(_QWORD *)(v39 + 64) = 0;
  if (v44)
  {
    v45 = *(uint64_t **)v44;
    if (*(_QWORD *)v44)
    {
      v46 = *((unsigned int *)v45 - 1);
      if ((_DWORD)v46)
      {
        v47 = *(uint64_t **)v44;
        do
        {
          v48 = *v47;
          if (*v47 != -1)
          {
            *v47 = 0;
            if (v48)
            {
              v49 = *(_DWORD *)(v48 + 8);
              if (!v49)
              {
                __break(0xC471u);
                JUMPOUT(0x1942B2A98);
              }
              *(_DWORD *)(v48 + 8) = v49 - 1;
            }
          }
          v47 += 2;
          --v46;
        }
        while (v46);
      }
      WTF::fastFree((WTF *)(v45 - 2), v37);
    }
    WTF::fastFree(v44, v37);
  }
  v50 = *(WTF **)(v39 + 72);
  *(_QWORD *)(v39 + 72) = 0;
  if (v50)
  {
    v51 = *(uint64_t **)v50;
    if (*(_QWORD *)v50)
    {
      v111 = *((unsigned int *)v51 - 1);
      if ((_DWORD)v111)
      {
        v112 = *(uint64_t **)v50;
        do
        {
          v113 = *v112;
          if (*v112 != -1)
          {
            v114 = (WTF *)v112[1];
            if (v114)
            {
              v112[1] = 0;
              *((_DWORD *)v112 + 4) = 0;
              WTF::fastFree(v114, v37);
              v113 = *v112;
            }
            *v112 = 0;
            if (v113)
            {
              v115 = *(_DWORD *)(v113 + 8);
              if (!v115)
              {
                __break(0xC471u);
                JUMPOUT(0x1942B2AB8);
              }
              *(_DWORD *)(v113 + 8) = v115 - 1;
            }
          }
          v112 += 3;
          --v111;
        }
        while (v111);
      }
      WTF::fastFree((WTF *)(v51 - 2), v37);
    }
    WTF::fastFree(v50, v37);
  }
  if (HIDWORD(v535))
  {
    v52 = (HIDWORD(v535) - 1);
    v53 = (HIDWORD(v535) - 2) | ((HIDWORD(v535) - 2) >> 1) | (((HIDWORD(v535) - 2) | ((HIDWORD(v535) - 2) >> 1)) >> 2);
    v54 = v53 | (v53 >> 4) | ((v53 | (v53 >> 4)) >> 8);
    v55 = (v54 | HIWORD(v54)) + 1;
    if (v55 > 0x400)
    {
      if (v55 <= 2 * v52)
      {
LABEL_52:
        LODWORD(v55) = 2 * v55;
        if (v55 <= 0x400)
          goto LABEL_53;
      }
      v56 = (double)v52;
      v57 = (double)v55;
      v58 = 0.416666667;
    }
    else
    {
      if (3 * v55 <= 4 * v52)
        goto LABEL_52;
LABEL_53:
      v56 = (double)v52;
      v57 = (double)v55;
      v58 = 0.604166667;
    }
    if (v57 * v58 <= v56)
      LODWORD(v55) = 2 * v55;
    if (v55 <= 8)
      v59 = 8;
    else
      v59 = v55;
    v60 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v59 + 16));
    *(_QWORD *)&v567 = v60 + 4;
    v60[2] = v59 - 1;
    v60[3] = v59;
    *v60 = 0;
    *(_DWORD *)(v567 - 12) = 0;
    v61 = HIDWORD(v535);
    if (!HIDWORD(v535))
    {
      __break(0xC471u);
      JUMPOUT(0x1942B5354);
    }
    *((_WORD *)v534 + 25) |= 0x20u;
    if (v61 != 1)
    {
      v62 = 0;
      v63 = 1;
      while (1)
      {
        v64 = v62;
        v65 = (char *)v534 + 80 * v63;
        v67 = *((_WORD *)v65 + 25);
        v66 = v65 + 50;
        v62 = v63;
        if ((v67 & 0xF) != 7)
          break;
LABEL_76:
        ++v63;
        v80 = HIDWORD(v535);
        if (v63 >= HIDWORD(v535))
          goto LABEL_98;
      }
      v68 = *((_QWORD *)v534 + 10 * v63);
      if ((*(_WORD *)(v68 + 12) & 0x20) != 0 && *((unsigned __int8 *)v534 + 80 * v63 + 49) != 254)
      {
        v119 = *(_QWORD *)(v68 + 112);
        if ((*(_BYTE *)(v119 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942B4B08);
        }
        *(_WORD *)(v119 + 118) |= 0x40u;
      }
      v69 = v567;
      if ((_QWORD)v567
        || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::expand((uint64_t *)&v567, 0), (v69 = v567) != 0))
      {
        v70 = *(_DWORD *)(v69 - 8);
      }
      else
      {
        v70 = 0;
      }
      v71 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
      v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
      v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
      v74 = v70 & ((v73 >> 31) ^ v73);
      v37 = (uint64_t *)(v69 + 16 * v74);
      v75 = *v37;
      if (*v37)
      {
        v81 = 0;
        v82 = 1;
        do
        {
          if (v75 == v68)
          {
            v37[1] = v63;
            goto LABEL_75;
          }
          if (v75 == -1)
            v81 = v37;
          v74 = (v74 + v82) & v70;
          v37 = (uint64_t *)(v69 + 16 * v74);
          v75 = *v37;
          ++v82;
        }
        while (*v37);
        if (v81)
        {
          *v81 = 0;
          v81[1] = 0;
          --*(_DWORD *)(v69 - 16);
          v37 = v81;
        }
      }
      *v37 = v68;
      v37[1] = v63;
      if ((_QWORD)v567)
        v76 = *(_DWORD *)(v567 - 12) + 1;
      else
        v76 = 1;
      *(_DWORD *)(v567 - 12) = v76;
      if ((_QWORD)v567)
        v77 = *(_DWORD *)(v567 - 12);
      else
        v77 = 0;
      v78 = (*(_DWORD *)(v567 - 16) + v77);
      v79 = *(unsigned int *)(v567 - 4);
      if (v79 > 0x400)
      {
        if (v79 > 2 * v78)
          goto LABEL_74;
      }
      else if (3 * v79 > 4 * v78)
      {
        goto LABEL_74;
      }
      WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::expand((uint64_t *)&v567, v37);
LABEL_74:
      *v66 |= 0x20u;
LABEL_75:
      v62 = v64;
      goto LABEL_76;
    }
    v62 = 0;
    v80 = 1;
LABEL_98:
    v91 = (_QWORD *)v567;
    if ((_QWORD)v567)
    {
      v92 = *(unsigned int *)(v567 - 4);
      v93 = (_QWORD *)(v567 + 16 * v92);
      if (*(_DWORD *)(v567 - 12))
      {
        v94 = (_QWORD *)v567;
        if ((_DWORD)v92)
        {
          v95 = 16 * v92;
          v94 = (_QWORD *)v567;
          while ((unint64_t)(*v94 + 1) <= 1)
          {
            v94 += 2;
            v95 -= 16;
            if (!v95)
            {
              v94 = v93;
              goto LABEL_105;
            }
          }
        }
        goto LABEL_105;
      }
      v94 = (_QWORD *)(v567 + 16 * v92);
    }
    else
    {
      v94 = 0;
      v92 = 0;
    }
    v93 = (_QWORD *)(v567 + 16 * v92);
    v23 = (unint64_t)this + 72;
LABEL_105:
    if ((_QWORD)v567)
      v91 = (_QWORD *)(v567 + 16 * *(unsigned int *)(v567 - 4));
    if (v91 != v94)
    {
      do
      {
        v96 = v94[1];
        if (v96 >= HIDWORD(v535))
        {
          __break(0xC471u);
          JUMPOUT(0x1942B534CLL);
        }
        *((_WORD *)v534 + 40 * v96 + 25) |= 0x40u;
        v97 = v94 + 2;
        v94 = v93;
        if (v97 != v93)
        {
          v94 = v97;
          while ((unint64_t)(*v94 + 1) <= 1)
          {
            v94 += 2;
            if (v94 == v93)
            {
              v94 = v93;
              break;
            }
          }
        }
      }
      while (v94 != v91);
      v80 = HIDWORD(v535);
    }
    if (v62 >= v80)
    {
      __break(0xC471u);
      JUMPOUT(0x1942B535CLL);
    }
    *((_WORD *)v534 + 40 * v62 + 25) |= 0x40u;
    if ((_QWORD)v567)
      WTF::fastFree((WTF *)(v567 - 16), v37);
  }
  if (v536)
  {
    LODWORD(v38) = 0;
    if (v43 && *(_BYTE *)(v43 + 40) && (v128 = *(unsigned int *)(v39 + 44), (_DWORD)v128))
    {
      v129 = *(_QWORD *)(v43 + 8);
      if (v128 <= v129 || (v130 = HIDWORD(v535), HIDWORD(v535)) && v129 > *((unsigned int *)v534 + 10))
      {
        v131 = 0.0;
        v132 = 0.0;
        v133 = 0.0;
        v23 = (unint64_t)this + 72;
      }
      else
      {
        v351 = HIDWORD(v533);
        if (v536 == 1)
          v352 = v128 - v129;
        else
          v352 = HIDWORD(v533);
        v353 = v352 + v129;
        v131 = 0.0;
        v132 = 0.0;
        v133 = 0.0;
        v23 = (unint64_t)this + 72;
        if (v352 + v129 <= v128)
        {
          v355 = (uint64_t *)(v39 + 32);
          v354 = *(_QWORD *)(v39 + 32);
          v356 = *(_QWORD *)(v354 + 152 * v129);
          if (v352)
          {
            v450 = v128 >= v129;
            v357 = v128 - v129;
            if (!v450)
              v357 = 0;
            if (v357 <= v352 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1942B5588);
            }
            v358 = 0;
            v359 = (uint64_t *)(v354 + 152 * v129 + 8);
            v360 = v352;
            do
            {
              v361 = *v359;
              v359 += 19;
              v358 += v361;
              --v360;
            }
            while (v360);
            v362 = (float *)(v354 + 152 * v129 + 92);
            v363 = 0.0;
            v364 = v352;
            v365 = 0.0;
            v132 = 0.0;
            v366 = 0.0;
            do
            {
              if (v357 <= v352 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1942B551CLL);
              }
              *(float *)&v38 = *(v362 - 1);
              if (*(float *)&v38 > 0.0 && *v362 > 0.0)
              {
                v367 = *(v362 - 3);
                if (v365 <= 0.0 || v363 <= 0.0)
                {
                  v132 = *(v362 - 2);
                  v363 = *v362;
                  v365 = *(v362 - 1);
                  v366 = *(v362 - 3);
                }
                else
                {
                  v368 = v365 + v366;
                  if (v367 < v366)
                    v366 = *(v362 - 3);
                  v369 = *(v362 - 2);
                  v370 = v363 + v132;
                  if (v369 < v132)
                    v132 = *(v362 - 2);
                  *(float *)&v38 = *(float *)&v38 + v367;
                  if (v368 >= *(float *)&v38)
                    *(float *)&v38 = v368;
                  v371 = *v362 + v369;
                  if (v370 >= v371)
                    v371 = v370;
                  v365 = *(float *)&v38 - v366;
                  v363 = v371 - v132;
                }
              }
              v362 += 38;
              --v364;
            }
            while (v364);
          }
          else
          {
            v358 = 0;
            v363 = 0.0;
            v365 = 0.0;
            v366 = 0.0;
          }
          if (v536 == 2)
          {
            v386 = v358;
            WebCore::InlineDisplay::Content::remove((uint64_t *)(v39 + 32), (WTF::StringImpl *)v129, v352, v356, v358);
            WebCore::InlineDisplay::Content::insert(v39 + 32, (uint64_t *)&v532, v129, v356);
            if (v130 != v386)
            {
              v387 = *(unsigned int *)(v39 + 44);
              if (v353 < v387)
              {
                v388 = (_QWORD *)(*v355 + 152 * v353);
                do
                {
                  *v388 += v130 - v386;
                  v388 += 19;
                  ++v353;
                }
                while (v353 < v387);
              }
            }
          }
          else if (v536 == 1)
          {
            WebCore::InlineDisplay::Content::remove((uint64_t *)(v39 + 32), (WTF::StringImpl *)v129, v352, v356, v358);
            WebCore::InlineDisplay::Content::append(v39 + 32, (uint64_t *)&v532);
          }
          WebCore::LayoutIntegration::InlineContentBuilder::adjustDisplayLines((WebCore::LayoutIntegration::InlineContentBuilder *)&v564, (WebCore::LayoutIntegration::InlineContent *)v39, v129, v38);
          if ((_DWORD)v351)
          {
            v375 = *(unsigned int *)(v39 + 44);
            v450 = v375 >= v129;
            v376 = v375 - v129;
            if (!v450)
              v376 = 0;
            v377 = v351 - 1;
            v378 = 152 * v129;
            v23 = (unint64_t)this + 72;
            do
            {
              if (v376 <= v377)
              {
                __break(0xC471u);
                JUMPOUT(0x1942B5524);
              }
              v379 = *v355;
              v380 = (float *)(*v355 + v378);
              v131 = v380[22];
              if (v131 <= 0.0 || (*(float *)&v38 = v380[23], *(float *)&v38 <= 0.0))
              {
                *(float *)&v38 = v363;
                v131 = v365;
                v133 = v366;
              }
              else
              {
                v133 = v380[20];
                if (v365 <= 0.0 || v363 <= 0.0)
                {
                  v132 = *(float *)(v379 + v378 + 84);
                }
                else
                {
                  v381 = v131 + v133;
                  if (v133 >= v366)
                    v133 = v366;
                  v382 = v379 + v378;
                  v383 = *(float *)(v382 + 84);
                  v384 = v363 + v132;
                  if (v383 < v132)
                    v132 = *(float *)(v382 + 84);
                  if ((float)(v365 + v366) >= v381)
                    v381 = v365 + v366;
                  v385 = *(float *)&v38 + v383;
                  if (v384 >= v385)
                    v385 = v384;
                  v131 = v381 - v133;
                  *(float *)&v38 = v385 - v132;
                }
              }
              v378 += 152;
              v363 = *(float *)&v38;
              v365 = v131;
              v366 = v133;
              --v351;
            }
            while (v351);
          }
          else
          {
            *(float *)&v38 = v363;
            v131 = v365;
            v133 = v366;
            v23 = (unint64_t)this + 72;
          }
        }
      }
    }
    else
    {
      v131 = 0.0;
      v132 = 0.0;
      v133 = 0.0;
    }
    *(_QWORD *)&v567 = __PAIR64__(LODWORD(v132), LODWORD(v133));
    *((_QWORD *)&v567 + 1) = __PAIR64__(LODWORD(v38), LODWORD(v131));
  }
  else
  {
    v567 = 0uLL;
    v98 = *(WTF **)(v39 + 32);
    v99 = *(_DWORD *)(v39 + 44);
    if (v99)
    {
      v416 = 152 * v99;
      v417 = (float32x2_t *)((char *)v98 + 80);
      do
      {
        WebCore::FloatRect::unite((float32x2_t *)&v567, v417);
        v417 += 19;
        v416 -= 152;
      }
      while (v416);
      v98 = *(WTF **)(v39 + 32);
      v23 = (unint64_t)this + 72;
    }
    if (v98)
    {
      *(_QWORD *)(v39 + 32) = 0;
      *(_DWORD *)(v39 + 40) = 0;
      WTF::fastFree(v98, v37);
    }
    *(_QWORD *)(v39 + 32) = v532;
    v100 = v533;
    v532 = 0;
    v533 = 0;
    *(_QWORD *)(v39 + 40) = v100;
    v101 = *(_DWORD *)(v39 + 60);
    if (v101)
      WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::destruct(*(WTF::StringImpl **)(v39 + 48), (WTF::StringImpl *)(*(_QWORD *)(v39 + 48) + 80 * v101));
    v102 = *(WTF **)(v39 + 48);
    if (v102)
    {
      *(_QWORD *)(v39 + 48) = 0;
      *(_DWORD *)(v39 + 56) = 0;
      WTF::fastFree(v102, v37);
    }
    *(_QWORD *)(v39 + 48) = v534;
    v103 = v535;
    v534 = 0;
    v535 = 0.0;
    *(double *)(v39 + 56) = v103;
    WebCore::LayoutIntegration::InlineContentBuilder::adjustDisplayLines((WebCore::LayoutIntegration::InlineContentBuilder *)&v564, (WebCore::LayoutIntegration::InlineContent *)v39, 0, v103);
    v104 = *(_DWORD *)(v39 + 44);
    if (v104)
    {
      v105 = (float32x2_t *)(*(_QWORD *)(v39 + 32) + 80);
      v106 = 152 * v104;
      do
      {
        v107 = v105[1];
        if (v107.f32[0] > 0.0 && v107.f32[1] > 0.0)
        {
          v108.i32[0] = DWORD2(v567);
          if (*((float *)&v567 + 2) <= 0.0 || *((float *)&v567 + 3) <= 0.0)
          {
            v567 = *(_OWORD *)v105->f32;
          }
          else
          {
            v108.i32[1] = HIDWORD(v567);
            v109 = (int8x8_t)vadd_f32(v108, *(float32x2_t *)&v567);
            v110 = (int8x8_t)vadd_f32(v107, *v105);
            *(int8x8_t *)&v567 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v567, *v105), (int8x8_t)*v105, *(int8x8_t *)&v567);
            *((float32x2_t *)&v567 + 1) = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v110, (float32x2_t)v109), v110, v109), *(float32x2_t *)&v567);
          }
        }
        v105 += 19;
        v106 -= 152;
      }
      while (v106);
    }
  }
  v134 = v567;
  v135 = *((_QWORD *)this + 10);
  *(_QWORD *)(v135 + 8) = v542;
  v136 = *(unsigned int *)(v135 + 60);
  if (*(_DWORD *)(v135 + 56) > v136)
  {
    v137 = *(WTF **)(v135 + 48);
    if ((_DWORD)v136)
    {
      if (v136 >= 0x3333334)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B5408);
      }
      v138 = 80 * v136;
      v139 = WTF::fastMalloc((WTF *)(80 * v136));
      *(_DWORD *)(v135 + 56) = (v138 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)(v135 + 48) = v139;
      if ((WTF *)v139 != v137)
      {
        v140 = v139;
        v141 = v137;
        do
        {
          v142 = *(_QWORD *)v141;
          *(_QWORD *)v140 = *(_QWORD *)v141;
          ++*(_DWORD *)(v142 + 8);
          v143 = *(_OWORD *)((char *)v141 + 8);
          v144 = *(_OWORD *)((char *)v141 + 24);
          *(_OWORD *)(v140 + 36) = *(_OWORD *)((char *)v141 + 36);
          *(_OWORD *)(v140 + 24) = v144;
          *(_OWORD *)(v140 + 8) = v143;
          v145 = *(_DWORD **)((char *)v141 + 52);
          if (v145)
            *v145 += 2;
          *(_QWORD *)(v140 + 52) = v145;
          v146 = *(_DWORD **)((char *)v141 + 60);
          if (v146)
            *v146 += 2;
          *(_QWORD *)(v140 + 60) = v146;
          v147 = *(_QWORD *)((char *)v141 + 68);
          *(_DWORD *)(v140 + 76) = *((_DWORD *)v141 + 19);
          *(_QWORD *)(v140 + 68) = v147;
          if ((*((_BYTE *)v141 + 51) & 1) != 0)
          {
            {
              WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
              qword_1EE2F92D8 = 0;
              qword_1EE2F92E0 = 0;
            }
            *(_QWORD *)&v567 = v141;
            WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v567);
          }
          v148 = *(WTF::StringImpl **)((char *)v141 + 60);
          *(_QWORD *)((char *)v141 + 60) = 0;
          if (v148)
          {
            if (*(_DWORD *)v148 == 2)
              WTF::StringImpl::destroy(v148, (WTF::StringImpl *)v37);
            else
              *(_DWORD *)v148 -= 2;
          }
          v149 = *(WTF::StringImpl **)((char *)v141 + 52);
          *(_QWORD *)((char *)v141 + 52) = 0;
          if (v149)
          {
            if (*(_DWORD *)v149 == 2)
              WTF::StringImpl::destroy(v149, (WTF::StringImpl *)v37);
            else
              *(_DWORD *)v149 -= 2;
          }
          v150 = *(_QWORD *)v141;
          *(_QWORD *)v141 = 0;
          if (v150)
          {
            v151 = *(_DWORD *)(v150 + 8);
            if (!v151)
            {
              __break(0xC471u);
              JUMPOUT(0x1942B3E88);
            }
            *(_DWORD *)(v150 + 8) = v151 - 1;
          }
          v141 = (WTF *)((char *)v141 + 80);
          v140 += 80;
          v138 -= 80;
        }
        while (v138);
      }
    }
    if (v137)
    {
      if (*(WTF **)(v135 + 48) == v137)
      {
        *(_QWORD *)(v135 + 48) = 0;
        *(_DWORD *)(v135 + 56) = 0;
      }
      WTF::fastFree(v137, v37);
    }
  }
  v152 = *(_DWORD *)(v135 + 44);
  if (*(_DWORD *)(v135 + 40) > v152)
  {
    v153 = *(WTF **)(v135 + 32);
    if (v152)
    {
      if (v152 >= 0x1AF286C)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B5400);
      }
      v154 = WTF::fastMalloc((WTF *)(152 * v152));
      *(_DWORD *)(v135 + 40) = 152 * v152 / 0x98;
      *(_QWORD *)(v135 + 32) = v154;
      if ((WTF *)v154 != v153)
      {
        v205 = 152 * v152;
        v206 = v153;
        do
        {
          v207 = *((_OWORD *)v206 + 1);
          *(_OWORD *)v154 = *(_OWORD *)v206;
          *(_OWORD *)(v154 + 16) = v207;
          v208 = *((_OWORD *)v206 + 2);
          v209 = *((_OWORD *)v206 + 3);
          v210 = *((_OWORD *)v206 + 5);
          *(_OWORD *)(v154 + 64) = *((_OWORD *)v206 + 4);
          *(_OWORD *)(v154 + 80) = v210;
          *(_OWORD *)(v154 + 32) = v208;
          *(_OWORD *)(v154 + 48) = v209;
          v211 = *((_OWORD *)v206 + 6);
          v212 = *((_OWORD *)v206 + 7);
          v213 = *((_OWORD *)v206 + 8);
          *(_QWORD *)(v154 + 144) = *((_QWORD *)v206 + 18);
          *(_OWORD *)(v154 + 112) = v212;
          *(_OWORD *)(v154 + 128) = v213;
          *(_OWORD *)(v154 + 96) = v211;
          v154 += 152;
          v206 = (WTF *)((char *)v206 + 152);
          v205 -= 152;
        }
        while (v205);
      }
    }
    if (v153)
    {
      if (*(WTF **)(v135 + 32) == v153)
      {
        *(_QWORD *)(v135 + 32) = 0;
        *(_DWORD *)(v135 + 40) = 0;
      }
      WTF::fastFree(v153, v37);
    }
  }
  v155 = *((_QWORD *)this + 5);
  v156 = *(unsigned int *)(v155 + 28);
  if (*(_DWORD *)(v155 + 24) > v156)
  {
    v157 = *(WTF **)(v155 + 16);
    if ((_DWORD)v156)
    {
      *(_DWORD *)(v155 + 24) = v156;
      *(_QWORD *)(v155 + 16) = WTF::fastRealloc(v157, (void *)(24 * v156));
    }
    else if (v157)
    {
      *(_QWORD *)(v155 + 16) = 0;
      *(_DWORD *)(v155 + 24) = 0;
      WTF::fastFree(v157, v37);
    }
  }
  v158 = *((_QWORD *)this + 4);
  v159 = *(unsigned int *)(v158 + 52);
  if (*(_DWORD *)(v158 + 48) > v159)
  {
    v333 = *(WTF **)(v158 + 40);
    if ((_DWORD)v159)
    {
      if (v159 >= 0x2222223)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B550CLL);
      }
      v334 = WTF::fastMalloc((WTF *)(120 * v159));
      *(_DWORD *)(v158 + 48) = 120 * (int)v159 / 0x78u;
      *(_QWORD *)(v158 + 40) = v334;
      if ((WTF *)v334 != v333)
        WTF::VectorMover<false,WebCore::Layout::PlacedFloats::Item>::move((uint64_t)v333, (uint64_t)v333 + 120 * v159, v334);
    }
    if (v333)
    {
      if (*(WTF **)(v158 + 40) == v333)
      {
        *(_QWORD *)(v158 + 40) = 0;
        *(_DWORD *)(v158 + 48) = 0;
      }
      WTF::fastFree(v333, v37);
      v23 = (unint64_t)this + 72;
    }
  }
  v160 = *((_QWORD *)this + 10);
  v161 = *(float *)&v134 * 64.0;
  v162 = v161 >= 2147483650.0 || v161 <= -2147483650.0;
  if (v162)
  {
    if (v161 > -2147483650.0)
      v480 = (int)v161;
    else
      v480 = 0x80000000;
    if (v161 < 2147483650.0)
      v163 = v480;
    else
      v163 = 0x7FFFFFFF;
  }
  else
  {
    v163 = (int)v161;
  }
  v526 = v163;
  v164 = *((float *)&v134 + 1) * 64.0;
  if (v164 >= 2147483650.0 || v164 <= -2147483650.0)
  {
    if (v164 > -2147483650.0)
      v481 = (int)v164;
    else
      v481 = 0x80000000;
    if (v164 < 2147483650.0)
      v166 = v481;
    else
      v166 = 0x7FFFFFFF;
  }
  else
  {
    v166 = (int)v164;
  }
  v524 = v166;
  v167 = (float)(*((float *)&v134 + 2) + 0.0) * 64.0;
  if (v167 >= 2147483650.0 || v167 <= -2147483650.0)
  {
    if (v167 > -2147483650.0)
      v482 = (int)v167;
    else
      v482 = 0x80000000;
    if (v167 < 2147483650.0)
      v169 = v482;
    else
      v169 = 0x7FFFFFFF;
  }
  else
  {
    v169 = (int)v167;
  }
  v522 = v169;
  v170 = (float)(*((float *)&v134 + 3)
               + (float)((float)(*(float *)(v160 + 16) + *(float *)(v160 + 8)) + *(float *)(v160 + 12)))
       * 64.0;
  if (v170 >= 2147483650.0 || v170 <= -2147483650.0)
  {
    if (v170 >= 2147483650.0)
    {
      v483 = 0x7FFFFFFF;
    }
    else if (v170 <= -2147483650.0)
    {
      v483 = 0x80000000;
    }
    else
    {
      v483 = (int)v170;
    }
    v520 = v483;
    v23 = (unint64_t)this + 72;
  }
  else
  {
    v520 = (int)v170;
  }
  v172 = *(WebCore::Layout::InlineDamage **)v23;
  *(_QWORD *)v23 = 0;
  if (v172)
  {
    WebCore::Layout::InlineDamage::~InlineDamage(v172, (void *)v160);
    bmalloc::api::isoDeallocate(v173, v174);
    v160 = *((_QWORD *)this + 10);
    if (!v160)
    {
      v530 = 0;
      v531 = 0;
      goto LABEL_446;
    }
  }
  v175 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v175 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B4004);
  }
  v176 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v175 + 24) + 8) + 40) + 8)
                               + 1944)
                   + 248);
  if ((**(_BYTE **)(*(_QWORD *)(v176 + 496) + 8 * *(unsigned int *)(v176 + 508) - 8) & 2) != 0)
  {
    WebCore::LayoutIntegration::computeAdjustmentsForPagination((uint64_t)&v567, (unsigned int *)v160, *((_QWORD *)this + 4) + 32, v529, (uint64_t)&v557, v175);
    WebCore::LayoutIntegration::adjustLinePositionsForPagination(*((_QWORD *)this + 10), (uint64_t)&v567, v418, v419);
    if (v570)
    {
      v420 = WebCore::LayoutIntegration::LineLayout::ensureLineDamage(this);
      v421 = *((_QWORD *)this + 5) + 16;
      v422 = *((_QWORD *)this + 10) + 32;
      v564 = (unint64_t)v420;
      v565 = (char *)v421;
      v566 = v422;
      if ((WebCore::Layout::InlineInvalidation::restartForPagination((uint64_t)&v564, (uint64_t)v568, (int)v569) & 1) == 0)
        std::unique_ptr<WebCore::Layout::InlineDamage>::operator=[abi:sn180100]((WebCore::Layout::InlineDamage **)this + 9, v423);
    }
    WTF::Vector<WebCore::LayoutIntegration::LineAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v530, (uint64_t)&v567);
    if ((_QWORD)v567)
      WTF::fastFree((WTF *)v567, v424);
    v160 = *((_QWORD *)this + 10);
    v23 = (unint64_t)this + 72;
    if (!v160)
      goto LABEL_446;
  }
  else
  {
    v530 = 0;
    v531 = 0;
  }
  v12 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v12 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B4024);
  }
  v177 = *(unsigned __int8 *)(*((_QWORD *)this + 4) + 60);
  v23 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
  v178 = (v23 - 1);
  v476 = 2;
  switch((unsigned __int16)*(_DWORD *)(v12 + 124) >> 13)
  {
    case 1:
    case 2:
      v476 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
      break;
    case 3:
    case 5:
      v476 = 3;
      break;
    case 4:
      break;
    default:
      v476 = 0;
      break;
  }
  v179 = v476 & 6;
  v180 = *(_DWORD *)(v160 + 60);
  if (v180)
  {
    v181 = *(_QWORD *)(v160 + 48);
    v182 = v181 + 80 * v180;
    do
    {
      v183 = *(_WORD *)(v181 + 50);
      if ((v183 & 0xE) == 6 || (v183 & 0xE) == 0)
        goto LABEL_261;
      v237 = *(_QWORD *)v181;
      v238 = *(_QWORD *)(*(_QWORD *)v181 + 32);
      v239 = v238 & 0x1F;
      if (v239 > 0x19)
        goto LABEL_489;
      if (((1 << v239) & 0x2128000) != 0)
        goto LABEL_377;
      if (((1 << v239) & 0x1400001) == 0)
      {
LABEL_489:
        v288 = v238 & 0x1F;
        if (v288 != 5 && v288 != 3)
          goto LABEL_261;
        v162 = v239 > 0x18;
        v290 = (1 << v239) & 0x1400001;
        if (v162 || v290 == 0)
        {
LABEL_377:
          v160 = *(_QWORD *)(v237 + 112);
          if ((*(_BYTE *)(v160 + 45) & 4) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942B4368);
          }
          v240 = *(_QWORD *)(v160 + 144);
          if (v240)
          {
            v241 = *(_QWORD *)(v240 + 24);
            if (((((v241 & 0x200000000) == 0) ^ ((v183 & 0x80) >> 7)) & 1) == 0)
            {
              v439 = v241 & 0xFFFFFFFDFFFFFFFFLL;
              if ((v183 & 0x80) != 0)
                v440 = 0x200040000;
              else
                v440 = 0x40000;
              *(_QWORD *)(v240 + 24) = v439 | v440;
            }
          }
          v242 = *(float *)(v181 + 8) * 64.0;
          v243 = v242 >= 2147483650.0 || v242 <= -2147483650.0;
          v244 = (int)v242;
          if (v243)
          {
            if (v242 <= -2147483650.0)
              v244 = 0x80000000;
            if (v242 >= 2147483650.0)
              v244 = 0x7FFFFFFF;
          }
          v245 = *(float *)(v181 + 12) * 64.0;
          v246 = v245 >= 2147483650.0 || v245 <= -2147483650.0;
          v247 = (int)v245;
          if (v246)
          {
            v248 = v247 << 32;
            if (v245 <= -2147483650.0)
              v248 = 0x8000000000000000;
            if (v245 >= 2147483650.0)
              v248 = 0x7FFFFFFF00000000;
          }
          else
          {
            v248 = v247 << 32;
          }
          *(_QWORD *)(v160 + 152) = v248 | v244;
          if ((*(_QWORD *)(v237 + 32) & 0x1FLL) == 0x19
            && (v179 == 2 || (*(_DWORD *)(*(_QWORD *)(v237 + 40) + 236) & 0x18) != 0x10))
          {
            v249 = *((_QWORD *)this + 3);
            if (v249)
              v249 = *(_QWORD *)(v249 + 8);
            v505 = (WebCore::RenderBox *)v160;
            if (*(_DWORD *)(v249 + 8))
            {
              v511 = v23;
              v250 = v178;
              v251 = v177;
              v372 = *(_QWORD *)(v249 + 40);
              v497 = *(_DWORD *)(v372 - 8);
              v502 = v237;
              v373 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v237) & v497;
              if (*(_QWORD *)(v372 + 16 * v373) != v502)
              {
                v374 = 1;
                do
                  v373 = ((_DWORD)v373 + v374++) & v497;
                while (*(_QWORD *)(v372 + 16 * v373) != v502);
              }
              v252 = (_DWORD **)(v372 + 16 * v373 + 8);
              v23 = v511;
            }
            else
            {
              v250 = v178;
              v251 = v177;
              v252 = (_DWORD **)(v237 + 104);
            }
            WebCore::Layout::BoxGeometry::marginBoxRect(*v252);
            v253 = v505;
            v254 = (_DWORD)v160 == *((_DWORD *)v505 + 40) && HIDWORD(v160) == *((_DWORD *)v505 + 41);
            v177 = v251;
            v178 = v250;
            if (!v254)
            {
              v517 = v250;
              *((_QWORD *)v505 + 20) = v160;
              *(float *)&v567 = (float)(int)v160 * 0.015625;
              WORD2(v567) = 4;
              BYTE6(v567) = 1;
              v255 = (_QWORD *)WebCore::gOverridingLogicalWidthLengthMap;
              if (!WebCore::gOverridingLogicalWidthLengthMap)
              {
                v255 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                v253 = v505;
                *v255 = 0;
                v255[1] = 0;
                WebCore::gOverridingLogicalWidthLengthMap = (uint64_t)v255;
              }
              v256 = v253;
              WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::Length const&>((uint64_t)v255, v253, (unsigned __int8 *)&v567);
              if (BYTE4(v567) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v567);
                v256 = v505;
              }
              v257 = *((_DWORD *)v256 + 5);
              if ((v257 & 8) != 0)
              {
                v258 = *((_DWORD *)v256 + 5);
                v177 = v251;
                v178 = v517;
              }
              else
              {
                LOBYTE(v258) = v257 | 8;
                *((_DWORD *)v256 + 5) = v257 | 8;
                v177 = v251;
                v178 = v517;
                if ((v257 & 0x8000) != 0)
                {
                  if ((*((_BYTE *)v256 + 45) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942B4C8CLL);
                  }
                  v335 = *((_QWORD *)v256 + 18);
                  if (v335)
                  {
                    v336 = *(_DWORD *)(v335 + 8) + 1;
                    *(_DWORD *)(v335 + 8) = v336;
                  }
                  else
                  {
                    v336 = MEMORY[8];
                  }
                  *(_QWORD *)(v335 + 24) = *(_QWORD *)(v335 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                  if (!v336)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942B4CB8);
                  }
                  *(_DWORD *)(v335 + 8) = v336 - 1;
                  v258 = *((_DWORD *)v256 + 5);
                }
              }
              if ((v258 & 0xF8) != 0)
              {
                v259 = *((_QWORD *)v256 + 4);
                if (v259
                  && (v260 = *(_QWORD *)(v259 + 8)) != 0
                  && (*(_BYTE *)(*(_QWORD *)(v260 + 104) + 239) & 0x18) != 0
                  && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v256 + 3) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 479))
                {
                  WebCore::RenderElement::clearNeedsLayoutForSkippedContent(v256);
                }
                else
                {
                  (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)v256 + 688))(v256);
                }
                v256 = v505;
                v177 = v251;
                v178 = v517;
              }
              if (WebCore::gOverridingLogicalWidthLengthMap)
              {
                WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingLogicalWidthLengthMap, v256);
                v178 = v517;
                v177 = v251;
              }
            }
          }
          goto LABEL_261;
        }
      }
      v261 = *(_WORD *)(v237 + 12) & 0xF;
      v162 = v261 > 0xB;
      v262 = (1 << v261) & 0x884;
      if (!v162 && v262 != 0)
        goto LABEL_377;
LABEL_261:
      v181 += 80;
    }
    while (v181 != v182);
  }
  v572 = 0;
  if (HIDWORD(v531))
  {
    v425 = *((_QWORD *)this + 4);
    v426 = *(unsigned int *)(v425 + 52);
    if ((_DWORD)v426)
    {
      v427 = 120 * v426;
      v428 = (_BYTE *)(*(_QWORD *)(v425 + 40) + 112);
      do
      {
        v429 = v178;
        v430 = v177;
        v431 = *((_QWORD *)v428 - 14);
        if (v431 && *v428)
        {
          if (HIDWORD(v531))
          {
            v432 = *((_QWORD *)v428 - 1);
            if (v179 == 2)
            {
              if (v432 >= HIDWORD(v531))
              {
                __break(0xC471u);
                JUMPOUT(0x1942B5598);
              }
              v433 = *((unsigned int *)v530 + 2 * v432);
            }
            else
            {
              if (v432 >= HIDWORD(v531))
              {
                __break(0xC471u);
                JUMPOUT(0x1942B5590);
              }
              v433 = (unint64_t)*((unsigned int *)v530 + 2 * v432) << 32;
            }
          }
          else
          {
            v433 = 0;
          }
          v564 = v433;
          *(_QWORD *)&v571 = v431;
          ++*(_DWORD *)(v431 + 8);
          WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::add<WebCore::LayoutSize&>((uint64_t)&v567, (uint64_t *)&v572, (uint64_t *)&v571, (uint64_t *)&v564);
          if ((_QWORD)v571)
          {
            v434 = *(_DWORD *)(v571 + 8);
            if (!v434)
            {
              __break(0xC471u);
              JUMPOUT(0x1942B5188);
            }
            *(_DWORD *)(v571 + 8) = v434 - 1;
          }
        }
        v428 += 120;
        v427 -= 120;
        v177 = v430;
        v178 = v429;
      }
      while (v427);
    }
  }
  v185 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v185 && (*(_WORD *)(v185 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942B4080);
  }
  v186 = *(_QWORD *)(v185 + 120);
  if (v186)
  {
    v187 = &jpt_1942B3B5C;
    v188 = &jpt_1942B5448;
    while (1)
    {
      v13 = (__int128 *)v186;
      v189 = *(_QWORD *)(v186 + 32);
      if ((v189 & 0xE000000) == 0 && (v189 & 0x180000) != 0x100000 || (*((_BYTE *)v13 + 12) & 0xFu) - 9 < 2)
        goto LABEL_269;
      v160 = *((_QWORD *)v13 + 14);
      if ((*(_BYTE *)(v160 + 45) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B4114);
      }
      v214 = *((_QWORD *)this + 3);
      if (v214)
        v214 = *(_QWORD *)(v214 + 8);
      v516 = v178;
      v510 = v23;
      if (*(_DWORD *)(v214 + 8))
      {
        v344 = *((_QWORD *)v13 + 14);
        v345 = v177;
        v346 = *(_QWORD *)(v214 + 40);
        if (!v346)
          goto LABEL_605;
        v347 = *(_DWORD *)(v346 - 8);
        v348 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)v13) & v347;
        v349 = *(__int128 **)(v346 + 16 * v348);
        if (v349 != v13)
        {
          v350 = 1;
          while (v349)
          {
            v348 = ((_DWORD)v348 + v350) & v347;
            v349 = *(__int128 **)(v346 + 16 * v348);
            ++v350;
            if (v349 == v13)
              goto LABEL_604;
          }
LABEL_605:
          v216 = 0;
          v177 = v345;
          v178 = v516;
          v187 = &jpt_1942B3B5C;
          v188 = &jpt_1942B5448;
          v160 = v344;
          v23 = v510;
          goto LABEL_343;
        }
LABEL_604:
        v215 = (unsigned int **)(v346 + 16 * v348 + 8);
        v177 = v345;
        v178 = v516;
        v187 = &jpt_1942B3B5C;
        v188 = &jpt_1942B5448;
        v160 = v344;
        v23 = v510;
      }
      else
      {
        v215 = (unsigned int **)v13 + 13;
      }
      v216 = *v215;
LABEL_343:
      v217 = v13[2] & 0x180000;
      v218 = v217 == 0x100000 || (v13[2] & 0xE000000) == 0;
      v513 = v177;
      if (v218)
      {
        if (v217 != 0x100000)
          goto LABEL_269;
        v219 = v188;
        v220 = v160;
        v221 = *(_QWORD *)(v160 + 144);
        v222 = WebCore::Layout::BoxGeometry::borderBoxRect((uint64_t)v216);
        v223 = v222;
        v224 = *(_DWORD *)(v221 + 148);
        v225 = v222 - v224;
        if (__OFSUB__((_DWORD)v222, v224))
          v225 = (v222 >> 31) + 0x7FFFFFFF;
        v226 = HIDWORD(v222);
        v227 = *(_DWORD *)(v221 + 152);
        v228 = HIDWORD(v222) - v227;
        v177 = v513;
        v178 = v516;
        v188 = v219;
        v160 = v220;
        if (__OFSUB__(HIDWORD(v222), v227))
          v228 = (HIDWORD(v222) >> 31) + 0x7FFFFFFF;
        v229 = *(_BYTE **)(*((_QWORD *)v13 + 3) + 24);
        if ((*(_BYTE *)(v220 + 21) & 0x10) != 0)
        {
          if (v229[12])
          {
            v231 = 0;
            v177 = v513;
            v178 = v516;
            v188 = v219;
            v160 = v220;
          }
          else
          {
            v230 = v229 + 28;
            v177 = v513;
            v178 = v516;
            v188 = v219;
            v160 = v220;
LABEL_356:
            v231 = *v230 == 0;
          }
        }
        else
        {
          if (!v229[36])
          {
            v230 = v229 + 20;
            goto LABEL_356;
          }
          v231 = 0;
        }
        v232 = (*((_DWORD *)v13 + 8) >> 5) & 0x1F;
        if (v232 <= 0x19 && ((1 << v232) & 0x3528029) != 0)
        {
          v233 = v222;
          if ((*(_BYTE *)(v12 + 23) & 0x10) != 0)
          {
            v509 = (WebCore::RenderBox *)HIDWORD(v222);
            v504 = v225;
            v500 = v228;
            v477 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 648))(v12, v160);
            v228 = v500;
            v225 = v504;
            v160 = v220;
            v188 = v219;
            v178 = v516;
            v177 = v513;
            v226 = HIDWORD(v223);
            v233 = v223;
            if (v477)
            {
              started = WebCore::RenderBlock::startOffsetForContent((WebCore::RenderBlock *)v12);
              v478 = WebCore::RenderBlock::startOffsetForContent((_BYTE *)v12, (int)v509);
              v479 = started - v478;
              if (__OFSUB__(started, v478))
                v479 = (started >> 31) + 0x7FFFFFFF;
              v233 = v223 + v479;
              if (__OFADD__((_DWORD)v223, v479))
                v233 = (v223 >> 31) + 0x7FFFFFFF;
              LODWORD(v226) = (_DWORD)v509;
              v177 = v513;
              v178 = v516;
              v188 = v219;
              v160 = v220;
              v225 = v504;
              v228 = v500;
            }
          }
          *(_DWORD *)(*(_QWORD *)(v160 + 144) + 148) = v233;
          if (v231)
          {
            v329 = *(_DWORD *)(v160 + 152);
            v330 = v329 + v225;
            if (__OFADD__(v329, v225))
              v330 = (v329 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v160 + 152) = v330;
            v331 = *(_DWORD *)(v160 + 156);
            v332 = v331 + v228;
            if (__OFADD__(v331, v228))
              v332 = (v331 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v160 + 156) = v332;
          }
        }
        *(_DWORD *)(v221 + 148) = v223;
        *(_DWORD *)(v221 + 152) = v226;
        v187 = &jpt_1942B3B5C;
        v23 = v510;
        if (v225 | v228)
        {
          if (v231)
          {
            v234 = *(_DWORD *)(v160 + 20);
            if ((v234 & 0x20) == 0)
              *(_DWORD *)(v160 + 20) = v234 | 0x20;
          }
        }
        goto LABEL_269;
      }
      v292 = (WebCore::RenderBlockFlow *)*((_QWORD *)this + 2);
      if ((*((_BYTE *)v292 + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B4AE8);
      }
      v506 = (WebCore::RenderBox *)v160;
      inserted = WebCore::RenderBlockFlow::insertFloatingObjectForIFC(v292, (WebCore::RenderBox *)v160);
      if (!*((_BYTE *)this + 68))
        goto LABEL_152;
      v294 = *((_DWORD *)this + 16);
      v295 = *(_QWORD *)((char *)this + 52);
      v296 = v294 + HIDWORD(v295);
      v297 = v516;
      if (__OFADD__(v294, HIDWORD(v295)))
        v296 = (v294 >> 31) + 0x7FFFFFFF;
      v496 = v296 + v295;
      if (__OFADD__(v296, (_DWORD)v295))
        v496 = (v296 >> 31) + 0x7FFFFFFF;
      v501 = inserted;
      v484 = 0;
      v485 = 2;
      v486 = v23;
      v298 = v23;
      switch((int)v516)
      {
        case 0:
LABEL_923:
          v298 = 1;
LABEL_511:
          v484 = v486;
          goto LABEL_512;
        case 1:
LABEL_512:
          v485 = v298;
          goto LABEL_513;
        case 2:
        case 4:
          v486 = 1;
          v297 = v516;
          goto LABEL_509;
        case 3:
          goto LABEL_513;
        default:
LABEL_509:
          v298 = 0;
          v485 = 2;
          v484 = v486;
          switch(v297)
          {
            case 0:
              goto LABEL_923;
            case 1:
              goto LABEL_512;
            case 2:
            case 4:
              v298 = 3;
              goto LABEL_511;
            case 3:
              break;
            default:
              goto LABEL_511;
          }
LABEL_513:
          v299 = v485 & 6;
          v300 = WebCore::Layout::BoxGeometry::borderBoxRect((uint64_t)v216);
          v302 = v216[4];
          v303 = v216[5];
          LODWORD(v567) = v216[4];
          DWORD1(v567) = v303;
          v304 = v216[6];
          LODWORD(v305) = v216[7];
          v564 = __PAIR64__(v305, v304);
          if (v299 == 2)
          {
            v389 = v567;
            if (v484)
              v390 = v305;
            else
              v390 = v304;
            if (v484)
              v305 = v304;
            else
              v305 = v305;
            *(_QWORD *)&v567 = v305 | (v390 << 32);
            v564 = v389;
            v177 = v513;
            v188 = &jpt_1942B5448;
            v306 = (uint64_t)v506;
            if (v513)
            {
LABEL_515:
              v307 = 0;
              v308 = v300;
              v178 = v516;
              goto LABEL_516;
            }
            v303 = HIDWORD(v389);
            v391 = &v564;
          }
          else
          {
            v177 = v513;
            v188 = &jpt_1942B5448;
            v306 = (uint64_t)v506;
            if (v513)
              goto LABEL_515;
            v391 = (unint64_t *)&v567;
            v389 = v302;
          }
          *v391 = v303 | (v389 << 32);
          v400 = v300 + v301;
          if (__OFADD__((_DWORD)v300, (_DWORD)v301))
            v400 = (v300 >> 31) + 0x7FFFFFFF;
          v308 = v496 - v400;
          if (__OFSUB__(v496, v400))
            v308 = (v496 >> 31) + 0x7FFFFFFF;
          v307 = 1;
          v177 = 0;
          v178 = v516;
          v188 = &jpt_1942B5448;
          v306 = (uint64_t)v506;
LABEL_516:
          v309 = HIDWORD(v300);
          if (v299 == 2)
          {
            v392 = HIDWORD(v300) - v304;
            if (__OFSUB__(HIDWORD(v300), v304))
              v392 = (HIDWORD(v300) >> 31) + 0x7FFFFFFF;
            v393 = v308 - v302;
            if (__OFSUB__(v308, (_DWORD)v302))
              v393 = (v308 >> 31) + 0x7FFFFFFF;
            v310 = v567;
            v308 = v392 + v567;
            v394 = __OFADD__(v392, (_DWORD)v567);
            if ((v307 & 1) != 0)
            {
              if (v394)
                v308 = (v392 >> 31) + 0x7FFFFFFF;
              v395 = HIDWORD(v564);
            }
            else
            {
              if (v394)
                v308 = (v392 >> 31) + 0x7FFFFFFF;
              v395 = v564;
            }
            v446 = __OFADD__(v393, v395);
            v441 = v393 + v395;
            if (v446)
              v441 = (v393 >> 31) + 0x7FFFFFFF;
            v309 = v441;
            v301 = __ROR8__(v301, 32);
            v177 = v513;
            v178 = v516;
            v188 = &jpt_1942B5448;
            v306 = (uint64_t)v506;
          }
          else
          {
            v310 = v567;
          }
          if (v310 == 0x80000000)
            v311 = 0x7FFFFFFF;
          else
            v311 = -v310;
          if ((_DWORD)v564 == 0x80000000)
            v312 = 0x7FFFFFFF;
          else
            v312 = -(int)v564;
          v313 = v308 + v311;
          if (__OFADD__(v308, v311))
            v313 = (v308 >> 31) + 0x7FFFFFFF;
          v314 = v309 + v312;
          if (__OFADD__((_DWORD)v309, v312))
            v314 = (v309 >> 31) + 0x7FFFFFFF;
          v315 = v310 + DWORD1(v567);
          if (__OFADD__(v310, DWORD1(v567)))
            v315 = (v310 >> 31) + 0x7FFFFFFF;
          v316 = v564 + HIDWORD(v564);
          if (__OFADD__((_DWORD)v564, HIDWORD(v564)))
            v316 = (v564 >> 31) + 0x7FFFFFFF;
          v446 = __OFADD__((_DWORD)v301, v315);
          v317 = v301 + v315;
          if (v446)
            v317 = (v301 >> 31) + 0x7FFFFFFF;
          v318 = HIDWORD(v301);
          v446 = __OFADD__(HIDWORD(v301), v316);
          v160 = HIDWORD(v301) + v316;
          if (v446)
            v160 = (v318 >> 31) + 0x7FFFFFFF;
          v319 = v308 | (v309 << 32);
          v320 = *((_DWORD *)v13 + 2);
          *((_DWORD *)v13 + 2) = v320 + 1;
          v321 = (uint64_t)v572;
          if (!v572)
          {
            if (v320 != -1)
            {
LABEL_538:
              *((_DWORD *)v13 + 2) = v320;
              v322 = 1;
              goto LABEL_539;
            }
LABEL_938:
            __break(0xC471u);
            JUMPOUT(0x1942B5614);
          }
          v489 = v160;
          v490 = v317;
          v493 = v313;
          v488 = v308;
          v498 = *((_DWORD *)v572 - 2);
          v396 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)v13);
          for (j = 0; ; v396 = j + v398)
          {
            v398 = v396 & v498;
            v399 = *(__int128 **)(v321 + 16 * v398);
            if (v399 != (__int128 *)-1)
            {
              if (!v399)
              {
                v177 = v513;
                v178 = v516;
                v188 = &jpt_1942B5448;
                v306 = (uint64_t)v506;
                v313 = v493;
                v160 = v489;
                v317 = v490;
                if (v320 != -1)
                  goto LABEL_538;
                goto LABEL_938;
              }
              if (v399 == v13)
                break;
            }
            ++j;
          }
          v442 = *(_QWORD *)(v321 + 16 * v398 + 8);
          if (v320 == -1)
            goto LABEL_938;
          *((_DWORD *)v13 + 2) = v320;
          if (__OFADD__(v493, (_DWORD)v442))
            v494 = (v493 >> 31) + 0x7FFFFFFF;
          else
            v494 = v493 + v442;
          v443 = HIDWORD(v442);
          if (__OFADD__(v314, HIDWORD(v442)))
            v491 = (v314 >> 31) + 0x7FFFFFFF;
          else
            v491 = v314 + HIDWORD(v442);
          v322 = 0;
          v446 = __OFADD__(v488, (_DWORD)v442);
          LODWORD(v442) = v488 + v442;
          if (v446)
            v442 = (v488 >> 31) + 0x7FFFFFFF;
          else
            v442 = v442;
          v446 = __OFADD__((_DWORD)v309, (_DWORD)v443);
          LODWORD(v443) = v309 + v443;
          if (v446)
            v443 = (v309 >> 31) + 0x7FFFFFFF;
          else
            v443 = v443;
          v319 = v442 | (v443 << 32);
          v177 = v513;
          v178 = v516;
          v188 = &jpt_1942B5448;
          v306 = (uint64_t)v506;
          v314 = v491;
          v313 = v494;
          v160 = v489;
          v317 = v490;
LABEL_539:
          *((_DWORD *)v501 + 2) = v313;
          *((_DWORD *)v501 + 3) = v314;
          *((_DWORD *)v501 + 4) = v317;
          *((_DWORD *)v501 + 5) = v160;
          LODWORD(v323) = v319 - v313;
          if (__OFSUB__((_DWORD)v319, v313))
            v323 = (v319 >> 31) + 0x7FFFFFFF;
          else
            v323 = v323;
          LODWORD(v324) = (HIDWORD(v319) >> 31) + 0x7FFFFFFF;
          if (__OFSUB__(HIDWORD(v319), v314))
            v324 = v324;
          else
            v324 = HIDWORD(v319) - v314;
          *(uint64_t *)((char *)v501 + 28) = v323 | (v324 << 32);
          *((_BYTE *)v501 + 36) |= 0x10u;
          v325 = *(_OWORD *)(v306 + 152);
          v571 = v325;
          *(_QWORD *)(v306 + 152) = v319;
          v326 = *(_DWORD *)(v306 + 20);
          v187 = &jpt_1942B3B5C;
          if ((v326 & 0x200) != 0)
          {
            if ((v326 & 0x8000) == 0)
              goto LABEL_547;
            if ((*(_BYTE *)(v306 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942B4D38);
            }
            v337 = *(_QWORD *)(v306 + 144);
            if (!v337 || (*(_BYTE *)(v337 + 25) & 8) == 0)
            {
LABEL_547:
              v327 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v306 + 24) + 8) + 40) + 8);
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v327 + 528) + 8) + 288) + 476))
              {
                if ((_QWORD)v325 == v319)
                {
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v327 + 1944) + 24) + 8)
                                                         + 40)
                                             + 8)
                                 + 3382))
                  {
                    LOBYTE(v567) = 0;
                    LOBYTE(v568) = 0;
                    LOBYTE(v564) = 0;
                    LOBYTE(v566) = 0;
                    WebCore::RenderObject::issueRepaint(v306, &v567, 0, 0, (uint64_t)&v564);
                    v306 = (uint64_t)v506;
                  }
                  v177 = v513;
                  v178 = v516;
                  v187 = &jpt_1942B3B5C;
                  v188 = &jpt_1942B5448;
                }
                else
                {
                  WebCore::RenderBox::repaintDuringLayoutIfMoved(v306, (const WebCore::LayoutRect *)&v571);
                  v306 = (uint64_t)v506;
                  v188 = &jpt_1942B5448;
                  v187 = &jpt_1942B3B5C;
                  v178 = v516;
                  v177 = v513;
                }
              }
            }
          }
          if ((v322 & 1) == 0)
          {
            v328 = v306;
            (*(void (**)(uint64_t))(*(_QWORD *)v306 + 1512))(v306);
            WebCore::RenderElement::layoutIfNeeded(v328);
            v188 = &jpt_1942B5448;
            v187 = &jpt_1942B3B5C;
            v178 = v516;
            v177 = v513;
          }
LABEL_269:
          v190 = *((_WORD *)v13 + 6);
          if ((v190 & 0x400) != 0)
            goto LABEL_289;
          v191 = *((_QWORD *)v13 + 4);
          v192 = v191 & 0x1F;
          v193 = v192 > 0x17 || ((1 << v192) & 0xA00006) == 0;
          if ((!v193 || (v191 & 0x1Fu) <= 0xDuLL && ((1 << (v191 & 0x1F)) & 0x3008) != 0)
            && (v190 & 0x40) != 0)
          {
            v194 = *((_QWORD *)v13 + 15);
            if (v194)
            {
              v195 = *(_QWORD *)(v194 + 32);
              if ((v195 & 0xE000000) != 0 || (v195 & 0x180000) == 0x100000)
              {
                v235 = *((_QWORD *)v13 + 15);
                do
                {
                  v235 = *(_QWORD *)(v235 + 88);
                  if (!v235)
                    goto LABEL_299;
                  v236 = *(_QWORD *)(v235 + 32);
                }
                while ((v236 & 0xE000000) != 0 || (v236 & 0x180000) == 0x100000);
                do
                {
                  do
                  {
                    v194 = *(_QWORD *)(v194 + 88);
                    v195 = *(_QWORD *)(v194 + 32);
                  }
                  while ((v195 & 0xE000000) != 0);
                }
                while ((v195 & 0x180000) == 0x100000);
              }
              v196 = (v195 & 0x1Fu) > 0x19 || ((1 << (v195 & 0x1F)) & 0x3528001) == 0;
              v197 = v195 & 0x1F;
              v198 = !v196 || v197 == 3;
              if (v198 || v197 == 5)
                goto LABEL_289;
            }
          }
LABEL_299:
          if ((*((_WORD *)v13 + 6) & 0x480) != 0)
            goto LABEL_289;
          v201 = v190 & 0xF;
          if (v201 == 5)
            goto LABEL_289;
          if (v192 > 0x15)
            goto LABEL_315;
          if (((1 << v192) & 0x90010) != 0)
          {
            if ((v191 & 0x1Fu) <= 0xDuLL && ((1 << (v191 & 0x1F)) & 0x3008) != 0)
              goto LABEL_304;
            goto LABEL_315;
          }
          if (((1 << v192) & 0x200006) == 0)
            goto LABEL_315;
LABEL_304:
          v202 = *(_QWORD *)(*((_QWORD *)v13 + 3) + 40);
          if ((*(_BYTE *)(v202 + 642) & 3u) - 3 > 0xFFFFFFFD || (*(_BYTE *)(v202 + 462) & 1) != 0)
          {
            v514 = v177;
            v518 = v178;
            v447 = WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()((uint64_t)v13);
            v188 = &jpt_1942B5448;
            v187 = &jpt_1942B3B5C;
            v178 = v518;
            v177 = v514;
            if ((v447 & 1) != 0)
              goto LABEL_289;
          }
          if ((v191 & 0x180000) == 0x100000
            || (v191 & 0xE000000) == 0 && (*(_QWORD *)(*((_QWORD *)v13 + 10) + 32) & 0x1ELL) == 0x10)
          {
            goto LABEL_289;
          }
LABEL_315:
          if ((v191 & 0x180000) == 0x100000 || (v191 & 0xE000000) == 0)
          {
            if (v192 - 1 < 2 || v192 == 21)
              goto LABEL_425;
            if (v192 == 23)
              goto LABEL_289;
            v204 = v191 & 0x1F;
            if (v204 > 0xD || ((1 << v204) & 0x3008) == 0)
            {
LABEL_325:
              if (v192 > 0x15)
                goto LABEL_427;
              if (((1 << v192) & 0x90010) != 0)
              {
                if (v204 > 0xD || ((1 << v204) & 0x3008) == 0)
                  goto LABEL_427;
              }
              else if (((1 << v192) & 0x200002) == 0)
              {
                goto LABEL_427;
              }
LABEL_425:
              v264 = v177;
              v265 = v178;
              v266 = v187;
              v267 = v188;
              isOverflowVisible = WebCore::Layout::Box::isOverflowVisible((WebCore::Layout::Box *)v13);
              v188 = v267;
              v187 = v266;
              v178 = v265;
              v177 = v264;
              if (!isOverflowVisible)
                goto LABEL_289;
              v190 = *((_WORD *)v13 + 6);
              v201 = v190 & 0xF;
              goto LABEL_427;
            }
            if (v192 > 0x15)
              goto LABEL_289;
            if (((1 << v192) & 0x90010) != 0)
            {
              if (v204 <= 0xD && ((1 << v204) & 0x3008) != 0)
                goto LABEL_325;
            }
            else if (((1 << v192) & 0x200002) != 0)
            {
              goto LABEL_425;
            }
LABEL_289:
            if (v13 == (__int128 *)v185)
              goto LABEL_444;
            while (1)
            {
              v186 = *((_QWORD *)v13 + 11);
              if (v186)
                break;
              v13 = (__int128 *)*((_QWORD *)v13 + 10);
              if (v13 == (__int128 *)v185 || (*((_WORD *)v13 + 6) & 0x80) != 0)
                goto LABEL_444;
            }
          }
          else
          {
            if ((v191 & 0x1F) == 1)
              goto LABEL_289;
LABEL_427:
            if (v201 == 6)
              goto LABEL_289;
            v269 = *((_QWORD *)v13 + 4);
            if ((v269 & 0x1E) == 0x10)
              goto LABEL_289;
            v270 = *(_QWORD *)(*((_QWORD *)v13 + 3) + 40);
            if ((*(_BYTE *)(v270 + 642) & 3u) - 3 > 0xFFFFFFFD || (*(_BYTE *)(v270 + 462) & 1) != 0)
            {
              v470 = v177;
              v471 = v178;
              v472 = WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()((uint64_t)v13);
              v188 = &jpt_1942B5448;
              v187 = &jpt_1942B3B5C;
              v178 = v471;
              v177 = v470;
              if ((v472 & 1) != 0)
                goto LABEL_289;
            }
            if ((v269 & 0x180000) == 0x100000
              || (v269 & 0xE000000) == 0 && (*(_QWORD *)(*((_QWORD *)v13 + 10) + 32) & 0x1ELL) == 0x10)
            {
              goto LABEL_289;
            }
            if ((v190 & 0x40) == 0 || (v186 = *((_QWORD *)v13 + 15)) == 0)
            {
              if (v13 == (__int128 *)v185)
                goto LABEL_444;
              while (1)
              {
                v186 = *((_QWORD *)v13 + 11);
                if (v186)
                  break;
                v13 = (__int128 *)*((_QWORD *)v13 + 10);
                if (v13 == (__int128 *)v185 || (*((_WORD *)v13 + 6) & 0x80) != 0)
                  goto LABEL_444;
              }
            }
          }
          break;
      }
    }
  }
LABEL_444:
  v273 = (uint64_t)v572;
  if (v572)
  {
    v435 = *((unsigned int *)v572 - 1);
    if ((_DWORD)v435)
    {
      v436 = v572;
      do
      {
        v437 = *v436;
        if (*v436 != -1)
        {
          *v436 = 0;
          if (v437)
          {
            v438 = *(_DWORD *)(v437 + 8);
            if (!v438)
            {
              __break(0xC471u);
              JUMPOUT(0x1942B5168);
            }
            *(_DWORD *)(v437 + 8) = v438 - 1;
          }
        }
        v436 += 2;
        --v435;
      }
      while (v435);
    }
    WTF::fastFree((WTF *)(v273 - 16), (void *)v160);
  }
  v23 = (unint64_t)this + 72;
LABEL_446:
  if (*(_QWORD *)v23)
    WebCore::LayoutIntegration::LineLayout::layout((uint64_t *)&v567, this);
  if ((v529 & 1) != 0)
  {
    v274 = 0;
    *(_BYTE *)v528 = 0;
  }
  else
  {
    *(_DWORD *)v528 = v526;
    *(_DWORD *)(v528 + 4) = v524;
    v274 = 1;
    *(_DWORD *)(v528 + 8) = v522;
    *(_DWORD *)(v528 + 12) = v520;
  }
  *(_BYTE *)(v528 + 16) = v274;
  v275 = v530;
  if (v530)
  {
    v530 = 0;
    LODWORD(v531) = 0;
    WTF::fastFree(v275, (void *)v160);
  }
  if (HIDWORD(v535))
  {
    v276 = v534;
    v277 = 80 * HIDWORD(v535);
    do
    {
      if ((*((_WORD *)v276 + 25) & 0x100) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        *(_QWORD *)&v567 = v276;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v567);
      }
      v278 = *(WTF::StringImpl **)((char *)v276 + 60);
      *(_QWORD *)((char *)v276 + 60) = 0;
      if (v278)
      {
        if (*(_DWORD *)v278 == 2)
          WTF::StringImpl::destroy(v278, (WTF::StringImpl *)v160);
        else
          *(_DWORD *)v278 -= 2;
      }
      v279 = *(WTF::StringImpl **)((char *)v276 + 52);
      *(_QWORD *)((char *)v276 + 52) = 0;
      if (v279)
      {
        if (*(_DWORD *)v279 == 2)
          WTF::StringImpl::destroy(v279, (WTF::StringImpl *)v160);
        else
          *(_DWORD *)v279 -= 2;
      }
      v280 = *(_QWORD *)v276;
      *(_QWORD *)v276 = 0;
      if (v280)
      {
        v281 = *(_DWORD *)(v280 + 8);
        if (!v281)
        {
          __break(0xC471u);
          JUMPOUT(0x1942B3E68);
        }
        *(_DWORD *)(v280 + 8) = v281 - 1;
      }
      v276 = (WTF *)((char *)v276 + 80);
      v277 -= 80;
    }
    while (v277);
  }
  v282 = v534;
  if (v534)
  {
    v534 = 0;
    LODWORD(v535) = 0;
    WTF::fastFree(v282, (void *)v160);
  }
  result = v532;
  if (v532)
  {
    v532 = 0;
    LODWORD(v533) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)v160);
  }
  if (v553)
  {
    result = v551;
    if (v551)
    {
      v551 = 0;
      v552 = 0;
      result = (WTF *)WTF::fastFree(result, (void *)v160);
    }
  }
  if (v548)
    result = (WTF *)WTF::fastFree((WTF *)(v548 - 16), (void *)v160);
  v284 = *(_QWORD *)&v537[16];
  *(_QWORD *)&v537[16] = 0;
  if (v284)
  {
    v285 = *(_DWORD *)(v284 + 8);
    if (!v285)
    {
      __break(0xC471u);
      JUMPOUT(0x1942B4044);
    }
    *(_DWORD *)(v284 + 8) = v285 - 1;
  }
  if (v563)
  {
    result = v561;
    v561 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::Font::~Font((WTF **)result);
        return (WTF *)WTF::fastFree(v286, v287);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::Layout::LayoutState::inlineContentCache(WebCore::Layout::LayoutState *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  const WebCore::Layout::ElementBox *v11;
  uint64_t *v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;

  v4 = (uint64_t *)((char *)this + 16);
  v3 = *((_QWORD *)this + 2);
  if (v3
    || (WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash((uint64_t *)this + 2, 8u, 0), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(v3 + 16 * v9);
  v11 = (const WebCore::Layout::ElementBox *)*v10;
  if (!*v10)
  {
LABEL_12:
    *v10 = a2;
    v14 = (void *)bmalloc::api::isoAllocate();
    bzero(v14, 0x5C8uLL);
    v16 = v10[1];
    v10[1] = (uint64_t)v14;
    if (v16)
    {
      if (*(_BYTE *)(v16 + 1456))
        WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v16 + 32), v15);
      v17 = *(WTF **)(v16 + 16);
      if (v17)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v17, v15);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v16, v15);
    }
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        return v10[1];
    }
    else
    {
      if (3 * v23 > 4 * v22)
        return v10[1];
      if (!(_DWORD)v23)
      {
        v24 = 8;
LABEL_26:
        v10 = WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(v4, v24, v10);
        return v10[1];
      }
    }
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_26;
  }
  v12 = 0;
  v13 = 1;
  while (v11 != (const WebCore::Layout::ElementBox *)a2)
  {
    if (v11 == (const WebCore::Layout::ElementBox *)-1)
      v12 = v10;
    v9 = (v9 + v13) & v5;
    v10 = (uint64_t *)(v3 + 16 * v9);
    v11 = (const WebCore::Layout::ElementBox *)*v10;
    ++v13;
    if (!*v10)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = v12;
      }
      goto LABEL_12;
    }
  }
  return v10[1];
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 80 * v3;
    do
    {
      if ((*((_WORD *)v4 + 25) & 0x100) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v12 = v4;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v12);
      }
      v6 = *(WTF::StringImpl **)((char *)v4 + 60);
      *(_QWORD *)((char *)v4 + 60) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)((char *)v4 + 52);
      *(_QWORD *)((char *)v4 + 52) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 8);
        if (!v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1942B5918);
        }
        *(_DWORD *)(v8 + 8) = v9 - 1;
      }
      v4 = (WTF *)((char *)v4 + 80);
      v5 -= 80;
    }
    while (v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t WebCore::LayoutIntegration::InlineContent::releaseCaches(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF *v14;
  int v15;

  v2 = this;
  v3 = *(WTF **)(this + 64);
  *(_QWORD *)(this + 64) = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    if (*(_QWORD *)v3)
    {
      v5 = *((unsigned int *)v4 - 1);
      if ((_DWORD)v5)
      {
        v6 = *(uint64_t **)v3;
        do
        {
          v7 = *v6;
          if (*v6 != -1)
          {
            *v6 = 0;
            if (v7)
            {
              v8 = *(_DWORD *)(v7 + 8);
              if (!v8)
              {
LABEL_26:
                __break(0xC471u);
                JUMPOUT(0x1942B5A60);
              }
              *(_DWORD *)(v7 + 8) = v8 - 1;
            }
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 2), a2);
    }
    this = WTF::fastFree(v3, a2);
  }
  v9 = *(WTF **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v9)
  {
    v10 = *(uint64_t **)v9;
    if (*(_QWORD *)v9)
    {
      v11 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v11)
      {
        v12 = *(uint64_t **)v9;
        do
        {
          v13 = *v12;
          if (*v12 != -1)
          {
            v14 = (WTF *)v12[1];
            if (v14)
            {
              v12[1] = 0;
              *((_DWORD *)v12 + 4) = 0;
              WTF::fastFree(v14, a2);
              v13 = *v12;
            }
            *v12 = 0;
            if (v13)
            {
              v15 = *(_DWORD *)(v13 + 8);
              if (!v15)
                goto LABEL_26;
              *(_DWORD *)(v13 + 8) = v15 - 1;
            }
          }
          v12 += 3;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree((WTF *)(v10 - 2), a2);
    }
    return WTF::fastFree(v9, a2);
  }
  return this;
}

uint64_t WebCore::Layout::LayoutState::ensureBlockFormattingState(WebCore::Layout::LayoutState *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  const WebCore::Layout::ElementBox *v12;
  uint64_t *v13;
  int v14;
  void *v15;
  uint64_t v16;
  WebCore::Layout::BlockFormattingState *v17;
  bmalloc::api *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  v5 = (uint64_t *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  if (v4
    || (WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash((uint64_t *)this + 3, 8u, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v4 + 16 * v10);
  v12 = (const WebCore::Layout::ElementBox *)*v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v16 = bmalloc::api::isoAllocate();
    *(_QWORD *)v16 = this;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    *(_BYTE *)(v16 + 24) = 0;
    *(_DWORD *)(v16 + 28) = 0;
    ++*(_DWORD *)(a2 + 8);
    *(_DWORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 32) = a2;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_BYTE *)(v16 + 60) = (*(_DWORD *)(a2 + 56) & 0x4000000) == 0;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    v17 = (WebCore::Layout::BlockFormattingState *)v11[1];
    v11[1] = v16;
    if (v17)
    {
      WebCore::Layout::BlockFormattingState::~BlockFormattingState(v17, v15);
      bmalloc::api::isoDeallocate(v18, v19);
    }
    v20 = *v5;
    if (*v5)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v5;
    if (*v5)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        return v11[1];
    }
    else
    {
      if (3 * v25 > 4 * v24)
        return v11[1];
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_22:
        v11 = WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(v5, v26, v11);
        return v11[1];
      }
    }
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_22;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != (const WebCore::Layout::ElementBox *)a2)
  {
    if (v12 == (const WebCore::Layout::ElementBox *)-1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (uint64_t *)(v4 + 16 * v10);
    v12 = (const WebCore::Layout::ElementBox *)*v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11[1];
}

uint64_t *WebCore::LayoutIntegration::BoxGeometryUpdater::BoxGeometryUpdater(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v5 = *a2;
  if (*a2)
    goto LABEL_19;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v8 = (unsigned int *)*a2;
  *a2 = v5;
  if (!v8)
    goto LABEL_19;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v5 = *a2;
  if (*a2)
  {
LABEL_19:
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
  }
  *a1 = v5;
  v12 = *a3;
  if (*a3)
    goto LABEL_20;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a3;
  v16 = (unsigned int *)*a3;
  *a3 = v12;
  if (!v16)
    goto LABEL_20;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  v12 = *a3;
  if (*a3)
  {
LABEL_20:
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
  }
  a1[1] = v12;
  a1[2] = 0;
  return a1;
}

uint64_t WebCore::Layout::BoxGeometry::borderBoxRect(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *WebCore::RenderBlockFlow::insertFloatingObjectForIFC(WebCore::RenderBlockFlow *this, WebCore::RenderBox *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  WebCore::FloatingObjects *v17;
  WTF *v18;
  void *v19;
  WebCore::FloatingObject *v20;
  char v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  WTF *v26;
  WTF *v27;
  _BYTE v28[8];
  uint64_t **v29;

  v3 = *((_QWORD *)this + 27);
  if (v3)
    goto LABEL_2;
  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 40) = (*((_DWORD *)this + 5) & 0x1000) == 0;
  v16 = *((_QWORD *)this + 1);
  if (v16)
    goto LABEL_9;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = this;
  v26 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v16;
  if (!v26)
    goto LABEL_9;
  if (*(_DWORD *)v26 != 1)
  {
    --*(_DWORD *)v26;
LABEL_9:
    ++*(_DWORD *)v16;
    goto LABEL_10;
  }
  WTF::fastFree(v26, v15);
  v16 = *((_QWORD *)this + 1);
  if (v16)
    goto LABEL_9;
LABEL_10:
  *(_QWORD *)(v3 + 48) = v16;
  v17 = (WebCore::FloatingObjects *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v3;
  if (v17)
  {
    WebCore::FloatingObjects::~FloatingObjects(v17, v15);
    WTF::fastFree(v18, v19);
    v3 = *((_QWORD *)this + 27);
  }
LABEL_2:
  v4 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = *(uint64_t ***)(v4 + 8 * v9);
      if (!v11)
        break;
      if (v11 != (uint64_t **)-1)
      {
        v12 = *v11;
        v13 = **v11;
        if (v13)
        {
          if (*(WebCore::RenderBox **)(v13 + 8) == a2)
          {
            if (v9 != *(_DWORD *)(v4 - 4))
              return v12;
            break;
          }
        }
      }
      v9 = (v9 + i) & v5;
    }
  }
  v20 = (WebCore::FloatingObject *)WTF::fastMalloc((WTF *)0x28);
  v27 = WebCore::FloatingObject::FloatingObject(v20, a2);
  v21 = *((_BYTE *)v27 + 36);
  *((_BYTE *)v27 + 36) = v21 | 8;
  if ((v21 & 3) == 1)
    ++*(_DWORD *)(v3 + 32);
  else
    ++*(_DWORD *)(v3 + 36);
  if ((*((_BYTE *)v20 + 36) & 0x10) != 0)
    WebCore::FloatingObjects::addPlacedObject((uint64_t **)v3, v20);
  WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::add((uint64_t *)v3, (uint64_t **)&v27, (uint64_t)v28);
  v12 = *v29;
  v23 = v27;
  v27 = 0;
  if (v23)
  {
    v24 = *(WTF **)v23;
    *(_QWORD *)v23 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v22);
      else
        --*(_DWORD *)v24;
    }
    WTF::fastFree(v23, v22);
  }
  return v12;
}

WebCore::FloatingObject *WebCore::FloatingObject::FloatingObject(WebCore::FloatingObject *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  WebCore::RenderBox *v5;
  int v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  int v9;
  char v10;
  void *v12;
  WTF *v13;
  char v14;
  int v15;
  int v16;
  int v17;

  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_2;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v13 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (!v13)
    goto LABEL_2;
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
LABEL_2:
    ++*(_DWORD *)v4;
    goto LABEL_3;
  }
  WTF::fastFree(v13, v12);
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_2;
LABEL_3:
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = *((_BYTE *)this + 36) & 0xC3 | 4;
  v5 = a2;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
    v5 = *(WebCore::RenderBox **)(*((_QWORD *)a2 + 4) + 8);
  v6 = (*((_DWORD *)v5 + 24) >> 25) & 7;
  switch(v6)
  {
    case 0:
      goto LABEL_7;
    case 1:
      goto LABEL_6;
    case 2:
      goto LABEL_33;
    case 3:
    case 4:
      v14 = *((_BYTE *)WebCore::RenderObject::containingBlock(a2) + 123);
      if (v6 == 3)
        v15 = 4;
      else
        v15 = 2;
      if (v6 == 3)
        v16 = 2;
      else
        v16 = 4;
      if ((v14 & 4) != 0)
        v17 = v15;
      else
        v17 = v16;
      if (v17 == 2)
        LOBYTE(v6) = 1;
      else
LABEL_33:
        LOBYTE(v6) = 2;
LABEL_6:
      *((_BYTE *)this + 36) = *((_BYTE *)this + 36) & 0xFC | v6;
LABEL_7:
      v7 = WebCore::RenderObject::containingBlock(a2);
      if (!v7)
        return this;
      v8 = *((_QWORD *)v7 + 12);
      if ((*((_BYTE *)v7 + 22) & 8) != 0)
      {
        if (((v8 >> 10) & 5 | 2) == 2)
          goto LABEL_12;
        v9 = (unsigned __int16)v8 >> 13;
        if (!v9)
          goto LABEL_12;
      }
      else
      {
        if (((v8 >> 10) & 7) == 2)
        {
LABEL_12:
          v10 = 32;
          goto LABEL_14;
        }
        v9 = (unsigned __int16)v8 >> 13;
      }
      if (v9 == 2)
        goto LABEL_12;
      v10 = 0;
LABEL_14:
      *((_BYTE *)this + 36) = *((_BYTE *)this + 36) & 0xDF | v10;
      return this;
    default:
      __break(0xC471u);
      JUMPOUT(0x1942B61C8);
  }
}

uint64_t *WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::add@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t ***v14;
  int j;
  int v16;
  uint64_t ***v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  char v28;
  int i;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = **a2;
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  v14 = 0;
  if (v8)
  {
    for (i = 1; ; ++i)
    {
      v30 = v13 & v7;
      v17 = (uint64_t ***)(v6 + 8 * (v13 & v7));
      v18 = *v17;
      if (!*v17)
        break;
      if (v18 != (uint64_t **)-1)
      {
        v31 = **v18;
        if (v31)
          v31 = *(_QWORD *)(v31 + 8);
        v17 = v14;
        if (v31 == *(_QWORD *)(v8 + 8))
        {
LABEL_36:
          v28 = 0;
          goto LABEL_21;
        }
      }
      v13 = i + v30;
      v14 = v17;
    }
  }
  else
  {
    for (j = 1; ; ++j)
    {
      v16 = v13 & v7;
      v17 = (uint64_t ***)(v6 + 8 * (v13 & v7));
      v18 = *v17;
      if (!*v17)
        break;
      if (v18 != (uint64_t **)-1)
      {
        v32 = **v18;
        if (!v32)
          goto LABEL_36;
        v17 = v14;
        if (!*(_QWORD *)(v32 + 8))
          goto LABEL_36;
      }
      v13 = j + v16;
      v14 = v17;
    }
  }
  if (v14)
  {
    *v14 = 0;
    --*(_DWORD *)(*v4 - 16);
    v17 = v14;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v19 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = (uint64_t)v19;
  *v17 = (uint64_t **)result;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v4;
  if (*v4)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_17;
LABEL_25:
    v17 = WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::expand(v4, v17);
    result = (uint64_t *)*v17;
    goto LABEL_17;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_25;
LABEL_17:
  v26 = v4[2];
  result[1] = v26;
  result[2] = 0;
  if (v26)
    v27 = (uint64_t **)(v26 + 16);
  else
    v27 = (uint64_t **)(v4 + 1);
  *v27 = result;
  v4[2] = (uint64_t)result;
  v18 = *v17;
  v28 = 1;
LABEL_21:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

uint64_t *WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::BlockFormattingState>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BlockFormattingState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *result;
  uint64_t *v14;
  uint64_t v15;
  WebCore::Layout::BlockFormattingState *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  WebCore::Layout::BlockFormattingState *v29;
  bmalloc::api *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Layout::BlockFormattingState *v34;
  bmalloc::api *v35;
  void *v36;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v14 = (uint64_t *)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (WebCore::Layout::BlockFormattingState *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            WebCore::Layout::BlockFormattingState::~BlockFormattingState(v29, v10);
            bmalloc::api::isoDeallocate(v30, v31);
          }
          *v28 = *v14;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v28[1] = v33;
          v34 = *(WebCore::Layout::BlockFormattingState **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            WebCore::Layout::BlockFormattingState::~BlockFormattingState(v34, v10);
            bmalloc::api::isoDeallocate(v35, v36);
          }
          if (v14 == a3)
            v12 = v28;
        }
      }
      else
      {
        v16 = (WebCore::Layout::BlockFormattingState *)v14[1];
        v14[1] = 0;
        if (v16)
        {
          WebCore::Layout::BlockFormattingState::~BlockFormattingState(v16, v10);
          bmalloc::api::isoDeallocate(v17, v18);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,std::unique_ptr<WebCore::Layout::InlineContentCache>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::InlineContentCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  _DWORD **v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v14 = (uint64_t *)(v5 + 16 * v10);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v25 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = *(_QWORD *)(v24 + 16 * v29);
            v29 = (v29 + v30++) & v25;
          }
          while (v32);
          v33 = (uint64_t *)(v24 + 16 * v31);
          v34 = v33[1];
          v33[1] = 0;
          if (v34)
          {
            if (*(_BYTE *)(v34 + 1456))
              WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v34 + 32), v9);
            v35 = *(WTF **)(v34 + 16);
            if (v35)
            {
              *(_QWORD *)(v34 + 16) = 0;
              *(_DWORD *)(v34 + 24) = 0;
              WTF::fastFree(v35, v9);
            }
            bmalloc::api::isoDeallocate((bmalloc::api *)v34, v9);
          }
          *v33 = *v14;
          v36 = v5 + 16 * v10;
          v37 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          v33[1] = v37;
          v38 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          if (v38)
          {
            if (*(_BYTE *)(v38 + 1456))
              WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v38 + 32), v9);
            v39 = *(WTF **)(v38 + 16);
            if (v39)
            {
              *(_QWORD *)(v38 + 16) = 0;
              *(_DWORD *)(v38 + 24) = 0;
              WTF::fastFree(v39, v9);
            }
            bmalloc::api::isoDeallocate((bmalloc::api *)v38, v9);
          }
          if (v14 == a3)
            v11 = v33;
        }
      }
      else
      {
        v16 = v14[1];
        v14[1] = 0;
        if (v16)
        {
          if (*(_BYTE *)(v16 + 1456))
          {
            v17 = *(_QWORD *)(v16 + 1408);
            if (v17)
              WTF::fastFree((WTF *)(v17 - 16), v9);
            v18 = *(WTF **)(v16 + 1376);
            if (v18)
            {
              *(_QWORD *)(v16 + 1376) = 0;
              *(_DWORD *)(v16 + 1384) = 0;
              WTF::fastFree(v18, v9);
            }
            v19 = *(WTF **)(v16 + 1296);
            if (v19)
            {
              *(_QWORD *)(v16 + 1296) = 0;
              *(_DWORD *)(v16 + 1304) = 0;
              WTF::fastFree(v19, v9);
            }
            v20 = *(unsigned int *)(v16 + 1292);
            if ((_DWORD)v20)
            {
              v40 = (_DWORD **)(*(_QWORD *)(v16 + 1280) + 96);
              v41 = 120 * v20;
              do
              {
                v42 = *v40;
                *v40 = 0;
                if (v42)
                {
                  if (v42[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
                  else
                    --v42[2];
                }
                v43 = (uint64_t)*(v40 - 12);
                if (v43)
                {
                  v44 = *(_DWORD *)(v43 + 8);
                  if (!v44)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942B68ECLL);
                  }
                  *(_DWORD *)(v43 + 8) = v44 - 1;
                }
                v40 += 15;
                v41 -= 120;
              }
              while (v41);
            }
            v21 = *(WTF **)(v16 + 1280);
            if (v21)
            {
              *(_QWORD *)(v16 + 1280) = 0;
              *(_DWORD *)(v16 + 1288) = 0;
              WTF::fastFree(v21, v9);
            }
            v22 = *(WTF **)(v16 + 64);
            if ((WTF *)(v16 + 80) != v22 && v22)
            {
              *(_QWORD *)(v16 + 64) = 0;
              *(_DWORD *)(v16 + 72) = 0;
              WTF::fastFree(v22, v9);
            }
          }
          v23 = *(WTF **)(v16 + 16);
          if (v23)
          {
            *(_QWORD *)(v16 + 16) = 0;
            *(_DWORD *)(v16 + 24) = 0;
            WTF::fastFree(v23, v9);
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v16, v9);
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
  }
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t ***WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::expand(uint64_t *a1, uint64_t ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t ***v10;
  uint64_t ***result;
  uint64_t ***v12;
  uint64_t ***v13;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (uint64_t ***)v4;
    do
    {
      v9 = *v12;
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::reinsert(*a1, v9);
        if (v12 == a2)
          v10 = v13;
      }
      ++v12;
      --v5;
    }
    while (v5);
    goto LABEL_14;
  }
  result = 0;
  if (v4)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

void WebCore::Layout::InlineDamage::~InlineDamage(WebCore::Layout::InlineDamage *this, void *a2)
{
  WTF **v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (WTF **)((char *)this + 48);
  if (*((_DWORD *)this + 14))
  {
    v4 = *((_DWORD *)this + 15);
    if (v4)
    {
      WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::destruct(*((WTF::StringImpl **)this + 6), (WTF::StringImpl *)(*((_QWORD *)this + 6) + 80 * v4));
      *((_DWORD *)this + 15) = 0;
    }
    v5 = *v3;
    if (*v3)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  if (*((_DWORD *)this + 18))
  {
    v8 = *((unsigned int *)this + 19);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 8);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
      *((_DWORD *)this + 19) = 0;
    }
    v12 = (WTF *)*((_QWORD *)this + 8);
    if (v12)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v12, a2);
    }
  }
  v6 = *((unsigned int *)this + 19);
  v7 = (WTF *)*((_QWORD *)this + 8);
  if ((_DWORD)v6)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 8);
    v14 = 8 * v6;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v7 = (WTF *)*((_QWORD *)this + 8);
  }
  if (v7)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v7, a2);
  }
  WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, (WTF::StringImpl *)a2);
}

uint64_t WebCore::RenderImage::paintReplaced(WebCore::RenderImage *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  double v45;
  unsigned int v47;
  __int16 v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  __n128 v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  WebCore::Element *v85;
  uint64_t v86;
  int v87;
  int v88;
  char v89;
  __int32 v90;
  unint64_t v91;
  WebCore::Element *v92;
  uint64_t v93;
  int v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int32x2_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  float v133;
  int v134;
  int v135;
  void *v136;
  float v137;
  int v138;
  int v139;
  float v140;
  double v141;
  int v142;
  int v143;
  float v144;
  double v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  double v156;
  double v157;
  int v158;
  int v159;
  double v160;
  double v161;
  double v162;
  double v163;
  int v164;
  int v165;
  double v166;
  double v167;
  double v168;
  double v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  float v178;
  unsigned int v179;
  float v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  uint64_t v186;
  const WebCore::Image *v187;
  char v188;
  char v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  WebCore::GraphicsContext *v195;
  double v196;
  int v197;
  double v198;
  int v199;
  char v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  __int16 v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int32x4_t v232;
  float v233;
  float v234;
  WTF *v235;
  void *v236;
  uint64_t v237;
  int v238;
  int v239;
  unsigned int v240;
  unint64_t v241;
  unint64_t v242;
  int v243;
  unsigned int v244;
  int v245;
  int v246;
  int v247;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  char v257;
  int v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  WTF *v266;
  unsigned int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  BOOL v272;
  int v273;
  int v274;
  int v275;
  int v276;
  _BOOL4 v277;
  int v278;
  int v279;
  _BOOL4 v280;
  int v281;
  int v282;
  signed int v283;
  signed int v284;
  int v285;
  int v286;
  signed int v287;
  signed int v288;
  void *v289;
  WTF *v290;
  WTF *v291;
  WTF *v292;
  int v293;
  int v294;
  WTF *v295;
  int v296;
  uint64_t v297;
  WebCore::Page *v298;
  uint64_t v299;
  WTF *v300;
  WTF **v301;
  WTF *v302;
  int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  int v308;
  int v309;
  _DWORD *v310;
  _DWORD *v311;
  float v312;
  float v313;
  float v314;
  float v315;
  double v316;
  int v318;
  double v319;
  int v320;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  int v327;
  uint64_t v328;
  int v329;
  unsigned int v330;
  int v331;
  int *v332;
  __int32 v333;
  unsigned int v334;
  unsigned int v335;
  char v336;
  unsigned int *v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  WebCore::Image *v343;
  uint64_t v344;
  uint64_t v345;
  _DWORD *v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  WebCore::CachedImage *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BOOL4 isSystemPreviewLink;
  uint64_t v359;
  void (**v360)(WebCore::RenderThemeIOS *__hidden);
  WebCore::FontCascade *v361;
  uint64_t v362;
  __int16 v363;
  double v364;
  WTF::StringImpl *v366;
  void *v367;
  uint64_t v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  uint64_t v371;
  unint64_t v372;
  int v373;
  int v374;
  void *v375;
  WTF *v376;
  WTF *v377;
  WTF *v378;
  float v379;
  void *v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  unsigned int *v386;
  unsigned int v387;
  WTF *v388;
  unint64_t v389;
  unint64_t v390;
  float v391;
  double v392;
  unint64_t v393;
  float v394;
  double v395;
  int v396;
  int v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  int v404;
  unsigned int v405;
  int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  int v412;
  int v413;
  float v414;
  float v415;
  void *v416;
  int v417;
  unsigned int v418;
  int v419;
  int v420;
  int v421;
  unint64_t v422;
  int v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  WebCore::Page *v427;
  uint64_t v428;
  WTF *v429;
  WTF *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  int v437;
  int v438;
  double v439;
  double v440;
  int v441;
  double v442;
  double v443;
  int v444;
  char v445;
  char v446;
  char v447;
  uint64_t v448;
  char v449;
  int v450;
  int v451;
  BOOL v452;
  int v453;
  _BOOL4 v454;
  int v455;
  int v456;
  _BOOL4 v457;
  int v458;
  int v459;
  _BOOL4 v460;
  int v461;
  int v462;
  int v463;
  int v464;
  unsigned int *v465;
  unsigned int v466;
  BOOL v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  uint64_t v472;
  int v473;
  WebCore::GraphicsContext *v475;
  unint64_t v477;
  int v478;
  unint64_t v479;
  _DWORD *v480;
  __n128 v481;
  __int32 v482;
  __int32 v483;
  __int32 v484;
  __int32 v485;
  __int32 v486;
  __int32 v487;
  __int32 v488;
  int v489;
  float v490[2];
  WTF *v491[2];
  WTF *v492[2];
  double v493;
  double v494;
  char *v495;
  uint64_t *v496;
  int *v497;
  const WebCore::LayoutPoint *v498;
  BOOL *v499;
  uint64_t *v500;
  char *v501;
  _QWORD *v502;
  int *v503;
  uint64_t v504;
  int v505;
  _DWORD *v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  BOOL v509;
  uint64_t v510;
  uint64_t v511;
  char v512;
  int v513;
  int v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  uint64_t v518;
  _QWORD v519[2];

  v475 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
  result = (*(uint64_t (**)(void))(*(_QWORD *)v475 + 64))();
  if ((_DWORD)result)
  {
    v431 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
    if (v431)
    {
      result = *(_QWORD *)(v431 + 8);
      if (result)
      {
        result = WebCore::CachedImage::isClientWaitingForAsyncDecoding((WebCore::CachedImage *)result, this);
        if ((_DWORD)result)
        {
          v432 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
          if (v432)
            v433 = *(_QWORD *)(v432 + 8);
          else
            v433 = 0;
          return WebCore::CachedImage::removeAllClientsWaitingForAsyncDecoding(v433);
        }
      }
    }
    return result;
  }
  v5 = *((_DWORD *)this + 40);
  v480 = (_DWORD *)((char *)this + 160);
  v6 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1016))(this);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  v8 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1024))(this);
  v9 = v7 - v8;
  if (__OFSUB__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1352))(this);
  v11 = v10 << 6;
  if (v10 < -33554432)
    v11 = 0x80000000;
  if (v10 > 0x1FFFFFF)
    v11 = 0x7FFFFFFF;
  v272 = __OFSUB__(v9, v11);
  v12 = v9 - v11;
  if (v272)
    v12 = (v9 >> 31) + 0x7FFFFFFF;
  v13 = v12 & ~(v12 >> 31);
  v14 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 944))(this);
  v15 = v13 - v14;
  if (__OFSUB__(v13, v14))
    v15 = 0x7FFFFFFF;
  v16 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 952))(this);
  v17 = v15 - v16;
  if (__OFSUB__(v15, v16))
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v438 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1352))(this);
    if (v438 >= -33554432)
    {
      v18 = v438 << 6;
      if (v438 > 0x1FFFFFF)
        v18 = 0x7FFFFFFF;
    }
    else
    {
      v18 = 0x80000000;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = v17 - v18;
  if (__OFSUB__(v17, v18))
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  v20 = *((_DWORD *)this + 41);
  v21 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v20, v21))
    v22 = (v20 >> 31) + 0x7FFFFFFF;
  else
    v22 = v20 - v21;
  v23 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v22, v23))
    v24 = (v22 >> 31) + 0x7FFFFFFF;
  else
    v24 = v22 - v23;
  v25 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1360))(this);
  v26 = v25 << 6;
  if (v25 < -33554432)
    v26 = 0x80000000;
  if (v25 > 0x1FFFFFF)
    v26 = 0x7FFFFFFF;
  v272 = __OFSUB__(v24, v26);
  v27 = v24 - v26;
  if (v272)
    v27 = (v24 >> 31) + 0x7FFFFFFF;
  v28 = v27 & ~(v27 >> 31);
  v29 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 928))(this);
  v272 = __OFSUB__(v28, v29);
  v30 = v28 - v29;
  if (v272)
    v30 = 0x7FFFFFFF;
  v31 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 936))(this);
  if (__OFSUB__(v30, v31))
    v33 = (v30 >> 31) + 0x7FFFFFFF;
  else
    v33 = v30 - v31;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v437 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1360))(this);
    if (v437 >= -33554432)
    {
      v34 = v437 << 6;
      if (v437 > 0x1FFFFFF)
        v34 = 0x7FFFFFFF;
    }
    else
    {
      v34 = 0x80000000;
    }
  }
  else
  {
    v34 = 0;
  }
  v272 = __OFSUB__(v33, v34);
  v35 = v33 - v34;
  if (v272)
    v36 = (v33 >> 31) + 0x7FFFFFFF;
  else
    v36 = v35;
  v37 = v19 & ~(v19 >> 31);
  v38 = v36 & ~(v36 >> 31);
  v518 = v37 | (v38 << 32);
  v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v40 = 1.0;
  if (v39)
  {
    v41 = *(_QWORD *)(v39 + 8);
    if (v41)
    {
      v42 = *(_QWORD *)(v41 + 24);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
        {
          v44 = (*(_DWORD *)v43)++;
          v40 = *(float *)(v43 + 364);
          if (v44)
          {
            *(_DWORD *)v43 = v44;
          }
          else
          {
            WebCore::Page::~Page(v43);
            WTF::fastFree(v235, v236);
          }
        }
      }
    }
  }
  v45 = (float)(1.0 / v40) * 64.0;
  if (v45 < 2147483650.0 && v45 > -2147483650.0)
    goto LABEL_53;
  if (v45 >= 2147483650.0)
  {
    v47 = 0x7FFFFFFF;
  }
  else
  {
    if (v45 > -2147483650.0)
    {
LABEL_53:
      v47 = (int)v45;
      goto LABEL_54;
    }
    v47 = 0x80000000;
  }
LABEL_54:
  v517 = v47;
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (result)
    {
      v48 = *(_WORD *)(result + 28);
      if ((v48 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942B8AB8);
      }
      if ((v48 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        v49 = *(_DWORD *)(result + 24);
        *(_DWORD *)(result + 24) = v49 + 2;
        v50 = *(unsigned __int8 *)(*(_QWORD *)(result + 176) + 129) - 1;
        if (v49)
        {
          *(_DWORD *)(result + 24) = v49;
        }
        else if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v32);
        }
        if (v50 < 2)
          return result;
      }
    }
  }
  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)v475 + 72))(v475);
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)v475 + 716) & 2) == 0)
    {
      v425 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
      if (v425)
      {
        result = *(_QWORD *)(v425 + 8);
        if (result)
        {
          result = WebCore::CachedImage::canRender((WebCore::CachedImage *)result, this, v40);
          if ((_DWORD)result)
          {
            if (v19 >= 1 && v36 >= 1)
              *((_BYTE *)v475 + 716) |= 2u;
          }
        }
      }
    }
    return result;
  }
  v51 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
  if (!v51
    || !*(_QWORD *)(v51 + 8)
    || (result = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1696))(this), (_DWORD)result))
  {
    v296 = *((unsigned __int16 *)a2 + 8);
    if (v296 == 128)
      return result;
    if (v296 == 8)
    {
      v297 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                           + 8)
                                               + 528)
                                   + 8)
                       + 24);
      if (v297)
        v298 = *(WebCore::Page **)(v297 + 8);
      else
        v298 = 0;
      v299 = *((_QWORD *)this + 24);
      if (v299)
      {
        v300 = *(WTF **)(v299 + 20);
        v301 = (WTF **)(v299 + 28);
      }
      else
      {
        v300 = 0;
        v301 = (WTF **)((char *)this + 160);
      }
      v302 = *v301;
      v491[0] = v300;
      v491[1] = v302;
      WebCore::Page::addRelevantUnpaintedObject(v298, this, (const WebCore::LayoutRect *)v491);
    }
    result = WebCore::RenderImage::paintIncompleteImageOutline(this, (uint64_t)a2, *(_QWORD *)a3, v47);
    if (v37 < 0x81 || v38 < 0x81)
      return result;
    v516 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1016))(this);
    v515 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1000))(this);
    v514 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 944))(this);
    v513 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 928))(this);
    v512 = 0;
    v519[0] = 0;
    if (((v47 ^ (2 * v47)) & 0x80000000) != 0)
      v303 = (v47 >> 31) + 0x7FFFFFFF;
    else
      v303 = 2 * v47;
    v304 = v37 - v303;
    if (__OFSUB__((_DWORD)v37, v303))
      v304 = 0x7FFFFFFF;
    v272 = __OFSUB__((_DWORD)v38, v303);
    v305 = (v38 - v303);
    if (v272)
      v305 = 0x7FFFFFFFLL;
    v511 = v304 | (unint64_t)(v305 << 32);
    v306 = *((_QWORD *)this + 28);
    v491[0] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF **))(*(_QWORD *)v306 + 32))(&v510, v306, v491);
    if ((*(unsigned int (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1696))(this))
    {
      v53.n128_f32[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v510 + 168))(v510, 0);
      if (v53.n128_f32[0] > 0.0 && v54.n128_f32[0] > 0.0)
      {
        v308 = v511;
        v53.n128_f32[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v510 + 168))(v510, 0);
        v54.n128_f32[0] = (float)v308 * 0.015625;
        if (v54.n128_f32[0] >= v53.n128_f32[0])
        {
          v309 = HIDWORD(v511);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v510 + 168))(v510, 0);
          v53.n128_f32[0] = (float)v309 * 0.015625;
          if (v53.n128_f32[0] >= v54.n128_f32[0])
          {
            WebCore::CachedImage::brokenImage(v40, (uint64_t)v491);
            if (v491[0])
            {
              v310 = (_DWORD *)*((_QWORD *)v491[0] + 1);
              if (v310)
                ++v310[2];
            }
            else
            {
              v310 = 0;
            }
            v311 = (_DWORD *)v510;
            v510 = (uint64_t)v310;
            if (v311)
            {
              if (v311[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v311 + 8))(v311);
                v310 = (_DWORD *)v510;
              }
              else
              {
                --v311[2];
              }
            }
            v312 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v310 + 168))(v310, 0);
            v313 = v312 * (float)(1.0 / *(float *)&v491[1]);
            v315 = v314 * (float)(1.0 / *(float *)&v491[1]);
            v316 = (float)((float)((float)((float)(int)v511 * 0.015625) - v313) * 0.5) * 64.0;
            if (v316 >= 2147483650.0)
            {
              v318 = 0x7FFFFFFF;
            }
            else if ((int)v316 < 0 || v316 <= -2147483650.0)
            {
              v318 = 0;
            }
            else
            {
              v318 = (int)v316;
            }
            v319 = (float)((float)((float)((float)SHIDWORD(v511) * 0.015625) - v315) * 0.5) * 64.0;
            if (v319 >= 2147483650.0)
            {
              v320 = 0x7FFFFFFF;
            }
            else
            {
              v320 = (int)v319;
              if ((int)v319 < 0 || v319 <= -2147483650.0)
                v320 = 0;
            }
            v322 = v516 + v514;
            if (__OFADD__(v516, v514))
              v322 = (v516 >> 31) + 0x7FFFFFFF;
            v323 = v322 + v318;
            if (__OFADD__(v322, v318))
              v323 = (v322 >> 31) + 0x7FFFFFFF;
            v324 = v323 + v517;
            if (__OFADD__(v323, v517))
              v324 = (v323 >> 31) + 0x7FFFFFFF;
            v325 = v515 + v513;
            if (__OFADD__(v515, v513))
              v325 = (v515 >> 31) + 0x7FFFFFFF;
            v326 = v325 + v320;
            if (__OFADD__(v325, v320))
              v326 = (v325 >> 31) + 0x7FFFFFFF;
            v327 = v326 + v517;
            if (__OFADD__(v326, v517))
              v327 = (v326 >> 31) + 0x7FFFFFFF;
            LODWORD(v519[0]) = v324;
            HIDWORD(v519[0]) = v327;
            v328 = v510;
            v272 = __OFADD__(*(_DWORD *)a3, v324);
            v329 = *(_DWORD *)a3 + v324;
            if (v272)
              v329 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
            v330 = *((_DWORD *)a3 + 1);
            v272 = __OFADD__(v330, v327);
            v331 = v330 + v327;
            if (v272)
              v331 = (v330 >> 31) + 0x7FFFFFFF;
            v332 = WebCore::LayoutRect::LayoutRect<float,float,float,float>((int *)&v506, (float)v329 * 0.015625, (float)v331 * 0.015625, v313, v315);
            LODWORD(v499) = WebCore::snapRectToDevicePixels(v332, v40);
            HIDWORD(v499) = v333;
            v500 = (uint64_t *)__PAIR64__(v335, v334);
            v336 = WebCore::RenderElement::imageOrientation(this);
            WebCore::GraphicsContext::drawImage((uint64_t)v475, v328, (uint64_t)&v499, ((v336 & 0xF) << 12) | 0x221);
            v512 = 1;
            v337 = (unsigned int *)v491[0];
            v491[0] = 0;
            if (v337)
            {
              do
              {
                v338 = __ldaxr(v337);
                v339 = v338 - 1;
              }
              while (__stlxr(v339, v337));
              if (!v339)
              {
                atomic_store(1u, v337);
                WTF::fastFree((WTF *)v337, v307);
              }
            }
          }
        }
      }
    }
    v340 = *((_QWORD *)this + 27);
    if (!v340 || !*(_DWORD *)(v340 + 4))
    {
LABEL_529:
      result = v510;
      v510 = 0;
      if (!result)
        return result;
      goto LABEL_336;
    }
    v361 = (WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32);
    v362 = WebCore::FontCascade::metricsOfPrimaryFont(v361, v307);
    v363 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v449 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_582;
      case 3:
      case 5:
        LOBYTE(v363) = 3;
        goto LABEL_582;
      case 4:
        goto LABEL_583;
      default:
        LOBYTE(v363) = 0;
LABEL_582:
        v449 = v363;
LABEL_583:
        v509 = (v449 & 6) != 2;
        WebCore::Document::displayStringModifiedByEncoding(*(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), (WebCore::RenderImage *)((char *)this + 216), &v508);
        WebCore::RenderBlock::constructTextRun((uint64_t)&v508, (uint64_t)this + 80, 4, 3, (uint64_t)&v506);
        v364 = WebCore::FontCascade::width((uint64_t)v361, (uint64_t)&v506) * 64.0;
        if (v364 >= 2147483650.0 || v364 <= -2147483650.0)
        {
          if (v364 >= 2147483650.0)
          {
            v468 = 0x7FFFFFFF;
          }
          else if (v364 <= -2147483650.0)
          {
            v468 = 0x80000000;
          }
          else
          {
            v468 = (int)v364;
          }
          v505 = v468;
          v499 = &v509;
          v500 = &v511;
          v501 = &v512;
          v502 = v519;
          v503 = &v505;
          v504 = v362;
          if (!WebCore::RenderImage::paintReplaced(WebCore::PaintInfo &,WebCore::LayoutPoint const&)::$_0::operator()((uint64_t)&v499))
            goto LABEL_591;
          WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, (unint64_t *)v491);
          WebCore::GraphicsContext::setFillColor(v475, (const WebCore::Color *)v491);
          if (((unint64_t)v491[0] & 0x8000000000000) == 0)
            goto LABEL_589;
          v465 = (unsigned int *)((unint64_t)v491[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v469 = __ldaxr(v465);
            v467 = --v469 == 0;
          }
          while (__stlxr(v469, v465));
        }
        else
        {
          v505 = (int)v364;
          v499 = &v509;
          v500 = &v511;
          v501 = &v512;
          v502 = v519;
          v503 = &v505;
          v504 = v362;
          if (!WebCore::RenderImage::paintReplaced(WebCore::PaintInfo &,WebCore::LayoutPoint const&)::$_0::operator()((uint64_t)&v499))
            goto LABEL_591;
          WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, (unint64_t *)v491);
          WebCore::GraphicsContext::setFillColor(v475, (const WebCore::Color *)v491);
          if (((unint64_t)v491[0] & 0x8000000000000) == 0)
          {
LABEL_589:
            if (v509)
            {
              v491[0] = (WTF *)&v516;
              v491[1] = (WTF *)&v514;
              v492[0] = (WTF *)&v517;
              v492[1] = (WTF *)&v515;
              v493 = COERCE_DOUBLE(&v513);
              v494 = *(double *)&v362;
              v495 = (char *)this + 80;
              v496 = &v518;
              v497 = &v505;
              v498 = a3;
              v368 = WebCore::RenderImage::paintReplaced(WebCore::PaintInfo &,WebCore::LayoutPoint const&)::$_1::operator()((unsigned int **)v491);
              v490[0] = (float)(int)v368 * 0.015625;
              v490[1] = (float)SHIDWORD(v368) * 0.015625;
              (*(void (**)(WebCore::GraphicsContext *, WebCore::FontCascade *, _DWORD **, float *, _QWORD))(*(_QWORD *)v475 + 536))(v475, v361, &v506, v490, 0);
            }
            else
            {
              v396 = *(_DWORD *)(v362 + 48) + *(_DWORD *)(v362 + 44);
              v397 = *(_DWORD *)a3;
              v398 = *((_DWORD *)a3 + 1);
              v399 = v396 << 6;
              if (v396 < -33554432)
                v399 = 0x80000000;
              if (v396 > 0x1FFFFFF)
                v399 = 0x7FFFFFFF;
              v272 = __OFSUB__(v398, v399);
              v400 = v398 - v399;
              v401 = (v398 >> 31) + 0x7FFFFFFF;
              if (v272)
                v402 = v401;
              else
                v402 = v400;
              v403 = *(_QWORD *)v480;
              if (v396 >= 0)
                v404 = *(_DWORD *)(v362 + 48) + *(_DWORD *)(v362 + 44);
              else
                v404 = v396 + 1;
              v405 = (32 * v404) & 0xFFFFFFC0;
              if (v396 < -67108865)
                v405 = 0x80000000;
              if (v396 <= 0x3FFFFFF)
                v406 = v405;
              else
                v406 = 0x7FFFFFFF;
              v272 = __OFSUB__((((uint64_t)(*(_QWORD *)v480 << 32) >> 26) / 128), v406);
              v407 = ((uint64_t)(*(_QWORD *)v480 << 32) >> 26) / 128 - v406;
              if (v272)
                v407 = ((((uint64_t)(*(_QWORD *)v480 << 32) >> 26) / 128) >> 31) + 0x7FFFFFFF;
              v408 = v407 + v399;
              if (__OFADD__(v407, v399))
                v408 = (v407 >> 31) + 0x7FFFFFFF;
              v409 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
              v272 = __OFSUB__((_DWORD)v403, v408);
              v410 = v403 - v408;
              v411 = (v403 >> 31) + 0x7FFFFFFF;
              if (!v272)
                v411 = v410;
              if (((1 << v409) & 0x2A) == 0)
                v411 = v407;
              if (v409 <= 5)
                v407 = v411;
              v272 = __OFADD__(v407, v397);
              v412 = v407 + v397;
              v413 = (v407 >> 31) + 0x7FFFFFFF;
              if (!v272)
                v413 = v412;
              v414 = (float)v413 * 0.015625;
              v415 = (float)((float)v399 * 0.015625) + (float)((float)v402 * 0.015625);
              *(_OWORD *)v491 = xmmword_1968A14C0;
              *(_OWORD *)v492 = xmmword_1969F8310;
              v493 = (float)(v415 + v414);
              v494 = (float)(v415 - v414);
              (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)v475 + 656))(v475, v491);
              v417 = *(_DWORD *)(WebCore::FontCascade::metricsOfPrimaryFont(v361, v416) + 44);
              v418 = v417 << 6;
              if (v417 < -33554432)
                v418 = 0x80000000;
              if (v417 <= 0x1FFFFFF)
                v419 = v418;
              else
                v419 = 0x7FFFFFFF;
              v272 = __OFADD__(v402, v419);
              v420 = v402 + v419;
              if (v272)
                v420 = (v402 >> 31) + 0x7FFFFFFF;
              *(float *)v491 = v414;
              *((float *)v491 + 1) = (float)v420 * 0.015625;
              (*(void (**)(WebCore::GraphicsContext *, WebCore::FontCascade *, _DWORD **, WTF **, _QWORD))(*(_QWORD *)v475 + 536))(v475, v361, &v506, v491, 0);
              *(_OWORD *)v491 = xmmword_1969F8300;
              *(_OWORD *)v492 = xmmword_1968A14B0;
              v493 = (float)(v414 - v415);
              v494 = (float)(v415 + v414);
              (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)v475 + 656))(v475, v491);
            }
LABEL_591:
            v369 = v507;
            v507 = 0;
            if (v369)
            {
              if (*(_DWORD *)v369 == 2)
                WTF::StringImpl::destroy(v369, v366);
              else
                *(_DWORD *)v369 -= 2;
            }
            v370 = v508;
            v508 = 0;
            if (v370)
            {
              if (*(_DWORD *)v370 == 2)
                WTF::StringImpl::destroy(v370, v366);
              else
                *(_DWORD *)v370 -= 2;
            }
            goto LABEL_529;
          }
          v465 = (unsigned int *)((unint64_t)v491[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v466 = __ldaxr(v465);
            v467 = --v466 == 0;
          }
          while (__stlxr(v466, v465));
        }
        if (v467)
        {
          atomic_store(1u, v465);
          WTF::fastFree((WTF *)v465, v367);
        }
        goto LABEL_589;
    }
  }
  if (v19 >= 1 && v36 >= 1)
  {
    v472 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                             + 8)
                                                                                 + 528)
                                                                     + 8)
                                                         + 24)
                                             + 8)
                                 + 112)
                     + 680);
    v52 = *((_QWORD *)this + 28);
    LODWORD(v491[0]) = v37 >> 6;
    HIDWORD(v491[0]) = v38 >> 6;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF **))(*(_QWORD *)v52 + 32))(&v511, v52, v491);
    if (!v511
      || (v53.n128_f32[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v511 + 168))(v511, 0),
          v53.n128_f32[0] <= 0.0)
      || v54.n128_f32[0] <= 0.0)
    {
      if ((v472 & 0x4000000) != 0)
        WebCore::RenderImage::paintIncompleteImageOutline(this, (uint64_t)a2, *(_QWORD *)a3, v47);
      if (*((_WORD *)a2 + 8) == 8)
      {
        v426 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                         + 40)
                                                             + 8)
                                                 + 528)
                                     + 8)
                         + 24);
        if (v426)
          v427 = *(WebCore::Page **)(v426 + 8);
        else
          v427 = 0;
        v428 = *((_QWORD *)this + 24);
        if (v428)
        {
          v429 = *(WTF **)(v428 + 20);
          v480 = (_DWORD *)(v428 + 28);
        }
        else
        {
          v429 = 0;
        }
        v430 = *(WTF **)v480;
        v491[0] = v429;
        v491[1] = v430;
        WebCore::Page::addRelevantUnpaintedObject(v427, this, (const WebCore::LayoutRect *)v491);
      }
LABEL_335:
      result = v511;
      v511 = 0;
      if (!result)
        return result;
LABEL_336:
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)result + 8))(result, v53, v54);
      --*(_DWORD *)(result + 8);
      return result;
    }
    if ((*((_BYTE *)this + 22) & 1) == 0)
    {
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      goto LABEL_73;
    }
    v439 = (float)(*(int (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1352))(this) * 64.0;
    if (v439 < 2147483650.0 && v439 > -2147483650.0)
      goto LABEL_774;
    if (v439 >= 2147483650.0)
    {
      v58 = 0x7FFFFFFF;
    }
    else
    {
      if (v439 > -2147483650.0)
      {
LABEL_774:
        v58 = (int)v439;
        goto LABEL_775;
      }
      v58 = 0x80000000;
    }
LABEL_775:
    v440 = (float)(*(int (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1360))(this) * 64.0;
    if (v440 < 2147483650.0 && v440 > -2147483650.0)
      goto LABEL_777;
    if (v440 >= 2147483650.0)
    {
      v57 = 0x7FFFFFFF;
      goto LABEL_778;
    }
    if (v440 > -2147483650.0)
LABEL_777:
      v57 = (int)v440;
    else
      v57 = 0x80000000;
LABEL_778:
    v441 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) << 23;
    v55 = v57 & (v441 >> 31);
    v56 = v58 & (v441 >> 31);
LABEL_73:
    v59 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 920))(this);
    v61 = v60;
    v62 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 992))(this);
    v65 = v64 + HIDWORD(v61);
    if (__OFADD__(v64, HIDWORD(v61)))
      v65 = (v64 >> 31) + 0x7FFFFFFF;
    v66 = v65 + v56;
    if (__OFADD__(v65, v56))
      v66 = (v65 >> 31) + 0x7FFFFFFF;
    v67 = v62 + v59;
    if (__OFADD__((_DWORD)v62, (_DWORD)v59))
      v67 = (v62 >> 31) + 0x7FFFFFFF;
    v68 = v67 + v55;
    if (__OFADD__(v67, v55))
      v68 = (v67 >> 31) + 0x7FFFFFFF;
    v69 = *v480 - v64;
    if (__OFSUB__(*v480, v64))
      v69 = (*v480 >> 31) + 0x7FFFFFFF;
    v70 = v69 - HIDWORD(v62);
    if (__OFSUB__(v69, HIDWORD(v62)))
      v70 = (v69 >> 31) + 0x7FFFFFFF;
    v71 = v70 - v58;
    if (__OFSUB__(v70, v58))
      v71 = (v70 >> 31) + 0x7FFFFFFF;
    v72 = *((_DWORD *)this + 41);
    v73 = v72 - v62;
    if (__OFSUB__(v72, (_DWORD)v62))
      v73 = (v72 >> 31) + 0x7FFFFFFF;
    v74 = v73 - v63;
    if (__OFSUB__(v73, v63))
      v74 = (v73 >> 31) + 0x7FFFFFFF;
    v75 = v71 & ~(v71 >> 31);
    v76 = v74 - v57;
    if (__OFSUB__(v74, v57))
      v76 = (v74 >> 31) + 0x7FFFFFFF;
    v77 = v75 - HIDWORD(v61);
    if (__OFSUB__(v75, HIDWORD(v61)))
      v77 = 0x7FFFFFFF;
    v78 = v77 - HIDWORD(v59);
    if (__OFSUB__(v77, HIDWORD(v59)))
      v78 = (v77 >> 31) + 0x7FFFFFFF;
    v79 = v76 & ~(v76 >> 31);
    v80 = v78 - v56;
    if (__OFSUB__(v78, v56))
      v80 = (v78 >> 31) + 0x7FFFFFFF;
    v272 = __OFSUB__(v79, (_DWORD)v59);
    v81 = v79 - v59;
    if (v272)
      v81 = 0x7FFFFFFF;
    v82 = v81 - v61;
    if (__OFSUB__(v81, (_DWORD)v61))
      v82 = (v81 >> 31) + 0x7FFFFFFF;
    v473 = v82 - v55;
    if (__OFSUB__(v82, v55))
      v473 = (v82 >> 31) + 0x7FFFFFFF;
    v83 = *((_DWORD *)a3 + 1);
    v489 = v66 + *(_DWORD *)a3;
    if (__OFADD__(v66, *(_DWORD *)a3))
      v489 = (v66 >> 31) + 0x7FFFFFFF;
    v478 = v68 + v83;
    if (__OFADD__(v68, v83))
      v478 = (v68 >> 31) + 0x7FFFFFFF;
    v84 = *((_QWORD *)this + 25);
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if ((*((_BYTE *)this + 45) & 1) != 0)
      {
        v85 = 0;
      }
      else
      {
        v85 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
        if (v85 && (*((_WORD *)v85 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942B8AD8);
        }
      }
      v86 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      v87 = (*(_DWORD *)(v86 + 636) >> 18) & 3;
      if (v87)
      {
        v445 = *((_BYTE *)this + 96);
        if ((v445 & 0x1F) == 0xD || (v445 & 0x1Eu) - 14 <= 0xFFFFFFF5)
        {
          if (v87 == 2)
            goto LABEL_715;
          if (v85)
          {
            if (!WebCore::Element::isRelevantToUser(v85))
              goto LABEL_715;
            v86 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
          }
        }
      }
      v88 = *(_BYTE *)(v86 + 642) & 3;
      if (v88 != 1)
      {
        v89 = *(_BYTE *)(v86 + 462);
        if (v88 == 2)
          v89 |= 0x19u;
        if ((v89 & 4) == 0)
          goto LABEL_118;
      }
      if ((*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
        || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
      {
        goto LABEL_118;
      }
      v421 = *((unsigned __int8 *)this + 46);
      if ((v421 - 36) > 4)
      {
        if (v421 != 35)
        {
          v90 = v84;
          if (v421 != 63)
            goto LABEL_715;
LABEL_119:
          v91 = HIDWORD(v84);
          if ((*((_BYTE *)this + 21) & 0x10) == 0)
          {
            if ((WebCore::RenderElement::shouldApplySizeContainment(this) & 1) == 0)
              goto LABEL_127;
            goto LABEL_723;
          }
          if ((*((_BYTE *)this + 45) & 1) != 0)
          {
            v92 = 0;
          }
          else
          {
            v92 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
            if (v92 && (*((_WORD *)v92 + 14) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942B8AF8);
            }
          }
          v93 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
          v94 = (*(_DWORD *)(v93 + 636) >> 18) & 3;
          if (v94)
          {
            v446 = *((_BYTE *)this + 96);
            if ((v446 & 0x1F) == 0xD || (v446 & 0x1Eu) - 14 <= 0xFFFFFFF5)
            {
              if (v94 == 2)
                goto LABEL_723;
              if (v92)
              {
                if (!WebCore::Element::isRelevantToUser(v92))
                  goto LABEL_723;
                v93 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
              }
            }
          }
          v95 = *(_BYTE *)(v93 + 462);
          v96 = *(_BYTE *)(v93 + 642) & 3;
          if (v96 == 2)
          {
            v447 = 25;
          }
          else
          {
            if (v96 != 1)
            {
LABEL_126:
              if ((v95 & 0xC) == 0
                || (*((_BYTE *)this + 20) & 1) == 0
                && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
                || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
              {
                goto LABEL_127;
              }
              v423 = *((unsigned __int8 *)this + 46);
              if ((v423 - 36) <= 4)
              {
                if (v423 != 36)
                  goto LABEL_127;
                goto LABEL_723;
              }
              if (v423 == 35 || v423 == 63)
              {
LABEL_127:
                v471 = v47;
                LODWORD(v499) = v90;
                BYTE4(v499) = v91;
                BYTE5(v499) = BYTE1(v91);
                BYTE6(v499) = BYTE2(v91);
                HIBYTE(v499) = BYTE3(v91);
                if ((*((_BYTE *)this + 22) & 1) == 0)
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  v100 = 0;
                  goto LABEL_129;
                }
                v442 = (float)(*(int (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1352))(this) * 64.0;
                if (v442 < 2147483650.0 && v442 > -2147483650.0)
                  goto LABEL_781;
                if (v442 >= 2147483650.0)
                {
                  v100 = 0x7FFFFFFF;
                }
                else
                {
                  if (v442 > -2147483650.0)
                  {
LABEL_781:
                    v100 = (int)v442;
                    goto LABEL_782;
                  }
                  v100 = 0x80000000;
                }
LABEL_782:
                v443 = (float)(*(int (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1360))(this) * 64.0;
                if (v443 < 2147483650.0 && v443 > -2147483650.0)
                  goto LABEL_784;
                if (v443 >= 2147483650.0)
                {
                  v99 = 0x7FFFFFFF;
                  goto LABEL_785;
                }
                if (v443 > -2147483650.0)
LABEL_784:
                  v99 = (int)v443;
                else
                  v99 = 0x80000000;
LABEL_785:
                v444 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) << 23;
                v97 = v99 & (v444 >> 31);
                v98 = v100 & (v444 >> 31);
LABEL_129:
                v101 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 920))(this);
                v103 = v102;
                v104 = (*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 992))(this);
                v107 = v106 + HIDWORD(v103);
                if (__OFADD__(v106, HIDWORD(v103)))
                  v107 = (v106 >> 31) + 0x7FFFFFFF;
                v108 = v107 + v98;
                if (__OFADD__(v107, v98))
                  v108 = (v107 >> 31) + 0x7FFFFFFF;
                v109 = v104 + v101;
                if (__OFADD__((_DWORD)v104, (_DWORD)v101))
                  v109 = (v104 >> 31) + 0x7FFFFFFF;
                v110 = v109 + v97;
                if (__OFADD__(v109, v97))
                  v110 = (v109 >> 31) + 0x7FFFFFFF;
                v111 = *v480 - v106;
                if (__OFSUB__(*v480, v106))
                  v111 = (*v480 >> 31) + 0x7FFFFFFF;
                v112 = v111 - HIDWORD(v104);
                if (__OFSUB__(v111, HIDWORD(v104)))
                  v112 = (v111 >> 31) + 0x7FFFFFFF;
                v113 = v112 - v100;
                if (__OFSUB__(v112, v100))
                  v113 = (v112 >> 31) + 0x7FFFFFFF;
                v114 = *((_DWORD *)this + 41);
                v115 = v114 - v104;
                if (__OFSUB__(v114, (_DWORD)v104))
                  v115 = (v114 >> 31) + 0x7FFFFFFF;
                v116 = v115 - v105;
                if (__OFSUB__(v115, v105))
                  v116 = (v115 >> 31) + 0x7FFFFFFF;
                v117 = v113 & ~(v113 >> 31);
                v118 = v116 - v99;
                if (__OFSUB__(v116, v99))
                  v118 = (v116 >> 31) + 0x7FFFFFFF;
                v119 = v117 - HIDWORD(v103);
                if (__OFSUB__(v117, HIDWORD(v103)))
                  v119 = 0x7FFFFFFF;
                v120 = v119 - HIDWORD(v101);
                if (__OFSUB__(v119, HIDWORD(v101)))
                  v120 = (v119 >> 31) + 0x7FFFFFFF;
                v121 = v118 & ~(v118 >> 31);
                v122 = v120 - v98;
                if (__OFSUB__(v120, v98))
                  v122 = (v120 >> 31) + 0x7FFFFFFF;
                v272 = __OFSUB__(v121, (_DWORD)v101);
                v123 = v121 - v101;
                if (v272)
                  v123 = 0x7FFFFFFF;
                v124 = v123 - v103;
                if (__OFSUB__(v123, (_DWORD)v103))
                  v124 = (v123 >> 31) + 0x7FFFFFFF;
                v125.i32[0] = v80;
                v126 = v124 - v97;
                if (__OFSUB__(v124, v97))
                  v126 = (v124 >> 31) + 0x7FFFFFFF;
                v127 = v122 & ~(v122 >> 31);
                v128 = v126 & ~(v126 >> 31);
                if ((int)v499 < 1 || SHIDWORD(v499) < 1)
                {
                  LODWORD(v477) = v126 & ~(v126 >> 31);
                  LODWORD(v479) = v122 & ~(v122 >> 31);
LABEL_200:
                  v125.i32[1] = v473;
                  v53 = 0uLL;
                  v148 = *((_DWORD *)a3 + 1);
                  v149 = v108 + *(_DWORD *)a3;
                  if (__OFADD__(v108, *(_DWORD *)a3))
                    v149 = (v108 >> 31) + 0x7FFFFFFF;
                  v150 = v110 + v148;
                  if (__OFADD__(v110, v148))
                    v150 = (v110 >> 31) + 0x7FFFFFFF;
                  v53.n128_u64[0] = (unint64_t)vmax_s32(v125, 0);
                  v481 = v53;
                  if (v489 > v149)
                    goto LABEL_341;
                  v151 = v489 + v53.n128_u32[0];
                  if (__OFADD__(v489, v53.n128_u32[0]))
                    v151 = (v489 >> 31) + 0x7FFFFFFF;
                  v152 = v149 + v479;
                  if (__OFADD__(v149, (_DWORD)v479))
                    v152 = (v149 >> 31) + 0x7FFFFFFF;
                  if (v151 < v152 || v478 > v150)
                    goto LABEL_341;
                  v153 = v478 + v53.n128_u32[1];
                  if (__OFADD__(v478, v53.n128_u32[1]))
                    v153 = (v478 >> 31) + 0x7FFFFFFF;
                  v154 = v150 + v477;
                  if (__OFADD__(v150, (_DWORD)v477))
                    v154 = (v150 >> 31) + 0x7FFFFFFF;
                  if (v153 < v154)
                  {
LABEL_341:
                    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v475 + 96))(v475, 1);
                    v232.i64[0] = __PAIR64__(v478, v489);
                    v232.i64[1] = v481.n128_u64[0];
                    *(float32x4_t *)v491 = vmulq_f32(vcvtq_f32_s32(v232), (float32x4_t)vdupq_n_s32(0x3C800000u));
                    (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)v475 + 456))(v475, v491);
                    v155 = 0;
                  }
                  else
                  {
                    v155 = 1;
                  }
                  v156 = (double)v149 * 0.015625;
                  if (v156 < 0.0)
                    v53.n128_f64[0] = round((v156 + (double)-v149) * v40) / v40
                                    - (double)-v149;
                  else
                    v53.n128_f64[0] = round(v156 * v40) / v40;
                  v157 = (double)v150 * 0.015625;
                  if (v157 < 0.0)
                    v54.n128_f64[0] = round((v157 + (double)-v150) * v40) / v40
                                    - (double)-v150;
                  else
                    v54.n128_f64[0] = round(v157 * v40) / v40;
                  if (v149 <= 0)
                    v158 = -(-v149 & 0x3F);
                  else
                    v158 = v149 & 0x3F;
                  v159 = v158 + v479;
                  if (__OFADD__(v158, (_DWORD)v479))
                    v159 = (v158 >> 31) + 0x7FFFFFFF;
                  v160 = (double)v159 * 0.015625;
                  if (v160 < 0.0)
                    v161 = round((v160 + (double)-v159) * v40) / v40 - (double)-v159;
                  else
                    v161 = round(v160 * v40) / v40;
                  v162 = (double)v158 * 0.015625;
                  if (v162 < 0.0)
                    v163 = round((v162 + (double)-v158) * v40) / v40 - (double)-v158;
                  else
                    v163 = round(v162 * v40) / v40;
                  if (v150 <= 0)
                    v164 = -(-v150 & 0x3F);
                  else
                    v164 = v150 & 0x3F;
                  v165 = v164 + v477;
                  if (__OFADD__(v164, (_DWORD)v477))
                    v165 = (v164 >> 31) + 0x7FFFFFFF;
                  v166 = (double)v165 * 0.015625;
                  if (v166 < 0.0)
                    v167 = round((v166 + (double)-v165) * v40) / v40 - (double)-v165;
                  else
                    v167 = round(v166 * v40) / v40;
                  v168 = (double)v164 * 0.015625;
                  if (v168 < 0.0)
                    v169 = round((v168 + (double)-v164) * v40) / v40 - (double)-v164;
                  else
                    v169 = round(v168 * v40) / v40;
                  v54.n128_f32[0] = v54.n128_f64[0];
                  v53.n128_f32[0] = v53.n128_f64[0];
                  v170 = v161;
                  v171 = v163;
                  v172 = v170 - v171;
                  v173 = v167;
                  v174 = v169;
                  v499 = (BOOL *)__PAIR64__(v54.n128_u32[0], v53.n128_u32[0]);
                  *(float *)&v500 = v172;
                  *((float *)&v500 + 1) = v173 - v174;
                  v175 = (_QWORD *)*((_QWORD *)this + 28);
                  v176 = v175[3];
                  if (!v176)
                    goto LABEL_301;
                  if (!*(_QWORD *)(v176 + 8))
                    goto LABEL_301;
                  if (((*(uint64_t (**)(_QWORD *))(*v175 + 40))(v175) & 1) != 0)
                    goto LABEL_301;
                  v54.n128_u32[0] = v500;
                  if (*(float *)&v500 <= 0.0)
                    goto LABEL_301;
                  v53.n128_u32[0] = HIDWORD(v500);
                  if (*((float *)&v500 + 1) <= 0.0)
                    goto LABEL_301;
                  v177 = *((_QWORD *)this + 28);
                  v178 = floorf(*(float *)&v500);
                  if (v178 < 2147500000.0 && v178 > -2147500000.0)
                    goto LABEL_246;
                  if (v178 >= 2147500000.0)
                  {
                    v179 = 0x7FFFFFFF;
                    goto LABEL_247;
                  }
                  if (v178 > -2147500000.0)
LABEL_246:
                    v179 = (int)v178;
                  else
                    v179 = 0x80000000;
LABEL_247:
                  v180 = floorf(*((float *)&v500 + 1));
                  if (v180 < 2147500000.0 && v180 > -2147500000.0)
                    goto LABEL_249;
                  if (v180 >= 2147500000.0)
                  {
                    v181 = 0x7FFFFFFF00000000;
                  }
                  else
                  {
                    if (v180 > -2147500000.0)
                    {
LABEL_249:
                      v181 = (unint64_t)(int)v180 << 32;
                      goto LABEL_250;
                    }
                    v181 = 0x8000000000000000;
                  }
LABEL_250:
                  v491[0] = (WTF *)(v181 | v179);
                  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v177 + 32))(&v506, v177, v491);
                  if (v506)
                  {
                    v53.n128_f32[0] = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v506 + 168))(v506, 0);
                    v182 = 0;
                    if (v53.n128_f32[0] <= 0.0 || v54.n128_f32[0] <= 0.0)
                    {
LABEL_553:
                      v354 = v506;
                      v506 = 0;
                      if (v354)
                      {
                        if (v354[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v354 + 8))(v354);
                        else
                          --v354[2];
                      }
LABEL_302:
                      if ((v472 & 0x4000000) != 0
                        && (v182 != 3
                         || (v434 = *(_QWORD *)(*((_QWORD *)this + 28) + 24)) != 0
                         && (v435 = *(_QWORD *)(v434 + 8)) != 0
                         && (*(_WORD *)(v435 + 557) & 0x400) != 0))
                      {
                        WebCore::RenderImage::paintIncompleteImageOutline(this, (uint64_t)a2, *(_QWORD *)a3, v471);
                      }
                      v219 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
                      if (!v219)
                        goto LABEL_333;
                      v220 = *(_QWORD *)(v219 + 8);
                      if (!v220 || *((_WORD *)a2 + 8) != 8)
                        goto LABEL_333;
                      if (v149 <= v489)
                        v221 = v489;
                      else
                        v221 = v149;
                      if (v150 <= v478)
                        v222 = v478;
                      else
                        v222 = v150;
                      v223 = v149 + v479;
                      if (__OFADD__(v149, (_DWORD)v479))
                        v223 = (v149 >> 31) + 0x7FFFFFFF;
                      v224 = v489 + v481.n128_u32[0];
                      if (__OFADD__(v489, v481.n128_u32[0]))
                        v224 = (v489 >> 31) + 0x7FFFFFFF;
                      if (v224 < v223)
                        v223 = v224;
                      v225 = v150 + v477;
                      if (__OFADD__(v150, (_DWORD)v477))
                        v225 = (v150 >> 31) + 0x7FFFFFFF;
                      v53 = v481;
                      v226 = v478 + v481.n128_u32[1];
                      if (__OFADD__(v478, v481.n128_u32[1]))
                        v226 = (v478 >> 31) + 0x7FFFFFFF;
                      if (v226 < v225)
                        v225 = v226;
                      if (v221 >= v223 || v222 >= v225)
                      {
                        v223 = 0;
                        v225 = 0;
                        v221 = 0;
                        v222 = 0;
                      }
                      v227 = v223 - v221;
                      if (__OFSUB__(v223, v221))
                        v227 = (v223 >> 31) + 0x7FFFFFFF;
                      v228 = (v225 - v222);
                      if (__OFSUB__(v225, v222))
                        v228 = (v225 >> 31) + 0x7FFFFFFF;
                      LODWORD(v499) = v221;
                      HIDWORD(v499) = v222;
                      v500 = (uint64_t *)(v227 | (unint64_t)(v228 << 32));
                      v229 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
                      v230 = *(_QWORD *)(*(_QWORD *)(v229 + 528) + 8);
                      v231 = *(_QWORD *)(*(_QWORD *)(v230 + 24) + 8);
                      if (v182 == 1 || (*(_WORD *)(v220 + 557) & 0x400) != 0)
                      {
                        WebCore::Page::addRelevantUnpaintedObject(*(WebCore::Page **)(*(_QWORD *)(v230 + 24) + 8), this, (const WebCore::LayoutRect *)&v499);
LABEL_333:
                        if ((v155 & 1) == 0)
                          (*(void (**)(WebCore::GraphicsContext *, uint64_t, __n128, __n128))(*(_QWORD *)v475 + 104))(v475, 1, v53, v54);
                        goto LABEL_335;
                      }
                      if (!*(_BYTE *)(v231 + 768)
                        || (*(_WORD *)(v231 + 660) & 4) == 0
                        || v230 != *(_QWORD *)(v231 + 160))
                      {
                        goto LABEL_333;
                      }
                      v237 = *(_QWORD *)(v229 + 1944);
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v237 + 24) + 8) + 40) + 8)
                                    + 3382)
                        && WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*(_QWORD *)(v237 + 248)
                                                                                                + 328)))
                      {
                        v241 = 0;
                        v240 = *(_DWORD *)(v237 + 160);
                      }
                      else
                      {
                        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v237 + 248) + 64)
                                                                         + 832))(*(_QWORD *)(v237 + 248) + 64, 0, 1);
                        v240 = 0x80000000;
                        if (v238 >= -33554432)
                          v240 = v238 << 6;
                        if (v238 > 0x1FFFFFF)
                          v240 = 0x7FFFFFFF;
                        v241 = 0x7FFFFFFF00000000;
                        if (v239 <= 0x1FFFFFF)
                          v241 = (unint64_t)(v239 < -33554432) << 63;
                      }
                      v242 = v241 | v240;
                      if ((int)v242 <= 62720)
                        v243 = 0;
                      else
                        v243 = (((v242 << 6) + 0x3FFFC2C000) >> 7) & 0x7FFFFFFF;
                      v244 = (((v243 & 0x20u) + 32) >> 6) + (v243 >> 6);
                      v245 = v244 << 6;
                      if (v244 >> 25)
                        v245 = 0x7FFFFFFF;
                      if (v227 < 1 || (int)v228 < 1)
                        goto LABEL_333;
                      v246 = v245 + 62720;
                      if (__OFADD__(v245, 62720))
                        v246 = 0x7FFFFFFF;
                      if (v221 >= v246)
                        goto LABEL_333;
                      v247 = v221 + v227;
                      if (__OFADD__(v221, v227))
                        v247 = (v221 >> 31) + 0x7FFFFFFF;
                      if (v245 >= v247 || v222 > 83199)
                        goto LABEL_333;
                      v249 = v222 + v228;
                      if (__OFADD__(v222, (_DWORD)v228))
                        v249 = (v222 >> 31) + 0x7FFFFFFF;
                      if (v249 < 1)
                        goto LABEL_333;
                      if (v221 >= 0)
                        v250 = v221;
                      else
                        v250 = v221 + 63;
                      v251 = v221 - (v250 & 0xFFFFFFC0);
                      if (v222 >= 0)
                        v252 = v222;
                      else
                        v252 = v222 + 63;
                      v253 = v222 - (v252 & 0xFFFFFFC0);
                      v254 = v251 + v227;
                      if (__OFADD__(v251, v227))
                        v254 = (v251 >> 31) + 0x7FFFFFFF;
                      v255 = v250 >> 6;
                      v256 = v252 >> 6;
                      v257 = v155;
                      v258 = v253 + v228;
                      if (__OFADD__(v253, (_DWORD)v228))
                        v258 = (v253 >> 31) + 0x7FFFFFFF;
                      v259 = v253 + 32;
                      v260 = (v256 + (v259 >> 6));
                      v261 = v260 << 32;
                      v262 = v251 + 32;
                      v263 = (v255 + (v262 >> 6));
                      v264 = (v254 / 64 - (v262 >> 6) + ((int)(v254 - (v255 & 0xFFFFFFC0) + 32) >> 6));
                      v265 = (v258 / 64 - (v259 >> 6) + ((int)(v258 - (v262 & 0xFFFFFFC0) + 32) >> 6));
                      if ((WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderObject>(v231 + 680, this) & 1) != 0)
                      {
                        v266 = (WTF *)(v261 | v263);
                        v491[0] = (WTF *)(v261 | v263);
                        v491[1] = (WTF *)(v264 | (v265 << 32));
                        v492[0] = 0;
                        WebCore::Region::subtract((WTF *)(v231 + 744), (const WebCore::Region *)v491);
                        WebCore::Region::~Region((WebCore::Region *)v491, v436);
                      }
                      else
                      {
                        v266 = (WTF *)(v261 | v263);
                      }
                      v267 = (_DWORD)v263 << 6;
                      if ((int)v263 < -33554432)
                        v267 = 0x80000000;
                      v268 = (_DWORD)v264 << 6;
                      v269 = (_DWORD)v265 << 6;
                      v155 = v257;
                      if ((int)v264 > 0x1FFFFFF || (int)v265 > 0x1FFFFFF || (int)v263 > 0x1FFFFFF)
                      {
                        if ((int)v263 >= 0x2000000)
                          v450 = 0x7FFFFFFF;
                        else
                          v450 = v267;
                        if ((int)v260 >= -33554432)
                          v451 = (_DWORD)v260 << 6;
                        else
                          v451 = 0x80000000;
                        if ((int)v264 < -33554432)
                          v268 = 0x80000000;
                        if ((int)v264 > 0x1FFFFFF)
                          v268 = 0x7FFFFFFF;
                        if ((int)v265 < -33554432)
                          v269 = 0x80000000;
                        if ((int)v265 > 0x1FFFFFF)
                          v269 = 0x7FFFFFFF;
                        if (v268 < 1 || v269 <= 0)
                          goto LABEL_617;
                        v452 = __OFADD__(v450, v268);
                        v453 = v450 + v268;
                        v454 = __OFADD__(v450, v268);
                        v455 = v450 + v268;
                        if (v452)
                          v455 = (v450 >> 31) + 0x7FFFFFFF;
                        if (v243 < v455)
                        {
                          v456 = v243 + 62720;
                          v457 = __OFADD__(v243, 62720);
                          v458 = v243 + 62720;
                          if (__OFADD__(v243, 62720))
                            v458 = 0x7FFFFFFF;
                          if (v450 < v458)
                          {
                            v459 = v451 + v269;
                            v460 = __OFADD__(v451, v269);
                            v461 = v451 + v269;
                            if (__OFADD__(v451, v269))
                              v461 = (v451 >> 31) + 0x7FFFFFFF;
                            if (v461 >= 1 && v451 < 41600)
                            {
                              v462 = v453;
                              if (v454)
                                v462 = (v450 >> 31) + 0x7FFFFFFF;
                              if (v243 < v462)
                              {
                                if (v457)
                                  v456 = 0x7FFFFFFF;
                                if (v450 < v456)
                                {
                                  if (v460)
                                    v459 = (v451 >> 31) + 0x7FFFFFFF;
                                  if (v459 >= 41601)
                                    goto LABEL_437;
                                }
                              }
                            }
                          }
                        }
                        if (v454)
                          v453 = (v450 >> 31) + 0x7FFFFFFF;
                        if (v243 >= v453)
                          goto LABEL_617;
                        v463 = v243 + 62720;
                        if (__OFADD__(v243, 62720))
                          v463 = 0x7FFFFFFF;
                        if (v450 >= v463)
                          goto LABEL_617;
                        v464 = v451 + v269;
                        if (__OFADD__(v451, v269))
                          v464 = (v451 >> 31) + 0x7FFFFFFF;
                        if (v464 < 1 || v451 > 41599)
                        {
LABEL_617:
                          v295 = (WTF *)(v231 + 720);
LABEL_618:
                          v491[0] = v266;
                          v491[1] = (WTF *)(v264 | (v265 << 32));
LABEL_619:
                          v492[0] = 0;
                          WebCore::Region::unite(v295, (const WebCore::Region *)v491);
                          v376 = v492[0];
                          v492[0] = 0;
                          if (v376)
                          {
                            v377 = (WTF *)*((_QWORD *)v376 + 18);
                            if ((WTF *)((char *)v376 + 160) != v377 && v377)
                            {
                              *((_QWORD *)v376 + 18) = 0;
                              *((_DWORD *)v376 + 38) = 0;
                              WTF::fastFree(v377, v375);
                            }
                            v378 = *(WTF **)v376;
                            if ((WTF *)((char *)v376 + 16) != *(WTF **)v376 && v378)
                            {
                              *(_QWORD *)v376 = 0;
                              *((_DWORD *)v376 + 2) = 0;
                              WTF::fastFree(v378, v375);
                            }
                            WTF::fastFree(v376, v375);
                          }
                          v379 = (float)(unint64_t)WebCore::Region::totalArea((WebCore::Region *)(v231 + 696), v375);
                          v381 = WebCore::Region::totalArea((WebCore::Region *)(v231 + 720), v380);
                          v383 = WebCore::Region::totalArea((WebCore::Region *)(v231 + 744), v382);
                          v54.n128_f64[0] = (float)(v379 / 1274000.0);
                          v53.n128_u64[0] = 0x3FA999999999999ALL;
                          if (v54.n128_f64[0] > 0.05)
                          {
                            v54.n128_f64[0] = (float)((float)(unint64_t)v381 / 1274000.0);
                            if (v54.n128_f64[0] > 0.05)
                            {
                              v53.n128_f64[0] = (float)((float)(unint64_t)v383 / 1274000.0);
                              v54.n128_u64[0] = 0x3FA47AE147AE147BLL;
                              if (v53.n128_f64[0] < 0.04)
                              {
                                *(_BYTE *)(v231 + 768) = 0;
                                WebCore::Page::resetRelevantPaintedObjectCounter((WebCore::Page *)v231, v384);
                                v385 = *(_QWORD *)(v231 + 160);
                                if (v385)
                                {
                                  if (!*(_BYTE *)(v385 + 144))
                                  {
                                    v386 = (unsigned int *)(v385 + 8);
                                    do
                                      v387 = __ldaxr(v386);
                                    while (__stlxr(v387 + 1, v386));
                                    WebCore::LocalFrame::checkedLoader(v385, v491);
                                    WebCore::FrameLoader::didReachLayoutMilestone((uint64_t)v491[0], 4u);
                                    v388 = v491[0];
                                    v491[0] = 0;
                                    if (v388)
                                    {
                                      if (!*(_DWORD *)v388)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x1942B996CLL);
                                      }
                                      --*(_DWORD *)v388;
                                    }
                                    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v386);
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_333;
                        }
                      }
                      else
                      {
                        if ((int)v260 >= -33554432)
                          v270 = (_DWORD)v260 << 6;
                        else
                          v270 = 0x80000000;
                        if ((int)v264 >= -33554432)
                          v271 = (_DWORD)v264 << 6;
                        else
                          v271 = 0x80000000;
                        if ((int)v265 < -33554432)
                          v269 = 0x80000000;
                        if (v271 < 1 || v269 < 1)
                          goto LABEL_617;
                        v272 = __OFADD__(v267, v271);
                        v273 = v267 + v271;
                        v274 = v272;
                        v275 = v273;
                        if (v272)
                          v275 = (v267 >> 31) + 0x7FFFFFFF;
                        if (v243 < v275)
                        {
                          v276 = v243 + 62720;
                          v277 = __OFADD__(v243, 62720);
                          v278 = v243 + 62720;
                          if (__OFADD__(v243, 62720))
                            v278 = 0x7FFFFFFF;
                          if ((int)v267 < v278)
                          {
                            v279 = v270 + v269;
                            v280 = __OFADD__(v270, v269);
                            v281 = v270 + v269;
                            if (__OFADD__(v270, v269))
                              v281 = (v270 >> 31) + 0x7FFFFFFF;
                            if (v281 >= 1 && v270 <= 41599)
                            {
                              v282 = v273;
                              if (v274)
                                v282 = (v267 >> 31) + 0x7FFFFFFF;
                              if (v243 < v282)
                              {
                                if (v277)
                                  v276 = 0x7FFFFFFF;
                                if ((int)v267 < v276)
                                {
                                  if (v280)
                                    v279 = (v270 >> 31) + 0x7FFFFFFF;
                                  if (v279 >= 41601)
                                  {
LABEL_437:
                                    if ((int)v263 <= (int)v244)
                                      v283 = (((v243 & 0x20u) + 32) >> 6) + (v243 >> 6);
                                    else
                                      v283 = v263;
                                    if ((int)(v244 + 980) >= (int)v264 + (int)v263)
                                      v284 = v264 + v263;
                                    else
                                      v284 = v244 + 980;
                                    if ((int)v265 + (int)v260 >= 650)
                                      v285 = 650;
                                    else
                                      v285 = v265 + v260;
                                    if (v283 >= v284 || (v286 = v260 & ~((int)v260 >> 31), v286 >= v285))
                                    {
                                      v287 = 0;
                                      v286 = 0;
                                      v288 = 0;
                                      v285 = 0;
                                    }
                                    else
                                    {
                                      v287 = v283;
                                      v288 = v284;
                                    }
                                    v491[0] = (WTF *)__PAIR64__(v286, v287);
                                    LODWORD(v491[1]) = v288 - v287;
                                    HIDWORD(v491[1]) = v285 - v286;
                                    v492[0] = 0;
                                    WebCore::Region::unite((WTF *)(v231 + 696), (const WebCore::Region *)v491);
                                    v290 = v492[0];
                                    v492[0] = 0;
                                    if (v290)
                                    {
                                      v291 = (WTF *)*((_QWORD *)v290 + 18);
                                      if ((WTF *)((char *)v290 + 160) != v291 && v291)
                                      {
                                        *((_QWORD *)v290 + 18) = 0;
                                        *((_DWORD *)v290 + 38) = 0;
                                        WTF::fastFree(v291, v289);
                                      }
                                      v292 = *(WTF **)v290;
                                      if ((WTF *)((char *)v290 + 16) != *(WTF **)v290 && v292)
                                      {
                                        *(_QWORD *)v290 = 0;
                                        *((_DWORD *)v290 + 2) = 0;
                                        WTF::fastFree(v292, v289);
                                      }
                                      WTF::fastFree(v290, v289);
                                    }
                                    if ((int)v260 <= 650)
                                      v293 = 650;
                                    else
                                      v293 = v260;
                                    if ((int)v265 + (int)v260 >= 1300)
                                      v294 = 1300;
                                    else
                                      v294 = v265 + v260;
                                    if (v283 >= v284 || v293 >= v294)
                                    {
                                      v283 = 0;
                                      v293 = 0;
                                      v284 = 0;
                                      v294 = 0;
                                    }
                                    v295 = (WTF *)(v231 + 720);
                                    v491[0] = (WTF *)__PAIR64__(v293, v283);
                                    LODWORD(v491[1]) = v284 - v283;
                                    HIDWORD(v491[1]) = v294 - v293;
                                    goto LABEL_619;
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (v274)
                          v273 = (v267 >> 31) + 0x7FFFFFFF;
                        if (v243 >= v273)
                          goto LABEL_617;
                        v373 = v243 + 62720;
                        if (__OFADD__(v243, 62720))
                          v373 = 0x7FFFFFFF;
                        if ((int)v267 >= v373)
                          goto LABEL_617;
                        v374 = v270 + v269;
                        if (__OFADD__(v270, v269))
                          v374 = (v270 >> 31) + 0x7FFFFFFF;
                        if (v374 < 1 || v270 > 41599)
                          goto LABEL_617;
                      }
                      v295 = (WTF *)(v231 + 696);
                      goto LABEL_618;
                    }
                    if ((*((_BYTE *)this + 45) & 1) != 0)
                      goto LABEL_570;
                    v183 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                    if (!v183)
                      goto LABEL_570;
                    v184 = *(_WORD *)(v183 + 28);
                    if ((v184 & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1942B8F24);
                    }
                    if ((v184 & 0x10) != 0)
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v183 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
                        v185 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                      else
                        v185 = 0;
                    }
                    else
                    {
LABEL_570:
                      v185 = 0;
                    }
                    v186 = *((_QWORD *)this + 28);
                    v519[0] = 0;
                    (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v186 + 32))(v491, v186, v519);
                    v187 = v491[0];
                    v491[0] = 0;
                    if (v187)
                    {
                      if (*((_DWORD *)v187 + 2) == 1)
                        (*(void (**)(const WebCore::Image *))(*(_QWORD *)v187 + 8))(v187);
                      else
                        --*((_DWORD *)v187 + 2);
                    }
                    if (v185)
                      v188 = *(_BYTE *)(v185 + 256);
                    else
                      v188 = 2;
                    v189 = WebCore::RenderBoxModelObject::decodingModeForImageDraw(this, v187, a2);
                    if ((*((_BYTE *)this + 45) & 1) != 0)
                      goto LABEL_273;
                    v190 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                    if (!v190)
                      goto LABEL_273;
                    v191 = *(_WORD *)(v190 + 28);
                    if ((v191 & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1942B8F64);
                    }
                    if ((v191 & 0x10) != 0
                      && *(_QWORD *)(*(_QWORD *)(v190 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
                      && (v192 = *(_QWORD *)(*(_QWORD *)(v190 + 176) + 24)) != 0
                      && (v193 = *(_QWORD *)(v192 + 8)) != 0
                      && (*(char *)(v193 + 720) & 0x80000000) == 0)
                    {
                      v194 = 0;
                    }
                    else
                    {
LABEL_273:
                      v194 = (*(_DWORD *)(*((_QWORD *)this + 13) + 232) >> 15) & 1;
                    }
                    v195 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
                    v196 = *(float *)&v500 * 64.0;
                    if (v196 < 2147483650.0 && v196 > -2147483650.0)
                      goto LABEL_276;
                    if (v196 >= 2147483650.0)
                    {
                      v197 = 0x7FFFFFFF;
                    }
                    else
                    {
                      if (v196 > -2147483650.0)
                      {
LABEL_276:
                        v197 = (int)v196;
                        goto LABEL_277;
                      }
                      v197 = 0x80000000;
                    }
LABEL_277:
                    LODWORD(v491[0]) = v197;
                    v198 = *((float *)&v500 + 1) * 64.0;
                    if (v198 < 2147483650.0 && v198 > -2147483650.0)
                      goto LABEL_279;
                    if (v198 >= 2147483650.0)
                    {
                      v199 = 0x7FFFFFFF;
                      goto LABEL_280;
                    }
                    if (v198 > -2147483650.0)
LABEL_279:
                      v199 = (int)v198;
                    else
                      v199 = 0x80000000;
LABEL_280:
                    HIDWORD(v491[0]) = v199;
                    v200 = WebCore::RenderBoxModelObject::chooseInterpolationQuality((uint64_t)this, v195, v187, (uint64_t)v187, (const WebCore::LayoutSize *)v491);
                    v202 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                    v203 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 40)
                                                                                                 + 8)
                                                                                     + 528)
                                                                         + 8)
                                                             + 24)
                                                 + 8)
                                     + 112);
                    v204 = *(_QWORD *)(v203 + 680);
                    if (*(_BYTE *)(v203 + 247))
                      LODWORD(v203) = *(unsigned __int8 *)(v203 + 246) != 0;
                    else
                      v203 = (*(_QWORD *)(v203 + 696) >> 28) & 1;
                    v205 = (v204 >> 3) & 0x100000;
                    if ((_DWORD)v203)
                      v206 = 0x200000;
                    else
                      v206 = 0;
                    v207 = v205 & 0xFFF0FFFF | (32 * (v189 & 7)) | ((v188 & 0xF) << 8) | (v194 << 12) & 0xFFF0FFFF | ((v200 & 0xF) << 16) | v206 | 1;
                    if ((*((_BYTE *)this + 45) & 1) != 0)
                      goto LABEL_538;
                    v208 = *(_WORD *)(v202 + 28);
                    if ((v208 & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1942B8F44);
                    }
                    if ((v208 & 0x10) == 0
                      || *(_QWORD *)(*(_QWORD *)(v202 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
                    {
                      goto LABEL_538;
                    }
                    v209 = *(_DWORD *)(v202 + 24) + 2;
                    *(_DWORD *)(v202 + 24) = v209;
                    v210 = *(_QWORD *)(v202 + 280);
                    if (v210 && (v211 = *(_QWORD *)(v210 + 8)) != 0)
                    {
                      v212 = *(_QWORD *)(v211 + 104);
                      if (v212
                        && ((v213 = *(_DWORD *)(v212 + 4), (v213 & 1) != 0)
                          ? (v214 = *(_QWORD *)(v212 + 40), LODWORD(v215) = *(_DWORD *)(v212 + 52))
                          : (v214 = v212 + 32, LODWORD(v215) = v213 >> 5),
                            (_DWORD)v215))
                      {
                        v215 = v215;
                        v216 = (_QWORD *)(v214 + 8);
                        while (1)
                        {
                          v217 = *(v216 - 1);
                          if (v217 == WebCore::HTMLNames::typeAttr
                            || *(_QWORD *)(v217 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                            && *(_QWORD *)(v217 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
                          {
                            break;
                          }
                          v216 += 2;
                          if (!--v215)
                          {
                            v216 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                            break;
                          }
                        }
                      }
                      else
                      {
                        v216 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                      }
                      v218 = MEMORY[0x19AEA53F4](*v216, "image/x-apple-adaptive-glyph", 28);
                      v209 = *(_DWORD *)(v202 + 24);
                    }
                    else
                    {
                      v218 = 0;
                    }
                    v341 = v209 - 2;
                    if (v341)
                    {
                      *(_DWORD *)(v202 + 24) = v341;
                      if ((v218 & 1) == 0)
                        goto LABEL_538;
                    }
                    else if ((*(_WORD *)(v202 + 30) & 0x400) != 0)
                    {
                      if (!v218)
                        goto LABEL_538;
                    }
                    else
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v202, v201);
                      if ((v218 & 1) == 0)
                        goto LABEL_538;
                    }
                    v342 = *((_QWORD *)a2 + 10);
                    v343 = (WebCore::Image *)v506;
                    v344 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32), v201);
                    v182 = WebCore::GraphicsContext::drawMultiRepresentationHEIC(v342, v343, v344, (uint64_t)&v499, v207);
                    if (v182)
                    {
LABEL_539:
                      if (v182 == 1)
                      {
                        v349 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
                        if (v349)
                          v350 = *(WebCore::CachedImage **)(v349 + 8);
                        else
                          v350 = 0;
                        WebCore::CachedImage::addClientWaitingForAsyncDecoding(v350, this);
                      }
                      if (v185)
                      {
                        v351 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v185 + 40) + 8) + 680);
                        if (((*(unsigned int *)(v351 + 720) | (unint64_t)((uint64_t)*(char *)(v351 + 724) << 32)) & 0x8000000000000000) != 0)
                        {
                          v355 = *(_QWORD *)(v185 + 32);
                          if (v355)
                          {
                            if ((~*(unsigned __int16 *)(v355 + 28) & 0x18) == 0)
                            {
                              v356 = *(_QWORD *)(*(_QWORD *)(v355 + 96) + 24);
                              v357 = *(_QWORD *)(WebCore::HTMLNames::aTag + 24);
                              if (v356 == v357
                                || v356 == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
                                && (v371 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v355 + 40) + 8) + 680),
                                    ((*(unsigned int *)(v371 + 720) | (unint64_t)((uint64_t)*(char *)(v371 + 724) << 32)) & 0x8000000000000000) != 0)
                                && (v355 = *(_QWORD *)(v355 + 32)) != 0
                                && (~*(unsigned __int16 *)(v355 + 28) & 0x18) == 0
                                && *(_QWORD *)(*(_QWORD *)(v355 + 96) + 24) == v357)
                              {
                                isSystemPreviewLink = WebCore::HTMLAnchorElement::isSystemPreviewLink((WebCore::HTMLAnchorElement *)v355);
                                if (v182 == 3 && isSystemPreviewLink)
                                {
                                  v359 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v185 + 40) + 8) + 680);
                                  if (((*(unsigned int *)(v359 + 720) | (unint64_t)((uint64_t)*(char *)(v359 + 724) << 32)) & 0x8000000000000000) != 0)
                                  {
                                    {
                                      v360 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                                    }
                                    else
                                    {
                                      v448 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                                      *(_OWORD *)(v448 + 40) = 0u;
                                      *(_OWORD *)(v448 + 24) = 0u;
                                      v360 = &off_1E335BC30;
                                      *(_QWORD *)v448 = &off_1E335BC30;
                                    }
                                    ((void (*)(uint64_t *, _DWORD *, WebCore::PaintInfo *, BOOL **))v360[62])(&WebCore::RenderTheme::singleton(void)::theme, v506, a2, &v499);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((*((_BYTE *)this + 45) & 1) == 0)
                      {
                        v352 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                        if (v352)
                        {
                          if ((*(_WORD *)(v352 + 28) & 8) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1942B8F84);
                          }
                          if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10)) & 1) == 0)
                          {
                            if ((*((_BYTE *)this + 45) & 1) != 0)
                            {
                              v353 = 0;
                            }
                            else
                            {
                              v353 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                              if (v353 && (*(_WORD *)(v353 + 28) & 8) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1942B9094);
                              }
                            }
                            WebCore::Node::setHasEverPaintedImages(v353, 1);
                          }
                        }
                      }
                      goto LABEL_553;
                    }
LABEL_538:
                    v345 = *((_QWORD *)a2 + 10);
                    v346 = v506;
                    *(float *)&v347 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v506 + 168))(v506, (unsigned __int16)v207 >> 12);
                    v491[0] = 0;
                    v491[1] = (WTF *)__PAIR64__(v348, v347);
                    v182 = (*(uint64_t (**)(uint64_t, _DWORD *, BOOL **, WTF **, uint64_t))(*(_QWORD *)v345
                                                                                                  + 360))(v345, v346, &v499, v491, *(_QWORD *)&v207 & 0xFFFFFFLL);
                    goto LABEL_539;
                  }
LABEL_301:
                  v182 = 0;
                  goto LABEL_302;
                }
                v129 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 151) & 7;
                if ((v129 - 1) >= 2)
                {
                  if (v129 == 3)
                    goto LABEL_746;
                  LODWORD(v479) = v122 & ~(v122 >> 31);
                  LODWORD(v477) = v126 & ~(v126 >> 31);
                  if (v129 != 4)
                    goto LABEL_166;
                }
                v488 = v125.i32[0];
                v491[0] = (WTF *)((v128 << 32) | v127);
                v479 = WebCore::LayoutSize::fitToAspectRatio((int32x2_t *)v491, (int32x2_t *)&v499, v129 == 2);
                v477 = HIDWORD(v479);
                if (v129 != 4)
                {
                  v125.i32[0] = v488;
LABEL_166:
                  v130 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
                  LODWORD(v491[0]) = 0;
                  BYTE6(v491[0]) = 0;
                  BYTE4(v491[0]) = *(_BYTE *)(v130 + 132);
                  v131 = BYTE4(v491[0]);
                  BYTE5(v491[0]) = *(_BYTE *)(v130 + 133);
                  if (BYTE4(v491[0]) - 2 >= 9)
                  {
                    if (BYTE4(v491[0]) == 11)
                    {
                      LODWORD(v491[0]) = *(_DWORD *)(v130 + 128);
                      v372 = LODWORD(v491[0]);
                      v482 = v125.i32[0];
                      WebCore::Length::ref((int *)v491);
                      v132 = v372;
                      v125.i32[0] = v482;
                      goto LABEL_169;
                    }
                    v132 = 0;
                    v134 = 1;
                    v133 = 0.0;
                  }
                  else
                  {
                    BYTE6(v491[0]) = *(_BYTE *)(v130 + 134);
                    if (!BYTE6(v491[0]))
                    {
                      v132 = *(unsigned int *)(v130 + 128);
                      LODWORD(v491[0]) = *(_DWORD *)(v130 + 128);
LABEL_169:
                      v133 = *(float *)&v132;
                      v134 = 1;
                      goto LABEL_172;
                    }
                    v134 = 0;
                    v133 = *(float *)(v130 + 128);
                    *(float *)v491 = v133;
                    v132 = LODWORD(v133);
                  }
LABEL_172:
                  LODWORD(v491[1]) = 0;
                  BYTE6(v491[1]) = 0;
                  BYTE4(v491[1]) = *(_BYTE *)(v130 + 140);
                  v135 = BYTE4(v491[1]);
                  BYTE5(v491[1]) = *(_BYTE *)(v130 + 141);
                  if (BYTE4(v491[1]) - 2 >= 9)
                  {
                    if (BYTE4(v491[1]) != 11)
                    {
                      v136 = 0;
                      v138 = 1;
                      v137 = 0.0;
                      goto LABEL_178;
                    }
                    v136 = (void *)*(unsigned int *)(v130 + 136);
                    LODWORD(v491[1]) = (_DWORD)v136;
                    v483 = v125.i32[0];
                    v470 = v132;
                    WebCore::Length::ref((int *)&v491[1]);
                    v132 = v470;
                    v125.i32[0] = v483;
                  }
                  else
                  {
                    BYTE6(v491[1]) = *(_BYTE *)(v130 + 142);
                    if (BYTE6(v491[1]))
                    {
                      v138 = 0;
                      v137 = *(float *)(v130 + 136);
                      *(float *)&v491[1] = v137;
                      v136 = (void *)LODWORD(v137);
                      goto LABEL_178;
                    }
                    v136 = (void *)*(unsigned int *)(v130 + 136);
                    LODWORD(v491[1]) = (_DWORD)v136;
                  }
                  v137 = *(float *)&v136;
                  v138 = 1;
LABEL_178:
                  v139 = v127 - v479;
                  if (__OFSUB__((_DWORD)v127, (_DWORD)v479))
                    v139 = 0x7FFFFFFF;
                  if (v131 == 4)
                  {
                    v140 = (float)SLODWORD(v133);
                    if (!v134)
                      v140 = v133;
LABEL_183:
                    v141 = v140 * 64.0;
                    if (v141 < 2147483650.0 && v141 > -2147483650.0)
                      goto LABEL_185;
                    if (v141 >= 2147483650.0)
                    {
                      v142 = 0x7FFFFFFF;
                      goto LABEL_186;
                    }
                    if (v141 > -2147483650.0)
LABEL_185:
                      v142 = (int)v141;
                    else
                      v142 = 0x80000000;
LABEL_186:
                    v143 = v128 - v477;
                    if (__OFSUB__((_DWORD)v128, (_DWORD)v477))
                      v143 = 0x7FFFFFFF;
                    if (v135 == 4)
                    {
                      v144 = (float)SLODWORD(v137);
                      if (!v138)
                        v144 = v137;
LABEL_191:
                      v145 = v144 * 64.0;
                      if (v145 < 2147483650.0 && v145 > -2147483650.0)
                        goto LABEL_193;
                      if (v145 >= 2147483650.0)
                      {
                        v146 = 0x7FFFFFFF;
                        goto LABEL_194;
                      }
                      if (v145 > -2147483650.0)
LABEL_193:
                        v146 = (int)v145;
                      else
                        v146 = 0x80000000;
LABEL_194:
                      if (__OFADD__(v108, v142))
                        v108 = (v108 >> 31) + 0x7FFFFFFF;
                      else
                        v108 += v142;
                      v272 = __OFADD__(v110, v146);
                      v147 = v110 + v146;
                      if (v272)
                        v110 = (v110 >> 31) + 0x7FFFFFFF;
                      else
                        v110 = v147;
                      if (v135 == 11)
                      {
                        v389 = v132;
                        v484 = v125.i32[0];
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v136);
                        v125.i32[0] = v484;
                        v132 = v389;
                      }
                      if (v131 == 11)
                      {
                        v485 = v125.i32[0];
                        {
                          WebCore::calculationValues(void)::map = 1;
                          qword_1ECE90C98 = 0;
                        }
                        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v132);
                        v125.i32[0] = v485;
                      }
                      goto LABEL_200;
                    }
                    if (v135 == 3)
                    {
                      v234 = (float)SLODWORD(v137);
                      if (!v138)
                        v234 = v137;
                      v144 = (float)(v234 * (float)((float)v143 * 0.015625)) / 100.0;
                      goto LABEL_191;
                    }
                    if (v135 != 11)
                    {
                      v146 = 0;
                      goto LABEL_194;
                    }
                    v393 = v132;
                    v487 = v125.i32[0];
                    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v491[1], (float)v143 * 0.015625);
                    v395 = v394 * 64.0;
                    if (v395 < 2147483650.0 && v395 > -2147483650.0)
                      goto LABEL_653;
                    if (v395 >= 2147483650.0)
                    {
                      v146 = 0x7FFFFFFF;
                      goto LABEL_654;
                    }
                    if (v395 > -2147483650.0)
LABEL_653:
                      v146 = (int)v395;
                    else
                      v146 = 0x80000000;
LABEL_654:
                    v125.i32[0] = v487;
                    v132 = v393;
                    goto LABEL_194;
                  }
                  if (v131 == 3)
                  {
                    v233 = (float)SLODWORD(v133);
                    if (!v134)
                      v233 = v133;
                    v140 = (float)(v233 * (float)((float)v139 * 0.015625)) / 100.0;
                    goto LABEL_183;
                  }
                  if (v131 != 11)
                  {
                    v142 = 0;
                    goto LABEL_186;
                  }
                  v390 = v132;
                  v486 = v125.i32[0];
                  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v491, (float)v139 * 0.015625);
                  v392 = v391 * 64.0;
                  if (v392 < 2147483650.0 && v392 > -2147483650.0)
                    goto LABEL_649;
                  if (v392 >= 2147483650.0)
                  {
                    v142 = 0x7FFFFFFF;
                    goto LABEL_650;
                  }
                  if (v392 > -2147483650.0)
LABEL_649:
                    v142 = (int)v392;
                  else
                    v142 = 0x80000000;
LABEL_650:
                  v125.i32[0] = v486;
                  v132 = v390;
                  goto LABEL_186;
                }
                v125.i32[0] = v488;
                if ((int)v499 >= (int)v479)
                  goto LABEL_166;
LABEL_746:
                LODWORD(v479) = (_DWORD)v499;
                LODWORD(v477) = HIDWORD(v499);
                goto LABEL_166;
              }
LABEL_723:
              v424 = WebCore::RenderBox::explicitIntrinsicInnerHeight(this);
              if ((v424 & 0xFF00000000) != 0)
                LODWORD(v91) = v424;
              else
                LODWORD(v91) = 0;
              goto LABEL_127;
            }
            v447 = 21;
          }
          v95 |= v447;
          goto LABEL_126;
        }
LABEL_118:
        v90 = v84;
        goto LABEL_119;
      }
      v90 = v84;
      if (v421 != 36)
        goto LABEL_119;
    }
    else
    {
      v90 = *((_QWORD *)this + 25);
      if ((WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this) & 1) == 0)
        goto LABEL_119;
    }
LABEL_715:
    v422 = WebCore::RenderBox::explicitIntrinsicInnerWidth(this);
    if ((v422 & 0xFF00000000) != 0)
      v90 = v422;
    else
      v90 = 0;
    goto LABEL_119;
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::borderBottom(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  float v2;
  double v3;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 196) & 0xE) != 0)
  {
    v6 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v6 + 5) && *(_BYTE *)(v6 + 68) == 4)
    {
      if (*(_BYTE *)(v6 + 70))
        v2 = *(float *)(v6 + 64);
      else
        v2 = (float)*(int *)(v6 + 64);
    }
    else
    {
      v2 = *(float *)(v1 + 192);
    }
  }
  v3 = v2 * 64.0;
  if (v3 < 2147483650.0 && v3 > -2147483650.0)
    return (int)v3;
  if (v3 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v3 > -2147483650.0)
    return (int)v3;
  return 0x80000000;
}

uint64_t WebCore::RenderBoxModelObject::borderRight(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  float v2;
  double v3;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 148) & 0xE) != 0)
  {
    v6 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v6 + 5) && *(_BYTE *)(v6 + 60) == 4)
    {
      if (*(_BYTE *)(v6 + 62))
        v2 = *(float *)(v6 + 56);
      else
        v2 = (float)*(int *)(v6 + 56);
    }
    else
    {
      v2 = *(float *)(v1 + 144);
    }
  }
  v3 = v2 * 64.0;
  if (v3 < 2147483650.0 && v3 > -2147483650.0)
    return (int)v3;
  if (v3 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v3 > -2147483650.0)
    return (int)v3;
  return 0x80000000;
}

float WebCore::BitmapImage::size(uint64_t a1, unsigned __int8 a2)
{
  return (float)(*(int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 176))(*(_QWORD *)(a1 + 64), a2);
}

uint64_t WebCore::Node::setHasEverPaintedImages(uint64_t this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ElementRareData *v8;
  void *v9;

  v3 = *(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    v4 = this;
    if ((*(_WORD *)(this + 28) & 8) != 0)
    {
      this = WTF::fastCompactMalloc((WTF *)0x100);
      v6 = this;
      *(_QWORD *)(this + 8) = 0;
      *(_QWORD *)(this + 16) = 0;
      *(_QWORD *)this = 0;
      *(_BYTE *)(this + 24) = 1;
      *(_DWORD *)(this + 36) = 0;
      *(_DWORD *)(this + 40) = 0;
      *(_QWORD *)(this + 25) = 0;
      *(_BYTE *)(this + 33) = 0;
      *(_OWORD *)(this + 48) = 0u;
      *(_OWORD *)(this + 64) = 0u;
      *(_OWORD *)(this + 80) = 0u;
      *(_OWORD *)(this + 96) = 0u;
      *(_OWORD *)(this + 112) = 0u;
      *(_OWORD *)(this + 128) = 0u;
      *(_QWORD *)(this + 144) = 0x3F0000003FLL;
      *(_OWORD *)(this + 152) = 0u;
      *(_OWORD *)(this + 168) = 0u;
      *(_OWORD *)(this + 184) = 0u;
      *(_OWORD *)(this + 200) = 0u;
      *(_OWORD *)(this + 216) = 0u;
      *(_OWORD *)(this + 232) = 0u;
      *(_BYTE *)(this + 248) = 0;
    }
    else
    {
      this = WTF::fastCompactMalloc((WTF *)0x20);
      v6 = this;
      *(_QWORD *)(this + 8) = 0;
      *(_QWORD *)(this + 16) = 0;
      *(_QWORD *)this = 0;
      *(_WORD *)(this + 24) = 0;
    }
    v7 = *(_QWORD *)(v4 + 72);
    v8 = (WebCore::ElementRareData *)(v7 & 0xFFFFFFFFFFFFLL);
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x18))
        WebCore::ElementRareData::~ElementRareData(v8, v5);
      else
        std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v8, v5);
      this = WTF::fastFree(v8, v9);
      v7 = *(_QWORD *)(v4 + 72);
    }
    *(_QWORD *)(v4 + 72) = v7 & 0xFFFF000000000000 | v6;
    v3 = v6 & 0xFFFFFFFFFFFFLL;
  }
  *(_BYTE *)(v3 + 25) = a2;
  return this;
}

uint64_t WebCore::ScrollingTreeFrameScrollingNode::commitStateBeforeChildren(WebCore::ScrollingTreeFrameScrollingNode *this, const WebCore::ScrollingStateNode *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BYTE v9[20];

  v4 = WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren(this, a2);
  if (*((unsigned __int8 *)a2 + 16) < 2u)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 != 1)
    return v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0x400000) != 0)
  {
    *((_DWORD *)this + 97) = *((_DWORD *)a2 + 213);
    if ((v6 & 0x10000000) == 0)
    {
LABEL_7:
      if ((v6 & 0x20000000) == 0)
        goto LABEL_8;
      goto LABEL_22;
    }
  }
  else if ((v6 & 0x10000000) == 0)
  {
    goto LABEL_7;
  }
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 215);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_8:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 216);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  *((_BYTE *)this + 404) = *((_BYTE *)a2 + 868);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  *((_DWORD *)this + 98) = *((_DWORD *)a2 + 214);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  *((_BYTE *)this + 406) = *((_BYTE *)a2 + 870);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  *((_BYTE *)this + 405) = *((_BYTE *)a2 + 869);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_13:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_27:
  *(_OWORD *)((char *)this + 344) = *(_OWORD *)((char *)a2 + 808);
  if ((v6 & 0x4000000000) != 0)
LABEL_14:
    *((_QWORD *)this + 45) = *((_QWORD *)a2 + 103);
LABEL_15:
  if ((v6 & 0x8000000000) == 0)
  {
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_17;
LABEL_30:
    v8 = *((_DWORD *)a2 + 212);
    *((_QWORD *)this + 47) = *((_QWORD *)a2 + 105);
    *((_BYTE *)this + 384) = v8;
    if ((*((_QWORD *)a2 + 5) & 0x2000000000) == 0)
      return v5;
    goto LABEL_18;
  }
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 104);
  if ((v6 & 0x10000000000) != 0)
    goto LABEL_30;
LABEL_17:
  if ((v6 & 0x2000000000) != 0)
  {
LABEL_18:
    v9[0] = 0;
    v9[16] = 0;
    (*(void (**)(WebCore::ScrollingTreeFrameScrollingNode *, _BYTE *))(*(_QWORD *)this + 160))(this, v9);
  }
  return v5;
}

uint64_t WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren(WebCore::ScrollingTreeScrollingNode *this, const WebCore::ScrollingStateNode *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v8;
  _BOOL4 isRubberBandInProgressForNode;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  const void *v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  const void *v21;
  int v22;

  v2 = *((unsigned __int8 *)a2 + 16);
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0)
    return 0;
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 2) != 0)
  {
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 16);
    v8 = *((_QWORD *)a2 + 5);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  isRubberBandInProgressForNode = WebCore::ScrollingTree::isRubberBandInProgressForNode(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7));
  v10 = (char *)this + 112;
  if (!isRubberBandInProgressForNode)
    v10 = (char *)a2 + 136;
  *((_QWORD *)this + 15) = *(_QWORD *)v10;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 17);
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_15;
  }
LABEL_14:
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 18);
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0x10) == 0)
    goto LABEL_19;
LABEL_15:
  v11 = *((_QWORD *)a2 + 19);
  *((_QWORD *)this + 17) = v11;
  v8 = *((_QWORD *)a2 + 5);
  if (*((_BYTE *)this + 260) && ((v8 & 0x80) == 0 || *((_BYTE *)a2 + 452) == 2))
  {
    *((_QWORD *)this + 18) = v11;
    v8 = *((_QWORD *)a2 + 5);
  }
LABEL_19:
  if ((v8 & 0x20) != 0)
  {
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 20);
    v8 = *((_QWORD *)a2 + 5);
    if ((v8 & 0x100) == 0)
    {
LABEL_21:
      if ((v8 & 0x200) == 0)
        goto LABEL_22;
      goto LABEL_28;
    }
  }
  else if ((v8 & 0x100) == 0)
  {
    goto LABEL_21;
  }
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 168);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::ScrollingTreeScrollingNode *)((char *)this + 168), (unsigned int *)a2 + 44);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::ScrollingTreeScrollingNode *)((char *)this + 184), (unsigned int *)a2 + 48);
  WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::ScrollingTreeScrollingNode *)((char *)this + 200), (const WebCore::ScrollingStateNode *)((char *)a2 + 208));
  WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::ScrollingTreeScrollingNode *)((char *)this + 216), (const WebCore::ScrollingStateNode *)((char *)a2 + 224));
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0x200) == 0)
  {
LABEL_22:
    if ((v8 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
LABEL_28:
  v12 = *((_QWORD *)a2 + 30);
  *((_DWORD *)this + 58) = v12;
  *((_BYTE *)this + 236) = BYTE4(v12);
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0x400) == 0)
  {
LABEL_23:
    if ((v8 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  v13 = *((_QWORD *)a2 + 31);
  *((_DWORD *)this + 60) = v13;
  *((_BYTE *)this + 244) = BYTE4(v13);
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0x40) == 0)
  {
LABEL_24:
    if ((v8 & 0x1000) == 0)
      goto LABEL_37;
LABEL_31:
    v15 = *((_QWORD *)a2 + 32);
    if (v15)
      ++*(_DWORD *)(v15 + 8);
    v16 = (_DWORD *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v15;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
      else
        --v16[2];
    }
    v17 = (const void *)*((_QWORD *)a2 + 33);
    *((_QWORD *)this + 34) = v17;
    *(_OWORD *)((char *)this + 280) = *((_OWORD *)a2 + 17);
    v18 = *((_DWORD *)a2 + 72);
    *((_DWORD *)this + 74) = v18;
    if (v18 == 2 && v17)
      CFRetain(v17);
    goto LABEL_37;
  }
LABEL_30:
  v14 = *(_QWORD *)((char *)a2 + 438);
  *((_DWORD *)this + 64) = *(_DWORD *)((char *)a2 + 446);
  *((_QWORD *)this + 31) = v14;
  if ((*((_QWORD *)a2 + 5) & 0x1000) != 0)
    goto LABEL_31;
LABEL_37:
  if ((*((_BYTE *)a2 + 41) & 0x20) != 0)
  {
    v19 = *((_QWORD *)a2 + 37);
    if (v19)
      ++*(_DWORD *)(v19 + 8);
    v20 = (_DWORD *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = v19;
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
      else
        --v20[2];
    }
    v21 = (const void *)*((_QWORD *)a2 + 38);
    *((_QWORD *)this + 39) = v21;
    *((_OWORD *)this + 20) = *(_OWORD *)((char *)a2 + 312);
    v22 = *((_DWORD *)a2 + 82);
    *((_DWORD *)this + 84) = v22;
    if (v22 == 2)
    {
      if (v21)
        CFRetain(v21);
    }
  }
  return 1;
}

WTF *WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  WTF *v12;
  __int128 *v13;
  WTF *v14;
  __int128 *v15;
  __int128 v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *v23;

  v2 = (uint64_t)result;
  if (a2 == (unsigned int *)result)
    return (WTF *)v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 <= v5)
  {
    v8 = *((_DWORD *)result + 2);
    if (v5 <= v8)
    {
      LODWORD(v5) = *((_DWORD *)result + 3);
      goto LABEL_21;
    }
    if (v8)
    {
      v9 = *(WTF **)result;
      if ((_DWORD)v4)
      {
        v10 = 40 * v4;
        v11 = (char *)v9 + 24;
        do
        {
          v12 = *(WTF **)v11;
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)v11 = 0;
            *((_DWORD *)v11 + 2) = 0;
            WTF::fastFree(v12, a2);
          }
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        *(_DWORD *)(v2 + 12) = 0;
        v9 = *(WTF **)v2;
      }
      if (v9)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
        WTF::fastFree(v9, a2);
      }
    }
    result = (WTF *)WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v2, a2[3]);
    LODWORD(v5) = *(_DWORD *)(v2 + 12);
  }
  else
  {
    v6 = 40 * v4 - 40 * v5;
    v7 = *(_QWORD *)result + 40 * v5 + 24;
    do
    {
      result = *(WTF **)v7;
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v7 += 40;
      v6 -= 40;
    }
    while (v6);
    *(_DWORD *)(v2 + 12) = v5;
  }
  LODWORD(v4) = v5;
LABEL_21:
  v13 = *(__int128 **)a2;
  v14 = *(WTF **)v2;
  if ((_DWORD)v4)
  {
    v15 = (__int128 *)((char *)v13 + 40 * v5);
    do
    {
      v16 = *v13;
      *((_BYTE *)v14 + 16) = *((_BYTE *)v13 + 16);
      *(_OWORD *)v14 = v16;
      result = WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)((char *)v14 + 24), (WTF *)((char *)v13 + 24));
      v13 = (__int128 *)((char *)v13 + 40);
      v14 = (WTF *)((char *)v14 + 40);
    }
    while (v13 != v15);
    v13 = *(__int128 **)a2;
    LODWORD(v4) = *(_DWORD *)(v2 + 12);
    v14 = *(WTF **)v2;
  }
  v17 = a2[3];
  if ((_DWORD)v4 == v17)
  {
LABEL_32:
    *(_DWORD *)(v2 + 12) = v4;
    return (WTF *)v2;
  }
  v18 = (unsigned int *)v13 + 10 * v4 + 9;
  v19 = (uint64_t)v14 + 40 * v4 + 24;
  v20 = 40 * v17 - 40 * v4;
  while (1)
  {
    v21 = *(_OWORD *)(v18 - 9);
    *(_BYTE *)(v19 - 8) = *((_BYTE *)v18 - 20);
    *(_OWORD *)(v19 - 24) = v21;
    v22 = *v18;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 12) = v22;
    if ((_DWORD)v22)
      break;
LABEL_30:
    v18 += 10;
    v19 += 40;
    v20 -= 40;
    if (!v20)
    {
      LODWORD(v4) = a2[3];
      goto LABEL_32;
    }
  }
  if (!(v22 >> 29))
  {
    v23 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
    *(_DWORD *)(v19 + 8) = v22;
    *(_QWORD *)v19 = v23;
    result = (WTF *)memcpy(v23, *(const void **)(v18 - 3), 8 * *v18);
    goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_20:
    v15 = *(WTF **)v2;
    if (v5)
    {
      memmove(v15, *(const void **)a2, 16 * v5);
      v16 = *((_DWORD *)v2 + 3);
      v15 = *(WTF **)v2;
    }
    else
    {
      v16 = 0;
    }
    v17 = *((unsigned int *)a2 + 3);
    if (v16 != (_DWORD)v17)
    {
      v18 = (_OWORD *)((char *)v15 + 16 * v16);
      v19 = (__int128 *)(*(_QWORD *)a2 + 16 * v16);
      v20 = 16 * v17 - 16 * v16;
      do
      {
        v21 = *v19++;
        *v18++ = v21;
        v20 -= 16;
      }
      while (v20);
      v16 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v2 + 3) = v16;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_19;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_19:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_20;
  }
  if (!(v7 >> 28))
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v12 = 16 * v9;
      v13 = v8;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *v10++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v11);
    }
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(uint64_t this, const WebCore::FloatPoint *a2, const WebCore::FloatRect *a3, double a4)
{
  WebCore::ScrollingTree **v4;
  WebCore::ScrollingTree *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  char v13;

  v4 = *(WebCore::ScrollingTree ***)(this + 16);
  if (v4)
  {
    v9 = *(_OWORD *)a3;
    v12 = *(_OWORD *)a3;
    v13 = 1;
    this = (*((uint64_t (**)(WebCore::ScrollingTree **, const WebCore::FloatPoint *, __int128 *))*v4 + 21))(v4, a2, &v12);
    if ((this & 1) == 0)
    {
      v6 = v4[12];
      if (v6)
      {
        (*(void (**)(WebCore::ScrollingTree *, const WebCore::FloatPoint *))(*(_QWORD *)v6 + 104))(v6, a2);
      }
      else
      {
        v7 = *(_DWORD *)a2;
        v8 = *((_DWORD *)a2 + 1);
      }
      *((_DWORD *)v4 + 36) = v7;
      *((_DWORD *)v4 + 37) = v8;
      v10 = v9;
      v11 = 1;
      (*((void (**)(WebCore::ScrollingTree **, __int128 *))*v4 + 20))(v4, &v10);
      (*((void (**)(WebCore::ScrollingTree **))*v4 + 23))(v4);
      WebCore::ScrollingTree::notifyRelatedNodesAfterScrollPositionChange(v4[4], (WebCore::ScrollingTreeScrollingNode *)v4);
      this = (*(uint64_t (**)(WebCore::ScrollingTree *, WebCore::ScrollingTree **, uint64_t))(*(_QWORD *)v4[4] + 96))(v4[4], v4, 2);
      *((_BYTE *)v4[4] + 342) = 1;
    }
  }
  return this;
}

uint64_t WebCore::ScrollingTreeScrollingNode::wasScrolledByDelegatedScrolling(WebCore::ScrollingTree **a1, int *a2, __int128 *a3, uint64_t a4)
{
  uint64_t result;
  WebCore::ScrollingTree *v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;

  v14 = *a3;
  v15 = *((_DWORD *)a3 + 4);
  result = (*((uint64_t (**)(WebCore::ScrollingTree **, int *, __int128 *))*a1 + 21))(a1, a2, &v14);
  if (!(_DWORD)a4 || (result & 1) == 0)
  {
    v9 = a1[12];
    if (v9)
    {
      (*(void (**)(WebCore::ScrollingTree *, int *))(*(_QWORD *)v9 + 104))(v9, a2);
    }
    else
    {
      v10 = *a2;
      v11 = a2[1];
    }
    *((_DWORD *)a1 + 36) = v10;
    *((_DWORD *)a1 + 37) = v11;
    v12 = *a3;
    v13 = *((_DWORD *)a3 + 4);
    (*((void (**)(WebCore::ScrollingTree **, __int128 *))*a1 + 20))(a1, &v12);
    (*((void (**)(WebCore::ScrollingTree **))*a1 + 23))(a1);
    WebCore::ScrollingTree::notifyRelatedNodesAfterScrollPositionChange(a1[4], (WebCore::ScrollingTreeScrollingNode *)a1);
    result = (*(uint64_t (**)(WebCore::ScrollingTree *, WebCore::ScrollingTree **, uint64_t))(*(_QWORD *)a1[4] + 96))(a1[4], a1, a4);
    *((_BYTE *)a1[4] + 342) = 1;
  }
  return result;
}

BOOL WebCore::ScrollingTreeFrameScrollingNode::scrollPositionAndLayoutViewportMatch(float *a1, float *a2, uint64_t a3)
{
  if (*a2 != a1[36] || a2[1] != a1[37])
    return 0;
  if (!*(_BYTE *)(a3 + 16))
    return 1;
  if (*(float *)a3 != a1[86] || *(float *)(a3 + 4) != a1[87])
    return 0;
  return *(float *)(a3 + 12) == a1[89] && *(float *)(a3 + 8) == a1[88];
}

void WebCore::ScrollingTreeFrameScrollingNode::updateViewportForCurrentScrollPosition(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  if (*(_BYTE *)(a2 + 16))
  {
    *(_OWORD *)(a1 + 344) = *(_OWORD *)a2;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 144);
    *(float *)(a1 + 344) = WebCore::ScrollingTreeFrameScrollingNode::layoutViewportForScrollPosition(a1, &v6, 0, *(float *)(a1 + 388));
    *(_DWORD *)(a1 + 348) = v3;
    *(_DWORD *)(a1 + 352) = v4;
    *(_DWORD *)(a1 + 356) = v5;
  }
}

uint64_t *WebCore::ScrollingTree::notifyRelatedNodesAfterScrollPositionChange(WebCore::ScrollingTree *this, WebCore::ScrollingTreeScrollingNode *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;

  if (*((_BYTE *)a2 + 40) != 5)
    return (uint64_t *)WebCore::ScrollingTree::notifyRelatedNodesRecursive(this, (uint64_t)a2);
  v18 = *((_OWORD *)a2 + 3);
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 18, (uint64_t *)&v18);
  if (!result)
    return (uint64_t *)WebCore::ScrollingTree::notifyRelatedNodesRecursive(this, (uint64_t)a2);
  v5 = (uint64_t)result;
  v6 = *((unsigned int *)result + 7);
  if (!(_DWORD)v6)
    return (uint64_t *)WebCore::ScrollingTree::notifyRelatedNodesRecursive(this, (uint64_t)a2);
  if (v6 >> 28)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = 16 * v6;
    v8 = WTF::fastMalloc((WTF *)(16 * v6));
    v9 = (WTF *)v8;
    v10 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v10)
    {
      v11 = *(__int128 **)(v5 + 16);
      v12 = 16 * v10;
      v13 = (_OWORD *)v8;
      do
      {
        v14 = *v11++;
        *v13++ = v14;
        v12 -= 16;
      }
      while (v12);
    }
    WebCore::ScrollingTree::notifyRelatedNodesRecursive(this, (uint64_t)a2);
    v16 = 0;
    do
    {
      v18 = *(_OWORD *)((char *)v9 + v16);
      if ((_QWORD)v18)
      {
        v17 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 3, (uint64_t *)&v18);
        if (v17)
        {
          v15 = (void *)v17[2];
          if (v15)
            WebCore::ScrollingTree::notifyRelatedNodesRecursive(this, (uint64_t)v15);
        }
      }
      v16 += 16;
    }
    while (v7 != v16);
    return (uint64_t *)WTF::fastFree(v9, v15);
  }
  return result;
}

uint64_t WebCore::ScrollingTree::notifyRelatedNodesRecursive(WebCore::ScrollingTree *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  WebCore::ScrollingTreeNode **v6;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v5 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v5)
  {
    v6 = *(WebCore::ScrollingTreeNode ***)(a2 + 16);
    v7 = 8 * v5;
    do
    {
      if (*((unsigned __int8 *)*v6 + 40) >= 2u)
        result = WebCore::ScrollingTree::notifyRelatedNodesRecursive(a1, *v6);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebCore::ScrollingTree::applyLayerPositions(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  result = (*(uint64_t (**)(WebCore::ScrollingTree *))(*(_QWORD *)this + 304))(this);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::ScrollingTree::applyLayerPositionsRecursive(uint64_t a1)
{
  uint64_t result;
  WebCore::ScrollingTreeNode *v3;
  uint64_t v4;
  WebCore::ScrollingTree **v5;
  uint64_t v6;
  WebCore::ScrollingTree *v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v4 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v4)
  {
    v5 = *(WebCore::ScrollingTree ***)(a1 + 16);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      result = WebCore::ScrollingTree::applyLayerPositionsRecursive(v7, v3);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t WebCore::ScrollingTreeScrollingNode::applyLayerPositions(WebCore::ScrollingTreeScrollingNode *this)
{
  (*(void (**)(WebCore::ScrollingTreeScrollingNode *))(*(_QWORD *)this + 176))(this);
  return (*(uint64_t (**)(WebCore::ScrollingTreeScrollingNode *))(*(_QWORD *)this + 184))(this);
}

uint64_t WebCore::ScrollingTree::applyLayerPositionsInternal(WebCore::ScrollingTree *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return WebCore::ScrollingTree::applyLayerPositionsRecursive(result);
  return result;
}

float WebCore::ScrollingTreeFrameScrollingNode::layoutViewportForScrollPosition(uint64_t a1, _QWORD *a2, const WebCore::FloatSize *a3, float a4)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  double v12;
  int v13;
  double v14;
  int v15;
  int v16;
  double v17;
  int v18;
  double v19;
  int v20;
  int v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;
  int v30;
  int v32[2];
  int v33[2];
  _QWORD v34[2];
  int v35[4];
  _QWORD v36[2];

  v4 = (int)a3;
  v6 = 376;
  if (!*(_BYTE *)(a1 + 384))
    v6 = 104;
  v36[0] = *a2;
  v36[1] = *(_QWORD *)(a1 + v6);
  v7 = WebCore::LocalFrameView::visibleDocumentRect((WebCore::LocalFrameView *)v36, (const WebCore::FloatRect *)(a1 + 112), (float)*(int *)(a1 + 396), (float)*(int *)(a1 + 400), a3, a4);
  v9 = *(float *)(a1 + 344) * 64.0;
  if (v9 > -2147483650.0)
    v10 = (int)v9;
  else
    v10 = 0x80000000;
  if (v9 < 2147483650.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  v12 = *(float *)(a1 + 348) * 64.0;
  if (v12 > -2147483650.0)
    v13 = (int)v12;
  else
    v13 = 0x80000000;
  if (v12 >= 2147483650.0)
    v13 = 0x7FFFFFFF;
  v35[0] = v11;
  v35[1] = v13;
  v14 = *(float *)(a1 + 352) * 64.0;
  if (v14 > -2147483650.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147483650.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v17 = *(float *)(a1 + 356) * 64.0;
  if (v17 > -2147483650.0)
    v18 = (int)v17;
  else
    v18 = 0x80000000;
  if (v17 >= 2147483650.0)
    v18 = 0x7FFFFFFF;
  v35[2] = v16;
  v35[3] = v18;
  v34[0] = v7;
  v34[1] = v8;
  v19 = *(float *)(a1 + 360) * 64.0;
  if (v19 > -2147483650.0)
    v20 = (int)v19;
  else
    v20 = 0x80000000;
  if (v19 < 2147483650.0)
    v21 = v20;
  else
    v21 = 0x7FFFFFFF;
  v22 = *(float *)(a1 + 364) * 64.0;
  if (v22 > -2147483650.0)
    v23 = (int)v22;
  else
    v23 = 0x80000000;
  if (v22 < 2147483650.0)
    v24 = v23;
  else
    v24 = 0x7FFFFFFF;
  v33[0] = v21;
  v33[1] = v24;
  v25 = *(float *)(a1 + 368) * 64.0;
  if (v25 > -2147483650.0)
    v26 = (int)v25;
  else
    v26 = 0x80000000;
  if (v25 < 2147483650.0)
    v27 = v26;
  else
    v27 = 0x7FFFFFFF;
  v28 = *(float *)(a1 + 372) * 64.0;
  if (v28 > -2147483650.0)
    v29 = (int)v28;
  else
    v29 = 0x80000000;
  if (v28 < 2147483650.0)
    v30 = v29;
  else
    v30 = 0x7FFFFFFF;
  v32[0] = v27;
  v32[1] = v30;
  return (float)(int)WebCore::LocalFrameView::computeLayoutViewportOrigin((int *)v34, v33, v32, v35, v4) * 0.015625;
}

uint64_t WebCore::LocalFrameView::visibleDocumentRect(WebCore::LocalFrameView *this, const WebCore::FloatRect *a2, float a3, float a4, const WebCore::FloatSize *a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;

  v6 = *((float *)a2 + 1);
  v7 = (float)(v6 - a3) - a4;
  v8 = *((float *)this + 1);
  if (v8 <= 0.0)
    v9 = *((float *)this + 1);
  else
    v9 = 0.0;
  v10 = v8 - a3;
  if ((float)(v8 - a3) < 0.0)
    v10 = 0.0;
  v11 = v9 + v10;
  v12 = *((float *)this + 3);
  v13 = (float)(v6 - v8) - v12;
  if (v13 > 0.0)
    v13 = 0.0;
  v14 = (float)(v8 + v12) - a3;
  if (v7 < v14)
    v14 = v7;
  v17 = *(_QWORD *)this;
  v18 = *((float *)this + 2);
  v15 = (float)(v14 - v13) - v11;
  if (v15 < 0.0)
    v15 = 0.0;
  *(float *)&v17 = (float)(1.0 / a6) * *(float *)&v17;
  *((float *)&v17 + 1) = (float)(1.0 / a6) * v11;
  v18 = (float)(1.0 / a6) * v18;
  v19 = (float)(1.0 / a6) * v15;
  WebCore::LayoutRect::LayoutRect((int *)&v20, (const WebCore::FloatRect *)&v17);
  return v20;
}

BOOL WebCore::MediaDevices::virtualHasPendingActivity(WebCore::MediaDevices *this)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v1 = *((_QWORD *)this + 6);
  if ((v1 & 0x1000000000000) == 0)
    return 0;
  v3 = v1 & 0xFFFFFFFFFFFFLL;
  v4 = *(unsigned int *)(v3 + 28);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(uint64_t **)(v3 + 16);
  v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 600);
  v7 = 32 * v4 - 32;
  do
  {
    v8 = *v5;
    v5 += 4;
    result = v8 == v6;
    v9 = v8 == v6 || v7 == 0;
    v7 -= 32;
  }
  while (!v9);
  return result;
}

BOOL WebCore::LocalFrameView::needsLayout(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8) + 328) + 296);
  if (v1)
    v1 = *(_QWORD *)(v1 + 1944);
  if ((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return 1;
  }
  if (v1 && (*(_BYTE *)(v1 + 20) & 0xF8) != 0)
    return 1;
  v2 = *((_QWORD *)this + 58);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return 1;
  }
  if (*((_DWORD *)this + 122))
    return *((_BYTE *)this + 478) != 0;
  return 0;
}

BOOL WebCore::SQLiteTransaction::wasRolledBackBySqlite(WebCore::SQLiteTransaction *this)
{
  return *((_BYTE *)this + 8) && sqlite3_get_autocommit(*(sqlite3 **)(*(_QWORD *)this + 8)) != 0;
}

uint64_t WebCore::DisplayList::ClipOutRoundedRect::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 488))(a2, a1);
}

uint64_t WebCore::Page::setPagination(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(result + 468) != *a2
    || *(unsigned __int8 *)(result + 469) != a2[1]
    || *(_DWORD *)(result + 472) != *((_DWORD *)a2 + 1)
    || *(_DWORD *)(result + 476) != *((_DWORD *)a2 + 2))
  {
    v2 = *(_QWORD *)a2;
    *(_DWORD *)(result + 476) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(result + 468) = v2;
    return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)result);
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::marginBoxAscentForChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  WebCore::RenderFlexibleBox *v2;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  BOOL v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  int v39;

  v2 = a2;
  v4 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) >> 1;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v5 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) >> 1;
  else
    v5 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v4 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0;
  if (((v4 ^ ((*((_BYTE *)a2 + 21) & 0x10) == 0)) & 1) == 0)
    goto LABEL_40;
  v6 = WebCore::RenderFlexibleBox::alignmentForChild(this, a2);
  v7 = 1480;
  if (v6 == 5)
    v7 = 1488;
  v8 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + v7))(v2);
  if ((v8 & 0xFF00000000) == 0)
  {
LABEL_40:
    v25 = WebCore::synthesizedBaseline(v2, (uint64_t)this + 80, (v5 & 1) == 0, 1);
    v26 = WebCore::RenderFlexibleBox::flowAwareMarginBeforeForChild(this, v2);
    v27 = __OFADD__(v25, v26);
    v28 = v25 + v26;
    v29 = (v25 >> 31) + 0x7FFFFFFF;
    goto LABEL_44;
  }
  v9 = v8;
  v10 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v10 <= 5 && ((1 << v10) & 0x2A) != 0)
  {
LABEL_53:
    v32 = *((_DWORD *)v2 + 31);
    v33 = v32 >> 13;
    v34 = (unsigned __int16)v32 >> 13;
    if (v34 != 4 && v34 != 2)
      goto LABEL_16;
    goto LABEL_57;
  }
  v11 = *((_DWORD *)v2 + 31);
  v12 = (unsigned __int16)v11 >> 13;
  if (v12 > 5 || ((1 << v12) & 0x2A) == 0)
  {
    if (v10 > 5 || ((1 << v10) & 0x2A) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
  v33 = v11 >> 13;
LABEL_57:
  v35 = (v33 & 6u) - 2 >= 4;
  v36 = (unsigned int *)((char *)v2 + 160);
  if (v35)
    v36 = (unsigned int *)((char *)v2 + 164);
  v37 = *v36;
  v27 = __OFSUB__(v37, (_DWORD)v8);
  v38 = v37 - v8;
  v39 = (v37 >> 31) + 0x7FFFFFFF;
  if (v27)
    v9 = v39;
  else
    v9 = v38;
LABEL_16:
  v13 = *((_QWORD *)v2 + 12);
  if ((v5 & 1) == 0)
  {
    v14 = (v13 >> 10) & 7;
    if (v14 <= 4 && ((1 << v14) & 0x1A) != 0)
      goto LABEL_19;
    goto LABEL_43;
  }
  v30 = (unsigned __int16)v13 >> 13;
  if (v30 != 1 && (v30 - 3) >= 2)
  {
LABEL_43:
    v31 = WebCore::RenderFlexibleBox::flowAwareMarginBeforeForChild(this, v2);
    v27 = __OFADD__(v9, v31);
    v28 = v9 + v31;
    v29 = (v9 >> 31) + 0x7FFFFFFF;
LABEL_44:
    if (v27)
      return v29;
    else
      return v28;
  }
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else if ((v15 & 2) != 0)
  {
LABEL_21:
    v16 = (int *)((char *)v2 + 160);
    goto LABEL_22;
  }
  v16 = (int *)((char *)v2 + 164);
LABEL_22:
  v17 = *v16;
  if (*v16 < 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  v18 = 0x30203020100uLL >> (8 * v10);
  if (v10 > 5)
    LOBYTE(v18) = 0;
  if ((v15 & 2) == 0)
    goto LABEL_26;
  v15 = *((_DWORD *)this + 30);
  if (v10 <= 5 && ((3u >> v10) & 1) == 0)
  {
LABEL_48:
    LODWORD(v18) = (v15 >> 26) & 1;
LABEL_26:
    v19 = 135;
    switch((char)v18)
    {
      case 0:
        goto LABEL_27;
      case 1:
        v19 = 136;
        break;
      case 2:
        goto LABEL_38;
      case 3:
        goto LABEL_39;
      default:
        v19 = 135;
        v2 = this;
        break;
    }
    goto LABEL_27;
  }
  if ((v15 & 0x4000000) != 0)
LABEL_39:
    v19 = 138;
  else
LABEL_38:
    v19 = 137;
LABEL_27:
  v20 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)v2 + 8 * v19))(v2);
  if (v17 >= v9)
    v21 = v9;
  else
    v21 = v17;
  if (v9 < 0)
    v21 = 0;
  v27 = __OFADD__(v21, v20);
  v22 = v21 + v20;
  v23 = (v21 >> 31) + 0x7FFFFFFF;
  if (v27)
    return v23;
  else
    return v22;
}

uint64_t WebCore::RenderFlexibleBox::flowAwareMarginBeforeForChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  v2 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v3 = 0x30203020100uLL >> (8 * v2);
  if (v2 > 5)
    LOBYTE(v3) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_4;
  v6 = *((_DWORD *)this + 30);
  if (v2 <= 5 && ((3u >> v2) & 1) == 0)
  {
    LODWORD(v3) = (v6 >> 26) & 1;
LABEL_4:
    v4 = 135;
    switch((char)v3)
    {
      case 0:
        return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
      case 1:
        v4 = 136;
        return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
      case 2:
        goto LABEL_12;
      case 3:
        goto LABEL_13;
      default:
        result = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1080))(this);
        break;
    }
    return result;
  }
  if ((v6 & 0x4000000) != 0)
LABEL_13:
    v4 = 138;
  else
LABEL_12:
    v4 = 137;
  return (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 8 * v4))(a2);
}

uint64_t WebCore::RenderFlexibleBox::computeChildIntrinsicLogicalWidths(WebCore::RenderFlexibleBox *this, WebCore::RenderObject *a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  int v31;

  if ((*((_BYTE *)a2 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942BB724);
  }
  if (!WebCore::RenderFlexibleBox::childCrossSizeShouldUseContainerCrossSize(this, a2)
    || (v15 = *((_QWORD *)this + 4)) != 0
    && (v16 = *(_QWORD *)(v15 + 8)) != 0
    && *(char *)(v16 + 45) < 0
    && (*((_BYTE *)this + 21) & 4) == 0)
  {
    v8 = WebCore::RenderBox::overridingLogicalWidth(a2);
    WebCore::RenderBox::clearOverridingLogicalWidth((uint64_t)a2, v9);
    v10 = WebCore::RenderBox::overridingLogicalHeight(a2);
    WebCore::RenderBox::clearOverridingLogicalHeight((uint64_t)a2, v11);
    *(_DWORD *)a3 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 408))(a2);
    *(_DWORD *)a4 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 416))(a2);
    if ((v8 & 0xFF00000000) != 0)
    {
      v31 = v8;
      v28 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
      if (!WebCore::gOverridingLogicalWidthMap)
      {
        v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v28 = 0;
        v28[1] = 0;
        WebCore::gOverridingLogicalWidthMap = (uint64_t)v28;
      }
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v28, a2, &v31);
    }
    else
    {
      WebCore::RenderBox::clearOverridingLogicalWidth((uint64_t)a2, v12);
    }
    if ((v10 & 0xFF00000000) != 0)
    {
      v31 = v10;
      v27 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
      if (!WebCore::gOverridingLogicalHeightMap)
      {
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v27 = 0;
        v27[1] = 0;
        WebCore::gOverridingLogicalHeightMap = (uint64_t)v27;
      }
      return WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v27, a2, &v31);
    }
    return WebCore::RenderBox::clearOverridingLogicalHeight((uint64_t)a2, v13);
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v18 = (v17 >> 1) & 1;
  v19 = (v17 & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v20 = v18;
  else
    v20 = v19;
  v21 = *((_DWORD *)a2 + 5) & 0x1000;
  v22 = WebCore::RenderFlexibleBox::computeCrossSizeForChildUsingContainerCrossSize(this, a2);
  v23 = v22;
  if (v20 == v21 >> 12)
  {
    v24 = WebCore::RenderBox::overridingLogicalWidth(a2);
    v31 = v23;
    v25 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
    if (!WebCore::gOverridingLogicalWidthMap)
    {
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = 0;
      v25[1] = 0;
      WebCore::gOverridingLogicalWidthMap = (uint64_t)v25;
    }
    WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v25, a2, &v31);
    *(_DWORD *)a3 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 408))(a2);
    *(_DWORD *)a4 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 416))(a2);
    if ((v24 & 0xFF00000000) == 0)
      return WebCore::RenderBox::clearOverridingLogicalWidth((uint64_t)a2, v26);
    v31 = v24;
    v27 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
    if (!WebCore::gOverridingLogicalWidthMap)
    {
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = 0;
      v27[1] = 0;
      WebCore::gOverridingLogicalWidthMap = (uint64_t)v27;
    }
    return WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v27, a2, &v31);
  }
  v29 = v22;
  v30 = WebCore::RenderBox::overridingLogicalHeight(a2);
  WebCore::RenderBox::setOverridingLogicalHeight(a2, v29);
  *(_DWORD *)a3 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 408))(a2);
  *(_DWORD *)a4 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 416))(a2);
  if ((v30 & 0xFF00000000) == 0)
    return WebCore::RenderBox::clearOverridingLogicalHeight((uint64_t)a2, v13);
  return WebCore::RenderBox::setOverridingLogicalHeight(a2, v30);
}

BOOL WebCore::RenderFlexibleBox::childCrossSizeShouldUseContainerCrossSize(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  const WebCore::RenderBox *v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int *v11;
  void *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  char v18;
  char v19;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 0xC) != 0
    || WebCore::RenderFlexibleBox::alignmentForChild(this, a2) != 3)
  {
    return 0;
  }
  v5 = *((_DWORD *)this + 5);
  v6 = *((_QWORD *)this + 11);
  v7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) + 20);
  if ((v5 & 0x1000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) + 20) & 2) == 0)
      goto LABEL_5;
LABEL_27:
    v8 = *((_QWORD *)a2 + 11);
    v15 = *(_QWORD *)(v8 + 24);
    if (!*(_BYTE *)(v15 + 44))
      return 0;
    v10 = (_BYTE *)(v15 + 60);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) + 20) & 2) == 0)
    goto LABEL_27;
LABEL_5:
  v8 = *((_QWORD *)a2 + 11);
  v9 = *(_QWORD *)(v8 + 24);
  if (!*(_BYTE *)(v9 + 68))
    return 0;
  v10 = (_BYTE *)(v9 + 52);
LABEL_7:
  if (!*v10)
    return 0;
  if ((v5 & 0x1000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) + 20) & 2) == 0)
      goto LABEL_10;
LABEL_30:
    v11 = (unsigned int *)(*(_QWORD *)(v8 + 8) + 12);
    goto LABEL_11;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) + 20) & 2) == 0)
    goto LABEL_30;
LABEL_10:
  v11 = (unsigned int *)(*(_QWORD *)(v8 + 8) + 4);
LABEL_11:
  v19 = 0;
  v17 = *((_BYTE *)v11 + 4);
  v18 = *((_BYTE *)v11 + 5);
  if (v17 - 2 < 9)
    return 0;
  if (v17 == 11)
  {
    v13 = (void *)*v11;
    v16 = *v11;
    WebCore::Length::ref(&v16);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v13);
    return 0;
  }
  if (v17)
    return 0;
  if ((v5 & 0x1000) != 0)
  {
    if ((v7 & 2) == 0)
      return 1;
  }
  else if ((v7 & 2) != 0)
  {
    return 1;
  }
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 8) + 16);
  if (v14 != 3)
    return v14 == 4;
  return (WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(this, v4) & 0xFF00000000) != 0;
}

uint64_t WebCore::RenderFlexibleBox::childIntrinsicLogicalHeight(WebCore::RenderFlexibleBox *this, WebCore::RenderBox *a2)
{
  char *v4;
  unsigned int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;

  if (WebCore::RenderFlexibleBox::alignmentForChild(this, a2) != 3)
  {
LABEL_2:
    v4 = (char *)a2 + 160;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v4 = (char *)a2 + 164;
    return *(unsigned int *)v4;
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
  v7 = (v6 >> 1) & 1;
  v8 = (v6 & 2) == 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v8 = v7;
  v9 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
  if ((v9 - 2) < 2 || v9 == 4 || v9 == 5)
  {
    if (v8)
      goto LABEL_2;
  }
  else if (!v8)
  {
    goto LABEL_2;
  }
  if ((*((_BYTE *)a2 + 52) & 7) == 3)
  {
    if (((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 288))(a2) & 1) != 0
      || ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 148) >> 5) & 3u) - 1 < 2)
    {
      goto LABEL_2;
    }
    v28 = *((unsigned __int8 *)a2 + 46);
    if (v28 == 103 || v28 == 83)
    {
      if ((*((_BYTE *)a2 + 52) & 7) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1942BBBD4);
      }
      if (WebCore::RenderReplaced::computeIntrinsicAspectRatio(a2) > 0.0)
        goto LABEL_2;
    }
  }
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
  v11 = v10 + 4;
  v12 = v10 + 12;
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
    v11 = v12;
  if (*(_BYTE *)(v11 + 4))
    goto LABEL_2;
  v13 = WebCore::RenderFlexibleBox::cachedChildIntrinsicContentLogicalHeight(this, a2);
  v14 = 1360;
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
    v14 = 1352;
  v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + v14))(a2);
  v16 = v15 << 6;
  if (v15 < -33554432)
    v16 = 0x80000000;
  if (v15 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  v17 = v13 + v16;
  if (__OFADD__(v13, v16))
    v17 = (v13 >> 31) + 0x7FFFFFFF;
  v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1048))(a2);
  v19 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 960))(a2);
  if (__OFADD__(v18, v19))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  else
    v20 = v18 + v19;
  v21 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1056))(a2);
  v22 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 968))(a2);
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
    v23 = (v21 >> 31) + 0x7FFFFFFF;
  v24 = __OFADD__(v20, v23);
  v25 = v20 + v23;
  if (v24)
    v25 = (v20 >> 31) + 0x7FFFFFFF;
  v24 = __OFADD__(v17, v25);
  v26 = v17 + v25;
  if (v24)
    v27 = (v17 >> 31) + 0x7FFFFFFF;
  else
    v27 = v26;
  return WebCore::RenderBox::constrainLogicalHeightByMinMax(a2, (const WebCore::RenderBox *)v27, v13 | 0x100000000);
}

uint64_t WebCore::RenderFlexibleBox::alignmentForChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  WebCore::RenderStyle *v4;
  char v5;
  char v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  int isFlippedLinesWritingMode;
  int v18;

  v4 = (WebCore::RenderFlexibleBox *)((char *)this + 80);
  v5 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *, _QWORD))(*(_QWORD *)this + 1600))(this, 0);
  v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 125);
  v7 = v6 & 0xF;
  if (v7 == 1)
  {
    v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124);
    v7 = v6 & 0xF;
  }
  if (v7 < 3)
    v6 = v5;
  v8 = v6 & 0xF;
  switch(v8)
  {
    case 7:
LABEL_31:
      LOBYTE(v8) = 11;
      return v8;
    case 4:
      v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
        v11 = (v9 >> 1) & 1;
      else
        v11 = (v9 & 2) == 0;
      if (v11 != (*((_BYTE *)a2 + 21) & 0x10) >> 4)
      {
        LOBYTE(v8) = 4;
        return v8;
      }
      v8 = 11;
LABEL_10:
      if ((v9 & 0xC) != 8)
        return v8;
      if (v8 != 11)
      {
        if (v8 != 12)
          return v8;
        goto LABEL_31;
      }
LABEL_32:
      LOBYTE(v8) = 12;
      return v8;
    case 8:
      goto LABEL_32;
  }
  if ((v8 - 9) >= 2)
  {
    LOBYTE(v9) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20);
    goto LABEL_10;
  }
  v18 = v8;
  v12 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v13 = v12 - 1;
  v14 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_19;
    case 3:
    case 5:
      LOBYTE(v12) = 3;
      goto LABEL_19;
    case 4:
      goto LABEL_20;
    default:
      LOBYTE(v12) = 0;
LABEL_19:
      v14 = v12;
LABEL_20:
      v15 = v14 & 6;
      v16 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
      if ((v16 - 2) < 2 || v16 == 4 || v16 == 5)
      {
        if (v15 != 2)
          goto LABEL_24;
      }
      else if (v15 == 2)
      {
LABEL_24:
        switch(v13)
        {
          case 0:
          case 2:
          case 4:
            if ((*((_BYTE *)a2 + 123) & 4) == 0)
              goto LABEL_40;
            goto LABEL_26;
          default:
            if ((*((_BYTE *)a2 + 123) & 4) == 0)
              goto LABEL_26;
            goto LABEL_40;
        }
      }
      isFlippedLinesWritingMode = WebCore::RenderStyle::isFlippedLinesWritingMode(v4);
      if (isFlippedLinesWritingMode == WebCore::RenderStyle::isFlippedLinesWritingMode((const WebCore::RenderBox *)((char *)a2 + 80))
        && ((*((_BYTE *)this + 123) & 4) == 0) == ((*((_BYTE *)a2 + 123) & 4) == 0))
      {
LABEL_26:
        if (v18 == 9)
          LOBYTE(v8) = 11;
        else
          LOBYTE(v8) = 12;
      }
      else
      {
LABEL_40:
        if (v18 == 9)
          LOBYTE(v8) = 12;
        else
          LOBYTE(v8) = 11;
      }
      return v8;
  }
}

uint64_t WebCore::RenderBox::selfAlignmentNormalBehavior(WebCore::RenderBox *this, const WebCore::RenderBox *a2)
{
  return 3;
}

void WebCore::RenderBox::willBeDestroyed(WebCore::RenderBox *this, void *a2)
{
  uint64_t v3;
  WebCore::RenderBox *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Thread *v11;
  unint64_t StatusReg;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int v15;
  _QWORD *v16;
  WTF::Thread *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 528)
                             + 8)
                 + 640);
  v4 = *(WebCore::RenderBox **)(*(_QWORD *)(v3 + 144) + 56);
  if (v4)
    v4 = (WebCore::RenderBox *)*((_QWORD *)v4 + 1);
  if (v4 == this)
    WebCore::EventHandler::stopAutoscrollTimer((WebCore::AutoscrollController **)v3, 1);
  if ((*(_WORD *)((_BYTE *)this + 69) & 2) != 0)
  {
    v5 = *((_QWORD *)this + 11);
    if (*(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 465) | *(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 466))
    {
      WebCore::RenderView::unregisterBoxWithScrollSnapPositions(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
      v5 = *((_QWORD *)this + 11);
    }
    if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(v5 + 40) + 642) & 3) << 48)
      WebCore::RenderView::unregisterContainerQueryBox(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v6 + 3405))
  {
    v7 = *(_QWORD *)(v6 + 1944);
    v8 = *(_QWORD *)(v7 + 376);
    if (!v8)
    {
      v8 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v8 = v7;
      *(_QWORD *)(v8 + 8) = 0;
      v11 = (WTF::Thread *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v11 = off_1E341E698;
      *((_QWORD *)v11 + 1) = WebCore::ImageQualityController::highQualityRepaintTimerFired;
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = v8;
      *(_QWORD *)(v8 + 16) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      v13 = *(unsigned int **)(StatusReg + 736);
      if (!v13)
      {
        v17 = v11;
        v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(v11);
        v11 = v17;
      }
      v14 = (uint64_t *)(v7 + 376);
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 + 1, v13));
      *(_QWORD *)(v8 + 16) = off_1E33DC988;
      *(_QWORD *)(v8 + 56) = v13;
      *(_QWORD *)(v8 + 64) = v11;
      *(_QWORD *)(v8 + 72) = 0x3FE0000000000000;
      *(_WORD *)(v8 + 80) = 0;
      v16 = (_QWORD *)*v14;
      *v14 = v8;
      if (v16)
      {
        std::default_delete<WebCore::ImageQualityController>::operator()[abi:sn180100](v7 + 376, v16);
        v8 = *(_QWORD *)(v7 + 376);
      }
    }
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v8 + 8), this);
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9 || !*(_DWORD *)(v9 - 12))
    {
      *(_BYTE *)(v8 + 80) = 0;
      v10 = *(_QWORD *)(v8 + 48);
      *(_QWORD *)(v8 + 48) = v10 & 0xFDFFFFFFFFFFFFLL;
      if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v8 + 16));
    }
  }
  WebCore::RenderLayerModelObject::willBeDestroyed(this, a2);
}

uint64_t WebCore::RenderBox::clearOverridingLogicalHeight(uint64_t this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v2 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
  if (WebCore::gOverridingLogicalHeightMap)
  {
    v3 = this;
    v4 = *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
    v5 = *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 12);
    *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8) = v4 + 1;
    if (v4 > v5)
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v2, a2);
    this = *(_QWORD *)(v3 + 8);
    if (this)
    {
      if (*(_QWORD *)(this + 8))
      {
        v6 = *v2;
        if (*v2)
        {
          v7 = *(_DWORD *)(v6 - 8);
          v8 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
          v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
          v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
          v11 = v7 & ((v10 >> 31) ^ v10);
          for (i = 1; ; ++i)
          {
            v13 = *(_QWORD *)(v6 + 16 * v11);
            if (!v13)
              break;
            if (v13 != -1 && v13 == this)
            {
              if (v11 != *(_DWORD *)(v6 - 4))
              {
                v15 = (_QWORD *)(v6 + 16 * v11);
                *v15 = 0;
                if (*(_DWORD *)this == 1)
                  this = WTF::fastFree((WTF *)this, a2);
                else
                  --*(_DWORD *)this;
                *v15 = -1;
                ++*(_DWORD *)(*v2 - 16);
                v16 = *v2;
                v17 = *v2 ? *(_DWORD *)(v16 - 12) - 1 : -1;
                *(_DWORD *)(v16 - 12) = v17;
                v18 = *v2;
                if (*v2)
                {
                  v19 = 6 * *(_DWORD *)(v18 - 12);
                  v20 = *(_DWORD *)(v18 - 4);
                  if (v19 < v20 && v20 >= 9)
                    return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v20 >> 1, 0);
                }
              }
              return this;
            }
            v11 = (v11 + i) & v7;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderBox::clearOverridingLogicalWidth(uint64_t this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v2 = (uint64_t *)WebCore::gOverridingLogicalWidthMap;
  if (WebCore::gOverridingLogicalWidthMap)
  {
    v3 = this;
    v4 = *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8);
    v5 = *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 12);
    *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8) = v4 + 1;
    if (v4 > v5)
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v2, a2);
    this = *(_QWORD *)(v3 + 8);
    if (this)
    {
      if (*(_QWORD *)(this + 8))
      {
        v6 = *v2;
        if (*v2)
        {
          v7 = *(_DWORD *)(v6 - 8);
          v8 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
          v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
          v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
          v11 = v7 & ((v10 >> 31) ^ v10);
          for (i = 1; ; ++i)
          {
            v13 = *(_QWORD *)(v6 + 16 * v11);
            if (!v13)
              break;
            if (v13 != -1 && v13 == this)
            {
              if (v11 != *(_DWORD *)(v6 - 4))
              {
                v15 = (_QWORD *)(v6 + 16 * v11);
                *v15 = 0;
                if (*(_DWORD *)this == 1)
                  this = WTF::fastFree((WTF *)this, a2);
                else
                  --*(_DWORD *)this;
                *v15 = -1;
                ++*(_DWORD *)(*v2 - 16);
                v16 = *v2;
                v17 = *v2 ? *(_DWORD *)(v16 - 12) - 1 : -1;
                *(_DWORD *)(v16 - 12) = v17;
                v18 = *v2;
                if (*v2)
                {
                  v19 = 6 * *(_DWORD *)(v18 - 12);
                  v20 = *(_DWORD *)(v18 - 4);
                  if (v19 < v20 && v20 >= 9)
                    return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v20 >> 1, 0);
                }
              }
              return this;
            }
            v11 = (v11 + i) & v7;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderFlexibleBox::cachedChildIntrinsicContentLogicalHeight(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  int j;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;

  if ((*((_BYTE *)a2 + 52) & 7) != 3)
  {
    v2 = *((_QWORD *)this + 26);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 - 8);
      v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
      v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
      v7 = v3 & ((v6 >> 31) ^ v6);
      v8 = 1;
      for (i = v7; ; i = (i + v8++) & v3)
      {
        v10 = *(_QWORD *)(v2 + 16 * i);
        if (v10 != -1)
        {
          if (!v10)
            return WebCore::RenderBox::contentLogicalHeight(a2);
          if (*(const WebCore::RenderBox **)(v10 + 8) == a2)
          {
            for (j = 1; ; ++j)
            {
              v12 = v7;
              v13 = *(_QWORD *)(v2 + 16 * v7);
              if (v13 != -1)
              {
                if (!v13)
                  return 0x80000000;
                if (*(const WebCore::RenderBox **)(v13 + 8) == a2)
                  return *(unsigned int *)(v2 + 16 * v12 + 8);
              }
              v7 = (v12 + j) & v3;
            }
          }
        }
      }
    }
    return WebCore::RenderBox::contentLogicalHeight(a2);
  }
  v15 = ((*((_DWORD *)a2 + 31) >> 13) & 6) - 2;
  result = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1320))(a2);
  if (v15 >= 4)
    return HIDWORD(result);
  else
    return result;
}

uint64_t WebCore::RenderTableCell::computeIntrinsicPadding(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int16 v35;

  v3 = result;
  v5 = *(_DWORD *)(result + 252);
  v4 = *(_DWORD *)(result + 256);
  v6 = v5;
  v7 = (unsigned int *)(result + 160);
  if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
    v7 = (unsigned int *)(result + 164);
  v8 = *v7;
  v9 = __OFSUB__(v8, v5);
  v10 = v8 - v5;
  v11 = (v8 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v11 = v10;
  v9 = __OFSUB__(v11, v4);
  v12 = v11 - v4;
  v13 = (v11 >> 31) + 0x7FFFFFFF;
  if (v9)
    v14 = v13;
  else
    v14 = v12;
  v15 = *(_QWORD *)(result + 88);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 8) + 68);
  v17 = *(_WORD *)(*(_QWORD *)(v15 + 32) + 120);
  v35 = v17;
  if ((v17 & 0x7F) == 0)
    goto LABEL_9;
  if ((v17 & 0xF) == 1)
  {
LABEL_26:
    v24 = WebCore::RenderTableCell::cellBaselinePosition((WebCore::RenderTableCell *)v3);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1048))(v3);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 960))(v3);
    v26 = v25 + result;
    if (__OFADD__(v25, (_DWORD)result))
      v26 = (v25 >> 31) + 0x7FFFFFFF;
    if (v24 > v26
      || (((*(_DWORD *)(v3 + 124) >> 13) & 6u) - 2 < 4 ? (v31 = (_DWORD *)(v3 + 160)) : (v31 = (_DWORD *)(v3 + 164)),
          !*v31))
    {
      result = WebCore::RenderTableCell::section(*(_QWORD *)(v3 + 32));
      v27 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
      if (*(_BYTE *)(v27 + 46) != 39)
        goto LABEL_63;
      v28 = *(_DWORD *)(v27 + 200) & 0x7FFFFFFF;
      if (*(_BYTE *)(result + 282))
      {
        v34 = result;
        WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)result);
        result = v34;
      }
      if (*(_DWORD *)(result + 212) <= v28)
      {
LABEL_63:
        __break(0xC471u);
        JUMPOUT(0x1942BC68CLL);
      }
      v29 = *(_DWORD *)(*(_QWORD *)(result + 200) + 40 * v28 + 24);
      v30 = v24 - v5;
      if (__OFSUB__(v24, v5))
        v30 = (v24 >> 31) + 0x7FFFFFFF;
      v6 = v29 - v30;
      if (__OFSUB__(v29, v30))
        v6 = (v29 >> 31) + 0x7FFFFFFF;
    }
    goto LABEL_14;
  }
  if ((v17 & 0xF) == 3 || (v17 & 0x60) == 0x20)
    goto LABEL_10;
  result = WebCore::StyleContentAlignmentData::isStartward(&v35, 0, 0);
  if ((_DWORD)result)
    goto LABEL_14;
  result = WebCore::StyleContentAlignmentData::isEndward(&v35, 0, 0);
  if (!(_DWORD)result)
  {
LABEL_9:
    v18 = v16 >> 4;
    if (v16 >> 4 == 1)
    {
LABEL_10:
      v19 = a2 - v14;
      if (__OFSUB__(a2, v14))
        v19 = (a2 >> 31) + 0x7FFFFFFF;
      v6 = v19 / 2;
      goto LABEL_14;
    }
    if (v18 > 9)
      goto LABEL_14;
    if (((1 << v18) & 0x23D) != 0)
      goto LABEL_26;
    if (v18 != 7)
      goto LABEL_14;
  }
  v6 = a2 - v14;
  if (__OFSUB__(a2, v14))
    v6 = (a2 >> 31) + 0x7FFFFFFF;
LABEL_14:
  v20 = a2 - v14;
  if (__OFSUB__(a2, v14))
    v20 = (a2 >> 31) + 0x7FFFFFFF;
  v9 = __OFSUB__(v20, v6);
  v21 = v20 - v6;
  v22 = (v20 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v22 = v21;
  *(_DWORD *)(v3 + 252) = v6;
  *(_DWORD *)(v3 + 256) = v22;
  if (v6 != v5 || v22 != v4)
  {
    v23 = *(_DWORD *)(v3 + 20);
    if ((v23 & 8) == 0)
    {
      *(_DWORD *)(v3 + 20) = v23 | 8;
      if ((v23 & 0x8000) != 0)
      {
        if ((*(_BYTE *)(v3 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942BC714);
        }
        v32 = *(_QWORD *)(v3 + 144);
        if (v32)
        {
          v33 = *(_DWORD *)(v32 + 8) + 1;
          *(_DWORD *)(v32 + 8) = v33;
        }
        else
        {
          v33 = MEMORY[8];
        }
        *(_QWORD *)(v32 + 24) = *(_QWORD *)(v32 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v33)
        {
          __break(0xC471u);
          JUMPOUT(0x1942BC740);
        }
        *(_DWORD *)(v32 + 8) = v33 - 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTableCell::section(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (this)
  {
    v1 = *(_QWORD *)(this + 8);
    if (v1)
    {
      if (*(_BYTE *)(v1 + 46) != 39)
        goto LABEL_9;
      v2 = *(_QWORD *)(v1 + 32);
      if (v2)
      {
        this = *(_QWORD *)(v2 + 8);
        if (!this || *(_BYTE *)(this + 46) == 40)
          return this;
LABEL_9:
        __break(0xC471u);
        JUMPOUT(0x1942BC7CCLL);
      }
    }
    return 0;
  }
  return this;
}

uint64_t WebCore::RenderTableSection::calcRowLogicalHeight(WebCore::RenderTableSection *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderTableSection *v8;
  uint64_t v9;
  int v10;
  int v11;
  WTF *v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF *v25;
  _BOOL4 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  WebCore::Length *v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  unsigned int v66;
  BOOL v67;
  int v68;
  unsigned __int8 *v70;
  int v71;
  float v72;
  double v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  __int16 v90;
  unsigned int v91;
  int v92;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  float v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  unint64_t v122;
  float v123;
  double v124;
  uint64_t v125;
  _BOOL4 v126;
  WebCore::RenderTableSection *v128;
  uint64_t v129;
  _QWORD *v130;
  float v131;
  double v132;
  uint64_t v133;
  _DWORD *v134;
  WTF *v135;
  int v136;
  int v137;
  uint64_t v138;
  WTF *v139;
  WebCore::RenderTableCell *v140;
  unsigned int v141;
  int v142;
  _BOOL4 v144;
  unsigned int v146;
  int v147;
  int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  _BOOL4 v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  unsigned int v163[2];
  WTF *v164;
  int v165;
  int v166;
  _BYTE v167[16];

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(unsigned __int8 *)(v3 + 46);
      if (v4 != 35 && v4 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD304);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_QWORD *)(v3 + 272);
  if (!v5 || (v8 = *(WebCore::RenderTableSection **)(v5 + 8)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 288);
    if (!v6 || (v8 = *(WebCore::RenderTableSection **)(v6 + 8)) == 0)
    {
      v7 = *(_QWORD *)(v3 + 280);
      if (v7)
        v8 = *(WebCore::RenderTableSection **)(v7 + 8);
      else
        v8 = 0;
    }
  }
  if (v8 == this)
  {
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(unsigned __int8 *)(v9 + 46);
    if (v10 != 35 && v10 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1942BD324);
    }
    v11 = *(_DWORD *)(v9 + 336);
  }
  else
  {
    v11 = 0;
  }
  v12 = (WTF *)*((_QWORD *)this + 19);
  v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x20000) != 0)
  {
    v128 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v128 = *(WebCore::RenderTableSection **)(v2 + 8);
    v129 = *((_QWORD *)v128 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 32) + 40) + 20))
      goto LABEL_182;
    v130 = *(_QWORD **)(v129 + 40);
    if (v130[41] || v130[38] || v130[39] || v130[40] || (v13 & 0x100000) != 0)
      goto LABEL_182;
  }
  if ((v13 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(this))
  {
LABEL_182:
    v15 = 1;
  }
  else
  {
    v14 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v149 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_17;
      case 3:
      case 5:
        v14 = 3;
        goto LABEL_17;
      case 4:
        goto LABEL_18;
      default:
        v14 = 0;
LABEL_17:
        v149 = v14;
LABEL_18:
        v15 = (v149 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v164 = v12;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  v17 = v16 + 336;
  v18 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v16 + 336, this, (int *)&v164, 0, 0);
  v20 = v15;
  if (v15 && v18)
    ++*(_DWORD *)(v16 + 492);
  v154 = v16;
  v156 = v18;
  v21 = *((unsigned int *)this + 53);
  v22 = v21 + 1;
  v23 = *((unsigned int *)this + 57);
  if (v21 >= v23)
  {
    v24 = *((unsigned int *)this + 56);
    v25 = (WTF *)*((_QWORD *)this + 27);
    v26 = v20;
    if (v21 >= v24)
    {
      v27 = v24 + (v24 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v22)
        v29 = v22;
      else
        v29 = v28;
      if (v29 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD524);
      }
      v30 = WTF::fastMalloc((WTF *)(4 * v29));
      *((_DWORD *)this + 56) = v29;
      *((_QWORD *)this + 27) = v30;
      if ((_DWORD)v23)
      {
        v133 = 4 * v23;
        v134 = (_DWORD *)v30;
        v135 = v25;
        do
        {
          v136 = *(_DWORD *)v135;
          v135 = (WTF *)((char *)v135 + 4);
          *v134++ = v136;
          v133 -= 4;
        }
        while (v133);
      }
      v20 = v26;
      if (!v25)
      {
LABEL_33:
        v31 = *((unsigned int *)this + 57);
        if (v22 != v31)
        {
          bzero((void *)(v30 + 4 * v31), (4 * v22 - 4 * v31) & 0xFFFFFFFFFFFFFFFCLL);
          v20 = v26;
        }
        goto LABEL_35;
      }
      if ((WTF *)v30 == v25)
      {
        *((_QWORD *)this + 27) = 0;
        *((_DWORD *)this + 56) = 0;
      }
      WTF::fastFree(v25, v19);
      v25 = (WTF *)*((_QWORD *)this + 27);
    }
    v30 = (uint64_t)v25;
    v20 = v26;
    if (!v25)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_35:
  *((_DWORD *)this + 57) = v22;
  if (!(_DWORD)v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1942BD504);
  }
  v32 = (_DWORD *)*((_QWORD *)this + 27);
  *v32 = v11;
  v33 = *((unsigned int *)this + 53);
  v160 = v33;
  if ((_DWORD)v33)
  {
    v155 = v17;
    v34 = 0;
    v157 = v20;
    while (1)
    {
      if (v34 >= *((unsigned int *)this + 53))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4BCLL);
      }
      v35 = *((_QWORD *)this + 25);
      *(_DWORD *)(v35 + 40 * v34 + 24) = 0;
      if (v34 >= *((unsigned int *)this + 53))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4C4);
      }
      v36 = v35 + 40 * v34;
      v37 = *(unsigned __int8 *)(v36 + 32);
      if (v37 > 0xB || ((1 << v37) & 0x818) == 0)
      {
        v122 = *((unsigned int *)this + 57);
        if (v34 >= v122)
        {
          __break(0xC471u);
          JUMPOUT(0x1942BD4F4);
        }
        if (v34 + 1 >= v122)
        {
          __break(0xC471u);
          JUMPOUT(0x1942BD4FCLL);
        }
        v43 = v32[v34];
        v44 = &v32[v34 + 1];
        goto LABEL_52;
      }
      if (v34 >= *((unsigned int *)this + 57))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4E4);
      }
      v39 = (WebCore::Length *)(v36 + 28);
      if (v37 == 4)
        break;
      if (v37 == 11)
      {
        WebCore::Length::nonNanCalculatedValue(v39, 0.0);
LABEL_166:
        v124 = v123 * 64.0;
        if (v124 >= 2147483650.0)
        {
          v40 = 0x7FFFFFFF;
        }
        else if (v124 <= -2147483650.0)
        {
          v40 = 0x80000000;
        }
        else
        {
          v40 = (int)v124;
        }
        goto LABEL_48;
      }
      v40 = 0;
LABEL_48:
      v41 = v32[v34];
      v42 = __OFADD__(v41, v40);
      v43 = v41 + v40;
      if (v42)
        v43 = (v41 >> 31) + 0x7FFFFFFF;
      if (v34 + 1 >= *((unsigned int *)this + 57))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4ECLL);
      }
      v44 = (int *)(*((_QWORD *)this + 27) + 4 * (v34 + 1));
LABEL_52:
      *v44 = v43 & ~(v43 >> 31);
      if (v34 >= *((unsigned int *)this + 53))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4CCLL);
      }
      v159 = *(unsigned int *)(*((_QWORD *)this + 25) + 40 * v34 + 12);
      if ((_DWORD)v159)
      {
        v45 = 0;
        v158 = 0;
        *(_QWORD *)v163 = v34 + 1;
        while (1)
        {
          if (*((_BYTE *)this + 282))
            WebCore::RenderTableSection::recalcCells(this);
          if (*((_DWORD *)this + 53) <= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x1942BD3A4);
          }
          v46 = *((_QWORD *)this + 25) + 40 * v34;
          if (v45 >= *(unsigned int *)(v46 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1942BD3ACLL);
          }
          v47 = *(_QWORD *)v46 + 32 * v45;
          if (*(_DWORD *)(v47 + 12))
            break;
LABEL_60:
          if (++v45 == v159)
            goto LABEL_148;
        }
        v48 = 0;
        v161 = *(_QWORD *)v46 + 32 * v45;
        v162 = (_BYTE *)(v47 + 24);
        while (2)
        {
          v49 = *(_QWORD *)(*(_QWORD *)v47 + 8 * v48);
          if (*v162
            && ((*(_BYTE *)(v49 + 251) & 8) == 0
             || WebCore::RenderTableCell::parseRowSpanFromDOM(*(WebCore::RenderTableCell **)(*(_QWORD *)v47 + 8 * v48)) == 1))
          {
            goto LABEL_142;
          }
          v50 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 8);
          if (*(_BYTE *)(v50 + 46) != 39)
          {
            __break(0xC471u);
            JUMPOUT(0x1942BD154);
          }
          v51 = *(_DWORD *)(v50 + 200);
          v52 = (*(_BYTE *)(v49 + 251) & 8) != 0
              ? WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)v49)
              : 1;
          if (*(_QWORD *)v163 < v160 && v34 != (v51 & 0x7FFFFFFF) + v52 - 1)
          {
            v138 = WebCore::RenderTableSection::cellAt(this, v163[0], 0);
            WebCore::RenderTableSection::CellStruct::CellStruct((uint64_t)&v164, v138);
            v139 = v164;
            if (v166)
            {
              v140 = *(WebCore::RenderTableCell **)v164;
              if ((*(_BYTE *)(*(_QWORD *)v164 + 251) & 8) != 0)
              {
                v141 = 0;
                v150 = 1;
                while (1)
                {
                  v151 = WebCore::RenderTableCell::parseRowSpanFromDOM(v140);
                  v142 = v166;
                  if (v151 <= 1)
                  {
                    v139 = v164;
                    v141 = v150 - 1;
                    goto LABEL_288;
                  }
                  if (!v166)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942BD494);
                  }
                  v139 = v164;
                  v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v164 + 32) + 8);
                  if (*(_BYTE *)(v152 + 46) != 39)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942BD4B4);
                  }
                  if ((*(_DWORD *)(v152 + 200) & 0x7FFFFFFFu) > v34)
                  {
                    v141 = v150 - 1;
                    v142 = 1;
                    goto LABEL_288;
                  }
                  if ((_DWORD)v159 == v150)
                  {
                    v142 = 1;
                    v141 = v159;
                    goto LABEL_288;
                  }
                  v153 = (WTF *)WebCore::RenderTableSection::cellAt(this, v163[0], v150);
                  WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v164, v153);
                  v167[8] = *((_BYTE *)v153 + 24);
                  v139 = v164;
                  if (!v166)
                    break;
                  v140 = *(WebCore::RenderTableCell **)v164;
                  ++v150;
                  ++v141;
                  v142 = 1;
                  v47 = v161;
                  if ((*(_BYTE *)(*(_QWORD *)v164 + 251) & 8) == 0)
                    goto LABEL_220;
                }
                v142 = 0;
                v141 = v150;
LABEL_288:
                v47 = v161;
              }
              else
              {
                v141 = 0;
                v142 = 1;
              }
            }
            else
            {
              v142 = 0;
              v141 = 0;
            }
LABEL_220:
            v144 = v141 >= v159 || v142 == 0;
            if (v167 != (_BYTE *)v139 && v139 != 0)
            {
              v164 = 0;
              v165 = 0;
              WTF::fastFree(v139, v19);
            }
            if (!v144)
            {
LABEL_142:
              if (++v48 >= (unint64_t)*(unsigned int *)(v47 + 12))
                goto LABEL_60;
              continue;
            }
          }
          break;
        }
        v53 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 8);
        if (*(_BYTE *)(v53 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x1942BD174);
        }
        v54 = *(_DWORD *)(v53 + 200);
        if ((WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)v49) & 0xFF00000000) != 0)
        {
          *(_DWORD *)(v49 + 252) = 0;
          *(_DWORD *)(v49 + 256) = 0;
          WebCore::RenderBox::clearOverridingContentSize(v49, v19);
          v137 = *(_DWORD *)(v49 + 20);
          if ((v137 & 0x20) == 0)
            *(_DWORD *)(v49 + 20) = v137 | 0x20;
          WebCore::RenderElement::layoutIfNeeded(v49);
        }
        v55 = ((*(_DWORD *)(v49 + 124) >> 13) & 6) - 2;
        v56 = (unsigned int *)(v49 + 160);
        if (v55 >= 4)
          v56 = (unsigned int *)(v49 + 164);
        v57 = *v56;
        v58 = *(_DWORD *)(v49 + 252);
        v59 = *(_DWORD *)(v49 + 256);
        v42 = __OFADD__(v58, v59);
        v60 = v58 + v59;
        v61 = (v58 >> 31) + 0x7FFFFFFF;
        if (!v42)
          v61 = v60;
        v42 = __OFSUB__(v57, v61);
        v62 = v57 - v61;
        v63 = (v57 >> 31) + 0x7FFFFFFF;
        if (v42)
          v64 = v63;
        else
          v64 = v62;
        v65 = *(unsigned __int8 **)(*(_QWORD *)(v49 + 88) + 8);
        if (v55 > 3)
        {
          v66 = v65[16];
          v67 = v66 > 0xB;
          v68 = (1 << v66) & 0x818;
          if (!v67 && v68 != 0)
          {
            v70 = v65 + 12;
            goto LABEL_84;
          }
LABEL_102:
          v83 = *((_DWORD *)this + 57);
          if (v83 <= v163[0])
          {
            __break(0xC471u);
            JUMPOUT(0x1942BD3B4);
          }
          v84 = v54 & 0x7FFFFFFF;
          if (v83 <= v84)
          {
            __break(0xC471u);
            JUMPOUT(0x1942BD3BCLL);
          }
          v85 = *((_QWORD *)this + 27);
          v86 = *(_DWORD *)(v85 + 4 * v84);
          v42 = __OFADD__(v86, v64);
          v87 = v86 + v64;
          v88 = (v86 >> 31) + 0x7FFFFFFF;
          if (!v42)
            v88 = v87;
          if (*(_DWORD *)(v85 + 4 * *(_QWORD *)v163) > v88)
            v88 = *(_DWORD *)(v85 + 4 * *(_QWORD *)v163);
          *(_DWORD *)(v85 + 4 * *(_QWORD *)v163) = v88;
          v89 = *(_QWORD *)(v49 + 88);
          v90 = *(_WORD *)(*(_QWORD *)(v89 + 32) + 120);
          if ((v90 & 0x7F) != 0)
          {
            if ((v90 & 0xF) == 1)
            {
LABEL_113:
              v94 = WebCore::RenderTableCell::cellBaselinePosition((WebCore::RenderTableCell *)v49);
              v95 = *(_DWORD *)(v49 + 252);
              v96 = v94 - v95;
              if (__OFSUB__(v94, v95))
                v96 = (v94 >> 31) + 0x7FFFFFFF;
              v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 1048))(v49);
              v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 960))(v49);
              v99 = v97 + v98;
              if (__OFADD__(v97, v98))
                v99 = (v97 >> 31) + 0x7FFFFFFF;
              v100 = *(_DWORD *)(v49 + 252);
              v42 = __OFSUB__(v99, v100);
              v101 = v99 - v100;
              v102 = (v99 >> 31) + 0x7FFFFFFF;
              if (!v42)
                v102 = v101;
              if (v96 > v102)
              {
                if (*((_DWORD *)this + 53) <= v84)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942BD3C4);
                }
                v103 = *((_QWORD *)this + 25) + 40 * v84;
                v104 = *(_DWORD *)(v103 + 24);
                if (v104 <= v96)
                  v104 = v96;
                *(_DWORD *)(v103 + 24) = v104;
                if ((*(_BYTE *)(v49 + 251) & 8) == 0
                  || WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)v49) == 1)
                {
                  v105 = v64 - v96;
                  if (__OFSUB__(v64, v96))
                    v105 = (v64 >> 31) + 0x7FFFFFFF;
                  v47 = v161;
                  if (v158 > v105)
                    v105 = v158;
                  v158 = v105;
                }
                else
                {
                  v105 = 0;
                  v47 = v161;
                }
                v106 = (v84 + 1);
                if (*((_DWORD *)this + 57) <= v106)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942BD3CCLL);
                }
                if (*((_DWORD *)this + 53) <= v84)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942BD3D4);
                }
                v107 = *((_QWORD *)this + 27);
                v108 = *(_DWORD *)(v107 + 4 * v84);
                v109 = *(_DWORD *)(*((_QWORD *)this + 25) + 40 * v84 + 24);
                v42 = __OFADD__(v108, v109);
                v110 = v108 + v109;
                v111 = (v108 >> 31) + 0x7FFFFFFF;
                if (v42)
                  v110 = v111;
                v42 = __OFADD__(v110, v105);
                v112 = v110 + v105;
                v113 = (v110 >> 31) + 0x7FFFFFFF;
                if (v42)
                  v112 = v113;
                if (*(_DWORD *)(v107 + 4 * v106) > v112)
                  v112 = *(_DWORD *)(v107 + 4 * v106);
                *(_DWORD *)(v107 + 4 * v106) = v112;
                goto LABEL_142;
              }
            }
          }
          else
          {
            v91 = *(unsigned __int8 *)(*(_QWORD *)(v89 + 8) + 68) >> 4;
            v67 = v91 > 9;
            v92 = (1 << v91) & 0x23D;
            if (!v67 && v92 != 0)
              goto LABEL_113;
          }
          v47 = v161;
          goto LABEL_142;
        }
        v146 = v65[8];
        v67 = v146 > 0xB;
        v147 = (1 << v146) & 0x818;
        if (v67 || v147 == 0)
          goto LABEL_102;
        v70 = v65 + 4;
LABEL_84:
        v71 = v70[4];
        switch(v71)
        {
          case 4:
            v72 = *(float *)v70;
            if (!v70[6])
              v72 = (float)*(int *)v70;
            goto LABEL_87;
          case 3:
            v114 = *(float *)v70;
            if (!v70[6])
              v114 = (float)*(int *)v70;
            v72 = (float)(v114 * 0.0) / 100.0;
LABEL_87:
            v73 = v72 * 64.0;
            if (v73 < 2147483650.0)
            {
              if (v73 <= -2147483650.0)
                v74 = 0x80000000;
              else
                v74 = (int)v73;
              break;
            }
LABEL_210:
            v74 = 0x7FFFFFFF;
            break;
          case 11:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v70, 0.0);
            v132 = v131 * 64.0;
            if (v132 < 2147483650.0)
            {
              if (v132 > -2147483650.0)
                v74 = (int)v132;
              else
                v74 = 0x80000000;
              break;
            }
            goto LABEL_210;
          default:
            v74 = 0;
            break;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 24) + 8) + 40) + 8) + 3384) != 2
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 88) + 8) + 68) & 4) == 0)
        {
          v75 = WebCore::RenderBoxModelObject::computedCSSPaddingBefore((WebCore::RenderBoxModelObject *)v49);
          v76 = WebCore::RenderBoxModelObject::computedCSSPaddingAfter((WebCore::RenderBoxModelObject *)v49);
          v77 = v75 + v76;
          if (__OFADD__(v75, v76))
            v77 = (v75 >> 31) + 0x7FFFFFFF;
          v78 = WebCore::RenderTableCell::borderBefore((WebCore::RenderTableCell *)v49);
          v79 = v77 + v78;
          if (__OFADD__(v77, v78))
            v79 = (v77 >> 31) + 0x7FFFFFFF;
          v80 = WebCore::RenderTableCell::borderAfter((WebCore::RenderTableCell *)v49);
          v81 = v79 + v80;
          if (__OFADD__(v79, v80))
            v81 = (v79 >> 31) + 0x7FFFFFFF;
          v42 = __OFADD__(v74, v81);
          v82 = v74 + v81;
          if (v42)
            v74 = (v74 >> 31) + 0x7FFFFFFF;
          else
            v74 = v82;
        }
        if (v74 > v64)
          v64 = v74;
        goto LABEL_102;
      }
LABEL_148:
      v115 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      v116 = *(unsigned __int8 *)(v115 + 46);
      if (v116 != 35 && v116 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD2D8);
      }
      if (v34 >= *((unsigned int *)this + 53))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4D4);
      }
      v117 = v34 + 1;
      if (v34 + 1 >= *((unsigned int *)this + 57))
      {
        __break(0xC471u);
        JUMPOUT(0x1942BD4DCLL);
      }
      v118 = *(_DWORD *)(v115 + 336);
      v32 = (_DWORD *)*((_QWORD *)this + 27);
      v119 = v32[v117];
      if (!*(_QWORD *)(*((_QWORD *)this + 25) + 40 * v34 + 16))
        v118 = 0;
      v42 = __OFADD__(v119, v118);
      v120 = v119 + v118;
      v121 = (v119 >> 31) + 0x7FFFFFFF;
      if (v42)
        v120 = v121;
      if (v120 <= v32[v34])
        v120 = v32[v34];
      v32[v117] = v120;
      ++v34;
      v20 = v157;
      if (v117 == v160)
      {
        LODWORD(v33) = *((_DWORD *)this + 53);
        v17 = v155;
        goto LABEL_169;
      }
    }
    v123 = *(float *)v39;
    if (!*(_BYTE *)(v35 + 40 * v34 + 34))
      v123 = (float)*(int *)v39;
    goto LABEL_166;
  }
LABEL_169:
  if (*((_DWORD *)this + 57) <= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1942BD50CLL);
  }
  v125 = v32[v33];
  if (v156)
  {
    v126 = v20;
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v17, v19);
    if (v126)
      --*(_DWORD *)(v154 + 492);
  }
  return v125;
}

uint64_t WebCore::RenderTableCell::cellBaselinePosition(WebCore::RenderTableCell *this)
{
  uint64_t LineBaseline;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  LineBaseline = WebCore::RenderBlockFlow::firstLineBaseline(this);
  v3 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1048))(this);
  v4 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v3, v4))
    v5 = (v3 >> 31) + 0x7FFFFFFF;
  else
    v5 = v3 + v4;
  v6 = WebCore::RenderBox::contentLogicalHeight(this);
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  if ((LineBaseline & 0xFF00000000) != 0)
    return LineBaseline;
  else
    return v7;
}

uint64_t WebCore::RenderTableCell::borderBefore(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return WebCore::RenderBlock::borderBefore(this);
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return WebCore::RenderBlock::borderBefore(this);
  if (*(_BYTE *)(v2 + 46) != 39)
    goto LABEL_16;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return WebCore::RenderBlock::borderBefore(this);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return WebCore::RenderBlock::borderBefore(this);
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1942BD684);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    return WebCore::RenderBlock::borderBefore(this);
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return WebCore::RenderBlock::borderBefore(this);
  v7 = *(unsigned __int8 *)(v6 + 46);
  if (v7 != 35 && v7 != 63)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1942BD664);
  }
  if ((*(_BYTE *)(v6 + 124) & 4) == 0)
    return WebCore::RenderBlock::borderBefore(this);
  return WebCore::RenderTableCell::borderHalfBefore(this, 0);
}

uint64_t WebCore::RenderBlockFlow::firstLineBaseline(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v5;
  int v6;
  unint64_t LineBaseline;
  int LinePhysicalBaseline;
  unsigned int v9;
  int isAtomicInlineLevelBox;
  WebCore::RenderObject *v12;
  WebCore::RenderObject *v13;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_27;
  v1 = *(_QWORD *)(v1 + 8);
  if (!v1)
    goto LABEL_27;
  if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v1 + 124)) & 0xE000) != 0
    && (*(_BYTE *)(v1 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
    && ((*(char *)(v1 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0))
  {
    goto LABEL_24;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v3 = (*(_BYTE *)(v2 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v2 + 462) & 1) == 0;
  if (!v3 || (*(_DWORD *)(v2 + 636) & 0xC0000) != 0)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0
      || (v13 = this,
          isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(this),
          this = v13,
          isAtomicInlineLevelBox))
    {
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
        && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
      {
        goto LABEL_24;
      }
    }
  }
  if ((*((_BYTE *)this + 22) & 4) == 0)
  {
    LineBaseline = WebCore::RenderBlock::firstLineBaseline(this);
    v9 = LineBaseline & 0xFFFFFF00;
    v1 = LineBaseline & 0x100000000;
    return v1 | v9 | LineBaseline;
  }
  v5 = *((_DWORD *)this + 60);
  if (v5 != 1)
  {
    if (v5 != 2)
      goto LABEL_24;
    v1 = *((_QWORD *)this + 29);
    if (v1)
    {
      v12 = this;
      v6 = WebCore::LegacyLineLayout::lineCount((WebCore::LegacyLineLayout *)v1);
      this = v12;
      goto LABEL_18;
    }
LABEL_27:
    LOBYTE(LineBaseline) = 0;
    goto LABEL_28;
  }
  v1 = *((_QWORD *)this + 29);
  if (!v1)
    goto LABEL_27;
  v1 = *(_QWORD *)(v1 + 80);
  if (!v1)
    goto LABEL_27;
  if (*(_DWORD *)(v1 + 60) < 2u)
  {
LABEL_24:
    LOBYTE(LineBaseline) = 0;
    goto LABEL_25;
  }
  v6 = *(_DWORD *)(v1 + 44);
LABEL_18:
  if (!v6 || *((_DWORD *)this + 60) != 1)
    goto LABEL_24;
  LineBaseline = *((_QWORD *)this + 29);
  if (!LineBaseline)
  {
LABEL_25:
    v1 = 0;
LABEL_28:
    v9 = 0;
    return v1 | v9 | LineBaseline;
  }
  LinePhysicalBaseline = WebCore::LayoutIntegration::LineLayout::firstLinePhysicalBaseline((WebCore::LayoutIntegration::LineLayout *)LineBaseline);
  LOBYTE(LineBaseline) = LinePhysicalBaseline & 0xC0;
  v9 = LinePhysicalBaseline & 0xFFFFFF00;
  v1 = 0x100000000;
  return v1 | v9 | LineBaseline;
}

uint64_t WebCore::synthesizedBaseline(WebCore::RenderBoxModelObject *a1, uint64_t a2, int a3, int a4)
{
  __int16 v4;
  unsigned int v5;
  BOOL v6;
  char v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  char v22;

  LOBYTE(v4) = 2;
  switch((unsigned __int16)*(_DWORD *)(a2 + 44) >> 13)
  {
    case 1:
    case 2:
      v4 = (unsigned __int16)*(_DWORD *)(a2 + 44) >> 13;
      break;
    case 3:
    case 5:
      LOBYTE(v4) = 3;
      break;
    case 4:
      break;
    default:
      LOBYTE(v4) = 0;
      break;
  }
  v6 = (v4 & 6) == 2;
  v5 = (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 232) >> 4) & 3;
  v6 = !v6 || v5 == 2;
  v8 = v6 || v5 > 1;
  if ((unsigned __int16)*(_DWORD *)(a2 + 44) >> 13 == 2 && (v8 & 1) != 0)
    return 0;
  v9 = (unsigned int *)((char *)a1 + 160);
  if (!a3)
    v9 = (unsigned int *)((char *)a1 + 164);
  v10 = *v9;
  if (a4)
  {
    if (a4 != 2)
      goto LABEL_18;
    v21 = v10;
    v22 = v8;
    v16 = *(_QWORD *)a1;
    if (a3)
    {
      v18 = (*(uint64_t (**)(void))(v16 + 1096))();
      v19 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)a1 + 1104))(a1);
    }
    else
    {
      v18 = (*(uint64_t (**)(void))(v16 + 1080))();
      v19 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)a1 + 1088))(a1);
    }
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      v20 = (v18 >> 31) + 0x7FFFFFFF;
    v8 = v22;
    v14 = __OFADD__(v21, v20);
    LODWORD(v10) = v21 + v20;
    v15 = (v21 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v12 = v10;
    if (a3)
      v13 = WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent(a1);
    else
      v13 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent(a1);
    v14 = __OFSUB__(v12, v13);
    LODWORD(v10) = v12 - v13;
    v15 = (v12 >> 31) + 0x7FFFFFFF;
  }
  if (v14)
    v10 = v15;
  else
    v10 = v10;
LABEL_18:
  if ((v8 & 1) == 0)
    return ((int)v10 / 2);
  return v10;
}

uint64_t WebCore::RenderFlexibleBox::availableAlignmentSpaceForChild(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  int *v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  int v16;
  unsigned int *v17;
  uint64_t v18;

  if ((a3[5] & 0xF8) == 0)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
        goto LABEL_4;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_4:
      v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 1096))(a3);
      v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 1104))(a3);
      goto LABEL_5;
    }
    v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 1080))(a3);
    v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 1088))(a3);
LABEL_5:
    v8 = v6 + v7;
    if (__OFADD__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    goto LABEL_8;
  }
  v18 = 0;
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
      goto LABEL_18;
LABEL_24:
    v16 = WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment((WebCore::RenderBox *)a3, 0);
    v17 = a3 + 41;
    if (((a3[31] >> 13) & 6) - 2 >= 4)
      v17 = a3 + 40;
    WebCore::RenderBox::computeInlineDirectionMargins((int *)a3, (_QWORD *)a1, v16, *v17 | 0x100000000, 0, (int *)&v18 + 1, (int *)&v18);
    goto LABEL_27;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
    goto LABEL_24;
LABEL_18:
  WebCore::RenderBox::computeBlockDirectionMargins((WebCore::RenderBox *)a3, (const WebCore::RenderBlock *)a1, (WebCore::LayoutUnit *)((char *)&v18 + 4), (WebCore::LayoutUnit *)&v18);
LABEL_27:
  v8 = (HIDWORD(v18) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v18), (_DWORD)v18))
    v8 = HIDWORD(v18) + v18;
LABEL_8:
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_10;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
  {
LABEL_10:
    v9 = (int *)(a3 + 40);
    goto LABEL_11;
  }
  v9 = (int *)(a3 + 41);
LABEL_11:
  v10 = *v9;
  v11 = __OFADD__(v8, v10);
  v12 = v8 + v10;
  v13 = (v8 >> 31) + 0x7FFFFFFF;
  if (!v11)
    v13 = v12;
  v11 = __OFSUB__(a2, v13);
  v14 = a2 - v13;
  if (v11)
    return (a2 >> 31) + 0x7FFFFFFF;
  else
    return v14;
}

uint64_t WebCore::RenderFlexibleBox::crossAxisMarginExtentForChild(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  unsigned int v3;
  int v4;
  int v6;
  char *v7;
  uint64_t v9;

  if ((*((_BYTE *)a2 + 20) & 0xF8) == 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) == 0)
        goto LABEL_4;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
    {
LABEL_4:
      v3 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1096))(a2);
      v4 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1104))(a2);
      goto LABEL_5;
    }
    v3 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1080))(a2);
    v4 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1088))(a2);
LABEL_5:
    if (__OFADD__(v3, v4))
      return (v3 >> 31) + 0x7FFFFFFF;
    else
      return v3 + v4;
  }
  v9 = 0;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
      goto LABEL_10;
LABEL_14:
    v6 = WebCore::RenderBox::containingBlockLogicalWidthForContentInFragment(a2, 0);
    v7 = (char *)a2 + 164;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v7 = (char *)a2 + 160;
    WebCore::RenderBox::computeInlineDirectionMargins((int *)a2, this, v6, *(unsigned int *)v7 | 0x100000000, 0, (int *)&v9 + 1, (int *)&v9);
    goto LABEL_17;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
    goto LABEL_14;
LABEL_10:
  WebCore::RenderBox::computeBlockDirectionMargins(a2, this, (WebCore::LayoutUnit *)((char *)&v9 + 4), (WebCore::LayoutUnit *)&v9);
LABEL_17:
  if (__OFADD__(HIDWORD(v9), (_DWORD)v9))
    return ((HIDWORD(v9) >> 31) + 0x7FFFFFFF);
  else
    return (HIDWORD(v9) + v9);
}

uint64_t WebCore::RenderFlexibleBox::adjustAlignmentForChild(uint64_t result, char a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((result & 0x1000) != 0)
  {
    if ((a2 & 2) == 0)
      goto LABEL_3;
  }
  else if ((a2 & 2) != 0)
  {
LABEL_3:
    v4 = __ROR8__(*(_QWORD *)(a3 + 152), 32);
    goto LABEL_4;
  }
  v4 = *(_QWORD *)(a3 + 152);
LABEL_4:
  LODWORD(v5) = (HIDWORD(v4) >> 31) + 0x7FFFFFFF;
  if (__OFADD__(HIDWORD(v4), a4))
    v5 = v5;
  else
    v5 = (HIDWORD(v4) + a4);
  if ((result & 0x1000) != 0)
  {
    if ((a2 & 2) != 0)
      goto LABEL_9;
LABEL_14:
    v6 = v5 | (v4 << 32);
    goto LABEL_10;
  }
  if ((a2 & 2) != 0)
    goto LABEL_14;
LABEL_9:
  v6 = (v5 << 32) | v4;
LABEL_10:
  *(_QWORD *)(a3 + 152) = v6;
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::firstLinePhysicalBaseline(WebCore::LayoutIntegration::LineLayout *this)
{
  uint64_t v1;
  float *v2;
  uint64_t v3;
  float v4;
  float v5;
  double v6;

  v1 = *((_QWORD *)this + 10);
  if (!v1 || !*(_DWORD *)(v1 + 60))
    return 0;
  if (!*(_DWORD *)(v1 + 44)
    || (v2 = *(float **)(v1 + 32), (v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 56)) != 0)
    && (*(_WORD *)(v3 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942BDDA8);
  }
  switch((unsigned __int16)*(_DWORD *)(v3 + 60) >> 13)
  {
    case 2:
    case 4:
      v4 = v2[4];
      v5 = v2[6] - v2[26];
      break;
    case 3:
    case 5:
      v4 = v2[4];
      goto LABEL_8;
    default:
      v4 = v2[5];
LABEL_8:
      v5 = v2[26];
      break;
  }
  v6 = (float)(v4 + v5) * 64.0;
  if (v6 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v6 <= -2147483650.0)
    return 0x80000000;
  return (int)v6;
}

uint64_t ___ZN3PAL18PassKitCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore", 2);
  qword_1ECE7E470 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL17RevealCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/RevealCore.framework/RevealCore", 2);
  qword_1ECE7EA00 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL15ContactsLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  _MergedGlobals_57 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::FrameLoader::activeDocumentLoader(WebCore::FrameLoader *this)
{
  uint64_t v1;

  v1 = 88;
  if (!*((_BYTE *)this + 80))
    v1 = 96;
  return *(_QWORD *)((char *)this + v1);
}

uint64_t WebCore::RenderLayerModelObject::styleWillChange(WTF **a1, uint64_t a2, WebCore::RenderStyle *a3)
{
  unsigned int v3;
  int v4;
  int v5;
  __int16 v6;
  WTF **v7;
  WTF **v9;
  WTF *v10;
  _QWORD *v11;
  WTF *v12;
  char v13;
  char v14;
  WebCore::RenderStyle *v15;
  WTF **v16;

  v3 = *((_DWORD *)a1 + 5);
  WebCore::RenderLayerModelObject::s_wasFloating = (v3 & 0x800) != 0;
  v4 = (v3 >> 15) & 1;
  WebCore::RenderLayerModelObject::s_hadLayer = (v3 & 0x8000) != 0;
  if ((v3 & 0x20000) == 0)
  {
    LOBYTE(v5) = 0;
    goto LABEL_3;
  }
  v9 = a1;
  if ((*((_BYTE *)a1 + 45) & 2) != 0)
    v9 = (WTF **)*((_QWORD *)a1[4] + 1);
  v10 = v9[11];
  if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 4) + 40) + 20))
  {
    v11 = (_QWORD *)*((_QWORD *)v10 + 5);
    if (!v11[41] && !v11[38] && !v11[39])
    {
      v5 = (v3 >> 20) & 1;
      if (v11[40])
        LOBYTE(v5) = 1;
LABEL_3:
      WebCore::RenderLayerModelObject::s_wasTransformed = v5;
      if (!v4)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  WebCore::RenderLayerModelObject::s_wasTransformed = 1;
  if (v4)
LABEL_4:
    WebCore::RenderLayerModelObject::s_layerWasSelfPainting = (*((_DWORD *)a1[18] + 6) & 0x800) != 0;
LABEL_5:
  v6 = *(_WORD *)((char *)a1 + 69);
  v7 = a1 + 10;
  if ((v6 & 2) == 0)
    v7 = 0;
  if ((_DWORD)a2 != 4)
    return WebCore::RenderElement::styleWillChange((WebCore::RenderBox *)a1, (void *)a2, a3);
  v12 = a1[4];
  if (!v12)
    return WebCore::RenderElement::styleWillChange((WebCore::RenderBox *)a1, (void *)a2, a3);
  if ((v6 & 2) == 0)
    return WebCore::RenderElement::styleWillChange((WebCore::RenderBox *)a1, (void *)a2, a3);
  if (!*((_QWORD *)v12 + 1))
    return WebCore::RenderElement::styleWillChange((WebCore::RenderBox *)a1, (void *)a2, a3);
  v16 = a1;
  v15 = a3;
  v13 = WebCore::operator==((unsigned __int8 *)(*((_QWORD *)v7[1] + 5) + 96), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 96));
  a2 = 4;
  a3 = v15;
  v14 = v13;
  a1 = v16;
  if ((v14 & 1) != 0)
    return WebCore::RenderElement::styleWillChange((WebCore::RenderBox *)a1, (void *)a2, a3);
  WebCore::RenderLayer::clearClipRectsIncludingDescendants(v16[18], (void *)4);
  return WebCore::RenderElement::styleWillChange((WebCore::RenderBox *)v16, (void *)4, v15);
}

_BYTE *WebCore::SettingsBase::setPictographFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  _BYTE *result;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore *v10;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  result = (_BYTE *)WebCore::FontGenericFamilies::setPictographFontFamily(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore **)(v9 + 8);
    else
      v10 = 0;
    return WebCore::invalidateAfterGenericFamilyChange(v10, v8);
  }
  return result;
}

uint64_t WebCore::FontGenericFamilies::setPictographFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::setGenericFontFamilyForScript((uint64_t *)(a1 + 48), a2, a3);
}

_BYTE *WebCore::SettingsBase::setFantasyFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  _BYTE *result;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore *v10;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  result = (_BYTE *)WebCore::FontGenericFamilies::setFantasyFontFamily(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore **)(v9 + 8);
    else
      v10 = 0;
    return WebCore::invalidateAfterGenericFamilyChange(v10, v8);
  }
  return result;
}

uint64_t WebCore::FontGenericFamilies::setFantasyFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::setGenericFontFamilyForScript((uint64_t *)(a1 + 40), a2, a3);
}

_BYTE *WebCore::SettingsBase::setCursiveFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  _BYTE *result;
  WebCore::Page *v8;
  uint64_t v9;
  WebCore *v10;

  v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  result = (_BYTE *)WebCore::FontGenericFamilies::setCursiveFontFamily(v6, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
      v10 = *(WebCore **)(v9 + 8);
    else
      v10 = 0;
    return WebCore::invalidateAfterGenericFamilyChange(v10, v8);
  }
  return result;
}

uint64_t WebCore::FontGenericFamilies::setCursiveFontFamily(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::setGenericFontFamilyForScript((uint64_t *)(a1 + 32), a2, a3);
}

_QWORD *WebCore::GraphicsLayerCA::layerDidDisplay(_QWORD *this, WebCore::PlatformCALayer *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)this[86];
  if (v3)
  {
    if ((WebCore::PlatformCALayer *)this[78] != a2)
    {
      if ((WebCore::PlatformCALayer *)this[83] != a2)
        return this;
      v3 += 2;
    }
    this = WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::keys(&v7, v3);
    v4 = v8;
    v5 = v10;
    if (v8 != v10)
    {
      v6 = v9;
      do
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD, WebCore::PlatformCALayer *))(**(_QWORD **)(v4 + 8) + 96))(*(_QWORD *)(v4 + 8), a2);
        while (1)
        {
          v4 += 16;
          if (v4 == v6)
            break;
          if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
            goto LABEL_13;
        }
        v4 = v6;
LABEL_13:
        ;
      }
      while (v4 != v5);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::CachedCSSStyleSheet::didAddClient(WebCore::CachedCSSStyleSheet *this, WTF **a2)
{
  WTF::StringImpl *result;
  uint64_t *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  char v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  result = (WTF::StringImpl *)WebCore::CachedResource::didAddClient((uint64_t)this, a2);
  if ((*(_WORD *)((_BYTE *)this + 557) & 0x400) == 0)
  {
    if ((*((unsigned int (**)(WTF **))*a2 + 4))(a2) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1942BE3E4);
    }
    if ((*((_BYTE *)this + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedCSSStyleSheet *)((char *)this + 160));
      *((_BYTE *)this + 344) |= 1u;
    }
    v5 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v5)
    {
      v7 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v7 != -1)
      {
        v10 = (WTF::StringImpl *)&v8;
        v9 = &v10;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v5 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v5, 1);
    WTF::String::String((WTF::String *)&v10, *(const char **)(*((_QWORD *)this + 82) + 16));
    (*((void (**)(WTF **, char *, uint64_t *, WTF::StringImpl **, WebCore::CachedCSSStyleSheet *))*a2 + 6))(a2, (char *)this + 160, v5, &v10, this);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::HTMLLinkElement::setCSSStyleSheet(WebCore::HTMLLinkElement *this, const WTF::String *a2, const WTF::URL *a3, const WTF::String *a4, const WebCore::CachedCSSStyleSheet *a5)
{
  WebCore::HTMLLinkElement::setCSSStyleSheet((WebCore::HTMLLinkElement *)((char *)this - 112), a2, a3, a4, a5);
}

uint64_t WebCore::CachedStyleSheetClient::resourceClientType(WebCore::CachedStyleSheetClient *this)
{
  return 3;
}

void WebCore::HTMLLinkElement::setCSSStyleSheet(WebCore::HTMLLinkElement *this, const WTF::String *a2, const WTF::URL *a3, const WTF::String *a4, const WebCore::CachedCSSStyleSheet *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebCore::StyleSheetContents *v33;
  _DWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  __int128 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const WebCore::SecurityOrigin *v43;
  char v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WebCore::StyleSheetContents *v55;
  WebCore::StyleSheetContents *v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  __int16 v62;
  WTF::StringImpl *v63;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v12 = (unsigned int *)(v7 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        *((_DWORD *)this + 6) += 2;
        v14 = (_WORD *)((char *)a5 + 557);
        if ((*(_WORD *)((char *)a5 + 557) >> 5) - 3 >= 2
          && (v15 = *((_QWORD *)this + 28)) != 0
          && *(_DWORD *)(v15 + 4)
          && (WebCore::matchIntegrityMetadataSlow(a5, (WebCore::HTMLLinkElement *)((char *)this + 224), a3) & 1) == 0)
        {
          v28 = *(_QWORD **)(*((_QWORD *)this + 5) + 8);
          WebCore::integrityMismatchDescription(a5, (WebCore::HTMLLinkElement *)((char *)this + 224), &v63);
          WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Cannot load stylesheet ", 24, (uint64_t *)&v63, &v57);
          WebCore::Document::addConsoleMessage(v28, 8, 2, &v57, 0);
          v30 = v57;
          v57 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v29);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = v63;
          v63 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v29);
            else
              *(_DWORD *)v31 -= 2;
          }
          *((_BYTE *)this + 291) &= ~1u;
          WebCore::HTMLLinkElement::sheetLoaded(this);
          WebCore::HTMLLinkElement::notifyLoadedSheetAndAllCriticalSubresources(this, 1);
        }
        else
        {
          WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v57, *(const WebCore::Document **)(*((_QWORD *)this + 5) + 8), a3, a4);
          v16 = WebCore::FrameLoader::subresourceCachePolicy(*(WebCore::FrameLoader **)(v7 + 280), a3);
          WebCore::CachedCSSStyleSheet::restoreParsedStyleSheet(a5, (uint64_t)&v57, v16, *(_QWORD *)(v7 + 280), &v56);
          if (v56)
          {
            v55 = v56;
            v17 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            v18 = *(_QWORD *)(v17 + 528);
            if (v18)
            {
              v18 = *(_QWORD *)(v18 + 8);
              if (v18)
              {
                v18 = *(_QWORD *)(v18 + 24);
                if (v18)
                {
                  v18 = *(_QWORD *)(v18 + 8);
                  if (v18)
                    LODWORD(v18) = *(unsigned __int8 *)(v18 + 450);
                }
              }
            }
            WebCore::HTMLLinkElement::initializeStyleSheet((uint64_t)this, &v55, a5, (*(__int128 *)(*(_QWORD *)(v17 + 680) + 672) >> 19) & 0x100 | v18);
            if (v55)
            {
              if (*(_DWORD *)v55 == 1)
              {
                WebCore::StyleSheetContents::~StyleSheetContents(v55, v19);
                WTF::fastFree(v46, v47);
              }
              else
              {
                --*(_DWORD *)v55;
              }
            }
            *((_BYTE *)this + 291) &= ~1u;
            v20 = *((_QWORD *)this + 25);
            if (v20 && (v21 = *(_QWORD *)(v20 + 24), *(_DWORD *)(v21 + 68)))
            {
              v54 = 0;
              while ((WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v21 + 56) + 8 * v54)) & 1) == 0)
              {
                if (++v54 >= (unint64_t)*(unsigned int *)(v21 + 68))
                  goto LABEL_19;
              }
            }
            else
            {
LABEL_19:
              v22 = *((unsigned __int8 *)this + 292);
              *((_BYTE *)this + 292) = 0;
              if (v22)
              {
                if (v22 == 2)
                  WebCore::Style::Scope::didChangeActiveStyleSheetCandidates(*((WebCore::Style::Scope **)this + 23));
                else
                  WebCore::Style::Scope::removePendingSheet(*((WebCore::Document ***)this + 23), this);
              }
            }
            WebCore::HTMLLinkElement::notifyLoadedSheetAndAllCriticalSubresources(this, 0);
          }
          else
          {
            v32 = WTF::fastMalloc((WTF *)0xD8);
            v33 = (WebCore::StyleSheetContents *)v32;
            *(_DWORD *)v32 = 1;
            *(_QWORD *)(v32 + 8) = 0;
            *(_QWORD *)(v32 + 16) = 0;
            v34 = *(_DWORD **)a2;
            if (*(_QWORD *)a2)
              *v34 += 2;
            *(_QWORD *)(v32 + 24) = v34;
            *(_OWORD *)(v32 + 32) = 0u;
            *(_OWORD *)(v32 + 48) = 0u;
            *(_OWORD *)(v32 + 64) = 0u;
            *(_OWORD *)(v32 + 80) = 0u;
            *(_OWORD *)(v32 + 96) = 0u;
            v35 = WebCore::starAtomData;
            if (WebCore::starAtomData)
              *(_DWORD *)WebCore::starAtomData += 2;
            *(_QWORD *)(v32 + 112) = v35;
            *(_WORD *)(v32 + 120) = 0;
            *(_BYTE *)(v32 + 122) = 1;
            *(_QWORD *)(v32 + 123) = 0;
            *(_BYTE *)(v32 + 131) = 0;
            v36 = v57;
            if (v57)
              *(_DWORD *)v57 += 2;
            *(_QWORD *)(v32 + 136) = v36;
            v37 = v59;
            *(_OWORD *)(v32 + 144) = v58;
            *(_OWORD *)(v32 + 160) = v37;
            v38 = v60;
            if (v60)
              *(_DWORD *)v60 += 2;
            v39 = v61;
            *(_QWORD *)(v32 + 176) = v38;
            *(_QWORD *)(v32 + 184) = v39;
            *(_WORD *)(v32 + 192) = v62;
            *(_QWORD *)(v32 + 200) = 0;
            *(_QWORD *)(v32 + 208) = 0;
            v55 = (WebCore::StyleSheetContents *)v32;
            v56 = (WebCore::StyleSheetContents *)v32;
            *(_DWORD *)v32 = 2;
            v40 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            v41 = *(_QWORD *)(v40 + 528);
            if (v41)
            {
              v41 = *(_QWORD *)(v41 + 8);
              if (v41)
              {
                v41 = *(_QWORD *)(v41 + 24);
                if (v41)
                {
                  v41 = *(_QWORD *)(v41 + 8);
                  if (v41)
                    LODWORD(v41) = *(unsigned __int8 *)(v41 + 450);
                }
              }
            }
            WebCore::HTMLLinkElement::initializeStyleSheet((uint64_t)this, &v55, a5, (*(__int128 *)(*(_QWORD *)(v40 + 680) + 672) >> 19) & 0x100 | v41);
            if (v55)
            {
              if (*(_DWORD *)v55 == 1)
              {
                WebCore::StyleSheetContents::~StyleSheetContents(v55, v42);
                WTF::fastFree(v50, v51);
              }
              else
              {
                --*(_DWORD *)v55;
              }
            }
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192), (WTF::StringImpl *)v42);
            v44 = WebCore::StyleSheetContents::parseAuthorStyleSheet(v33, a5, v43);
            *((_BYTE *)this + 291) &= ~1u;
            if ((v44 & 1) != 0)
            {
              *((_BYTE *)v33 + 123) |= (*v14 >> 5) - 3 < 2;
              *((_BYTE *)v33 + 123) |= WebCore::CachedCSSStyleSheet::mimeTypeAllowedByNosniff(a5) ^ 1;
              WebCore::StyleSheetContents::checkLoaded((uint64_t)v33, v45);
              if (WebCore::StyleSheetContents::isCacheable(v33))
                WebCore::CachedCSSStyleSheet::saveParsedStyleSheet(a5, &v56);
            }
            else
            {
              WebCore::HTMLLinkElement::sheetLoaded(this);
              WebCore::HTMLLinkElement::notifyLoadedSheetAndAllCriticalSubresources(this, 1);
            }
            if (*(_DWORD *)v33 == 1)
            {
              WebCore::StyleSheetContents::~StyleSheetContents(v33, v23);
              WTF::fastFree(v48, v49);
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
          v24 = v60;
          v60 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v57;
          v57 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        if (*((_DWORD *)this + 6) == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(this, v23);
        }
        else
        {
          *((_DWORD *)this + 6) -= 2;
        }
        do
        {
          v26 = __ldaxr(v12);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v12));
        if (!v27)
        {
          atomic_store(1u, v12);
          v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v52 = off_1E31FE290;
          *((_QWORD *)v52 + 1) = v12;
          v57 = v52;
          WTF::ensureOnMainThread();
          v53 = v57;
          v57 = 0;
          if (v53)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 8))(v53);
        }
      }
    }
  }
}

uint64_t WebCore::ContentSecurityPolicy::allowScriptFromSource(uint64_t a1, WTF::URL *a2, unsigned __int8 a3, WTF::URL *a4, const WTF::String *a5)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::ContentSecurityPolicyDirectiveList **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  WTF::StringImpl *v26;
  _BYTE v27[16];
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE v30[24];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v5)
  {
    v13 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(a1 + 136);
    v14 = 8 * v5;
    while (!WebCore::ContentSecurityPolicyDirectiveList::strictDynamicIncluded(*v13))
    {
      ++v13;
      v14 -= 8;
      if (!v14)
      {
        v15 = (unsigned __int8 *)WTF::URL::protocol(a2);
        if ((WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(v15, v16, v17, v18) & 1) != 0)
          return 1;
        v29 = 0;
        if (!*(_QWORD *)a4)
          a4 = a2;
        v28 = 0xFFFFFFFFLL;
        WebCore::parseSubResourceIntegrityIntoDigests((WebCore *)v27, a5);
        WTF::String::trim();
        v19 = operator new(0x30uLL);
        *v19 = &off_1E3403510;
        v19[1] = a2;
        v19[2] = a1;
        v19[3] = a4;
        v19[4] = &v29;
        v19[5] = &v28;
        v31 = v19;
        v25[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForScript;
        v25[1] = 0;
        v24 = a3;
        v6 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)const,WTF::URL const&,BOOL,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,WTF::String&>(*(_QWORD **)(a1 + 136), *(_DWORD *)(a1 + 148), (uint64_t)v30, (uint64_t)v25, (uint64_t)a2, &v24, (uint64_t)v27, (uint64_t)&v26);
        (*(void (**)(_QWORD *))(*v19 + 40))(v19);
        v21 = v26;
        v26 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v20);
        v23 = v29;
        v29 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v22);
          else
            *(_DWORD *)v23 -= 2;
        }
        return v6;
      }
    }
  }
  return 1;
}

uint64_t WebCore::ContentSecurityPolicy::allowInlineScript(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v9;
  uint64_t v10;
  WebCore::ContentSecurityPolicyDirectiveList **v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _QWORD v24[2];
  WTF::StringImpl *v25;
  _BYTE v26[23];
  char v27;
  _QWORD v28[2];
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v28[0] = a4;
  v28[1] = a5;
  if ((a8 & 1) == 0)
  {
    v9 = *(unsigned int *)(a1 + 148);
    if ((_DWORD)v9)
    {
      v17 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(a1 + 136);
      v18 = 8 * v9;
      do
      {
        if (WebCore::ContentSecurityPolicyDirectiveList::strictDynamicIncluded(*v17))
          return 1;
        ++v17;
        v18 -= 8;
      }
      while (v18);
      if (!*(_DWORD *)(a1 + 148))
        return 1;
      v27 = 0;
      WebCore::generateHashesForContent((WTF *)v26, a4, a5, *(_BYTE *)(a1 + 188));
      WTF::String::trim();
      v19 = operator new(0x38uLL);
      *v19 = &off_1E3403240;
      v19[1] = a1;
      v19[2] = a2;
      v19[3] = v28;
      v19[4] = a3;
      v19[5] = a6;
      v19[6] = &v27;
      v30 = v19;
      v24[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineScriptElement;
      v24[1] = 0;
      v10 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)const,WTF::String&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(a1, (uint64_t)v29, (uint64_t)v24, (uint64_t)&v25, (uint64_t)v26);
      v21 = v30;
      if (v30 == v29)
      {
        v22 = 4;
        v21 = v29;
      }
      else
      {
        if (!v30)
        {
LABEL_13:
          v23 = v25;
          v25 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v20);
            else
              *(_DWORD *)v23 -= 2;
          }
          WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v20);
          return v10;
        }
        v22 = 5;
      }
      (*(void (**)(void))(*v21 + 8 * v22))();
      goto LABEL_13;
    }
  }
  return 1;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveScript(WebCore::ContentSecurityPolicyDirectiveList *this, WebCore::ContentSecurityPolicySourceListDirective *a2, const WTF::String *a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v3;
  WTF::StringImpl *v5;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (a2)
  {
    v3 = a2;
LABEL_4:
    if (a3)
      *(_DWORD *)a3 += 2;
    v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = a3;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return v3;
  }
  v3 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 17);
  if (v3)
    goto LABEL_4;
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    if (a3)
      *(_DWORD *)a3 += 2;
    v8 = *(WTF::StringImpl **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = a3;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, 0);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 7);
}

void WebCore::StyledElement::styleAttributeChanged(WebCore::StyledElement *a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::String *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  unsigned int v24;
  uint64_t v25;
  WebCore::MutableStyleProperties *v26;
  void *v27;
  char v29;
  int v30;
  uint64_t v31;
  const WebCore::CSSParserContext *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::MutableStyleProperties *v48;
  void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t (*v55)();
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD **v59;
  _DWORD *v60;
  WTF *v61;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  void *v66;
  WTF::String *v67;
  unint64_t v68;
  int v69;
  WTF::StringImpl *v70[5];
  WTF::StringImpl *v71;
  _DWORD *v72;

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v69 = -1;
  v7 = *(_QWORD *)(v6 + 728);
  if (v7 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) && !*(_DWORD *)(v6 + 3272))
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 728) + 16))(*(_QWORD *)(v6 + 728));
    v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 168))(v8);
  }
  if (!*(_QWORD *)a2)
  {
    v48 = WebCore::StyledElement::ensureMutableInlineStyle(a1, a2);
    WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::MutableStyleProperties *)((char *)v48 + 16), v49);
    goto LABEL_25;
  }
  if (a3 == 1)
    goto LABEL_23;
  v9 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v6 + 192));
  v13 = v9;
  if (v9)
  {
    do
      v14 = __ldaxr(v9);
    while (__stlxr(v14 + 1, v9));
  }
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v16 = *(WTF::String **)(v15 + 8);
    v17 = *(unsigned int *)(v15 + 4);
    v18 = (unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0x100000000;
  }
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v67 = v16;
    v68 = v18;
    if (WebCore::Element::isNonceable(a1, v10, v11, v16, v12))
      v19 = (*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 216;
    else
      v19 = MEMORY[0x1E0CBF3B8];
    v16 = v67;
    v18 = v68;
  }
  else
  {
    v19 = MEMORY[0x1E0CBF3B8];
  }
  v20 = **((_QWORD **)a1 + 5);
  if (v20)
    v21 = (*(_WORD *)(v20 + 28) & 0x80) == 0;
  else
    v21 = 1;
  v29 = !v21 && *(_BYTE *)(v20 + 193) == 0;
  v22 = WebCore::ContentSecurityPolicy::allowInlineStyle((uint64_t)v13, v6 + 736, (uint64_t)&v69, (uint64_t)v16, v18 | v17, 1, (uint64_t)a1, v19, v29);
  if (v13)
  {
    if (!atomic_load(v13))
    {
      __break(0xC471u);
      JUMPOUT(0x1942BF08CLL);
    }
    do
      v24 = __ldaxr(v13);
    while (__stlxr(v24 - 1, v13));
  }
  if (v22)
  {
LABEL_23:
    v25 = *((_QWORD *)a1 + 13);
    v26 = *(WebCore::MutableStyleProperties **)(v25 + 8);
    if (v26)
    {
      if ((*(_BYTE *)(v25 + 4) & 1) == 0)
        goto LABEL_25;
      v30 = (*(_DWORD *)v26)++;
      if ((*((_BYTE *)v26 + 4) & 8) != 0)
      {
        v31 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
        *(_DWORD *)(v31 + 24) += 2;
        WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v70, (const WebCore::Document *)v31);
        WebCore::MutableStyleProperties::parseDeclaration((uint64_t)v26, a2, (uint64_t)v70, v32);
        v34 = v71;
        v71 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = v70[0];
        v70[0] = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v33);
          else
            *(_DWORD *)v35 -= 2;
        }
        if (*(_DWORD *)(v31 + 24) == 2)
        {
          if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v31, v33);
        }
        else
        {
          *(_DWORD *)(v31 + 24) -= 2;
        }
        if (*(_DWORD *)v26 != 1)
        {
          --*(_DWORD *)v26;
          goto LABEL_72;
        }
        WebCore::MutableStyleProperties::~MutableStyleProperties(v26, v33);
        goto LABEL_100;
      }
      if (v30)
      {
        *(_DWORD *)v26 = v30;
      }
      else
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v26, a2);
        WTF::fastFree(v65, v66);
      }
    }
    WebCore::CSSParserImpl::parseInlineStyleDeclaration(a1, (uint64_t)v70);
    v51 = v70[0];
    v70[0] = 0;
    v52 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)(v25 + 8) = v51;
    if (!v52)
      goto LABEL_72;
    if (*(_DWORD *)v52 == 1)
    {
      if ((*(_BYTE *)(v52 + 4) & 8) != 0)
      {
        v57 = *(unsigned int *)(v52 + 28);
        if ((_DWORD)v57)
        {
          v58 = 16 * v57;
          v59 = (_DWORD **)(*(_QWORD *)(v52 + 16) + 8);
          do
          {
            v60 = *v59;
            *v59 = 0;
            if (v60)
            {
              if (*v60 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v50);
              else
                *v60 -= 2;
            }
            v59 += 2;
            v58 -= 16;
          }
          while (v58);
        }
        v61 = *(WTF **)(v52 + 16);
        if ((WTF *)(v52 + 32) != v61 && v61 != 0)
        {
          *(_QWORD *)(v52 + 16) = 0;
          *(_DWORD *)(v52 + 24) = 0;
          WTF::fastFree(v61, v50);
        }
        v63 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = 0;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        v64 = (WTF *)v52;
      }
      else
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v52, v50);
      }
      WTF::fastFree(v64, v50);
    }
    else
    {
      --*(_DWORD *)v52;
    }
    v53 = v70[0];
    v70[0] = 0;
    if (!v53)
      goto LABEL_72;
    if (*(_DWORD *)v53 != 1)
    {
      --*(_DWORD *)v53;
      goto LABEL_72;
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v53, v50);
LABEL_100:
    WTF::fastFree(v41, v42);
LABEL_72:
    WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v25 + 8), 348, &v72);
    if (v72)
    {
      if (*v72 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, v54);
      else
        *v72 -= 2;
      v55 = WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>::unspecifiedBoolTypeInstance;
    }
    else
    {
      v55 = 0;
    }
    if (v55)
    {
      v56 = *(_DWORD **)(*((_QWORD *)a1 + 5) + 8);
      v56[6] += 2;
      v72 = v56;
      WebCore::Document::setHasElementUsingStyleBasedEditability((uint64_t)v56);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v72);
    }
  }
LABEL_25:
  *(_DWORD *)(*((_QWORD *)a1 + 13) + 4) &= ~8u;
  WebCore::Node::invalidateStyle((uint64_t)a1, 2u, 0);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v36 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    v37 = *(_QWORD *)(v36 + 528);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 24);
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 8);
          if (v40)
            goto LABEL_47;
        }
      }
    }
    v43 = *(_QWORD *)(v36 + 2632);
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 8);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 528);
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 8);
          if (v46)
          {
            v47 = *(_QWORD *)(v46 + 24);
            if (v47)
            {
              v40 = *(_QWORD *)(v47 + 8);
              if (v40)
LABEL_47:
                WebCore::InspectorInstrumentation::didInvalidateStyleAttrImpl(*(_QWORD *)(*(_QWORD *)(v40 + 80) + 8), a1);
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v27);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

uint64_t WebCore::ContentSecurityPolicy::allowInlineStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9)
{
  _QWORD *v10;
  WebCore::ContentSecurityPolicySourceListDirective *(*v11)(WebCore::ContentSecurityPolicyDirectiveList *, WTF::StringImpl **, uint64_t);
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v21;
  _QWORD v22[2];
  WTF::StringImpl *v23;
  _BYTE v24[16];
  _QWORD v25[2];
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v25[0] = a4;
  v25[1] = a5;
  if ((a9 & 1) != 0 || !*(_DWORD *)(a1 + 148) || *(_BYTE *)(a1 + 180))
    return 1;
  WebCore::generateHashesForContent((WTF *)v24, a4, a5, *(_BYTE *)(a1 + 189));
  WTF::String::trim();
  v10 = operator new(0x30uLL);
  *v10 = &off_1E3403288;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = v25;
  v10[4] = a3;
  v10[5] = a7;
  v27 = v10;
  if (a6)
    v11 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineStyleAttribute;
  else
    v11 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeInlineStyleElement;
  v22[0] = v11;
  v22[1] = 0;
  v21 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)const,WTF::String&,WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(a1, (uint64_t)v26, (uint64_t)v22, (uint64_t)&v23, (uint64_t)v24);
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
    goto LABEL_11;
  }
  if (v27)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v12);
  return v21;
}

WTF *WebCore::generateHashesForContent(WTF *result, uint64_t a2, uint64_t a3, char a4)
{
  char v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  _QWORD *v17;
  WTF **v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  _QWORD *v22;
  WTF *v23;
  char v24[8];
  WTF *v25;
  int v26;
  _DWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v4 = a4;
  v5 = (unsigned int *)result;
  v28 = a2;
  v29 = a3;
  if (!a4)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    return result;
  }
  WTF::StringView::utf8();
  v6 = 0;
  v7 = 0;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  do
  {
    if (*(_QWORD *)&v27[1])
    {
      v8 = (const void *)(*(_QWORD *)&v27[1] + 16);
      v9 = *(_QWORD *)(*(_QWORD *)&v27[1] + 8);
    }
    else
    {
      LODWORD(v9) = 0;
      v8 = 0;
    }
    WebCore::cryptographicDigestForBytes(v4 & -v4, v8, v9, (uint64_t)v24);
    v11 = v7;
    if (v7 == v5[2])
    {
      v12 = WTF::Vector<WebCore::ResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v7 + 1, (unint64_t)v24);
      v13 = v5[3];
      v6 = *(_QWORD *)v5;
      v14 = *(_QWORD *)v5 + 24 * v13;
      *(_BYTE *)v14 = *(_BYTE *)v12;
      v16 = (unsigned int *)(v12 + 20);
      v15 = (WTF *)*(unsigned int *)(v12 + 20);
      *(_QWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
      *(_QWORD *)(v14 + 8) = 0;
      v17 = (_QWORD *)(v14 + 8);
      if (!(_DWORD)v15)
        goto LABEL_11;
      v18 = (WTF **)(v12 + 8);
      v19 = (void *)WTF::fastMalloc(v15);
      *(_DWORD *)(v6 + 24 * v13 + 16) = (_DWORD)v15;
      *v17 = v19;
    }
    else
    {
      v20 = v6 + 24 * v7;
      *(_BYTE *)v20 = v24[0];
      v21 = (WTF *)v27[0];
      *(_QWORD *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 20) = (_DWORD)v21;
      *(_QWORD *)(v20 + 8) = 0;
      v22 = (_QWORD *)(v20 + 8);
      if (!(_DWORD)v21)
        goto LABEL_11;
      v19 = (void *)WTF::fastMalloc(v21);
      *(_DWORD *)(v6 + 24 * v11 + 16) = (_DWORD)v21;
      *v22 = v19;
      v16 = v27;
      v18 = &v25;
    }
    memcpy(v19, *v18, *v16);
LABEL_11:
    v7 = v5[3] + 1;
    v5[3] = v7;
    v23 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v23, v10);
    }
    v4 &= v4 - 1;
  }
  while (v4);
  result = *(WTF **)&v27[1];
  *(_QWORD *)&v27[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::ContentSecurityPolicySourceListDirective *WebCore::ContentSecurityPolicyDirectiveList::operativeDirectiveStyle(WebCore::ContentSecurityPolicyDirectiveList *this, WebCore::ContentSecurityPolicySourceListDirective *a2, const WTF::String *a3)
{
  WebCore::ContentSecurityPolicySourceListDirective *v3;
  WTF::StringImpl *v5;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (a2)
  {
    v3 = a2;
LABEL_4:
    if (a3)
      *(_DWORD *)a3 += 2;
    v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = a3;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return v3;
  }
  v3 = (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 18);
  if (v3)
    goto LABEL_4;
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    if (a3)
      *(_DWORD *)a3 += 2;
    v8 = *(WTF::StringImpl **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = a3;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, 0);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return (WebCore::ContentSecurityPolicySourceListDirective *)*((_QWORD *)this + 7);
}

WTF::MonotonicTime *WebCore::Element::invalidateStyleInternal(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  WTF::MonotonicTime *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if ((*((_BYTE *)this + 22) & 8) == 0)
    return this;
  v1 = (uint64_t)this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_QWORD *)(v2 + 1944))
    return this;
  if (*(_BYTE *)(v2 + 3405))
    return this;
  if (*(_BYTE *)(v2 + 3392))
    return this;
  *((_WORD *)this + 15) |= 0x10u;
  v3 = *((_QWORD *)this + 8);
  v4 = HIWORD(v3) & 7;
  if (v4 > 2)
    return this;
  *((_QWORD *)this + 8) = v3 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
  if ((_DWORD)v4)
    return this;
  *((_DWORD *)this + 6) += 2;
  v5 = *((unsigned __int16 *)this + 14);
  if ((v5 & 0x80) != 0)
  {
    v13 = *((_QWORD *)this + 25);
    if (!v13)
      goto LABEL_39;
LABEL_32:
    v6 = *(WTF::MonotonicTime **)(v13 + 8);
    goto LABEL_33;
  }
  if ((~v5 & 0x408) == 0)
  {
    this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 368))(this);
    if ((_DWORD)this)
    {
      v13 = *(_QWORD *)(v1 + 112);
      if (!v13)
        goto LABEL_39;
      goto LABEL_32;
    }
  }
  v6 = *(WTF::MonotonicTime **)(v1 + 32);
  if (!v6)
    goto LABEL_39;
  v7 = *((_WORD *)v6 + 14);
  if ((v7 & 0x80) != 0)
  {
    v13 = *((_QWORD *)v6 + 25);
    if (!v13)
      goto LABEL_39;
    goto LABEL_32;
  }
  if ((v7 & 8) == 0)
    goto LABEL_39;
  if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) == 0
    || (v11 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
  {
LABEL_14:
    *((_QWORD *)v6 + 8) |= 0x10000000000000uLL;
    do
    {
      if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v10 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v10)
          *(_QWORD *)(v10 + 64) |= 0x8000000000000uLL;
      }
      v8 = *((_QWORD *)v6 + 8);
      if ((v8 & 0x8000000000000) != 0)
        break;
      *((_QWORD *)v6 + 8) = v8 | 0x8000000000000;
      this = (WTF::MonotonicTime *)*((_QWORD *)v6 + 4);
      if (!this)
        break;
      v9 = *((_WORD *)this + 14);
      if ((v9 & 0x80) != 0)
      {
        v14 = *((_QWORD *)this + 25);
        if (!v14)
          break;
        this = *(WTF::MonotonicTime **)(v14 + 8);
      }
      else
      {
        if ((v9 & 8) == 0)
          break;
        if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v12 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v12)
          {
            this = *(WTF::MonotonicTime **)(v12 + 224);
            if (!this)
              break;
            this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 16))(this);
          }
        }
      }
      v6 = this;
    }
    while (this);
    if (!v1)
      goto LABEL_41;
    goto LABEL_39;
  }
  this = *(WTF::MonotonicTime **)(v11 + 224);
  if (!this)
    goto LABEL_39;
  this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, uint64_t))(*(_QWORD *)this + 16))(this, v1);
  v6 = this;
LABEL_33:
  if (v6)
    goto LABEL_14;
LABEL_39:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v22 = *(_WORD *)(v1 + 30);
    if ((v22 & 0x400) == 0)
    {
      v23 = *(_WORD *)(v1 + 28);
      if ((v23 & 0xF000) == 0x9000)
      {
        this = (WTF::MonotonicTime *)WebCore::Document::removedLastRef((WebCore::Document *)v1);
      }
      else
      {
        if ((v23 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
          v22 = *(_WORD *)(v1 + 30);
        }
        *(_WORD *)(v1 + 30) = v22 | 0x400;
        this = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
LABEL_41:
  v15 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v16 = *(_QWORD *)(v15 + 1272);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 64);
    if ((v17 & 0x8000000000000) != 0 || (v17 & 0x7000000000000) != 0 || (*(_WORD *)(v16 + 30) & 0x20) != 0)
    {
      *(_DWORD *)(v15 + 24) += 2;
      *(_QWORD *)(v15 + 64) |= 0x8000000000000uLL;
      if (((*(_QWORD *)(v15 + 1536) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v15 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !*(_BYTE *)(v15 + 3362))
      {
        *(_QWORD *)(v15 + 1528) = 0;
        WTF::MonotonicTime::now(this);
        this = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v15 + 1504, v18 + 0.0);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v24 = *(_QWORD *)(v15 + 528);
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v25)
            {
              v26 = *(_QWORD *)(v25 + 24);
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 8);
                if (v27)
                  goto LABEL_66;
              }
            }
          }
          v28 = *(_QWORD *)(v15 + 2632);
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 8);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 528);
              if (v30)
              {
                v31 = *(_QWORD *)(v30 + 8);
                if (v31)
                {
                  v32 = *(_QWORD *)(v31 + 24);
                  if (v32)
                  {
                    v27 = *(_QWORD *)(v32 + 8);
                    if (v27)
                    {
LABEL_66:
                      this = *(WTF::MonotonicTime **)(*(_QWORD *)(v27 + 80) + 8);
                      if (this)
                        this = WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, (WebCore::Document *)v15);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v20 = *(_WORD *)(v15 + 30);
        if ((v20 & 0x400) == 0)
        {
          v21 = *(_WORD *)(v15 + 28);
          if ((v21 & 0xF000) == 0x9000)
          {
            return (WTF::MonotonicTime *)WebCore::Document::removedLastRef((WebCore::Document *)v15);
          }
          else
          {
            if ((v21 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 160) + 16))(*(_QWORD *)(v15 + 160));
              v20 = *(_WORD *)(v15 + 30);
            }
            *(_WORD *)(v15 + 30) = v20 | 0x400;
            return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
          }
        }
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  return this;
}

WebCore::CSSParserContext *WebCore::CSSParserContext::CSSParserContext(WebCore::CSSParserContext *this, const WebCore::Document *a2, const WTF::URL *a3, const WTF::String *a4)
{
  _DWORD *v5;
  const WTF::URL *v6;
  __int128 v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  WebCore::OriginAccessPatternsForWebProcess *v36;
  uint64_t v37;
  uint64_t *v38;
  int canRequest;
  const WebCore::Document *v40;

  v5 = *(_DWORD **)a3;
  v6 = a3;
  if (*(_QWORD *)a3
    || (v6 = (const WebCore::Document *)((char *)a2 + 848), (v5 = (_DWORD *)*((_QWORD *)a2 + 106)) != 0))
  {
    *v5 += 2;
  }
  *(_QWORD *)this = v5;
  v7 = *(_OWORD *)((char *)v6 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)v6 + 24);
  *(_OWORD *)((char *)this + 8) = v7;
  v8 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v8 += 2;
  v9 = *(unsigned __int16 *)((char *)this + 51);
  *((_QWORD *)this + 5) = v8;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 3384) == 2;
  *(_WORD *)((char *)this + 49) = 0;
  v10 = v9 & 0xFFFFFFFE | (*((unsigned __int8 *)this + 53) << 16) | *((_WORD *)a2 + 1679) & 1;
  *(_WORD *)((char *)this + 51) = v10;
  v11 = 2;
  if (*(_QWORD *)a3)
  {
    v40 = a2;
    WebCore::SecurityContext::securityOrigin((const WebCore::Document *)((char *)a2 + 192), a2);
    v37 = (uint64_t)v36;
    v38 = WebCore::OriginAccessPatternsForWebProcess::singleton(v36);
    canRequest = WebCore::SecurityOrigin::canRequest(v37, this, (uint64_t (***)(_QWORD, uint64_t))v38);
    a2 = v40;
    if (canRequest)
      v11 = 2;
    else
      v11 = 0;
    v10 = *(unsigned __int16 *)((char *)this + 51) | (*((unsigned __int8 *)this + 53) << 16);
  }
  v12 = v10 & 0xFFFFFFF9 | v11;
  *((_BYTE *)this + 53) = BYTE2(v10);
  *(_WORD *)((char *)this + 51) = v10 & 0xFFF9 | v11;
  v13 = *((_QWORD *)a2 + 66);
  if (v13)
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (v13)
    {
      v13 = *(_QWORD *)(v13 + 24);
      if (v13)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (v13)
          LODWORD(v13) = 8 * *(unsigned __int8 *)(v13 + 450);
      }
    }
  }
  v14 = v13 | v12 & 0xFFFFFFE3;
  *(_WORD *)((char *)this + 51) = v14;
  v15 = HIWORD(v12);
  *((_BYTE *)this + 53) = v15;
  v16 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 1) & 0x20 | v14 & 0xFFFFFFCB;
  *((_BYTE *)this + 53) = v15;
  *(_WORD *)((char *)this + 51) = v16;
  v16 &= ~0x40u;
  v17 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 2) & 0x40 | v16;
  v16 >>= 16;
  *((_BYTE *)this + 53) = v16;
  *(_WORD *)((char *)this + 51) = v17;
  v18 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 696) >> 35) & 0x80 | v17 & 0xFFFFFF6B;
  *((_BYTE *)this + 53) = v16;
  *(_WORD *)((char *)this + 51) = v18;
  v18 &= ~0x100u;
  v19 = (16 * *(_DWORD *)(*((_QWORD *)a2 + 85) + 688)) & 0x100 | v18;
  v18 >>= 16;
  *((_BYTE *)this + 53) = v18;
  *(_WORD *)((char *)this + 51) = v19;
  v20 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 9) & 0x200 | v19 & 0xFFFFFDEB;
  *((_BYTE *)this + 53) = v18;
  *(_WORD *)((char *)this + 51) = v20;
  v20 &= ~0x400u;
  v21 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 9) & 0x400 | v20;
  v20 >>= 16;
  *((_BYTE *)this + 53) = v20;
  *(_WORD *)((char *)this + 51) = v21;
  v22 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 10) & 0x800 | v21 & 0xFFFFF7EB;
  *((_BYTE *)this + 53) = v20;
  *(_WORD *)((char *)this + 51) = v22;
  v22 &= ~0x1000u;
  v23 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 14) & 0x1000 | v22;
  v22 >>= 16;
  *((_BYTE *)this + 53) = v22;
  *(_WORD *)((char *)this + 51) = v23;
  v24 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) >> 14) & 0x2000 | v23 & 0xFFFFDFEB;
  *((_BYTE *)this + 53) = v22;
  *(_WORD *)((char *)this + 51) = v24;
  v24 &= ~0x4000u;
  v25 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 672) >> 18) & 0x4000 | v24;
  v24 >>= 16;
  *((_BYTE *)this + 53) = v24;
  *(_WORD *)((char *)this + 51) = v25;
  v26 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 672) >> 22) & 0x8000 | v25 & 0xFFFF7FEB;
  *((_BYTE *)this + 53) = v24;
  *(_WORD *)((char *)this + 51) = v26;
  v27 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 688) >> 13) & 0x10000 | v26 & 0xFEFFEB;
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = BYTE2(v27);
  v28 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 696) >> 19) & 0x20000 | v27 & 0xFDFFEB;
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = BYTE2(v28);
  v29 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 672) >> 15) & 0x40000 | v28 & 0xFBFFEB;
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = BYTE2(v29);
  v30 = v29 & 0xF7FFEB | (((*(_DWORD *)(*((_QWORD *)a2 + 85) + 680) >> 18) & 1) << 19);
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = BYTE2(v30);
  v31 = v30 & 0xEFFFEB | (((*(_DWORD *)(*((_QWORD *)a2 + 85) + 680) >> 14) & 1) << 20);
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = BYTE2(v31);
  v32 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 672) >> 17) & 0x200000 | v31 & 0xDFFFEB;
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = BYTE2(v32);
  v33 = (*(_QWORD *)(*((_QWORD *)a2 + 85) + 696) >> 31) & 0x400000;
  *(_WORD *)((char *)this + 51) = v26;
  *((_BYTE *)this + 53) = (v33 | v32 & 0xBFFFEB) >> 16;
  v34 = (*(_DWORD *)(*((_QWORD *)a2 + 85) + 672) << 8) & 0x800000 | v33 & 0x7FFFFF | v32 & 0x3FFFEB;
  *(_WORD *)((char *)this + 51) = v33 | v32 & 0xFFEB;
  *((_BYTE *)this + 53) = BYTE2(v34);
  WebCore::CSSPropertySettings::CSSPropertySettings((unsigned int *)((char *)this + 54), *((const WebCore::Settings **)a2 + 85));
  return this;
}

unsigned int *WebCore::CSSPropertySettings::CSSPropertySettings(unsigned int *this, const WebCore::Settings *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v2 = *this & 0xFFFFFFFE | (*((_DWORD *)a2 + 166) >> 1) & 1;
  *this = v2;
  v3 = v2 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 166) >> 7) & 1));
  *this = v3;
  v4 = v3 & 0xFFFFFFFB | (4 * (((*((_QWORD *)a2 + 83) >> 52) >> 2) & 1));
  *this = v4;
  v5 = v4 & 0xFFFFFFF7 | (8 * ((*((_DWORD *)a2 + 168) >> 5) & 1));
  *this = v5;
  v6 = v5 & 0xFFFFFFEF | (16 * ((*((_DWORD *)a2 + 168) >> 7) & 1));
  *this = v6;
  v7 = v6 & 0xFFFFFFDF | (32 * ((*((_DWORD *)a2 + 168) >> 9) & 1));
  *this = v7;
  v8 = v7 & 0xFFFFFFBF | (((*((_DWORD *)a2 + 168) >> 10) & 1) << 6);
  *this = v8;
  v9 = v8 & 0xFFFFFF7F | (((*((_DWORD *)a2 + 168) >> 11) & 1) << 7);
  *this = v9;
  v10 = v9 & 0xFFFFFEFF | (((*((_DWORD *)a2 + 168) >> 12) & 1) << 8);
  *this = v10;
  v11 = v10 & 0xFFFFFDFF | (((*((_DWORD *)a2 + 168) >> 13) & 1) << 9);
  *this = v11;
  v12 = v11 & 0xFFFFFBFF | (((*((_DWORD *)a2 + 168) >> 14) & 1) << 10);
  *this = v12;
  v13 = v12 & 0xFFFFF7FF | ((HIWORD(*((_DWORD *)a2 + 168)) & 1) << 11);
  *this = v13;
  v14 = v13 & 0xFFFFEFFF | (((*((_DWORD *)a2 + 168) >> 17) & 1) << 12);
  *this = v14;
  v15 = v14 & 0xFFFFDFFF | (((*((_DWORD *)a2 + 168) >> 20) & 1) << 13);
  *this = v15;
  v16 = v15 & 0xFFFFBFFF | (((*(_DWORD *)((char *)a2 + 673) >> 14) & 1) << 14);
  *this = v16;
  v17 = v16 & 0xFFFF7FFF | (((*(_DWORD *)((char *)a2 + 673) >> 15) & 1) << 15);
  *this = v17;
  v18 = v17 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)((char *)a2 + 673)) & 1) << 16);
  *this = v18;
  v19 = v18 & 0xFFFDFFFF | (((*(_DWORD *)((char *)a2 + 673) >> 17) & 1) << 17);
  *this = v19;
  v20 = v19 & 0xFFFBFFFF | (((*((_DWORD *)a2 + 168) >> 28) & 1) << 18);
  *this = v20;
  v21 = v20 & 0xFFF7FFFF | (((*((_DWORD *)a2 + 168) >> 29) & 1) << 19);
  *this = v21;
  v22 = v21 & 0xFFEFFFFF | (((*((_DWORD *)a2 + 168) >> 30) & 1) << 20);
  *this = v22;
  v23 = v22 & 0xFFDFFFFF | (*((_DWORD *)a2 + 168) >> 31 << 21);
  *this = v23;
  v24 = v23 & 0xFFBFFFFF | ((((*((_QWORD *)a2 + 84) >> 12) >> 22) & 1) << 22);
  *this = v24;
  v25 = v24 & 0xFF7FFFFF | ((((*((_QWORD *)a2 + 84) >> 13) >> 23) & 1) << 23);
  *this = v25;
  v26 = v25 & 0xFEFFFFFF | ((((*((_QWORD *)a2 + 89) >> 14) >> 24) & 1) << 24);
  *this = v26;
  v27 = v26 & 0xFDFFFFFF | (((*((_DWORD *)a2 + 172) >> 4) & 1) << 25);
  *this = v27;
  v28 = v27 & 0xFBFFFFFF | (((*((_DWORD *)a2 + 172) >> 23) & 1) << 26);
  *this = v28;
  v29 = v28 & 0xF7FFFFFF | ((((*((_QWORD *)a2 + 86) >> 28) >> 27) & 1) << 27);
  *this = v29;
  v30 = v29 & 0xEFFFFFFF | (((*(_DWORD *)((char *)a2 + 714) >> 28) & 1) << 28);
  *this = v30;
  *this = v30 & 0xDFFFFFFF | (((*((_DWORD *)a2 + 176) >> 10) & 1) << 29);
  return this;
}

uint64_t *WebCore::OriginAccessPatternsForWebProcess::singleton(WebCore::OriginAccessPatternsForWebProcess *this)
{
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  return &WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance;
}

WTF::StringImpl *WebCore::parseIntegrityMetadata@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  WTF::StringImpl *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unsigned __int8 *v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned __int8 *v68;
  unsigned __int16 *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int16 *v74;
  uint64_t v75;
  _BYTE v76[8];
  WTF::StringImpl *v77;
  char v78;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if ((_DWORD)v5)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v6 = *(unsigned __int16 **)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) == 0)
      {
        v74 = *(unsigned __int16 **)(v4 + 8);
        v75 = v5;
        v7 = v6 + 1;
        v8 = v5 - 1;
        while (1)
        {
          v9 = *v6;
          v10 = v9 > 0x20;
          v11 = (1 << v9) & 0x100003600;
          if (v10 || v11 == 0)
            break;
          ++v6;
          v74 = v7;
          v75 = v8;
          ++v7;
          if (--v8 == -1)
            return this;
        }
LABEL_20:
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 1;
        while (1)
        {
          this = (WTF::StringImpl *)WebCore::parseEncodedCryptographicDigest(&v74, (uint64_t)v76);
          if (!v78)
            goto LABEL_54;
          v19 = v75;
          if (v75)
          {
            v20 = v74;
            v21 = *v74;
            if (v21 == 63)
            {
              v22 = ++v74;
              --v75;
              if (v19 == 1)
                goto LABEL_33;
              v23 = v20 + 2;
              v24 = v19 - 2;
              while (1)
              {
                v21 = *v22;
                if (v21 - 33 > 0x5D)
                  break;
                ++v22;
                v74 = v23;
                v75 = v24;
                ++v23;
                if (--v24 == -1)
                  goto LABEL_33;
              }
            }
            if (v21 > 0x20 || ((1 << v21) & 0x100003600) == 0)
            {
              this = v77;
              v77 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v18);
                else
                  *(_DWORD *)this -= 2;
              }
LABEL_54:
              if (!v75)
                return this;
              v40 = v74;
              v41 = v74 + 1;
              v42 = v75 - 1;
              while (1)
              {
                v43 = *v40;
                v10 = v43 > 0x20;
                v44 = (1 << v43) & 0x100003600;
                if (!v10 && v44 != 0)
                  break;
                ++v40;
                v74 = v41;
                v75 = v42;
                ++v41;
                if (--v42 == -1)
                  return this;
              }
              goto LABEL_40;
            }
          }
LABEL_33:
          v26 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v26 != *(_DWORD *)(a2 + 8))
          {
            v31 = v26 + 1;
            v32 = *(_QWORD *)a2 + 16 * v26;
            *(_BYTE *)v32 = v76[0];
            v33 = v77;
            v77 = 0;
            *(_QWORD *)(v32 + 8) = v33;
            *(_DWORD *)(a2 + 12) = v31;
LABEL_37:
            this = v77;
            v77 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v18);
              else
                *(_DWORD *)this -= 2;
            }
            goto LABEL_40;
          }
          this = (WTF::StringImpl *)WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a2, v26 + 1, (unint64_t)v76);
          v27 = *(unsigned int *)(a2 + 12);
          v28 = v27 + 1;
          v29 = *(_QWORD *)a2 + 16 * v27;
          *(_BYTE *)v29 = *(_BYTE *)this;
          v30 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = 0;
          *(_QWORD *)(v29 + 8) = v30;
          *(_DWORD *)(a2 + 12) = v28;
          if (v78)
            goto LABEL_37;
LABEL_40:
          if (!v75)
            return this;
          v34 = v74;
          v35 = v74 + 1;
          v36 = v75 - 1;
          while (1)
          {
            v37 = *v34;
            v10 = v37 > 0x20;
            v38 = (1 << v37) & 0x100003600;
            if (v10 || v38 == 0)
              break;
            ++v34;
            v74 = v35;
            v75 = v36;
            ++v35;
            if (--v36 == -1)
              return this;
          }
          if (!*(_BYTE *)(a2 + 16))
            goto LABEL_20;
        }
      }
      v74 = *(unsigned __int16 **)(v4 + 8);
      v75 = v5;
      v13 = (unsigned __int16 *)((char *)v6 + 1);
      v14 = v5 - 1;
      while (1)
      {
        v15 = *(unsigned __int8 *)v6;
        v10 = v15 > 0x20;
        v16 = (1 << v15) & 0x100003600;
        if (v10 || v16 == 0)
          break;
        v6 = (unsigned __int16 *)((char *)v6 + 1);
        v74 = v13;
        v75 = v14;
        v13 = (unsigned __int16 *)((char *)v13 + 1);
        if (--v14 == -1)
          return this;
      }
LABEL_64:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      while (1)
      {
        this = (WTF::StringImpl *)WebCore::parseEncodedCryptographicDigest(&v74, (uint64_t)v76);
        if (!v78)
          goto LABEL_97;
        v47 = v75;
        if (v75)
        {
          v48 = v74;
          v49 = *(unsigned __int8 *)v74;
          if (v49 == 63)
          {
            v50 = (unsigned __int8 *)v74 + 1;
            v74 = (unsigned __int16 *)((char *)v74 + 1);
            --v75;
            if (v47 == 1)
              goto LABEL_77;
            v51 = v48 + 1;
            v52 = v47 - 2;
            while (1)
            {
              v49 = *v50;
              if (v49 - 33 > 0x5D)
                break;
              ++v50;
              v74 = v51;
              v75 = v52;
              v51 = (unsigned __int16 *)((char *)v51 + 1);
              if (--v52 == -1)
                goto LABEL_77;
            }
          }
          if (v49 > 0x20 || ((1 << v49) & 0x100003600) == 0)
          {
            this = v77;
            v77 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v46);
              else
                *(_DWORD *)this -= 2;
            }
LABEL_97:
            if (!v75)
              return this;
            v68 = (unsigned __int8 *)v74;
            v69 = (unsigned __int16 *)((char *)v74 + 1);
            v70 = v75 - 1;
            while (1)
            {
              v71 = *v68;
              v10 = v71 > 0x20;
              v72 = (1 << v71) & 0x100003600;
              if (!v10 && v72 != 0)
                break;
              ++v68;
              v74 = v69;
              v75 = v70;
              v69 = (unsigned __int16 *)((char *)v69 + 1);
              if (--v70 == -1)
                return this;
            }
            goto LABEL_84;
          }
        }
LABEL_77:
        v54 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v54 != *(_DWORD *)(a2 + 8))
        {
          v59 = v54 + 1;
          v60 = *(_QWORD *)a2 + 16 * v54;
          *(_BYTE *)v60 = v76[0];
          v61 = v77;
          v77 = 0;
          *(_QWORD *)(v60 + 8) = v61;
          *(_DWORD *)(a2 + 12) = v59;
LABEL_81:
          this = v77;
          v77 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v46);
            else
              *(_DWORD *)this -= 2;
          }
          goto LABEL_84;
        }
        this = (WTF::StringImpl *)WTF::Vector<WebCore::EncodedResourceCryptographicDigest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a2, v54 + 1, (unint64_t)v76);
        v55 = *(unsigned int *)(a2 + 12);
        v56 = v55 + 1;
        v57 = *(_QWORD *)a2 + 16 * v55;
        *(_BYTE *)v57 = *(_BYTE *)this;
        v58 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        *(_QWORD *)(v57 + 8) = v58;
        *(_DWORD *)(a2 + 12) = v56;
        if (v78)
          goto LABEL_81;
LABEL_84:
        if (!v75)
          return this;
        v62 = (unsigned __int8 *)v74;
        v63 = (unsigned __int16 *)((char *)v74 + 1);
        v64 = v75 - 1;
        while (1)
        {
          v65 = *v62;
          v10 = v65 > 0x20;
          v66 = (1 << v65) & 0x100003600;
          if (v10 || v66 == 0)
            break;
          ++v62;
          v74 = v63;
          v75 = v64;
          v63 = (unsigned __int16 *)((char *)v63 + 1);
          if (--v64 == -1)
            return this;
        }
        if (!*(_BYTE *)(a2 + 16))
          goto LABEL_64;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return this;
}

uint64_t WebCore::CachedCSSStyleSheet::mimeTypeAllowedByNosniff(WebCore::CachedCSSStyleSheet *this)
{
  uint64_t *v2;
  double v3;
  double v4;
  float v5;
  unsigned __int16 *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v2 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v2)
  {
    v12 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v12 != -1)
    {
      v16 = (WTF::StringImpl *)&v14;
      v15 = (WTF::StringImpl *)&v16;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v2 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v2, 89, &v16);
  if (v16)
  {
    v6 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
    v7 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  if (WebCore::parseContentTypeOptionsHeader(v6, v7, v3, v4, v5))
  {
    WebCore::CachedCSSStyleSheet::responseMIMEType(this, &v15);
    v9 = WTF::equalLettersIgnoringASCIICase((uint64_t *)&v15, "text/css", 9uLL);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    v9 = 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v9;
}

uint64_t WebCore::StyleSheetContents::estimatedSizeInBytes(WebCore::StyleSheetContents *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  WebCore::StyleSheetContents *v7;

  v1 = *((unsigned int *)this + 17);
  v2 = (100 * (v1 + *((_DWORD *)this + 13) + *((_DWORD *)this + 21) + *((_DWORD *)this + 25)) + 216);
  if ((_DWORD)v1)
  {
    v5 = 0;
    v6 = 8 * v1;
    do
    {
      v7 = *(WebCore::StyleSheetContents **)(*(_QWORD *)(*((_QWORD *)this + 7) + v5) + 64);
      if (v7)
        v2 = WebCore::StyleSheetContents::estimatedSizeInBytes(v7) + v2;
      v5 += 8;
    }
    while (v6 != v5);
  }
  return v2;
}

uint64_t WebCore::FrameLoader::subresourceCachePolicy(WebCore::FrameLoader *this, const WTF::URL *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (v4)
  {
    v5 = *(unsigned __int8 **)(v4 + 8);
    if (v5)
    {
      v6 = (*(_DWORD *)v5)++;
      v7 = v5[1092];
      if (v6)
      {
        *(_DWORD *)v5 = v6;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)v5);
        WTF::fastFree(v16, v17);
      }
      if (v7)
        return 2;
    }
  }
  if (*((_BYTE *)this + 216))
    return 0;
  v9 = *((unsigned __int8 *)this + 81);
  if (v9 == 8)
    return 2;
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 56);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0 || *(_BYTE *)(v11 + 144))
  {
LABEL_10:
    if (v9)
    {
      result = 1;
      switch(v9)
      {
        case 1:
        case 2:
        case 3:
          return 3;
        case 4:
          return result;
        case 5:
        case 6:
        case 7:
          return 0;
        case 8:
          return 2;
        case 9:
          if ((*((_BYTE *)a2 + 8) & 2) != 0 || WTF::URL::protocolIs())
            return 0;
          return 2;
        default:
          __break(0xC471u);
          JUMPOUT(0x1942C090CLL);
      }
    }
    return 0;
  }
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  result = WebCore::FrameLoader::subresourceCachePolicy(*(WebCore::FrameLoader **)(v11 + 280), a2);
  do
  {
    v14 = __ldaxr(v12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v12));
  if (!v15)
  {
    v19 = result;
    atomic_store(1u, v12);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E31FE290;
    v18[1] = v12;
    v20 = v18;
    WTF::ensureOnMainThread();
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    result = v19;
  }
  if (!(_DWORD)result)
  {
    v9 = *((unsigned __int8 *)this + 81);
    goto LABEL_10;
  }
  return result;
}

WTF::MonotonicTime *WebCore::CachedCSSStyleSheet::restoreParsedStyleSheet@<X0>(WTF::MonotonicTime *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const WTF::StringImpl *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  const WTF::StringImpl *v18;
  double v19;
  _DWORD *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *((_QWORD *)result + 84);
  if (!v6)
  {
    *a5 = 0;
    return result;
  }
  v10 = (uint64_t)result;
  ++*(_DWORD *)v6;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = off_1E3399E30;
  *(_BYTE *)(v11 + 8) = a3;
  *(_QWORD *)(v11 + 16) = a4;
  v23 = v11;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E3399E08;
  v12[1] = &v23;
  v12[2] = v6;
  v24 = v12;
  v14 = WebCore::StyleSheetContents::traverseRules(v6, &v24);
  v15 = v24;
  v24 = 0;
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  v16 = v23;
  v23 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v14)
  {
    --*(_DWORD *)(v6 + 128);
    result = (WTF::MonotonicTime *)WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref((WebCore::StyleSheetContents **)(v10 + 672), 0);
    goto LABEL_24;
  }
  result = (WTF::MonotonicTime *)WTF::equal(*(WTF **)(v6 + 136), *(const WTF::StringImpl **)a2, v13);
  if (!(_DWORD)result)
    goto LABEL_24;
  result = (WTF::MonotonicTime *)WTF::equal(*(WTF **)(v6 + 176), *(const WTF::StringImpl **)(a2 + 40), v18);
  if (!(_DWORD)result || *(unsigned __int8 *)(v6 + 184) != *(unsigned __int8 *)(a2 + 48))
    goto LABEL_24;
  if (*(_BYTE *)(v6 + 186) && *(_BYTE *)(a2 + 50))
  {
    if (*(unsigned __int8 *)(v6 + 185) != *(unsigned __int8 *)(a2 + 49))
      goto LABEL_24;
  }
  else if ((*(_BYTE *)(v6 + 186) != 0) != (*(_BYTE *)(a2 + 50) != 0))
  {
    goto LABEL_24;
  }
  if ((*(unsigned __int16 *)(a2 + 51) | (*(unsigned __int8 *)(a2 + 53) << 16)) == (*(unsigned __int16 *)(v6 + 187) | (*(unsigned __int8 *)(v6 + 189) << 16))
    && ((*(_DWORD *)(a2 + 54) ^ *(_DWORD *)(v6 + 190)) & 0x3FFFFFFF) == 0)
  {
    WTF::MonotonicTime::now(result);
    result = (WTF::MonotonicTime *)WebCore::CachedResource::didAccessDecodedData(v10, v19);
    v20 = *(_DWORD **)(v10 + 672);
    if (v20)
      ++*v20;
    goto LABEL_19;
  }
LABEL_24:
  v20 = 0;
LABEL_19:
  *a5 = v20;
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)v6, v17);
    return (WTF::MonotonicTime *)WTF::fastFree(v21, v22);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

uint64_t WebCore::StyleSheetContents::parseAuthorStyleSheet(WebCore::StyleSheetContents *this, const WebCore::CachedCSSStyleSheet *a2, const WebCore::SecurityOrigin *a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  int v8;
  WTF::StringImpl *v9;
  WebCore::StyleSheetContents *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  char v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  __int16 v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  char v44;
  char v45;

  if (a3)
  {
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    v5 = WebCore::SecurityOrigin::canRequest((uint64_t)a3, (WebCore::StyleSheetContents *)((char *)this + 136), (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) ^ 1;
  }
  else
  {
    v5 = 1;
  }
  v7 = (char *)this + 184;
  v6 = *((unsigned __int8 *)this + 184);
  if (*((_BYTE *)this + 184))
  {
    if (v6 > 5 || (v20 = 1 << v6, v8 = 1, (v20 & 0x34) == 0))
      v8 = v5;
  }
  else
  {
    v8 = 1;
  }
  v45 = 1;
  v44 = 1;
  WebCore::CachedCSSStyleSheet::sheetText(a2, v8 ^ 1, &v45, &v44, &v43);
  if (!v44)
    goto LABEL_45;
  if (!v45)
  {
    v21 = WebCore::StyleSheetContents::singleOwnerDocument(this);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 528);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 24);
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v25)
            {
              v26 = *v7;
              if (!*v7 || v26 <= 5 && ((1 << v26) & 0x34) != 0)
              {
                v27 = *(uint64_t **)(v25 + 792);
                if ((*((_BYTE *)a2 + 344) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest((const WebCore::CachedCSSStyleSheet *)((char *)a2 + 160));
                  *((_BYTE *)a2 + 344) |= 1u;
                }
                WTF::URL::stringCenterEllipsizedToLength((const WebCore::CachedCSSStyleSheet *)((char *)a2 + 160));
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Did not parse stylesheet at '", 30, (uint64_t *)&v42, (int8x16_t *)"' because non CSS MIME types are not allowed in strict mode.", 61, &v34);
                WebCore::PageConsoleClient::addMessage(v27, 8, 2, (uint64_t)&v34, 0, 0);
                v28 = v34;
                v34 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2)
                    WTF::StringImpl::destroy(v28, v9);
                  else
                    *(_DWORD *)v28 -= 2;
                }
                v29 = v42;
                v42 = 0;
                if (!v29)
                  goto LABEL_45;
              }
              else
              {
                v30 = WebCore::CachedCSSStyleSheet::mimeTypeAllowedByNosniff(a2);
                v31 = *(uint64_t **)(v25 + 792);
                if ((v30 & 1) != 0)
                {
                  if ((*((_BYTE *)a2 + 344) & 1) == 0)
                  {
                    WebCore::ResourceRequest::doUpdateResourceRequest((const WebCore::CachedCSSStyleSheet *)((char *)a2 + 160));
                    *((_BYTE *)a2 + 344) |= 1u;
                  }
                  WTF::URL::stringCenterEllipsizedToLength((const WebCore::CachedCSSStyleSheet *)((char *)a2 + 160));
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Did not parse stylesheet at '", 30, (uint64_t *)&v40, (int8x16_t *)"' because non CSS MIME types are not allowed for cross-origin stylesheets.", 75, &v34);
                  WebCore::PageConsoleClient::addMessage(v31, 8, 2, (uint64_t)&v34, 0, 0);
                  v32 = v34;
                  v34 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, v9);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v29 = v40;
                  v40 = 0;
                  if (!v29)
                    goto LABEL_45;
                }
                else
                {
                  if ((*((_BYTE *)a2 + 344) & 1) == 0)
                  {
                    WebCore::ResourceRequest::doUpdateResourceRequest((const WebCore::CachedCSSStyleSheet *)((char *)a2 + 160));
                    *((_BYTE *)a2 + 344) |= 1u;
                  }
                  WTF::URL::stringCenterEllipsizedToLength((const WebCore::CachedCSSStyleSheet *)((char *)a2 + 160));
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Did not parse stylesheet at '", 30, (uint64_t *)&v41, (int8x16_t *)"' because non CSS MIME types are not allowed when 'X-Content-Type-Options: nosniff' is given.", 94, &v34);
                  WebCore::PageConsoleClient::addMessage(v31, 8, 2, (uint64_t)&v34, 0, 0);
                  v33 = v34;
                  v34 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, v9);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v29 = v41;
                  v41 = 0;
                  if (!v29)
                    goto LABEL_45;
                }
              }
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v9);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
        }
      }
    }
LABEL_45:
    v17 = 0;
    goto LABEL_20;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  if (v11)
    *(_DWORD *)v11 += 2;
  v34 = v11;
  v12 = *((_OWORD *)this + 10);
  v35 = *((_OWORD *)this + 9);
  v36 = v12;
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = *(_QWORD *)v7;
  v37 = v13;
  v38 = v14;
  v39 = *((_WORD *)this + 96);
  WebCore::CSSParserImpl::parseStyleSheet((WebCore::CSSParserImpl *)&v43, (const WTF::String *)&v34, this, v10);
  v15 = v37;
  v37 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v34;
  v34 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = 1;
LABEL_20:
  v18 = v43;
  v43 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v9);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v17;
}

uint64_t *WebCore::CachedCSSStyleSheet::sheetText@<X0>(_QWORD *a1@<X0>, int a2@<W1>, _BYTE *a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *result;
  _DWORD *v8;
  WebCore::TextResourceDecoder *v9;
  WebCore::SharedBuffer *v10;
  const char *v11;
  void *v12;
  void *v13;
  WebCore::SharedBuffer *v14;
  WebCore::TextResourceDecoder *v15;

  result = (uint64_t *)WebCore::CachedCSSStyleSheet::canUseSheet((uint64_t)a1, a2, a3, a4);
  if ((_DWORD)result && (result = (uint64_t *)a1[49]) != 0 && result[6])
  {
    v8 = (_DWORD *)a1[83];
    if (v8)
    {
      *v8 += 2;
      *a5 = v8;
    }
    else
    {
      v9 = (WebCore::TextResourceDecoder *)a1[82];
      ++*(_DWORD *)v9;
      v15 = v9;
      WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)result, &v14);
      v10 = v14;
      v11 = (const char *)WebCore::SharedBuffer::data(v14);
      WebCore::TextResourceDecoder::decodeAndFlush(v9, v11, *((_QWORD *)v10 + 6), a5);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v14, v12);
      return WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref((uint64_t *)&v15, v13);
    }
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t WebCore::CachedCSSStyleSheet::canUseSheet(uint64_t a1, int a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BOOL8 v13;
  WTF::StringImpl *v14;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if ((*(_WORD *)(a1 + 557) >> 5) - 3 < 2)
    return 0;
  if (WTF::linkedOnOrAfterSDKWithBehavior())
  {
    v8 = WebCore::CachedResource::response((WebCore::CachedResource *)a1);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v8, 1);
    if ((v8[1] & 2) != 0)
    {
      v9 = WebCore::CachedResource::response((WebCore::CachedResource *)a1);
      if (!WebCore::ResourceResponseBase::isSuccessful((WebCore::ResourceResponseBase *)v9))
      {
        if (a4)
        {
          v13 = 0;
          *a4 = 0;
          return v13;
        }
        return 0;
      }
    }
  }
  if ((WebCore::CachedCSSStyleSheet::mimeTypeAllowedByNosniff((WebCore::CachedCSSStyleSheet *)a1) & 1) == 0)
  {
    if (a3)
    {
      v13 = 0;
      *a3 = 0;
      return v13;
    }
    return 0;
  }
  if (a2 == 1)
    return 1;
  v10 = *(uint64_t **)(a1 + 400);
  if (!v10)
  {
    v17 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v17 != -1)
    {
      v22 = (WTF::StringImpl *)&v20;
      v21 = (WTF::StringImpl *)&v22;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v10 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v10, 26, &v22);
  WebCore::extractMIMETypeFromMediaType((WebCore *)&v22, &v21);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v21)
    goto LABEL_12;
  v16 = *((_DWORD *)v21 + 1);
  if (v16 != 8)
  {
    if (!v16)
      goto LABEL_12;
    goto LABEL_21;
  }
  v18 = *((_QWORD *)v21 + 1);
  if ((*((_BYTE *)v21 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v18 & 0xDF) == 0x54
      && (*(_BYTE *)(v18 + 1) & 0xDF) == 0x45
      && (*(_BYTE *)(v18 + 2) & 0xDF) == 0x58
      && (*(_BYTE *)(v18 + 3) & 0xDF) == 0x54
      && (*(_BYTE *)(v18 + 4) & 0xDF) == 0xF
      && (*(_BYTE *)(v18 + 5) & 0xDF) == 0x43
      && (*(_BYTE *)(v18 + 6) & 0xDF) == 0x53)
    {
      v19 = *(unsigned __int8 *)(v18 + 7);
      goto LABEL_37;
    }
  }
  else if ((*(_WORD *)v18 & 0xFFDF) == 0x54
         && (*(_WORD *)(v18 + 2) & 0xFFDF) == 0x45
         && (*(_WORD *)(v18 + 4) & 0xFFDF) == 0x58
         && (*(_WORD *)(v18 + 6) & 0xFFDF) == 0x54
         && (*(_WORD *)(v18 + 8) & 0xFFDF) == 0xF
         && (*(_WORD *)(v18 + 10) & 0xFFDF) == 0x43
         && (*(_WORD *)(v18 + 12) & 0xFFDF) == 0x53)
  {
    v19 = *(unsigned __int16 *)(v18 + 14);
LABEL_37:
    if ((v19 & 0xFFFFFFDF) == 0x53)
      goto LABEL_12;
  }
LABEL_21:
  if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)&v21, "application/x-unknown-content-type", 0x23uLL) & 1) == 0)
  {
    v13 = !WebCore::isValidContentType(&v21, (WTF::StringImpl *)1);
    goto LABEL_13;
  }
LABEL_12:
  v13 = 1;
LABEL_13:
  if (a3)
    *a3 = v13;
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v13;
}

BOOL WebCore::CSSStyleSheet::canAccessRules(WebCore::CSSStyleSheet *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t canRequest;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  char v16;
  WebCore::CSSStyleSheet *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;

  if (*((_BYTE *)this + 37))
    return *((_BYTE *)this + 36) != 0;
  v2 = *((_QWORD *)this + 3);
  v3 = *(WTF::StringImpl **)(v2 + 136);
  if (!v3)
    return 1;
  v4 = *(_DWORD *)v3;
  *(_DWORD *)v3 += 2;
  v18 = v3;
  v5 = *(_OWORD *)(v2 + 160);
  v19 = *(_OWORD *)(v2 + 144);
  v20 = v5;
  if (!*((_DWORD *)v3 + 1))
  {
    v18 = 0;
    canRequest = 1;
LABEL_13:
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      WTF::StringImpl::destroy(v3, a2);
    return canRequest;
  }
  while (1)
  {
    v6 = *((_QWORD *)this + 13);
    if (!v6)
      break;
    v13 = *(_DWORD **)(v6 + 8);
    if (!v13)
      break;
    v14 = v13[2];
    v13[2] = v14 + 1;
    v15 = v13;
    do
    {
      v16 = *((_BYTE *)v15 + 12);
      v15 = (_DWORD *)*((_QWORD *)v15 + 2);
    }
    while ((v16 & 2) != 0 && v15);
    if (v14)
    {
      v13[2] = v14;
    }
    else
    {
      v17 = this;
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      this = v17;
    }
    if (!v15)
      break;
    this = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::parentStyleSheet(this);
  }
  v7 = *((_QWORD *)this + 12);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8)) != 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), a2);
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    canRequest = WebCore::SecurityOrigin::canRequest(v10, (WebCore::ThreadableBlobRegistry *)&v18, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
    v3 = v18;
  }
  else
  {
    canRequest = 1;
  }
  v18 = 0;
  if (v3)
  {
    v4 = *(_DWORD *)v3 - 2;
    goto LABEL_13;
  }
  return canRequest;
}

void WebCore::ImageDecoder::clearFactories(WebCore::ImageDecoder *this)
{
  uint64_t *v1;
  void *v2;

  v1 = WebCore::installedFactories(this);
  WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v1, v2);
}

uint64_t *WebCore::ImageDecoder::installFactory(WebCore *a1)
{
  uint64_t *result;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WebCore::installedFactories(a1);
  if (dword_1EE2F8B9C == dword_1EE2F8B98)
    return WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageDecoder::ImageDecoderFactory>((unint64_t)a1);
  v3 = dword_1EE2F8B9C + 1;
  v4 = (_QWORD *)(WebCore::installedFactories(void)::factories + 24 * dword_1EE2F8B9C);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *v4 = v5;
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  v4[1] = v6;
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  v4[2] = v7;
  dword_1EE2F8B9C = v3;
  return result;
}

uint64_t *WebCore::installedFactories(WebCore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  {
    WebCore::installedFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8B98 = 0;
  }
  v1 = atomic_load(&WebCore::installedFactories(void)::registerDefaults);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::installedFactories(void)::registerDefaults, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedFactories(void)::$_0 &&>>);
  }
  return &WebCore::installedFactories(void)::factories;
}

uint64_t WebCore::isWikipediaDomain(WebCore *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[5];
  uint64_t v11;

  if ((byte_1ECE838E1 & 1) == 0)
  {
    v8 = this;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    MEMORY[0x19AEA52D4](v10, &v9, 0);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v11, (const WTF::URL *)v10);
    qword_1ECE83920 = v11;
    v11 = 0;
    v6 = v10[0];
    v10[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    byte_1ECE838E1 = 1;
    this = v8;
  }
  v2 = WTF::URL::host(this);
  return WebCore::RegistrableDomain::matches(&qword_1ECE83920, v2, v3);
}

uint64_t WebCore::RegistrableDomain::matches(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (!(_DWORD)a3 && (MEMORY[0x19AEA53F4](*a1, "nullOrigin", 10) & 1) != 0)
    return 1;
  result = WTF::StringView::endsWith();
  if (!(_DWORD)result)
    return result;
  if (!*a1)
  {
    if (!(_DWORD)a3)
      return 1;
    v6 = -1;
LABEL_12:
    v7 = v6 + a3;
    if (BYTE4(a3))
    {
      if (a3 > v7)
      {
        v8 = *(unsigned __int8 *)(a2 + v7);
        return v8 == 46;
      }
    }
    else if (a3 > v7)
    {
      v8 = *(unsigned __int16 *)(a2 + 2 * v7);
      return v8 == 46;
    }
    __break(1u);
    return result;
  }
  v5 = *(_DWORD *)(*a1 + 4);
  if ((_DWORD)a3 != v5)
  {
    v6 = ~v5;
    goto LABEL_12;
  }
  return 1;
}

uint64_t WebCore::MediaStrategy::MediaStrategy(uint64_t this)
{
  *(_QWORD *)this = &unk_1E3405B90;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

WTF::StringImpl *WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad@<X0>(WebCore::ContentExtensions::ContentExtensionsBackend *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, WTF::URL *a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  WebCore::Document *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *result;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  const WTF::StringImpl *v42;
  WTF::String *v43;
  WTF::String *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WebCore::StyleSheetContents *v56;
  WebCore::StyleSheetContents *v57;
  int v58;
  const char *v59;
  uint64_t v60;
  WebCore::Document *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unsigned __int16 *v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WebCore::ScriptController *v78;
  void *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned __int16 *v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  WebCore::ExtensionStyleSheets *v91;
  WTF::StringImpl *v92;
  WTF::String *v93;
  int32x2_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF::StringImpl **v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  int *v107;
  uint64_t v108;
  WTF::String *v109;
  uint64_t v110;
  WebCore::Document **v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  uint64_t v117;
  WTF::String *v118;
  uint64_t v119;
  WTF::StringImpl **v120;
  uint64_t v121;
  uint64_t v122;
  WTF::String *v123;
  uint64_t v124;
  WTF::StringImpl **v125;
  uint64_t v126;
  WebCore::ContentExtensions::ContentExtensionsBackend *v127;
  WTF::String *v128;
  unsigned int v129;
  WTF::StringImpl *v130;
  __int128 v131;
  __int128 v132;
  WTF::StringImpl *v133;
  __int128 v134;
  __int128 v135;
  WTF::StringImpl *v136;
  __int128 v137;
  __int128 v138;
  int v139;
  BOOL v140;
  WTF::StringImpl *v141;
  __int128 v142;
  __int128 v143;
  WTF::StringImpl *v144;
  __int128 v145;
  __int128 v146;
  WebCore::Document *v147;
  int v148;
  WTF::StringImpl *v149[2];

  v148 = a4;
  v147 = 0;
  v144 = 0;
  WTF::URL::invalidate((WTF::URL *)&v144);
  v141 = 0;
  WTF::URL::invalidate((WTF::URL *)&v141);
  v17 = *(_QWORD *)(a5 + 16);
  if (v17 && (v18 = *(_QWORD **)(v17 + 8)) != 0)
  {
    v19 = *(_QWORD **)(v18[16] + 8);
    v20 = v19 == v18;
    v147 = (WebCore::Document *)v18[37];
    if (*(_BYTE *)(a5 + 3548) && (v19 == v18 ? (v21 = a4 == 1) : (v21 = 0), v21))
    {
      WTF::URL::operator=((uint64_t)&v144, a3);
      v20 = 1;
    }
    else
    {
      v22 = v18[3];
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v24 = *(WTF::StringImpl **)(v23 + 168);
          if (v24)
            *(_DWORD *)v24 += 2;
          v25 = v144;
          v144 = v24;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v16);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *(_OWORD *)(v23 + 192);
          v145 = *(_OWORD *)(v23 + 176);
          v146 = v26;
        }
      }
    }
  }
  else
  {
    v20 = 0;
  }
  v27 = v147;
  if (v147)
  {
    v28 = (WTF::StringImpl *)*((_QWORD *)v147 + 92);
    if (v28)
      *(_DWORD *)v28 += 2;
    v29 = v141;
    v141 = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v16);
      else
        *(_DWORD *)v29 -= 2;
    }
    v142 = *(_OWORD *)((char *)v27 + 744);
    v143 = *(_OWORD *)((char *)v27 + 760);
  }
  else
  {
    WTF::URL::operator=((uint64_t)&v141, a3);
  }
  v30 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v30 += 2;
  v130 = v30;
  v131 = *(_OWORD *)(a3 + 8);
  v132 = *(_OWORD *)(a3 + 24);
  v31 = v144;
  if (v144)
    *(_DWORD *)v144 += 2;
  v133 = v31;
  v134 = v145;
  v135 = v146;
  v32 = v141;
  if (v141)
    *(_DWORD *)v141 += 2;
  v136 = v32;
  v137 = v142;
  v138 = v143;
  v139 = v148;
  v140 = v20;
  result = (WTF::StringImpl *)WebCore::ContentExtensions::ContentExtensionsBackend::actionsForResourceLoad((uint64_t)a1, (uint64_t)&v130, a7, (uint64_t)&v128);
  *(_DWORD *)a8 = 0;
  *(_OWORD *)(a8 + 8) = 0u;
  *(_OWORD *)(a8 + 24) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  if (*(_BYTE *)(a2 + 1720))
    result = (WTF::StringImpl *)WebCore::ContentExtensions::makeSecureIfNecessary(a8, (WTF::URL *)a3, a6);
  v35 = v129;
  if (!v129)
  {
LABEL_32:
    if (!v147)
      goto LABEL_35;
    if (*(_BYTE *)(a8 + 1))
    {
      v58 = WTF::URL::protocolIs();
      if (v58)
        v59 = "https";
      else
        v59 = "wss";
      if (v58)
        v60 = 6;
      else
        v60 = 4;
      WTF::String::String(&v103, (uint64_t)v59, v60);
      v61 = v147;
      v62 = *(WTF::StringImpl **)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)v62 += 2;
      v102 = v62;
      v63 = v103;
      if (v103)
        *(_DWORD *)v103 += 2;
      v101 = v63;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Promoted URL from ", 19, (uint64_t *)&v102, (uint64_t)" to ", 5, (uint64_t *)&v101, &v95);
      WebCore::Document::addConsoleMessage(v61, 9, 4, &v95, 0);
      v64 = v95;
      v95 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v34);
        else
          *(_DWORD *)v64 -= 2;
      }
      v65 = v101;
      v101 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v34);
        else
          *(_DWORD *)v65 -= 2;
      }
      v66 = v102;
      v102 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v34);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = v103;
      v103 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v34);
        else
          *(_DWORD *)v67 -= 2;
      }
    }
    if (!*(_BYTE *)a8)
      goto LABEL_35;
    v149[0] = 0;
    WebCore::ContentExtensions::customTrackerBlockingMessageForConsole(a8, (const WebCore::ContentRuleListResults *)a3, (const WTF::URL *)&v144, &v103);
    if ((_BYTE)v104)
    {
      v69 = v103;
      v103 = 0;
      v70 = v149[0];
      v149[0] = v69;
      if (!v70)
      {
LABEL_104:
        std::optional<WTF::String>::~optional((uint64_t)&v103, v68);
        WebCore::Document::addConsoleMessage(v147, 9, 4, v149, 0);
        if ((*(_QWORD *)(*((_QWORD *)v147 + 85) + 680) & 0x2000) != 0)
        {
          if ((v72 = (unsigned __int16 *)WTF::URL::host((WTF::URL *)a3),
                WTF::equalLettersIgnoringASCIICase(v72, v73, "www.google-analytics.com", 0x19uLL))
            && (v74 = (unsigned __int16 *)WTF::URL::path((WTF::URL *)a3),
                (WTF::equalLettersIgnoringASCIICase(v74, v75, "/analytics.js", 0xEuLL) & 1) != 0)
            || (v87 = (unsigned __int16 *)WTF::URL::host((WTF::URL *)a3),
                WTF::equalLettersIgnoringASCIICase(v87, v88, "www.googletagmanager.com", 0x19uLL))
            && (v89 = (unsigned __int16 *)WTF::URL::path((WTF::URL *)a3),
                WTF::equalLettersIgnoringASCIICase(v89, v90, "/gtm.js", 8uLL)))
          {
            v76 = *((_QWORD *)v147 + 66);
            if (v76)
            {
              v77 = *(_QWORD *)(v76 + 8);
              if (v77)
              {
                v78 = *(WebCore::ScriptController **)(v77 + 304);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v98 = v103;
                v95 = 0;
                WTF::URL::invalidate((WTF::URL *)&v95);
                v94 = 0;
                WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v103, (_DWORD **)&v98, 0, &v95, &v94);
                WebCore::ScriptController::evaluateIgnoringException(v78, (const WebCore::ScriptSourceCode *)&v103);
                WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)&v103, v79);
                v80 = v95;
                v95 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                    WTF::StringImpl::destroy(v80, v34);
                  else
                    *(_DWORD *)v80 -= 2;
                }
                v81 = v98;
                v98 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, v34);
                  else
                    *(_DWORD *)v81 -= 2;
                }
              }
            }
          }
        }
        v71 = v149[0];
        v149[0] = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v34);
          else
            *(_DWORD *)v71 -= 2;
        }
LABEL_35:
        WTF::Vector<WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v34);
        v37 = v136;
        v136 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v36);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = v133;
        v133 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v36);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v130;
        v130 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v36);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = v141;
        v141 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v36);
          else
            *(_DWORD *)v40 -= 2;
        }
        result = v144;
        v144 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
    }
    else
    {
      v82 = (uint64_t)v144;
      if (v144)
        *(_DWORD *)v144 += 2;
      v100 = (WTF::StringImpl *)v82;
      v83 = *(WTF::StringImpl **)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)v83 += 2;
      v99 = v83;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Content blocker prevented frame displaying ", 44, (uint64_t *)&v100, (uint64_t)" from loading a resource from ", 31, (uint64_t *)&v99, &v95);
      v84 = v95;
      v95 = 0;
      v85 = v149[0];
      v149[0] = v84;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
        {
          WTF::StringImpl::destroy(v85, v68);
          v92 = v95;
          v95 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, v68);
            else
              *(_DWORD *)v92 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v85 -= 2;
          v95 = 0;
        }
      }
      v86 = v99;
      v99 = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v68);
        else
          *(_DWORD *)v86 -= 2;
      }
      v70 = v100;
      v100 = 0;
      if (!v70)
        goto LABEL_104;
    }
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v68);
    else
      *(_DWORD *)v70 -= 2;
    goto LABEL_104;
  }
  if (!(v129 >> 27))
  {
    v41 = WTF::fastMalloc((WTF *)(32 * v129));
    v43 = v128;
    v44 = (WTF::String *)((char *)v128 + 32 * v35);
    *(_DWORD *)(a8 + 48) = v35;
    *(_QWORD *)(a8 + 40) = v41;
    v93 = v44;
    while (1)
    {
      v96 = 0;
      v97 = 0;
      LODWORD(v95) = 0;
      BYTE4(v95) = 0;
      v45 = *((unsigned int *)v43 + 7);
      if ((_DWORD)v45)
        break;
LABEL_67:
      if (!*((_BYTE *)v43 + 8))
      {
        v56 = WebCore::ContentExtensions::ContentExtensionsBackend::globalDisplayNoneStyleSheet(a1, (WTF::StringImpl **)v43, v42);
        if (v56)
        {
          v57 = v56;
          if (v148 == 1)
          {
            WebCore::DocumentLoader::addPendingContentExtensionSheet((WebCore::DocumentLoader *)a5, v43, v56);
          }
          else if (v147)
          {
            v91 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)v147 + 167);
            if (!v91)
              v91 = (WebCore::ExtensionStyleSheets *)WebCore::Document::ensureExtensionStyleSheets(v147);
            WebCore::ExtensionStyleSheets::maybeAddContentExtensionSheet(v91, (WTF::StringImpl **)v43, v57);
          }
        }
      }
      v49 = *(WTF::StringImpl **)v43;
      if (*(_QWORD *)v43)
        *(_DWORD *)v49 += 2;
      LODWORD(v104) = (_DWORD)v95;
      BYTE4(v104) = BYTE4(v95);
      v103 = v49;
      v105 = v96;
      v50 = v97;
      v96 = 0;
      v97 = 0;
      v106 = v50;
      v51 = *(unsigned int *)(a8 + 52);
      if ((_DWORD)v51 == *(_DWORD *)(a8 + 48))
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>(a8 + 40, (unint64_t)&v103);
      }
      else
      {
        v52 = *(_QWORD *)(a8 + 40) + 32 * v51;
        v103 = 0;
        *(_QWORD *)v52 = v49;
        v53 = (int)v104;
        *(_BYTE *)(v52 + 12) = BYTE4(v104);
        *(_DWORD *)(v52 + 8) = v53;
        *(_QWORD *)(v52 + 16) = 0;
        *(_QWORD *)(v52 + 24) = 0;
        v54 = v105;
        v105 = 0;
        *(_QWORD *)(v52 + 16) = v54;
        LODWORD(v54) = (_DWORD)v106;
        LODWORD(v106) = 0;
        *(_DWORD *)(v52 + 24) = v54;
        LODWORD(v54) = HIDWORD(v106);
        HIDWORD(v106) = 0;
        *(_DWORD *)(v52 + 28) = v54;
        ++*(_DWORD *)(a8 + 52);
      }
      std::pair<WTF::String,WebCore::ContentRuleListResults::Result>::~pair((uint64_t)&v103, v34);
      WebCore::ContentRuleListResults::Result::~Result((WebCore::ContentRuleListResults::Result *)&v95, v55);
      v43 = (WTF::String *)((char *)v43 + 32);
      if (v43 == v93)
        goto LABEL_32;
    }
    v46 = *((_QWORD *)v43 + 2);
    v47 = v46 + (v45 << 7);
    while (1)
    {
      v103 = (WTF::StringImpl *)a8;
      v104 = &v95;
      v105 = a8;
      v106 = &v95;
      v107 = &v148;
      v108 = a5;
      v109 = v43;
      v110 = v46;
      v111 = &v147;
      v112 = a8;
      v113 = &v95;
      v114 = a3;
      v115 = a8;
      v116 = &v95;
      v117 = a5;
      v118 = v43;
      v119 = a3;
      v120 = &v95;
      v121 = a8;
      v122 = a5;
      v123 = v43;
      v124 = a3;
      v125 = &v95;
      v126 = a8;
      v127 = a1;
      v48 = *(unsigned int *)(v46 + 112);
      if ((_DWORD)v48 == -1)
        break;
      v149[0] = (WTF::StringImpl *)&v103;
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E33955F8[v48])(v149, v46);
      v46 += 128;
      if (v46 == v47)
        goto LABEL_67;
    }
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::actionsForResourceLoad@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  int v8;
  const WTF::URL *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  void *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t i;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  char *v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  unsigned int *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  double v90;
  double v91;
  unsigned int v92;
  int v93;
  const WTF::URL *v94;
  _QWORD *v95;
  _QWORD *v96;
  WTF *v97;
  unint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  char v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  char v106;
  WTF::StringImpl *v107;
  char v108;
  WTF *v109;
  uint64_t v110;
  unsigned int v111;
  _QWORD v112[3];

  v112[1] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)result
    || !*(_DWORD *)(*(_QWORD *)result - 12)
    || (*(_BYTE *)(a2 + 8) & 1) == 0
    || (v7 = (_QWORD *)result, result = WTF::URL::protocolIs(), (_DWORD)result))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
  v8 = *(_DWORD *)(a2 + 120);
  v9 = (const WTF::URL *)(a2 + 40);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v107, (const WTF::URL *)(a2 + 40));
  v10 = WTF::URL::host((WTF::URL *)a2);
  v13 = WebCore::RegistrableDomain::matches(&v107, v10, v11);
  result = (uint64_t)v107;
  v107 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (v13)
    v14 = 4096;
  else
    v14 = 0x2000;
  if (*(_BYTE *)(a2 + 124))
    v15 = 0x4000;
  else
    v15 = 0x8000;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (*v7)
  {
    v16 = *(unsigned int *)(*v7 - 12);
    if ((_DWORD)v16)
    {
      if (v16 >> 27)
      {
        __break(0xC471u);
        goto LABEL_159;
      }
      result = WTF::fastMalloc((WTF *)(32 * v16));
      *(_DWORD *)(a4 + 8) = v16;
      *(_QWORD *)a4 = result;
      v18 = (_QWORD *)*v7;
      if (!*v7 || !*((_DWORD *)v18 - 3))
      {
        v23 = *(WTF::StringImpl **)a4;
        goto LABEL_26;
      }
      v19 = *((unsigned int *)v18 - 1);
      if ((_DWORD)v19)
      {
        v20 = 16 * v19;
        v21 = (_QWORD *)*v7;
        while ((unint64_t)(*v21 + 1) <= 1)
        {
          v21 += 2;
          v20 -= 16;
          if (!v20)
            goto LABEL_23;
        }
      }
      else
      {
        v21 = (_QWORD *)*v7;
      }
      v25 = &v18[2 * v19];
      if (v25 == v21)
      {
LABEL_23:
        v22 = 0;
LABEL_24:
        if (v16 <= v22)
          return result;
        v23 = *(WTF::StringImpl **)a4;
        if (!v22)
          goto LABEL_26;
        if (!(v22 >> 27))
        {
          result = WTF::fastMalloc((WTF *)(32 * v22));
          *(_DWORD *)(a4 + 8) = v22;
          *(_QWORD *)a4 = result;
          if ((WTF::StringImpl *)result != v23)
          {
            v24 = (WTF::StringImpl *)result;
            result = (uint64_t)WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList>::move(v23, (WTF::StringImpl *)((char *)v23 + 32 * v22), result);
LABEL_27:
            if (v23)
            {
              if (v24 == v23)
              {
                *(_QWORD *)a4 = 0;
                *(_DWORD *)(a4 + 8) = 0;
              }
              return WTF::fastFree(v23, v17);
            }
            return result;
          }
LABEL_26:
          v24 = v23;
          goto LABEL_27;
        }
        __break(0xC471u);
LABEL_159:
        JUMPOUT(0x1942C2AFCLL);
      }
      v26 = v8 | v14 | v15 | 0x60000;
      v96 = v25;
LABEL_35:
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 16))(*a3, v21);
      if ((result & 1) != 0)
      {
LABEL_36:
        for (v21 += 2; v21 != v96; v21 += 2)
        {
          if ((unint64_t)(*v21 + 1) > 1)
          {
            if (v21 != v96)
              goto LABEL_35;
            break;
          }
        }
        LODWORD(v16) = *(_DWORD *)(a4 + 8);
        v22 = *(_DWORD *)(a4 + 12);
        goto LABEL_24;
      }
      v27 = v21[1];
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v28 = *(WTF::StringImpl **)(v27 + 8);
      if (v28)
        *(_DWORD *)v28 += 2;
      v100 = v28;
      v29 = *(_QWORD *)(v27 + 16);
      v105[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v105[1] = v30;
      WebCore::ContentExtensions::DFABytecodeInterpreter::interpret((WebCore::ContentExtensions::DFABytecodeInterpreter *)v105, (const WTF::String *)a2, &v104);
      WebCore::ContentExtensions::ContentExtension::populateTopURLActionCacheIfNeeded((WebCore::ContentExtensions::ContentExtension *)v27, v9, v31);
      WebCore::ContentExtensions::ContentExtension::populateFrameURLActionCacheIfNeeded((WebCore::ContentExtensions::ContentExtension *)v27, (const WTF::URL *)(a2 + 80), v32);
      if (!v104)
        goto LABEL_43;
      v68 = *(_DWORD *)(v104 - 4);
      if (!v68)
        goto LABEL_43;
      do
      {
        v69 = *(_QWORD *)(v104 + 8 * --v68);
        if (v69 <= 0xFFFFFFFFFFFFFFFDLL)
          __asm { BR              X14 }
      }
      while (v68);
      v84 = *(_DWORD *)(v104 - 4);
      v85 = *(unsigned int *)(v104 - 12);
      if (v84 < 9 || 6 * (int)v85 >= v84)
      {
LABEL_43:
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        v98 = (unint64_t)v17;
        v99 = v33;
        v34 = v104;
        v94 = v9;
        v95 = a3;
        v93 = v26;
        if (v104)
          v34 = *(unsigned int *)(v104 - 12);
        v35 = v27;
        v36 = *(unsigned int *)(v27 + 180) + v34;
        if (!v36)
          goto LABEL_78;
        if (v36 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x1942C2B04);
        }
        v37 = WTF::fastMalloc((WTF *)(4 * v36));
        v38 = (char *)v37;
        v39 = v36;
        v40 = v104;
        if (!v104)
        {
          LODWORD(v41) = 0;
LABEL_49:
          v42 = v41;
          v43 = *(unsigned int *)(v35 + 180);
          v44 = v43 + v41;
          if (v44 > v39)
          {
            if (v44 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x1942C2B0CLL);
            }
            v45 = (char *)WTF::fastMalloc((WTF *)(4 * v44));
            memcpy(v45, v38, 4 * v41);
            if (v38)
            {
              if (v45 == v38)
                v47 = 0;
              else
                v47 = v45;
              WTF::fastFree((WTF *)v38, v46);
              v38 = v47;
            }
            else
            {
              v38 = v45;
            }
            v43 = *(unsigned int *)(v35 + 180);
          }
          if ((_DWORD)v43)
          {
            v48 = *(uint64_t **)(v35 + 168);
            v49 = 8 * v43;
            do
            {
              v50 = *v48++;
              *(_DWORD *)&v38[4 * v41] = v50;
              v41 = (v41 + 1);
              v49 -= 8;
            }
            while (v49);
            v42 = v41;
          }
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          if ((_DWORD)v41)
          {
            v97 = 0;
            v51 = 0;
            for (i = 4 * v42 - 4; ; i -= 4)
            {
              WebCore::ContentExtensions::DeserializedAction::deserialize(v99, v98, *(_DWORD *)&v38[i], (uint64_t)&v107);
              v53 = v111;
              if (v111 == 4)
              {
                v101 = 1;
                v54 = 4;
              }
              else
              {
                if (v51 == (_DWORD)v103)
                {
                  v55 = WTF::Vector<WebCore::ContentExtensions::DeserializedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v102, v51 + 1, (unint64_t)&v107);
                  v51 = HIDWORD(v103);
                  v97 = v102;
                  v56 = (char *)v102 + 128 * (unint64_t)HIDWORD(v103);
                  *v56 = 0;
                  *((_DWORD *)v56 + 28) = -1;
                  v57 = *(unsigned int *)(v55 + 112);
                  if ((_DWORD)v57 != -1)
                  {
                    ((void (*)(char *, char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v57])(&v106, v56, v55);
                    *((_DWORD *)v56 + 28) = v57;
                  }
                  v58 = v56 + 120;
                  v59 = (_DWORD *)(v55 + 120);
                }
                else
                {
                  v60 = (char *)v97 + 128 * (unint64_t)v51;
                  *v60 = 0;
                  *((_DWORD *)v60 + 28) = -1;
                  v61 = v111;
                  if (v111 != -1)
                  {
                    ((void (*)(char *, char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v111])(&v106, v60, &v107);
                    *((_DWORD *)v60 + 28) = v61;
                  }
                  v58 = v60 + 120;
                  v59 = v112;
                }
                *v58 = *v59;
                HIDWORD(v103) = ++v51;
                v54 = v111;
                if (v111 == -1)
                {
                  if (!i)
                    goto LABEL_77;
                  continue;
                }
              }
              ((void (*)(char *, WTF::StringImpl **))off_1E33954A0[v54])(&v106, &v107);
              if (!i || v53 == 4)
                goto LABEL_77;
            }
          }
          if (v38)
LABEL_77:
            WTF::fastFree((WTF *)v38, v17);
LABEL_78:
          if (v104)
            WTF::fastFree((WTF *)(v104 - 16), v17);
          v62 = v101;
          v107 = v100;
          v108 = v101;
          v109 = v102;
          v110 = v103;
          v63 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v63 == *(_DWORD *)(a4 + 8))
          {
            v64 = WTF::Vector<WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v63 + 1, (unint64_t)&v107);
            v63 = *(unsigned int *)(a4 + 12);
            v65 = *(_QWORD *)a4 + 32 * v63;
            v66 = *(_QWORD *)v64;
            *(_QWORD *)v64 = 0;
            *(_QWORD *)v65 = v66;
            *(_BYTE *)(v65 + 8) = v64[8];
            *(_QWORD *)(v65 + 16) = 0;
            *(_QWORD *)(v65 + 24) = 0;
            v67 = *((_QWORD *)v64 + 2);
            *((_QWORD *)v64 + 2) = 0;
            *(_QWORD *)(v65 + 16) = v67;
            LODWORD(v67) = *((_DWORD *)v64 + 6);
            *((_DWORD *)v64 + 6) = 0;
            *(_DWORD *)(v65 + 24) = v67;
            LODWORD(v67) = *((_DWORD *)v64 + 7);
            *((_DWORD *)v64 + 7) = 0;
            *(_DWORD *)(v65 + 28) = v67;
          }
          else
          {
            v72 = *(_QWORD *)a4 + 32 * v63;
            v107 = 0;
            *(_QWORD *)v72 = v100;
            *(_BYTE *)(v72 + 8) = v62;
            *(_QWORD *)(v72 + 16) = 0;
            *(_QWORD *)(v72 + 24) = 0;
            v73 = v109;
            v109 = 0;
            *(_QWORD *)(v72 + 16) = v73;
            LODWORD(v73) = v110;
            LODWORD(v110) = 0;
            *(_DWORD *)(v72 + 24) = (_DWORD)v73;
            LODWORD(v73) = HIDWORD(v110);
            HIDWORD(v110) = 0;
            *(_DWORD *)(v72 + 28) = (_DWORD)v73;
          }
          v9 = v94;
          a3 = v95;
          *(_DWORD *)(a4 + 12) = v63 + 1;
          v74 = (unsigned int *)v109;
          v26 = v93;
          if (HIDWORD(v110))
          {
            v75 = (unint64_t)HIDWORD(v110) << 7;
            do
            {
              v76 = v74[28];
              if ((_DWORD)v76 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33954A0[v76])(&v100, v74);
              v74[28] = -1;
              v74 += 32;
              v75 -= 128;
            }
            while (v75);
            v74 = (unsigned int *)v109;
          }
          if (v74)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree((WTF *)v74, v17);
          }
          result = (uint64_t)v107;
          v107 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_36;
        }
        v78 = *(unsigned int *)(v104 - 12);
        if (v36 >= v78)
        {
          v81 = (char *)v37;
        }
        else
        {
          if (v78 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x1942C2B14);
          }
          v79 = WTF::fastMalloc((WTF *)(4 * v78));
          if ((char *)v79 == v38)
            v39 = 0;
          else
            v39 = v78;
          if ((char *)v79 == v38)
            v81 = 0;
          else
            v81 = (char *)v79;
          WTF::fastFree((WTF *)v38, v80);
          v40 = v104;
          if (!v104)
            goto LABEL_131;
          v78 = *(unsigned int *)(v104 - 12);
        }
        if (v78)
        {
          v82 = *(unsigned int *)(v40 - 4);
          v70 = (uint64_t *)v40;
          if ((_DWORD)v82)
          {
            v71 = 8 * v82;
            v70 = (uint64_t *)v40;
            while ((unint64_t)*v70 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v70;
              v71 -= 8;
              if (!v71)
                goto LABEL_131;
            }
          }
          v83 = (uint64_t *)(v40 + 8 * v82);
          if (v83 != v70)
          {
            LODWORD(v41) = 0;
            v77 = *v70;
LABEL_101:
            *(_DWORD *)&v81[4 * v41] = v77;
            LODWORD(v41) = v41 + 1;
            while (1)
            {
              if (++v70 == v83)
                goto LABEL_132;
              v77 = *v70;
              if ((unint64_t)*v70 < 0xFFFFFFFFFFFFFFFELL)
              {
                if (v70 != v83)
                  goto LABEL_101;
                goto LABEL_132;
              }
            }
          }
        }
LABEL_131:
        LODWORD(v41) = 0;
LABEL_132:
        v38 = v81;
        goto LABEL_49;
      }
      v87 = (v85 - 1) | ((v85 - 1) >> 1) | ((((_DWORD)v85 - 1) | ((v85 - 1) >> 1)) >> 2);
      v88 = v87 | (v87 >> 4) | ((v87 | (v87 >> 4)) >> 8);
      v89 = (v88 | HIWORD(v88)) + 1;
      if (v89 > 0x400)
      {
        if (v89 > 2 * v85)
          goto LABEL_148;
      }
      else if (3 * v89 > 4 * v85)
      {
LABEL_140:
        v90 = (double)v85;
        v91 = (double)v89 * 0.604166667;
LABEL_141:
        if (v91 <= v90)
          LODWORD(v89) = 2 * v89;
        if (v89 <= 8)
          v92 = 8;
        else
          v92 = v89;
        WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(&v104, v92, 0);
        goto LABEL_43;
      }
      LODWORD(v89) = 2 * v89;
      if (v89 <= 0x400)
        goto LABEL_140;
LABEL_148:
      v90 = (double)v85;
      v91 = (double)v89 * 0.416666667;
      goto LABEL_141;
    }
  }
  return result;
}

uint64_t WebCore::ContentExtensions::makeSecureIfNecessary(uint64_t a1, WTF::URL *a2, WTF::URL *a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WebCore::ContentExtensions::net::FixedSetIncrementalLookup *v17;
  int v18;
  WebCore::ContentExtensions::net::FixedSetIncrementalLookup *v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  WTF *v25;

  result = WTF::URL::protocolIs();
  if (!(_DWORD)result)
    return result;
  v7 = (unsigned __int8 *)WTF::URL::host(a3);
  v9 = v8;
  v10 = (unsigned __int8 *)WTF::URL::host(a2);
  if (WTF::operator==(v7, v9, v10, v11))
  {
    result = WTF::URL::protocolIs();
    if ((result & 1) != 0)
      return result;
  }
  result = WTF::URL::host(a2);
  if ((v12 & 0xFF00000000) != 0)
  {
    v13 = 0;
    v14 = v12;
  }
  else
  {
    WTF::StringView::utf8();
    v13 = v25;
    if (!v25)
      goto LABEL_24;
    result = (uint64_t)v25 + 16;
    v14 = *((_QWORD *)v25 + 1);
  }
  if (v14)
  {
    v15 = 0;
    v16 = result + v14;
    v17 = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)&WebCore::ContentExtensions::kDafsa;
    while (*(char *)result >= 32)
    {
      v18 = *(unsigned __int8 *)result;
      if (!(_BYTE)v15)
      {
        v19 = v17;
        while (v19)
        {
          v20 = *(_BYTE *)v19;
          v21 = *(_BYTE *)v19 & 0x60;
          if (v21 == 96)
          {
            v22 = ((v20 & 0x1F) << 16) | (*((unsigned __int8 *)v19 + 1) << 8) | *((unsigned __int8 *)v19 + 2);
            v23 = 3;
          }
          else if (v21 == 64)
          {
            v22 = *((unsigned __int8 *)v19 + 1) | ((v20 & 0x1F) << 8);
            v23 = 2;
          }
          else
          {
            v22 = v20 & 0x3F;
            v23 = 1;
          }
          v17 = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)((char *)v17 + v22);
          v19 = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)((char *)v19 + v23);
          if (v20 < 0)
            v19 = 0;
          v24 = *(unsigned __int8 *)v17;
          if ((v24 & 0x7F) == v18)
            goto LABEL_20;
        }
        goto LABEL_27;
      }
      v24 = *(unsigned __int8 *)v17;
      if ((v24 & 0x7F) != v18)
        goto LABEL_27;
LABEL_20:
      v17 = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)((char *)v17 + 1);
      v15 = (void *)((v24 >> 7) ^ 1);
      if (++result == v16)
        goto LABEL_25;
    }
    goto LABEL_27;
  }
LABEL_24:
  LOBYTE(v15) = 0;
  v17 = (WebCore::ContentExtensions::net::FixedSetIncrementalLookup *)&WebCore::ContentExtensions::kDafsa;
LABEL_25:
  result = WebCore::ContentExtensions::net::FixedSetIncrementalLookup::GetResultForCurrentSequence(v17, (char)v15);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 1) = 1;
LABEL_27:
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      return WTF::fastFree(v13, v15);
    else
      --*(_DWORD *)v13;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 32 * v3;
    do
    {
      v8 = *((unsigned int *)v6 + 7);
      v9 = (unsigned int *)*((_QWORD *)v6 + 2);
      if ((_DWORD)v8)
      {
        v10 = v8 << 7;
        do
        {
          v11 = v9[28];
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, unsigned int *))off_1E33954A0[v11])(&v13, v9);
          v9[28] = -1;
          v9 += 32;
          v10 -= 128;
        }
        while (v10);
        v9 = (unsigned int *)*((_QWORD *)v6 + 2);
      }
      if (v9)
      {
        *((_QWORD *)v6 + 2) = 0;
        *((_DWORD *)v6 + 6) = 0;
        WTF::fastFree((WTF *)v9, a2);
      }
      v12 = *(WTF::StringImpl **)v6;
      *(_QWORD *)v6 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v6 = (WTF *)((char *)v6 + 32);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t ___ZN7WebCore20NetworkStateNotifier14startObservingEv_block_invoke()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E335AB20;
  v2 = v0;
  WTF::callOnMainThread();
  result = (uint64_t)v2;
  if (v2)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

void sub_1942C2E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::CSSCalcExpressionNodeParser::parseCalcFunction(unsigned __int8 *a1, __int128 **this, int a3, int a4, WTF **a5)
{
  _BOOL8 v5;
  __int128 *v8;
  unint64_t v9;
  int v12;
  int v13;
  unsigned int v14;
  char v15;
  _BOOL4 v16;
  WTF *v17;
  __int128 *v18;
  unint64_t v19;
  WTF *v20;
  _BOOL4 v21;
  WTF *v22;
  char v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  __int128 *v28;
  unint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  _BOOL4 v33;
  _DWORD *v34;
  char v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  WTF *v39;
  uint64_t *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t *v46;
  WTF *v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  WTF *v54;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  WTF **v60;
  WTF *v61;
  uint64_t v62;
  _DWORD *v63;
  WTF *v64;
  WTF *v65;
  int v66;
  int v67;
  char v68;
  WTF *v69;
  WTF *v70;
  char v71;
  int v72;
  char v73;
  int v74;
  char v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v79;
  char v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;

  v5 = 0;
  if (a4 > 100)
    return v5;
  v8 = *this;
  v9 = (unint64_t)this[1];
  if (*this == (__int128 *)v9)
    return v5;
  v76 = a3 - 864;
  if (a3 != 864)
  {
    v12 = 0;
    v13 = 1;
    v80 = 0;
    switch(a3)
    {
      case 868:
        v80 = 1;
        v12 = 3;
        v13 = 3;
        goto LABEL_5;
      case 869:
      case 884:
      case 885:
        v80 = 1;
        v12 = 2;
        v13 = 2;
        goto LABEL_5;
      case 870:
        v12 = 1;
        v80 = 1;
        goto LABEL_5;
      case 871:
      case 874:
      case 875:
        goto LABEL_5;
      case 872:
      case 873:
      case 876:
      case 878:
      case 879:
      case 880:
      case 882:
      case 883:
        break;
      case 877:
      case 881:
        v80 = 1;
        v12 = 2;
        goto LABEL_5;
      default:
        if (a3 == 596)
        {
          v13 = 2;
          v80 = 1;
          v12 = 3;
          goto LABEL_5;
        }
        v80 = 0;
        if (a3 != 1140)
          goto LABEL_5;
        break;
    }
  }
  v12 = 1;
  v80 = 1;
  v13 = 1;
LABEL_5:
  v77 = v13;
  v79 = v12;
  v14 = 0;
  v15 = 0;
  v81 = 0;
  v82 = 0;
  do
  {
    while (1)
    {
      if ((unint64_t)v8 >= v9)
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x10)
        break;
      v9 = (unint64_t)this[1];
      v8 = (__int128 *)((char *)*this + 24);
      *this = v8;
    }
    if ((v15 & 1) != 0
      && !WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, (WebCore::CSSParserTokenRange *)this)
      || *this == this[1])
    {
      goto LABEL_118;
    }
    v87 = 0;
    v16 = WebCore::CSSCalcExpressionNodeParser::parseCalcProduct((uint64_t)a1, this, a3, a4, (uint64_t *)&v87);
    v17 = v87;
    if (!v16)
    {
      v20 = 0;
      v21 = 0;
      goto LABEL_16;
    }
    v85 = 0;
    v86 = 0;
    v18 = *this;
    v19 = (unint64_t)this[1];
    if (*this == (__int128 *)v19)
    {
LABEL_12:
      v20 = v17;
      v21 = v17 != 0;
      v22 = v85;
      v17 = 0;
      goto LABEL_13;
    }
    v26 = (uint64_t)v87;
    do
    {
      if ((unint64_t)v18 >= v19)
      {
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v18 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)v18 & 0x3F) != 6)
        break;
      v27 = *((unsigned __int8 *)v18 + 16);
      if (v27 != 45 && v27 != 43)
        break;
      v28 = *this;
      if (*this >= this[1])
      {
        v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v28 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*((_DWORD *)v28 - 6) & 0x3F) != 0x10)
        goto LABEL_114;
      v30 = *this;
      v29 = (unint64_t)this[1];
      if (*this != (__int128 *)v29)
      {
        v31 = (__int128 *)((char *)v30 + 24);
        *this = (__int128 *)((char *)v30 + 24);
LABEL_39:
        if ((unint64_t)v31 >= v29)
        {
          v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v31 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        goto LABEL_40;
      }
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v31 = *this;
        v29 = (unint64_t)this[1];
        goto LABEL_39;
      }
      v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_40:
      if ((*(_DWORD *)v31 & 0x3F) != 0x10)
        goto LABEL_114;
      v32 = *this;
      if (*this != this[1])
      {
        v32 = (__int128 *)((char *)v32 + 24);
        goto LABEL_126;
      }
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v32 = *this;
      }
      while (1)
      {
        if (v32 >= this[1])
        {
          v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v32 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v32 & 0x3F) != 0x10)
          break;
        v32 = (__int128 *)((char *)*this + 24);
LABEL_126:
        *this = v32;
      }
      v84 = 0;
      v33 = WebCore::CSSCalcExpressionNodeParser::parseCalcProduct((uint64_t)a1, this, a3, a4, (uint64_t *)&v84);
      v20 = v84;
      if (!v33)
      {
        if (v84)
        {
          if (*((_DWORD *)v84 + 2) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v84 + 8))(v84);
          else
            --*((_DWORD *)v84 + 2);
        }
LABEL_114:
        v20 = 0;
LABEL_115:
        v21 = 0;
        goto LABEL_78;
      }
      if (!v84)
        goto LABEL_115;
      if (v27 == 45)
      {
        v34 = (_DWORD *)WTF::fastMalloc((WTF *)0x18);
        v35 = *((_BYTE *)v20 + 12);
        v34[2] = 1;
        *((_BYTE *)v34 + 12) = v35;
        *(_QWORD *)v34 = off_1E339A120;
        *((_QWORD *)v34 + 2) = v20;
        v84 = (WTF *)v34;
        v20 = (WTF *)v34;
      }
      v37 = v86;
      LODWORD(v36) = HIDWORD(v86);
      if (v17)
      {
        v83 = v17;
        v87 = 0;
        if (HIDWORD(v86) == (_DWORD)v86)
        {
          v43 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, HIDWORD(v86) + 1, (unint64_t)&v83);
          v36 = HIDWORD(v86);
          v44 = v85;
          v45 = *v43;
          *v43 = 0;
          *((_QWORD *)v44 + v36) = v45;
        }
        else
        {
          v83 = 0;
          *((_QWORD *)v85 + HIDWORD(v86)) = v17;
        }
        LODWORD(v36) = v36 + 1;
        HIDWORD(v86) = v36;
        v38 = v83;
        v83 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 2) == 1)
          {
            (*(void (**)(WTF *))(*(_QWORD *)v38 + 8))(v38);
            LODWORD(v36) = HIDWORD(v86);
          }
          else
          {
            --*((_DWORD *)v38 + 2);
          }
        }
        v26 = 0;
        v37 = v86;
      }
      v83 = v20;
      if ((_DWORD)v36 == v37)
      {
        v40 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, v36 + 1, (unint64_t)&v83);
        v36 = HIDWORD(v86);
        v41 = v85;
        v42 = *v40;
        *v40 = 0;
        *((_QWORD *)v41 + v36) = v42;
      }
      else
      {
        v83 = 0;
        *((_QWORD *)v85 + v36) = v20;
      }
      HIDWORD(v86) = v36 + 1;
      v39 = v83;
      v83 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 2) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v39 + 8))(v39);
        else
          --*((_DWORD *)v39 + 2);
      }
      v17 = 0;
      v18 = *this;
      v19 = (unint64_t)this[1];
    }
    while (*this != (__int128 *)v19);
    if (!HIDWORD(v86))
    {
      v17 = (WTF *)v26;
      goto LABEL_12;
    }
    v49 = WebCore::determineCategory(&v85, 43);
    if (v49 == 9)
    {
      v20 = 0;
    }
    else
    {
      v50 = v49;
      v20 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *((_DWORD *)v20 + 2) = 1;
      *((_BYTE *)v20 + 12) = v50;
      *(_QWORD *)v20 = off_1E339A040;
      *((_BYTE *)v20 + 13) = 43;
      *((_QWORD *)v20 + 2) = v85;
      v51 = v86;
      v85 = 0;
      v86 = 0;
      *((_QWORD *)v20 + 3) = v51;
      *((_WORD *)v20 + 16) = 256;
    }
    v21 = v20 != 0;
LABEL_78:
    v22 = v85;
    if (HIDWORD(v86))
    {
      v52 = 8 * HIDWORD(v86);
      do
      {
        v53 = *(_DWORD **)v22;
        *(_QWORD *)v22 = 0;
        if (v53)
        {
          if (v53[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
          else
            --v53[2];
        }
        v22 = (WTF *)((char *)v22 + 8);
        v52 -= 8;
      }
      while (v52);
      v22 = v85;
    }
    v17 = (WTF *)v26;
LABEL_13:
    if (v22)
    {
      v85 = 0;
      LODWORD(v86) = 0;
      WTF::fastFree(v22, this);
    }
LABEL_16:
    v87 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
      else
        --*((_DWORD *)v17 + 2);
    }
    if (!v21)
      goto LABEL_88;
    ++v14;
    v23 = v80;
    if (v14 <= v79)
      v23 = 0;
    if ((v23 & 1) != 0)
    {
LABEL_88:
      if (v20)
      {
        if (*((_DWORD *)v20 + 2) != 1)
        {
          v5 = 0;
          --*((_DWORD *)v20 + 2);
          goto LABEL_91;
        }
        (*(void (**)(WTF *))(*(_QWORD *)v20 + 8))(v20);
      }
      goto LABEL_118;
    }
    v85 = v20;
    LODWORD(v24) = HIDWORD(v82);
    if (HIDWORD(v82) == (_DWORD)v82)
    {
      v46 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v81, HIDWORD(v82) + 1, (unint64_t)&v85);
      v24 = HIDWORD(v82);
      v47 = v81;
      v48 = *v46;
      *v46 = 0;
      *((_QWORD *)v47 + v24) = v48;
    }
    else
    {
      v85 = 0;
      *((_QWORD *)v81 + HIDWORD(v82)) = v20;
    }
    HIDWORD(v82) = v24 + 1;
    v25 = v85;
    v85 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v25 + 8))(v25);
      else
        --*((_DWORD *)v25 + 2);
    }
    v8 = *this;
    v9 = (unint64_t)this[1];
    v15 = 1;
  }
  while (*this != (__int128 *)v9);
  if (v14 < v77)
  {
LABEL_118:
    v5 = 0;
    goto LABEL_91;
  }
  if (v76 >= 2)
  {
    v60 = a5;
    switch(a3)
    {
      case 866:
        v67 = *a1;
        v68 = 0;
        goto LABEL_141;
      case 867:
        WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp(1, (uint64_t *)&v81, *a1, (uint64_t *)&v85);
        v64 = v85;
        v85 = 0;
        v65 = *a5;
        *a5 = v64;
        if (!v65)
          break;
        v66 = *((_DWORD *)v65 + 2) - 1;
        if (*((_DWORD *)v65 + 2) != 1)
          goto LABEL_134;
        (*(void (**)(WTF *))(*(_QWORD *)v65 + 8))(v65);
        v65 = v85;
        v85 = 0;
        if (!v65)
          break;
        v66 = *((_DWORD *)v65 + 2) - 1;
        if (*((_DWORD *)v65 + 2) != 1)
          goto LABEL_134;
        (*(void (**)(WTF *))(*(_QWORD *)v65 + 8))(v65);
        break;
      case 868:
        v67 = *a1;
        v68 = 2;
LABEL_141:
        WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp(v68, (uint64_t *)&v81, v67, (uint64_t *)&v85);
        goto LABEL_142;
      case 869:
        v72 = 3;
        goto LABEL_172;
      case 870:
        v72 = 4;
LABEL_172:
        WebCore::CSSCalcOperationNode::createPowOrSqrt(v72, &v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 871:
        WebCore::CSSCalcOperationNode::createHypot(&v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 872:
        v71 = 6;
        goto LABEL_161;
      case 873:
        v71 = 7;
        goto LABEL_161;
      case 874:
      case 875:
        break;
      case 876:
        WebCore::CSSCalcOperationNode::createExp(&v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 877:
        WebCore::CSSCalcOperationNode::createLog((uint64_t *)&v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 878:
        v73 = 11;
        goto LABEL_176;
      case 879:
        v73 = 12;
        goto LABEL_176;
      case 880:
        v73 = 13;
LABEL_176:
        WebCore::CSSCalcOperationNode::createInverseTrig(v73, &v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 881:
        WebCore::CSSCalcOperationNode::createAtan2(&v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 882:
        v74 = 15;
        goto LABEL_166;
      case 883:
        v74 = 16;
LABEL_166:
        WebCore::CSSCalcOperationNode::createSign(v74, &v81, (uint64_t *)&v85);
        goto LABEL_142;
      case 884:
        v75 = 17;
        goto LABEL_169;
      case 885:
        v75 = 18;
LABEL_169:
        WebCore::CSSCalcOperationNode::createStep(v75, &v81, (uint64_t *)&v85);
        goto LABEL_142;
      default:
        if (a3 == 596)
        {
          WebCore::CSSCalcOperationNode::createRound(&v81, (uint64_t *)&v85);
        }
        else
        {
          if (a3 != 1140)
            break;
          v71 = 8;
LABEL_161:
          WebCore::CSSCalcOperationNode::createTrig(v71, &v81, (uint64_t *)&v85);
        }
LABEL_142:
        v69 = v85;
        v85 = 0;
        v65 = *a5;
        *a5 = v69;
        if (v65)
        {
          v66 = *((_DWORD *)v65 + 2) - 1;
          if (*((_DWORD *)v65 + 2) == 1)
          {
            (*(void (**)(WTF *))(*(_QWORD *)v65 + 8))(v65);
            v70 = v85;
            v85 = 0;
            if (v70)
            {
              if (*((_DWORD *)v70 + 2) == 1)
                (*(void (**)(WTF *))(*(_QWORD *)v70 + 8))(v70);
              else
                --*((_DWORD *)v70 + 2);
              v60 = a5;
            }
          }
          else
          {
LABEL_134:
            *((_DWORD *)v65 + 2) = v66;
          }
        }
        break;
    }
  }
  else
  {
    if (!HIDWORD(v82) || (v56 = WebCore::determineCategory(&v81, 43), v56 == 9))
    {
      v58 = 0;
    }
    else
    {
      v57 = v56;
      v58 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v58 + 8) = 1;
      *(_BYTE *)(v58 + 12) = v57;
      *(_QWORD *)v58 = off_1E339A040;
      *(_BYTE *)(v58 + 13) = 43;
      *(_QWORD *)(v58 + 16) = v81;
      v59 = v82;
      v81 = 0;
      v82 = 0;
      *(_QWORD *)(v58 + 24) = v59;
      *(_WORD *)(v58 + 32) = 256;
    }
    v60 = a5;
    v61 = *a5;
    *a5 = (WTF *)v58;
    if (v61)
    {
      if (*((_DWORD *)v61 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v61 + 8))(v61);
      else
        --*((_DWORD *)v61 + 2);
    }
  }
  v5 = *v60 != 0;
LABEL_91:
  v54 = v81;
  if (HIDWORD(v82))
  {
    v62 = 8 * HIDWORD(v82);
    do
    {
      v63 = *(_DWORD **)v54;
      *(_QWORD *)v54 = 0;
      if (v63)
      {
        if (v63[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
        else
          --v63[2];
      }
      v54 = (WTF *)((char *)v54 + 8);
      v62 -= 8;
    }
    while (v62);
    v54 = v81;
  }
  if (v54)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree(v54, this);
  }
  return v5;
}

BOOL WebCore::CSSCalcExpressionNodeParser::parseCalcProduct(uint64_t a1, __int128 **a2, int a3, int a4, uint64_t *a5)
{
  _BOOL8 v5;
  void *v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  __int128 *v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  _DWORD *v38;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  uint64_t v50;
  _DWORD *v51;

  v5 = 0;
  if (a4 <= 100 && *a2 != a2[1])
  {
    v51 = 0;
    if (WebCore::CSSCalcExpressionNodeParser::parseCalcValue(a1, (uint64_t)a2, a3, a4, (uint64_t *)&v51))
    {
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v12 = *a2;
        v13 = a2[1];
        if (*a2 == v13)
          break;
        if (*a2 >= v13)
        {
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v12 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v12 & 0x3F) != 6)
          break;
        v14 = *((unsigned __int8 *)v12 + 16);
        if (v14 != 47 && v14 != 42)
          break;
        v15 = *a2;
        if (*a2 != a2[1])
        {
          v15 = (__int128 *)((char *)v15 + 24);
          goto LABEL_77;
        }
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v15 = *a2;
        }
        while (1)
        {
          if (v15 >= a2[1])
          {
            v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              v15 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            }
          }
          if ((*(_DWORD *)v15 & 0x3F) != 0x10)
            break;
          v15 = (__int128 *)((char *)*a2 + 24);
LABEL_77:
          *a2 = v15;
        }
        v48 = 0;
        v16 = WebCore::CSSCalcExpressionNodeParser::parseCalcValue(a1, (uint64_t)a2, a3, a4, (uint64_t *)&v48);
        v17 = v16;
        if (v16)
        {
          v18 = (uint64_t)v48;
          if (!v48)
            goto LABEL_73;
          if (v14 == 47)
          {
            v48 = 0;
            v19 = WTF::fastMalloc((WTF *)0x18);
            v20 = *(_BYTE *)(v18 + 12);
            *(_DWORD *)(v19 + 8) = 1;
            *(_BYTE *)(v19 + 12) = v20;
            *(_QWORD *)v19 = off_1E3399EF0;
            *(_QWORD *)(v19 + 16) = v18;
            v21 = v48;
            v48 = (_DWORD *)v19;
            if (v21)
            {
              if (v21[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
              else
                --v21[2];
            }
          }
          v22 = (uint64_t)v51;
          v24 = v50;
          LODWORD(v23) = HIDWORD(v50);
          if (v51)
          {
            v47 = (uint64_t)v51;
            v51 = 0;
            if (HIDWORD(v50) == (_DWORD)v50)
            {
              v32 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, HIDWORD(v50) + 1, (unint64_t)&v47);
              v23 = HIDWORD(v50);
              v33 = v49;
              v34 = *v32;
              *v32 = 0;
              *((_QWORD *)v33 + v23) = v34;
            }
            else
            {
              v47 = 0;
              *((_QWORD *)v49 + HIDWORD(v50)) = v22;
            }
            LODWORD(v23) = v23 + 1;
            HIDWORD(v50) = v23;
            v25 = (_DWORD *)v47;
            v47 = 0;
            if (v25)
            {
              if (v25[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
                LODWORD(v23) = HIDWORD(v50);
              }
              else
              {
                --v25[2];
              }
            }
            v24 = v50;
          }
          v26 = (uint64_t)v48;
          v47 = (uint64_t)v48;
          v48 = 0;
          if ((_DWORD)v23 == v24)
          {
            v29 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, v23 + 1, (unint64_t)&v47);
            v23 = HIDWORD(v50);
            v30 = v49;
            v31 = *v29;
            *v29 = 0;
            *((_QWORD *)v30 + v23) = v31;
          }
          else
          {
            v47 = 0;
            *((_QWORD *)v49 + v23) = v26;
          }
          HIDWORD(v50) = v23 + 1;
          v27 = (_DWORD *)v47;
          v47 = 0;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
        }
        v28 = v48;
        v48 = 0;
        if (v28)
        {
          if (v28[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
          else
            --v28[2];
        }
        if ((v17 & 1) == 0)
        {
LABEL_73:
          v5 = 0;
          goto LABEL_44;
        }
      }
      if (HIDWORD(v50))
      {
        v40 = WebCore::determineCategory(&v49, 42);
        if (v40 == 9)
        {
          v42 = 0;
        }
        else
        {
          v41 = v40;
          v42 = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(v42 + 8) = 1;
          *(_BYTE *)(v42 + 12) = v41;
          *(_QWORD *)v42 = off_1E339A040;
          *(_BYTE *)(v42 + 13) = 42;
          *(_QWORD *)(v42 + 16) = v49;
          v43 = v50;
          v49 = 0;
          v50 = 0;
          *(_QWORD *)(v42 + 24) = v43;
          *(_WORD *)(v42 + 32) = 256;
        }
        v44 = (_DWORD *)*a5;
        *a5 = v42;
        if (v44)
        {
          if (v44[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
          else
            --v44[2];
        }
      }
      else
      {
        v35 = (uint64_t)v51;
        v51 = 0;
        v36 = (_DWORD *)*a5;
        *a5 = v35;
        if (v36)
        {
          if (v36[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
          else
            --v36[2];
        }
      }
      v5 = *a5 != 0;
LABEL_44:
      v37 = v49;
      if (HIDWORD(v50))
      {
        v45 = 8 * HIDWORD(v50);
        do
        {
          v46 = *(_DWORD **)v37;
          *(_QWORD *)v37 = 0;
          if (v46)
          {
            if (v46[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
            else
              --v46[2];
          }
          v37 = (WTF *)((char *)v37 + 8);
          v45 -= 8;
        }
        while (v45);
        v37 = v49;
      }
      if (v37)
      {
        v49 = 0;
        LODWORD(v50) = 0;
        WTF::fastFree(v37, v11);
      }
    }
    else
    {
      v5 = 0;
    }
    v38 = v51;
    v51 = 0;
    if (v38)
    {
      if (v38[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
      else
        --v38[2];
    }
  }
  return v5;
}

uint64_t WebCore::CSSCalcExpressionNodeParser::parseCalcValue(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  uint64_t result;
  unint64_t v8;
  __int128 *v9;
  int *v12;
  int v13;
  __int128 *v14;
  __int128 *v15;
  double v16;
  unsigned int v17;
  double v18;
  int *v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  char v26;
  _DWORD *v27;
  int v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  void *v32;
  unint64_t v34;
  __int128 *v35;
  __int128 *i;
  __int128 *v37;
  int *v38;
  int v39;
  _BYTE *v41;
  unsigned __int8 v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47[8];
  double v48;
  char v49;
  __int128 v50;
  double v51;
  uint64_t *v52;
  uint64_t *v53;

  result = 0;
  if (a4 > 100)
    return result;
  v9 = *(__int128 **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v8)
    return result;
  if (*(_QWORD *)a2 >= v8)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) == 0x16)
    goto LABEL_49;
  v12 = *(int **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    {
      v12 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  v13 = WebCore::CSSParserToken::functionId(v12);
  if (WebCore::CSSCalcValue::isCalcFunction(v13))
  {
LABEL_49:
    v35 = WebCore::CSSParserTokenRange::consumeBlock((__int128 **)a2);
    *(_QWORD *)&v50 = v35;
    *((_QWORD *)&v50 + 1) = v34;
    for (i = *(__int128 **)a2; ; *(_QWORD *)a2 = i)
    {
      if ((unint64_t)i >= *(_QWORD *)(a2 + 8))
      {
        i = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v44 = v34;
          i = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v34 = v44;
        }
      }
      if ((*(_DWORD *)i & 0x3F) != 0x10)
        break;
      i = (__int128 *)(*(_QWORD *)a2 + 24);
    }
    while (1)
    {
      v37 = v35;
      if ((unint64_t)v35 >= v34)
      {
        v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v45 = v34;
          v37 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v34 = v45;
        }
      }
      if ((*(_DWORD *)v37 & 0x3F) != 0x10)
        break;
      v35 = (__int128 *)((char *)v35 + 24);
      *(_QWORD *)&v50 = v35;
    }
    return WebCore::CSSCalcExpressionNodeParser::parseCalcFunction(a1, (WebCore::CSSPropertyParserHelpers *)&v50);
  }
  v52 = a5;
  v53 = a5;
  v14 = *(__int128 **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    {
      v15 = *(__int128 **)a2;
      v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v15 = *(__int128 **)a2;
    }
  }
  else
  {
    v15 = (__int128 *)((char *)v14 + 24);
    *(_QWORD *)a2 = (char *)v14 + 24;
  }
  while (1)
  {
    if ((unint64_t)v15 >= *(_QWORD *)(a2 + 8))
    {
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v15 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)v15 & 0x3F) != 0x10)
      break;
    v15 = (__int128 *)(*(_QWORD *)a2 + 24);
    *(_QWORD *)a2 = v15;
  }
  v16 = *((double *)v14 + 2);
  v50 = *v14;
  v51 = v16;
  if ((v50 & 0x3F) - 7 >= 3)
  {
    if ((v50 & 0x3F) != 0)
      return 0;
    v28 = WebCore::CSSParserToken::id((unsigned int *)&v50);
    if ((WebCore::checkRoundKeyword(a3, a5, v28) & 1) == 0)
    {
      v29 = WebCore::CSSParserToken::id((unsigned int *)&v50);
      v30 = WebCore::CSSCalcSymbolsAllowed::get((uint64_t *)(a1 + 8), v29);
      if (v30 >= 0x100u)
      {
        v42 = v30;
        v43 = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)&v50);
        return WebCore::CSSCalcExpressionNodeParser::parseValue(WebCore::CSSParserTokenRange &,WebCore::CSSValueID,WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>> &)::$_0::operator()(&v53, v43, v42);
      }
      WebCore::getConstantTable((WebCore *)&v46);
      v31 = WebCore::CSSParserToken::id((unsigned int *)&v50);
      WebCore::CSSCalcSymbolTable::get(&v46, v31, (uint64_t)v47);
      if (v46)
        WTF::fastFree((WTF *)(v46 - 16), v32);
      if (v49)
        return WebCore::CSSCalcExpressionNodeParser::parseValue(WebCore::CSSParserTokenRange &,WebCore::CSSValueID,WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>> &)::$_1::operator()(&v52, v47[0], v48);
      return 0;
    }
    return 1;
  }
  v17 = (v50 >> 11) & 0x7F;
  if (WebCore::calcUnitCategory(v17) == 9)
    return 0;
  v18 = v51;
  switch(v17)
  {
    case 6u:
      if ((int)v51 > 0xFF || *(_QWORD *)&v51 != COERCE__INT64((double)(int)v51))
      {
LABEL_20:
        v20 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v20 = 2;
        v21 = *((_BYTE *)v20 + 6);
        *((_WORD *)v20 + 2) = v17;
        *((_BYTE *)v20 + 6) = v21 & 0xFC;
        *((double *)v20 + 1) = v18;
        break;
      }
      v38 = &WebCore::staticCSSValuePool[4 * (int)v51];
      v39 = v38[16];
      v20 = v38 + 16;
      *v20 = v39 + 2;
      break;
    case 1u:
      if ((int)v51 > 0xFF || *(_QWORD *)&v51 != COERCE__INT64((double)(int)v51))
        goto LABEL_20;
      v20 = &WebCore::staticCSSValuePool[4 * (int)v51 + 2064];
      *v20 += 2;
      break;
    case 3u:
      if ((int)v51 > 0xFF || *(_QWORD *)&v51 != COERCE__INT64((double)(int)v51))
        goto LABEL_20;
      v20 = &WebCore::staticCSSValuePool[4 * (int)v51 + 1040];
      *v20 += 2;
      break;
    default:
      goto LABEL_20;
  }
  v22 = WTF::fastMalloc((WTF *)0x18);
  v23 = *((_WORD *)v20 + 2);
  v24 = v23 & 0x7F;
  v25 = 22;
  if ((v24 - 79) >= 2)
  {
    if (v24 == 77)
    {
      v25 = 20;
    }
    else if (v24 != 63)
    {
      v25 = v20[1] & 0x7F;
      if ((v23 & 0x7F) == 0x49)
      {
        v41 = *(_BYTE **)(*((_QWORD *)v20 + 1) + 8);
        if (v41[12] == 1)
        {
LABEL_72:
          v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 72))(*(_QWORD *)(*((_QWORD *)v20 + 1) + 8));
        }
        else
        {
          v25 = 1;
          switch(v41[12])
          {
            case 0:
              break;
            case 2:
              v25 = 3;
              break;
            case 3:
              v25 = 74;
              break;
            case 4:
              v25 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_72;
            default:
              v25 = 0;
              break;
          }
        }
      }
    }
  }
  v26 = WebCore::calcUnitCategory(v25);
  result = 1;
  *(_DWORD *)(v22 + 8) = 1;
  *(_BYTE *)(v22 + 12) = v26;
  *(_QWORD *)v22 = off_1E3399F60;
  *(_QWORD *)(v22 + 16) = v20;
  v27 = (_DWORD *)*a5;
  *a5 = v22;
  if (v27)
  {
    if (v27[2] != 1)
    {
      --v27[2];
      return result;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    return 1;
  }
  return result;
}

BOOL WebCore::CSSCalcValue::isCalcFunction(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 864) > 0x15 || ((1 << (a1 - 96)) & 0x3FF3FF) == 0)
    return a1 == 596 || a1 == 1140;
  return result;
}

uint64_t WebCore::calcUnitCategory(int a1)
{
  if ((a1 - 1) > 0x47)
    return 9;
  else
    return byte_1969EEF98[(char)(a1 - 1)];
}

WTF::URL *WebCore::ResourceResponseBase::ResourceResponseBase(WTF::URL *this, uint64_t a2)
{
  WebCore::HTTPHeaderMap *v4;
  uint64_t *v5;
  int v6;
  const void *v7;
  char v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int64x2_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  char v23;
  _DWORD *v25;
  __int128 v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;

  if (*(_BYTE *)(a2 + 280))
  {
    v25 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v25 += 2;
    *(_QWORD *)this = v25;
    v26 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)this + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)((char *)this + 8) = v26;
  }
  else
  {
    *(_QWORD *)this = 0;
    WTF::URL::invalidate(this);
  }
  if (*(_BYTE *)(a2 + 280))
  {
    v27 = *(_DWORD **)(a2 + 40);
    if (v27)
      *v27 += 2;
    *((_QWORD *)this + 5) = v27;
    v28 = *(_DWORD **)(a2 + 56);
    *((_QWORD *)this + 6) = *(_QWORD *)(a2 + 48);
    if (v28)
      *v28 += 2;
    *((_QWORD *)this + 7) = v28;
    goto LABEL_42;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
LABEL_42:
    v29 = *(_DWORD **)(a2 + 72);
    if (v29)
      *v29 += 2;
    *((_QWORD *)this + 8) = v29;
    goto LABEL_45;
  }
  *((_QWORD *)this + 8) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
LABEL_45:
    v30 = *(_DWORD **)(a2 + 80);
    if (v30)
      *v30 += 2;
    *((_QWORD *)this + 9) = v30;
    v4 = (WTF::URL *)((char *)this + 80);
    goto LABEL_48;
  }
  *((_QWORD *)this + 9) = 0;
  v4 = (WTF::URL *)((char *)this + 80);
  if (*(_BYTE *)(a2 + 280))
  {
LABEL_48:
    WebCore::HTTPHeaderMap::HTTPHeaderMap(v4, (const WebCore::HTTPHeaderMap *)(a2 + 88));
    goto LABEL_8;
  }
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)this + 6) = 0u;
LABEL_8:
  v5 = (uint64_t *)((char *)this + 112);
  v6 = *(unsigned __int8 *)(a2 + 280);
  if (*(_BYTE *)(a2 + 280) && *(_BYTE *)(a2 + 248))
  {
    WTF::Box<WebCore::NetworkLoadMetrics>::create<WebCore::NetworkLoadMetrics&>(v5, (__int128 *)(a2 + 120));
    v6 = *(unsigned __int8 *)(a2 + 280);
  }
  else
  {
    *v5 = 0;
  }
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 128) = 0;
  if (v6 && *(_BYTE *)(a2 + 272))
  {
    v7 = *(const void **)(a2 + 264);
    *((_QWORD *)this + 15) = v7;
    if (v7)
      CFRetain(v7);
    *((_BYTE *)this + 128) = 1;
  }
  v8 = *(_BYTE *)(a2 + 280);
  if (v8)
    v9 = *(_WORD *)(a2 + 64);
  else
    v9 = 0;
  *((_WORD *)this + 68) = v9;
  v10 = (*((_BYTE *)this + 138) & 0xFE | v8) ^ 1;
  *((_BYTE *)this + 138) = v10;
  v11 = *(_BYTE *)(a2 + 280);
  if (v11)
    v11 = 16 * *(_BYTE *)(a2 + 260);
  v12 = v11 | v10 & 0xEF;
  *((_BYTE *)this + 138) = v12;
  v13 = *(_BYTE *)(a2 + 280);
  if (v13)
    v13 = 32 * *(_BYTE *)(a2 + 261);
  *((_BYTE *)this + 138) = v13 | v12 & 0xDF;
  v14 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 9) = v14;
  *((int64x2_t *)this + 10) = v14;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0x8000000000000000;
  *(int64x2_t *)((char *)this + 200) = v14;
  *((_QWORD *)this + 27) = 0x7FF8000000000000;
  *((_BYTE *)this + 224) &= 0xF0u;
  v15 = *((_WORD *)this + 116);
  *((_WORD *)this + 116) = v15 & 0xFFC0;
  v16 = *(unsigned __int8 *)(a2 + 280);
  if (*(_BYTE *)(a2 + 280))
    v16 = *(unsigned __int8 *)(a2 + 259) << 6;
  v17 = v16 | v15 & 0xFF80;
  *((_WORD *)this + 116) = v17;
  v18 = *(unsigned __int8 *)(a2 + 280);
  if (*(_BYTE *)(a2 + 280))
    v18 = *(unsigned __int8 *)(a2 + 262) << 7;
  v19 = v18 | v17 & 0xFF40;
  *((_WORD *)this + 116) = v19;
  v20 = *(unsigned __int8 *)(a2 + 280);
  if (*(_BYTE *)(a2 + 280))
    v20 = *(_BYTE *)(a2 + 258) & 3;
  v21 = v19 & 0xFCC0 | (v20 << 8);
  *((_WORD *)this + 116) = v21;
  v22 = *(unsigned __int8 *)(a2 + 280);
  if (*(_BYTE *)(a2 + 280))
    v22 = *(_BYTE *)(a2 + 256) & 0xF;
  *((_WORD *)this + 116) = v21 & 0xC3C0 | (v22 << 10);
  if (*(_BYTE *)(a2 + 280))
    v23 = *(_BYTE *)(a2 + 257) & 7;
  else
    v23 = 2;
  *((_BYTE *)this + 234) = *((_BYTE *)this + 234) & 0xF8 | v23;
  return this;
}

uint64_t WTF::Box<WebCore::NetworkLoadMetrics>::create<WebCore::NetworkLoadMetrics&>(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;

  result = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)result = 1;
  v5 = *a2;
  *(_OWORD *)(result + 24) = a2[1];
  *(_OWORD *)(result + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(_QWORD *)(result + 88) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(result + 72) = v8;
  *(_OWORD *)(result + 56) = v7;
  *(_OWORD *)(result + 40) = v6;
  v9 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(result + 96) = v9;
  v10 = a2[6];
  *(_QWORD *)(result + 120) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(result + 104) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v11)
    ++*v11;
  *(_QWORD *)(result + 128) = v11;
  *a1 = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontWeightAbsoluteRange@<X0>(__int128 **this@<X0>, int **a2@<X8>)
{
  uint64_t result;
  WebCore::CSSParserTokenRange *v6;
  WebCore::CSSParserTokenRange *v7;
  uint64_t v8;
  int *v10;
  char v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int *v15;
  char v16;
  int v17;
  int *v18;

  *(double *)&result = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90,(WebCore::CSSValueID)91>((uint64_t)this, &v18));
  if (v18)
  {
    *a2 = v18;
    return result;
  }
  *(double *)&result = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::consumeFontWeightNumberRaw(this, v6));
  if (!(_BYTE)v7)
  {
    v10 = 0;
LABEL_18:
    *a2 = v10;
    return result;
  }
  v8 = result;
  if ((int)*(double *)&result <= 0xFF
    && result == COERCE__INT64((double)(int)*(double *)&result))
  {
    v10 = &WebCore::staticCSSValuePool[4 * (int)*(double *)&result + 2064];
    *v10 += 2;
  }
  else
  {
    *(double *)&result = COERCE_DOUBLE(WTF::fastCompactMalloc((WTF *)0x10));
    v10 = (int *)result;
    *(_DWORD *)result = 2;
    v11 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 1;
    *(_BYTE *)(result + 6) = v11 & 0xFC;
    *(_QWORD *)(result + 8) = v8;
  }
  if (*this == this[1])
    goto LABEL_18;
  *(double *)&result = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::consumeFontWeightNumberRaw(this, v7));
  if ((_BYTE)v12)
  {
    v13 = result;
    if ((int)*(double *)&result <= 0xFF
      && result == COERCE__INT64((double)(int)*(double *)&result))
    {
      v15 = &WebCore::staticCSSValuePool[4 * (int)*(double *)&result + 2064];
      *v15 += 2;
    }
    else
    {
      v15 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v15 = 2;
      v16 = *((_BYTE *)v15 + 6);
      *((_WORD *)v15 + 2) = 1;
      *((_BYTE *)v15 + 6) = v16 & 0xFC;
      *((_QWORD *)v15 + 1) = v13;
    }
    *(double *)&result = COERCE_DOUBLE(WTF::fastCompactMalloc((WTF *)0x38));
    *(_DWORD *)result = 2;
    v17 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
    *(_DWORD *)(result + 8) = 2;
    *(_WORD *)(result + 4) = -10240;
    *(_BYTE *)(result + 6) = BYTE2(v17) | 1;
    *(_QWORD *)(result + 16) = v10;
    *(_QWORD *)(result + 24) = v15;
    *a2 = (int *)result;
  }
  else
  {
    *a2 = 0;
    if (*v10 == 2)
      *(double *)&result = COERCE_DOUBLE(WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v12));
    else
      *v10 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFontWeightNumberRaw(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v3;
  __int128 *v4;
  double v5;
  double v6;
  __int128 *v7;
  __int128 *v8;
  char v9;
  unsigned int v10;
  void *v12;
  WebCore::CSSCalcValue *v13;
  uint64_t v14;
  void *v15;
  char v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  WebCore::CSSCalcValue *v21;
  uint64_t v22;
  WebCore::CSSCalcValue *v23;
  __int128 v24;

  v4 = *this;
  v3 = this[1];
  if (*this >= v3)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v5 = 0.0;
  if ((*(_DWORD *)v4 & 0x3F) == 7)
  {
    v6 = *((double *)v4 + 2);
    if (v6 >= 1.0 && v6 <= 1000.0)
    {
      v7 = *this;
      if (*this == v3)
      {
        v9 = 1;
        {
          v8 = v3;
        }
        else
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v8 = *this;
        }
      }
      else
      {
        v8 = (__int128 *)((char *)v7 + 24);
        *this = (__int128 *)((char *)v7 + 24);
      }
      while (1)
      {
        if (v8 < v3 || (v9 & 1) != 0)
        {
          if (v8 >= v3)
            v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v10 = *(_DWORD *)v8;
        }
        else
        {
          v10 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
          v9 = 1;
        }
        if ((v10 & 0x3F) != 0x10)
          break;
        v8 = (__int128 *)((char *)*this + 24);
        *this = v8;
      }
      v5 = v6;
    }
  }
  else if ((*(_DWORD *)v4 & 0x3F) == 1)
  {
    v24 = *(_OWORD *)this;
    v22 = 0;
    WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v24, 0, &v22, 0, &v23);
    if (v22)
      WTF::fastFree((WTF *)(v22 - 16), v12);
    v13 = v23;
    if (v23)
    {
      *(_OWORD *)this = v24;
      *(_DWORD *)v13 += 2;
      v21 = v13;
      v23 = 0;
      *(_QWORD *)&v24 = v13;
      DWORD2(v24) = 1;
      *(double *)&v14 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::resolve((uint64_t)&v24, (uint64_t)&v23));
      v16 = (char)v15;
      if (v23)
      {
        v20 = v14;
        WTF::fastFree((WebCore::CSSCalcValue *)((char *)v23 - 16), v15);
        v14 = v20;
      }
      v17 = *(double *)&v14;
      if (DWORD2(v24) != -1)
        ((void (*)(WebCore::CSSCalcValue **, __int128 *))off_1E339DD00[DWORD2(v24)])(&v23, &v24);
      v18 = 1000.0;
      if (v17 <= 1000.0)
        v18 = v17;
      if (v17 < 1.0)
        v18 = 1.0;
      v5 = 0.0;
      if (v16)
        v5 = v18;
      if (*(_DWORD *)v21 == 2)
      {
        v19 = v5;
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)v15);
        v5 = v19;
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    else
    {
      v5 = 0.0;
    }
  }
  return *(_QWORD *)&v5;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90,(WebCore::CSSValueID)91>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((result & 0xFFFE) != 0x5A)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)v2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1942C4F98);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

uint64_t WebCore::Page::setUnobscuredSafeAreaInsets(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  float v5;
  float v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = result;
  v3 = 0;
  v4 = (_OWORD *)(result + 408);
  do
  {
    v5 = *(float *)((char *)v4 + v3);
    v6 = *(float *)((char *)a2 + v3);
    v7 = v5 != v6 || v3 == 12;
    v3 += 4;
  }
  while (!v7);
  if (v5 != v6)
  {
    *v4 = *a2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E34012B8;
    v16 = v8;
    v9 = *(_QWORD *)(v2 + 160);
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    WebCore::Page::forEachDocumentFromMainFrame(v9, &v16);
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v10;
      v17 = v14;
      WTF::ensureOnMainThread();
      v15 = v17;
      v17 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    result = (uint64_t)v16;
    if (v16)
      return (*(uint64_t (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return result;
}

WebCore::CSSComputedStyleDeclaration *WebCore::CSSComputedStyleDeclaration::deref(WebCore::CSSComputedStyleDeclaration *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::CSSComputedStyleDeclaration::~CSSComputedStyleDeclaration(this, a2);
    return (WebCore::CSSComputedStyleDeclaration *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::EventLoopTaskGroup::queueMicrotask(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (*(_BYTE *)(result + 40) != 3)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
    {
      v4 = *(_DWORD **)(v3 + 8);
      if (v4)
      {
        ++v4[2];
        v6 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v6 = off_1E33A0990;
        *(_BYTE *)(v6 + 8) = 10;
        v7 = *v2;
        if (*v2)
          goto LABEL_25;
        v7 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v7 = 1;
        *(_QWORD *)(v7 + 8) = v2;
        v16 = (unsigned int *)*v2;
        *v2 = v7;
        if (!v16)
          goto LABEL_25;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v15);
        }
        v7 = *v2;
        if (*v2)
        {
LABEL_25:
          do
            v8 = __ldaxr((unsigned int *)v7);
          while (__stlxr(v8 + 1, (unsigned int *)v7));
        }
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)v6 = off_1E33A4C70;
        v9 = *a2;
        *a2 = 0;
        *(_QWORD *)(v6 + 24) = v9;
        v19 = v6;
        v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        v11 = (_QWORD *)(v10 + 8);
        v12 = *(unsigned int *)(v10 + 20);
        if ((_DWORD)v12 == *(_DWORD *)(v10 + 16))
        {
          v13 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v19);
          v12 = *(unsigned int *)(v10 + 20);
          v14 = (uint64_t *)(*(_QWORD *)(v10 + 8) + 8 * v12);
          v6 = *v13;
        }
        else
        {
          v14 = (uint64_t *)(*v11 + 8 * v12);
          v13 = &v19;
        }
        *v13 = 0;
        *v14 = v6;
        *(_DWORD *)(v10 + 20) = v12 + 1;
        if (!*((_BYTE *)v4 + 120))
        {
          *((_BYTE *)v4 + 120) = 1;
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
        }
        result = v19;
        v19 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        if (v4[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        else
          --v4[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentTimelinesController::cacheCurrentTime(WTF::RunLoop *a1, double a2)
{
  WTF::RunLoop *v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t result;
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;

  v2 = a1;
  *((double *)a1 + 9) = a2;
  *((_BYTE *)a1 + 81) = 1;
  v3 = (unsigned int *)**((_QWORD **)a1 + 5);
  if (!v3 || (v4 = atomic_load(v3), v4 == 1))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E3391510;
    v6[1] = WebCore::DocumentTimelinesController::maybeClearCachedCurrentTime;
    v6[2] = 0;
    v6[3] = v2;
    v7 = (uint64_t *)*((_QWORD *)v2 + 5);
    v8 = *v7;
    if (*v7)
      goto LABEL_27;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v7;
    v17 = (unsigned int *)*v7;
    *v7 = v8;
    if (!v17)
      goto LABEL_27;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v5);
    }
    v8 = *v7;
    if (*v7)
    {
LABEL_27:
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
    }
    v10 = WebCore::Document::eventLoop(*((WebCore::Document **)v2 + 6), (WTF::StringImpl *)v5);
    v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v11 = &off_1E3391560;
    *((_QWORD *)v11 + 1) = v8;
    *((_QWORD *)v11 + 2) = v6;
    v20 = v11;
    WebCore::EventLoopTaskGroup::queueTask(v10, 25, (uint64_t *)&v20);
    a1 = (WTF::RunLoop *)v20;
    v20 = 0;
    if (a1)
      a1 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)a1 + 8))(a1);
  }
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v15 = (uint64_t)v20;
    WebCore::g_commonVMOrNull = (uint64_t)v20;
    if (__ldaxr(v20 + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, v20 + 274))
    {
      goto LABEL_14;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v15 + 192));
LABEL_14:
    if (webThreadStarted == 1)
      *(_BYTE *)(*(_QWORD *)(v15 + 112) + 5) = 1;
    WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v15 + 584));
    WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v15, 0);
  }
  v12 = *((_QWORD *)v2 + 6);
  *(_DWORD *)(v12 + 24) += 2;
  v13 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = &off_1E3391538;
  *((_QWORD *)v13 + 1) = v2;
  *((_QWORD *)v13 + 2) = v12;
  v20 = v13;
  JSC::VM::whenIdle();
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::HTMLScriptRunner::executeParsingBlockingScripts(WebCore::HTMLScriptRunner *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Document *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  void *v23;
  int v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  for (i = *((_QWORD *)this + 2); i; i = *((_QWORD *)this + 2))
  {
    if (!*(_QWORD *)this)
      break;
    v3 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (!v3)
      break;
    if (WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v3 + 1328)))
    {
      v24 = *(unsigned __int8 *)(v3 + 3379);
      *((_BYTE *)this + 60) = v24 ^ 1;
      if (!v24)
        return;
    }
    else
    {
      *((_BYTE *)this + 60) = 0;
    }
    v4 = *(_QWORD *)(i + 40);
    if (v4)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4))
        break;
    }
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
    v26 = 0;
    v27 = 0uLL;
    v28 = 257;
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    memset(v32, 0, 15);
    v33 = (unint64_t)WebCore::SegmentedString::advanceEmpty;
    v35 = 0;
    v34 = (unint64_t)WebCore::SegmentedString::advanceEmpty;
    LODWORD(v35) = *(_DWORD *)(v6 + 76);
    v7 = *(_DWORD *)(v6 + 8);
    v25 = (_DWORD *)v6;
    HIDWORD(v35) = v7 + *(_DWORD *)(v6 + 68) - (*(_DWORD *)(v6 + 12) + *(_DWORD *)(v6 + 72));
    v8 = *(WTF::StringImpl **)v6;
    *(_QWORD *)v6 = 0;
    v9 = v26;
    v26 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v5);
        v10 = v29;
      }
      else
      {
        v10 = 0;
        *(_DWORD *)v9 -= 2;
      }
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_OWORD *)(v6 + 8);
    v28 = *(_WORD *)(v6 + 24);
    v27 = v11;
    *(_QWORD *)&v29 = *(_QWORD *)(v6 + 32);
    *(_QWORD *)(v6 + 32) = v10;
    v12 = *((_QWORD *)&v29 + 1);
    *((_QWORD *)&v29 + 1) = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v12;
    v13 = v30;
    *(_QWORD *)&v30 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = v13;
    LODWORD(v13) = DWORD2(v30);
    DWORD2(v30) = *(_DWORD *)(v6 + 56);
    *(_DWORD *)(v6 + 56) = v13;
    v31 = *(_BYTE *)(v6 + 64);
    LOWORD(v32[0]) = *(_WORD *)(v6 + 66);
    *(_QWORD *)((char *)v32 + 2) = *(_QWORD *)(v6 + 68);
    *(_DWORD *)((char *)&v32[1] + 2) = *(_DWORD *)(v6 + 76);
    BYTE6(v32[1]) = *(_BYTE *)(v6 + 80);
    v33 = *(_OWORD *)(v6 + 88);
    v34 = *(_OWORD *)(v6 + 104);
    WebCore::SegmentedString::clear((WebCore::SegmentedString *)v6, v5);
    if (*(_QWORD *)(v6 + 120) == v6)
      *(_QWORD *)(v6 + 120) = &v26;
    v15 = v25;
    v16 = v35;
    v25[18] = v25[17] + v25[2] - (HIDWORD(v35) + v25[3]);
    v15[19] = v16;
    v17 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (*(_QWORD *)(v17 + 40) && *(_QWORD *)(v17 + 48))
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v17);
    LODWORD(v18) = *((_DWORD *)this + 14);
    if (!(_DWORD)v18)
    {
      v18 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v19 = *(WebCore::Document **)(v18 + 8);
        if (v19)
        {
          v20 = WebCore::Document::eventLoop(v19, v14);
          WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v20);
          LODWORD(v18) = *((_DWORD *)this + 14);
        }
        else
        {
          LODWORD(v18) = 0;
        }
      }
    }
    *((_DWORD *)this + 14) = v18 + 1;
    WebCore::ScriptElement::executePendingScript(*(WebCore::ScriptElement **)(v17 + 24), (WebCore::PendingScript *)v17);
    --*((_DWORD *)this + 14);
    if (*(_DWORD *)(v17 + 16) == 1)
    {
      WebCore::PendingScript::~PendingScript((WebCore::PendingScript *)v17, v21);
      WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)(v17 + 16);
    }
    WebCore::InsertionPointRecord::~InsertionPointRecord((WebCore::InsertionPointRecord *)&v25);
  }
}

_QWORD *WebCore::Document::visibilityStateChanged(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t *v40;
  uint64_t *v41;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8202 | (*(_QWORD *)(v4 + 2248) != 0);
  v7 = *(_DWORD **)(v4 + 2248);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v39 = (WTF *)v5;
  WebCore::Document::queueTaskToDispatchEvent(this, (WTF::StringImpl *)0x14, (uint64_t *)&v39);
  if (v39)
  {
    if (*((_DWORD *)v39 + 4) == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
    else
      --*((_DWORD *)v39 + 4);
  }
  WTF::WeakHashSet<WebCore::VisibilityChangeClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v39, (_QWORD **)this + 239);
  v8 = *((_QWORD *)this + 239);
  if (v8)
  {
    v10 = *(unsigned int *)(v8 - 4);
    v9 = (uint64_t *)(v8 + 8 * v10);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v34 = (char *)this + 1912;
  v35 = v9;
  v36 = v9;
  v37 = v9;
  v38 = v8 + 8 * v10;
  WTF::WeakHashSet<WebCore::VisibilityChangeClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v34);
  v12 = v40;
  v13 = v35;
  while (v12 != v13)
  {
    v15 = *v12;
    v14 = v12 + 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 8) + 16))(*(_QWORD *)(v15 + 8));
    v40 = v14;
    if (v14 != v41)
    {
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v41)
        {
          v14 = v41;
          break;
        }
      }
      v40 = v14;
    }
    WTF::WeakHashSet<WebCore::VisibilityChangeClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v39);
    ++*((_DWORD *)v39 + 2);
    v12 = v40;
  }
  {
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager
      && !*(_BYTE *)(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager + 49))
    {
      WebCore::Document::updateCaptureAccordingToMutedState(this);
    }
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  v16 = *((_QWORD *)this + 66);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 24);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
        {
          if (!*((_BYTE *)this + 3437) && (*(_WORD *)(v19 + 658) & 4) != 0)
          {
            v39 = 0;
            v40 = 0;
            v20 = (WTF *)*((_QWORD *)this + 394);
            *((_QWORD *)this + 394) = 0;
            v21 = *((unsigned int *)this + 791);
            *((_QWORD *)this + 395) = 0;
            WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 3152, &v39);
            if (HIDWORD(v40))
            {
              v30 = v39;
              v31 = 8 * HIDWORD(v40);
              do
              {
                v32 = *(_QWORD *)v30;
                v33 = v30;
                *(_QWORD *)v30 = 0;
                if (v32)
                  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
                v30 = (WTF *)((char *)v33 + 8);
                v31 -= 8;
              }
              while (v31);
            }
            v22 = v39;
            if (v39)
            {
              v39 = 0;
              LODWORD(v40) = 0;
              WTF::fastFree(v22, v11);
              if ((_DWORD)v21)
                goto LABEL_34;
            }
            else if ((_DWORD)v21)
            {
LABEL_34:
              v23 = 8 * v21;
              v24 = v23;
              v25 = v20;
              do
              {
                v26 = *(_QWORD *)v25;
                v25 = (WTF *)((char *)v25 + 8);
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
                v24 -= 8;
              }
              while (v24);
              v27 = v20;
              do
              {
                v28 = *(_QWORD *)v27;
                *(_QWORD *)v27 = 0;
                if (v28)
                  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
                v27 = (WTF *)((char *)v27 + 8);
                v23 -= 8;
              }
              while (v23);
            }
            if (v20)
              WTF::fastFree(v20, v11);
          }
        }
      }
    }
  }
  return WebCore::Document::updateServiceWorkerClientData(this, (WTF::StringImpl *)v11);
}

unsigned int *WebCore::EventLoopTaskGroup::queueTask(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  void (**v15)(WebCore::EventLoopFunctionDispatchTask *__hidden);
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = off_1E33A0990;
  *(_BYTE *)(v6 + 8) = a2;
  result = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
    goto LABEL_27;
  result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *result = 1;
  *((_QWORD *)result + 1) = a1;
  v17 = *(unsigned int **)a1;
  *(_QWORD *)a1 = result;
  if (!v17)
    goto LABEL_27;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  result = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_27:
    do
      v8 = __ldaxr(result);
    while (__stlxr(v8 + 1, result));
  }
  *(_QWORD *)(v6 + 16) = result;
  *(_QWORD *)v6 = off_1E33A4C70;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(v6 + 24) = v9;
  v20 = v6;
  if (*(_BYTE *)(a1 + 40) == 3)
  {
    v20 = 0;
    v15 = off_1E33A4C70;
    return (unsigned int *)((uint64_t (*)(uint64_t))v15[1])(v6);
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(_DWORD **)(v10 + 8);
    if (v11)
    {
      ++v11[2];
      if (!*((_BYTE *)v11 + 120))
      {
        *((_BYTE *)v11 + 120) = 1;
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 24))(v11);
      }
      v12 = v11 + 6;
      v13 = v11[9];
      if ((_DWORD)v13 == v11[8])
      {
        result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v20);
        v13 = v11[9];
        v14 = (uint64_t *)(*((_QWORD *)v11 + 3) + 8 * v13);
        v6 = *(_QWORD *)result;
      }
      else
      {
        v14 = (uint64_t *)(*v12 + 8 * v13);
        result = (unsigned int *)&v20;
      }
      *(_QWORD *)result = 0;
      *v14 = v6;
      v11[9] = v13 + 1;
      if (v11[2] == 1)
        result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
    }
  }
  v6 = v20;
  v20 = 0;
  if (v6)
  {
    v15 = *(void (***)(WebCore::EventLoopFunctionDispatchTask *__hidden))v6;
    return (unsigned int *)((uint64_t (*)(uint64_t))v15[1])(v6);
  }
  return result;
}

void WebCore::HTMLScriptRunner::runScript(uint64_t a1, uint64_t a2, const WebCore::ContainerNode *a3)
{
  WebCore::Document *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  WTF::StringBuilder *v19;
  __n128 v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Document *v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WebCore::Document *v51;
  _DWORD *v52;
  void *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58[5];
  WTF::StringImpl *v59;
  int32x2_t v60[5];
  _DWORD *v61;
  WTF::StringImpl *v62;
  __int128 v63;
  __int16 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  _WORD v68[11];
  __int128 v69;
  __int128 v70;
  int v71;
  int v72;

  if (!*(_DWORD *)(a1 + 56))
  {
    if (*(_QWORD *)a1)
    {
      v6 = *(WebCore::Document **)(*(_QWORD *)a1 + 8);
      if (v6)
      {
        v7 = WebCore::Document::eventLoop(v6, (WTF::StringImpl *)a2);
        WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v7);
      }
    }
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  v62 = 0;
  v63 = 0uLL;
  v64 = 257;
  v67 = 0;
  v66 = 0u;
  v65 = 0u;
  memset(v68, 0, 15);
  *(_QWORD *)&v69 = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)&v69 + 1) = 0;
  *(_QWORD *)&v70 = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)&v70 + 1) = 0;
  v71 = *(_DWORD *)(v9 + 76);
  v10 = *(_DWORD *)(v9 + 8);
  v61 = (_DWORD *)v9;
  v72 = v10 + *(_DWORD *)(v9 + 68) - (*(_DWORD *)(v9 + 12) + *(_DWORD *)(v9 + 72));
  v11 = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = 0;
  v12 = v62;
  v62 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
      v13 = DWORD2(v66);
      goto LABEL_8;
    }
    WTF::StringImpl::destroy(v12, v8);
  }
  v13 = 0;
LABEL_8:
  v14 = *(_OWORD *)(v9 + 8);
  v64 = *(_WORD *)(v9 + 24);
  v63 = v14;
  *(_QWORD *)&v65 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = 0;
  v15 = *((_QWORD *)&v65 + 1);
  *((_QWORD *)&v65 + 1) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v15;
  v16 = v66;
  *(_QWORD *)&v66 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 48) = v16;
  DWORD2(v66) = *(_DWORD *)(v9 + 56);
  *(_DWORD *)(v9 + 56) = v13;
  v67 = *(_BYTE *)(v9 + 64);
  v68[0] = *(_WORD *)(v9 + 66);
  *(_QWORD *)&v68[1] = *(_QWORD *)(v9 + 68);
  *(_DWORD *)&v68[5] = *(_DWORD *)(v9 + 76);
  LOBYTE(v68[7]) = *(_BYTE *)(v9 + 80);
  v69 = *(_OWORD *)(v9 + 88);
  v70 = *(_OWORD *)(v9 + 104);
  WebCore::SegmentedString::clear((WebCore::SegmentedString *)v9, v8);
  if (*(_QWORD *)(v9 + 120) == v9)
    *(_QWORD *)(v9 + 120) = &v62;
  v17 = v61;
  v18 = v71;
  v61[18] = v61[17] + v61[2] - (v72 + v61[3]);
  v17[19] = v18;
  ++*(_DWORD *)(a1 + 56);
  WebCore::ScriptElement::prepareScript(a2, a3);
  v21 = *(_WORD *)(a2 + 21);
  if ((v21 & 0x20) == 0)
    goto LABEL_11;
  if ((v21 & 0x80) == 0)
  {
    if ((v21 & 0x40) != 0)
    {
      if (*(_DWORD *)(a1 + 56) == 1)
      {
        v38 = *(_QWORD *)a3;
        v39 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v39 + 16) = 1;
        *(_QWORD *)v39 = off_1E33A6698;
        *(_QWORD *)(v39 + 8) = 0;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 24) += 2;
        *(_QWORD *)(v39 + 24) = a2;
        *(_QWORD *)(v39 + 32) = v38;
        *(_QWORD *)(v39 + 40) = 0;
        *(_QWORD *)(v39 + 48) = 0;
        v41 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;
        if (v41)
          WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v41 + 16), v40);
      }
      else
      {
        if ((*(_WORD *)(a2 + 21) & 0x1800) != 0)
        {
          WebCore::Node::textContent(*(WebCore::Node **)(*(_QWORD *)(a2 + 8) + 8), 0, v19, &v59, v20);
          v44 = *(unsigned __int8 *)(a2 + 20);
          if (*(_QWORD *)a1)
            v45 = *(WebCore::Document **)(*(_QWORD *)a1 + 8);
          else
            v45 = 0;
          WebCore::documentURLForScriptExecution((uint64_t)v58, v45);
          WebCore::ScriptSourceCode::ScriptSourceCode(v60, (_DWORD **)&v59, v44, v58, (int32x2_t *)a3);
          WebCore::ScriptElement::registerImportMap((_QWORD *)a2, (const WebCore::ScriptSourceCode *)v60);
          WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)v60, v46);
        }
        else
        {
          WebCore::Node::textContent(*(WebCore::Node **)(*(_QWORD *)(a2 + 8) + 8), 0, v19, &v59, v20);
          v50 = *(unsigned __int8 *)(a2 + 20);
          if (*(_QWORD *)a1)
            v51 = *(WebCore::Document **)(*(_QWORD *)a1 + 8);
          else
            v51 = 0;
          WebCore::documentURLForScriptExecution((uint64_t)v58, v51);
          WebCore::InlineClassicScript::create((WebCore::InlineClassicScript *)a2, &v56);
          v52 = v56;
          v56 = 0;
          v57 = v52;
          WebCore::ScriptSourceCode::ScriptSourceCode(v60, (_DWORD **)&v59, v50, v58, (int32x2_t *)a3, 0, &v57);
          WebCore::ScriptElement::executeClassicScript(a2, (uint64_t)v60);
          WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)v60, v53);
          v54 = v57;
          v57 = 0;
          if (v54)
          {
            if (v54[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
            else
              --v54[2];
          }
          v55 = v56;
          v56 = 0;
          if (v55)
          {
            if (v55[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
            else
              --v55[2];
          }
        }
        v48 = v58[0];
        v58[0] = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v47);
          else
            *(_DWORD *)v48 -= 2;
        }
        v49 = v59;
        v59 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v47);
          else
            *(_DWORD *)v49 -= 2;
        }
      }
      goto LABEL_11;
    }
    WebCore::PendingScript::create((WebCore::PendingScript *)a2, *(WebCore::ScriptElement **)(a2 + 40), (uint64_t *)v60);
    v22 = (_QWORD *)v60[0];
    v23 = *(_QWORD *)(a1 + 16);
    *(int32x2_t *)(a1 + 16) = v60[0];
    if (v23)
    {
      WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v23 + 16), v22);
      v22 = *(_QWORD **)(a1 + 16);
    }
    v24 = v22[5];
    if (v24)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24) & 1) != 0)
      {
LABEL_11:
        --*(_DWORD *)(a1 + 56);
        WebCore::InsertionPointRecord::~InsertionPointRecord((WebCore::InsertionPointRecord *)&v61);
        return;
      }
      v22 = *(_QWORD **)(a1 + 16);
    }
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v22);
    goto LABEL_11;
  }
  WebCore::PendingScript::create((WebCore::PendingScript *)a2, *(WebCore::ScriptElement **)(a2 + 40), (uint64_t *)v60);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 32);
  if (v25)
  {
    if (v26 + 1 == v25)
    {
      LODWORD(v27) = *(_DWORD *)(a1 + 48);
      goto LABEL_25;
    }
LABEL_31:
    v36 = *(_QWORD *)(a1 + 32);
    *(int32x2_t *)(*(_QWORD *)(a1 + 40) + 8 * v36) = v60[0];
    if (v36 == *(unsigned int *)(a1 + 48) - 1)
      v37 = 0;
    else
      v37 = v36 + 1;
    *(_QWORD *)(a1 + 32) = v37;
    goto LABEL_11;
  }
  v27 = *(unsigned int *)(a1 + 48);
  if (!v26)
  {
    if (!(_DWORD)v27)
      goto LABEL_25;
    goto LABEL_31;
  }
  if (v26 != v27 - 1)
    goto LABEL_31;
LABEL_25:
  v28 = v27;
  v29 = ((unint64_t)v27 >> 2) + v27;
  if (v29 <= 0xF)
    v29 = 15;
  if (v29 < 0x1FFFFFFF)
  {
    v30 = *(char **)(a1 + 40);
    v31 = v29 + 1;
    v32 = (char *)WTF::fastMalloc((WTF *)(8 * (v29 + 1)));
    *(_DWORD *)(a1 + 48) = v31;
    *(_QWORD *)(a1 + 40) = v32;
    v34 = *(_QWORD *)(a1 + 24);
    v33 = *(_QWORD *)(a1 + 32);
    if (v34 > v33)
    {
      memcpy(v32, v30, 8 * v33);
      v42 = *(_QWORD *)(a1 + 24);
      v43 = v42 - v28 + *(unsigned int *)(a1 + 48);
      memcpy((void *)(*(_QWORD *)(a1 + 40) + 8 * v43), &v30[8 * v42], 8 * v28 - 8 * v42);
      *(_QWORD *)(a1 + 24) = v43;
    }
    else
    {
      memcpy(&v32[8 * v34], &v30[8 * v34], 8 * v33 - 8 * v34);
    }
    if (v30)
    {
      if (*(char **)(a1 + 40) == v30)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
      }
      WTF::fastFree((WTF *)v30, v35);
    }
    goto LABEL_31;
  }
  __break(0xC471u);
}

uint64_t WebCore::Document::eventLoop(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  WebCore::EventLoopTaskGroup *v13;
  uint64_t v14;
  WebCore::WindowEventLoop *v15;
  WebCore::WindowEventLoop *v16;
  WebCore::WindowEventLoop *v17;
  int v18;
  WebCore::WindowEventLoop *v19[3];

  if (*((_QWORD *)this + 369))
    return *((_QWORD *)this + 369);
  v4 = *((_QWORD *)this + 368);
  if (!v4)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v15, v19);
    v16 = v19[0];
    v19[0] = 0;
    v17 = (WebCore::WindowEventLoop *)*((_QWORD *)this + 368);
    *((_QWORD *)this + 368) = v16;
    if (v17)
    {
      v18 = *((_DWORD *)v17 + 2) - 1;
      if (*((_DWORD *)v17 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v17 + 8))(v17);
        v17 = v19[0];
        v19[0] = 0;
        if (!v17)
          goto LABEL_21;
        v18 = *((_DWORD *)v17 + 2) - 1;
        if (*((_DWORD *)v17 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v17 + 8))(v17);
          goto LABEL_21;
        }
      }
      *((_DWORD *)v17 + 2) = v18;
    }
LABEL_21:
    WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*((_QWORD *)this + 368) + 104, (_QWORD *)this + 24, (uint64_t)v19);
    v4 = *((_QWORD *)this + 368);
  }
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
    goto LABEL_28;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v4;
  v8 = *(unsigned int **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v6;
  if (!v8)
    goto LABEL_28;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
LABEL_28:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = v6;
  *(_BYTE *)(v5 + 40) = 0;
  WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTaskGroup>(v4 + 72, (uint64_t *)v5, (uint64_t)v19);
  v13 = (WebCore::EventLoopTaskGroup *)*((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = v5;
  if (v13)
  {
    WebCore::EventLoopTaskGroup::~EventLoopTaskGroup(v13, v12);
    if (*(_DWORD *)(v14 + 8))
    {
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)v14 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v14, v12);
    }
  }
  if (*((_BYTE *)this + 468))
  {
    WebCore::EventLoopTaskGroup::markAsReadyToStop(*((WebCore::EventLoopTaskGroup **)this + 369), v12);
  }
  else if (*((_BYTE *)this + 467))
  {
    WebCore::EventLoopTaskGroup::suspend(*((WebCore::EventLoopTaskGroup **)this + 369));
  }
  return *((_QWORD *)this + 369);
}

uint64_t WebCore::EventLoop::run(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BOOL4 v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  WTF **v50;
  _BYTE v51[24];
  WTF *v52;
  uint64_t v53;

  v3 = a1;
  *(_BYTE *)(a1 + 120) = 0;
  v4 = *(unsigned int *)(a1 + 36);
  if (!(_DWORD)v4)
    goto LABEL_29;
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v50 = (WTF **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 88) = 0;
    v30 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v32 = *(unsigned int **)(v7 + 8 * i);
        if (v32 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, a2);
            }
          }
        }
      }
    }
    a1 = WTF::fastFree((WTF *)(v7 - 16), a2);
    v9 = *(_QWORD *)(v3 + 88);
    *(_DWORD *)(v3 + 96) = 0;
    if (v9)
    {
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
      if (v9 > 0x7FFFFFFE)
        LODWORD(v9) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v9) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  v10 = 0;
  v11 = 0;
  LOBYTE(v12) = 0;
  *(_DWORD *)(v3 + 100) = 2 * v9;
  v13 = *(double *)&a2;
  v52 = 0;
  v53 = 0;
  v14 = a3;
  v15 = 8 * v4;
  do
  {
    v16 = (_QWORD *)((char *)v8 + v10);
    v17 = *(_QWORD *)(*(_QWORD *)((char *)v8 + v10) + 16);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(unsigned __int8 *)(v18 + 40);
        if (v19 != 3)
        {
          if (v12)
          {
            LOBYTE(v12) = 1;
          }
          else
          {
            if (v14)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
              v12 = v20 > v13;
              v19 = *(unsigned __int8 *)(v18 + 40);
            }
            else
            {
              v12 = 0;
            }
            if (v19 != 1 && !v12)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 16))(*v16);
              v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
              a1 = WebCore::MicrotaskQueue::performMicrotaskCheckpoint(v22);
              LOBYTE(v12) = 0;
              v11 = 1;
              goto LABEL_17;
            }
          }
          a1 = (uint64_t)WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTaskGroup>(v3 + 88, (uint64_t *)v18, (uint64_t)v51);
          v43 = HIDWORD(v53);
          if (HIDWORD(v53) == (_DWORD)v53)
          {
            a1 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)v8 + v10);
            v43 = HIDWORD(v53);
            v44 = HIDWORD(v53) + 1;
            v45 = v52;
            v46 = *(_QWORD *)a1;
            *(_QWORD *)a1 = 0;
          }
          else
          {
            v44 = HIDWORD(v53) + 1;
            v45 = v52;
            v46 = *v16;
            *v16 = 0;
          }
          *((_QWORD *)v45 + v43) = v46;
          HIDWORD(v53) = v44;
        }
      }
    }
LABEL_17:
    v10 += 8;
  }
  while (v15 != v10);
  v23 = *(WTF **)(v3 + 24);
  v24 = *(unsigned int *)(v3 + 36);
  if ((_DWORD)v24)
  {
    v35 = HIDWORD(v53);
    v36 = 8 * v24;
    do
    {
      if (v35 == (_DWORD)v53)
      {
        v37 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, v35 + 1, (unint64_t)v23);
        v35 = HIDWORD(v53);
        v38 = (char *)v52 + 8 * HIDWORD(v53);
      }
      else
      {
        v38 = (char *)v52 + 8 * v35;
        v37 = (uint64_t *)v23;
      }
      v39 = *v37;
      *v37 = 0;
      *(_QWORD *)v38 = v39;
      HIDWORD(v53) = ++v35;
      v23 = (WTF *)((char *)v23 + 8);
      v36 -= 8;
    }
    while (v36);
    v40 = *(unsigned int *)(v3 + 36);
    v23 = *(WTF **)(v3 + 24);
    if ((_DWORD)v40)
    {
      v41 = 8 * v40;
      do
      {
        v42 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        v23 = (WTF *)((char *)v23 + 8);
        v41 -= 8;
      }
      while (v41);
      v23 = *v50;
    }
  }
  if (v23)
  {
    *(_QWORD *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 32) = 0;
    WTF::fastFree(v23, a2);
  }
  *(_QWORD *)(v3 + 24) = v52;
  v25 = v53;
  v26 = HIDWORD(v53);
  v52 = 0;
  v53 = 0;
  *(_DWORD *)(v3 + 32) = v25;
  *(_DWORD *)(v3 + 36) = v26;
  if (v26 != 0 && v12 && !*(_BYTE *)(v3 + 120))
  {
    *(_BYTE *)(v3 + 120) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v47 = v52;
    if (HIDWORD(v53))
    {
      v48 = 8 * HIDWORD(v53);
      do
      {
        v49 = *(_QWORD *)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        v47 = (WTF *)((char *)v47 + 8);
        v48 -= 8;
      }
      while (v48);
      v47 = v52;
    }
    if (v47)
    {
      v52 = 0;
      LODWORD(v53) = 0;
      WTF::fastFree(v47, a2);
    }
  }
  v27 = 0;
  do
  {
    result = *(_QWORD *)((char *)v8 + v27);
    *(_QWORD *)((char *)v8 + v27) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v27 += 8;
  }
  while (v15 != v27);
  if (v8)
    result = WTF::fastFree(v8, a2);
  if ((v11 & 1) == 0)
  {
LABEL_29:
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return WebCore::MicrotaskQueue::performMicrotaskCheckpoint(v29);
  }
  return result;
}

uint64_t WebCore::EventLoopFunctionDispatchTask::execute(WebCore::EventLoopFunctionDispatchTask *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

_QWORD *WebCore::WindowEventLoop::microtaskQueue(WebCore::WindowEventLoop *this)
{
  _QWORD *v1;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WebCore::MicrotaskQueue *v12;
  WTF *v13;
  void *v14;
  _QWORD *v15;
  unsigned int *v16;

  v1 = (_QWORD *)*((_QWORD *)this + 25);
  if (!v1)
  {
    v16 = (unsigned int *)WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v16 = (unsigned int *)WebCore::commonVMSlow(this);
    v4 = WTF::fastMalloc((WTF *)0x38);
    *(_BYTE *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    do
      v6 = __ldaxr(v16);
    while (__stlxr(v6 + 1, v16));
    v15 = (_QWORD *)v4;
    *(_QWORD *)(v4 + 24) = v16;
    v7 = *((_QWORD *)this + 2);
    if (v7)
      goto LABEL_18;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = this;
    v8 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (!v8)
      goto LABEL_18;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
    v7 = *((_QWORD *)this + 2);
    if (v7)
    {
LABEL_18:
      do
        v11 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v11 + 1, (unsigned int *)v7));
    }
    v1 = v15;
    v15[5] = 0;
    v15[6] = 0;
    v15[4] = v7;
    v12 = (WebCore::MicrotaskQueue *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v15;
    if (v12)
    {
      WebCore::MicrotaskQueue::~MicrotaskQueue(v12, v5);
      WTF::fastFree(v13, v14);
      return (_QWORD *)*((_QWORD *)this + 25);
    }
  }
  return v1;
}

uint64_t WebCore::MicrotaskQueue::performMicrotaskCheckpoint(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  unsigned int v5;
  _QWORD *v6;
  WTF **v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;
  uint64_t v57;
  char v58[8];

  if (*(_BYTE *)this)
    return this;
  v1 = this;
  *(_BYTE *)this = 1;
  v2 = *(_QWORD *)(this + 24);
  v3 = (_QWORD *)(v2 + 93432);
  v4 = (_BYTE *)(v2 + 41452);
  do
    v5 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v5 + 1, (unsigned int *)v2));
  MEMORY[0x19AEA3294](v58, v2);
  v56 = 0;
  v57 = 0;
  v7 = (WTF **)(v1 + 8);
LABEL_5:
  v8 = *(unsigned int *)(v1 + 20);
  if ((_DWORD)v8)
  {
    if (!*(_BYTE *)(v2 + 93442))
    {
      v9 = 0;
      v10 = *v7;
      v11 = 8 * v8;
      *v7 = 0;
      *(_QWORD *)(v1 + 16) = 0;
      while (1)
      {
        v6 = (_QWORD *)((char *)v10 + v9);
        v12 = *(_QWORD **)((char *)v10 + v9);
        v13 = v12[2];
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v15 = *(unsigned __int8 *)(v14 + 40);
            if (v15 != 3)
            {
              if (v15 == 1)
              {
                v52 = HIDWORD(v57);
                if (HIDWORD(v57) == (_DWORD)v57)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v56, (unint64_t)v6);
                }
                else
                {
                  v53 = v56;
                  *v6 = 0;
                  *((_QWORD *)v53 + v52) = v12;
                  HIDWORD(v57) = v52 + 1;
                }
              }
              else
              {
                (*(void (**)(_QWORD *))(*v12 + 16))(v12);
                v16 = *(_QWORD *)(v2 + 16);
                if (v16 && *(_QWORD *)(v2 + 24) == v16)
                {
LABEL_15:
                  v17 = 0;
                  do
                  {
                    v18 = *(_QWORD *)((char *)v10 + v17);
                    *(_QWORD *)((char *)v10 + v17) = 0;
                    if (v18)
                      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                    v17 += 8;
                  }
                  while (v11 != v17);
                  if (v10)
                    WTF::fastFree(v10, v6);
                  goto LABEL_5;
                }
                JSC::VM::clearException((JSC::VM *)v2);
              }
            }
          }
        }
        v9 += 8;
        if (v11 == v9)
          goto LABEL_15;
      }
    }
    ++*v3;
    *v4 = 0;
    v35 = *v7;
    v36 = 8 * v8;
    do
    {
      v37 = *(_QWORD *)v35;
      *(_QWORD *)v35 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v35 = (WTF *)((char *)v35 + 8);
      v36 -= 8;
    }
    while (v36);
  }
  else
  {
    ++*v3;
    *v4 = 0;
  }
  v19 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 8) = 0;
    *(_DWORD *)(v1 + 16) = 0;
    WTF::fastFree(v19, v6);
  }
  *(_QWORD *)(v1 + 8) = v56;
  v20 = v57;
  v56 = 0;
  v57 = 0;
  *(_QWORD *)(v1 + 16) = v20;
  if (*(_BYTE *)(v2 + 93442))
    goto LABEL_28;
  v21 = *(WTF **)(v1 + 40);
  v22 = *(unsigned int *)(v1 + 52);
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  if (!(_DWORD)v22)
    goto LABEL_26;
  v40 = 8 * v22;
  v41 = 8 * v22;
  v42 = v21;
  v43 = (unint64_t)v21;
  do
  {
    v44 = *(_QWORD *)v43;
    v45 = *(_QWORD *)(*(_QWORD *)v43 + 16);
    if (!v45)
      goto LABEL_63;
    v46 = *(_QWORD *)(v45 + 8);
    if (!v46)
      goto LABEL_63;
    v47 = *(unsigned __int8 *)(v46 + 40);
    if (v47 == 3)
      goto LABEL_63;
    if (v47 == 1)
    {
      v48 = *(unsigned int *)(v1 + 52);
      if ((_DWORD)v48 == *(_DWORD *)(v1 + 48))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(v1 + 40, v43);
      }
      else
      {
        v54 = *(_QWORD *)(v1 + 40);
        *(_QWORD *)v43 = 0;
        *(_QWORD *)(v54 + 8 * v48) = v44;
        *(_DWORD *)(v1 + 52) = v48 + 1;
      }
      goto LABEL_63;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
    v49 = *(_QWORD *)(v2 + 16);
    if (v49)
    {
      if (*(_QWORD *)(v2 + 24) == v49)
        break;
    }
    JSC::VM::clearException((JSC::VM *)v2);
LABEL_63:
    v43 += 8;
    v41 -= 8;
  }
  while (v41);
  v50 = v42;
  do
  {
    v51 = *(_QWORD *)v50;
    *(_QWORD *)v50 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v50 = (WTF *)((char *)v50 + 8);
    v40 -= 8;
    v21 = v42;
  }
  while (v40);
LABEL_26:
  if (v21)
    WTF::fastFree(v21, v6);
LABEL_28:
  v23 = *(_QWORD *)(v1 + 32);
  if (v23)
    v24 = *(_QWORD *)(v23 + 8);
  else
    v24 = 0;
  ++*(_DWORD *)(v24 + 8);
  do
    v25 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v25 + 1, (unsigned int *)v2));
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = &off_1E33A5A30;
  v26[1] = v2;
  v55 = v26;
  WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((_QWORD *)(v24 + 104), &v55);
  v28 = v55;
  v55 = 0;
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  if (*(_DWORD *)(v24 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  else
    --*(_DWORD *)(v24 + 8);
  if (HIDWORD(v57))
  {
    v29 = v56;
    v30 = 8 * HIDWORD(v57);
    do
    {
      v31 = *(_QWORD *)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  v32 = v56;
  if (v56)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    WTF::fastFree(v32, v27);
  }
  this = MEMORY[0x19AEA32A0](v58);
  do
  {
    v33 = __ldaxr((unsigned int *)v2);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, (unsigned int *)v2));
  if (!v34)
  {
    atomic_store(1u, (unsigned int *)v2);
    v38 = (WTF *)MEMORY[0x19AEA3AF8](v2);
    this = WTF::fastFree(v38, v39);
  }
  *(_BYTE *)v1 = 0;
  return this;
}

_QWORD *WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  WTF *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int j;
  uint64_t v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;

  if (*result)
  {
    v2 = *(unsigned int *)(*result - 12);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1942C6EECLL);
      }
      v4 = result;
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
      v7 = (_QWORD *)*v4;
      if (*v4 && *((_DWORD *)v7 - 3))
      {
        v8 = *((unsigned int *)v7 - 1);
        if ((_DWORD)v8)
        {
          v9 = 8 * v8;
          for (i = (_QWORD *)*v4; (unint64_t)(*i + 1) <= 1; ++i)
          {
            v9 -= 8;
            if (!v9)
              return (_QWORD *)WTF::fastFree(v6, v5);
          }
        }
        else
        {
          i = (_QWORD *)*v4;
        }
        v11 = &v7[v8];
        if (i != v11)
        {
          v12 = 0;
          v13 = *i;
LABEL_15:
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v33 = i;
            v38 = *(_QWORD *)(v13 + 8);
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
              goto LABEL_53;
            v15 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v15 = 1;
            *(_QWORD *)(v15 + 8) = v38;
            v35 = *(unsigned int **)(v38 + 8);
            *(_QWORD *)(v38 + 8) = v15;
            if (!v35)
              goto LABEL_53;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v5);
            }
            v15 = *(_QWORD *)(v38 + 8);
            if (v15)
            {
LABEL_53:
              do
                v34 = __ldaxr((unsigned int *)v15);
              while (__stlxr(v34 + 1, (unsigned int *)v15));
            }
            i = v33;
          }
          else
          {
            v15 = 0;
          }
          v16 = v12 + 1;
          *((_QWORD *)v6 + v12) = v15;
          while (++i != v11)
          {
            v13 = *i;
            if ((unint64_t)(*i + 1) > 1)
            {
              ++v12;
              if (i != v11)
                goto LABEL_15;
              break;
            }
          }
          if (v16)
          {
            v17 = (_QWORD *)((char *)v6 + 8 * v16);
            v18 = v6;
            do
            {
              v19 = *(_QWORD *)v18;
              if (*(_QWORD *)v18)
              {
                v20 = *(_QWORD *)(v19 + 8);
                if (v20)
                {
                  v21 = (_QWORD *)*v4;
                  if (*v4)
                  {
                    v22 = *((_DWORD *)v21 - 2);
                    v23 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
                    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
                    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
                    v26 = v22 & ((v25 >> 31) ^ v25);
                    for (j = 1; ; ++j)
                    {
                      v28 = v21[v26];
                      if (v28 != -1)
                      {
                        if (!v28)
                          goto LABEL_32;
                        if (v28 == v19)
                          break;
                      }
                      v26 = (v26 + j) & v22;
                    }
                    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v20 - 96);
                  }
                }
              }
LABEL_32:
              v18 = (WTF *)((char *)v18 + 8);
            }
            while (v18 != (WTF *)v17);
            v29 = (unsigned int **)v6;
            do
            {
              v30 = *v29;
              *v29 = 0;
              if (v30)
              {
                do
                {
                  v31 = __ldaxr(v30);
                  v32 = v31 - 1;
                }
                while (__stlxr(v32, v30));
                if (!v32)
                {
                  atomic_store(1u, v30);
                  WTF::fastFree((WTF *)v30, v5);
                }
              }
              ++v29;
            }
            while (v29 != v17);
          }
        }
      }
      return (_QWORD *)WTF::fastFree(v6, v5);
    }
  }
  return result;
}

void WebCore::EventLoopFunctionDispatchTask::~EventLoopFunctionDispatchTask(WebCore::EventLoopFunctionDispatchTask *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E33A4C70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E33A0990;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::fastFree(this, a2);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E33A4C70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E33A0990;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

WTF::StringImpl *WebCore::SegmentedString::clear(WebCore::SegmentedString *this, WTF::StringImpl *a2)
{
  unint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *result;
  unint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v4 = (_QWORD *)((char *)this + 32);
  v3 = *((_QWORD *)this + 4);
  *((_DWORD *)this + 3) = 0;
  v6 = *((_QWORD *)this + 5);
  result = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v3 > v6)
  {
    WTF::VectorTypeOperations<WebCore::SegmentedString::Substring>::destruct(result, (WTF::StringImpl *)((char *)result + 32 * v6));
    WTF::VectorTypeOperations<WebCore::SegmentedString::Substring>::destruct((WTF::StringImpl *)(*((_QWORD *)this + 6) + 32 * *((_QWORD *)this + 4)), (WTF::StringImpl *)(*((_QWORD *)this + 6) + 32 * *((unsigned int *)this + 14)));
  }
  else
  {
    if (v3 == v6)
      goto LABEL_4;
    v7 = (WTF::StringImpl **)((char *)result + 32 * v3);
    v8 = 32 * v6 - 32 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 6);
LABEL_4:
  *v4 = 0;
  v4[1] = 0;
  if (result)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(result, a2);
  }
  *((_BYTE *)this + 64) = 0;
  *(_QWORD *)((char *)this + 66) = 0;
  *(_QWORD *)((char *)this + 73) = 0;
  *((_QWORD *)this + 11) = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)this + 14) = 0;
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::VisibilityChangeClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::WindowEventLoop::scheduleToRun(WebCore::WindowEventLoop *this)
{
  char *v1;
  double v2;

  v1 = (char *)this + 144;
  *((_QWORD *)this + 21) = 0;
  WTF::MonotonicTime::now(this);
  return WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
}

_QWORD *WTF::WeakHashSet<WebCore::VisibilityChangeClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  v6 = *a2;
  if (*a2)
  {
    v8 = *((unsigned int *)v6 - 1);
    v7 = &v6[v8];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  a1[3] = v7;
  a1[4] = &v6[v8];
  return WTF::WeakHashSet<WebCore::VisibilityChangeClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

_QWORD *WebCore::Document::updateServiceWorkerClientData(_QWORD *this, WTF::StringImpl *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  WebCore::SecurityContext *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  _BYTE v28[24];
  int v29;
  _BYTE v30[24];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (_DWORD *)this[370];
  if (v2)
  {
    v3 = this;
    ++v2[2];
    v4 = (WebCore::SecurityContext *)(this + 24);
    v5 = this[49];
    if (v5)
    {
      v20 = *(_QWORD *)(v5 + 64);
      v21 = 1;
    }
    else
    {
      LOBYTE(v20) = 0;
      LOBYTE(v21) = 0;
    }
    WebCore::Document::topOrigin((WebCore::Document *)this, a2);
    v28[0] = 0;
    v29 = -1;
    v8 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E33A33E0[v8])(v22, v28, v6 + 8);
      v29 = v8;
    }
    WebCore::SecurityContext::securityOrigin(v4, v7);
    v30[0] = 0;
    v31 = -1;
    v11 = *(unsigned int *)(v9 + 32);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E33A33E0[v11])(v22, v30, v9 + 8);
      v31 = v11;
    }
    WebCore::ServiceWorkerClientData::from(v4, v10, (uint64_t)v22);
    WebCore::Document::userAgent((WebCore::Document *)v3, (const WTF::URL *)(v3 + 92), (uint64_t *)&v19);
    (*(void (**)(_DWORD *, _BYTE *, _BYTE *, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v2 + 104))(v2, v28, v22, &v20, &v19);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v27)
    {
      v16 = v25;
      v17 = 8 * v27;
      do
      {
        v18 = *(WTF::StringImpl **)v16;
        *(_QWORD *)v16 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v12);
          else
            *(_DWORD *)v18 -= 2;
        }
        v16 = (WTF *)((char *)v16 + 8);
        v17 -= 8;
      }
      while (v17);
    }
    v14 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v14, v12);
    }
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    this = v23;
    v23 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
      else
        *(_DWORD *)this -= 2;
    }
    if (v31 != -1)
      this = (_QWORD *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v31])(v22, v30);
    v31 = -1;
    if (v29 != -1)
      this = (_QWORD *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v29])(v22, v28);
    if (v2[2] == 1)
      return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return this;
}

uint64_t WebCore::DocumentTimelinesController::maybeClearCachedCurrentTime(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  if (!*(_BYTE *)(this + 80) && !*(_BYTE *)(this + 81))
  {
    v1 = **(unsigned int ***)(this + 40);
    if (!v1 || (v2 = atomic_load(v1), v2 == 1))
      *(_QWORD *)(this + 72) = 0x7FF8000000000000;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DocumentTimelinesController::*)(void),WebCore::DocumentTimelinesController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CancellableTask,void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  result = *(_QWORD *)(a1 + 8);
  if (result && *(_QWORD *)(result + 8))
  {
    *(_QWORD *)(a1 + 8) = 0;
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      WTF::fastFree((WTF *)result, a2);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CancellableTask,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3391560;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v6 = *(uint64_t **)a1;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MessagePort>(WebCore::MessagePort &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

WTF *WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  WTF *result;
  uint64_t v5;

  result = *(WTF **)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

int *WebCore::RenderTable::updateLogicalWidth(WebCore::RenderTable *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderObject *v5;
  unsigned int v6;
  int v7;
  __int16 v8;
  char v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  float v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  float v39;
  double v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  char *v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  char v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int *v86;
  int *v87;
  int *v88;
  int *result;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  unsigned __int8 *v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  unsigned int v105;
  unsigned __int8 v106;
  char v107;
  char v108;
  unsigned int v109;
  unsigned __int8 v110;
  char v111;
  char v112;
  unsigned int v113;
  unsigned __int8 v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
        return (int *)WebCore::RenderBox::updateLogicalWidth(this);
    }
  }
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
  {
    v117 = 0;
    v118 = 0;
    v119 = 0;
    WebCore::RenderBox::computePositionedLogicalWidth((uint64_t)this, (int *)&v117, 0);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      *((_DWORD *)this + 41) = v117;
      *((_DWORD *)this + 39) = HIDWORD(v117);
    }
    else
    {
      *((_DWORD *)this + 40) = v117;
      *((_DWORD *)this + 38) = HIDWORD(v117);
    }
    WebCore::RenderBox::setMarginStart((uint64_t)this, v119, 0);
    WebCore::RenderBox::setMarginEnd((uint64_t)this, SHIDWORD(v119), 0);
  }
  v5 = WebCore::RenderObject::containingBlock(this);
  v6 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 1144))(this);
  v7 = v6;
  v8 = (unsigned __int16)*((_DWORD *)v5 + 31) >> 13;
  v9 = 2;
  switch((unsigned __int16)*((_DWORD *)v5 + 31) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_9;
    case 3:
    case 5:
      LOBYTE(v8) = 3;
      goto LABEL_9;
    case 4:
      goto LABEL_10;
    default:
      LOBYTE(v8) = 0;
LABEL_9:
      v9 = v8;
LABEL_10:
      v10 = v9 & 6;
      v11 = *((_DWORD *)this + 31);
      v12 = v11 >> 13;
      v13 = (unsigned __int16)v11 >> 13;
      if ((v13 - 2) < 2 || v13 == 4 || v13 == 5)
      {
        if (v10 == 2)
          goto LABEL_14;
      }
      else if (v10 != 2)
      {
LABEL_14:
        v14 = 0;
        v15 = v6;
        goto LABEL_15;
      }
      v15 = WebCore::RenderBox::perpendicularContainingBlockLogicalHeight(this);
      v12 = *((_DWORD *)this + 31) >> 13;
      v14 = 1;
LABEL_15:
      v16 = (v12 & 6) - 2;
      v17 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      if (v16 < 4)
        v18 = v17 + 12;
      else
        v18 = v17 + 4;
      *(float *)&v113 = 0.0;
      v116 = 0;
      v114 = *(_BYTE *)(v18 + 4);
      v115 = *(_BYTE *)(v18 + 5);
      if (v114 - 2 >= 9)
      {
        if (v114 == 11)
        {
          v113 = *(unsigned int *)v18;
          WebCore::Length::ref((int *)&v113);
        }
      }
      else
      {
        v116 = *(_BYTE *)(v18 + 6);
        v113 = *(unsigned int *)v18;
      }
      v19 = WebCore::RenderBox::overridingLogicalWidth(this);
      if ((v19 & 0xFF00000000) != 0)
        goto LABEL_26;
      if (v114 - 3 >= 2)
      {
        if (v114 == 11 || v114 - 7 <= 3)
          goto LABEL_25;
      }
      else if (v116)
      {
        if (*(float *)&v113 > 0.0)
          goto LABEL_25;
      }
      else if ((int)v113 > 0)
      {
LABEL_25:
        LODWORD(v19) = WebCore::RenderTable::convertStyleLogicalWidthToComputedWidth(this, (unsigned __int8 *)&v113, v15);
        goto LABEL_26;
      }
      v22 = *((_DWORD *)this + 30);
      v23 = (v22 >> 26) & 1;
      v24 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if ((v24 - 2) < 2)
        goto LABEL_233;
      if (v24 == 4)
      {
        v23 = (v22 & 0x4000000) == 0;
      }
      else if (v24 != 5)
      {
        v25 = 3;
        if ((v22 & 0x4000000) != 0)
          v25 = 1;
        goto LABEL_37;
      }
LABEL_233:
      v104 = v23 == 0;
      v25 = 2;
      if (v104)
        v25 = 0;
LABEL_37:
      v26 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
      v27 = (unsigned __int8 *)(v26 + 8 * v25);
      v28 = v27[4];
      switch(v28)
      {
        case 4:
          v29 = *(float *)v27;
          if (!v27[6])
            v29 = (float)*(int *)v27;
          break;
        case 3:
          v96 = *(float *)v27;
          if (!*(_BYTE *)(v26 + 8 * v25 + 6))
            v96 = (float)*(int *)v27;
          v29 = (float)((float)((float)v7 * 0.015625) * v96) / 100.0;
          break;
        case 11:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v27, (float)v7 * 0.015625);
          break;
        default:
          v31 = 0;
          goto LABEL_43;
      }
      v30 = v29 * 64.0;
      if (v30 >= 2147483650.0)
      {
        v31 = 0x7FFFFFFF;
      }
      else if (v30 <= -2147483650.0)
      {
        v31 = 0x80000000;
      }
      else
      {
        v31 = (int)v30;
      }
LABEL_43:
      v32 = *((_DWORD *)this + 30);
      v33 = (v32 >> 26) & 1;
      v34 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if ((v34 - 2) < 2)
        goto LABEL_237;
      if (v34 == 4)
      {
        v33 = (v32 & 0x4000000) == 0;
      }
      else if (v34 != 5)
      {
        v35 = 3;
        if ((v32 & 0x4000000) == 0)
          v35 = 1;
        goto LABEL_48;
      }
LABEL_237:
      v104 = v33 == 0;
      v35 = 2;
      if (!v104)
        v35 = 0;
LABEL_48:
      v36 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
      v37 = (unsigned __int8 *)(v36 + 8 * v35);
      v38 = v37[4];
      switch(v38)
      {
        case 4:
          v39 = *(float *)v37;
          if (!v37[6])
            v39 = (float)*(int *)v37;
          break;
        case 3:
          v97 = *(float *)v37;
          if (!*(_BYTE *)(v36 + 8 * v35 + 6))
            v97 = (float)*(int *)v37;
          v39 = (float)((float)((float)v7 * 0.015625) * v97) / 100.0;
          break;
        case 11:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v37, (float)v7 * 0.015625);
          break;
        default:
          v41 = 0;
          goto LABEL_54;
      }
      v40 = v39 * 64.0;
      if (v40 >= 2147483650.0)
      {
        v41 = 0x7FFFFFFF;
      }
      else if (v40 <= -2147483650.0)
      {
        v41 = 0x80000000;
      }
      else
      {
        v41 = (int)v40;
      }
LABEL_54:
      v42 = v31 + v41;
      if (__OFADD__(v31, v41))
        v42 = (v31 >> 31) + 0x7FFFFFFF;
      v43 = __OFSUB__(v15, v42);
      v44 = v15 - v42;
      if (v43)
        v44 = (v15 >> 31) + 0x7FFFFFFF;
      v45 = v44 & ~(v44 >> 31);
      if (((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isHTMLMarquee(this))
        && (*(unsigned int (**)(WebCore::RenderTable *))(*(_QWORD *)this + 1504))(this)
        && (*((_BYTE *)this + 21) & 8) == 0
        && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 8)
        && ((v14 | (*(unsigned int (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1672))(v5) ^ 1) & 1) == 0)
      {
        v45 = WebCore::RenderBox::shrinkLogicalWidthToAvoidFloats((unsigned int *)this, v31, v41, (unsigned int *)v5, 0);
      }
      v46 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 416))(this);
      if (v46 >= v45)
        v47 = v45;
      else
        v47 = v46;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v48 = (char *)this + 164;
      else
        v48 = (char *)this + 160;
      *(_DWORD *)v48 = v47;
      v49 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 416))(this);
      v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 24))(*((_QWORD *)this + 37));
      v51 = *((_DWORD *)this + 85);
      v52 = *((_DWORD *)this + 86);
      v53 = v51 + v52;
      if (__OFADD__(v51, v52))
        v53 = (v51 >> 31) + 0x7FFFFFFF;
      if ((*((_BYTE *)this + 124) & 4) != 0)
      {
        v62 = 0;
      }
      else
      {
        v54 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 976))(this);
        v55 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 984))(this);
        v56 = v54 + v55;
        if (__OFADD__(v54, v55))
          v56 = (v54 >> 31) + 0x7FFFFFFF;
        v57 = *((_DWORD *)this + 57);
        if (v57)
        {
          v58 = v57 + 1;
          v59 = *((int *)this + 83);
          LODWORD(v60) = v58 << 6;
          if (v58 <= 0x1FFFFFE)
            v60 = v60;
          else
            v60 = 0x7FFFFFFFLL;
          v61 = v59 * v60 / 64;
          if (HIDWORD(v61) != (int)v61 >> 31)
            LODWORD(v61) = (v59 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          LODWORD(v61) = 0;
        }
        v62 = v56 + v61;
        if (__OFADD__(v56, (_DWORD)v61))
          v62 = (v56 >> 31) + 0x7FFFFFFF;
      }
      v63 = v53 + v62;
      if (__OFADD__(v53, v62))
        v63 = (v53 >> 31) + 0x7FFFFFFF;
      v43 = __OFADD__(v50, v63);
      v64 = v50 + v63;
      if (v43)
        v64 = (v50 >> 31) + 0x7FFFFFFF;
      if (v64 <= v49)
        v64 = v49;
      if (v64 >= v45)
        LODWORD(v19) = v45;
      else
        LODWORD(v19) = v64;
LABEL_26:
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      {
        *((_DWORD *)this + 41) = v19;
        v20 = *(_QWORD *)(*((_QWORD *)this + 11) + 8) + 44;
      }
      else
      {
        *((_DWORD *)this + 40) = v19;
        v20 = *(_QWORD *)(*((_QWORD *)this + 11) + 8) + 28;
      }
      *(float *)&v109 = 0.0;
      v112 = 0;
      v110 = *(_BYTE *)(v20 + 4);
      v21 = v110;
      v111 = *(_BYTE *)(v20 + 5);
      if (v110 - 2 >= 9)
      {
        if (v110 == 11)
        {
          v109 = *(unsigned int *)v20;
          WebCore::Length::ref((int *)&v109);
          v21 = v110;
        }
      }
      else
      {
        v112 = *(_BYTE *)(v20 + 6);
        v109 = *(unsigned int *)v20;
      }
      if ((v21 - 3) >= 2)
      {
        if (v21 != 11 && (v21 - 7) >= 4)
          goto LABEL_103;
      }
      else if (v112)
      {
        if (*(float *)&v109 < 0.0)
        {
LABEL_103:
          v66 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
          goto LABEL_104;
        }
      }
      else if ((v109 & 0x80000000) != 0)
      {
        goto LABEL_103;
      }
      v65 = WebCore::RenderTable::convertStyleLogicalWidthToComputedWidth(this, (unsigned __int8 *)&v109, v7);
      v66 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      if (v66 < 4)
      {
        v102 = *((_DWORD *)this + 41);
        if (v65 < v102)
          v102 = v65;
        *((_DWORD *)this + 41) = v102;
        goto LABEL_211;
      }
      v67 = *((_DWORD *)this + 40);
      if (v65 < v67)
        v67 = v65;
      *((_DWORD *)this + 40) = v67;
LABEL_104:
      if (v66 >= 4)
      {
        v68 = (char *)this + 160;
        goto LABEL_106;
      }
LABEL_211:
      v68 = (char *)this + 164;
LABEL_106:
      v69 = *(_DWORD *)v68;
      v70 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 408))(this);
      if (v69 <= v70)
        v71 = v70;
      else
        v71 = v69;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      {
        *((_DWORD *)this + 41) = v71;
        v72 = *(_QWORD *)(*((_QWORD *)this + 11) + 8) + 36;
      }
      else
      {
        *((_DWORD *)this + 40) = v71;
        v72 = *(_QWORD *)(*((_QWORD *)this + 11) + 8) + 20;
      }
      *(float *)&v105 = 0.0;
      v108 = 0;
      v106 = *(_BYTE *)(v72 + 4);
      v73 = v106;
      v107 = *(_BYTE *)(v72 + 5);
      if (v106 - 2 >= 9)
      {
        if (v106 == 11)
        {
          v105 = *(unsigned int *)v72;
          WebCore::Length::ref((int *)&v105);
          v73 = v106;
        }
      }
      else
      {
        v108 = *(_BYTE *)(v72 + 6);
        v105 = *(unsigned int *)v72;
      }
      if ((v73 - 3) >= 2)
      {
        if (v73 != 11 && (v73 - 7) >= 4)
          goto LABEL_125;
      }
      else if (v108)
      {
        if (*(float *)&v105 < 0.0)
        {
LABEL_125:
          v75 = *((_DWORD *)this + 31) >> 13;
          goto LABEL_126;
        }
      }
      else if ((v105 & 0x80000000) != 0)
      {
        goto LABEL_125;
      }
      v74 = WebCore::RenderTable::convertStyleLogicalWidthToComputedWidth(this, (unsigned __int8 *)&v105, v7);
      v75 = *((_DWORD *)this + 31) >> 13;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      {
        v103 = *((_DWORD *)this + 41);
        if (v103 <= v74)
          v103 = v74;
        *((_DWORD *)this + 41) = v103;
      }
      else
      {
        v76 = *((_DWORD *)this + 40);
        if (v76 <= v74)
          v76 = v74;
        *((_DWORD *)this + 40) = v76;
      }
LABEL_126:
      v77 = v75 & 7;
      v78 = *((_DWORD *)this + 30);
      v79 = (v78 >> 26) & 1;
      v80 = v79;
      if ((v77 - 2) < 2)
        goto LABEL_216;
      if (v77 == 4)
      {
        v80 = (v78 & 0x4000000) == 0;
      }
      else
      {
        v80 = (v78 >> 26) & 1;
        if (v77 != 5)
        {
          v81 = 3;
          if ((v78 & 0x4000000) != 0)
            v81 = 1;
          goto LABEL_131;
        }
      }
LABEL_216:
      v104 = v80 == 0;
      v81 = 2;
      if (v104)
        v81 = 0;
LABEL_131:
      v82 = (char *)this + 168;
      *((_DWORD *)this + v81 + 42) = 0;
      if ((v77 - 2) < 2)
        goto LABEL_220;
      if (v77 == 4)
      {
        v79 = (v78 & 0x4000000) == 0;
      }
      else if (v77 != 5)
      {
        v83 = 3;
        if ((v78 & 0x4000000) == 0)
          v83 = 1;
        goto LABEL_136;
      }
LABEL_220:
      v104 = v79 == 0;
      v83 = 2;
      if (!v104)
        v83 = 0;
LABEL_136:
      *(_DWORD *)&v82[4 * v83] = 0;
      if ((v14 & 1) == 0)
      {
        v84 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1672))(v5);
        v85 = v7;
        if (v84)
          v85 = WebCore::RenderBox::containingBlockAvailableLineWidthInFragment(this, 0);
        v117 = 0;
        v118 = 0;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
          v86 = (int *)((char *)this + 164);
        else
          v86 = (int *)((char *)this + 160);
        if (((*((_BYTE *)v5 + 123) & 4) == 0) != ((*((_BYTE *)this + 123) & 4) == 0))
        {
          v87 = (int *)&v118 + 1;
          v88 = (int *)&v118;
        }
        else
        {
          v87 = (int *)&v118;
          v88 = (int *)&v118 + 1;
        }
        result = WebCore::RenderBox::computeInlineDirectionMargins((int *)this, v5, v7, v85 | 0x100000000, *v86, v87, v88);
        v90 = *((_DWORD *)this + 30);
        v91 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        v92 = (v90 >> 26) & 1;
        v93 = v92;
        if ((v91 - 2) >= 2)
        {
          if (v91 == 4)
          {
            v93 = (v90 & 0x4000000) == 0;
          }
          else
          {
            v93 = (v90 >> 26) & 1;
            if (v91 != 5)
            {
              v94 = 3;
              if ((v90 & 0x4000000) != 0)
                v94 = 1;
              goto LABEL_148;
            }
          }
        }
        v104 = v93 == 0;
        v94 = 2;
        if (v104)
          v94 = 0;
LABEL_148:
        *(_DWORD *)&v82[4 * v94] = v118;
        if ((v91 - 2) >= 2)
        {
          if (v91 == 4)
          {
            v92 = (v90 & 0x4000000) == 0;
          }
          else if (v91 != 5)
          {
            v95 = 3;
            if ((v90 & 0x4000000) == 0)
              v95 = 1;
LABEL_153:
            *(_DWORD *)&v82[4 * v95] = HIDWORD(v118);
            goto LABEL_154;
          }
        }
        v104 = v92 == 0;
        v95 = 2;
        if (!v104)
          v95 = 0;
        goto LABEL_153;
      }
      v98 = (unsigned __int8 *)WebCore::RenderStyle::marginStart((WebCore::RenderTable *)((char *)this + 80));
      v99 = WebCore::minimumValueForLength(v98, v7);
      WebCore::RenderBox::setMarginStart((uint64_t)this, v99, 0);
      v100 = (unsigned __int8 *)WebCore::RenderStyle::marginEnd((WebCore::RenderTable *)((char *)this + 80));
      v101 = WebCore::minimumValueForLength(v100, v7);
      result = (int *)WebCore::RenderBox::setMarginEnd((uint64_t)this, v101, 0);
LABEL_154:
      if (v106 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v105);
      }
      if (v110 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v109);
      }
      if (v114 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v113);
      }
      return result;
  }
}

int *WebCore::RenderBox::computeInlineDirectionMargins(int *result, _QWORD *a2, int a3, uint64_t a4, int a5, int *a6, int *a7)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  float v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  float v32;
  int v33;
  float v34;
  double v35;
  int v37;
  float v38;
  double v39;
  int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  float v48;
  double v49;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  _BOOL4 v57;
  float v58;
  double v59;
  int v61;
  unsigned int v62;
  float v63;
  double v64;
  uint64_t v66;
  unsigned int v67;
  float v68;
  double v69;
  uint64_t v71;
  float v72;
  double v73;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  int *v82;
  float v83;
  double v84;
  unsigned int v86;
  int *v87;
  int *v88;
  int *v89;
  float v90;
  double v91;
  int *v93;
  float v94;
  double v95;
  int *v97;
  float v98;
  double v99;
  int *v101;
  float v102;
  double v103;
  int *v105;
  float v106;
  double v107;
  int *v109;
  void *v110;
  int *v111;
  void *v112;
  int *v113;
  void *v114;
  void *v115;
  int *v116;
  void *v117;
  unsigned int v118;
  WebCore::Length *v119;
  int *v120;
  unsigned int v121;
  __int16 v122;
  char v123;
  unsigned int v124;
  __int16 v125;
  char v126;
  int v127;

  v12 = (uint64_t)result;
  v127 = a3;
  v13 = *(_QWORD *)(*((_QWORD *)result + 11) + 24);
  v15 = *((_DWORD *)a2 + 30);
  v14 = *((_DWORD *)a2 + 31);
  v16 = v15 & 0x4000000;
  v17 = (v15 >> 26) & 1;
  v18 = (unsigned __int16)v14 >> 13;
  if ((v18 - 2) >= 2)
  {
    if (v18 == 4)
    {
      v17 = v16 == 0;
    }
    else if (v18 != 5)
    {
      v19 = 3;
      if (v16)
        v19 = 1;
      goto LABEL_6;
    }
  }
  v27 = v17 == 0;
  v19 = 2;
  if (v27)
    v19 = 0;
LABEL_6:
  v20 = v14 >> 13;
  v21 = v13 + 40 + 8 * v19;
  v124 = 0;
  v126 = 0;
  v125 = *(_WORD *)(v21 + 4);
  v22 = v125;
  if (v125 - 2 >= 9)
  {
    if (v125 == 11)
    {
      v124 = *(_DWORD *)v21;
      v86 = v124;
      v87 = a6;
      result = WebCore::Length::ref((int *)&v124);
      a6 = v87;
      v23 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 24);
      v20 = *((_DWORD *)a2 + 31) >> 13;
      v16 = a2[15] & 0x4000000;
      v24 = *(float *)&v86;
    }
    else
    {
      v23 = 0;
      v24 = 0.0;
    }
  }
  else
  {
    v126 = *(_BYTE *)(v21 + 6);
    if (v126)
    {
      v24 = *(float *)v21;
      v124 = *(_DWORD *)v21;
      v23 = 1;
    }
    else
    {
      v23 = 0;
      v124 = *(_DWORD *)v21;
      v24 = *(float *)&v124;
    }
  }
  v25 = v16 != 0;
  v26 = v20 & 7;
  if ((v26 - 2) >= 2)
  {
    if (v26 == 4)
    {
      v25 = v16 == 0;
    }
    else if (v26 != 5)
    {
      v27 = v16 == 0;
      v28 = 3;
      if (v27)
        v28 = 1;
      goto LABEL_17;
    }
  }
  v28 = 2;
  if (v25)
    v28 = 0;
LABEL_17:
  v29 = v13 + 40 + 8 * v28;
  v121 = 0;
  v123 = 0;
  v122 = *(_WORD *)(v29 + 4);
  v30 = v122;
  if (v122 - 2 >= 9)
  {
    if (v122 == 11)
    {
      v121 = *(_DWORD *)v29;
      v118 = v121;
      v88 = a6;
      result = WebCore::Length::ref((int *)&v121);
      a6 = v88;
      v31 = 0;
      v32 = *(float *)&v118;
    }
    else
    {
      v31 = 0;
      v32 = 0.0;
    }
  }
  else
  {
    v123 = *(_BYTE *)(v29 + 6);
    if (v123)
    {
      v32 = *(float *)v29;
      v121 = *(_DWORD *)v29;
      v31 = 1;
    }
    else
    {
      v31 = 0;
      v121 = *(_DWORD *)v29;
      v32 = *(float *)&v121;
    }
  }
  if ((*(_DWORD *)(v12 + 20) & 0x801) == 1)
  {
    if (*((char *)a2 + 45) < 0)
    {
      if (!v22)
      {
        v23 = 0;
        v22 = 4;
        v125 = 4;
        v126 = 0;
        v124 = 0;
        v24 = 0.0;
      }
      if (!v30)
      {
        v31 = 0;
        v30 = 4;
        v122 = 4;
        v123 = 0;
        v121 = 0;
        v32 = 0.0;
      }
      if ((a4 & 0xFF00000000) == 0)
        LODWORD(a4) = a3;
    }
    else
    {
      if ((a4 & 0xFF00000000) == 0)
        LODWORD(a4) = a3;
      if (!v22)
      {
        v22 = 0;
        if (!v30)
        {
          if ((int)a4 > a5)
          {
            v30 = 0;
LABEL_29:
            if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 4) != 0)
            {
              v109 = a6;
              result = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 4, v12);
              a6 = v109;
              if ((_DWORD)result)
              {
                v47 = *(_QWORD *)(v12 + 32);
                if (v47)
                {
                  v47 = *(_QWORD *)(v47 + 8);
                  if (v47)
                  {
                    if (*(_BYTE *)(v47 + 46) != 12 || (*(_BYTE *)(v12 + 21) & 4) != 0)
                    {
                      LODWORD(v47) = 0;
                    }
                    else
                    {
                      result = (int *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v12, v110);
                      LODWORD(v47) = 0;
                      *((_BYTE *)result + 2) |= 4u;
                    }
                  }
                }
                a6 = v109;
LABEL_54:
                *a6 = v47;
                if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 8) != 0)
                {
                  v111 = a6;
                  result = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 8, v12);
                  a6 = v111;
                  if ((_DWORD)result)
                    goto LABEL_246;
                }
                if (v30 == 4)
                {
                  v48 = (float)SLODWORD(v32);
                  if (v31)
                    v48 = v32;
LABEL_58:
                  v49 = v48 * 64.0;
                  if (v49 < 2147483650.0 && v49 > -2147483650.0)
                    goto LABEL_62;
                  if (v49 >= 2147483650.0)
                  {
                    v51 = 0x7FFFFFFF;
                    goto LABEL_63;
                  }
                  if (v49 <= -2147483650.0)
                    v51 = 0x80000000;
                  else
LABEL_62:
                    v51 = (int)v49;
LABEL_63:
                  v52 = a4 - a5;
                  if (__OFSUB__((_DWORD)a4, a5))
                    v52 = (a4 >> 31) + 0x7FFFFFFF;
                  v53 = v52 - *a6;
                  if (__OFSUB__(v52, *a6))
                    v53 = (v52 >> 31) + 0x7FFFFFFF;
                  v44 = __OFADD__(v53, v51);
                  LODWORD(v54) = v53 + v51;
                  if (v44)
                    LODWORD(v54) = (v53 >> 31) + 0x7FFFFFFF;
                  goto LABEL_138;
                }
                if (v30 == 3)
                {
                  v79 = (float)SLODWORD(v32);
                  if (v31)
                    v79 = v32;
                  v48 = (float)((float)((float)(int)a4 * 0.015625) * v79) / 100.0;
                  goto LABEL_58;
                }
                if (v30 != 11)
                {
                  v51 = 0;
                  goto LABEL_63;
                }
                v101 = a6;
                result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v121, (float)(int)a4 * 0.015625);
                v103 = v102 * 64.0;
                if (v103 < 2147483650.0 && v103 > -2147483650.0)
                  goto LABEL_221;
                if (v103 >= 2147483650.0)
                {
                  v51 = 0x7FFFFFFF;
                  goto LABEL_222;
                }
                if (v103 <= -2147483650.0)
                  v51 = 0x80000000;
                else
LABEL_221:
                  v51 = (int)v103;
LABEL_222:
                a6 = v101;
                goto LABEL_63;
              }
            }
            if (v22 == 4)
            {
              v34 = (float)SLODWORD(v24);
              if (v23)
                v34 = v24;
LABEL_33:
              v35 = v34 * 64.0;
              if (v35 < 2147483650.0 && v35 > -2147483650.0)
                goto LABEL_37;
              if (v35 >= 2147483650.0)
              {
                v37 = 0x7FFFFFFF;
                goto LABEL_38;
              }
              if (v35 <= -2147483650.0)
                v37 = 0x80000000;
              else
LABEL_37:
                v37 = (int)v35;
LABEL_38:
              if (v30 == 4)
              {
                v38 = (float)SLODWORD(v32);
                if (v31)
                  v38 = v32;
LABEL_41:
                v39 = v38 * 64.0;
                if (v39 < 2147483650.0 && v39 > -2147483650.0)
                  goto LABEL_45;
                if (v39 >= 2147483650.0)
                {
                  v41 = 0x7FFFFFFF;
                  goto LABEL_46;
                }
                if (v39 <= -2147483650.0)
                  v41 = 0x80000000;
                else
LABEL_45:
                  v41 = (int)v39;
LABEL_46:
                v42 = a4 - a5;
                if (__OFSUB__((_DWORD)a4, a5))
                  v42 = (a4 >> 31) + 0x7FFFFFFF;
                v43 = v42 - v37;
                if (__OFSUB__(v42, v37))
                  v43 = (v42 >> 31) + 0x7FFFFFFF;
                v44 = __OFSUB__(v43, v41);
                v45 = v43 - v41;
                if (v44)
                  v45 = (v43 >> 31) + 0x7FFFFFFF;
                v46 = (v45 / 2) & ~((v45 + (v45 < 0)) >> 31);
                v44 = __OFADD__(v46, v37);
                LODWORD(v47) = v46 + v37;
                if (v44)
                  LODWORD(v47) = 0x7FFFFFFF;
                goto LABEL_54;
              }
              if (v30 == 3)
              {
                v78 = (float)SLODWORD(v32);
                if (v31)
                  v78 = v32;
                v38 = (float)((float)((float)(int)a4 * 0.015625) * v78) / 100.0;
                goto LABEL_41;
              }
              if (v30 != 11)
              {
                v41 = 0;
                goto LABEL_46;
              }
              v97 = a6;
              result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v121, (float)(int)a4 * 0.015625);
              v99 = v98 * 64.0;
              if (v99 < 2147483650.0 && v99 > -2147483650.0)
                goto LABEL_215;
              if (v99 >= 2147483650.0)
              {
                v41 = 0x7FFFFFFF;
                goto LABEL_216;
              }
              if (v99 <= -2147483650.0)
                v41 = 0x80000000;
              else
LABEL_215:
                v41 = (int)v99;
LABEL_216:
              a6 = v97;
              goto LABEL_46;
            }
            if (v22 == 3)
            {
              v77 = (float)SLODWORD(v24);
              if (v23)
                v77 = v24;
              v34 = (float)((float)((float)(int)a4 * 0.015625) * v77) / 100.0;
              goto LABEL_33;
            }
            if (v22 != 11)
            {
              v37 = 0;
              goto LABEL_38;
            }
            v93 = a6;
            result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v124, (float)(int)a4 * 0.015625);
            v95 = v94 * 64.0;
            if (v95 < 2147483650.0 && v95 > -2147483650.0)
              goto LABEL_209;
            if (v95 >= 2147483650.0)
            {
              v37 = 0x7FFFFFFF;
              goto LABEL_210;
            }
            if (v95 <= -2147483650.0)
              v37 = 0x80000000;
            else
LABEL_209:
              v37 = (int)v95;
LABEL_210:
            a6 = v93;
            goto LABEL_38;
          }
          v55 = 1;
          goto LABEL_87;
        }
        v33 = *((_DWORD *)a2 + 30);
        v55 = 1;
        goto LABEL_71;
      }
    }
    v33 = *((_DWORD *)a2 + 30);
    if ((v33 & 0x3C0) == 0x180)
    {
      if (v30)
        goto LABEL_29;
      v55 = 0;
      goto LABEL_87;
    }
    v55 = 0;
    if (!v30)
    {
LABEL_87:
      if ((int)a4 > a5)
      {
        if (v22 != 4)
        {
          v61 = 0;
          switch(v22)
          {
            case 0:
            case 1:
            case 9:
              v61 = a4;
              goto LABEL_96;
            case 3:
              v76 = (float)SLODWORD(v24);
              if (v23)
                v76 = v24;
              v58 = (float)((float)((float)(int)a4 * 0.015625) * v76) / 100.0;
              goto LABEL_91;
            case 11:
              v89 = a6;
              result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v124, (float)(int)a4 * 0.015625);
              v91 = v90 * 64.0;
              if (v91 < 2147483650.0 && v91 > -2147483650.0)
                goto LABEL_202;
              if (v91 >= 2147483650.0)
              {
                v61 = 0x7FFFFFFF;
              }
              else if (v91 > -2147483650.0)
              {
LABEL_202:
                v61 = (int)v91;
              }
              else
              {
                v61 = 0x80000000;
              }
              a6 = v89;
              break;
            default:
              goto LABEL_96;
          }
          goto LABEL_96;
        }
        v58 = (float)SLODWORD(v24);
        if (v23)
          v58 = v24;
LABEL_91:
        v59 = v58 * 64.0;
        if (v59 < 2147483650.0 && v59 > -2147483650.0)
          goto LABEL_95;
        if (v59 >= 2147483650.0)
        {
          v61 = 0x7FFFFFFF;
          goto LABEL_96;
        }
        if (v59 <= -2147483650.0)
          v61 = 0x80000000;
        else
LABEL_95:
          v61 = (int)v59;
LABEL_96:
        *a6 = v61;
        v62 = a4 - a5;
        if (__OFSUB__((_DWORD)a4, a5))
          v62 = (a4 >> 31) + 0x7FFFFFFF;
        v30 = 0;
        v44 = __OFSUB__(v62, v61);
        LODWORD(v54) = v62 - v61;
        if (v44)
          LODWORD(v54) = (v62 >> 31) + 0x7FFFFFFF;
        goto LABEL_138;
      }
      v30 = 0;
      goto LABEL_102;
    }
LABEL_71:
    v56 = v33 & 0x3C0;
    if ((v33 & 0x4000000) == 0)
    {
      v57 = v56 == 320;
      goto LABEL_103;
    }
    if (v56 == 256)
      goto LABEL_104;
LABEL_102:
    v57 = 0;
LABEL_103:
    if ((v55 | v57) != 1)
    {
LABEL_120:
      if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 4) != 0)
      {
        v113 = a6;
        result = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 4, v12);
        a6 = v113;
        if ((_DWORD)result)
        {
          v71 = *(_QWORD *)(v12 + 32);
          if (v71)
          {
            v71 = *(_QWORD *)(v71 + 8);
            if (v71)
            {
              if (*(_BYTE *)(v71 + 46) != 12 || (*(_BYTE *)(v12 + 21) & 4) != 0)
              {
                LODWORD(v71) = 0;
              }
              else
              {
                result = (int *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v12, v114);
                LODWORD(v71) = 0;
                *((_BYTE *)result + 2) |= 4u;
              }
            }
          }
          a6 = v113;
          goto LABEL_129;
        }
      }
      if (v22 == 4)
      {
        v68 = (float)SLODWORD(v24);
        if (v23)
          v68 = v24;
LABEL_124:
        v69 = v68 * 64.0;
        if (v69 < 2147483650.0 && v69 > -2147483650.0)
          goto LABEL_128;
        if (v69 >= 2147483650.0)
        {
          LODWORD(v71) = 0x7FFFFFFF;
          goto LABEL_129;
        }
        if (v69 <= -2147483650.0)
          LODWORD(v71) = 0x80000000;
        else
LABEL_128:
          LODWORD(v71) = (int)v69;
LABEL_129:
        *a6 = v71;
        if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 8) == 0
          || (result = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 8, v12),
              !(_DWORD)result))
        {
          switch(v30)
          {
            case 4:
              v72 = (float)SLODWORD(v32);
              if (v31)
                v72 = v32;
              break;
            case 3:
              v81 = (float)SLODWORD(v32);
              if (v31)
                v81 = v32;
              v72 = (float)((float)((float)a3 * 0.015625) * v81) / 100.0;
              break;
            case 11:
              result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v121, (float)a3 * 0.015625);
              break;
            default:
LABEL_182:
              LODWORD(v54) = 0;
              goto LABEL_138;
          }
          v73 = v72 * 64.0;
          if (v73 < 2147483650.0 && v73 > -2147483650.0)
            goto LABEL_137;
          if (v73 >= 2147483650.0)
          {
            LODWORD(v54) = 0x7FFFFFFF;
            goto LABEL_138;
          }
          if (v73 <= -2147483650.0)
            LODWORD(v54) = 0x80000000;
          else
LABEL_137:
            LODWORD(v54) = (int)v73;
LABEL_138:
          *a7 = v54;
          goto LABEL_139;
        }
LABEL_246:
        v54 = *(_QWORD *)(v12 + 32);
        if (!v54)
          goto LABEL_138;
        v54 = *(_QWORD *)(v54 + 8);
        if (!v54)
          goto LABEL_138;
        if (*(_BYTE *)(v54 + 46) == 12 && (*(_BYTE *)(v12 + 21) & 4) == 0)
        {
          result = (int *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v12, v112);
          LODWORD(v54) = 0;
          *((_BYTE *)result + 2) |= 8u;
          goto LABEL_138;
        }
        goto LABEL_182;
      }
      if (v22 == 3)
      {
        v80 = (float)SLODWORD(v24);
        if (v23)
          v80 = v24;
        v68 = (float)((float)((float)a3 * 0.015625) * v80) / 100.0;
        goto LABEL_124;
      }
      if (v22 != 11)
      {
        LODWORD(v71) = 0;
        goto LABEL_129;
      }
      v105 = a6;
      result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v124, (float)a3 * 0.015625);
      v107 = v106 * 64.0;
      if (v107 < 2147483650.0 && v107 > -2147483650.0)
        goto LABEL_227;
      if (v107 >= 2147483650.0)
      {
        LODWORD(v71) = 0x7FFFFFFF;
        goto LABEL_228;
      }
      if (v107 <= -2147483650.0)
        LODWORD(v71) = 0x80000000;
      else
LABEL_227:
        LODWORD(v71) = (int)v107;
LABEL_228:
      a6 = v105;
      goto LABEL_129;
    }
LABEL_104:
    if ((int)a4 > a5)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 8) != 0
        && (v82 = a6,
            result = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 8, v12),
            a6 = v82,
            (_DWORD)result))
      {
        v66 = *(_QWORD *)(v12 + 32);
        if (v66)
        {
          v66 = *(_QWORD *)(v66 + 8);
          if (v66)
          {
            if (*(_BYTE *)(v66 + 46) != 12 || (*(_BYTE *)(v12 + 21) & 4) != 0)
            {
              LODWORD(v66) = 0;
            }
            else
            {
              result = (int *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v12, v115);
              LODWORD(v66) = 0;
              *((_BYTE *)result + 2) |= 8u;
            }
          }
        }
      }
      else
      {
        if (v30 == 4)
        {
          v63 = (float)SLODWORD(v32);
          if (v31)
            v63 = v32;
LABEL_109:
          v64 = v63 * 64.0;
          if (v64 < 2147483650.0 && v64 > -2147483650.0)
            goto LABEL_113;
          if (v64 >= 2147483650.0)
          {
            LODWORD(v66) = 0x7FFFFFFF;
            goto LABEL_114;
          }
          if (v64 <= -2147483650.0)
            LODWORD(v66) = 0x80000000;
          else
LABEL_113:
            LODWORD(v66) = (int)v64;
LABEL_114:
          *a7 = v66;
          if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 4) != 0
            && (v116 = a6,
                result = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 4, v12),
                a6 = v116,
                (_DWORD)result))
          {
            v54 = *(_QWORD *)(v12 + 32);
            if (v54)
            {
              v54 = *(_QWORD *)(v54 + 8);
              if (v54)
              {
                if (*(_BYTE *)(v54 + 46) != 12 || (*(_BYTE *)(v12 + 21) & 4) != 0)
                {
                  LODWORD(v54) = 0;
                }
                else
                {
                  result = (int *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v12, v117);
                  LODWORD(v54) = 0;
                  *((_BYTE *)result + 2) |= 4u;
                }
              }
            }
            a7 = v116;
          }
          else
          {
            v67 = a4 - a5;
            if (__OFSUB__((_DWORD)a4, a5))
              v67 = (a4 >> 31) + 0x7FFFFFFF;
            LODWORD(v54) = v67 - *a7;
            if (__OFSUB__(v67, *a7))
              LODWORD(v54) = (v67 >> 31) + 0x7FFFFFFF;
            a7 = a6;
          }
          goto LABEL_138;
        }
        LODWORD(v66) = 0;
        switch(v30)
        {
          case 0:
          case 1:
          case 9:
            LODWORD(v66) = a4;
            goto LABEL_114;
          case 3:
            v75 = (float)SLODWORD(v32);
            if (v31)
              v75 = v32;
            v63 = (float)((float)((float)(int)a4 * 0.015625) * v75) / 100.0;
            goto LABEL_109;
          case 11:
            v82 = a6;
            result = (int *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v121, (float)(int)a4 * 0.015625);
            v84 = v83 * 64.0;
            if (v84 < 2147483650.0 && v84 > -2147483650.0)
              goto LABEL_187;
            if (v84 >= 2147483650.0)
            {
              LODWORD(v66) = 0x7FFFFFFF;
            }
            else if (v84 > -2147483650.0)
            {
LABEL_187:
              LODWORD(v66) = (int)v84;
            }
            else
            {
              LODWORD(v66) = 0x80000000;
            }
            break;
          default:
            goto LABEL_114;
        }
      }
      a6 = v82;
      goto LABEL_114;
    }
    goto LABEL_120;
  }
  v119 = (WebCore::Length *)&v124;
  v120 = &v127;
  *a6 = WebCore::RenderBox::computeOrTrimInlineMargin<WebCore::RenderBox::computeInlineDirectionMargins(WebCore::RenderBlock const&,WebCore::LayoutUnit,std::optional<WebCore::LayoutUnit>,WebCore::LayoutUnit,WebCore::LayoutUnit&,WebCore::LayoutUnit&)::$_0>(v12, a2, &v119);
  v119 = (WebCore::Length *)&v121;
  v120 = &v127;
  result = (int *)WebCore::RenderBox::computeOrTrimInlineMargin<WebCore::RenderBox::computeInlineDirectionMargins(WebCore::RenderBlock const&,WebCore::LayoutUnit,std::optional<WebCore::LayoutUnit>,WebCore::LayoutUnit,WebCore::LayoutUnit&,WebCore::LayoutUnit&)::$_0>(v12, a2, &v119);
  *a7 = (int)result;
  v30 = v122;
LABEL_139:
  if (v30 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v121);
  }
  if (v125 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v124);
  }
  return result;
}

uint64_t WebCore::RenderTable::borderStart(WebCore::RenderTable *this)
{
  return *((unsigned int *)this + 85);
}

uint64_t WebCore::RenderTable::borderEnd(WebCore::RenderTable *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t WebCore::minimumValueForLength(unsigned __int8 *a1, int a2)
{
  int v2;
  float v3;
  double v4;
  float v7;
  float v8;

  v2 = a1[4];
  switch(v2)
  {
    case 4:
      v3 = *(float *)a1;
      if (!a1[6])
        v3 = (float)*(int *)a1;
      break;
    case 3:
      v7 = *(float *)a1;
      if (!a1[6])
        v7 = (float)*(int *)a1;
      v3 = (float)((float)((float)a2 * 0.015625) * v7) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a1, (float)a2 * 0.015625);
      v4 = v8 * 64.0;
      if (v4 < 2147483650.0 && v4 > -2147483650.0)
        return (int)v4;
      if (v4 < 2147483650.0)
        goto LABEL_23;
      return 0x7FFFFFFFLL;
    default:
      return 0;
  }
  v4 = v3 * 64.0;
  if (v4 < 2147483650.0 && v4 > -2147483650.0)
    return (int)v4;
  if (v4 >= 2147483650.0)
    return 0x7FFFFFFFLL;
LABEL_23:
  if (v4 > -2147483650.0)
    return (int)v4;
  return 0x80000000;
}

uint64_t WebCore::AutoTableLayout::scaledWidthFromPercentColumns(WebCore::AutoTableLayout *this)
{
  return *((unsigned int *)this + 13);
}

double WebCore::FontPlatformData::FontPlatformData(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 7) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(a1 + 27) = 1;
  return result;
}

uint64_t WebCore::supportsPictureInPicture(WebCore *this)
{
  if (HIBYTE(WebCore::isPictureInPictureSupported))
    return WebCore::isPictureInPictureSupported;
  else
    return objc_msgSend((id)getAVPictureInPictureControllerClass(), "isPictureInPictureSupported");
}

Class initAVPictureInPictureController(void)
{
  Class result;

  {
    qword_1ECE86B78 = (uint64_t)dlopen("/System/Library/Frameworks/AVKit.framework/AVKit", 2);
  }
  result = objc_getClass("AVPictureInPictureController");
  classAVPictureInPictureController = (uint64_t)result;
  getAVPictureInPictureControllerClass = AVPictureInPictureControllerFunction;
  return result;
}

uint64_t AVPictureInPictureControllerFunction(void)
{
  return classAVPictureInPictureController;
}

void WebCore::RenderTableSection::setNeedsCellRecalc(WebCore::RenderTableSection *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  int v8;

  *((_BYTE *)this + 282) = 1;
  WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 50, 0);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(unsigned __int8 *)(v3 + 46);
      if (v4 != 35 && v4 != 63)
        goto LABEL_17;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 3405))
        return;
      *(_BYTE *)(v3 + 328) |= 8u;
      v5 = *(_DWORD *)(v3 + 20);
      if ((v5 & 8) != 0)
        return;
      *(_DWORD *)(v3 + 20) = v5 | 8;
      v6 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v3, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v3, v6);
      if ((*(_BYTE *)(v3 + 21) & 0x80) == 0)
        return;
      if ((*(_BYTE *)(v3 + 45) & 0x10) == 0)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1942C9620);
      }
      v7 = *(_QWORD *)(v3 + 144);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 8) + 1;
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        v8 = MEMORY[8];
      }
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1942C964CLL);
      }
      *(_DWORD *)(v7 + 8) = v8 - 1;
    }
  }
}

uint64_t WebCore::RenderTableSection::layout(WebCore::RenderTableSection *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  _BOOL4 v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t j;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::RenderTableSection *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;

  *((_BYTE *)this + 280) = 0;
  v2 = (_QWORD *)((char *)this + 200);
  WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 50, *((unsigned int *)this + 53));
  v3 = *((_QWORD *)this + 19);
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x20000) != 0)
  {
    v51 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v51 = *(WebCore::RenderTableSection **)(*((_QWORD *)this + 4) + 8);
    v52 = *((_QWORD *)v51 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 32) + 40) + 20))
      goto LABEL_75;
    v53 = *(_QWORD **)(v52 + 40);
    if (v53[41] || v53[38] || v53[39] || v53[40] || (v4 & 0x100000) != 0)
      goto LABEL_75;
  }
  if ((v4 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(this))
  {
LABEL_75:
    v6 = 1;
  }
  else
  {
    v5 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v55 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_5;
      case 3:
      case 5:
        v5 = 3;
        goto LABEL_5;
      case 4:
        goto LABEL_6;
      default:
        v5 = 0;
LABEL_5:
        v55 = v5;
LABEL_6:
        v6 = (v55 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v59 = v3;
  v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  result = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v56 + 336, this, (int *)&v59, 0, 0);
  if (v6 && (_DWORD)result)
    ++*(_DWORD *)(v56 + 492);
  v9 = *((_QWORD *)this + 4);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  v11 = **(_BYTE **)(*(_QWORD *)(v10 + 496) + 8 * *(unsigned int *)(v10 + 508) - 8);
  v57 = result;
  v58 = v6;
  if (v9)
  {
    v12 = *(_QWORD *)(v9 + 8);
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v12 + 46);
      if (v13 != 35 && v13 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x1942C9B04);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = *((unsigned int *)this + 53);
  if (!(_DWORD)v14)
    goto LABEL_66;
  v15 = 0;
  v16 = v11 & 2;
  do
  {
    v17 = *v2 + 40 * v15;
    v18 = *(unsigned int *)(v17 + 12);
    if (!(_DWORD)v18)
      goto LABEL_52;
    for (i = 0; i != v18; ++i)
    {
      if (i >= *(unsigned int *)(v17 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1942C9B60);
      }
      v20 = *(_QWORD *)v17 + 32 * i;
      v21 = *(unsigned int *)(v20 + 12);
      if (!(_DWORD)v21)
        continue;
      v22 = *(_QWORD *)v20 + 8 * v21;
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(unsigned __int8 *)(v20 + 24);
      if (!v23 || v24 != 0)
        continue;
      if ((*(_BYTE *)(v23 + 251) & 4) == 0)
      {
        v26 = 1;
LABEL_27:
        v27 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        v28 = *(unsigned __int8 *)(v27 + 46);
        if (v28 != 63 && v28 != 35)
        {
          __break(0xC471u);
          JUMPOUT(0x1942C9AE4);
        }
        LODWORD(v29) = *(_DWORD *)(v27 + 228);
        if (v29 <= i)
          v29 = i;
        else
          v29 = v29;
        if (i == v29)
        {
LABEL_95:
          __break(0xC471u);
          JUMPOUT(0x1942C9B34);
        }
        v30 = *(_QWORD *)(v27 + 216);
        v31 = v26 - *(_DWORD *)(v30 + 4 * i);
        for (j = i + 1; v31 && j < v18; ++j)
        {
          if (v29 == j)
            goto LABEL_95;
          v31 -= *(_DWORD *)(v30 + 4 * j);
        }
        goto LABEL_40;
      }
      v26 = WebCore::RenderTableCell::parseColSpanFromDOM(*(WebCore::RenderTableCell **)(v22 - 8));
      if (v26)
        goto LABEL_27;
      LODWORD(j) = i;
LABEL_40:
      v34 = *(unsigned int *)(v12 + 212);
      if (v34 <= j)
      {
        __break(0xC471u);
        JUMPOUT(0x1942C9B68);
      }
      if (i >= v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1942C9B70);
      }
      v35 = *(_QWORD *)(v12 + 200);
      v36 = *(_DWORD *)(v35 + 4 * j);
      LODWORD(v35) = *(_DWORD *)(v35 + 4 * i);
      v37 = __OFSUB__(v36, (_DWORD)v35);
      v38 = v36 - v35;
      v39 = (v36 >> 31) + 0x7FFFFFFF;
      if (!v37)
        v39 = v38;
      v40 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      v41 = *(unsigned __int8 *)(v40 + 46);
      if (v41 != 35 && v41 != 63)
        goto LABEL_101;
      v42 = *(_DWORD *)(v40 + 332);
      v37 = __OFSUB__(v39, v42);
      v43 = v39 - v42;
      v44 = (v39 >> 31) + 0x7FFFFFFF;
      if (v37)
        v45 = v44;
      else
        v45 = v43;
      WebCore::RenderTableCell::setCellLogicalWidth(v23, v45);
    }
    v14 = *((unsigned int *)this + 53);
LABEL_52:
    if (v15 >= v14)
    {
LABEL_101:
      __break(0xC471u);
      JUMPOUT(0x1942C9AC4);
    }
    result = *(_QWORD *)(*v2 + 40 * v15 + 16);
    if (result)
    {
      v46 = *(_DWORD *)(result + 20);
      if ((v46 & 0xF8) != 0 || v16 == 0)
      {
        if ((v46 & 0xF8) != 0)
          goto LABEL_60;
      }
      else if ((v46 & 0x20) == 0)
      {
        v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        if ((**(_BYTE **)(*(_QWORD *)(v54 + 496) + 8 * *(unsigned int *)(v54 + 508) - 8) & 4) != 0)
        {
          *(_DWORD *)(result + 20) = v46 | 0x20;
LABEL_60:
          v48 = *(_QWORD *)(result + 32);
          if (v48
            && (v49 = *(_QWORD *)(v48 + 8)) != 0
            && (*(_BYTE *)(*(_QWORD *)(v49 + 104) + 239) & 0x18) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8)
                                                                         + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248)
                         + 479))
          {
            result = WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)result);
          }
          else
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 688))(result);
          }
        }
      }
      v14 = *((unsigned int *)this + 53);
    }
    ++v15;
  }
  while (v14 > v15);
LABEL_66:
  v50 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v50;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v50 & 0xFFDFFE07;
  if (v57)
  {
    result = WebCore::LocalFrameViewLayoutContext::popLayoutState(v56 + 336, v8);
    if (v58)
      --*(_DWORD *)(v56 + 492);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  unsigned int *v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  WTF *v14;
  uint64_t v15;

  if (result[2] > this)
  {
    v3 = result;
    v4 = result[3];
    v5 = *(WTF **)result;
    if (v4 > this)
    {
      v7 = (char *)v5 + 40 * v4;
      v8 = (char *)v5 + 40 * this;
      do
      {
        if (v8[32] == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v8 + 7));
        }
        v9 = *((unsigned int *)v8 + 3);
        result = *(unsigned int **)v8;
        if ((_DWORD)v9)
        {
          v10 = 32 * v9;
          v11 = (WTF *)(result + 4);
          do
          {
            v12 = (WTF *)*((_QWORD *)v11 - 2);
            if (v11 != v12 && v12 != 0)
            {
              *((_QWORD *)v11 - 2) = 0;
              *((_DWORD *)v11 - 2) = 0;
              v14 = v11;
              v15 = v10;
              WTF::fastFree(v12, (void *)this);
              v11 = v14;
              v10 = v15;
            }
            v11 = (WTF *)((char *)v11 + 32);
            v10 -= 32;
          }
          while (v10);
          result = *(unsigned int **)v8;
        }
        if (result)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          result = (unsigned int *)WTF::fastFree((WTF *)result, (void *)this);
        }
        v8 += 40;
      }
      while (v8 != v7);
      v3[3] = this;
      v5 = *(WTF **)v3;
      LODWORD(v4) = this;
    }
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(40 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      v3[2] = (v6 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::RenderTableSection::RowStruct>::move(v5, (WTF *)((char *)v5 + 40 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WebCore::RenderTableCell::setCellLogicalWidth(uint64_t result, int a2)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;

  v2 = (_DWORD *)(result + 164);
  if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
    v2 = (_DWORD *)(result + 160);
  if (*v2 != a2)
  {
    v3 = *(_DWORD *)(result + 20);
    if ((v3 & 8) == 0)
    {
      *(_DWORD *)(result + 20) = v3 | 8;
      if ((v3 & 0x8000) != 0)
      {
        if ((*(_BYTE *)(result + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942C9E44);
        }
        v7 = *(_QWORD *)(result + 144);
        if (v7)
        {
          v8 = *(_DWORD *)(v7 + 8) + 1;
          *(_DWORD *)(v7 + 8) = v8;
        }
        else
        {
          v8 = MEMORY[8];
        }
        *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v8)
          goto LABEL_23;
        *(_DWORD *)(v7 + 8) = v8 - 1;
      }
    }
    v4 = *(_QWORD *)(result + 32);
    if (!v4 || (v4 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v4 + 46) == 39)
    {
      v5 = *(_DWORD *)(v4 + 20);
      if ((v5 & 0x20) == 0)
        *(_DWORD *)(v4 + 20) = v5 | 0x20;
      v6 = (_DWORD *)(result + 164);
      if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
        v6 = (_DWORD *)(result + 160);
      *v6 = a2;
      *(_DWORD *)(result + 248) |= 0x2000000u;
      return result;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1942C9E24);
  }
  return result;
}

void WebCore::RenderTableRow::layout(WebCore::RenderTableRow *this)
{
  int v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WebCore::RenderTableRow *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  WTF *v18;
  void *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t Cell;
  WebCore::RenderTableCell *v24;
  WebCore::RenderFragmentedFlow *v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x20000) != 0)
  {
    v14 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v14 = *(WebCore::RenderTableRow **)(*((_QWORD *)this + 4) + 8);
    v15 = *((_QWORD *)v14 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 40) + 20))
      goto LABEL_23;
    v16 = *(_QWORD **)(v15 + 40);
    if (v16[41] || v16[38] || v16[39] || v16[40] || (v2 & 0x100000) != 0)
      goto LABEL_23;
  }
  if ((v2 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(this))
  {
LABEL_23:
    v4 = 1;
  }
  else
  {
    v3 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v17 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_5;
      case 3:
      case 5:
        v3 = 3;
        goto LABEL_5;
      case 4:
        goto LABEL_6;
      default:
        v3 = 0;
LABEL_5:
        v17 = v3;
LABEL_6:
        v4 = (v17 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v33 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v6 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v5 + 336, this, (int *)&v33, 0, 0);
  v8 = v6;
  if (v4 && v6)
    ++*(_DWORD *)(v5 + 492);
  v9 = *((unsigned int *)this + 16);
  if (v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v10 = *(_QWORD *)((v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v10)
    {
      if (*(_BYTE *)(v10 + 46) != 37)
      {
        __break(0xC471u);
        JUMPOUT(0x1942CA038);
      }
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 1944)
                      + 248);
      v12 = *(_DWORD **)(*(_QWORD *)(v11 + 496) + 8 * *(unsigned int *)(v11 + 508) - 8);
      if ((*(_BYTE *)v12 & 2) != 0)
      {
        while (1)
        {
          v26 = *(_DWORD *)(v10 + 20);
          if ((v26 & 0xF8) == 0)
          {
            v32 = v4;
            if ((*(_BYTE *)v12 & 4) != 0)
              goto LABEL_72;
            if (v12[18])
            {
              v28 = (int *)(v10 + 152);
              if (((*(_DWORD *)(v10 + 124) >> 13) & 6u) - 2 >= 4)
                v28 = (int *)(v10 + 156);
              v29 = WebCore::RenderLayoutState::pageLogicalOffset(v12, v10, *v28);
              v30 = WebCore::RenderBlock::pageLogicalOffset((WebCore::RenderBlock *)v10);
              v26 = *(_DWORD *)(v10 + 20);
              v31 = v29 == v30;
              v4 = v32;
              if (!v31)
              {
LABEL_72:
                if ((v26 & 0x20) == 0)
                {
                  v26 |= 0x20u;
                  *(_DWORD *)(v10 + 20) = v26;
                }
                v4 = v32;
              }
            }
          }
          if ((v26 & 0xF8) != 0)
            WebCore::RenderTableCell::layout((WebCore::RenderTableCell *)v10);
          v27 = *(unsigned int *)(v10 + 47);
          if (!(v27 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)))
            break;
          v10 = *(_QWORD *)((v27 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
          if (!v10)
            break;
          if (*(_BYTE *)(v10 + 46) != 37)
          {
LABEL_66:
            __break(0xC471u);
            JUMPOUT(0x1942CA24CLL);
          }
        }
      }
      else
      {
        while (1)
        {
          if ((*(_BYTE *)(v10 + 20) & 0xF8) != 0)
            WebCore::RenderTableCell::layout((WebCore::RenderTableCell *)v10);
          v13 = *(unsigned int *)(v10 + 47);
          if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)))
            break;
          v10 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
          if (!v10)
            break;
          if (*(_BYTE *)(v10 + 46) != 37)
            goto LABEL_66;
        }
      }
    }
  }
  v18 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, v7);
    else
      --*(_DWORD *)v18;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v25 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderTableRow *))(*(_QWORD *)this + 648))(this);
    if (v25)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v25, this);
  }
  WebCore::RenderBox::addVisualEffectOverflow(this);
  v20 = *((_DWORD *)this + 5);
  if ((~v20 & 0x208) == 0)
  {
    if ((v20 & 0x8000) == 0)
      goto LABEL_80;
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942CA1CCLL);
    }
    v22 = *((_QWORD *)this + 18);
    if (!v22 || (*(_BYTE *)(v22 + 25) & 8) == 0)
    {
LABEL_80:
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 528)
                                             + 8)
                                 + 288)
                     + 476))
      {
        Cell = WebCore::RenderTableRow::firstCell(this);
        if (Cell)
        {
          v24 = (WebCore::RenderTableCell *)Cell;
          do
          {
            WebCore::RenderObject::repaint((uint64_t)v24, 0);
            v24 = (WebCore::RenderTableCell *)WebCore::RenderTableCell::nextCell(v24);
          }
          while (v24);
        }
      }
    }
  }
  v21 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v21;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v21 & 0xFFDFFE07;
  if (v8)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v5 + 336, v19);
    if (v4)
      --*(_DWORD *)(v5 + 492);
  }
}

WTF::StringImpl *WebCore::RenderImage::layout(WTF::StringImpl *this)
{
  WebCore::RenderReplaced *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  if ((*((_DWORD *)this + 5) & 0xF8) != 0x80 || *((_BYTE *)this + 234) || *((_BYTE *)this + 235))
  {
    WebCore::RenderBox::contentBoxRect(this);
    v4 = v3;
    WebCore::RenderReplaced::layout(v1);
    this = WebCore::RenderImage::updateInnerContentRect(v1);
    if (*((_BYTE *)v1 + 234) || *((_BYTE *)v1 + 235))
      return (WTF::StringImpl *)WebCore::RenderImage::layoutShadowContent((uint64_t)v1, (const WebCore::LayoutSize *)&v4);
  }
  else
  {
    v2 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
    *((_DWORD *)this + 5) = v2;
    if ((*((_BYTE *)this + 45) & 2) == 0)
    {
      *(_WORD *)((char *)this + 69) &= ~1u;
      *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                           * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                              + 1944)
                                                                                  + 248)
                                                                      + 472));
    }
    *((_DWORD *)this + 5) = v2 & 0xFFDFFE07;
  }
  return this;
}

unint64_t WebCore::RenderReplaced::layout(WebCore::RenderReplaced *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  int v7;
  unsigned int v8;
  unint64_t result;
  uint64_t v10;
  WebCore::RenderFragmentedFlow *v11;
  _BYTE v12[56];

  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v12, this, 0, 0, 1);
  v2 = WebCore::RenderReplaced::replacedContentRect(this);
  v4 = v3;
  *((_DWORD *)this + 41) = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1648))(this);
  (*(void (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1304))(this);
  WebCore::RenderBox::updateLogicalHeight(this);
  v6 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v11 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 648))(this);
    if (v11)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v11, this);
  }
  WebCore::RenderBox::addVisualEffectOverflow(this);
  (*(void (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 856))(this);
  v7 = *((_DWORD *)this + 5);
  if ((v7 & 0x60000000) != 0)
    *((_DWORD *)this + 5) = v7 & 0x9FFFFFFF | 0x20000000;
  WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v12);
  v8 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v8;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v8 & 0xFFDFFE07;
  result = WebCore::RenderReplaced::replacedContentRect(this);
  if (result != v2 || v10 != v4)
    return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
  return result;
}

void WebCore::RenderBox::addVisualEffectOverflow(WebCore::RenderBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  _BOOL4 v5;
  WebCore::RenderStyle *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderFragmentedFlow *v13;
  float v14;
  float v15;
  float v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 88);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200);
  if (*(_QWORD *)(v3 + 8))
    v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v4 = 0;
  if (v4)
    v5 = !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v3 + 80));
  else
    LOBYTE(v5) = 0;
  v6 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 424))(this);
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 16);
  v8 = *(unsigned __int8 *)(v7 + 52);
  if ((v8 & 0xE) != 0
    && (v8 & 0xF) != 0
    && ((v14 = *(float *)(v7 + 48), v15 = 3.0, ((v14 < 3.0) & (v8 >> 4)) != 0) || v14 > 0.0))
  {
    if (v14 >= 3.0)
      v15 = *(float *)(v7 + 48);
    if ((v8 & 0x10) != 0)
      v16 = v15;
    else
      v16 = *(float *)(v7 + 48);
    v9 = (float)(WebCore::RenderStyle::outlineOffset(v6) + v16) > 0.0;
  }
  else
  {
    v9 = 0;
  }
  if (v2)
    v10 = 1;
  else
    v10 = v5;
  if ((v10 & 1) != 0 || v9)
  {
    v11 = *((_QWORD *)this + 20);
    v17[0] = 0;
    v17[1] = v11;
    v18[0] = WebCore::RenderBox::applyVisualEffectOverflow(this, (const WebCore::LayoutRect *)v17);
    v18[1] = v12;
    WebCore::RenderBox::addVisualOverflow((uint64_t)this, (const WebCore::LayoutRect *)v18);
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v13 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 648))(this);
      if (v13)
        WebCore::RenderFragmentedFlow::addFragmentsVisualEffectOverflow(v13, this);
    }
  }
}

uint64_t WebCore::RenderObject::outlineStyleForRepaint(WebCore::RenderObject *this)
{
  uint64_t v2;

  if ((*((_BYTE *)this + 45) & 2) == 0)
    return (uint64_t)this + 80;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    this = *(WebCore::RenderObject **)(v2 + 8);
    return (uint64_t)this + 80;
  }
  return 80;
}

WTF::StringImpl *WebCore::RenderImage::updateInnerContentRect(WebCore::RenderImage *this)
{
  WTF::StringImpl *result;
  int v3;
  float v4;
  int v5;
  float v6;
  int v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int16 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  _DWORD v20[2];

  v17 = (WTF::StringImpl *)WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
  result = (WTF::StringImpl *)WebCore::RenderReplaced::replacedContentRect(this, (int32x2_t *)&v17);
  v4 = (float)v3 * 0.015625;
  v6 = (float)v5 * 0.015625;
  if (v4 > -2147500000.0)
    v7 = (int)v4;
  else
    v7 = 0x80000000;
  if (v4 < 2147500000.0)
    v8 = v7;
  else
    v8 = 0x7FFFFFFF;
  v20[0] = v8;
  if (v6 >= 2147500000.0)
  {
    v9 = 0x7FFFFFFF;
  }
  else
  {
    if (v6 <= -2147500000.0)
      return result;
    v9 = (int)v6;
  }
  v20[1] = v9;
  if (v8 >= 1 && v9 >= 1)
  {
    v17 = 0;
    WTF::URL::invalidate((WTF::URL *)&v17);
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v11)
      {
        v12 = *(_WORD *)(v11 + 28);
        if ((v12 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942CA854);
        }
        if ((v12 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          v13 = *(WTF::StringImpl **)(v11 + 200);
          if (v13)
            *(_DWORD *)v13 += 2;
          v14 = v17;
          v17 = v13;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = *(_OWORD *)(v11 + 224);
          v18 = *(_OWORD *)(v11 + 208);
          v19 = v15;
        }
      }
    }
    (*(void (**)(_QWORD, _DWORD *, WTF::StringImpl **))(**((_QWORD **)this + 28) + 48))(*((_QWORD *)this + 28), v20, &v17);
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WebCore::RenderReplaced::replacedContentRect(WebCore::RenderReplaced *this, int32x2_t *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  float v53;
  int v54;
  int v55;
  unint64_t v56;
  float v57;
  int v58;
  int v59;
  float v60;
  double v61;
  int v62;
  int v63;
  float v64;
  double v65;
  int v66;
  uint64_t v67;
  float v69;
  float v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  float v74;
  double v75;
  unint64_t v76;
  float v77;
  unint64_t v78;
  double v79;
  int v80;
  double v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  float v87;
  unsigned __int8 v88;
  char v89;
  char v90;

  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v79 = (float)(*(int (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1352))(this) * 64.0;
    if (v79 > -2147483650.0)
      v80 = (int)v79;
    else
      v80 = 0x80000000;
    if (v79 < 2147483650.0)
      v7 = v80;
    else
      v7 = 0x7FFFFFFF;
    v81 = (float)(*(int (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1360))(this) * 64.0;
    if (v81 >= 2147483650.0)
    {
      v6 = 0x7FFFFFFF;
    }
    else if (v81 <= -2147483650.0)
    {
      v6 = 0x80000000;
    }
    else
    {
      v6 = (int)v81;
    }
    v82 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) << 23;
    v4 = v6 & (v82 >> 31);
    v5 = v7 & (v82 >> 31);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  v8 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 920))(this);
  v10 = v9;
  v11 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 992))(this);
  v14 = v13 + HIDWORD(v10);
  if (__OFADD__(v13, HIDWORD(v10)))
    v14 = (v13 >> 31) + 0x7FFFFFFF;
  v15 = v14 + v5;
  if (__OFADD__(v14, v5))
    v15 = (v14 >> 31) + 0x7FFFFFFF;
  v16 = v11 + v8;
  if (__OFADD__((_DWORD)v11, (_DWORD)v8))
    v16 = (v11 >> 31) + 0x7FFFFFFF;
  v17 = v16 + v4;
  if (__OFADD__(v16, v4))
    v17 = (v16 >> 31) + 0x7FFFFFFF;
  v18 = *((_DWORD *)this + 40);
  v19 = *((_DWORD *)this + 41);
  v20 = __OFSUB__(v18, v13);
  v21 = v18 - v13;
  v22 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v22 = v21;
  v20 = __OFSUB__(v22, HIDWORD(v11));
  v23 = v22 - HIDWORD(v11);
  v24 = (v22 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v24 = v23;
  v20 = __OFSUB__(v24, v7);
  v25 = v24 - v7;
  v26 = (v24 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v26 = v25;
  v27 = v26 & ~(v26 >> 31);
  v20 = __OFSUB__(v19, (_DWORD)v11);
  v28 = v19 - v11;
  v29 = (v19 >> 31) + 0x7FFFFFFF;
  if (v20)
    v28 = v29;
  v20 = __OFSUB__(v28, v12);
  v30 = v28 - v12;
  v31 = (v28 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v31 = v30;
  v20 = __OFSUB__(v31, v6);
  v32 = v31 - v6;
  v33 = (v31 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v33 = v32;
  v34 = v33 & ~(v33 >> 31);
  v35 = v27 - HIDWORD(v10);
  if (__OFSUB__(v27, HIDWORD(v10)))
    v35 = 0x7FFFFFFF;
  v20 = __OFSUB__(v35, HIDWORD(v8));
  v36 = v35 - HIDWORD(v8);
  v37 = (v35 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v37 = v36;
  v20 = __OFSUB__(v37, v5);
  v38 = v37 - v5;
  v39 = (v37 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v39 = v38;
  v40 = v34 - v8;
  if (__OFSUB__(v34, (_DWORD)v8))
    v40 = 0x7FFFFFFF;
  v20 = __OFSUB__(v40, (_DWORD)v10);
  v41 = v40 - v10;
  v42 = (v40 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v42 = v41;
  v20 = __OFSUB__(v42, v4);
  v43 = v42 - v4;
  v44 = (v42 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v44 = v43;
  v45 = v39 & ~(v39 >> 31);
  v46 = v44 & ~(v44 >> 31);
  if (a2->i32[0] >= 1 && a2->i32[1] >= 1)
  {
    v47 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 151) & 7;
    if ((v47 - 1) >= 2)
    {
      if (v47 == 3)
        goto LABEL_112;
      v48 = v39 & ~(v39 >> 31);
      LODWORD(v49) = v44 & ~(v44 >> 31);
      if (v47 != 4)
        goto LABEL_41;
    }
    v86 = (v46 << 32) | v45;
    v78 = WebCore::LayoutSize::fitToAspectRatio((int32x2_t *)&v86, a2, v47 == 2);
    v48 = v78;
    v49 = HIDWORD(v78);
    if (v47 != 4 || a2->i32[0] >= (int)v78)
    {
LABEL_41:
      v50 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
      LODWORD(v86) = 0;
      BYTE6(v86) = 0;
      BYTE4(v86) = *(_BYTE *)(v50 + 132);
      v51 = BYTE4(v86);
      BYTE5(v86) = *(_BYTE *)(v50 + 133);
      if (BYTE4(v86) - 2 >= 9)
      {
        if (BYTE4(v86) == 11)
        {
          LODWORD(v86) = *(_DWORD *)(v50 + 128);
          v71 = v86;
          v72 = v48;
          WebCore::Length::ref((int *)&v86);
          v52 = v71;
          v48 = v72;
          goto LABEL_44;
        }
        v52 = 0;
        v54 = 1;
        v53 = 0.0;
      }
      else
      {
        BYTE6(v86) = *(_BYTE *)(v50 + 134);
        if (!BYTE6(v86))
        {
          v52 = *(unsigned int *)(v50 + 128);
          LODWORD(v86) = *(_DWORD *)(v50 + 128);
LABEL_44:
          v53 = *(float *)&v52;
          v54 = 1;
          goto LABEL_47;
        }
        v54 = 0;
        v53 = *(float *)(v50 + 128);
        *(float *)&v86 = v53;
        v52 = LODWORD(v53);
      }
LABEL_47:
      v87 = 0.0;
      v90 = 0;
      v88 = *(_BYTE *)(v50 + 140);
      v55 = v88;
      v89 = *(_BYTE *)(v50 + 141);
      if (v88 - 2 >= 9)
      {
        if (v88 == 11)
        {
          v56 = *(unsigned int *)(v50 + 136);
          v87 = *(float *)&v56;
          v83 = v48;
          v84 = v52;
          WebCore::Length::ref((int *)&v87);
          v52 = v84;
          v48 = v83;
          goto LABEL_50;
        }
        v56 = 0;
        v58 = 1;
        v57 = 0.0;
      }
      else
      {
        v90 = *(_BYTE *)(v50 + 142);
        if (!v90)
        {
          v56 = *(unsigned int *)(v50 + 136);
          v87 = *(float *)&v56;
LABEL_50:
          v57 = *(float *)&v56;
          v58 = 1;
          goto LABEL_53;
        }
        v58 = 0;
        v57 = *(float *)(v50 + 136);
        v87 = v57;
        v56 = LODWORD(v57);
      }
LABEL_53:
      v59 = v45 - v48;
      if (__OFSUB__((_DWORD)v45, v48))
        v59 = 0x7FFFFFFF;
      if (v51 == 4)
      {
        v60 = (float)SLODWORD(v53);
        if (!v54)
          v60 = v53;
      }
      else
      {
        if (v51 != 3)
        {
          if (v51 == 11)
          {
            v85 = v52;
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v86, (float)v59 * 0.015625);
            v75 = v74 * 64.0;
            if (v75 >= 2147483650.0)
            {
              v62 = 0x7FFFFFFF;
              v52 = v85;
              v56 = v56;
            }
            else
            {
              if (v75 <= -2147483650.0)
                v62 = 0x80000000;
              else
                v62 = (int)v75;
              v52 = v85;
              v56 = v56;
            }
          }
          else
          {
            v62 = 0;
          }
LABEL_61:
          v63 = v46 - v49;
          if (__OFSUB__((_DWORD)v46, (_DWORD)v49))
            v63 = 0x7FFFFFFF;
          switch(v55)
          {
            case 4:
              v64 = (float)SLODWORD(v57);
              if (!v58)
                v64 = v57;
              break;
            case 3:
              v70 = (float)SLODWORD(v57);
              if (!v58)
                v70 = v57;
              v64 = (float)((float)((float)v63 * 0.015625) * v70) / 100.0;
              break;
            case 11:
              v76 = v52;
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v87, (float)v63 * 0.015625);
              v65 = v77 * 64.0;
              if (v65 >= 2147483650.0)
              {
                v66 = 0x7FFFFFFF;
                v52 = v76;
                goto LABEL_69;
              }
              v52 = v76;
              if (v65 > -2147483650.0)
              {
LABEL_68:
                v66 = (int)v65;
LABEL_69:
                if (__OFADD__(v15, v62))
                  v15 = (v15 >> 31) + 0x7FFFFFFF;
                else
                  v15 += v62;
                v20 = __OFADD__((_DWORD)v17, v66);
                v67 = (v17 + v66);
                if (v20)
                  v17 = (v17 >> 31) + 0x7FFFFFFF;
                else
                  v17 = v67;
                if (v55 == 11)
                {
                  v73 = v52;
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v56);
                  v52 = v73;
                }
                if (v51 == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v52);
                }
                return v15 | (unint64_t)(v17 << 32);
              }
LABEL_105:
              v66 = 0x80000000;
              goto LABEL_69;
            default:
              v66 = 0;
              goto LABEL_69;
          }
          v65 = v64 * 64.0;
          if (v65 >= 2147483650.0)
          {
            v66 = 0x7FFFFFFF;
            goto LABEL_69;
          }
          if (v65 > -2147483650.0)
            goto LABEL_68;
          goto LABEL_105;
        }
        v69 = (float)SLODWORD(v53);
        if (!v54)
          v69 = v53;
        v60 = (float)((float)((float)v59 * 0.015625) * v69) / 100.0;
      }
      v61 = v60 * 64.0;
      if (v61 >= 2147483650.0)
      {
        v62 = 0x7FFFFFFF;
      }
      else if (v61 <= -2147483650.0)
      {
        v62 = 0x80000000;
      }
      else
      {
        v62 = (int)v61;
      }
      goto LABEL_61;
    }
LABEL_112:
    v48 = a2->i32[0];
    LODWORD(v49) = a2->i32[1];
    goto LABEL_41;
  }
  return v15 | (unint64_t)(v17 << 32);
}

WTF *WebCore::RenderLayer::repaintIncludingNonCompositingDescendants(WebCore::RenderLayer *this, const WebCore::RenderLayerModelObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *result;
  WebCore::RenderLayer *i;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;

  if ((*((_BYTE *)this + 30) & 2) != 0)
  {
    v14 = *((_OWORD *)this + 7);
  }
  else
  {
    *(_QWORD *)&v14 = (*(uint64_t (**)(_QWORD, const WebCore::RenderLayerModelObject *, uint64_t))(**((_QWORD **)this + 4) + 440))(*((_QWORD *)this + 4), a2, 0xC00000000);
    *((_QWORD *)&v14 + 1) = v4;
  }
  v5 = *((_QWORD *)this + 4);
  if (!a2)
  {
    v6 = 0;
    goto LABEL_5;
  }
  v12 = *((_QWORD *)this + 4);
  v6 = (WTF *)*((_QWORD *)a2 + 1);
  if (!v6)
  {
    v6 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = a2;
    v11 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v6;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WTF::fastFree(v11, v10);
        v6 = (WTF *)*((_QWORD *)a2 + 1);
        if (!v6)
          goto LABEL_17;
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  ++*(_DWORD *)v6;
LABEL_17:
  v5 = v12;
LABEL_5:
  v13 = v6;
  WebCore::RenderObject::repaintUsingContainer(v5, (uint64_t *)&v13, (WebCore::LayoutRect *)&v14, 1);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v7);
    else
      --*(_DWORD *)result;
  }
  for (i = (WebCore::RenderLayer *)*((_QWORD *)this + 8); i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
  {
    if (!*((_QWORD *)i + 32))
      result = (WTF *)WebCore::RenderLayer::repaintIncludingNonCompositingDescendants(i, a2);
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::BackingSharingState::endBackingSharingSequence(WTF **this, WebCore::RenderLayer *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  _QWORD **v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  _QWORD *v20;
  WebCore::RenderLayer *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int i;
  _QWORD *v31;
  void *v32;
  uint64_t **v33;
  void *v34;
  char v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  WTF *v41;
  _QWORD *v42;
  WTF *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  WTF *v47;
  _QWORD *v48;
  _QWORD *v49;
  WebCore::RenderLayer *v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int j;
  _QWORD *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  uint64_t result;
  void *v65;
  WTF *v66;
  WebCore::RenderLayerCompositor *v67;
  WebCore::RenderLayer *v68;
  WTF *v70;
  WTF *v72;
  __int128 v73;

  v2 = *this;
  v3 = *((_DWORD *)this + 3);
  *this = 0;
  this[1] = 0;
  if (v3)
  {
    v70 = v2;
    v72 = (WTF *)((char *)v2 + 56 * v3);
    while (1)
    {
      v4 = (uint64_t *)((char *)v2 + 8);
      WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)v2 + 8, a2);
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 256);
      v7 = (_QWORD **)(v5 + 24);
      v6 = *(WTF **)(v5 + 24);
      if (v6)
      {
        do
        {
          v8 = (WTF *)*((_QWORD *)v6 + 2);
          if (!*(_QWORD *)(*(_QWORD *)v6 + 8))
            WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)(v5 + 16), (void *)(v5 + 16), v6);
          v6 = v8;
        }
        while (v8);
      }
      *(_DWORD *)(v5 + 40) = 0;
      v9 = *(_QWORD *)(v5 + 16);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 12);
        if (v10 >= 0x7FFFFFFF)
          v11 = -2;
        else
          v11 = 2 * v10;
        *(_DWORD *)(v5 + 44) = v11;
        v12 = *(_DWORD *)(v9 - 12);
      }
      else
      {
        v12 = 0;
        *(_DWORD *)(v5 + 44) = 0;
      }
      v13 = (WTF *)*((_QWORD *)v2 + 2);
      if (v13)
      {
        do
        {
          v14 = (WTF *)*((_QWORD *)v13 + 2);
          if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
            WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)v2 + 1, (char *)v2 + 8, v13);
          v13 = v14;
        }
        while (v14);
      }
      *((_DWORD *)v2 + 8) = 0;
      v15 = *((_QWORD *)v2 + 1);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 - 12);
        if (v16 >= 0x7FFFFFFF)
          v17 = -2;
        else
          v17 = 2 * v16;
        *((_DWORD *)v2 + 9) = v17;
        v18 = *(_DWORD *)(v15 - 12);
      }
      else
      {
        v18 = 0;
        *((_DWORD *)v2 + 9) = 0;
      }
      v19 = v12 != v18;
      v20 = *v7;
      if (*v7)
      {
        while (1)
        {
          v21 = *(WebCore::RenderLayer **)(*v20 + 8);
          if (v21)
            break;
          v20 = (_QWORD *)v20[2];
          if (!v20)
            goto LABEL_65;
        }
        v22 = 0;
LABEL_24:
        *((_DWORD *)v2 + 8) = v22 + 1;
        v23 = *(_QWORD *)v21;
        if (*(_QWORD *)v21)
        {
          if (*(_QWORD *)(v23 + 8))
          {
            v24 = *v4;
            if (*v4)
            {
              v25 = *(_DWORD *)(v24 - 8);
              v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
              v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
              v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
              v29 = v25 & ((v28 >> 31) ^ v28);
              for (i = 1; ; ++i)
              {
                v31 = *(_QWORD **)(v24 + 8 * v29);
                if (!v31)
                  break;
                if (v31 != (_QWORD *)-1 && *v31 == v23)
                  goto LABEL_35;
                v29 = (v29 + i) & v25;
              }
            }
          }
        }
        if (!*((_QWORD *)v21 + 32))
          WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(v21);
        v19 = 1;
LABEL_35:
        while (1)
        {
          v20 = (_QWORD *)v20[2];
          if (!v20)
            break;
          v21 = *(WebCore::RenderLayer **)(*v20 + 8);
          if (v21)
          {
            ++*(_DWORD *)(v5 + 40);
            v22 = *((_DWORD *)v2 + 8);
            goto LABEL_24;
          }
        }
        v33 = (uint64_t **)(v5 + 8);
        v32 = *(void **)(v5 + 8);
        ++*(_DWORD *)(v5 + 40);
        WebCore::clearBackingSharingLayerProviders((WTF *)(v5 + 16), v32);
        if (v19)
        {
LABEL_66:
          if (*v4 && *(_DWORD *)(*v4 - 12))
          {
            v48 = (_QWORD *)*((_QWORD *)v2 + 2);
            if (v48)
            {
              while (!*(_QWORD *)(*v48 + 8))
              {
                v48 = (_QWORD *)v48[2];
                if (!v48)
                  goto LABEL_124;
              }
              if (!*(_BYTE *)(v5 + 291))
              {
                *(_BYTE *)(v5 + 291) = 1;
                WebCore::RenderLayer::clearClipRectsIncludingDescendants(*(WTF **)(v5 + 8), 0);
                WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(*(WebCore::RenderLayer **)(v5 + 8));
                v67 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 32) + 24) + 8) + 40) + 8) + 1944));
                v68 = *(WebCore::RenderLayer **)(v5 + 8);
                v73 = *(_OWORD *)(v5 + 176);
                WebCore::RenderLayerCompositor::repaintInCompositedAncestor(v67, v68, (const WebCore::LayoutRect *)&v73);
              }
            }
            else
            {
LABEL_124:
              WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v2 + 8, v34);
            }
          }
          v35 = 1;
          WebCore::RenderLayerBacking::setContentsNeedDisplay(v5, 1);
          goto LABEL_40;
        }
      }
      else
      {
LABEL_65:
        v33 = (uint64_t **)(v5 + 8);
        WebCore::clearBackingSharingLayerProviders((WTF *)(v5 + 16), *(void **)(v5 + 8));
        if (v12 != v18)
          goto LABEL_66;
      }
      v35 = 0;
LABEL_40:
      v36 = *(_QWORD *)(v5 + 16);
      v37 = *(WTF **)(v5 + 24);
      *(_QWORD *)(v5 + 16) = 0;
      *v7 = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v38 = *((_QWORD *)v2 + 3);
      v39 = *(_OWORD *)((char *)v2 + 8);
      *((_QWORD *)v2 + 1) = 0;
      *((_QWORD *)v2 + 2) = 0;
      *((_QWORD *)v2 + 3) = 0;
      v40 = *(_QWORD *)(v5 + 16);
      v41 = *(WTF **)(v5 + 24);
      *(_OWORD *)(v5 + 16) = v39;
      *(_QWORD *)(v5 + 32) = v38;
      while (v41)
      {
        v60 = v41;
        v41 = (WTF *)*((_QWORD *)v41 + 2);
        v61 = *(WTF **)v60;
        *(_QWORD *)v60 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 1)
            WTF::fastFree(v61, v34);
          else
            --*(_DWORD *)v61;
        }
        WTF::fastFree(v60, v34);
      }
      if (v40)
        WTF::fastFree((WTF *)(v40 - 16), v34);
      *(_QWORD *)(v5 + 40) = *((_QWORD *)v2 + 4);
      v42 = *(_QWORD **)(v5 + 24);
      if (v42)
      {
        while (1)
        {
          v43 = *(WTF **)(*v42 + 8);
          if (v43)
            break;
          v42 = (_QWORD *)v42[2];
          if (!v42)
            goto LABEL_59;
        }
LABEL_45:
        v44 = *v33;
        v45 = (uint64_t *)*((_QWORD *)v43 + 10);
        if (v45)
          v45 = (uint64_t *)v45[1];
        if (v45 != v44)
        {
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v43 + 4) + 24) + 8) + 40)
                                     + 8)
                         + 3405))
            WebCore::RenderLayer::clearClipRectsIncludingDescendants(v43, (void *)4);
          if (!v44)
          {
            v46 = 0;
            goto LABEL_55;
          }
          v46 = *v44;
          if (*v44)
            goto LABEL_114;
          v46 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v46 = 1;
          *(_QWORD *)(v46 + 8) = v44;
          v66 = (WTF *)*v44;
          *v44 = v46;
          if (!v66)
            goto LABEL_114;
          if (*(_DWORD *)v66 != 1)
          {
            --*(_DWORD *)v66;
            goto LABEL_114;
          }
          WTF::fastFree(v66, v34);
          v46 = *v44;
          if (*v44)
LABEL_114:
            ++*(_DWORD *)v46;
LABEL_55:
          v47 = (WTF *)*((_QWORD *)v43 + 10);
          *((_QWORD *)v43 + 10) = v46;
          if (v47)
          {
            if (*(_DWORD *)v47 == 1)
              WTF::fastFree(v47, v34);
            else
              --*(_DWORD *)v47;
          }
        }
        while (1)
        {
          v42 = (_QWORD *)v42[2];
          if (!v42)
            break;
          v43 = *(WTF **)(*v42 + 8);
          if (v43)
          {
            ++*(_DWORD *)(v5 + 40);
            goto LABEL_45;
          }
        }
        ++*(_DWORD *)(v5 + 40);
      }
LABEL_59:
      if ((v35 & 1) != 0)
      {
        v49 = *v7;
        if (*v7)
        {
          while (1)
          {
            v50 = *(WebCore::RenderLayer **)(*v49 + 8);
            if (v50)
              break;
            v49 = (_QWORD *)v49[2];
            if (!v49)
              goto LABEL_60;
          }
LABEL_74:
          v51 = *(_QWORD *)v50;
          if (!*(_QWORD *)v50 || (*(_QWORD *)(v51 + 8) ? (v52 = v36 == 0) : (v52 = 1), v52))
          {
LABEL_84:
            WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(v50);
            goto LABEL_85;
          }
          v53 = *(_DWORD *)(v36 - 8);
          v54 = (~(v51 << 32) + v51) ^ ((unint64_t)(~(v51 << 32) + v51) >> 22);
          v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
          v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
          v57 = v53 & ((v56 >> 31) ^ v56);
          for (j = 1; ; ++j)
          {
            v59 = *(_QWORD **)(v36 + 8 * v57);
            if (!v59)
              goto LABEL_84;
            if (v59 != (_QWORD *)-1 && *v59 == v51)
              break;
            v57 = (v57 + j) & v53;
          }
LABEL_85:
          while (1)
          {
            v49 = (_QWORD *)v49[2];
            if (!v49)
              break;
            v50 = *(WebCore::RenderLayer **)(*v49 + 8);
            if (v50)
            {
              ++*(_DWORD *)(v5 + 40);
              goto LABEL_74;
            }
          }
          ++*(_DWORD *)(v5 + 40);
        }
      }
LABEL_60:
      while (v37)
      {
        v62 = v37;
        v37 = (WTF *)*((_QWORD *)v37 + 2);
        v63 = *(WTF **)v62;
        *(_QWORD *)v62 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 1)
            WTF::fastFree(v63, v34);
          else
            --*(_DWORD *)v63;
        }
        WTF::fastFree(v62, v34);
      }
      if (v36)
        WTF::fastFree((WTF *)(v36 - 16), v34);
      v2 = (WTF *)((char *)v2 + 56);
      if (v2 == v72)
      {
        this[2] = 0;
        WebCore::RenderLayerCompositor::BackingSharingState::issuePendingRepaints((uint64_t)this, v34);
        v2 = v70;
        result = (uint64_t)WTF::VectorDestructor<true,WebCore::RenderLayerCompositor::BackingSharingState::Provider>::destruct(v70, v72);
        goto LABEL_100;
      }
    }
  }
  this[2] = 0;
  result = WebCore::RenderLayerCompositor::BackingSharingState::issuePendingRepaints((uint64_t)this, a2);
LABEL_100:
  if (v2)
    return WTF::fastFree(v2, v65);
  return result;
}

WTF *WebCore::RenderLayer::clearClipRectsIncludingDescendants(WTF *result, void *a2)
{
  WTF *v3;
  uint64_t i;

  if (*((_QWORD *)result + 22))
  {
    v3 = result;
    result = WebCore::RenderLayer::clearClipRects(result, a2);
    for (i = *((_QWORD *)v3 + 8); i; i = *(_QWORD *)(i + 56))
      result = (WTF *)WebCore::RenderLayer::clearClipRectsIncludingDescendants(i, a2);
  }
  return result;
}

_QWORD *WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(WebCore::RenderLayer *this)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  int v27;
  WebCore::RenderLayer *i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  const WebCore::FilterOperations *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  _OWORD v48[2];
  int v49;

  result = (_QWORD *)*((_QWORD *)this + 4);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result[3] + 8) + 40) + 8) + 1944);
  v4 = *(_QWORD *)(v3 + 400);
  if (!v4 || !*(_BYTE *)(v4 + 195))
    goto LABEL_75;
  v5 = result;
  if ((*((_BYTE *)result + 45) & 0x10) != 0)
    goto LABEL_4;
  v31 = result[4];
  if (!v31)
    goto LABEL_75;
  v5 = *(_QWORD **)(v31 + 8);
  if (!v5)
    goto LABEL_75;
  while ((*((_BYTE *)v5 + 45) & 0x10) == 0)
  {
    v32 = v5[4];
    if (!v32)
      goto LABEL_75;
    v8 = 0;
    v5 = *(_QWORD **)(v32 + 8);
    if (!v5)
      goto LABEL_49;
  }
LABEL_4:
  while ((*((_BYTE *)v5 + 21) & 0x80) == 0)
  {
    v6 = v5[4];
    if (!v6)
      goto LABEL_75;
    v5 = *(_QWORD **)(v6 + 8);
    if (!v5)
      goto LABEL_75;
    while ((*((_BYTE *)v5 + 45) & 0x10) == 0)
    {
      v7 = v5[4];
      if (!v7)
        goto LABEL_75;
      v8 = 0;
      v5 = *(_QWORD **)(v7 + 8);
      if (!v5)
        goto LABEL_49;
    }
  }
  v9 = v5[18];
  if (v9)
  {
    ++*(_DWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 24);
    if ((v10 & 0x800) != 0
      && ((v11 = *(_QWORD *)(v9 + 32), (*(_BYTE *)(v11 + 22) & 1) == 0)
       || ((*(_BYTE *)(v11 + 45) & 2) != 0
         ? (v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8) + 96))
         : (v29 = *(_QWORD *)(v11 + 96)),
           (v30 = v29 & 0x1C00, v30 == 2048) || !v30)))
    {
      v12 = (WORD1(v10) & 3) - 1 < 2u;
      if (*(_BYTE *)(v11 + 46) == 49)
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_QWORD *)(v9 + 256);
    if (v13 && *(_BYTE *)(v13 + 291))
    {
      v8 = v9;
      goto LABEL_44;
    }
    v14 = *(_QWORD *)(v9 + 80);
    if (v14)
    {
      v8 = *(_QWORD *)(v14 + 8);
      if (v8)
      {
LABEL_44:
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          ++*(_DWORD *)(v8 + 16);
        if (!v12
          || (*((_BYTE *)result + 45) & 2) != 0
          || (*((_BYTE *)result + 45) & 0x10) != 0
          || (*((_DWORD *)result + 5) & 0x8000) == 0)
        {
          goto LABEL_47;
        }
LABEL_122:
        __break(0xC471u);
        JUMPOUT(0x1942CBAC8);
      }
    }
    if ((v10 & 4) != 0)
    {
      v8 = *(_QWORD *)(v9 + 40);
      if (!v8)
        goto LABEL_47;
      while (1)
      {
LABEL_22:
        if (v12)
        {
          v12 = 1;
        }
        else
        {
          v15 = *(_QWORD *)(v8 + 24);
          if ((v15 & 0x800) != 0
            && ((v16 = *(_QWORD *)(v8 + 32), (*(_BYTE *)(v16 + 22) & 1) == 0)
             || ((*(_BYTE *)(v16 + 45) & 2) != 0
               ? (v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8) + 96))
               : (v17 = *(_QWORD *)(v16 + 96)),
                 (v18 = v17 & 0x1C00, v18 == 2048) || !v18)))
          {
            v12 = (WORD1(v15) & 3) - 1 < 2u;
            if (*(_BYTE *)(v16 + 46) == 49)
              v12 = 0;
          }
          else
          {
            v12 = 0;
          }
        }
        v19 = *(_QWORD *)(v8 + 256);
        if (v19 && *(_BYTE *)(v19 + 291))
          goto LABEL_44;
        v20 = *(_QWORD *)(v8 + 80);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
            break;
        }
        if ((*(_BYTE *)(v8 + 24) & 4) == 0)
        {
          while (1)
          {
            v8 = *(_QWORD *)(v8 + 40);
            if (!v8)
              goto LABEL_47;
            if ((*(_BYTE *)(v8 + 24) & 0x4A) != 0)
              goto LABEL_38;
          }
        }
        v8 = *(_QWORD *)(v8 + 40);
LABEL_38:
        if (!v8)
          goto LABEL_47;
      }
      v8 = v21;
      goto LABEL_44;
    }
    v8 = v9;
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 40);
      if (!v8)
        break;
      if ((*(_BYTE *)(v8 + 24) & 0x4A) != 0)
        goto LABEL_22;
    }
LABEL_47:
    v22 = *(_DWORD *)(v9 + 8);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1942CBB44);
    }
    *(_DWORD *)(v9 + 8) = v22 - 1;
  }
  else
  {
LABEL_75:
    v8 = 0;
  }
LABEL_49:
  if (!*(_BYTE *)(v3 + 440))
    goto LABEL_50;
  v33 = result;
  v47 = v8;
  v34 = WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)result);
  v8 = v47;
  v36 = v34;
  result = v33;
  if (!v36)
    goto LABEL_50;
  ++*(_DWORD *)(v36 + 8);
  result = WebCore::RenderLayer::enclosingFilterLayer((_QWORD *)v36, 0, v35);
  if (!result)
  {
    v43 = *(_DWORD *)(v36 + 8);
    if (!v43)
      goto LABEL_108;
    *(_DWORD *)(v36 + 8) = v43 - 1;
    result = v33;
    v8 = v47;
LABEL_50:
    if ((*((_BYTE *)result + 23) & 0x10) == 0)
    {
      v23 = (_QWORD *)v8;
      goto LABEL_52;
    }
    v41 = (_QWORD *)v8;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 648))(result);
    if (result)
    {
      v23 = result;
      ++*((_DWORD *)result + 4);
      if (!v41)
        goto LABEL_52;
      if ((*((_BYTE *)v41 + 23) & 0x10) == 0
        || (result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v41 + 648))(v41)) == 0)
      {
        v42 = *((_DWORD *)v41 + 4);
        if (v42)
        {
          *((_DWORD *)v41 + 4) = v42 - 1;
          goto LABEL_52;
        }
        goto LABEL_116;
      }
      ++*((_DWORD *)result + 4);
      if (result != v23)
      {
        v44 = *((_DWORD *)v41 + 4);
        if (v44)
        {
          *((_DWORD *)v41 + 4) = v44 - 1;
          v45 = *((_DWORD *)result + 4);
          if (v45)
          {
            *((_DWORD *)result + 4) = v45 - 1;
            goto LABEL_52;
          }
LABEL_121:
          __break(0xC471u);
          JUMPOUT(0x1942CBD78);
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x1942CBD34);
      }
      v46 = *((_DWORD *)v23 + 4);
      if (!v46)
        goto LABEL_121;
      *((_DWORD *)v23 + 4) = v46 - 1;
      if (v46 == 1)
        goto LABEL_122;
      *((_DWORD *)v23 + 4) = v46 - 2;
    }
    v23 = v41;
    goto LABEL_52;
  }
  v37 = result;
  ++*((_DWORD *)result + 2);
  if ((*(_BYTE *)(v36 + 26) & 3u) - 1 <= 1 && (v33[45] & 2) == 0)
    result = (_QWORD *)WebCore::RenderElement::hasSelfPaintingLayer((WebCore::RenderElement *)v33);
  v23 = (_QWORD *)v37[4];
  if (v23)
    ++*((_DWORD *)v23 + 4);
  v38 = *((_DWORD *)v37 + 2);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1942CBCA8);
  }
  *((_DWORD *)v37 + 2) = v38 - 1;
  v39 = *(_DWORD *)(v36 + 8);
  if (!v39)
  {
LABEL_108:
    __break(0xC471u);
    JUMPOUT(0x1942CBC88);
  }
  *(_DWORD *)(v36 + 8) = v39 - 1;
  if (v47)
  {
    v40 = *(_DWORD *)(v47 + 16);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x1942CBCC8);
    }
    *(_DWORD *)(v47 + 16) = v40 - 1;
  }
LABEL_52:
  v24 = *((_QWORD *)this + 3);
  if ((v24 & 0x800) != 0)
  {
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 4) + 464))(v48, *((_QWORD *)this + 4), v23, 1);
    v25 = v48[1];
    *((_OWORD *)this + 7) = v48[0];
    *((_OWORD *)this + 8) = v25;
    *((_DWORD *)this + 36) = v49;
    v26 = *((_QWORD *)this + 3) | 0x2000000000000;
  }
  else
  {
    v26 = v24 & 0xFFFDFFFFFFFFFFFFLL;
  }
  *((_QWORD *)this + 3) = v26;
  if (v23)
  {
    v27 = *((_DWORD *)v23 + 4);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1942CBB24);
    }
    *((_DWORD *)v23 + 4) = v27 - 1;
  }
  for (i = (WebCore::RenderLayer *)*((_QWORD *)this + 8); i; i = (WebCore::RenderLayer *)*((_QWORD *)i + 7))
    result = (_QWORD *)WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(i);
  return result;
}

_QWORD *WebCore::RenderObject::containerForRepaint@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WebCore::FilterOperations *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::RenderElement *v45;
  uint64_t v46;
  _DWORD *v47;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8) + 1944);
  v3 = *(_QWORD *)(v2 + 400);
  if (!v3 || !*(_BYTE *)(v3 + 195))
    goto LABEL_74;
  v4 = this;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v25 = this[4];
    if (!v25)
      goto LABEL_74;
    v4 = *(_QWORD **)(v25 + 8);
    if (!v4)
      goto LABEL_74;
    v5 = 0;
    while ((*((_BYTE *)v4 + 45) & 0x10) == 0)
    {
      v26 = v4[4];
      if (!v26)
        goto LABEL_74;
      v15 = 0;
      v4 = *(_QWORD **)(v26 + 8);
      if (!v4)
        goto LABEL_57;
    }
  }
  if ((*((_BYTE *)v4 + 21) & 0x80) == 0)
  {
    v5 = 0;
    do
    {
      v6 = v4[4];
      if (!v6)
        goto LABEL_74;
      v4 = *(_QWORD **)(v6 + 8);
      if (!v4)
        goto LABEL_74;
      while ((*((_BYTE *)v4 + 45) & 0x10) == 0)
      {
        v27 = v4[4];
        if (!v27)
          goto LABEL_74;
        v15 = 0;
        v4 = *(_QWORD **)(v27 + 8);
        if (!v4)
          goto LABEL_57;
      }
    }
    while ((*((_BYTE *)v4 + 21) & 0x80) == 0);
  }
  v7 = v4[18];
  if (!v7)
  {
LABEL_74:
    v15 = 0;
    v5 = 0;
    goto LABEL_57;
  }
  ++*(_DWORD *)(v7 + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if ((v8 & 0x800) != 0
    && ((v9 = *(_QWORD *)(v7 + 32), (*(_BYTE *)(v9 + 22) & 1) == 0)
     || ((*(_BYTE *)(v9 + 45) & 2) != 0
       ? (v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 96))
       : (v12 = *(_QWORD *)(v9 + 96)),
         (v13 = v12 & 0x1C00, v13 == 2048) || !v13)))
  {
    v10 = (WORD1(v8) & 3) - 1 < 2u;
    if (*(_BYTE *)(v9 + 46) == 49)
      v10 = 0;
    v11 = *(_QWORD *)(v7 + 256);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(v7 + 256);
    if (!v11)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v11 + 291))
  {
    v15 = v7;
    goto LABEL_51;
  }
LABEL_22:
  v14 = *(_QWORD *)(v7 + 80);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0)
  {
    if ((v8 & 4) == 0)
    {
      v15 = v7;
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 40);
        if (!v15)
          break;
        if ((*(_BYTE *)(v15 + 24) & 0x4A) != 0)
          goto LABEL_27;
      }
LABEL_54:
      v5 = 0;
      goto LABEL_55;
    }
    v15 = *(_QWORD *)(v7 + 40);
    if (!v15)
      goto LABEL_54;
LABEL_27:
    while (!v10)
    {
      v16 = *(_QWORD *)(v15 + 24);
      if ((v16 & 0x800) != 0)
      {
        v17 = *(_QWORD *)(v15 + 32);
        if ((*(_BYTE *)(v17 + 22) & 1) != 0
          && ((*(_BYTE *)(v17 + 45) & 2) != 0
            ? (v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8) + 96))
            : (v21 = *(_QWORD *)(v17 + 96)),
              (v22 = v21 & 0x1C00, v22 != 2048) && v22))
        {
          v10 = 0;
        }
        else
        {
          v10 = (WORD1(v16) & 3) - 1 < 2u;
          if (*(_BYTE *)(v17 + 46) == 49)
            v10 = 0;
        }
LABEL_32:
        v18 = *(_QWORD *)(v15 + 256);
        if (!v18)
          goto LABEL_33;
        goto LABEL_39;
      }
      v10 = 0;
      v18 = *(_QWORD *)(v15 + 256);
      if (!v18)
        goto LABEL_33;
LABEL_39:
      if (*(_BYTE *)(v18 + 291))
        goto LABEL_51;
LABEL_33:
      v19 = *(_QWORD *)(v15 + 80);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          v15 = v20;
          goto LABEL_51;
        }
      }
      if ((*(_BYTE *)(v15 + 24) & 4) == 0)
      {
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 40);
          if (!v15)
            goto LABEL_54;
          if ((*(_BYTE *)(v15 + 24) & 0x4A) != 0)
            goto LABEL_27;
        }
      }
      v15 = *(_QWORD *)(v15 + 40);
      if (!v15)
        goto LABEL_54;
    }
    v10 = 1;
    goto LABEL_32;
  }
LABEL_51:
  v15 = *(_QWORD *)(v15 + 32);
  if (v15)
    ++*(_DWORD *)(v15 + 16);
  if (!v10)
    goto LABEL_54;
  if ((*((_BYTE *)this + 45) & 2) != 0 || (*((_BYTE *)this + 21) & 0x80) == 0)
    goto LABEL_78;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942CC0E0);
  }
  v28 = this[18];
  if (v28 && (*(_BYTE *)(v28 + 25) & 8) != 0)
    v5 = *(_BYTE *)(v15 + 22) & 1;
  else
LABEL_78:
    v5 = 1;
LABEL_55:
  v23 = *(_DWORD *)(v7 + 8);
  if (!v23)
    goto LABEL_128;
  *(_DWORD *)(v7 + 8) = v23 - 1;
LABEL_57:
  if (!*(_BYTE *)(v2 + 440))
    goto LABEL_58;
  v43 = a2;
  v45 = (WebCore::RenderElement *)this;
  v46 = v15;
  v29 = WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)this);
  a2 = v43;
  v31 = v29;
  this = v45;
  v15 = v46;
  if (!v31)
    goto LABEL_58;
  ++*(_DWORD *)(v31 + 8);
  this = WebCore::RenderLayer::enclosingFilterLayer((_QWORD *)v31, 0, v30);
  if (!this)
  {
    v39 = *(_DWORD *)(v31 + 8);
    if (!v39)
      goto LABEL_114;
    *(_DWORD *)(v31 + 8) = v39 - 1;
    a2 = v43;
    this = v45;
    v15 = v46;
LABEL_58:
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v24 = (_QWORD *)v15;
LABEL_60:
      *(_BYTE *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v24;
      return this;
    }
    v47 = (_DWORD *)v15;
    v44 = a2;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 648))(this);
    if (!this)
      goto LABEL_126;
    v24 = this;
    ++*((_DWORD *)this + 4);
    if (v47)
    {
      if ((*((_BYTE *)v47 + 23) & 0x10) != 0)
      {
        this = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 648))(v47);
        if (this)
        {
          ++*((_DWORD *)this + 4);
          if (this != v24)
          {
            v40 = v47[4];
            if (v40)
            {
              v47[4] = v40 - 1;
              v41 = *((_DWORD *)this + 4);
              if (v41)
              {
                *((_DWORD *)this + 4) = v41 - 1;
                goto LABEL_110;
              }
LABEL_127:
              __break(0xC471u);
              JUMPOUT(0x1942CC36CLL);
            }
LABEL_122:
            __break(0xC471u);
            JUMPOUT(0x1942CC328);
          }
          v42 = *((_DWORD *)v24 + 4);
          if (!v42)
            goto LABEL_127;
          *((_DWORD *)v24 + 4) = v42 - 1;
          if (v42 != 1)
          {
            *((_DWORD *)v24 + 4) = v42 - 2;
LABEL_126:
            v24 = v47;
            goto LABEL_110;
          }
LABEL_128:
          __break(0xC471u);
          JUMPOUT(0x1942CC0C0);
        }
      }
      v38 = v47[4];
      if (!v38)
        goto LABEL_122;
      v47[4] = v38 - 1;
    }
LABEL_110:
    a2 = v44;
    goto LABEL_60;
  }
  v32 = this;
  ++*((_DWORD *)this + 2);
  if ((*(_BYTE *)(v31 + 26) & 3u) - 1 > 1)
  {
    v33 = 0;
  }
  else if ((*((_BYTE *)v45 + 45) & 2) == 0
         && (this = (_QWORD *)WebCore::RenderElement::hasSelfPaintingLayer(v45), (_DWORD)this))
  {
    v33 = *(_BYTE *)(*(_QWORD *)(v31 + 32) + 22) & 1;
  }
  else
  {
    v33 = 1;
  }
  *(_BYTE *)v43 = v33;
  v34 = v32[4];
  *(_QWORD *)(v43 + 8) = v34;
  if (v34)
    ++*(_DWORD *)(v34 + 16);
  v35 = *((_DWORD *)v32 + 2);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x1942CC294);
  }
  *((_DWORD *)v32 + 2) = v35 - 1;
  v36 = *(_DWORD *)(v31 + 8);
  if (!v36)
  {
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x1942CC274);
  }
  *(_DWORD *)(v31 + 8) = v36 - 1;
  if (v46)
  {
    v37 = *(_DWORD *)(v46 + 16);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x1942CC2B4);
    }
    *(_DWORD *)(v46 + 16) = v37 - 1;
  }
  return this;
}

uint64_t WebCore::RenderElement::hasSelfPaintingLayer(WebCore::RenderElement *this)
{
  uint64_t v2;

  if ((*((_BYTE *)this + 21) & 0x80) == 0)
    return 0;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942CC3D8);
  }
  v2 = *((_QWORD *)this + 18);
  if (v2)
    return (*(unsigned __int8 *)(v2 + 25) >> 3) & 1;
  else
    return 0;
}

WTF *WTF::VectorDestructor<true,WebCore::RenderLayerCompositor::BackingSharingState::Provider>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 2);
      while (v4)
      {
        v6 = v4;
        v4 = (WTF *)*((_QWORD *)v4 + 2);
        v7 = *(WTF **)v6;
        *(_QWORD *)v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
            WTF::fastFree(v7, a2);
          else
            --*(_DWORD *)v7;
        }
        WTF::fastFree(v6, a2);
      }
      v5 = *((_QWORD *)v3 + 1);
      if (v5)
        WTF::fastFree((WTF *)(v5 - 16), a2);
      result = *(WTF **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      v3 = (WTF *)((char *)v3 + 56);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>(uint64_t result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(result + 28);
  v3 = *(_DWORD *)(result + 24) + 1;
  *(_DWORD *)(result + 24) = v3;
  if (v3 > v2)
  {
    v13 = *(WTF **)(result + 8);
    if (v13)
    {
      do
      {
        v14 = (WTF *)*((_QWORD *)v13 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
        {
          v18 = result;
          v17 = a2;
          v16 = (WTF *)*((_QWORD *)v13 + 2);
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v13);
          v14 = v16;
          a2 = v17;
          result = v18;
        }
        v13 = v14;
      }
      while (v14);
    }
    *(_DWORD *)(result + 24) = 0;
    v15 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      LODWORD(v15) = *(_DWORD *)(v15 - 12);
      if (v15 > 0x7FFFFFFE)
        LODWORD(v15) = 0x7FFFFFFF;
    }
    *(_DWORD *)(result + 28) = 2 * v15;
  }
  v4 = *a2;
  if (*a2 && *(_QWORD *)(v4 + 8))
  {
    v5 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = *(WTF **)(v5 + 8 * v10);
        if (!v12)
          break;
        if (v12 != (WTF *)-1 && *(_QWORD *)v12 == v4)
        {
          if (v10 == *(_DWORD *)(v5 - 4))
            v12 = 0;
          return WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v12);
        }
        v10 = (v10 + i) & v6;
      }
    }
    else
    {
      v12 = 0;
    }
    return WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v12);
  }
  return result;
}

uint64_t *WebCore::RenderImageResource::setContainerContext(uint64_t *this, int32x2_t *a2, const WTF::URL *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  int8x8_t v8;
  int8x8_t v9;

  v3 = this[3];
  if (v3)
  {
    v4 = this;
    this = *(uint64_t **)(v3 + 8);
    if (this)
    {
      v5 = v4[2];
      if (v5)
      {
        v7 = *(_QWORD *)(v5 + 8);
        if (v7)
        {
          v8 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
          v9 = vorr_s8((int8x8_t)(*(_QWORD *)&v8 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v8));
          return WebCore::CachedImage::setContainerContextForClient(this, (WTF **)v7, (int32x2_t *)&v9, *(float *)(*(_QWORD *)(v7 + 104) + 184), a3);
        }
      }
    }
  }
  return this;
}

WTF *WTF::VectorMover<false,WebCore::RenderTableSection::RowStruct>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  int v15;
  WTF *v16;
  uint64_t v17;

  if (result != a2)
  {
    v5 = result;
    while (1)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v6;
      v7 = *((_DWORD *)v5 + 6);
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_DWORD *)(a3 + 24) = v7;
      *(_DWORD *)(a3 + 28) = 0;
      *(_WORD *)(a3 + 33) = 0;
      v8 = *((unsigned __int8 *)v5 + 32);
      *(_BYTE *)(a3 + 32) = v8;
      *(_BYTE *)(a3 + 33) = *((_BYTE *)v5 + 33);
      if (v8 - 2 >= 9)
        break;
      v9 = *((unsigned __int8 *)v5 + 34);
      *(_BYTE *)(a3 + 34) = v9;
      if (!v9)
      {
        v15 = *((_DWORD *)v5 + 7);
LABEL_20:
        *(_DWORD *)(a3 + 28) = v15;
        goto LABEL_6;
      }
      *(_DWORD *)(a3 + 28) = *((_DWORD *)v5 + 7);
LABEL_6:
      *((_BYTE *)v5 + 32) = 0;
      v10 = *((unsigned int *)v5 + 3);
      result = *(WTF **)v5;
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        v12 = (WTF *)((char *)result + 16);
        do
        {
          v13 = (WTF *)*((_QWORD *)v12 - 2);
          if (v12 != v13 && v13 != 0)
          {
            *((_QWORD *)v12 - 2) = 0;
            *((_DWORD *)v12 - 2) = 0;
            v16 = v12;
            v17 = v11;
            WTF::fastFree(v13, a2);
            v12 = v16;
            v11 = v17;
          }
          v12 = (WTF *)((char *)v12 + 32);
          v11 -= 32;
        }
        while (v11);
        result = *(WTF **)v5;
      }
      if (result)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      a3 += 40;
      v5 = (WTF *)((char *)v5 + 40);
      if (v5 == a2)
        return result;
    }
    if (v8 > 0xD)
      goto LABEL_6;
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(a3 + 28) = 0;
      goto LABEL_6;
    }
    if (v8 != 11)
      goto LABEL_6;
    v15 = *((_DWORD *)v5 + 7);
    *((_DWORD *)v5 + 7) = 0;
    goto LABEL_20;
  }
  return result;
}

WTF ***WebCore::RenderBlock::removePercentHeightDescendant(WTF ***this, WebCore::RenderBox *a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  WTF ****v15;
  WTF ***v16;
  unsigned int v18;
  WTF **v19;
  uint64_t v20;
  WTF **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  unsigned int v29;
  WTF **v30;
  uint64_t v31;
  WTF **v32;
  WTF **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF *v38;
  _QWORD *v39;
  WTF **v40;
  _QWORD *v41;
  uint64_t **v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  WTF **v46;
  WTF *v47;
  uint64_t v48;
  WTF **v49;
  WTF *v50;
  WTF **v51;
  WTF **v52;
  WTF **v53;
  WTF **v54;
  uint64_t v55;

  v2 = (uint64_t **)&unk_1ECE91000;
  if (WebCore::percentHeightDescendantsMap)
  {
    v3 = (uint64_t)this;
    v4 = (uint64_t *)WebCore::percentHeightContainerMap;
    v5 = *(_DWORD *)(WebCore::percentHeightContainerMap + 8);
    v6 = *(_DWORD *)(WebCore::percentHeightContainerMap + 12);
    *(_DWORD *)(WebCore::percentHeightContainerMap + 8) = v5 + 1;
    if (v5 > v6)
      this = (WTF ***)WTF::WeakHashMap<WebCore::RenderBox const,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v4, a2);
    v7 = *(_QWORD *)(v3 + 8);
    if (!v7 || !*(_QWORD *)(v7 + 8))
    {
      v54 = 0;
      v55 = 0;
      return WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(&v54, a2);
    }
    v8 = *v4;
    if (*v4)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      for (i = 1; ; ++i)
      {
        v15 = (WTF ****)(v8 + 24 * v13);
        v16 = *v15;
        if (!*v15)
          break;
        if (v16 != (WTF ***)-1 && v16 == (WTF ***)v7)
        {
          v18 = *(_DWORD *)(v8 - 4);
          goto LABEL_15;
        }
        v13 = (v13 + i) & v9;
      }
      v18 = *(_DWORD *)(v8 - 4);
      v15 = (WTF ****)(v8 + 24 * v18);
LABEL_15:
      if (v15 == (WTF ****)(v8 + 24 * v18))
        return this;
      v19 = (WTF **)v15[1];
      v15[1] = 0;
      v20 = *v4;
      if (!*v4 || (v20 += 24 * *(unsigned int *)(v20 - 4), (WTF ****)v20 != v15))
      {
        if ((WTF ****)v20 != v15)
        {
          this = *v15;
          *v15 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
              this = (WTF ***)WTF::fastFree((WTF *)this, a2);
            else
              --*(_DWORD *)this;
          }
          *v15 = (WTF ***)-1;
          v21 = (WTF **)v15[1];
          if (v21)
          {
            v48 = *((unsigned int *)v21 - 1);
            if ((_DWORD)v48)
            {
              v49 = v21;
              do
              {
                v50 = *v49;
                if (*v49 != (WTF *)-1)
                {
                  *v49 = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 1)
                      WTF::fastFree(v50, a2);
                    else
                      --*(_DWORD *)v50;
                  }
                }
                ++v49;
                --v48;
              }
              while (v48);
            }
            this = (WTF ***)WTF::fastFree((WTF *)(v21 - 2), a2);
          }
          ++*(_DWORD *)(*v4 - 16);
          v22 = *v4;
          if (*v4)
            v23 = *(_DWORD *)(v22 - 12) - 1;
          else
            v23 = -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v4;
          if (*v4)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              this = (WTF ***)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v4, v26 >> 1, 0);
          }
        }
      }
      if (!v19)
        return this;
      v28 = *((unsigned int *)v19 - 1);
      v29 = v28;
      v30 = &v19[v28];
      if (*((_DWORD *)v19 - 3))
      {
        if ((_DWORD)v28)
        {
          v31 = 8 * v28;
          v32 = v19;
          while ((unint64_t)*v32 + 1 <= 1)
          {
            ++v32;
            v31 -= 8;
            if (!v31)
              goto LABEL_36;
          }
        }
        else
        {
          v28 = 0;
          v32 = v19;
        }
      }
      else
      {
LABEL_36:
        v32 = &v19[v28];
      }
      v33 = &v19[v28];
      if (v33 != v32)
      {
        do
        {
          if (*((_QWORD *)*v32 + 1))
            goto LABEL_39;
          v52 = v32 + 1;
          v32 = v30;
          if (v52 != v30)
          {
            v32 = v52;
            do
            {
              if ((unint64_t)*v32 + 1 > 1)
                goto LABEL_109;
              ++v32;
            }
            while (v32 != v30);
            v32 = v30;
          }
LABEL_109:
          ;
        }
        while (v32 != v33);
        v32 = v33;
      }
LABEL_39:
      if (v32 == v30)
        goto LABEL_69;
      while (1)
      {
        WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::find((uint64_t)&v54, v2[99], *(_QWORD *)(*((_QWORD *)*v32 + 1) + 8));
        v34 = *v2[99];
        if (v34)
          v34 += 16 * *(unsigned int *)(v34 - 4);
        v35 = v55;
        if (v55 != v34)
        {
          WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderBox>(*(_QWORD *)(v55 + 8), v3);
          v36 = *(uint64_t **)(v35 + 8);
          v37 = *v36;
          if (*v36 && *(_DWORD *)(v37 - 12))
          {
            v39 = v36 + 1;
            v38 = (WTF *)v36[1];
            if (v38)
            {
              v41 = (_QWORD *)v36[1];
              while (!*(_QWORD *)(*v41 + 8))
              {
                v41 = (_QWORD *)v41[2];
                if (!v41)
                {
                  v53 = v19;
                  v42 = v2;
                  do
                  {
                    v43 = v38;
                    v38 = (WTF *)*((_QWORD *)v38 + 2);
                    v44 = *(WTF **)v43;
                    *(_QWORD *)v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 1)
                        WTF::fastFree(v44, a2);
                      else
                        --*(_DWORD *)v44;
                    }
                    WTF::fastFree(v43, a2);
                  }
                  while (v38);
                  v37 = *v36;
                  if (!*v36)
                  {
                    *v39 = 0;
                    v36[2] = 0;
                    *((_DWORD *)v36 + 6) = 0;
                    v2 = v42;
                    v19 = v53;
                    goto LABEL_49;
                  }
                  v2 = v42;
                  v19 = v53;
                  goto LABEL_46;
                }
              }
              goto LABEL_51;
            }
LABEL_46:
            *v36 = 0;
            WTF::fastFree((WTF *)(v37 - 16), a2);
            v37 = *v36;
            *v39 = 0;
            v36[2] = 0;
            *((_DWORD *)v36 + 6) = 0;
            if (v37)
            {
              LODWORD(v37) = *(_DWORD *)(v37 - 12);
              if (v37 > 0x7FFFFFFE)
                LODWORD(v37) = 0x7FFFFFFF;
            }
LABEL_49:
            *((_DWORD *)v36 + 7) = 2 * v37;
          }
          WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::remove((WTF **)v2[99], (WTF **)v35);
        }
LABEL_51:
        v40 = v30;
        if (v32 + 1 != v30)
        {
          v40 = v32 + 1;
          while ((unint64_t)*v40 + 1 <= 1)
          {
            if (++v40 == v30)
            {
              v40 = v30;
              break;
            }
          }
        }
        v32 = v33;
        if (v40 != v33)
        {
          v32 = v40;
          if (!*((_QWORD *)*v40 + 1))
          {
            while (1)
            {
              v51 = v32 + 1;
              v32 = v30;
              if (v51 != v30)
              {
                v32 = v51;
                while ((unint64_t)*v32 + 1 <= 1)
                {
                  if (++v32 == v30)
                  {
                    v32 = v30;
                    break;
                  }
                }
              }
              if (v32 == v33)
                break;
              if (*((_QWORD *)*v32 + 1))
                goto LABEL_57;
            }
            v32 = v33;
          }
        }
LABEL_57:
        if (v32 == v30)
        {
          v29 = *((_DWORD *)v19 - 1);
LABEL_69:
          if (v29)
          {
            v45 = v29;
            v46 = v19;
            do
            {
              v47 = *v46;
              if (*v46 != (WTF *)-1)
              {
                *v46 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 1)
                    WTF::fastFree(v47, a2);
                  else
                    --*(_DWORD *)v47;
                }
              }
              ++v46;
              --v45;
            }
            while (v45);
          }
          return (WTF ***)WTF::fastFree((WTF *)(v19 - 2), a2);
        }
      }
    }
  }
  return this;
}

uint64_t WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderBox>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_DWORD *)(result + 28);
  v3 = *(_DWORD *)(result + 24) + 1;
  *(_DWORD *)(result + 24) = v3;
  if (v3 > v2)
  {
    v13 = *(WTF **)(result + 8);
    if (v13)
    {
      do
      {
        v14 = (WTF *)*((_QWORD *)v13 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
        {
          v18 = result;
          v17 = a2;
          v16 = (WTF *)*((_QWORD *)v13 + 2);
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v13);
          v14 = v16;
          a2 = v17;
          result = v18;
        }
        v13 = v14;
      }
      while (v14);
    }
    *(_DWORD *)(result + 24) = 0;
    v15 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      LODWORD(v15) = *(_DWORD *)(v15 - 12);
      if (v15 > 0x7FFFFFFE)
        LODWORD(v15) = 0x7FFFFFFF;
    }
    *(_DWORD *)(result + 28) = 2 * v15;
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = *(WTF **)(v5 + 8 * v10);
        if (!v12)
          break;
        if (v12 != (WTF *)-1 && *(_QWORD *)v12 == v4)
        {
          if (v10 == *(_DWORD *)(v5 - 4))
            v12 = 0;
          return WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v12);
        }
        v10 = (v10 + i) & v6;
      }
    }
    else
    {
      v12 = 0;
    }
    return WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v12);
  }
  return result;
}

uint64_t WebCore::RenderTableCell::nextCell(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(unsigned int *)((char *)this + 47);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)))
    return 0;
  result = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
  if (result)
  {
    if (*(_BYTE *)(result + 46) != 37)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderTableRow::firstCell(WebCore::RenderTableRow *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((unsigned int *)this + 16);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  result = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (result)
  {
    if (*(_BYTE *)(result + 46) != 37)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

WTF *WebCore::RenderLayer::clearClipRects(WTF *result, void *a2)
{
  WTF *v2;
  WTF **v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;

  v2 = result;
  v3 = (WTF **)*((_QWORD *)result + 22);
  if ((_DWORD)a2 == 4)
  {
    *((_QWORD *)result + 22) = 0;
    if (v3)
    {
      v4 = v3[5];
      v3[5] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
          WTF::fastFree(v4, a2);
        else
          --*(_DWORD *)v4;
      }
      v5 = v3[4];
      v3[4] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
          WTF::fastFree(v5, a2);
        else
          --*(_DWORD *)v5;
      }
      v6 = v3[3];
      v3[3] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
      v7 = v3[2];
      v3[2] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, a2);
        else
          --*(_DWORD *)v7;
      }
      v8 = v3[1];
      v3[1] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
      }
      v9 = *v3;
      *v3 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, a2);
        else
          --*(_DWORD *)v9;
      }
      result = (WTF *)v3;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  else
  {
    v10 = a2;
    v11 = v3[(int)a2 + 3];
    v3[(int)a2 + 3] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, a2);
      else
        --*(_DWORD *)v11;
    }
    v12 = *((_QWORD *)v2 + 22);
    result = *(WTF **)(v12 + 8 * v10);
    *(_QWORD *)(v12 + 8 * v10) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, a2);
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::repaintDuringLayoutIfMoved(uint64_t this, const WebCore::LayoutRect *a2)
{
  __int128 *v2;
  _QWORD *v3;
  __int128 v4;
  _BYTE v5[16];
  char v6;
  __int128 v7;
  char v8;

  v2 = (__int128 *)(this + 152);
  if (*(_QWORD *)a2 != *(_QWORD *)(this + 152))
  {
    v3 = (_QWORD *)this;
    v4 = *v2;
    *v2 = *(_OWORD *)a2;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v7) = 0;
      v8 = 0;
      v5[0] = 0;
      v6 = 0;
      WebCore::RenderObject::issueRepaint(this, &v7, 0, 0, (uint64_t)v5);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v3 + 1296))(v3, 1);
    *v2 = v4;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3[3] + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v7) = 0;
      v8 = 0;
      v5[0] = 0;
      v6 = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)v3, &v7, 0, 0, (uint64_t)v5);
    }
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 1296))(v3, 1);
  }
  return this;
}

void WebCore::RenderBlockFlow::repaintOverhangingFloats(WebCore::RenderBlockFlow *this, int a2)
{
  uint64_t v2;
  int v5;
  char *v6;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::RenderObject *v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 4);
  if (v2
    && *(_QWORD *)(v2 + 8)
    && (*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1672))(this))
  {
    v5 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom((uint64_t)this, 3u);
    v6 = (char *)this + 160;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v6 = (char *)this + 164;
    if (v5 > *(_DWORD *)v6)
    {
      WebCore::LayoutStateDisabler::LayoutStateDisabler(&v19, (WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)+ 40)+ 8)+ 1944)+ 248)+ 336));
      for (i = *(_QWORD **)(*((_QWORD *)this + 27) + 8); i; i = (_QWORD *)v8[2])
      {
        v8 = i;
        v9 = *i;
        if (*(_QWORD *)v9)
          v18 = *(WebCore::RenderObject **)(*(_QWORD *)v9 + 8);
        else
          v18 = 0;
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v10 = *(_DWORD *)(v9 + 8);
          v11 = *(_DWORD *)(v9 + 16);
        }
        else
        {
          v10 = *(_DWORD *)(v9 + 12);
          v11 = *(_DWORD *)(v9 + 20);
        }
        v12 = __OFADD__(v10, v11);
        v13 = v10 + v11;
        v14 = (v10 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v14 = v13;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
          v15 = 164;
        else
          v15 = 160;
        v16 = (uint64_t)v18;
        if (v14 > *(_DWORD *)((char *)this + v15))
        {
          v17 = *((_QWORD *)v18 + 18);
          if (!v17 || (*(_BYTE *)(v17 + 25) & 8) == 0)
          {
            if ((*(_BYTE *)(v9 + 36) & 4) != 0
              || a2 && (v16 = (uint64_t)v18, WebCore::RenderObject::isDescendantOf(v18, this)))
            {
              WebCore::RenderObject::repaint(v16, 0);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 1296))(v16, 0);
            }
          }
        }
      }
      WebCore::LayoutStateDisabler::~LayoutStateDisabler((WebCore::LayoutStateDisabler *)&v19);
    }
  }
}

uint64_t WebCore::RenderTreeBuilder::attach(uint64_t a1, WebCore::RenderTable *this, unint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v61;

  v6 = *a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (*(_BYTE *)(v7 + 1375)
        && (*(_DWORD *)(v7 + 1156) || *(_DWORD *)(v7 + 1160))
        && ((*(_WORD *)(v9 + 660) & 0x80) == 0 || *(_BYTE *)(v7 + 1377)))
      {
        goto LABEL_57;
      }
    }
  }
  if ((*(_BYTE *)(v6 + 45) & 2) != 0)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0 || (*((_BYTE *)this + 120) & 0x30) != 0)
      goto LABEL_57;
    v36 = *(_QWORD *)(*((_QWORD *)this + 14) + 248);
    if (v36)
    {
      v37 = (*(_DWORD *)v36)++;
      v38 = *(_DWORD *)(v36 + 20);
      if (v38)
      {
        v39 = *(unsigned int **)(v36 + 8);
        v40 = &v39[10 * v38];
        while (1)
        {
          v41 = v39[3];
          if ((_DWORD)v41)
            break;
LABEL_71:
          v39 += 10;
          if (v39 == v40)
          {
            v37 = *(_DWORD *)v36 - 1;
            goto LABEL_77;
          }
        }
        v42 = 16 * v41;
        v43 = (_QWORD *)(*(_QWORD *)v39 + 8);
        while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v43 + 24))(*v43) & 1) == 0)
        {
          v43 += 2;
          v42 -= 16;
          if (!v42)
            goto LABEL_71;
        }
        if (*(_DWORD *)v36 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v36, this);
          WTF::fastFree(v55, v56);
        }
        else
        {
          --*(_DWORD *)v36;
        }
        goto LABEL_57;
      }
LABEL_77:
      if (v37)
      {
        *(_DWORD *)v36 = v37;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v36, this);
        WTF::fastFree(v53, v54);
      }
    }
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
    v45 = *(_DWORD *)(v44 + 1156);
    if (v45 < 0xC9 || !*(_BYTE *)(v44 + 1378))
    {
      v46 = *(_QWORD *)(v6 + 104);
      if (v46)
      {
        v47 = *(unsigned __int16 **)(v46 + 8);
        v48 = *(unsigned int *)(v46 + 4);
        v49 = *(_DWORD *)(v46 + 4);
        if ((*(_BYTE *)(v46 + 16) & 4) != 0)
        {
          if (v49)
          {
            do
            {
              v50 = *(unsigned __int8 *)v47;
              v47 = (unsigned __int16 *)((char *)v47 + 1);
              v51 = (1 << v50) & 0x100003600;
              if (v50 <= 0x20 && v51 != 0)
                --v49;
              --v48;
            }
            while (v48);
          }
        }
        else if (v49)
        {
          v57 = 2 * v48;
          do
          {
            v58 = *v47++;
            v59 = (1 << v58) & 0x100003600;
            if (v58 <= 0x20 && v59 != 0)
              --v49;
            v57 -= 2;
          }
          while (v57);
        }
      }
      else
      {
        v49 = 0;
      }
      *(_DWORD *)(v44 + 1156) = v49 + v45;
      ++*(_DWORD *)(v44 + 1164);
    }
    goto LABEL_57;
  }
  v10 = *(unsigned __int8 *)(v6 + 46);
  if (v10 > 0x66)
  {
    if (v10 != 103)
      goto LABEL_57;
  }
  else if (v10 != 83)
  {
    if (v10 != 13 && v10 != 7)
      goto LABEL_57;
    if ((*(_BYTE *)(v6 + 52) & 7) != 3)
      goto LABEL_117;
    v12 = WebCore::RenderReplaced::intrinsicSize(*a3);
    v15 = *(_DWORD *)(v7 + 1160);
    if (v15 > 0x400)
      goto LABEL_57;
    v16 = ((int)(v12 - (v13 & 0xFFFFFFC0) + 32) >> 6) + (int)v12 / 64;
    v17 = ((int)(HIDWORD(v12) - (v14 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v12) / 64;
    if (v16 < 0)
      v16 = -v16;
    if (v17 < 0)
      v17 = -v17;
    v18 = v17 * (unint64_t)v16;
    if ((v18 & 0xFFFFFFFF00000000) != 0)
      v19 = 0;
    else
      v19 = v18;
    v20 = __CFADD__(v19, v15);
    v21 = v19 + v15;
    if (v20)
      v21 = -1;
    if ((v18 & 0xFFFFFFFF00000000) != 0)
      v21 = -1;
    goto LABEL_51;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 8);
  if (*(_BYTE *)(v22 + 8) == 4 && *(_BYTE *)(v22 + 16) == 4
    || (v22 = *(_QWORD *)(*((_QWORD *)this + 11) + 8), *(_BYTE *)(v22 + 8) == 4) && *(_BYTE *)(v22 + 16) == 4)
  {
    v23 = *(_BYTE *)(v22 + 10) ? (int)*(float *)(v22 + 4) : *(_DWORD *)(v22 + 4);
    v24 = *(_BYTE *)(v22 + 18) ? (int)*(float *)(v22 + 12) : *(_DWORD *)(v22 + 12);
    if (v24 >= 1 && v23 >= 1)
    {
      v26 = *(_DWORD *)(v7 + 1160);
      if (v26 <= 0x400)
      {
        v27 = v24 * (unint64_t)v23;
        if ((v27 & 0xFFFFFFFF00000000) != 0)
          v28 = 0;
        else
          v28 = v27;
        v20 = __CFADD__(v28, v26);
        v29 = v28 + v26;
        if (v20)
          v29 = -1;
        if ((v27 & 0xFFFFFFFF00000000) != 0)
          v21 = -1;
        else
          v21 = v29;
LABEL_51:
        *(_DWORD *)(v7 + 1160) = v21;
      }
    }
  }
LABEL_57:
  v30 = *a3;
  *a3 = 0;
  v61 = v30;
  result = WebCore::RenderTreeBuilder::attachInternal(a1, this);
  if (!v61)
    return result;
  v32 = *(_QWORD *)(v61 + 32);
  if (v32 && *(_QWORD *)(v32 + 8))
  {
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x1942CD768);
  }
  v33 = *(unsigned int *)(v61 + 47);
  if (v33 | ((unint64_t)*(unsigned __int8 *)(v61 + 51) << 32)
    && *(_QWORD *)((v33 | ((unint64_t)*(unsigned __int8 *)(v61 + 51) << 32)) + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1942CD818);
  }
  v34 = *(unsigned int *)(v61 + 40);
  if (v34 | ((unint64_t)*(unsigned __int8 *)(v61 + 44) << 32)
    && *(_QWORD *)((v34 | ((unint64_t)*(unsigned __int8 *)(v61 + 44) << 32)) + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1942CD840);
  }
  v35 = *(_DWORD *)(v61 + 20);
  if ((v35 & 4) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942CD788);
  }
  *(_DWORD *)(v61 + 20) = v35 | 4;
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 640))(v61);
  if ((*(_BYTE *)(v61 + 52) & 7) != 3 || (*(_BYTE *)(v61 + 53) & 4) == 0 || *(_DWORD *)(v61 + 224) == 1)
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 8))(v61);
  --*(_DWORD *)(v61 + 224);
  return result;
}

uint64_t WebCore::RenderStyle::diff(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  char isCalculatedEqual;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  char v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  WebCore::Length *v93;
  float v94;
  float v95;
  int v96;
  WebCore::Length *v97;
  float v98;
  float v99;
  _QWORD *v100;
  _QWORD *v101;
  __int128 v102;
  __int128 v103;

  *(_BYTE *)a3 = 0;
  if (WebCore::RenderStyle::changeRequiresLayout((WebCore::RenderStyle *)a1, (WebCore::Length *)a2, a3))
    return 8;
  if ((*(_BYTE *)(a1 + 18) & 0x38) == 0)
  {
LABEL_39:
    v20 = *(_QWORD **)(a1 + 8);
    v21 = *(_QWORD **)(a2 + 8);
    if (v20 == v21)
    {
LABEL_51:
      if (WebCore::RenderStyle::changeRequiresRepaint(a1, a2, a3))
        return 2;
      v34 = *(_QWORD *)(a1 + 32);
      v35 = *(_QWORD *)(a2 + 32);
      v36 = *(_QWORD *)(v34 + 328);
      v37 = *(_QWORD *)(v35 + 328);
      if ((v36 & 0x8000000000000) != 0)
      {
        if ((v37 & 0x8000000000000) == 0)
          return 3;
        v103 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
        v102 = *(_OWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 4);
        if (!WebCore::operator==<float,4ul>((float *)&v103, (float *)&v102))
          return 3;
        v71 = *(_QWORD *)(v34 + 328);
        v72 = *(_QWORD *)(v35 + 328);
        if (HIBYTE(v71) != HIBYTE(v72) || BYTE6(v71) != BYTE6(v72))
          return 3;
      }
      else if (v36 != v37 || (v37 & 0x8000000000000) != 0)
      {
        return 3;
      }
      if (((*(_DWORD *)(a2 + 40) ^ *(_DWORD *)(a1 + 40)) & 0x78000) != 0
        || ((*(_QWORD *)(a2 + 16) ^ *(_QWORD *)(a1 + 16)) & 0xF00000000) != 0)
      {
        return 3;
      }
      v73 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
      v74 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
      if (v73 != v74)
      {
        if (((*(_DWORD *)(v74 + 636) ^ *(_DWORD *)(v73 + 636)) & 0x7000) != 0
          || !WebCore::StyleColor::operator==(v73 + 272, v74 + 272))
        {
          return 3;
        }
        v85 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
        v86 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
        v87 = *(unsigned __int8 *)(v85 + 448);
        if (v87 >= 2)
        {
          if (v87 == 2
            && (*(_BYTE *)(v86 + 448) != 2
             || !WebCore::Length::operator==((unsigned __int8 *)(v85 + 452), (unsigned __int8 *)(v86 + 452))))
          {
            return 3;
          }
          goto LABEL_140;
        }
        if (v87 != *(unsigned __int8 *)(v86 + 448))
          return 3;
      }
LABEL_140:
      v75 = *(_QWORD *)(a1 + 24);
      v76 = *(_QWORD *)(a2 + 24);
      if (v75 != v76)
      {
        if (((*(_DWORD *)(v76 + 232) ^ *(_DWORD *)(v75 + 232)) & 0x30000000) != 0)
          return 3;
        if (!WebCore::StyleColor::operator==(v75 + 32, v76 + 32))
          return 3;
        if (!WebCore::StyleColor::operator==(*(_QWORD *)(a1 + 24) + 16, *(_QWORD *)(a2 + 24) + 16))
          return 3;
        if (!WebCore::StyleColor::operator==(*(_QWORD *)(a1 + 24) + 48, *(_QWORD *)(a2 + 24) + 48))
          return 3;
        v83 = *(_QWORD *)(a1 + 24);
        v84 = *(_QWORD *)(a2 + 24);
        if (((*(_DWORD *)(v84 + 228) ^ *(_DWORD *)(v83 + 228)) & 0x2000000) != 0
          || !WebCore::StyleColor::operator==(v83 + 256, v84 + 256)
          || !WebCore::StyleColor::operator==(*(_QWORD *)(a1 + 24) + 112, *(_QWORD *)(a2 + 24) + 112))
        {
          return 3;
        }
      }
      if (((*(_DWORD *)(a2 + 44) ^ *(_DWORD *)(a1 + 44)) & 0x3C0) == 0)
      {
        v77 = *(_QWORD *)(a1 + 8);
        v78 = *(_QWORD *)(a2 + 8);
        if (v77 == v78 || (v79 = *(_QWORD *)(v77 + 40), v80 = *(_QWORD *)(v78 + 40), v79 == v80))
        {
LABEL_144:
          v81 = *(_QWORD *)(a1 + 24);
          v82 = *(_QWORD *)(a2 + 24);
          return v81 != v82 && ((*(_DWORD *)(v82 + 236) ^ *(_DWORD *)(v81 + 236)) & 0x1000000) != 0;
        }
        v88 = *(_DWORD *)(v79 + 636);
        if ((v88 & 0x200) != 0)
          v89 = 0;
        else
          v89 = (v88 >> 7) & 3;
        v90 = *(_DWORD *)(v80 + 636);
        v91 = (v90 >> 7) & 3;
        if ((v90 & 0x200) != 0)
          v91 = 0;
        if (v89 == v91 && ((v90 ^ v88) & 0x400) == 0 && *(float *)(v79 + 260) == *(float *)(v80 + 260))
        {
          v92 = *(unsigned __int8 *)(v79 + 32);
          if (v92 == *(unsigned __int8 *)(v80 + 32) && (*(_BYTE *)(v79 + 33) != 0) == (*(_BYTE *)(v80 + 33) != 0))
          {
            if (v92 != 13)
            {
              v93 = (WebCore::Length *)(v79 + 28);
              if (v92 == 11)
              {
                if (!WebCore::Length::isCalculatedEqual(v93, (const WebCore::Length *)(v80 + 28)))
                  return 1;
                v79 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
                v80 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
              }
              else
              {
                if (*(_BYTE *)(v79 + 34))
                  v94 = *(float *)v93;
                else
                  v94 = (float)*(int *)v93;
                v95 = *(float *)(v80 + 28);
                if (!*(_BYTE *)(v80 + 34))
                  v95 = (float)SLODWORD(v95);
                if (v94 != v95)
                  return 1;
              }
            }
            v96 = *(unsigned __int8 *)(v79 + 40);
            if (v96 != *(unsigned __int8 *)(v80 + 40) || (*(_BYTE *)(v79 + 41) != 0) != (*(_BYTE *)(v80 + 41) != 0))
              return 1;
            if (v96 != 13)
            {
              v97 = (WebCore::Length *)(v79 + 36);
              if (v96 == 11)
              {
                if (!WebCore::Length::isCalculatedEqual(v97, (const WebCore::Length *)(v80 + 36)))
                  return 1;
                v79 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
                v80 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
              }
              else
              {
                if (*(_BYTE *)(v79 + 42))
                  v98 = *(float *)v97;
                else
                  v98 = (float)*(int *)v97;
                v99 = *(float *)(v80 + 36);
                if (!*(_BYTE *)(v80 + 42))
                  v99 = (float)SLODWORD(v99);
                if (v98 != v99)
                  return 1;
              }
            }
            if (((*(_DWORD *)(v80 + 636) ^ *(_DWORD *)(v79 + 636)) & 0x1ELL) == 0)
              goto LABEL_144;
          }
        }
      }
      return 1;
    }
    v22 = v20[1];
    v23 = v21[1];
    if (v22 != v23
      && (*(_DWORD *)(v22 + 64) != *(_DWORD *)(v23 + 64)
       || ((*(unsigned __int8 *)(v22 + 68) ^ *(unsigned __int8 *)(v23 + 68)) & 2) != 0))
    {
      return 4;
    }
    if ((*(_BYTE *)(a1 + 18) & 0x38) != 0)
    {
      v24 = v20[5];
      v25 = v21[5];
      if (v24 != v25)
      {
        if (!WebCore::operator==((unsigned __int8 *)(v24 + 96), (unsigned __int8 *)(v25 + 96))
          || (v20 = *(_QWORD **)(a1 + 8),
              v21 = *(_QWORD **)(a2 + 8),
              (((*(unsigned int *)(v21[5] + 636) | ((unint64_t)(*(unsigned __int16 *)(v21[5] + 640) | (*(unsigned __int8 *)(v21[5] + 642) << 16)) << 32)) ^ (*(unsigned int *)(v20[5] + 636) | ((unint64_t)(*(unsigned __int16 *)(v20[5] + 640) | (*(unsigned __int8 *)(v20[5] + 642) << 16)) << 32))) & 0x20000000000000) != 0))
        {
          *(_BYTE *)a3 |= 8u;
          return 4;
        }
      }
    }
    v26 = v20[4];
    v27 = v21[4];
    if (v26 == v27)
    {
LABEL_50:
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
      v33 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
      if (v32 != v33)
      {
        if (((*(_DWORD *)(v33 + 636) ^ *(_DWORD *)(v32 + 636)) & 0x1F00000) != 0)
          return 4;
        v40 = *(_QWORD *)(v32 + 72);
        v41 = *(_QWORD *)(v33 + 72);
        if (v40 != v41 && (WebCore::StyleFilterData::operator==(v40, v41) & 1) == 0)
          *(_BYTE *)a3 |= 4u;
        v42 = *(_QWORD *)(v32 + 216);
        v43 = *(_QWORD *)(v33 + 216);
        if (v42 != v43 && !WebCore::NinePieceImage::Data::operator==(v42, v43))
          return 4;
      }
      goto LABEL_51;
    }
    if (*(float *)(v26 + 4) != *(float *)(v27 + 4))
      *(_BYTE *)a3 |= 2u;
    v28 = *(_QWORD *)(v26 + 32);
    v29 = *(_QWORD *)(v27 + 32);
    if (v28 == v29)
    {
LABEL_49:
      v30 = *(_QWORD *)(v26 + 48);
      v31 = *(_QWORD *)(v27 + 48);
      if (v30 != v31 && !WebCore::FillLayer::operator==(v30, v31))
        return 4;
      goto LABEL_50;
    }
    v44 = *(unsigned int *)(v28 + 20);
    if ((_DWORD)v44 == *(_DWORD *)(v29 + 20))
    {
      v45 = *(_QWORD **)(v29 + 8);
      v46 = *(_QWORD **)(v28 + 8);
      v100 = v46;
      v101 = v45;
      if ((_DWORD)v44)
      {
        v47 = 8 * v44 - 8;
        while (1)
        {
          v48 = v47;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v46 + 24))(*v46, *v45))
            break;
          ++v46;
          ++v45;
          v47 = v48 - 8;
          if (!v48)
            goto LABEL_76;
        }
      }
      else
      {
LABEL_76:
        if (v46 == &v100[v44] && v45 == &v101[v44])
          goto LABEL_49;
      }
    }
    *(_BYTE *)a3 |= 4u;
    goto LABEL_49;
  }
  v6 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 24);
  v7 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 24);
  v8 = v6[12];
  if (v8 != v7[12] || (v6[13] != 0) != (v7[13] != 0))
    goto LABEL_86;
  if (v8 != 13)
  {
    if (v8 == 11)
    {
      v49 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 24);
      v50 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 24);
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v6 + 8), (const WebCore::Length *)(v7 + 8));
      v6 = v50;
      v7 = v49;
      if ((isCalculatedEqual & 1) == 0)
        goto LABEL_86;
    }
    else
    {
      v9 = *((float *)v6 + 2);
      if (!v6[14])
        v9 = (float)SLODWORD(v9);
      v10 = *((float *)v7 + 2);
      if (!v7[14])
        v10 = (float)SLODWORD(v10);
      if (v9 != v10)
        goto LABEL_86;
    }
  }
  v11 = v6[20];
  if (v11 != v7[20] || (v6[21] != 0) != (v7[21] != 0))
    goto LABEL_86;
  if (v11 != 13)
  {
    if (v11 == 11)
    {
      v52 = v7;
      v53 = v6;
      v54 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v6 + 16), (const WebCore::Length *)(v7 + 16));
      v6 = v53;
      v7 = v52;
      if ((v54 & 1) == 0)
        goto LABEL_86;
    }
    else
    {
      v12 = *((float *)v6 + 4);
      if (!v6[22])
        v12 = (float)SLODWORD(v12);
      v13 = *((float *)v7 + 4);
      if (!v7[22])
        v13 = (float)SLODWORD(v13);
      if (v12 != v13)
        goto LABEL_86;
    }
  }
  v14 = v6[28];
  if (v14 == v7[28] && (v6[29] != 0) == (v7[29] != 0))
  {
    if (v14 == 13)
      goto LABEL_30;
    if (v14 == 11)
    {
      v55 = v7;
      v56 = v6;
      v57 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v6 + 24), (const WebCore::Length *)(v7 + 24));
      v6 = v56;
      v7 = v55;
      if ((v57 & 1) != 0)
        goto LABEL_30;
    }
    else
    {
      v15 = *((float *)v6 + 6);
      if (!v6[30])
        v15 = (float)SLODWORD(v15);
      v16 = *((float *)v7 + 6);
      if (!v7[30])
        v16 = (float)SLODWORD(v16);
      if (v15 == v16)
      {
LABEL_30:
        v17 = v6[36];
        if (v17 == v7[36] && (v6[37] != 0) == (v7[37] != 0))
        {
          if (v17 == 13)
            goto LABEL_39;
          if (v17 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v6 + 32), (const WebCore::Length *)(v7 + 32)) & 1) != 0)
              goto LABEL_39;
          }
          else
          {
            v18 = *((float *)v6 + 8);
            if (!v6[38])
              v18 = (float)SLODWORD(v18);
            v19 = *((float *)v7 + 8);
            if (!v7[38])
              v19 = (float)SLODWORD(v19);
            if (v18 == v19)
              goto LABEL_39;
          }
        }
      }
    }
  }
LABEL_86:
  if ((*(_QWORD *)(a1 + 16) & 0x380000) != 0x100000)
    goto LABEL_39;
  v58 = *(_QWORD *)(a1 + 8);
  v59 = *(unsigned __int8 **)(v58 + 24);
  v60 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 24);
  v61 = v59[36];
  if (v61 != v60[36])
    goto LABEL_39;
  v62 = v59[20];
  if (v62 != v60[20])
    goto LABEL_39;
  v63 = v59[12];
  if (v63 != v60[12])
    goto LABEL_39;
  v64 = v59[28];
  if (v64 != v60[28])
    goto LABEL_39;
  v65 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 8) + 8);
  v66 = (v61 - 7) < 4 || v61 == 0;
  if (!v66 && (v61 - 5) >= 2)
  {
    v69 = v62 - 7 < 4 || v62 == 0;
    if (!v69 && v62 - 5 > 1)
      goto LABEL_39;
  }
  v67 = (v63 - 7) < 4 || v63 == 0;
  if (!v67 && (v63 - 5) >= 2)
  {
    v70 = (v64 - 7) < 4 || v64 == 0;
    if (!v70 && (v64 - 5) > 1)
      goto LABEL_39;
  }
  v68 = (v61 - 7) < 4 || v61 == 0;
  if (!v68 && (v61 - 5) > 1)
    goto LABEL_127;
  if (v62 >= 0xB)
  {
    if (v62 - 5 < 2)
      return 5;
    goto LABEL_127;
  }
  result = 5;
  if (((0x781u >> v62) & 1) == 0 && v62 - 5 > 1)
  {
LABEL_127:
    if ((v65 - 7) < 4 || !v65 || (v65 - 5) <= 1)
      goto LABEL_39;
    return 5;
  }
  return result;
}

BOOL WebCore::RenderStyle::changeRequiresLayout(WebCore::RenderStyle *this, WebCore::Length *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  WebCore::Length *v12;
  float v13;
  float v14;
  int v15;
  WebCore::Length *v16;
  float v17;
  float v18;
  int v19;
  WebCore::Length *v20;
  float v21;
  float v22;
  int v23;
  WebCore::Length *v24;
  float v25;
  float v26;
  int v27;
  WebCore::Length *v28;
  float v29;
  float v30;
  int v31;
  WebCore::Length *v32;
  float v33;
  float v34;
  unsigned int v35;
  int v36;
  int v37;
  WebCore::Length *v38;
  float v39;
  float v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  int v52;
  float v53;
  float v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  float v58;
  float v59;
  int v60;
  float v61;
  float v62;
  int v63;
  float v64;
  float v65;
  int v66;
  float v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  int v82;
  float v83;
  float v84;
  int v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::Length *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  WebCore::Length *v121;
  float v122;
  float v123;
  int v124;
  WebCore::Length *v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  WebCore::Length *v142;
  float v143;
  float v144;
  int v145;
  WebCore::Length *v146;
  float v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  const WTF::StringImpl *v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  WebCore::Length *v165;
  float v166;
  float v167;
  int v168;
  WebCore::Length *v169;
  float v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  __int16 v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  int v182;
  int v183;
  _BOOL8 result;
  int v185;
  int v186;
  _BYTE *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  WTF **v191;
  const WTF::StringImpl **v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  WebCore::Length *v204;
  float v205;
  float v206;
  uint64_t v207;
  uint64_t v208;
  WebCore::Length *v209;
  WebCore::Length *v210;
  BOOL v211;
  int v212;
  float v213;
  float v214;
  int v215;
  int v216;
  int v217;
  int v218;
  float v219;
  float v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  float v232;
  float v233;
  int v234;
  float v235;
  float v236;
  int v237;
  float v238;
  float v239;
  uint64_t v240;
  uint64_t v241;
  const WTF::StringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned __int8 *v247;
  unsigned __int8 *v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  float v252;
  float v253;
  int v254;
  float v255;
  float v256;
  int v257;
  float v258;
  float v259;
  int v260;
  float v261;
  float v262;
  int v263;
  float v264;
  float v265;
  uint64_t v266;
  uint64_t v267;
  WTF **v268;
  const WTF::StringImpl **v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  float v281;
  float v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  WebCore::Length *v291;
  float v292;
  float v293;
  int v294;
  float v295;
  float v296;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  char v303;
  float v304;
  char v305;
  WebCore::Length *v306;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  int v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  WTF::StringImpl **v329;
  WTF::StringImpl *v330;
  int v331;
  WTF::StringImpl *v332;
  uint64_t CachedPseudoStyle;
  WTF::StringImpl *v334;
  int v335;
  WTF::StringImpl *v336;
  const WTF::StringImpl *v337;
  uint64_t v338;
  char v339;
  char v340;
  WebCore::Length *v341;
  float v343;
  BOOL v344;
  float v345;
  uint64_t v346;
  uint64_t v347;
  char isCalculatedEqual;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  __int128 v355;
  __int128 v356;
  _DWORD v358[5];
  _DWORD v359[5];
  WebCore::RenderStyle *v360;
  WTF::StringImpl *v361;
  char v362;

  v3 = (uint64_t)a2;
  v5 = *((_QWORD *)this + 7);
  v6 = *((_QWORD *)a2 + 7);
  if (v5 != v6)
  {
    v189 = *(_QWORD *)(v5 + 32);
    v190 = *(_QWORD *)(v6 + 32);
    if (v189 != v190)
    {
      result = 1;
      if (*(float *)(v189 + 4) != *(float *)(v190 + 4)
        || (unsigned __int16)*(_DWORD *)(v189 + 8) != (unsigned __int16)*(_DWORD *)(v190 + 8))
      {
        return result;
      }
    }
    v191 = *(WTF ***)(v5 + 40);
    v192 = *(const WTF::StringImpl ***)(v6 + 40);
    if (v191 != v192 && !WebCore::StyleInheritedResourceData::operator==(v191, v192, a3)
      || ((*(_WORD *)(v6 + 4) ^ *(_WORD *)(v5 + 4)) & 0xFC30) != 0
      || ((*(_WORD *)(v6 + 8) ^ *(_WORD *)(v5 + 8)) & 0x3FF) != 0)
    {
      return 1;
    }
    v193 = *(_QWORD *)(v5 + 56);
    v194 = *(_QWORD *)(v6 + 56);
    result = 1;
    if (*(float *)(v193 + 40) != *(float *)(v194 + 40)
      || (unsigned __int16)*(_DWORD *)(v193 + 44) != (unsigned __int16)*(_DWORD *)(v194 + 44))
    {
      return result;
    }
    v195 = *(_QWORD *)(v5 + 64);
    v196 = *(_QWORD *)(v6 + 64);
    if (v195 != v196 && !WebCore::StyleLayoutData::operator==(v195, v196))
      return 1;
    v197 = *(_QWORD *)(v5 + 24);
    v198 = *(_QWORD *)(v6 + 24);
    if (*(unsigned __int8 *)(v197 + 80) != *(unsigned __int8 *)(v198 + 80))
      return 1;
    if (!WTF::equal(*(WTF **)(v197 + 40), *(const WTF::StringImpl **)(v198 + 40), a3))
      return 1;
    v200 = *(_QWORD *)(v5 + 24);
    v201 = *(_QWORD *)(v6 + 24);
    v202 = *(unsigned int *)(v200 + 76);
    if ((_DWORD)v202 != *(_DWORD *)(v201 + 76))
      return 1;
    if ((_DWORD)v202)
    {
      v283 = *(_QWORD *)(v200 + 64);
      v284 = *(_QWORD *)(v201 + 64);
      result = 1;
      if (*(float *)v283 != *(float *)v284
        || (unsigned __int16)*(_DWORD *)(v283 + 4) != (unsigned __int16)*(_DWORD *)(v284 + 4))
      {
        return result;
      }
      v285 = 0;
      v286 = v284 + 8;
      v287 = v283 + 8;
      while (v202 - 1 != v285)
      {
        v288 = v287 + 8 * v285;
        v289 = v286 + 8 * v285++;
        if (*(float *)v288 != *(float *)v289
          || (unsigned __int16)*(_DWORD *)(v288 + 4) != (unsigned __int16)*(_DWORD *)(v289 + 4))
        {
          if (v285 >= v202)
            break;
          return 1;
        }
      }
    }
    v203 = *(unsigned __int8 *)(v200 + 60);
    if (v203 != *(unsigned __int8 *)(v201 + 60) || (*(_BYTE *)(v200 + 61) != 0) != (*(_BYTE *)(v201 + 61) != 0))
      return 1;
    if (v203 != 13)
    {
      v204 = (WebCore::Length *)(v200 + 56);
      if (v203 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v204, (const WebCore::Length *)(v201 + 56)))
          return 1;
        v200 = *(_QWORD *)(v5 + 24);
        v201 = *(_QWORD *)(v6 + 24);
      }
      else
      {
        if (*(_BYTE *)(v200 + 62))
          v205 = *(float *)v204;
        else
          v205 = (float)*(int *)v204;
        v206 = *(float *)(v201 + 56);
        if (!*(_BYTE *)(v201 + 62))
          v206 = (float)SLODWORD(v206);
        if (v205 != v206)
          return 1;
      }
    }
    if (!WTF::equal(*(WTF **)(v200 + 48), *(const WTF::StringImpl **)(v201 + 48), v199)
      || *(unsigned __int8 *)(*(_QWORD *)(v5 + 24) + 81) != *(unsigned __int8 *)(*(_QWORD *)(v6 + 24) + 81)
      || ((*(unsigned __int16 *)(v6 + 8) ^ *(unsigned __int16 *)(v5 + 8)) & 0x400) != 0)
    {
      return 1;
    }
  }
  v7 = *((_QWORD *)this + 1);
  v8 = *(_QWORD *)(v3 + 8);
  if (v7 != v8)
  {
    v9 = *(unsigned __int8 **)(v7 + 8);
    v10 = *(unsigned __int8 **)(v8 + 8);
    if (v9 != v10)
    {
      v11 = v9[8];
      if (v11 != v10[8] || (v9[9] != 0) != (v10[9] != 0))
        return 1;
      if (v11 != 13)
      {
        v12 = (WebCore::Length *)(v9 + 4);
        if (v11 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v12, (const WebCore::Length *)(v10 + 4)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          v9 = *(unsigned __int8 **)(v7 + 8);
          v8 = *(_QWORD *)(v3 + 8);
          v10 = *(unsigned __int8 **)(v8 + 8);
        }
        else
        {
          if (v9[10])
            v13 = *(float *)v12;
          else
            v13 = (float)*(int *)v12;
          v14 = *((float *)v10 + 1);
          if (!v10[10])
            v14 = (float)SLODWORD(v14);
          if (v13 != v14)
            return 1;
        }
      }
      v15 = v9[24];
      if (v15 != v10[24] || (v9[25] != 0) != (v10[25] != 0))
        return 1;
      if (v15 != 13)
      {
        v16 = (WebCore::Length *)(v9 + 20);
        if (v15 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v16, (const WebCore::Length *)(v10 + 20)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          v9 = *(unsigned __int8 **)(v7 + 8);
          v8 = *(_QWORD *)(v3 + 8);
          v10 = *(unsigned __int8 **)(v8 + 8);
        }
        else
        {
          if (v9[26])
            v17 = *(float *)v16;
          else
            v17 = (float)*(int *)v16;
          v18 = *((float *)v10 + 5);
          if (!v10[26])
            v18 = (float)SLODWORD(v18);
          if (v17 != v18)
            return 1;
        }
      }
      v19 = v9[32];
      if (v19 != v10[32] || (v9[33] != 0) != (v10[33] != 0))
        return 1;
      if (v19 != 13)
      {
        v20 = (WebCore::Length *)(v9 + 28);
        if (v19 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v20, (const WebCore::Length *)(v10 + 28)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          v9 = *(unsigned __int8 **)(v7 + 8);
          v8 = *(_QWORD *)(v3 + 8);
          v10 = *(unsigned __int8 **)(v8 + 8);
        }
        else
        {
          if (v9[34])
            v21 = *(float *)v20;
          else
            v21 = (float)*(int *)v20;
          v22 = *((float *)v10 + 7);
          if (!v10[34])
            v22 = (float)SLODWORD(v22);
          if (v21 != v22)
            return 1;
        }
      }
      v23 = v9[16];
      if (v23 != v10[16] || (v9[17] != 0) != (v10[17] != 0))
        return 1;
      if (v23 != 13)
      {
        v24 = (WebCore::Length *)(v9 + 12);
        if (v23 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v24, (const WebCore::Length *)(v10 + 12)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          v9 = *(unsigned __int8 **)(v7 + 8);
          v8 = *(_QWORD *)(v3 + 8);
          v10 = *(unsigned __int8 **)(v8 + 8);
        }
        else
        {
          if (v9[18])
            v25 = *(float *)v24;
          else
            v25 = (float)*(int *)v24;
          v26 = *((float *)v10 + 3);
          if (!v10[18])
            v26 = (float)SLODWORD(v26);
          if (v25 != v26)
            return 1;
        }
      }
      v27 = v9[40];
      if (v27 != v10[40] || (v9[41] != 0) != (v10[41] != 0))
        return 1;
      if (v27 != 13)
      {
        v28 = (WebCore::Length *)(v9 + 36);
        if (v27 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v28, (const WebCore::Length *)(v10 + 36)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          v9 = *(unsigned __int8 **)(v7 + 8);
          v8 = *(_QWORD *)(v3 + 8);
          v10 = *(unsigned __int8 **)(v8 + 8);
        }
        else
        {
          if (v9[42])
            v29 = *(float *)v28;
          else
            v29 = (float)*(int *)v28;
          v30 = *((float *)v10 + 9);
          if (!v10[42])
            v30 = (float)SLODWORD(v30);
          if (v29 != v30)
            return 1;
        }
      }
      v31 = v9[48];
      if (v31 != v10[48] || (v9[49] != 0) != (v10[49] != 0))
        return 1;
      if (v31 != 13)
      {
        v32 = (WebCore::Length *)(v9 + 44);
        if (v31 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v32, (const WebCore::Length *)(v10 + 44)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          v9 = *(unsigned __int8 **)(v7 + 8);
          v8 = *(_QWORD *)(v3 + 8);
          v10 = *(unsigned __int8 **)(v8 + 8);
        }
        else
        {
          if (v9[50])
            v33 = *(float *)v32;
          else
            v33 = (float)*(int *)v32;
          v34 = *((float *)v10 + 11);
          if (!v10[50])
            v34 = (float)SLODWORD(v34);
          if (v33 != v34)
            return 1;
        }
      }
      v35 = v9[68];
      v36 = v10[68];
      if ((v36 ^ v35) > 0xF)
        return 1;
      v37 = v9[56];
      if (v37 != v10[56] || (v9[57] != 0) != (v10[57] != 0))
        return 1;
      if (v37 != 13)
      {
        v38 = (WebCore::Length *)(v9 + 52);
        if (v37 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual(v38, (const WebCore::Length *)(v10 + 52)))
            return 1;
          v7 = *((_QWORD *)this + 1);
          LOBYTE(v35) = *(_BYTE *)(*(_QWORD *)(v7 + 8) + 68);
          v8 = *(_QWORD *)(v3 + 8);
          LOBYTE(v36) = *(_BYTE *)(*(_QWORD *)(v8 + 8) + 68);
        }
        else
        {
          if (v9[58])
            v39 = *(float *)v38;
          else
            v39 = (float)*(int *)v38;
          v40 = *((float *)v10 + 13);
          if (!v10[58])
            v40 = (float)SLODWORD(v40);
          if (v39 != v40)
            return 1;
        }
      }
      if (((v36 ^ v35) & 4) != 0
        || ((v36 ^ v35) & 2) != 0)
      {
        return 1;
      }
    }
    v41 = *(unsigned __int8 **)(v7 + 24);
    v42 = *(unsigned __int8 **)(v8 + 24);
    if (v41 != v42)
    {
      v43 = v41[44];
      if (v43 != v42[44] || (v41[45] != 0) != (v42[45] != 0))
        return 1;
      if (v43 != 13)
      {
        if (v43 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v41 + 40), (const WebCore::Length *)(v42 + 40)) & 1) == 0)
            return 1;
        }
        else
        {
          v44 = *((float *)v41 + 10);
          if (!v41[46])
            v44 = (float)SLODWORD(v44);
          v45 = *((float *)v42 + 10);
          if (!v42[46])
            v45 = (float)SLODWORD(v45);
          if (v44 != v45)
            return 1;
        }
      }
      v46 = v41[52];
      if (v46 != v42[52] || (v41[53] != 0) != (v42[53] != 0))
        return 1;
      if (v46 != 13)
      {
        if (v46 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v41 + 48), (const WebCore::Length *)(v42 + 48)) & 1) == 0)
            return 1;
        }
        else
        {
          v47 = *((float *)v41 + 12);
          if (!v41[54])
            v47 = (float)SLODWORD(v47);
          v48 = *((float *)v42 + 12);
          if (!v42[54])
            v48 = (float)SLODWORD(v48);
          if (v47 != v48)
            return 1;
        }
      }
      v49 = v41[60];
      if (v49 != v42[60] || (v41[61] != 0) != (v42[61] != 0))
        return 1;
      if (v49 != 13)
      {
        if (v49 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v41 + 56), (const WebCore::Length *)(v42 + 56)) & 1) == 0)
            return 1;
        }
        else
        {
          v50 = *((float *)v41 + 14);
          if (!v41[62])
            v50 = (float)SLODWORD(v50);
          v51 = *((float *)v42 + 14);
          if (!v42[62])
            v51 = (float)SLODWORD(v51);
          if (v50 != v51)
            return 1;
        }
      }
      v52 = v41[68];
      if (v52 != v42[68] || (v41[69] != 0) != (v42[69] != 0))
        return 1;
      if (v52 != 13)
      {
        if (v52 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v41 + 64), (const WebCore::Length *)(v42 + 64)) & 1) == 0)
            return 1;
        }
        else
        {
          v53 = *((float *)v41 + 16);
          if (!v41[70])
            v53 = (float)SLODWORD(v53);
          v54 = *((float *)v42 + 16);
          if (!v42[70])
            v54 = (float)SLODWORD(v54);
          if (v53 != v54)
            return 1;
        }
      }
      v55 = *(unsigned __int8 **)(*((_QWORD *)this + 1) + 24);
      v56 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 8) + 24);
      v57 = v55[76];
      if (v57 != v56[76] || (v55[77] != 0) != (v56[77] != 0))
        return 1;
      if (v57 != 13)
      {
        if (v57 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v55 + 72), (const WebCore::Length *)(v56 + 72)) & 1) == 0)
            return 1;
        }
        else
        {
          v58 = *((float *)v55 + 18);
          if (!v55[78])
            v58 = (float)SLODWORD(v58);
          v59 = *((float *)v56 + 18);
          if (!v56[78])
            v59 = (float)SLODWORD(v59);
          if (v58 != v59)
            return 1;
        }
      }
      v60 = v55[84];
      if (v60 != v56[84] || (v55[85] != 0) != (v56[85] != 0))
        return 1;
      if (v60 != 13)
      {
        if (v60 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v55 + 80), (const WebCore::Length *)(v56 + 80)) & 1) == 0)
            return 1;
        }
        else
        {
          v61 = *((float *)v55 + 20);
          if (!v55[86])
            v61 = (float)SLODWORD(v61);
          v62 = *((float *)v56 + 20);
          if (!v56[86])
            v62 = (float)SLODWORD(v62);
          if (v61 != v62)
            return 1;
        }
      }
      v63 = v55[92];
      if (v63 != v56[92] || (v55[93] != 0) != (v56[93] != 0))
        return 1;
      if (v63 != 13)
      {
        if (v63 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v55 + 88), (const WebCore::Length *)(v56 + 88)) & 1) == 0)
            return 1;
        }
        else
        {
          v64 = *((float *)v55 + 22);
          if (!v55[94])
            v64 = (float)SLODWORD(v64);
          v65 = *((float *)v56 + 22);
          if (!v56[94])
            v65 = (float)SLODWORD(v65);
          if (v64 != v65)
            return 1;
        }
      }
      v66 = v55[100];
      if (v66 != v56[100] || (v55[101] != 0) != (v56[101] != 0))
        return 1;
      if (v66 != 13)
      {
        if (v66 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v55 + 96), (const WebCore::Length *)(v56 + 96)) & 1) == 0)
            return 1;
        }
        else
        {
          v67 = *((float *)v55 + 24);
          if (!v55[102])
            v67 = (float)SLODWORD(v67);
          v68 = *((float *)v56 + 24);
          if (!v56[102])
            v68 = (float)SLODWORD(v68);
          if (v67 != v68)
            return 1;
        }
      }
      v69 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      v70 = 0.0;
      v71 = 0.0;
      if ((*(_BYTE *)(v69 + 124) & 0xE) != 0)
      {
        v225 = *(_QWORD *)(v69 + 200);
        if (*(_BYTE *)(v225 + 5) && *(_BYTE *)(v225 + 76) == 4)
        {
          if (*(_BYTE *)(v225 + 78))
            v71 = *(float *)(v225 + 72);
          else
            v71 = (float)*(int *)(v225 + 72);
        }
        else
        {
          v71 = *(float *)(v69 + 120);
        }
      }
      v72 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
      if ((*(_BYTE *)(v72 + 124) & 0xE) != 0)
      {
        v226 = *(_QWORD *)(v72 + 200);
        if (*(_BYTE *)(v226 + 5) && *(_BYTE *)(v226 + 76) == 4)
        {
          if (*(_BYTE *)(v226 + 78))
            v70 = *(float *)(v226 + 72);
          else
            v70 = (float)*(int *)(v226 + 72);
        }
        else
        {
          v70 = *(float *)(v72 + 120);
        }
      }
      if (v71 != v70)
        return 1;
      v73 = 0.0;
      v74 = 0.0;
      if ((*(_BYTE *)(v69 + 172) & 0xE) != 0)
      {
        v227 = *(_QWORD *)(v69 + 200);
        if (*(_BYTE *)(v227 + 5) && *(_BYTE *)(v227 + 52) == 4)
        {
          if (*(_BYTE *)(v227 + 54))
            v74 = *(float *)(v227 + 48);
          else
            v74 = (float)*(int *)(v227 + 48);
        }
        else
        {
          v74 = *(float *)(v69 + 168);
        }
      }
      if ((*(_BYTE *)(v72 + 172) & 0xE) != 0)
      {
        v228 = *(_QWORD *)(v72 + 200);
        if (*(_BYTE *)(v228 + 5) && *(_BYTE *)(v228 + 52) == 4)
        {
          if (*(_BYTE *)(v228 + 54))
            v73 = *(float *)(v228 + 48);
          else
            v73 = (float)*(int *)(v228 + 48);
        }
        else
        {
          v73 = *(float *)(v72 + 168);
        }
      }
      if (v74 != v73)
        return 1;
      v75 = 0.0;
      v76 = 0.0;
      if ((*(_BYTE *)(v69 + 196) & 0xE) != 0)
      {
        v207 = *(_QWORD *)(v69 + 200);
        if (*(_BYTE *)(v207 + 5) && *(_BYTE *)(v207 + 68) == 4)
        {
          if (*(_BYTE *)(v207 + 70))
            v76 = *(float *)(v207 + 64);
          else
            v76 = (float)*(int *)(v207 + 64);
        }
        else
        {
          v76 = *(float *)(v69 + 192);
        }
      }
      if ((*(_BYTE *)(v72 + 196) & 0xE) != 0)
      {
        v208 = *(_QWORD *)(v72 + 200);
        if (*(_BYTE *)(v208 + 5) && *(_BYTE *)(v208 + 68) == 4)
        {
          if (*(_BYTE *)(v208 + 70))
            v75 = *(float *)(v208 + 64);
          else
            v75 = (float)*(int *)(v208 + 64);
        }
        else
        {
          v75 = *(float *)(v72 + 192);
        }
      }
      if (v76 != v75)
        return 1;
      v77 = 0.0;
      v78 = 0.0;
      if ((*(_BYTE *)(v69 + 148) & 0xE) != 0)
      {
        v223 = *(_QWORD *)(v69 + 200);
        if (*(_BYTE *)(v223 + 5) && *(_BYTE *)(v223 + 60) == 4)
        {
          if (*(_BYTE *)(v223 + 62))
            v78 = *(float *)(v223 + 56);
          else
            v78 = (float)*(int *)(v223 + 56);
        }
        else
        {
          v78 = *(float *)(v69 + 144);
        }
      }
      if ((*(_BYTE *)(v72 + 148) & 0xE) != 0)
      {
        v224 = *(_QWORD *)(v72 + 200);
        if (*(_BYTE *)(v224 + 5) && *(_BYTE *)(v224 + 60) == 4)
        {
          if (*(_BYTE *)(v224 + 62))
            v77 = *(float *)(v224 + 56);
          else
            v77 = (float)*(int *)(v224 + 56);
        }
        else
        {
          v77 = *(float *)(v72 + 144);
        }
      }
      if (v78 != v77)
        return 1;
      if ((*((_BYTE *)this + 18) & 0x38) != 0)
      {
        v79 = *(unsigned __int8 *)(v69 + 12);
        if (v79 != *(unsigned __int8 *)(v72 + 12) || (*(_BYTE *)(v69 + 13) != 0) != (*(_BYTE *)(v72 + 13) != 0))
          goto LABEL_744;
        if (v79 != 13)
        {
          if (v79 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v69 + 8), (const WebCore::Length *)(v72 + 8)) & 1) == 0)
              goto LABEL_744;
          }
          else
          {
            v80 = *(float *)(v69 + 8);
            if (!*(_BYTE *)(v69 + 14))
              v80 = (float)SLODWORD(v80);
            v81 = *(float *)(v72 + 8);
            if (!*(_BYTE *)(v72 + 14))
              v81 = (float)SLODWORD(v81);
            if (v80 != v81)
              goto LABEL_744;
          }
        }
        v82 = *(unsigned __int8 *)(v69 + 20);
        if (v82 != *(unsigned __int8 *)(v72 + 20) || (*(_BYTE *)(v69 + 21) != 0) != (*(_BYTE *)(v72 + 21) != 0))
          goto LABEL_744;
        if (v82 != 13)
        {
          if (v82 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v69 + 16), (const WebCore::Length *)(v72 + 16)) & 1) == 0)
              goto LABEL_744;
          }
          else
          {
            v83 = *(float *)(v69 + 16);
            if (!*(_BYTE *)(v69 + 22))
              v83 = (float)SLODWORD(v83);
            v84 = *(float *)(v72 + 16);
            if (!*(_BYTE *)(v72 + 22))
              v84 = (float)SLODWORD(v84);
            if (v83 != v84)
              goto LABEL_744;
          }
        }
        v85 = *(unsigned __int8 *)(v69 + 28);
        if (v85 == *(unsigned __int8 *)(v72 + 28) && (*(_BYTE *)(v69 + 29) != 0) == (*(_BYTE *)(v72 + 29) != 0))
        {
          if (v85 == 13)
            goto LABEL_183;
          if (v85 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v69 + 24), (const WebCore::Length *)(v72 + 24)) & 1) != 0)
              goto LABEL_183;
          }
          else
          {
            v86 = *(float *)(v69 + 24);
            if (!*(_BYTE *)(v69 + 30))
              v86 = (float)SLODWORD(v86);
            v87 = *(float *)(v72 + 24);
            if (!*(_BYTE *)(v72 + 30))
              v87 = (float)SLODWORD(v87);
            if (v86 == v87)
            {
LABEL_183:
              v88 = *(unsigned __int8 *)(v69 + 36);
              if (v88 == *(unsigned __int8 *)(v72 + 36) && (*(_BYTE *)(v69 + 37) != 0) == (*(_BYTE *)(v72 + 37) != 0))
              {
                if (v88 == 13)
                  goto LABEL_192;
                if (v88 == 11)
                {
                  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v69 + 32), (const WebCore::Length *)(v72 + 32)) & 1) != 0)goto LABEL_192;
                }
                else
                {
                  v89 = *(float *)(v69 + 32);
                  if (!*(_BYTE *)(v69 + 38))
                    v89 = (float)SLODWORD(v89);
                  v90 = *(float *)(v72 + 32);
                  if (!*(_BYTE *)(v72 + 38))
                    v90 = (float)SLODWORD(v90);
                  if (v89 == v90)
                    goto LABEL_192;
                }
              }
            }
          }
        }
LABEL_744:
        if ((*((_QWORD *)this + 2) & 0x380000) != 0x100000)
          return 1;
        v314 = *((_QWORD *)this + 1);
        v315 = *(unsigned __int8 **)(v314 + 24);
        v316 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 8) + 24);
        v317 = v315[36];
        if (v317 != v316[36])
          return 1;
        v318 = v315[20];
        if (v318 != v316[20])
          return 1;
        v319 = v315[12];
        if (v319 != v316[12])
          return 1;
        v320 = v315[28];
        if (v320 != v316[28])
          return 1;
        v321 = *(unsigned __int8 *)(*(_QWORD *)(v314 + 8) + 8);
        if ((v317 - 7) >= 4
          && v317
          && (v317 - 5) >= 2
          && (v318 - 7) >= 4
          && v318
          && (v318 - 5) > 1)
        {
          return 1;
        }
        if ((v319 - 7) >= 4
          && v319
          && (v319 - 5) >= 2
          && (v320 - 7) >= 4
          && v320
          && (v320 - 5) > 1)
        {
          return 1;
        }
        if ((v317 - 7) >= 4 && v317 && (v317 - 5) > 1
          || (v318 - 7) >= 4 && v318 && (v318 - 5) >= 2)
        {
          if (v321 >= 0xB)
          {
            if (v321 - 5 < 2)
              return 1;
          }
          else
          {
            result = 1;
            if (((0x781u >> v321) & 1) != 0 || v321 - 5 <= 1)
              return result;
          }
        }
      }
    }
  }
LABEL_192:
  v91 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v92 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 32);
  if (v91 != v92)
  {
    v93 = *(WebCore::Length **)(v91 + 88);
    a2 = *(WebCore::Length **)(v92 + 88);
    if (v93 != a2)
    {
      if (!v93 || a2 == 0)
        return 1;
      *(_QWORD *)&v356 = *(_QWORD *)(v92 + 88);
      *((_QWORD *)&v356 + 1) = *(_QWORD *)(v91 + 88);
      if (!WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(v93, a2))return 1;
      while (1)
      {
        v306 = *(WebCore::Length **)(v356 + 56);
        *(_QWORD *)&v356 = v306;
        *((_QWORD *)&v356 + 1) = *(_QWORD *)(*((_QWORD *)&v356 + 1) + 56);
        if (!*((_QWORD *)&v356 + 1) || v306 == 0)
          break;
        v305 = WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(*((WebCore::Length **)&v356 + 1), v306);
        result = 1;
        if ((v305 & 1) == 0)
          return result;
      }
      if (v356 != 0)
        return 1;
    }
  }
  v94 = *((_QWORD *)this + 3);
  v95 = *(_QWORD *)(v3 + 24);
  if (v94 != v95)
  {
    v209 = *(WebCore::Length **)(v94 + 160);
    v210 = *(WebCore::Length **)(v95 + 160);
    if (v209 != v210)
    {
      *(_QWORD *)&v355 = v210;
      *((_QWORD *)&v355 + 1) = v209;
      v211 = !v209 || v210 == 0;
      if (v211
        || !WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(v209, v210))
      {
        return 1;
      }
      while (1)
      {
        v341 = *(WebCore::Length **)(v355 + 56);
        *(_QWORD *)&v355 = v341;
        *((_QWORD *)&v355 + 1) = *(_QWORD *)(*((_QWORD *)&v355 + 1) + 56);
        if (!*((_QWORD *)&v355 + 1) || v341 == 0)
          break;
        v340 = WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(*((WebCore::Length **)&v355 + 1), v341);
        result = 1;
        if ((v340 & 1) == 0)
          return result;
      }
      if (v355 != 0)
        return 1;
    }
  }
  if (((*(_DWORD *)(v3 + 40) ^ *((_DWORD *)this + 10)) & 0x78000) != 0)
    goto LABEL_779;
  v96 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v97 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 40);
  if (((*(_DWORD *)(v97 + 636) ^ *(_DWORD *)(v96 + 636)) & 0x7000) != 0)
    goto LABEL_779;
  v98 = *(unsigned __int8 *)(v96 + 448);
  if (v98 >= 2)
  {
    if (v98 == 2
      && (*(_BYTE *)(v97 + 448) != 2
       || !WebCore::Length::operator==((unsigned __int8 *)(v96 + 452), (unsigned __int8 *)(v97 + 452))))
    {
      goto LABEL_779;
    }
  }
  else if (v98 != *(unsigned __int8 *)(v97 + 448))
  {
    goto LABEL_779;
  }
  v99 = *((_QWORD *)this + 3);
  v100 = *(_QWORD *)(v99 + 188);
  v101 = *(_QWORD *)(v3 + 24);
  v102 = *(_QWORD *)(v101 + 188);
  v103 = v102 & 0xFF00000000;
  if ((v100 & 0xFF00000000) == 0 || v103 == 0)
  {
    if (((v100 & 0xFF00000000) != 0) == (v103 != 0))
      goto LABEL_207;
LABEL_779:
    v322 = *((_QWORD *)this + 3);
    v323 = *(_DWORD *)(v322 + 236) & 7;
    if (v323 == 1
      || ((*((_DWORD *)this + 11) >> 13) & 6u) - 2 <= 3
      && ((v323 - 3) < 2 || !v323 && !*(_BYTE *)(v322 + 192)))
    {
      return 1;
    }
    v324 = *(_QWORD *)(v3 + 24);
    v325 = *(_DWORD *)(v324 + 236) & 7;
    if (v325 == 1
      || ((*(_DWORD *)(v3 + 44) >> 13) & 6u) - 2 <= 3
      && ((v325 - 3) < 2 || !v325 && !*(_BYTE *)(v324 + 192)))
    {
      return 1;
    }
    if ((*((_DWORD *)this + 10) & 0x8000) != 0)
    {
      v360 = this;
      LOBYTE(v361) = 0;
      v362 = 0;
      v326 = COERCE_UNSIGNED_INT(WebCore::computedUnderlineOffset((uint64_t)&v360, a2)) | 0x100000000;
    }
    else
    {
      v326 = 0;
    }
    WebCore::computedVisualOverflowForDecorations((uint64_t)v359, this, v326);
    if ((*(_DWORD *)(v3 + 40) & 0x8000) != 0)
    {
      v360 = (WebCore::RenderStyle *)v3;
      LOBYTE(v361) = 0;
      v362 = 0;
      v328 = COERCE_UNSIGNED_INT(WebCore::computedUnderlineOffset((uint64_t)&v360, v327)) | 0x100000000;
    }
    else
    {
      v328 = 0;
    }
    WebCore::computedVisualOverflowForDecorations((uint64_t)v358, (WebCore::RenderStyle *)v3, v328);
    if (v359[0] != v358[0] || v359[1] != v358[1] || v359[2] != v358[2] || v359[3] != v358[3])
      return 1;
    goto LABEL_212;
  }
  if (*(float *)&v100 != *(float *)&v102)
    goto LABEL_779;
LABEL_207:
  if (((*(_DWORD *)(v101 + 236) ^ *(_DWORD *)(v99 + 236)) & 7) != 0)
    goto LABEL_779;
  v105 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  if ((*(_BYTE *)(v105 + 52) & 0x1E) == 0x10
    || (*(_BYTE *)(v105 + 52) & 0xE) == 0
    || ((v349 = *(float *)(v105 + 48), v349 >= 3.0) ? (v350 = *(float *)(v105 + 48)) : (v350 = 3.0),
        (*(_BYTE *)(v105 + 52) & 0x10) != 0 ? (v351 = v350) : (v351 = *(float *)(v105 + 48)),
        v351 <= 0.0))
  {
    v106 = 0;
    goto LABEL_210;
  }
  v352 = *(float *)(v105 + 56);
  if ((*(_BYTE *)(v105 + 52) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v105 + 52) & 0x10) == 0)
      goto LABEL_935;
    v353 = v349 + -3.0;
    v344 = v349 < 3.0;
    v354 = 0.0;
    if (!v344)
      v354 = v353;
LABEL_958:
    if (v354 < 0.0)
      v354 = 0.0;
    v352 = v352 + v354;
    v349 = v350;
    goto LABEL_935;
  }
  v350 = 0.0;
  if ((*(_BYTE *)(v105 + 52) & 0x10) != 0)
  {
    v354 = -3.0;
    goto LABEL_958;
  }
  v349 = 0.0;
LABEL_935:
  v106 = (float)(v349 + v352) > 0.0;
LABEL_210:
  v107 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
  if ((*(_BYTE *)(v107 + 52) & 0xE) != 0)
  {
    v298 = *(float *)(v107 + 48);
    v299 = v298 >= 3.0 ? *(float *)(v107 + 48) : 3.0;
    v300 = (*(_BYTE *)(v107 + 52) & 0x10) != 0 ? v299 : *(float *)(v107 + 48);
    if (v300 > 0.0)
    {
      v301 = *(float *)(v107 + 56);
      if ((*(_BYTE *)(v107 + 52) & 0xF) != 0)
      {
        if ((*(_BYTE *)(v107 + 52) & 0x10) == 0)
          goto LABEL_675;
        v343 = v298 + -3.0;
        v344 = v298 < 3.0;
        v345 = 0.0;
        if (!v344)
          v345 = v343;
      }
      else
      {
        v299 = 0.0;
        if ((*(_BYTE *)(v107 + 52) & 0x10) == 0)
        {
          v298 = 0.0;
          goto LABEL_675;
        }
        v345 = -3.0;
      }
      if (v345 < 0.0)
        v345 = 0.0;
      v301 = v301 + v345;
      v298 = v299;
LABEL_675:
      v302 = v298 + v301;
      if (((v106 ^ (v302 > 0.0)) & 1) != 0)
        return 1;
      v303 = !v106;
      if (v302 <= 0.0)
        v303 = 1;
      if ((v303 & 1) == 0)
      {
        v304 = WebCore::RenderStyle::outlineSize(this);
        if (v304 != WebCore::RenderStyle::outlineSize((WebCore::RenderStyle *)v3))
          return 1;
      }
      goto LABEL_212;
    }
  }
  if (v106)
    return 1;
LABEL_212:
  v108 = *((_QWORD *)this + 1);
  v109 = *(_QWORD *)(v3 + 8);
  if (v108 != v109)
  {
    v110 = *(_QWORD *)(v108 + 32);
    v111 = *(_QWORD *)(v109 + 32);
    if (v110 == v111)
      goto LABEL_272;
    if (((*(_DWORD *)(v111 + 148) ^ *(_DWORD *)(v110 + 148)) & 0x3FC000) != 0)
      return 1;
    v112 = *(_QWORD *)(v110 + 8);
    v113 = *(_QWORD *)(v111 + 8);
    if (v112 != v113
      && (*(float *)(v112 + 4) != *(float *)(v113 + 4)
       || *(_DWORD *)(v112 + 8) != *(_DWORD *)(v113 + 8)
       || *(_DWORD *)(v112 + 12) != *(_DWORD *)(v113 + 12)
       || ((*(_BYTE *)(v113 + 16) ^ *(_BYTE *)(v112 + 16)) & 0x7F) != 0))
    {
      return 1;
    }
    v114 = *(_QWORD *)(v110 + 16);
    v115 = *(_QWORD *)(v111 + 16);
    if (v114 != v115)
    {
      if (*(float *)(v114 + 4) != *(float *)(v115 + 4))
        return 1;
      if (*(float *)(v114 + 8) != *(float *)(v115 + 8))
        return 1;
      v290 = *(unsigned __int8 *)(v114 + 16);
      if (v290 != *(unsigned __int8 *)(v115 + 16) || (*(_BYTE *)(v114 + 17) != 0) != (*(_BYTE *)(v115 + 17) != 0))
        return 1;
      if (v290 != 13)
      {
        v291 = (WebCore::Length *)(v114 + 12);
        if (v290 == 11)
        {
          v346 = *(_QWORD *)(v110 + 16);
          v347 = *(_QWORD *)(v111 + 16);
          isCalculatedEqual = WebCore::Length::isCalculatedEqual(v291, (const WebCore::Length *)(v115 + 12));
          v115 = v347;
          v114 = v346;
          if ((isCalculatedEqual & 1) == 0)
            return 1;
        }
        else
        {
          if (*(_BYTE *)(v114 + 18))
            v292 = *(float *)v291;
          else
            v292 = (float)*(int *)v291;
          v293 = *(float *)(v115 + 12);
          if (!*(_BYTE *)(v115 + 18))
            v293 = (float)SLODWORD(v293);
          if (v292 != v293)
            return 1;
        }
      }
      if (((*(_BYTE *)(v115 + 20) ^ *(_BYTE *)(v114 + 20)) & 0xF) != 0)
        return 1;
    }
    if (*(_DWORD *)(v110 + 144) != *(_DWORD *)(v111 + 144))
      return 1;
    if (((*(_WORD *)(v111 + 120) ^ *(_WORD *)(v110 + 120)) & 0x1FF) != 0)
      return 1;
    if (((*(_BYTE *)(v111 + 124) ^ *(_BYTE *)(v110 + 124)) & 0x7F) != 0)
      return 1;
    if (((*(_BYTE *)(v111 + 125) ^ *(_BYTE *)(v110 + 125)) & 0x7F) != 0)
      return 1;
    if (((*(_WORD *)(v111 + 122) ^ *(_WORD *)(v110 + 122)) & 0x1FF) != 0)
      return 1;
    if (((*(_BYTE *)(v111 + 126) ^ *(_BYTE *)(v110 + 126)) & 0x7F) != 0)
      return 1;
    if (((*(_BYTE *)(v111 + 127) ^ *(_BYTE *)(v110 + 127)) & 0x7F) != 0)
      return 1;
    v116 = *(_QWORD *)(v110 + 24);
    v117 = *(_QWORD *)(v111 + 24);
    if (v116 != v117 && !WebCore::StyleMultiColData::operator==(v116, v117))
      return 1;
    v118 = *(_QWORD *)(v110 + 40);
    v119 = *(_QWORD *)(v111 + 40);
    if (v118 == v119)
    {
LABEL_266:
      if (*(float *)(v110 + 4) < 1.0 != *(float *)(v111 + 4) < 1.0
        || (*(_DWORD *)(*(_QWORD *)(v110 + 32) + 20) != 0) != (*(_DWORD *)(*(_QWORD *)(v111 + 32) + 20) != 0)
        || ((*(_DWORD *)(v111 + 148) ^ *(_DWORD *)(v110 + 148)) & 0x60) != 0
        || *(double *)(v110 + 104) != *(double *)(v111 + 104)
        || *(double *)(v110 + 112) != *(double *)(v111 + 112))
      {
        return 1;
      }
      v108 = *((_QWORD *)this + 1);
      v109 = *(_QWORD *)(v3 + 8);
LABEL_272:
      v135 = *(_QWORD *)(v108 + 40);
      v136 = *(_QWORD *)(v109 + 40);
      if (v135 == v136)
        goto LABEL_273;
      if ((*(_BYTE *)(v135 + 44) == 0) == (*(_BYTE *)(v136 + 44) != 0)
        || *(_DWORD *)(v135 + 48) != *(_DWORD *)(v136 + 48))
      {
        return 1;
      }
      result = 1;
      if (*(_DWORD *)(v135 + 52) != *(_DWORD *)(v136 + 52))
        return result;
      if (*(_DWORD *)(v135 + 56) != *(_DWORD *)(v136 + 56))
        return result;
      v231 = *(unsigned __int8 *)(v135 + 252);
      if (v231 != *(unsigned __int8 *)(v136 + 252) || (*(_BYTE *)(v135 + 253) != 0) != (*(_BYTE *)(v136 + 253) != 0))
        return result;
      if (v231 != 13)
      {
        if (v231 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 248), (const WebCore::Length *)(v136 + 248)) & 1) == 0)return 1;
        }
        else
        {
          v232 = *(float *)(v135 + 248);
          if (!*(_BYTE *)(v135 + 254))
            v232 = (float)SLODWORD(v232);
          v233 = *(float *)(v136 + 248);
          if (!*(_BYTE *)(v136 + 254))
            v233 = (float)SLODWORD(v233);
          if (v232 != v233)
            return result;
        }
      }
      if (*(unsigned __int8 *)(v135 + 376) != *(unsigned __int8 *)(v136 + 376))
        return 1;
      v234 = *(unsigned __int8 *)(v135 + 384);
      if (v234 != *(unsigned __int8 *)(v136 + 384) || (*(_BYTE *)(v135 + 385) != 0) != (*(_BYTE *)(v136 + 385) != 0))
        return 1;
      if (v234 != 13)
      {
        if (v234 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 380), (const WebCore::Length *)(v136 + 380)) & 1) == 0)return 1;
        }
        else
        {
          v235 = *(float *)(v135 + 380);
          if (!*(_BYTE *)(v135 + 386))
            v235 = (float)SLODWORD(v235);
          v236 = *(float *)(v136 + 380);
          if (!*(_BYTE *)(v136 + 386))
            v236 = (float)SLODWORD(v236);
          if (v235 != v236)
            return 1;
        }
      }
      if (*(unsigned __int8 *)(v135 + 388) != *(unsigned __int8 *)(v136 + 388))
        return 1;
      v237 = *(unsigned __int8 *)(v135 + 396);
      if (v237 != *(unsigned __int8 *)(v136 + 396) || (*(_BYTE *)(v135 + 397) != 0) != (*(_BYTE *)(v136 + 397) != 0))
        return 1;
      if (v237 != 13)
      {
        if (v237 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 392), (const WebCore::Length *)(v136 + 392)) & 1) == 0)return 1;
        }
        else
        {
          v238 = *(float *)(v135 + 392);
          if (!*(_BYTE *)(v135 + 398))
            v238 = (float)SLODWORD(v238);
          v239 = *(float *)(v136 + 392);
          if (!*(_BYTE *)(v136 + 398))
            v239 = (float)SLODWORD(v239);
          if (v238 != v239)
            return 1;
        }
      }
      v240 = *(_QWORD *)(v135 + 208);
      v241 = *(_QWORD *)(v136 + 208);
      if (v240 != v241)
      {
        result = 1;
        if (!v240 || !v241)
          return result;
        if (!WebCore::StyleReflection::operator==(*(_QWORD *)(v135 + 208), v241))
          return 1;
      }
      if (!WTF::operator==<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>((_QWORD **)(v135 + 192), (uint64_t *)(v136 + 192)))return 1;
      v243 = *(_QWORD *)(v135 + 312);
      v244 = *(_QWORD *)(v136 + 312);
      if (v243 != v244 && (!v243 || !v244 || !WebCore::ScaleTransformOperation::operator==(v243, v244))
        || (v245 = *(_QWORD *)(v135 + 304), v246 = *(_QWORD *)(v136 + 304), v245 != v246)
        && (!v245 || !v246 || !WebCore::RotateTransformOperation::operator==(v245, v246))
        || (v247 = *(unsigned __int8 **)(v135 + 320), v248 = *(unsigned __int8 **)(v136 + 320), v247 != v248)
        && (!v247 || !v248 || (WebCore::TranslateTransformOperation::operator==(v247, v248) & 1) == 0))
      {
        *(_BYTE *)a3 |= 1u;
      }
      v249 = *(_QWORD *)(v135 + 328);
      v250 = *(_QWORD *)(v136 + 328);
      if (v249 != v250 && (!v249 || !v250 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v249 + 24))(v249)))
        goto LABEL_823;
      v251 = *(unsigned __int8 *)(v135 + 412);
      if (v251 != *(unsigned __int8 *)(v136 + 412) || (*(_BYTE *)(v135 + 413) != 0) != (*(_BYTE *)(v136 + 413) != 0))
        goto LABEL_823;
      if (v251 != 13)
      {
        if (v251 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 408), (const WebCore::Length *)(v136 + 408)) & 1) == 0)goto LABEL_823;
        }
        else
        {
          v252 = *(float *)(v135 + 408);
          if (!*(_BYTE *)(v135 + 414))
            v252 = (float)SLODWORD(v252);
          v253 = *(float *)(v136 + 408);
          if (!*(_BYTE *)(v136 + 414))
            v253 = (float)SLODWORD(v253);
          if (v252 != v253)
            goto LABEL_823;
        }
      }
      v254 = *(unsigned __int8 *)(v135 + 420);
      if (v254 != *(unsigned __int8 *)(v136 + 420) || (*(_BYTE *)(v135 + 421) != 0) != (*(_BYTE *)(v136 + 421) != 0))
        goto LABEL_823;
      if (v254 != 13)
      {
        if (v254 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 416), (const WebCore::Length *)(v136 + 416)) & 1) == 0)goto LABEL_823;
        }
        else
        {
          v255 = *(float *)(v135 + 416);
          if (!*(_BYTE *)(v135 + 422))
            v255 = (float)SLODWORD(v255);
          v256 = *(float *)(v136 + 416);
          if (!*(_BYTE *)(v136 + 422))
            v256 = (float)SLODWORD(v256);
          if (v255 != v256)
            goto LABEL_823;
        }
      }
      v257 = *(unsigned __int8 *)(v135 + 404);
      if (v257 != *(unsigned __int8 *)(v136 + 404) || (*(_BYTE *)(v135 + 405) != 0) != (*(_BYTE *)(v136 + 405) != 0))
        goto LABEL_823;
      if (v257 != 13)
      {
        if (v257 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 400), (const WebCore::Length *)(v136 + 400)) & 1) == 0)goto LABEL_823;
        }
        else
        {
          v258 = *(float *)(v135 + 400);
          if (!*(_BYTE *)(v135 + 406))
            v258 = (float)SLODWORD(v258);
          v259 = *(float *)(v136 + 400);
          if (!*(_BYTE *)(v136 + 406))
            v259 = (float)SLODWORD(v259);
          if (v258 != v259)
            goto LABEL_823;
        }
      }
      v260 = *(unsigned __int8 *)(v135 + 428);
      if (v260 != *(unsigned __int8 *)(v136 + 428) || (*(_BYTE *)(v135 + 429) != 0) != (*(_BYTE *)(v136 + 429) != 0))
        goto LABEL_823;
      if (v260 != 13)
      {
        if (v260 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 424), (const WebCore::Length *)(v136 + 424)) & 1) == 0)goto LABEL_823;
        }
        else
        {
          v261 = *(float *)(v135 + 424);
          if (!*(_BYTE *)(v135 + 430))
            v261 = (float)SLODWORD(v261);
          v262 = *(float *)(v136 + 424);
          if (!*(_BYTE *)(v136 + 430))
            v262 = (float)SLODWORD(v262);
          if (v261 != v262)
            goto LABEL_823;
        }
      }
      v263 = *(unsigned __int8 *)(v135 + 436);
      if (v263 != *(unsigned __int8 *)(v136 + 436) || (*(_BYTE *)(v135 + 437) != 0) != (*(_BYTE *)(v136 + 437) != 0))
        goto LABEL_823;
      if (v263 != 13)
      {
        if (v263 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 432), (const WebCore::Length *)(v136 + 432)) & 1) == 0)goto LABEL_823;
        }
        else
        {
          v264 = *(float *)(v135 + 432);
          if (!*(_BYTE *)(v135 + 438))
            v264 = (float)SLODWORD(v264);
          v265 = *(float *)(v136 + 432);
          if (!*(_BYTE *)(v136 + 438))
            v265 = (float)SLODWORD(v265);
          if (v264 != v265)
            goto LABEL_823;
        }
      }
      if (*(float *)(v135 + 440) == *(float *)(v136 + 440)
        && *(unsigned __int8 *)(v135 + 444) == *(unsigned __int8 *)(v136 + 444))
      {
LABEL_568:
        v266 = *(_QWORD *)(v135 + 80);
        v267 = *(_QWORD *)(v136 + 80);
        if (v266 != v267 && !WebCore::StyleGridData::operator==(v266, v267, v242))
          return 1;
        v268 = *(WTF ***)(v135 + 88);
        v269 = *(const WTF::StringImpl ***)(v136 + 88);
        if (v268 != v269 && !WebCore::StyleGridItemData::operator==(v268, v269, v242))
          return 1;
        v270 = *(_QWORD *)(v135 + 200);
        v271 = *(_QWORD *)(v136 + 200);
        if (v270 != v271 && (!v270 || !v271 || !WebCore::WillChangeData::operator==(v270, v271)))
          *(_BYTE *)a3 |= 0x20u;
        v272 = *(unsigned int *)(v135 + 636) | ((unint64_t)(*(unsigned __int16 *)(v135 + 640) | (*(unsigned __int8 *)(v135 + 642) << 16)) << 32);
        v273 = *(unsigned int *)(v136 + 636) | ((unint64_t)(*(unsigned __int16 *)(v136 + 640) | (*(unsigned __int8 *)(v136 + 642) << 16)) << 32);
        if (((v273 ^ v272) & 0x7FF02000000) != 0)
          return 1;
        result = 1;
        if (((v273 ^ v272) & 0x80000000000) != 0
          || (*(_DWORD *)(*(_QWORD *)(v135 + 72) + 20) == 0) == (*(_DWORD *)(*(_QWORD *)(v136 + 72) + 20) != 0))
        {
          return result;
        }
        v274 = *(unsigned __int8 *)(v135 + 462);
        v275 = HIWORD(v272) & 3;
        if ((_DWORD)v275 == 2)
        {
          v276 = v274 | 0x19;
        }
        else
        {
          v276 = *(unsigned __int8 *)(v135 + 462);
          if ((_DWORD)v275 == 1)
            v276 = 21;
        }
        v277 = *(unsigned __int8 *)(v136 + 462);
        v278 = HIWORD(v273) & 3;
        if ((_DWORD)v278 == 2)
        {
          v279 = v277 | 0x19;
        }
        else
        {
          v279 = *(unsigned __int8 *)(v136 + 462);
          if ((_DWORD)v278 == 1)
          {
            if ((v276 & 4) == 0)
              return result;
LABEL_580:
            if ((_DWORD)v275 == 2)
            {
              v274 = 25;
            }
            else if ((_DWORD)v275 == 1)
            {
              v274 |= 0x15u;
            }
            if ((_DWORD)v278 == 2)
            {
              if ((v274 & 8) == 0)
                return result;
            }
            else
            {
              if ((_DWORD)v278 == 1)
                v277 |= 0x15u;
              if (((v274 ^ v277) & 8) != 0)
                return result;
            }
            if (((*(_DWORD *)(v135 + 636) & 0xC0000) != 0x80000) == ((*(_DWORD *)(v136 + 636) & 0xC0000) == 0x80000))
              return result;
            if (!WebCore::operator==((unsigned __int8 *)(v135 + 160), (unsigned __int8 *)(v136 + 160)))
              return 1;
            result = 1;
            if (*(unsigned __int8 *)(v135 + 463) != *(unsigned __int8 *)(v136 + 463)
              || *(unsigned __int8 *)(v135 + 464) != *(unsigned __int8 *)(v136 + 464))
            {
              return result;
            }
            if (*(_BYTE *)(v135 + 12) && *(_BYTE *)(v136 + 12))
            {
              v280 = *(unsigned __int8 *)(v135 + 8);
              if (v280 != *(unsigned __int8 *)(v136 + 8) || (*(_BYTE *)(v135 + 9) != 0) != (*(_BYTE *)(v136 + 9) != 0))
                return result;
              if (v280 != 13)
              {
                if (v280 == 11)
                {
                  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 4), (const WebCore::Length *)(v136 + 4)) & 1) == 0)return 1;
                }
                else
                {
                  v281 = *(float *)(v135 + 4);
                  if (!*(_BYTE *)(v135 + 10))
                    v281 = (float)SLODWORD(v281);
                  v282 = *(float *)(v136 + 4);
                  if (!*(_BYTE *)(v136 + 10))
                    v282 = (float)SLODWORD(v282);
                  if (v281 != v282)
                    return result;
                }
              }
            }
            else if ((*(_BYTE *)(v135 + 12) != 0) != (*(_BYTE *)(v136 + 12) != 0))
            {
              return result;
            }
            if (*(_BYTE *)(v135 + 24) && *(_BYTE *)(v136 + 24))
            {
              v294 = *(unsigned __int8 *)(v135 + 20);
              if (v294 != *(unsigned __int8 *)(v136 + 20)
                || (*(_BYTE *)(v135 + 21) != 0) != (*(_BYTE *)(v136 + 21) != 0))
              {
                return 1;
              }
              if (v294 != 13)
              {
                if (v294 == 11)
                {
                  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v135 + 16), (const WebCore::Length *)(v136 + 16)) & 1) == 0)return 1;
                }
                else
                {
                  v295 = *(float *)(v135 + 16);
                  if (!*(_BYTE *)(v135 + 22))
                    v295 = (float)SLODWORD(v295);
                  v296 = *(float *)(v136 + 16);
                  if (!*(_BYTE *)(v136 + 22))
                    v296 = (float)SLODWORD(v296);
                  if (v295 != v296)
                    return 1;
                }
              }
            }
            else if ((*(_BYTE *)(v135 + 24) != 0) != (*(_BYTE *)(v136 + 24) != 0))
            {
              return 1;
            }
            if (*(unsigned __int8 *)(v135 + 461) != *(unsigned __int8 *)(v136 + 461))
              return 1;
            result = 1;
            if (*(unsigned __int8 *)(v135 + 584) != *(unsigned __int8 *)(v136 + 584)
              || *(unsigned __int8 *)(v135 + 585) != *(unsigned __int8 *)(v136 + 585)
              || *(unsigned __int8 *)(v135 + 586) != *(unsigned __int8 *)(v136 + 586))
            {
              return result;
            }
            goto LABEL_273;
          }
        }
        if (((v276 ^ v279) & 4) != 0)
          return result;
        goto LABEL_580;
      }
LABEL_823:
      *(_BYTE *)a3 |= 1u;
      goto LABEL_568;
    }
    if ((*(_DWORD *)(v118 + 20) != 0) != (*(_DWORD *)(v119 + 20) != 0))
      return 1;
    v120 = *(unsigned __int8 *)(v118 + 28);
    if (v120 == *(unsigned __int8 *)(v119 + 28) && (*(_BYTE *)(v118 + 29) != 0) == (*(_BYTE *)(v119 + 29) != 0))
    {
      if (v120 != 13)
      {
        v121 = (WebCore::Length *)(v118 + 24);
        if (v120 == 11)
        {
          v308 = *(_QWORD *)(v110 + 40);
          v309 = *(_QWORD *)(v111 + 40);
          v310 = WebCore::Length::isCalculatedEqual(v121, (const WebCore::Length *)(v119 + 24));
          v119 = v309;
          v118 = v308;
          if ((v310 & 1) == 0)
            goto LABEL_265;
        }
        else
        {
          if (*(_BYTE *)(v118 + 30))
            v122 = *(float *)v121;
          else
            v122 = (float)*(int *)v121;
          v123 = *(float *)(v119 + 24);
          if (!*(_BYTE *)(v119 + 30))
            v123 = (float)SLODWORD(v123);
          if (v122 != v123)
            goto LABEL_265;
        }
      }
      v124 = *(unsigned __int8 *)(v118 + 36);
      if (v124 == *(unsigned __int8 *)(v119 + 36) && (*(_BYTE *)(v118 + 37) != 0) == (*(_BYTE *)(v119 + 37) != 0))
      {
        if (v124 == 13)
          goto LABEL_245;
        v125 = (WebCore::Length *)(v118 + 32);
        if (v124 == 11)
        {
          v311 = v118;
          v312 = v119;
          v313 = WebCore::Length::isCalculatedEqual(v125, (const WebCore::Length *)(v119 + 32));
          v119 = v312;
          v118 = v311;
          if ((v313 & 1) != 0)
            goto LABEL_245;
        }
        else
        {
          if (*(_BYTE *)(v118 + 38))
            v126 = *(float *)v125;
          else
            v126 = (float)*(int *)v125;
          v127 = *(float *)(v119 + 32);
          if (!*(_BYTE *)(v119 + 38))
            v127 = (float)SLODWORD(v127);
          if (v126 == v127)
          {
LABEL_245:
            if (*(float *)(v118 + 40) == *(float *)(v119 + 40)
              && *(unsigned __int8 *)(v118 + 44) == *(unsigned __int8 *)(v119 + 44))
            {
              v128 = *(unsigned int *)(v118 + 20);
              if ((_DWORD)v128 == *(_DWORD *)(v119 + 20))
              {
                v129 = *(_QWORD *)(v119 + 8);
                v130 = *(_QWORD **)(v118 + 8);
                if ((_DWORD)v128)
                {
                  v131 = 8 * v128 - 8;
                  v132 = v130;
                  v133 = *(_QWORD **)(v119 + 8);
                  while (1)
                  {
                    v134 = v131;
                    if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v132 + 32))(*v132, *v133))
                      break;
                    ++v132;
                    ++v133;
                    v131 = v134 - 8;
                    if (!v134)
                      goto LABEL_263;
                  }
                }
                else
                {
                  v133 = *(_QWORD **)(v119 + 8);
                  v132 = *(_QWORD **)(v118 + 8);
LABEL_263:
                  if (v132 == &v130[v128] && v133 == (_QWORD *)(v129 + 8 * v128))
                    goto LABEL_266;
                }
              }
            }
          }
        }
      }
    }
LABEL_265:
    *(_BYTE *)a3 |= 1u;
    goto LABEL_266;
  }
LABEL_273:
  v137 = *((_QWORD *)this + 3);
  v138 = *(_QWORD *)(v3 + 24);
  if (v137 != v138)
  {
    v212 = *(unsigned __int8 *)(v137 + 180);
    if (v212 != *(unsigned __int8 *)(v138 + 180) || (*(_BYTE *)(v137 + 181) != 0) != (*(_BYTE *)(v138 + 181) != 0))
      return 1;
    if (v212 != 13)
    {
      if (v212 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v137 + 176), (const WebCore::Length *)(v138 + 176)) & 1) == 0)
          return 1;
      }
      else
      {
        v213 = *(float *)(v137 + 176);
        if (!*(_BYTE *)(v137 + 182))
          v213 = (float)SLODWORD(v213);
        v214 = *(float *)(v138 + 176);
        if (!*(_BYTE *)(v138 + 182))
          v214 = (float)SLODWORD(v214);
        if (v213 != v214)
          return 1;
      }
    }
    v215 = *(_DWORD *)(v138 + 232) ^ *(_DWORD *)(v137 + 232);
    if ((v215 & 0xF800040) != 0)
      return 1;
    if (*(float *)(v137 + 184) != *(float *)(v138 + 184))
      return 1;
    v216 = *(_DWORD *)(v138 + 236) ^ *(_DWORD *)(v137 + 236);
    if ((v216 & 0x20) != 0)
      return 1;
    if (*(float *)(v137 + 344) != *(float *)(v138 + 344))
      return 1;
    v217 = *(_DWORD *)(v138 + 228) ^ *(_DWORD *)(v137 + 228);
    if ((v217 & 0xC07FCC) != 0
      || *(unsigned __int16 *)(v137 + 296) != *(unsigned __int16 *)(v138 + 296)
      || *(unsigned __int16 *)(v137 + 298) != *(unsigned __int16 *)(v138 + 298))
    {
      return 1;
    }
    result = 1;
    if (v216 & 0x18 | v215 & 0xF | v217 & 0x1D000000)
      return result;
    if (*(_QWORD *)(v137 + 288) != *(_QWORD *)(v138 + 288))
      return result;
    if ((v215 & 0x30) != 0)
      return result;
    if (*(_QWORD *)(v137 + 304) != *(_QWORD *)(v138 + 304))
      return result;
    if ((v215 & 0x7F00) != 0)
      return result;
    if (*(float *)(v137 + 336) != *(float *)(v138 + 336))
      return result;
    if (*(unsigned __int8 *)(v137 + 340) != *(unsigned __int8 *)(v138 + 340))
      return result;
    if (v216 & 0x18000780 | v215 & 0x788000)
      return result;
    if (*(_QWORD *)(v137 + 328) != *(_QWORD *)(v138 + 328))
      return result;
    if (*(unsigned __int8 *)(v137 + 368) != *(unsigned __int8 *)(v138 + 368))
      return result;
    if (*(_QWORD *)(v137 + 376) != *(_QWORD *)(v138 + 376))
      return result;
    if (*(_QWORD *)(v137 + 8) != *(_QWORD *)(v138 + 8))
      return result;
    if ((v216 & 0x3C000) != 0)
      return result;
    if (*(float *)(v137 + 4) != *(float *)(v138 + 4))
      return result;
    v218 = *(unsigned __int8 *)(v137 + 248);
    if (v218 != *(unsigned __int8 *)(v138 + 248) || (*(_BYTE *)(v137 + 249) != 0) != (*(_BYTE *)(v138 + 249) != 0))
      return result;
    if (v218 != 13)
    {
      if (v218 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v137 + 244), (const WebCore::Length *)(v138 + 244)) & 1) == 0)
          return 1;
      }
      else
      {
        v219 = *(float *)(v137 + 244);
        if (!*(_BYTE *)(v137 + 250))
          v219 = (float)SLODWORD(v219);
        v220 = *(float *)(v138 + 244);
        if (!*(_BYTE *)(v138 + 250))
          v220 = (float)SLODWORD(v220);
        if (v219 != v220)
          return result;
      }
    }
    if (*(float *)(v137 + 208) != *(float *)(v138 + 208))
      return 1;
    v221 = *(_QWORD *)(v137 + 312);
    v222 = *(_QWORD *)(v138 + 312);
    if (v221 != v222)
    {
      result = 1;
      if (!v221 || !v222)
        return result;
      if (!WebCore::operator==(*(_QWORD *)(v137 + 312), v222, a3))
        return 1;
    }
  }
  v139 = *((_QWORD *)this + 4);
  v140 = *(_QWORD *)(v3 + 32);
  if (v139 != v140)
  {
    v141 = *(unsigned __int8 *)(v139 + 16);
    if (v141 != *(unsigned __int8 *)(v140 + 16) || (*(_BYTE *)(v139 + 17) != 0) != (*(_BYTE *)(v140 + 17) != 0))
      return 1;
    if (v141 != 13)
    {
      v142 = (WebCore::Length *)(v139 + 12);
      if (v141 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v142, (const WebCore::Length *)(v140 + 12)))
          return 1;
        v139 = *((_QWORD *)this + 4);
        v140 = *(_QWORD *)(v3 + 32);
      }
      else
      {
        if (*(_BYTE *)(v139 + 18))
          v143 = *(float *)v142;
        else
          v143 = (float)*(int *)v142;
        v144 = *(float *)(v140 + 12);
        if (!*(_BYTE *)(v140 + 18))
          v144 = (float)SLODWORD(v144);
        if (v143 != v144)
          return 1;
      }
    }
    v145 = *(unsigned __int8 *)(v139 + 24);
    if (v145 != *(unsigned __int8 *)(v140 + 24) || (*(_BYTE *)(v139 + 25) != 0) != (*(_BYTE *)(v140 + 25) != 0))
      return 1;
    if (v145 != 13)
    {
      v146 = (WebCore::Length *)(v139 + 20);
      if (v145 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v146, (const WebCore::Length *)(v140 + 20)))
          return 1;
        v139 = *((_QWORD *)this + 4);
        v140 = *(_QWORD *)(v3 + 32);
      }
      else
      {
        if (*(_BYTE *)(v139 + 26))
          v147 = *(float *)v146;
        else
          v147 = (float)*(int *)v146;
        v148 = *(float *)(v140 + 20);
        if (!*(_BYTE *)(v140 + 26))
          v148 = (float)SLODWORD(v148);
        if (v147 != v148)
          return 1;
      }
    }
    v149 = *(unsigned int *)(v139 + 60);
    if ((_DWORD)v149 != *(_DWORD *)(v140 + 60))
      return 1;
    if (memcmp(*(const void **)(v139 + 48), *(const void **)(v140 + 48), 8 * v149))
      return 1;
    v150 = *(unsigned int *)(v139 + 76);
    if ((_DWORD)v150 != *(_DWORD *)(v140 + 76)
      || memcmp(*(const void **)(v139 + 64), *(const void **)(v140 + 64), 8 * v150))
    {
      return 1;
    }
    v152 = *(unsigned __int8 *)(v139 + 145);
    v153 = *(unsigned __int8 *)(v140 + 145);
    if (v153 | v152)
    {
      if ((v152 != 0) == (v153 == 0))
        return 1;
    }
    else if ((WebCore::operator==(v139 + 80, v140 + 80, v151) & 1) == 0)
    {
      return 1;
    }
    v154 = *(unsigned __int8 *)(v139 + 152);
    v155 = *(unsigned __int8 *)(v140 + 152);
    if (v154 == 3)
    {
      if (v155 != 3 || *(_QWORD *)(v139 + 160) != *(_QWORD *)(v140 + 160))
        return 1;
    }
    else if (v154 != v155)
    {
      return 1;
    }
    if (*(unsigned __int8 *)(v139 + 168) != *(unsigned __int8 *)(v140 + 168)
      || (*(_BYTE *)(v139 + 169) == 0) == (*(_BYTE *)(v140 + 169) != 0)
      || *(float *)(v139 + 172) != *(float *)(v140 + 172)
      || *(_QWORD *)(v139 + 176) != *(_QWORD *)(v140 + 176)
      || *(_QWORD *)(v139 + 184) != *(_QWORD *)(v140 + 184)
      || (float)((float)*(__int16 *)(v139 + 192) * 0.25) != (float)((float)*(__int16 *)(v140 + 192) * 0.25)
      || (float)((float)*(__int16 *)(v139 + 194) * 0.25) != (float)((float)*(__int16 *)(v140 + 194) * 0.25))
    {
      return 1;
    }
    if (*(_BYTE *)(v139 + 198) && *(_BYTE *)(v140 + 198))
    {
      if ((float)((float)*(__int16 *)(v139 + 196) * 0.25) != (float)((float)*(__int16 *)(v140 + 196) * 0.25))
        return 1;
    }
    else if ((*(_BYTE *)(v139 + 198) != 0) != (*(_BYTE *)(v140 + 198) != 0))
    {
      return 1;
    }
    if ((*(_BYTE *)(v139 + 200) == 0) == (*(_BYTE *)(v140 + 200) != 0))
      return 1;
    if ((*(_BYTE *)(v139 + 201) == 0) == (*(_BYTE *)(v140 + 201) != 0))
      return 1;
    if (*(float *)(v139 + 204) != *(float *)(v140 + 204))
      return 1;
    if (((*(_DWORD *)(v140 + 208) ^ *(_DWORD *)(v139 + 208)) & 0x7FFFFFFF) != 0)
      return 1;
    if ((((*(unsigned __int16 *)(v140 + 212) | (*(unsigned __int8 *)(v140 + 214) << 16)) ^ (*(unsigned __int16 *)(v139 + 212) | (*(unsigned __int8 *)(v139 + 214) << 16))) & 0x3FFFF) != 0)
      return 1;
    v156 = *(_QWORD *)(v139 + 216);
    v157 = *(_QWORD *)(v140 + 216);
    v158 = *(unsigned int *)(v156 + 4);
    if ((_DWORD)v158 != *(_DWORD *)(v157 + 4))
      return 1;
    if ((_DWORD)v158)
    {
      if (*(_QWORD *)(v156 + 8) != *(_QWORD *)(v157 + 8))
        return 1;
      v159 = 0;
      v160 = v157 + 16;
      v161 = v156 + 16;
      while (v158 - 1 != v159)
      {
        v162 = *(_QWORD *)(v161 + 8 * v159);
        v163 = *(_QWORD *)(v160 + 8 * v159++);
        if (v162 != v163)
        {
          if (v159 < v158)
            return 1;
          break;
        }
      }
    }
    if (*(float *)(v139 + 224) != *(float *)(v140 + 224))
      return 1;
    if (((*(_WORD *)(v140 + 228) ^ *(_WORD *)(v139 + 228)) & 0x3FF) != 0)
      return 1;
    v164 = *(unsigned __int8 *)(v139 + 236);
    if (v164 != *(unsigned __int8 *)(v140 + 236) || (*(_BYTE *)(v139 + 237) != 0) != (*(_BYTE *)(v140 + 237) != 0))
      return 1;
    if (v164 != 13)
    {
      v165 = (WebCore::Length *)(v139 + 232);
      if (v164 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v165, (const WebCore::Length *)(v140 + 232)) & 1) == 0)
          return 1;
      }
      else
      {
        if (*(_BYTE *)(v139 + 238))
          v166 = *(float *)v165;
        else
          v166 = (float)*(int *)v165;
        v167 = *(float *)(v140 + 232);
        if (!*(_BYTE *)(v140 + 238))
          v167 = (float)SLODWORD(v167);
        if (v166 != v167)
          return 1;
      }
    }
    v168 = *(unsigned __int8 *)(v139 + 244);
    if (v168 != *(unsigned __int8 *)(v140 + 244) || (*(_BYTE *)(v139 + 245) != 0) != (*(_BYTE *)(v140 + 245) != 0))
      return 1;
    if (v168 != 13)
    {
      v169 = (WebCore::Length *)(v139 + 240);
      if (v168 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v169, (const WebCore::Length *)(v140 + 240)) & 1) == 0)
          return 1;
      }
      else
      {
        if (*(_BYTE *)(v139 + 246))
          v170 = *(float *)v169;
        else
          v170 = (float)*(int *)v169;
        v171 = *(float *)(v140 + 240);
        if (!*(_BYTE *)(v140 + 246))
          v171 = (float)SLODWORD(v171);
        if (v170 != v171)
          return 1;
      }
    }
    v172 = *(_QWORD *)(v139 + 248);
    v173 = *(_QWORD *)(v140 + 248);
    if (v172 != v173)
    {
      result = 1;
      if (!v172
        || !v173
        || *(_QWORD *)(v172 + 112) != *(_QWORD *)(v173 + 112)
        || *(_DWORD *)(v172 + 144) != *(_DWORD *)(v173 + 144)
        || *(unsigned __int16 *)(v172 + 148) != *(unsigned __int16 *)(v173 + 148))
      {
        return result;
      }
    }
    v174 = *((_QWORD *)this + 4);
    v175 = *(_QWORD *)(v3 + 32);
    if (*(float *)(v174 + 4) != *(float *)(v175 + 4) || *(float *)(v174 + 8) != *(float *)(v175 + 8))
      return 1;
  }
  v176 = *((_DWORD *)this + 11);
  v177 = *(_DWORD *)(v3 + 44);
  v178 = v177 ^ v176;
  if ((((unsigned __int16)v177 ^ (unsigned __int16)v176) & 0x18) != 0)
    return 1;
  v179 = *((_QWORD *)this + 2);
  v180 = *(_QWORD *)(v3 + 16);
  if (((v180 ^ v179) & 0xE3803E0) != 0)
    return 1;
  if ((v179 & 0x1C) != 0)
  {
    v186 = (v176 >> 2) & 1;
    result = 1;
    if (v186 != ((v177 >> 2) & 1))
      return result;
    if (((v180 ^ v179) & 0x10000000) != 0)
      return result;
    v181 = *((_DWORD *)this + 10);
    v182 = *(_DWORD *)(v3 + 40);
    v183 = v182 ^ v181;
    if (((v182 ^ v181) & 7) != 0)
      return result;
    if (v186)
    {
      v187 = *(_BYTE **)(*((_QWORD *)this + 1) + 24);
      if ((v187[172] & 0xF) != 0)
      {
        if ((v187[172] & 0xF) == 1 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 172) & 0xF) == 0)
          return result;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 172) & 0xF) == 1)
      {
        return result;
      }
      if ((v187[196] & 0xF) != 0)
      {
        if ((v187[196] & 0xF) == 1 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 196) & 0xF) == 0)
          return result;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 196) & 0xF) == 1)
      {
        return result;
      }
      if ((v187[124] & 0xF) != 0)
      {
        if ((v187[124] & 0xF) == 1 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 124) & 0xF) == 0)
          return result;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 124) & 0xF) == 1)
      {
        return result;
      }
      v188 = v187[148] & 0xF;
      if (v188)
      {
        if (v188 == 1 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 148) & 0xF) == 0)
          return result;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 148) & 0xF) == 1)
      {
        return result;
      }
    }
  }
  else
  {
    v181 = *((_DWORD *)this + 10);
    v182 = *(_DWORD *)(v3 + 40);
    v183 = v181 ^ v182;
  }
  if ((*((_QWORD *)this + 2) & 0x1FLL) != 2)
    goto LABEL_963;
  if ((v183 & 8) != 0)
    return 1;
  v229 = *((_QWORD *)this + 3);
  v230 = *(_QWORD *)(v3 + 24);
  result = 1;
  if (*(unsigned __int8 *)(v229 + 368) == *(unsigned __int8 *)(v230 + 368)
    && *(_QWORD *)(v229 + 376) == *(_QWORD *)(v230 + 376))
  {
LABEL_963:
    result = 1;
    if (((v180 ^ v179) & 0x1C7FC00) == 0 && !(v183 & 0x7C007FC0 | v178 & 0xE003))
    {
      v185 = (*(unsigned __int8 *)(*((_QWORD *)this + 3) + 239) >> 2) & 1;
      if ((v181 & 0x30) != 0x20)
        v185 = 1;
      if ((*(_BYTE *)(*(_QWORD *)(v3 + 24) + 239) & 4) != 0)
      {
        if ((v185 & 1) == 0)
          return result;
      }
      else if (((v182 & 0x30) == 32) == v185)
      {
        return result;
      }
      if ((v179 & 0x1000000000000 & v180) != 0)
      {
        LODWORD(v360) = 1;
        v329 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        v330 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
        {
          v331 = *(_DWORD *)v330;
          *(_DWORD *)v330 += 2;
          v361 = v330;
          CachedPseudoStyle = WebCore::RenderStyle::getCachedPseudoStyle((uint64_t)this, (uint64_t)&v360);
          if (v331)
            *(_DWORD *)v330 = v331;
          else
            WTF::StringImpl::destroy(v330, v332);
        }
        else
        {
          v361 = 0;
          CachedPseudoStyle = WebCore::RenderStyle::getCachedPseudoStyle((uint64_t)this, (uint64_t)&v360);
        }
        if (!CachedPseudoStyle)
          return 1;
        LODWORD(v360) = 1;
        v334 = *v329;
        if (*v329)
        {
          v335 = *(_DWORD *)v334;
          *(_DWORD *)v334 += 2;
          v361 = v334;
          v338 = WebCore::RenderStyle::getCachedPseudoStyle(v3, (uint64_t)&v360);
          if (v335)
            *(_DWORD *)v334 = v335;
          else
            WTF::StringImpl::destroy(v334, v336);
        }
        else
        {
          v361 = 0;
          v338 = WebCore::RenderStyle::getCachedPseudoStyle(v3, (uint64_t)&v360);
        }
        if (!v338)
          return 1;
        WebCore::RenderStyle::operator==(CachedPseudoStyle, v338, v337);
        return (v339 & 1) == 0;
      }
      else
      {
        return HIWORD(v179) & 1 ^ HIWORD(v180) & 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSFontAccessor::isLoading(WebCore::CSSFontAccessor *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 24) && (v1 = *((_QWORD *)this + 2)) != 0)
    return (*(unsigned __int8 *)(v1 + 256) >> 1) & 1;
  else
    return 0;
}

uint64_t WebCore::Length::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  float v3;
  float v4;

  v2 = a1[4];
  if (v2 != a2[4] || (a1[5] != 0) != (a2[5] != 0))
    return 0;
  if (v2 == 13)
    return 1;
  if (v2 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)a1, (const WebCore::Length *)a2);
  if (a1[6])
    v3 = *(float *)a1;
  else
    v3 = (float)*(int *)a1;
  v4 = *(float *)a2;
  if (!a2[6])
    v4 = (float)*(int *)a2;
  return v3 == v4;
}

uint64_t WebCore::TrivialFontAccessor::isLoading(WebCore::TrivialFontAccessor *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 256) >> 1) & 1;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Observer<void ()(unsigned int)>&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = WTF::WeakHashSet<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)a2, a2);
  if ((_DWORD)result)
  {
    v11 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v12 = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v12;
  }
  WTF::WeakHashSet<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v19, (_QWORD **)a2);
  v5 = *a2;
  if (*a2)
  {
    v7 = *(unsigned int *)(v5 - 4);
    v6 = v5 + 8 * v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v14 = a2;
  v15 = v6;
  v16 = v6;
  v17 = v6;
  v18 = v5 + 8 * v7;
  result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  v8 = v20;
  v9 = v15;
  while (v8 != v9)
  {
    WTF::copyToVector<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Observer<void ()>&)#1}::operator()<WTF::Observer<void ()>>(&v13, *(uint64_t **)(*(_QWORD *)v8 + 8));
    v10 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v13;
    *(_DWORD *)(a1 + 12) = v10 + 1;
    result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
    v8 = v20;
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  v6 = *a2;
  if (*a2)
  {
    v8 = *((unsigned int *)v6 - 1);
    v7 = &v6[v8];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  a1[3] = v7;
  a1[4] = &v6[v8];
  return WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

uint64_t WTF::WeakHashSet<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  unsigned int *v3;
  uint64_t result;
  unsigned int v5;
  int v6;

  _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore20JSVMClientDataClientES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)a1, a2);
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(v3 - 3);
    if (v5 >= 0x7FFFFFFF)
      v6 = -2;
    else
      v6 = 2 * v5;
    *(_DWORD *)(a1 + 12) = v6;
    return *(v3 - 3);
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

WTF::MonotonicTime *WebCore::Page::hiddenPageDOMTimerThrottlingStateChanged(WebCore::Page *this)
{
  WebCore::Page::setTimerThrottlingState(this, 0);
  return WebCore::Page::updateTimerThrottlingState(this);
}

uint64_t WebCore::AudioSession::setSharedSession(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  {
    LOBYTE(WebCore::sharedAudioSession(void)::session) = 0;
    v2 = *a1;
    *a1 = 0;
    goto LABEL_9;
  }
  v1 = byte_1ECE90DC0;
  v2 = *a1;
  *a1 = 0;
  if (!v1)
  {
LABEL_9:
    WebCore::sharedAudioSession(void)::session = v2;
    byte_1ECE90DC0 = 1;
    goto LABEL_5;
  }
  v3 = WebCore::sharedAudioSession(void)::session;
  WebCore::sharedAudioSession(void)::session = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_5:
  if ((byte_1EE337EF2 & 1) == 0)
  {
    *(_QWORD *)&dword_1EE337F10 = 0;
    qword_1EE337F08 = 0;
    byte_1EE337EF2 = 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3408560;
  v6 = v4;
  WTF::WeakHashSet<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WTF::WeakHashSet<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  WTF::Mapper<WTF::WeakHashSet<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::Observer<void ()(WebCore::AudioSession &)>&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(&v6);
  if (HIDWORD(v7))
  {
    v4 = v6;
    v5 = 8 * HIDWORD(v7);
    do
    {
      v2 = *(_QWORD **)v4;
      if (*(_QWORD *)v4
        && v2[1]
        && WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(&qword_1EE337F08, (uint64_t)v2))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 16))(*a1, *(_QWORD *)(*(_QWORD *)v4 + 8));
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::WeakPtr<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WebCore::FontCache::invalidateAllFontCaches(WebCore *a1, WTF::StringImpl *a2)
{
  int v2;
  uint64_t result;

  v2 = (int)a1;
  result = WebCore::dispatchToAllFontCaches<WebCore::FontCache::invalidateAllFontCaches(WebCore::FontCache::ShouldRunInvalidationCallback)::$_0>(a1, a2);
  if (v2)
  {
    {
      result = WebCore::fontCacheInvalidationCallback(void)::callback;
      if (WebCore::fontCacheInvalidationCallback(void)::callback)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::fontCacheInvalidationCallback(void)::callback
                                                  + 16))(WebCore::fontCacheInvalidationCallback(void)::callback);
    }
    else
    {
      WebCore::fontCacheInvalidationCallback(void)::callback = 0;
    }
  }
  return result;
}

uint64_t WebCore::FontCache::forCurrentThread(WebCore::FontCache *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 96)) == 0)
    v2 = WebCore::threadGlobalDataSlow(this);
  result = *(_QWORD *)(v2 + 80);
  if (!result)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v2);
    return *(_QWORD *)(v2 + 80);
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::begin@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;

  WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::values(a1, &v6);
  *a2 = v6;
  v3 = v7;
  v6 = 0;
  v7 = 0;
  a2[1] = v3;
  a2[2] = 0;
  return WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v4);
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::values@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v4;
  void *v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  char *v10;
  _DWORD v11[5];
  char v12;

  *a2 = 0;
  a2[1] = 0;
  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v12 = 0;
  v10 = &v12;
  WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::values(void)::{lambda(0ul &)#1},WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>>((unsigned int *)a1, (uint64_t)&v10, (uint64_t)v11);
  WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)a2, v11);
  result = WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v6);
  if (v12)
    result = _ZN3WTF9HashTableIPKN7WebCore21WorkerOrWorkletThreadENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E6valuesEvEUlRT_E0_EEbRKSS_((uint64_t *)a1, v11);
  v8 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a1 - 12);
    if (v8 > 0x7FFFFFFE)
      v8 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 12) = 2 * v8;
  v9 = __ldxr(v4);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1942D19B0(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;

  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
    {
LABEL_6:
      WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  goto LABEL_6;
}

uint64_t *WebCore::FontCache::invalidate(WebCore::FontCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  WebCore::SystemFontDatabase *v5;
  WebCore::SystemFontDatabase *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 9);
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
  {
    *(_QWORD *)(v3 + 8) = 0;
    WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::deallocateTable(v4, a2);
  }
  v5 = (WebCore::SystemFontDatabase *)WebCore::FontCascadeCache::invalidate((WebCore::FontCache *)((char *)this + 80), a2);
  v6 = (WebCore::SystemFontDatabase *)WebCore::SystemFontDatabase::singleton(v5);
  WebCore::SystemFontDatabase::invalidate(v6, v7);
  WebCore::FontCache::platformInvalidate(this, v8);
  ++*((_WORD *)this + 60);
  v14 = 0;
  v15 = 0;
  WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>&&)#1},WTF::Vector<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v14, (_QWORD **)this + 7);
  if (HIDWORD(v15))
  {
    v11 = v14;
    v12 = 8 * HIDWORD(v15);
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      v12 -= 8;
    }
    while (v12);
  }
  WTF::Vector<WTF::Ref<WebCore::FontSelector,WTF::RawPtrTraits<WebCore::FontSelector>,WTF::DefaultRefDerefTraits<WebCore::FontSelector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  return WebCore::FontCache::purgeInactiveFontData(this, (WTF::StringImpl *)0xFFFFFFFFLL);
}

WTF *WebCore::SystemFontDatabaseCoreText::clear(WebCore::SystemFontDatabaseCoreText *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = *((_QWORD *)this + 78);
  if (v3)
  {
    *((_QWORD *)this + 78) = 0;
    WTF::HashTable<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::KeyValuePair<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::SystemFontDatabaseCoreText::CascadeListParameters::Hash,WTF::HashMap<WebCore::SystemFontDatabaseCoreText::CascadeListParameters,WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::SystemFontDatabaseCoreText::CascadeListParameters::Hash,WTF::SimpleClassHashTraits<WebCore::SystemFontDatabaseCoreText::CascadeListParameters>,WTF::HashTraits<WTF::Vector<WTF::RetainPtr<__CTFontDescriptor const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<WebCore::SystemFontDatabaseCoreText::CascadeListParameters>>::deallocateTable(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 79);
  if (v4)
  {
    v9 = (WTF::StringImpl *)*((unsigned int *)this + 160);
    *((_QWORD *)this + 79) = 0;
    *((_QWORD *)this + 80) = 0;
    *(_QWORD *)((char *)this + 645) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, v9);
  }
  v5 = (WTF *)*((_QWORD *)this + 82);
  if (v5)
  {
    v10 = (WTF::StringImpl *)*((unsigned int *)this + 166);
    *((_QWORD *)this + 82) = 0;
    *((_QWORD *)this + 83) = 0;
    *(_QWORD *)((char *)this + 669) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, v10);
  }
  v6 = (WTF *)*((_QWORD *)this + 85);
  if (v6)
  {
    v11 = (WTF::StringImpl *)*((unsigned int *)this + 172);
    *((_QWORD *)this + 85) = 0;
    *((_QWORD *)this + 86) = 0;
    *(_QWORD *)((char *)this + 693) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v6, v11);
  }
  v7 = (WTF *)*((_QWORD *)this + 88);
  if (v7)
  {
    v12 = (WTF::StringImpl *)*((unsigned int *)this + 178);
    *((_QWORD *)this + 88) = 0;
    *((_QWORD *)this + 89) = 0;
    *(_QWORD *)((char *)this + 717) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v7, v12);
  }
  result = (WTF *)*((_QWORD *)this + 91);
  if (result)
  {
    v13 = (WTF::StringImpl *)*((unsigned int *)this + 184);
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 92) = 0;
    *(_QWORD *)((char *)this + 741) = 0;
    return (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(result, v13);
  }
  return result;
}

uint64_t *WebCore::FontCache::purgeInactiveFontData(WebCore::FontCache *this, WTF::StringImpl *a2)
{
  int v2;
  float **v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WebCore::FontCache *v11;
  WebCore::Font *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  WebCore::FontPlatformData *v16;
  void *v17;
  unsigned __int8 **v18;
  void *v19;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  WebCore::FontCache *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (int)a2;
  v4 = (float **)((char *)this + 80);
  WebCore::FontCascadeCache::pruneUnreferencedEntries((uint64_t)this + 80, a2);
  WebCore::FontCascadeCache::pruneSystemFallbackFonts(v4);
  WTF::Locker<WTF::RecursiveLockAdapter<WTF::Lock>,void>::Locker((WTF::Thread *)&v29, (uint64_t)this + 128);
  if (v2)
  {
    while (1)
    {
      v26 = &v28;
      v27 = 20;
      v5 = (uint64_t *)*((_QWORD *)this + 9);
      v6 = WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::begin(*v5);
      v8 = v6;
      v9 = v7;
      if (*v5)
        v10 = *v5 + 40 * *(unsigned int *)(*v5 - 4);
      else
        v10 = 0;
      if (v10 != v6)
      {
        do
        {
          v11 = *(WebCore::FontCache **)(v8 + 32);
          if (*(_DWORD *)v11 == 1)
          {
            *(_DWORD *)v11 = 2;
            v25 = v11;
            v13 = HIDWORD(v27);
            if (HIDWORD(v27) == (_DWORD)v27)
            {
              WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>((uint64_t)&v26, (unint64_t)&v25);
            }
            else
            {
              v25 = 0;
              v26[HIDWORD(v27)] = (uint64_t)v11;
              HIDWORD(v27) = v13 + 1;
            }
            v12 = v25;
            v25 = 0;
            if (v12)
              WTF::RefCounted<WebCore::Font>::deref(v12);
            if (!--v2)
              break;
          }
          while (1)
          {
            v8 += 40;
            if ((void *)v8 == v9)
              break;
            if ((WTF::HashTraitsEmptyValueChecker<WebCore::FontDataCacheKeyTraits,false>::isEmptyValue<WebCore::FontPlatformData>(v8) & 1) == 0
              && !*(_BYTE *)(v8 + 27))
            {
              goto LABEL_9;
            }
          }
          v8 = (uint64_t)v9;
LABEL_9:
          ;
        }
        while (v8 != v10);
      }
      if (!HIDWORD(v27))
        break;
      v21 = v26;
      v22 = 8 * HIDWORD(v27);
      do
      {
        v14 = (uint64_t *)*((_QWORD *)this + 9);
        v15 = *v21++;
        v16 = (WebCore::FontPlatformData *)WTF::HashTable<WebCore::FontPlatformData,WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>>,WebCore::FontDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontDataCacheKeyHash>,WebCore::FontPlatformData>(v14, (CFTypeRef *)(v15 + 88));
        WTF::HashMap<WebCore::FontPlatformData,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WebCore::FontDataCacheKeyHash,WebCore::FontDataCacheKeyTraits,WTF::HashTraits<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>>,WTF::HashTableTraits>::remove(v14, v16);
        v22 -= 8;
      }
      while (v22);
      WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v17);
      if (!v2)
        goto LABEL_24;
    }
    WTF::Vector<WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v7);
  }
LABEL_24:
  v18 = (unsigned __int8 **)(*((_QWORD *)this + 9) + 8);
  v25 = this;
  WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::FontCache::purgeInactiveFontData::$_0,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>>((uint64_t)&v26, v18, (uint64_t)&v25);
  if (HIDWORD(v27))
  {
    v23 = (unsigned __int8 *)v26;
    v24 = 80 * HIDWORD(v27);
    do
    {
      WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::remove(*((_QWORD *)this + 9) + 8, v23);
      v23 += 80;
      v24 -= 80;
    }
    while (v24);
  }
  WebCore::FontCache::platformPurgeInactiveFontData(this);
  WTF::Vector<WebCore::FontPlatformDataCacheKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v19);
  return WTF::Locker<WTF::RecursiveLockAdapter<WTF::Lock>,void>::~Locker(&v29);
}

WTF *WebCore::FontCache::platformPurgeInactiveFontData(WebCore::FontCache *this)
{
  CFTypeRef *v2;
  CFTypeRef *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;
  uint64_t v6;
  CFTypeRef *v7;
  WTF *v8;
  WTF *result;
  void *v10;
  CFTypeRef v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  WTF *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  v2 = (CFTypeRef *)WTF::HashTable<WTF::RetainPtr<__CTFont const*>,WTF::RetainPtr<__CTFont const*>,WTF::IdentityExtractor,WTF::RetainPtrObjectHash<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>>::begin(*((_QWORD **)this + 34));
  v3 = v2;
  v5 = v4;
  v6 = *((_QWORD *)this + 34);
  if (v6)
    v7 = (CFTypeRef *)(v6 + 8 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 == v2)
  {
    v8 = 0;
  }
  else
  {
    do
    {
      if (CFGetRetainCount(*v3) == 1)
      {
        v11 = *v3;
        v16 = *v3;
        v12 = HIDWORD(v18);
        if (HIDWORD(v18) == (_DWORD)v18)
        {
          WTF::Vector<__CTFont const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CTFont const*>((uint64_t)&v17, (unint64_t)&v16);
        }
        else
        {
          *((_QWORD *)v17 + HIDWORD(v18)) = v11;
          HIDWORD(v18) = v12 + 1;
        }
      }
      if (++v3 == v5)
      {
LABEL_19:
        v3 = v5;
      }
      else
      {
        while (1)
        {
          if ((v13 & 1) == 0)
          {
            v13 = 1;
          }
          if ((unint64_t)*v3 + 1 > 1)
            break;
          if (++v3 == v5)
            goto LABEL_19;
        }
      }
    }
    while (v3 != v7);
    v8 = v17;
    if (HIDWORD(v18))
    {
      v14 = 0;
      v15 = 8 * HIDWORD(v18);
      do
      {
        WTF::HashSet<WTF::RetainPtr<__CTFont const*>,WTF::RetainPtrObjectHash<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>,WTF::HashTableTraits>::remove<WTF::RetainPtr<__CTFont const*>>((uint64_t *)this + 34, *(CFTypeRef *)((char *)v8 + v14));
        v14 += 8;
      }
      while (v15 != v14);
    }
  }
  WebCore::FontDatabase::clear((WebCore::FontCache *)((char *)this + 144));
  result = WebCore::FontDatabase::clear((WebCore::FontCache *)((char *)this + 208));
  if (v8)
    return (WTF *)WTF::fastFree(v8, v10);
  return result;
}

WTF *WebCore::FontDatabase::clear(WebCore::FontDatabase *this)
{
  WTF *v3;
  int v4;
  WTF *result;
  void *v6;
  WTF::StringImpl *v7;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    v6 = (void *)*((unsigned int *)this + 4);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)((char *)this + 21) = 0;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, v6);
  }
  v4 = __ldxr((unsigned __int8 *)this);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_10:
    WTF::Lock::unlockSlow(this);
  result = (WTF *)*((_QWORD *)this + 4);
  if (result)
  {
    v7 = (WTF::StringImpl *)*((unsigned int *)this + 10);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *(_QWORD *)((char *)this + 45) = 0;
    return (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FontDatabase::InstalledFont,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FontDatabase::InstalledFont>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(result, v7);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RetainPtr<__CTFont const*>,WTF::RetainPtr<__CTFont const*>,WTF::IdentityExtractor,WTF::RetainPtrObjectHash<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>>::begin(_QWORD *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<WTF::RetainPtr<__CTFont const*>,WTF::RetainPtr<__CTFont const*>,WTF::IdentityExtractor,WTF::RetainPtrObjectHash<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>,WTF::RetainPtrObjectHashTraits<__CTFont const*>>::makeConstIterator((uint64_t)a1, a1);
  return &a1[*((unsigned int *)a1 - 1)];
}

uint64_t WebCore::FontCache::platformInvalidate(WebCore::FontCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  v3 = *((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 42) = 0;
    WTF::HashTable<WebCore::FontFamilySpecificationKey,WTF::KeyValuePair<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontFamilySpecificationKeyHash,WTF::HashMap<WebCore::FontFamilySpecificationKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontFamilySpecificationKeyHash,WTF::SimpleClassHashTraits<WebCore::FontFamilySpecificationKey>,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<WebCore::FontFamilySpecificationKey>>::deallocateTable(v3, a2);
  }
  WebCore::SystemFontDatabaseCoreText::clear((WebCore::FontCache *)((char *)this + 344), a2);
  result = _AXSEnhanceTextLegibilityEnabled();
  v5 = result;
  {
    result = _AXSEnhanceTextLegibilityEnabled();
  }
  WebCore::platformShouldEnhanceTextLegibility(void)::shouldEnhanceTextLegibility = v5 != 0;
  return result;
}

uint64_t *WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(WebCore::WorkerOrWorkletThread *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(void)::$_0 &&>>);
  }
  return &WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(void)::workerOrWorkletThreads;
}

uint64_t WebCore::SystemFontDatabase::singleton(WebCore::SystemFontDatabase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 96)) == 0)
    v2 = WebCore::threadGlobalDataSlow(this);
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v2);
    v3 = *(_QWORD *)(v2 + 80);
  }
  return v3 + 344;
}

WTF *WebCore::SystemFontDatabase::platformInvalidate(WebCore::SystemFontDatabase *this)
{
  uint64_t v1;
  void *v2;

  v1 = WebCore::FontCache::forCurrentThread(this);
  return WebCore::SystemFontDatabaseCoreText::clear((WebCore::SystemFontDatabaseCoreText *)(v1 + 344), v2);
}

WTF *WebCore::SystemFontDatabase::invalidate(WebCore::SystemFontDatabase *this, WTF::StringImpl *a2)
{
  uint64_t i;
  char *v4;
  WTF::StringImpl *v5;

  for (i = 0; i != 624; i += 24)
  {
    v4 = (char *)this + i;
    if (*((_BYTE *)this + i + 16))
    {
      v5 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v4[16] = 0;
    }
  }
  return WebCore::SystemFontDatabase::platformInvalidate(this);
}

uint64_t WebCore::FontCascadeCache::pruneUnreferencedEntries(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return this;
  v3 = *(_DWORD *)(v2 - 4);
  if (!v3)
    return this;
  v4 = (uint64_t *)this;
  v5 = 0;
  v6 = v3 - 1;
  do
  {
    v7 = v6;
    this = v2 + 96 * v6;
    if (*(_BYTE *)this || *(float *)(this + 4) != 0.0)
    {
      if (*(_BYTE *)this)
        goto LABEL_31;
    }
    else if ((float)((float)*(__int16 *)(this + 8) * 0.25) == 0.0)
    {
      v8 = (float)((float)*(__int16 *)(this + 10) * 0.25) == 0.0 && *(_BYTE *)(this + 14) == 0;
      v9 = v8 && *(_QWORD *)(this + 16) == 0;
      v10 = v9 && *(_QWORD *)(this + 24) == 0;
      v11 = v10 && *(_QWORD *)(this + 32) == 0;
      v12 = v11 && *(_DWORD *)(this + 52) == 0;
      v13 = v12 && *(_DWORD *)(this + 80) == 0;
      if (v13 && *(_DWORD *)(this + 84) == 0)
        goto LABEL_31;
    }
    if (**(_DWORD **)(*(_QWORD *)(this + 88) + 88) == 1)
    {
      WTF::hashTraitsDeleteBucket<WebCore::FontCascadeCacheKeyHashTraits,WebCore::FontCascadeCacheKey>(this, a2);
      v15 = v2 + 96 * v6;
      this = *(_QWORD *)(v15 + 88);
      *(_QWORD *)(v15 + 88) = 0;
      if (this)
      {
        WebCore::FontCascadeCacheEntry::~FontCascadeCacheEntry((WebCore::FontCascadeCacheEntry *)this, a2);
        this = WTF::fastFree(v16, v17);
      }
      ++v5;
    }
LABEL_31:
    --v6;
  }
  while (v7);
  v18 = *v4;
  if (v5)
  {
    *(_DWORD *)(v18 - 16) += v5;
    v19 = *v4;
    if (*v4)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    *(_DWORD *)(v19 - 12) = v20 - v5;
    v18 = *v4;
  }
  if (v18)
  {
    v21 = *(_DWORD *)(v18 - 4);
    v22 = *(unsigned int *)(v18 - 12);
    if (v21 >= 9 && 6 * (int)v22 < v21)
    {
      v24 = (v22 - 1) | ((v22 - 1) >> 1) | ((((_DWORD)v22 - 1) | ((v22 - 1) >> 1)) >> 2);
      v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
      v26 = (v25 | HIWORD(v25)) + 1;
      if (v26 > 0x400)
      {
        if (v26 <= 2 * v22)
        {
LABEL_50:
          LODWORD(v26) = 2 * v26;
          if (v26 <= 0x400)
            goto LABEL_51;
        }
        v27 = (double)v22;
        v28 = (double)v26;
        v29 = 0.416666667;
      }
      else
      {
        if (3 * v26 <= 4 * v22)
          goto LABEL_50;
LABEL_51:
        v27 = (double)v22;
        v28 = (double)v26;
        v29 = 0.604166667;
      }
      if (v28 * v29 <= v27)
        LODWORD(v26) = 2 * v26;
      if (v26 <= 8)
        v30 = 8;
      else
        v30 = v26;
      return WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::rehash(v4, v30, 0);
    }
  }
  return this;
}

uint64_t WebCore::FontCascadeCache::pruneSystemFallbackFonts(float **this)
{
  float *v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *this;
  result = (uint64_t)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::begin(*this);
  v4 = result;
  v5 = v3;
  if (v1)
    v1 += 24 * *((unsigned int *)v1 - 1);
  if (v1 != (float *)result)
  {
    do
    {
      result = WebCore::FontCascadeFonts::pruneSystemFallbacks(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 88), v3);
      while (1)
      {
        v4 += 96;
        if ((void *)v4 == v5)
          break;
        result = WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::isEmptyOrDeletedBucket((float *)v4);
        if (!(_DWORD)result)
          goto LABEL_9;
      }
      v4 = (uint64_t)v5;
LABEL_9:
      ;
    }
    while ((float *)v4 != v1);
  }
  return result;
}

float *WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::begin(float *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::makeIterator((uint64_t)a1, a1);
  return &a1[24 * *((unsigned int *)a1 - 1)];
}

_BYTE *WebCore::FontCascadeCache::invalidate(WebCore::FontCascadeCache *this, WTF::StringImpl *a2)
{
  _BYTE *result;

  result = *(_BYTE **)this;
  if (result)
  {
    *(_QWORD *)this = 0;
    return (_BYTE *)WTF::HashTable<WebCore::FontCascadeCacheKey,WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>>>,WebCore::FontCascadeCacheKeyHash,WTF::HashMap<WebCore::FontCascadeCacheKey,std::unique_ptr<WebCore::FontCascadeCacheEntry>,WebCore::FontCascadeCacheKeyHash,WebCore::FontCascadeCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontCascadeCacheEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontCascadeCacheKeyHashTraits>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::FontPlatformDataCacheKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::FontPlatformDataCacheKey>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 80 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned __int8 *WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::begin(unsigned __int8 *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::makeIterator((uint64_t)a1, a1);
  return &a1[88 * *((unsigned int *)a1 - 1)];
}

unsigned int *WTF::Vector<WebCore::FontPlatformDataCacheKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebCore::FontPlatformDataCacheKey>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 80 * this), (WTF::StringImpl *)(*(_QWORD *)result + 80 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(80 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::FontPlatformDataCacheKey>::move(v5, (WTF::StringImpl *)((char *)v5 + 80 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

unsigned int *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::values(void)::{lambda(0ul &)#1},WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>>@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (!*(_QWORD *)result)
    return _ZN3WTF13CompactMapperIZNKS_21ThreadSafeWeakHashSetIN7WebCore21WorkerOrWorkletThreadEE6valuesEvEUlRT_E_NS_6VectorINS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERNS_7HashMapIPKS3_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENSA_ISM_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEENS_11DefaultHashISK_EENS_10HashTraitsISK_EENSS_ISP_EENS_15HashTableTraitsEEEvE10compactMapERSH_SX_RKS7_((unsigned int *)a3, (_QWORD **)v4, a2);
  v6 = *(unsigned int *)(*(_QWORD *)result - 12);
  if (!(_DWORD)v6)
    return _ZN3WTF13CompactMapperIZNKS_21ThreadSafeWeakHashSetIN7WebCore21WorkerOrWorkletThreadEE6valuesEvEUlRT_E_NS_6VectorINS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERNS_7HashMapIPKS3_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENSA_ISM_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEENS_11DefaultHashISK_EENS_10HashTraitsISK_EENSS_ISP_EENS_15HashTableTraitsEEEvE10compactMapERSH_SX_RKS7_((unsigned int *)a3, (_QWORD **)v4, a2);
  if (!(v6 >> 29))
  {
    v7 = WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v7;
    return _ZN3WTF13CompactMapperIZNKS_21ThreadSafeWeakHashSetIN7WebCore21WorkerOrWorkletThreadEE6valuesEvEUlRT_E_NS_6VectorINS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERNS_7HashMapIPKS3_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENSA_ISM_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEENS_11DefaultHashISK_EENS_10HashTraitsISK_EENSS_ISP_EENS_15HashTableTraitsEEEvE10compactMapERSH_SX_RKS7_((unsigned int *)a3, (_QWORD **)v4, a2);
  }
  __break(0xC471u);
  return result;
}

void sub_1942D2674(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::FontSelector,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  char v6;

  _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore12FontSelectorES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v6);
  *(_DWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v2 - 12);
    if (v4 >= 0x7FFFFFFF)
      v5 = -2;
    else
      v5 = 2 * v4;
    *(_DWORD *)(a1 + 12) = v5;
    return *(unsigned int *)(v2 - 12);
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t WebCore::Page::setActivityState(uint64_t result, unsigned __int16 a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::PlatformMediaSessionManager *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::MonotonicTime *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::LocalFrameView *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v3 = *(unsigned __int16 *)(result + 658);
  v4 = v3 ^ a2;
  if (!v4)
    return result;
  v5 = result;
  *(_WORD *)(result + 658) = a2;
  v6 = *(unsigned int **)(result + 72);
  ++*v6;
  v7 = a2;
  WebCore::FocusController::setActivityState(v6, a2);
  if (!*v6)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  --*v6;
  if ((v4 & 4) != 0)
    WebCore::Page::setIsVisibleInternal((WebCore::Page *)v5, (v2 >> 2) & 1);
  if ((v4 & 0x10) != 0)
    WebCore::Page::setIsInWindowInternal((uint64_t *)v5, (v2 >> 4) & 1);
  if ((v4 & 0x20) != 0)
    WebCore::Page::setIsVisuallyIdleInternal(v5, (v2 >> 5) & 1);
  if (*(_BYTE *)(*(_QWORD *)(v5 + 160) + 144))
    v8 = 0;
  else
    v8 = *(_QWORD *)(v5 + 160);
  WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v34, v8);
  if ((v4 & 1) != 0)
  {
    if (v34)
    {
      v20 = *(_QWORD *)(v34 + 8);
      if (v20)
      {
        v21 = *(WebCore::LocalFrameView **)(v20 + 288);
        if (v21)
        {
          ++*((_DWORD *)v21 + 2);
          WebCore::LocalFrameView::updateTiledBackingAdaptiveSizing(v21);
          if (*((_DWORD *)v21 + 2) == 1)
            (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v21 + 8))(v21);
          else
            --*((_DWORD *)v21 + 2);
        }
      }
    }
  }
  if ((v4 & 0x1E4) != 0)
    WebCore::Page::updateTimerThrottlingState((WebCore::Page *)v5);
  WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v32, (_QWORD **)(v5 + 976));
  v9 = *(_QWORD *)(v5 + 976);
  if (v9)
  {
    v11 = *(unsigned int *)(v9 - 4);
    v10 = v9 + 8 * v11;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v27 = v5 + 976;
  v28 = v10;
  v29 = v10;
  v30 = v10;
  v31 = v9 + 8 * v11;
  v12 = (WebCore::PlatformMediaSessionManager *)WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v27);
  v14 = v33;
  v15 = v28;
  while (v14 != v15)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)v14 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v14 + 8), v3, *(unsigned __int16 *)(v5 + 658));
    v12 = (WebCore::PlatformMediaSessionManager *)WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v32);
    v14 = v33;
  }
  if (((v3 & 5) == 5) != ((~*(unsigned __int16 *)(v5 + 658) & 5) == 0))
  {
    WebCore::PlatformMediaSessionManager::updateNowPlayingInfoIfNecessary(v12);
    WebCore::Page::stopKeyboardScrollAnimation(*(_QWORD *)(v5 + 160));
  }
  if (!v34)
    goto LABEL_24;
  v16 = *(_QWORD *)(v34 + 8);
  if (!v16)
    goto LABEL_24;
  v22 = *(_QWORD *)(v16 + 296);
  if (!v22)
    goto LABEL_24;
  v23 = *(_DWORD *)(v22 + 24);
  *(_DWORD *)(v22 + 24) = v23 + 2;
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v24 = v22;
    v25 = WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v22);
    v22 = v24;
    if (v25)
    {
      ++*(_DWORD *)(v25 + 8);
      WebCore::AXObjectCache::onPageActivityStateChange(v25, *(_WORD *)(v5 + 658));
      v26 = *(_DWORD *)(v25 + 8);
      if (v26)
      {
        *(_DWORD *)(v25 + 8) = v26 - 1;
        v22 = v24;
        v23 = *(_DWORD *)(v24 + 24) - 2;
        goto LABEL_39;
      }
      __break(0xC471u);
LABEL_49:
      JUMPOUT(0x1942D29DCLL);
    }
  }
LABEL_39:
  if (v23)
  {
    *(_DWORD *)(v22 + 24) = v23;
  }
  else if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v22, v13);
  }
LABEL_24:
  v17 = *(WTF::MonotonicTime **)(v5 + 1144);
  if (v17)
    WebCore::PerformanceMonitor::activityStateChanged(v17, v3, v7);
  result = v34;
  v34 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)result));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v13);
    }
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::Page::setTimerThrottlingState(WTF::MonotonicTime *result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)result + 143) != a2)
  {
    v3 = (uint64_t)result;
    *((_DWORD *)result + 143) = a2;
    WTF::MonotonicTime::now(result);
    *(_QWORD *)(v3 + 576) = v4;
    result = (WTF::MonotonicTime *)WebCore::Page::updateDOMTimerAlignmentInterval(v3);
    if (!a2)
    {
      v5 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = off_1E3400EF8;
      v6 = v5;
      WebCore::Page::forEachDocument(v3, &v6);
      return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return result;
}

WebCore::LocalFrameView *WebCore::LocalFrameView::updateTiledBackingAdaptiveSizing(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 1944);
    if (v2)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256);
      if (v3)
      {
        v4 = this;
        this = (WebCore::LocalFrameView *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 832))(*(_QWORD *)(v3 + 72));
        if (this)
        {
          v5 = (uint64_t)this;
          v6 = WebCore::LocalFrameView::computeScrollability(v4);
          return (WebCore::LocalFrameView *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v6);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::computeScrollability(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (!v1)
    return 3;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || (*(_WORD *)(v2 + 658) & 1) == 0)
    return 3;
  v3 = *(unsigned __int8 *)(v2 + 448) | *((unsigned __int8 *)this + 1144);
  if (*((_BYTE *)this + 312) == 1)
  {
    v4 = *((_QWORD *)this + 32);
    (*(void (**)(void))(*((_QWORD *)this + 8) + 832))();
    if (v3)
      return 3;
    v6 = SHIDWORD(v4) > SHIDWORD(v5);
    if ((int)v4 <= (int)v5)
      goto LABEL_7;
LABEL_11:
    if (!v6)
      return 1;
    return 3;
  }
  if (v3)
    return 3;
  v6 = *((_QWORD *)this + 20) != 0;
  if (*((_QWORD *)this + 19))
    goto LABEL_11;
LABEL_7:
  if (v6)
    return 2;
  else
    return 0;
}

WTF::MonotonicTime *WebCore::Page::updateTimerThrottlingState(WebCore::Page *this)
{
  uint64_t v1;
  __int16 v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 14) + 680);
  if ((v1 & 0x20000) != 0 && (v2 = *((_WORD *)this + 329), (v2 & 0x20) != 0))
  {
    if ((((v2 & 0x1C4) == 0) & WORD1(v1)) != 0)
      v3 = 2;
    else
      v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return WebCore::Page::setTimerThrottlingState(this, v3);
}

uint64_t **`non-virtual thunk to'WebCore::GeolocationController::activityStateDidChange(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return WebCore::GeolocationController::activityStateDidChange((uint64_t **)(a1 - 8), a2, a3);
}

_QWORD *WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  v6 = *a2;
  if (*a2)
  {
    v8 = *((unsigned int *)v6 - 1);
    v7 = &v6[v8];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  a1[3] = v7;
  a1[4] = &v6[v8];
  return WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

uint64_t **WebCore::GeolocationController::activityStateDidChange(uint64_t **this, int a2, int a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = this;
  if (((a3 ^ a2) & 4) != 0)
  {
    v10 = this[20];
    if (v10)
    {
      if (*((_DWORD *)v10 - 3))
      {
        if ((a3 & 4) != 0)
        {
          this = (uint64_t **)WebCore::GeolocationController::startUpdatingIfNecessary((uint64_t)this);
        }
        else if (*((_BYTE *)this + 192))
        {
          this = (uint64_t **)(*(uint64_t (**)(uint64_t *))(*this[4] + 16))(this[4]);
          *((_BYTE *)v3 + 192) = 0;
        }
      }
    }
  }
  if ((*((_WORD *)v3[3] + 329) & 4) != 0)
  {
    v4 = v3[22];
    v3[22] = 0;
    v12 = v4;
    v5 = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v4);
    v7 = v5;
    v8 = v6;
    v9 = 0;
    if (v4)
      v9 = &v4[*((unsigned int *)v4 - 1)];
    if (v9 != v5)
    {
      do
      {
        v11 = *v7++;
        (*(void (**)(uint64_t *, uint64_t))(*v3[4] + 48))(v3[4], v11);
        while (v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_18;
          ++v7;
        }
        v7 = v8;
LABEL_18:
        ;
      }
      while (v7 != v9);
    }
    return WTF::HashSet<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>,WTF::DefaultHash<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTraits<WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>>,WTF::HashTableTraits>::~HashSet(&v12, v6);
  }
  return this;
}

uint64_t WebCore::PerformanceMonitor::updateProcessStateForMemoryPressure(WebCore::PerformanceMonitor *this)
{
  WTF::MemoryPressureHandler *v1;
  WTF::MemoryPressureHandler *v2;
  WTF::MemoryPressureHandler *v4;
  char v5;
  __int16 v6;

  v6 = 0;
  v5 = 1;
  v1 = (WTF::MemoryPressureHandler *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v1 = off_1E3401A98;
  *((_QWORD *)v1 + 1) = &v5;
  *((_QWORD *)v1 + 2) = (char *)&v6 + 1;
  *((_QWORD *)v1 + 3) = &v6;
  v4 = v1;
  WebCore::Page::forEachPage((uint64_t)&v4);
  v2 = v4;
  v4 = 0;
  if (v2)
    v2 = (WTF::MemoryPressureHandler *)(*(uint64_t (**)(WTF::MemoryPressureHandler *))(*(_QWORD *)v2 + 8))(v2);
  WTF::MemoryPressureHandler::singleton(v2);
  return WTF::MemoryPressureHandler::setProcessState();
}

uint64_t WebCore::Page::forEachPage(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  void *v9;

  {
    if (WebCore::allPages(void)::set && *(_DWORD *)(WebCore::allPages(void)::set - 12))
    {
      v1 = (_QWORD *)result;
      v2 = *(unsigned int *)(WebCore::allPages(void)::set - 4);
      if ((_DWORD)v2)
      {
        v3 = 8 * v2;
        for (i = (uint64_t *)WebCore::allPages(void)::set; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v3 -= 8;
          if (!v3)
            return result;
        }
      }
      else
      {
        i = (uint64_t *)WebCore::allPages(void)::set;
      }
      v5 = WebCore::allPages(void)::set + 8 * v2;
      if (i != (uint64_t *)v5)
      {
        v6 = *i;
LABEL_12:
        v7 = *(_DWORD **)(v6 + 8);
        ++*v7;
        result = (*(uint64_t (**)(_QWORD, _DWORD *))(*(_QWORD *)*v1 + 16))(*v1, v7);
        if (*v7 == 1)
        {
          WebCore::Page::~Page((uint64_t)v7);
          result = WTF::fastFree(v8, v9);
        }
        else
        {
          --*v7;
        }
        while (++i != (uint64_t *)v5)
        {
          v6 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v5)
              goto LABEL_12;
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebCore::allPages(void)::set = 0;
  }
  return result;
}

uint64_t WebCore::PerformanceMonitor::activityStateChanged(WTF::MonotonicTime *FireTime, unsigned __int8 a2, unsigned __int8 a3)
{
  WTF::MonotonicTime *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  WebCore::Page **v16;
  double v17;
  BOOL v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;

  v5 = FireTime;
  v6 = a3 ^ a2;
  v7 = *(_QWORD *)(*(_QWORD *)FireTime + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v7 + 112) + 680) & 0x1000000000) != 0 && ((a3 ^ a2) & 4) != 0)
  {
    if (*((_BYTE *)FireTime + 176))
      *((_BYTE *)FireTime + 176) = 0;
    if ((a3 & 4) != 0)
    {
      if ((*((_QWORD *)FireTime + 16) & 0xFFFFFFFFFFFFLL) != 0)
        FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WTF::MonotonicTime *)((char *)FireTime + 96));
    }
    else
    {
      if (*(_BYTE *)(v7 + 1093))
        v18 = 0;
      else
        v18 = WebCore::gNonUtilityPageCount == 1;
      if (v18)
      {
        *((_QWORD *)FireTime + 15) = 0;
        WTF::MonotonicTime::now(FireTime);
        FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)v5 + 96, v19 + 5.0);
      }
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 680);
  if ((v9 & 0x800000000) != 0)
  {
    if ((a2 & 1) != 0)
      v10 = 2;
    else
      v10 = 1;
    v11 = (a2 & 4) == 0;
    if ((a2 & 4) == 0)
      v10 = 0;
    if ((a3 & 1) != 0)
      v12 = 2;
    else
      v12 = 1;
    v13 = v12 == v10;
    v14 = a3 & 4;
    if ((a3 & 4) == 0)
      v13 = v11;
    if (!v13)
    {
      v16 = WebCore::PerformanceMonitor::measureCPUUsageInActivityState((unsigned __int8 *)v5, v10);
      *((_QWORD *)v5 + 26) = 0x4082C00000000000;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)v5 + 184, v17 + 600.0);
      v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 680);
    }
  }
  else
  {
    v14 = a3 & 4;
  }
  if ((v9 & 0x2000000000) != 0 && (v6 & 4) != 0)
  {
    if (v14)
    {
      if ((*((_QWORD *)v5 + 45) & 0xFFFFFFFFFFFFLL) != 0)
        FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WTF::MonotonicTime *)((char *)v5 + 328));
      goto LABEL_19;
    }
    if (*(_BYTE *)(v8 + 1093))
      v20 = 0;
    else
      v20 = WebCore::gNonUtilityPageCount == 1;
    if (v20)
    {
      *((_QWORD *)v5 + 44) = 0;
      WTF::MonotonicTime::now(FireTime);
      FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)v5 + 328, v21 + 10.0);
    }
  }
  else if (v14)
  {
LABEL_19:
    *((_BYTE *)v5 + 440) = 0;
    if ((*((_QWORD *)v5 + 52) & 0xFFFFFFFFFFFFLL) != 0)
      FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WTF::MonotonicTime *)((char *)v5 + 384));
    return WebCore::PerformanceMonitor::updateProcessStateForMemoryPressure(FireTime);
  }
  if (!*((_BYTE *)v5 + 440)
    && ((*((_QWORD *)v5 + 52) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)v5 + 52) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    *((_QWORD *)v5 + 51) = 0;
    WTF::MonotonicTime::now(FireTime);
    FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)v5 + 384, v22 + 480.0);
  }
  return WebCore::PerformanceMonitor::updateProcessStateForMemoryPressure(FireTime);
}

unsigned int *WebCore::FocusController::setActivityState(unsigned int *result, unsigned __int16 a2)
{
  unsigned int *v2;
  char v3;
  __int16 v4;
  char v5;
  WebCore::Document *v6;

  v2 = result;
  v3 = a2;
  v4 = *((_WORD *)result + 13) ^ a2;
  v5 = v4;
  *((_WORD *)result + 13) = a2;
  if ((v4 & 2) != 0)
    result = WebCore::FocusController::setFocusedInternal(result, (WebCore::Document *)((a2 >> 1) & 1));
  if ((v5 & 1) != 0)
  {
    v6 = (WebCore::Document *)(v3 & 1);
    result = WebCore::FocusController::setActiveInternal(v2, v6);
    if ((v5 & 4) != 0)
      return (unsigned int *)WebCore::FocusController::setIsVisibleAndActiveInternal(*(WebCore::FocusController **)(*((_QWORD *)v2 + 1) + 8), (int)v6);
  }
  return result;
}

uint64_t *WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1;
  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
      goto LABEL_15;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v7 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v3;
    if (!v7)
      goto LABEL_15;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
LABEL_15:
      do
        v5 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v5 + 1, (unsigned int *)v3));
    }
    v2 = a1;
  }
  else
  {
    v3 = 0;
  }
  *v2 = v3;
  return v2;
}

{
  uint64_t v3;
  unsigned int v4;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    goto LABEL_12;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
LABEL_12:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  *a1 = v3;
  return a1;
}

_BYTE **WTF::Detail::CallableWrapper<WebCore::PerformanceMonitor::updateProcessStateForMemoryPressure(void)::$_0,void,WebCore::Page &>::call(_BYTE **result, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(a2 + 1144);
  if (v2)
  {
    v3 = *(_WORD *)(a2 + 658);
    if (!*(_BYTE *)(v2 + 440))
      *result[1] = 0;
    if ((v3 & 0x40) != 0)
      *result[2] = 1;
    if ((v3 & 0x100) != 0)
      *result[3] = 1;
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

uint64_t WebCore::Page::updateDOMTimerAlignmentInterval(uint64_t this)
{
  uint64_t v1;
  int v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;

  v1 = this;
  v2 = *(_DWORD *)(this + 572);
  if (!v2)
  {
    v7 = 0.03;
    if ((*(_BYTE *)(this + 1168) & 0x14) == 0)
      v7 = 0.0;
    *(double *)(this + 584) = v7;
    goto LABEL_15;
  }
  if (v2 != 2)
  {
    if (v2 != 1)
      goto LABEL_15;
    v6 = 0x3FF0000000000000;
LABEL_14:
    *(_QWORD *)(v1 + 584) = v6;
LABEL_15:
    if ((*(_QWORD *)(v1 + 624) & 0xFFFFFFFFFFFFLL) != 0)
      return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 592));
    return this;
  }
  if (*(_BYTE *)(this + 657))
  {
    v6 = *(_QWORD *)(this + 648);
    v5 = *(double *)&v6;
LABEL_12:
    if (v5 < 1.0)
      v6 = 0x3FF0000000000000;
    goto LABEL_14;
  }
  this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  v4 = v3 - *(double *)(v1 + 576);
  v5 = *(double *)(v1 + 648);
  if (v4 >= v5)
  {
    v6 = *(_QWORD *)(v1 + 648);
    goto LABEL_12;
  }
  v8 = *(_QWORD *)&v4;
  if (v4 < 1.0)
    v8 = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 584) = v8;
  if ((*(_QWORD *)(v1 + 624) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v1 + 624) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v9 = *(double *)&v8;
    *(_QWORD *)(v1 + 616) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    return WebCore::TimerBase::setNextFireTime(v1 + 592, v10 + v9);
  }
  return this;
}

uint64_t WebCore::Page::setIsVisuallyIdleInternal(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  WebCore::RenderingUpdateScheduler *v4;
  int v5;

  v2 = *(_BYTE *)(this + 1168);
  if ((v2 & 1) != a2)
  {
    v3 = this;
    *(_BYTE *)(this + 1168) = v2 & 0xFE | a2;
    v4 = *(WebCore::RenderingUpdateScheduler **)(this + 672);
    if (!v4)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
    ++*((_DWORD *)v4 + 2);
    WebCore::RenderingUpdateScheduler::adjustRenderingUpdateFrequency(v4);
    v5 = *((_DWORD *)v4 + 2);
    if (v5)
    {
      *((_DWORD *)v4 + 2) = v5 - 1;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
    }
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t *WebCore::Page::setIsInWindowInternal(uint64_t *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (uint64_t)this;
  v4 = this[20];
  if (v4)
  {
    while (1)
    {
      do
      {
LABEL_2:
        v5 = (_QWORD *)v4;
        if (!*(_BYTE *)(v4 + 144))
        {
          v6 = *(_QWORD *)(v4 + 288);
          if (v6)
          {
            v7 = *(_DWORD *)(v6 + 8) + 1;
            *(_DWORD *)(v6 + 8) = v7;
            v8 = *(_QWORD *)(*(_QWORD *)(v6 + 328) + 296);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 1944);
              if (v9)
              {
                this = *(uint64_t **)(v9 + 400);
                if (this)
                {
                  this = WebCore::RenderLayerCompositor::setIsInWindow(this, a2);
                  v7 = *(_DWORD *)(v6 + 8);
                }
              }
            }
            v10 = v7 - 1;
            if (v10)
              *(_DWORD *)(v6 + 8) = v10;
            else
              this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          }
        }
        v4 = v5[11];
      }
      while (v4);
      v11 = *(_QWORD *)(v5[6] + 8);
      if (!v11)
        break;
      v4 = v5[9];
      if (!v4)
      {
        while (1)
        {
          v12 = *(_QWORD *)(v11 + 56);
          if (!v12)
            goto LABEL_18;
          v11 = *(_QWORD *)(v12 + 8);
          if (!v11)
            goto LABEL_18;
          v4 = *(_QWORD *)(v11 + 72);
          if (v4)
            goto LABEL_2;
        }
      }
    }
  }
LABEL_18:
  if ((a2 & 1) != 0)
    return (uint64_t *)WebCore::Page::resumeAnimatingImages(v3);
  return this;
}

uint64_t WebCore::Page::setIsVisibleInternal(WebCore::Page *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::LocalFrameView *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::LocalFrameView *v15;
  uint64_t v16;

  if (a2)
  {
    *((_BYTE *)this + 657) = 0;
    WebCore::Page::resumeScriptedAnimations(this);
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E3400FE8;
    v16 = v3;
    WebCore::Page::forEachDocument((uint64_t)this, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 20);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 144))
      {
        v5 = *(WebCore::LocalFrameView **)(v4 + 288);
        if (v5)
        {
          ++*((_DWORD *)v5 + 2);
          WebCore::LocalFrameView::show(v5);
          if (*((_DWORD *)v5 + 2) == 1)
            (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v5 + 8))(v5);
          else
            --*((_DWORD *)v5 + 2);
        }
      }
    }
    if ((*(_QWORD *)(*((_QWORD *)this + 14) + 680) & 0x8000) != 0)
    {
      v6 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v6 = off_1E3401010;
      v16 = v6;
      WebCore::Page::forEachDocument((uint64_t)this, &v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E3401038;
    v16 = v7;
    WebCore::Page::forEachDocument((uint64_t)this, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    WebCore::Page::resumeAnimatingImages((uint64_t)this);
    if (*((_BYTE *)this + 1192))
    {
      WebCore::Page::logNavigation((uint64_t)this, (_BYTE *)this + 1176);
      std::optional<WebCore::Page::Navigation>::operator=[abi:sn180100]((uint64_t)this + 1176, v8);
    }
  }
  else
  {
    if ((*(_QWORD *)(*((_QWORD *)this + 14) + 680) & 0x8000) != 0)
    {
      v11 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = off_1E3401060;
      v16 = v11;
      WebCore::Page::forEachDocument((uint64_t)this, &v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = off_1E3401088;
    v16 = v12;
    WebCore::Page::forEachDocument((uint64_t)this, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E34010B0;
    v16 = v13;
    WebCore::Page::forEachDocument((uint64_t)this, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WebCore::Page::suspendScriptedAnimations(this);
    v14 = *((_QWORD *)this + 20);
    if (v14)
    {
      if (!*(_BYTE *)(v14 + 144))
      {
        v15 = *(WebCore::LocalFrameView **)(v14 + 288);
        if (v15)
        {
          ++*((_DWORD *)v15 + 2);
          WebCore::LocalFrameView::hide(v15);
          if (*((_DWORD *)v15 + 2) == 1)
            (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v15 + 8))(v15);
          else
            --*((_DWORD *)v15 + 2);
        }
      }
    }
  }
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = off_1E34010D8;
  v16 = v9;
  WebCore::Page::forEachDocument((uint64_t)this, &v16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebCore::Page::resumeAnimatingImages(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  WebCore::LocalFrameView *v3;

  v1 = *(_QWORD *)(this + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = *(WebCore::LocalFrameView **)(v1 + 288);
    if (v3)
    {
      ++*((_DWORD *)v3 + 2);
      this = WebCore::LocalFrameView::resumeVisibleImageAnimationsIncludingSubframes(v3);
      if (*((_DWORD *)v3 + 2) == 1)
        return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
      else
        --*((_DWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::resumeVisibleImageAnimationsIncludingSubframes(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E33FF9E0;
  v4 = v2;
  WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

WebCore::FontCache **WebCore::ThreadGlobalData::initializeFontCache(WebCore::FontCache **this)
{
  WebCore::FontCache *v2;
  WTF::StringImpl *v3;
  WebCore::FontCache *v5;

  v2 = (WebCore::FontCache *)WTF::fastMalloc((WTF *)0x458);
  v5 = (WebCore::FontCache *)WebCore::FontCache::FontCache(v2);
  std::unique_ptr<WebCore::FontCache>::operator=[abi:sn180100](this + 10, (WTF::StringImpl *)&v5);
  return std::unique_ptr<WebCore::FontCache>::~unique_ptr[abi:sn180100](&v5, v3);
}

WebCore::FontCache *WebCore::FontCache::FontCache(WebCore::FontCache *this)
{
  WebCore::TimerBase *v2;
  _QWORD *v3;

  v2 = WebCore::Timer::Timer<WebCore::FontCache,WebCore::FontCache>(this, (uint64_t)this);
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 8) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 9) = v3;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 140) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_QWORD *)((char *)this + 109) = 0;
  WebCore::FontDatabase::FontDatabase((uint64_t)this + 144, 1);
  WebCore::FontDatabase::FontDatabase((uint64_t)this + 208, 0);
  *((_QWORD *)this + 42) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  WebCore::SystemFontDatabaseCoreText::SystemFontDatabaseCoreText((WebCore::FontCache *)((char *)this + 344));
  return this;
}

uint64_t WebCore::FontDatabase::FontDatabase(uint64_t result, char a2)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 21) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 45) = 0;
  *(_BYTE *)(result + 56) = a2;
  return result;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::FontCache,WebCore::FontCache>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E340B760;
  v4[1] = WebCore::FontCache::purgeInactiveFontDataIfNeeded;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

double WebCore::SystemFontDatabaseCoreText::SystemFontDatabaseCoreText(WebCore::SystemFontDatabaseCoreText *this)
{
  _BYTE *v1;
  double result;

  v1 = WTF::EnumeratedArray<WebCore::SystemFontDatabase::FontShorthand,std::optional<WebCore::SystemFontDatabase::SystemFontShorthandInfo>,(WebCore::SystemFontDatabase::FontShorthand)25>::EnumeratedArray(this);
  *(_QWORD *)(v1 + 669) = 0;
  result = 0.0;
  *((_OWORD *)v1 + 41) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_QWORD *)(v1 + 693) = 0;
  *((_OWORD *)v1 + 44) = 0u;
  *(_QWORD *)(v1 + 717) = 0;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_QWORD *)(v1 + 741) = 0;
  *((_OWORD *)v1 + 47) = 0u;
  *((_QWORD *)v1 + 78) = 0;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_QWORD *)(v1 + 645) = 0;
  return result;
}

_BYTE *WTF::EnumeratedArray<WebCore::SystemFontDatabase::FontShorthand,std::optional<WebCore::SystemFontDatabase::SystemFontShorthandInfo>,(WebCore::SystemFontDatabase::FontShorthand)25>::EnumeratedArray(_BYTE *result)
{
  *result = 0;
  result[16] = 0;
  result[24] = 0;
  result[40] = 0;
  result[48] = 0;
  result[64] = 0;
  result[72] = 0;
  result[88] = 0;
  result[96] = 0;
  result[112] = 0;
  result[120] = 0;
  result[136] = 0;
  result[144] = 0;
  result[160] = 0;
  result[168] = 0;
  result[184] = 0;
  result[192] = 0;
  result[208] = 0;
  result[216] = 0;
  result[232] = 0;
  result[240] = 0;
  result[256] = 0;
  result[264] = 0;
  result[280] = 0;
  result[288] = 0;
  result[304] = 0;
  result[312] = 0;
  result[328] = 0;
  result[336] = 0;
  result[352] = 0;
  result[360] = 0;
  result[376] = 0;
  result[384] = 0;
  result[400] = 0;
  result[408] = 0;
  result[424] = 0;
  result[432] = 0;
  result[448] = 0;
  result[456] = 0;
  result[472] = 0;
  result[480] = 0;
  result[496] = 0;
  result[504] = 0;
  result[520] = 0;
  result[528] = 0;
  result[544] = 0;
  result[552] = 0;
  result[568] = 0;
  result[576] = 0;
  result[592] = 0;
  result[600] = 0;
  result[616] = 0;
  return result;
}

uint64_t WebCore::Page::suspendScriptedAnimations(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  *((_BYTE *)this + 784) = 1;
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400DB8;
  v4 = v2;
  WebCore::Page::forEachDocument((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::LocalFrameView::hide(WebCore::LocalFrameView *this)
{
  WebCore::ScrollView::hide(this);
  return WebCore::LocalFrameView::adjustTiledBackingCoverage((uint64_t)this);
}

uint64_t WebCore::Widget::hide(uint64_t this)
{
  void *v1;

  if (*(_BYTE *)(this + 24))
  {
    *(_BYTE *)(this + 24) = 0;
    v1 = *(void **)(this + 40);
    if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EE342188))
      v1 = (void *)objc_msgSend(v1, "superview");
    return objc_msgSend(v1, "setHidden:", 1);
  }
  return this;
}

uint64_t WebCore::ScrollView::hide(WebCore::ScrollView *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)this + 25))
    {
      v2 = WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin((_QWORD **)this + 18);
      v3 = v2;
      v5 = v4;
      v6 = *((_QWORD *)this + 18);
      v7 = v6 ? v6 + 8 * *(unsigned int *)(v6 - 4) : 0;
      if ((uint64_t *)v7 != v2)
      {
        do
        {
          v9 = *v3++;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 64))(v9, 0);
          while (v3 != v5)
          {
            if ((unint64_t)(*v3 + 1) > 1)
              goto LABEL_13;
            ++v3;
          }
          v3 = v5;
LABEL_13:
          ;
        }
        while (v3 != (uint64_t *)v7);
      }
    }
    *((_BYTE *)this + 24) = 0;
  }
  return WebCore::Widget::hide((uint64_t)this);
}

uint64_t WTF::HashTable<WebCore::FontPlatformDataCacheKey,WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>>,WebCore::FontPlatformDataCacheKeyHash,WTF::HashMap<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>,WebCore::FontPlatformDataCacheKeyHash,WebCore::FontPlatformDataCacheKeyHashTraits,WTF::HashTraits<std::unique_ptr<WebCore::FontPlatformData>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FontPlatformDataCacheKeyHashTraits>::deallocateTable(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (!*(_BYTE *)a1)
        a1 = WTF::KeyValuePair<WebCore::FontPlatformDataCacheKey,std::unique_ptr<WebCore::FontPlatformData>>::~KeyValuePair(a1, a2);
      a1 += 11;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WebCore::Page::stopKeyboardScrollAnimation(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  WebCore::ScrollableArea *v4;
  uint64_t *v5[5];
  uint64_t *v6;
  uint64_t *v7;

  if (this)
  {
    v1 = this;
    do
    {
      if (!*(_BYTE *)(v1 + 144))
      {
        v2 = *(_QWORD *)(v1 + 288);
        if (v2)
        {
          ++*(_DWORD *)(v2 + 8);
          WebCore::ScrollableArea::stopKeyboardScrollAnimation((WebCore::ScrollableArea *)(v2 + 64));
          v3 = *(uint64_t **)(v2 + 1288);
          if (v3)
          {
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(*(uint64_t **)(v2 + 1288), &v6);
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v5);
            while (v7 != v5[1])
            {
              v4 = *(WebCore::ScrollableArea **)(*v7 + 8);
              (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v4 + 16))(v4);
              (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v4 + 64))(v4);
              WebCore::ScrollableArea::stopKeyboardScrollAnimation(v4);
              (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v4 + 24))(v4);
              WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v6);
            }
          }
          if (*(_DWORD *)(v2 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
          else
            --*(_DWORD *)(v2 + 8);
        }
      }
      this = WebCore::FrameTree::traverseNext((_QWORD *)(v1 + 48), 0);
      v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebCore::Page::resumeScriptedAnimations(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  *((_BYTE *)this + 784) = 0;
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400DE0;
  v4 = v2;
  WebCore::Page::forEachDocument((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::PlatformMediaSessionManager::updateNowPlayingInfoIfNecessary(WebCore::PlatformMediaSessionManager *this)
{
  {
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      (*(void (**)(uint64_t))(*(_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager
                                      + 48))(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager);
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
}

uint64_t WebCore::KeyboardScrollingAnimator::handleKeyUpEvent(uint64_t this)
{
  _BYTE *v1;

  if (*(_BYTE *)(this + 24))
  {
    *(_BYTE *)(this + 24) = 0;
    v1 = *(_BYTE **)(this + 16);
    this = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v1 + 80))(v1, 0);
    if ((_DWORD)this)
      v1[45] = 0;
  }
  return this;
}

uint64_t WebCore::ScrollableArea::stopKeyboardScrollAnimation(WebCore::ScrollableArea *this)
{
  WebCore::ScrollAnimator *v1;

  v1 = (WebCore::ScrollAnimator *)WebCore::ScrollableArea::scrollAnimator(this);
  return WebCore::ScrollAnimator::stopKeyboardScrollAnimation(v1);
}

uint64_t WebCore::ScrollAnimator::stopKeyboardScrollAnimation(WebCore::ScrollAnimator *this)
{
  return WebCore::ScrollingEffectsController::stopKeyboardScrolling((WebCore::ScrollAnimator *)((char *)this + 24));
}

WebCore *WebCore::Page::logNavigation(uint64_t a1, _BYTE *a2)
{
  WebCore *result;
  WebCore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v12 = 0;
  result = (WebCore *)"standard";
  switch(a2[8])
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      result = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_3;
    case 6:
    case 7:
      return result;
    default:
LABEL_3:
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 112) + 672) & 0x800000000000) == 0 || (v5 = *(WebCore **)(a1 + 256)) == 0)
      {
        result = (WebCore *)WebCore::emptyDiagnosticLoggingClient(result);
        v5 = result;
      }
      WebCore::DiagnosticLoggingKeys::navigationKey((uint64_t *)&v11, result);
      (**(void (***)(WebCore *, WTF::StringImpl **, WTF::StringImpl **, _QWORD))v5)(v5, &v11, &v12, 0);
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (*(_QWORD *)a2)
      {
        if (*(_DWORD *)(*(_QWORD *)a2 + 4))
        {
          v8 = (uint64_t *)MEMORY[0x19AEA53F4]();
          if ((v8 & 1) == 0)
          {
            if ((*(_QWORD *)(*(_QWORD *)(a1 + 112) + 672) & 0x800000000000) == 0
              || (v9 = *(uint64_t **)(a1 + 256)) == 0)
            {
              v8 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v8);
              v9 = v8;
            }
            WebCore::DiagnosticLoggingKeys::domainVisitedKey((uint64_t *)&v11, (WebCore::DiagnosticLoggingKeys *)v8);
            (*(void (**)(uint64_t *, WTF::StringImpl **, _BYTE *, uint64_t))(*v9 + 24))(v9, &v11, a2, 1);
            v10 = v11;
            v11 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v6);
              else
                *(_DWORD *)v10 -= 2;
            }
          }
        }
      }
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WebCore *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      break;
  }
  return result;
}

uint64_t WebCore::DiagnosticLoggingKeys::domainVisitedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::navigationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::platformCaptionDisplayMode(WebCore::CaptionUserPreferencesMediaAF *this, MACaptionAppearanceDomain a2)
{
  uint64_t DisplayType;

  DisplayType = WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetDisplayType((WebCore *)1, a2);
  if (DisplayType == 2)
    return 2;
  else
    return DisplayType != 1;
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetDisplayType(WebCore *this, MACaptionAppearanceDomain a2)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetDisplayType(MACaptionAppearanceDomain)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetDisplayType(MACaptionAppearanceDomain)::once, &__block_literal_global_106_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetDisplayType(this, (MACaptionAppearanceDomain)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetDisplayType);
}

WebCore::RenderElement *WebCore::RenderLayerBacking::updateGeometry(WebCore::RenderLayerBacking *this, const WebCore::RenderLayer *a2)
{
  const WebCore::RenderLayer *v2;
  _QWORD *v4;
  WebCore::RenderView *v5;
  uint64_t v6;
  float v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  const WebCore::RenderObject *v17;
  WebCore *v18;
  const WebCore::LayoutRect *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::LayerAncestorClippingStack *v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::RenderLayer *v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  int v34;
  float v35;
  WebCore::RenderLayer *v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  _BOOL4 v44;
  unint64_t v45;
  _BOOL4 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  float v61;
  float v62;
  const WebCore::RenderLayer *v63;
  unint64_t v64;
  uint64_t v65;
  const WebCore::RenderLayerModelObject *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  float v74;
  float v75;
  float v76;
  double v77;
  float v78;
  float v79;
  float v80;
  double v81;
  int v82;
  BOOL v83;
  int v84;
  int v85;
  double v86;
  uint64_t v87;
  double v88;
  unint64_t v89;
  int v90;
  int v91;
  BOOL v93;
  float v94;
  float v95;
  float *v96;
  const WebCore::LayoutSize *v97;
  unint64_t v98;
  WebCore::RenderLayer *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const WebCore::RenderLayer *v115;
  uint64_t v116;
  uint64_t v117;
  signed int v118;
  uint64_t v119;
  WebCore::RenderView *v120;
  WebCore::RenderLayerCompositor *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const WebCore::RenderLayer *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  const WebCore::RenderLayer *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WebCore *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  void *v137;
  WebCore::RenderLayerScrollableArea *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)();
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  signed int v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  WebCore::RenderBox *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  int *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  float *v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  int v183;
  float v184;
  float *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  const WebCore::RenderLayerModelObject *v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  WebCore::RenderLayer *v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int v209;
  int v210;
  const WebCore::LayoutRect *v211;
  float v212;
  float v213;
  float v214;
  float v215;
  double v216;
  int v217;
  double v218;
  int v219;
  double v220;
  int v221;
  double v222;
  int v223;
  uint64_t v224;
  float32x2_t v225;
  uint64_t v226;
  uint64_t v227;
  WebCore::RenderLayerScrollableArea *v228;
  float v229;
  float v230;
  float v231;
  float v232;
  WebCore::RenderElement *result;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  float64x2_t *v249;
  _BOOL4 v251;
  BOOL v252;
  int v253;
  int v254;
  float64x2_t *v255;
  char *v256;
  int v257;
  int v258;
  _BOOL8 v260;
  WebCore::RenderView *v261;
  WebCore::RenderLayerCompositor *v262;
  uint64_t v263;
  uint64_t v264;
  WebCore::RenderView *v265;
  uint64_t v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  __int32 v272;
  __int32 v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  float v281;
  float v282;
  float v283;
  float v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _BOOL8 v292;
  WTF *v293;
  void *v294;
  WTF *v295;
  void *v296;
  uint64_t v297;
  WebCore::RenderView *v298;
  uint64_t v299;
  WebCore::RenderView *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  WebCore::RenderView *v306;
  uint64_t v307;
  WebCore::RenderView *v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  WebCore::ViewTransition *v313;
  _DWORD *active;
  _DWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  float64_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  WebCore::ViewTransition *v324;
  WebCore::ViewTransition *v325;
  uint64_t v326;
  int hasBorderRadius;
  int v329;
  uint64_t v330;
  unsigned int v331;
  int v332;
  float v333;
  int v334;
  WebCore::ViewTransition *v335;
  WebCore::RenderObject *v336;
  _BOOL4 v337;
  uint64_t v338;
  uint64_t v339;
  const WebCore::LayoutSize *v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  float *v344;
  signed int v345;
  int v346;
  float v347;
  float v348;
  double v349;
  uint64_t v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  float v356;
  float v357;
  float *v358;
  _QWORD *v359;
  int32x2_t *v360;
  unint64_t v361;
  unint64_t v362;
  float v363;
  float v364;
  float *v365;
  uint64_t v366;
  float v367;
  float v368;
  uint64_t v369;
  uint64_t v370;
  WebCore::HTMLModelElement *v371;
  uint64_t v372;
  float v373;
  float v374;
  unint64_t v375;
  unsigned int v376;
  unint64_t v377;
  float **v378;
  uint64_t v379;
  int v380;
  int v381;
  float v382;
  unsigned int v383;
  unsigned int v384;
  __int32 v385;
  WebCore::RenderLayerCompositor *v386;
  WebCore::RenderLayer *v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  __int32 v391;
  WebCore::RenderLayerCompositor *v392;
  WebCore::RenderLayerCompositor *v393;
  WTF *v394;
  void *v395;
  WebCore::RenderLayerCompositor *v396;
  WTF *v397;
  void *v398;
  WebCore::RenderLayerCompositor *v399;
  WebCore::RenderLayerCompositor *v400;
  WTF *v401;
  void *v402;
  WebCore::RenderLayerCompositor *v403;
  WebCore::RenderLayerCompositor *v404;
  WTF *v405;
  void *v406;
  WebCore::RenderLayerCompositor *v407;
  WebCore::RenderLayerCompositor *v408;
  WTF *v409;
  void *v410;
  WebCore::RenderLayerCompositor *v411;
  WebCore::RenderLayerCompositor *v412;
  WTF *v413;
  void *v414;
  WebCore::RenderLayerCompositor *v415;
  WebCore::RenderLayerCompositor *v416;
  WTF *v417;
  void *v418;
  WebCore::RenderLayerCompositor *v419;
  WebCore::RenderLayerCompositor *v420;
  WTF *v421;
  void *v422;
  float v423;
  uint64_t v424;
  int v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  float v430;
  float v431;
  unsigned int v432;
  unint64_t v433;
  int v434;
  unsigned int v435;
  _BOOL4 v436;
  _BOOL4 v437;
  int isRunningAcceleratedTransformAnimation;
  uint64_t v440;
  WebCore::RenderLayerBacking *v441;
  float **v442;
  unint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  unint64_t v447;
  char v448;
  unint64_t v449;
  char v450;
  WebCore::RenderLayer *v451;
  WebCore::RenderLayer *v452;
  unint64_t v453;
  const WebCore::LayoutRect *v454;
  unint64_t v455;
  float v456;
  const WebCore::LayoutRect *v457;
  uint64_t v458;
  unint64_t v459;
  __int32 v460;
  float *v461;
  int v462;
  int32x4_t v463;
  __int128 v464;
  __int128 v465;
  float64x2_t v466;
  __int128 v467;
  float64x2_t v468;
  __int128 v469;
  __int128 v470;
  unint64_t v471;
  unint64_t v472;
  __int128 v473;
  __int128 v474;

  v2 = a2;
  v4 = *(_QWORD **)(*((_QWORD *)this + 1) + 32);
  v5 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4[3] + 8) + 40) + 8) + 1944);
  v6 = *((_QWORD *)v5 + 50);
  if (!v6)
  {
    v392 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v6 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v392, v5);
    v393 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
    *((_QWORD *)v5 + 50) = v6;
    if (v393)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v393);
      WTF::fastFree(v394, v395);
      v6 = *((_QWORD *)v5 + 50);
    }
    v2 = a2;
  }
  v7 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 528)
                                                    + 8)
                                        + 24)
                            + 8)
                + 364);
  WebCore::Styleable::fromRenderer(*(_QWORD *)(*((_QWORD *)this + 1) + 32), a2, (uint64_t)&v463);
  if ((_BYTE)v465)
  {
    isRunningAcceleratedTransformAnimation = WebCore::Styleable::isRunningAcceleratedTransformAnimation((WebCore::Styleable *)&v463);
    if ((_BYTE)v465)
    {
      if (BYTE8(v464))
      {
        v9 = (WTF::StringImpl *)v464;
        *(_QWORD *)&v464 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  else
  {
    isRunningAcceleratedTransformAnimation = 0;
  }
  WebCore::RenderLayerBacking::updateTransform(this, (const WebCore::RenderStyle *)(v4 + 10));
  v10.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(v4[11] + 32) + 4);
  v11 = *((_QWORD *)this + 1);
  while (1)
  {
    v11 = *(_QWORD *)(v11 + 40);
    if (!v11)
      break;
    if ((*(_BYTE *)(v11 + 24) & 0x4A) != 0)
    {
      if (!*(_QWORD *)(v11 + 256))
      {
LABEL_12:
        v10.n128_f32[0] = v10.n128_f32[0]
                        * *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 88) + 32) + 4);
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 40);
          if (!v11)
            break;
          if ((*(_BYTE *)(v11 + 24) & 0x4A) != 0)
          {
            if (!*(_QWORD *)(v11 + 256))
              goto LABEL_12;
            goto LABEL_16;
          }
        }
      }
      break;
    }
  }
LABEL_16:
  (*(void (**)(_QWORD, __n128))(**((_QWORD **)this + 9) + 280))(*((_QWORD *)this + 9), v10);
  *((_BYTE *)this + 292) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 288))(*((_QWORD *)this + 9), *(_QWORD *)(*(_QWORD *)(v4[11] + 32) + 32) + 8);
  *((_BYTE *)this + 293) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 296))(*((_QWORD *)this + 9), *(_QWORD *)(*(_QWORD *)(v4[11] + 40) + 72) + 8);
  v12 = *((_QWORD *)this + 1);
  v13 = *(_QWORD *)(v12 + 24);
  if ((v13 & 0x20) != 0 && (v13 & 0x10) != 0)
  {
    v14 = !WebCore::RenderLayerBacking::paintsIntoWindow(this);
    v12 = *((_QWORD *)this + 1);
    v13 = *(_QWORD *)(v12 + 24);
  }
  else
  {
    v14 = 0;
  }
  if ((v13 & 1) != 0)
  {
    v261 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 24) + 8)
                                                           + 40)
                                               + 8)
                                   + 1944);
    v262 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v261 + 50);
    if (!v262)
    {
      v399 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v262 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v399, v261);
      v400 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v261 + 50);
      *((_QWORD *)v261 + 50) = v262;
      if (v400)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v400);
        WTF::fastFree(v401, v402);
        v262 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v261 + 50);
      }
      v2 = a2;
    }
    v14 = WebCore::RenderLayerCompositor::viewHasTransparentBackground(v262, 0) & v14;
  }
  v15 = (_BYTE *)*((_QWORD *)this + 9);
  if ((_DWORD)v14 != (v15[179] & 1))
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 112))(v15, v14);
  v16 = (_DWORD *)*((_QWORD *)this + 6);
  if (v16)
  {
    if (!v16[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1942D6C64);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v16 + 80) + 312))(*(_QWORD *)(*(_QWORD *)v16 + 80), (*(_DWORD *)(*(_QWORD *)(v4[11] + 40) + 636) >> 20) & 0x1F);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 312))(*((_QWORD *)this + 9), 1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 9) + 312))(*((_QWORD *)this + 9), (*(_DWORD *)(*(_QWORD *)(v4[11] + 40) + 636) >> 20) & 0x1F);
  }
  v18 = *(WebCore **)(*((_QWORD *)this + 1) + 32);
  if (*((_BYTE *)v18 + 46) == 13 && WebCore::canvasCompositingStrategy(v18, v17) == 2)
  {
    v292 = (*(_WORD *)(v4[13] + 234) & 7u) - 3 < 2;
    (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 9) + 600))(*((_QWORD *)this + 9), v292);
    (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 9) + 608))(*((_QWORD *)this + 9), v292);
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 46) == 48)
  {
    v388 = *(_BYTE *)(*(_QWORD *)(v4[11] + 32) + 151) & 7;
    if (v388 == 2)
      v389 = 2;
    else
      v389 = v388 == 1;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 392))(*((_QWORD *)this + 9), v389);
  }
  v19 = (const WebCore::LayoutRect *)WebCore::RenderLayerBacking::computeParentGraphicsLayerRect(this, v2);
  v457 = v19;
  v458 = v20;
  v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v22 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8);
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
  if (*(_QWORD *)(v23 + 1272) == v22)
    goto LABEL_28;
  if (*(_BYTE *)(v21 + 46) == 49)
  {
    v313 = *(WebCore::ViewTransition **)(v23 + 2112);
    if (!v313)
      goto LABEL_28;
    if (!WebCore::ViewTransition::documentElementIsCaptured(v313))
    {
LABEL_403:
      v2 = a2;
      goto LABEL_28;
    }
    v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v2 = a2;
LABEL_396:
    if (!WebCore::RenderElement::element((WebCore::RenderElement *)v21))
      goto LABEL_28;
    active = (_DWORD *)WebCore::Document::activeViewTransition(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8)
                                                                                                 + 40)
                                                                                     + 8));
    if (active)
    {
      v315 = active;
      ++active[6];
      v316 = WebCore::ViewTransition::viewTransitionNewPseudoForCapturedElement((WebCore::ViewTransition *)active, *(WebCore::RenderLayerModelObject **)(*((_QWORD *)this + 1) + 32));
      if (v316)
      {
        v317 = v316;
        ++*(_DWORD *)(v316 + 16);
        v318 = *((_QWORD *)this + 1);
        v319 = *(double *)(v316 + 224);
        v463.i8[0] = 0;
        v463.i8[8] = 0;
        v463.i8[12] = 0;
        BYTE4(v464) = 0;
        BYTE8(v464) = 0;
        LOBYTE(v465) = 0;
        *((_QWORD *)&v465 + 1) = v318;
        *(_QWORD *)&v466.f64[0] = a2;
        v467 = 0uLL;
        v466.f64[1] = v319;
        LODWORD(v468.f64[0]) = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v318 + 32) + 24) + 8) + 40)
                                                                                          + 8));
        v320 = WebCore::ComputedOffsets::fromParentGraphicsLayer((WebCore::ComputedOffsets *)&v463);
        v321 = WebCore::ComputedOffsets::fromParentGraphicsLayer((WebCore::ComputedOffsets *)&v463);
        v322 = *(_QWORD *)(v317 + 232);
        v19 = (const WebCore::LayoutRect *)(v321 & 0xFFFFFFFF00000000 | v320);
        v457 = v19;
        v458 = v322;
        v323 = *(_DWORD *)(v317 + 16);
        if (!v323)
        {
          __break(0xC471u);
          JUMPOUT(0x1942D6A78);
        }
        *(_DWORD *)(v317 + 16) = v323 - 1;
      }
      if (v315[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v315 + 16))(v315);
      else
        --v315[6];
    }
    goto LABEL_403;
  }
  if ((*(_BYTE *)(v21 + 22) & 0x40) != 0)
    goto LABEL_396;
LABEL_28:
  v24 = (WebCore::LayerAncestorClippingStack *)*((_QWORD *)this + 6);
  if (v24)
  {
    WebCore::RenderLayerBacking::updateClippingStackLayerGeometry((WebCore::RenderLayer **)this, v24, v2, (WebCore::LayoutRect *)&v457);
    v19 = v457;
  }
  v25 = WebCore::RenderLayerBacking::computePrimaryGraphicsLayerRect(this, v2, v19);
  v440 = v26;
  v27 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
  v28 = *((_QWORD *)this + 22);
  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v27 + 4) + 24) + 8) + 40) + 8)
                  + 528);
  v30 = 1.0;
  if (v29
    && (v31 = *(_QWORD *)(v29 + 8)) != 0
    && (v32 = *(_QWORD *)(v31 + 24)) != 0
    && (v33 = *(float **)(v32 + 8)) != 0)
  {
    v34 = (*(_DWORD *)v33)++;
    v35 = v33[91];
    if (v34)
    {
      *(_DWORD *)v33 = v34;
      v36 = v27;
    }
    else
    {
      WebCore::Page::~Page((WebCore::Page *)v33);
      WTF::fastFree(v293, v294);
      v36 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 4) + 24) + 8) + 40) + 8)
                      + 528);
    }
  }
  else
  {
    v36 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
    v35 = 1.0;
  }
  LOBYTE(v445) = 0;
  v446 = 0;
  LOBYTE(v447) = 0;
  v448 = 0;
  LOBYTE(v449) = 0;
  v450 = 0;
  v451 = v36;
  v452 = v2;
  v453 = 0;
  v454 = v19;
  v455 = v25;
  if (v29)
  {
    v37 = *(_QWORD *)(v29 + 8);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 24);
      if (v38)
      {
        v39 = *(float **)(v38 + 8);
        if (v39)
        {
          v40 = (*(_DWORD *)v39)++;
          v30 = v39[91];
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v39);
            WTF::fastFree(v295, v296);
          }
        }
      }
    }
  }
  v456 = v30;
  v41 = WebCore::RenderLayer::convertToLayerCoords(v27, v2, v28, 1);
  v42 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)v2, v41, v35);
  v43 = v42 - (_DWORD)v19;
  v44 = __OFSUB__((_DWORD)v42, (_DWORD)v19);
  v437 = v44;
  v434 = v42 - (_DWORD)v19;
  if (__OFSUB__((_DWORD)v42, (_DWORD)v19))
    v43 = (v42 >> 31) + 0x7FFFFFFF;
  v45 = HIDWORD(v25);
  v46 = __OFSUB__(HIDWORD(v42), HIDWORD(v19));
  v436 = v46;
  v47 = HIDWORD(v42) - HIDWORD(v19);
  if (__OFSUB__(HIDWORD(v42), HIDWORD(v19)))
    v47 = (HIDWORD(v42) >> 31) + 0x7FFFFFFF;
  v48 = v43 - v25;
  if (__OFSUB__(v43, (_DWORD)v25))
    v48 = (v43 >> 31) + 0x7FFFFFFF;
  v49 = v47 - HIDWORD(v25);
  if (__OFSUB__(v47, HIDWORD(v25)))
    v49 = (v47 >> 31) + 0x7FFFFFFF;
  *((_QWORD *)this + 25) = v48 | (unint64_t)(v49 << 32);
  v435 = HIDWORD(v42) - HIDWORD(v19);
  v432 = v42;
  v433 = HIDWORD(v42);
  if ((*(_DWORD *)(*(_QWORD *)(v4[11] + 40) + 636) & 0x380) == 0x80)
  {
    v336 = *(WebCore::RenderObject **)(*((_QWORD *)this + 1) + 32);
    v337 = (*((_BYTE *)v336 + 21) & 0x40) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(v336) != 0;
    v50 = !v337;
    LODWORD(v45) = HIDWORD(v25);
  }
  else
  {
    v50 = 0;
  }
  v51 = *((_QWORD *)this + 13);
  v52 = v25;
  v53 = v45;
  if (v51)
  {
    *(float *)v463.i32 = (float)(int)v25 * 0.015625;
    *(float *)&v463.i32[1] = (float)(int)v45 * 0.015625;
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v51 + 128))(v51, &v463);
    v52 = 0;
    v53 = 0;
  }
  v54 = *((_QWORD *)this + 8);
  if (v54)
  {
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v54 + 200))(v54, v50);
    v338 = *((_QWORD *)this + 8);
    *(float *)v463.i32 = (float)v52 * 0.015625;
    *(float *)&v463.i32[1] = (float)v53 * 0.015625;
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v338 + 128))(v338, &v463);
    v339 = *((_QWORD *)this + 8);
    *(float *)v463.i32 = (float)(int)v440 * 0.015625;
    *(float *)&v463.i32[1] = (float)SHIDWORD(v440) * 0.015625;
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v339 + 160))(v339, &v463);
    v52 = 0;
    v53 = 0;
  }
  v55 = *((_QWORD *)this + 9);
  v56 = 0uLL;
  v463 = 0uLL;
  v57 = isRunningAcceleratedTransformAnimation;
  if (isRunningAcceleratedTransformAnimation)
  {
    if (WebCore::RenderLayer::getOverlapBoundsIncludingChildrenAccountingForTransformAnimations(*((uint64_t **)this + 1), v463.i64, 64, 0.0))
    {
      v56 = vmulq_f32(vcvtq_f32_s32(v463), (float32x4_t)vdupq_n_s32(0x3C800000u));
      v57 = 1;
    }
    else
    {
      v57 = 0;
      v56 = 0uLL;
    }
  }
  *(float32x4_t *)(v55 + 376) = v56;
  *(_BYTE *)(v55 + 392) = v57;
  (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 9) + 200))(*((_QWORD *)this + 9), v50);
  (*(void (**)(_QWORD, BOOL))(**((_QWORD **)this + 9) + 272))(*((_QWORD *)this + 9), (*(_DWORD *)(*(_QWORD *)(v4[11] + 40) + 636) & 0x400) == 0);
  v58 = *((_QWORD *)this + 9);
  *(float *)v463.i32 = (float)v52 * 0.015625;
  *(float *)&v463.i32[1] = (float)v53 * 0.015625;
  (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v58 + 128))(v58, &v463);
  v59 = *((_QWORD *)this + 9);
  v60 = HIDWORD(v440);
  v61 = (float)(int)v440 * 0.015625;
  v62 = (float)SHIDWORD(v440) * 0.015625;
  *(float *)v463.i32 = v61;
  *(float *)&v463.i32[1] = v62;
  (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v59 + 160))(v59, &v463);
  v444 = *((_QWORD *)this + 24);
  v63 = a2;
  v64 = WebCore::RenderLayer::convertToLayerCoords(v36, a2, 0, 1);
  v65 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)a2, v64, v30);
  v446 = 1;
  v445 = v65;
  v67 = v65 - (_DWORD)v19;
  if (__OFSUB__((_DWORD)v65, (_DWORD)v19))
    v67 = (v65 >> 31) + 0x7FFFFFFF;
  v68 = HIDWORD(v65) - HIDWORD(v19);
  if (__OFSUB__(HIDWORD(v65), HIDWORD(v19)))
    v68 = (HIDWORD(v65) >> 31) + 0x7FFFFFFF;
  v69 = v67 - v25;
  if (__OFSUB__(v67, (_DWORD)v25))
    v69 = (v67 >> 31) + 0x7FFFFFFF;
  v70 = v68 - HIDWORD(v25);
  if (__OFSUB__(v68, HIDWORD(v25)))
    v70 = (v68 >> 31) + 0x7FFFFFFF;
  v450 = 1;
  v449 = v69 | (unint64_t)(v70 << 32);
  v71 = 0x7FFFFFFF;
  if ((_DWORD)v70 == 0x80000000)
    v72 = 0x7FFFFFFF;
  else
    v72 = -(int)v70;
  if (v69 == 0x80000000)
    v73 = 0x7FFFFFFF;
  else
    v73 = -v69;
  v74 = (float)(v7 * (float)v73) * 0.015625;
  v75 = floorf(v74);
  v76 = ceilf(v74);
  if (v73 >= 0)
    v76 = v75;
  v77 = (float)(v76 / v7) * 64.0;
  if (v77 < 2147483650.0)
  {
    if (v77 <= -2147483650.0)
      v71 = 0x80000000;
    else
      v71 = (int)v77;
  }
  v78 = (float)(v7 * (float)v72) * 0.015625;
  v79 = floorf(v78);
  v80 = ceilf(v78);
  if (v72 >= 0)
    v80 = v79;
  v81 = (float)(v80 / v7) * 64.0;
  if (v81 >= 2147483650.0)
  {
    v82 = 0x7FFFFFFF;
  }
  else if (v81 <= -2147483650.0)
  {
    v82 = 0x80000000;
  }
  else
  {
    v82 = (int)v81;
  }
  v83 = __OFSUB__(v73, v71);
  v84 = v73 - v71;
  if (v83)
    v84 = (v73 >> 31) + 0x7FFFFFFF;
  v83 = __OFSUB__(v72, v82);
  v85 = v72 - v82;
  if (v83)
    v85 = (v72 >> 31) + 0x7FFFFFFF;
  v86 = (float)((float)v84 * 0.015625) * 64.0;
  if (v86 >= 2147483650.0)
  {
    v87 = 0x7FFFFFFFLL;
  }
  else if (v86 <= -2147483650.0)
  {
    v87 = 0x80000000;
  }
  else
  {
    v87 = (int)v86;
  }
  v88 = (float)((float)v85 * 0.015625) * 64.0;
  if (v88 >= 2147483650.0)
  {
    v89 = 0x7FFFFFFF00000000;
  }
  else if (v88 <= -2147483650.0)
  {
    v89 = 0x8000000000000000;
  }
  else
  {
    v89 = (unint64_t)(int)v88 << 32;
  }
  v90 = v73 - v87;
  if (__OFSUB__(v73, (_DWORD)v87))
    v90 = (v73 >> 31) + 0x7FFFFFFF;
  v91 = v72 - HIDWORD(v89);
  if (__OFSUB__(v72, HIDWORD(v89)))
    v91 = (v72 >> 31) + 0x7FFFFFFF;
  *((_QWORD *)this + 24) = v89 | v87;
  if (v89 | v87)
    v93 = 1;
  else
    v93 = *((_DWORD *)this + 46) != (_DWORD)v440 || *((_DWORD *)this + 47) != HIDWORD(v440);
  *((_BYTE *)this + 296) = v93;
  v94 = (float)v90 * 0.015625;
  v95 = (float)v91 * 0.015625;
  v96 = (float *)*((_QWORD *)this + 9);
  if (v94 != v96[10] || v95 != v96[11])
  {
    v96[10] = v94;
    v96[11] = v95;
    (*(void (**)(float *))(*(_QWORD *)v96 + 320))(v96);
  }
  if (!*((_BYTE *)this + 290) && (v461 = (float *)*((_QWORD *)this + 12)) != 0)
  {
    v98 = WebCore::clippingLayerBox(*(WebCore **)(*((_QWORD *)this + 1) + 32), v66);
    v97 = v340;
    v341 = WebCore::ComputedOffsets::fromPrimaryGraphicsLayer((WebCore::ComputedOffsets *)&v445);
    v342 = v98 + v341;
    if (__OFADD__((_DWORD)v98, (_DWORD)v341))
      v342 = (v98 >> 31) + 0x7FFFFFFF;
    v343 = (HIDWORD(v98) + HIDWORD(v341));
    if (__OFADD__(HIDWORD(v98), HIDWORD(v341)))
      v343 = ((HIDWORD(v98) >> 31) + 0x7FFFFFFF);
    v459 = v342 | (unint64_t)(v343 << 32);
    WebCore::snappedGraphicsLayer((WebCore *)&v471, (const WebCore::LayoutSize *)&v459, v97, *(const WebCore::RenderLayerModelObject **)(*((_QWORD *)this + 1) + 32));
    *(float *)v463.i32 = (float)(int)v471 * 0.015625;
    *(float *)&v463.i32[1] = (float)SHIDWORD(v471) * 0.015625;
    (*(void (**)(float *, int32x4_t *))(*(_QWORD *)v461 + 128))(v461, &v463);
    *(float *)v463.i32 = (float)(int)v472 * 0.015625;
    *(float *)&v463.i32[1] = (float)SHIDWORD(v472) * 0.015625;
    (*(void (**)(float *, int32x4_t *))(*(_QWORD *)v461 + 160))(v461, &v463);
    v344 = v461;
    v345 = v98 - v473;
    if (__OFSUB__((_DWORD)v98, (_DWORD)v473))
      v345 = (v98 >> 31) + 0x7FFFFFFF;
    v346 = HIDWORD(v98) - DWORD1(v473);
    if (__OFSUB__(HIDWORD(v98), DWORD1(v473)))
      v346 = (HIDWORD(v98) >> 31) + 0x7FFFFFFF;
    v347 = (float)v345 * 0.015625;
    v348 = (float)v346 * 0.015625;
    if (v347 != v461[10] || v348 != v461[11])
    {
      v461[10] = v347;
      v344[11] = v348;
      (*(void (**)(float *))(*(_QWORD *)v344 + 320))(v344);
      v344 = v461;
    }
    v441 = this;
    v442 = &v461;
    v443 = &v471;
    *(float32x2_t *)&v349 = WebCore::RenderLayerBacking::updateGeometry(WebCore::RenderLayer const*)::$_1::operator()((uint64_t)&v463, (uint64_t *)&v441);
    (*(void (**)(float *, int32x4_t *, double))(*(_QWORD *)v344 + 376))(v344, &v463, v349);
    v63 = a2;
    v60 = HIDWORD(v440);
  }
  else
  {
    v97 = 0;
    v98 = 0;
  }
  if (*((_QWORD *)this + 14))
    WebCore::RenderLayerBacking::updateMaskingLayerGeometry(this);
  if (v448)
  {
    v104 = v447;
  }
  else
  {
    if (v446)
    {
      v101 = v445;
    }
    else
    {
      v99 = v452;
      v100 = WebCore::RenderLayer::convertToLayerCoords(v451, v452, v453, 1);
      v101 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)v99, v100, v456);
      v446 = 1;
      v445 = v101;
    }
    v102 = v101 - (_DWORD)v454;
    if (__OFSUB__((_DWORD)v101, (_DWORD)v454))
      v102 = (v101 >> 31) + 0x7FFFFFFF;
    v103 = (HIDWORD(v101) - HIDWORD(v454));
    if (__OFSUB__(HIDWORD(v101), HIDWORD(v454)))
      v103 = ((HIDWORD(v101) >> 31) + 0x7FFFFFFF);
    v104 = v102 | (unint64_t)(v103 << 32);
    v448 = 1;
    v447 = v104;
  }
  v461 = (float *)0x3F0000003F000000;
  v462 = 0;
  v105 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v105 + 24) & 1) != 0)
    goto LABEL_406;
  v106 = *(_QWORD *)(v105 + 32);
  v107 = *(_QWORD *)(*(_QWORD *)(v106 + 24) + 8);
  v108 = *(_QWORD *)(*(_QWORD *)(v107 + 40) + 8);
  if (*(_QWORD *)(v108 + 1272) == v107)
    goto LABEL_131;
  if (*(_BYTE *)(v106 + 46) != 49)
  {
    if ((*(_BYTE *)(v106 + 22) & 0x40) == 0)
      goto LABEL_131;
    goto LABEL_406;
  }
  v324 = *(WebCore::ViewTransition **)(v108 + 2112);
  if (v324)
  {
    if (WebCore::ViewTransition::documentElementIsCaptured(v324))
    {
LABEL_406:
      v461 = 0;
      v462 = 0;
    }
  }
LABEL_131:
  v109 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v110 = *(_DWORD *)(v109 + 20);
  if ((v110 & 0x20000) == 0)
  {
LABEL_132:
    (*(void (**)(_QWORD, float **))(**((_QWORD **)this + 9) + 152))(*((_QWORD *)this + 9), &v461);
    v111 = *((_QWORD *)this + 8);
    if (v111)
      (*(void (**)(uint64_t, float **))(*(_QWORD *)v111 + 152))(v111, &v461);
    v112 = *((_QWORD *)this + 12);
    if (v112)
      (*(void (**)(uint64_t, float **))(*(_QWORD *)v112 + 152))(v112, &v461);
    v113 = *((_QWORD *)this + 20);
    if (v113)
      (*(void (**)(uint64_t, float **))(*(_QWORD *)v113 + 152))(v113, &v461);
    v114 = *((_QWORD *)this + 21);
    if (v114)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 200))(v114, 0);
    goto LABEL_140;
  }
  v263 = *(_QWORD *)(*(_QWORD *)(v109 + 24) + 8);
  v264 = *(_QWORD *)(*(_QWORD *)(v263 + 40) + 8);
  if (*(_QWORD *)(v264 + 1272) != v263)
  {
    if (*(_BYTE *)(v109 + 46) == 49)
    {
      v335 = *(WebCore::ViewTransition **)(v264 + 2112);
      if (v335)
      {
        if ((WebCore::ViewTransition::documentElementIsCaptured(v335) & 1) != 0)
          goto LABEL_132;
        v109 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
      }
    }
    else if ((v110 & 0x400000) != 0)
    {
      goto LABEL_132;
    }
  }
  v265 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 24) + 8) + 40) + 8)
                                 + 1944);
  v266 = *((_QWORD *)v265 + 50);
  if (!v266)
  {
    v403 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v266 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v403, v265);
    v404 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v265 + 50);
    *((_QWORD *)v265 + 50) = v266;
    if (v404)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v404);
      WTF::fastFree(v405, v406);
      v266 = *((_QWORD *)v265 + 50);
    }
    v63 = a2;
    v60 = HIDWORD(v440);
  }
  v267 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v266 + 8) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 528)
                                                      + 8)
                                          + 24)
                              + 8)
                  + 364);
  WebCore::RenderLayer::transformOriginPixelSnappedIfNeeded(*((WebCore::RenderLayer **)this + 1));
  v269 = v268;
  v271 = v270;
  v273 = v272;
  v274 = (double)(int)v104 * 0.015625;
  v275 = v267;
  v276 = round((v274 + (double)-(int)v104) * v267) / v267 - (double)-(int)v104;
  v277 = round(v274 * v267) / v267;
  if (v274 < 0.0)
    v277 = v276;
  v278 = (double)SHIDWORD(v104) * 0.015625;
  v279 = round((v278 + (double)-HIDWORD(v104)) * v275) / v275 - (double)-HIDWORD(v104);
  v280 = round(v278 * v275) / v275;
  if (v278 < 0.0)
    v280 = v279;
  v281 = 0.5;
  v282 = 0.5;
  if ((_DWORD)v440)
  {
    v283 = v277;
    v282 = (float)(v269 + (float)(v283 + (float)((float)(int)v25 * -0.015625))) / v61;
  }
  if (v60)
  {
    v284 = v280;
    v281 = (float)(v271 + (float)(v284 + (float)((float)SHIDWORD(v25) * -0.015625))) / v62;
  }
  v459 = __PAIR64__(LODWORD(v281), LODWORD(v282));
  v460 = v273;
  v285 = *((_QWORD *)this + 8);
  if (!v285)
    v285 = *((_QWORD *)this + 9);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v285 + 152))(v285, &v459);
  v441 = this;
  v442 = &v461;
  if (*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 88) + 40) + 260) == -1.0)
  {
    if (!*((_BYTE *)this + 290))
    {
      v286 = *((_QWORD *)this + 12);
      if (v286)
      {
        v467 = xmmword_1969FCC00;
        v468 = xmmword_1969FCC10;
        v469 = xmmword_1969FCC20;
        v470 = unk_1969FCC30;
        v463 = (int32x4_t)constinit_103;
        v464 = *(_OWORD *)algn_1969FCBD0;
        v465 = xmmword_1969FCBE0;
        v466 = xmmword_1969FCBF0;
        (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v286 + 192))(v286, &v463);
        (*(void (**)(uint64_t, float **))(*(_QWORD *)v286 + 152))(v286, &v461);
      }
    }
    v287 = *((_QWORD *)this + 20);
    if (v287)
    {
      v467 = xmmword_1969FCC00;
      v468 = xmmword_1969FCC10;
      v469 = xmmword_1969FCC20;
      v470 = unk_1969FCC30;
      v463 = (int32x4_t)constinit_103;
      v464 = *(_OWORD *)algn_1969FCBD0;
      v465 = xmmword_1969FCBE0;
      v466 = xmmword_1969FCBF0;
      (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v287 + 192))(v287, &v463);
      (*(void (**)(_QWORD, float **))(**((_QWORD **)this + 20) + 152))(*((_QWORD *)this + 20), &v461);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 200))(*((_QWORD *)this + 21), 0);
    }
    v288 = *((_QWORD *)this + 9);
    if (v288)
    {
      v467 = xmmword_1969FCC00;
      v468 = xmmword_1969FCC10;
      v469 = xmmword_1969FCC20;
      v470 = unk_1969FCC30;
      v463 = (int32x4_t)constinit_103;
      v464 = *(_OWORD *)algn_1969FCBD0;
      v465 = xmmword_1969FCBE0;
      v466 = xmmword_1969FCBF0;
      (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v288 + 192))(v288, &v463);
    }
  }
  else
  {
    WebCore::RenderLayerBacking::updateChildrenTransformAndAnchorPoint(WebCore::LayoutRect const&,WebCore::LayoutSize)::$_1::operator()((uint64_t)&v471, (uint64_t)this);
    v372 = v471;
    if (*((_QWORD *)this + 9) != v471)
    {
      if (*((_QWORD *)this + 20) == v471)
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 21) + 200))(*((_QWORD *)this + 21), 1);
      v373 = 0.5;
      v374 = 0.5;
      if (*(float *)&v473 != 0.0)
        v374 = (float)(v269 - *(float *)&v472) / *(float *)&v473;
      if (*((float *)&v473 + 1) != 0.0)
        v373 = (float)(v271 - *((float *)&v472 + 1)) / *((float *)&v473 + 1);
      v463.i64[0] = __PAIR64__(LODWORD(v373), LODWORD(v374));
      v463.i32[2] = v273;
      (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v372 + 152))(v372, &v463);
      v63 = a2;
    }
    WebCore::RenderLayer::perspectiveTransform((WebCore::RenderLayer *)&v463, *((const WebCore::FloatRect ***)this + 1));
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v372 + 192))(v372, &v463);
    WebCore::RenderLayerBacking::updateChildrenTransformAndAnchorPoint(WebCore::LayoutRect const&,WebCore::LayoutSize)::$_0::operator()(&v441, v372);
  }
LABEL_140:
  v115 = (const WebCore::RenderLayer *)*((_QWORD *)this + 1);
  v116 = *((_QWORD *)v115 + 26);
  if (v116)
  {
    v427 = *(_QWORD *)(v116 + 144);
    if (v427)
    {
      v428 = *(_QWORD *)(v427 + 256);
      if (v428)
      {
        WebCore::RenderLayerBacking::updateGeometry(*(WebCore::RenderLayerBacking **)(v427 + 256), v115);
        v429 = *(_QWORD *)(v428 + 72);
        v430 = (float)((float)*((int *)this + 45) * 0.015625) - (float)((float)*(int *)(v428 + 180) * 0.015625);
        *(float *)(v429 + 232) = (float)((float)*((int *)this + 44) * 0.015625)
                               - (float)((float)*(int *)(v428 + 176) * 0.015625);
        *(float *)(v429 + 236) = v430;
      }
    }
  }
  if (*((_QWORD *)this + 20))
  {
    v155 = *(WebCore::RenderBox **)(*((_QWORD *)this + 1) + 32);
    if ((*((_BYTE *)v155 + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942D6570);
    }
    v156 = WebCore::RenderBox::paddingBoxRect(v155);
    v157 = v156;
    v159 = v158;
    if (*((_BYTE *)this + 290) || (v160 = v156, !*((_QWORD *)this + 12)))
      v160 = *((_QWORD *)this + 22);
    v161 = *((_QWORD *)this + 20);
    v162 = HIDWORD(v160);
    v83 = __OFSUB__((_DWORD)v157, (_DWORD)v160);
    v163 = v157 - v160;
    if (v83)
      v163 = (v157 >> 31) + 0x7FFFFFFF;
    v83 = __OFSUB__(HIDWORD(v157), (_DWORD)v162);
    v164 = HIDWORD(v157) - v162;
    if (v83)
      v164 = (HIDWORD(v157) >> 31) + 0x7FFFFFFF;
    *(float32x2_t *)v463.i8 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v164, v163)), (float32x2_t)vdup_n_s32(0x3C800000u));
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v161 + 128))(v161, &v463);
    v165 = *((_QWORD *)this + 20);
    *(float *)v463.i32 = (float)(((int)(v159 - (v166 & 0xFFFFFFC0) + 32) >> 6) + (int)v159 / 64);
    *(float *)&v463.i32[1] = (float)(((int)(HIDWORD(v159) - (v167 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v159) / 64);
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v165 + 160))(v165, &v463);
    v168 = *(int **)(*((_QWORD *)this + 1) + 264);
    v169 = (*(uint64_t (**)(int *))(*(_QWORD *)v168 + 416))(v168);
    v170 = *((_QWORD *)v168 + 4);
    v171 = v170 + v169;
    v172 = (v170 & 0xFFFFFFFF00000000) + v169;
    v173 = *(_QWORD *)(*((_QWORD *)this + 1) + 264);
    v174 = *((_QWORD *)this + 20);
    if (*(_BYTE *)(v173 + 44))
    {
      *(float *)v463.i32 = (float)v171;
      *(float *)&v463.i32[1] = (float)SHIDWORD(v172);
      (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v174 + 168))(v174, &v463);
      v175 = 0;
    }
    else
    {
      *(float *)v463.i32 = (float)v171;
      *(float *)&v463.i32[1] = (float)SHIDWORD(v172);
      (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v174 + 176))(v174, &v463);
      v175 = 1;
    }
    *(_BYTE *)(v173 + 81) = v175;
    v176 = (float *)*((_QWORD *)this + 20);
    v178 = v176[10];
    v177 = v176[11];
    v179 = (float)(int)v157 * 0.015625;
    v180 = (float)SHIDWORD(v157) * 0.015625;
    if (v179 != v178 || (v181 = v176[11], v182 = v176[10], v180 != v177))
    {
      v176[10] = v179;
      v176[11] = v180;
      (*(void (**)(float *))(*(_QWORD *)v176 + 320))(v176);
      v304 = *((_QWORD *)this + 20);
      v182 = *(float *)(v304 + 40);
      v181 = *(float *)(v304 + 44);
    }
    v63 = a2;
    v431 = v7;
    if (*((_BYTE *)v168 + 76))
    {
      WebCore::RenderLayerScrollableArea::computeScrollDimensions((WebCore::RenderLayerScrollableArea *)v168);
      v183 = v168[22];
      if (*((_BYTE *)v168 + 76))
        WebCore::RenderLayerScrollableArea::computeScrollDimensions((WebCore::RenderLayerScrollableArea *)v168);
      v63 = a2;
    }
    else
    {
      v183 = v168[22];
    }
    v184 = (float)v168[23];
    v185 = (float *)*((_QWORD *)this + 21);
    if (v185[22] != (float)v183 || v185[23] != v184 || v178 != v182 || v177 != v181)
    {
      (*(void (**)(float *))(*(_QWORD *)v185 + 320))(v185);
      v185 = (float *)*((_QWORD *)this + 21);
    }
    *(float *)v463.i32 = (float)v183;
    *(float *)&v463.i32[1] = v184;
    (*(void (**)(float *, int32x4_t *))(*(_QWORD *)v185 + 160))(v185, &v463);
    v186 = *((_QWORD *)this + 21);
    v61 = (float)(int)v440 * 0.015625;
    v62 = (float)SHIDWORD(v440) * 0.015625;
    if (*(_QWORD *)(v186 + 48) != __PAIR64__(HIDWORD(v172), v171))
    {
      *(_QWORD *)(v186 + 48) = v172 & 0xFFFFFFFF00000000 | v171;
      v186 = *((_QWORD *)this + 21);
    }
    v7 = v431;
    if (v179 != *(float *)(v186 + 40) || v180 != *(float *)(v186 + 44))
    {
      *(float *)(v186 + 40) = v179;
      *(float *)(v186 + 44) = v180;
    }
    WebCore::RenderLayerBacking::adjustTiledBackingCoverage((uint64_t)this);
  }
  if (*((_QWORD *)this + 19))
  {
    v187 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    if ((*(_BYTE *)(v187 + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942D6590);
    }
    v188 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 992))(*(_QWORD *)(*((_QWORD *)this + 1) + 32));
    v191 = v188;
    v192 = HIDWORD(v189);
    v193 = *(_DWORD *)(v187 + 160);
    v194 = v193 - HIDWORD(v189);
    if (__OFSUB__(v193, HIDWORD(v189)))
      v194 = (v193 >> 31) + 0x7FFFFFFF;
    v195 = v194 - HIDWORD(v188);
    if (__OFSUB__(v194, HIDWORD(v188)))
      v195 = (v194 >> 31) + 0x7FFFFFFF;
    v196 = *(_DWORD *)(v187 + 164);
    v197 = v196 - v188;
    if (__OFSUB__(v196, (_DWORD)v188))
      v197 = (v196 >> 31) + 0x7FFFFFFF;
    v198 = v197 - v189;
    if (__OFSUB__(v197, (_DWORD)v189))
      v198 = (v197 >> 31) + 0x7FFFFFFF;
    v199 = v195;
    if (v450)
    {
      v207 = v449;
    }
    else
    {
      if (v446)
      {
        v202 = v445;
      }
      else
      {
        v200 = v452;
        v201 = WebCore::RenderLayer::convertToLayerCoords(v451, v452, v453, 1);
        v202 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)v200, v201, v456);
        v446 = 1;
        v445 = v202;
      }
      v203 = v202 - (_DWORD)v454;
      if (__OFSUB__((_DWORD)v202, (_DWORD)v454))
        v203 = (v202 >> 31) + 0x7FFFFFFF;
      v204 = HIDWORD(v202) - HIDWORD(v454);
      if (__OFSUB__(HIDWORD(v202), HIDWORD(v454)))
        v204 = (HIDWORD(v202) >> 31) + 0x7FFFFFFF;
      v205 = v203 - v455;
      if (__OFSUB__(v203, (_DWORD)v455))
        v205 = (v203 >> 31) + 0x7FFFFFFF;
      v206 = v204 - HIDWORD(v455);
      if (__OFSUB__(v204, HIDWORD(v455)))
        v206 = (v204 >> 31) + 0x7FFFFFFF;
      v207 = v205 | (unint64_t)(v206 << 32);
      v450 = 1;
      v449 = v207;
    }
    v208 = HIDWORD(v207);
    v83 = __OFADD__((_DWORD)v192, (_DWORD)v207);
    v209 = v192 + v207;
    if (v83)
      v209 = (v192 >> 31) + 0x7FFFFFFF;
    v83 = __OFADD__(v191, (_DWORD)v208);
    v210 = v191 + v208;
    if (v83)
      v210 = (v191 >> 31) + 0x7FFFFFFF;
    v211 = *(const WebCore::LayoutRect **)(*((_QWORD *)this + 1) + 32);
    v463.i32[0] = v209;
    v463.i32[1] = v210;
    v463.i64[1] = v199 | (v198 << 32);
    WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)&v463, v211, v190);
    v216 = v215 * 64.0;
    if (v216 >= 2147483650.0)
    {
      v217 = 0x7FFFFFFF;
    }
    else if (v216 <= -2147483650.0)
    {
      v217 = 0x80000000;
    }
    else
    {
      v217 = (int)v216;
    }
    v218 = v212 * 64.0;
    if (v218 >= 2147483650.0)
    {
      v219 = 0x7FFFFFFF;
    }
    else if (v218 <= -2147483650.0)
    {
      v219 = 0x80000000;
    }
    else
    {
      v219 = (int)v218;
    }
    v220 = v213 * 64.0;
    if (v220 >= 2147483650.0)
    {
      v221 = 0x7FFFFFFF;
    }
    else if (v220 <= -2147483650.0)
    {
      v221 = 0x80000000;
    }
    else
    {
      v221 = (int)v220;
    }
    v222 = v214 * 64.0;
    if (v222 >= 2147483650.0)
    {
      v223 = 0x7FFFFFFF;
    }
    else if (v222 <= -2147483650.0)
    {
      v223 = 0x80000000;
    }
    else
    {
      v223 = (int)v222;
    }
    v224 = *((_QWORD *)this + 19);
    v225 = (float32x2_t)vdup_n_s32(0x3C800000u);
    *(float32x2_t *)v463.i8 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v219, v217)), v225);
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v224 + 128))(v224, &v463);
    v226 = *((_QWORD *)this + 19);
    *(float32x2_t *)v463.i8 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v223, v221)), v225);
    (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v226 + 160))(v226, &v463);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 19) + 208))(*((_QWORD *)this + 19), 1);
  }
  v117 = *((_QWORD *)this + 10);
  if (v117)
  {
    v350 = *((_QWORD *)this + 21);
    if (v350)
    {
      v463.i64[0] = *(_QWORD *)(v350 + 88);
      v352 = *(_DWORD *)(v350 + 48);
      v351 = *(_DWORD *)(v350 + 52);
      v353 = v352 << 6;
      v354 = v351 << 6;
      if (v352 < -33554432)
        v353 = 0x80000000;
      if (v352 > 0x1FFFFFF)
        v353 = 0x7FFFFFFF;
      if (v351 < -33554432)
        v354 = 0x80000000;
      if (v351 <= 0x1FFFFFF)
        v355 = v354;
      else
        v355 = 0x7FFFFFFF;
      v356 = *(float *)(v350 + 40) - (float)((float)v353 * 0.015625);
      v357 = *(float *)(v350 + 44) - (float)((float)v355 * 0.015625);
    }
    else if (*((_QWORD *)this + 12) && !*((_BYTE *)this + 290))
    {
      *(float *)v463.i32 = (float)(int)v97 * 0.015625;
      *(float *)&v463.i32[1] = (float)SHIDWORD(v97) * 0.015625;
      v356 = (float)(int)v98 * 0.015625;
      v357 = (float)SHIDWORD(v98) * 0.015625;
    }
    else
    {
      v463.i64[0] = __PAIR64__(LODWORD(v62), LODWORD(v61));
      v390 = *((_QWORD *)this + 9);
      v356 = *(float *)(v390 + 40);
      v357 = *(float *)(v390 + 44);
    }
    v471 = 0;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v117 + 128))(v117, &v471);
    (*(void (**)(_QWORD, int32x4_t *))(**((_QWORD **)this + 10) + 160))(*((_QWORD *)this + 10), &v463);
    v358 = (float *)*((_QWORD *)this + 10);
    if (v356 != v358[10] || v357 != v358[11])
    {
      v358[10] = v356;
      v358[11] = v357;
      if (!v350)
        (*(void (**)(float *))(*(_QWORD *)v358 + 320))(v358);
    }
    v63 = a2;
  }
  if (*((_QWORD *)this + 11))
  {
    v359 = *(_QWORD **)(*((_QWORD *)this + 1) + 32);
    if (*((_BYTE *)this + 294))
    {
      v360 = *(int32x2_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v359[3] + 8) + 40) + 8) + 1944)
                           + 248);
      v361 = WebCore::LocalFrameView::scrollPositionForFixedPosition(v360);
      *(float *)v463.i32 = (float)(int)v361 * 0.015625;
      *(float *)&v463.i32[1] = (float)SHIDWORD(v361) * 0.015625;
      v362 = WebCore::ScrollView::layoutSize((WebCore::ScrollView *)v360);
      v363 = (float)(int)v362;
      v364 = (float)SHIDWORD(v362);
    }
    else
    {
      v463.i32[0] = (*(float (**)(_QWORD *))(*v359 + 232))(v359);
      v463.i32[1] = v391;
    }
    v471 = __PAIR64__(LODWORD(v364), LODWORD(v363));
    (*(void (**)(_QWORD, int32x4_t *))(**((_QWORD **)this + 11) + 128))(*((_QWORD *)this + 11), &v463);
    (*(void (**)(_QWORD, unint64_t *))(**((_QWORD **)this + 11) + 160))(*((_QWORD *)this + 11), &v471);
    v365 = (float *)*((_QWORD *)this + 11);
    v366 = *((_QWORD *)this + 9);
    v367 = *(float *)(v366 + 40);
    v368 = *(float *)(v366 + 44);
    if (v367 != v365[10] || v368 != v365[11])
    {
      v365[10] = v367;
      v365[11] = v368;
      (*(void (**)(float *))(*(_QWORD *)v365 + 320))(v365);
    }
    v63 = a2;
  }
  if (v63)
  {
    v369 = *((_QWORD *)v63 + 32);
    LODWORD(v63) = *(_DWORD *)(v369 + 176);
    v118 = *(_DWORD *)(v369 + 180);
    v119 = *(_QWORD *)(v369 + 184);
  }
  else
  {
    v118 = 0;
    v119 = 0;
  }
  v120 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                             + 32)
                                                                                 + 24)
                                                                     + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
  v121 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v120 + 50);
  if (!v121)
  {
    v121 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v121, v120);
    v396 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v120 + 50);
    *((_QWORD *)v120 + 50) = v121;
    if (v396)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v396);
      WTF::fastFree(v397, v398);
      v121 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v120 + 50);
    }
  }
  v122 = *((_QWORD *)this + 1);
  if (v437)
    v434 = (v432 >> 31) + 0x7FFFFFFF;
  if (v436)
    v435 = (v433 >> 31) + 0x7FFFFFFF;
  v123 = *((_QWORD *)this + 23);
  v124 = *(_QWORD *)(v122 + 32);
  v125 = a2;
  if (a2)
  {
    v126 = *((_QWORD *)a2 + 32);
    if ((*(_WORD *)(*(_QWORD *)(v126 + 72) + 177) & 0x20) == 0)
    {
      if (*(_BYTE *)(v126 + 290))
        goto LABEL_585;
      v297 = *(_QWORD *)(v126 + 8);
      if ((*(_BYTE *)(v297 + 24) & 1) == 0)
        goto LABEL_585;
      v298 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v297 + 32) + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v299 = *((_QWORD *)v298 + 50);
      if (!v299)
      {
        v407 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v299 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v407, v298);
        v408 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v298 + 50);
        *((_QWORD *)v298 + 50) = v299;
        if (v408)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v408);
          WTF::fastFree(v409, v410);
          v299 = *((_QWORD *)v298 + 50);
        }
      }
      v125 = a2;
      if (*(_BYTE *)(v299 + 198))
        goto LABEL_585;
      v300 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 8)
                                                                                                 + 32)
                                                                                     + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v301 = *((_QWORD *)v300 + 50);
      if (!v301)
      {
        v415 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v301 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v415, v300);
        v416 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v300 + 50);
        *((_QWORD *)v300 + 50) = v301;
        if (v416)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v416);
          WTF::fastFree(v417, v418);
          v301 = *((_QWORD *)v300 + 50);
        }
      }
      v125 = a2;
      if (*(_DWORD *)(v301 + 216) == 2)
      {
LABEL_585:
        if (*(_BYTE *)(*((_QWORD *)v125 + 32) + 291))
          goto LABEL_279;
      }
    }
  }
  v127 = 1;
  v463.i8[0] = 1;
  v463.i32[1] = 0;
  v463.i16[4] = 0;
  if ((*(_BYTE *)(v122 + 24) & 1) != 0)
    goto LABEL_280;
  v128 = v435;
  if (*(_QWORD *)(v122 + 200))
    goto LABEL_280;
  if ((WebCore::RenderLayerCompositor::requiresCompositingForAnimation(v121, (WebCore::RenderLayerModelObject *)v124) & 1) != 0)
    goto LABEL_279;
  if (WebCore::RenderLayerCompositor::requiresCompositingForPosition(v121, (WebCore::RenderObject *)v124, v122, &v463))
    goto LABEL_279;
  if (WebCore::RenderLayerCompositor::requiresCompositingForCanvas(v121, (WebCore::RenderLayerModelObject *)v124))
    goto LABEL_279;
  v130 = *(_QWORD *)(v124 + 88);
  v131 = *(_QWORD *)(v130 + 40);
  if (*(_DWORD *)(*(_QWORD *)(v131 + 72) + 20)
    || (*((_BYTE *)v121 + 128) & 0x20) != 0 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v130 + 32) + 32) + 20))
  {
    goto LABEL_279;
  }
  v132 = *(_QWORD *)(v131 + 200);
  if (v132)
  {
    if (*(_BYTE *)(v132 + 33))
    {
      v133 = *(WebCore **)(v124 + 144);
      if ((!v133 || WebCore::isDescendantOfFullScreenLayer(v133, v129) != 1)
        && !*((_BYTE *)v121 + 133)
        && ((*(_BYTE *)(v124 + 45) & 4) != 0
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v124 + 88) + 40) + 200) + 34)))
      {
        goto LABEL_279;
      }
    }
  }
  if ((*((_BYTE *)v121 + 128) & 1) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v124 + 88) + 40) + 636) & 0x400) != 0)
  {
    v423 = v7;
    v424 = *(_QWORD *)(v124 + 144);
    if ((*(_BYTE *)(v424 + 27) & 0x80) != 0)
    {
      v127 = 1;
      goto LABEL_280;
    }
    v128 = v435;
    do
    {
      v424 = *(_QWORD *)(v424 + 40);
      v7 = v423;
      if (!v424)
        goto LABEL_168;
    }
    while ((*(_BYTE *)(v424 + 24) & 0x4A) == 0);
    v7 = v423;
    v128 = v435;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v424 + 32) + 88) + 40) + 636) & 0x380) == 0x80)
      goto LABEL_279;
  }
LABEL_168:
  v134 = *(_QWORD *)(*(_QWORD *)(v124 + 24) + 8);
  v135 = *(_QWORD *)(*(_QWORD *)(v134 + 40) + 8);
  if (*(_QWORD *)(v135 + 1272) != v134)
  {
    if (*(_BYTE *)(v124 + 46) == 49)
    {
      v325 = *(WebCore::ViewTransition **)(v135 + 2112);
      if (v325 && (WebCore::ViewTransition::documentElementIsCaptured(v325) & 1) != 0)
        goto LABEL_279;
    }
    else if ((*(_BYTE *)(v124 + 22) & 0x40) != 0)
    {
      goto LABEL_279;
    }
  }
  if ((*(_BYTE *)(v124 + 52) & 7) == 3 && (*(_BYTE *)(v124 + 53) & 8) != 0)
    goto LABEL_279;
  v136 = *(unsigned __int8 *)(v124 + 46);
  if ((*((_BYTE *)v121 + 128) & 2) != 0 && v136 == 48)
  {
    ++*(_DWORD *)(v124 + 16);
    if (((WebCore::RenderVideo::requiresImmediateCompositing((WebCore::RenderVideo *)v124) & 1) != 0
       || WebCore::RenderVideo::shouldDisplayVideo((WebCore::RenderVideo *)v124))
      && *((_BYTE *)v121 + 132)
      && WebCore::RenderVideo::supportsAcceleratedRendering((WebCore::RenderVideo *)v124))
    {
      v425 = *(_DWORD *)(v124 + 16);
      if (v425)
      {
        *(_DWORD *)(v124 + 16) = v425 - 1;
        goto LABEL_279;
      }
    }
    else
    {
      v426 = *(_DWORD *)(v124 + 16);
      if (v426)
      {
        *(_DWORD *)(v124 + 16) = v426 - 1;
        v136 = *(unsigned __int8 *)(v124 + 46);
        v128 = v435;
        goto LABEL_174;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1942D6C50);
  }
LABEL_174:
  if (v136 == 24
    || (WebCore::RenderLayerCompositor::requiresCompositingForFrame(v124, &v463) & 1) != 0
    || (WebCore::RenderLayerCompositor::requiresCompositingForPlugin(*((_DWORD *)v121 + 32), (WebCore::RenderEmbeddedObject *)v124, &v463) & 1) != 0)
  {
    goto LABEL_279;
  }
  v138 = *(WebCore::RenderLayerScrollableArea **)(v122 + 264);
  if (v138 && WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(v138))
  {
    if (v463.i8[0])
    {
      v302 = *(_QWORD *)(v122 + 264);
      if (v302)
      {
        WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(v302, 1);
        v303 = *(_QWORD *)(v122 + 264);
        if (v303)
        {
          if (*(_BYTE *)(v303 + 79))
            goto LABEL_279;
        }
      }
    }
    else if (*(_QWORD *)(v122 + 256))
    {
      goto LABEL_279;
    }
  }
  v139 = *(uint64_t **)(v122 + 96);
  if (v139)
  {
    v289 = *((unsigned int *)v139 + 3);
    if ((_DWORD)v289)
    {
      v290 = *v139;
      v291 = 8 * v289;
      while (!*(_QWORD *)(*(_QWORD *)v290 + 256) && (*(_BYTE *)(*(_QWORD *)v290 + 27) & 4) == 0)
      {
        v290 += 8;
        v291 -= 8;
        if (!v291)
          goto LABEL_179;
      }
      goto LABEL_279;
    }
  }
LABEL_179:
  v140 = *(_QWORD *)(v124 + 88);
  v141 = *(_QWORD *)(v140 + 32);
  if (*(float *)(v141 + 4) < 1.0)
    goto LABEL_279;
  v142 = *(_QWORD *)(v141 + 48);
  v143 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v142 + 8))
  {
    v128 = v435;
    while (!*(_QWORD *)(v142 + 16))
    {
      v142 = *(_QWORD *)(v142 + 8);
      if (!v142)
        goto LABEL_185;
    }
    goto LABEL_279;
  }
  if (*(_QWORD *)(v142 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
    goto LABEL_279;
  }
LABEL_185:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v140 + 40) + 216) + 8))
    v143 = 0;
  if (v143)
    goto LABEL_279;
  if ((*(_BYTE *)(v124 + 21) & 0x40) != 0)
  {
    if (*(_BYTE *)WebCore::RenderObject::rareData((WebCore::RenderObject *)v124))
      goto LABEL_279;
    v140 = *(_QWORD *)(v124 + 88);
    v141 = *(_QWORD *)(v140 + 32);
  }
  if (*(_DWORD *)(*(_QWORD *)(v141 + 32) + 20) || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v140 + 40) + 72) + 20))
    goto LABEL_279;
  v145 = *(_QWORD *)(v122 + 256);
  if (v145)
  {
    v146 = v145 + 16;
    v147 = *(_QWORD *)(v145 + 16);
    if (v147)
    {
      if (*(_DWORD *)(v147 - 12))
      {
        v148 = *(_QWORD **)(v145 + 24);
        if (v148)
        {
          while (!*(_QWORD *)(*v148 + 8))
          {
            v148 = (_QWORD *)v148[2];
            if (!v148)
              goto LABEL_195;
          }
          goto LABEL_279;
        }
LABEL_195:
        WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v146, v137);
      }
    }
  }
  if ((int)v63 > v434)
  {
LABEL_279:
    v127 = 1;
    goto LABEL_280;
  }
  v149 = (_DWORD)v63 + v119;
  if (__OFADD__((_DWORD)v63, (_DWORD)v119))
    v149 = (v63 >> 31) + 0x7FFFFFFF;
  v150 = v434 + v123;
  if (__OFADD__(v434, (_DWORD)v123))
    v150 = (v434 >> 31) + 0x7FFFFFFF;
  v127 = 1;
  if (v149 >= v150 && v118 <= (int)v128)
  {
    v151 = v118 + HIDWORD(v119);
    if (__OFADD__(v118, HIDWORD(v119)))
      v151 = (v118 >> 31) + 0x7FFFFFFF;
    v152 = v128 + HIDWORD(v123);
    if (__OFADD__(v128, HIDWORD(v123)))
      v152 = (v128 >> 31) + 0x7FFFFFFF;
    if (v151 < v152)
      goto LABEL_279;
    v153 = *(_QWORD *)(v122 + 24);
    if ((v153 & 0x7800000000) != 0 && (v154 = (v153 >> 35) & 0xF, v154 <= 8))
      v127 = (0x17Cu >> v154) & 1;
    else
      v127 = 0;
  }
LABEL_280:
  if (*((unsigned __int8 *)this + 291) != v127)
  {
    *((_BYTE *)this + 291) = v127;
    WebCore::RenderLayer::clearClipRectsIncludingDescendants(*((WTF **)this + 1), 0);
    WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(*((WebCore::RenderLayer **)this + 1));
    v386 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40) + 8) + 1944));
    v387 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
    v463 = *((int32x4_t *)this + 11);
    WebCore::RenderLayerCompositor::repaintInCompositedAncestor(v386, v387, (const WebCore::LayoutRect *)&v463);
  }
  if (*((_BYTE *)this + 293))
  {
    v326 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    if (v326 && (*(_BYTE *)(v326 + 45) & 4) != 0)
    {
      ++*(_DWORD *)(v326 + 16);
      v464 = 0u;
      v465 = 0u;
      v463 = 0u;
      hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v326 + 80));
      v329 = *(_DWORD *)(v326 + 20) & 0x1800000;
      if (hasBorderRadius)
      {
        if (v329 != 0x1000000
          || ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v326 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v326 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v326 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
        {
          WebCore::RenderBox::borderRoundedRect((WebCore::RenderBox *)v326, (uint64_t)&v471);
          v330 = WebCore::RenderLayerBacking::contentOffsetInCompositingLayer(this);
          v331 = (v471 >> 31) + 0x7FFFFFFF;
          if (!__OFADD__((_DWORD)v471, (_DWORD)v330))
            v331 = v471 + v330;
          v332 = HIDWORD(v471) + HIDWORD(v330);
          if (__OFADD__(HIDWORD(v471), HIDWORD(v330)))
            v332 = (HIDWORD(v471) >> 31) + 0x7FFFFFFF;
          v471 = __PAIR64__(v332, v331);
          v333 = WebCore::RenderLayerBacking::deviceScaleFactor(this);
          WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v471, v333, (uint64_t)&v463);
LABEL_423:
          (*(void (**)(_QWORD, int32x4_t *))(**((_QWORD **)this + 9) + 304))(*((_QWORD *)this + 9), &v463);
          v334 = *(_DWORD *)(v326 + 16);
          if (!v334)
          {
            __break(0xC471u);
            JUMPOUT(0x1942D67E0);
          }
          *(_DWORD *)(v326 + 16) = v334 - 1;
          goto LABEL_283;
        }
        v377 = *(_QWORD *)(v326 + 160);
        v471 = 0;
        v472 = v377;
      }
      else
      {
        v375 = *(_QWORD *)(v326 + 160);
        v471 = 0;
        v472 = v375;
        if (v329 != 0x1000000
          || ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v326 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v326 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v326 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
        {
          v376 = 0;
LABEL_485:
          v379 = WebCore::RenderLayerBacking::contentOffsetInCompositingLayer(this);
          v380 = v376 + v379;
          if (__OFADD__(v376, (_DWORD)v379))
            v380 = (v376 >> 31) + 0x7FFFFFFF;
          LODWORD(v471) = v380;
          v381 = HIDWORD(v471) + HIDWORD(v379);
          if (__OFADD__(HIDWORD(v471), HIDWORD(v379)))
            v381 = (HIDWORD(v471) >> 31) + 0x7FFFFFFF;
          HIDWORD(v471) = v381;
          v382 = WebCore::RenderLayerBacking::deviceScaleFactor(this);
          v463.i32[0] = WebCore::snapRectToDevicePixels((int *)&v471, v382);
          *(uint64_t *)((char *)v463.i64 + 4) = __PAIR64__(v384, v383);
          v463.i32[3] = v385;
          v464 = 0u;
          v465 = 0u;
          goto LABEL_423;
        }
      }
      v461 = 0;
      v441 = (WebCore::RenderLayerBacking *)WebCore::RenderBox::clipRect((WebCore::RenderBox *)v326, (const WebCore::LayoutPoint *)&v461, 0);
      v442 = v378;
      WebCore::LayoutRect::intersect((int *)&v471, (const WebCore::LayoutRect *)&v441);
      v376 = v471;
      goto LABEL_485;
    }
  }
LABEL_283:
  WebCore::RenderLayerBacking::updateAfterWidgetResize((uint64_t)this);
  v227 = *((_QWORD *)this + 1);
  v228 = *(WebCore::RenderLayerScrollableArea **)(v227 + 264);
  if (v228 && (*((_QWORD *)v228 + 16) || *((_QWORD *)v228 + 17)))
  {
    v234 = *(_QWORD *)(v227 + 32);
    if ((*(_BYTE *)(v234 + 45) & 4) != 0)
      v235 = v234;
    else
      v235 = 0;
    v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 992))(v235);
    v240 = (((int)(v236 - (v239 & 0xFFFFFFC0) + 32) >> 6) + v236 / 64);
    v241 = ((int)(v238 - (v237 & 0xFFFFFFC0) + 32) >> 6) + v238 / 64;
    v242 = v240 << 32;
    WebCore::RenderLayerScrollableArea::overflowControlsRects(v228, (uint64_t)&v463);
    v243 = *((_QWORD *)this + 16);
    if (v243)
    {
      *(float *)&v471 = (float)(v463.i32[0] - v241);
      *((float *)&v471 + 1) = (float)(int)((unint64_t)(v463.i64[0] - v242) >> 32);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v243 + 128))(v243, &v471);
      *(float *)&v471 = (float)v463.i32[2];
      *((float *)&v471 + 1) = (float)v463.i32[3];
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v243 + 160))(v243, &v471);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 576))(v243))
      {
        v471 = 0;
        *(float *)&v310 = (float)v463.i32[2];
        *(float *)&v311 = (float)v463.i32[3];
        *(float *)&v472 = (float)v463.i32[2];
        *((float *)&v472 + 1) = (float)v463.i32[3];
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v243 + 368))(v243, &v471);
        v473 = 0u;
        v474 = 0u;
        v471 = 0;
        v472 = __PAIR64__(v311, v310);
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v243 + 376))(v243, &v471);
      }
      if (*((_QWORD *)v228 + 16))
        v312 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 576))(v243) ^ 1;
      else
        v312 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 216))(v243, v312);
    }
    v244 = *((_QWORD *)this + 17);
    if (v244)
    {
      *(float *)&v471 = (float)(v464 - v241);
      *((float *)&v471 + 1) = (float)(int)((unint64_t)(v464 - v242) >> 32);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v244 + 128))(v244, &v471);
      *(float *)&v471 = (float)SDWORD2(v464);
      *((float *)&v471 + 1) = (float)SHIDWORD(v464);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v244 + 160))(v244, &v471);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v244 + 576))(v244))
      {
        v471 = 0;
        *(float *)&v245 = (float)SDWORD2(v464);
        *(float *)&v246 = (float)SHIDWORD(v464);
        *(float *)&v472 = (float)SDWORD2(v464);
        *((float *)&v472 + 1) = (float)SHIDWORD(v464);
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v244 + 368))(v244, &v471);
        v473 = 0u;
        v474 = 0u;
        v471 = 0;
        v472 = __PAIR64__(v246, v245);
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v244 + 376))(v244, &v471);
      }
      if (*((_QWORD *)v228 + 17))
        v247 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v244 + 576))(v244) ^ 1;
      else
        v247 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v244 + 216))(v244, v247);
    }
    v248 = *((_QWORD *)this + 18);
    if (v248)
    {
      v249 = (float64x2_t *)&v465;
      v251 = SDWORD2(v465) < 1 || SHIDWORD(v465) < 1;
      v252 = !v251;
      if (v251)
        v249 = &v466;
      v255 = v249;
      v253 = LODWORD(v249->f64[0]);
      v254 = HIDWORD(v255->f64[0]);
      v256 = (char *)&v466.f64[1];
      if (v252)
        v256 = (char *)&v465 + 8;
      v258 = *(_DWORD *)v256;
      v257 = *((_DWORD *)v256 + 1);
      *(float *)&v471 = (float)(v253 - v241);
      *((float *)&v471 + 1) = (float)(v254 - v240);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v248 + 128))(v248, &v471);
      *(float *)&v471 = (float)v258;
      *((float *)&v471 + 1) = (float)v257;
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v248 + 160))(v248, &v471);
      v260 = v258 > 0 && v257 > 0;
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v248 + 216))(v248, v260);
    }
  }
  v463.i64[0] = 0;
  v229 = WebCore::snapSizeToDevicePixel((int *)&v444, v463.i32, v7);
  v231 = v230;
  v463.i64[0] = 0;
  if (v229 != WebCore::snapSizeToDevicePixel((int *)this + 48, v463.i32, v7) || v231 != v232)
  {
    if (*((_BYTE *)this + 290))
      goto LABEL_586;
    v305 = *((_QWORD *)this + 1);
    if ((*(_BYTE *)(v305 + 24) & 1) == 0)
      goto LABEL_586;
    v306 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 + 32) + 24) + 8)
                                                           + 40)
                                               + 8)
                                   + 1944);
    v307 = *((_QWORD *)v306 + 50);
    if (!v307)
    {
      v411 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v307 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v411, v306);
      v412 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v306 + 50);
      *((_QWORD *)v306 + 50) = v307;
      if (v412)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v412);
        WTF::fastFree(v413, v414);
        v307 = *((_QWORD *)v306 + 50);
      }
    }
    if (*(_BYTE *)(v307 + 198))
      goto LABEL_586;
    v308 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                               + 32)
                                                                                   + 24)
                                                                       + 8)
                                                           + 40)
                                               + 8)
                                   + 1944);
    v309 = *((_QWORD *)v308 + 50);
    if (!v309)
    {
      v419 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v309 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v419, v308);
      v420 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v308 + 50);
      *((_QWORD *)v308 + 50) = v309;
      if (v420)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v420);
        WTF::fastFree(v421, v422);
        v309 = *((_QWORD *)v308 + 50);
      }
    }
    if (*(_DWORD *)(v309 + 216) == 2)
    {
LABEL_586:
      if (*((_BYTE *)this + 291))
        WebCore::RenderLayerBacking::setContentsNeedDisplay((uint64_t)this, 1);
    }
  }
  result = *(WebCore::RenderElement **)(*((_QWORD *)this + 1) + 32);
  if (*((_BYTE *)result + 46) == 24)
  {
    v370 = WebCore::RenderElement::element(result);
    v371 = (WebCore::HTMLModelElement *)WTF::downcast<WebCore::HTMLModelElement,WebCore::Element>(v370);
    return (WebCore::RenderElement *)WebCore::HTMLModelElement::sizeMayHaveChanged(v371);
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::updateBacking(WebCore::RenderLayerCompositor *this, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderLayerBacking *v17;
  unint64_t v19;
  int v20;
  uint64_t v21;
  WebCore::ScrollingCoordinator *v22;
  WebCore::LocalFrameView *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  WebCore::RenderWidget *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int i;
  _QWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  WebCore::RenderLayerBacking *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  int j;
  _QWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  float v95;
  unsigned int v96;
  unsigned int v97;
  double v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  int k;
  _QWORD *v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  WTF *v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  WTF *v150[3];

  if (a5 == 2)
  {
    if (!*((_BYTE *)this + 132)
      || (*(_BYTE *)(a2 + 25) & 8) == 0
      || (v9 = *(_QWORD *)(a2 + 32), (v10 = *(_QWORD *)(v9 + 32)) != 0)
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 0x18) != 0
      || (*(_BYTE *)(v9 + 23) & 0x10) != 0 && (*(_BYTE *)(v9 + 52) & 7) == 1 && (*(_BYTE *)(v9 + 53) & 2) != 0)
    {
      a5 = 0;
    }
    else if ((WebCore::RenderLayerCompositor::requiresCompositingLayer(this, (WebCore::RenderObject *)v9, a3) & 1) != 0
           || (v12 = *(_QWORD *)(a2 + 24), (v12 & 0x7800000000) != 0))
    {
      a5 = 1;
    }
    else
    {
      v13 = v12 & 1;
      if (*((_BYTE *)this + 195))
        a5 = v13;
      else
        a5 = 0;
    }
    goto LABEL_13;
  }
  v24 = *(_QWORD *)(a2 + 32);
  v25 = v24;
  if (*(_BYTE *)(v24 + 46) == 30)
  {
    v133 = *(_QWORD *)(v24 + 32);
    if (v133)
    {
      v134 = *(_QWORD *)(v133 + 8);
      v25 = v134;
      if (v134 && (*(_BYTE *)(v134 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942D7990);
      }
    }
    else
    {
      v25 = 0;
    }
  }
  v26 = *(_DWORD *)(v25 + 20);
  if ((v26 & 0x1800000) == 0)
    goto LABEL_13;
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8) + 40) + 8) + 1992);
  if (!v27)
  {
LABEL_40:
    v33 = *(_QWORD *)(v25 + 96);
    v34 = (v33 >> 19) & 7;
    if ((v26 & 0x1800000) != 0x1000000)
      goto LABEL_42;
    if ((*(_BYTE *)(v25 + 45) & 2) != 0)
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8) + 96);
    if ((v33 & 0x380000) == 0x300000)
    {
      v148 = a5;
      if ((*(_BYTE *)(a2 + 24) & 0x4A) == 0)
        goto LABEL_47;
      v35 = (v34 == 3) & (v26 >> 23);
    }
    else
    {
LABEL_42:
      if ((v26 & 0x800000) == 0 || v34 != 3)
        goto LABEL_13;
      v148 = a5;
      v35 = 1;
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 664) & 0x20) != 0)
    {
      if (v35)
      {
        WebCore::RenderLayerCompositor::isAsyncScrollableStickyLayer(this, *(const WebCore::RenderLayer **)(a2 + 40), 0);
      }
      else
      {
        if (!*(_BYTE *)a3)
        {
          *(_BYTE *)(a3 + 8) = 1;
          goto LABEL_47;
        }
        if (WebCore::RenderObject::container((WebCore::RenderObject *)v25) == *((_QWORD *)this + 1))
        {
          if (WebCore::RenderLayer::isVisuallyNonEmpty(a2, 0) || (*(_BYTE *)(a2 + 26) & 0x20) != 0)
          {
            if (WebCore::RenderLayerCompositor::fixedLayerIntersectsViewport(this, (const WebCore::RenderLayer *)a2, v98))
            {
              goto LABEL_47;
            }
            v99 = 1;
          }
          else
          {
            v99 = 3;
          }
        }
        else
        {
          v99 = 2;
        }
        *(_DWORD *)(a3 + 4) = v99;
      }
    }
LABEL_47:
    a5 = v148;
    goto LABEL_13;
  }
  v28 = *(_DWORD *)(v27 + 8) + 1;
  *(_DWORD *)(v27 + 8) = v28;
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8);
  v30 = *(_QWORD **)(v29 + 3096);
  if (v30)
  {
    v122 = 0;
    v123 = (_QWORD *)(v29 + 3104);
    do
    {
      if (v122)
        v124 = v122 + 1;
      else
        v124 = v123;
      v122 = (_QWORD *)*v124;
      v31 = *v122;
      if ((*(_BYTE *)(*v122 + 54) & 0x40) != 0)
        break;
      v31 = 0;
    }
    while (v122 != v30);
  }
  else
  {
    v31 = 0;
  }
  if (!*(_QWORD *)(v27 + 56))
  {
    v32 = 2;
    goto LABEL_37;
  }
  v146 = v27;
  v147 = v25;
  v149 = a5;
  if (!v31)
    goto LABEL_223;
  v120 = *(_QWORD *)(v31 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v120)
    goto LABEL_223;
  if ((*(_BYTE *)((*(_QWORD *)(v31 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942D7A8CLL);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v31 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0
    || (v125 = *(_QWORD *)((*(_QWORD *)(v31 + 64) & 0xFFFFFFFFFFFFLL) + 0x90)) == 0)
  {
LABEL_223:
    v32 = 2;
    v25 = v147;
    goto LABEL_37;
  }
  WebCore::RenderElement::backdropRenderer(v120, v150);
  if (v150[0] && (v145 = *((_QWORD *)v150[0] + 1)) != 0 && v145 == *(_QWORD *)(a2 + 32))
  {
    v32 = 0;
  }
  else
  {
    if (v125 == a2)
    {
      v32 = 0;
    }
    else
    {
      v127 = a2;
      do
        v127 = *(_QWORD *)(v127 + 40);
      while (v127 != v125 && v127 != 0);
      v32 = v127 == 0;
    }
    if (!v150[0])
      goto LABEL_250;
  }
  if (*(_DWORD *)v150[0] == 1)
    WTF::fastFree(v150[0], v126);
  else
    --*(_DWORD *)v150[0];
LABEL_250:
  v27 = v146;
  v25 = v147;
  v28 = *(_DWORD *)(v146 + 8);
  a5 = v149;
LABEL_37:
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1942D74C0);
  }
  *(_DWORD *)(v27 + 8) = v28 - 1;
  if (v32 != 1)
  {
    v26 = *(_DWORD *)(v25 + 20);
    goto LABEL_40;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 256);
  if (a5 == 1)
  {
    if (!v14)
    {
      if (a4)
      {
        v46 = *((unsigned int *)a4 + 3);
        if ((_DWORD)v46)
        {
          v47 = a2;
          do
          {
            v48 = *(_QWORD *)(v47 + 256);
            if (v48)
            {
              if (*(_BYTE *)(v48 + 291))
                break;
            }
            v49 = *(_QWORD *)(v47 + 80);
            if (v49)
            {
              if (*(_QWORD *)(v49 + 8))
                break;
            }
            v50 = *a4;
            v51 = *(_QWORD *)v47;
            if (*(_QWORD *)v47)
            {
              if (*(_QWORD *)(v51 + 8))
              {
                v52 = v50 + 56 * v46;
                v53 = (~(v51 << 32) + v51) ^ ((unint64_t)(~(v51 << 32) + v51) >> 22);
                v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
                v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
                v56 = (v55 >> 31) ^ v55;
                do
                {
                  ++*(_DWORD *)(v50 + 32);
                  v57 = *(_QWORD *)(v50 + 8);
                  if (v57)
                  {
                    v58 = *(_DWORD *)(v57 - 8);
                    v59 = v58 & v56;
                    for (i = 1; ; ++i)
                    {
                      v61 = *(_QWORD **)(v57 + 8 * v59);
                      if (!v61)
                        break;
                      if (v61 != (_QWORD *)-1 && *v61 == v51)
                      {
                        if (!v50)
                          goto LABEL_99;
                        WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>((uint64_t)(a4 + 3), (WTF **)a2, (uint64_t)v150);
                        goto LABEL_54;
                      }
                      v59 = (v59 + i) & v58;
                    }
                  }
                  v50 += 56;
                }
                while (v50 != v52);
              }
              else
              {
                v138 = (_DWORD *)(v50 + 32);
                v139 = 56 * v46;
                do
                {
                  ++*v138;
                  v138 += 14;
                  v139 -= 56;
                }
                while (v139);
              }
            }
            else
            {
              v62 = (_DWORD *)(v50 + 32);
              v63 = 56 * v46;
              do
              {
                ++*v62;
                v62 += 14;
                v63 -= 56;
              }
              while (v63);
            }
LABEL_99:
            if ((*(_BYTE *)(v47 + 24) & 4) == 0)
            {
              while (1)
              {
                v47 = *(_QWORD *)(v47 + 40);
                if (!v47)
                  goto LABEL_166;
                if ((*(_BYTE *)(v47 + 24) & 0x4A) != 0)
                  goto LABEL_102;
              }
            }
            v47 = *(_QWORD *)(v47 + 40);
LABEL_102:
            ;
          }
          while (v47);
        }
      }
LABEL_166:
      WebCore::RenderLayerCompositor::repaintOnCompositingChange(this, (WebCore::RenderLayer *)a2);
    }
LABEL_54:
    v36 = *(_QWORD *)(a2 + 80);
    if (v36)
    {
      v64 = *(_QWORD *)(v36 + 8);
      if (v64)
      {
        v65 = *(WebCore::RenderLayerBacking **)(v64 + 256);
        if (v65)
          WebCore::RenderLayerBacking::removeBackingSharingLayer(v65, (WebCore::RenderLayer *)a2);
      }
    }
    WebCore::RenderLayerCompositor::enableCompositingMode(this, 1);
    if (*(_QWORD *)(a2 + 256))
      goto LABEL_15;
    WebCore::RenderLayer::ensureBacking(a2);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0
      && ((v85 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                               + 8)
                                                                                   + 24)
                                                                       + 8))) != 0
       && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 40))(v85, *(_QWORD *)(*((_QWORD *)this + 1) + 248)) & 1) != 0|| (v137 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)+ 8)+ 24)+ 8))) != 0&& (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 48))(v137, a2)))
    {
      v86 = *((_QWORD *)this + 1);
      v87 = *(_QWORD *)(v86 + 248);
      v88 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 24) + 8) + 40) + 8) + 528)
                                                                                          + 8)
                                                                              + 24)
                                                                  + 8));
      if (v88)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 96))(v88, v87);
      v89 = v87;
      (*(void (**)(_QWORD, BOOL))(**((_QWORD **)this + 28) + 208))(*((_QWORD *)this + 28), (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 112)+ 664) & 0x4000000000) == 0);
      v90 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 256) + 72) + 832))(*(_QWORD *)(*(_QWORD *)(a2 + 256) + 72));
      if (v90)
      {
        v91 = v90;
        v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 720))(v89);
        v93 = (unsigned int *)(v92 + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 + 1, v93));
        v95 = 0.0;
        if (*(_QWORD *)(*(_QWORD *)(v92 + 128) + 8) == v92)
        {
          v100 = *(_QWORD *)(v92 + 24);
          if (v100)
          {
            v101 = *(_QWORD *)(v100 + 8);
            if (v101)
              v95 = *(float *)(v101 + 372);
          }
        }
        do
        {
          v96 = __ldaxr(v93);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v93));
        if (!v97)
        {
          atomic_store(1u, v93);
          v135 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v135 = off_1E31FE290;
          *((_QWORD *)v135 + 1) = v93;
          v150[0] = v135;
          WTF::ensureOnMainThread();
          v136 = v150[0];
          v150[0] = 0;
          if (v136)
            (*(void (**)(WTF *))(*(_QWORD *)v136 + 8))(v136);
        }
        (*(void (**)(uint64_t, float))(*(_QWORD *)v91 + 104))(v91, v95);
      }
    }
    if (*(_QWORD *)(a2 + 40))
      WebCore::RenderLayer::computeRepaintRectsIncludingDescendants((WebCore::RenderLayer *)a2);
    *(_DWORD *)(a2 + 12) |= 0x40u;
    if ((*(_BYTE *)(a2 + 24) & 4) != 0)
    {
      v38 = *(_QWORD *)(a2 + 40);
      if (v38)
      {
LABEL_63:
        do
        {
          v39 = *(_DWORD *)(v38 + 12);
          if ((v39 & 2) != 0)
            break;
          *(_DWORD *)(v38 + 12) = v39 | 2;
          if ((*(_BYTE *)(v38 + 24) & 4) == 0)
          {
            while (1)
            {
              v38 = *(_QWORD *)(v38 + 40);
              if (!v38)
                goto LABEL_64;
              if ((*(_BYTE *)(v38 + 24) & 0x4A) != 0)
                goto LABEL_153;
            }
          }
          v38 = *(_QWORD *)(v38 + 40);
LABEL_153:
          ;
        }
        while (v38);
      }
    }
    else
    {
      v38 = a2;
      while (1)
      {
        v38 = *(_QWORD *)(v38 + 40);
        if (!v38)
          break;
        if ((*(_BYTE *)(v38 + 24) & 0x4A) != 0)
          goto LABEL_63;
      }
    }
LABEL_64:
    *(_DWORD *)(a2 + 12) |= 0x80u;
    if ((*(_BYTE *)(a2 + 24) & 4) != 0)
    {
      v40 = *(_QWORD *)(a2 + 40);
      if (v40)
      {
LABEL_68:
        do
        {
          v41 = *(_DWORD *)(v40 + 12);
          if ((v41 & 2) != 0)
            break;
          *(_DWORD *)(v40 + 12) = v41 | 2;
          if ((*(_BYTE *)(v40 + 24) & 4) == 0)
          {
            while (1)
            {
              v40 = *(_QWORD *)(v40 + 40);
              if (!v40)
                goto LABEL_69;
              if ((*(_BYTE *)(v40 + 24) & 0x4A) != 0)
                goto LABEL_158;
            }
          }
          v40 = *(_QWORD *)(v40 + 40);
LABEL_158:
          ;
        }
        while (v40);
      }
    }
    else
    {
      v40 = a2;
      while (1)
      {
        v40 = *(_QWORD *)(v40 + 40);
        if (!v40)
          break;
        if ((*(_BYTE *)(v40 + 24) & 0x4A) != 0)
          goto LABEL_68;
      }
    }
LABEL_69:
    *(_DWORD *)(a2 + 12) |= 4u;
    if ((*(_BYTE *)(a2 + 24) & 4) != 0)
    {
      v42 = *(_QWORD *)(a2 + 40);
      if (v42)
      {
LABEL_73:
        do
        {
          v43 = *(_DWORD *)(v42 + 12);
          if ((v43 & 1) != 0)
            break;
          *(_DWORD *)(v42 + 12) = v43 | 1;
          if ((*(_BYTE *)(v42 + 24) & 4) == 0)
          {
            while (1)
            {
              v42 = *(_QWORD *)(v42 + 40);
              if (!v42)
                goto LABEL_74;
              if ((*(_BYTE *)(v42 + 24) & 0x4A) != 0)
                goto LABEL_163;
            }
          }
          v42 = *(_QWORD *)(v42 + 40);
LABEL_163:
          ;
        }
        while (v42);
      }
    }
    else
    {
      v42 = a2;
      while (1)
      {
        v42 = *(_QWORD *)(v42 + 40);
        if (!v42)
          break;
        if ((*(_BYTE *)(v42 + 24) & 0x4A) != 0)
          goto LABEL_73;
      }
    }
  }
  else
  {
    if (!v14)
    {
LABEL_15:
      v15 = 0;
      goto LABEL_16;
    }
    v66 = *(_QWORD *)(a2 + 32);
    if (*(_BYTE *)(v66 + 46) == 30)
    {
      v129 = *(_QWORD *)(v66 + 32);
      if (v129)
        v129 = *(_QWORD *)(v129 + 8);
      if ((*(_BYTE *)(v129 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942D7B20);
      }
      v130 = *(_QWORD *)(*(_QWORD *)(v129 + 144) + 256);
      if (v130)
      {
        v131 = *(_QWORD *)(v130 + 72);
        v150[0] = 0;
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v131 + 120))(v131, v150);
        v132 = v150[0];
        v150[0] = 0;
        if (v132)
        {
          if (*((_DWORD *)v132 + 2) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v132 + 16))(v132);
          else
            --*((_DWORD *)v132 + 2);
        }
      }
    }
    WebCore::RenderLayer::clearBacking((WebCore::RenderLayer *)a2);
    if (a4)
    {
      v67 = *((unsigned int *)a4 + 3);
      if ((_DWORD)v67)
      {
        v68 = a2;
        do
        {
          v69 = *(_QWORD *)(v68 + 256);
          if (v69)
          {
            if (*(_BYTE *)(v69 + 291))
              break;
          }
          v70 = *(_QWORD *)(v68 + 80);
          if (v70)
          {
            if (*(_QWORD *)(v70 + 8))
              break;
          }
          v71 = *a4;
          v72 = *(_QWORD *)v68;
          if (*(_QWORD *)v68)
          {
            if (*(_QWORD *)(v72 + 8))
            {
              v73 = v71 + 56 * v67;
              v74 = (~(v72 << 32) + v72) ^ ((unint64_t)(~(v72 << 32) + v72) >> 22);
              v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
              v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
              v77 = (v76 >> 31) ^ v76;
              do
              {
                ++*(_DWORD *)(v71 + 32);
                v78 = *(_QWORD *)(v71 + 8);
                if (v78)
                {
                  v79 = *(_DWORD *)(v78 - 8);
                  v80 = v79 & v77;
                  for (j = 1; ; ++j)
                  {
                    v82 = *(_QWORD **)(v78 + 8 * v80);
                    if (!v82)
                      break;
                    if (v82 != (_QWORD *)-1 && *v82 == v72)
                    {
                      if (v71)
                        goto LABEL_181;
                      goto LABEL_129;
                    }
                    v80 = (v80 + j) & v79;
                  }
                }
                v71 += 56;
              }
              while (v71 != v73);
            }
            else
            {
              v140 = (_DWORD *)(v71 + 32);
              v141 = 56 * v67;
              do
              {
                ++*v140;
                v140 += 14;
                v141 -= 56;
              }
              while (v141);
            }
          }
          else
          {
            v83 = (_DWORD *)(v71 + 32);
            v84 = 56 * v67;
            do
            {
              ++*v83;
              v83 += 14;
              v84 -= 56;
            }
            while (v84);
          }
LABEL_129:
          if ((*(_BYTE *)(v68 + 24) & 4) == 0)
          {
            while (1)
            {
              v68 = *(_QWORD *)(v68 + 40);
              if (!v68)
                goto LABEL_180;
              if ((*(_BYTE *)(v68 + 24) & 0x4A) != 0)
                goto LABEL_132;
            }
          }
          v68 = *(_QWORD *)(v68 + 40);
LABEL_132:
          ;
        }
        while (v68);
      }
    }
LABEL_180:
    WebCore::RenderLayer::computeRepaintRectsIncludingDescendants((WebCore::RenderLayer *)a2);
LABEL_181:
    if (a4)
    {
      v102 = *((unsigned int *)a4 + 3);
      if ((_DWORD)v102)
      {
        v103 = a2;
        do
        {
          v104 = *(_QWORD *)(v103 + 256);
          if (v104)
          {
            if (*(_BYTE *)(v104 + 291))
              break;
          }
          v105 = *(_QWORD *)(v103 + 80);
          if (v105)
          {
            if (*(_QWORD *)(v105 + 8))
              break;
          }
          v106 = *a4;
          v107 = *(_QWORD *)v103;
          if (*(_QWORD *)v103)
          {
            if (*(_QWORD *)(v107 + 8))
            {
              v108 = v106 + 56 * v102;
              v109 = (~(v107 << 32) + v107) ^ ((unint64_t)(~(v107 << 32) + v107) >> 22);
              v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
              v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
              v112 = (v111 >> 31) ^ v111;
              do
              {
                ++*(_DWORD *)(v106 + 32);
                v113 = *(_QWORD *)(v106 + 8);
                if (v113)
                {
                  v114 = *(_DWORD *)(v113 - 8);
                  v115 = v114 & v112;
                  for (k = 1; ; ++k)
                  {
                    v117 = *(_QWORD **)(v113 + 8 * v115);
                    if (!v117)
                      break;
                    if (v117 != (_QWORD *)-1 && *v117 == v107)
                    {
                      if (!v106)
                        goto LABEL_198;
                      WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>((uint64_t)(a4 + 3), (WTF **)a2, (uint64_t)v150);
                      goto LABEL_74;
                    }
                    v115 = (v115 + k) & v114;
                  }
                }
                v106 += 56;
              }
              while (v106 != v108);
            }
            else
            {
              v142 = (_DWORD *)(v106 + 32);
              v143 = 56 * v102;
              do
              {
                ++*v142;
                v142 += 14;
                v143 -= 56;
              }
              while (v143);
            }
          }
          else
          {
            v118 = (_DWORD *)(v106 + 32);
            v119 = 56 * v102;
            do
            {
              ++*v118;
              v118 += 14;
              v119 -= 56;
            }
            while (v119);
          }
LABEL_198:
          if ((*(_BYTE *)(v103 + 24) & 4) == 0)
          {
            while (1)
            {
              v103 = *(_QWORD *)(v103 + 40);
              if (!v103)
                goto LABEL_208;
              if ((*(_BYTE *)(v103 + 24) & 0x4A) != 0)
                goto LABEL_201;
            }
          }
          v103 = *(_QWORD *)(v103 + 40);
LABEL_201:
          ;
        }
        while (v103);
      }
    }
LABEL_208:
    WebCore::RenderLayerCompositor::repaintOnCompositingChange(this, (WebCore::RenderLayer *)a2);
  }
LABEL_74:
  v44 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v44 + 46) == 48)
  {
    ++*(_DWORD *)(v44 + 16);
    WebCore::RenderVideo::acceleratedRenderingStateChanged((WebCore::RenderVideo *)v44);
    v144 = *(_DWORD *)(v44 + 16);
    if (!v144)
    {
      __break(0xC471u);
      JUMPOUT(0x1942D7B40);
    }
    *(_DWORD *)(v44 + 16) = v144 - 1;
    v44 = *(_QWORD *)(a2 + 32);
  }
  if ((*(_BYTE *)(v44 + 52) & 7) == 3 && (*(_BYTE *)(v44 + 53) & 4) != 0)
  {
    ++*(_DWORD *)(v44 + 224);
    v121 = WebCore::RenderLayerCompositor::frameContentsCompositor(*(WebCore::RenderLayerCompositor **)(*(_QWORD *)(v44 + 24) + 8), v37);
    if (v121 && *(_BYTE *)(v121 + 195))
      WebCore::RenderLayerCompositor::ensureRootLayer((_QWORD *)v121);
    if (*(_DWORD *)(v44 + 224) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    else
      --*(_DWORD *)(v44 + 224);
  }
  WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)a2, 0);
  v15 = 1;
LABEL_16:
  v16 = *(_QWORD *)(a2 + 32);
  if ((*(_DWORD *)(v16 + 20) & 0x1800000) != 0x1000000)
    goto LABEL_17;
  if ((*(_BYTE *)(v16 + 45) & 2) != 0)
    v16 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8);
  if ((*(_QWORD *)(v16 + 96) & 0x380000) != 0x300000)
  {
LABEL_17:
    *(_QWORD *)(a2 + 24) &= 0xFFFFFE7FFFFFFFFFLL;
    goto LABEL_18;
  }
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_DWORD *)(a3 + 4);
  if (((v19 >> 39) & 3) == v20)
  {
    if (!(_DWORD)v15)
      goto LABEL_18;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v19 & 0xFFFFFE7FFFFFFFFFLL | ((unint64_t)(v20 & 3) << 39);
  }
  v21 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (v21)
  {
    v22 = (WebCore::ScrollingCoordinator *)v21;
    v23 = *(WebCore::LocalFrameView **)(*((_QWORD *)this + 1) + 248);
    if ((*(unsigned int (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v21 + 40))(v21, v23))
      WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(v22, v23);
  }
  v15 = 1;
LABEL_18:
  v17 = *(WebCore::RenderLayerBacking **)(a2 + 256);
  if (v17)
    WebCore::RenderLayerBacking::updateDebugIndicators(v17, *((unsigned __int8 *)this + 192), *((unsigned __int8 *)this + 193));
  return v15;
}

BOOL WebCore::RenderLayerCompositor::requiresCompositingForPosition(WebCore::RenderLayerCompositor *this, WebCore::RenderObject *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL8 result;
  int v16;
  double v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  WebCore::RenderObject *v31;
  _BYTE *v32;
  _BYTE *v33;
  WTF *v34;

  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x1800000) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 24) + 8) + 40) + 8)
                 + 1992);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v8;
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8);
    v10 = *(_QWORD **)(v9 + 3096);
    if (v10)
    {
      v21 = 0;
      v22 = (_QWORD *)(v9 + 3104);
      do
      {
        if (v21)
          v23 = v21 + 1;
        else
          v23 = v22;
        v21 = (_QWORD *)*v23;
        v11 = *v21;
        if ((*(_BYTE *)(*v21 + 54) & 0x40) != 0)
          break;
        v11 = 0;
      }
      while (v21 != v10);
    }
    else
    {
      v11 = 0;
    }
    if (!*(_QWORD *)(v7 + 56))
    {
      v12 = 2;
LABEL_7:
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1942D7C84);
      }
      *(_DWORD *)(v7 + 8) = v8 - 1;
      if (v12 == 1)
        return 0;
      v4 = *((_DWORD *)a2 + 5);
      goto LABEL_10;
    }
    v30 = v7;
    v31 = a2;
    v33 = a4;
    if (!v11)
      goto LABEL_38;
    v20 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v20)
      goto LABEL_38;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942D7E78);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0
      || (v24 = *(_QWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x90)) == 0)
    {
LABEL_38:
      v12 = 2;
      goto LABEL_7;
    }
    WebCore::RenderElement::backdropRenderer(v20, &v34);
    if (v34 && (v28 = *((_QWORD *)v34 + 1)) != 0 && v28 == *(_QWORD *)(a3 + 32))
    {
      v29 = 0;
    }
    else
    {
      if (v24 == a3)
      {
        v29 = 0;
      }
      else
      {
        v26 = a3;
        do
          v26 = *(_QWORD *)(v26 + 40);
        while (v26 != v24 && v26 != 0);
        v29 = v26 == 0;
      }
      if (!v34)
        goto LABEL_59;
    }
    if (*(_DWORD *)v34 == 1)
      WTF::fastFree(v34, v25);
    else
      --*(_DWORD *)v34;
LABEL_59:
    v7 = v30;
    a2 = v31;
    v8 = *(_DWORD *)(v30 + 8);
    a4 = v33;
    v12 = v29;
    goto LABEL_7;
  }
LABEL_10:
  v13 = *((_QWORD *)a2 + 12);
  v14 = (v13 >> 19) & 7;
  if ((v4 & 0x1800000) != 0x1000000)
    goto LABEL_11;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 8) + 96);
  if ((v13 & 0x380000) == 0x300000)
  {
    if ((*(_BYTE *)(a3 + 24) & 0x4A) == 0)
      return 0;
    v16 = (v14 == 3) & (v4 >> 23);
  }
  else
  {
LABEL_11:
    result = 0;
    if ((v4 & 0x800000) == 0 || v14 != 3)
      return result;
    v16 = 1;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 664) & 0x20) == 0)
    return 0;
  if (v16)
    return WebCore::RenderLayerCompositor::isAsyncScrollableStickyLayer(this, *(const WebCore::RenderLayer **)(a3 + 40), 0);
  v32 = a4;
  if (*a4)
  {
    if (WebCore::RenderObject::container(a2) != *((_QWORD *)this + 1))
    {
      result = 0;
      v18 = 2;
      goto LABEL_29;
    }
    if (!WebCore::RenderLayer::isVisuallyNonEmpty(a3, 0) && (*(_BYTE *)(a3 + 26) & 0x20) == 0)
    {
      result = 0;
      v18 = 3;
LABEL_29:
      *((_DWORD *)v32 + 1) = v18;
      return result;
    }
    v19 = WebCore::RenderLayerCompositor::fixedLayerIntersectsViewport(this, (const WebCore::RenderLayer *)a3, v17);
    result = 1;
    if (!v19)
    {
      *((_DWORD *)v32 + 1) = 1;
      return 0;
    }
  }
  else
  {
    a4[8] = 1;
    return *(_QWORD *)(a3 + 256) != 0;
  }
  return result;
}

float WebCore::snapSizeToDevicePixel(int *a1, int *a2, float a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;

  v3 = *a1;
  v4 = *a2 & 0x3F;
  if (*a2 <= 0)
    v4 = -(-*a2 & 0x3F);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  v7 = (double)v6 * 0.015625;
  if (v7 < 0.0)
    v8 = round((v7 + (double)-v6) * a3) / a3 - (double)-v6;
  else
    v8 = round(v7 * a3) / a3;
  v9 = (double)v4 * 0.015625;
  v10 = a3;
  v11 = round((v9 + (double)-v4) * v10) / v10 - (double)-v4;
  v12 = round(v9 * v10) / v10;
  if (v9 >= 0.0)
    v13 = v12;
  else
    v13 = v11;
  v14 = v8;
  v15 = v13;
  return v14 - v15;
}

uint64_t WebCore::RenderLayerBacking::updateDebugIndicators(WebCore::RenderLayerBacking *this, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 616))(*((_QWORD *)this + 9));
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 624))(*((_QWORD *)this + 9), a3);
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  if (v6)
  {
    v18 = v6[3];
    if ((_DWORD)v18)
    {
      v19 = 96 * v18;
      v20 = (uint64_t *)(*(_QWORD *)v6 + 80);
      do
      {
        v21 = *v20;
        v20 += 12;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 616))(v21, a2);
        v19 -= 96;
      }
      while (v19);
    }
  }
  v7 = *((_QWORD *)this + 10);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 616))(v7, a2);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 10) + 624))(*((_QWORD *)this + 10), a3);
  }
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 616))(v8, a2);
  v9 = *((_QWORD *)this + 12);
  if (v9)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 616))(v9, a2);
  v10 = *((_QWORD *)this + 11);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 616))(v10, a2);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 11) + 624))(*((_QWORD *)this + 11), a3);
  }
  v11 = *((_QWORD *)this + 14);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 616))(v11, a2);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 14) + 624))(*((_QWORD *)this + 14), a3);
  }
  v12 = *((_QWORD *)this + 16);
  if (v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 616))(v12, a2);
  v13 = *((_QWORD *)this + 17);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 616))(v13, a2);
  v14 = *((_QWORD *)this + 18);
  if (v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 616))(v14, a2);
  v15 = *((_QWORD *)this + 20);
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 616))(v15, a2);
  v16 = *((_QWORD *)this + 21);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 616))(v16, a2);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 21) + 624))(*((_QWORD *)this + 21), a3);
  }
  result = *((_QWORD *)this + 19);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 616))(result, a2);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setShowDebugBorder(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x2000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 0x2000;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFDFFF;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x80000000, 0);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setShowRepaintCounter(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x4000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 0x4000;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFBFFF;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x80000000, 0);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setBlendMode(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 168) != a2)
  {
    *(_BYTE *)(result + 168) = a2;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(result, 0x200000000, 0);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setOpacity(uint64_t this, float a2)
{
  float v2;
  uint64_t v3;

  if (a2 > 1.0)
    a2 = 1.0;
  v2 = fmaxf(a2, 0.0);
  if (v2 != *(float *)(this + 128))
  {
    v3 = this;
    WebCore::GraphicsLayer::setOpacity(this, v2);
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v3, 4096, 0);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setPreserves3D(uint64_t this, int a2)
{
  uint64_t v2;

  if (((((*(_WORD *)(this + 177) & 4) == 0) ^ a2) & 1) == 0)
  {
    v2 = this;
    WebCore::GraphicsLayer::setPreserves3D((WebCore::GraphicsLayer *)this, a2);
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v2, 64, 0);
  }
  return this;
}

unint64_t WebCore::RenderLayerBacking::computeParentGraphicsLayerRect(WebCore::RenderLayerBacking *this, const WebCore::RenderLayer *a2)
{
  uint64_t v3;
  const WebCore::RenderLayerModelObject *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v29;
  const WebCore::LayoutSize *v30;
  const WebCore::LayoutSize *v31;
  float v32;
  uint64_t v33;
  _DWORD v34[2];
  uint64_t v35;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 32);
    if (v3)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 23) & 0x10) != 0)
        v4 = *(const WebCore::RenderLayerModelObject **)(v3 + 184);
      else
        v4 = 0;
      v5 = 0;
      v6 = *((_QWORD *)a2 + 4);
      if (!v6 || (*(_BYTE *)(v6 + 45) & 4) == 0)
      {
        v7 = 0;
        return v7 | (unint64_t)(v5 << 32);
      }
      ++*(_DWORD *)(v6 + 16);
      v5 = *(_QWORD *)(v3 + 96);
      if (v5)
      {
        if (!*(_BYTE *)(v3 + 290))
        {
          v33 = v3;
          v29 = WebCore::clippingLayerBox((WebCore *)v6, v4);
          v31 = v30;
          v32 = WebCore::RenderLayerBacking::deviceScaleFactor(this);
          v35 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)a2, v29, v32);
          WebCore::snappedGraphicsLayer((WebCore *)v34, (const WebCore::LayoutSize *)&v35, v31, *(const WebCore::RenderLayerModelObject **)(*((_QWORD *)this + 1) + 32));
          v3 = v33;
          v7 = v34[0];
          v5 = v34[1];
LABEL_9:
          v8 = *((_QWORD *)a2 + 33);
          if (v8 && *(_BYTE *)(v8 + 79))
          {
            v12 = *(_DWORD *)(v3 + 176);
            v11 = *(_DWORD *)(v3 + 180);
            v13 = WebCore::RenderBox::paddingBoxRect((WebCore::RenderBox *)v6);
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 416))(v8);
            v15 = *(_QWORD *)(v8 + 32);
            v16 = v15 & 0xFFFFFFFF00000000;
            v17 = v15 + v14;
            v18 = (v16 + v14) >> 32;
            v19 = v13 - v12;
            if (__OFSUB__((_DWORD)v13, v12))
              v19 = (v13 >> 31) + 0x7FFFFFFF;
            v20 = (HIDWORD(v13) >> 31) + 0x7FFFFFFF;
            if (!__OFSUB__(HIDWORD(v13), v11))
              v20 = HIDWORD(v13) - v11;
            v21 = v17 << 6;
            if (v17 < -33554432)
              v21 = 0x80000000;
            if (v17 <= 0x1FFFFFF)
              v22 = v21;
            else
              v22 = 0x7FFFFFFF;
            if ((int)v18 >= -33554432)
              v23 = (_DWORD)v18 << 6;
            else
              v23 = 0x80000000;
            if ((int)v18 > 0x1FFFFFF)
              v23 = 0x7FFFFFFF;
            v24 = __OFSUB__(v19, v22);
            v25 = v19 - v22;
            v7 = (v19 >> 31) + 0x7FFFFFFF;
            if (!v24)
              v7 = v25;
            v5 = v20 - v23;
            if (__OFSUB__(v20, v23))
              v5 = (v20 >> 31) + 0x7FFFFFFF;
          }
          v9 = *(_DWORD *)(v6 + 16);
          if (!v9)
          {
            __break(0xC471u);
            JUMPOUT(0x1942D85BCLL);
          }
          *(_DWORD *)(v6 + 16) = v9 - 1;
          return v7 | (unint64_t)(v5 << 32);
        }
        v5 = 0;
      }
      v7 = 0;
      goto LABEL_9;
    }
  }
  v26 = WebCore::RenderView::documentRect(*(WebCore::RenderLayer ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 1944));
  v7 = (_DWORD)v26 << 6;
  if ((int)v26 < -33554432)
    v7 = 0x80000000;
  if ((int)v26 > 0x1FFFFFF)
    v7 = 0x7FFFFFFF;
  v27 = HIDWORD(v26) << 6;
  if (SHIDWORD(v26) < -33554432)
    v27 = 0x80000000;
  if (SHIDWORD(v26) <= 0x1FFFFFF)
    v5 = v27;
  else
    v5 = 0x7FFFFFFFLL;
  return v7 | (unint64_t)(v5 << 32);
}

uint64_t WebCore::RenderLayerBacking::updateAfterWidgetResize(uint64_t this)
{
  uint64_t v1;
  WebCore::RenderLayerBacking *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderView *v9;
  WebCore::RenderLayerCompositor *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  float v17;
  float v18;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 8) + 32);
  if ((*(_BYTE *)(v1 + 52) & 7) != 3 || (*(_BYTE *)(v1 + 53) & 4) == 0)
    return this;
  v3 = (WebCore::RenderLayerBacking *)this;
  ++*(_DWORD *)(v1 + 16);
  v4 = *(_QWORD **)(*(_QWORD *)(v1 + 24) + 8);
  if (((*(uint64_t (**)(_QWORD))(*v4 + 192))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  v5 = v4[14];
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      if (!*(_BYTE *)(v7 + 144))
      {
        v8 = *(_QWORD *)(v7 + 296);
        if (v8)
        {
          v9 = *(WebCore::RenderView **)(v8 + 1944);
          if (v9)
          {
            v10 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(v9);
            WebCore::RenderLayerCompositor::frameViewDidChangeSize(v10);
            v11 = WebCore::RenderLayerBacking::contentsBox(v3);
            v12 = *((_QWORD *)v10 + 32);
            if (v12)
            {
              v17 = (float)((int)v11 >> 6);
              v18 = (float)(v11 >> 38);
              (*(void (**)(uint64_t, float *))(*(_QWORD *)v12 + 128))(v12, &v17);
            }
          }
        }
      }
    }
  }
  this = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
  if (*(_BYTE *)(this + 46) != 7)
    goto LABEL_10;
  this = WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing((WebCore::RenderEmbeddedObject *)this);
  if (!(_DWORD)this)
    goto LABEL_10;
  v13 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
  if (*(_BYTE *)(v13 + 46) != 7)
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x1942D8754);
  }
  v14 = *(_QWORD *)(v13 + 232);
  if (v14)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
    if ((_DWORD)this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 248))(v14);
      if ((_DWORD)this == 2)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 264))(v14);
        if (this)
        {
          v15 = this;
          v16 = WebCore::RenderLayerBacking::contentsBox(v3);
          v17 = (float)((int)v16 >> 6);
          v18 = (float)(v16 >> 38);
          this = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v15 + 128))(v15, &v17);
        }
      }
    }
  }
LABEL_10:
  v6 = *(_DWORD *)(v1 + 16);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1942D8774);
  }
  *(_DWORD *)(v1 + 16) = v6 - 1;
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setBackfaceVisibility(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 8) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 8;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFFFF7;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 2048, 0);
  }
  return this;
}

uint64_t WebCore::RenderLayerCompositor::requiresCompositingForAnimation(WebCore::RenderLayerCompositor *this, WebCore::RenderLayerModelObject *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;

  if ((*((_BYTE *)this + 128) & 0x10) == 0 || (WebCore::Styleable::fromRenderer((uint64_t)a2, a2, (uint64_t)&v19), !v23))
  {
LABEL_10:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v4 = v19;
  v5 = *(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_4;
  v8 = *(unsigned int *)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v8)
    goto LABEL_13;
  v14 = *(uint64_t **)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v15 = 8 * v8;
  if (v22)
  {
    while (1)
    {
      v16 = *v14;
      if (*(_BYTE *)(*v14 + 96))
      {
        if (*(_DWORD *)(v16 + 80) == v20 && *(_QWORD *)(v16 + 88) == (_QWORD)v21)
          break;
      }
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_51;
    }
  }
  else
  {
    while (1)
    {
      v16 = *v14;
      if (!*(_BYTE *)(*v14 + 96))
        break;
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_51;
    }
  }
  if (*(_QWORD *)v16)
  {
    if ((WebCore::KeyframeEffectStack::hasAcceleratedEffects(*(WebCore::KeyframeEffectStack **)v16, *(const WebCore::Settings **)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8) + 680)) & 1) != 0)
    {
LABEL_45:
      v6 = 0;
      LOBYTE(v4) = 1;
      goto LABEL_5;
    }
    v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL;
  }
LABEL_51:
  if (v5)
  {
LABEL_13:
    v9 = *(unsigned int *)(v5 + 164);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)(v5 + 152);
      if (v22)
      {
        v11 = 8 * v9;
        v6 = 1;
        while (1)
        {
          v12 = *v10;
          if (*(_BYTE *)(*v10 + 96))
          {
            if (*(_DWORD *)(v12 + 80) == v20 && *(_QWORD *)(v12 + 88) == (_QWORD)v21)
              break;
          }
          ++v10;
          v11 -= 8;
          if (!v11)
            goto LABEL_5;
        }
      }
      else
      {
        v18 = 8 * v9;
        v6 = 1;
        while (1)
        {
          v12 = *v10;
          if (!*(_BYTE *)(*v10 + 96))
            break;
          ++v10;
          v18 -= 8;
          if (!v18)
            goto LABEL_5;
        }
      }
      v4 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        if ((!WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(*(_QWORD *)v12, 183)
           || !*((_BYTE *)this + 195) && (*((_BYTE *)this + 128) & 0x80) == 0)
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 117) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 351) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 451) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 284) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 214) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 210) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 273) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 178) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 179) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 180) & 1) == 0
          && (WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 181) & 1) == 0)
        {
          LOBYTE(v4) = WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(v4, 182);
          v6 = 0;
          goto LABEL_5;
        }
        goto LABEL_45;
      }
    }
  }
LABEL_4:
  v6 = 1;
LABEL_5:
  if (v22 && v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v3);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (v6)
    goto LABEL_10;
  return v4 & 1;
}

BOOL WebCore::RenderLayerCompositor::requiresCompositingForCanvas(WebCore::RenderLayerCompositor *this, WebCore::RenderLayerModelObject *a2)
{
  _BOOL8 result;
  uint64_t v4;
  __int16 v5;
  int v6;
  int v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;

  result = 0;
  if ((*((_BYTE *)this + 128) & 8) != 0 && *((_BYTE *)a2 + 46) == 13)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    v5 = *(_WORD *)(v4 + 28);
    if ((v5 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942D8C10);
    }
    if ((v5 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1942D8BF0);
    }
    v7 = *(_DWORD *)(v4 + 120);
    v6 = *(_DWORD *)(v4 + 124);
    if (v7 < 0)
      v7 = -v7;
    if (v6 < 0)
      v6 = -v6;
    v8 = v6 * (unint64_t)v7;
    v9 = v8 >> 3 > 0x270 && (v8 & 0xFFFFFFFF00000000) == 0;
    v10 = WebCore::canvasCompositingStrategy(a2, a2);
    if (v10 == 2)
    {
      return 1;
    }
    else if (*((_BYTE *)this + 133))
    {
      return 0;
    }
    else
    {
      return v10 == 1 && v9;
    }
  }
  return result;
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::frameViewRootLayerDidChange(WebCore::AsyncScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::LocalFrameView *v8;
  unsigned __int8 **v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  WebCore::LocalFrameView *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderView *v17;
  _DWORD *v18;
  uint64_t v19;
  WebCore::LocalFrameView *v20;
  WebCore::RenderView *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderView *v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int shouldPlaceVerticalScrollbarOnLeft;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 1944);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256);
        if (v7)
        {
          if (*(_QWORD *)(v7 + 224))
          {
            WebCore::AsyncScrollingCoordinator::ensureRootStateNodeForFrameView(this, a2);
            WebCore::ScrollingCoordinator::frameViewRootLayerDidChange(this, a2);
            result = (unsigned __int8 **)WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v35, this, (uint64_t)a2 + 64);
            v9 = (unsigned __int8 **)v35;
            if (v35)
            {
              v10 = *(unsigned __int8 *)(v35 + 16);
              v35 = 0;
              if (v10 <= 1)
              {
                v11 = (_DWORD *)WebCore::ScrollingCoordinator::scrollContainerLayerForFrameView(*(_QWORD *)(*((_QWORD *)a2 + 41) + 296), v8);
                if (v11)
                {
                  ++v11[2];
                  v32 = (unint64_t)v11;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 32))(v11);
                  *((_QWORD *)&v33 + 1) = v12;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateScrollingNode::setScrollContainerLayer(v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v14 = (_DWORD *)WebCore::ScrollingCoordinator::scrolledContentsLayerForFrameView(*(_QWORD *)(*((_QWORD *)a2 + 41) + 296), v13);
                if (v14)
                {
                  ++v14[2];
                  v32 = (unint64_t)v14;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 32))(v14);
                  *((_QWORD *)&v33 + 1) = v15;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((char *)v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v16 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
                if (v16
                  && (v17 = *(WebCore::RenderView **)(v16 + 1944)) != 0
                  && (v18 = *(_DWORD **)(WebCore::RenderView::compositor(v17) + 224)) != 0)
                {
                  ++v18[2];
                  v32 = (unint64_t)v18;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 32))(v18);
                  *((_QWORD *)&v33 + 1) = v19;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer((char *)v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v21 = WebCore::ScrollingCoordinator::counterScrollingLayerForFrameView(*(WebCore::RenderView **)(*((_QWORD *)a2 + 41) + 296), v20);
                if (v21)
                {
                  ++*((_DWORD *)v21 + 2);
                  v32 = (unint64_t)v21;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(WebCore::RenderView *))(*(_QWORD *)v21 + 32))(v21);
                  *((_QWORD *)&v33 + 1) = v22;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer(v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v23 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
                if (v23
                  && (v24 = *(WebCore::RenderView **)(v23 + 1944)) != 0
                  && (v25 = *(_DWORD **)(WebCore::RenderView::compositor(v24) + 232)) != 0)
                {
                  ++v25[2];
                  v32 = (unint64_t)v25;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 32))(v25);
                  *((_QWORD *)&v33 + 1) = v26;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer((char *)v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v32 = 0u;
                v33 = 0u;
                v34 = 1;
                WebCore::ScrollingStateFrameScrollingNode::setContentShadowLayer(v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v32 = 0u;
                v33 = 0u;
                v34 = 1;
                WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer((char *)v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v32 = 0u;
                v33 = 0u;
                v34 = 1;
                WebCore::ScrollingStateFrameScrollingNode::setFooterLayer(v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                WebCore::ScrollingStateFrameScrollingNode::setScrollBehaviorForFixedElements((uint64_t)v9, (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 41) + 136) + 664) >> 38) & 1);
                v27 = (_DWORD *)WebCore::LocalFrameView::layerForVerticalScrollbar(a2);
                if (v27)
                {
                  ++v27[2];
                  v32 = (unint64_t)v27;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27 + 32))(v27);
                  *((_QWORD *)&v33 + 1) = v28;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer((char *)v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                v29 = (_DWORD *)WebCore::LocalFrameView::layerForHorizontalScrollbar(a2);
                if (v29)
                {
                  ++v29[2];
                  v32 = (unint64_t)v29;
                  *(_QWORD *)&v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 32))(v29);
                  *((_QWORD *)&v33 + 1) = v30;
                }
                else
                {
                  v32 = 0u;
                  v33 = 0u;
                }
                v34 = 1;
                WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer(v9, (const WebCore::LayerRepresentation *)&v32);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation *)&v32);
                shouldPlaceVerticalScrollbarOnLeft = WebCore::LocalFrameView::shouldPlaceVerticalScrollbarOnLeft(a2);
                WebCore::ScrollingStateScrollingNode::setScrollbarLayoutDirection((uint64_t)v9, shouldPlaceVerticalScrollbarOnLeft);
              }
              return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v9 + 1, v8);
            }
          }
        }
      }
    }
  }
  return result;
}

double WebCore::TileController::setTopContentInset(WebCore::TileController *this, double result)
{
  WebCore::TileCoverageMap *v2;

  *((_DWORD *)this + 84) = LODWORD(result);
  v2 = (WebCore::TileCoverageMap *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_DWORD *)v2 + 26) = 0;
    *((_DWORD *)v2 + 27) = LODWORD(result);
    return WebCore::TileCoverageMap::setNeedsUpdate(v2);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::syncBoundsOrigin(uint64_t this, const WebCore::FloatPoint *a2)
{
  if (*(float *)a2 != *(float *)(this + 96) || *((float *)a2 + 1) != *(float *)(this + 100))
  {
    *(_QWORD *)(this + 96) = *(_QWORD *)a2;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x2000000000, 1);
  }
  return this;
}

uint64_t WebCore::RenderLayerCompositor::frameContentsCompositor(WebCore::RenderLayerCompositor *this, WebCore::RenderWidget *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderView *v7;
  WebCore::RenderLayerCompositor *v8;
  WebCore::RenderLayerCompositor *v9;
  WTF *v10;
  void *v11;

  if (((*(uint64_t (**)(WebCore::RenderLayerCompositor *, WebCore::RenderWidget *))(*(_QWORD *)this + 192))(this, a2) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 14);
    if (v3
      && (v5 = *(_QWORD *)(v3 + 8)) != 0
      && !*(_BYTE *)(v5 + 144)
      && (v6 = *(_QWORD *)(v5 + 296)) != 0
      && (v7 = *(WebCore::RenderView **)(v6 + 1944)) != 0)
    {
      result = *((_QWORD *)v7 + 50);
      if (!result)
      {
        v8 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v8, v7);
        v9 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v7 + 50);
        *((_QWORD *)v7 + 50) = result;
        if (v9)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v9);
          WTF::fastFree(v10, v11);
          return *((_QWORD *)v7 + 50);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WebCore::IOSurfacePool::setPoolSize(WebCore::IOSurfacePool *this, void *a2)
{
  unsigned __int8 *v4;
  uint64_t *result;
  int v7;

  v4 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 4);
LABEL_5:
  *((_QWORD *)this + 15) = a2;
  result = WebCore::IOSurfacePool::evict((uint64_t *)this, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *WebCore::IOSurfacePool::evict(uint64_t *this, void *a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = this;
  v3 = this[15];
  if (!v3)
    return (uint64_t *)WebCore::IOSurfacePool::discardAllSurfacesInternal((WebCore::IOSurfacePool *)this, a2);
  if (this[13] > v3)
  {
    do
    {
      this = (uint64_t *)WebCore::IOSurfacePool::tryEvictOldestCachedSurface((uint64_t)v2);
      if ((unint64_t)v2[14] <= 0x2000000)
      {
        v4 = v2[13];
        if (v4 <= v3)
          continue;
      }
      this = WebCore::IOSurfacePool::tryEvictInUseSurface(v2);
      v4 = v2[13];
    }
    while (v4 > v3);
  }
  while ((unint64_t)v2[14] > 0x2000000 || v2[13] > v3)
    this = WebCore::IOSurfacePool::tryEvictInUseSurface(v2);
  return this;
}

uint64_t WebCore::IOSurfacePool::discardAllSurfacesInternal(WebCore::IOSurfacePool *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::deallocateTable(v4, a2);
  }
  WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::clear((uint64_t)this + 48);
  WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 88, 0);
  WTF::RunLoop::TimerBase::stop((WebCore::IOSurfacePool *)((char *)this + 8));
  return WebCore::IOSurfacePool::platformGarbageCollectNow(this);
}

uint64_t WebCore::IOSurfacePool::platformGarbageCollectNow(WebCore::IOSurfacePool *this)
{
  uint64_t result;

  result = WTF::isWebThread(this);
  if ((result & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  return result;
}

uint64_t WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4 && (WTF *)result != v5)
      {
        v6 = 8 * v4;
        v7 = v5;
        do
        {
          v8 = *(_QWORD *)v7;
          v7 = (WTF *)((char *)v7 + 8);
          *(_QWORD *)result = v8;
          result += 8;
          v6 -= 8;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF *WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::clear(uint64_t a1)
{
  void *v2;
  WTF *result;

  WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::destroyAll((WebCore::IOSurface *)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *(WTF **)(a1 + 16);
  if (result)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WebCore::IOSurface *WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::destroyAll(WebCore::IOSurface *result)
{
  uint64_t v1;
  unint64_t v2;
  WebCore::IOSurface **v3;
  WebCore::IOSurface **v4;
  uint64_t v5;
  WebCore::IOSurface *v6;
  const void *v7;
  void *v8;
  const void *v9;
  WebCore::IOSurface *v10;
  uint64_t v11;
  WebCore::IOSurface **v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;

  v1 = *(_QWORD *)result;
  v2 = *((_QWORD *)result + 1);
  v3 = (WebCore::IOSurface **)*((_QWORD *)result + 2);
  if (*(_QWORD *)result > v2)
  {
    v10 = result;
    if (v2)
    {
      v16 = 8 * v2;
      do
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          WebCore::IOSurface::~IOSurface(result);
          result = (WebCore::IOSurface *)WTF::fastFree(v17, v18);
        }
        ++v3;
        v16 -= 8;
      }
      while (v16);
      v3 = (WebCore::IOSurface **)*((_QWORD *)v10 + 2);
      v1 = *(_QWORD *)v10;
    }
    v11 = *((unsigned int *)v10 + 6);
    if (v1 != v11)
    {
      v12 = &v3[v1];
      v13 = 8 * v11 - 8 * v1;
      do
      {
        result = *v12;
        *v12 = 0;
        if (result)
        {
          WebCore::IOSurface::~IOSurface(result);
          result = (WebCore::IOSurface *)WTF::fastFree(v14, v15);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  else if (*(_QWORD *)result != v2)
  {
    v4 = &v3[v1];
    v5 = 8 * v2 - 8 * v1;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (const void *)*((_QWORD *)v6 + 6);
        *((_QWORD *)v6 + 6) = 0;
        if (v7)
          CFRelease(v7);
        WTF::MachSendRight::~MachSendRight((WebCore::IOSurface *)((char *)v6 + 40));
        if (*((_BYTE *)v6 + 16))
        {
          v9 = (const void *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v9)
            CFRelease(v9);
        }
        result = (WebCore::IOSurface *)WTF::fastFree(v6, v8);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void WebCore::ResourceResponseBase::getResponseData(WebCore::ResourceResponseBase *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  __int16 v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _BYTE *v16;
  __int16 v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  char v33;
  char v34;
  unsigned int v35;
  int v36;
  const void *v37;
  int v38;
  int v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  _DWORD *v45;
  _BYTE *v46;
  __int16 v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  __int128 v56;
  WTF::StringImpl *v57;
  __int128 v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  char v61;
  char v62;
  _DWORD *v63;
  __int16 v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  __int128 v82;
  __int128 v83;
  _DWORD *v84;
  uint64_t v85;
  _DWORD *v86;
  __int16 v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[23];
  WTF::StringImpl *v102;
  __int128 v103;
  uint64_t v104;
  _DWORD *v105;
  char v106;
  char v107;
  char v108;
  char v109;
  BOOL v110;
  char v111;
  char v112;
  BOOL v113;
  const void *v114;
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE v120[23];
  uint64_t v121;

  v2 = a2;
  v121 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 138) & 1) != 0)
  {
    *a2 = 0;
    a2[280] = 0;
    return;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v4 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v4 += 2;
  v5 = *(_OWORD *)((char *)this + 8);
  v6 = *(_OWORD *)((char *)this + 24);
  v7 = (_DWORD *)*((_QWORD *)this + 5);
  if (v7)
    *v7 += 2;
  v8 = *((_QWORD *)this + 6);
  v9 = (_DWORD *)*((_QWORD *)this + 7);
  if (v9)
    *v9 += 2;
  v10 = *((_WORD *)this + 68);
  v11 = (_DWORD *)*((_QWORD *)this + 8);
  if (v11)
    *v11 += 2;
  v12 = (_DWORD *)*((_QWORD *)this + 9);
  if (v12)
    *v12 += 2;
  v13 = *((unsigned int *)this + 23);
  v77 = 0;
  LODWORD(v78) = 0;
  HIDWORD(v78) = v13;
  v72 = v6;
  v73 = v5;
  v71 = v8;
  if ((_DWORD)v13)
  {
    if (v13 >> 28)
      goto LABEL_63;
    v14 = v11;
    v15 = v9;
    v16 = v2;
    v17 = v10;
    v18 = v7;
    v19 = v4;
    v20 = WTF::fastMalloc((WTF *)(16 * v13));
    v21 = v20;
    LODWORD(v78) = v13;
    v77 = v20;
    v22 = *((unsigned int *)this + 23);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = *((_QWORD *)this + 10);
      v25 = v24 + 16 * v22;
      v6 = v72;
      v5 = v73;
      v10 = v17;
      v2 = v16;
      v9 = v15;
      v11 = v14;
      do
      {
        v26 = v24 + v23;
        *(_WORD *)(v20 + v23) = *(_WORD *)(v24 + v23);
        v27 = *(_DWORD **)(v24 + v23 + 8);
        if (v27)
          *v27 += 2;
        *(_QWORD *)(v20 + v23 + 8) = v27;
        v23 += 16;
      }
      while (v26 + 16 != v25);
      v4 = v19;
      v7 = v18;
      v8 = v71;
    }
    else
    {
      v4 = v19;
      v6 = v72;
      v5 = v73;
      v7 = v18;
      v8 = v71;
      v10 = v17;
      v2 = v16;
      v9 = v15;
      v11 = v14;
    }
  }
  else
  {
    v21 = 0;
  }
  v28 = *((unsigned int *)this + 27);
  if (!(_DWORD)v28)
  {
    v29 = 0;
    goto LABEL_22;
  }
  v68 = v7;
  if (v28 >> 28)
  {
LABEL_63:
    __break(0xC471u);
    JUMPOUT(0x1942D9A30);
  }
  v44 = v11;
  v45 = v9;
  v46 = v2;
  v47 = v10;
  v48 = v4;
  v29 = WTF::fastMalloc((WTF *)(16 * v28));
  LODWORD(v80) = v28;
  v79 = v29;
  v49 = *((unsigned int *)this + 27);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = *((_QWORD *)this + 12);
    v52 = v51 + 16 * v49;
    v6 = v72;
    v5 = v73;
    v10 = v47;
    v2 = v46;
    v9 = v45;
    v11 = v44;
    do
    {
      v53 = v51 + v50;
      v54 = *(_DWORD **)(v51 + v50);
      if (v54)
        *v54 += 2;
      *(_QWORD *)(v29 + v50) = v54;
      v55 = *(_DWORD **)(v53 + 8);
      if (v55)
        *v55 += 2;
      *(_QWORD *)(v29 + v50 + 8) = v55;
      v50 += 16;
    }
    while (v53 + 16 != v52);
    v4 = v48;
    v7 = v68;
    v8 = v71;
  }
  else
  {
    v4 = v48;
    v6 = v72;
    v5 = v73;
    v7 = v68;
    v8 = v71;
    v10 = v47;
    v2 = v46;
    v9 = v45;
    v11 = v44;
  }
LABEL_22:
  v30 = *((_QWORD *)this + 14);
  v74 = (uint64_t)v2;
  if (v30)
  {
    v31 = *(_BYTE *)(v30 + 8);
    v56 = *(_OWORD *)(v30 + 57);
    v118 = *(_OWORD *)(v30 + 41);
    v119 = v56;
    *(_OWORD *)v120 = *(_OWORD *)(v30 + 73);
    v57 = *(WTF::StringImpl **)(v30 + 96);
    *(_QWORD *)&v120[15] = *(_QWORD *)(v30 + 88);
    v58 = *(_OWORD *)(v30 + 25);
    v116 = *(_OWORD *)(v30 + 9);
    v117 = v58;
    if (v57)
      *(_DWORD *)v57 += 2;
    v70 = v57;
    v75 = *(_OWORD *)(v30 + 104);
    v59 = *(_DWORD **)(v30 + 128);
    v76 = *(_QWORD *)(v30 + 120);
    if (v59)
    {
      v69 = *(_DWORD **)(v30 + 128);
      ++*v59;
    }
    else
    {
      v69 = 0;
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = *((unsigned __int16 *)this + 116);
  v33 = *((_BYTE *)this + 234);
  v34 = v33 & 7;
  v35 = *((unsigned __int8 *)this + 138);
  v36 = *((unsigned __int8 *)this + 128);
  if (*((_BYTE *)this + 128))
  {
    v37 = (const void *)*((_QWORD *)this + 15);
    if (v37)
    {
      v65 = v4;
      v66 = v29;
      v67 = v7;
      v64 = v10;
      v63 = v11;
      v61 = v33 & 7;
      v62 = v31;
      CFRetain(v37);
      v34 = v61;
      v31 = v62;
      v11 = v63;
      v10 = v64;
      v8 = v71;
      v29 = v66;
      v7 = v67;
      v6 = v72;
      v5 = v73;
      v4 = v65;
    }
  }
  else
  {
    v37 = 0;
  }
  v81 = v4;
  v82 = v5;
  v83 = v6;
  v84 = v7;
  v85 = v8;
  v38 = (v35 >> 4) & 1;
  v86 = v9;
  v39 = (v35 >> 5) & 1;
  v87 = v10;
  v88 = v11;
  v89 = v12;
  v77 = 0;
  v90 = v21;
  v78 = 0;
  v91 = v13;
  v92 = v13;
  v79 = 0;
  v93 = v29;
  v80 = 0;
  v94 = v28;
  v95 = v28;
  v96 = 0;
  v106 = 0;
  if (v30)
  {
    v99 = v118;
    v100 = v119;
    *(_OWORD *)v101 = *(_OWORD *)v120;
    v97 = v116;
    v96 = v31;
    v98 = v117;
    *(_QWORD *)&v101[15] = *(_QWORD *)&v120[15];
    v102 = v70;
    v103 = v75;
    v104 = v76;
    v105 = v69;
    v106 = 1;
    v40 = 0;
    v41 = 0;
  }
  else
  {
    v40 = v69;
    v41 = v70;
  }
  v107 = (v32 >> 10) & 0xF;
  v108 = v34;
  v109 = BYTE1(v32) & 3;
  v110 = (v32 & 0x40) != 0;
  v111 = v38;
  v112 = v39;
  v113 = (v32 & 0x80) != 0;
  LOBYTE(v114) = 0;
  v115 = 0;
  if (v36)
  {
    v114 = v37;
    if (v37)
    {
      CFRetain(v37);
      v115 = 1;
      *(_BYTE *)(WebCore::ResourceResponseData::ResourceResponseData(v74, (uint64_t *)&v81) + 280) = 1;
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v81, v60);
      CFRelease(v37);
      goto LABEL_34;
    }
    v115 = 1;
    *(_BYTE *)(WebCore::ResourceResponseData::ResourceResponseData(v74, (uint64_t *)&v81) + 280) = 1;
  }
  else
  {
    *(_BYTE *)(WebCore::ResourceResponseData::ResourceResponseData(v74, (uint64_t *)&v81) + 280) = 1;
  }
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v81, v42);
LABEL_34:
  if (v30)
  {
    if (v40)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v40, v43);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v43);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v77, v43);
}

void WebCore::ResourceResponseData::~ResourceResponseData(WebCore::ResourceResponseData *this, WTF::StringImpl *a2)
{
  const void *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (*((_BYTE *)this + 272))
  {
    v3 = (const void *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (v3)
      CFRelease(v3);
  }
  if (*((_BYTE *)this + 248))
  {
    v4 = (_DWORD *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (v4)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4, a2);
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceResponseData *)((char *)this + 88), a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t WebCore::ResourceResponseData::ResourceResponseData(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = *(_DWORD *)(result + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(result + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(result + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(result + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(result + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(result + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(result + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v7 = a2[5];
  v8 = a2[6];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v7;
  *(_QWORD *)(result + 48) = v8;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 56) = v9;
  *(_WORD *)(result + 64) = *((_WORD *)a2 + 32);
  v10 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(result + 72) = v10;
  v11 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = v11;
  v12 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(result + 88) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = 0;
  *(_DWORD *)(result + 96) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = 0;
  *(_DWORD *)(result + 100) = v12;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  v13 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(result + 104) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = 0;
  *(_DWORD *)(result + 112) = v13;
  LODWORD(v8) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_DWORD *)(result + 116) = v8;
  *(_BYTE *)(result + 248) = 0;
  if (*((_BYTE *)a2 + 248))
  {
    v14 = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(result + 136) = v14;
    v15 = *(_OWORD *)(a2 + 19);
    v16 = *(_OWORD *)(a2 + 21);
    v17 = *(_OWORD *)(a2 + 23);
    *(_QWORD *)(result + 200) = a2[25];
    *(_OWORD *)(result + 168) = v16;
    *(_OWORD *)(result + 184) = v17;
    *(_OWORD *)(result + 152) = v15;
    v18 = a2[26];
    a2[26] = 0;
    *(_QWORD *)(result + 208) = v18;
    v19 = *(_OWORD *)(a2 + 27);
    *(_QWORD *)(result + 232) = a2[29];
    *(_OWORD *)(result + 216) = v19;
    v20 = a2[30];
    a2[30] = 0;
    *(_QWORD *)(result + 240) = v20;
    *(_BYTE *)(result + 248) = 1;
  }
  v21 = *((_DWORD *)a2 + 64);
  *(_DWORD *)(result + 259) = *(_DWORD *)((char *)a2 + 259);
  *(_DWORD *)(result + 256) = v21;
  *(_BYTE *)(result + 264) = 0;
  *(_BYTE *)(result + 272) = 0;
  if (*((_BYTE *)a2 + 272))
  {
    v22 = a2[33];
    a2[33] = 0;
    *(_QWORD *)(result + 264) = v22;
    *(_BYTE *)(result + 272) = 1;
  }
  return result;
}

void WebCore::CaptionUserPreferencesMediaAF::platformPreferredLanguages(MACaptionAppearanceDomain a1@<X1>, _QWORD *a2@<X8>)
{
  const __CFArray *v4;
  const __CFArray *v5;

  v4 = (const __CFArray *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopySelectedLanguages((WebCore *)1, a1);
  if (v4)
  {
    v5 = v4;
    WTF::makeVector<WTF::String,__CFString const*>((uint64_t)a2, v4);
    CFRelease(v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

unint64_t WTF::makeVector<WTF::String,__CFString const*>(uint64_t a1, CFArrayRef theArray)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  CFIndex v7;
  const void *ValueAtIndex;
  const WTF::String *v9;
  const __CFString *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned __int8 v22;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = CFArrayGetCount(theArray);
  if (result)
  {
    v5 = result;
    if (!(result >> 29))
    {
      v6 = WTF::fastMalloc((WTF *)(8 * result));
      v7 = 0;
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v6;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
        v9 = (const WTF::String *)WTF::dynamic_cf_cast<__CFString const*>(ValueAtIndex);
        if (v9)
        {
          WTF::makeVectorElement(0, v9, v10);
          if (v22)
          {
            v12 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v12 != *(_DWORD *)(a1 + 8))
            {
              v13 = *(_QWORD *)a1;
              v14 = v21;
              v21 = 0;
              *(_QWORD *)(v13 + 8 * v12) = v14;
              *(_DWORD *)(a1 + 12) = v12 + 1;
LABEL_8:
              v15 = v21;
              v21 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy(v15, v11);
                else
                  *(_DWORD *)v15 -= 2;
              }
              goto LABEL_11;
            }
            v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v12 + 1, (unint64_t)&v21);
            v17 = *(unsigned int *)(a1 + 12);
            v18 = *(_QWORD *)a1;
            v19 = *v16;
            *v16 = 0;
            *(_QWORD *)(v18 + 8 * v17) = v19;
            LODWORD(v18) = v22;
            *(_DWORD *)(a1 + 12) = v17 + 1;
            if ((_DWORD)v18)
              goto LABEL_8;
          }
        }
LABEL_11:
        if (v5 == ++v7)
        {
          v20 = (WTF::StringImpl *)*(unsigned int *)(a1 + 12);
          return (unint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a1, v20);
        }
      }
    }
    __break(0xC471u);
  }
  else
  {
    v20 = 0;
    return (unint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a1, v20);
  }
  return result;
}

const void *WTF::dynamic_cf_cast<__CFString const*>(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFStringGetTypeID())
      return v1;
    else
      return 0;
  }
  return result;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  unsigned int *v7;

  if (result[2] > (unint64_t)a2)
  {
    v2 = a2;
    if (result[3] > (unint64_t)a2)
    {
      v3 = result;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
      a2 = v2;
      result = v3;
    }
    v4 = *(WTF **)result;
    if (a2)
    {
      v7 = result;
      if (result[2])
      {
        result[2] = v2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * (_QWORD)v2));
        *(_QWORD *)v7 = result;
        return result;
      }
      if ((unint64_t)v2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = result[3];
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * (_QWORD)v2));
      result = v7;
      v7[2] = v2;
      *(_QWORD *)v7 = v6;
      if (v6 != v4)
      {
        memcpy(v6, v4, 8 * v5);
        result = v7;
      }
    }
    if (v4)
    {
      if (*(WTF **)result == v4)
      {
        *(_QWORD *)result = 0;
        result[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, a2);
    }
  }
  return result;
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceCopySelectedLanguages(WebCore *this, MACaptionAppearanceDomain a2)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceCopySelectedLanguages(MACaptionAppearanceDomain)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceCopySelectedLanguages(MACaptionAppearanceDomain)::once, &__block_literal_global_145_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopySelectedLanguages(this, (MACaptionAppearanceDomain)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopySelectedLanguages);
}

WebCore::FillLayer *WebCore::RenderStyle::ensureBackgroundLayers(WTF **this)
{
  WTF *v1;
  uint64_t v2;
  const WebCore::FillLayer *v3;
  WebCore::FillLayer *result;
  uint64_t v5;
  WebCore::FillLayer *v6;
  WebCore::FillLayer *v7;
  WTF *v8;
  void *v9;

  v1 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v1 + 2);
  v3 = *(const WebCore::FillLayer **)(v2 + 8);
  if (*(_DWORD *)v3 == 1)
    return *(WebCore::FillLayer **)(v2 + 8);
  v5 = v2;
  v6 = (WebCore::FillLayer *)WTF::fastMalloc((WTF *)0x40);
  result = WebCore::FillLayer::FillLayer(v6, v3);
  v7 = *(WebCore::FillLayer **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = result;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::FillLayer::~FillLayer(v7);
      WTF::fastFree(v8, v9);
      return *(WebCore::FillLayer **)(v5 + 8);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

void WTF::DataRef<WebCore::StyleBackgroundData>::access(uint64_t *a1)
{
  _DWORD *v1;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::FillLayer *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char **v23;

  v1 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 != 1)
  {
    v3 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v3 = 1;
    v4 = (_DWORD *)*((_QWORD *)v1 + 1);
    ++*v4;
    *(_QWORD *)(v3 + 8) = v4;
    v19 = &v18;
    v20 = &v18;
    v21 = &v18;
    v22 = &v18;
    v5 = v1[6];
    if ((_DWORD)v5 == -1)
      goto LABEL_18;
    v6 = v3;
    v23 = &v19;
    ((void (*)(char ***, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v23, v1 + 4);
    v19 = &v18;
    v20 = &v18;
    v21 = &v18;
    v22 = &v18;
    v7 = v1[10];
    if ((_DWORD)v7 == -1)
    {
LABEL_18:
      v16 = std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v16, v17);
    }
    else
    {
      v23 = &v19;
      ((void (*)(char ***, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v23, v1 + 8);
      v9 = v1[12];
      *(_BYTE *)(v6 + 52) = *((_BYTE *)v1 + 52);
      *(_DWORD *)(v6 + 48) = v9;
      *(_DWORD *)(v6 + 56) = v1[14];
      v10 = (_DWORD *)*a1;
      *a1 = v6;
      if (v10)
      {
        if (*v10 == 1)
        {
          v11 = v10[10];
          if ((_DWORD)v11 != -1)
            ((void (*)(char **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v19, v10 + 8);
          v10[10] = -1;
          v12 = v10[6];
          if ((_DWORD)v12 != -1)
            ((void (*)(char **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v19, v10 + 4);
          v10[6] = -1;
          v13 = (WebCore::FillLayer *)*((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              WebCore::FillLayer::~FillLayer(v13);
              WTF::fastFree(v14, v15);
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
          WTF::fastFree((WTF *)v10, v8);
        }
        else
        {
          --*v10;
        }
      }
    }
  }
}

void WebCore::StyleRareInheritedData::StyleRareInheritedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const WebCore::ShadowData *v47;
  WebCore::ShadowData *v48;
  WebCore::StyleVisitedLinkColorData *v49;
  char v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char **v55;

  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    ++*(_DWORD *)(v4 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v55, a2 + 16);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v6])(&v55, a2 + 32);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v7 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v55, a2 + 48);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v8 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v8 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v8])(&v55, a2 + 64);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v9 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v9 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v55, a2 + 80);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v10 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v10 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v10])(&v55, a2 + 96);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v11 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v11 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v11])(&v55, a2 + 112);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v12 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v12 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v12])(&v55, a2 + 128);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v13 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v13 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v55, a2 + 144);
  if (*(_QWORD *)(a2 + 160))
  {
    v47 = *(const WebCore::ShadowData **)(a2 + 160);
    v48 = (WebCore::ShadowData *)WTF::fastMalloc((WTF *)0x40);
    v14 = WebCore::ShadowData::ShadowData(v48, v47);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_DWORD **)(a2 + 168);
  if (v15)
    ++*v15;
  *(_DWORD *)(a1 + 176) = 0;
  v16 = (int *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v15;
  *(_WORD *)(a1 + 181) = 0;
  v17 = *(unsigned __int8 *)(a2 + 180);
  *(_BYTE *)(a1 + 180) = v17;
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  if (v17 <= 0xD)
  {
    v18 = 1 << v17;
    if ((v18 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
      *v16 = *(_DWORD *)(a2 + 176);
    }
    else if ((v18 & 0x3003) != 0)
    {
      *v16 = 0;
    }
    else
    {
      *v16 = *(_DWORD *)(a2 + 176);
      WebCore::Length::ref(v16);
    }
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_WORD *)(a1 + 196) = *(_WORD *)(a2 + 196);
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 203) = 0;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  v19 = *(_DWORD **)(a2 + 216);
  ++*v19;
  *(_QWORD *)(a1 + 216) = v19;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  v20 = *(_DWORD *)(a1 + 232);
  LODWORD(v19) = *(_DWORD *)(a1 + 228) & 0xFFFFFFFE | *(_DWORD *)(a2 + 228) & 1;
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 228) >> 1) & 1));
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFFF3 | (4 * ((*(_DWORD *)(a2 + 228) >> 2) & 3));
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFFCF | (16 * ((*(_DWORD *)(a2 + 228) >> 4) & 3));
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFE3F | (((*(_DWORD *)(a2 + 228) >> 6) & 7) << 6);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFF9FF | (((*(_DWORD *)(a2 + 228) >> 9) & 3) << 9);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFF7FF | (((*(_DWORD *)(a2 + 228) >> 11) & 1) << 11);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFF8FFF | (((*(_DWORD *)(a2 + 228) >> 12) & 7) << 12);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFE7FFF | (((*(_DWORD *)(a2 + 228) >> 15) & 3) << 15);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFC3FFFF | (((*(_DWORD *)(a2 + 228) >> 18) & 0xF) << 18);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFF3FFFFF | (((*(_DWORD *)(a2 + 228) >> 22) & 3) << 22);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFEFFFFFF | ((HIBYTE(*(_DWORD *)(a2 + 228)) & 1) << 24);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFDFFFFFF | (((*(_DWORD *)(a2 + 228) >> 25) & 1) << 25);
  *(_DWORD *)(a1 + 228) = (_DWORD)v19;
  *(_DWORD *)(a1 + 228) = v19 & 0xE3FFFFFF | (((*(_DWORD *)(a2 + 228) >> 26) & 7) << 26);
  v21 = v20 & 0xFFFFFFF0 | *(_DWORD *)(a2 + 232) & 0xF;
  *(_DWORD *)(a1 + 232) = v21;
  v22 = v21 & 0xFFFFFFCF | (16 * ((*(_DWORD *)(a2 + 232) >> 4) & 3));
  *(_DWORD *)(a1 + 232) = v22;
  v23 = v22 & 0xFFFFFFBF | (((*(_DWORD *)(a2 + 232) >> 6) & 1) << 6);
  *(_DWORD *)(a1 + 232) = v23;
  v24 = v23 & 0xFFFFFF7F | (((*(_DWORD *)(a2 + 232) >> 7) & 1) << 7);
  *(_DWORD *)(a1 + 232) = v24;
  v25 = v24 & 0xFFFF80FF | (((*(_DWORD *)(a2 + 232) >> 8) & 0x7F) << 8);
  *(_DWORD *)(a1 + 232) = v25;
  v26 = v25 & 0xFFFF7FFF | (((*(_DWORD *)(a2 + 232) >> 15) & 1) << 15);
  *(_DWORD *)(a1 + 232) = v26;
  v27 = v26 & 0xFFF8FFFF | ((HIWORD(*(_DWORD *)(a2 + 232)) & 7) << 16);
  *(_DWORD *)(a1 + 232) = v27;
  v28 = v27 & 0xFFE7FFFF | (((*(_DWORD *)(a2 + 232) >> 19) & 3) << 19);
  *(_DWORD *)(a1 + 232) = v28;
  v29 = v28 & 0xFFDFFFFF | (((*(_DWORD *)(a2 + 232) >> 21) & 1) << 21);
  *(_DWORD *)(a1 + 232) = v29;
  v30 = v29 & 0xFFBFFFFF | (((*(_DWORD *)(a2 + 232) >> 22) & 1) << 22);
  *(_DWORD *)(a1 + 232) = v30;
  v31 = v30 & 0xFC7FFFFF | (((*(_DWORD *)(a2 + 232) >> 23) & 7) << 23);
  *(_DWORD *)(a1 + 232) = v31;
  v32 = v31 & 0xF3FFFFFF | (((*(_DWORD *)(a2 + 232) >> 26) & 3) << 26);
  *(_DWORD *)(a1 + 232) = v32;
  *(_DWORD *)(a1 + 232) = v32 & 0xCFFFFFFF | (((*(_DWORD *)(a2 + 232) >> 28) & 3) << 28);
  LODWORD(v19) = *(_DWORD *)(a1 + 236) & 0xFFFFFFF8 | *(_DWORD *)(a2 + 236) & 7;
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFFE7 | (8 * ((*(_DWORD *)(a2 + 236) >> 3) & 3));
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a2 + 236) >> 5) & 1));
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFFFBF | (((*(_DWORD *)(a2 + 236) >> 6) & 1) << 6);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFF87F | (((*(_DWORD *)(a2 + 236) >> 7) & 0xF) << 7);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFFC7FF | (((*(_DWORD *)(a2 + 236) >> 11) & 7) << 11);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFF3FFF | (HIBYTE(*(_WORD *)(a2 + 236)) >> 6 << 14);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFCFFFF | ((HIWORD(*(_DWORD *)(a2 + 236)) & 3) << 16);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFFBFFFF | (((*(_DWORD *)(a2 + 236) >> 18) & 1) << 18);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFF7FFFF | (((*(_DWORD *)(a2 + 236) >> 19) & 1) << 19);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFEFFFFF | (((*(_DWORD *)(a2 + 236) >> 20) & 1) << 20);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFDFFFFF | (((*(_DWORD *)(a2 + 236) >> 21) & 1) << 21);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFFBFFFFF | (((*(_DWORD *)(a2 + 236) >> 22) & 1) << 22);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFF7FFFFF | (((*(_DWORD *)(a2 + 236) >> 23) & 1) << 23);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFEFFFFFF | ((HIBYTE(*(_DWORD *)(a2 + 236)) & 1) << 24);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFDFFFFFF | (((*(_DWORD *)(a2 + 236) >> 25) & 1) << 25);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  LODWORD(v19) = v19 & 0xFBFFFFFF | (((*(_DWORD *)(a2 + 236) >> 26) & 1) << 26);
  *(_DWORD *)(a1 + 236) = (_DWORD)v19;
  *(_DWORD *)(a1 + 236) = v19 & 0xE7FFFFFF | (((*(_DWORD *)(a2 + 236) >> 27) & 3) << 27);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  LOBYTE(v19) = *(_BYTE *)(a2 + 241);
  *(_DWORD *)(a1 + 244) = 0;
  v33 = (int *)(a1 + 244);
  *(_BYTE *)(a1 + 241) = (_BYTE)v19;
  *(_WORD *)(a1 + 249) = 0;
  v34 = *(unsigned __int8 *)(a2 + 248);
  *(_BYTE *)(a1 + 248) = v34;
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  if (v34 <= 0xD)
  {
    v35 = 1 << v34;
    if ((v35 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
      *v33 = *(_DWORD *)(a2 + 244);
    }
    else if ((v35 & 0x3003) != 0)
    {
      *v33 = 0;
    }
    else
    {
      *v33 = *(_DWORD *)(a2 + 244);
      WebCore::Length::ref(v33);
    }
  }
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v36 = *(unsigned int *)(a2 + 264);
  if ((_DWORD)v36 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v36])(&v55, a2 + 256);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v37 = *(unsigned int *)(a2 + 280);
  if ((_DWORD)v37 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v37])(&v55, a2 + 272);
  v38 = *(_DWORD **)(a2 + 288);
  if (v38)
    *v38 += 2;
  *(_QWORD *)(a1 + 288) = v38;
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  *(_DWORD *)(a1 + 298) = *(_DWORD *)(a2 + 298);
  *(_WORD *)(a1 + 302) = *(_WORD *)(a2 + 302);
  v39 = *(_DWORD **)(a2 + 304);
  if (v39)
    *v39 += 2;
  *(_QWORD *)(a1 + 304) = v39;
  v40 = *(_DWORD **)(a2 + 312);
  if (v40)
    ++*v40;
  *(_QWORD *)(a1 + 312) = v40;
  v41 = *(_DWORD **)(a2 + 320);
  ++*v41;
  *(_QWORD *)(a1 + 320) = v41;
  v42 = *(_DWORD **)(a2 + 328);
  if (v42)
    *v42 += 2;
  *(_QWORD *)(a1 + 328) = v42;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v43 = *(unsigned int *)(a2 + 360);
  if ((_DWORD)v43 == -1)
    goto LABEL_45;
  v55 = &v51;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v43])(&v55, a2 + 352);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  v44 = *(_DWORD **)(a2 + 376);
  if (v44)
    *v44 += 2;
  *(_QWORD *)(a1 + 376) = v44;
  v51 = &v50;
  v52 = &v50;
  v53 = &v50;
  v54 = &v50;
  v45 = *(unsigned int *)(a2 + 392);
  if ((_DWORD)v45 == -1
    || (v55 = &v51,
        ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v45])(&v55, a2 + 384), v51 = &v50, v52 = &v50, v53 = &v50, v54 = &v50, v46 = *(unsigned int *)(a2 + 408), (_DWORD)v46 == -1))
  {
LABEL_45:
    v49 = (WebCore::StyleVisitedLinkColorData *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v49);
  }
  else
  {
    v55 = &v51;
    ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v46])(&v55, a2 + 400);
  }
}

void WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(WebCore::StyleVisitedLinkColorData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v9, (char *)this + 104);
  *((_DWORD *)this + 28) = -1;
  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v3])(&v10, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v4])(&v11, (char *)this + 72);
  *((_DWORD *)this + 20) = -1;
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v12, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v13, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  v7 = *((unsigned int *)this + 8);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v14, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v8 = *((unsigned int *)this + 4);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v15, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
}

uint64_t WebCore::StyleSurroundData::StyleSurroundData(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  int v10;
  int *v11;
  unsigned int v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  int *v17;
  unsigned int v18;
  int v19;
  int *v20;
  unsigned int v21;
  int v22;
  int *v23;
  unsigned int v24;
  int v25;
  int *v26;
  unsigned int v27;
  int v28;
  int *v29;
  unsigned int v30;
  int v31;
  int *v32;
  unsigned int v33;
  int v34;
  int *v35;
  unsigned int v36;
  int v37;
  int *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  int *v50;
  unsigned int v51;
  int v52;
  int *v53;
  unsigned int v54;
  int v55;
  int *v56;
  unsigned int v57;
  int v58;
  int *v59;
  unsigned int v60;
  int v61;
  int *v62;
  unsigned int v63;
  int v64;
  int *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int *v69;
  int v70;
  unsigned int v71;
  int *v72;
  int v73;
  WebCore::Widget *v75;
  char v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char **v81;

  *(_DWORD *)a1 = 1;
  v4 = *(_BYTE *)(a1 + 4) & 0xFE | *(_BYTE *)(a2 + 4) & 1;
  *(_BYTE *)(a1 + 4) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 4) >> 1) & 1));
  *(_BYTE *)(a1 + 4) = v5;
  LOBYTE(v5) = v5 & 0xFB | (4 * ((*(_BYTE *)(a2 + 4) & 4) != 0));
  *(_BYTE *)(a1 + 4) = v5;
  *(_BYTE *)(a1 + 4) = v5 & 0xF7 | *(_BYTE *)(a2 + 4) & 8;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 8;
  *(_WORD *)(v6 + 5) = 0;
  v7 = *(unsigned __int8 *)(a2 + 12);
  *(_BYTE *)(v6 + 4) = v7;
  *(_BYTE *)(v6 + 5) = *(_BYTE *)(a2 + 13);
  if (v7 <= 0xD)
  {
    if (((1 << v7) & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
      *(_DWORD *)v6 = *(_DWORD *)(a2 + 8);
    }
    else if (((1 << v7) & 0x3003) != 0)
    {
      *(_DWORD *)v6 = 0;
    }
    else
    {
      *(_DWORD *)v6 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref((int *)v6);
    }
  }
  *(_DWORD *)(a1 + 16) = 0;
  v8 = (int *)(a1 + 16);
  *(_WORD *)(a1 + 21) = 0;
  v9 = *(unsigned __int8 *)(a2 + 20);
  *(_BYTE *)(a1 + 20) = v9;
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  if (v9 <= 0xD)
  {
    v10 = 1 << v9;
    if ((v10 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
      *v8 = *(_DWORD *)(a2 + 16);
    }
    else if ((v10 & 0x3003) != 0)
    {
      *v8 = 0;
    }
    else
    {
      *v8 = *(_DWORD *)(a2 + 16);
      WebCore::Length::ref(v8);
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
  v11 = (int *)(a1 + 24);
  *(_WORD *)(a1 + 29) = 0;
  v12 = *(unsigned __int8 *)(a2 + 28);
  *(_BYTE *)(a1 + 28) = v12;
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  if (v12 <= 0xD)
  {
    v13 = 1 << v12;
    if ((v13 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
      *v11 = *(_DWORD *)(a2 + 24);
    }
    else if ((v13 & 0x3003) != 0)
    {
      *v11 = 0;
    }
    else
    {
      *v11 = *(_DWORD *)(a2 + 24);
      WebCore::Length::ref(v11);
    }
  }
  *(_DWORD *)(a1 + 32) = 0;
  v14 = (int *)(a1 + 32);
  *(_WORD *)(a1 + 37) = 0;
  v15 = *(unsigned __int8 *)(a2 + 36);
  *(_BYTE *)(a1 + 36) = v15;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  if (v15 <= 0xD)
  {
    v16 = 1 << v15;
    if ((v16 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
      *v14 = *(_DWORD *)(a2 + 32);
    }
    else if ((v16 & 0x3003) != 0)
    {
      *v14 = 0;
    }
    else
    {
      *v14 = *(_DWORD *)(a2 + 32);
      WebCore::Length::ref(v14);
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  v17 = (int *)(a1 + 40);
  *(_WORD *)(a1 + 45) = 0;
  v18 = *(unsigned __int8 *)(a2 + 44);
  *(_BYTE *)(a1 + 44) = v18;
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  if (v18 <= 0xD)
  {
    v19 = 1 << v18;
    if ((v19 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
      *v17 = *(_DWORD *)(a2 + 40);
    }
    else if ((v19 & 0x3003) != 0)
    {
      *v17 = 0;
    }
    else
    {
      *v17 = *(_DWORD *)(a2 + 40);
      WebCore::Length::ref(v17);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  v20 = (int *)(a1 + 48);
  *(_WORD *)(a1 + 53) = 0;
  v21 = *(unsigned __int8 *)(a2 + 52);
  *(_BYTE *)(a1 + 52) = v21;
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  if (v21 <= 0xD)
  {
    v22 = 1 << v21;
    if ((v22 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
      *v20 = *(_DWORD *)(a2 + 48);
    }
    else if ((v22 & 0x3003) != 0)
    {
      *v20 = 0;
    }
    else
    {
      *v20 = *(_DWORD *)(a2 + 48);
      WebCore::Length::ref(v20);
    }
  }
  *(_DWORD *)(a1 + 56) = 0;
  v23 = (int *)(a1 + 56);
  *(_WORD *)(a1 + 61) = 0;
  v24 = *(unsigned __int8 *)(a2 + 60);
  *(_BYTE *)(a1 + 60) = v24;
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  if (v24 <= 0xD)
  {
    v25 = 1 << v24;
    if ((v25 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
      *v23 = *(_DWORD *)(a2 + 56);
    }
    else if ((v25 & 0x3003) != 0)
    {
      *v23 = 0;
    }
    else
    {
      *v23 = *(_DWORD *)(a2 + 56);
      WebCore::Length::ref(v23);
    }
  }
  *(_DWORD *)(a1 + 64) = 0;
  v26 = (int *)(a1 + 64);
  *(_WORD *)(a1 + 69) = 0;
  v27 = *(unsigned __int8 *)(a2 + 68);
  *(_BYTE *)(a1 + 68) = v27;
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  if (v27 <= 0xD)
  {
    v28 = 1 << v27;
    if ((v28 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
      *v26 = *(_DWORD *)(a2 + 64);
    }
    else if ((v28 & 0x3003) != 0)
    {
      *v26 = 0;
    }
    else
    {
      *v26 = *(_DWORD *)(a2 + 64);
      WebCore::Length::ref(v26);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  v29 = (int *)(a1 + 72);
  *(_WORD *)(a1 + 77) = 0;
  v30 = *(unsigned __int8 *)(a2 + 76);
  *(_BYTE *)(a1 + 76) = v30;
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  if (v30 <= 0xD)
  {
    v31 = 1 << v30;
    if ((v31 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
      *v29 = *(_DWORD *)(a2 + 72);
    }
    else if ((v31 & 0x3003) != 0)
    {
      *v29 = 0;
    }
    else
    {
      *v29 = *(_DWORD *)(a2 + 72);
      WebCore::Length::ref(v29);
    }
  }
  *(_DWORD *)(a1 + 80) = 0;
  v32 = (int *)(a1 + 80);
  *(_WORD *)(a1 + 85) = 0;
  v33 = *(unsigned __int8 *)(a2 + 84);
  *(_BYTE *)(a1 + 84) = v33;
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  if (v33 <= 0xD)
  {
    v34 = 1 << v33;
    if ((v34 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
      *v32 = *(_DWORD *)(a2 + 80);
    }
    else if ((v34 & 0x3003) != 0)
    {
      *v32 = 0;
    }
    else
    {
      *v32 = *(_DWORD *)(a2 + 80);
      WebCore::Length::ref(v32);
    }
  }
  *(_DWORD *)(a1 + 88) = 0;
  v35 = (int *)(a1 + 88);
  *(_WORD *)(a1 + 93) = 0;
  v36 = *(unsigned __int8 *)(a2 + 92);
  *(_BYTE *)(a1 + 92) = v36;
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  if (v36 <= 0xD)
  {
    v37 = 1 << v36;
    if ((v37 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
      *v35 = *(_DWORD *)(a2 + 88);
    }
    else if ((v37 & 0x3003) != 0)
    {
      *v35 = 0;
    }
    else
    {
      *v35 = *(_DWORD *)(a2 + 88);
      WebCore::Length::ref(v35);
    }
  }
  *(_DWORD *)(a1 + 96) = 0;
  v38 = (int *)(a1 + 96);
  *(_WORD *)(a1 + 101) = 0;
  v39 = *(unsigned __int8 *)(a2 + 100);
  *(_BYTE *)(a1 + 100) = v39;
  *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 101);
  if (v39 <= 0xD)
  {
    v40 = 1 << v39;
    if ((v40 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
      *v38 = *(_DWORD *)(a2 + 96);
    }
    else if ((v40 & 0x3003) != 0)
    {
      *v38 = 0;
    }
    else
    {
      *v38 = *(_DWORD *)(a2 + 96);
      WebCore::Length::ref(v38);
    }
  }
  v77 = &v76;
  v78 = &v76;
  v79 = &v76;
  v80 = &v76;
  v41 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v41 == -1)
    goto LABEL_126;
  v81 = &v77;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v41])(&v81, a2 + 104);
  v42 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = v42;
  v77 = &v76;
  v78 = &v76;
  v79 = &v76;
  v80 = &v76;
  v43 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v43 == -1)
    goto LABEL_126;
  v81 = &v77;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v43])(&v81, a2 + 128);
  v44 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v44;
  v77 = &v76;
  v78 = &v76;
  v79 = &v76;
  v80 = &v76;
  v45 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v45 == -1)
    goto LABEL_126;
  v81 = &v77;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v45])(&v81, a2 + 152);
  v46 = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v46;
  v77 = &v76;
  v78 = &v76;
  v79 = &v76;
  v80 = &v76;
  v47 = *(unsigned int *)(a2 + 184);
  if ((_DWORD)v47 == -1)
  {
LABEL_126:
    v75 = (WebCore::Widget *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Widget::frameRect(v75);
  }
  else
  {
    v81 = &v77;
    ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v47])(&v81, a2 + 176);
    v48 = *(_DWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
    *(_DWORD *)(a1 + 192) = v48;
    v49 = *(_DWORD **)(a2 + 200);
    ++*v49;
    *(_DWORD *)(a1 + 208) = 0;
    v50 = (int *)(a1 + 208);
    *(_QWORD *)(a1 + 200) = v49;
    *(_WORD *)(a1 + 213) = 0;
    v51 = *(unsigned __int8 *)(a2 + 212);
    *(_BYTE *)(a1 + 212) = v51;
    *(_BYTE *)(a1 + 213) = *(_BYTE *)(a2 + 213);
    if (v51 <= 0xD)
    {
      v52 = 1 << v51;
      if ((v52 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 214) = *(_BYTE *)(a2 + 214);
        *v50 = *(_DWORD *)(a2 + 208);
      }
      else if ((v52 & 0x3003) != 0)
      {
        *v50 = 0;
      }
      else
      {
        *v50 = *(_DWORD *)(a2 + 208);
        WebCore::Length::ref(v50);
      }
    }
    *(_DWORD *)(a1 + 216) = 0;
    v53 = (int *)(a1 + 216);
    *(_WORD *)(a1 + 221) = 0;
    v54 = *(unsigned __int8 *)(a2 + 220);
    *(_BYTE *)(a1 + 220) = v54;
    *(_BYTE *)(a1 + 221) = *(_BYTE *)(a2 + 221);
    if (v54 <= 0xD)
    {
      v55 = 1 << v54;
      if ((v55 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 222) = *(_BYTE *)(a2 + 222);
        *v53 = *(_DWORD *)(a2 + 216);
      }
      else if ((v55 & 0x3003) != 0)
      {
        *v53 = 0;
      }
      else
      {
        *v53 = *(_DWORD *)(a2 + 216);
        WebCore::Length::ref(v53);
      }
    }
    *(_DWORD *)(a1 + 224) = 0;
    v56 = (int *)(a1 + 224);
    *(_WORD *)(a1 + 229) = 0;
    v57 = *(unsigned __int8 *)(a2 + 228);
    *(_BYTE *)(a1 + 228) = v57;
    *(_BYTE *)(a1 + 229) = *(_BYTE *)(a2 + 229);
    if (v57 <= 0xD)
    {
      v58 = 1 << v57;
      if ((v58 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 230) = *(_BYTE *)(a2 + 230);
        *v56 = *(_DWORD *)(a2 + 224);
      }
      else if ((v58 & 0x3003) != 0)
      {
        *v56 = 0;
      }
      else
      {
        *v56 = *(_DWORD *)(a2 + 224);
        WebCore::Length::ref(v56);
      }
    }
    *(_DWORD *)(a1 + 232) = 0;
    v59 = (int *)(a1 + 232);
    *(_WORD *)(a1 + 237) = 0;
    v60 = *(unsigned __int8 *)(a2 + 236);
    *(_BYTE *)(a1 + 236) = v60;
    *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
    if (v60 <= 0xD)
    {
      v61 = 1 << v60;
      if ((v61 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 238) = *(_BYTE *)(a2 + 238);
        *v59 = *(_DWORD *)(a2 + 232);
      }
      else if ((v61 & 0x3003) != 0)
      {
        *v59 = 0;
      }
      else
      {
        *v59 = *(_DWORD *)(a2 + 232);
        WebCore::Length::ref(v59);
      }
    }
    *(_DWORD *)(a1 + 240) = 0;
    v62 = (int *)(a1 + 240);
    *(_WORD *)(a1 + 245) = 0;
    v63 = *(unsigned __int8 *)(a2 + 244);
    *(_BYTE *)(a1 + 244) = v63;
    *(_BYTE *)(a1 + 245) = *(_BYTE *)(a2 + 245);
    if (v63 <= 0xD)
    {
      v64 = 1 << v63;
      if ((v64 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 246) = *(_BYTE *)(a2 + 246);
        *v62 = *(_DWORD *)(a2 + 240);
      }
      else if ((v64 & 0x3003) != 0)
      {
        *v62 = 0;
      }
      else
      {
        *v62 = *(_DWORD *)(a2 + 240);
        WebCore::Length::ref(v62);
      }
    }
    *(_DWORD *)(a1 + 248) = 0;
    v65 = (int *)(a1 + 248);
    *(_WORD *)(a1 + 253) = 0;
    v66 = *(unsigned __int8 *)(a2 + 252);
    *(_BYTE *)(a1 + 252) = v66;
    *(_BYTE *)(a1 + 253) = *(_BYTE *)(a2 + 253);
    if (v66 <= 0xD)
    {
      v67 = 1 << v66;
      if ((v67 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 254) = *(_BYTE *)(a2 + 254);
        *v65 = *(_DWORD *)(a2 + 248);
      }
      else if ((v67 & 0x3003) != 0)
      {
        *v65 = 0;
      }
      else
      {
        *v65 = *(_DWORD *)(a2 + 248);
        WebCore::Length::ref(v65);
      }
    }
    *(_DWORD *)(a1 + 256) = 0;
    *(_WORD *)(a1 + 261) = 0;
    v68 = *(unsigned __int8 *)(a2 + 260);
    *(_BYTE *)(a1 + 260) = v68;
    *(_BYTE *)(a1 + 261) = *(_BYTE *)(a2 + 261);
    if (v68 <= 0xD)
    {
      v69 = (int *)(a1 + 256);
      v70 = 1 << v68;
      if ((v70 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 262) = *(_BYTE *)(a2 + 262);
        *v69 = *(_DWORD *)(a2 + 256);
      }
      else if ((v70 & 0x3003) != 0)
      {
        *v69 = 0;
      }
      else
      {
        *v69 = *(_DWORD *)(a2 + 256);
        WebCore::Length::ref(v69);
      }
    }
    *(_DWORD *)(a1 + 264) = 0;
    *(_WORD *)(a1 + 269) = 0;
    v71 = *(unsigned __int8 *)(a2 + 268);
    *(_BYTE *)(a1 + 268) = v71;
    *(_BYTE *)(a1 + 269) = *(_BYTE *)(a2 + 269);
    if (v71 <= 0xD)
    {
      v72 = (int *)(a1 + 264);
      v73 = 1 << v71;
      if ((v73 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 270) = *(_BYTE *)(a2 + 270);
        *v72 = *(_DWORD *)(a2 + 264);
      }
      else if ((v73 & 0x3003) != 0)
      {
        *v72 = 0;
      }
      else
      {
        *v72 = *(_DWORD *)(a2 + 264);
        WebCore::Length::ref(v72);
      }
    }
    return a1;
  }
}

uint64_t WebCore::Widget::frameRect(WebCore::Widget *this)
{
  void *v2;
  const CGRect *v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  void *v9;
  CGRect v10;

  v2 = (void *)*((_QWORD *)this + 5);
  if (!v2)
    return *((_QWORD *)this + 6);
  v9 = v2;
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_1EE342188))
    objc_msgSend((id)objc_msgSend(v9, "superview"), "frame");
  else
    objc_msgSend(v9, "frame");
  v10.origin.x = v5;
  v10.origin.y = v6;
  v10.size.width = v7;
  v10.size.height = v8;
  return WebCore::enclosingIntRect(&v10, v4);
}

void WebCore::StyleRareInheritedData::~StyleRareInheritedData(WebCore::StyleRareInheritedData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::StyleCustomPropertyData *v14;
  uint64_t v15;
  WebCore::ShadowData *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  void *v41;
  unsigned int **v42;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v3 = *((unsigned int *)this + 102);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v3])(&v48, (char *)this + 400);
  *((_DWORD *)this + 102) = -1;
  v4 = *((unsigned int *)this + 98);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v4])(&v49, (char *)this + 384);
  *((_DWORD *)this + 98) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 90);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v50, (char *)this + 352);
  *((_DWORD *)this + 90) = -1;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v38 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v38)
      {
        v42 = *(unsigned int ***)(v8 + 8);
        v43 = &v42[v38];
        do
        {
          v44 = *v42;
          *v42 = 0;
          if (v44)
          {
            v45 = v44 + 2;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v44 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
            }
          }
          ++v42;
        }
        while (v42 != v43);
      }
      v39 = *(WTF **)(v8 + 8);
      if (v39)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        WTF::fastFree(v39, a2);
      }
      WTF::fastFree((WTF *)v8, a2);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v9)
  {
    if (*v9 == 1)
    {
      if (v9[1])
      {
        v29 = 0;
        v30 = (WTF::StringImpl **)(v9 + 4);
        do
        {
          v31 = *v30;
          *v30 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, a2);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *(v30 - 1);
          *(v30 - 1) = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, a2);
            else
              *(_DWORD *)v32 -= 2;
          }
          ++v29;
          v30 += 2;
        }
        while (v29 < v9[1]);
      }
      WTF::fastFree((WTF *)v9, a2);
    }
    else
    {
      --*v9;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((unsigned int *)this + 70);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v51, (char *)this + 272);
  *((_DWORD *)this + 70) = -1;
  v13 = *((unsigned int *)this + 66);
  if ((_DWORD)v13 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v52, (char *)this + 256);
  *((_DWORD *)this + 66) = -1;
  if (*((_BYTE *)this + 248) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 61));
  }
  v14 = (WebCore::StyleCustomPropertyData *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v14, a2);
      WTF::fastFree(v40, v41);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  if (*((_BYTE *)this + 204) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 50));
  }
  if (*((_BYTE *)this + 180) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 44));
  }
  v15 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v33 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v33)
      {
        v34 = *(_DWORD ***)(v15 + 8);
        v35 = 16 * v33;
        do
        {
          v36 = *v34;
          *v34 = 0;
          if (v36)
          {
            if (v36[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
            else
              --v36[2];
          }
          v34 += 2;
          v35 -= 16;
        }
        while (v35);
      }
      v37 = *(WTF **)(v15 + 8);
      if (v37)
      {
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 0;
        WTF::fastFree(v37, a2);
      }
      WTF::fastFree((WTF *)v15, a2);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = (WebCore::ShadowData *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v16)
  {
    WebCore::ShadowData::~ShadowData(v16);
    WTF::fastFree(v17, v18);
  }
  v19 = *((unsigned int *)this + 38);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v53, (char *)this + 144);
  *((_DWORD *)this + 38) = -1;
  v20 = *((unsigned int *)this + 34);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(&v54, (char *)this + 128);
  *((_DWORD *)this + 34) = -1;
  v21 = *((unsigned int *)this + 30);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v55, (char *)this + 112);
  *((_DWORD *)this + 30) = -1;
  v22 = *((unsigned int *)this + 26);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v56, (char *)this + 96);
  *((_DWORD *)this + 26) = -1;
  v23 = *((unsigned int *)this + 22);
  if ((_DWORD)v23 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v57, (char *)this + 80);
  *((_DWORD *)this + 22) = -1;
  v24 = *((unsigned int *)this + 18);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v58, (char *)this + 64);
  *((_DWORD *)this + 18) = -1;
  v25 = *((unsigned int *)this + 14);
  if ((_DWORD)v25 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v25])(&v59, (char *)this + 48);
  *((_DWORD *)this + 14) = -1;
  v26 = *((unsigned int *)this + 10);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v60, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v27 = *((unsigned int *)this + 6);
  if ((_DWORD)v27 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(&v61, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  v28 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
}

WTF::StringImpl *WebCore::RenderTableRow::createAnonymousWithParentRenderer@<X0>(WebCore::RenderTableRow *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)this + 10, (WTF::StringImpl *)9, a2, (uint64_t)&v17);
  v6 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderObject::RenderObject((uint64_t)v6, 39, v5, 28, 0);
  *(_QWORD *)v7 = off_1E3422BC8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 70) = 0;
  *(_DWORD *)(v7 + 80) = 0;
  v8 = v18;
  v9 = v19;
  v18 = 0;
  *(_QWORD *)(v7 + 88) = v8;
  *(_QWORD *)(v7 + 96) = v9;
  v10 = v20;
  v20 = 0u;
  *(_OWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 120) = v21;
  v11 = v22;
  v22 = 0u;
  *(_OWORD *)(v7 + 128) = v11;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)v7 = off_1E3434090;
  *(_DWORD *)(v7 + 200) |= 0x7FFFFFFFu;
  *(_DWORD *)(v7 + 20) |= 1u;
  *a3 = v7;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v17, v12);
  return WebCore::RenderElement::initializeStyle(v6, v13, v14, v15);
}

WTF::StringImpl *WebCore::RenderElement::initializeStyle(WebCore::RenderElement *this, uint64_t a2, uint64_t a3, const WebCore::Element *a4)
{
  int v4;
  WebCore::RenderElement *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  int v27;
  _BOOL4 v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v47;
  char v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  int v56;
  WTF *v57;
  WTF **v58;
  WebCore::RenderElement *v59;
  WTF *v60;
  int v61;
  WTF::StringImpl *v62;
  char v63;
  WTF *v64;
  int v65;
  uint64_t v66;
  char v67;

  v5 = this;
  v6 = (WebCore::RenderElement *)((char *)this + 80);
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    WebCore::Style::loadPendingResources((WebCore::RenderElement *)((char *)this + 80), (WebCore::RenderStyle *)v8, 0, a4);
  }
  else
  {
    if ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DC304);
    }
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::Style::loadPendingResources((WebCore::RenderElement *)((char *)this + 80), (WebCore::RenderStyle *)v8, (WebCore::Document *)v7, a4);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  (*(void (**)(WebCore::RenderElement *, uint64_t, WTF::StringImpl *))(*(_QWORD *)v5 + 784))(v5, 9, v6);
  *(_WORD *)((char *)v5 + 69) |= 2u;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::RenderElement *, uint64_t, _QWORD))(*(_QWORD *)v5 + 792))(v5, 9, 0);
  v11 = (*((_QWORD *)v5 + 12) >> 43) & 0x1FLL;
  if (!(_DWORD)v11)
  {
LABEL_8:
    if ((*((_BYTE *)v5 + 45) & 1) != 0)
      return result;
    v12 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (!v12)
      return result;
    v13 = *(unsigned __int16 *)(v12 + 28);
    if ((v13 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DC324);
    }
    if ((~v13 & 0x408) != 0
      || (result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 368))(v12), !(_DWORD)result))
    {
      v14 = 0;
      v11 = 0;
      v15 = 1;
      v16 = (WTF *)v12;
      goto LABEL_13;
    }
    v38 = *(_QWORD *)(v12 + 112);
    if (v38)
      v16 = *(WTF **)(v38 + 8);
    else
      v16 = 0;
    if ((~*(unsigned __int16 *)(v12 + 28) & 0x408) != 0)
    {
      v11 = 0;
    }
    else
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 368))(v12);
      v11 = (uint64_t)result;
    }
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      v39 = *(_DWORD *)v6;
      *(_DWORD *)v6 += 4;
      v40 = v39 + 2;
      if (v40
        || (result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10), v40 = *(_DWORD *)v6, *(_DWORD *)v6 += 2, v40))
      {
        v15 = 0;
        *(_DWORD *)v6 = v40;
LABEL_72:
        v14 = 1;
        goto LABEL_13;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    }
    v15 = 0;
    goto LABEL_72;
  }
  switch((int)v11)
  {
    case 5:
      v43 = *((_QWORD *)v5 + 4);
      if (!v43)
        return result;
      while (1)
      {
        v44 = *(_QWORD *)(v43 + 8);
        if (!v44)
          return result;
        if (*(_BYTE *)(v44 + 46) == 19)
        {
          result = (WTF::StringImpl *)WebCore::RenderElement::element((WebCore::RenderElement *)v44);
          if (result)
          {
            v45 = *(_QWORD *)(v44 + 248);
            if (v45)
            {
              if (*(WebCore::RenderElement **)(v45 + 8) == v5)
                break;
            }
          }
        }
        v43 = *(_QWORD *)(v44 + 32);
        if (!v43)
          return result;
      }
      v57 = (WTF *)WebCore::RenderElement::element((WebCore::RenderElement *)v44);
      v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v6 += 4;
      v11 = 5;
      v61 = 5;
      v62 = v6;
      v14 = 1;
      v63 = 1;
      v16 = v57;
      v64 = v57;
      goto LABEL_121;
    case 6:
    case 7:
      goto LABEL_8;
    case 9:
      v58 = *(WTF ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 3096);
      if (!v58)
        return result;
      break;
    case 12:
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1272))
        return result;
      v16 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1272);
      v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v6 += 4;
      v11 = 12;
      goto LABEL_120;
    case 13:
    case 14:
    case 15:
    case 16:
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1272))
        return result;
      v16 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1272);
      v53 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 592);
      v6 = v53;
      if (v53)
        *(_DWORD *)v53 += 4;
      goto LABEL_120;
    default:
      return result;
  }
  while (1)
  {
    result = (WTF::StringImpl *)(*((_QWORD *)*v58 + 8) & 0xFFFFFFFFFFFFLL);
    if (result)
    {
      if ((*(_BYTE *)((*((_QWORD *)*v58 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DC588);
      }
      WebCore::RenderElement::backdropRenderer((uint64_t)result, &v64);
      result = v64;
      if (v64)
      {
        v59 = (WebCore::RenderElement *)*((_QWORD *)v64 + 1);
        if (*(_DWORD *)v64 == 1)
          result = (WTF::StringImpl *)WTF::fastFree(v64, v10);
        else
          --*(_DWORD *)v64;
        if (v59 == v5)
          break;
      }
    }
    v58 = (WTF **)v58[2];
    if (!v58)
      return result;
  }
  v16 = *v58;
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v6 += 4;
  v11 = 9;
LABEL_120:
  v61 = v11;
  v62 = v6;
  v14 = 1;
  v63 = 1;
  v64 = v16;
LABEL_121:
  v65 = v11;
  v67 = 1;
  v66 = 0;
  WebCore::Styleable::~Styleable((WebCore::Styleable *)&v64, v10);
  result = (WTF::StringImpl *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v61, v54);
  v15 = 0;
LABEL_13:
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 5) + 8) + 2112);
  if (!v17)
  {
    v36 = *((_DWORD *)v5 + 5);
    if ((v36 & 0x400000) == 0)
      goto LABEL_57;
    v49 = v15;
    v50 = 0;
LABEL_113:
    *((_DWORD *)v5 + 5) = v36 & 0xFFBFFFFF | v50;
    v64 = 0;
    v51 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    v52 = *(_QWORD *)(*(_QWORD *)(v51 + 40) + 8);
    if (*(_QWORD *)(v52 + 1272) == v51)
    {
      v5 = *(WebCore::RenderElement **)(v52 + 1944);
    }
    else
    {
      if ((v36 & 0x8000) == 0)
      {
LABEL_127:
        LOBYTE(v15) = v49;
        goto LABEL_57;
      }
      if ((*((_BYTE *)v5 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DC3A0);
      }
    }
    WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=((uint64_t)&v64, *((_QWORD *)v5 + 18));
    result = v64;
    if (v64)
    {
      *((_DWORD *)v64 + 3) |= 8u;
      WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag((uint64_t)result, 1);
      v55 = v64;
      *((_DWORD *)v64 + 3) |= 0x40u;
      result = (WTF::StringImpl *)WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag((uint64_t)v55, 2);
      if (v64)
      {
        v56 = *((_DWORD *)v64 + 2);
        if (!v56)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DC5A8);
        }
        *((_DWORD *)v64 + 2) = v56 - 1;
      }
    }
    goto LABEL_127;
  }
  ++*(_DWORD *)(v17 + 24);
  if (*(_BYTE *)(v17 + 72) != 3)
  {
LABEL_53:
    v35 = 0;
    goto LABEL_54;
  }
  v18 = *(_QWORD *)(v17 + 64);
  if (!v18)
  {
    v21 = 0;
    v19 = 0;
LABEL_74:
    v20 = (_QWORD *)(v18 + 16 * v19);
    goto LABEL_22;
  }
  v19 = *(unsigned int *)(v18 - 4);
  v20 = (_QWORD *)(v18 + 16 * v19);
  if (!*(_DWORD *)(v18 - 12))
  {
    v21 = (_QWORD *)(v18 + 16 * v19);
    goto LABEL_74;
  }
  v21 = *(_QWORD **)(v17 + 64);
  if ((_DWORD)v19)
  {
    v22 = 16 * v19;
    v21 = *(_QWORD **)(v17 + 64);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      v21 += 2;
      v22 -= 16;
      if (!v22)
      {
        v21 = v20;
        break;
      }
    }
  }
LABEL_22:
  if (v18)
    v23 = (_QWORD *)(v18 + 16 * *(unsigned int *)(v18 - 4));
  else
    v23 = 0;
  if (v23 == v21)
    goto LABEL_53;
  while (1)
  {
    v24 = v21[1];
    v25 = *(_QWORD *)(v24 + 56);
    if (!v25)
      goto LABEL_38;
    v26 = *(WTF **)(v25 + 8);
    if (!v26)
      goto LABEL_38;
    v27 = *(unsigned __int8 *)(v24 + 80);
    v28 = *(_BYTE *)(v24 + 80) != 0;
    if (*(_BYTE *)(v24 + 80))
    {
      v4 = *(_DWORD *)(v24 + 64);
      result = *(WTF::StringImpl **)(v24 + 72);
      if (result)
        *(_DWORD *)result += 2;
      if (v26 != v16)
        goto LABEL_33;
    }
    else
    {
      v4 &= 0xFFFFFF00;
      if (v26 != v16)
        goto LABEL_33;
    }
    v30 = v14 ^ 1;
    if (!v27)
      v30 = 1;
    if ((v30 & 1) == 0)
      break;
    if ((_DWORD)v14 == (v27 != 0))
      goto LABEL_93;
LABEL_33:
    if (v27)
      goto LABEL_34;
LABEL_38:
    v29 = v21 + 2;
    v21 = v20;
    if (v29 != v20)
    {
      v21 = v29;
      while ((unint64_t)(*v21 + 1) <= 1)
      {
        v21 += 2;
        if (v21 == v20)
        {
          v21 = v20;
          break;
        }
      }
    }
    if (v21 == v23)
      goto LABEL_53;
  }
  if (v4 != (_DWORD)v11 || result != v6)
  {
LABEL_34:
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        v60 = v16;
        v31 = v11;
        v32 = v14;
        v33 = v6;
        v34 = v15;
        WTF::StringImpl::destroy(result, v10);
        v15 = v34;
        v6 = v33;
        v14 = v32;
        v11 = v31;
        v16 = v60;
      }
      else
      {
        *(_DWORD *)result -= 2;
      }
      result = 0;
    }
    goto LABEL_38;
  }
  v28 = 1;
  result = v6;
LABEL_93:
  if (v28 && result != 0)
  {
    if (*(_DWORD *)result == 2)
    {
      v47 = v6;
      v48 = v15;
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      LOBYTE(v15) = v48;
      v6 = v47;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  v35 = 1;
LABEL_54:
  if (*(_DWORD *)(v17 + 24) == 1)
  {
    v41 = v6;
    v42 = v15;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    LOBYTE(v15) = v42;
    v6 = v41;
  }
  else
  {
    --*(_DWORD *)(v17 + 24);
  }
  v36 = *((_DWORD *)v5 + 5);
  if (v35 != (v36 & 0x400000u) >> 22)
  {
    v49 = v15;
    if (v35)
      v50 = 0x400000;
    else
      v50 = 0;
    goto LABEL_113;
  }
LABEL_57:
  if (v6)
    v37 = v15;
  else
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

void WebCore::RenderElement::setStyle(uint64_t a1, WebCore::Style *a2, uint64_t a3, const WebCore::Element *a4)
{
  unsigned int v7;
  uint64_t v8;
  const WebCore::FilterOperations *v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WebCore::RenderStyle *v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const WebCore::FilterOperations *v40;
  unint64_t i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  const WebCore::RenderObject *v47;
  int v48;
  const WebCore::RenderObject *v49;
  int v50;
  uint64_t v51;
  WebCore::RenderObject *v52;
  int v53;
  int v54;
  WebCore::RenderLayer *v55;
  WebCore::RenderElement *v56;
  _BOOL4 hasTransformRelatedProperty;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t j;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  WebCore::RenderLayer *v84;
  WebCore::RenderElement *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  _BYTE v95[20];
  __int128 v96;
  char v97;

  v94 = 0;
  if ((*(_WORD *)(a1 + 69) & 2) == 0)
  {
    v10 = 0;
    goto LABEL_23;
  }
  v7 = WebCore::RenderStyle::diff(a1 + 80, (uint64_t)a2, (const WTF::StringImpl *)&v94);
  v10 = v94;
  if (v7 <= a3)
    a3 = a3;
  else
    a3 = v7;
  if ((v94 & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
    {
      if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DC99CLL);
      }
      if (a3 <= 6)
        v11 = 6;
      else
        v11 = a3;
      if ((_DWORD)a3 == 5)
        v11 = 7;
      if (a3 <= 1)
        v12 = 1;
      else
        v12 = a3;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 256))
        a3 = v12;
      else
        a3 = v11;
    }
    else if (a3 <= 8)
    {
      a3 = 8;
    }
    else
    {
      a3 = a3;
    }
  }
  if ((v94 & 2) != 0)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x80) == 0)
      goto LABEL_58;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DC9C4);
    }
    if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 256))
    {
      if (a3 <= 1)
        a3 = 1;
      else
        a3 = a3;
    }
    else
    {
LABEL_58:
      if (a3 <= 4)
        a3 = 4;
      else
        a3 = a3;
    }
  }
  if ((v94 & 0x10) != 0)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x80) == 0)
      goto LABEL_70;
    if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DCA18);
    }
    v43 = *(_QWORD *)(a1 + 144);
    if (*(_QWORD *)(v43 + 256)
      && (v56 = *(WebCore::RenderElement **)(v43 + 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v56 + 11) + 40) + 264))
      && !WebCore::RenderElement::hasMask(v56)
      && WebCore::GraphicsLayer::supportsLayerType(6u))
    {
      if (a3 <= 1)
        a3 = 1;
      else
        a3 = a3;
    }
    else
    {
LABEL_70:
      if (a3 <= 2)
        a3 = 2;
      else
        a3 = a3;
    }
  }
  if ((v10 & 0x20) != 0)
  {
    v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 200);
    if (v44)
    {
      v45 = *(unsigned __int8 *)(v44 + 33);
      if (a3 <= 1)
        v46 = 1;
      else
        v46 = a3;
      if (v45)
        a3 = v46;
      else
        a3 = a3;
    }
  }
  if ((v10 & 4) == 0 || (*(_BYTE *)(a1 + 21) & 0x80) == 0)
  {
LABEL_23:
    if (a3 > 7)
      goto LABEL_27;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942DCD2CLL);
  }
  v55 = *(WebCore::RenderLayer **)(a1 + 144);
  if (*((_QWORD *)v55 + 32) && !WebCore::RenderLayer::paintsWithFilters(v55, v8, v9))
  {
    if (!(_DWORD)a3)
    {
      a3 = 1;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (a3 >= 4)
    goto LABEL_23;
  a3 = 4;
LABEL_24:
  if ((*(_BYTE *)(a1 + 45) & 0x10) != 0
    && (v13 = *(_DWORD *)(a1 + 20) & 0x8000,
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1) != v13 >> 15))
  {
    a3 = 8;
  }
  else if ((_DWORD)a3 == 4)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
      a3 = 4;
    else
      a3 = 2;
  }
LABEL_27:
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    WebCore::Style::loadPendingResources(a2, (WebCore::RenderStyle *)v15, 0, a4);
  }
  else
  {
    if ((*(_WORD *)(v14 + 28) & 8) == 0)
    {
      __break(0xC471u);
      goto LABEL_250;
    }
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::Style::loadPendingResources(a2, (WebCore::RenderStyle *)v15, (WebCore::Document *)v14, a4);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  v16 = WebCore::RenderElement::repaintBeforeStyleChange((WebCore::RenderObject *)a1, a3, a1 + 80, (uint64_t)a2);
  (*(void (**)(uint64_t, uint64_t, WebCore::Style *))(*(_QWORD *)a1 + 784))(a1, a3, a2);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 88) = v19;
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
  v86 = 0;
  v87 = v18;
  v88 = v20;
  v22 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 104) = v22;
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 112) = v24;
  v89 = v21;
  v90 = v23;
  v25 = *(_QWORD *)(a1 + 120);
  v26 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 128) = 0;
  v91 = v25;
  v92 = v26;
  v27 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v28 = *(WTF **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v27;
  if (v28)
  {
    v29 = *((unsigned int *)v28 + 3);
    v30 = *(WTF **)v28;
    if ((_DWORD)v29)
    {
      v31 = 8 * v29;
      do
      {
        v32 = *(WebCore::RenderStyle **)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
        {
          WebCore::RenderStyle::~RenderStyle(v32, v17);
          if (*(_DWORD *)v33)
          {
            *((_OWORD *)v33 + 2) = 0u;
            *((_OWORD *)v33 + 3) = 0u;
            *(_OWORD *)v33 = 0u;
            *((_OWORD *)v33 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v33, v17);
          }
        }
        v30 = (WTF *)((char *)v30 + 8);
        v31 -= 8;
      }
      while (v31);
      v30 = *(WTF **)v28;
    }
    if ((WTF *)((char *)v28 + 16) != v30 && v30 != 0)
    {
      *(_QWORD *)v28 = 0;
      *((_DWORD *)v28 + 2) = 0;
      WTF::fastFree(v30, v17);
    }
    WTF::fastFree(v28, v17);
  }
  v35 = *(_QWORD *)(a1 + 136);
  v36 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(a1 + 136) = v36;
  v93 = v35;
  v37 = *(_QWORD *)(a1 + 32);
  if (v37)
    v38 = *(_QWORD *)(v37 + 8);
  else
    v38 = 0;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    if (((*(_DWORD *)(a1 + 96) ^ v88) & 0x380000) != 0)
      goto LABEL_91;
    hasTransformRelatedProperty = WebCore::RenderStyle::hasTransformRelatedProperty((WebCore::RenderStyle *)&v86);
    if (hasTransformRelatedProperty != WebCore::RenderStyle::hasTransformRelatedProperty((WebCore::RenderStyle *)(a1 + 80)))
      goto LABEL_91;
    v58 = *(_QWORD *)(v87 + 40);
    v59 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
    if (*(_QWORD *)(v58 + 200) != *(_QWORD *)(v59 + 200)
      || (*(_DWORD *)(*(_QWORD *)(v58 + 72) + 20) != 0) != (*(_DWORD *)(*(_QWORD *)(v59 + 72) + 20) != 0))
    {
      goto LABEL_91;
    }
    v60 = *(unsigned __int8 *)(v58 + 462);
    v61 = *(_BYTE *)(v58 + 642) & 3;
    if (v61 == 2)
    {
      v62 = 25;
    }
    else
    {
      v62 = *(unsigned __int8 *)(v58 + 462);
      if (v61 == 1)
        v62 = 21;
    }
    v63 = *(unsigned __int8 *)(v59 + 462);
    v64 = *(_BYTE *)(v59 + 642) & 3;
    if ((v64 - 1) <= 1)
    {
      if ((v62 & 1) == 0)
        goto LABEL_91;
    }
    else if (((v62 ^ v63) & 1) != 0)
    {
      goto LABEL_91;
    }
    if (v61 == 2)
    {
      v60 |= 0x19u;
    }
    else if (v61 == 1)
    {
      v60 = 21;
    }
    if (v64 == 2)
    {
      LOBYTE(v63) = v63 | 0x19;
    }
    else if (v64 == 1)
    {
      if ((v60 & 4) != 0)
        goto LABEL_50;
      goto LABEL_91;
    }
    if (((v60 >> 2) & 1) == (v63 & 4) >> 2)
      goto LABEL_50;
LABEL_91:
    if ((*(_BYTE *)(a1 + 45) & 0x40) != 0)
    {
      ++*(_DWORD *)(a1 + 16);
      WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(a1, 0);
      v48 = *(_DWORD *)(a1 + 16);
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DCD0CLL);
      }
      *(_DWORD *)(a1 + 16) = v48 - 1;
    }
    else
    {
      *(_QWORD *)&v96 = a1;
      v65 = WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBlock>::begin((uint64_t *)&v96);
      if (v47)
      {
        v66 = v65;
        v67 = (uint64_t)v47;
        do
        {
          ++*(_DWORD *)(v67 + 16);
          WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(v67, 0);
          v68 = *(_DWORD *)(v67 + 16);
          if (!v68)
          {
            __break(0xC471u);
            JUMPOUT(0x1942DCD4CLL);
          }
          *(_DWORD *)(v67 + 16) = v68 - 1;
          v67 = WebCore::RenderTraversal::next<WebCore::RenderBlock,WebCore::RenderBlock>(v67, v66);
        }
        while (v67);
      }
    }
    if (WebCore::RenderObject::computedFragmentedFlowState((WebCore::RenderObject *)a1, v47))
      v50 = 0x10000000;
    else
      v50 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xEFFFFFFF | v50;
    v51 = *(unsigned int *)(a1 + 64);
    if (v51 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v52 = *(WebCore::RenderObject **)((v51 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      *(_QWORD *)&v96 = a1;
      for (*((_QWORD *)&v96 + 1) = v52; *((_QWORD *)&v96 + 1); v52 = (WebCore::RenderObject *)*((_QWORD *)&v96 + 1))
      {
        ++*((_DWORD *)v52 + 4);
        if (WebCore::RenderObject::computedFragmentedFlowState(v52, v49))
          v53 = 0x10000000;
        else
          v53 = 0;
        v54 = *((_DWORD *)v52 + 4);
        *((_DWORD *)v52 + 5) = *((_DWORD *)v52 + 5) & 0xEFFFFFFF | v53;
        if (!v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DCC94);
        }
        *((_DWORD *)v52 + 4) = v54 - 1;
        WebCore::RenderDescendantIterator<WebCore::RenderObject>::operator++((uint64_t *)&v96);
      }
    }
  }
LABEL_50:
  (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 792))(a1, a3, &v86);
  for (i = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
        i;
        i = *(unsigned int *)(v42 + 47) | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32))
  {
    v42 = *(_QWORD *)(i + 8);
    if (!v42)
      break;
    if ((*(_BYTE *)(v42 + 45) & 2) != 0)
    {
LABEL_156:
      ++*(_DWORD *)(v42 + 16);
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v42 + 680))(v42, a3, &v86);
      v69 = *(_DWORD *)(v42 + 16);
      if (!v69)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DD044);
      }
      *(_DWORD *)(v42 + 16) = v69 - 1;
      while (1)
      {
        v70 = *(unsigned int *)(v42 + 47);
        if (!(v70 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)))
          goto LABEL_160;
        v42 = *(_QWORD *)((v70 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)) + 8);
        if (!v42)
          goto LABEL_160;
        if ((*(_BYTE *)(v42 + 45) & 2) != 0)
          goto LABEL_156;
      }
    }
  }
LABEL_160:
  if (v38)
  {
    v71 = a3;
    if ((v10 & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DD024);
        }
        if (a3 <= 6)
          v72 = 6;
        else
          v72 = a3;
        if ((_DWORD)a3 == 5)
          v72 = 7;
        if (a3 <= 1)
          v73 = 1;
        else
          v73 = a3;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 256))
          v71 = v73;
        else
          v71 = v72;
      }
      else if (a3 <= 8)
      {
        v71 = 8;
      }
      else
      {
        v71 = a3;
      }
    }
    if ((v10 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x80) == 0)
        goto LABEL_197;
      if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DD06CLL);
      }
      if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 256))
      {
        if (v71 <= 1)
          v71 = 1;
      }
      else
      {
LABEL_197:
        if (v71 <= 4)
          v71 = 4;
      }
    }
    if ((v10 & 0x10) != 0)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x80) == 0)
        goto LABEL_210;
      if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DD0C0);
      }
      v80 = *(_QWORD *)(a1 + 144);
      if (*(_QWORD *)(v80 + 256)
        && (v85 = *(WebCore::RenderElement **)(v80 + 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v85 + 11) + 40) + 264))
        && !WebCore::RenderElement::hasMask(v85)
        && WebCore::GraphicsLayer::supportsLayerType(6u))
      {
        if (v71 <= 1)
          v71 = 1;
      }
      else
      {
LABEL_210:
        if (v71 <= 2)
          v71 = 2;
      }
    }
    if ((v10 & 0x20) != 0)
    {
      v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 200);
      if (v81)
      {
        v82 = *(unsigned __int8 *)(v81 + 33);
        v83 = v71 <= 1 ? 1 : v71;
        if (v82)
          v71 = v83;
      }
    }
    if ((v10 & 4) == 0 || (*(_BYTE *)(a1 + 21) & 0x80) == 0)
      goto LABEL_179;
    if ((*(_BYTE *)(a1 + 45) & 0x10) != 0)
    {
      v84 = *(WebCore::RenderLayer **)(a1 + 144);
      if (*((_QWORD *)v84 + 32) && !WebCore::RenderLayer::paintsWithFilters(v84, (uint64_t)v39, v40))
      {
        if (!v71)
        {
          v71 = 1;
          goto LABEL_180;
        }
      }
      else if (v71 < 4)
      {
        v71 = 4;
LABEL_180:
        if ((*(_BYTE *)(a1 + 45) & 0x10) != 0
          && (v74 = *(_DWORD *)(a1 + 20) & 0x8000,
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1) != v74 >> 15))
        {
          v71 = 8;
        }
        else if (v71 == 4)
        {
          if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
            v71 = 4;
          else
            v71 = 2;
        }
LABEL_183:
        if (a3 <= 5)
        {
          switch(v71)
          {
            case 5u:
              WebCore::RenderElement::setNeedsPositionedMovementLayout((WebCore::RenderElement *)a1, (const WebCore::RenderStyle *)&v86);
              break;
            case 6u:
              goto LABEL_229;
            case 7u:
              WebCore::RenderElement::setNeedsPositionedMovementLayout((WebCore::RenderElement *)a1, (const WebCore::RenderStyle *)&v86);
LABEL_229:
              WebCore::RenderElement::setNeedsSimplifiedNormalFlowLayout((WebCore::RenderElement *)a1);
              break;
            case 8u:
              WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc((WebCore::RenderObject *)a1);
              break;
            default:
              break;
          }
        }
        if ((v16 & 1) == 0)
        {
          if (v71 == 3)
          {
            v75 = *(unsigned __int8 *)(a1 + 68);
            for (j = *(unsigned int *)(a1 + 64); ; j = *(unsigned int *)(v78 + 47))
            {
              v77 = j | (v75 << 32);
              if (!v77)
                break;
              v78 = *(_QWORD *)(v77 + 8);
              if (!v78)
                break;
              if ((*(_BYTE *)(v78 + 45) & 2) != 0)
              {
LABEL_202:
                if (!WebCore::RenderText::containsOnlyCollapsibleWhitespace((WebCore::RenderText *)v78))
                  goto LABEL_203;
                while (1)
                {
                  v79 = *(unsigned int *)(v78 + 47);
                  if (!(v79 | ((unint64_t)*(unsigned __int8 *)(v78 + 51) << 32)))
                    goto LABEL_188;
                  v78 = *(_QWORD *)((v79 | ((unint64_t)*(unsigned __int8 *)(v78 + 51) << 32)) + 8);
                  if (!v78)
                    goto LABEL_188;
                  if ((*(_BYTE *)(v78 + 45) & 2) != 0)
                    goto LABEL_202;
                }
              }
              v75 = *(unsigned __int8 *)(v78 + 51);
            }
          }
          else if (v71 == 2 || v71 == 4)
          {
LABEL_203:
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                       + 1944)
                                                                           + 24)
                                                               + 8)
                                                   + 40)
                                       + 8)
                           + 3382))
            {
              LOBYTE(v96) = 0;
              v97 = 0;
              v95[0] = 0;
              v95[16] = 0;
              WebCore::RenderObject::issueRepaint(a1, &v96, 0, 0, (uint64_t)v95);
            }
          }
        }
        goto LABEL_188;
      }
LABEL_179:
      if (v71 > 7)
        goto LABEL_183;
      goto LABEL_180;
    }
    __break(0xC471u);
LABEL_250:
    JUMPOUT(0x1942DC974);
  }
LABEL_188:
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v86, v39);
}

uint64_t WebCore::RenderElement::styleWillChange(WebCore::RenderBox *this, void *a2, WebCore::RenderStyle *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const WebCore::Layout::ElementBox *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  WebCore::LayoutIntegration::LineLayout *v18;
  char *v19;
  WebCore::RenderBox *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::IntersectionObserver *v42;
  void *v43;
  WebCore::IntersectionObserver *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::RenderLayerCompositor *v52;
  _BOOL4 v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t **v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int ii;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const WebCore::Node *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  WebCore::IntersectionObserver **v80;
  WebCore::IntersectionObserver *v81;
  uint64_t v82;
  uint64_t jj;
  uint64_t i;
  _QWORD *v85;
  uint64_t *v86;
  void *v87;
  WebCore::IntersectionObserver *v88;
  bmalloc::api *v89;
  void *v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  const WebCore::Node ***v94;
  int v95;
  WTF::StringImpl *v96;
  _DWORD *v97;
  uint64_t v98;
  bmalloc::api *v99;
  void *v100;
  void *v101;
  bmalloc::api *v102;
  void *v103;
  WebCore::RenderBox *v104;
  uint64_t m;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t k;
  uint64_t v110;
  int v111;
  bmalloc::api *v112;
  void *v113;
  int v114;
  WebCore::RenderBox *v115;
  uint64_t n;
  uint64_t v117;
  int v118;
  _BOOL4 v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  int v123;
  float v124;
  uint64_t v125;
  WebCore::LocalFrameView *v126;
  uint64_t j;
  uint64_t v128;
  WebCore::AXObjectCache *v129;
  WebCore::AXObjectCache *v130;
  uint64_t v131;
  WebCore::RenderObject *v132;
  int v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  WTF *v140;
  WebCore::IntersectionObserver *v141;
  bmalloc::api *v142;
  void *v143;
  char v144;
  int v145;
  _QWORD v146[3];

  v6 = *(unsigned __int16 *)((char *)this + 69);
  if ((v6 & 2) == 0)
  {
    v19 = 0;
    goto LABEL_67;
  }
  v7 = (int)a2;
  if (a2 >= 2)
  {
    v8 = *((_QWORD *)this + 7);
    if (v8)
    {
      if ((*(_WORD *)(v8 + 12) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DDE58);
      }
      if ((*((_BYTE *)this + 52) & 7) == 1 && *((_DWORD *)this + 60) == 1)
      {
        v9 = (_QWORD *)*((_QWORD *)this + 29);
        if (v9)
        {
          if (v9[10])
          {
            v10 = (_OWORD *)v9[9];
            if (!v10)
            {
              v10 = (_OWORD *)bmalloc::api::isoAllocate();
              *v10 = 0u;
              v10[1] = 0u;
              v10[2] = 0u;
              v10[3] = 0u;
              v10[4] = 0u;
              v3 = v9[9];
              v9[9] = v10;
              if (v3)
              {
                WebCore::Layout::InlineDamage::~InlineDamage((WebCore::Layout::InlineDamage *)v3, v101);
                bmalloc::api::isoDeallocate(v102, v103);
                v10 = (_OWORD *)v9[9];
              }
            }
            v11 = v9[5] + 16;
            v12 = v9[10] + 32;
            v146[0] = v10;
            v146[1] = v11;
            v146[2] = v12;
            v13 = (const WebCore::Layout::ElementBox *)*((_QWORD *)this + 7);
            if (v13 && (*((_WORD *)v13 + 6) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942DDF1CLL);
            }
            WebCore::Layout::InlineInvalidation::rootStyleWillChange((WebCore::Layout::InlineInvalidation *)v146, v13, a3);
          }
        }
      }
      v14 = *((unsigned __int8 *)this + 46);
      if ((v14 - 32) <= 0xFFFFFFFD)
      {
        v15 = *((_DWORD *)this + 5);
        if ((v15 & 1) != 0)
        {
          if ((*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 8) != 0)
            goto LABEL_33;
          if (v14 == 11)
          {
            v125 = *((_QWORD *)this + 4);
            if (!v125)
              goto LABEL_33;
            v17 = *(void **)(v125 + 8);
          }
          else if ((v15 & 0x1800000) == 0x1000000)
          {
            v16 = *((_QWORD *)this + 4);
            if (!v16)
              goto LABEL_33;
            v17 = *(void **)(v16 + 8);
            if (!v17)
              goto LABEL_33;
            if ((*((_BYTE *)v17 + 45) & 0x20) == 0)
            {
LABEL_22:
              if ((*((_BYTE *)v17 + 52) & 7) == 1)
              {
LABEL_23:
                if (*((_DWORD *)v17 + 60) == 1)
                {
                  v18 = (WebCore::LayoutIntegration::LineLayout *)*((_QWORD *)v17 + 29);
                  if (v18)
                    WebCore::LayoutIntegration::LineLayout::styleWillChange(v18, this, a3);
                }
              }
              goto LABEL_33;
            }
            v17 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v17);
          }
          else
          {
            if ((v15 & 0x800) == 0)
              goto LABEL_33;
            v20 = this;
            if ((*((_BYTE *)this + 45) & 2) != 0)
              v20 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
            v17 = WebCore::RenderObject::containingBlockForPositionType((*((_DWORD *)v20 + 24) >> 19) & 7, (uint64_t)this);
          }
          if (!v17)
            goto LABEL_33;
          goto LABEL_22;
        }
        for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v17 + 4))
        {
          v17 = *(void **)(i + 8);
          if (!v17 || (*((_BYTE *)v17 + 22) & 4) == 0)
            break;
          if ((*((_BYTE *)v17 + 52) & 7) == 1)
            goto LABEL_23;
        }
      }
    }
  }
LABEL_33:
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
    v21 = 1;
  else
    v21 = (*((unsigned __int8 *)this + 120) >> 4) & 3;
  if ((*(_BYTE *)(*((_QWORD *)a3 + 3) + 239) & 4) != 0)
    v22 = 1;
  else
    v22 = (*((unsigned __int8 *)a3 + 40) >> 4) & 3;
  if (v21 != v22
    || (v23 = *(_QWORD *)(*((_QWORD *)this + 11) + 8),
        v24 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 8),
        *(_DWORD *)(v23 + 64) != *(_DWORD *)(v24 + 64))
    || ((*(unsigned __int8 *)(v23 + 68) >> 1) & 1) != (*(_BYTE *)(v24 + 68) & 2) >> 1)
  {
    v98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    *(_DWORD *)(v98 + 24) += 2;
    WebCore::Document::invalidateRenderingDependentRegions((WebCore::Document *)v98);
    if (*(_DWORD *)(v98 + 24) == 2)
    {
      if ((*(_WORD *)(v98 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v98, a2);
    }
    else
    {
      *(_DWORD *)(v98 + 24) -= 2;
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    *(_DWORD *)(v3 + 24) += 2;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v129 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v3);
      if (v129)
      {
        v130 = v129;
        ++*((_DWORD *)v129 + 2);
        v131 = *((_QWORD *)this + 4);
        if (v131 && (v132 = *(WebCore::RenderObject **)(v131 + 8)) != 0)
        {
          ++*((_DWORD *)v132 + 4);
          WebCore::AXObjectCache::childrenChanged(v129, v132, this);
          v133 = *((_DWORD *)v132 + 4);
          if (!v133)
          {
            __break(0xC471u);
            JUMPOUT(0x1942DE35CLL);
          }
          *((_DWORD *)v132 + 4) = v133 - 1;
        }
        else
        {
          WebCore::AXObjectCache::childrenChanged(v129, 0, this);
        }
        v134 = *((_DWORD *)v130 + 2);
        if (!v134)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DE37CLL);
        }
        *((_DWORD *)v130 + 2) = v134 - 1;
      }
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v25 = *((_QWORD *)this + 13);
  v26 = *(_DWORD *)(v25 + 236);
  v27 = (v26 & 0x4000000) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0 && (v26 & 0x18000000) == 0;
  v28 = *(_DWORD *)(*((_QWORD *)a3 + 3) + 236);
  if ((v28 & 0x4000000) != 0 || (*((_BYTE *)a3 + 40) & 0x30) != 0)
  {
    if ((v27 & 1) == 0)
      goto LABEL_47;
    v29 = 0;
  }
  else
  {
    v29 = (v28 & 0x18000000) == 0;
    if (v27 == v29)
      goto LABEL_47;
  }
  v104 = this;
  if ((*((_BYTE *)this + 45) & 0x10) != 0)
  {
LABEL_213:
    if ((*((_BYTE *)v104 + 21) & 0x80) != 0)
    {
      v3 = *((_QWORD *)v104 + 18);
      if (v3)
      {
        ++*(_DWORD *)(v3 + 8);
        if (v29)
        {
          if ((*(_BYTE *)(v25 + 239) & 0x18) != 0 && WebCore::RenderElement::isSkippedContentRoot(this))
          {
            *(_QWORD *)(v3 + 24) |= 0x40000uLL;
            for (j = *(_QWORD *)(v3 + 40); j; j = *(_QWORD *)(j + 40))
            {
              v128 = *(_QWORD *)(j + 24);
              if ((v128 & 0x100000) != 0)
                break;
              *(_QWORD *)(j + 24) = v128 | 0x100000;
            }
          }
          else
          {
            WebCore::RenderLayer::setHasVisibleContent((_QWORD *)v3);
          }
        }
        else
        {
          v107 = *(_QWORD *)(v3 + 24);
          if ((v107 & 0x80000) != 0)
          {
            v108 = *(_QWORD *)(v3 + 32);
            if ((WebCore::RenderBox *)v108 == this
              || (*(_BYTE *)(*(_QWORD *)(v108 + 104) + 239) & 4) != 0
              || (*(_BYTE *)(v108 + 120) & 0x30) != 0)
            {
              *(_QWORD *)(v3 + 24) = v107 | 0x40000;
              for (k = *(_QWORD *)(v3 + 40); k; k = *(_QWORD *)(k + 40))
              {
                v110 = *(_QWORD *)(k + 24);
                if ((v110 & 0x100000) != 0)
                  break;
                *(_QWORD *)(k + 24) = v110 | 0x100000;
              }
            }
          }
        }
        v111 = *(_DWORD *)(v3 + 8);
        if (!v111)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DE084);
        }
        *(_DWORD *)(v3 + 8) = v111 - 1;
        v25 = *((_QWORD *)this + 13);
        v26 = *(_DWORD *)(v25 + 236);
      }
    }
    else
    {
      while (1)
      {
        v106 = *((_QWORD *)v104 + 4);
        if (!v106)
          break;
        v104 = *(WebCore::RenderBox **)(v106 + 8);
        if (!v104)
          break;
        if ((*((_BYTE *)v104 + 45) & 0x10) != 0)
          goto LABEL_213;
      }
    }
  }
  else
  {
    for (m = *((_QWORD *)this + 4); m; m = *((_QWORD *)v104 + 4))
    {
      v104 = *(WebCore::RenderBox **)(m + 8);
      if (!v104)
        break;
      if ((*((_BYTE *)v104 + 45) & 0x10) != 0)
        goto LABEL_213;
    }
  }
LABEL_47:
  if ((v26 & 0x1000000) != 0)
    v30 = 0;
  else
    v30 = (*((_DWORD *)this + 31) >> 6) & 0xF;
  v31 = *((_QWORD *)a3 + 3);
  v32 = *(_DWORD *)(v31 + 236);
  v33 = (*((_DWORD *)a3 + 11) >> 6) & 0xF;
  if ((v32 & 0x1000000) != 0)
    v33 = 0;
  if (v30 == v33
    && *(unsigned __int8 *)(v25 + 240) == *(unsigned __int8 *)(v31 + 240)
    && *(unsigned __int8 *)(v25 + 241) == *(unsigned __int8 *)(v31 + 241))
  {
    if ((v26 & 0x1000000) != 0)
    {
      if ((v32 & 0x1000000) != 0 || (*(_BYTE *)(v31 + 228) & 0x30) == 0)
        goto LABEL_59;
    }
    else
    {
      v34 = *(_DWORD *)(v25 + 228) & 0x30;
      if ((v32 & 0x1000000) != 0)
      {
        if (!v34)
          goto LABEL_59;
      }
      else if ((v34 == 0) != ((*(_BYTE *)(v31 + 228) & 0x30) != 0))
      {
        goto LABEL_59;
      }
    }
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 24)
                    + 8);
    if (!*(_BYTE *)(v35 + 1100) && (*(_BYTE *)(*(_QWORD *)(v35 + 112) + 612) & 8) == 0)
      goto LABEL_59;
  }
  v115 = this;
  if ((*((_BYTE *)this + 45) & 0x10) != 0)
  {
LABEL_252:
    if ((*((_BYTE *)v115 + 21) & 0x80) != 0)
    {
      v3 = *((_QWORD *)v115 + 18);
      if (v3)
      {
        ++*(_DWORD *)(v3 + 8);
        WebCore::RenderLayer::invalidateEventRegion(v3, 2);
        v118 = *(_DWORD *)(v3 + 8);
        if (!v118)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DE238);
        }
        *(_DWORD *)(v3 + 8) = v118 - 1;
      }
    }
    else
    {
      while (1)
      {
        v117 = *((_QWORD *)v115 + 4);
        if (!v117)
          break;
        v115 = *(WebCore::RenderBox **)(v117 + 8);
        if (!v115)
          break;
        if ((*((_BYTE *)v115 + 45) & 0x10) != 0)
          goto LABEL_252;
      }
    }
  }
  else
  {
    for (n = *((_QWORD *)this + 4); n; n = *((_QWORD *)v115 + 4))
    {
      v115 = *(WebCore::RenderBox **)(n + 8);
      if (!v115)
        break;
      if ((*((_BYTE *)v115 + 45) & 0x10) != 0)
        goto LABEL_252;
    }
  }
LABEL_59:
  v36 = *((_DWORD *)this + 5);
  if ((v36 & 0x800) != 0 && ((*((_DWORD *)a3 + 4) ^ *((_DWORD *)this + 24)) & 0xE000000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DE1A8);
    }
LABEL_278:
    WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists(this);
    goto LABEL_62;
  }
  if ((v36 & 0x1800000) == 0x1000000 && ((*((_DWORD *)a3 + 4) ^ *((_DWORD *)this + 24)) & 0x380000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DE308);
    }
    goto LABEL_278;
  }
LABEL_62:
  v19 = (char *)this + 80;
  if (v7 == 5 || v7 == 8)
    v37 = *((_DWORD *)this + 5) & 0xFE7FF7FF;
  else
    v37 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v37 & 0x9FFCEFFF;
  if ((v37 & 0x4000) != 0)
    *(_BYTE *)WebCore::RenderObject::ensureRareData(this, a2) = 0;
LABEL_67:
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v38 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v38)
    {
      if ((*(_WORD *)(v38 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DDDF0);
      }
      if ((v6 & 2) != 0)
      {
        v45 = *((_QWORD *)v19 + 1);
        v57 = *(_DWORD *)(*(_QWORD *)(v45 + 40) + 636);
        if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 636) ^ v57) & 0xC0000) == 0)
          goto LABEL_83;
        if ((v57 & 0xC0000) == 0x40000)
        {
          *(_DWORD *)(v38 + 24) += 2;
          v3 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 8);
          *(_DWORD *)(v3 + 24) += 2;
          v58 = *(_QWORD **)(v3 + 1584);
          if (!v58)
          {
            v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            v85[1] = 0;
            v85[2] = 0;
            *v85 = 0;
            v86 = *(uint64_t **)(v3 + 1584);
            *(_QWORD *)(v3 + 1584) = v85;
            if (v86)
            {
              WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v86 + 1, a2);
              v88 = (WebCore::IntersectionObserver *)*v86;
              *v86 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 1)
                {
                  WebCore::IntersectionObserver::~IntersectionObserver(v88);
                  bmalloc::api::isoDeallocate(v112, v113);
                }
                else
                {
                  --*(_DWORD *)v88;
                }
              }
              WTF::fastFree((WTF *)v86, v87);
              v58 = *(_QWORD **)(v3 + 1584);
            }
            else
            {
              v58 = v85;
            }
          }
          v59 = (uint64_t **)*v58;
          if (*v58)
          {
            ++*(_DWORD *)v59;
            WebCore::IntersectionObserver::unobserve(v59, (WebCore::Element *)v38);
            v60 = v58 + 1;
            v61 = *((_DWORD *)v58 + 4);
            v62 = *((_DWORD *)v58 + 5);
            *((_DWORD *)v58 + 4) = v61 + 1;
            if (v61 > v62)
              WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)(v58 + 1), a2);
            v63 = *(_QWORD *)(v38 + 16);
            v64 = v63 & 0xFFFFFFFFFFFFLL;
            if ((v63 & 0xFFFFFFFFFFFFLL) != 0)
            {
              if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFLL) + 8))
              {
                v65 = *v60;
                if (*v60)
                {
                  v66 = *(_DWORD *)(v65 - 8);
                  v67 = (v64 + ~(v63 << 32)) ^ ((unint64_t)(v64 + ~(v63 << 32)) >> 22);
                  v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
                  v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
                  v70 = v66 & ((v69 >> 31) ^ v69);
                  for (ii = 1; ; ++ii)
                  {
                    v72 = v70;
                    v73 = *(_QWORD *)(v65 + 16 * v70);
                    if (v73 != -1)
                    {
                      if (!v73)
                        goto LABEL_121;
                      if (v73 == v64)
                        break;
                    }
                    v70 = (v72 + ii) & v66;
                  }
                  if ((_DWORD)v72 != *(_DWORD *)(v65 - 4))
                    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove(v58 + 1, (_QWORD *)(v65 + 16 * v72));
                }
              }
            }
LABEL_121:
            if (*(_DWORD *)v59 == 1)
            {
              WebCore::IntersectionObserver::~IntersectionObserver((WebCore::IntersectionObserver *)v59);
              bmalloc::api::isoDeallocate(v99, v100);
            }
            else
            {
              --*(_DWORD *)v59;
            }
          }
          v74 = *(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL;
          if (!v74)
          {
            WebCore::Node::materializeRareData((WebCore::Node *)v38);
            v74 = *(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL;
          }
          if (!*(_BYTE *)(v74 + 33))
            *(_BYTE *)(v74 + 33) = 1;
          *(_BYTE *)(v74 + 32) = 0;
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          if (*(_DWORD *)(v38 + 24) == 2)
          {
            if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v38, a2);
          }
          else
          {
            *(_DWORD *)(v38 + 24) -= 2;
          }
        }
        v75 = *(const WebCore::Node **)(*((_QWORD *)this + 3) + 8);
        if ((*((_WORD *)v75 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DDF3CLL);
        }
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 1) + 40) + 636) & 0xC0000) == 0x80000
          && (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 636) & 0xC0000) != 0x80000)
        {
          {
            if (WebCore::WebAnimation::instances(void)::instances
              && *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12))
            {
              v76 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
              if ((_DWORD)v76)
              {
                v77 = 8 * v76;
                v78 = (_QWORD *)WebCore::WebAnimation::instances(void)::instances;
                while ((unint64_t)(*v78 + 1) <= 1)
                {
                  ++v78;
                  v77 -= 8;
                  if (!v77)
                    goto LABEL_71;
                }
              }
              else
              {
                v78 = (_QWORD *)WebCore::WebAnimation::instances(void)::instances;
              }
              v91 = WebCore::WebAnimation::instances(void)::instances + 8 * v76;
              if ((_QWORD *)v91 != v78)
              {
                v92 = (_DWORD *)*v78;
LABEL_163:
                if (v92)
                  ++v92[6];
                if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v92 + 104))(v92) & 1) != 0)
                {
                  v93 = *((_QWORD *)v92 + 23);
                  if (v93)
                  {
                    v94 = *(const WebCore::Node ****)(v93 + 8);
                    if (v94)
                    {
                      v145 = v6;
                      v95 = *((unsigned __int8 *)v92 + 208);
                      if (*((_BYTE *)v92 + 208))
                      {
                        v3 = *((_QWORD *)v92 + 25);
                        if (v3)
                          *(_DWORD *)v3 += 2;
                      }
                      if (WebCore::Node::isDescendantOrShadowDescendantOf(v94, v75))
                      {
                        v97 = (_DWORD *)*((_QWORD *)v92 + 8);
                        if (v97)
                        {
                          ++v97[2];
                          (*(void (**)(_DWORD *, _DWORD *))(*(_QWORD *)v97 + 40))(v97, v92);
                          if (v97[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v97 + 8))(v97);
                          else
                            --v97[2];
                        }
                      }
                      if (v95 && v3)
                      {
                        v6 = v145;
                        if (*(_DWORD *)v3 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v3, v96);
                        else
                          *(_DWORD *)v3 -= 2;
                        v3 = 0;
                      }
                      else
                      {
                        v6 = v145;
                      }
                    }
                  }
                }
                if (v92[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 72))(v92);
                else
                  --v92[6];
                while (++v78 != (_QWORD *)v91)
                {
                  v92 = (_DWORD *)*v78;
                  if ((unint64_t)(*v78 + 1) > 1)
                  {
                    if (v78 != (_QWORD *)v91)
                      goto LABEL_163;
                    break;
                  }
                }
              }
            }
          }
          else
          {
            WebCore::WebAnimation::instances(void)::instances = 0;
          }
        }
      }
LABEL_71:
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 636) & 0xC0000) == 0x40000)
      {
        v39 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*(_WORD *)(v39 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DDEFCLL);
        }
        *(_DWORD *)(v39 + 24) += 2;
        v40 = *(_QWORD *)(*(_QWORD *)(v39 + 40) + 8);
        *(_DWORD *)(v40 + 24) += 2;
        v41 = *(_QWORD *)(v40 + 1584);
        if (!v41)
        {
          v41 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)(v41 + 8) = 0;
          *(_QWORD *)(v41 + 16) = 0;
          *(_QWORD *)v41 = 0;
          v80 = *(WebCore::IntersectionObserver ***)(v40 + 1584);
          *(_QWORD *)(v40 + 1584) = v41;
          if (v80)
          {
            v81 = v80[1];
            if (v81)
            {
              v144 = v6;
              v82 = *((unsigned int *)v81 - 1);
              if ((_DWORD)v82)
              {
                for (jj = 0; jj != v82; ++jj)
                {
                  v135 = (uint64_t *)((char *)v81 + 16 * jj);
                  v136 = *v135;
                  if (*v135 != -1)
                  {
                    *v135 = 0;
                    if (v136)
                    {
                      do
                      {
                        v137 = __ldaxr((unsigned int *)v136);
                        v138 = v137 - 1;
                      }
                      while (__stlxr(v138, (unsigned int *)v136));
                      if (!v138)
                      {
                        atomic_store(1u, (unsigned int *)v136);
                        v139 = *(unsigned int *)(v136 + 28);
                        if ((_DWORD)v139)
                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v136 + 16), (WTF::StringImpl *)(*(_QWORD *)(v136 + 16) + 32 * v139));
                        v140 = *(WTF **)(v136 + 16);
                        if (v140)
                        {
                          *(_QWORD *)(v136 + 16) = 0;
                          *(_DWORD *)(v136 + 24) = 0;
                          WTF::fastFree(v140, v79);
                        }
                        WTF::fastFree((WTF *)v136, v79);
                      }
                    }
                  }
                }
              }
              WTF::fastFree((WebCore::IntersectionObserver *)((char *)v81 - 16), v79);
              LOBYTE(v6) = v144;
            }
            v141 = *v80;
            *v80 = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 1)
              {
                WebCore::IntersectionObserver::~IntersectionObserver(v141);
                bmalloc::api::isoDeallocate(v142, v143);
              }
              else
              {
                --*(_DWORD *)v141;
              }
            }
            WTF::fastFree((WTF *)v80, v79);
            v41 = *(_QWORD *)(v40 + 1584);
          }
        }
        v42 = WebCore::ContentVisibilityDocumentState::intersectionObserver((WebCore::IntersectionObserver **)v41, (WebCore::Document *)v40);
        if (v42)
        {
          v44 = v42;
          ++*(_DWORD *)v42;
          WebCore::IntersectionObserver::observe((uint64_t)v42, (WebCore::Element *)v39);
          if (*(_DWORD *)v44 == 1)
          {
            WebCore::IntersectionObserver::~IntersectionObserver(v44);
            bmalloc::api::isoDeallocate(v89, v90);
          }
          else
          {
            --*(_DWORD *)v44;
          }
        }
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v40, v43);
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
        if (*(_DWORD *)(v39 + 24) == 2)
        {
          if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v39, v43);
        }
        else
        {
          *(_DWORD *)(v39 + 24) -= 2;
        }
      }
    }
  }
  if ((v6 & 2) == 0)
    goto LABEL_84;
  v45 = *((_QWORD *)v19 + 1);
LABEL_83:
  v46 = *(_QWORD *)(v45 + 16);
  if ((*(_BYTE *)(v46 + 52) & 0xE) != 0)
  {
    v124 = 0.0;
    if ((*(_BYTE *)(v46 + 52) & 0x1F) != 0x10 && (*(_BYTE *)(v46 + 52) & 0xF) != 0)
    {
      v124 = *(float *)(v46 + 48);
      if ((*(_BYTE *)(v46 + 52) & 0x10) != 0 && v124 < 3.0)
        v124 = 3.0;
    }
    v119 = v124 > 0.0;
    v47 = *((_QWORD *)a3 + 1);
    if ((*(_BYTE *)(*(_QWORD *)(v47 + 16) + 52) & 0xE) == 0)
    {
      if (v124 <= 0.0)
        goto LABEL_85;
      goto LABEL_269;
    }
LABEL_261:
    v120 = *(_QWORD *)(v47 + 16);
    v121 = 0.0;
    if ((*(_BYTE *)(v120 + 52) & 0x1F) != 0x10 && (*(_BYTE *)(v120 + 52) & 0xF) != 0)
    {
      v121 = *(float *)(v120 + 48);
      if ((*(_BYTE *)(v120 + 52) & 0x10) != 0 && v121 < 3.0)
        v121 = 3.0;
    }
    if (v119 == v121 > 0.0)
      goto LABEL_85;
    if (v121 > 0.0)
    {
      v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
      v123 = *(_DWORD *)(v122 + 16);
      ++*(_DWORD *)(v122 + 436);
      *(_DWORD *)(v122 + 16) = v123 + 1;
      if (v123 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DDFF8);
      }
LABEL_270:
      *(_DWORD *)(v122 + 16) = v123;
      goto LABEL_85;
    }
LABEL_269:
    v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    v123 = *(_DWORD *)(v122 + 16);
    --*(_DWORD *)(v122 + 436);
    *(_DWORD *)(v122 + 16) = v123 + 1;
    if (v123 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1942DE27CLL);
    }
    goto LABEL_270;
  }
LABEL_84:
  v47 = *((_QWORD *)a3 + 1);
  if ((*(_BYTE *)(*(_QWORD *)(v47 + 16) + 52) & 0xE) != 0)
  {
    v119 = 0;
    goto LABEL_261;
  }
LABEL_85:
  v48 = *(_QWORD *)(v47 + 16);
  do
  {
    v48 = *(_QWORD *)(v48 + 8);
    if (!v48)
      goto LABEL_97;
  }
  while (!*(_QWORD *)(v48 + 16) || (*(_WORD *)(v48 + 58) & 3) != 2);
  v49 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v50 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 528) + 8) + 24) + 8) + 112)
                  + 680) & 8) != 0)
  {
LABEL_97:
    v53 = 0;
    goto LABEL_98;
  }
  if (*(_QWORD *)(v50 + 1272) != v49)
  {
    if (!WebCore::RenderObject::isBody(this))
      goto LABEL_308;
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1272)
                    + 64);
    if ((v51 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v51 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942DE328);
      }
      if (WebCore::RenderElement::hasBackground((WebCore::RenderElement *)(v51 & 0xFFFFFFFFFFFFLL)))
        goto LABEL_308;
    }
  }
  if (WebCore::RenderStyle::hasEntirelyFixedBackground(a3))
  {
    v52 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944));
    v53 = !WebCore::RenderLayerCompositor::supportsFixedRootBackgroundCompositing(v52);
  }
  else
  {
LABEL_308:
    v53 = 1;
  }
LABEL_98:
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 568);
  if (result
    && (result = WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::RenderElement>((uint64_t *)result, (uint64_t)this), (_DWORD)result))
  {
    if (v53)
      goto LABEL_100;
    v126 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248);
    ++*((_DWORD *)v126 + 2);
    result = WebCore::LocalFrameView::removeSlowRepaintObject(v126, this);
  }
  else
  {
    if (!v53)
      goto LABEL_100;
    v126 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248);
    ++*((_DWORD *)v126 + 2);
    result = WebCore::LocalFrameView::addSlowRepaintObject(v126, this);
  }
  if (*((_DWORD *)v126 + 2) == 1)
    result = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v126 + 8))(v126);
  else
    --*((_DWORD *)v126 + 2);
LABEL_100:
  v55 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v56 = *(_QWORD *)(*(_QWORD *)(v55 + 40) + 8);
  if (*(_QWORD *)(v56 + 1272) == v55
    || (*((_BYTE *)this + 45) & 1) == 0
    && (*(_WORD *)(v55 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v55 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    result = *(_QWORD *)(*(_QWORD *)(v56 + 1944) + 248);
    v114 = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = v114 + 1;
    if (v114)
      *(_DWORD *)(result + 8) = v114;
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::Style::loadPendingResources(WebCore::Style *this, WebCore::RenderStyle *a2, WebCore::Document *a3, const WebCore::Element *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *result;
  uint64_t v23;
  WebCore::Style *v24;
  uint64_t v25;
  WebCore::Style **v26;
  uint64_t v27;
  WebCore::CachedResourceLoader *v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  _DWORD *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  int v40;
  WTF::StringImpl *v41;
  WebCore::CachedResourceLoader *v42;
  int v43;
  int *v44;
  int *v45;
  int v46;
  _DWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  int v55;
  WTF::StringImpl *v56;
  WebCore::CachedResourceLoader *v57;
  int v58;
  int *v59;
  int *v60;
  int v61;
  _DWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  int v70;
  WTF::StringImpl *v71;
  WebCore::CachedResourceLoader *v72;
  int v73;
  int *v74;
  int *v75;
  int v76;
  _DWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  int v85;
  WTF::StringImpl *v86;
  WebCore::CachedResourceLoader *v87;
  int v88;
  int *v89;
  int *v90;
  int v91;
  _DWORD *v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  int v99;
  unsigned int v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  WebCore::Style **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  _DWORD v136[2];
  _DWORD *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  char v145;
  __int16 v146;
  _DWORD *v147;
  _DWORD *v148;
  char v149;
  __int128 v150;
  _DWORD *v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 1);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8);
  if (v8)
  {
    do
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v28 = (WebCore::CachedResourceLoader *)(*(uint64_t (**)(_QWORD, WebCore::RenderStyle *, WebCore::Document *, const WebCore::Element *))(*(_QWORD *)v9 + 40))(*(_QWORD *)(v8 + 16), a2, a3, a4);
        if ((_DWORD)v28)
        {
          v134 = v8;
          if (a3)
          {
            v28 = (WebCore::CachedResourceLoader *)WebCore::Node::isInUserAgentShadowTree(a3);
            v29 = (int)v28;
          }
          else
          {
            v29 = 0;
          }
          v30 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v28);
          v31 = v30;
          v32 = *(int *)((char *)v30 + 3);
          v136[0] = *v30;
          *(_DWORD *)((char *)v136 + 3) = v32;
          v33 = (_DWORD *)*((_QWORD *)v30 + 1);
          if (v33)
            *v33 += 2;
          v137 = v33;
          v34 = *((_OWORD *)v30 + 2);
          v138 = *((_OWORD *)v30 + 1);
          v139 = v34;
          v140 = *((_QWORD *)v30 + 6);
          v35 = v30[17];
          v141 = 0;
          v142 = 0;
          v143 = v35;
          if ((_DWORD)v35)
          {
            if (v35 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1942DEDD4);
            }
            v105 = WTF::fastMalloc((WTF *)(16 * v35));
            v142 = v35;
            v141 = v105;
            v106 = v31[17];
            if ((_DWORD)v106)
            {
              v107 = *((_QWORD *)v31 + 7);
              v108 = v107 + 16 * v106;
              do
              {
                v109 = *(_DWORD **)v107;
                if (*(_QWORD *)v107)
                  *v109 += 2;
                *(_QWORD *)v105 = v109;
                *(_BYTE *)(v105 + 8) = *(_BYTE *)(v107 + 8);
                v107 += 16;
                v105 += 16;
              }
              while (v107 != v108);
            }
          }
          v36 = v31[18];
          v145 = *((_BYTE *)v31 + 76);
          v144 = v36;
          LOBYTE(v146) = 0;
          v149 = 0;
          if (*((_BYTE *)v31 + 104))
          {
            v146 = *((_WORD *)v31 + 40);
            v37 = (_DWORD *)*((_QWORD *)v31 + 11);
            if (v37)
              *v37 += 2;
            v147 = v37;
            v38 = (_DWORD *)*((_QWORD *)v31 + 12);
            if (v38)
              *v38 += 2;
            v148 = v38;
            v149 = 1;
          }
          v150 = *((_OWORD *)v31 + 7);
          v39 = (_DWORD *)*((_QWORD *)v31 + 16);
          if (v39)
            *v39 += 2;
          v151 = v39;
          if (v29)
            v40 = 0;
          else
            v40 = 256;
          *(_DWORD *)((char *)&v150 + 2) = *(_DWORD *)((_BYTE *)&v150 + 2) & 0xFFFFFEFF | v40;
          if (!*((_QWORD *)a2 + 90))
            WebCore::Document::ensureCachedResourceLoader(a2, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
          WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v136, v41);
          v8 = v134;
        }
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8);
    v7 = *((_QWORD *)this + 1);
  }
  for (i = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 80); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 24) == 1)
      WebCore::Style::loadPendingImage(a2, *(_QWORD *)(i + 32), a3, 1);
  }
  v11 = *((_QWORD *)this + 3);
  v12 = *(_QWORD *)(v11 + 168);
  if (v12 && *(_DWORD *)(v12 + 20))
  {
    v102 = 0;
    v103 = 0;
    do
    {
      WebCore::Style::loadPendingImage(a2, *(_QWORD *)(*(_QWORD *)(v12 + 8) + v102), a3, 1);
      ++v103;
      v102 += 16;
    }
    while (v103 < *(unsigned int *)(v12 + 20));
    v11 = *((_QWORD *)this + 3);
  }
  v13 = *(_QWORD *)(v11 + 8);
  if (v13)
  {
    v42 = (WebCore::CachedResourceLoader *)(*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, WebCore::Document *, const WebCore::Element *))(*(_QWORD *)v13 + 40))(v13, a2, a3, a4);
    if ((_DWORD)v42)
    {
      if (a3)
      {
        v42 = (WebCore::CachedResourceLoader *)WebCore::Node::isInUserAgentShadowTree(a3);
        v43 = (int)v42;
      }
      else
      {
        v43 = 0;
      }
      v44 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v42);
      v45 = v44;
      v46 = *(int *)((char *)v44 + 3);
      v136[0] = *v44;
      *(_DWORD *)((char *)v136 + 3) = v46;
      v47 = (_DWORD *)*((_QWORD *)v44 + 1);
      if (v47)
        *v47 += 2;
      v137 = v47;
      v48 = *((_OWORD *)v44 + 2);
      v138 = *((_OWORD *)v44 + 1);
      v139 = v48;
      v49 = *((_QWORD *)v44 + 6);
      v50 = v44[17];
      v141 = 0;
      v142 = 0;
      v140 = v49;
      v143 = v50;
      if ((_DWORD)v50)
      {
        if (v50 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DEFA8);
        }
        v110 = WTF::fastMalloc((WTF *)(16 * v50));
        v142 = v50;
        v141 = v110;
        v111 = v45[17];
        if ((_DWORD)v111)
        {
          v112 = *((_QWORD *)v45 + 7);
          v113 = v112 + 16 * v111;
          do
          {
            v114 = *(_DWORD **)v112;
            if (*(_QWORD *)v112)
              *v114 += 2;
            *(_QWORD *)v110 = v114;
            *(_BYTE *)(v110 + 8) = *(_BYTE *)(v112 + 8);
            v112 += 16;
            v110 += 16;
          }
          while (v112 != v113);
        }
      }
      v51 = v45[18];
      v145 = *((_BYTE *)v45 + 76);
      v144 = v51;
      LOBYTE(v146) = 0;
      v149 = 0;
      if (*((_BYTE *)v45 + 104))
      {
        v146 = *((_WORD *)v45 + 40);
        v52 = (_DWORD *)*((_QWORD *)v45 + 11);
        if (v52)
          *v52 += 2;
        v147 = v52;
        v53 = (_DWORD *)*((_QWORD *)v45 + 12);
        if (v53)
          *v53 += 2;
        v148 = v53;
        v149 = 1;
      }
      v150 = *((_OWORD *)v45 + 7);
      v54 = (_DWORD *)*((_QWORD *)v45 + 16);
      if (v54)
        *v54 += 2;
      v151 = v54;
      if (v43)
        v55 = 0;
      else
        v55 = 256;
      *(_DWORD *)((char *)&v150 + 2) = *(_DWORD *)((_BYTE *)&v150 + 2) & 0xFFFFFEFF | v55;
      if (!*((_QWORD *)a2 + 90))
        WebCore::Document::ensureCachedResourceLoader(a2, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v136, v56);
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 200) + 8);
  if (v14)
  {
    v57 = (WebCore::CachedResourceLoader *)(*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, WebCore::Document *, const WebCore::Element *))(*(_QWORD *)v14 + 40))(v14, a2, a3, a4);
    if ((_DWORD)v57)
    {
      if (a3)
      {
        v57 = (WebCore::CachedResourceLoader *)WebCore::Node::isInUserAgentShadowTree(a3);
        v58 = (int)v57;
      }
      else
      {
        v58 = 0;
      }
      v59 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v57);
      v60 = v59;
      v61 = *(int *)((char *)v59 + 3);
      v136[0] = *v59;
      *(_DWORD *)((char *)v136 + 3) = v61;
      v62 = (_DWORD *)*((_QWORD *)v59 + 1);
      if (v62)
        *v62 += 2;
      v137 = v62;
      v63 = *((_OWORD *)v59 + 2);
      v138 = *((_OWORD *)v59 + 1);
      v139 = v63;
      v64 = *((_QWORD *)v59 + 6);
      v65 = v59[17];
      v141 = 0;
      v142 = 0;
      v140 = v64;
      v143 = v65;
      if ((_DWORD)v65)
      {
        if (v65 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DEFB0);
        }
        v115 = WTF::fastMalloc((WTF *)(16 * v65));
        v142 = v65;
        v141 = v115;
        v116 = v60[17];
        if ((_DWORD)v116)
        {
          v117 = *((_QWORD *)v60 + 7);
          v118 = v117 + 16 * v116;
          do
          {
            v119 = *(_DWORD **)v117;
            if (*(_QWORD *)v117)
              *v119 += 2;
            *(_QWORD *)v115 = v119;
            *(_BYTE *)(v115 + 8) = *(_BYTE *)(v117 + 8);
            v117 += 16;
            v115 += 16;
          }
          while (v117 != v118);
        }
      }
      v66 = v60[18];
      v145 = *((_BYTE *)v60 + 76);
      v144 = v66;
      LOBYTE(v146) = 0;
      v149 = 0;
      if (*((_BYTE *)v60 + 104))
      {
        v146 = *((_WORD *)v60 + 40);
        v67 = (_DWORD *)*((_QWORD *)v60 + 11);
        if (v67)
          *v67 += 2;
        v147 = v67;
        v68 = (_DWORD *)*((_QWORD *)v60 + 12);
        if (v68)
          *v68 += 2;
        v148 = v68;
        v149 = 1;
      }
      v150 = *((_OWORD *)v60 + 7);
      v69 = (_DWORD *)*((_QWORD *)v60 + 16);
      if (v69)
        *v69 += 2;
      v151 = v69;
      if (v58)
        v70 = 0;
      else
        v70 = 256;
      *(_DWORD *)((char *)&v150 + 2) = *(_DWORD *)((_BYTE *)&v150 + 2) & 0xFFFFFEFF | v70;
      if (!*((_QWORD *)a2 + 90))
        WebCore::Document::ensureCachedResourceLoader(a2, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v136, v71);
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 216) + 8);
  if (v15)
  {
    v72 = (WebCore::CachedResourceLoader *)(*(uint64_t (**)(uint64_t, WebCore::RenderStyle *, WebCore::Document *, const WebCore::Element *))(*(_QWORD *)v15 + 40))(v15, a2, a3, a4);
    if ((_DWORD)v72)
    {
      if (a3)
      {
        v72 = (WebCore::CachedResourceLoader *)WebCore::Node::isInUserAgentShadowTree(a3);
        v73 = (int)v72;
      }
      else
      {
        v73 = 0;
      }
      v74 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v72);
      v75 = v74;
      v76 = *(int *)((char *)v74 + 3);
      v136[0] = *v74;
      *(_DWORD *)((char *)v136 + 3) = v76;
      v77 = (_DWORD *)*((_QWORD *)v74 + 1);
      if (v77)
        *v77 += 2;
      v137 = v77;
      v78 = *((_OWORD *)v74 + 2);
      v138 = *((_OWORD *)v74 + 1);
      v139 = v78;
      v79 = *((_QWORD *)v74 + 6);
      v80 = v74[17];
      v141 = 0;
      v142 = 0;
      v140 = v79;
      v143 = v80;
      if ((_DWORD)v80)
      {
        if (v80 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1942DEFB8);
        }
        v120 = WTF::fastMalloc((WTF *)(16 * v80));
        v142 = v80;
        v141 = v120;
        v121 = v75[17];
        if ((_DWORD)v121)
        {
          v122 = *((_QWORD *)v75 + 7);
          v123 = v122 + 16 * v121;
          do
          {
            v124 = *(_DWORD **)v122;
            if (*(_QWORD *)v122)
              *v124 += 2;
            *(_QWORD *)v120 = v124;
            *(_BYTE *)(v120 + 8) = *(_BYTE *)(v122 + 8);
            v122 += 16;
            v120 += 16;
          }
          while (v122 != v123);
        }
      }
      v81 = v75[18];
      v145 = *((_BYTE *)v75 + 76);
      v144 = v81;
      LOBYTE(v146) = 0;
      v149 = 0;
      if (*((_BYTE *)v75 + 104))
      {
        v146 = *((_WORD *)v75 + 40);
        v82 = (_DWORD *)*((_QWORD *)v75 + 11);
        if (v82)
          *v82 += 2;
        v147 = v82;
        v83 = (_DWORD *)*((_QWORD *)v75 + 12);
        if (v83)
          *v83 += 2;
        v148 = v83;
        v149 = 1;
      }
      v150 = *((_OWORD *)v75 + 7);
      v84 = (_DWORD *)*((_QWORD *)v75 + 16);
      if (v84)
        *v84 += 2;
      v151 = v84;
      if (v73)
        v85 = 0;
      else
        v85 = 256;
      *(_DWORD *)((char *)&v150 + 2) = *(_DWORD *)((_BYTE *)&v150 + 2) & 0xFFFFFEFF | v85;
      if (!*((_QWORD *)a2 + 90))
        WebCore::Document::ensureCachedResourceLoader(a2, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
      WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v136, v86);
    }
  }
  v16 = *((_QWORD *)this + 1);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 208);
  if (v17)
  {
    WebCore::Style::loadPendingImage(a2, *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8), a3, 1);
    v16 = *((_QWORD *)this + 1);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 48);
  if (v18)
  {
    v19 = &v141;
    do
    {
      v20 = *(_QWORD *)(v18 + 16);
      if (v20)
      {
        v87 = (WebCore::CachedResourceLoader *)(*(uint64_t (**)(_QWORD, WebCore::RenderStyle *, WebCore::Document *, const WebCore::Element *))(*(_QWORD *)v20 + 40))(*(_QWORD *)(v18 + 16), a2, a3, a4);
        if ((_DWORD)v87)
        {
          v133 = v18;
          v135 = v19;
          if (a3)
          {
            v87 = (WebCore::CachedResourceLoader *)WebCore::Node::isInUserAgentShadowTree(a3);
            v88 = (int)v87;
          }
          else
          {
            v88 = 0;
          }
          v89 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v87);
          v90 = v89;
          v91 = *(int *)((char *)v89 + 3);
          v136[0] = *v89;
          *(_DWORD *)((char *)v136 + 3) = v91;
          v92 = (_DWORD *)*((_QWORD *)v89 + 1);
          if (v92)
            *v92 += 2;
          v137 = v92;
          v93 = *((_OWORD *)v89 + 2);
          v138 = *((_OWORD *)v89 + 1);
          v139 = v93;
          v140 = *((_QWORD *)v89 + 6);
          v94 = v89[17];
          *v135 = 0;
          v135[1] = 0;
          v143 = v94;
          if ((_DWORD)v94)
          {
            if (v94 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1942DEF4CLL);
            }
            v125 = WTF::fastMalloc((WTF *)(16 * v94));
            v142 = v94;
            v141 = v125;
            v126 = v90[17];
            if ((_DWORD)v126)
            {
              v127 = *((_QWORD *)v90 + 7);
              v128 = v127 + 16 * v126;
              do
              {
                v129 = *(_DWORD **)v127;
                if (*(_QWORD *)v127)
                  *v129 += 2;
                *(_QWORD *)v125 = v129;
                *(_BYTE *)(v125 + 8) = *(_BYTE *)(v127 + 8);
                v127 += 16;
                v125 += 16;
              }
              while (v127 != v128);
            }
          }
          v95 = v90[18];
          v145 = *((_BYTE *)v90 + 76);
          v144 = v95;
          LOBYTE(v146) = 0;
          v149 = 0;
          if (*((_BYTE *)v90 + 104))
          {
            v146 = *((_WORD *)v90 + 40);
            v96 = (_DWORD *)*((_QWORD *)v90 + 11);
            if (v96)
              *v96 += 2;
            v147 = v96;
            v97 = (_DWORD *)*((_QWORD *)v90 + 12);
            if (v97)
              *v97 += 2;
            v148 = v97;
            v149 = 1;
          }
          v150 = *((_OWORD *)v90 + 7);
          v98 = (_DWORD *)*((_QWORD *)v90 + 16);
          if (v98)
            *v98 += 2;
          v151 = v98;
          if (v88)
            v99 = 0;
          else
            v99 = 256;
          v100 = *(_DWORD *)((_BYTE *)&v150 + 2) & 0xFFFFFEFF | v99;
          *(_DWORD *)((char *)&v150 + 2) = v100;
          if ((v88 & 1) == 0 && (*(_QWORD *)(*((_QWORD *)a2 + 85) + 696) & 0x8000000000000000) != 0)
          {
            *(_WORD *)((char *)v136 + 1) = 259;
            *(_DWORD *)((char *)&v150 + 2) = v100 & 0xFFFFF7FF;
          }
          if (!*((_QWORD *)a2 + 90))
            WebCore::Document::ensureCachedResourceLoader(a2, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
          WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v136, v101);
          v18 = v133;
          v19 = v135;
        }
      }
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18);
    v16 = *((_QWORD *)this + 1);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 240);
  if (v21)
    WebCore::Style::loadPendingImage(a2, *(_QWORD *)(v21 + 16), a3, 2);
  result = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    *(_DWORD *)result += 2;
    v23 = *((_QWORD *)this + 6);
    if (v23 && (v25 = *(unsigned int *)(v23 + 12), (_DWORD)v25))
    {
      v26 = *(WebCore::Style ***)v23;
      v27 = 8 * v25;
      do
      {
        v24 = *v26;
        if ((*((_QWORD *)*v26 + 2) & 0xF80000000000) == 0x80000000000
          && *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v24 + 1) + 40) + 592) == result)
        {
          break;
        }
        v24 = 0;
        ++v26;
        v27 -= 8;
      }
      while (v27);
    }
    else
    {
      v24 = 0;
    }
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  else
  {
    v104 = *((_QWORD *)this + 6);
    if (v104 && (v130 = *(unsigned int *)(v104 + 12), (_DWORD)v130))
    {
      v131 = *(WebCore::Style ***)v104;
      v132 = 8 * v130;
      do
      {
        v24 = *v131;
        if ((*((_QWORD *)*v131 + 2) & 0xF80000000000) == 0x80000000000
          && !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v24 + 1) + 40) + 592))
        {
          break;
        }
        v24 = 0;
        ++v131;
        v132 -= 8;
      }
      while (v132);
    }
    else
    {
      v24 = 0;
    }
  }
  if (v24)
    return (WTF::StringImpl *)WebCore::Style::loadPendingResources(v24, a2, a3, a4);
  return result;
}

uint64_t WebCore::RenderBox::requiresLayer(WebCore::RenderBox *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  int v6;
  uint64_t hasAcceleratedEffects;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int i;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  WTF **v45;
  uint64_t v47;
  WTF *v48;
  WebCore::RenderBox *v49;
  int v50;
  WTF::StringImpl *v51;
  char v52;
  WTF *v53;
  int v54;
  uint64_t v55;
  char v56;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  v5 = *(WTF **)(v4 + 1272);
  if (v5 == (WTF *)v3)
    return 1;
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x1800000) != 0)
    return 1;
  v9 = (_QWORD *)*((_QWORD *)this + 11);
  v10 = v9[4];
  if (*(float *)(v10 + 4) < 1.0)
    return 1;
  v11 = *(_QWORD *)(v10 + 48);
  v12 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v11 + 8))
  {
    while (!*(_QWORD *)(v11 + 16))
    {
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11)
        goto LABEL_11;
    }
    return 1;
  }
  if (*(_QWORD *)(v11 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return 1;
  }
LABEL_11:
  v14 = v9[5];
  if (!*(_QWORD *)(*(_QWORD *)(v14 + 216) + 8))
    v12 = 0;
  if (v12
    || *(_QWORD *)(v14 + 264)
    || *(_DWORD *)(*(_QWORD *)(v10 + 32) + 20)
    || *(_DWORD *)(*(_QWORD *)(v14 + 72) + 20)
    || (*(_DWORD *)(v14 + 636) & 0x1F00000) != 0x100000)
  {
    return 1;
  }
  hasAcceleratedEffects = 1;
  if ((v6 & 0x20000) == 0 && (*(_DWORD *)(v14 + 636) & 0x400) == 0)
  {
    if ((v6 & 0x4000) != 0)
    {
      v33 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
      v34 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
      v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
      v37 = v33 & ((v36 >> 31) ^ v36);
      for (i = 1; ; ++i)
      {
        a2 = (WTF::StringImpl *)v37;
        v39 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v37);
        if (v39 != -1 && *(WebCore::RenderBox **)(v39 + 8) == this)
          break;
        v37 = ((_DWORD)a2 + i) & v33;
      }
      if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * (_QWORD)a2 + 8))
        return 1;
    }
    if (*(_BYTE *)(v14 + 368))
    {
      v15 = *(WTF::StringImpl **)(v14 + 352);
      if (v15)
      {
        v16 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 2;
        if (v16)
          *(_DWORD *)v15 = v16;
        else
          WTF::StringImpl::destroy(v15, a2);
      }
      return 1;
    }
    if ((v6 & 0x400000) == 0)
    {
      if ((*((_BYTE *)this + 52) & 7) == 3)
      {
        if (*((_BYTE *)this + 53) & 8 | v6 & 0x10000)
          return 1;
      }
      else if ((v6 & 0x10000) != 0)
      {
        return 1;
      }
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 24) + 56);
      if ((~v17 & 3) == 0)
      {
        v18 = (v17 >> 4) & 3;
        if (v18 == 2)
        {
LABEL_30:
          hasAcceleratedEffects = 1;
          if ((((*(unsigned int *)(v14 + 636) | ((unint64_t)(*(unsigned __int16 *)(v14 + 640) | (*(unsigned __int8 *)(v14 + 642) << 16)) << 32)) >> 48) & 3)
             - 3 > 0xFFFFFFFD
            || (*(_BYTE *)(v14 + 462) & 1) != 0
            || (*(_BYTE *)(v9[1] + 68) & 2) == 0)
          {
            return hasAcceleratedEffects;
          }
          v19 = (*((_QWORD *)this + 12) >> 43) & 0x1FLL;
          if ((_DWORD)v19)
          {
            hasAcceleratedEffects = 0;
            switch((int)v19)
            {
              case 5:
                v30 = *((_QWORD *)this + 4);
                if (!v30)
                  return 0;
                v31 = *(_QWORD *)(v30 + 8);
                if (!v31)
                  return 0;
                while (2)
                {
                  if (*(_BYTE *)(v31 + 46) == 19)
                  {
                    if (WebCore::RenderElement::element((WebCore::RenderElement *)v31))
                    {
                      v41 = *(_QWORD *)(v31 + 248);
                      if (v41)
                      {
                        if (*(WebCore::RenderBox **)(v41 + 8) == this)
                        {
                          v5 = (WTF *)WebCore::RenderElement::element((WebCore::RenderElement *)v31);
                          v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                          if (*MEMORY[0x1E0CBF2F8])
                            *(_DWORD *)v2 += 4;
                          LODWORD(v19) = 5;
                          goto LABEL_99;
                        }
                      }
                    }
                  }
                  v42 = *(_QWORD *)(v31 + 32);
                  if (v42)
                  {
                    hasAcceleratedEffects = 0;
                    v31 = *(_QWORD *)(v42 + 8);
                    if (!v31)
                      return hasAcceleratedEffects;
                    continue;
                  }
                  return 0;
                }
              case 6:
              case 7:
                goto LABEL_34;
              case 9:
                v45 = *(WTF ***)(v4 + 3096);
                if (!v45)
                  return 0;
                break;
              case 12:
                if (!v5)
                  return 0;
                v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                if (*MEMORY[0x1E0CBF2F8])
                  *(_DWORD *)v2 += 4;
                LODWORD(v19) = 12;
                goto LABEL_99;
              case 13:
              case 14:
              case 15:
              case 16:
                if (!v5)
                  return 0;
                v2 = *(WTF::StringImpl **)(v14 + 592);
                if (v2)
                  *(_DWORD *)v2 += 4;
                goto LABEL_99;
              default:
                return hasAcceleratedEffects;
            }
            while (1)
            {
              v47 = *((_QWORD *)*v45 + 8) & 0xFFFFFFFFFFFFLL;
              if (v47)
              {
                if ((*(_BYTE *)((*((_QWORD *)*v45 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942DF5B0);
                }
                WebCore::RenderElement::backdropRenderer(v47, &v53);
                v48 = v53;
                if (v53)
                {
                  v49 = (WebCore::RenderBox *)*((_QWORD *)v53 + 1);
                  v53 = 0;
                  if (*(_DWORD *)v48 == 1)
                    WTF::fastFree(v48, a2);
                  else
                    --*(_DWORD *)v48;
                  if (v49 == this)
                    break;
                }
              }
              hasAcceleratedEffects = 0;
              v45 = (WTF **)v45[2];
              if (!v45)
                return hasAcceleratedEffects;
            }
            v5 = *v45;
            v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v2 += 4;
            LODWORD(v19) = 9;
LABEL_99:
            v50 = v19;
            v51 = v2;
            v52 = 1;
            v53 = v5;
            v54 = v19;
            v56 = 1;
            v55 = 0;
            WebCore::Styleable::~Styleable((WebCore::Styleable *)&v53, a2);
            WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v50, v43);
            goto LABEL_73;
          }
LABEL_34:
          hasAcceleratedEffects = 0;
          if ((*((_BYTE *)this + 45) & 1) != 0 || !v3)
            return hasAcceleratedEffects;
          v20 = *(unsigned __int16 *)(v3 + 28);
          if ((v20 & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942DF42CLL);
          }
          if ((~v20 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3))
          {
            LODWORD(v19) = 0;
            v21 = 1;
            v5 = (WTF *)v3;
          }
          else
          {
            v23 = *(_QWORD *)(v3 + 112);
            if (v23)
              v5 = *(WTF **)(v23 + 8);
            else
              v5 = 0;
            if ((~*(unsigned __int16 *)(v3 + 28) & 0x408) != 0)
              LODWORD(v19) = 0;
            else
              LODWORD(v19) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3);
            v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (!*MEMORY[0x1E0CBF2F8])
              goto LABEL_73;
            v24 = *(_DWORD *)v2;
            *(_DWORD *)v2 += 4;
            v25 = v24 + 2;
            if (!v25)
            {
              WTF::StringImpl::destroy(v2, a2);
              v25 = *(_DWORD *)v2;
              *(_DWORD *)v2 += 2;
              if (!v25)
              {
                WTF::StringImpl::destroy(v2, a2);
LABEL_73:
                v21 = 0;
                goto LABEL_39;
              }
            }
            v21 = 0;
            *(_DWORD *)v2 = v25;
          }
          if ((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_40;
          v26 = *(unsigned int *)((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4);
          if (!(_DWORD)v26)
            goto LABEL_40;
LABEL_39:
          v27 = *(uint64_t **)((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
          v28 = 8 * v26;
          if ((v21 & 1) != 0)
          {
            hasAcceleratedEffects = 0;
            do
            {
              v29 = *v27;
              if (!*(_BYTE *)(*v27 + 96))
                break;
              ++v27;
              v28 -= 8;
            }
            while (v28);
          }
          else
          {
            while (1)
            {
              v29 = *v27;
              if (*(_BYTE *)(*v27 + 96))
              {
                if (*(_DWORD *)(v29 + 80) == (_DWORD)v19 && *(_QWORD *)(v29 + 88) == (_QWORD)v2)
                  break;
              }
              hasAcceleratedEffects = 0;
              ++v27;
              v28 -= 8;
              if (!v28)
                goto LABEL_41;
            }
          }
          if (*(_QWORD *)v29)
            hasAcceleratedEffects = WebCore::KeyframeEffectStack::hasAcceleratedEffects(*(WebCore::KeyframeEffectStack **)v29, *(const WebCore::Settings **)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 680));
          else
LABEL_40:
            hasAcceleratedEffects = 0;
LABEL_41:
          if (v2)
            v22 = v21;
          else
            v22 = 1;
          if ((v22 & 1) == 0)
          {
            if (*(_DWORD *)v2 == 2)
              WTF::StringImpl::destroy(v2, a2);
            else
              *(_DWORD *)v2 -= 2;
          }
          return hasAcceleratedEffects;
        }
        v44 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if ((v44 - 2) < 2 || v44 == 4 || v44 == 5)
        {
          if (v18)
            goto LABEL_30;
        }
        else if (!v18)
        {
          goto LABEL_30;
        }
      }
    }
    return 1;
  }
  return hasAcceleratedEffects;
}

uint64_t WebCore::RenderBlockFlow::styleWillChange(WebCore::RenderBox *this, void *a2, WebCore::RenderStyle *a3)
{
  char v6;
  int v7;
  uint64_t v8;
  int v10;
  __int16 v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  int v38;
  __int16 v39;
  char *v40;
  uint64_t result;
  WebCore::RenderBox *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::RenderObject *v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  WebCore::RenderLayerCompositor *v56;
  char v57;
  uint64_t v58;
  WebCore::RenderObject *v59;
  int v60;
  WebCore::RenderElement *v61;
  int v62;
  uint64_t v63;
  char *v64;

  if ((*(_WORD *)((_BYTE *)this + 69) & 2) != 0)
  {
    v6 = 0;
    v7 = *((_DWORD *)this + 5);
    if ((v7 & 0x800) == 0 && (v7 & 0x1800000) != 0x1000000)
      v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1504))(this) ^ 1;
    WebCore::RenderBlock::s_canPropagateFloatIntoSibling = v6;
    v8 = *((_QWORD *)this + 4);
    if (v8
      && (_DWORD)a2 == 8
      && *(_QWORD *)(v8 + 8)
      && ((*((_QWORD *)a3 + 2) ^ *((_QWORD *)this + 12)) & 0x380000) != 0)
    {
      if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1672))(this))
      {
        v10 = *((_DWORD *)this + 5);
        if ((v10 & 0x800) == 0 && (v10 & 0x1800000) != 0x1000000 && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
          WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(this, 0, 1);
      }
    }
  }
  else
  {
    WebCore::RenderBlock::s_canPropagateFloatIntoSibling = 0;
  }
  v11 = *(_WORD *)((char *)this + 69);
  v12 = *((_DWORD *)a3 + 4) & 0x1F;
  v13 = v12 > 0x19;
  v14 = (1 << v12) & 0x3528029;
  if (v13 || v14 == 0)
    v16 = 0;
  else
    v16 = 2;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xFFFFFFFD | v16;
  if ((v11 & 2) != 0)
  {
    v17 = *((_QWORD *)this + 11);
    v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 40) + 20)
       || (v44 = *(_QWORD *)(v17 + 40), *(_QWORD *)(v44 + 328))
       || *(_QWORD *)(v44 + 320)
       || *(_QWORD *)(v44 + 312)
       || *(_QWORD *)(v44 + 304)
       || (*(_DWORD *)(v44 + 636) & 0x180) == 0x80
       || *(float *)(v44 + 260) != -1.0;
    v19 = *((_QWORD *)a3 + 1);
    v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 40) + 20)
       || (v45 = *(_QWORD *)(v19 + 40), *(_QWORD *)(v45 + 328))
       || *(_QWORD *)(v45 + 320)
       || *(_QWORD *)(v45 + 312)
       || *(_QWORD *)(v45 + 304)
       || (*(_DWORD *)(v45 + 636) & 0x180) == 0x80
       || *(float *)(v45 + 260) != -1.0;
    v21 = *(_QWORD *)(v17 + 40);
    v22 = *(_BYTE *)(v21 + 642) & 3;
    if (v22 == 2)
    {
      v23 = 25;
    }
    else if (v22 == 1)
    {
      v23 = 21;
    }
    else
    {
      v23 = *(unsigned __int8 *)(v21 + 462);
    }
    v24 = *(_QWORD *)(v19 + 40);
    v25 = *(_BYTE *)(v24 + 642) & 3;
    if (v25 == 2)
    {
      v26 = 25;
    }
    else if (v25 == 1)
    {
      v26 = 21;
    }
    else
    {
      v26 = *(unsigned __int8 *)(v24 + 462);
    }
    v27 = (*((_DWORD *)this + 24) >> 19) & 7;
    v28 = (*((_DWORD *)a3 + 4) >> 19) & 7;
    v29 = v23 ^ v26;
    if (v27 == v28 && ((v18 ^ v20) & 1) == 0 && (v29 & 1) == 0)
    {
LABEL_37:
      if ((*((_BYTE *)this + 45) & 1) == 0)
      {
        v30 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v30)
        {
          if ((*(_WORD *)(v30 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v30 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24)
            && (*((_BYTE *)this + 99) & 0xE) == 0
            && (*((_BYTE *)a3 + 19) & 0xE) != 0)
          {
            *((_DWORD *)this + 5) &= ~0x400u;
          }
        }
      }
      goto LABEL_41;
    }
    if (!v18 || v20)
    {
      if ((v29 & 1) != 0)
      {
        if ((v23 & 1) == 0 || (v26 & 1) != 0)
          goto LABEL_125;
      }
      else
      {
        if (v28)
          v57 = 1;
        else
          v57 = v20;
        if ((v57 & 1) != 0)
        {
LABEL_125:
          if (v27)
            LOBYTE(v18) = 1;
          if (!v18)
          {
            v58 = *((_QWORD *)this + 4);
            if (v58)
            {
              while (1)
              {
                v59 = *(WebCore::RenderObject **)(v58 + 8);
                if (!v59)
                  break;
                if (*((_BYTE *)v59 + 46) == 49)
                  goto LABEL_142;
                v60 = (*((_DWORD *)v59 + 24) >> 19) & 7;
                if (v60)
                {
                  if ((*((_BYTE *)v59 + 20) & 3) != 0)
                    goto LABEL_142;
                  if (v60 == 1)
                  {
                    v59 = WebCore::RenderObject::containingBlock(v59);
                    if (!v59)
                      goto LABEL_37;
LABEL_142:
                    if ((*((_BYTE *)v59 + 45) & 0x40) == 0)
                      goto LABEL_37;
                    ++*((_DWORD *)v59 + 4);
                    WebCore::RenderBlock::removePositionedObjects(v59, this, 0);
                    v62 = *((_DWORD *)v59 + 4);
                    if (v62)
                    {
                      *((_DWORD *)v59 + 4) = v62 - 1;
                      goto LABEL_37;
                    }
                    result = 286;
                    __break(0xC471u);
                    return result;
                  }
                }
                v58 = *((_QWORD *)v59 + 4);
                if (!v58)
                  goto LABEL_37;
              }
            }
          }
          goto LABEL_37;
        }
      }
    }
    else if ((v29 & (((v23 & 1) == 0) | v26) & 1) != 0)
    {
      goto LABEL_125;
    }
    WebCore::RenderBlock::removePositionedObjects(this, 0, 0);
    goto LABEL_37;
  }
LABEL_41:
  WebCore::RenderBox::s_hadNonVisibleOverflow = *((_BYTE *)this + 22) & 1;
  v31 = *(_WORD *)((char *)this + 69);
  if ((v31 & 2) != 0)
  {
    if (a2 >= 2)
    {
      v32 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 40) + 8);
      if (*(_QWORD *)(v33 + 1272) == v32
        || (*((_BYTE *)this + 45) & 1) == 0
        && (*(_WORD *)(v32 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(v33 + 1944));
        v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
        do
        {
          if (!*(_QWORD *)(v53 + 16) || (*(_WORD *)(v53 + 58) & 3) != 2)
          {
            v54 = 0;
            goto LABEL_114;
          }
          v53 = *(_QWORD *)(v53 + 8);
        }
        while (v53);
        v54 = 1;
LABEL_114:
        v55 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16) + 8);
        do
        {
          if (!*(_QWORD *)(v55 + 16) || (*(_WORD *)(v55 + 58) & 3) != 2)
          {
            if ((v54 & 1) == 0)
              goto LABEL_47;
            goto LABEL_118;
          }
          v55 = *(_QWORD *)(v55 + 8);
        }
        while (v55);
        if ((v54 & 1) == 0)
        {
LABEL_118:
          v56 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944));
          WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(v56);
        }
      }
LABEL_47:
      if ((_DWORD)a2 == 8)
      {
        v47 = *((_QWORD *)this + 4);
        if (v47)
        {
          if (*(_QWORD *)(v47 + 8))
          {
            v48 = *((_QWORD *)this + 12);
            v49 = *((_QWORD *)a3 + 2);
            if (((v49 ^ v48) & 0x380000) != 0)
            {
              if ((v48 & 0x180000) == 0x100000 || (v49 & 0x180000) != 0x100000)
              {
                v61 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
                WebCore::RenderObject::scheduleLayout(this, v61);
              }
              else
              {
                WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(this);
              }
              if ((*((_BYTE *)this + 98) & 0x38) != 0 && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
              {
                v50 = *((_QWORD *)this + 4);
                if (v50)
                  v51 = *(WebCore::RenderObject **)(v50 + 8);
                else
                  v51 = 0;
                WebCore::RenderElement::setChildNeedsLayout(v51, 1);
              }
              v52 = *((_DWORD *)this + 5);
              if ((v52 & 0x800) != 0
                && (v52 & 0x1800000) != 0x1000000
                && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
              {
                WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists(this);
              }
            }
          }
        }
      }
    }
    v34 = (char *)this + 80;
  }
  else
  {
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v34 = *(char **)(*((_QWORD *)this + 3) + 8);
      if (!v34)
        goto LABEL_49;
      if ((*((_WORD *)v34 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v34 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(*(_QWORD *)(*((_QWORD *)v34 + 5) + 8)
                                                                         + 1944));
      }
    }
    v34 = 0;
  }
LABEL_49:
  v35 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 40);
  if (v35[465] | v35[466])
  {
    v64 = v34;
    WebCore::RenderView::registerBoxWithScrollSnapPositions(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    goto LABEL_147;
  }
  if ((v31 & 2) == 0)
  {
    if (!((unint64_t)(v35[642] & 3) << 48))
      goto LABEL_56;
    goto LABEL_77;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v34 + 1) + 40) + 465) | *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v34 + 1) + 40) + 466))
  {
    v64 = v34;
    WebCore::RenderView::unregisterBoxWithScrollSnapPositions(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
LABEL_147:
    v34 = v64;
  }
  if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 642) & 3) << 48)
  {
LABEL_77:
    WebCore::RenderView::registerContainerQueryBox(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    goto LABEL_56;
  }
  if ((v31 & 2) != 0 && (unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v34 + 1) + 40) + 642) & 3) << 48)
    WebCore::RenderView::unregisterContainerQueryBox(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
LABEL_56:
  v36 = *((_DWORD *)this + 5);
  WebCore::RenderLayerModelObject::s_wasFloating = (v36 & 0x800) != 0;
  v37 = (v36 >> 15) & 1;
  WebCore::RenderLayerModelObject::s_hadLayer = (v36 & 0x8000) != 0;
  if ((v36 & 0x20000) != 0)
  {
    v42 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v42 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
    v43 = *((_QWORD *)v42 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 32) + 40) + 20)
      || (v46 = *(_QWORD **)(v43 + 40), v46[41])
      || v46[38]
      || v46[39]
      || v46[40])
    {
      WebCore::RenderLayerModelObject::s_wasTransformed = 1;
      if (!v37)
        goto LABEL_60;
      goto LABEL_59;
    }
    v38 = (v36 >> 20) & 1;
  }
  else
  {
    LOBYTE(v38) = 0;
  }
  WebCore::RenderLayerModelObject::s_wasTransformed = v38;
  if (v37)
LABEL_59:
    WebCore::RenderLayerModelObject::s_layerWasSelfPainting = (*(_DWORD *)(*((_QWORD *)this + 18) + 24) & 0x800) != 0;
LABEL_60:
  v39 = *(_WORD *)((char *)this + 69);
  if ((v39 & 2) != 0)
    v40 = (char *)this + 80;
  else
    v40 = 0;
  if ((_DWORD)a2 == 4)
  {
    v63 = *((_QWORD *)this + 4);
    if (v63)
    {
      if ((v39 & 2) != 0
        && *(_QWORD *)(v63 + 8)
        && (WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v40 + 1) + 40) + 96), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 96)) & 1) == 0)
      {
        WebCore::RenderLayer::clearClipRectsIncludingDescendants(*((WTF **)this + 18), (void *)4);
      }
    }
  }
  return WebCore::RenderElement::styleWillChange(this, a2, a3);
}

uint64_t WebCore::RenderView::requiresLayer(WebCore::RenderView *this)
{
  return 1;
}

uint64_t WebCore::RenderBox::styleWillChange(WebCore::RenderBox *this, void *a2, WebCore::RenderStyle *a3)
{
  __int16 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  __int16 v14;
  char *v15;
  WebCore::RenderBox *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderLayerCompositor *v29;
  WebCore::RenderElement *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;

  WebCore::RenderBox::s_hadNonVisibleOverflow = *((_BYTE *)this + 22) & 1;
  v6 = *(_WORD *)((char *)this + 69);
  if ((v6 & 2) != 0)
  {
    v7 = (char *)this + 80;
    if (a2 >= 2)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
      if (*(_QWORD *)(v9 + 1272) == v8
        || (*((_BYTE *)this + 45) & 1) == 0
        && (*(_WORD *)(v8 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v33 = (char *)this + 80;
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(v9 + 1944));
        v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
        while (1)
        {
          v27 = *(_QWORD *)(v26 + 16);
          if (!v27)
            break;
          if ((*(_WORD *)(v26 + 58) & 3) != 2)
          {
            LOBYTE(v27) = 0;
            break;
          }
          v26 = *(_QWORD *)(v26 + 8);
          if (!v26)
          {
            LOBYTE(v27) = 1;
            break;
          }
        }
        v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16) + 8);
        do
        {
          if (!*(_QWORD *)(v28 + 16) || (*(_WORD *)(v28 + 58) & 3) != 2)
          {
            v7 = v33;
            if ((v27 & 1) == 0)
              goto LABEL_7;
            goto LABEL_62;
          }
          v28 = *(_QWORD *)(v28 + 8);
        }
        while (v28);
        v7 = v33;
        if ((v27 & 1) == 0)
        {
LABEL_62:
          v29 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944));
          WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(v29);
          v7 = v33;
        }
      }
LABEL_7:
      if ((_DWORD)a2 == 8)
      {
        v20 = *((_QWORD *)this + 4);
        if (v20)
        {
          if (*(_QWORD *)(v20 + 8))
          {
            v21 = *((_QWORD *)this + 12);
            v22 = *((_QWORD *)a3 + 2);
            if (((v22 ^ v21) & 0x380000) != 0)
            {
              v32 = v7;
              if ((v21 & 0x180000) == 0x100000 || (v22 & 0x180000) != 0x100000)
              {
                v30 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
                WebCore::RenderObject::scheduleLayout(this, v30);
              }
              else
              {
                WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(this);
              }
              if ((*((_BYTE *)this + 98) & 0x38) != 0 && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
              {
                v23 = *((_QWORD *)this + 4);
                if (v23)
                  v24 = *(WebCore::RenderObject **)(v23 + 8);
                else
                  v24 = 0;
                WebCore::RenderElement::setChildNeedsLayout(v24, 1);
              }
              v25 = *((_DWORD *)this + 5);
              if ((v25 & 0x800) != 0
                && (v25 & 0x1800000) != 0x1000000
                && (*((_QWORD *)a3 + 2) & 0x180000) == 0x100000)
              {
                WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists(this);
              }
              v7 = v32;
            }
          }
        }
      }
    }
  }
  else
  {
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v7 = *(char **)(*((_QWORD *)this + 3) + 8);
      if (!v7)
        goto LABEL_8;
      if ((*((_WORD *)v7 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v7 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 8)
                                                                         + 1944));
      }
    }
    v7 = 0;
  }
LABEL_8:
  v10 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 40);
  if (v10[465] | v10[466])
  {
    v34 = v7;
    WebCore::RenderView::registerBoxWithScrollSnapPositions(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    goto LABEL_66;
  }
  if ((v6 & 2) == 0)
  {
    if (!((unint64_t)(v10[642] & 3) << 48))
      goto LABEL_15;
    goto LABEL_34;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40) + 465) | *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40)
                                                                                                  + 466))
  {
    v34 = v7;
    WebCore::RenderView::unregisterBoxWithScrollSnapPositions(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
LABEL_66:
    v7 = v34;
  }
  if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 642) & 3) << 48)
  {
LABEL_34:
    WebCore::RenderView::registerContainerQueryBox(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    goto LABEL_15;
  }
  if ((v6 & 2) != 0 && (unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40) + 642) & 3) << 48)
    WebCore::RenderView::unregisterContainerQueryBox(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
LABEL_15:
  v11 = *((_DWORD *)this + 5);
  WebCore::RenderLayerModelObject::s_wasFloating = (v11 & 0x800) != 0;
  v12 = (v11 >> 15) & 1;
  WebCore::RenderLayerModelObject::s_hadLayer = (v11 & 0x8000) != 0;
  if ((v11 & 0x20000) != 0)
  {
    v17 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v17 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
    v18 = *((_QWORD *)v17 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 40) + 20)
      || (v19 = *(_QWORD **)(v18 + 40), v19[41])
      || v19[38]
      || v19[39]
      || v19[40])
    {
      LOBYTE(v13) = 1;
    }
    else
    {
      v13 = (v11 >> 20) & 1;
    }
  }
  else
  {
    LOBYTE(v13) = 0;
  }
  WebCore::RenderLayerModelObject::s_wasTransformed = v13;
  if (v12)
    WebCore::RenderLayerModelObject::s_layerWasSelfPainting = (*(_DWORD *)(*((_QWORD *)this + 18) + 24) & 0x800) != 0;
  v14 = *(_WORD *)((char *)this + 69);
  v15 = (char *)this + 80;
  if ((v14 & 2) == 0)
    v15 = 0;
  if ((_DWORD)a2 == 4)
  {
    v31 = *((_QWORD *)this + 4);
    if (v31)
    {
      if ((v14 & 2) != 0
        && *(_QWORD *)(v31 + 8)
        && (WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v15 + 1) + 40) + 96), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 96)) & 1) == 0)
      {
        WebCore::RenderLayer::clearClipRectsIncludingDescendants(*((WTF **)this + 18), (void *)4);
      }
    }
  }
  return WebCore::RenderElement::styleWillChange(this, a2, a3);
}

uint64_t WebCore::RenderBlock::styleWillChange(WebCore::RenderBox *a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::RenderObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::RenderLayerCompositor *v43;
  char v44;
  uint64_t v45;
  WebCore::RenderObject *v46;
  int v47;
  WebCore::RenderElement *v48;
  int v49;
  char *v50;
  char *v51;

  v6 = *(_WORD *)((char *)a1 + 69);
  v7 = *(_DWORD *)(a3 + 16) & 0x1F;
  v8 = v7 > 0x19;
  v9 = (1 << v7) & 0x3528029;
  if (v8 || v9 == 0)
    v11 = 0;
  else
    v11 = 2;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xFFFFFFFD | v11;
  if ((v6 & 2) == 0)
    goto LABEL_25;
  v12 = *((_QWORD *)a1 + 11);
  v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 40) + 20)
     || (v32 = *(_QWORD *)(v12 + 40), *(_QWORD *)(v32 + 328))
     || *(_QWORD *)(v32 + 320)
     || *(_QWORD *)(v32 + 312)
     || *(_QWORD *)(v32 + 304)
     || (*(_DWORD *)(v32 + 636) & 0x180) == 0x80
     || *(float *)(v32 + 260) != -1.0;
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 40) + 20)
     || (v33 = *(_QWORD *)(v14 + 40), *(_QWORD *)(v33 + 328))
     || *(_QWORD *)(v33 + 320)
     || *(_QWORD *)(v33 + 312)
     || *(_QWORD *)(v33 + 304)
     || (*(_DWORD *)(v33 + 636) & 0x180) == 0x80
     || *(float *)(v33 + 260) != -1.0;
  v16 = *(_QWORD *)(v12 + 40);
  v17 = *(_BYTE *)(v16 + 642) & 3;
  if (v17 == 2)
  {
    v18 = 25;
  }
  else if (v17 == 1)
  {
    v18 = 21;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v16 + 462);
  }
  v19 = *(_QWORD *)(v14 + 40);
  v20 = *(_BYTE *)(v19 + 642) & 3;
  if (v20 == 2)
  {
    v21 = 25;
  }
  else if (v20 == 1)
  {
    v21 = 21;
  }
  else
  {
    v21 = *(unsigned __int8 *)(v19 + 462);
  }
  v22 = (*((_DWORD *)a1 + 24) >> 19) & 7;
  v23 = (*(_DWORD *)(a3 + 16) >> 19) & 7;
  v24 = v18 ^ v21;
  if (v22 != v23 || ((v13 ^ v15) & 1) != 0 || (v24 & 1) != 0)
  {
    if (!v13 || v15)
    {
      if ((v24 & 1) != 0)
      {
        if ((v18 & 1) == 0 || (v21 & 1) != 0)
          goto LABEL_89;
      }
      else
      {
        if (v23)
          v44 = 1;
        else
          v44 = v15;
        if ((v44 & 1) != 0)
        {
LABEL_89:
          if (v22)
            LOBYTE(v13) = 1;
          if (!v13)
          {
            v45 = *((_QWORD *)a1 + 4);
            if (v45)
            {
              while (1)
              {
                v46 = *(WebCore::RenderObject **)(v45 + 8);
                if (!v46)
                  break;
                if (*((_BYTE *)v46 + 46) == 49)
                  goto LABEL_106;
                v47 = (*((_DWORD *)v46 + 24) >> 19) & 7;
                if (v47)
                {
                  if ((*((_BYTE *)v46 + 20) & 3) != 0)
                    goto LABEL_106;
                  if (v47 == 1)
                  {
                    v46 = WebCore::RenderObject::containingBlock(v46);
                    if (!v46)
                      goto LABEL_21;
LABEL_106:
                    if ((*((_BYTE *)v46 + 45) & 0x40) == 0)
                      goto LABEL_21;
                    ++*((_DWORD *)v46 + 4);
                    WebCore::RenderBlock::removePositionedObjects(v46, a1, 0);
                    v49 = *((_DWORD *)v46 + 4);
                    if (v49)
                    {
                      *((_DWORD *)v46 + 4) = v49 - 1;
                      goto LABEL_21;
                    }
                    result = 286;
                    __break(0xC471u);
                    return result;
                  }
                }
                v45 = *((_QWORD *)v46 + 4);
                if (!v45)
                  goto LABEL_21;
              }
            }
          }
          goto LABEL_21;
        }
      }
    }
    else if ((v24 & (((v18 & 1) == 0) | v21) & 1) != 0)
    {
      goto LABEL_89;
    }
    WebCore::RenderBlock::removePositionedObjects(a1, 0, 0);
  }
LABEL_21:
  if ((*((_BYTE *)a1 + 45) & 1) == 0)
  {
    v25 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    if (v25)
    {
      if ((*(_WORD *)(v25 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24)
        && (*((_BYTE *)a1 + 99) & 0xE) == 0
        && (*(_BYTE *)(a3 + 19) & 0xE) != 0)
      {
        *((_DWORD *)a1 + 5) &= ~0x400u;
      }
    }
  }
LABEL_25:
  WebCore::RenderBox::s_hadNonVisibleOverflow = *((_BYTE *)a1 + 22) & 1;
  v26 = *(_WORD *)((char *)a1 + 69);
  if ((v26 & 2) != 0)
  {
    v27 = (char *)a1 + 80;
    if (a2 >= 2)
    {
      v28 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
      v29 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8);
      if (*(_QWORD *)(v29 + 1272) == v28
        || (*((_BYTE *)a1 + 45) & 1) == 0
        && (*(_WORD *)(v28 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(v29 + 1944));
        v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 16) + 8);
        while (1)
        {
          v41 = *(_QWORD *)(v40 + 16);
          if (!v41)
            break;
          if ((*(_WORD *)(v40 + 58) & 3) != 2)
          {
            LOBYTE(v41) = 0;
            break;
          }
          v40 = *(_QWORD *)(v40 + 8);
          if (!v40)
          {
            LOBYTE(v41) = 1;
            break;
          }
        }
        v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 8);
        do
        {
          if (!*(_QWORD *)(v42 + 16) || (*(_WORD *)(v42 + 58) & 3) != 2)
          {
            v27 = (char *)a1 + 80;
            if ((v41 & 1) == 0)
              goto LABEL_31;
            goto LABEL_82;
          }
          v42 = *(_QWORD *)(v42 + 8);
        }
        while (v42);
        v27 = (char *)a1 + 80;
        if ((v41 & 1) == 0)
        {
LABEL_82:
          v43 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944));
          WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(v43);
          v27 = (char *)a1 + 80;
        }
      }
LABEL_31:
      if ((_DWORD)a2 == 8)
      {
        v34 = *((_QWORD *)a1 + 4);
        if (v34)
        {
          if (*(_QWORD *)(v34 + 8))
          {
            v35 = *((_QWORD *)a1 + 12);
            v36 = *(_QWORD *)(a3 + 16);
            if (((v36 ^ v35) & 0x380000) != 0)
            {
              v50 = v27;
              if ((v35 & 0x180000) == 0x100000 || (v36 & 0x180000) != 0x100000)
              {
                v48 = WebCore::RenderObject::markContainingBlocksForLayout(a1, 0);
                WebCore::RenderObject::scheduleLayout(a1, v48);
              }
              else
              {
                WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(a1);
              }
              if ((*((_BYTE *)a1 + 98) & 0x38) != 0 && (*(_QWORD *)(a3 + 16) & 0x180000) == 0x100000)
              {
                v37 = *((_QWORD *)a1 + 4);
                if (v37)
                  v38 = *(WebCore::RenderObject **)(v37 + 8);
                else
                  v38 = 0;
                WebCore::RenderElement::setChildNeedsLayout(v38, 1);
              }
              v39 = *((_DWORD *)a1 + 5);
              if ((v39 & 0x800) != 0
                && (v39 & 0x1800000) != 0x1000000
                && (*(_QWORD *)(a3 + 16) & 0x180000) == 0x100000)
              {
                WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists(a1);
              }
              v27 = v50;
            }
          }
        }
      }
    }
  }
  else
  {
    if ((*((_BYTE *)a1 + 45) & 1) == 0)
    {
      v27 = *(char **)(*((_QWORD *)a1 + 3) + 8);
      if (!v27)
        goto LABEL_32;
      if ((*((_WORD *)v27 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v27 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        WebCore::RenderView::repaintRootContents(*(WebCore::RenderView **)(*(_QWORD *)(*((_QWORD *)v27 + 5) + 8)
                                                                         + 1944));
      }
    }
    v27 = 0;
  }
LABEL_32:
  v30 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 40);
  if (v30[465] | v30[466])
  {
    v51 = v27;
    WebCore::RenderView::registerBoxWithScrollSnapPositions(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944), a1);
    goto LABEL_111;
  }
  if ((v26 & 2) != 0)
  {
    if (!(*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v27 + 1) + 40) + 465) | *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v27 + 1) + 40) + 466)))
      goto LABEL_35;
    v51 = v27;
    WebCore::RenderView::unregisterBoxWithScrollSnapPositions(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944), a1);
LABEL_111:
    v27 = v51;
LABEL_35:
    if (!((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 642) & 3) << 48))
    {
      if ((v26 & 2) != 0)
      {
        if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v27 + 1) + 40) + 642) & 3) << 48)
          WebCore::RenderView::unregisterContainerQueryBox(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944), a1);
      }
      return WebCore::RenderLayerModelObject::styleWillChange((WTF **)a1, a2, (WebCore::RenderStyle *)a3);
    }
    goto LABEL_47;
  }
  if ((unint64_t)(v30[642] & 3) << 48)
LABEL_47:
    WebCore::RenderView::registerContainerQueryBox(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944), a1);
  return WebCore::RenderLayerModelObject::styleWillChange((WTF **)a1, a2, (WebCore::RenderStyle *)a3);
}

BOOL WebCore::Node::isInUserAgentShadowTree(WebCore::Node *this)
{
  uint64_t v1;
  BOOL v2;

  v1 = **((_QWORD **)this + 5);
  if (v1)
    v2 = (*(_WORD *)(v1 + 28) & 0x80) == 0;
  else
    v2 = 1;
  return !v2 && *(_BYTE *)(v1 + 193) == 0;
}

uint64_t WebCore::StyleCachedImage::isPending(WebCore::StyleCachedImage *this)
{
  return *((unsigned __int8 *)this + 40);
}

int *WebCore::CachedResourceLoader::defaultCachedResourceOptions(WebCore::CachedResourceLoader *this)
{
  {
    LOWORD(WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options) = 512;
    *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options + 2) = 2;
    byte_1ECE90816 = 0;
    *(_OWORD *)&qword_1ECE90818 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE90820 + 8) = 0u;
    *(_OWORD *)&algn_1ECE90830[8] = 0u;
    *(_OWORD *)&qword_1ECE90848 = 0u;
    dword_1ECE90858 = 0;
    byte_1ECE9085C = 1;
    LOBYTE(word_1ECE90860) = 0;
    byte_1ECE90878 = 0;
    LOWORD(xmmword_1ECE90880) = 20;
    *(_DWORD *)((char *)&xmmword_1ECE90880 + 2) = *(_DWORD *)((_BYTE *)&xmmword_1ECE90880 + 2) & 0xF0000000 | 0xC0809D0;
    *((_QWORD *)&xmmword_1ECE90880 + 1) = 0;
    qword_1ECE90890 = 0;
  }
  return &WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
}

uint64_t *WebCore::StyleCachedImage::load(WebCore::StyleCachedImage *this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  WebCore::CachedResource *Image;

  *((_BYTE *)this + 40) = 0;
  Image = (WebCore::CachedResource *)WebCore::CSSImageValue::loadImage(*((_QWORD *)this + 4), a2, a3);
  return WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 6, Image);
}

uint64_t WebCore::RenderLayerModelObject::RenderLayerModelObject(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char a5, __int16 a6)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = WebCore::RenderObject::RenderObject(a1, a2, a3, a5 | 0x10u, a6);
  *(_QWORD *)result = off_1E3422BC8;
  *(_QWORD *)(result + 70) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 80) = 0;
  v8 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(result + 88) = v8;
  *(_QWORD *)(result + 96) = a4[2];
  v9 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(result + 104) = v9;
  v10 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(result + 112) = v10;
  *(_QWORD *)(result + 120) = a4[5];
  v11 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(result + 128) = v11;
  v12 = a4[7];
  a4[7] = 0;
  *(_QWORD *)result = off_1E34292D8;
  *(_QWORD *)(result + 136) = v12;
  *(_QWORD *)(result + 144) = 0;
  return result;
}

{
  char v11;
  unsigned int v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;

  v11 = a5 & 0xEF;
  *(_QWORD *)a1 = off_1E342E320;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0x80000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v12;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 8) = a3;
    *(_BYTE *)(v24 + 32) = 0;
    v26 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v26 & 0xFFFF000000000000 | v24;
    v27 = v26 & 0xFFFFFFFFFFFFLL;
    if ((v26 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v30 = *(unsigned int *)(v27 + 28);
        if ((_DWORD)v30)
        {
          v33 = v27;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v30));
          v27 = v33;
        }
        v31 = *(WTF **)(v27 + 16);
        if (v31)
        {
          *(_QWORD *)(v27 + 16) = 0;
          *(_DWORD *)(v27 + 24) = 0;
          v32 = v27;
          WTF::fastFree(v31, v25);
          v27 = v32;
        }
        WTF::fastFree((WTF *)v27, v25);
      }
    }
  }
  v13 = v11 | 0x10;
  v14 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  if ((*(_WORD *)(a3 + 28) & 0xF000) == 0x9000)
    v13 = v11 | 0x11;
  *(_BYTE *)(a1 + 45) = v13;
  *(_BYTE *)(a1 + 46) = a2;
  *(_DWORD *)(a1 + 47) = 0;
  *(_BYTE *)(a1 + 51) = 0;
  *(_WORD *)(a1 + 52) = a6;
  *(_QWORD *)(a1 + 56) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 1944);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 16);
    ++*(_QWORD *)(v16 + 256);
    *(_DWORD *)(v16 + 16) = v17 + 1;
    if (v17 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x196405C78);
    }
    *(_DWORD *)(v16 + 16) = v17;
  }
  *(_QWORD *)a1 = off_1E3422BC8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 70) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v18 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = a4[2];
  v19 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(a1 + 104) = v19;
  v20 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = a4[5];
  v21 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(a1 + 128) = v21;
  v22 = a4[7];
  a4[7] = 0;
  *(_QWORD *)a1 = off_1E34292D8;
  *(_QWORD *)(a1 + 136) = v22;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t WebCore::setOverrideEnhanceTextLegibility(uint64_t this)
{
  WebCore::overrideEnhanceTextLegibility(void)::overrideEnhanceTextLegibility = this | 0x100;
  return this;
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::setCachedCaptionDisplayMode(uint64_t result)
{
  if ((byte_1EE337E21 & 1) == 0)
    byte_1EE337E21 = 1;
  word_1EE337E24 = result | 0x100;
  return result;
}

_QWORD *WebCore::ScreenOrientationManager::ScreenOrientationManager(_QWORD *this)
{
  *this = off_1E3405DE8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void WebCore::Range::~Range(WebCore::Range *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Range::~Range(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;

  v3 = (uint64_t *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  *(_DWORD *)(v2 + 24) += 2;
  v5 = v2;
  WTF::HashSet<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v2 + 1320), (uint64_t)this);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v5);
  WebCore::SimpleRange::~SimpleRange((WebCore::Range *)((char *)this + 56));
  WebCore::SimpleRange::~SimpleRange((WebCore::Range *)((char *)this + 32));
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v3);
  WTF::WeakPtrFactory<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory((WTF **)this + 2, v4);
}

uint64_t WTF::HashSet<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;

  v3 = *a1;
  if (*a1)
  {
    v4 = WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>,WebCore::Range const*>(*a1, a2);
    if (v4)
      v5 = (WTF **)v4;
    else
      v5 = (WTF **)(v3 + 8 * *(unsigned int *)(v3 - 4));
  }
  else
  {
    v5 = 0;
  }
  return WTF::HashSet<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove(a1, v5);
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::reinsert(*a1, v14);
          WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef((WTF **)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef((WTF **)v14, v10);
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF **WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef(WTF **a1, void *a2)
{
  WTF *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*(_QWORD *)(*a2 + 8) << 32) + *(_QWORD *)(*a2 + 8);
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = 0;
  v11 = *a2;
  *a2 = 0;
  *result = v11;
  return result;
}

uint64_t WebCore::RenderBox::computeReplacedLogicalHeightUsing(WebCore::RenderObject *this, int a2, unsigned __int8 *a3)
{
  int v5;
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  WebCore::RenderObject *v22;
  int v23;
  char v24;
  WebCore::RenderObject *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  float v54;
  double v55;
  unsigned int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  WebCore::RenderObject *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::RenderObject *v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  unsigned int v81;
  float v82;
  double v83;
  float v84;
  double v85;
  unint64_t v86;
  char v87;
  float v88;
  float v89;
  double v90;
  uint64_t v91;
  _QWORD v92[3];

  v5 = a3[4];
  if (a2 == 1 && !a3[4])
    return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, 0x100000000);
  switch(a3[4])
  {
    case 3u:
    case 0xBu:
      if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
      {
        v22 = (WebCore::RenderObject *)WebCore::RenderObject::container(this);
        if (v22)
          goto LABEL_23;
LABEL_38:
        v25 = 0;
LABEL_39:
        v27 = 0;
        v28 = ((*((_BYTE *)v25 + 21) & 0x10) == 0) ^ ((*((_BYTE *)this + 21) & 0x10) == 0);
        v29 = 1;
        if (!v25 || (*((_BYTE *)v25 + 45) & 0x40) == 0)
          goto LABEL_46;
        WebCore::RenderBlock::addPercentHeightDescendant(v25, this);
        v30 = *((_QWORD *)v25 + 4);
        if (!v30)
          goto LABEL_45;
        v31 = *(_QWORD *)(v30 + 8);
        if (!v31)
          goto LABEL_45;
        if ((*(char *)(v31 + 45) & 0x80000000) == 0 || (*((_DWORD *)v25 + 5) & 0x400) != 0)
        {
LABEL_44:
          if (*(_BYTE *)(v31 + 46) == 12 && ((v28 | ((*((_BYTE *)v25 + 21) & 4) >> 2)) & 1) == 0)
          {
            v59 = WebCore::RenderBox::overridingLogicalHeight(v25);
            if (HIDWORD(v59))
              goto LABEL_139;
          }
LABEL_45:
          v27 = 0;
          v29 = 1;
          goto LABEL_46;
        }
        v56 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 88) + 32) + 16) + 20);
        v57 = (v56 >> 1) & 1;
        v58 = (v56 & 2) == 0;
        if ((*(_BYTE *)(v31 + 21) & 0x10) != 0)
          v58 = v57;
        if (v58 == (*((_DWORD *)v25 + 5) & 0x1000u) >> 12)
        {
          v59 = WebCore::RenderFlexibleBox::usedChildOverridingMainSizeForPercentageResolution((WebCore::RenderFlexibleBox *)v31, v25);
        }
        else
        {
          if (WebCore::RenderFlexibleBox::alignmentForChild((WebCore::RenderFlexibleBox *)v31, v25) != 3)
            goto LABEL_140;
          v59 = WebCore::RenderBox::overridingLogicalHeight(v25);
        }
        if ((v59 & 0xFF00000000) != 0)
        {
LABEL_139:
          v27 = WebCore::RenderBox::overridingContentLogicalHeight((uint64_t)v25, v59);
          v29 = 0;
LABEL_46:
          if ((*((_DWORD *)v25 + 5) & 0x1800000) == 0x1000000)
          {
            v32 = *((_QWORD *)v25 + 11);
            if (!*(_BYTE *)(*(_QWORD *)(v32 + 8) + 16))
            {
              v38 = *(_QWORD *)(v32 + 24);
              if (*(_BYTE *)(v38 + 12))
              {
                if (*(_BYTE *)(v38 + 28))
                {
                  if ((*((_BYTE *)v25 + 45) & 0x40) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942E1860);
                  }
                  v39 = (unsigned int *)((char *)v25 + 160);
                  if (((*((_DWORD *)v25 + 31) >> 13) & 6u) - 2 >= 4)
                    v39 = (unsigned int *)((char *)v25 + 164);
                  (*(void (**)(_QWORD *__return_ptr, WebCore::RenderObject *, _QWORD, _QWORD))(*(_QWORD *)v25 + 1312))(v92, v25, *v39, 0);
                  v40 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v25 + 1048))(v25);
                  v41 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v25 + 960))(v25);
                  if (__OFADD__(v40, v41))
                    v42 = (v40 >> 31) + 0x7FFFFFFF;
                  else
                    v42 = v40 + v41;
                  v43 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v25 + 1056))(v25);
                  v44 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v25 + 968))(v25);
                  v45 = v43 + v44;
                  if (__OFADD__(v43, v44))
                    v45 = (v43 >> 31) + 0x7FFFFFFF;
                  v16 = __OFADD__(v42, v45);
                  v46 = v42 + v45;
                  v47 = (v42 >> 31) + 0x7FFFFFFF;
                  if (!v16)
                    v47 = v46;
                  v48 = LODWORD(v92[0]) - v47;
                  if (__OFSUB__(v92[0], v47))
                    v48 = (LODWORD(v92[0]) >> 31) + 0x7FFFFFFF;
                  v49 = 1360;
                  if (((*((_DWORD *)v25 + 31) >> 13) & 6u) - 2 < 4)
                    v49 = 1352;
                  v50 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v25 + v49))(v25);
                  v51 = v50 << 6;
                  if (v50 < -33554432)
                    v51 = 0x80000000;
                  if (v50 > 0x1FFFFFF)
                    v51 = 0x7FFFFFFF;
                  v16 = __OFSUB__(v48, v51);
                  v52 = v48 - v51;
                  v53 = (v48 >> 31) + 0x7FFFFFFF;
                  if (!v16)
                    v53 = v52;
                  if (a3[4] == 4)
                  {
                    v54 = *(float *)a3;
                    if (!a3[6])
                      v54 = (float)*(int *)a3;
LABEL_147:
                    v83 = v54 * 64.0;
                    if (v83 >= 2147483650.0)
                    {
                      v81 = 0x7FFFFFFF;
                    }
                    else if (v83 <= -2147483650.0)
                    {
                      v81 = 0x80000000;
                    }
                    else
                    {
                      v81 = (int)v83;
                    }
                  }
                  else
                  {
                    v81 = 0;
                    switch(a3[4])
                    {
                      case 0u:
                      case 1u:
                      case 9u:
                        v81 = v53;
                        break;
                      case 3u:
                        v82 = *(float *)a3;
                        if (!a3[6])
                          v82 = (float)*(int *)a3;
                        v54 = (float)((float)((float)v53 * 0.015625) * v82) / 100.0;
                        goto LABEL_147;
                      case 0xBu:
                        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a3, (float)v53 * 0.015625);
                        goto LABEL_147;
                      default:
                        return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, v81 | 0x100000000);
                    }
                  }
                  return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, v81 | 0x100000000);
                }
              }
            }
          }
          v33 = *((_DWORD *)this + 5);
          if ((v33 & 0x1800000) == 0x1000000)
          {
            if ((*((_BYTE *)v25 + 45) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942E182CLL);
            }
            v27 = WebCore::RenderBox::containingBlockLogicalHeightForPositioned(this, v25, 1);
            goto LABEL_163;
          }
          if (!v29
            || (v35 = *((_QWORD *)this + 4)) != 0
            && (v36 = *(_QWORD *)(v35 + 8)) != 0
            && (v33 & 0x400) == 0
            && *(_BYTE *)(v36 + 46) == 12
            && (v86 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this), v87)
            && (v27 = v86, (v86 & 0xFF00000000) != 0))
          {
LABEL_163:
            if (a3[4] == 4)
            {
              v88 = *(float *)a3;
              if (!a3[6])
                v88 = (float)*(int *)a3;
LABEL_171:
              v90 = v88 * 64.0;
              if (v90 >= 2147483650.0)
              {
                LODWORD(v21) = 0x7FFFFFFF;
              }
              else if (v90 <= -2147483650.0)
              {
                LODWORD(v21) = 0x80000000;
              }
              else
              {
                LODWORD(v21) = (int)v90;
              }
            }
            else
            {
              LODWORD(v21) = 0;
              switch(a3[4])
              {
                case 0u:
                case 1u:
                case 9u:
                  LODWORD(v21) = v27;
                  break;
                case 3u:
                  v89 = *(float *)a3;
                  if (!a3[6])
                    v89 = (float)*(int *)a3;
                  v88 = (float)((float)((float)v27 * 0.015625) * v89) / 100.0;
                  goto LABEL_171;
                case 0xBu:
                  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a3, (float)v27 * 0.015625);
                  goto LABEL_171;
                default:
                  break;
              }
            }
            v21 = v21;
            goto LABEL_175;
          }
          if (v28)
          {
            v37 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1144))(this);
LABEL_100:
            v27 = v37;
            goto LABEL_101;
          }
          v60 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
          if (v61 && (v60 & 0xFF00000000) != 0)
          {
            v27 = v60;
            goto LABEL_101;
          }
          v62 = WebCore::RenderObject::containingBlock(this);
          if (v62)
          {
            v37 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)v62 + 1344))(v62, 1);
            goto LABEL_100;
          }
          v27 = 0;
          while (1)
          {
LABEL_101:
            v63 = *((unsigned __int8 *)v25 + 46);
            if (v63 == 49)
              goto LABEL_163;
            v64 = *(_QWORD *)(*((_QWORD *)v25 + 11) + 8);
            if (((*((_DWORD *)v25 + 31) >> 13) & 6u) - 2 <= 3)
            {
              if (!*(_BYTE *)(v64 + 8))
                goto LABEL_106;
              v65 = v64 + 4;
            }
            else
            {
              if (!*(_BYTE *)(v64 + 16))
                goto LABEL_106;
              v65 = v64 + 12;
            }
            if ((*(_BYTE *)(v65 + 4) & 0xF7) != 3)
              goto LABEL_163;
LABEL_106:
            if (v63 == 37)
            {
              v68 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
              v69 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1320))(this);
              v70 = HIDWORD(v69);
              if (v68 < 4)
                LODWORD(v70) = v69;
              if (v27 <= (int)v70)
                v27 = v70;
              v71 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1048))(this);
              v72 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 960))(this);
              if (__OFADD__(v71, v72))
                v73 = (v71 >> 31) + 0x7FFFFFFF;
              else
                v73 = v71 + v72;
              v74 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1056))(this);
              v75 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 968))(this);
              v76 = v74 + v75;
              if (__OFADD__(v74, v75))
                v76 = (v74 >> 31) + 0x7FFFFFFF;
              v16 = __OFADD__(v73, v76);
              v77 = v73 + v76;
              if (v16)
                v77 = (v73 >> 31) + 0x7FFFFFFF;
              v16 = __OFSUB__(v27, v77);
              LODWORD(v78) = v27 - v77;
              if (v16)
                v78 = (v27 >> 31) + 0x7FFFFFFF;
              else
                v78 = v78;
              if (a3[4] == 4)
              {
                v79 = *(float *)a3;
                if (!a3[6])
                  v79 = (float)*(int *)a3;
LABEL_155:
                v85 = v79 * 64.0;
                if (v85 >= 2147483650.0)
                {
                  return 0x7FFFFFFFLL;
                }
                else if (v85 <= -2147483650.0)
                {
                  return 0x80000000;
                }
                else
                {
                  return (int)v85;
                }
              }
              else
              {
                result = 0;
                switch(a3[4])
                {
                  case 0u:
                  case 1u:
                  case 9u:
                    result = v78;
                    break;
                  case 3u:
                    v84 = *(float *)a3;
                    if (!a3[6])
                      v84 = (float)*(int *)a3;
                    v79 = (float)((float)((float)(int)v78 * 0.015625) * v84) / 100.0;
                    goto LABEL_155;
                  case 0xBu:
                    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a3, (float)(int)v78 * 0.015625);
                    goto LABEL_155;
                  default:
                    return result;
                }
              }
              return result;
            }
            if ((*((_BYTE *)v25 + 45) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1942E17C4);
            }
            WebCore::RenderBlock::addPercentHeightDescendant(v25, this);
            v25 = WebCore::RenderObject::containingBlock(v25);
            if (!v25)
              goto LABEL_163;
          }
        }
LABEL_140:
        v80 = *((_QWORD *)v25 + 4);
        if (!v80)
          goto LABEL_45;
        v31 = *(_QWORD *)(v80 + 8);
        if (!v31)
          goto LABEL_45;
        goto LABEL_44;
      }
      v22 = WebCore::RenderObject::containingBlock(this);
      if (!v22)
        goto LABEL_38;
      while (1)
      {
LABEL_23:
        if ((*((_BYTE *)v22 + 45) & 1) == 0)
        {
LABEL_32:
          v25 = v22;
          goto LABEL_39;
        }
        v23 = *((_BYTE *)v22 + 52) & 7;
        if (v23 == 1)
        {
          v24 = 16;
        }
        else
        {
          if (v23 != 3)
            goto LABEL_27;
          v24 = 8;
        }
        if ((*((_BYTE *)v22 + 53) & v24) != 0)
          goto LABEL_32;
LABEL_27:
        if (*((_BYTE *)v22 + 46) == 49)
          goto LABEL_32;
        v22 = WebCore::RenderObject::containingBlock(v22);
        v25 = 0;
        if (!v22)
          goto LABEL_39;
      }
    case 4u:
      if (a3[6])
        v34 = *(float *)a3;
      else
        v34 = (float)*(int *)a3;
      v55 = v34 * 64.0;
      if (v55 >= 2147483650.0)
      {
        v91 = 0x17FFFFFFFLL;
      }
      else
      {
        if (v55 > -2147483650.0)
        {
          v21 = (int)v55;
          goto LABEL_175;
        }
        v91 = 0x180000000;
      }
      return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, v91);
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
      v7 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      v8 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1320))(this);
      if (v7 >= 4)
        v9 = HIDWORD(v8);
      else
        LODWORD(v9) = v8;
      v10 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1048))(this);
      v11 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 960))(this);
      if (__OFADD__(v10, v11))
        v12 = (v10 >> 31) + 0x7FFFFFFF;
      else
        v12 = v10 + v11;
      v13 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1056))(this);
      v14 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 968))(this);
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
        v15 = (v13 >> 31) + 0x7FFFFFFF;
      v16 = __OFADD__(v12, v15);
      v17 = v12 + v15;
      if (v16)
        v18 = (v12 >> 31) + 0x7FFFFFFF;
      else
        v18 = v17;
      if ((v5 - 7) < 2 || v5 == 10)
      {
        v19 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)this + 1280))(this, v9);
LABEL_19:
        v20 = v19 & 0xFFFFFF00;
        goto LABEL_20;
      }
      if (v5 == 9)
      {
        v66 = WebCore::RenderObject::containingBlock(this);
        v67 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v66 + 1344))(v66, 0);
        if (__OFSUB__(v67, v18))
          v19 = (v67 >> 31) + 0x7FFFFFFF;
        else
          v19 = v67 - v18;
        goto LABEL_19;
      }
      LOBYTE(v19) = 0;
      v20 = 0;
LABEL_20:
      v21 = v20 | v19;
LABEL_175:
      v91 = v21 | 0x100000000;
      return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)this + 1272))(this, v91);
    default:
      v26 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1320))(this);
      if (v26 >= 4)
        return HIDWORD(result);
      else
        return result;
  }
}

uint64_t WebCore::RenderBox::computePercentageLogicalHeight(uint64_t a1, WebCore::Length *a2, int a3)
{
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  int v8;
  int v9;
  int v10;
  char v12;
  unsigned int v13;
  char v14;
  WebCore::RenderBoxModelObject *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  float v27;
  double v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int i;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  float v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  WebCore::RenderObject *v81;
  WebCore::RenderObject *v82;
  unsigned int v83;
  int v84;
  char v85;
  unsigned int v86;
  char *v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WebCore::RenderObject *v96;
  uint64_t v97;
  char *v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v6 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 20);
  if (!v6)
    goto LABEL_11;
  v9 = *((unsigned __int8 *)v6 + 46);
  if (v9 == 49)
    goto LABEL_11;
  v10 = *((_BYTE *)v6 + 52) & 7;
  if (v10 == 1
    && (*((_BYTE *)v6 + 53) & 2) != 0
    && ((*(_DWORD *)(a1 + 20) & 0x1000) == 0) == ((*((_DWORD *)v6 + 5) & 0x1000) == 0))
  {
    v12 = *((_BYTE *)v6 + 45);
    goto LABEL_129;
  }
  if (((*(_DWORD *)(a1 + 20) & 0x1000) == 0) != ((*((_DWORD *)v6 + 5) & 0x1000) == 0))
  {
LABEL_11:
    v13 = 0;
    v14 = 0;
    v15 = (WebCore::RenderBoxModelObject *)a1;
    goto LABEL_12;
  }
  v12 = *((_BYTE *)v6 + 45);
  if ((v12 & 1) == 0)
    goto LABEL_10;
  if (v10 == 1)
  {
    v79 = 16;
  }
  else
  {
    if (v10 != 3)
      goto LABEL_128;
    v79 = 8;
  }
  if ((*((_BYTE *)v6 + 53) & v79) == 0)
  {
LABEL_128:
    if ((*((_DWORD *)v6 + 24) & 0x1F) == 1 || (*((_DWORD *)v6 + 24) & 0x1F) == 3)
      goto LABEL_129;
    goto LABEL_11;
  }
LABEL_10:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3384) != 2
    || v9 == 37)
  {
    goto LABEL_11;
  }
  v13 = 0;
  if (v9 == 5 || v9 == 12 || (*((_DWORD *)v6 + 5) & 0x1800000) == 0x1000000 || v12 < 0)
  {
    v15 = (WebCore::RenderBoxModelObject *)a1;
    v14 = 0;
    goto LABEL_12;
  }
  v92 = *(_QWORD *)(*((_QWORD *)v6 + 11) + 8);
  v93 = v92 + 4;
  v94 = v92 + 12;
  if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 >= 4)
    v93 = v94;
  if (*(_BYTE *)(v93 + 4))
    goto LABEL_11;
LABEL_129:
  v80 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 8);
  if ((v12 & 1) == 0
    && (*(_WORD *)(v80 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v80 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 40) + 8) + 1272) == v80)
  {
    v109 = 3;
    switch((unsigned __int16)*((_DWORD *)v6 + 31) >> 13)
    {
      case 1:
        v87 = (char *)v6 + 168;
        v88 = *((_DWORD *)v6 + 44);
LABEL_200:
        v108 = 0;
        goto LABEL_151;
      case 2:
      case 4:
        goto LABEL_149;
      case 3:
      case 5:
        v109 = 1;
        goto LABEL_149;
      default:
        v109 = 0;
LABEL_149:
        v87 = (char *)v6 + 168;
        v88 = *((_DWORD *)v6 + v109 + 42);
        v108 = 3;
        switch((unsigned __int16)*((_DWORD *)v6 + 31) >> 13)
        {
          case 1:
            goto LABEL_200;
          case 2:
          case 4:
            v108 = 1;
            break;
          case 3:
          case 5:
            break;
          default:
            v108 = 2;
            break;
        }
LABEL_151:
        v89 = *(_DWORD *)&v87[4 * v108];
        v90 = v88 + v89;
        if (__OFADD__(v88, v89))
          v90 = (v88 >> 31) + 0x7FFFFFFF;
        v91 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(v6);
        v13 = v90 + v91;
        if (__OFADD__(v90, v91))
          v13 = (v90 >> 31) + 0x7FFFFFFF;
        break;
    }
  }
  else
  {
    v13 = 0;
  }
  v81 = WebCore::RenderObject::containingBlock(v7);
  if (v81)
  {
    v82 = v81;
    if (*((_BYTE *)v81 + 46) != 49
      && WebCore::RenderBox::skipContainingBlockForPercentHeightCalculation((WebCore::RenderBox *)a1, v81, ((v8 & 0x1000) == 0) ^ ((*((_DWORD *)v81 + 5) & 0x1000) == 0)))
    {
      v7 = v82;
      while (1)
      {
        v15 = v7;
        v95 = *(_QWORD *)(*((_QWORD *)v7 + 3) + 8);
        if ((*((_BYTE *)v7 + 45) & 1) == 0
          && (*(_WORD *)(v95 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v95 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
          || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 40) + 8) + 1272) == v95)
        {
          v97 = 3;
          switch((unsigned __int16)*((_DWORD *)v7 + 31) >> 13)
          {
            case 1:
              v98 = (char *)v7 + 168;
              v99 = *((_DWORD *)v7 + 44);
LABEL_207:
              v100 = 0;
              goto LABEL_187;
            case 2:
            case 4:
              goto LABEL_185;
            case 3:
            case 5:
              v97 = 1;
              goto LABEL_185;
            default:
              v97 = 0;
LABEL_185:
              v98 = (char *)v7 + 168;
              v99 = *((_DWORD *)v7 + v97 + 42);
              v100 = 3;
              switch((unsigned __int16)*((_DWORD *)v7 + 31) >> 13)
              {
                case 1:
                  goto LABEL_207;
                case 2:
                case 4:
                  v100 = 1;
                  break;
                case 3:
                case 5:
                  break;
                default:
                  v100 = 2;
                  break;
              }
LABEL_187:
              v101 = *(_DWORD *)&v98[4 * v100];
              v25 = __OFADD__(v99, v101);
              v102 = v99 + v101;
              v103 = (v99 >> 31) + 0x7FFFFFFF;
              if (v25)
                v104 = v103;
              else
                v104 = v102;
              v105 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(v15);
              v106 = v104 + v105;
              if (__OFADD__(v104, v105))
                v106 = (v104 >> 31) + 0x7FFFFFFF;
              v25 = __OFADD__(v13, v106);
              v107 = v13 + v106;
              if (v25)
                v13 = (v13 >> 31) + 0x7FFFFFFF;
              else
                v13 = v107;
              break;
          }
        }
        v96 = WebCore::RenderObject::containingBlock(v15);
        v7 = v96;
        if (!v96 || *((_BYTE *)v96 + 46) == 49)
          break;
        v14 = 1;
        if (!WebCore::RenderBox::skipContainingBlockForPercentHeightCalculation((WebCore::RenderBox *)a1, v96, ((v8 & 0x1000) == 0) ^ ((*((_DWORD *)v96 + 5) & 0x1000) == 0)))goto LABEL_12;
      }
      v14 = 1;
    }
    else
    {
      v14 = 1;
      v15 = v7;
      v7 = v82;
    }
  }
  else
  {
    v14 = 1;
    v15 = v7;
    v7 = 0;
  }
LABEL_12:
  if (a3)
    WebCore::RenderBlock::addPercentHeightDescendant(v7, (WebCore::RenderBox *)a1);
  if (((v8 & 0x1000) == 0) != ((*((_BYTE *)v7 + 21) & 0x10) == 0))
  {
    v17 = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth((WebCore::RenderBox *)a1);
    if (v85)
    {
LABEL_18:
      LOBYTE(v18) = v17;
      v19 = v17 >> 8;
      if ((v17 & 0xFF00000000) == 0)
      {
        v38 = 0;
        return v38 | v18 | (v19 << 8);
      }
      goto LABEL_19;
    }
    v86 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)v15 + 1144))(v15);
    LOBYTE(v18) = v86;
    v19 = v86 >> 8;
LABEL_19:
    v20 = v18 | (v19 << 8);
    v21 = (v19 >> 23) + 0x7FFFFFFF;
    if (__OFSUB__(v20, v13))
      v22 = v21;
    else
      v22 = v20 - v13;
    v23 = *(unsigned __int8 *)(a1 + 46);
    if ((v23 == 63 || v23 == 35) && (*(_DWORD *)(a1 + 20) & 0x1800000) == 0x1000000)
    {
      v83 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 960))(v7);
      v84 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 968))(v7);
      v24 = v83 + v84;
      if (__OFADD__(v83, v84))
        v24 = (v83 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v24 = 0;
    }
    v25 = __OFADD__(v22, v24);
    v26 = v22 + v24;
    if (v25)
      v26 = (v22 >> 31) + 0x7FFFFFFF;
    if (*((_BYTE *)a2 + 4) == 4)
    {
      v27 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v27 = (float)*(int *)a2;
LABEL_32:
      v28 = v27 * 64.0;
      if (v28 >= 2147483650.0)
      {
        v18 = 0x7FFFFFFF;
      }
      else if (v28 <= -2147483650.0)
      {
        v18 = 0x80000000;
      }
      else
      {
        v18 = (int)v28;
      }
    }
    else
    {
      v18 = 0;
      switch(*((_BYTE *)a2 + 4))
      {
        case 0:
        case 1:
        case 9:
          v18 = v26;
          break;
        case 3:
          v55 = *(float *)a2;
          if (!*((_BYTE *)a2 + 6))
            v55 = (float)*(int *)a2;
          v27 = (float)((float)((float)v26 * 0.015625) * v55) / 100.0;
          goto LABEL_32;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue(a2, (float)v26 * 0.015625);
          goto LABEL_32;
        default:
          break;
      }
    }
    v29 = *(unsigned __int8 *)(a1 + 46);
    if (v29 == 35
      || v29 == 63
      || (*((_BYTE *)v7 + 46) != 37 ? (v54 = 1) : (v54 = v14),
          (v54 & 1) == 0
       && (unint64_t)WebCore::RenderBox::overridingLogicalHeight(v7) >> 32
       && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 68) & 4) == 0))
    {
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
      if (__OFADD__(v30, v31))
        v32 = (v30 >> 31) + 0x7FFFFFFF;
      else
        v32 = v30 + v31;
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
      v35 = v33 + v34;
      if (__OFADD__(v33, v34))
        v35 = (v33 >> 31) + 0x7FFFFFFF;
      v25 = __OFADD__(v32, v35);
      v36 = v32 + v35;
      if (v25)
        v36 = (v32 >> 31) + 0x7FFFFFFF;
      v25 = __OFSUB__(v18, v36);
      v37 = v18 - v36;
      if (v25)
        v37 = (v18 >> 31) + 0x7FFFFFFF;
      v18 = v37 & ~(v37 >> 31);
    }
    v19 = v18 >> 8;
    goto LABEL_51;
  }
  v16 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalHeightMap + 8);
    v40 = *(_QWORD *)(a1 + 8);
    if (v40 && *(_QWORD *)(v40 + 8))
    {
      v41 = *v16;
      if (*v16)
      {
        v42 = *(_DWORD *)(v41 - 8);
        v43 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
        v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
        v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
        v46 = v42 & ((v45 >> 31) ^ v45);
        for (i = 1; ; ++i)
        {
          v48 = *(_QWORD *)(v41 + 16 * v46);
          if (!v48)
          {
            v50 = *(unsigned int *)(v41 - 4);
            v51 = v41 + 16 * v50;
            v52 = v51;
            goto LABEL_64;
          }
          if (v48 != -1 && v48 == v40)
            break;
          v46 = (v46 + i) & v42;
        }
        v51 = v41 + 16 * v46;
        v50 = *(unsigned int *)(v41 - 4);
        v52 = v41 + 16 * v50;
LABEL_64:
        v111 = v51;
        v53 = v41 + 16 * v50;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v111 = 0;
        v112 = 0;
      }
LABEL_65:
      while (v51 != v53 && !*(_QWORD *)(*(_QWORD *)v51 + 8))
      {
        v71 = v51 + 16;
        v111 = v71;
        v51 = v52;
        if (v71 != v52)
        {
          v51 = v71;
          while ((unint64_t)(*(_QWORD *)v51 + 1) <= 1)
          {
            v51 += 16;
            v111 = v51;
            if (v51 == v52)
            {
              v51 = v52;
              goto LABEL_65;
            }
          }
        }
      }
    }
    else
    {
      WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v110, v16);
      v41 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
    }
    if (v41)
      v41 += 16 * *(unsigned int *)(v41 - 4);
    if (v111 != v41)
    {
      v17 = *(_QWORD *)(v111 + 8);
      goto LABEL_18;
    }
  }
  if (*((_BYTE *)v7 + 46) != 37)
  {
    v17 = WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(v7, (const WebCore::RenderBox *)v16);
    goto LABEL_18;
  }
  if ((v14 & 1) != 0)
  {
LABEL_86:
    v38 = 0;
    LOBYTE(v18) = 0;
    v19 = 0;
    return v38 | v18 | (v19 << 8);
  }
  v56 = WebCore::RenderBox::overridingLogicalHeight(v7);
  if (HIDWORD(v56))
  {
    v58 = v56;
    v59 = WebCore::RenderBoxModelObject::computedCSSPaddingBefore(v7);
    v60 = v58 - v59;
    if (__OFSUB__(v58, v59))
      v60 = (v58 >> 31) + 0x7FFFFFFF;
    v61 = WebCore::RenderBoxModelObject::computedCSSPaddingAfter(v7);
    v62 = v60 - v61;
    if (__OFSUB__(v60, v61))
      v62 = (v60 >> 31) + 0x7FFFFFFF;
    v63 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 1048))(v7);
    v64 = v62 - v63;
    if (__OFSUB__(v62, v63))
      v64 = (v62 >> 31) + 0x7FFFFFFF;
    v65 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 1056))(v7);
    if (__OFSUB__(v64, v65))
      v66 = (v64 >> 31) + 0x7FFFFFFF;
    else
      v66 = v64 - v65;
    v67 = 1360;
    if (((*((_DWORD *)v7 + 31) >> 13) & 6u) - 2 < 4)
      v67 = 1352;
    v68 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + v67))(v7);
    v69 = v68 << 6;
    if (v68 < -33554432)
      v69 = 0x80000000;
    if (v68 > 0x1FFFFFF)
      v69 = 0x7FFFFFFF;
    v25 = __OFSUB__(v66, v69);
    v70 = v66 - v69;
    if (v25)
      v18 = (v66 >> 31) + 0x7FFFFFFF;
    else
      v18 = v70;
    v19 = v18 >> 8;
    goto LABEL_19;
  }
  v57 = *((unsigned __int8 *)v7 + 46);
  if ((*(_BYTE *)(a1 + 22) & 1) == 0)
  {
    if (v57 == 37)
      goto LABEL_86;
LABEL_144:
    __break(0xC471u);
    JUMPOUT(0x1942E1FECLL);
  }
  if (v57 != 37)
    goto LABEL_144;
  if (((unsigned __int16)*(_DWORD *)(a1 + 96) >> 13) - 3 > 1
    || (WebCore::RenderBox::shouldTreatChildAsReplacedInTableCells((WebCore::RenderBox *)a1) & 1) != 0)
  {
    goto LABEL_86;
  }
  v72 = *(_QWORD *)(*((_QWORD *)v7 + 11) + 8);
  v73 = v72 + 4;
  v74 = v72 + 12;
  if (((*((_DWORD *)v7 + 31) >> 13) & 6u) - 2 >= 4)
    v73 = v74;
  if (!*(_BYTE *)(v73 + 4))
  {
    v75 = WebCore::RenderTableCell::table(v7);
    v76 = *(_QWORD *)(*(_QWORD *)(v75 + 88) + 8);
    v77 = v76 + 4;
    v78 = v76 + 12;
    if (((*(_DWORD *)(v75 + 124) >> 13) & 6u) - 2 >= 4)
      v77 = v78;
    if (!*(_BYTE *)(v77 + 4))
      goto LABEL_86;
  }
  LOBYTE(v18) = 0;
  v19 = 0;
LABEL_51:
  v38 = 0x100000000;
  return v38 | v18 | (v19 << 8);
}

WTF *WebCore::RenderBlock::addPercentHeightDescendant(WebCore::RenderBlock *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  WTF *v10;
  char v11;
  int v12;
  WTF **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  int v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  WTF *v35;
  WTF *v36;
  WTF *result;
  void *v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  int v47;
  WTF **v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  WTF **v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  WTF **v75;
  WTF *v76;
  int v77;
  WTF *v78;
  void *v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  WTF **v84;
  unsigned int v86;
  BOOL v87;
  unsigned int v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  WTF *v95;
  WTF *v96;
  _BYTE v97[24];
  WTF *v98;

  v4 = WebCore::percentHeightDescendantsMap;
  if (!WebCore::percentHeightDescendantsMap)
  {
    v89 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v89 = 0;
    v89[1] = 0;
    WebCore::percentHeightDescendantsMap = (uint64_t)v89;
    v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v90 = 0;
    v90[1] = 0;
    WebCore::percentHeightContainerMap = (uint64_t)v90;
    v4 = WebCore::percentHeightDescendantsMap;
  }
  v5 = *(_DWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 12);
  *(_DWORD *)(v4 + 8) = v5 + 1;
  if (v5 > v6)
    WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((WTF **)v4, a2);
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = this;
    v35 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        WTF::fastFree(v35, a2);
        v7 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
  }
  v8 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v87 = __CFADD__(v8, 1);
  v9 = v8 + 1;
  if (v87)
    WTF::fastFree((WTF *)v7, a2);
  else
    *(_DWORD *)v7 = v9;
  v10 = *(WTF **)v4;
  if (*(_QWORD *)v4
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)v4, 8u, 0), (v10 = *(WTF **)v4) != 0))
  {
    v11 = 0;
    v12 = *((_DWORD *)v10 - 2);
  }
  else
  {
    v12 = 0;
    v11 = 1;
  }
  v13 = 0;
  v14 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v12;
    v20 = (uint64_t *)((char *)v10 + 16 * v19);
    v21 = *v20;
    if (*v20 == -1)
    {
      v13 = (WTF **)((char *)v10 + 16 * v19);
      goto LABEL_13;
    }
    if (!v21)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*(_QWORD *)v4 - 16);
        *v13 = (WTF *)v7;
      }
      else
      {
        *v20 = v7;
        v13 = (WTF **)((char *)v10 + 16 * v19);
      }
      v24 = (WTF *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v24 = 0u;
      *((_OWORD *)v24 + 1) = 0u;
      v26 = v13[1];
      v13[1] = v24;
      if (v26)
      {
        v27 = (WTF *)*((_QWORD *)v26 + 1);
        while (v27)
        {
          v95 = v27;
          v27 = (WTF *)*((_QWORD *)v27 + 2);
          v96 = *(WTF **)v95;
          *(_QWORD *)v95 = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 1)
              WTF::fastFree(v96, v25);
            else
              --*(_DWORD *)v96;
          }
          WTF::fastFree(v95, v25);
        }
        if (*(_QWORD *)v26)
          WTF::fastFree((WTF *)(*(_QWORD *)v26 - 16), v25);
        WTF::fastFree(v26, v25);
      }
      v28 = *(WTF **)v4;
      if (*(_QWORD *)v4)
        v29 = *((_DWORD *)v28 - 3) + 1;
      else
        v29 = 1;
      *((_DWORD *)v28 - 3) = v29;
      v30 = *(WTF **)v4;
      if (*(_QWORD *)v4)
        v31 = *((_DWORD *)v30 - 3);
      else
        v31 = 0;
      v32 = (*((_DWORD *)v30 - 4) + v31);
      v33 = *((unsigned int *)v30 - 1);
      if (v33 > 0x400)
      {
        if (v33 <= 2 * v32)
          goto LABEL_41;
      }
      else if (3 * v33 <= 4 * v32)
      {
        if (!(_DWORD)v33)
        {
          v34 = 8;
          goto LABEL_42;
        }
LABEL_41:
        v34 = (_DWORD)v33 << (6 * *((_DWORD *)v30 - 3) >= (2 * v33));
LABEL_42:
        v13 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)v4, v34, v13);
        v30 = *(WTF **)v4;
        if (*(_QWORD *)v4)
          v33 = *((unsigned int *)v30 - 1);
        else
          v33 = 0;
      }
      v23 = (uint64_t *)((char *)v30 + 16 * v33);
      v20 = (uint64_t *)v13;
      goto LABEL_45;
    }
    if (v21 == v7)
      break;
LABEL_13:
    v17 = i + v19;
  }
  if ((v11 & 1) != 0)
    v22 = 0;
  else
    v22 = *((unsigned int *)v10 - 1);
  v23 = (uint64_t *)((char *)v10 + 16 * v22);
  if (*(_DWORD *)v7 == 1)
    WTF::fastFree((WTF *)v7, a2);
  else
    --*(_DWORD *)v7;
LABEL_45:
  v36 = *(WTF **)v4;
  if (*(_QWORD *)v4)
    v36 = (WTF *)((char *)v36 + 16 * *((unsigned int *)v36 - 1));
  if (v20 != (uint64_t *)v36)
  {
    while (!*(_QWORD *)(*v20 + 8))
    {
      v94 = v20 + 2;
      v20 = v23;
      if (v94 != v23)
      {
        v20 = v94;
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          v20 += 2;
          if (v20 == v23)
          {
            v20 = v23;
            break;
          }
        }
      }
      if (v20 == (uint64_t *)v36)
      {
        v20 = (uint64_t *)v36;
        break;
      }
    }
  }
  result = (WTF *)WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(v20[1], a2, (uint64_t)v97);
  if (!v97[16])
    return result;
  v39 = (uint64_t *)WebCore::percentHeightContainerMap;
  v40 = *(_DWORD *)(WebCore::percentHeightContainerMap + 8);
  v41 = *(_DWORD *)(WebCore::percentHeightContainerMap + 12);
  *(_DWORD *)(WebCore::percentHeightContainerMap + 8) = v40 + 1;
  if (v40 > v41)
    WTF::WeakHashMap<WebCore::RenderBox const,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v39, v38);
  v42 = *((_QWORD *)a2 + 1);
  if (!v42)
  {
    v42 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = a2;
    v78 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v42;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
      {
        WTF::fastFree(v78, v38);
        v42 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v78;
      }
    }
  }
  v43 = *(_DWORD *)v42;
  *(_DWORD *)v42 += 2;
  v87 = __CFADD__(v43, 1);
  v44 = v43 + 1;
  if (v87)
    WTF::fastFree((WTF *)v42, v38);
  else
    *(_DWORD *)v42 = v44;
  v45 = *v39;
  if (*v39
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(v39),
        (v45 = *v39) != 0))
  {
    v46 = 0;
    v47 = *(_DWORD *)(v45 - 8);
  }
  else
  {
    v47 = 0;
    v46 = 1;
  }
  v48 = 0;
  v49 = (~(v42 << 32) + v42) ^ ((unint64_t)(~(v42 << 32) + v42) >> 22);
  v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
  v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
  v52 = (v51 >> 31) ^ v51;
  v53 = 1;
  while (2)
  {
    v54 = v52 & v47;
    v55 = v45 + 24 * v54;
    v56 = *(_QWORD *)v55;
    if (!*(_QWORD *)v55)
    {
      if (v48)
      {
        *v48 = 0;
        v48[1] = 0;
        v48[2] = 0;
        --*(_DWORD *)(*v39 - 16);
        *v48 = (WTF *)v42;
      }
      else
      {
        *(_QWORD *)v55 = v42;
        v48 = (WTF **)(v45 + 24 * v54);
      }
      v57 = (WTF **)v48[1];
      v48[1] = 0;
      if (v57)
      {
        v74 = *((unsigned int *)v57 - 1);
        if ((_DWORD)v74)
        {
          v75 = v57;
          do
          {
            v76 = *v75;
            if (*v75 != (WTF *)-1)
            {
              *v75 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 1)
                  WTF::fastFree(v76, v38);
                else
                  --*(_DWORD *)v76;
              }
            }
            ++v75;
            --v74;
          }
          while (v74);
        }
        WTF::fastFree((WTF *)(v57 - 2), v38);
      }
      v48[2] = 0;
      v58 = *v39;
      if (*v39)
        v59 = *(_DWORD *)(v58 - 12) + 1;
      else
        v59 = 1;
      *(_DWORD *)(v58 - 12) = v59;
      v60 = *v39;
      if (*v39)
        v61 = *(_DWORD *)(v60 - 12);
      else
        v61 = 0;
      v62 = (*(_DWORD *)(v60 - 16) + v61);
      v63 = *(unsigned int *)(v60 - 4);
      if (v63 > 0x400)
      {
        if (v63 > 2 * v62)
          goto LABEL_72;
      }
      else
      {
        if (3 * v63 > 4 * v62)
        {
LABEL_72:
          v64 = v60 + 24 * v63;
          v55 = (uint64_t)v48;
          goto LABEL_73;
        }
        if (!(_DWORD)v63)
        {
          v81 = 8;
          goto LABEL_117;
        }
      }
      v81 = (_DWORD)v63 << (6 * *(_DWORD *)(v60 - 12) >= (2 * v63));
LABEL_117:
      v48 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v39, v81, v48);
      v60 = *v39;
      if (*v39)
        LODWORD(v63) = *(_DWORD *)(v60 - 4);
      else
        LODWORD(v63) = 0;
      goto LABEL_72;
    }
    if (v56 == -1)
    {
      v48 = (WTF **)(v45 + 24 * v54);
      goto LABEL_61;
    }
    if (v56 != v42)
    {
LABEL_61:
      v52 = v53 + v54;
      ++v53;
      continue;
    }
    break;
  }
  if ((v46 & 1) != 0)
    v88 = 0;
  else
    v88 = *(_DWORD *)(v45 - 4);
  v64 = v45 + 24 * v88;
  if (*(_DWORD *)v42 == 1)
    WTF::fastFree((WTF *)v42, v38);
  else
    --*(_DWORD *)v42;
LABEL_73:
  v65 = *v39;
  if (*v39)
    v65 += 24 * *(unsigned int *)(v65 - 4);
  if (v55 != v65)
  {
    while (!*(_QWORD *)(*(_QWORD *)v55 + 8))
    {
      v91 = v55 + 24;
      v55 = v64;
      if (v91 != v64)
      {
        v55 = v91;
        while ((unint64_t)(*(_QWORD *)v55 + 1) <= 1)
        {
          v55 += 24;
          if (v55 == v64)
          {
            v55 = v64;
            break;
          }
        }
      }
      if (v55 == v65)
      {
        v55 = v65;
        break;
      }
    }
  }
  v66 = (uint64_t *)(v55 + 8);
  v67 = *(_DWORD *)(v55 + 20);
  v68 = *(_DWORD *)(v55 + 16) + 1;
  *(_DWORD *)(v55 + 16) = v68;
  if (v68 > v67)
  {
    v69 = *v66;
    if (!*v66)
      goto LABEL_79;
    v77 = *(_DWORD *)(v69 - 4);
    if (!v77)
    {
LABEL_97:
      *(_DWORD *)(v55 + 16) = 0;
      goto LABEL_98;
    }
    v82 = 0;
    v83 = v77 - 1;
    do
    {
      v84 = (WTF **)(v69 + 8 * v83);
      if ((unint64_t)*v84 + 1 >= 2 && !*((_QWORD *)*v84 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v84, v38);
        ++v82;
      }
    }
    while ((unint64_t)v83--);
    v69 = *v66;
    if (v82)
    {
      *(_DWORD *)(v69 - 16) += v82;
      v92 = *v66;
      if (*v66)
        v93 = *(_DWORD *)(v92 - 12);
      else
        v93 = 0;
      *(_DWORD *)(v92 - 12) = v93 - v82;
      v69 = *v66;
    }
    if (!v69)
    {
LABEL_79:
      v70 = 0;
      *(_DWORD *)(v55 + 16) = 0;
      goto LABEL_80;
    }
    v86 = *(_DWORD *)(v69 - 4);
    v87 = v86 < 9 || 6 * *(_DWORD *)(v69 - 12) >= v86;
    if (v87)
      goto LABEL_97;
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v55 + 8));
    v69 = *(_QWORD *)(v55 + 8);
    *(_DWORD *)(v55 + 16) = 0;
    if (v69)
    {
LABEL_98:
      v70 = *(_DWORD *)(v69 - 12);
      v71 = 0x7FFFFFFF;
      if (v70 < 0x7FFFFFFF)
        goto LABEL_80;
    }
    else
    {
      v70 = 0;
LABEL_80:
      v71 = v70;
    }
    *(_DWORD *)(v55 + 20) = 2 * v71;
  }
  v72 = (WTF *)*((_QWORD *)this + 1);
  if (!v72)
  {
    v72 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v72 = 1;
    *((_QWORD *)v72 + 1) = this;
    v80 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v72;
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
      {
        WTF::fastFree(v80, v79);
        v72 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v80;
      }
    }
  }
  *(_DWORD *)v72 += 2;
  v98 = v72;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)(v55 + 8), &v98, (uint64_t)v97);
  result = v98;
  v98 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v73);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v72 == 1)
    return (WTF *)WTF::fastFree(v72, v73);
  --*(_DWORD *)v72;
  return result;
}

uint64_t WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(WebCore::RenderBlock *this, const WebCore::RenderBox *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double *v59;
  double v60;
  double v61;
  int v62;
  int v63;
  BOOL v64;
  char *v65;
  int v66;
  char v67;
  double v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  double v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];

  v3 = *((_BYTE *)this + 52) & 7;
  if (v3 == 1 && (*((_BYTE *)this + 53) & 2) != 0)
  {
LABEL_65:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    return v22 & 0x100000000 | v21 | v23;
  }
  v4 = *((unsigned __int8 *)this + 46);
  if (v4 == 49)
  {
LABEL_6:
    v5 = *((_QWORD *)this + 4);
    if (!v5)
      goto LABEL_10;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      goto LABEL_10;
    if ((*(char *)(v6 + 45) & 0x80000000) == 0 || (*((_DWORD *)this + 5) & 0x400) != 0)
    {
LABEL_9:
      if (*(_BYTE *)(v6 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
      {
        v28 = WebCore::RenderBox::overridingLogicalHeight(this);
        if (HIDWORD(v28))
          goto LABEL_41;
      }
LABEL_10:
      v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v7 + 8) == 4)
        {
          v8 = v7 + 4;
          goto LABEL_13;
        }
      }
      else if (*(_BYTE *)(v7 + 16) == 4)
      {
        v8 = v7 + 12;
LABEL_13:
        if (*(_BYTE *)(v8 + 6))
          v9 = *(float *)v8;
        else
          v9 = (float)*(int *)v8;
        v10 = v9 * 64.0;
        if (v10 >= 2147483650.0)
        {
          v11 = 0x17FFFFFFFLL;
        }
        else if (v10 <= -2147483650.0)
        {
          v11 = 0x180000000;
        }
        else
        {
          v11 = (int)v10 | 0x100000000;
        }
        goto LABEL_18;
      }
      if (WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(this, a2))
      {
        if (*((_BYTE *)this + 46) != 12 || (*((_BYTE *)this + 21) & 0x20) == 0)
          goto LABEL_77;
        v34 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        v35 = v34 + 12;
        v36 = v34 + 4;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
          v35 = v36;
        v37 = *(unsigned __int8 *)(v35 + 4);
        v38 = v37 > 0xB;
        v39 = (1 << v37) & 0x818;
        if (!v38 && v39 != 0)
        {
LABEL_77:
          v41 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1016))(this);
          v42 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1024))(this);
          v43 = v41 + v42;
          if (__OFADD__(v41, v42))
            v43 = (v41 >> 31) + 0x7FFFFFFF;
          v44 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 944))(this);
          v45 = v43 + v44;
          if (__OFADD__(v43, v44))
            v45 = (v43 >> 31) + 0x7FFFFFFF;
          v46 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 952))(this);
          v47 = v45 + v46;
          if (__OFADD__(v45, v46))
            v47 = (v45 >> 31) + 0x7FFFFFFF;
          v48 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1000))(this);
          v49 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1008))(this);
          v50 = v48 + v49;
          if (__OFADD__(v48, v49))
            v50 = (v48 >> 31) + 0x7FFFFFFF;
          v51 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 928))(this);
          v52 = v50 + v51;
          if (__OFADD__(v50, v51))
            v52 = (v50 >> 31) + 0x7FFFFFFF;
          v53 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 936))(this);
          v54 = v52 + v53;
          if (__OFADD__(v52, v53))
            v54 = (v52 >> 31) + 0x7FFFFFFF;
          v55 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
          v56 = *((_QWORD *)this + 11);
          v57 = *(_QWORD *)(v56 + 32);
          v58 = (double *)(v57 + 112);
          if (v55 >= 4)
            v59 = (double *)(v57 + 112);
          else
            v59 = (double *)(v57 + 104);
          if (v55 >= 4)
            v58 = (double *)(v57 + 104);
          v60 = *v58 / *v59 * 64.0;
          if (v60 >= 2147483650.0)
          {
            v61 = 33554432.0;
          }
          else if (v60 <= -2147483650.0)
          {
            v61 = -33554432.0;
          }
          else
          {
            v61 = (double)(int)v60 * 0.015625;
          }
          v62 = *(_DWORD *)(v57 + 148) & 0x60;
          if (v62 == 64)
            LOBYTE(v63) = 0;
          else
            v63 = (*(unsigned __int8 *)(*(_QWORD *)(v56 + 8) + 68) >> 2) & 1;
          v64 = v55 >= 4;
          v65 = (char *)this + 164;
          if (v64)
            v65 = (char *)this + 160;
          v66 = *(_DWORD *)v65;
          v67 = v63 ^ 1;
          if (v62 != 32)
            v67 = 1;
          if ((v67 & 1) != 0 || (*((_BYTE *)this + 52) & 7) == 3)
          {
            v16 = __OFSUB__(v66, v47);
            v91 = v66 - v47;
            v92 = (v66 >> 31) + 0x7FFFFFFF;
            if (!v16)
              v92 = v91;
            v93 = (double)v92 * 0.015625 / v61 * 64.0;
            if (v93 >= 2147483650.0)
            {
              v94 = 0x7FFFFFFF;
            }
            else if (v93 <= -2147483650.0)
            {
              v94 = 0x80000000;
            }
            else
            {
              v94 = (int)v93;
            }
            v20 = v94 + v54;
            if (__OFADD__(v94, v54))
              v20 = (v94 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v68 = (double)v66 * 0.015625 / v61 * 64.0;
            if (v68 >= 2147483650.0)
            {
              v69 = 0x7FFFFFFF;
            }
            else if (v68 <= -2147483650.0)
            {
              v69 = 0x80000000;
            }
            else
            {
              v69 = (int)v68;
            }
            if (v69 <= v54)
              v20 = v54;
            else
              v20 = v69;
          }
          goto LABEL_151;
        }
LABEL_169:
        v22 = 0;
        goto LABEL_170;
      }
      v70 = *((_DWORD *)this + 31);
      v71 = *((_QWORD *)this + 11);
      if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
      {
        v72 = ((v70 >> 13) & 6) - 2;
        v73 = *(_QWORD *)(v71 + 8);
        v74 = v73 + 4;
        if (v72 >= 4)
          v74 = v73 + 12;
        if (*(_BYTE *)(v74 + 4)
          || ((v95 = *(_QWORD *)(v71 + 24), v96 = (unsigned __int16)v70 >> 13, (v96 - 1) > 4)
            ? (v97 = 0)
            : (v97 = qword_1969FC6C8[v96 - 1]),
              (v98 = v95 + 8, *(_BYTE *)(v98 + 8 * v97 + 4))
           && ((v99 = v96 - 1, v99 > 4) ? (v100 = 2) : (v100 = qword_1969FC6F0[v99]),
               *(_BYTE *)(v98 + 8 * v100 + 4))))
        {
          v75 = (char *)this + 160;
          if (v72 >= 4)
            v75 = (char *)this + 164;
          (*(void (**)(_QWORD *__return_ptr, WebCore::RenderBlock *, _QWORD, _QWORD))(*(_QWORD *)this + 1312))(v101, this, *(unsigned int *)v75, 0);
          v76 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1048))(this);
          v77 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 960))(this);
          if (__OFADD__(v76, v77))
            v78 = (v76 >> 31) + 0x7FFFFFFF;
          else
            v78 = v76 + v77;
          v79 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1056))(this);
          v80 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 968))(this);
          v81 = v79 + v80;
          if (__OFADD__(v79, v80))
            v81 = (v79 >> 31) + 0x7FFFFFFF;
          v16 = __OFADD__(v78, v81);
          v82 = v78 + v81;
          v83 = (v78 >> 31) + 0x7FFFFFFF;
          if (!v16)
            v83 = v82;
          v84 = LODWORD(v101[0]) - v83;
          if (__OFSUB__(v101[0], v83))
            v84 = (LODWORD(v101[0]) >> 31) + 0x7FFFFFFF;
          v85 = 1360;
          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
            v85 = 1352;
          v86 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + v85))(this);
          v87 = v86 << 6;
          if (v86 < -33554432)
            v87 = 0x80000000;
          if (v86 > 0x1FFFFFF)
            v87 = 0x7FFFFFFF;
          v16 = __OFSUB__(v84, v87);
          v88 = v84 - v87;
          if (v16)
            v88 = (v84 >> 31) + 0x7FFFFFFF;
          v20 = v88 & ~(v88 >> 31);
          goto LABEL_28;
        }
      }
      else
      {
        v73 = *(_QWORD *)(v71 + 8);
        v72 = ((v70 >> 13) & 6) - 2;
      }
      if (v72 <= 3)
      {
        if ((*(_BYTE *)(v73 + 8) & 0xF7) == 3)
        {
          v89 = v73 + 4;
LABEL_142:
          v90 = WebCore::RenderBox::computePercentageLogicalHeight(this, v89, 1);
          v22 = HIDWORD(v90);
          if (HIDWORD(v90))
          {
            v11 = v90 | 0x100000000;
LABEL_18:
            v12 = (*(uint64_t (**)(WebCore::RenderBlock *, uint64_t))(*(_QWORD *)this + 1272))(this, v11);
            v13 = 1360;
            if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
              v13 = 1352;
            v14 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + v13))(this);
            v15 = v14 << 6;
            if (v14 < -33554432)
              v15 = 0x80000000;
            if (v14 > 0x1FFFFFF)
              v15 = 0x7FFFFFFF;
            v16 = __OFSUB__(v12, v15);
            v17 = v12 - v15;
            if (v16)
              v18 = (v12 >> 31) + 0x7FFFFFFF;
            else
              v18 = v17;
            v19 = WebCore::RenderBox::constrainContentBoxLogicalHeightByMinMax(this, v18, 0);
            v20 = v19 & ~(v19 >> 31);
LABEL_28:
            LODWORD(v21) = v20 & 0x7FFFFF00;
LABEL_29:
            v22 = 0x100000000;
LABEL_30:
            v21 = v21;
            v23 = v20;
            return v22 & 0x100000000 | v21 | v23;
          }
LABEL_170:
          LOBYTE(v20) = 0;
          LODWORD(v21) = 0;
          goto LABEL_30;
        }
      }
      else if ((*(_BYTE *)(v73 + 16) & 0xF7) == 3)
      {
        v89 = v73 + 12;
        goto LABEL_142;
      }
      if (*((_BYTE *)this + 46) == 49)
      {
        v20 = WebCore::RenderView::pageOrViewLogicalHeight(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 1944));
        goto LABEL_151;
      }
      goto LABEL_169;
    }
    v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 32) + 16) + 20);
    v26 = (v25 >> 1) & 1;
    v27 = (v25 & 2) == 0;
    if ((*(_BYTE *)(v6 + 21) & 0x10) != 0)
      v27 = v26;
    if (v27 == (*((_DWORD *)this + 5) & 0x1000u) >> 12)
    {
      v28 = WebCore::RenderFlexibleBox::usedChildOverridingMainSizeForPercentageResolution((WebCore::RenderFlexibleBox *)v6, this);
    }
    else
    {
      if (WebCore::RenderFlexibleBox::alignmentForChild((WebCore::RenderFlexibleBox *)v6, this) != 3)
        goto LABEL_42;
      v28 = WebCore::RenderBox::overridingLogicalHeight(this);
    }
    if ((v28 & 0xFF00000000) != 0)
    {
LABEL_41:
      v20 = WebCore::RenderBox::overridingContentLogicalHeight((uint64_t)this, v28);
LABEL_151:
      LODWORD(v21) = v20 & 0xFFFFFF00;
      goto LABEL_29;
    }
LABEL_42:
    v29 = *((_QWORD *)this + 4);
    if (!v29)
      goto LABEL_10;
    v6 = *(_QWORD *)(v29 + 8);
    if (!v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
LABEL_5:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) == 2
      && v4 != 37
      && v4 != 5
      && (*((char *)this + 45) & 0x80000000) == 0
      && v4 != 12
      && (*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
    {
      v31 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      v32 = v31 + 4;
      v33 = v31 + 12;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
        v32 = v33;
      if (!*(_BYTE *)(v32 + 4))
        goto LABEL_65;
    }
    goto LABEL_6;
  }
  if (v3 == 1)
  {
    v30 = 16;
  }
  else
  {
    if (v3 != 3)
      goto LABEL_51;
    v30 = 8;
  }
  if ((*((_BYTE *)this + 53) & v30) != 0)
    goto LABEL_5;
LABEL_51:
  v21 = 0;
  v22 = 0;
  v23 = 0;
  if ((*((_DWORD *)this + 24) & 0x1F) != 1 && (*((_DWORD *)this + 24) & 0x1F) != 3)
    goto LABEL_6;
  return v22 & 0x100000000 | v21 | v23;
}

uint64_t WebCore::RenderBox::constrainContentBoxLogicalHeightByMinMax(WebCore::RenderBox *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  float v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  WebCore::RenderObject *v46;

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8);
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 <= 3)
  {
    if (*(_BYTE *)(v6 + 32) == 13)
      goto LABEL_3;
    v38 = v6 + 28;
  }
  else
  {
    if (*(_BYTE *)(v6 + 48) == 13)
      goto LABEL_3;
    v38 = v6 + 44;
  }
  v39 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing(a1, 2, v38, a3);
  if (HIDWORD(v39))
  {
    v40 = (*(uint64_t (**)(WebCore::RenderBox *, unint64_t))(*(_QWORD *)a1 + 1272))(a1, v39);
    v41 = 1360;
    if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
      v41 = 1352;
    v42 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + v41))(a1);
    v43 = v42 << 6;
    if (v42 < -33554432)
      v43 = 0x80000000;
    if (v42 > 0x1FFFFFF)
      v43 = 0x7FFFFFFF;
    v19 = __OFSUB__(v40, v43);
    v44 = v40 - v43;
    if (v19)
      v44 = (v40 >> 31) + 0x7FFFFFFF;
    v45 = v44 & ~(v44 >> 31);
    if (v45 >= (int)a2)
      a2 = a2;
    else
      a2 = v45;
  }
LABEL_3:
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8);
  v8 = v7 + 20;
  v9 = v7 + 36;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 >= 4)
    v10 = v9;
  else
    v10 = v8;
  v11 = *(unsigned __int8 *)(v10 + 4);
  if (*(_BYTE *)(v10 + 4))
  {
    if ((v11 - 5) >= 6)
    {
      if (v11 == 4)
      {
        v36 = *(float *)v10;
        if (!*(_BYTE *)(v10 + 6))
          v36 = (float)*(int *)v10;
        v37 = v36 * 64.0;
        if (v37 >= 2147483650.0)
        {
          LODWORD(v13) = 0x7FFFFFFF;
        }
        else if (v37 <= -2147483650.0)
        {
          LODWORD(v13) = 0x80000000;
        }
        else
        {
          LODWORD(v13) = (int)v37;
        }
        goto LABEL_56;
      }
      if ((v11 & 0xFFFFFFF7) != 3)
        return a2;
      v13 = WebCore::RenderBox::computePercentageLogicalHeight(a1, v10, 1);
      LODWORD(v12) = v13 & 0xFFFFFF00;
      v32 = v13 & 0x100000000;
LABEL_48:
      if ((v32 & 0x100000000) != 0)
      {
        v14 = v32 & 0x100000000;
        goto LABEL_14;
      }
      return a2;
    }
    v22 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1048))(a1);
    v23 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 960))(a1);
    if (__OFADD__(v22, v23))
      v24 = (v22 >> 31) + 0x7FFFFFFF;
    else
      v24 = v22 + v23;
    v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1056))(a1);
    v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 968))(a1);
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      v27 = (v25 >> 31) + 0x7FFFFFFF;
    v19 = __OFADD__(v24, v27);
    v28 = v24 + v27;
    if (v19)
      v29 = (v24 >> 31) + 0x7FFFFFFF;
    else
      v29 = v28;
    if ((v11 - 7) >= 2 && v11 != 10 && (v11 - 5) > 1)
    {
      if (v11 != 9)
      {
        LOBYTE(v13) = 0;
        LODWORD(v12) = 0;
        goto LABEL_46;
      }
      v46 = WebCore::RenderObject::containingBlock(a1);
      LODWORD(v13) = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v46 + 1344))(v46, 0);
      if (__OFSUB__((_DWORD)v13, v29))
        LODWORD(v13) = (v13 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v13) = v13 - v29;
    }
    else
    {
      if ((a3 & 0xFF00000000) == 0)
      {
        v32 = 0;
        LOBYTE(v13) = 0;
        LODWORD(v12) = 0;
        goto LABEL_47;
      }
      LODWORD(v13) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)a1 + 1280))(a1, a3);
    }
    LODWORD(v12) = v13 & 0xFFFFFF00;
LABEL_46:
    v32 = 0x100000000;
LABEL_47:
    LOBYTE(v13) = v12 | v13;
    goto LABEL_48;
  }
  if ((a3 & 0xFF00000000) == 0)
  {
LABEL_11:
    LODWORD(v12) = 0;
    goto LABEL_12;
  }
  v12 = *((_QWORD *)a1 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_63;
    if (*(char *)(v13 + 45) < 0 && (*((_DWORD *)a1 + 5) & 0x400) == 0)
    {
      v33 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 32) + 16) + 20);
      v34 = (v33 >> 1) & 1;
      v35 = (v33 & 2) == 0;
      if ((*(_BYTE *)(v13 + 21) & 0x10) != 0)
        v35 = v34;
      if (v35 == (*((_DWORD *)a1 + 5) & 0x1000u) >> 12)
      {
        LODWORD(v13) = WebCore::RenderFlexibleBox::shouldApplyMinSizeAutoForChild((WebCore::RenderFlexibleBox *)v13, a1);
        if ((_DWORD)v13)
        {
          LODWORD(v13) = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)a1 + 1280))(a1, a3);
LABEL_56:
          LODWORD(v12) = v13 & 0xFFFFFF00;
          goto LABEL_13;
        }
LABEL_63:
        LODWORD(v12) = 0;
        goto LABEL_13;
      }
    }
    goto LABEL_11;
  }
LABEL_12:
  LOBYTE(v13) = 0;
LABEL_13:
  v14 = 0x100000000;
LABEL_14:
  v15 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)a1 + 1272))(a1, v14 | v13 | v12);
  v16 = 1360;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
    v16 = 1352;
  v17 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + v16))(a1);
  v18 = v17 << 6;
  if (v17 < -33554432)
    v18 = 0x80000000;
  if (v17 > 0x1FFFFFF)
    v18 = 0x7FFFFFFF;
  v19 = __OFSUB__(v15, v18);
  v20 = v15 - v18;
  if (v19)
    v20 = (v15 >> 31) + 0x7FFFFFFF;
  if (v20 <= (int)a2)
    v20 = a2;
  return v20 & ~(v20 >> 31);
}

WebCore::RenderView *WebCore::RenderView::computeLogicalHeight@<X0>(WebCore::RenderView *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  int v5;
  BOOL shouldUsePrintingLayout;
  WebCore::RenderView *v8;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 8) + 40) + 8) + 3382)
    || (v8 = result,
        shouldUsePrintingLayout = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)result + 31) + 328)),
        v5 = a2,
        result = v8,
        !shouldUsePrintingLayout))
  {
    result = (WebCore::RenderView *)WebCore::RenderView::viewLogicalHeight(result);
    v4 = (_DWORD)result << 6;
    if ((int)result < -33554432)
      v4 = 0x80000000;
    if ((int)result <= 0x1FFFFFF)
      v5 = v4;
    else
      v5 = 0x7FFFFFFF;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  return result;
}

uint64_t WebCore::RenderView::pageOrViewLogicalHeight(uint64_t this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  char hasInlineColumnAxis;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _BOOL4 shouldUsePrintingLayout;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 3382)
    && (v11 = this,
        shouldUsePrintingLayout = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*(_QWORD *)(this + 248) + 328)),
        this = v11,
        shouldUsePrintingLayout))
  {
    if (*(_BYTE *)(v11 + 392))
      return *(unsigned int *)(v11 + 388);
    else
      __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(this + 224);
    if (v1
      && (v4 = *(_QWORD *)(v1 + 24)) != 0
      && *(_QWORD *)(v4 + 8)
      && (v10 = this,
          hasInlineColumnAxis = WebCore::RenderStyle::hasInlineColumnAxis((WebCore::RenderStyle *)(this + 80)),
          this = v10,
          (hasInlineColumnAxis & 1) == 0)
      && (v6 = WebCore::LocalFrameView::pagination(*(WebCore::LocalFrameView **)(v10 + 248)),
          this = v10,
          (v7 = *(_DWORD *)(v6 + 4)) != 0))
    {
      v8 = v7 << 6;
      if (v7 < -33554432)
        v8 = 0x80000000;
      if (v7 <= 0x1FFFFFF)
        return v8;
      else
        return 0x7FFFFFFFLL;
    }
    else
    {
      v2 = WebCore::RenderView::viewLogicalHeight((WebCore::RenderView *)this);
      v3 = v2 << 6;
      if (v2 < -33554432)
        v3 = 0x80000000;
      if (v2 <= 0x1FFFFFF)
        return v3;
      else
        return 0x7FFFFFFFLL;
    }
  }
  return this;
}

uint64_t WebCore::RenderView::viewLogicalHeight(WebCore::RenderView *this)
{
  uint64_t v2;
  unint64_t v3;
  float v4;

  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382)
      && WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328)))
    {
      return 0;
    }
    v2 = *((_QWORD *)this + 31);
    if (*(int *)(v2 + 248) >= 1 && *(int *)(v2 + 252) >= 1 && *(_BYTE *)(v2 + 321))
    {
      LODWORD(v3) = *(_DWORD *)(v2 + 252);
    }
    else
    {
      v3 = WebCore::ScrollView::sizeForUnobscuredContent((id *)v2, 0) >> 32;
      if (!*(_BYTE *)(*((_QWORD *)this + 31) + 321))
      {
        v4 = (float)(int)v3;
        return (int)v4;
      }
    }
    v4 = ceilf(*(float *)(*((_QWORD *)this + 13) + 184) * (float)(int)v3);
    return (int)v4;
  }
  return WebCore::RenderView::viewWidth(this);
}

unint64_t WebCore::ScrollView::sizeForUnobscuredContent(id *this, char a2)
{
  char *v3;
  int v4;
  unint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  WebCore::Widget *v13;
  int v14;
  WebCore::Widget *v15;
  unint64_t v16;
  unint64_t v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  const CGRect *v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  const CGRect *v27;
  int v28;
  int v29;
  int v30;
  CGRect v31;

  if (this[5])
  {
    v17 = WebCore::ScrollView::platformVisibleContentSize(this, a2);
    v11 = HIDWORD(v17);
    v10 = v17;
    return v10 | (v11 << 32);
  }
  if ((a2 & 1) != 0)
  {
    LODWORD(v5) = 0;
    v4 = 0;
  }
  else
  {
    v3 = (char *)(this + 8);
    if (!(*((uint64_t (**)(char *))this[8] + 50))((char *)this + 64)
      || (v13 = (WebCore::Widget *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 400))((char *)this + 64),
          ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v13 + 272))(v13) & 1) != 0))
    {
      v4 = 0;
    }
    else
    {
      WebCore::Widget::frameRect(v13);
      v4 = v14;
    }
    if (!(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 392))((char *)this + 64)
      || (v15 = (WebCore::Widget *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 392))((char *)this + 64),
          ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v15 + 272))(v15) & 1) != 0))
    {
      LODWORD(v5) = 0;
    }
    else
    {
      WebCore::Widget::frameRect(v15);
      v5 = HIDWORD(v16);
    }
    v6 = this[5];
    if (v6)
    {
      v30 = v5;
      if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
        v6 = (id)objc_msgSend(v6, "superview");
      objc_msgSend(v6, "frame");
      v31.origin.x = v23;
      v31.origin.y = v24;
      v31.size.width = v25;
      v31.size.height = v26;
      WebCore::enclosingIntRect(&v31, v27);
      LODWORD(v5) = v30;
      goto LABEL_9;
    }
  }
  v7 = this[7];
LABEL_9:
  v8 = this[5];
  if (v8)
  {
    v28 = (int)v7;
    v29 = v5;
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE342188))
      v8 = (id)objc_msgSend(v8, "superview");
    objc_msgSend(v8, "frame");
    v31.origin.x = v18;
    v31.origin.y = v19;
    v31.size.width = v20;
    v31.size.height = v21;
    WebCore::enclosingIntRect(&v31, v22);
    HIDWORD(v9) = HIDWORD(v7);
    LODWORD(v7) = v28;
    LODWORD(v5) = v29;
  }
  else
  {
    v9 = this[7];
  }
  v10 = ((_DWORD)v7 - v4) & ~(((int)v7 - v4) >> 31);
  v11 = (int)(float)((float)(int)((HIDWORD(v9) - v5) & ~((HIDWORD(v9) - (int)v5) >> 31))
                                 - (*((float (**)(id *, _QWORD))*this + 51))(this, 0));
  return v10 | (v11 << 32);
}

WTF **WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(WTF **result, void *a2)
{
  WTF **v2;
  WTF *v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;

  v2 = result;
  v3 = *result;
  if (!*result)
    goto LABEL_34;
  v4 = *((_DWORD *)v3 - 1);
  if (!v4)
  {
LABEL_14:
    *((_DWORD *)v2 + 2) = 0;
    goto LABEL_15;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    result = (WTF **)((char *)v3 + 16 * v6);
    if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
    {
      result = (WTF **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>::customDeleteBucket(result, a2);
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  v3 = *v2;
  if (v5)
  {
    *((_DWORD *)v3 - 4) += v5;
    v13 = *v2;
    if (*v2)
      v14 = *((_DWORD *)v13 - 3);
    else
      v14 = 0;
    *((_DWORD *)v13 - 3) = v14 - v5;
    v3 = *v2;
  }
  if (!v3)
  {
LABEL_34:
    v11 = 0;
    *((_DWORD *)v2 + 2) = 0;
    goto LABEL_16;
  }
  v8 = *((_DWORD *)v3 - 1);
  v9 = *((unsigned int *)v3 - 3);
  if (6 * (int)v9 >= v8 || v8 < 9)
    goto LABEL_14;
  v15 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = (v16 | HIWORD(v16)) + 1;
  if (v17 > 0x400)
  {
    if (v17 > 2 * v9)
      goto LABEL_33;
  }
  else if (3 * v17 > 4 * v9)
  {
LABEL_24:
    v18 = (double)v9;
    v19 = (double)v17;
    v20 = 0.604166667;
    goto LABEL_25;
  }
  LODWORD(v17) = 2 * v17;
  if (v17 <= 0x400)
    goto LABEL_24;
LABEL_33:
  v18 = (double)v9;
  v19 = (double)v17;
  v20 = 0.416666667;
LABEL_25:
  if (v19 * v20 <= v18)
    LODWORD(v17) = 2 * v17;
  if (v17 <= 8)
    v21 = 8;
  else
    v21 = v17;
  result = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)v2, v21, 0);
  v3 = *v2;
  *((_DWORD *)v2 + 2) = 0;
  if (!v3)
  {
    v11 = 0;
    goto LABEL_16;
  }
LABEL_15:
  v11 = *((_DWORD *)v3 - 3);
  v12 = 0x7FFFFFFF;
  if (v11 < 0x7FFFFFFF)
LABEL_16:
    v12 = v11;
  *((_DWORD *)v2 + 3) = 2 * v12;
  return result;
}

uint64_t WebCore::RenderBox::containingBlockLogicalHeightForContent(WebCore::RenderBox *a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  result = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(a1);
  if (!v5 || (result & 0xFF00000000) == 0)
  {
    result = (uint64_t)WebCore::RenderObject::containingBlock(a1);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 1344))(result, a2);
  }
  return result;
}

uint64_t *WTF::WeakHashMap<WebCore::RenderBox const,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = result;
  v3 = *result;
  if (!*result)
    goto LABEL_50;
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_28:
    *((_DWORD *)v2 + 2) = 0;
    goto LABEL_29;
  }
  v5 = 0;
  do
  {
    v6 = (uint64_t **)(v3 + 24 * --v4);
    result = *v6;
    if ((unint64_t)*v6 + 1 >= 2 && !result[1])
    {
      *v6 = 0;
      if (*(_DWORD *)result == 1)
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      else
        --*(_DWORD *)result;
      *v6 = (uint64_t *)-1;
      v7 = v3 + 24 * v4;
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(unsigned int *)(v8 - 4);
        if ((_DWORD)v9)
        {
          v10 = *(WTF ***)(v7 + 8);
          do
          {
            v11 = *v10;
            if (*v10 != (WTF *)-1)
            {
              *v10 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 1)
                  WTF::fastFree(v11, a2);
                else
                  --*(_DWORD *)v11;
              }
            }
            ++v10;
            --v9;
          }
          while (v9);
        }
        result = (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), a2);
      }
      ++v5;
    }
  }
  while (v4);
  v3 = *v2;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v17 = *v2;
    if (*v2)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    *(_DWORD *)(v17 - 12) = v18 - v5;
    v3 = *v2;
  }
  if (!v3)
  {
LABEL_50:
    v15 = 0;
    *((_DWORD *)v2 + 2) = 0;
    goto LABEL_30;
  }
  v12 = *(_DWORD *)(v3 - 4);
  v13 = *(unsigned int *)(v3 - 12);
  if (v12 < 9 || 6 * (int)v13 >= v12)
    goto LABEL_28;
  v19 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = (v20 | HIWORD(v20)) + 1;
  if (v21 > 0x400)
  {
    if (v21 > 2 * v13)
      goto LABEL_49;
  }
  else if (3 * v21 > 4 * v13)
  {
LABEL_39:
    v22 = (double)v13;
    v23 = (double)v21;
    v24 = 0.604166667;
    goto LABEL_40;
  }
  LODWORD(v21) = 2 * v21;
  if (v21 <= 0x400)
    goto LABEL_39;
LABEL_49:
  v22 = (double)v13;
  v23 = (double)v21;
  v24 = 0.416666667;
LABEL_40:
  if (v23 * v24 <= v22)
    LODWORD(v21) = 2 * v21;
  if (v21 <= 8)
    v25 = 8;
  else
    v25 = v21;
  result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v25, 0);
  v3 = *v2;
  *((_DWORD *)v2 + 2) = 0;
  if (!v3)
  {
    v15 = 0;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *(_DWORD *)(v3 - 12);
  v16 = 0x7FFFFFFF;
  if (v15 < 0x7FFFFFFF)
LABEL_30:
    v16 = v15;
  *((_DWORD *)v2 + 3) = 2 * v16;
  return result;
}

uint64_t WebCore::RenderBox::repaintLayerRectsForImage(WebCore::RenderBox *this, const void *a2, const WebCore::FillLayer *a3, int a4)
{
  WebCore::RenderBox *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  WebCore::RenderView *v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  double v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x8_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  signed int v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  int8x8_t v76;
  unint64_t v77;
  _BYTE v78[20];
  __int128 v79;
  char v80;

  v8 = 0;
  v76 = 0;
  v77 = 0;
  while (1)
  {
    v9 = *((_QWORD *)a3 + 2);
    if (!v9
      || (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) != a2
      || ((*(uint64_t (**)(_QWORD, WebCore::RenderBox *))(**((_QWORD **)a3 + 2) + 56))(*((_QWORD *)a3 + 2), this) & 1) == 0&& !(*(unsigned int (**)(_QWORD, WebCore::RenderBox *, float))(**((_QWORD **)a3 + 2) + 208))(*((_QWORD *)a3 + 2), this, *(float *)(*((_QWORD *)this + 13) + 184)))
    {
      goto LABEL_31;
    }
    if (!a4)
      goto LABEL_10;
    v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
    v12 = *(_QWORD *)(v11 + 1272);
    if (v12 != v10)
    {
      if ((*((_BYTE *)this + 45) & 1) == 0
        && (*(_WORD *)(v10 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v39 = *(_QWORD *)(v12 + 64);
        if ((v39 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v39 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942E47CCLL);
        }
        v13 = !WebCore::RenderElement::hasBackground((WebCore::RenderElement *)(v39 & 0xFFFFFFFFFFFFLL));
      }
      else
      {
LABEL_10:
        v13 = 0;
      }
      if (v8)
        goto LABEL_14;
      if (!v13)
      {
        v14 = *((_QWORD *)this + 20);
        v76 = 0;
        v77 = v14;
        v8 = this;
        goto LABEL_14;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
LABEL_62:
      v8 = *(WebCore::RenderBox **)(v11 + 1944);
      if (*((_BYTE *)v8 + 46) != 49)
      {
        __break(0xC471u);
        JUMPOUT(0x1942E47ACLL);
      }
      v40 = WebCore::ScrollView::contentsSize(*((WebCore::ScrollView **)v8 + 31));
      v41 = v40 << 6;
      if (v40 < -33554432)
        v41 = 0x80000000;
      if (v40 > 0x1FFFFFF)
        v41 = 0x7FFFFFFF;
      v71 = v41;
      v42 = WebCore::ScrollView::contentsSize(*((WebCore::ScrollView **)v8 + 31));
      v43 = HIDWORD(v42) << 6;
      if (SHIDWORD(v42) < -33554432)
        v43 = 0x80000000;
      if (SHIDWORD(v42) <= 0x1FFFFFF)
        v44 = v43;
      else
        v44 = 0x7FFFFFFF;
      v72 = v44;
      v45 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1096))(v8);
      v46 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1080))(v8);
      v47 = (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(v46, v45), (int32x2_t)0x8000000080000000);
      v48 = vorr_s8((int8x8_t)(*(_QWORD *)&v47 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8((int8x8_t)vneg_s32((int32x2_t)__PAIR64__(v46, v45)), v47));
      v49 = *((_DWORD *)v8 + 40);
      v50 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1096))(v8);
      v51 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1104))(v8);
      v52 = v50 + v51;
      if (__OFADD__(v50, v51))
        v52 = (v50 >> 31) + 0x7FFFFFFF;
      v23 = __OFADD__(v49, v52);
      v53 = v49 + v52;
      if (v23)
        v54 = (v49 >> 31) + 0x7FFFFFFF;
      else
        v54 = v53;
      v55 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1016))(v8);
      if (__OFADD__(v54, v55))
        v56 = (v54 >> 31) + 0x7FFFFFFF;
      else
        v56 = v54 + v55;
      v57 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1024))(v8);
      v58 = v56 + v57;
      if (__OFADD__(v56, v57))
        v58 = (v56 >> 31) + 0x7FFFFFFF;
      if (v58 <= v71)
        v59 = v71;
      else
        v59 = v58;
      v60 = *((_DWORD *)v8 + 41);
      v61 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1080))(v8);
      v62 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1088))(v8);
      v63 = v61 + v62;
      if (__OFADD__(v61, v62))
        v63 = (v61 >> 31) + 0x7FFFFFFF;
      v23 = __OFADD__(v60, v63);
      v64 = v60 + v63;
      if (v23)
        v65 = (v60 >> 31) + 0x7FFFFFFF;
      else
        v65 = v64;
      v66 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1000))(v8);
      if (__OFADD__(v65, v66))
        v67 = (v65 >> 31) + 0x7FFFFFFF;
      else
        v67 = v65 + v66;
      v68 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 1008))(v8);
      v69 = v67 + v68;
      if (__OFADD__(v67, v68))
        v69 = (v67 >> 31) + 0x7FFFFFFF;
      if (v69 <= v72)
        v69 = v72;
      v76 = v48;
      v77 = __PAIR64__(v69, v59);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 1272)
                      + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                            + 8)
                                                + 1272)
                                    + 64) & 0xFFFFFFFFFFFFLL)
                       + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942E47ECLL);
        }
        if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                            + 8)
                                                + 1272)
                                    + 64) & 0xFFFFFFFFFFFFLL)
                       + 0x2D) & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942E480CLL);
        }
      }
      v70 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                           + 8)
                                               + 1272)
                                   + 64) & 0xFFFFFFFFFFFFLL)
                      + 0x90);
      if (v70 && *(_QWORD *)(v70 + 256))
        v8 = (WebCore::RenderBox *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 1272)
                                              + 64) & 0xFFFFFFFFFFFFLL);
      goto LABEL_107;
    }
    if (!v8)
      goto LABEL_62;
LABEL_107:
    v13 = 1;
LABEL_14:
    *(_QWORD *)&v79 = 0;
    WebCore::BackgroundPainter::calculateBackgroundImageGeometry(v8, 0, a3, (const WebCore::FillLayer *)&v79, (const WebCore::LayoutPoint *)&v76, (uint64_t)&v73);
    if (v75)
      break;
    v16 = v73;
    v15 = HIDWORD(v73);
    v17 = v74;
    if (v13
      && WebCore::LocalFrameView::hasExtendedBackgroundRectForPainting(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944) + 248)))
    {
      v28 = WebCore::LocalFrameView::extendedBackgroundRectForPainting(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944) + 248));
      if ((_DWORD)v77 == (_DWORD)v17)
      {
        if ((int)v28 >= -33554432)
          v31 = (_DWORD)v28 << 6;
        else
          v31 = 0x80000000;
        if ((int)v28 > 0x1FFFFFF)
          v31 = 0x7FFFFFFF;
        v23 = __OFADD__(v16, v31);
        v32 = v16 + v31;
        if (v23)
          v16 = (v16 >> 31) + 0x7FFFFFFF;
        else
          v16 = v32;
        v33 = (float)v29 * 64.0;
        if (v33 >= 2147483650.0)
        {
          v34 = 0x7FFFFFFF;
        }
        else if (v33 <= -2147483650.0)
        {
          v34 = 0x80000000;
        }
        else
        {
          v34 = (int)v33;
        }
        v17 = v17 & 0xFFFFFFFF00000000 | v34;
      }
      if (HIDWORD(v77) == HIDWORD(v17))
      {
        v35 = HIDWORD(v28) << 6;
        if (SHIDWORD(v28) < -33554432)
          v35 = 0x80000000;
        if (SHIDWORD(v28) > 0x1FFFFFF)
          v35 = 0x7FFFFFFF;
        v23 = __OFADD__(v15, v35);
        v36 = v15 + v35;
        if (v23)
          v15 = (v15 >> 31) + 0x7FFFFFFF;
        else
          v15 = v36;
        v37 = (float)v30 * 64.0;
        if (v37 >= 2147483650.0)
        {
          v38 = 0x7FFFFFFF;
        }
        else if (v37 <= -2147483650.0)
        {
          v38 = 0x80000000;
        }
        else
        {
          v38 = (int)v37;
        }
        v18 = 0;
        v17 = v17 | ((unint64_t)v38 << 32);
      }
      else
      {
        v18 = 0;
      }
    }
    else
    {
      v18 = 1;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) + 40) + 8) + 1944);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8) + 40) + 8) + 3382))
    {
      v20 = *(_QWORD *)(v19 + 248);
      v21 = *(unsigned int *)(v20 + 508);
      if ((_DWORD)v21 && (v21 = *(_QWORD *)(*(_QWORD *)(v20 + 496) + 8 * v21 - 8)) != 0)
      {
        v22 = *(_DWORD *)(v21 + 64);
        LODWORD(v21) = *(_DWORD *)(v21 + 68);
      }
      else
      {
        v22 = 0;
      }
      v23 = __OFADD__(v16, v22);
      v24 = v16 + v22;
      if (v23)
        v24 = (v16 >> 31) + 0x7FFFFFFF;
      v23 = __OFADD__(v15, (_DWORD)v21);
      v25 = v15 + v21;
      if (v23)
        v25 = (v15 >> 31) + 0x7FFFFFFF;
      *(_QWORD *)&v79 = __PAIR64__(v25, v24);
      *((_QWORD *)&v79 + 1) = v17;
      v80 = 1;
      v78[0] = 0;
      v78[16] = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)v8, &v79, v18, 0, (uint64_t)v78);
    }
    if (v73 == *(_QWORD *)&v76 && HIDWORD(v74) == HIDWORD(v77) && (_DWORD)v74 == (_DWORD)v77)
      return 1;
LABEL_31:
    a3 = (const WebCore::FillLayer *)*((_QWORD *)a3 + 1);
    if (!a3)
      return 0;
  }
  WebCore::RenderObject::repaint((uint64_t)v8, 0);
  return 1;
}

double WebCore::BackgroundPainter::calculateBackgroundImageGeometry@<D0>(WebCore::BackgroundPainter *this@<X0>, const WebCore::RenderBoxModelObject *a2@<X1>, const WebCore::RenderLayerModelObject *a3@<X2>, const WebCore::FillLayer *a4@<X3>, const WebCore::LayoutPoint *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13;
  WebCore::LocalFrameView **v14;
  WebCore::BackgroundPainter *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  float v40;
  double v41;
  unsigned int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  int v54;
  double v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  float v60;
  float v61;
  double v62;
  int v63;
  double v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  char v78;
  int v79;
  int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  signed int v95;
  unsigned int v96;
  int v97;
  signed int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int32x2_t v106;
  float v107;
  float v108;
  double v109;
  uint64_t v110;
  double v111;
  unint64_t v112;
  float v113;
  float v114;
  double v115;
  uint64_t v116;
  double v117;
  unint64_t v118;
  float v119;
  float v120;
  double v121;
  uint64_t v122;
  double v123;
  unint64_t v124;
  double v125;
  float v126;
  float v127;
  float v128;
  int v129;
  double v130;
  int v131;
  double v132;
  int v133;
  double v134;
  int v135;
  double result;
  WebCore::BackgroundPainter *v137;
  uint64_t v138;
  int v139;
  float v140;
  double v141;
  int v142;
  double v143;
  _QWORD *v144;
  WTF *v145;
  void *v146;
  WTF *v147;
  void *v148;
  int v149;
  unsigned __int8 v150;
  unsigned int v151;
  __int8 v152;
  unint64_t v153;
  int v154;
  char v155;
  float v156;
  float v157;
  float v158;
  float v159;
  BOOL v160;
  int v161;
  float v162;
  float v163;
  float v164;
  double v165;
  double v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  float v173;
  double v174;
  unsigned int v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  int v190;
  void *v191;
  int v192;
  void *v193;
  int v194;
  void *v195;
  int v196;
  char v197;
  unsigned int v198;
  char v199;
  unint64_t v200;
  float v201;
  char v202;
  int v203;
  void *v204;
  float v205;
  double v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  double v215;
  int v216;
  BOOL v217;
  double v218;
  int v219;
  float v221;
  float v222;
  void *v223;
  unsigned int v224;
  int v225;
  float v226;
  float v227;
  double v228;
  WebCore::ScrollView *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  float v238;
  int64_t v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  int64_t v250;
  unsigned int v251;
  unsigned int v252;
  int v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  unint64_t Space;
  int v273;
  unsigned int v274;
  int v275;
  float v276;
  double v277;
  unint64_t v278;
  int v279;
  unsigned int v280;
  int v281;
  double v282;
  double v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  int v288;
  uint64_t v289;
  int v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  double v295;
  double v296;
  float v297;
  float v298;
  float v299;
  double v300;
  int v301;
  double v302;
  int v303;
  unsigned int v304;
  double v305;
  int v306;
  float v307;
  float v308;
  double v309;
  unsigned int v310;
  double v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  float v315;
  double v316;
  int v317;
  uint64_t v318;
  int v319;
  float v320;
  double v321;
  unint64_t v322;
  unint64_t v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  float v328;
  int v329;
  int v330;
  int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  char v336;
  uint64_t v337;
  unsigned int v338;
  int v339;
  const WebCore::LayoutPoint *v340;
  unint64_t v341;
  uint64_t v342;
  __int128 v343;
  unint64_t v344;
  float v345;
  char v346;
  char v347;
  char v348;
  unsigned int v349[2];
  unint64_t v350;
  unsigned __int8 v351;
  char v352;
  char v353;

  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v14 = *(WebCore::LocalFrameView ***)(v13 + 1944);
  v344 = 0;
  v15 = this;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v16 = *((_QWORD *)this + 4);
    if (!v16)
      goto LABEL_13;
    v15 = *(WebCore::BackgroundPainter **)(v16 + 8);
    if (!v15)
    {
LABEL_371:
      v16 = 0;
      goto LABEL_13;
    }
    while ((*((_BYTE *)v15 + 45) & 0x10) == 0)
    {
      v17 = *((_QWORD *)v15 + 4);
      if (!v17)
        goto LABEL_371;
      v16 = 0;
      v15 = *(WebCore::BackgroundPainter **)(v17 + 8);
      if (!v15)
        goto LABEL_13;
    }
  }
LABEL_11:
  if ((*((_BYTE *)v15 + 21) & 0x80) != 0)
  {
    v16 = *((_QWORD *)v15 + 18);
  }
  else
  {
    while (1)
    {
      v16 = *((_QWORD *)v15 + 4);
      if (!v16)
        break;
      v15 = *(WebCore::BackgroundPainter **)(v16 + 8);
      if (!v15)
        goto LABEL_371;
      if ((*((_BYTE *)v15 + 45) & 0x10) != 0)
        goto LABEL_11;
    }
  }
LABEL_13:
  v18 = *((_DWORD *)this + 5);
  if ((v18 & 0x20000) == 0)
    goto LABEL_14;
  v137 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v137 = *(WebCore::BackgroundPainter **)(*((_QWORD *)this + 4) + 8);
  v138 = *((_QWORD *)v137 + 11);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 32) + 40) + 20)
    || (v144 = *(_QWORD **)(v138 + 40), v144[41])
    || v144[38]
    || v144[39]
    || v144[40]
    || (v18 & 0x100000) != 0)
  {
    LOBYTE(v19) = 1;
  }
  else
  {
LABEL_14:
    if (v16)
      v19 = (*(unsigned __int8 *)(v16 + 27) >> 6) & 1;
    else
      LOBYTE(v19) = 0;
  }
  v20 = v19 ^ 1;
  if ((*((_WORD *)a3 + 29) & 3) == 2)
    v21 = v20;
  else
    v21 = 0;
  v343 = *(_OWORD *)a5;
  v22 = *(_QWORD *)(v13 + 528);
  v23 = 1.0;
  if (v22)
  {
    v24 = *(_QWORD *)(v22 + 8);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 24);
      if (v25)
      {
        v26 = *(float **)(v25 + 8);
        if (v26)
        {
          v27 = (*(_DWORD *)v26)++;
          v23 = v26[91];
          if (v27)
          {
            *(_DWORD *)v26 = v27;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v26);
            WTF::fastFree(v145, v146);
          }
        }
      }
    }
  }
  v340 = a5;
  v337 = a6;
  v336 = v21;
  if ((v21 & 1) == 0)
  {
    if ((*((_WORD *)a3 + 29) & 0x60) != 0)
    {
      v28 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 1016))(this);
      v29 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 1024))(this);
      v30 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 1000))(this);
      v31 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 1008))(this);
      if ((*((_WORD *)a3 + 29) & 0x60) == 0x40)
      {
        v267 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 944))(this);
        v268 = v28 + v267;
        if (__OFADD__(v28, v267))
          v268 = (v28 >> 31) + 0x7FFFFFFF;
        v339 = v268;
        v269 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 952))(this);
        if (__OFADD__(v29, v269))
          v29 = (v29 >> 31) + 0x7FFFFFFF;
        else
          v29 += v269;
        v270 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 928))(this);
        if (__OFADD__(v30, v270))
          v30 = (v30 >> 31) + 0x7FFFFFFF;
        else
          v30 += v270;
        v271 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 936))(this);
        v28 = v339;
        if (__OFADD__(v31, v271))
          v31 = (v31 >> 31) + 0x7FFFFFFF;
        else
          v31 += v271;
      }
    }
    else
    {
      v31 = 0;
      v29 = 0;
      v30 = 0;
      v28 = 0;
    }
    v338 = v28;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8))
    {
      if ((*((_BYTE *)this + 45) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942E6594);
      }
      v167 = v28 + v29;
      if (__OFADD__(v28, v29))
        v167 = (v28 >> 31) + 0x7FFFFFFF;
      v168 = *((_DWORD *)this + 40);
      v169 = v30 + v31;
      if (__OFADD__(v30, v31))
        v169 = (v30 >> 31) + 0x7FFFFFFF;
      v170 = *((_DWORD *)this + 41);
      v36 = __OFSUB__(v168, v167);
      v171 = v168 - v167;
      if (v36)
        v171 = (v168 >> 31) + 0x7FFFFFFF;
      v36 = __OFSUB__(v170, v169);
      v172 = v170 - v169;
      if (v36)
        v172 = (v170 >> 31) + 0x7FFFFFFF;
      v344 = v171 | (unint64_t)(v172 << 32);
      *(_QWORD *)v349 = 0;
      v174 = WebCore::snapSizeToDevicePixel((int *)&v344, (int *)v349, v23) * 64.0;
      if (v174 >= 2147483650.0)
      {
        v175 = 0x7FFFFFFF;
      }
      else if (v174 <= -2147483650.0)
      {
        v175 = 0x80000000;
      }
      else
      {
        v175 = (int)v174;
      }
      v176 = v173 * 64.0;
      if (v176 >= 2147483650.0)
      {
        v177 = 0x7FFFFFFFLL;
      }
      else if (v176 <= -2147483650.0)
      {
        v177 = 0x80000000;
      }
      else
      {
        v177 = (int)v176;
      }
      v344 = v175 | (unint64_t)(v177 << 32);
      v178 = *(_QWORD *)(*((_QWORD *)v14[31] + 41) + 296);
      if (v178)
      {
        v179 = *(_QWORD *)(v178 + 1944);
        if (v179)
        {
          v180 = *(_QWORD *)(*(_QWORD *)(v179 + 144) + 256);
          if (v180)
          {
            v181 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v180 + 72) + 832))(*(_QWORD *)(v180 + 72));
            if (v181)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v181 + 272))(v181))
              {
                v341 = (unint64_t)WebCore::LocalFrameView::extendedBackgroundRectForPainting(v14[31]);
                v342 = v182;
                *(int8x8_t *)&v183 = WebCore::LayoutRect::LayoutRect((int8x8_t *)v349, (int32x2_t *)&v341);
                v184 = (*(uint64_t (**)(WebCore::BackgroundPainter *, double))(*(_QWORD *)this + 1096))(this, v183);
                v185 = v184 - v349[0];
                if (__OFSUB__(v184, v349[0]))
                  v185 = (v184 >> 31) + 0x7FFFFFFF;
                v36 = __OFADD__(v28, v185);
                v186 = v28 + v185;
                if (v36)
                  v338 = (v28 >> 31) + 0x7FFFFFFF;
                else
                  v338 = v186;
                v187 = (*(uint64_t (**)(WebCore::BackgroundPainter *))(*(_QWORD *)this + 1080))(this);
                v188 = v187 - v349[1];
                if (__OFSUB__(v187, v349[1]))
                  v188 = (v187 >> 31) + 0x7FFFFFFF;
                v36 = __OFADD__(v30, v188);
                v189 = v30 + v188;
                if (v36)
                  v30 = (v30 >> 31) + 0x7FFFFFFF;
                else
                  v30 = v189;
              }
            }
          }
        }
      }
    }
    else
    {
      v32 = v28 + v29;
      if (__OFADD__(v28, v29))
        v32 = (v28 >> 31) + 0x7FFFFFFF;
      v33 = *((_DWORD *)v340 + 2);
      v34 = v30 + v31;
      if (__OFADD__(v30, v31))
        v34 = (v30 >> 31) + 0x7FFFFFFF;
      v35 = *((_DWORD *)v340 + 3);
      v36 = __OFSUB__(v33, v32);
      v37 = v33 - v32;
      if (v36)
        v37 = (v33 >> 31) + 0x7FFFFFFF;
      v36 = __OFSUB__(v35, v34);
      v38 = v35 - v34;
      if (v36)
        v38 = (v35 >> 31) + 0x7FFFFFFF;
      v344 = v37 | (unint64_t)(v38 << 32);
      *(_QWORD *)v349 = *(_QWORD *)a4;
      v350 = v344;
      WebCore::snapRectToDevicePixels((int *)v349, v23);
      v41 = v40 * 64.0;
      if (v41 >= 2147483650.0)
      {
        v42 = 0x7FFFFFFF;
      }
      else if (v41 <= -2147483650.0)
      {
        v42 = 0x80000000;
      }
      else
      {
        v42 = (int)v41;
      }
      v43 = v39 * 64.0;
      if (v43 >= 2147483650.0)
      {
        v44 = 0x7FFFFFFFLL;
      }
      else if (v43 <= -2147483650.0)
      {
        v44 = 0x80000000;
      }
      else
      {
        v44 = (int)v43;
      }
      v344 = v42 | (unint64_t)(v44 << 32);
    }
    goto LABEL_44;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 680) & 8) == 0)
  {
    v229 = v14[31];
    if (WebCore::ScrollView::useFixedLayout(v229)
      && (v230 = WebCore::ScrollView::fixedLayoutSize(v229), (int)v230 >= 1)
      && SHIDWORD(v230) >= 1)
    {
      v231 = WebCore::ScrollView::fixedLayoutSize(v229);
      v232 = ((_DWORD)v231 << 6);
      if ((int)v231 < -33554432)
        v232 = 0x80000000;
      v233 = 0x8000000000000000;
      if (SHIDWORD(v231) >= -33554432)
        v233 = HIDWORD(v231) << 38;
      v234 = 0x7FFFFFFF00000000;
      if (SHIDWORD(v231) <= 0x1FFFFFF)
        v234 = v233;
      if ((int)v231 > 0x1FFFFFF)
        v232 = 0x7FFFFFFFLL;
      v235 = v234 | v232;
      if (WebCore::RenderBoxModelObject::fixedBackgroundPaintsInLocalCoordinates(this))
      {
        v236 = 0;
        v237 = 0;
        v238 = 0.0;
        goto LABEL_528;
      }
    }
    else
    {
      v291 = WebCore::ScrollView::sizeForVisibleContent(v229, 0);
      v292 = ((_DWORD)v291 << 6);
      if ((int)v291 < -33554432)
        v292 = 0x80000000;
      v293 = 0x8000000000000000;
      if (SHIDWORD(v291) >= -33554432)
        v293 = HIDWORD(v291) << 38;
      v294 = 0x7FFFFFFF00000000;
      if (SHIDWORD(v291) <= 0x1FFFFFF)
        v294 = v293;
      if ((int)v291 > 0x1FFFFFF)
        v292 = 0x7FFFFFFFLL;
      v235 = v294 | v292;
      if (WebCore::RenderBoxModelObject::fixedBackgroundPaintsInLocalCoordinates(this))
      {
        v238 = WebCore::FrameView::topContentInset(v229, 1);
        v295 = v238 * -64.0;
        if (v295 >= 2147483650.0)
        {
          v237 = 0;
          v236 = 0x7FFFFFFFLL;
        }
        else
        {
          v237 = 0;
          if (v295 <= -2147483650.0)
            v236 = 0x80000000;
          else
            v236 = (int)v295;
        }
        goto LABEL_528;
      }
      if (WebCore::LocalFrameView::frameScaleFactor(v229) == 1.0)
      {
        v238 = WebCore::FrameView::topContentInset(v229, 1);
        v323 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(v229);
        v324 = (_DWORD)v323 << 6;
        if ((int)v323 < -33554432)
          v324 = 0x80000000;
        if ((int)v323 <= 0x1FFFFFF)
          v237 = v324;
        else
          v237 = 0x7FFFFFFF;
        if (SHIDWORD(v323) >= -33554432)
          v325 = HIDWORD(v323) << 6;
        else
          v325 = 0x80000000;
        if (SHIDWORD(v323) <= 0x1FFFFFF)
          v236 = v325;
        else
          v236 = 0x7FFFFFFFLL;
        goto LABEL_528;
      }
    }
    v322 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)v229);
    v237 = v322;
    v236 = HIDWORD(v322);
    v238 = 0.0;
LABEL_528:
    v296 = (float)(v238 + 0.0) * 64.0;
    if (v296 >= 2147483650.0)
    {
      v290 = 0x7FFFFFFF;
    }
    else if (v296 <= -2147483650.0)
    {
      v290 = 0x80000000;
    }
    else
    {
      v290 = (int)v296;
    }
    goto LABEL_531;
  }
  v341 = WebCore::RenderView::unscaledDocumentRect((WebCore::RenderView *)v14);
  v342 = v289;
  WebCore::LayoutRect::LayoutRect((int8x8_t *)v349, (int32x2_t *)&v341);
  v290 = 0;
  v237 = v349[0];
  v236 = v349[1];
  v238 = 0.0;
  v235 = v350;
LABEL_531:
  if (a2)
  {
    *(_QWORD *)v349 = 0;
    v297 = WebCore::RenderObject::localToAbsolute((uint64_t)a2, (uint64_t *)v349, 0, 0);
    v299 = -v298;
    v300 = v297 * -64.0;
    if (v300 >= 2147483650.0)
    {
      v301 = 0x7FFFFFFF;
    }
    else if (v300 <= -2147483650.0)
    {
      v301 = 0x80000000;
    }
    else
    {
      v301 = (int)v300;
    }
    v302 = v299 * 64.0;
    if (v302 >= 2147483650.0)
    {
      v303 = 0x7FFFFFFF;
    }
    else if (v302 <= -2147483650.0)
    {
      v303 = 0x80000000;
    }
    else
    {
      v303 = (int)v302;
    }
    v36 = __OFADD__(v237, v301);
    v304 = v237 + v301;
    if (v36)
      v237 = (v237 >> 31) + 0x7FFFFFFF;
    else
      v237 = v304;
    if (__OFADD__((_DWORD)v236, v303))
      v236 = (v236 >> 31) + 0x7FFFFFFF;
    else
      v236 = (v236 + v303);
  }
  *(_QWORD *)&v343 = v237 | (unint64_t)(v236 << 32);
  *((_QWORD *)&v343 + 1) = v235;
  v344 = v235;
  v305 = (float)((float)((float)SHIDWORD(v235) * 0.015625) - v238) * 64.0;
  if (v305 >= 2147483650.0)
  {
    v306 = 0x7FFFFFFF;
  }
  else if (v305 <= -2147483650.0)
  {
    v306 = 0x80000000;
  }
  else
  {
    v306 = (int)v305;
  }
  HIDWORD(v344) = v306;
  v349[0] = v237;
  v349[1] = v236;
  v350 = v344;
  WebCore::snapRectToDevicePixels((int *)v349, v23);
  v309 = v308 * 64.0;
  if (v309 >= 2147483650.0)
  {
    v310 = 0x7FFFFFFF;
  }
  else if (v309 <= -2147483650.0)
  {
    v310 = 0x80000000;
  }
  else
  {
    v310 = (int)v309;
  }
  v311 = v307 * 64.0;
  if (v311 >= 2147483650.0)
  {
    v312 = 0x7FFFFFFFLL;
  }
  else if (v311 <= -2147483650.0)
  {
    v312 = 0x80000000;
  }
  else
  {
    v312 = (int)v311;
  }
  v338 = 0;
  v344 = v310 | (unint64_t)(v312 << 32);
  v30 = v290;
LABEL_44:
  v45 = *((_QWORD *)a3 + 2);
  v46 = (*((unsigned __int16 *)a3 + 29) >> 11) & 3;
  LOBYTE(v349[0]) = (*((unsigned __int16 *)a3 + 29) >> 11) & 3;
  v349[1] = 0;
  BYTE2(v350) = 0;
  LOBYTE(v350) = *((_BYTE *)a3 + 44);
  v47 = v350;
  BYTE1(v350) = *((_BYTE *)a3 + 45);
  if (v350 - 2 >= 9)
  {
    v48 = 0;
    if (v350 == 11)
    {
      v48 = (void *)*((unsigned int *)a3 + 10);
      v349[1] = *((_DWORD *)a3 + 10);
      WebCore::Length::ref((int *)&v349[1]);
    }
  }
  else
  {
    BYTE2(v350) = *((_BYTE *)a3 + 46);
    if (BYTE2(v350))
    {
      v349[1] = *((_DWORD *)a3 + 10);
      v48 = (void *)v349[1];
    }
    else
    {
      v48 = (void *)*((unsigned int *)a3 + 10);
      v349[1] = *((_DWORD *)a3 + 10);
    }
  }
  v353 = 0;
  v351 = *((_BYTE *)a3 + 52);
  v352 = *((_BYTE *)a3 + 53);
  if (v351 == 11)
  {
    v223 = (void *)*((unsigned int *)a3 + 12);
    HIDWORD(v350) = *((_DWORD *)a3 + 12);
    WebCore::Length::ref((int *)&v350 + 1);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v223);
  }
  if (v47 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v48);
  }
  v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v50 = 1.0;
  if (v49)
  {
    v51 = *(_QWORD *)(v49 + 8);
    if (v51)
    {
      v52 = *(_QWORD *)(v51 + 24);
      if (v52)
      {
        v53 = *(float **)(v52 + 8);
        if (v53)
        {
          v54 = (*(_DWORD *)v53)++;
          v50 = v53[91];
          if (v54)
          {
            *(_DWORD *)v53 = v54;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v53);
            WTF::fastFree(v147, v148);
          }
        }
      }
    }
  }
  v55 = 1.0 / v50 * 64.0;
  if (v55 >= 2147483650.0)
  {
    v56 = 0x7FFFFFFF;
  }
  else if (v55 <= -2147483650.0)
  {
    v56 = 0x80000000;
  }
  else
  {
    v56 = (int)v55;
  }
  if (v45)
  {
    v57 = WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions((uint64_t)this, v45, (int *)&v344, 1);
    v58 = v57;
    v59 = HIDWORD(v57);
    v60 = 1.0 / (*(float (**)(uint64_t))(*(_QWORD *)v45 + 160))(v45);
    v61 = 1.0 / (*(float (**)(uint64_t))(*(_QWORD *)v45 + 160))(v45);
    v62 = (float)((float)((float)v58 * 0.015625) * v60) * 64.0;
    if (v62 >= 2147483650.0)
    {
      v63 = 0x7FFFFFFF;
    }
    else if (v62 <= -2147483650.0)
    {
      v63 = 0x80000000;
    }
    else
    {
      v63 = (int)v62;
    }
    v64 = (float)((float)((float)(int)v59 * 0.015625) * v61) * 64.0;
    if (v64 >= 2147483650.0)
    {
      v65 = 0x7FFFFFFF;
    }
    else if (v64 <= -2147483650.0)
    {
      v65 = 0x80000000;
    }
    else
    {
      v65 = (int)v64;
    }
  }
  else
  {
    v63 = v344;
    v65 = HIDWORD(v344);
  }
  v335 = v30;
  if (v46 == 3)
  {
    v46 = 0;
    if (v63 >= 1 && v65 > 0)
      goto LABEL_71;
    goto LABEL_194;
  }
  if (v46 != 2)
  {
LABEL_194:
    v156 = (float)v63 * 0.015625;
    v157 = (float)v65 * 0.015625;
    v158 = (float)((float)(int)v344 * 0.015625) / v156;
    v159 = 1.0;
    if (v156 == 0.0)
      v158 = 1.0;
    if (v157 != 0.0)
      v159 = (float)((float)SHIDWORD(v344) * 0.015625) / v157;
    if (v46)
      v160 = v158 < v159;
    else
      v160 = v159 < v158;
    v161 = v160;
    v63 = 0;
    if (v156 <= 0.0)
    {
      v65 = 0;
    }
    else
    {
      v65 = 0;
      if (v157 > 0.0)
      {
        if (!v161)
          v159 = v158;
        v162 = v156 * v159;
        v163 = v157 * v159;
        v164 = (float)v56 * 0.015625;
        if (v163 <= v164)
          v163 = (float)v56 * 0.015625;
        if (v162 > v164)
          v164 = v162;
        v165 = v164 * 64.0;
        if (v165 >= 2147483650.0)
        {
          v63 = 0x7FFFFFFF;
        }
        else if (v165 <= -2147483650.0)
        {
          v63 = 0x80000000;
        }
        else
        {
          v63 = (int)v165;
        }
        v166 = v163 * 64.0;
        if (v166 >= 2147483650.0)
        {
          v65 = 0x7FFFFFFF;
        }
        else if (v166 <= -2147483650.0)
        {
          v65 = 0x80000000;
        }
        else
        {
          v65 = (int)v166;
        }
      }
    }
    goto LABEL_71;
  }
  LOBYTE(v349[0]) = (*((unsigned __int16 *)a3 + 29) >> 11) & 3;
  v349[1] = 0;
  LOBYTE(v350) = *((_BYTE *)a3 + 44);
  v149 = v350;
  v150 = *((_BYTE *)a3 + 45);
  *(_WORD *)((char *)&v350 + 1) = v150;
  v151 = v350 - 2;
  v329 = v344;
  v330 = v65;
  v332 = HIDWORD(v344);
  v334 = v350;
  if (v151 >= 9)
  {
    if (v350 == 11)
    {
      v349[1] = *((_DWORD *)a3 + 10);
      v287 = v349[1];
      WebCore::Length::ref((int *)&v349[1]);
      v153 = v287;
      v149 = v334;
      v152 = 0;
      goto LABEL_193;
    }
    v153 = 0;
    v152 = 0;
    v155 = 1;
    *(float *)&v154 = 0.0;
  }
  else
  {
    BYTE2(v350) = *((_BYTE *)a3 + 46);
    if (!BYTE2(v350))
    {
      v152 = 0;
      v153 = *((unsigned int *)a3 + 10);
      v349[1] = *((_DWORD *)a3 + 10);
LABEL_193:
      v154 = v153;
      v155 = 1;
      goto LABEL_247;
    }
    v155 = 0;
    v154 = *((int *)a3 + 10);
    v349[1] = v154;
    v153 = v154;
    v152 = 1;
  }
LABEL_247:
  v353 = 0;
  v351 = *((_BYTE *)a3 + 52);
  v190 = v351;
  v352 = *((_BYTE *)a3 + 53);
  if (v351 - 2 >= 9)
  {
    v191 = 0;
    if (v351 == 11)
    {
      v191 = (void *)*((unsigned int *)a3 + 12);
      HIDWORD(v350) = *((_DWORD *)a3 + 12);
      v326 = v153;
      WebCore::Length::ref((int *)&v350 + 1);
      v153 = v326;
      v149 = v334;
    }
  }
  else
  {
    v353 = *((_BYTE *)a3 + 54);
    if (v353)
    {
      HIDWORD(v350) = *((_DWORD *)a3 + 12);
      v191 = (void *)HIDWORD(v350);
    }
    else
    {
      v191 = (void *)*((unsigned int *)a3 + 12);
      HIDWORD(v350) = *((_DWORD *)a3 + 12);
    }
  }
  LODWORD(v341) = 0;
  BYTE4(v341) = v149;
  *(_WORD *)((char *)&v341 + 5) = v150;
  if (v151 >= 9)
  {
    if (v149 != 11)
    {
      v153 = 0;
      v192 = 1;
      *(float *)&v154 = 0.0;
      goto LABEL_257;
    }
  }
  else
  {
    BYTE6(v341) = v152;
    if ((v155 & 1) == 0)
    {
      v192 = 0;
      LODWORD(v341) = v154;
      v153 = v154;
      goto LABEL_257;
    }
  }
  LODWORD(v341) = v153;
  v154 = v153;
  v192 = 1;
LABEL_257:
  v193 = (void *)v153;
  if (v190 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v191);
    v149 = v334;
  }
  LOBYTE(v349[0]) = (*((unsigned __int16 *)a3 + 29) >> 11) & 3;
  v349[1] = 0;
  BYTE2(v350) = 0;
  LOBYTE(v350) = *((_BYTE *)a3 + 44);
  v194 = v350;
  BYTE1(v350) = *((_BYTE *)a3 + 45);
  if (v350 - 2 >= 9)
  {
    v195 = 0;
    if (v350 == 11)
    {
      v195 = (void *)*((unsigned int *)a3 + 10);
      v349[1] = *((_DWORD *)a3 + 10);
      WebCore::Length::ref((int *)&v349[1]);
      v149 = v334;
    }
  }
  else
  {
    BYTE2(v350) = *((_BYTE *)a3 + 46);
    if (BYTE2(v350))
    {
      v349[1] = *((_DWORD *)a3 + 10);
      v195 = (void *)v349[1];
    }
    else
    {
      v195 = (void *)*((unsigned int *)a3 + 10);
      v349[1] = *((_DWORD *)a3 + 10);
    }
  }
  v353 = 0;
  v351 = *((_BYTE *)a3 + 52);
  v196 = v351;
  v197 = *((_BYTE *)a3 + 53);
  v352 = v197;
  v198 = v351 - 2;
  if (v198 >= 9)
  {
    if (v351 == 11)
    {
      v327 = *((_DWORD *)a3 + 12);
      HIDWORD(v350) = v327;
      WebCore::Length::ref((int *)&v350 + 1);
      v149 = v334;
      v348 = 0;
      v346 = 11;
      v347 = v197;
      goto LABEL_506;
    }
    v200 = 0;
    v199 = 0;
    v202 = 1;
    v201 = 0.0;
  }
  else
  {
    v353 = *((_BYTE *)a3 + 54);
    v199 = v353;
    if (v353)
    {
      v202 = 0;
      v201 = *((float *)a3 + 12);
      v200 = LODWORD(v201);
      v199 = 1;
    }
    else
    {
      v200 = *((unsigned int *)a3 + 12);
      v201 = *((float *)a3 + 12);
      v202 = 1;
    }
  }
  v345 = 0.0;
  v348 = 0;
  v346 = v351;
  v347 = v197;
  if (v198 < 9)
  {
    v348 = v199;
    if ((v202 & 1) == 0)
    {
      v203 = 0;
      v345 = v201;
      v200 = LODWORD(v201);
      goto LABEL_272;
    }
    goto LABEL_507;
  }
  v327 = v200;
  if (v351 != 11)
  {
    v200 = 0;
    v203 = 1;
    v201 = 0.0;
    goto LABEL_272;
  }
LABEL_506:
  v200 = v327;
LABEL_507:
  v345 = *(float *)&v200;
  v201 = *(float *)&v200;
  v203 = 1;
LABEL_272:
  v217 = v194 == 11;
  v204 = (void *)v200;
  if (v217)
  {
    v288 = v203;
    v328 = v201;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v195);
    v201 = v328;
    v149 = v334;
    v203 = v288;
  }
  if (v149 == 4)
  {
    v205 = (float)v154;
    if (!v192)
      v205 = *(float *)&v154;
    v206 = v205 * 64.0;
    if (v206 >= 2147483650.0)
    {
      v207 = 0x7FFFFFFF;
    }
    else if (v206 <= -2147483650.0)
    {
      v207 = 0x80000000;
    }
    else
    {
      v207 = (int)v206;
    }
  }
  else if ((v149 & 0xFFFFFFF7) == 3)
  {
    v219 = v344;
    if (v149 == 3)
    {
      v222 = (float)v154;
      if (!v192)
        v222 = *(float *)&v154;
      v218 = (float)((float)(v222 * (float)((float)(int)v344 * 0.015625)) / 100.0) * 64.0;
      if (v218 >= 2147483650.0)
      {
        v219 = 0x7FFFFFFF;
      }
      else if (v218 <= -2147483650.0)
      {
        v219 = 0x80000000;
      }
      else
      {
        v219 = (int)v218;
      }
    }
    else
    {
      v225 = v203;
      v226 = v201;
      if (v149 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v341, (float)(int)v344 * 0.015625);
        v228 = v227 * 64.0;
        if (v228 >= 2147483650.0)
        {
          v219 = 0x7FFFFFFF;
        }
        else if (v228 <= -2147483650.0)
        {
          v219 = 0x80000000;
        }
        else
        {
          v219 = (int)v228;
        }
      }
      else if (v334 != 9)
      {
        v219 = 0;
      }
      v201 = v226;
      v203 = v225;
    }
    if (v56 < v219 || v219 == 0)
      v207 = v219;
    else
      v207 = v56;
  }
  else
  {
    v207 = v329;
  }
  if (v196 == 4)
  {
    if (v203)
      v201 = (float)SLODWORD(v201);
    v283 = v201 * 64.0;
    if (v283 >= 2147483650.0)
    {
      v216 = 0x7FFFFFFF;
    }
    else if (v283 <= -2147483650.0)
    {
      v216 = 0x80000000;
    }
    else
    {
      v216 = (int)v283;
    }
    goto LABEL_310;
  }
  if ((v196 & 0xFFFFFFF7) != 3)
    goto LABEL_281;
  v216 = HIDWORD(v344);
  if (v196 == 3)
  {
    if (!v348)
      v201 = (float)SLODWORD(v201);
    v221 = (float)((float)((float)SHIDWORD(v344) * 0.015625) * v201) / 100.0;
  }
  else
  {
    if (v196 != 11)
    {
      if (v196 != 9)
        v216 = 0;
      goto LABEL_305;
    }
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v345, (float)SHIDWORD(v344) * 0.015625);
  }
  v215 = v221 * 64.0;
  if (v215 >= 2147483650.0)
  {
    v216 = 0x7FFFFFFF;
  }
  else if (v215 <= -2147483650.0)
  {
    v216 = 0x80000000;
  }
  else
  {
    v216 = (int)v215;
  }
LABEL_305:
  v217 = v56 < v216 || v216 == 0;
  if (!v217)
    v216 = v56;
LABEL_310:
  v332 = v216;
LABEL_281:
  if (v45)
    v208 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 168))(v45);
  else
    v208 = 0;
  v209 = v334;
  if (v334)
  {
    if (v196)
      v210 = 0;
    else
      v210 = v208;
    if (v210 == 1 && v63)
    {
      v211 = v207 * (uint64_t)v330 / 64;
      if (HIDWORD(v211) != (int)v211 >> 31)
        LODWORD(v211) = ((v207 ^ v330) >> 31) + 0x7FFFFFFF;
      v212 = ((uint64_t)(int)v211 << 6) / v63;
      if (v212 <= (uint64_t)0xFFFFFFFF80000000)
        v212 = 0xFFFFFFFF80000000;
      if (v212 >= 0x7FFFFFFF)
        LODWORD(v212) = 0x7FFFFFFF;
      v213 = v212;
      goto LABEL_296;
    }
LABEL_499:
    v63 = v207 & ~(v207 >> 31);
    v65 = v332 & ~(v332 >> 31);
    if (v196 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v204);
      v65 = v332 & ~(v332 >> 31);
      v209 = v334;
    }
    goto LABEL_297;
  }
  if (v196)
  {
    if (v330)
      v284 = v208;
    else
      v284 = 0;
    v209 = 0;
    if (v284 == 1)
    {
      v285 = v332 * (uint64_t)v63 / 64;
      if (HIDWORD(v285) != (int)v285 >> 31)
        LODWORD(v285) = ((v332 ^ v63) >> 31) + 0x7FFFFFFF;
      v286 = ((uint64_t)(int)v285 << 6) / v330;
      if (v286 <= (uint64_t)0xFFFFFFFF80000000)
        v286 = 0xFFFFFFFF80000000;
      if (v286 >= 0x7FFFFFFF)
        v207 = 0x7FFFFFFF;
      else
        v207 = v286;
      v209 = 0;
    }
    goto LABEL_499;
  }
  v207 = v63;
  v213 = v330;
  v209 = 0;
LABEL_296:
  v63 = v207 & ~(v207 >> 31);
  v65 = v213 & ~(v213 >> 31);
LABEL_297:
  if (v209 == 11)
  {
    v214 = v65;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v193);
    v65 = v214;
  }
LABEL_71:
  v66 = v63;
  LODWORD(v341) = v63;
  HIDWORD(v341) = v65;
  v67 = v344 - v63;
  if (__OFSUB__((_DWORD)v344, v63))
    v67 = (v344 >> 31) + 0x7FFFFFFF;
  v68 = *((_WORD *)a3 + 28);
  v69 = v65;
  v70 = HIDWORD(v344) - v65;
  if (__OFSUB__(HIDWORD(v344), v65))
    v70 = (HIDWORD(v344) >> 31) + 0x7FFFFFFF;
  v71 = HIBYTE(*((unsigned __int16 *)a3 + 28));
  v72 = v67;
  v73 = WebCore::resolveEdgeRelativeLength((unsigned __int8 *)a3 + 24, *((_WORD *)a3 + 31) & 3, v67, (unsigned int *)&v344, (int *)&v341);
  if (v68 == 2)
  {
    v333 = 0;
    if ((int)v344 >= 1 && v63 >= 1)
    {
      v239 = ((unint64_t)v344 << 6) / v63;
      if (v239 >= 0x7FFFFFFF)
        LODWORD(v239) = 0x7FFFFFFF;
      v240 = (((v239 & 0x20) + 32) >> 6) + (v239 >> 6);
      if (v240 <= 1)
        v241 = 1;
      else
        v241 = v240;
      WebCore::FillLayer::size(a3, (uint64_t)v349);
      v242 = v351;
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v349);
      v243 = v241 >> 25;
      if (v242 || v71 == 2)
      {
        LODWORD(v245) = v241 << 6;
      }
      else
      {
        v244 = (int)v344 * (uint64_t)v69 / 64;
        if (HIDWORD(v244) != (int)v244 >> 31)
          LODWORD(v244) = ((v344 ^ v69) >> 31) + 0x7FFFFFFF;
        LODWORD(v245) = v241 << 6;
        if (v243)
          v246 = 0x7FFFFFFF;
        else
          v246 = v241 << 6;
        v247 = v66 * (unint64_t)v246;
        v248 = v247 >> 6;
        if (v247 >> 38 != (int)(v247 >> 6) >> 31)
          LODWORD(v248) = 0x7FFFFFFF;
        v249 = ((uint64_t)(int)v244 << 6) / (int)v248;
        if (v249 <= (uint64_t)0xFFFFFFFF80000000)
          v249 = 0xFFFFFFFF80000000;
        if (v249 >= 0x7FFFFFFF)
          LODWORD(v249) = 0x7FFFFFFF;
        HIDWORD(v341) = v249;
        v69 = v249;
      }
      if (v243)
        v245 = 0x7FFFFFFFLL;
      else
        v245 = v245;
      v313 = ((uint64_t)(int)v344 << 6) / v245;
      if (v313 <= (uint64_t)0xFFFFFFFF80000000)
        v313 = 0xFFFFFFFF80000000;
      if (v313 >= 0x7FFFFFFF)
        v63 = 0x7FFFFFFF;
      else
        v63 = v313;
      LODWORD(v341) = v63;
      if (v63)
      {
        v314 = v73 + v338;
        if (__OFADD__(v73, v338))
          v314 = (v73 >> 31) + 0x7FFFFFFF;
        v315 = (float)((float)v63 * 0.015625) - fmodf((float)v314 * 0.015625, (float)v63 * 0.015625);
      }
      else
      {
        v315 = 0.0;
      }
      v316 = v315 * 64.0;
      if (v316 >= 2147483650.0)
      {
        v317 = 0x7FFFFFFF;
      }
      else if (v316 <= -2147483650.0)
      {
        v317 = 0x80000000;
      }
      else
      {
        v317 = (int)v316;
      }
      v333 = v317;
    }
  }
  else
  {
    v333 = 0;
  }
  v74 = v70;
  v75 = WebCore::resolveEdgeRelativeLength((unsigned __int8 *)a3 + 32, (*((_DWORD *)a3 + 15) >> 18) & 3, v70, (unsigned int *)&v344, (int *)&v341);
  if (v71 == 2)
  {
    v76 = 0;
    if (SHIDWORD(v344) >= 1 && v69 >= 1)
    {
      v250 = ((unint64_t)HIDWORD(v344) << 6) / v69;
      if (v250 >= 0x7FFFFFFF)
        LODWORD(v250) = 0x7FFFFFFF;
      v251 = (((v250 & 0x20) + 32) >> 6) + (v250 >> 6);
      if (v251 <= 1)
        v252 = 1;
      else
        v252 = v251;
      WebCore::FillLayer::size(a3, (uint64_t)v349);
      v253 = v350;
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v349);
      v254 = v252 >> 25;
      if (v253 || v68 == 2)
      {
        LODWORD(v256) = v252 << 6;
      }
      else
      {
        v255 = SHIDWORD(v344) * (uint64_t)v63 / 64;
        if (HIDWORD(v255) != (int)v255 >> 31)
          LODWORD(v255) = ((HIDWORD(v344) ^ v63) >> 31) + 0x7FFFFFFF;
        LODWORD(v256) = v252 << 6;
        if (v254)
          v257 = 0x7FFFFFFF;
        else
          v257 = v252 << 6;
        v258 = v69 * (unint64_t)v257;
        v259 = v258 >> 6;
        if (v258 >> 38 != (int)(v258 >> 6) >> 31)
          LODWORD(v259) = 0x7FFFFFFF;
        v260 = ((uint64_t)(int)v255 << 6) / (int)v259;
        if (v260 <= (uint64_t)0xFFFFFFFF80000000)
          v260 = 0xFFFFFFFF80000000;
        if (v260 >= 0x7FFFFFFF)
          v63 = 0x7FFFFFFF;
        else
          v63 = v260;
        LODWORD(v341) = v63;
      }
      if (v254)
        v256 = 0x7FFFFFFFLL;
      else
        v256 = v256;
      v318 = ((uint64_t)SHIDWORD(v344) << 6) / v256;
      if (v318 <= (uint64_t)0xFFFFFFFF80000000)
        v318 = 0xFFFFFFFF80000000;
      if (v318 >= 0x7FFFFFFF)
        LODWORD(v318) = 0x7FFFFFFF;
      HIDWORD(v341) = v318;
      v69 = v318;
      if ((_DWORD)v318)
      {
        v319 = v75 + v335;
        if (__OFADD__(v75, v335))
          v319 = (v75 >> 31) + 0x7FFFFFFF;
        v320 = (float)((float)v69 * 0.015625) - fmodf((float)v319 * 0.015625, (float)v69 * 0.015625);
      }
      else
      {
        v320 = 0.0;
      }
      v321 = v320 * 64.0;
      if (v321 >= 2147483650.0)
      {
        v76 = 0x7FFFFFFFLL;
      }
      else if (v321 <= -2147483650.0)
      {
        v76 = 0x80000000;
      }
      else
      {
        v76 = (int)v321;
      }
    }
  }
  else
  {
    v76 = 0;
  }
  if (v68 == 1)
  {
LABEL_80:
    v77 = v338 + v73;
    if (__OFADD__(v338, v73))
      v77 = (v338 >> 31) + 0x7FFFFFFF;
    v78 = v336;
    if (v77 >= 1)
    {
      v224 = v343 + v77;
      if (__OFADD__((_DWORD)v343, v77))
        v224 = (v343 >> 31) + 0x7FFFFFFF;
      LODWORD(v343) = v224;
    }
    v79 = v77 & (v77 >> 31);
    if (v79 == 0x80000000)
      v80 = 0x7FFFFFFF;
    else
      v80 = -v79;
    v36 = __OFADD__(v63, v79);
    v81 = v63 + v79;
    if (v36)
      v81 = (v63 >> 31) + 0x7FFFFFFF;
    v82 = (unsigned int *)v340;
    v83 = 0;
    DWORD2(v343) = v81;
    v84 = v80;
    goto LABEL_89;
  }
  if (v68)
  {
    v331 = v69;
    if (v68 != 3 || v63 < 1)
    {
      v83 = 0;
      v78 = v336;
      v82 = (unsigned int *)v340;
      v84 = v333;
      goto LABEL_89;
    }
    Space = WebCore::getSpace(v344, v63);
    if (!HIDWORD(Space))
      goto LABEL_80;
    v83 = Space;
    v273 = v63 + Space;
    if (__OFADD__(v63, (_DWORD)Space))
      v273 = 0x7FFFFFFF;
    *(unsigned int *)((char *)v349 + 3) = 0;
    v349[0] = 0;
    v274 = WebCore::minimumValueForLength((unsigned __int8 *)v349, v72);
    if (LOBYTE(v349[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v349[0]);
    }
    if (v273)
    {
      v275 = v274 + v338;
      if (__OFADD__(v274, v338))
        v275 = (v274 >> 31) + 0x7FFFFFFF;
      v276 = (float)((float)v273 * 0.015625) - fmodf((float)v275 * 0.015625, (float)v273 * 0.015625);
    }
    else
    {
      v276 = 0.0;
    }
    v277 = v276 * 64.0;
    if (v277 >= 2147483650.0)
    {
      v84 = 0x7FFFFFFF;
    }
    else if (v277 <= -2147483650.0)
    {
      v84 = 0x80000000;
    }
    else
    {
      v84 = (int)v277;
    }
    v78 = v336;
    v82 = (unsigned int *)v340;
    v69 = v331;
  }
  else
  {
    if (v63)
    {
      v139 = v73 + v338;
      if (__OFADD__(v73, v338))
        v139 = (v73 >> 31) + 0x7FFFFFFF;
      v78 = v336;
      v140 = (float)((float)v63 * 0.015625) - fmodf((float)v139 * 0.015625, (float)v63 * 0.015625);
    }
    else
    {
      v140 = 0.0;
      v78 = v336;
    }
    v141 = v140 * 64.0;
    v82 = (unsigned int *)v340;
    if (v141 >= 2147483650.0)
    {
      v83 = 0;
      v84 = 0x7FFFFFFF;
    }
    else
    {
      v83 = 0;
      if (v141 <= -2147483650.0)
        v84 = 0x80000000;
      else
        v84 = (int)v141;
    }
  }
LABEL_89:
  if (v71 != 1)
  {
    if (!v71)
    {
      if (v69)
      {
        v142 = v75 + v335;
        if (__OFADD__(v75, v335))
          v142 = (v75 >> 31) + 0x7FFFFFFF;
        v143 = (float)((float)((float)v69 * 0.015625) - fmodf((float)v142 * 0.015625, (float)v69 * 0.015625)) * 64.0;
        if (v143 >= 2147483650.0)
        {
          v89 = 0;
          v76 = 0x7FFFFFFFLL;
          goto LABEL_102;
        }
        if (v143 <= -2147483650.0)
        {
          v89 = 0;
          v76 = 0x80000000;
          goto LABEL_102;
        }
      }
      else
      {
        v143 = 0.0;
      }
      v89 = 0;
      v76 = (int)v143;
      goto LABEL_102;
    }
    if (v71 == 3 && v69 >= 1)
    {
      v278 = WebCore::getSpace(HIDWORD(v344), v69);
      v82 = (unsigned int *)v340;
      if (!HIDWORD(v278))
        goto LABEL_90;
      v89 = v278;
      v279 = v69 + v278;
      if (__OFADD__(v69, (_DWORD)v278))
        v279 = 0x7FFFFFFF;
      *(unsigned int *)((char *)v349 + 3) = 0;
      v349[0] = 0;
      v280 = WebCore::minimumValueForLength((unsigned __int8 *)v349, v74);
      if (LOBYTE(v349[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v349[0]);
      }
      if (v279)
      {
        v281 = v280 + v335;
        if (__OFADD__(v280, v335))
          v281 = (v280 >> 31) + 0x7FFFFFFF;
        v282 = (float)((float)((float)v279 * 0.015625) - fmodf((float)v281 * 0.015625, (float)v279 * 0.015625)) * 64.0;
        if (v282 >= 2147483650.0)
        {
          v76 = 0x7FFFFFFFLL;
          goto LABEL_554;
        }
        if (v282 <= -2147483650.0)
        {
          v76 = 0x80000000;
          goto LABEL_554;
        }
      }
      else
      {
        v282 = 0.0;
      }
      v76 = (int)v282;
    }
    else
    {
      v89 = 0;
    }
LABEL_554:
    v82 = (unsigned int *)v340;
    goto LABEL_102;
  }
LABEL_90:
  v85 = v335 + v75;
  if (__OFADD__(v335, v75))
    v85 = (v335 >> 31) + 0x7FFFFFFF;
  if (v85 >= 1)
  {
    v86 = DWORD1(v343) + v85;
    if (__OFADD__(DWORD1(v343), v85))
      v86 = (DWORD1(v343) >> 31) + 0x7FFFFFFF;
    DWORD1(v343) = v86;
  }
  v87 = v85 & (v85 >> 31);
  if (v87 == 0x80000000)
    v76 = 0x7FFFFFFFLL;
  else
    v76 = -v87;
  v36 = __OFADD__(v69, v87);
  v88 = v69 + v87;
  if (v36)
    v88 = (v69 >> 31) + 0x7FFFFFFF;
  v89 = 0;
  HIDWORD(v343) = v88;
LABEL_102:
  if ((v78 & 1) != 0)
  {
    v92 = *v82;
    v91 = v82[1];
    v261 = *v82 - v343;
    if (__OFSUB__(*v82, (_DWORD)v343))
      v261 = (v92 >> 31) + 0x7FFFFFFF;
    v262 = v261 & ~(v261 >> 31);
    v90 = DWORD1(v343);
    v263 = v91 - DWORD1(v343);
    if (__OFSUB__(v91, DWORD1(v343)))
      v263 = (v91 >> 31) + 0x7FFFFFFF;
    v264 = v263 & ~(v263 >> 31);
    v36 = __OFADD__(v84, v262);
    v265 = v84 + v262;
    if (v36)
      v84 = (v84 >> 31) + 0x7FFFFFFF;
    else
      v84 = v265;
    v36 = __OFADD__((_DWORD)v76, v264);
    v266 = (v76 + v264);
    if (v36)
      v76 = (v76 >> 31) + 0x7FFFFFFF;
    else
      v76 = v266;
    v82 = (unsigned int *)v340;
  }
  else
  {
    v90 = DWORD1(v343);
    v92 = *v82;
    v91 = v82[1];
  }
  if ((int)v343 <= (int)v92)
    v93 = v92;
  else
    v93 = v343;
  if ((int)v90 <= (int)v91)
    v94 = v91;
  else
    v94 = v90;
  v95 = v343 + DWORD2(v343);
  if (__OFADD__((_DWORD)v343, DWORD2(v343)))
    v95 = (v343 >> 31) + 0x7FFFFFFF;
  v96 = v82[2];
  v36 = __OFADD__(v92, v96);
  v97 = v92 + v96;
  if (v36)
    v97 = (v92 >> 31) + 0x7FFFFFFF;
  if (v97 >= v95)
    v98 = v95;
  else
    v98 = v97;
  v99 = v90 + HIDWORD(v343);
  if (__OFADD__(v90, HIDWORD(v343)))
    v99 = (v90 >> 31) + 0x7FFFFFFF;
  v100 = v82[3];
  v36 = __OFADD__(v91, v100);
  v101 = v91 + v100;
  if (v36)
    v101 = (v91 >> 31) + 0x7FFFFFFF;
  if (v101 >= v99)
    v102 = v99;
  else
    v102 = v101;
  if ((int)v93 >= v98 || (int)v94 >= v102)
  {
    v98 = 0;
    v102 = 0;
    v93 = 0;
    v94 = 0;
  }
  v103 = v93 | (unint64_t)(v94 << 32);
  *(_QWORD *)&v343 = v103;
  v104 = v98 - v93;
  if (__OFSUB__(v98, v93))
    v104 = (v98 >> 31) + 0x7FFFFFFF;
  v105 = (v102 - v94);
  if (__OFSUB__(v102, (_DWORD)v94))
    v105 = (v102 >> 31) + 0x7FFFFFFF;
  *((_QWORD *)&v343 + 1) = v104 | (unint64_t)(v105 << 32);
  v106 = (int32x2_t)v341;
  v349[0] = v93;
  v349[1] = v94;
  v350 = v341;
  WebCore::snapRectToDevicePixels((int *)v349, v23);
  v109 = v108 * 64.0;
  if (v109 >= 2147483650.0)
  {
    v110 = 0x7FFFFFFFLL;
  }
  else if (v109 <= -2147483650.0)
  {
    v110 = 0x80000000;
  }
  else
  {
    v110 = (int)v109;
  }
  v111 = v107 * 64.0;
  if (v111 >= 2147483650.0)
  {
    v112 = 0x7FFFFFFF00000000;
  }
  else if (v111 <= -2147483650.0)
  {
    v112 = 0x8000000000000000;
  }
  else
  {
    v112 = (unint64_t)(int)v111 << 32;
  }
  *(_QWORD *)v349 = v103;
  v350 = v84 | (unint64_t)(v76 << 32);
  WebCore::snapRectToDevicePixels((int *)v349, v23);
  v115 = v114 * 64.0;
  if (v115 >= 2147483650.0)
  {
    v116 = 0x7FFFFFFFLL;
  }
  else if (v115 <= -2147483650.0)
  {
    v116 = 0x80000000;
  }
  else
  {
    v116 = (int)v115;
  }
  v117 = v113 * 64.0;
  if (v117 >= 2147483650.0)
  {
    v118 = 0x7FFFFFFF00000000;
  }
  else if (v117 <= -2147483650.0)
  {
    v118 = 0x8000000000000000;
  }
  else
  {
    v118 = (unint64_t)(int)v117 << 32;
  }
  *(_QWORD *)v349 = 0;
  v350 = v83 | ((unint64_t)v89 << 32);
  WebCore::snapRectToDevicePixels((int *)v349, v23);
  v121 = v120 * 64.0;
  if (v121 >= 2147483650.0)
  {
    v122 = 0x7FFFFFFFLL;
  }
  else if (v121 <= -2147483650.0)
  {
    v122 = 0x80000000;
  }
  else
  {
    v122 = (int)v121;
  }
  v123 = v119 * 64.0;
  if (v123 >= 2147483650.0)
  {
    v124 = 0x7FFFFFFF00000000;
  }
  else if (v123 <= -2147483650.0)
  {
    v124 = 0x8000000000000000;
  }
  else
  {
    v124 = (unint64_t)(int)v123 << 32;
  }
  v125 = WebCore::snapRectToDevicePixels((int *)&v343, v23) * 64.0;
  if (v125 >= 2147483650.0)
  {
    v129 = 0x7FFFFFFF;
  }
  else if (v125 <= -2147483650.0)
  {
    v129 = 0x80000000;
  }
  else
  {
    v129 = (int)v125;
  }
  v130 = v126 * 64.0;
  if (v130 >= 2147483650.0)
  {
    v131 = 0x7FFFFFFF;
  }
  else if (v130 <= -2147483650.0)
  {
    v131 = 0x80000000;
  }
  else
  {
    v131 = (int)v130;
  }
  v132 = v127 * 64.0;
  if (v132 >= 2147483650.0)
  {
    v133 = 0x7FFFFFFF;
  }
  else if (v132 <= -2147483650.0)
  {
    v133 = 0x80000000;
  }
  else
  {
    v133 = (int)v132;
  }
  v134 = v128 * 64.0;
  if (v134 >= 2147483650.0)
  {
    v135 = 0x7FFFFFFF;
  }
  else if (v134 <= -2147483650.0)
  {
    v135 = 0x80000000;
  }
  else
  {
    v135 = (int)v134;
  }
  *(_QWORD *)&v343 = __PAIR64__(v131, v129);
  *((_QWORD *)&v343 + 1) = __PAIR64__(v135, v133);
  result = COERCE_DOUBLE(__PAIR64__(v131, v129));
  *(_OWORD *)v337 = v343;
  *(_QWORD *)(v337 + 16) = v343;
  *(int32x2_t *)(v337 + 24) = v106;
  *(_QWORD *)(v337 + 32) = v112 | v110;
  *(_QWORD *)(v337 + 40) = v118 | v116;
  *(_QWORD *)(v337 + 48) = v124 | v122;
  *(_BYTE *)(v337 + 56) = v78;
  return result;
}

uint64_t WebCore::resolveEdgeRelativeLength(unsigned __int8 *a1, int a2, int a3, unsigned int *a4, int *a5)
{
  int v8;
  float v9;
  double v10;
  uint64_t result;
  float v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v8 = a1[4];
  switch(v8)
  {
    case 4:
      v9 = *(float *)a1;
      if (!a1[6])
        v9 = (float)*(int *)a1;
      break;
    case 3:
      v12 = *(float *)a1;
      if (!a1[6])
        v12 = (float)*(int *)a1;
      v9 = (float)((float)((float)a3 * 0.015625) * v12) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a1, (float)a3 * 0.015625);
      break;
    default:
      result = 0;
      goto LABEL_7;
  }
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
  {
    result = 0x7FFFFFFFLL;
  }
  else if (v10 <= -2147483650.0)
  {
    result = 0x80000000;
  }
  else
  {
    result = (int)v10;
  }
LABEL_7:
  if (a2 == 1)
  {
    v13 = *a4;
    v14 = *a5;
  }
  else
  {
    if (a2 != 2)
      return result;
    v13 = a4[1];
    v14 = a5[1];
  }
  v15 = __OFSUB__(v13, v14);
  v16 = v13 - v14;
  v17 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v15)
    v17 = v16;
  v15 = __OFSUB__(v17, (_DWORD)result);
  v18 = v17 - result;
  v19 = (v17 >> 31) + 0x7FFFFFFF;
  if (v15)
    return v19;
  else
    return v18;
}

float WebCore::StyleCachedImage::imageScaleFactor(WebCore::StyleCachedImage *this)
{
  return *((float *)this + 11);
}

uint64_t WebCore::StyleImage::imageHasNaturalDimensions(WebCore::StyleImage *this)
{
  return 1;
}

float WebCore::StyleImage::imageScaleFactor(WebCore::StyleImage *this)
{
  return 1.0;
}

void WebCore::NinePieceImage::computeNineRects(uint64_t *a1, float *a2, int32x2_t *a3, float a4)
{
  int v8;
  int v9;
  __int32 v10;
  int v11;
  float v12;
  float v13;
  __int32 v14;
  BOOL v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  double v20;
  int v21;
  double v22;
  int v23;
  float v24;
  float v25;
  __int32 v26;
  __int32 v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v32;
  double v33;
  int v34;
  int v35;
  int v36;
  int v37;
  double v38;
  int v39;
  double v40;
  int v41;
  float v42;
  float v43;
  __int32 v44;
  double v45;
  int v46;
  int v47;
  int v48;
  int v49;
  double v50;
  int v51;
  double v52;
  int v53;
  int v54;
  int v55;
  int v56;
  double v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int32 v65;
  int v66;
  int v67;
  int v68;
  int v69;
  double v70;
  int v71;
  double v72;
  int v73;
  double v74;
  int v75;
  __int32 v76;
  int v77;
  int v78;
  int v79;
  double v80;
  int v81;
  int v82;
  int v83;
  __int32 v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  float v95;
  float v96;
  double v97;
  int v98;
  int v99;
  unint64_t v100;

  v8 = a3[1].i32[1];
  v9 = a3->i32[0];
  v10 = a3->i32[1];
  v11 = v8 + v10;
  if (__OFADD__(v8, v10))
    v11 = (v8 >> 31) + 0x7FFFFFFF;
  v12 = a2[1];
  v13 = a2[3];
  v95 = a2[2];
  v96 = *a2;
  v14 = a3[1].i32[0];
  v15 = __OFADD__(v9, v14);
  v16 = v9 + v14;
  if (v15)
    v16 = (v9 >> 31) + 0x7FFFFFFF;
  v17 = (float)v9;
  v18 = (float)v16;
  v19 = WTF::fastMalloc((WTF *)0x90);
  a1[1] = 0x900000009;
  *a1 = v19;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 128) = 0u;
  v20 = *a2 * 64.0;
  if (v20 >= 2147483650.0)
  {
    v21 = 0x7FFFFFFF;
  }
  else if (v20 <= -2147483650.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  v22 = a2[1] * 64.0;
  if (v22 >= 2147483650.0)
  {
    v23 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147483650.0)
  {
    v23 = 0x80000000;
  }
  else
  {
    v23 = (int)v22;
  }
  v24 = v12 + (float)(v17 * 0.015625);
  v25 = v13 + (float)(v18 * -0.015625);
  v26 = a3[1].i32[1];
  v27 = a3->i32[0];
  v98 = v21;
  v99 = v23;
  v100 = __PAIR64__(v27, v26);
  *(float *)v19 = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 4) = v28;
  *(_DWORD *)(v19 + 8) = v29;
  *(_DWORD *)(v19 + 12) = v30;
  v31 = *a2 * 64.0;
  if (v31 >= 2147483650.0)
  {
    v32 = 0x7FFFFFFF;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = 0x80000000;
  }
  else
  {
    v32 = (int)v31;
  }
  v33 = (float)(v24 + v25) * 64.0;
  v97 = v33;
  if (v33 >= 2147483650.0)
  {
    v34 = 0x7FFFFFFF;
  }
  else if (v33 <= -2147483650.0)
  {
    v34 = 0x80000000;
  }
  else
  {
    v34 = (int)v33;
  }
  v98 = v32;
  v99 = v34;
  v100 = (unint64_t)vrev64_s32(a3[1]);
  *(float *)(v19 + 32) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 36) = v35;
  *(_DWORD *)(v19 + 40) = v36;
  *(_DWORD *)(v19 + 44) = v37;
  v38 = *a2 * 64.0;
  if (v38 >= 2147483650.0)
  {
    v39 = 0x7FFFFFFF;
  }
  else if (v38 <= -2147483650.0)
  {
    v39 = 0x80000000;
  }
  else
  {
    v39 = (int)v38;
  }
  v40 = v24 * 64.0;
  if (v40 >= 2147483650.0)
  {
    v41 = 0x7FFFFFFF;
  }
  else if (v40 <= -2147483650.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v40;
  }
  v42 = v96 + (float)((float)v8 * 0.015625);
  v43 = v95 - (float)((float)v11 * 0.015625);
  v44 = a3[1].i32[1];
  v45 = v25 * 64.0;
  if (v45 >= 2147483650.0)
  {
    v46 = 0x7FFFFFFF;
  }
  else if (v45 <= -2147483650.0)
  {
    v46 = 0x80000000;
  }
  else
  {
    v46 = (int)v45;
  }
  v98 = v39;
  v99 = v41;
  v100 = __PAIR64__(v46, v44);
  *(float *)(v19 + 16) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 20) = v47;
  *(_DWORD *)(v19 + 24) = v48;
  *(_DWORD *)(v19 + 28) = v49;
  v50 = (float)(v42 + v43) * 64.0;
  if (v50 >= 2147483650.0)
  {
    v51 = 0x7FFFFFFF;
  }
  else if (v50 <= -2147483650.0)
  {
    v51 = 0x80000000;
  }
  else
  {
    v51 = (int)v50;
  }
  v52 = a2[1] * 64.0;
  if (v52 >= 2147483650.0)
  {
    v53 = 0x7FFFFFFF;
  }
  else if (v52 <= -2147483650.0)
  {
    v53 = 0x80000000;
  }
  else
  {
    v53 = (int)v52;
  }
  v98 = v51;
  v99 = v53;
  v100 = (unint64_t)vrev64_s32(*a3);
  *(float *)(v19 + 48) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 52) = v54;
  *(_DWORD *)(v19 + 56) = v55;
  *(_DWORD *)(v19 + 60) = v56;
  if (v50 >= 2147483650.0)
  {
    v58 = 0x7FFFFFFF;
    v57 = v97;
  }
  else
  {
    v57 = v97;
    if (v50 <= -2147483650.0)
      v58 = 0x80000000;
    else
      v58 = (int)v50;
  }
  if (v57 >= 2147483650.0)
  {
    v59 = 0x7FFFFFFF;
  }
  else if (v57 <= -2147483650.0)
  {
    v59 = 0x80000000;
  }
  else
  {
    v59 = (int)v57;
  }
  v98 = v58;
  v99 = v59;
  v100 = *(unint64_t *)((char *)a3 + 4);
  *(float *)(v19 + 80) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 84) = v60;
  *(_DWORD *)(v19 + 88) = v61;
  *(_DWORD *)(v19 + 92) = v62;
  if (v50 >= 2147483650.0)
  {
    v63 = 0x7FFFFFFF;
  }
  else if (v50 <= -2147483650.0)
  {
    v63 = 0x80000000;
  }
  else
  {
    v63 = (int)v50;
  }
  if (v40 >= 2147483650.0)
  {
    v64 = 0x7FFFFFFF;
  }
  else if (v40 <= -2147483650.0)
  {
    v64 = 0x80000000;
  }
  else
  {
    v64 = (int)v40;
  }
  v65 = a3->i32[1];
  if (v45 >= 2147483650.0)
  {
    v66 = 0x7FFFFFFF;
  }
  else if (v45 <= -2147483650.0)
  {
    v66 = 0x80000000;
  }
  else
  {
    v66 = (int)v45;
  }
  v98 = v63;
  v99 = v64;
  v100 = __PAIR64__(v66, v65);
  *(float *)(v19 + 64) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 68) = v67;
  *(_DWORD *)(v19 + 72) = v68;
  *(_DWORD *)(v19 + 76) = v69;
  v70 = v42 * 64.0;
  if (v70 >= 2147483650.0)
  {
    v71 = 0x7FFFFFFF;
  }
  else if (v70 <= -2147483650.0)
  {
    v71 = 0x80000000;
  }
  else
  {
    v71 = (int)v70;
  }
  v72 = a2[1] * 64.0;
  if (v72 >= 2147483650.0)
  {
    v73 = 0x7FFFFFFF;
  }
  else if (v72 <= -2147483650.0)
  {
    v73 = 0x80000000;
  }
  else
  {
    v73 = (int)v72;
  }
  v74 = v43 * 64.0;
  if (v74 >= 2147483650.0)
  {
    v75 = 0x7FFFFFFF;
  }
  else if (v74 <= -2147483650.0)
  {
    v75 = 0x80000000;
  }
  else
  {
    v75 = (int)v74;
  }
  v76 = a3->i32[0];
  v98 = v71;
  v99 = v73;
  v100 = __PAIR64__(v76, v75);
  *(float *)(v19 + 96) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 100) = v77;
  *(_DWORD *)(v19 + 104) = v78;
  *(_DWORD *)(v19 + 108) = v79;
  if (v70 >= 2147483650.0)
  {
    v81 = 0x7FFFFFFF;
    v80 = v97;
  }
  else
  {
    v80 = v97;
    if (v70 <= -2147483650.0)
      v81 = 0x80000000;
    else
      v81 = (int)v70;
  }
  if (v80 >= 2147483650.0)
  {
    v82 = 0x7FFFFFFF;
  }
  else if (v80 <= -2147483650.0)
  {
    v82 = 0x80000000;
  }
  else
  {
    v82 = (int)v80;
  }
  if (v74 >= 2147483650.0)
  {
    v83 = 0x7FFFFFFF;
  }
  else if (v74 <= -2147483650.0)
  {
    v83 = 0x80000000;
  }
  else
  {
    v83 = (int)v74;
  }
  v84 = a3[1].i32[0];
  v98 = v81;
  v99 = v82;
  v100 = __PAIR64__(v84, v83);
  *(float *)(v19 + 112) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 116) = v85;
  *(_DWORD *)(v19 + 120) = v86;
  *(_DWORD *)(v19 + 124) = v87;
  if (v70 >= 2147483650.0)
  {
    v88 = 0x7FFFFFFF;
  }
  else if (v70 <= -2147483650.0)
  {
    v88 = 0x80000000;
  }
  else
  {
    v88 = (int)v70;
  }
  if (v40 >= 2147483650.0)
  {
    v89 = 0x7FFFFFFF;
  }
  else if (v40 <= -2147483650.0)
  {
    v89 = 0x80000000;
  }
  else
  {
    v89 = (int)v40;
  }
  if (v74 >= 2147483650.0)
  {
    v90 = 0x7FFFFFFF;
  }
  else if (v74 <= -2147483650.0)
  {
    v90 = 0x80000000;
  }
  else
  {
    v90 = (int)v74;
  }
  if (v45 >= 2147483650.0)
  {
    v91 = 0x7FFFFFFF;
  }
  else if (v45 <= -2147483650.0)
  {
    v91 = 0x80000000;
  }
  else
  {
    v91 = (int)v45;
  }
  v98 = v88;
  v99 = v89;
  v100 = __PAIR64__(v91, v90);
  *(float *)(v19 + 128) = WebCore::snapRectToDevicePixels(&v98, a4);
  *(_DWORD *)(v19 + 132) = v92;
  *(_DWORD *)(v19 + 136) = v93;
  *(_DWORD *)(v19 + 140) = v94;
}

float WebCore::snapRectToDevicePixels(int *a1, float a2)
{
  double v2;

  v2 = (double)*a1 * 0.015625;
  if (v2 < 0.0)
    return round((v2 + (double)-*a1) * a2) / a2 - (double)-*a1;
  else
    return round(v2 * a2) / a2;
}

uint64_t WebCore::StyleCachedImage::computeIntrinsicDimensions(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, WebCore::Length *a3, WebCore::Length *a4, float32x2_t *a5, double a6, double a7, float a8)
{
  uint64_t result;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  double v20;
  float v21;
  double v22;
  int32x2_t v23;
  __int32 v24;
  float v25;
  float32x2_t v26;
  __int32 v27;
  __int16 v28;
  char v29;

  result = WebCore::StyleCachedImage::renderSVGResource(this, a2, a6, a7, a8);
  if (result
    || (!*((_BYTE *)this + 57) || *((_BYTE *)this + 56))
    && (result = (uint64_t)WebCore::StyleCachedImage::uncheckedRenderSVGResource(this, a2, v14, v15, v16)) != 0)
  {
    v20 = *((float *)this + 15) * 64.0;
    if (v20 >= 2147483650.0)
    {
      v21 = 2147500000.0;
    }
    else if (v20 <= -2147483650.0)
    {
      v21 = -2147500000.0;
    }
    else
    {
      v21 = (float)(int)v20;
    }
    v25 = v21;
    v22 = *((float *)this + 16) * 64.0;
    if (v22 >= 2147483650.0)
    {
      v23 = (int32x2_t)0x4F0000004F000000;
    }
    else
    {
      v23.i32[1] = -1042284544;
      if (v22 <= -2147483650.0)
        v23 = (int32x2_t)0xCF000000CF000000;
      else
        *(float *)v23.i32 = (float)(int)v22;
    }
    v24 = v23.i32[0];
    if (a2)
      *(float *)v23.i32 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                                 + 40)
                                                                                     + 8));
    else
      v23.i32[0] = 1.0;
    v26 = vdiv_f32(vrndm_f32(vmul_f32(vmul_n_f32((float32x2_t)__PAIR64__(v24, LODWORD(v25)), *(float *)v23.i32), (float32x2_t)vdup_n_s32(0x3C800000u))), (float32x2_t)vdup_lane_s32(v23, 0));
    v27 = v26.i32[0];
    v28 = 4;
    v29 = 1;
    WebCore::Length::operator=((unsigned int *)a3, (unsigned int *)&v27);
    if (v28 == 11)
      WebCore::Length::deref((WebCore::Length *)&v27);
    v27 = v26.i32[1];
    v28 = 4;
    v29 = 1;
    result = (uint64_t)WebCore::Length::operator=((unsigned int *)a4, (unsigned int *)&v27);
    if (v28 == 11)
      result = (uint64_t)WebCore::Length::deref((WebCore::Length *)&v27);
    *a5 = v26;
  }
  else
  {
    v17 = *((_QWORD *)this + 6);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_DWORD **)(v18 + 688);
        if (v19)
        {
          ++v19[2];
          result = (*(uint64_t (**)(_DWORD *, WebCore::Length *, WebCore::Length *, float32x2_t *))(*(_QWORD *)v19 + 160))(v19, a3, a4, a5);
          if (v19[2] == 1)
            return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
          else
            --v19[2];
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::StyleGeneratedImage::imageHasNaturalDimensions(WebCore::StyleGeneratedImage *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t WebCore::StyleCachedImage::data(WebCore::StyleCachedImage *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

BOOL WebCore::StyleCachedImage::isLoaded(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, double a3, double a4, float a5)
{
  double v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;

  if (WebCore::StyleCachedImage::renderSVGResource(this, a2, a3, a4, a5)
    || (!*((_BYTE *)this + 57) || *((_BYTE *)this + 56))
    && WebCore::StyleCachedImage::uncheckedRenderSVGResource(this, a2, v7, v8, v9))
  {
    return 1;
  }
  v10 = *((_QWORD *)this + 6);
  return v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (*(_WORD *)(v11 + 557) & 0x400) == 0;
}

uint64_t WebCore::StyleCachedImage::canRender(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, double a3, double a4, float a5)
{
  float v5;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *(float *)&a3;
  if (WebCore::StyleCachedImage::renderSVGResource(this, a2, a3, a4, a5)
    || (!*((_BYTE *)this + 57) || *((_BYTE *)this + 56))
    && WebCore::StyleCachedImage::uncheckedRenderSVGResource(this, a2, v8, v9, v10))
  {
    return 1;
  }
  v11 = *((_QWORD *)this + 6);
  if (!v11)
    return 0;
  result = *(_QWORD *)(v11 + 8);
  if (!result)
    return result;
  if ((*(_WORD *)(result + 557) >> 5) - 3 < 2)
    return 0;
  v13 = WebCore::CachedImage::imageSizeForRenderer(result, (uint64_t)a2, 0, v5);
  return (int)v13 > 0 && SHIDWORD(v13) > 0;
}

const WebCore::RenderElement *WebCore::StyleCachedImage::uncheckedRenderSVGResource(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, double a3, double a4, float a5)
{
  const WebCore::RenderElement *v5;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  const WebCore::Document *v16;
  double v17;
  double v18;
  float v19;
  uint64_t v20;
  WebCore::CachedImage *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebCore::TreeScope *v25;
  WTF::StringImpl *v26;
  WebCore::Node *v27;
  WTF::StringImpl *v28;
  WebCore::TreeScope *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[2];
  WebCore::Node *v33;
  WTF::StringImpl *v34[5];
  const WebCore::Document *v35;

  v5 = a2;
  if (a2)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
    if (!v7)
      goto LABEL_16;
    v9 = *(_DWORD *)v7;
    v8 = *(unsigned int *)(v7 + 4);
    *(_DWORD *)v7 += 2;
    v10 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v8)
      {
        v11 = 16;
        if (v8 < 0x10)
          v11 = v8;
        v12 = v11;
        v13 = *(_BYTE **)(v7 + 8);
        do
        {
          if (*v13 == 35)
            goto LABEL_12;
          ++v13;
          --v12;
        }
        while (v12);
        if (v8 >= 0x11)
        {
          v13 = memchr((void *)(v10 + v11), 35, v8 - v11);
          if (v13)
          {
LABEL_12:
            v14 = (uint64_t)&v13[-v10];
            goto LABEL_13;
          }
        }
      }
      v14 = -1;
    }
    else
    {
      v14 = WTF::find<char16_t,(void *)0>(*(_QWORD *)(v7 + 8), v8, 0x23u, 0, a3, a4, a5);
      v9 = *(_DWORD *)v7 - 2;
    }
LABEL_13:
    if (v9)
      *(_DWORD *)v7 = v9;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v8);
    if (v14 != -1)
    {
      v16 = *(const WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8);
      *((_DWORD *)v16 + 6) += 2;
      v35 = v16;
      *(_QWORD *)&v17 = WebCore::CSSImageValue::reresolvedURL((WebCore::CSSImageValue *)*((_QWORD *)this + 4), v16, (uint64_t)v34).n128_u64[0];
      v20 = *((_QWORD *)this + 6);
      if (v20 && (v21 = *(WebCore::CachedImage **)(v20 + 8)) != 0)
      {
        v22 = WebCore::CachedImage::image(v21);
        v5 = v22;
        if (v22)
        {
          if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v22 + 56))(v22)
            && (WebCore::SVGImage::rootElement((unsigned int *)v5, &v33), v33))
          {
            v32[0] = (WTF::StringImpl *)WTF::URL::fragmentIdentifier((WTF::URL *)v34);
            v32[1] = v24;
            v25 = (WebCore::TreeScope *)WebCore::Node::treeScopeForSVGReferences(v33);
            WTF::StringView::toAtomString((WTF::StringView *)v32, &v31);
            v5 = (const WebCore::RenderElement *)WebCore::TreeScope::lookupLegacySVGResoureById(v25, (const WTF::AtomString *)&v31);
            *((_WORD *)this + 28) = (v5 != 0) | 0x100;
            v26 = v31;
            v31 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v23);
              else
                *(_DWORD *)v26 -= 2;
            }
            v27 = v33;
            v33 = 0;
            if (v27)
            {
              if (*((_DWORD *)v27 + 6) == 2)
              {
                if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v27, v23);
              }
              else
              {
                *((_DWORD *)v27 + 6) -= 2;
              }
            }
          }
          else
          {
            v5 = 0;
          }
        }
      }
      else
      {
        WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)v34, v16, v32, v17, v18, v19);
        v29 = (WebCore::TreeScope *)WebCore::Node::treeScopeForSVGReferences(*(WebCore::Node **)(*((_QWORD *)v5 + 3)
                                                                                               + 8));
        v5 = (const WebCore::RenderElement *)WebCore::TreeScope::lookupLegacySVGResoureById(v29, (const WTF::AtomString *)v32);
        *((_WORD *)this + 28) = (v5 != 0) | 0x100;
        v30 = v32[0];
        v32[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v23);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      v28 = v34[0];
      v34[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v23);
        else
          *(_DWORD *)v28 -= 2;
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v35);
    }
    else
    {
LABEL_16:
      v5 = 0;
      *((_WORD *)this + 28) = 256;
    }
  }
  return v5;
}

uint64_t WebCore::ResourceResponseBase::isRedirection(WebCore::ResourceResponseBase *this)
{
  return ((*((__int16 *)this + 68) - 301) < 8) & (0xC7u >> (*((_WORD *)this + 68) - 45));
}

uint64_t *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 16 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::platformRegisterFactories()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E340D600;
  v0[1] = WebCore::ImageDecoderAVFObjC::supportsMediaType;
  v7 = v0;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E32027D8;
  v1[1] = WebCore::ImageDecoderAVFObjC::canDecodeType;
  v8 = v1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E340D628;
  v2[1] = WebCore::createInProcessImageDecoderAVFObjC;
  v9 = v2;
  if (dword_1EE2F8B9C == dword_1EE2F8B98)
  {
    WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageDecoder::ImageDecoderFactory>((unint64_t)&v7);
  }
  else
  {
    v3 = dword_1EE2F8B9C + 1;
    v4 = (_QWORD *)(WebCore::installedFactories(void)::factories + 24 * dword_1EE2F8B9C);
    v7 = 0;
    *v4 = v0;
    v5 = v8;
    v8 = 0;
    v4[1] = v5;
    v6 = v9;
    v9 = 0;
    v4[2] = v6;
    dword_1EE2F8B9C = v3;
  }
  WebCore::LegacyCDMFactory::~LegacyCDMFactory((WebCore::LegacyCDMFactory *)&v7);
}

{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E32027B0;
  v21 = v0;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E32027D8;
  v1[1] = WebCore::LegacyCDMPrivateClearKey::supportsKeySystem;
  v22 = v1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3202800;
  v2[1] = WebCore::LegacyCDMPrivateClearKey::supportsKeySystemAndMimeType;
  v23 = v2;
  if (dword_1EE2EF8EC == dword_1EE2EF8E8)
  {
    WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LegacyCDMFactory>((unint64_t)&v21);
  }
  else
  {
    v3 = dword_1EE2EF8EC + 1;
    v4 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 24 * dword_1EE2EF8EC);
    v21 = 0;
    *v4 = v0;
    v5 = v22;
    v22 = 0;
    v4[1] = v5;
    v6 = v23;
    v23 = 0;
    v4[2] = v6;
    dword_1EE2EF8EC = v3;
  }
  WebCore::LegacyCDMFactory::~LegacyCDMFactory((WebCore::LegacyCDMFactory *)&v21);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3202828;
  v21 = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E32027D8;
  v8[1] = WebCore::CDMPrivateMediaPlayer::supportsKeySystem;
  v22 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3202800;
  v9[1] = WebCore::CDMPrivateMediaPlayer::supportsKeySystemAndMimeType;
  v23 = v9;
  if (dword_1EE2EF8EC == dword_1EE2EF8E8)
  {
    WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LegacyCDMFactory>((unint64_t)&v21);
  }
  else
  {
    v10 = dword_1EE2EF8EC + 1;
    v11 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 24 * dword_1EE2EF8EC);
    v21 = 0;
    *v11 = v7;
    v12 = v22;
    v22 = 0;
    v11[1] = v12;
    v13 = v23;
    v23 = 0;
    v11[2] = v13;
    dword_1EE2EF8EC = v10;
  }
  WebCore::LegacyCDMFactory::~LegacyCDMFactory((WebCore::LegacyCDMFactory *)&v21);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E3202850;
  v21 = v14;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = off_1E32027D8;
  v15[1] = WebCore::CDMPrivateMediaSourceAVFObjC::supportsKeySystem;
  v22 = v15;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E3202800;
  v16[1] = WebCore::CDMPrivateMediaSourceAVFObjC::supportsKeySystemAndMimeType;
  v23 = v16;
  if (dword_1EE2EF8EC == dword_1EE2EF8E8)
  {
    WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LegacyCDMFactory>((unint64_t)&v21);
  }
  else
  {
    v17 = dword_1EE2EF8EC + 1;
    v18 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 24 * dword_1EE2EF8EC);
    v21 = 0;
    *v18 = v14;
    v19 = v22;
    v22 = 0;
    v18[1] = v19;
    v20 = v23;
    v23 = 0;
    v18[2] = v20;
    dword_1EE2EF8EC = v17;
  }
  WebCore::LegacyCDMFactory::~LegacyCDMFactory((WebCore::LegacyCDMFactory *)&v21);
}

uint64_t *WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageDecoder::ImageDecoderFactory>(unint64_t a1)
{
  uint64_t *result;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1EE2F8B9C + 1, a1);
  v2 = dword_1EE2F8B9C + 1;
  v3 = (_QWORD *)(WebCore::installedFactories(void)::factories + 24 * dword_1EE2F8B9C);
  v4 = *result;
  *result = 0;
  *v3 = v4;
  v5 = result[1];
  result[1] = 0;
  v3[1] = v5;
  v6 = result[2];
  result[2] = 0;
  v3[2] = v6;
  dword_1EE2F8B9C = v2;
  return result;
}

unint64_t WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2;
  if (WebCore::installedFactories(void)::factories <= a2
    && WebCore::installedFactories(void)::factories + 24 * (unint64_t)dword_1EE2F8B9C > a2)
  {
    v6 = a2 - WebCore::installedFactories(void)::factories;
    v7 = dword_1EE2F8B98 + ((unint64_t)dword_1EE2F8B98 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a1)
      a1 = v8;
    WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
    return WebCore::installedFactories(void)::factories + v6;
  }
  else
  {
    v3 = dword_1EE2F8B98 + ((unint64_t)dword_1EE2F8B98 >> 2);
    if (v3 >= 0x10)
      v4 = v3 + 1;
    else
      v4 = 16;
    if (v4 > a1)
      a1 = v4;
    WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
  }
  return v2;
}

unint64_t WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t result)
{
  WebCore::LegacyCDMFactory *v1;
  WebCore::LegacyCDMFactory *v2;
  int v3;
  _QWORD *v4;
  void *v5;

  if (dword_1EE2F8B98 < result)
  {
    if (result >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1942E81B8);
    }
    v1 = (WebCore::LegacyCDMFactory *)WebCore::installedFactories(void)::factories;
    v2 = (WebCore::LegacyCDMFactory *)(WebCore::installedFactories(void)::factories
                                     + 24 * dword_1EE2F8B9C);
    v3 = 24 * result;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * result));
    dword_1EE2F8B98 = (v3 & 0xFFFFFFF8) / 0x18;
    WebCore::installedFactories(void)::factories = (uint64_t)v4;
    result = (unint64_t)WTF::VectorMover<false,WebCore::LegacyCDMFactory>::move(v1, v2, v4);
    if (v1)
    {
      if ((WebCore::LegacyCDMFactory *)WebCore::installedFactories(void)::factories == v1)
      {
        WebCore::installedFactories(void)::factories = 0;
        dword_1EE2F8B98 = 0;
      }
      return WTF::fastFree(v1, v5);
    }
  }
  return result;
}

WebCore::LegacyCDMFactory *WTF::VectorMover<false,WebCore::LegacyCDMFactory>::move(WebCore::LegacyCDMFactory *result, WebCore::LegacyCDMFactory *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (; result != a2; a3 += 3)
  {
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *a3 = v5;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    a3[1] = v6;
    v7 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    a3[2] = v7;
    WebCore::LegacyCDMFactory::~LegacyCDMFactory(result);
    result = (WebCore::LegacyCDMFactory *)(v8 + 24);
  }
  return result;
}

void WTF::Vector<WebCore::ImageDecoder::ImageDecoderFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, void *a2)
{
  WebCore::LegacyCDMFactory *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  if (dword_1EE2F8B98)
  {
    if (dword_1EE2F8B9C)
    {
      v2 = (WebCore::LegacyCDMFactory *)WebCore::installedFactories(void)::factories;
      v3 = 24 * dword_1EE2F8B9C;
      do
      {
        WebCore::LegacyCDMFactory::~LegacyCDMFactory(v2);
        v2 = (WebCore::LegacyCDMFactory *)(v4 + 24);
        v3 -= 24;
      }
      while (v3);
      dword_1EE2F8B9C = 0;
    }
    v5 = (WTF *)WebCore::installedFactories(void)::factories;
    if (WebCore::installedFactories(void)::factories)
    {
      WebCore::installedFactories(void)::factories = 0;
      dword_1EE2F8B98 = 0;
      WTF::fastFree(v5, a2);
    }
  }
}

void WebCore::LegacyCDMFactory::~LegacyCDMFactory(WebCore::LegacyCDMFactory *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebCore::LegacyCDM::clearFactories(WebCore::LegacyCDM *this)
{
  uint64_t v1;
  void *v2;
  char v3;

  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  std::call_once[abi:sn180100]<WebCore::installedCDMFactories(void)::$_0>((uint64_t)&v3);
  WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v1, v2);
}

void WebCore::LegacyCDM::registerCDMFactory(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  std::call_once[abi:sn180100]<WebCore::installedCDMFactories(void)::$_0>((uint64_t)&v13);
  v6 = *a1;
  *a1 = 0;
  v7 = *a2;
  *a2 = 0;
  v13 = v6;
  v14 = v7;
  v8 = *a3;
  *a3 = 0;
  v15 = v8;
  if (dword_1EE2EF8EC == dword_1EE2EF8E8)
  {
    WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LegacyCDMFactory>((unint64_t)&v13);
  }
  else
  {
    v9 = dword_1EE2EF8EC + 1;
    v10 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 24 * dword_1EE2EF8EC);
    v13 = 0;
    *v10 = v6;
    v11 = v14;
    v14 = 0;
    v10[1] = v11;
    v12 = v15;
    v15 = 0;
    v10[2] = v12;
    dword_1EE2EF8EC = v9;
  }
  WebCore::LegacyCDMFactory::~LegacyCDMFactory((WebCore::LegacyCDMFactory *)&v13);
}

void WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, void *a2)
{
  WebCore::LegacyCDMFactory *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  if (dword_1EE2EF8E8)
  {
    if (dword_1EE2EF8EC)
    {
      v2 = (WebCore::LegacyCDMFactory *)WebCore::installedCDMFactories(void)::cdms;
      v3 = 24 * dword_1EE2EF8EC;
      do
      {
        WebCore::LegacyCDMFactory::~LegacyCDMFactory(v2);
        v2 = (WebCore::LegacyCDMFactory *)(v4 + 24);
        v3 -= 24;
      }
      while (v3);
      dword_1EE2EF8EC = 0;
    }
    v5 = (WTF *)WebCore::installedCDMFactories(void)::cdms;
    if (WebCore::installedCDMFactories(void)::cdms)
    {
      WebCore::installedCDMFactories(void)::cdms = 0;
      dword_1EE2EF8E8 = 0;
      WTF::fastFree(v5, a2);
    }
  }
}

uint64_t *WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LegacyCDMFactory>(unint64_t a1)
{
  uint64_t *result;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1EE2EF8EC + 1, a1);
  v2 = dword_1EE2EF8EC + 1;
  v3 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 24 * dword_1EE2EF8EC);
  v4 = *result;
  *result = 0;
  *v3 = v4;
  v5 = result[1];
  result[1] = 0;
  v3[1] = v5;
  v6 = result[2];
  result[2] = 0;
  v3[2] = v6;
  dword_1EE2EF8EC = v2;
  return result;
}

unint64_t WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2;
  if (WebCore::installedCDMFactories(void)::cdms <= a2
    && WebCore::installedCDMFactories(void)::cdms + 24 * (unint64_t)dword_1EE2EF8EC > a2)
  {
    v6 = a2 - WebCore::installedCDMFactories(void)::cdms;
    v7 = dword_1EE2EF8E8 + ((unint64_t)dword_1EE2EF8E8 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a1)
      a1 = v8;
    WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
    return WebCore::installedCDMFactories(void)::cdms + v6;
  }
  else
  {
    v3 = dword_1EE2EF8E8 + ((unint64_t)dword_1EE2EF8E8 >> 2);
    if (v3 >= 0x10)
      v4 = v3 + 1;
    else
      v4 = 16;
    if (v4 > a1)
      a1 = v4;
    WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
  }
  return v2;
}

unint64_t WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t result)
{
  WebCore::LegacyCDMFactory *v1;
  WebCore::LegacyCDMFactory *v2;
  int v3;
  _QWORD *v4;
  void *v5;

  if (dword_1EE2EF8E8 < result)
  {
    if (result >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v1 = (WebCore::LegacyCDMFactory *)WebCore::installedCDMFactories(void)::cdms;
      v2 = (WebCore::LegacyCDMFactory *)(WebCore::installedCDMFactories(void)::cdms
                                       + 24 * dword_1EE2EF8EC);
      v3 = 24 * result;
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * result));
      dword_1EE2EF8E8 = (v3 & 0xFFFFFFF8) / 0x18;
      WebCore::installedCDMFactories(void)::cdms = (uint64_t)v4;
      result = (unint64_t)WTF::VectorMover<false,WebCore::LegacyCDMFactory>::move(v1, v2, v4);
      if (v1)
      {
        if ((WebCore::LegacyCDMFactory *)WebCore::installedCDMFactories(void)::cdms == v1)
        {
          WebCore::installedCDMFactories(void)::cdms = 0;
          dword_1EE2EF8E8 = 0;
        }
        return WTF::fastFree(v1, v5);
      }
    }
  }
  return result;
}

float WebCore::Layout::LineBoxBuilder::enclosingAscentDescentWithFallbackFonts(uint64_t a1, char a2, char a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  float v12;
  float v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  float v31;
  float v32;
  uint64_t *v33;
  uint64_t *v34;

  v27 = (a2 == 4 || a3 == 0) && (*(_QWORD *)(**(_QWORD **)a1 + 32) & 0x1FLL) != 25;
  v6 = *a4;
  if (!*a4)
  {
    v7 = 0;
    v8 = 0;
LABEL_9:
    v9 = v7;
    v7 = &v6[v8];
    goto LABEL_10;
  }
  v8 = *((unsigned int *)v6 - 1);
  v7 = &v6[v8];
  if (!*((_DWORD *)v6 - 3))
    goto LABEL_9;
  if (!(_DWORD)v8)
  {
    v26 = 0;
    v9 = *a4;
    goto LABEL_39;
  }
  v25 = 8 * v8;
  v9 = *a4;
  while ((unint64_t)(*v9 + 1) <= 1)
  {
    ++v9;
    v25 -= 8;
    if (!v25)
    {
      v9 = v7;
      break;
    }
  }
LABEL_10:
  if (!v6)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v26 = *((unsigned int *)v6 - 1);
LABEL_39:
  v10 = &v6[v26];
LABEL_12:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*v9 + 8))
    {
      v28 = v9 + 1;
      v9 = v7;
      if (v28 != v7)
      {
        v9 = v28;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          if (++v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v11 = &v6[*((unsigned int *)v6 - 1)];
  else
    v11 = 0;
  v12 = 0.0;
  v13 = 0.0;
  if (v9 != v11)
  {
    v14 = *((_DWORD *)a4 + 2);
    if (v27)
    {
      do
      {
        v16 = *v9;
        v15 = v9 + 1;
        v17 = *(_QWORD *)(v16 + 8);
        WebCore::Layout::ascentAndDescentWithTextBoxEdgeForInlineBox();
        v20 = (float)((float)*(int *)(v17 + 72) - (float)(v18 + v19)) * 0.5;
        v21 = v18 + v20;
        v22 = v19 + v20;
        if (v13 < v21)
          v13 = v21;
        if (v12 < v22)
          v12 = v22;
        v23 = v7;
        if (v15 != v7)
        {
          v23 = v15;
          while ((unint64_t)(*v23 + 1) <= 1)
          {
            if (++v23 == v7)
            {
              v23 = v7;
              break;
            }
          }
        }
        v9 = v10;
        if (v23 != v10)
        {
          v9 = v23;
          if (!*(_QWORD *)(*v23 + 8))
          {
            while (1)
            {
              v29 = v9 + 1;
              v9 = v7;
              if (v29 != v7)
              {
                v9 = v29;
                while ((unint64_t)(*v9 + 1) <= 1)
                {
                  if (++v9 == v7)
                  {
                    v9 = v7;
                    break;
                  }
                }
              }
              if (v9 == v10)
                break;
              if (*(_QWORD *)(*v9 + 8))
                goto LABEL_29;
            }
            v9 = v10;
          }
        }
LABEL_29:
        *((_DWORD *)a4 + 2) = ++v14;
      }
      while (v9 != v11);
    }
    else
    {
      do
      {
        v30 = v9 + 1;
        WebCore::Layout::ascentAndDescentWithTextBoxEdgeForInlineBox();
        if (v13 < v31)
          v13 = v31;
        if (v12 < v32)
          v12 = v32;
        v33 = v7;
        if (v30 != v7)
        {
          v33 = v30;
          while ((unint64_t)(*v33 + 1) <= 1)
          {
            if (++v33 == v7)
            {
              v33 = v7;
              break;
            }
          }
        }
        v9 = v10;
        if (v33 != v10)
        {
          v9 = v33;
          if (!*(_QWORD *)(*v33 + 8))
          {
            while (1)
            {
              v34 = v9 + 1;
              v9 = v7;
              if (v34 != v7)
              {
                v9 = v34;
                while ((unint64_t)(*v9 + 1) <= 1)
                {
                  if (++v9 == v7)
                  {
                    v9 = v7;
                    break;
                  }
                }
              }
              if (v9 == v10)
                break;
              if (*(_QWORD *)(*v9 + 8))
                goto LABEL_68;
            }
            v9 = v10;
          }
        }
LABEL_68:
        *((_DWORD *)a4 + 2) = ++v14;
      }
      while (v9 != v11);
    }
  }
  return floorf(v13);
}

void WebCore::Layout::LineBoxBuilder::setVerticalPropertiesForInlineLevelBox(WebCore::Layout::LineBoxBuilder *this, const WebCore::Layout::LineBox *a2, WebCore::Layout::InlineLevelBox *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  int v52;
  uint64_t v53;
  int v54;
  float v55;
  int v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _DWORD *v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int *v87;
  uint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  float v100;
  float v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  float v109;
  uint64_t v110;
  _QWORD *v111;
  _DWORD *v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  _BYTE *v137;
  float v138;
  float v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  BOOL v148;
  int v149;
  float v150;
  uint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  unsigned int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  BOOL v190;
  int v191;
  float v192;
  int v193;
  float v194;
  float v195;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;

  v6 = *((unsigned __int8 *)a3 + 47);
  if (v6 <= 3)
  {
    if (v6 - 1 >= 2)
      return;
LABEL_3:
    v7 = *((_DWORD *)a2 + 8);
    v8 = *((unsigned __int8 *)a3 + 66);
    if (v6 == 4 || v8 == 0)
    {
      v49 = *((_QWORD *)a3 + 6);
      v10 = *(_DWORD *)(v49 + 44);
      v11 = *(_DWORD *)(v49 + 48);
      v12 = v11 + v10;
      if (v11 + v10 < 0 != __OFADD__(v11, v10))
        v13 = v12 + 1;
      else
        v13 = v11 + v10;
      v14 = v12 - (v13 >> 1);
      v15 = v13 >> 1;
      if (v7)
      {
        v10 = v14;
        v11 = v15;
      }
      v16 = (float)v10;
      v51 = (float)v11;
    }
    else
    {
      v49 = *((_QWORD *)a3 + 6);
      WebCore::Layout::ascentAndDescentWithTextBoxEdgeForInlineBox();
      v16 = v50;
      if (v8 == 1)
      {
        if (v7)
        {
          v200 = *(_DWORD *)(v49 + 44);
          v201 = *(_DWORD *)(v49 + 48);
          v36 = __OFADD__(v201, v200);
          v202 = v201 + v200;
          if (v202 < 0 != v36)
            ++v202;
          v56 = v202 >> 1;
        }
        else
        {
          v56 = *(_DWORD *)(v49 + 48);
        }
        v51 = (float)v56;
      }
      else if (v8 == 2)
      {
        v52 = *(_DWORD *)(v49 + 44);
        if (v7)
        {
          v203 = *(_DWORD *)(v49 + 48);
          v36 = __OFADD__(v203, v52);
          v204 = v203 + v52;
          if (v204 < 0 != v36)
            v205 = v204 + 1;
          else
            v205 = v204;
          v52 = v204 - (v205 >> 1);
        }
        v16 = (float)v52;
      }
    }
    v17 = floorf(v16);
    v18 = ceilf(v51);
    *((float *)a3 + 8) = v17;
    *((float *)a3 + 9) = v18;
    *((float *)a3 + 6) = v17;
    *((float *)a3 + 7) = v18;
    *((float *)a3 + 5) = v17 + v18;
    if (v6 == 4)
    {
      v19 = *(_DWORD *)(v49 + 44);
      v20 = *(_DWORD *)(v49 + 48);
      v21 = v20 + v19;
      if (v20 + v19 < 0 != __OFADD__(v20, v19))
        v22 = v21 + 1;
      else
        v22 = v20 + v19;
      v23 = v21 - (v22 >> 1);
      v24 = v22 >> 1;
      if (v7)
      {
        v19 = v23;
        v20 = v24;
      }
      v25 = (float)v19;
      v26 = (float)v20;
    }
    else
    {
      switch(*((_WORD *)a3 + 32))
      {
        case 2u:
          v109 = *(float *)(v49 + 8);
          goto LABEL_112;
        case 3u:
          v109 = *(float *)(v49 + 36);
LABEL_112:
          v25 = v109;
          goto LABEL_103;
        case 5u:
        case 6u:
          v57 = *(_DWORD *)(v49 + 44);
          goto LABEL_98;
        default:
          v57 = *(_DWORD *)(v49 + 44);
          if (v7)
          {
LABEL_98:
            v102 = *(_DWORD *)(v49 + 48);
            v36 = __OFADD__(v102, v57);
            v103 = v102 + v57;
            if (v103 < 0 != v36)
              v104 = v103 + 1;
            else
              v104 = v103;
            v57 = v103 - (v104 >> 1);
          }
          v25 = (float)v57;
LABEL_103:
          v26 = 0.0;
          switch(HIBYTE(*((unsigned __int16 *)a3 + 32)))
          {
            case 4u:
              goto LABEL_21;
            case 5u:
            case 6u:
              goto LABEL_107;
            default:
              if (v7)
              {
LABEL_107:
                v106 = *(_DWORD *)(v49 + 44);
                v107 = *(_DWORD *)(v49 + 48);
                v36 = __OFADD__(v107, v106);
                v108 = v107 + v106;
                if (v108 < 0 != v36)
                  ++v108;
                v105 = v108 >> 1;
              }
              else
              {
                v105 = *(_DWORD *)(v49 + 48);
              }
              v26 = (float)v105;
              break;
          }
          break;
      }
    }
LABEL_21:
    if ((*(_QWORD *)(**(_QWORD **)this + 32) & 0x1FLL) == 0x19)
    {
      v27 = *((unsigned __int8 *)a3 + 64);
      goto LABEL_23;
    }
    v53 = *((_QWORD *)a3 + 7);
    v54 = *(unsigned __int8 *)(v53 + 4);
    if (v54 != 11 && v54 != 13)
    {
      if (*(_BYTE *)(v53 + 6))
      {
        if (*(float *)v53 < 0.0)
          goto LABEL_49;
      }
      else if ((*(_DWORD *)v53 & 0x80000000) != 0)
      {
LABEL_49:
        v27 = *((unsigned __int8 *)a3 + 64);
        if (v6 != 4 && *((_BYTE *)a3 + 64))
          goto LABEL_23;
        v55 = (float)((float)*(int *)(v49 + 56) - (float)(v25 + v26)) * 0.5;
        goto LABEL_197;
      }
    }
    WebCore::Layout::InlineLevelBox::preferredLineHeight(a3);
    v55 = (float)(floorf(v194) - (float)(v25 + v26)) * 0.5;
    v27 = *((unsigned __int8 *)a3 + 64);
    v6 = *((unsigned __int8 *)a3 + 47);
    v195 = 0.0;
    if (v55 <= 0.0)
      v195 = v55;
    if (v6 != 4 && v27 != 0)
      v55 = v195;
LABEL_197:
    v25 = v25 + v55;
    v26 = v26 + v55;
LABEL_23:
    if (v27 && v6 != 4)
    {
      v28 = *(_QWORD *)a3;
      v29 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (*(_DWORD *)(v29 + 8))
      {
        v159 = *(_QWORD *)(v29 + 40);
        v160 = *(_DWORD *)(v159 - 8);
        v161 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
        v162 = 9 * ((v161 + ~(v161 << 13)) ^ ((v161 + ~(v161 << 13)) >> 8));
        v163 = (v162 ^ (v162 >> 15)) + ~((v162 ^ (v162 >> 15)) << 27);
        v164 = v160 & ((v163 >> 31) ^ v163);
        if (*(_QWORD *)(v159 + 16 * v164) != v28)
        {
          v165 = 1;
          do
            v164 = ((_DWORD)v164 + v165++) & v160;
          while (*(_QWORD *)(v159 + 16 * v164) != v28);
        }
        v30 = (_QWORD *)(v159 + 16 * v164 + 8);
      }
      else
      {
        v30 = (_QWORD *)(v28 + 104);
      }
      v31 = (_DWORD *)*v30;
      v32 = v31[10];
      v33 = v31[11];
      v34 = v31[14];
      v35 = v31[15];
      v36 = __OFADD__(v32, v34);
      v37 = v32 + v34;
      v38 = (v32 >> 31) + 0x7FFFFFFF;
      if (!v36)
        v38 = v37;
      v40 = v31[6];
      v39 = v31[7];
      v36 = __OFADD__(v40, v38);
      v41 = v40 + v38;
      v42 = (v40 >> 31) + 0x7FFFFFFF;
      if (v36)
        v41 = v42;
      v25 = v25 + (float)((float)v41 * 0.015625);
      v36 = __OFADD__(v33, v35);
      v43 = v33 + v35;
      v44 = (v33 >> 31) + 0x7FFFFFFF;
      if (v36)
        v43 = v44;
      v36 = __OFADD__(v39, v43);
      v45 = v39 + v43;
      v46 = (v39 >> 31) + 0x7FFFFFFF;
      if (!v36)
        v46 = v45;
      v26 = v26 + (float)((float)v46 * 0.015625);
    }
    *((float *)a3 + 6) = floorf(v25);
    *((float *)a3 + 7) = ceilf(v26);
    v47 = *((_QWORD *)a3 + 6);
    v48 = *(_DWORD *)(v47 + 44);
    if (*((_DWORD *)a2 + 8))
    {
      v197 = *(_DWORD *)(v47 + 48);
      v36 = __OFADD__(v197, v48);
      v198 = v197 + v48;
      if (v198 < 0 != v36)
        v199 = v198 + 1;
      else
        v199 = v198;
      v48 = v198 - (v199 >> 1);
    }
    *((float *)a3 + 10) = (float)v48 - v16;
    return;
  }
  if (v6 == 4)
    goto LABEL_3;
  if (v6 != 8)
  {
    if (v6 != 16)
      return;
    v88 = *(_QWORD *)(*(_QWORD *)a3 + 80);
    v89 = (char *)a2 + 40;
    if (*((_QWORD *)a2 + 5) != v88)
    {
      v151 = *((_QWORD *)a2 + 20);
      v152 = *(_DWORD *)(v151 - 8);
      v153 = (~(v88 << 32) + v88) ^ ((unint64_t)(~(v88 << 32) + v88) >> 22);
      v154 = 9 * ((v153 + ~(v153 << 13)) ^ ((v153 + ~(v153 << 13)) >> 8));
      v155 = (v154 ^ (v154 >> 15)) + ~((v154 ^ (v154 >> 15)) << 27);
      v156 = v152 & ((v155 >> 31) ^ v155);
      v157 = *(_QWORD *)(v151 + 16 * v156);
      if (v157 != v88)
      {
        v166 = 1;
        while (v157)
        {
          v156 = ((_DWORD)v156 + v166) & v152;
          v157 = *(_QWORD *)(v151 + 16 * v156);
          ++v166;
          if (v157 == v88)
            goto LABEL_155;
        }
        v156 = *(unsigned int *)(v151 - 4);
      }
LABEL_155:
      v158 = *(_QWORD *)(v151 + 16 * v156 + 8);
      if (v158 >= *((unsigned int *)a2 + 39))
        goto LABEL_210;
      v89 = (char *)(*((_QWORD *)a2 + 18) + 104 * v158);
    }
    v90 = *((_DWORD *)a2 + 8);
    v91 = *((_QWORD *)v89 + 6);
    v93 = *(_DWORD *)(v91 + 44);
    v92 = *(_DWORD *)(v91 + 48);
    v94 = v92 + v93;
    if (v92 + v93 < 0 != __OFADD__(v92, v93))
      v95 = v94 + 1;
    else
      v95 = v92 + v93;
    v96 = v94 - (v95 >> 1);
    v97 = v95 >> 1;
    v98 = v90 == 0;
    if (v90)
      v99 = v96;
    else
      v99 = v93;
    if (!v98)
      v92 = v97;
    v100 = (float)v99;
    v101 = (float)v92;
    goto LABEL_151;
  }
  v58 = *(_QWORD *)a3;
  v59 = *(_WORD *)(*(_QWORD *)a3 + 12);
  if ((v59 & 0xF) != 0xB)
  {
    v60 = *(_QWORD *)this;
    v61 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_DWORD *)(v61 + 8))
    {
      v167 = *(_QWORD *)(v61 + 40);
      v168 = *(_DWORD *)(v167 - 8);
      v169 = (~(v58 << 32) + v58) ^ ((unint64_t)(~(v58 << 32) + v58) >> 22);
      v170 = 9 * ((v169 + ~(v169 << 13)) ^ ((v169 + ~(v169 << 13)) >> 8));
      v171 = (v170 ^ (v170 >> 15)) + ~((v170 ^ (v170 >> 15)) << 27);
      v172 = v168 & ((v171 >> 31) ^ v171);
      if (*(_QWORD *)(v167 + 16 * v172) != v58)
      {
        v173 = 1;
        do
          v172 = ((_DWORD)v172 + v173++) & v168;
        while (*(_QWORD *)(v167 + 16 * v172) != v58);
      }
      v62 = (_QWORD *)(v167 + 16 * v172 + 8);
    }
    else
    {
      v62 = (_QWORD *)(v58 + 104);
    }
    v63 = (_DWORD *)*v62;
    v64 = v63[3];
    v65 = v63[14];
    v66 = v63[15];
    v36 = __OFADD__(v65, v64);
    v67 = v65 + v64;
    v68 = (v65 >> 31) + 0x7FFFFFFF;
    if (v36)
      v67 = v68;
    v36 = __OFADD__(v67, v66);
    v69 = v67 + v66;
    v70 = (v67 >> 31) + 0x7FFFFFFF;
    if (!v36)
      v70 = v69;
    v71 = v63[10];
    v72 = v63[11];
    v36 = __OFADD__(v71, v70);
    v73 = v71 + v70;
    v74 = (v71 >> 31) + 0x7FFFFFFF;
    if (v36)
      v73 = v74;
    v75 = v63[16];
    v36 = __OFADD__(v73, v75);
    v76 = v73 + v75;
    v77 = (v73 >> 31) + 0x7FFFFFFF;
    if (!v36)
      v77 = v76;
    v36 = __OFADD__(v77, v72);
    v78 = v77 + v72;
    v79 = (v77 >> 31) + 0x7FFFFFFF;
    if (!v36)
      v79 = v78;
    v81 = v63[6];
    v80 = v63[7];
    v36 = __OFADD__(v81, v79);
    v82 = v81 + v79;
    v83 = (v81 >> 31) + 0x7FFFFFFF;
    if (v36)
      v82 = v83;
    v36 = __OFADD__(v82, v80);
    v84 = v82 + v80;
    v85 = (v82 >> 31) + 0x7FFFFFFF;
    if (v36)
      v86 = v85;
    else
      v86 = v84;
    v206 = v86;
    if (!*(_BYTE *)(v60 + 160))
    {
      if ((*(_QWORD *)(v58 + 32) & 0x1FLL) == 3)
        WebCore::Layout::Box::establishesInlineFormattingContext((WebCore::Layout::Box *)v58);
      goto LABEL_149;
    }
    if ((v59 & 0x40) != 0)
    {
      if (*(_BYTE *)(v58 + 148))
      {
        v87 = (int *)(v58 + 144);
LABEL_150:
        v100 = (float)*v87 * 0.015625;
        v101 = (float)((float)v86 * 0.015625) - v100;
LABEL_151:
        *((float *)a3 + 8) = v100;
        *((float *)a3 + 9) = v101;
        *((float *)a3 + 7) = v101;
LABEL_152:
        v150 = v100 + v101;
LABEL_153:
        *((float *)a3 + 5) = v150;
        *((float *)a3 + 6) = v100;
        return;
      }
LABEL_149:
      v87 = &v206;
      goto LABEL_150;
    }
LABEL_210:
    __break(0xC471u);
    JUMPOUT(0x1942E93B8);
  }
  if ((v59 & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942E93D8);
  }
  v110 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (*(_DWORD *)(v110 + 8))
  {
    v174 = *(_QWORD *)(v110 + 40);
    v175 = *(_DWORD *)(v174 - 8);
    v176 = (~(v58 << 32) + v58) ^ ((unint64_t)(~(v58 << 32) + v58) >> 22);
    v177 = 9 * ((v176 + ~(v176 << 13)) ^ ((v176 + ~(v176 << 13)) >> 8));
    v178 = (v177 ^ (v177 >> 15)) + ~((v177 ^ (v177 >> 15)) << 27);
    v179 = v175 & ((v178 >> 31) ^ v178);
    if (*(_QWORD *)(v174 + 16 * v179) != v58)
    {
      v180 = 1;
      do
        v179 = ((_DWORD)v179 + v180++) & v175;
      while (*(_QWORD *)(v174 + 16 * v179) != v58);
    }
    v111 = (_QWORD *)(v174 + 16 * v179 + 8);
  }
  else
  {
    v111 = (_QWORD *)(v58 + 104);
  }
  v112 = (_DWORD *)*v111;
  v113 = v112[3];
  v114 = v112[14];
  v115 = v112[15];
  v36 = __OFADD__(v114, v113);
  v116 = v114 + v113;
  v117 = (v114 >> 31) + 0x7FFFFFFF;
  if (v36)
    v116 = v117;
  v36 = __OFADD__(v116, v115);
  v118 = v116 + v115;
  v119 = (v116 >> 31) + 0x7FFFFFFF;
  if (!v36)
    v119 = v118;
  v120 = v112[10];
  v121 = v112[11];
  v36 = __OFADD__(v120, v119);
  v122 = v120 + v119;
  v123 = (v120 >> 31) + 0x7FFFFFFF;
  if (v36)
    v122 = v123;
  v124 = v112[16];
  v36 = __OFADD__(v122, v124);
  v125 = v122 + v124;
  v126 = (v122 >> 31) + 0x7FFFFFFF;
  if (!v36)
    v126 = v125;
  v36 = __OFADD__(v126, v121);
  v127 = v126 + v121;
  v128 = (v126 >> 31) + 0x7FFFFFFF;
  if (!v36)
    v128 = v127;
  v130 = v112[6];
  v129 = v112[7];
  v36 = __OFADD__(v130, v128);
  v131 = v130 + v128;
  v132 = (v130 >> 31) + 0x7FFFFFFF;
  if (v36)
    v131 = v132;
  v36 = __OFADD__(v131, v129);
  v133 = v131 + v129;
  v134 = (v131 >> 31) + 0x7FFFFFFF;
  if (v36)
    v135 = v134;
  else
    v135 = v133;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v181 = WebCore::Layout::LineBox::parentInlineBox((uint64_t)a2, *(_QWORD *)(v58 + 80));
    v182 = *((_DWORD *)a2 + 8);
    v183 = *(_QWORD *)(v181 + 48);
    v185 = *(_DWORD *)(v183 + 44);
    v184 = *(_DWORD *)(v183 + 48);
    v186 = v184 + v185;
    if (v184 + v185 < 0 != __OFADD__(v184, v185))
      v187 = v186 + 1;
    else
      v187 = v184 + v185;
    v188 = v186 - (v187 >> 1);
    v189 = v187 >> 1;
    v190 = v182 == 0;
    if (v182)
      v191 = v188;
    else
      v191 = v185;
    if (!v190)
      v184 = v189;
    v100 = (float)v191;
    *((float *)a3 + 8) = (float)v191;
    *((float *)a3 + 9) = (float)v184;
    *((float *)a3 + 7) = (float)v184;
    v150 = (float)v135 * 0.015625;
    goto LABEL_153;
  }
  v136 = *(_QWORD *)(v58 + 144);
  if ((v136 & 0xFF00000000) == 0)
  {
    v100 = floorf((float)v135 * 0.015625);
    *((float *)a3 + 8) = v100;
    *((_DWORD *)a3 + 9) = 0;
    *((_DWORD *)a3 + 7) = 0;
    v101 = 0.0;
    goto LABEL_152;
  }
  v137 = *(_BYTE **)(v58 + 136);
  if (v137 && (*v137 & 1) != 0)
  {
    v192 = (float)(int)v136;
    v36 = __OFSUB__(v135, (_DWORD)v136);
    v193 = v135 - v136;
    if (v36)
      v193 = (v135 >> 31) + 0x7FFFFFFF;
    v100 = floorf(v192 * 0.015625);
    v101 = ceilf((float)v193 * 0.015625);
    goto LABEL_151;
  }
  v138 = (float)(int)v136 * 0.015625;
  v139 = WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(v58 + 16), a2) - v138;
  v140 = *((_QWORD *)a3 + 6);
  v141 = *((_DWORD *)a2 + 8);
  v143 = *(_DWORD *)(v140 + 44);
  v142 = *(_DWORD *)(v140 + 48);
  v144 = v142 + v143;
  if (v142 + v143 < 0 != __OFADD__(v142, v143))
    v145 = v144 + 1;
  else
    v145 = v142 + v143;
  v146 = v144 - (v145 >> 1);
  v147 = v145 >> 1;
  v148 = v141 == 0;
  if (v141)
    v149 = v146;
  else
    v149 = v143;
  if (!v148)
    v142 = v147;
  *((float *)a3 + 7) = v139;
  *((float *)a3 + 8) = (float)v149;
  *((float *)a3 + 9) = (float)v142;
  *((float *)a3 + 5) = (float)v135 * 0.015625;
  *((float *)a3 + 6) = v138;
}

unsigned __int8 *WebCore::Layout::InlineLevelBox::preferredLineHeight(WebCore::Layout::InlineLevelBox *this)
{
  unsigned __int8 *result;
  int v3;
  double v5;
  float v7;

  result = (unsigned __int8 *)*((_QWORD *)this + 7);
  v3 = result[4];
  if (v3 != 11 && v3 != 13)
  {
    if (result[6])
    {
      if (*(float *)result < 0.0)
        return result;
    }
    else if ((*(_DWORD *)result & 0x80000000) != 0)
    {
      return result;
    }
  }
  if ((v3 & 0xFFFFFFF7) != 3)
    return result;
  v5 = *((float *)this + 17) * 64.0;
  if (v5 < 2147483650.0 && v5 > -2147483650.0)
    goto LABEL_12;
  if (v5 >= 2147483650.0)
  {
    v7 = 33554000.0;
  }
  else
  {
    if (v5 > -2147483650.0)
    {
LABEL_12:
      v7 = (float)(int)v5 * 0.015625;
      goto LABEL_13;
    }
    v7 = -33554000.0;
  }
LABEL_13:
  if (v3 == 11)
    return (unsigned __int8 *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)result, v7);
  return result;
}

BOOL WebCore::Layout::Line::Run::isContentfulOrHasDecoration(float *a1, uint64_t a2)
{
  _DWORD *v2;
  unsigned int v3;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v3 = *(unsigned __int8 *)a1;
  if (v3 > 2)
  {
    v5 = v3 > 6 || ((1 << v3) & 0x58) == 0;
    if (!v5 || v3 - 7 < 2)
      return 1;
    if (v3 - 9 > 2)
      return 0;
    if (a1[7] != 0.0)
      return 1;
    v6 = *((_QWORD *)a1 + 1);
    if ((*(_QWORD *)(v6 + 32) & 0x1FLL) == 0x18)
      return 1;
    v7 = *(_QWORD *)(a2 + 8);
    if (!*(_DWORD *)(v7 + 8))
    {
      v8 = (_QWORD *)(v6 + 104);
LABEL_16:
      v2 = (_DWORD *)*v8;
      goto LABEL_17;
    }
    v10 = *(_QWORD *)(v7 + 40);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(_QWORD *)(v10 + 16 * v15);
      if (v16 == v6)
      {
LABEL_35:
        v8 = (_QWORD *)(v10 + 16 * v15 + 8);
        goto LABEL_16;
      }
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 16 * v15);
        ++v17;
        if (v16 == v6)
          goto LABEL_35;
      }
    }
    v2 = 0;
LABEL_17:
    if (v3 == 11)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 8) + 68) & 8) == 0)
        return 0;
    }
    else
    {
      if (v3 != 9)
        goto LABEL_26;
      if (v2[4])
        return 1;
    }
    if (v2[8])
      return 1;
    v9 = v2[12];
    return v9 != 0;
  }
  v3 = *((unsigned __int8 *)a1 + 112);
  if (*((_BYTE *)a1 + 112))
    return *((_QWORD *)a1 + 12) != 0;
  __break(1u);
LABEL_26:
  if (v3 != 10)
    return 0;
  if (v2[5] || v2[9])
    return 1;
  v9 = v2[13];
  return v9 != 0;
}

uint64_t WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,unsigned long>(uint64_t result, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a2;
  if (*a2)
    goto LABEL_2;
  v27 = a2;
  v29 = result;
  v25 = a3;
  v26 = a4;
  WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::expand(a2, 0);
  a3 = v25;
  a4 = v26;
  a2 = v27;
  result = v29;
  v4 = *v27;
  if (*v27)
  {
LABEL_2:
    v5 = 0;
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  v7 = *a3;
  v8 = ~(*a3 << 32) + *a3;
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = v6 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  if (*v12)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v13 == v7)
      {
        if ((v5 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v4 - 4);
        *(_QWORD *)result = v12;
        *(_QWORD *)(result + 8) = v4 + 16 * v24;
        *(_BYTE *)(result + 16) = 0;
        v12[1] = *a4;
        return result;
      }
      if (v13 == -1)
        v22 = v12;
      v11 = (v11 + v23) & v6;
      v12 = (_QWORD *)(v4 + 16 * v11);
      v13 = *v12;
      ++v23;
    }
    while (*v12);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v7 = *a3;
      v12 = v22;
    }
  }
  v14 = *a4;
  *v12 = v7;
  v12[1] = v14;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_10;
LABEL_12:
    v28 = result;
    v21 = a2;
    v12 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::expand(a2, v12);
    v17 = *v21;
    if (*v21)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    result = v28;
    goto LABEL_10;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_12;
LABEL_10:
  *(_QWORD *)result = v12;
  *(_QWORD *)(result + 8) = v17 + 16 * v20;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

