BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEbT1_SV_SQ_(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  int v18;
  double v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  _DWORD *v33;
  WTF *v34;
  uint64_t v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD **v46;
  _DWORD *v47;
  WTF *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD **v53;
  _DWORD *v54;
  WTF *v55;
  uint64_t v57;
  _QWORD v58[2];
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  WTF *v64;

  v4 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 5) < a1[3])
      {
        v6 = (uint64_t)(a2 - 8);
        v7 = (uint64_t)a1;
        goto LABEL_112;
      }
      return result;
    case 3:
      v8 = (uint64_t)(a1 + 8);
      v9 = (uint64_t)(a2 - 8);
      v10 = a1[11];
      v11 = *(a2 - 5);
      if (v10 < a1[3])
      {
        if (v11 >= v10)
        {
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)a1, (uint64_t)(a1 + 8));
          if (*(a2 - 5) >= a1[11])
            return 1;
          v7 = (uint64_t)(a1 + 8);
        }
        else
        {
          v7 = (uint64_t)a1;
        }
        v6 = (uint64_t)(a2 - 8);
        goto LABEL_112;
      }
      if (v11 < v10)
        goto LABEL_18;
      return result;
    case 4:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEvT1_SV_SV_SV_SQ_((uint64_t)a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 16), (uint64_t)(a2 - 8));
      return 1;
    case 5:
      v8 = (uint64_t)(a1 + 8);
      v9 = (uint64_t)(a1 + 16);
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEvT1_SV_SV_SV_SQ_((uint64_t)a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 16), (uint64_t)(a1 + 24));
      if (*(a2 - 5) < a1[27])
      {
        std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)(a1 + 24), (uint64_t)(a2 - 8));
        if (a1[27] < a1[19])
        {
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)(a1 + 16), (uint64_t)(a1 + 24));
          if (a1[19] < a1[11])
          {
LABEL_18:
            std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v8, v9);
            if (a1[11] < a1[3])
            {
              v7 = (uint64_t)a1;
              v6 = v8;
LABEL_112:
              std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v12 = (uint64_t)(a1 + 16);
      v13 = a1[11];
      v14 = a1[19];
      if (v13 < a1[3])
      {
        v15 = (uint64_t)a1;
        if (v14 >= v13)
        {
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)a1, (uint64_t)(a1 + 8));
          if (a1[19] >= a1[11])
            goto LABEL_24;
          v15 = (uint64_t)(a1 + 8);
        }
        v16 = (uint64_t)(a1 + 16);
        goto LABEL_23;
      }
      if (v14 < v13)
      {
        std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>((uint64_t)(a1 + 8), (uint64_t)(a1 + 16));
        if (a1[11] < a1[3])
        {
          v15 = (uint64_t)a1;
          v16 = (uint64_t)(a1 + 8);
LABEL_23:
          std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v15, v16);
        }
      }
LABEL_24:
      v17 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v18 = 0;
      while (1)
      {
        v19 = v17[3];
        if (v19 < *(double *)(v12 + 24))
        {
          v20 = (_DWORD *)*((_QWORD *)v17 + 1);
          *(double *)v58 = *v17;
          if (v20)
            *v20 += 2;
          v58[1] = v20;
          v59 = *((_BYTE *)v17 + 16);
          v60 = v19;
          WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v61, (unsigned __int16 **)v17 + 4);
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v62, (_QWORD *)v17 + 5);
          v21 = (_DWORD *)*((_QWORD *)v17 + 6);
          if (v21)
            ++v21[2];
          v63 = v21;
          v22 = (WTF *)*((_QWORD *)v17 + 7);
          ++*(_DWORD *)v22;
          v64 = v22;
          v23 = (uint64_t)v17;
          while (1)
          {
            v24 = v12;
            WebCore::KeyframeEffect::ComputedKeyframe::operator=(v23, v12);
            v26 = *(_QWORD *)(v12 + 48);
            if (v26)
              ++*(_DWORD *)(v26 + 8);
            v27 = *(_DWORD **)(v23 + 48);
            *(_QWORD *)(v23 + 48) = v26;
            if (v27)
            {
              if (v27[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
              else
                --v27[2];
            }
            v28 = *(_DWORD **)(v12 + 56);
            ++*v28;
            v29 = *(_QWORD *)(v23 + 56);
            *(_QWORD *)(v23 + 56) = v28;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
              {
                v30 = *(unsigned int *)(v29 + 28);
                if ((_DWORD)v30)
                {
                  v31 = 16 * v30;
                  v32 = (_DWORD **)(*(_QWORD *)(v29 + 16) + 8);
                  do
                  {
                    v33 = *v32;
                    *v32 = 0;
                    if (v33)
                    {
                      if (*v33 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, v25);
                      else
                        *v33 -= 2;
                    }
                    v32 += 2;
                    v31 -= 16;
                  }
                  while (v31);
                }
                v34 = *(WTF **)(v29 + 16);
                if ((WTF *)(v29 + 32) != v34 && v34 != 0)
                {
                  *(_QWORD *)(v29 + 16) = 0;
                  *(_DWORD *)(v29 + 24) = 0;
                  WTF::fastFree(v34, v25);
                }
                v36 = *(_QWORD *)(v29 + 8);
                *(_QWORD *)(v29 + 8) = 0;
                if (v36)
                  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
                WTF::fastFree((WTF *)v29, v25);
              }
              else
              {
                --*(_DWORD *)v29;
              }
            }
            if ((double *)v24 == a1)
              break;
            v12 = v24 - 64;
            v23 = v24;
            if (v60 >= *(double *)(v24 - 40))
              goto LABEL_60;
          }
          v24 = (uint64_t)a1;
LABEL_60:
          WebCore::KeyframeEffect::ComputedKeyframe::operator=(v24, (uint64_t)v58);
          v38 = v63;
          if (v63)
            ++v63[2];
          v39 = *(_DWORD **)(v24 + 48);
          *(_QWORD *)(v24 + 48) = v38;
          if (v39)
          {
            if (v39[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
            else
              --v39[2];
          }
          v40 = v64;
          ++*(_DWORD *)v64;
          v41 = *(_QWORD *)(v24 + 56);
          *(_QWORD *)(v24 + 56) = v40;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
            {
              v44 = *(unsigned int *)(v41 + 28);
              if ((_DWORD)v44)
              {
                v45 = 16 * v44;
                v46 = (_DWORD **)(*(_QWORD *)(v41 + 16) + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*v47 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v37);
                    else
                      *v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
              }
              v48 = *(WTF **)(v41 + 16);
              if ((WTF *)(v41 + 32) != v48 && v48 != 0)
              {
                *(_QWORD *)(v41 + 16) = 0;
                *(_DWORD *)(v41 + 24) = 0;
                WTF::fastFree(v48, v37);
              }
              v50 = *(_QWORD *)(v41 + 8);
              *(_QWORD *)(v41 + 8) = 0;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
              WTF::fastFree((WTF *)v41, v37);
            }
            else
            {
              --*(_DWORD *)v41;
            }
          }
          v42 = v64;
          v64 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
            {
              v51 = *((unsigned int *)v42 + 7);
              if ((_DWORD)v51)
              {
                v52 = 16 * v51;
                v53 = (_DWORD **)(*((_QWORD *)v42 + 2) + 8);
                do
                {
                  v54 = *v53;
                  *v53 = 0;
                  if (v54)
                  {
                    if (*v54 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, v37);
                    else
                      *v54 -= 2;
                  }
                  v53 += 2;
                  v52 -= 16;
                }
                while (v52);
              }
              v55 = (WTF *)*((_QWORD *)v42 + 2);
              if ((WTF *)((char *)v42 + 32) != v55 && v55 != 0)
              {
                *((_QWORD *)v42 + 2) = 0;
                *((_DWORD *)v42 + 6) = 0;
                WTF::fastFree(v55, v37);
              }
              v57 = *((_QWORD *)v42 + 1);
              *((_QWORD *)v42 + 1) = 0;
              if (v57)
                (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
              WTF::fastFree(v42, v37);
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
          v43 = v63;
          v63 = 0;
          if (v43)
          {
            if (v43[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 16))(v43);
            else
              --v43[2];
          }
          ++v18;
          WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)v58, v37);
          if (v18 == 8)
            return v17 + 8 == a2;
        }
        v12 = (uint64_t)v17;
        v17 += 8;
        if (v17 == a2)
          return 1;
      }
  }
}

void std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  _DWORD *v35;
  WTF *v36;
  uint64_t v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WTF *v45;

  v4 = *(_DWORD **)(a1 + 8);
  v39[0] = *(_QWORD *)a1;
  if (v4)
    *v4 += 2;
  v39[1] = v4;
  v40 = *(_BYTE *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 24);
  WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v42, (unsigned __int16 **)(a1 + 32));
  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v43, (_QWORD *)(a1 + 40));
  v5 = *(_DWORD **)(a1 + 48);
  if (v5)
    ++v5[2];
  v44 = v5;
  v6 = *(WTF **)(a1 + 56);
  ++*(_DWORD *)v6;
  v45 = v6;
  WebCore::KeyframeEffect::ComputedKeyframe::operator=(a1, a2);
  v8 = *(_QWORD *)(a2 + 48);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  v9 = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  v10 = *(_DWORD **)(a2 + 56);
  ++*v10;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v18 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v18)
      {
        v19 = 16 * v18;
        v20 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8);
        do
        {
          v21 = *v20;
          *v20 = 0;
          if (v21)
          {
            if (*v21 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v7);
            else
              *v21 -= 2;
          }
          v20 += 2;
          v19 -= 16;
        }
        while (v19);
      }
      v22 = *(WTF **)(v11 + 16);
      if ((WTF *)(v11 + 32) != v22 && v22 != 0)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v22, v7);
      }
      v24 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      WTF::fastFree((WTF *)v11, v7);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  WebCore::KeyframeEffect::ComputedKeyframe::operator=(a2, (uint64_t)v39);
  v13 = v44;
  if (v44)
    ++v44[2];
  v14 = *(_DWORD **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v13;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[2];
  }
  v15 = v45;
  ++*(_DWORD *)v45;
  v16 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v15;
  if (!v16)
    goto LABEL_21;
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
LABEL_21:
    v45 = 0;
LABEL_22:
    if (*(_DWORD *)v15 == 1)
    {
      v32 = *((unsigned int *)v15 + 7);
      if ((_DWORD)v32)
      {
        v33 = 16 * v32;
        v34 = (_DWORD **)(*((_QWORD *)v15 + 2) + 8);
        do
        {
          v35 = *v34;
          *v34 = 0;
          if (v35)
          {
            if (*v35 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v12);
            else
              *v35 -= 2;
          }
          v34 += 2;
          v33 -= 16;
        }
        while (v33);
      }
      v36 = (WTF *)*((_QWORD *)v15 + 2);
      if ((WTF *)((char *)v15 + 32) != v36 && v36 != 0)
      {
        *((_QWORD *)v15 + 2) = 0;
        *((_DWORD *)v15 + 6) = 0;
        WTF::fastFree(v36, v12);
      }
      v38 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      WTF::fastFree(v15, v12);
    }
    else
    {
      --*(_DWORD *)v15;
    }
    goto LABEL_24;
  }
  v25 = *(unsigned int *)(v16 + 28);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    v27 = (_DWORD **)(*(_QWORD *)(v16 + 16) + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v12);
        else
          *v28 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  v29 = *(WTF **)(v16 + 16);
  if ((WTF *)(v16 + 32) != v29 && v29 != 0)
  {
    *(_QWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 24) = 0;
    WTF::fastFree(v29, v12);
  }
  v31 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  WTF::fastFree((WTF *)v16, v12);
  v15 = v45;
  v45 = 0;
  if (v15)
    goto LABEL_22;
LABEL_24:
  v17 = v44;
  v44 = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
    else
      --v17[2];
  }
  WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)v39, v12);
}

uint64_t WebCore::KeyframeEffect::ComputedKeyframe::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v12;

  v4 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable(&v12, (unsigned __int16 **)(a2 + 32));
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  v12 = v7;
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)(v7 + 8);
      do
      {
        if (*((__int16 *)v9 - 4) != -1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v6);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=((uint64_t *)(a1 + 40), (_QWORD *)(a2 + 40));
  return a1;
}

void _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZN7WebCoreL31processPropertyIndexedKeyframesERN3JSC14JSGlobalObjectERNS2_8DocumentEONS3_6StrongINS3_8JSObjectELNS3_30ShouldStrongDestructorGrabLockE0EEERN3WTF6VectorINS2_14KeyframeEffect14ParsedKeyframeELm0ENSD_15CrashOnOverflowELm16ENSD_10FastMallocEEERNSE_INSD_6StringELm0ESH_Lm16ESI_EEEUlRT_RT0_E_PSG_EEvT1_SV_SV_SV_SQ_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;

  v7 = a1;
  v8 = *(double *)(a2 + 24);
  v9 = *(double *)(a3 + 24);
  if (v8 >= *(double *)(a1 + 24))
  {
    if (v9 < v8)
    {
      std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a2, a3);
      if (*(double *)(a2 + 24) < *(double *)(v7 + 24))
      {
        a1 = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1, v10);
      goto LABEL_10;
    }
    std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a1, a2);
    if (*(double *)(a3 + 24) < *(double *)(a2 + 24))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(double *)(a4 + 24) < *(double *)(a3 + 24))
  {
    std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a3, a4);
    if (*(double *)(a3 + 24) < *(double *)(a2 + 24))
    {
      std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(a2, a3);
      if (*(double *)(a2 + 24) < *(double *)(v7 + 24))
        std::swap[abi:sn180100]<WebCore::KeyframeEffect::ParsedKeyframe>(v7, a2);
    }
  }
}

uint64_t WebCore::InspectorInstrumentation::instrumentingAgents(WebCore::InspectorInstrumentation *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          return *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
      }
    }
  }
  v6 = *((_QWORD *)this + 329);
  if (v6
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v8 = *(_QWORD *)(v7 + 528)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (v10 = *(_QWORD *)(v9 + 24)) != 0
    && (v5 = *(_QWORD *)(v10 + 8)) != 0)
  {
    return *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
  }
  else
  {
    return 0;
  }
}

WebCore::Animation *WTF::RefCounted<WebCore::Animation>::deref(WebCore::Animation *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Animation::~Animation(result, a2);
    return (WebCore::Animation *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_WORD *WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::rehash(uint64_t *a1, unsigned int a2, _WORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _WORD *v22;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(2 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_19;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (_WORD *)(v6 + 2 * v11);
    v14 = (unsigned __int16)*v13;
    if (*v13)
      v15 = v14 == 0xFFFF;
    else
      v15 = 1;
    if (!v15)
    {
      v16 = *a1;
      if (*a1)
        v17 = *(_DWORD *)(v16 - 8);
      else
        v17 = 0;
      v18 = 0;
      v19 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
      v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
      do
      {
        v21 = v20 & v17;
        v10 = (void *)*(unsigned __int16 *)(v16 + 2 * v21);
        v20 = ++v18 + v21;
      }
      while (*(_WORD *)(v16 + 2 * v21));
      v22 = (_WORD *)(v16 + 2 * v21);
      *v22 = v14;
      if (v13 == a3)
        v12 = v22;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(uint64_t result, void *a2)
{
  WTF *i;
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;

  for (i = *(WTF **)(result + 8); i; result = WTF::fastFree(v3, a2))
  {
    v3 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v4 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v7 = v3;
        WTF::fastFree((WTF *)v4, a2);
        v3 = v7;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEENS9_25AcceleratedEffectPropertyEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E33919F8[v3])(&v6);
    *(_DWORD *)(a2 + 8) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEENS9_25AcceleratedEffectPropertyEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = (v6 ^ HIWORD(v6)) & v3;
    v8 = *(_DWORD *)(v2 + 32 * v7);
    if (v8 == *a2)
      return v2 + 32 * v7;
    v10 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v10) & v3;
      v8 = *(_DWORD *)(v2 + 32 * v7);
      ++v10;
      if (v8 == v4)
        return v2 + 32 * v7;
    }
  }
  return 0;
}

__n128 WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebCore::FrameRateAligner::FrameRateData>@<Q0>(uint64_t *a1@<X0>, int *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  __n128 result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  int v24;
  uint64_t v25;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) >> 16)) & v10;
  v14 = (_OWORD *)(v8 + 32 * v13);
  v15 = *(_DWORD *)v14;
  if (*(_DWORD *)v14)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v15 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v14;
        *(_QWORD *)(a4 + 8) = v8 + 32 * v25;
        *(_BYTE *)(a4 + 16) = 0;
        result = *a3;
        *((_BYTE *)v14 + 24) = a3[1].n128_u8[0];
        *(__n128 *)((char *)v14 + 8) = result;
        return result;
      }
      if (v15 == -1)
        v23 = v14;
      v13 = ((_DWORD)v13 + v24) & v10;
      v14 = (_OWORD *)(v8 + 32 * v13);
      v15 = *(_DWORD *)v14;
      ++v24;
    }
    while (*(_DWORD *)v14);
    if (v23)
    {
      *(_DWORD *)v23 = 0;
      *((_QWORD *)v23 + 2) = 0;
      *((_QWORD *)v23 + 3) = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_BYTE *)v23 + 24) = 1;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v14 = v23;
    }
  }
  *(_DWORD *)v14 = v11;
  result = *a3;
  *((_BYTE *)v14 + 24) = a3[1].n128_u8[0];
  *(__n128 *)((char *)v14 + 8) = result;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_13:
    v14 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a1, v14);
    v19 = *a1;
    if (*a1)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_13;
LABEL_11:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v19 + 32 * v22;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *result;
  _DWORD *v15;
  _OWORD *v16;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v12 = (_QWORD *)(v10 + 24);
    do
    {
      *((_DWORD *)v12 - 2) = 0;
      v12[1] = 0;
      v12[2] = 0;
      *v12 = 0;
      *((_BYTE *)v12 + 16) = 1;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v15 = (_DWORD *)v6;
    do
    {
      if ((*v15 + 1) >= 2)
      {
        v16 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(*a1, (uint64_t)v15);
        if (v15 == a3)
          v13 = v16;
      }
      v15 += 8;
      --v7;
    }
    while (v7);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v11);
    return v13;
  }
  return result;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FrameRateAligner::FrameRateData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FrameRateAligner::FrameRateData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::FrameRateAligner::FrameRateData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v5 ^ HIWORD(v5);
  do
  {
    v7 = v6 & v2;
    v6 = ++v3 + v7;
  }
  while (*(_DWORD *)(a1 + 32 * v7));
  v8 = *(_OWORD *)(a2 + 16);
  result = (_OWORD *)(a1 + 32 * v7);
  *result = *(_OWORD *)a2;
  result[1] = v8;
  return result;
}

uint64_t *WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::ParsedKeyframe>(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v3 = WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = v3;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + (v5 << 6);
  v8 = (_DWORD *)*((_QWORD *)v3 + 1);
  *(_QWORD *)v7 = *(_QWORD *)v3;
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_BYTE *)(v7 + 16) = v3[16];
  *(_QWORD *)(v7 + 24) = *((_QWORD *)v3 + 3);
  WTF::HashTable<WebCore::CSSPropertyID,WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPropertyID,WTF::String>>,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPropertyID>>::HashTable((uint64_t *)(v7 + 32), (unsigned __int16 **)v3 + 4);
  result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::String>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(v7 + 40), (_QWORD *)v4 + 5);
  v10 = *((_QWORD *)v4 + 6);
  if (v10)
    ++*(_DWORD *)(v10 + 8);
  v11 = v6 + (v5 << 6);
  *(_QWORD *)(v11 + 48) = v10;
  v12 = (_DWORD *)*((_QWORD *)v4 + 7);
  ++*v12;
  *(_QWORD *)(v11 + 56) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<WebCore::KeyframeEffect::ParsedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (unint64_t)v5 + 64 * (unint64_t)*(unsigned int *)(a1 + 12);
    if (v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *(WTF **)a1;
        return (char *)v13 + 64 * ((uint64_t)(v3 - (_QWORD)v5) >> 6);
      }
      if (!(v10 >> 26))
      {
        v11 = WTF::fastMalloc((WTF *)(v10 << 6));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::KeyframeEffect::ParsedKeyframe>::move((uint64_t)v5, v6, v11);
        v13 = *(WTF **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v13 = *(WTF **)a1;
        }
        return (char *)v13 + 64 * ((uint64_t)(v3 - (_QWORD)v5) >> 6);
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1956810DCLL);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 26)
      goto LABEL_30;
    v18 = (uint64_t)v5 + 64 * (unint64_t)*(unsigned int *)(a1 + 12);
    v19 = WTF::fastMalloc((WTF *)(v17 << 6));
    *(_DWORD *)(a1 + 8) = v17;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::KeyframeEffect::ParsedKeyframe>::move((uint64_t)v5, v18, v19);
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  _QWORD v16[2];
  char **v17;
  char *v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v5 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v6 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v7 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v8 = a2[1];
      v20.val[0] = a2[2];
      v9 = a2[3];
      a2 += 4;
      v10 = v9;
      v20.val[1] = 0uLL;
      v21.val[0] = v8;
      v19.val[1] = 0uLL;
      v11 = a1;
      vst2q_s8(v11, v19);
      v11 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v11, v21);
      v12 = a1 + 64;
      vst2q_s8(v12, v20);
      v13 = a1 + 96;
      vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
      a1 += 128;
    }
    while (a1 != v6);
    a1 = v6;
  }
  while (a1 != v5)
  {
    v14 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v14;
    a1 += 2;
  }
  v16[0] = a4;
  v16[1] = a5;
  v18 = v5;
  v17 = &v18;
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v16, &v17);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  uint64_t v14;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v14;
        if (v14)
        {
          *(_DWORD *)v14 = 2;
          *(_DWORD *)(v14 + 4) = v11;
          *(_QWORD *)(v14 + 8) = v14 + 20;
          *(_DWORD *)(v14 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((char *)(v14 + 20), a3->i8, a4, a5, a6);
        }
        goto LABEL_6;
      }
LABEL_12:
      v13 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v14;
  if (v14)
  {
    *(_DWORD *)v14 = 2;
    *(_DWORD *)(v14 + 4) = v11;
    *(_QWORD *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 0;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((char *)(v14 + 20), a3, a4, a5, a6);
  }
LABEL_6:
  *a7 = v13;
  return result;
}

uint64_t _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_(uint64_t a1, char ***a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  char *v9;
  int8x16_t *v10;
  char *v11;
  char *v12;
  __int16 v13;
  char *v14;
  char *v15;
  int8x16_t *v16;
  char *v17;
  char *v18;
  __int16 v19;
  char *v20;
  char *v21;
  int8x16_t *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  int8x16_t *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v32;
  char *v33;
  int8x16_t *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  char *v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  char *v74;
  char *v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;

  v82 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v81 = v3;
  WTF::Internal::appendHex();
  v80 = v4;
  WTF::Internal::appendHex();
  v79 = v5;
  WTF::Internal::appendHex();
  v78 = v6;
  result = WTF::Internal::appendHex();
  v77 = v8;
  v9 = **a2;
  v10 = (int8x16_t *)((char *)&v81 - v81);
  v11 = &v9[2 * v81];
  if (v81 >= 0x40)
  {
    v12 = &v9[2 * (v81 & 0xFFFFFFC0)];
    v45 = 0uLL;
    v46 = **a2;
    do
    {
      v84.val[0] = *v10;
      v47 = v10[1];
      v89.val[0] = v10[2];
      v48 = v10[3];
      v10 += 4;
      v49 = v48;
      v89.val[1] = 0uLL;
      v94.val[0] = v47;
      v84.val[1] = 0uLL;
      v50 = v46;
      vst2q_s8(v50, v84);
      v50 += 32;
      v94.val[1] = 0uLL;
      vst2q_s8(v50, v94);
      v51 = v46 + 64;
      vst2q_s8(v51, v89);
      v52 = v46 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
      v46 += 128;
    }
    while (v46 != v12);
  }
  else
  {
    v12 = **a2;
  }
  while (v12 != v11)
  {
    v13 = v10->u8[0];
    v10 = (int8x16_t *)((char *)v10 + 1);
    *(_WORD *)v12 = v13;
    v12 += 2;
  }
  v14 = &v9[2 * v81];
  *(_WORD *)v14 = 45;
  v15 = v14 + 2;
  v16 = (int8x16_t *)((char *)&v80 - v80);
  v17 = &v15[2 * v80];
  if (v80 >= 0x40)
  {
    v18 = &v15[2 * (v80 & 0xFFFFFFC0)];
    v53 = 0uLL;
    v54 = v15;
    do
    {
      v85.val[0] = *v16;
      v55 = v16[1];
      v90.val[0] = v16[2];
      v56 = v16[3];
      v16 += 4;
      v57 = v56;
      v90.val[1] = 0uLL;
      v95.val[0] = v55;
      v85.val[1] = 0uLL;
      v58 = v54;
      vst2q_s8(v58, v85);
      v58 += 32;
      v95.val[1] = 0uLL;
      vst2q_s8(v58, v95);
      v59 = v54 + 64;
      vst2q_s8(v59, v90);
      v60 = v54 + 96;
      vst2q_s8(v60, *(int8x16x2_t *)(&v53 - 1));
      v54 += 128;
    }
    while (v54 != v18);
  }
  else
  {
    v18 = v15;
  }
  while (v18 != v17)
  {
    v19 = v16->u8[0];
    v16 = (int8x16_t *)((char *)v16 + 1);
    *(_WORD *)v18 = v19;
    v18 += 2;
  }
  v20 = &v15[2 * v80];
  *(_WORD *)v20 = 45;
  v21 = v20 + 2;
  v22 = (int8x16_t *)((char *)&v79 - v79);
  v23 = &v21[2 * v79];
  if (v79 >= 0x40)
  {
    v24 = &v21[2 * (v79 & 0xFFFFFFC0)];
    v61 = 0uLL;
    v62 = v21;
    do
    {
      v86.val[0] = *v22;
      v63 = v22[1];
      v91.val[0] = v22[2];
      v64 = v22[3];
      v22 += 4;
      v65 = v64;
      v91.val[1] = 0uLL;
      v96.val[0] = v63;
      v86.val[1] = 0uLL;
      v66 = v62;
      vst2q_s8(v66, v86);
      v66 += 32;
      v96.val[1] = 0uLL;
      vst2q_s8(v66, v96);
      v67 = v62 + 64;
      vst2q_s8(v67, v91);
      v68 = v62 + 96;
      vst2q_s8(v68, *(int8x16x2_t *)(&v61 - 1));
      v62 += 128;
    }
    while (v62 != v24);
  }
  else
  {
    v24 = v21;
  }
  while (v24 != v23)
  {
    v25 = v22->u8[0];
    v22 = (int8x16_t *)((char *)v22 + 1);
    *(_WORD *)v24 = v25;
    v24 += 2;
  }
  v26 = &v21[2 * v79];
  *(_WORD *)v26 = 45;
  v27 = v26 + 2;
  v28 = (int8x16_t *)((char *)&v78 - v78);
  v29 = &v27[2 * v78];
  if (v78 >= 0x40)
  {
    v30 = &v27[2 * (v78 & 0xFFFFFFC0)];
    v69 = 0uLL;
    v70 = v27;
    do
    {
      v87.val[0] = *v28;
      v71 = v28[1];
      v92.val[0] = v28[2];
      v72 = v28[3];
      v28 += 4;
      v73 = v72;
      v92.val[1] = 0uLL;
      v97.val[0] = v71;
      v87.val[1] = 0uLL;
      v74 = v70;
      vst2q_s8(v74, v87);
      v74 += 32;
      v97.val[1] = 0uLL;
      vst2q_s8(v74, v97);
      v75 = v70 + 64;
      vst2q_s8(v75, v92);
      v76 = v70 + 96;
      vst2q_s8(v76, *(int8x16x2_t *)(&v69 - 1));
      v70 += 128;
    }
    while (v70 != v30);
  }
  else
  {
    v30 = v27;
  }
  while (v30 != v29)
  {
    v31 = v28->u8[0];
    v28 = (int8x16_t *)((char *)v28 + 1);
    *(_WORD *)v30 = v31;
    v30 += 2;
  }
  v32 = &v27[2 * v78];
  *(_WORD *)v32 = 45;
  v33 = v32 + 2;
  v34 = (int8x16_t *)((char *)&v77 - v77);
  v35 = &v33[2 * v77];
  if (v77 >= 0x40)
  {
    v36 = &v33[2 * (v77 & 0xFFFFFFC0)];
    v37 = 0uLL;
    do
    {
      v83.val[0] = *v34;
      v38 = v34[1];
      v88.val[0] = v34[2];
      v39 = v34[3];
      v34 += 4;
      v40 = v39;
      v88.val[1] = 0uLL;
      v93.val[0] = v38;
      v83.val[1] = 0uLL;
      v41 = v33;
      vst2q_s8(v41, v83);
      v41 += 32;
      v93.val[1] = 0uLL;
      vst2q_s8(v41, v93);
      v42 = v33 + 64;
      vst2q_s8(v42, v88);
      v43 = v33 + 96;
      vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
      v33 += 128;
    }
    while (v33 != v36);
    v33 = v36;
  }
  while (v33 != v35)
  {
    v44 = v34->u8[0];
    v34 = (int8x16_t *)((char *)v34 + 1);
    *(_WORD *)v33 = v44;
    v33 += 2;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::KeyframeEffect::ComputedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::KeyframeEffect::ComputedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::KeyframeEffect::ComputedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::KeyframeEffect::ComputedKeyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)v7 = v8;
          *(_QWORD *)(v7 + 8) = v9;
          *(_BYTE *)(v7 + 16) = *(_BYTE *)(result + 16);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(result + 24);
          *(_QWORD *)(v7 + 32) = 0;
          v10 = *(_QWORD *)(result + 32);
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(v7 + 32) = v10;
          *(_QWORD *)(v7 + 40) = 0;
          v11 = *(_QWORD *)(result + 40);
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(v7 + 40) = v11;
          WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe((WebCore::KeyframeEffect::ComputedKeyframe *)result, v6);
          result = v12 + 48;
          v7 += 48;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 48 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*v6 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
        else
          --*v6;
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::getKeyframes(void)::$_0,WebCore::KeyframeEffect::getKeyframes(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(uint64_t ****a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t **v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  WTF::StringImpl *v10;
  int v11;
  const WebCore::StyleProperties *v12;
  uint64_t v13;
  WTF::StringBuilder *v14;
  WTF::String *v15;
  WTF::StringBuilder *v16;
  WTF::String *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringBuilder *v22;
  WTF::String *v23;
  __n128 v24;
  WTF::StringImpl *v25;
  int v26;
  const WebCore::StyleProperties *v27;
  uint64_t v28;
  WTF::StringBuilder *v29;
  WTF::String *v30;
  WTF::StringBuilder *v31;
  WTF::String *v32;
  __n128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringBuilder *v36;
  WTF::String *v37;
  __n128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *result;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned __int16 v50;
  _DWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63;

  v2 = *a2;
  v3 = **a1;
  v50 = *a2;
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 2;
  v49 = v4;
  v5 = **v3;
  if (!v5 || (WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v5 + 8), v2, &v48), (v10 = v48) == 0))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
LABEL_46:
    if (*((_DWORD *)v4 + 1))
      goto LABEL_39;
    goto LABEL_16;
  }
  v11 = (*((unsigned __int16 *)v48 + 2) | (*((unsigned __int8 *)v48 + 6) << 16)) & 0x3F800;
  if (v11 != 94208 && v11 != 114688)
  {
    v12 = *(const WebCore::StyleProperties **)(**v3 + 8);
    if ((v2 - 2) <= 0x1C8)
    {
      WebCore::StyleProperties::serializeLonghandValue(*(_QWORD *)(**v3 + 8), v2, v7, v8, (WebCore *)&v47, v9);
    }
    else
    {
      v51 = (_DWORD *)WebCore::shorthandForProperty(v2);
      v52 = v13;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v63 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)&v51, v12, v14, v15, (__n128)0);
      WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)&v51, v16, v17, (WebCore::ShorthandSerializer *)&v47, v18);
      WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)&v51, v19);
    }
    v20 = v47;
    v47 = 0;
    v49 = v20;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v6);
        v46 = v47;
        v47 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v6);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    v4 = v20;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_15;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
  if (v4)
    goto LABEL_46;
LABEL_16:
  WebCore::StyleProperties::getPropertyCSSValue(*v3[1], v2, &v48);
  v25 = v48;
  if (v48)
  {
    v26 = (*((unsigned __int16 *)v48 + 2) | (*((unsigned __int8 *)v48 + 6) << 16)) & 0x3F800;
    if (v26 == 94208 || v26 == 114688)
      goto LABEL_25;
    v27 = (const WebCore::StyleProperties *)*v3[1];
    if ((v2 - 2) <= 0x1C8)
    {
      WebCore::StyleProperties::serializeLonghandValue(*v3[1], v2, v22, v23, (WebCore *)&v47, v24);
    }
    else
    {
      v51 = (_DWORD *)WebCore::shorthandForProperty(v2);
      v52 = v28;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v63 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)&v51, v27, v29, v30, (__n128)0);
      WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)&v51, v31, v32, (WebCore::ShorthandSerializer *)&v47, v33);
      WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)&v51, v34);
    }
    v35 = v47;
    v47 = 0;
    v49 = v35;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v21);
        v45 = v47;
        v47 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v21);
          else
            *(_DWORD *)v45 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    v25 = v48;
    if (v48)
    {
LABEL_25:
      if (*(_DWORD *)v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v21);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v4 = v49;
  if (!v49 || !*((_DWORD *)v49 + 1))
  {
    WebCore::ComputedStyleExtractor::valueForPropertyInStyle(v3[2], v3[3], v50, 0, 1);
    if (v51)
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v48, (uint64_t)v51, v36, v37, v38);
      v40 = v48;
      v48 = 0;
      v49 = v40;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v39);
          v44 = v48;
          v48 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v39);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v4 -= 2;
        }
      }
      v41 = v51;
      v51 = 0;
      if (v41)
      {
        if (*v41 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v39);
        else
          *v41 -= 2;
      }
    }
    else
    {
      v40 = v4;
    }
    v4 = v40;
  }
LABEL_39:
  result = WTF::HashMap<WebCore::CSSPropertyID,WTF::String,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSPropertyID const&,WTF::String&>((uint64_t)&v51, v3[4] + 4, &v50, (_DWORD **)&v49);
  v49 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v43);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::getKeyframes(void)::$_0,WebCore::KeyframeEffect::getKeyframes(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(WTF::StringImpl *result, WTF::String *a2)
{
  uint64_t **v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  _DWORD *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringBuilder *v15;
  WTF::String *v16;
  __n128 v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25[3];
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 305))
    return result;
  v3 = *(uint64_t ***)(*(_QWORD *)result + 16);
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 2;
  v27 = v4;
  v5 = **v3;
  if (!v5
    || (WebCore::StyleProperties::getCustomPropertyCSSValue(*(_QWORD *)(v5 + 8), a2, v25), (v7 = (_DWORD *)v25[0]) == 0))
  {
LABEL_14:
    if (!v4)
      goto LABEL_15;
    goto LABEL_42;
  }
  v8 = (*(unsigned __int16 *)(v25[0] + 4) | (*(unsigned __int8 *)(v25[0] + 6) << 16)) & 0x3F800;
  if (v8 != 94208 && v8 != 114688)
  {
    WebCore::StyleProperties::getCustomPropertyValue(*(WebCore::StyleProperties **)(**v3 + 8), a2, (WebCore *)&v26);
    v9 = v26;
    v26 = 0;
    v27 = v9;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v6);
        v24 = v26;
        v26 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v6);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v4 -= 2;
      }
    }
    v4 = v9;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_14;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
  if (!v4)
    goto LABEL_15;
LABEL_42:
  if (!*((_DWORD *)v4 + 1))
  {
LABEL_15:
    WebCore::StyleProperties::getCustomPropertyCSSValue(*v3[1], a2, v25);
    v12 = (_DWORD *)v25[0];
    if (v25[0])
    {
      v13 = (*(unsigned __int16 *)(v25[0] + 4) | (*(unsigned __int8 *)(v25[0] + 6) << 16)) & 0x3F800;
      if (v13 == 94208 || v13 == 114688)
        goto LABEL_22;
      WebCore::StyleProperties::getCustomPropertyValue((WebCore::StyleProperties *)*v3[1], a2, (WebCore *)&v26);
      v14 = v26;
      v26 = 0;
      v27 = v14;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v10);
          v23 = v26;
          v26 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v4 -= 2;
        }
      }
      v12 = (_DWORD *)v25[0];
      if (v25[0])
      {
LABEL_22:
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v10);
        else
          *v12 -= 2;
      }
    }
    v4 = v27;
    if (!v27 || !*((_DWORD *)v27 + 1))
    {
      v17.n128_f64[0] = WebCore::ComputedStyleExtractor::customPropertyValue((WebCore::ComputedStyleExtractor *)v3[2], a2, v11, v25);
      v18 = (_DWORD *)v25[0];
      if (v25[0])
      {
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v26, v25[0], v15, v16, v17);
        v20 = v26;
        v26 = 0;
        v27 = v20;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::destroy(v4, v19);
            v22 = v26;
            v26 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v19);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v4 -= 2;
          }
        }
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v19);
        else
          *v18 -= 2;
      }
      else
      {
        v20 = v4;
      }
      v4 = v20;
    }
  }
  result = WTF::HashMap<WTF::AtomString,WTF::String,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::String&>((uint64_t)v25, v3[3] + 5, (WTF::StringImpl **)a2, &v27);
  v27 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v21);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::animatesProperty(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::KeyframeEffect::animatesProperty(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t **a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;

  v2 = **a1;
  v3 = *(unsigned int *)(v2 + 244);
  if (!(_DWORD)v3)
    return -1;
  result = 0;
  v5 = *(_QWORD *)(v2 + 232);
  while (1)
  {
    v6 = *(_WORD **)(v5 + (result << 6) + 32);
    if (!v6)
    {
      v9 = 0;
      v7 = 0;
LABEL_12:
      v8 = &v6[8 * v7];
      goto LABEL_13;
    }
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[8 * v7];
    if (!*((_DWORD *)v6 - 3))
    {
      v9 = &v6[8 * v7];
      goto LABEL_12;
    }
    v9 = *(_WORD **)(v5 + (result << 6) + 32);
    if ((_DWORD)v7)
    {
      v10 = 16 * v7;
      v9 = *(_WORD **)(v5 + (result << 6) + 32);
      while ((unsigned __int16)(*v9 + 1) <= 1u)
      {
        v9 += 8;
        v10 -= 16;
        if (!v10)
        {
          v9 = v8;
          break;
        }
      }
    }
LABEL_13:
    if (v6)
      v6 += 8 * *((unsigned int *)v6 - 1);
    if (v6 != v9)
      break;
LABEL_23:
    if (++result == v3)
      return -1;
  }
  while ((unsigned __int16)*v9 != *a2)
  {
    v11 = v9 + 8;
    v9 = v8;
    if (v11 != v8)
    {
      v9 = v11;
      while ((unsigned __int16)(*v9 + 1) <= 1u)
      {
        v9 += 8;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v9 == v6)
      goto LABEL_23;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::animatesProperty(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::KeyframeEffect::animatesProperty(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *(unsigned int *)(v2 + 244);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 232) + (i << 6) + 40);
      if (v6)
      {
        v7 = *(unsigned int *)(v6 - 4);
        v8 = (WTF::StringImpl **)(v6 + 16 * v7);
        if (*(_DWORD *)(v6 - 12))
        {
          v9 = *(WTF::StringImpl ***)(*(_QWORD *)(v2 + 232) + (i << 6) + 40);
          if ((_DWORD)v7)
          {
            v10 = 16 * v7;
            v9 = *(WTF::StringImpl ***)(*(_QWORD *)(v2 + 232) + (i << 6) + 40);
            while ((unint64_t)*v9 + 1 <= 1)
            {
              v9 += 2;
              v10 -= 16;
              if (!v10)
              {
                v9 = v8;
                goto LABEL_10;
              }
            }
          }
          goto LABEL_10;
        }
        v9 = (WTF::StringImpl **)(v6 + 16 * v7);
      }
      else
      {
        v9 = 0;
        v7 = 0;
      }
      v8 = (WTF::StringImpl **)(v6 + 16 * v7);
      if (!v6)
      {
        v11 = 0;
        goto LABEL_15;
      }
LABEL_10:
      v11 = (WTF::StringImpl **)(v6 + 16 * *(unsigned int *)(v6 - 4));
LABEL_15:
      if (v11 != v9)
      {
        do
        {
          v12 = *v9;
          if (*v9)
          {
            v13 = *(_DWORD *)v12;
            *(_DWORD *)v12 += 2;
            v14 = *(WTF::StringImpl **)a2;
            if (v13)
              *(_DWORD *)v12 = v13;
            else
              WTF::StringImpl::destroy(v12, a2);
            if (v12 == v14)
              return i;
          }
          else if (!*(_QWORD *)a2)
          {
            return i;
          }
          v15 = v9 + 2;
          v9 = v8;
          if (v15 != v8)
          {
            v9 = v15;
            while ((unint64_t)*v9 + 1 <= 1)
            {
              v9 += 2;
              if (v9 == v8)
              {
                v9 = v8;
                break;
              }
            }
          }
        }
        while (v9 != v11);
        v3 = *(unsigned int *)(v2 + 244);
      }
    }
  }
  return -1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::KeyframeEffect::setAnimatedPropertiesInStyle(WebCore::RenderStyle &,double,double)::$_0,void,WebCore::KeyframeInterpolation::Keyframe const&,WebCore::CompositeOperation>::call(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD v18[16];
  _QWORD *v19;

  v6 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = 48;
    if (*(double *)(a2 + 8) == *(double *)(**(_QWORD **)(a1 + 8) + 8))
      v11 = 32;
    v12 = *(_QWORD *)(a1 + v11);
    v17 = 0x3FF0000000000000;
    v18[0] = v6 + 104;
    v16 = a3;
    v15 = 0;
    v14 = 0;
    v18[1] = v12;
    v18[2] = v9;
    v18[3] = v10;
    v18[4] = &v17;
    v18[5] = &v16;
    v18[6] = &v15;
    v18[7] = &v14;
    v18[8] = v6 + 104;
    v18[9] = v12;
    v18[10] = v9;
    v18[11] = v10;
    v18[12] = &v17;
    v18[13] = &v16;
    v18[14] = &v15;
    v18[15] = &v14;
    v13 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v13 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x19568229CLL);
    }
    v19 = v18;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation13blendPropertyERKNS8_25CSSPropertyBlendingClientERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERNS8_11RenderStyleERKSJ_SM_dNS8_18CompositeOperationENS8_27IterationCompositeOperationEdE3__0JZNS9_13blendPropertyESC_SI_SK_SM_SM_dSN_SO_dE3__1EEEEEJRKNS0_6__implIJSE_SF_EEEEEEDcOT_DpOT0____fmatrix[v13])(&v19);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::KeyframeEffect::setAnimatedPropertiesInStyle(WebCore::RenderStyle &,double,double)::$_1,void,WebCore::KeyframeInterpolation::Keyframe const&>::call(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD v14[16];
  _QWORD *v15;

  v4 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(double *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 24);
    if (a2[1] == *(double *)(**(_QWORD **)(a1 + 8) + 8))
      v8 = *(_QWORD *)(a1 + 32);
    else
      v8 = *(_QWORD *)(a1 + 48);
    v13 = 0x3FF0000000000000;
    v14[0] = v4 + 104;
    v12 = 2;
    v11 = 0;
    v10 = 0;
    v14[1] = v8;
    v14[2] = v7;
    v14[3] = v8;
    v14[4] = &v13;
    v14[5] = &v12;
    v14[6] = &v11;
    v14[7] = &v10;
    v14[8] = v4 + 104;
    v14[9] = v8;
    v14[10] = v7;
    v14[11] = v8;
    v14[12] = &v13;
    v14[13] = &v12;
    v14[14] = &v11;
    v14[15] = &v10;
    v9 = *(unsigned int *)(v6 + 8);
    if ((_DWORD)v9 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x195682398);
    }
    v15 = v14;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation13blendPropertyERKNS8_25CSSPropertyBlendingClientERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERNS8_11RenderStyleERKSJ_SM_dNS8_18CompositeOperationENS8_27IterationCompositeOperationEdE3__0JZNS9_13blendPropertyESC_SI_SK_SM_SM_dSN_SO_dE3__1EEEEEJRKNS0_6__implIJSE_SF_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v15);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::KeyframeEffect::setAnimatedPropertiesInStyle(WebCore::RenderStyle &,double,double)::$_2,void,double,double,WebCore::IterationCompositeOperation>::call(_QWORD *a1, char a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  char v13;
  char v14;
  double v15;
  _QWORD v16[16];
  _QWORD *v17;

  v5 = a1[2];
  v6 = a1[1] + 104;
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v15 = a3;
  v14 = 0;
  v13 = a2;
  v12 = a4;
  v16[0] = v6;
  v16[1] = v7;
  v16[2] = v8;
  v16[3] = v9;
  v16[4] = &v15;
  v16[5] = &v14;
  v16[6] = &v13;
  v16[7] = &v12;
  v16[8] = v6;
  v16[9] = v7;
  v16[10] = v8;
  v16[11] = v9;
  v16[12] = &v15;
  v16[13] = &v14;
  v16[14] = &v13;
  v16[15] = &v12;
  v10 = *(unsigned int *)(v5 + 8);
  if ((_DWORD)v10 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x195682438);
  }
  v17 = v16;
  return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation13blendPropertyERKNS8_25CSSPropertyBlendingClientERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERNS8_11RenderStyleERKSJ_SM_dNS8_18CompositeOperationENS8_27IterationCompositeOperationEdE3__0JZNS9_13blendPropertyESC_SI_SK_SM_SM_dSN_SO_dE3__1EEEEEJRKNS0_6__implIJSE_SF_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v17);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::KeyframeEffect::setAnimatedPropertiesInStyle(WebCore::RenderStyle &,double,double)::$_3,BOOL>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD *v7;

  v1 = a1[2];
  v2 = a1[4];
  v6[0] = a1[3];
  v6[1] = v2;
  v6[2] = v6[0];
  v6[3] = v2;
  v3 = *(unsigned int *)(v1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>(v5);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation48propertyRequiresBlendingForAccumulativeIterationERKNS8_25CSSPropertyBlendingClientERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESL_E3__0JZNS9_48propertyRequiresBlendingForAccumulativeIterationESC_SI_SL_SL_E3__1EEEEEJRKNS0_6__implIJSE_SF_EEEEEEDcOT_DpOT0____fmatrix[v3])(&v7);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char *v5;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>();
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation30isPropertyAdditiveOrCumulativeERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEE3__0JZNS9_30isPropertyAdditiveOrCumulativeESF_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v5);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::KeyframeEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::containsProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int i;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  _WORD *v24;
  __int16 v26;
  unsigned int v27;
  char v28;
  char *v29;

  v2 = *(unsigned __int16 *)(a1 + 8);
  v26 = *(_WORD *)(a1 + 8);
  v27 = 0;
  if (!*(_DWORD *)(a2 + 156))
  {
    v17 = *(unsigned int *)(a2 + 244);
    if (!(_DWORD)v17)
      goto LABEL_54;
    v18 = 0;
    while (1)
    {
      v19 = *(_WORD **)(*(_QWORD *)(a2 + 232) + (v18 << 6) + 32);
      if (!v19)
        break;
      v20 = *((unsigned int *)v19 - 1);
      v21 = &v19[8 * v20];
      if (!*((_DWORD *)v19 - 3))
      {
        v22 = &v19[8 * v20];
        goto LABEL_40;
      }
      v22 = *(_WORD **)(*(_QWORD *)(a2 + 232) + (v18 << 6) + 32);
      if ((_DWORD)v20)
      {
        v23 = 16 * v20;
        v22 = *(_WORD **)(*(_QWORD *)(a2 + 232) + (v18 << 6) + 32);
        do
        {
          if ((unsigned __int16)(*v22 + 1) > 1u)
            goto LABEL_41;
          v22 += 8;
          v23 -= 16;
        }
        while (v23);
        v22 = v21;
      }
LABEL_41:
      if (v19)
        v19 += 8 * *((unsigned int *)v19 - 1);
      if (v19 != v22)
      {
        while ((unsigned __int16)*v22 != v2)
        {
          v24 = v22 + 8;
          v22 = v21;
          if (v24 != v21)
          {
            v22 = v24;
            do
            {
              if ((unsigned __int16)(*v22 + 1) > 1u)
                goto LABEL_50;
              v22 += 8;
            }
            while (v22 != v21);
            v22 = v21;
          }
LABEL_50:
          if (v22 == v19)
            goto LABEL_51;
        }
        v4 = 0;
        v16 = 1;
LABEL_55:
        ((void (*)(char **, __int16 *))off_1E33919E8[v4])(&v29, &v26);
        return v16;
      }
LABEL_51:
      v16 = 0;
      v4 = 0;
      if (++v18 == v17)
        goto LABEL_55;
    }
    v22 = 0;
    v20 = 0;
LABEL_40:
    v21 = &v19[8 * v20];
    goto LABEL_41;
  }
  v3 = *(_QWORD *)(a2 + 160);
  if (!v3)
  {
LABEL_54:
    v16 = 0;
    v4 = 0;
    goto LABEL_55;
  }
  v4 = 0;
  v5 = 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = 9 * ((~(v2 << 15) + v2) ^ ((~(v2 << 15) + v2) >> 10));
  for (i = ((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16);
        ;
        i = v5 + v9)
  {
    v9 = i & v6;
    v10 = (unsigned __int16 *)(v3 + 16 * (i & v6));
    v11 = *((unsigned int *)v10 + 2);
    v12 = v4 != v11 || v4 == 0xFFFFFFFFLL;
    v13 = !v12;
    if ((_DWORD)v11 != -1 && v13)
      break;
    if (v11 == 0xFFFFFFFFLL)
      LOBYTE(v13) = v4 == 0xFFFFFFFFLL;
    if (v13)
      goto LABEL_58;
LABEL_21:
    if (v11)
      v15 = 0;
    else
      v15 = *v10 == 0;
    if (v15)
    {
      v16 = 0;
      goto LABEL_27;
    }
    ++v5;
  }
  v29 = &v28;
  if (!((unsigned int (*)(char **, uint64_t, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v4])(&v29, v3 + 16 * v9, &v26))
  {
    v11 = *((unsigned int *)v10 + 2);
    v4 = v27;
    goto LABEL_21;
  }
  v4 = v27;
LABEL_58:
  v16 = 1;
LABEL_27:
  if (v4 != 0xFFFFFFFFLL)
    goto LABEL_55;
  return v16;
}

BOOL WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::requiresPseudoElement(void)::$_0,BOOL,WebCore::KeyframeEffect const&>::call(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 305) == 2 && *(_QWORD *)(a2 + 264) != 0 && *(_BYTE *)(a2 + 288) != 0;
}

BOOL WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::hasEffectWithImplicitKeyframes(void)::$_0,BOOL,WebCore::KeyframeEffect const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned int *)(a2 + 244);
  if (!(_DWORD)v2)
    return 0;
  if ((_DWORD)v2 != 1)
  {
    v4 = *(_QWORD *)(a2 + 232);
    if (*(double *)(v4 + 24) == 0.0)
      return *(double *)(v4 + (v2 << 6) - 40) != 1.0;
  }
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::call(uint64_t a1, WebCore::KeyframeEffect *this)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  WebCore::WebAnimation *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  BOOL v25;
  _BOOL4 v26;
  BOOL v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  int v32;
  char v33;
  char *v34;

  if ((WebCore::KeyframeEffect::isCurrentlyAffectingProperty(this, *(unsigned __int16 *)(a1 + 8), 0) & 1) != 0)
    return 1;
  v5 = *(unsigned __int16 *)(a1 + 8);
  v6 = *((_QWORD *)this + 15);
  if ((v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0
     || (v9 = *((_QWORD *)this + 33)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v7 + 680) + 712) & 0x800000000000) != 0)
  {
    if (!*((_BYTE *)this + 328))
      return 0;
    v10 = *(unsigned __int16 *)(a1 + 8);
    if (!WebCore::KeyframeEffect::canBeAccelerated(this))
      return 0;
    v11 = *(WebCore::WebAnimation **)(*((_QWORD *)this + 12) + 8);
    if (*((_BYTE *)v11 + 156) || WebCore::WebAnimation::playState(v11) != 1)
      return 0;
    v6 = *((_QWORD *)this + 15);
    v5 = v10;
  }
  else if (*((_BYTE *)this + 310) != 1)
  {
    return 0;
  }
  v12 = v5;
  v31 = v5;
  v32 = 0;
  if (!v6 || (v13 = *(_QWORD *)(v6 + 8)) == 0)
    v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 40) + 8);
  if (!WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated((uint64_t)&v31, *(_QWORD *)(v13 + 680)))
  {
    v4 = 0;
    goto LABEL_48;
  }
  v29 = v12;
  v30 = 0;
  v14 = *((_QWORD *)this + 20);
  if (!v14)
  {
    v4 = 0;
    v15 = 0;
    goto LABEL_47;
  }
  v15 = 0;
  v16 = 0;
  v17 = *(unsigned int *)(v14 - 8);
  v18 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
  v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
  while (1)
  {
    v20 = v17;
    v21 = v19 & v17;
    v22 = v14;
    v23 = (unsigned __int16 *)(v14 + 16 * (v19 & v17));
    v24 = *((unsigned int *)v23 + 2);
    v25 = v15 != v24 || v15 == 0xFFFFFFFFLL;
    v26 = !v25;
    if ((_DWORD)v24 != -1 && v26)
      break;
    if (v24 == 0xFFFFFFFFLL)
      LOBYTE(v26) = v15 == 0xFFFFFFFFLL;
    if (v26)
      goto LABEL_51;
LABEL_40:
    if (v24)
      v28 = 0;
    else
      v28 = *v23 == 0;
    if (v28)
    {
      v4 = 0;
      goto LABEL_46;
    }
    v19 = ++v16 + v21;
    v14 = v22;
    v17 = v20;
  }
  v34 = &v33;
  if (!((unsigned int (*)(char **, unsigned __int16 *, __int16 *))off_1E3391BC0[v15])(&v34, v23, &v29))
  {
    v24 = *((unsigned int *)v23 + 2);
    v15 = v30;
    goto LABEL_40;
  }
  v15 = v30;
LABEL_51:
  v4 = 1;
LABEL_46:
  if (v15 != 0xFFFFFFFFLL)
LABEL_47:
    ((void (*)(char **, __int16 *))off_1E33919E8[v15])(&v34, &v29);
LABEL_48:
  if (v32 != -1)
    ((void (*)(__int16 *, __int16 *))off_1E33919E8[v32])(&v29, &v31);
  return v4;
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int **a4, uint64_t a5)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  const WebCore::WebAnimation *v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v24;
  unint64_t v25;
  unsigned int *v26;
  const WebCore::WebAnimation *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int **v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore *v35;
  uint64_t v36;
  const WebCore::WebAnimation *v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int **i;
  unsigned int **v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebCore *v50;
  uint64_t v51;
  const WebCore::WebAnimation *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int **v56;
  void *v57;
  const WebCore::WebAnimation *v58;
  unsigned int **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  const WebCore::WebAnimation *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;

  if (a3 < 2)
    return result;
  v6 = (unsigned int **)result;
  if (a3 == 2)
  {
    v7 = *((_QWORD *)a2 - 1);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1956830ACLL);
    }
    if (!*(_QWORD *)result || (v9 = *(_QWORD *)(*(_QWORD *)result + 8)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1956830CCLL);
    }
    v10 = *(_QWORD *)(v8 + 96);
    if (v10)
    {
      v11 = *(WebCore **)(v10 + 8);
      v12 = *(_QWORD *)(v9 + 96);
      if (v12)
      {
        if (v11)
        {
          v13 = *(const WebCore::WebAnimation **)(v12 + 8);
          if (v13)
          {
            result = (unsigned int *)WebCore::compareAnimationsByCompositeOrder(v11, v13, (const WebCore::WebAnimation *)2);
            if ((_DWORD)result)
            {
              v15 = *v6;
              *v6 = 0;
              v16 = (unsigned int *)*((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = 0;
              v17 = *v6;
              *v6 = v16;
              if (v17)
              {
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  atomic_store(1u, v17);
                  WTF::fastFree((WTF *)v17, v14);
                }
              }
              result = (unsigned int *)*((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = v15;
              if (result)
              {
                do
                {
                  v20 = __ldaxr(result);
                  v21 = v20 - 1;
                }
                while (__stlxr(v21, result));
                if (!v21)
                {
                  atomic_store(1u, result);
                  return (unsigned int *)WTF::fastFree((WTF *)result, v14);
                }
              }
            }
            return result;
          }
LABEL_112:
          __break(0xC471u);
          JUMPOUT(0x195682FC8);
        }
      }
      else if (v11)
      {
        goto LABEL_112;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195682FE8);
  }
  if ((uint64_t)a3 <= 0)
  {
    if (result != a2)
    {
      v28 = result + 2;
      if (result + 2 != a2)
      {
        v29 = result;
        while (1)
        {
          v30 = (unsigned int **)v29;
          v29 = v28;
          v31 = v30[1];
          if (!v31 || (v32 = *((_QWORD *)v31 + 1)) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1956830ECLL);
          }
          if (!*v30 || (v33 = *((_QWORD *)*v30 + 1)) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19568310CLL);
          }
          v34 = *(_QWORD *)(v32 + 96);
          if (!v34)
            goto LABEL_116;
          v35 = *(WebCore **)(v34 + 8);
          v36 = *(_QWORD *)(v33 + 96);
          if (!v36)
            break;
          if (!v35)
            goto LABEL_116;
          v37 = *(const WebCore::WebAnimation **)(v36 + 8);
          if (!v37)
            goto LABEL_115;
          result = (unsigned int *)WebCore::compareAnimationsByCompositeOrder(v35, v37, (const WebCore::WebAnimation *)a3);
          if ((_DWORD)result)
          {
            v39 = *(_QWORD *)v29;
            *(_QWORD *)v29 = 0;
            if (v39)
            {
              v40 = 0;
              for (i = (unsigned int **)v29; ; v40 = *i)
              {
                v42 = i;
                i = v30;
                v43 = *v30;
                *v30 = 0;
                *v42 = v43;
                if (v40)
                {
                  do
                  {
                    v44 = __ldaxr(v40);
                    v45 = v44 - 1;
                  }
                  while (__stlxr(v45, v40));
                  if (!v45)
                  {
                    atomic_store(1u, v40);
                    WTF::fastFree((WTF *)v40, v38);
                  }
                }
                if (v30 == v6)
                  break;
                v46 = *(_QWORD *)(v39 + 8);
                if (!v46)
                  goto LABEL_60;
                --v30;
                v47 = (uint64_t)*(i - 1);
                if (!v47 || (v48 = *(_QWORD *)(v47 + 8)) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19568308CLL);
                }
                v49 = *(_QWORD *)(v46 + 96);
                if (!v49)
                  goto LABEL_96;
                v50 = *(WebCore **)(v49 + 8);
                v51 = *(_QWORD *)(v48 + 96);
                if (!v51)
                {
                  if (!v50)
                  {
LABEL_96:
                    __break(0xC471u);
                    JUMPOUT(0x195682EFCLL);
                  }
LABEL_95:
                  __break(0xC471u);
                  JUMPOUT(0x195682EDCLL);
                }
                if (!v50)
                  goto LABEL_96;
                v52 = *(const WebCore::WebAnimation **)(v51 + 8);
                if (!v52)
                  goto LABEL_95;
                if ((WebCore::compareAnimationsByCompositeOrder(v50, v52, (const WebCore::WebAnimation *)a3) & 1) == 0)
                  goto LABEL_53;
              }
              i = v6;
            }
            else
            {
              v55 = *v30;
              *v30 = 0;
              v30[1] = v55;
              i = v6;
              if (v30 != v6)
              {
LABEL_60:
                __break(0xC471u);
                JUMPOUT(0x195682D20);
              }
            }
LABEL_53:
            result = *i;
            *i = (unsigned int *)v39;
            if (result)
            {
              do
              {
                v53 = __ldaxr(result);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, result));
              if (!v54)
              {
                atomic_store(1u, result);
                result = (unsigned int *)WTF::fastFree((WTF *)result, v38);
              }
            }
          }
          v28 = v29 + 2;
          if (v29 + 2 == a2)
            return result;
        }
        if (v35)
        {
LABEL_115:
          __break(0xC471u);
          JUMPOUT(0x19568300CLL);
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x19568302CLL);
      }
    }
  }
  else
  {
    v24 = (uint64_t *)a4;
    v25 = a3 >> 1;
    v26 = &result[2 * (a3 >> 1)];
    v27 = (const WebCore::WebAnimation *)(a3 >> 1);
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(result, v26, v27, a4);
      v56 = (unsigned int **)&v24[v25];
      result = std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>((unsigned int *)&v6[a3 >> 1], a2, (const WebCore::WebAnimation *)(a3 - (a3 >> 1)), v56);
      v59 = v56;
      v60 = v24;
      v61 = &v24[a3];
      while (v59 != (unsigned int **)v61)
      {
        if (!*v59 || (v62 = *((_QWORD *)*v59 + 1)) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19568304CLL);
        }
        if (!*v60 || (v63 = *(_QWORD *)(*v60 + 8)) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19568306CLL);
        }
        v64 = *(_QWORD *)(v62 + 96);
        if (!v64)
          goto LABEL_86;
        v65 = *(WebCore **)(v64 + 8);
        v66 = *(_QWORD *)(v63 + 96);
        if (!v66)
        {
          if (!v65)
          {
LABEL_86:
            __break(0xC471u);
            JUMPOUT(0x195682E64);
          }
LABEL_85:
          __break(0xC471u);
          JUMPOUT(0x195682E44);
        }
        if (!v65)
          goto LABEL_86;
        v67 = *(const WebCore::WebAnimation **)(v66 + 8);
        if (!v67)
          goto LABEL_85;
        if (WebCore::compareAnimationsByCompositeOrder(v65, v67, v58))
        {
          v68 = *v59;
          *v59 = 0;
          result = *v6;
          *v6 = v68;
          if (result)
          {
            do
            {
              v69 = __ldaxr(result);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, result));
            if (!v70)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
            }
          }
          ++v59;
        }
        else
        {
          v71 = (unsigned int *)*v60;
          *v60 = 0;
          result = *v6;
          *v6 = v71;
          if (result)
          {
            do
            {
              v72 = __ldaxr(result);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, result));
            if (!v73)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
            }
          }
          ++v60;
        }
        ++v6;
        if (v60 == (uint64_t *)v56)
        {
          for (; v59 != (unsigned int **)v61; ++v6)
          {
            v77 = *v59;
            *v59 = 0;
            result = *v6;
            *v6 = v77;
            if (result)
            {
              do
              {
                v78 = __ldaxr(result);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, result));
              if (!v79)
              {
                atomic_store(1u, result);
                result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
              }
            }
            ++v59;
          }
          goto LABEL_103;
        }
      }
      for (; v60 != (uint64_t *)v56; ++v6)
      {
        v74 = (unsigned int *)*v60;
        *v60 = 0;
        result = *v6;
        *v6 = v74;
        if (result)
        {
          do
          {
            v75 = __ldaxr(result);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, result));
          if (!v76)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
          }
        }
        ++v60;
      }
LABEL_103:
      if (v24)
      {
        v80 = 0;
        do
        {
          result = (unsigned int *)*v24;
          *v24 = 0;
          if (result)
          {
            do
            {
              v81 = __ldaxr(result);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, result));
            if (!v82)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
            }
          }
          ++v80;
          ++v24;
        }
        while (v80 != a3);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(result, v26, v27, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v24, a5);
      return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>((uint64_t)v6, (uint64_t *)&v6[a3 >> 1], (const WebCore::WebAnimation *)a2, a3 >> 1, a3 - (a3 >> 1), v24, a5);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(unsigned int *result, unsigned int *a2, const WebCore::WebAnimation *a3, unsigned int **a4)
{
  unsigned int **v4;
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore *v13;
  uint64_t v14;
  const WebCore::WebAnimation *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore *v26;
  uint64_t v27;
  const WebCore::WebAnimation *v28;
  unsigned int **v29;
  void *v30;
  unsigned int *v31;
  unsigned int **v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int **v35;
  uint64_t v36;
  uint64_t v37;
  WebCore *v38;
  uint64_t v39;
  const WebCore::WebAnimation *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  const WebCore::WebAnimation *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  const WebCore::WebAnimation *v57;
  unsigned int *v58;
  unint64_t v59;
  unsigned int *v60;
  unint64_t v61;
  unsigned int *v62;

  if (!a3)
    return result;
  v4 = a4;
  v6 = result;
  if (a3 == (const WebCore::WebAnimation *)1)
  {
LABEL_17:
    v18 = *(unsigned int **)v6;
    *(_QWORD *)v6 = 0;
    *v4 = v18;
    return result;
  }
  if (a3 == (const WebCore::WebAnimation *)2)
  {
    v9 = a2 - 2;
    v8 = *((_QWORD *)a2 - 1);
    if (!v8 || (v10 = *(_QWORD *)(v8 + 8)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19568360CLL);
    }
    if (!*(_QWORD *)result || (v11 = *(_QWORD *)(*(_QWORD *)result + 8)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19568362CLL);
    }
    v12 = *(_QWORD *)(v10 + 96);
    if (v12)
    {
      v13 = *(WebCore **)(v12 + 8);
      v14 = *(_QWORD *)(v11 + 96);
      if (v14)
      {
        if (v13)
        {
          v15 = *(const WebCore::WebAnimation **)(v14 + 8);
          if (v15)
          {
            result = (unsigned int *)WebCore::compareAnimationsByCompositeOrder(v13, v15, (const WebCore::WebAnimation *)2);
            if ((_DWORD)result)
              v16 = v9;
            else
              v16 = v6;
            v17 = *(unsigned int **)v16;
            *(_QWORD *)v16 = 0;
            *v4++ = v17;
            if (!(_DWORD)result)
              v6 = v9;
            goto LABEL_17;
          }
LABEL_86:
          __break(0xC471u);
          JUMPOUT(0x195683508);
        }
      }
      else if (v13)
      {
        goto LABEL_86;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195683528);
  }
  if ((uint64_t)a3 <= 8)
  {
    if (result == a2)
      return result;
    v19 = *(unsigned int **)result;
    *(_QWORD *)result = 0;
    v20 = result + 2;
    *a4 = v19;
    if (result + 2 == a2)
      return result;
    v21 = *(unsigned int **)v20;
    if (*(_QWORD *)v20)
    {
      v22 = a4;
      do
      {
        v23 = *((_QWORD *)v21 + 1);
        if (!v23)
          break;
        if (!v19 || (v24 = *((_QWORD *)v19 + 1)) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19568364CLL);
        }
        v25 = *(_QWORD *)(v23 + 96);
        if (!v25)
          goto LABEL_90;
        v26 = *(WebCore **)(v25 + 8);
        v27 = *(_QWORD *)(v24 + 96);
        if (!v27)
        {
          if (!v26)
          {
LABEL_90:
            __break(0xC471u);
            JUMPOUT(0x19568356CLL);
          }
LABEL_89:
          __break(0xC471u);
          JUMPOUT(0x19568354CLL);
        }
        if (!v26)
          goto LABEL_90;
        v28 = *(const WebCore::WebAnimation **)(v27 + 8);
        if (!v28)
          goto LABEL_89;
        v29 = v22 + 1;
        result = (unsigned int *)WebCore::compareAnimationsByCompositeOrder(v26, v28, a3);
        if ((_DWORD)result)
        {
          v31 = *v22;
          *v22 = 0;
          v22[1] = v31;
          v32 = v4;
          if (v22 != v4)
          {
            while (1)
            {
              if (!*(_QWORD *)v20 || (v33 = *(_QWORD *)(*(_QWORD *)v20 + 8)) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1956835CCLL);
              }
              v35 = v22 - 1;
              v34 = (uint64_t)*(v22 - 1);
              if (!v34 || (v36 = *(_QWORD *)(v34 + 8)) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1956835ECLL);
              }
              v37 = *(_QWORD *)(v33 + 96);
              if (!v37)
                goto LABEL_84;
              v38 = *(WebCore **)(v37 + 8);
              v39 = *(_QWORD *)(v36 + 96);
              if (!v39)
              {
                if (v38)
                {
LABEL_83:
                  __break(0xC471u);
                  JUMPOUT(0x1956834C4);
                }
LABEL_84:
                __break(0xC471u);
                JUMPOUT(0x1956834E4);
              }
              if (!v38)
                goto LABEL_84;
              v40 = *(const WebCore::WebAnimation **)(v39 + 8);
              if (!v40)
                goto LABEL_83;
              if (!WebCore::compareAnimationsByCompositeOrder(v38, v40, a3))
                break;
              v42 = *(v22 - 1);
              v41 = *v22;
              *(v22 - 1) = 0;
              *v22 = v42;
              if (v41)
              {
                do
                {
                  v43 = __ldaxr(v41);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, v41));
                if (!v44)
                {
                  atomic_store(1u, v41);
                  WTF::fastFree((WTF *)v41, v30);
                }
              }
              --v22;
              if (v35 == v4)
              {
                v32 = v4;
                goto LABEL_50;
              }
            }
            v32 = v22;
          }
LABEL_50:
          v46 = *(unsigned int **)v20;
          *(_QWORD *)v20 = 0;
          result = *v32;
          *v32 = v46;
          if (result)
          {
            do
            {
              v47 = __ldaxr(result);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, result));
            if (!v48)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v30);
            }
          }
        }
        else
        {
          v45 = *(unsigned int **)v20;
          *(_QWORD *)v20 = 0;
          *v29 = v45;
        }
        v20 += 2;
        if (v20 == a2)
          return result;
        v19 = *v29;
        v21 = *(unsigned int **)v20;
        v22 = v29;
      }
      while (*(_QWORD *)v20);
    }
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x195683454);
  }
  v49 = &result[2 * ((unint64_t)a3 >> 1)];
  std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(result, v49, (unint64_t)a3 >> 1, a4, (unint64_t)a3 >> 1);
  result = (unsigned int *)std::__stable_sort<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(&v6[2 * ((unint64_t)a3 >> 1)], a2, (char *)a3 - ((unint64_t)a3 >> 1), &v4[(unint64_t)a3 >> 1], (char *)a3 - ((unint64_t)a3 >> 1));
  v51 = &v6[2 * ((unint64_t)a3 >> 1)];
  while (v51 != a2)
  {
    if (!*(_QWORD *)v51 || (v52 = *(_QWORD *)(*(_QWORD *)v51 + 8)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19568358CLL);
    }
    if (!*(_QWORD *)v6 || (v53 = *(_QWORD *)(*(_QWORD *)v6 + 8)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1956835ACLL);
    }
    v54 = *(_QWORD *)(v52 + 96);
    if (!v54)
      goto LABEL_77;
    v55 = *(WebCore **)(v54 + 8);
    v56 = *(_QWORD *)(v53 + 96);
    if (!v56)
    {
      if (!v55)
      {
LABEL_77:
        __break(0xC471u);
        JUMPOUT(0x195683474);
      }
      goto LABEL_98;
    }
    if (!v55)
      goto LABEL_77;
    v57 = *(const WebCore::WebAnimation **)(v56 + 8);
    if (!v57)
      goto LABEL_98;
    result = (unsigned int *)WebCore::compareAnimationsByCompositeOrder(v55, v57, v50);
    if ((_DWORD)result)
    {
      v58 = *(unsigned int **)v51;
      *(_QWORD *)v51 = 0;
      v51 += 2;
    }
    else
    {
      v58 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v6 += 2;
    }
    *v4++ = v58;
    if (v6 == v49)
    {
      if (v51 != a2)
      {
        v59 = 0;
        do
        {
          v60 = *(unsigned int **)&v51[v59 / 4];
          *(_QWORD *)&v51[v59 / 4] = 0;
          v4[v59 / 8] = v60;
          v59 += 8;
        }
        while (&v51[v59 / 4] != a2);
      }
      return result;
    }
  }
  if (v6 != v49)
  {
    v61 = 0;
    do
    {
      v62 = *(unsigned int **)&v6[v61 / 4];
      *(_QWORD *)&v6[v61 / 4] = 0;
      v4[v61 / 8] = v62;
      v61 += 8;
    }
    while (&v6[v61 / 4] != v49);
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(uint64_t result, uint64_t *a2, const WebCore::WebAnimation *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  const WebCore::WebAnimation *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore *v20;
  uint64_t v21;
  const WebCore::WebAnimation *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore *v32;
  uint64_t v33;
  const WebCore::WebAnimation *v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore *v43;
  uint64_t v44;
  const WebCore::WebAnimation *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int **v49;
  unsigned int **v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int **v59;
  unsigned int **v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const WebCore::WebAnimation *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  const WebCore::WebAnimation *v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WebCore *v101;
  uint64_t v102;
  const WebCore::WebAnimation *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  unsigned int **v132;

  if (!a5)
    return result;
  v9 = a5;
  v11 = a3;
  v12 = a2;
  v13 = (uint64_t *)result;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4)
      return result;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      if (!*v12 || (v16 = *(_QWORD *)(*v12 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195683DD8);
      }
      v17 = v13[v15];
      if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195683DF8);
      }
      v19 = *(_QWORD *)(v16 + 96);
      if (!v19)
        goto LABEL_98;
      v20 = *(WebCore **)(v19 + 8);
      v21 = *(_QWORD *)(v18 + 96);
      if (!v21)
      {
        if (v20)
        {
LABEL_97:
          __break(0xC471u);
          JUMPOUT(0x195683AC8);
        }
LABEL_98:
        __break(0xC471u);
        JUMPOUT(0x195683AE8);
      }
      if (!v20)
        goto LABEL_98;
      v22 = *(const WebCore::WebAnimation **)(v21 + 8);
      if (!v22)
        goto LABEL_97;
      result = WebCore::compareAnimationsByCompositeOrder(v20, v22, a3);
      if ((result & 1) != 0)
        break;
      ++v15;
      v14 -= 8;
      if (a4 == v15)
        return result;
    }
    v131 = a7;
    v132 = (unsigned int **)v11;
    v129 = &v13[v14 / 0xFFFFFFFFFFFFFFF8];
    if (a4 - v15 >= v9)
    {
      if (a4 - 1 == v15)
      {
        v110 = v13[v15];
        v13[v15] = 0;
        v111 = *v12;
        *v12 = 0;
        v112 = (unsigned int *)v13[v15];
        v13[v15] = v111;
        if (v112)
        {
          do
          {
            v113 = __ldaxr(v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, v112));
          if (!v114)
          {
            atomic_store(1u, v112);
            WTF::fastFree((WTF *)v112, v23);
          }
        }
        result = *v12;
        *v12 = v110;
        if (result)
        {
          do
          {
            v115 = __ldaxr((unsigned int *)result);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, (unsigned int *)result));
          if (!v116)
          {
            atomic_store(1u, (unsigned int *)result);
            return WTF::fastFree((WTF *)result, v23);
          }
        }
        return result;
      }
      v36 = &v13[(a4 - v15) / 2];
      v130 = a6;
      if (v11 == (const WebCore::WebAnimation *)v12)
      {
        v25 = (uint64_t *)v11;
      }
      else
      {
        v37 = (v11 - (const WebCore::WebAnimation *)v12) >> 3;
        v25 = v12;
        do
        {
          v38 = &v25[v37 >> 1];
          if (!*v38 || (v39 = *(_QWORD *)(*v38 + 8)) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195684060);
          }
          v40 = v36[v15];
          if (!v40 || (v41 = *(_QWORD *)(v40 + 8)) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195684080);
          }
          v42 = *(_QWORD *)(v39 + 96);
          if (!v42)
            goto LABEL_131;
          v43 = *(WebCore **)(v42 + 8);
          v44 = *(_QWORD *)(v41 + 96);
          if (!v44)
          {
            if (v43)
            {
LABEL_130:
              __break(0xC471u);
              JUMPOUT(0x195683C80);
            }
LABEL_131:
            __break(0xC471u);
            JUMPOUT(0x195683CA0);
          }
          if (!v43)
            goto LABEL_131;
          v45 = *(const WebCore::WebAnimation **)(v44 + 8);
          if (!v45)
            goto LABEL_130;
          v46 = WebCore::compareAnimationsByCompositeOrder(v43, v45, a3);
          if (v46)
            v37 += ~(v37 >> 1);
          else
            v37 >>= 1;
          if (v46)
            v25 = v38 + 1;
        }
        while (v37);
        v11 = (const WebCore::WebAnimation *)v12;
      }
      v27 = &v36[v14 / 0xFFFFFFFFFFFFFFF8];
      v47 = ((char *)v25 - (char *)v11) >> 3;
      v48 = (a4 - v15) / 2;
    }
    else
    {
      if (v9 >= 0)
        v24 = v9;
      else
        v24 = v9 + 1;
      v127 = v24 >> 1;
      v25 = &v12[v24 >> 1];
      if (&v13[v14 / 0xFFFFFFFFFFFFFFF8] == v12)
      {
        v27 = v12;
        v35 = v12;
      }
      else
      {
        v26 = (uint64_t)((char *)v12 - (char *)v13 + v14) >> 3;
        v27 = &v13[v14 / 0xFFFFFFFFFFFFFFF8];
        do
        {
          if (!*v25 || (v28 = *(_QWORD *)(*v25 + 8)) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195684020);
          }
          v29 = &v27[v26 >> 1];
          if (!*v29 || (v30 = *(_QWORD *)(*v29 + 8)) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195684040);
          }
          v31 = *(_QWORD *)(v28 + 96);
          if (!v31)
            goto LABEL_128;
          v32 = *(WebCore **)(v31 + 8);
          v33 = *(_QWORD *)(v30 + 96);
          if (!v33)
          {
            if (v32)
            {
LABEL_127:
              __break(0xC471u);
              JUMPOUT(0x195683C3CLL);
            }
LABEL_128:
            __break(0xC471u);
            JUMPOUT(0x195683C5CLL);
          }
          if (!v32)
            goto LABEL_128;
          v34 = *(const WebCore::WebAnimation **)(v33 + 8);
          if (!v34)
            goto LABEL_127;
          if (WebCore::compareAnimationsByCompositeOrder(v32, v34, a3))
          {
            v26 >>= 1;
          }
          else
          {
            v27 = v29 + 1;
            v26 += ~(v26 >> 1);
          }
        }
        while (v26);
        v35 = v129;
      }
      v47 = v127;
      v130 = a6;
      v48 = v27 - v35;
    }
    v49 = (unsigned int **)v25;
    if (v27 != v12)
    {
      v49 = (unsigned int **)v27;
      if (v12 != v25)
      {
        v126 = v48;
        v128 = v47;
        v50 = (unsigned int **)v27;
        v49 = (unsigned int **)v12;
        while (1)
        {
          v51 = *v50;
          *v50 = 0;
          v52 = *v12;
          *v12 = 0;
          v53 = *v50;
          *v50 = (unsigned int *)v52;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              WTF::fastFree((WTF *)v53, v23);
            }
          }
          v56 = (unsigned int *)*v12;
          *v12 = (uint64_t)v51;
          if (v56)
          {
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, v56);
              WTF::fastFree((WTF *)v56, v23);
            }
          }
          ++v50;
          if (++v12 == v25)
            break;
          if (v50 == v49)
            v49 = (unsigned int **)v12;
        }
        if (v50 != v49)
        {
          v59 = v50;
          v60 = v49;
          do
          {
            while (1)
            {
              v61 = *v59;
              *v59 = 0;
              v62 = *v49;
              *v49 = 0;
              v63 = *v59;
              *v59 = v62;
              if (v63)
              {
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                {
                  atomic_store(1u, v63);
                  WTF::fastFree((WTF *)v63, v23);
                }
              }
              v66 = *v49;
              *v49 = v61;
              if (v66)
              {
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  atomic_store(1u, v66);
                  WTF::fastFree((WTF *)v66, v23);
                }
              }
              ++v59;
              if (++v49 == (unsigned int **)v25)
                break;
              if (v59 == v60)
                v60 = v49;
            }
            v49 = v60;
          }
          while (v59 != v60);
          v49 = v50;
        }
        v48 = v126;
        v47 = v128;
      }
    }
    v69 = a4 - v48 - v15;
    v70 = v9 - v47;
    if (v48 + v47 >= v9 + a4 - (v48 + v47) - v15)
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(v49, v25, v132, a4 - v48 - v15, v9 - v47, v130, v131);
      v25 = v27;
      v70 = v47;
      v69 = v48;
      v132 = v49;
      v13 = v129;
    }
    else
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::KeyframeEffectStack::ensureEffectsAreSorted(void)::$_0 &,WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(v129, v27, v49, v48, v47, v130, v131);
      v13 = (uint64_t *)v49;
    }
    a4 = v69;
    v9 = v70;
    v12 = v25;
    a6 = v130;
    a7 = v131;
    v11 = (const WebCore::WebAnimation *)v132;
    if (!v70)
      return result;
  }
  if (a4 > v9)
  {
    if (v12 == (uint64_t *)v11)
      return result;
    v71 = 0;
    v72 = 0;
    do
    {
      v73 = v12[v71];
      v12[v71] = 0;
      a6[v71] = v73;
      ++v72;
      ++v71;
    }
    while (&v12[v71] != (uint64_t *)v11);
    if (!(v71 * 8))
      goto LABEL_187;
    v74 = v11;
    v75 = &a6[v71];
    while (1)
    {
      if (v12 == v13)
      {
        do
        {
          v117 = *--v75;
          *v75 = 0;
          result = *((_QWORD *)v74 - 1);
          v74 = (const WebCore::WebAnimation *)((char *)v74 - 8);
          *(_QWORD *)v74 = v117;
          if (result)
          {
            do
            {
              v118 = __ldaxr((unsigned int *)result);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, (unsigned int *)result));
            if (!v119)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, a2);
            }
          }
        }
        while (v75 != a6);
        goto LABEL_187;
      }
      v77 = v75 - 1;
      v76 = *(v75 - 1);
      if (!v76 || (v78 = *(_QWORD *)(v76 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1956840A0);
      }
      v80 = v12 - 1;
      v79 = *(v12 - 1);
      if (!v79 || (v81 = *(_QWORD *)(v79 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1956840C0);
      }
      v82 = *(_QWORD *)(v78 + 96);
      if (!v82)
        goto LABEL_171;
      v83 = *(WebCore **)(v82 + 8);
      v84 = *(_QWORD *)(v81 + 96);
      if (!v84)
      {
        if (!v83)
        {
LABEL_171:
          __break(0xC471u);
          JUMPOUT(0x195683EB4);
        }
LABEL_170:
        __break(0xC471u);
        JUMPOUT(0x195683E94);
      }
      if (!v83)
        goto LABEL_171;
      v85 = *(const WebCore::WebAnimation **)(v84 + 8);
      if (!v85)
        goto LABEL_170;
      v86 = WebCore::compareAnimationsByCompositeOrder(v83, v85, a3);
      v87 = (uint64_t *)((char *)v74 - 8);
      if (v86)
      {
        v88 = *v80;
        *v80 = 0;
        result = *v87;
        v74 = (const WebCore::WebAnimation *)((char *)v74 - 8);
        *v87 = v88;
        if (result)
        {
          do
          {
            v89 = __ldaxr((unsigned int *)result);
            v90 = --v89 == 0;
          }
          while (__stlxr(v89, (unsigned int *)result));
          goto LABEL_121;
        }
      }
      else
      {
        v91 = *v77;
        *v77 = 0;
        result = *v87;
        v74 = (const WebCore::WebAnimation *)((char *)v74 - 8);
        *v87 = v91;
        if (result)
        {
          do
          {
            v92 = __ldaxr((unsigned int *)result);
            v90 = --v92 == 0;
          }
          while (__stlxr(v92, (unsigned int *)result));
          v80 = v12;
          --v75;
LABEL_121:
          if (v90)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
          goto LABEL_123;
        }
        v80 = v12;
        --v75;
      }
LABEL_123:
      v12 = v80;
      if (v75 == a6)
        goto LABEL_187;
    }
  }
  if (v13 != v12)
  {
    v93 = 0;
    v72 = 0;
    do
    {
      v94 = v13[v93];
      v13[v93] = 0;
      a6[v93] = v94;
      ++v72;
      ++v93;
    }
    while (&v13[v93] != v12);
    if (!(v93 * 8))
      goto LABEL_187;
    v95 = &a6[v93];
    v96 = (uint64_t)&a6[v93 - 1];
    v97 = a6;
    while (v12 != (uint64_t *)v11)
    {
      if (!*v12 || (v98 = *(_QWORD *)(*v12 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1956840E0);
      }
      if (!*v97 || (v99 = *(_QWORD *)(*v97 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195684100);
      }
      v100 = *(_QWORD *)(v98 + 96);
      if (!v100)
        goto LABEL_174;
      v101 = *(WebCore **)(v100 + 8);
      v102 = *(_QWORD *)(v99 + 96);
      if (!v102)
      {
        if (!v101)
        {
LABEL_174:
          __break(0xC471u);
          JUMPOUT(0x195683EF8);
        }
LABEL_173:
        __break(0xC471u);
        JUMPOUT(0x195683ED8);
      }
      if (!v101)
        goto LABEL_174;
      v103 = *(const WebCore::WebAnimation **)(v102 + 8);
      if (!v103)
        goto LABEL_173;
      if (WebCore::compareAnimationsByCompositeOrder(v101, v103, a3))
      {
        v104 = *v12;
        *v12 = 0;
        result = *v13;
        *v13 = v104;
        if (result)
        {
          do
          {
            v105 = __ldaxr((unsigned int *)result);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, (unsigned int *)result));
          if (!v106)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
        }
        ++v12;
      }
      else
      {
        v107 = *v97;
        *v97 = 0;
        result = *v13;
        *v13 = v107;
        if (result)
        {
          do
          {
            v108 = __ldaxr((unsigned int *)result);
            v109 = v108 - 1;
          }
          while (__stlxr(v109, (unsigned int *)result));
          if (!v109)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
        }
        ++v97;
      }
      ++v13;
      if (v95 == v97)
        goto LABEL_187;
    }
    do
    {
      v120 = *v97;
      *v97 = 0;
      result = *v13;
      *v13 = v120;
      if (result)
      {
        do
        {
          v121 = __ldaxr((unsigned int *)result);
          v122 = v121 - 1;
        }
        while (__stlxr(v122, (unsigned int *)result));
        if (!v122)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v13;
      v90 = v96 == (_QWORD)v97++;
    }
    while (!v90);
LABEL_187:
    if (a6)
    {
      v123 = 0;
      do
      {
        result = *a6;
        *a6 = 0;
        if (result)
        {
          do
          {
            v124 = __ldaxr((unsigned int *)result);
            v125 = v124 - 1;
          }
          while (__stlxr(v125, (unsigned int *)result));
          if (!v125)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
        }
        ++v123;
        ++a6;
      }
      while (v123 != v72);
    }
  }
  return result;
}

_QWORD *WTF::Vector<WebCore::KeyframeInterpolation::Keyframe const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeInterpolation::Keyframe const*>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WebCore::ViewTimeline::create@<X0>(_DWORD **a1@<X0>, char a2@<W1>, int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x88);
  result = WebCore::ViewTimeline::ViewTimeline(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t WebCore::ViewTimeline::createFromCSSValue@<X0>(_QWORD *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X8>)
{
  char v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  float v10;
  int v11;
  int v12;
  float v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  int v23;
  int v24;
  int v25;
  float v27;
  unsigned __int8 *v28;
  int v29;
  float v30;
  int v31;
  uint64_t v32;
  uint64_t result;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  unsigned int v38;
  char v39;
  __int16 v40;
  char v41;
  unsigned int v42;
  char v43;
  __int16 v44;
  char v45;

  v6 = a1[1];
  if (!v6)
    goto LABEL_3;
  *(_DWORD *)v6 += 2;
  if (((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F87F) != 0x50)
    goto LABEL_3;
  v15 = *(unsigned __int16 *)(v6 + 8);
  switch(v15)
  {
    case 999:
      v7 = 3;
      break;
    case 998:
      v7 = 2;
      break;
    case 366:
      v7 = 1;
      break;
    default:
LABEL_3:
      v7 = 0;
      break;
  }
  v8 = a1[2];
  if (!v8)
  {
    LOBYTE(v10) = 0;
    v11 = 0;
    v18 = 0;
    goto LABEL_41;
  }
  *(_DWORD *)v8 += 2;
  v9 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  if ((v9 & 0x3F87F) == 0x50 && *(_WORD *)(v8 + 8) == 394)
  {
    v35 = 0;
    LOBYTE(v10) = 0;
    v11 = 0;
LABEL_37:
    v18 = 1;
    goto LABEL_38;
  }
  if ((v9 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195684344);
  }
  v12 = *(_WORD *)(v8 + 4) & 0x7F;
  if ((v12 - 63) > 0x11 || ((1 << ((*(_WORD *)(v8 + 4) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v12 == 73)
    {
      v16 = *(unsigned __int8 **)(*(_QWORD *)(v8 + 8) + 8);
      v17 = v16[12];
      if (v17 != 1)
      {
        if (v17 == 2)
          goto LABEL_16;
        if ((v17 - 5) > 3)
          goto LABEL_32;
      }
      v12 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 72))(v16);
    }
    if (v12 != 3)
      goto LABEL_32;
LABEL_16:
    v11 = 3;
    v14 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v8, 3u));
    if ((_BYTE)a2)
      v10 = v14;
    else
      v10 = 0.0;
    LOBYTE(v35) = 1;
    HIDWORD(v35) = LODWORD(v10) >> 8;
    goto LABEL_37;
  }
LABEL_32:
  if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v8))
  {
    v19 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v8, 6u));
    if ((_BYTE)a2)
      v10 = v19;
    else
      v10 = 0.0;
    LOBYTE(v35) = 1;
    HIDWORD(v35) = LODWORD(v10) >> 8;
    v11 = 4;
    goto LABEL_37;
  }
  LOBYTE(v10) = 0;
  v11 = 0;
  v18 = 0;
LABEL_38:
  if (*(_DWORD *)v8 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, a2);
  else
    *(_DWORD *)v8 -= 2;
LABEL_41:
  v20 = a1[3];
  v37 = LOBYTE(v10);
  if (v20)
  {
    *(_DWORD *)v20 += 2;
    v21 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
    if ((v21 & 0x3F87F) == 0x50 && *(_WORD *)(v20 + 8) == 394)
    {
LABEL_44:
      LOBYTE(v22) = 0;
      v36 = 0;
      v3 = 0;
      v23 = 0;
LABEL_73:
      v31 = 1;
      goto LABEL_74;
    }
    if ((v21 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19568452CLL);
    }
  }
  else
  {
    v20 = a1[2];
    if (!v20)
    {
      LOBYTE(v22) = 0;
      v23 = 0;
      v31 = 0;
      goto LABEL_77;
    }
    *(_DWORD *)v20 += 2;
    v21 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
    if ((v21 & 0x3F87F) == 0x50 && *(_WORD *)(v20 + 8) == 394)
      goto LABEL_44;
    if ((v21 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19568450CLL);
    }
  }
  v24 = v21 & 0x7F;
  v25 = (1 << ((v21 & 0x7F) - 63)) & 0x34001;
  if ((v24 - 63) > 0x11 || v25 == 0)
  {
    if (v24 == 73)
    {
      v28 = *(unsigned __int8 **)(*(_QWORD *)(v20 + 8) + 8);
      v29 = v28[12];
      if (v29 != 1)
      {
        if (v29 == 2)
          goto LABEL_53;
        if ((v29 - 5) > 3)
          goto LABEL_68;
      }
      v24 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v28 + 72))(v28);
    }
    if (v24 != 3)
      goto LABEL_68;
LABEL_53:
    v23 = 3;
    v27 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v20, 3u));
    if ((_BYTE)a2)
      v22 = v27;
    else
      v22 = 0.0;
    v36 = LODWORD(v22) >> 8;
    v3 = 1;
    goto LABEL_73;
  }
LABEL_68:
  if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v20))
  {
    v30 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v20, 6u));
    if ((_BYTE)a2)
      v22 = v30;
    else
      v22 = 0.0;
    v36 = LODWORD(v22) >> 8;
    v3 = 1;
    v23 = 4;
    goto LABEL_73;
  }
  LOBYTE(v22) = 0;
  v23 = 0;
  v31 = 0;
LABEL_74:
  if (*(_DWORD *)v20 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v20, a2);
  else
    *(_DWORD *)v20 -= 2;
LABEL_77:
  v32 = WTF::fastMalloc((WTF *)0x88);
  LOBYTE(v38) = 0;
  v41 = 0;
  if (v18)
  {
    v38 = 0;
    v39 = v11;
    v40 = 0;
    if ((v11 - 2) <= 2)
    {
      HIBYTE(v40) = v35;
      v38 = v37 | (HIDWORD(v35) << 8);
    }
    v41 = 1;
  }
  LOBYTE(v42) = 0;
  v45 = 0;
  if (v31)
  {
    v42 = 0;
    v43 = v23;
    v44 = 0;
    if ((v23 - 2) <= 2)
    {
      HIBYTE(v44) = v3;
      v42 = LOBYTE(v22) | (v36 << 8);
    }
    v45 = 1;
  }
  result = WebCore::ViewTimeline::ViewTimeline(v32, MEMORY[0x1E0CBF2F8], v7, (int *)&v38);
  *a3 = result;
  if (v45 && v43 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v42);
  }
  if (!v41 || v39 != 11)
  {
    if (!v6)
      return result;
    goto LABEL_90;
  }
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
  if (v6)
  {
LABEL_90:
    if (*(_DWORD *)v6 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, v34);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WebCore::ViewTimeline::ViewTimeline(uint64_t a1, uint64_t a2)
{
  char v3;
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  char v19;

  v3 = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = v3;
  v4 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v4 += 2;
  *(_QWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_1E3391DD8;
  v5 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v5);
    if (v5)
    {
      do
        v15 = __ldaxr(v5);
      while (__stlxr(v15 + 1, v5));
    }
  }
  *(_QWORD *)(a1 + 88) = v5;
  v6 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(6u, 1, (uint64_t)v18);
  *(_QWORD *)&v7 = 0x8000000080000000;
  *((_QWORD *)&v7 + 1) = 0x8000000080000000;
  v16 = v7;
  v17 = xmmword_1968BD2E0;
  if (v19)
    v8 = (__int128 *)v18;
  else
    v8 = &v16;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v9 = v8[1];
  *(_OWORD *)(v6 + 40) = *v8;
  *(_QWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 56) = v9;
  *(_QWORD *)v6 = &off_1E339F080;
  *(_QWORD *)(v6 + 72) = 0;
  *(_BYTE *)(v6 + 80) = 6;
  *(_QWORD *)(a1 + 96) = v6;
  v10 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(6u, 1, (uint64_t)v18);
  *(_QWORD *)&v11 = 0x8000000080000000;
  *((_QWORD *)&v11 + 1) = 0x8000000080000000;
  v16 = v11;
  v17 = xmmword_1968BD2E0;
  if (v19)
    v12 = (__int128 *)v18;
  else
    v12 = &v16;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v13 = v12[1];
  *(_OWORD *)(v10 + 40) = *v12;
  *(_OWORD *)(v10 + 56) = v13;
  *(_QWORD *)v10 = &off_1E339F080;
  *(_QWORD *)(v10 + 72) = 0;
  *(_BYTE *)(v10 + 80) = 6;
  *(_QWORD *)(a1 + 104) = v10;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  return a1;
}

uint64_t WebCore::ViewTimeline::ViewTimeline(uint64_t a1, _DWORD **a2, char a3, int *a4)
{
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[32];
  char v25;

  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = a3;
  v6 = *a2;
  if (*a2)
    *v6 += 2;
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_1E3391DD8;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(6u, 1, (uint64_t)v24);
  *(_QWORD *)&v8 = 0x8000000080000000;
  *((_QWORD *)&v8 + 1) = 0x8000000080000000;
  v22 = v8;
  v23 = xmmword_1968BD2E0;
  if (v25)
    v9 = (__int128 *)v24;
  else
    v9 = &v22;
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  v10 = v9[1];
  *(_OWORD *)(v7 + 40) = *v9;
  *(_QWORD *)(v7 + 32) = 0;
  *(_OWORD *)(v7 + 56) = v10;
  *(_QWORD *)v7 = &off_1E339F080;
  *(_QWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 80) = 6;
  *(_QWORD *)(a1 + 96) = v7;
  v11 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(6u, 1, (uint64_t)v24);
  *(_QWORD *)&v12 = 0x8000000080000000;
  *((_QWORD *)&v12 + 1) = 0x8000000080000000;
  v22 = v12;
  v23 = xmmword_1968BD2E0;
  if (v25)
    v13 = (__int128 *)v24;
  else
    v13 = &v22;
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  v14 = v13[1];
  *(_OWORD *)(v11 + 40) = *v13;
  *(_OWORD *)(v11 + 56) = v14;
  *(_QWORD *)v11 = &off_1E339F080;
  *(_QWORD *)(v11 + 72) = 0;
  *(_BYTE *)(v11 + 80) = 6;
  *(_QWORD *)(a1 + 104) = v11;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a4 + 8))
  {
    *(_DWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 117) = 0;
    v15 = *((unsigned __int8 *)a4 + 4);
    *(_BYTE *)(a1 + 116) = v15;
    *(_BYTE *)(a1 + 117) = *((_BYTE *)a4 + 5);
    if (v15 - 2 >= 9)
    {
      if (v15 > 0xD)
        goto LABEL_13;
      if (((1 << v15) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 112) = 0;
        goto LABEL_13;
      }
      if (v15 != 11)
        goto LABEL_13;
      v20 = *a4;
      *a4 = 0;
    }
    else
    {
      v16 = *((unsigned __int8 *)a4 + 6);
      *(_BYTE *)(a1 + 118) = v16;
      if (v16)
      {
        *(_DWORD *)(a1 + 112) = *a4;
LABEL_13:
        *((_BYTE *)a4 + 4) = 0;
        *(_BYTE *)(a1 + 120) = 1;
        goto LABEL_14;
      }
      v20 = *a4;
    }
    *(_DWORD *)(a1 + 112) = v20;
    goto LABEL_13;
  }
LABEL_14:
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  if (*((_BYTE *)a4 + 20))
  {
    *(_DWORD *)(a1 + 124) = 0;
    *(_WORD *)(a1 + 129) = 0;
    v17 = *((unsigned __int8 *)a4 + 16);
    *(_BYTE *)(a1 + 128) = v17;
    *(_BYTE *)(a1 + 129) = *((_BYTE *)a4 + 17);
    if (v17 - 2 >= 9)
    {
      if (v17 > 0xD)
        goto LABEL_18;
      if (((1 << v17) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 124) = 0;
        goto LABEL_18;
      }
      if (v17 != 11)
        goto LABEL_18;
      v21 = a4[3];
      a4[3] = 0;
    }
    else
    {
      v18 = *((unsigned __int8 *)a4 + 18);
      *(_BYTE *)(a1 + 130) = v18;
      if (v18)
      {
        *(_DWORD *)(a1 + 124) = a4[3];
LABEL_18:
        *((_BYTE *)a4 + 16) = 0;
        *(_BYTE *)(a1 + 132) = 1;
        return a1;
      }
      v21 = a4[3];
    }
    *(_DWORD *)(a1 + 124) = v21;
    goto LABEL_18;
  }
  return a1;
}

uint64_t WebCore::ViewTimeline::toCSSValue@<X0>(WebCore::ViewTimeline *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t result;
  int v11;
  int *v12;

  v4 = *((char *)this + 64);
  if (v4 > 3)
    v5 = 0;
  else
    v5 = qword_1968DF9B8[v4];
  v6 = &WebCore::staticCSSValuePool[4 * v5];
  v6[3088] += 2;
  if (*((_BYTE *)this + 120))
  {
    WebCore::CSSPrimitiveValue::create((WebCore::ViewTimeline *)((char *)this + 112), &v12);
    v7 = v12;
  }
  else
  {
    v7 = 0;
  }
  v8 = v6 + 3088;
  if (*((_BYTE *)this + 132))
  {
    WebCore::CSSPrimitiveValue::create((WebCore::ViewTimeline *)((char *)this + 124), &v12);
    v9 = v12;
  }
  else
  {
    v9 = 0;
  }
  result = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)result = 2;
  v11 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_WORD *)(result + 4) = -14336;
  *(_BYTE *)(result + 6) = (v11 | 0x10000u) >> 16;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = v9;
  *a2 = result;
  return result;
}

uint64_t *WebCore::WebAnimation::instances(WebCore::WebAnimation *this)
{
  {
    WebCore::WebAnimation::instances(void)::instances = 0;
  }
  return &WebCore::WebAnimation::instances(void)::instances;
}

double WebCore::WebAnimation::create@<D0>(WebCore::WebAnimation *this@<X0>, WebCore::Document *a2@<X1>, WebCore::WebAnimation **a3@<X8>)
{
  uint64_t v7;
  WebCore::WebAnimation *v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  double result;
  WebCore::Document *v12;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::InspectorAnimationAgent *v19;
  WebCore::Document *v20;

  v7 = bmalloc::api::isoAllocate();
  v8 = WebCore::WebAnimation::WebAnimation((WebCore::WebAnimation *)v7, this);
  *a3 = v8;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8 + 4);
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(v7 + 72), (WTF::StringImpl *)v7);
  if (a2)
    ++*((_DWORD *)a2 + 2);
  v20 = a2;
  WebCore::WebAnimation::setEffect(v7, (WebCore::ScriptExecutionContext *)&v20);
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v20 + 8))();
    else
      --*((_DWORD *)v20 + 2);
  }
  v9 = *((_QWORD *)this + 366);
  if (!v9)
  {
    v14 = WTF::fastMalloc((WTF *)0xA0);
    v9 = WebCore::DocumentTimeline::DocumentTimeline(v14, this, 0.0);
    v15 = (_DWORD *)*((_QWORD *)this + 366);
    *((_QWORD *)this + 366) = v9;
    if (v15)
    {
      if (v15[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        v9 = *((_QWORD *)this + 366);
      }
      else
      {
        --v15[2];
      }
    }
  }
  ++*(_DWORD *)(v9 + 8);
  v20 = (WebCore::Document *)v9;
  (*(void (**)(uint64_t, WebCore::Document **))(*(_QWORD *)v7 + 136))(v7, &v20);
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)(WebCore::Document *))(*(_QWORD *)v12 + 8))(v12);
    else
      --*((_DWORD *)v12 + 2);
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v16 = *(_QWORD *)(v7 + 40);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v17 - 96), v10);
        if (v18)
        {
          v19 = *(WebCore::InspectorAnimationAgent **)(v18 + 80);
          if (v19)
            return WebCore::InspectorAnimationAgent::didCreateWebAnimation(v19, (WebCore::WebAnimation *)v7);
        }
      }
    }
  }
  return result;
}

double WebCore::WebAnimation::create@<D0>(WebCore::WebAnimation *this@<X0>, WebCore::Document *a2@<X1>, WebCore::AnimationEffect *a3@<X2>, WebCore::WebAnimation **a4@<X8>)
{
  uint64_t v9;
  WebCore::WebAnimation *v10;
  WebCore::ScriptExecutionContext *v11;
  double result;
  WebCore::Document *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::InspectorAnimationAgent *v18;
  WebCore::Document *v19;

  v9 = bmalloc::api::isoAllocate();
  v10 = WebCore::WebAnimation::WebAnimation((WebCore::WebAnimation *)v9, this);
  *a4 = v10;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v10 + 4);
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(v9 + 72), (WTF::StringImpl *)v9);
  if (a2)
    ++*((_DWORD *)a2 + 2);
  v19 = a2;
  WebCore::WebAnimation::setEffect(v9, (WebCore::ScriptExecutionContext *)&v19);
  if (!v19)
  {
LABEL_6:
    if (!a3)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (*((_DWORD *)v19 + 2) != 1)
  {
    --*((_DWORD *)v19 + 2);
    goto LABEL_6;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8))();
  if (!a3)
    goto LABEL_10;
LABEL_7:
  ++*((_DWORD *)a3 + 2);
  v19 = a3;
  (*(void (**)(uint64_t, WebCore::Document **))(*(_QWORD *)v9 + 136))(v9, &v19);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(WebCore::Document *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 2);
  }
LABEL_10:
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v15 = *(_QWORD *)(v9 + 40);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v16 - 96), v11);
        if (v17)
        {
          v18 = *(WebCore::InspectorAnimationAgent **)(v17 + 80);
          if (v18)
            return WebCore::InspectorAnimationAgent::didCreateWebAnimation(v18, (WebCore::WebAnimation *)v9);
        }
      }
    }
  }
  return result;
}

double WTF::makeUniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>,WebCore::WebAnimation&,WebCore::WebAnimation& (WebCore::WebAnimation::*)(void)>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  v6 = WTF::fastMalloc((WTF *)0x40);
  v8 = *a2;
  v7 = a2[1];
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E3392078;
  v9[1] = v8;
  v9[2] = v7;
  v9[3] = a1;
  *(_QWORD *)v6 = v9;
  *(_BYTE *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v6 + 56;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v6 + 48) = 1;
  *a3 = v6;
  return result;
}

void WebCore::WebAnimation::~WebAnimation(WebCore::WebAnimation *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ActiveDOMObject *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::WebAnimation *v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  _DWORD *v21;
  _DWORD *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl ***v29;

  *(_QWORD *)this = off_1E3391E30;
  *((_QWORD *)this + 4) = &unk_1E3391FA0;
  v3 = (WebCore::WebAnimation *)((char *)this + 32);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v25 = *((_QWORD *)this + 5);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        v27 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v26 - 96), a2);
        if (v27)
        {
          v28 = v27;
          v29 = *(WTF::StringImpl ****)(v27 + 80);
          if (v29 || (v29 = *(WTF::StringImpl ****)(v28 + 224)) != 0)
            WebCore::InspectorAnimationAgent::willDestroyWebAnimation(v29, this);
        }
      }
    }
  }
  {
    if (WebCore::WebAnimation::instances(void)::instances)
    {
      v5 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 8);
      v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(WebCore::WebAnimation **)(WebCore::WebAnimation::instances(void)::instances + 8 * v9);
      if (v10 != this)
      {
        v24 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v24) & v5;
          v10 = *(WebCore::WebAnimation **)(WebCore::WebAnimation::instances(void)::instances + 8 * v9);
          ++v24;
          if (v10 == this)
            goto LABEL_5;
        }
        v9 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
      }
LABEL_5:
      if (v9 != *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 4))
      {
        *(_QWORD *)(WebCore::WebAnimation::instances(void)::instances + 8 * v9) = -1;
        ++*(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 16);
        v11 = WebCore::WebAnimation::instances(void)::instances
            ? *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) - 1
            : -1;
        *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) = v11;
        if (WebCore::WebAnimation::instances(void)::instances)
        {
          v12 = *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 4);
          if (6 * *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12) < v12 && v12 >= 9)
            WTF::HashTable<WebCore::WebAnimation *,WebCore::WebAnimation *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>,WTF::HashTraits<WebCore::WebAnimation *>>::rehash(v12 >> 1);
        }
      }
    }
  }
  else
  {
    WebCore::WebAnimation::instances(void)::instances = 0;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    v16 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v15, a2);
    WTF::fastFree((WTF *)v16, v17);
  }
  v18 = (uint64_t *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v18)
  {
    v19 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v18, a2);
    WTF::fastFree((WTF *)v19, v20);
  }
  v21 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, a2);
  WebCore::EventTarget::~EventTarget(this, v23);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebAnimation::~WebAnimation(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t **WTF::UniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>>::~UniqueRef(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::WebAnimation::~WebAnimation(WebCore::WebAnimation *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::WebAnimation::~WebAnimation((WebCore::WebAnimation *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebAnimation::~WebAnimation((WebCore::WebAnimation *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::WebAnimation::contextDestroyed(WebCore::WebAnimation *this, WebCore::ScriptExecutionContext *a2)
{
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl ***v11;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v7 = *((_QWORD *)this + 5);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v8 - 96), a2);
        if (v9)
        {
          v10 = v9;
          v11 = *(WTF::StringImpl ****)(v9 + 80);
          if (v11 || (v11 = *(WTF::StringImpl ****)(v10 + 224)) != 0)
            WebCore::InspectorAnimationAgent::willDestroyWebAnimation(v11, this);
        }
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::WebAnimation::contextDestroyed(WebCore::WebAnimation *this, WebCore::ScriptExecutionContext *a2)
{
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl ***v11;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v8 - 96), a2);
        if (v9)
        {
          v10 = v9;
          v11 = *(WTF::StringImpl ****)(v9 + 80);
          if (v11 || (v11 = *(WTF::StringImpl ****)(v10 + 224)) != 0)
            WebCore::InspectorAnimationAgent::willDestroyWebAnimation(v11, (WebCore::WebAnimation *)((char *)this - 32));
        }
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::WebAnimation::timingDidChange(uint64_t a1, int a2, int a3, char a4, __n128 a5)
{
  WebCore::KeyframeEffect *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 159) = 0;
  WebCore::WebAnimation::updateFinishedState(a1, a2, a3, a5);
  v7 = *(WebCore::KeyframeEffect **)(a1 + 56);
  if (v7 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 24))(*(_QWORD *)(a1 + 56)))
  {
    WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)a1, v8);
    WebCore::KeyframeEffect::updateEffectStackMembership(v7, v9);
  }
  if ((a4 & 1) == 0)
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a1);
  }
}

uint64_t WebCore::WebAnimation::invalidateEffect(uint64_t this)
{
  WebCore::KeyframeEffect *v1;

  if (!*(_DWORD *)(this + 152))
  {
    v1 = *(WebCore::KeyframeEffect **)(this + 56);
    if (v1)
    {
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 24))(*(_QWORD *)(this + 56));
      if ((_DWORD)this)
        return WebCore::KeyframeEffect::invalidate(v1);
    }
  }
  return this;
}

uint64_t WebCore::WebAnimation::setSuspended(uint64_t this, unsigned int a2)
{
  uint64_t v3;

  if (*(unsigned __int8 *)(this + 156) != a2)
  {
    *(_BYTE *)(this + 156) = a2;
    if (*(_QWORD *)(this + 56))
    {
      v3 = this;
      this = WebCore::WebAnimation::playState((WebCore::WebAnimation *)this);
      if ((_DWORD)this == 1)
        return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 56) + 56))(*(_QWORD *)(v3 + 56), a2);
    }
  }
  return this;
}

WebCore::WebAnimation *WebCore::WebAnimation::effectTargetDidChange(WebCore::WebAnimation *result, WebCore::Styleable *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v3 = (uint64_t)result;
  if (*((_QWORD *)result + 8))
  {
    if (*((_BYTE *)a2 + 32))
      WebCore::Styleable::animationWasRemoved(a2, result);
    if (*(_BYTE *)(a3 + 32))
    {
      v5 = WebCore::Element::ensureAnimationRareData(*(WebCore::Node **)a3, a3 + 8);
      ++*(_DWORD *)(v3 + 24);
      v11 = (_DWORD *)v3;
      WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t *)(v5 + 16), (uint64_t *)&v11, (uint64_t)&v10);
      v6 = v11;
      v11 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
    }
    result = (WebCore::WebAnimation *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 64) + 40))(*(_QWORD *)(v3 + 64), v3);
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v8 = *(_QWORD *)(v3 + 40);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        result = (WebCore::WebAnimation *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v9 - 96), a2);
        if (result)
        {
          result = (WebCore::WebAnimation *)*((_QWORD *)result + 10);
          if (result)
            return (WebCore::WebAnimation *)WebCore::InspectorAnimationAgent::didChangeWebAnimationEffectTarget((uint64_t)result, (WebCore::WebAnimation *)v3);
        }
      }
    }
  }
  return result;
}

double WebCore::WebAnimation::validateCSSNumberishValue@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  double result;
  double *v5;
  _DWORD *v6;
  WebCore::WebAnimation *v7;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_6;
  }
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 1)
  {
    v5 = *(double **)a1;
    if (!*(_QWORD *)a1)
    {
      *(_BYTE *)(a2 + 8) = 33;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 1;
      return result;
    }
    ++*((_DWORD *)v5 + 2);
    if ((*(unsigned int (**)(double *))(*(_QWORD *)v5 + 24))(v5) == 10)
    {
      if (*((_BYTE *)v5 + 80) == 1)
      {
        result = v5[9] / 1000.0;
        *(double *)(a2 + 8) = result;
        *(_BYTE *)(a2 + 16) = 1;
        *(_DWORD *)(a2 + 24) = 0;
        goto LABEL_15;
      }
      WebCore::CSSUnitValue::convertTo((uint64_t)v5, 0xFu, &v8);
      v6 = (_DWORD *)v8;
      if (v8)
      {
        result = *(double *)(v8 + 72) / 1000.0;
        *(double *)(a2 + 8) = result;
        *(_BYTE *)(a2 + 16) = 1;
        *(_DWORD *)(a2 + 24) = 0;
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[2];
        goto LABEL_15;
      }
    }
    *(_BYTE *)(a2 + 8) = 33;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 1;
LABEL_15:
    if (*((_DWORD *)v5 + 2) == 1)
      (*(void (**)(double *))(*(_QWORD *)v5 + 16))(v5);
    else
      --*((_DWORD *)v5 + 2);
    return result;
  }
  if (!v3)
  {
    result = *(double *)a1 / 1000.0;
    *(double *)(a2 + 8) = result;
    *(_BYTE *)(a2 + 16) = 1;
LABEL_6:
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
  v7 = (WebCore::WebAnimation *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebAnimation::bindingsStartTime(v7);
}

double WebCore::WebAnimation::bindingsStartTime(WebCore::WebAnimation *this)
{
  double result;

  result = round(*((double *)this + 12) * 1000.0 * 1000.0) / 1000.0;
  if (result == 0.0)
    return 0.0;
  return result;
}

uint64_t WebCore::WebAnimation::setBindingsStartTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __n128 v12;
  char v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5.n128_f64[0] = WebCore::WebAnimation::validateCSSNumberishValue(a2, (uint64_t)v14);
  v6 = v17;
  if (!v17)
  {
    WebCore::WebAnimation::setStartTime(a1, v15, v16, v5);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return ((uint64_t (*)(char *, uint64_t *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v6])(&v13, &v15, v5);
  }
  if (v17 == 1)
  {
    v7 = v16;
    v16 = 0;
    *(_BYTE *)a3 = v15;
    a3[1] = v7;
    *((_BYTE *)a3 + 16) = 1;
    return ((uint64_t (*)(char *, uint64_t *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v6])(&v13, &v15, v5);
  }
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebAnimation::setStartTime(v9, v10, v11, v12);
}

uint64_t WebCore::WebAnimation::setStartTime(uint64_t a1, uint64_t a2, unsigned __int8 a3, __n128 a4)
{
  int v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  unsigned __int8 v10;
  unint64_t v11;
  WebCore::KeyframeEffect *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  v6 = a3;
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
  {
    if (!a3)
      goto LABEL_7;
    goto LABEL_6;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  if (v8)
    v9 = 1;
  else
    v9 = v6 == 0;
  if (!v9)
LABEL_6:
    *(_QWORD *)(a1 + 104) = 0x7FF8000000000000;
LABEL_7:
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 104) & 0xFFFFFFFFFFFFFF00;
  a4.n128_u64[0] = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 120) = a4.n128_u64[0];
  *(_QWORD *)(a1 + 112) = 0x7FF8000000000000;
  if (v6)
  {
    *(_QWORD *)(a1 + 96) = a2;
    a4.n128_u64[0] = *(_QWORD *)(a1 + 120);
    if (a4.n128_f64[0] == 0.0)
      goto LABEL_12;
    v19 = 0x7FF8000000000000;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    v19 = v11 | v10;
  }
  *(_QWORD *)(a1 + 104) = v19;
LABEL_12:
  if (*(_BYTE *)(a1 + 162) || *(_BYTE *)(a1 + 161))
  {
    *(_WORD *)(a1 + 161) = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)a1);
  }
  *(_BYTE *)(a1 + 159) = 0;
  WebCore::WebAnimation::updateFinishedState(a1, 1, 0, a4);
  v12 = *(WebCore::KeyframeEffect **)(a1 + 56);
  if (v12 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v12 + 24))(*(_QWORD *)(a1 + 56)))
  {
    WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)a1, v13);
    WebCore::KeyframeEffect::updateEffectStackMembership(v12, v14);
  }
  result = *(_QWORD *)(a1 + 64);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1);
  if (!*(_DWORD *)(a1 + 152))
  {
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      if ((_DWORD)result)
      {
        result = *(_QWORD *)(v16 + 264);
        if (result)
        {
          if (*(_BYTE *)(v16 + 288) && (v17 = *(WTF::StringImpl **)(v16 + 280)) != 0)
          {
            *(_DWORD *)v17 += 2;
            result = WebCore::Node::invalidateStyle(result, 1u, 0);
            if (*(_DWORD *)v17 == 2)
              return WTF::StringImpl::destroy(v17, v18);
            else
              *(_DWORD *)v17 -= 2;
          }
          else
          {
            return WebCore::Node::invalidateStyle(result, 1u, 0);
          }
        }
      }
    }
  }
  return result;
}

double WebCore::WebAnimation::bindingsCurrentTime(WebCore::WebAnimation *this)
{
  double result;

  result = round(*((double *)this + 13) * 1000.0 * 1000.0) / 1000.0;
  if (result == 0.0)
    return 0.0;
  return result;
}

uint64_t WebCore::WebAnimation::setBindingsCurrentTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5.n128_f64[0] = WebCore::WebAnimation::validateCSSNumberishValue(a2, (uint64_t)v15);
  v6 = v18;
  if (!v18)
  {
    WebCore::WebAnimation::setCurrentTime(a1, v16, v17, a3, v5);
    return ((uint64_t (*)(char *, uint64_t *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v6])(&v14, &v16, v5);
  }
  if (v18 == 1)
  {
    v7 = v17;
    v17 = 0;
    *(_BYTE *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 16) = 1;
    return ((uint64_t (*)(char *, uint64_t *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v6])(&v14, &v16, v5);
  }
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebAnimation::setCurrentTime(v9, v10, v11, v12, v13);
}

uint64_t WebCore::WebAnimation::setCurrentTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  uint64_t result;
  __n128 v10;
  uint64_t v11;
  WebCore::KeyframeEffect *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _BYTE v19[8];
  uint64_t v20;
  char v21;

  v6 = a2;
  result = WebCore::WebAnimation::silentlySetCurrentTime((uint64_t)v19, (_QWORD *)a1, a2, a3, a5);
  if (v21)
  {
    v11 = v20;
    *(_BYTE *)a4 = v19[0];
    *(_QWORD *)(a4 + 8) = v11;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 162))
    {
      if (!a3)
        v6 = 0x7FF8000000000000;
      *(_QWORD *)(a1 + 104) = v6;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0x7FF8000000000000;
      *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
      *(_BYTE *)(a1 + 162) = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)a1);
    }
    *(_BYTE *)(a1 + 159) = 0;
    WebCore::WebAnimation::updateFinishedState(a1, 1, 0, v10);
    v12 = *(WebCore::KeyframeEffect **)(a1 + 56);
    if (v12 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v12 + 24))(*(_QWORD *)(a1 + 56)))
    {
      WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)a1, v13);
      WebCore::KeyframeEffect::updateEffectStackMembership(v12, v14);
    }
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, a1);
    result = *(_QWORD *)(a1 + 56);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if (!*(_DWORD *)(a1 + 152))
    {
      v16 = *(_QWORD *)(a1 + 56);
      if (v16)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        if ((_DWORD)result)
        {
          result = *(_QWORD *)(v16 + 264);
          if (result)
          {
            if (*(_BYTE *)(v16 + 288) && (v17 = *(WTF::StringImpl **)(v16 + 280)) != 0)
            {
              *(_DWORD *)v17 += 2;
              result = WebCore::Node::invalidateStyle(result, 1u, 0);
              if (*(_DWORD *)v17 == 2)
                result = WTF::StringImpl::destroy(v17, v18);
              else
                *(_DWORD *)v17 -= 2;
            }
            else
            {
              result = WebCore::Node::invalidateStyle(result, 1u, 0);
            }
          }
        }
      }
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::WebAnimation::silentlySetCurrentTime(uint64_t result, _QWORD *a2, uint64_t a3, char a4, __n128 a5)
{
  _QWORD *v6;
  char v7;

  v6 = (_QWORD *)result;
  a5.n128_u64[0] = a2[13];
  if (a4)
  {
    a2[13] = a3;
    result = a2[8];
    if (!result || (result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 56))(result, a5), !v7))
      a2[12] = 0x7FF8000000000000;
    a2[11] = 0x7FF8000000000000;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
  }
  else
  {
    *(_BYTE *)result = 33;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t WebCore::WebAnimation::setPlaybackRate(WebCore::WebAnimation *this, __n128 a2)
{
  unint64_t v2;
  WTF::StringImpl *v4;
  uint64_t result;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v2 = a2.n128_u64[0];
  *((_QWORD *)this + 14) = 0x7FF8000000000000;
  a2.n128_u64[0] = *((_QWORD *)this + 13);
  *((_QWORD *)this + 15) = v2;
  WebCore::WebAnimation::setCurrentTime((uint64_t)this, a2.n128_i64[0], 1, (uint64_t)v6, a2);
  if (v8 && v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t WebCore::WebAnimation::updatePlaybackRate(WebCore::WebAnimation *this, double a2)
{
  uint64_t result;
  __n128 v5;
  double v6;
  char v7;
  char v8;
  char v9;
  double v10;
  __n128 v11;
  char v12;
  WTF::StringImpl *v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;
  char v16;

  result = WebCore::WebAnimation::playState(this);
  *((double *)this + 14) = a2;
  if (!*(_WORD *)((char *)this + 161))
  {
    if ((result & 1) != 0)
    {
      if ((_DWORD)result == 3)
      {
        v6 = COERCE_DOUBLE(WebCore::WebAnimation::currentTime((uint64_t)this));
        v8 = v7;
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8));
        if (!v9)
          return result;
        v10 = COERCE_DOUBLE((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8)));
        if (v12 && (v11.n128_u64[0] = *((_QWORD *)this + 14), v8))
        {
          *((double *)this + 12) = v10 - v6 / v11.n128_f64[0];
          *((_QWORD *)this + 15) = v11.n128_u64[0];
          *((_QWORD *)this + 14) = 0x7FF8000000000000;
        }
        else
        {
          *((_QWORD *)this + 12) = std::__throw_bad_optional_access[abi:sn180100]();
        }
        WebCore::WebAnimation::timingDidChange((uint64_t)this, 0, 0, 0, v11);
        WebCore::WebAnimation::invalidateEffect((uint64_t)this);
      }
      else
      {
        v5.n128_u64[0] = *((_QWORD *)this + 13);
        WebCore::WebAnimation::play((uint64_t)this, 0, (uint64_t)v14, v5);
        if (v16 && v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
    }
    else
    {
      *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = 0x7FF8000000000000;
    }
    result = *((_QWORD *)this + 7);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

void WebCore::WebAnimation::setBindingsFrameRate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  int v44;
  uint64_t v45;
  char v46;

  v3 = *a2;
  *(_QWORD *)(a1 + 128) = *a2;
  if (HIDWORD(v3) == 1)
  {
    switch((char)v3)
    {
      case 0:
        if (*(_BYTE *)(a1 + 140))
        {
          v14 = *(_QWORD *)(a1 + 64);
          if (!v14 || ((*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14), *(_BYTE *)(a1 + 140)))
          {
            *(_DWORD *)(a1 + 136) = 0;
            *(_BYTE *)(a1 + 140) = 0;
          }
        }
        return;
      case 1:
        if (!*(_BYTE *)(a1 + 140) || *(_DWORD *)(a1 + 136) != 30)
        {
          v16 = *(_QWORD **)(a1 + 64);
          if (v16)
          {
            if ((*(unsigned int (**)(_QWORD))(*v16 + 16))(*(_QWORD *)(a1 + 64)))
            {
              v17 = v16[17];
              if (v17)
              {
                v18 = *(_QWORD *)(v17 + 8);
                if (v18)
                {
                  v19 = *(_QWORD *)(v18 + 528);
                  if (v19)
                  {
                    v20 = *(_QWORD *)(v19 + 8);
                    if (v20)
                    {
                      v21 = *(_QWORD *)(v20 + 24);
                      if (v21)
                      {
                        v22 = *(_QWORD *)(v21 + 8);
                        if (v22)
                        {
                          v23 = *(_QWORD *)(v22 + 316);
                          if ((v23 & 0xFF00000000) != 0)
                          {
                            v24 = v23 >= 0x1E;
                            v25 = 30;
                            goto LABEL_53;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_60;
        }
        return;
      case 2:
        if (*(_BYTE *)(a1 + 140) && *(_DWORD *)(a1 + 136) == 60)
          return;
        v26 = *(_QWORD **)(a1 + 64);
        if (!v26)
          goto LABEL_60;
        if (!(*(unsigned int (**)(_QWORD))(*v26 + 16))(*(_QWORD *)(a1 + 64)))
          goto LABEL_60;
        v27 = v26[17];
        if (!v27)
          goto LABEL_60;
        v28 = *(_QWORD *)(v27 + 8);
        if (!v28)
          goto LABEL_60;
        v29 = *(_QWORD *)(v28 + 528);
        if (!v29)
          goto LABEL_60;
        v30 = *(_QWORD *)(v29 + 8);
        if (!v30)
          goto LABEL_60;
        v31 = *(_QWORD *)(v30 + 24);
        if (!v31)
          goto LABEL_60;
        v32 = *(_QWORD *)(v31 + 8);
        if (!v32)
          goto LABEL_60;
        v23 = *(_QWORD *)(v32 + 316);
        if ((v23 & 0xFF00000000) == 0)
          goto LABEL_60;
        v24 = v23 >= 0x3C;
        v25 = 60;
LABEL_53:
        if (v24)
          LODWORD(v23) = v25;
        if ((_DWORD)v23)
        {
          if (*(_BYTE *)(a1 + 140) && *(_DWORD *)(a1 + 136) == (_DWORD)v23)
            return;
          v33 = 1;
        }
        else
        {
LABEL_60:
          if (!*(_BYTE *)(a1 + 140))
            return;
          LODWORD(v23) = 0;
          v33 = 0;
        }
        *(_DWORD *)(a1 + 136) = v23;
        *(_BYTE *)(a1 + 140) = v33;
        return;
      case 3:
        if (*(_BYTE *)(a1 + 140) && *(_DWORD *)(a1 + 136) == -1)
          return;
        v34 = *(_QWORD **)(a1 + 64);
        if (!v34)
          goto LABEL_78;
        if (!(*(unsigned int (**)(_QWORD))(*v34 + 16))(*(_QWORD *)(a1 + 64)))
          goto LABEL_78;
        v35 = v34[17];
        if (!v35)
          goto LABEL_78;
        v36 = *(_QWORD *)(v35 + 8);
        if (!v36)
          goto LABEL_78;
        v37 = *(_QWORD *)(v36 + 528);
        if (!v37)
          goto LABEL_78;
        v38 = *(_QWORD *)(v37 + 8);
        if (!v38)
          goto LABEL_78;
        v39 = *(_QWORD *)(v38 + 24);
        if (!v39)
          goto LABEL_78;
        v40 = *(_QWORD *)(v39 + 8);
        if (!v40)
          goto LABEL_78;
        v41 = *(_QWORD *)(v40 + 316);
        if ((v41 & 0xFF00000000) != 0 && (_DWORD)v41 != 0)
        {
          v44 = *(_QWORD *)(v40 + 316);
          v43 = v41 >> 8;
          if (*(_BYTE *)(a1 + 140) && *(_DWORD *)(a1 + 136) == (_DWORD)v41)
            return;
          v13 = 1;
        }
        else
        {
LABEL_78:
          if (!*(_BYTE *)(a1 + 140))
            return;
          v43 = 0;
          v44 = 0;
          v13 = 0;
        }
        v15 = v44 | (v43 << 8);
        goto LABEL_28;
      default:
        return;
    }
  }
  if (HIDWORD(v3))
  {
    v45 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::WebAnimation::cancel(v45, v46);
    return;
  }
  if (!*(_BYTE *)(a1 + 140) || *(_DWORD *)(a1 + 136) != (_DWORD)v3)
  {
    v4 = *(_QWORD **)(a1 + 64);
    if (!v4)
      goto LABEL_25;
    if (!(*(unsigned int (**)(_QWORD))(*v4 + 16))(*(_QWORD *)(a1 + 64)))
      goto LABEL_25;
    v5 = v4[17];
    if (!v5)
      goto LABEL_25;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      goto LABEL_25;
    v7 = *(_QWORD *)(v6 + 528);
    if (!v7)
      goto LABEL_25;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_25;
    v9 = *(_QWORD *)(v8 + 24);
    if (!v9)
      goto LABEL_25;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_25;
    v11 = *(_QWORD *)(v10 + 316);
    if ((v11 & 0xFF00000000) == 0)
      goto LABEL_25;
    if (v11 >= v3)
      LODWORD(v11) = v3;
    if ((_DWORD)v11)
    {
      v12 = v11 >> 8;
      if (*(_BYTE *)(a1 + 140) && *(_DWORD *)(a1 + 136) == (_DWORD)v11)
        return;
      v13 = 1;
    }
    else
    {
LABEL_25:
      if (!*(_BYTE *)(a1 + 140))
        return;
      v12 = 0;
      LOBYTE(v11) = 0;
      v13 = 0;
    }
    v15 = v11 | (v12 << 8);
LABEL_28:
    *(_DWORD *)(a1 + 136) = v15;
    *(_BYTE *)(a1 + 140) = v13;
  }
}

void WebCore::WebAnimation::cancel(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WebCore::KeyframeEffect *v20;
  __n128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore *v45;
  char v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;

  if (!WebCore::WebAnimation::playState((WebCore::WebAnimation *)a1))
    goto LABEL_17;
  if (*(_BYTE *)(a1 + 162))
  {
    if (*(_BYTE *)(a1 + 161))
      *(_BYTE *)(a1 + 161) = 0;
    *(_BYTE *)(a1 + 162) = 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 161))
      goto LABEL_4;
    *(_BYTE *)(a1 + 161) = 0;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0x7FF8000000000000;
  v29 = *(_QWORD *)(a1 + 40);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v30 - 96) + 104))(v30 - 96);
      v32 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = &off_1E33920C8;
      v33[1] = v32;
      v49 = v33;
      WebCore::EventLoopTaskGroup::queueMicrotask(v31, (uint64_t *)&v49);
      if (v49)
        (*(void (**)(_QWORD *))(*v49 + 8))(v49);
    }
  }
  v34 = WTF::fastMalloc((WTF *)0x40);
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v35 = off_1E3392078;
  v35[1] = WebCore::WebAnimation::readyPromiseResolve;
  v35[2] = 0;
  v35[3] = a1;
  *(_QWORD *)v34 = v35;
  *(_BYTE *)(v34 + 8) = 0;
  *(_BYTE *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 40) = v34 + 56;
  *(_QWORD *)(v34 + 48) = 1;
  v37 = *(uint64_t **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v34;
  if (v37)
  {
    v38 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v37, v36);
    WTF::fastFree((WTF *)v38, v39);
    v34 = *(_QWORD *)(a1 + 72);
  }
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve((WTF::StringImpl *)v34, (WTF::StringImpl *)a1);
LABEL_4:
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 32))
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 104))(v5 - 96);
        v7 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = 0;
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v8 = &off_1E33920A0;
        v8[1] = v7;
        v49 = v8;
        WebCore::EventLoopTaskGroup::queueMicrotask(v6, (uint64_t *)&v49);
        if (v49)
          (*(void (**)(_QWORD *))(*v49 + 8))(v49);
      }
    }
  }
  v9 = WTF::fastMalloc((WTF *)0x40);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E3392078;
  v10[1] = WebCore::WebAnimation::finishedPromiseResolve;
  v10[2] = 0;
  v10[3] = a1;
  *(_QWORD *)v9 = v10;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v9 + 56;
  *(_QWORD *)(v9 + 48) = 1;
  v12 = *(uint64_t **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  if (v12)
  {
    v13 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v12, v11);
    v12 = (uint64_t *)WTF::fastFree((WTF *)v13, v14);
  }
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow((WebCore *)v12);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  v18 = *(_QWORD *)(a1 + 16);
  if ((v18 & 0x1000000000000) != 0)
  {
    v40 = v18 & 0xFFFFFFFFFFFFLL;
    v41 = *(unsigned int *)(v40 + 28);
    if ((_DWORD)v41)
    {
      v42 = *(_QWORD **)(v40 + 16);
      v43 = *(_QWORD *)(v17 + 344);
      v44 = 32 * v41;
      while (*v42 != v43)
      {
        v42 += 4;
        v44 -= 32;
        if (!v44)
          goto LABEL_17;
      }
      v45 = (WebCore *)WebCore::WebAnimation::cancel(WebCore::WebAnimation::Silently)::$_1::operator()(*(double **)(a1 + 64));
      v47 = v46;
      v48 = WebCore::eventNames(v45);
      WebCore::WebAnimation::enqueueAnimationPlaybackEvent(a1, (_QWORD *)(v48 + 344), 0, 0, (uint64_t)v45, v47);
    }
  }
LABEL_17:
  v19 = (__n128)vdupq_n_s64(0x7FF8000000000000uLL);
  *(__n128 *)(a1 + 96) = v19;
  *(_BYTE *)(a1 + 159) = 0;
  WebCore::WebAnimation::updateFinishedState(a1, 0, 0, v19);
  v20 = *(WebCore::KeyframeEffect **)(a1 + 56);
  if (v20 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v20 + 24))(*(_QWORD *)(a1 + 56)))
  {
    WebCore::WebAnimation::updateRelevance((WebCore::WebAnimation *)a1, v21);
    WebCore::KeyframeEffect::updateEffectStackMembership(v20, v22);
  }
  if ((a2 & 1) == 0)
  {
    v23 = *(_QWORD *)(a1 + 64);
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 40))(v23, a1);
  }
  if (!*(_DWORD *)(a1 + 152))
  {
    v25 = *(_QWORD *)(a1 + 56);
    if (!v25)
      return;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25 + 24))(*(_QWORD *)(a1 + 56)))
    {
      v26 = *(_QWORD *)(v25 + 264);
      if (v26)
      {
        if (*(_BYTE *)(v25 + 288) && (v27 = *(WTF::StringImpl **)(v25 + 280)) != 0)
        {
          *(_DWORD *)v27 += 2;
          WebCore::Node::invalidateStyle(v26, 1u, 0);
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v28);
          else
            *(_DWORD *)v27 -= 2;
        }
        else
        {
          WebCore::Node::invalidateStyle(v26, 1u, 0);
        }
      }
    }
  }
  v24 = *(_QWORD *)(a1 + 56);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
}

uint64_t **WTF::UniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>>::operator=(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v4, a2);
    WTF::fastFree((WTF *)v5, v6);
  }
  return a1;
}

unint64_t WebCore::WebAnimation::cancel(WebCore::WebAnimation::Silently)::$_1::operator()(double *a1)
{
  double v2;
  char v3;
  double v4;
  unint64_t v5;
  uint64_t v6;

  if (a1)
  {
    if ((*(unsigned int (**)(double *))(*(_QWORD *)a1 + 16))(a1)
      && (v2 = COERCE_DOUBLE(WebCore::DocumentTimeline::currentTime((WebCore::DocumentTimeline *)a1)), v3))
    {
      v4 = a1[18] + v2;
      v5 = *(_QWORD *)&v4 & 0xFFFFFFFFFFFFFF00;
      v6 = LOBYTE(v4);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return v6 | v5;
}

_DWORD *WebCore::WebAnimation::enqueueAnimationPlaybackEvent(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *result;
  _DWORD *v22;

  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
    v15 = v14;
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v16 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
  *(_QWORD *)(v16 + 8) = 0;
  v18 = *(_DWORD *)(v16 + 20) & 0xFFC00000 | (*a2 != 0) | 0x178202;
  *(_DWORD *)(v16 + 16) = 1;
  *(_DWORD *)(v16 + 20) = v18;
  v19 = (_DWORD *)*a2;
  if (*a2)
    *v19 += 2;
  *(_QWORD *)(v16 + 24) = v19;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = a1;
  if (!a6)
    a5 = 0x7FF8000000000000;
  *(_QWORD *)(v16 + 80) = a5;
  *(_QWORD *)v16 = off_1E338C7A0;
  if (!v15)
    v13 = 0x7FF8000000000000;
  *(_QWORD *)(v16 + 88) = v13;
  if (!a4)
    a3 = 0x7FF8000000000000;
  *(_QWORD *)(v16 + 96) = a3;
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(v16 + 48) = a1;
  WebCore::Event::receivedTarget((WebCore::Event *)v16);
  v20 = *(_QWORD *)(a1 + 64);
  if (v20 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 16))(*(_QWORD *)(a1 + 64)) & 1) != 0)
  {
    *(_BYTE *)(a1 + 160) = 1;
    result = (_DWORD *)WebCore::DocumentTimeline::enqueueAnimationEvent(v20, (WebCore::AnimationEventBase *)v16);
    if (*(_DWORD *)(v16 + 16) == 1)
      return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    else
      --*(_DWORD *)(v16 + 16);
  }
  else
  {
    v22 = (_DWORD *)v16;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a1 + 32), a1, 0, (uint64_t *)&v22);
    result = v22;
    if (v22)
    {
      if (v22[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 8))();
      else
        --v22[4];
    }
  }
  return result;
}

uint64_t WebCore::WebAnimation::willChangeRenderer(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 56);
  if (v1)
  {
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 24))(*(_QWORD *)(this + 56));
    if ((_DWORD)this)
      return WebCore::KeyframeEffect::willChangeRenderer(v1);
  }
  return this;
}

uint64_t WebCore::WebAnimation::animationDidFinish(WebCore::WebAnimation *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

_QWORD *WebCore::WebAnimation::finish@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __n128 v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  a3.n128_u64[0] = this[14];
  if (a3.n128_f64[0] == 0.0
    || (v4 = (uint64_t)this, a3.n128_f64[0] > 0.0) && (v5 = this[7]) != 0 && *(double *)(v5 + 88) == INFINITY)
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    this[15] = a3.n128_u64[0];
    this[14] = 0x7FF8000000000000;
    v6 = 0;
    if (a3.n128_f64[0] > 0.0)
    {
      v7 = this[7];
      if (v7)
        v6 = *(_QWORD *)(v7 + 88);
    }
    WebCore::WebAnimation::silentlySetCurrentTime((uint64_t)v10, this, v6, 1, a3);
    if (v12 && v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v9.n128_u64[0] = *(_QWORD *)(v4 + 96);
    if (*(_BYTE *)(v4 + 162))
    {
      *(_QWORD *)(v4 + 104) = 0x7FF8000000000000;
      *(_BYTE *)(v4 + 162) = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(v4 + 72), (WTF::StringImpl *)v4);
    }
    if (*(_BYTE *)(v4 + 161))
    {
      *(_BYTE *)(v4 + 161) = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*(WTF::StringImpl **)(v4 + 72), (WTF::StringImpl *)v4);
    }
    WebCore::WebAnimation::timingDidChange(v4, 1, 1, 0, v9);
    this = (_QWORD *)WebCore::WebAnimation::invalidateEffect(v4);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return this;
}

unint64_t WebCore::WebAnimation::finishNotificationSteps(void)::$_0::operator()(uint64_t a1)
{
  double *v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(double **)(a1 + 64);
  if (!v1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 16))(*(_QWORD *)(a1 + 64)))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = 0.0;
  if (v3)
    v4 = *(double *)(v3 + 88);
  v5 = *(double *)(a1 + 120);
  if (v5 == 0.0 || v4 == INFINITY)
  {
LABEL_8:
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = v4 * (1.0 / v5) + *(double *)(a1 + 96) + v1[18];
    v7 = *(_QWORD *)&v6 & 0xFFFFFFFFFFFFFF00;
    v8 = LOBYTE(v6);
  }
  return v8 | v7;
}

WebCore::WebAnimation *WebCore::WebAnimation::pause@<X0>(WebCore::WebAnimation *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8[2];
  uint64_t *v9;

  if (!*((_BYTE *)this + 162))
  {
    v3 = (uint64_t)this;
    this = (WebCore::WebAnimation *)WebCore::WebAnimation::playState(this);
    if ((_DWORD)this != 2)
    {
      this = (WebCore::WebAnimation *)WebCore::WebAnimation::currentTime(v3);
      if (!v5)
      {
        v4.n128_u64[0] = *(_QWORD *)(v3 + 120);
        if (v4.n128_f64[0] < 0.0)
        {
          v6 = *(_QWORD *)(v3 + 56);
          if (v6)
          {
            v4.n128_u64[0] = *(_QWORD *)(v6 + 88);
            if (v4.n128_f64[0] == INFINITY)
            {
              *(_BYTE *)a2 = 8;
              *(_QWORD *)(a2 + 8) = 0;
              *(_BYTE *)(a2 + 16) = 1;
              return this;
            }
            v6 = *(_QWORD *)(v6 + 88);
          }
        }
        else
        {
          v6 = 0;
        }
        *(_QWORD *)(v3 + 104) = v6;
      }
      if (*(_BYTE *)(v3 + 161))
      {
        *(_BYTE *)(v3 + 161) = 0;
      }
      else
      {
        v8[0] = (uint64_t)WebCore::WebAnimation::readyPromiseResolve;
        v8[1] = 0;
        WTF::makeUniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>,WebCore::WebAnimation&,WebCore::WebAnimation& (WebCore::WebAnimation::*)(void)>(v3, v8, (uint64_t *)&v9);
        WTF::UniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>>::operator=((uint64_t **)(v3 + 72), &v9);
        WTF::UniqueRef<WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>>::~UniqueRef(&v9, v7);
      }
      *(_BYTE *)(v3 + 162) = 1;
      WebCore::WebAnimation::timingDidChange(v3, 0, 0, 0, v4);
      this = (WebCore::WebAnimation *)WebCore::WebAnimation::invalidateEffect(v3);
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t WebCore::WebAnimation::bindingsReverse@<X0>(WebCore::WebAnimation *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __n128 v5;
  char v6;
  double v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;

  result = *((_QWORD *)this + 8);
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result), v6))
  {
    v7 = *((double *)this + 14);
    v5.n128_f64[0] = -v7;
    *((double *)this + 14) = -v7;
    result = WebCore::WebAnimation::play((uint64_t)this, 1, (uint64_t)v9, v5);
    if (v11)
    {
      *((double *)this + 14) = v7;
      v8 = v10;
      *(_BYTE *)a2 = v9[0];
      *(_QWORD *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      result = *((_QWORD *)this + 7);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

void WebCore::WebAnimation::runPendingPauseTask(WebCore::WebAnimation *this)
{
  __n128 v2;
  WTF::StringImpl *v3;
  WebCore::KeyframeEffect *v4;
  __n128 v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  *((_BYTE *)this + 162) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8));
  v2.n128_u64[0] = *((_QWORD *)this + 14);
  *((_QWORD *)this + 15) = v2.n128_u64[0];
  *((_QWORD *)this + 14) = 0x7FF8000000000000;
  *((_QWORD *)this + 12) = 0x7FF8000000000000;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  if (!*((_BYTE *)v3 + 32))
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(v3, this);
  *((_BYTE *)this + 159) = 0;
  WebCore::WebAnimation::updateFinishedState((uint64_t)this, 0, 0, v2);
  v4 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 7);
  if (v4 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 24))(*((_QWORD *)this + 7)))
  {
    WebCore::WebAnimation::updateRelevance(this, v5);
    WebCore::KeyframeEffect::updateEffectStackMembership(v4, v6);
  }
  if (!*((_DWORD *)this + 38))
  {
    v7 = *((_QWORD *)this + 7);
    if (v7)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v8 = *(_QWORD *)(v7 + 264);
        if (v8)
        {
          if (*(_BYTE *)(v7 + 288) && (v9 = *(WTF::StringImpl **)(v7 + 280)) != 0)
          {
            *(_DWORD *)v9 += 2;
            WebCore::Node::invalidateStyle(v8, 1u, 0);
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v10);
            else
              *(_DWORD *)v9 -= 2;
          }
          else
          {
            WebCore::Node::invalidateStyle(v8, 1u, 0);
          }
        }
      }
    }
  }
}

void WebCore::WebAnimation::tick(WebCore::WebAnimation *this, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;

  *((_BYTE *)this + 160) = 0;
  WebCore::WebAnimation::updateFinishedState((uint64_t)this, 0, 1, a2);
  *((_BYTE *)this + 159) = 1;
  v3 = *((_QWORD *)this + 7);
  if (!v3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3) & 1) == 0)
  {
    if (*((_BYTE *)this + 162))
      WebCore::WebAnimation::runPendingPauseTask(this);
    if (*((_BYTE *)this + 161))
      WebCore::WebAnimation::runPendingPlayTask(this);
  }
  if (!*((_DWORD *)this + 38))
  {
    v4 = *((_QWORD *)this + 7);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
}

uint64_t WebCore::WebAnimation::suspend(uint64_t result, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;

  if (!*(_BYTE *)(result + 156))
  {
    *(_BYTE *)(result + 156) = 1;
    if (*(_QWORD *)(result + 56))
    {
      a2.n128_u64[0] = *(_QWORD *)(result + 104);
      v3 = result;
      if (!*(_BYTE *)(result + 162))
      {
        a3.n128_u64[0] = *(_QWORD *)(result + 112);
        if (a3.n128_f64[0] <= 0.0)
          goto LABEL_15;
        v4 = *(_QWORD *)(result + 56);
        v5 = 0.0;
        if (v4)
          v5 = *(double *)(v4 + 88);
        v3 = result;
        if (a2.n128_f64[0] + 0.000001 < v5)
        {
LABEL_15:
          if (a3.n128_f64[0] >= 0.0)
            return (*(uint64_t (**)(_QWORD, uint64_t, __n128, __n128))(**(_QWORD **)(v3 + 56) + 56))(*(_QWORD *)(v3 + 56), 1, a2, a3);
          a3.n128_u64[0] = 0xBEB0C6F7A0B5ED8DLL;
          a2.n128_f64[0] = a2.n128_f64[0] + -0.000001;
          if (a2.n128_f64[0] > 0.0)
            return (*(uint64_t (**)(_QWORD, uint64_t, __n128, __n128))(**(_QWORD **)(v3 + 56) + 56))(*(_QWORD *)(v3 + 56), 1, a2, a3);
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebAnimation::suspend(uint64_t a1, __n128 a2, __n128 a3)
{
  return WebCore::WebAnimation::suspend(a1 - 32, a2, a3);
}

uint64_t WebCore::WebAnimation::resume(uint64_t this, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;

  if (*(_BYTE *)(this + 156))
  {
    *(_BYTE *)(this + 156) = 0;
    if (*(_QWORD *)(this + 56))
    {
      a2.n128_u64[0] = *(_QWORD *)(this + 104);
      v3 = this;
      if (!*(_BYTE *)(this + 162))
      {
        a3.n128_u64[0] = *(_QWORD *)(this + 112);
        if (a3.n128_f64[0] <= 0.0)
          goto LABEL_15;
        v4 = *(_QWORD *)(this + 56);
        v5 = 0.0;
        if (v4)
          v5 = *(double *)(v4 + 88);
        v3 = this;
        if (a2.n128_f64[0] + 0.000001 < v5)
        {
LABEL_15:
          if (a3.n128_f64[0] >= 0.0)
            return (*(uint64_t (**)(_QWORD, _QWORD, __n128, __n128))(**(_QWORD **)(v3 + 56) + 56))(*(_QWORD *)(v3 + 56), 0, a2, a3);
          a3.n128_u64[0] = 0xBEB0C6F7A0B5ED8DLL;
          a2.n128_f64[0] = a2.n128_f64[0] + -0.000001;
          if (a2.n128_f64[0] > 0.0)
            return (*(uint64_t (**)(_QWORD, _QWORD, __n128, __n128))(**(_QWORD **)(v3 + 56) + 56))(*(_QWORD *)(v3 + 56), 0, a2, a3);
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebAnimation::resume(WebCore::WebAnimation *this, __n128 a2, __n128 a3)
{
  return WebCore::WebAnimation::resume((uint64_t)this - 32, a2, a3);
}

uint64_t WebCore::WebAnimation::stop(WebCore::WebAnimation *this)
{
  return (*(uint64_t (**)(WebCore::WebAnimation *))(*(_QWORD *)this + 40))(this);
}

uint64_t `non-virtual thunk to'WebCore::WebAnimation::stop(WebCore::WebAnimation *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 4) + 40))((char *)this - 32);
}

BOOL WebCore::WebAnimation::virtualHasPendingActivity(WebCore::WebAnimation *this)
{
  return *((_QWORD *)this + 8) || *((_BYTE *)this + 158) != 0;
}

BOOL `non-virtual thunk to'WebCore::WebAnimation::virtualHasPendingActivity(WebCore::WebAnimation *this)
{
  return *((_QWORD *)this + 4) || *((_BYTE *)this + 126) != 0;
}

uint64_t WebCore::WebAnimation::isReplaceable(WebCore::WebAnimation *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t result;
  _QWORD *v7;
  _BYTE v8[8];
  double v9;

  if ((*(unsigned int (**)(WebCore::WebAnimation *))(*(_QWORD *)this + 104))(this))
  {
    v3 = *((_QWORD *)this + 23);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
      {
        if (*((_BYTE *)this + 208))
        {
          v4 = (WTF::StringImpl *)*((_QWORD *)this + 25);
          if (v4)
          {
            v5 = *(_DWORD *)v4;
            *(_DWORD *)v4 += 2;
            if (v5)
            {
              result = 0;
              *(_DWORD *)v4 = v5;
              return result;
            }
            WTF::StringImpl::destroy(v4, v2);
          }
        }
        return 0;
      }
    }
  }
  if (WebCore::WebAnimation::playState(this) != 3
    || *((_BYTE *)this + 163) == 1
    || !*((_QWORD *)this + 8))
  {
    return 0;
  }
  result = *((_QWORD *)this + 7);
  if (!result)
    return result;
  WebCore::AnimationEffect::getBasicTiming(result, (uint64_t)v8);
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v7)
    return 0;
  result = (*(uint64_t (**)(_QWORD *, double))(*v7 + 24))(v7, v9);
  if ((_DWORD)result)
    return v7[33] != 0;
  return result;
}

WTF::StringImpl *WebCore::WebAnimation::persist(WTF::StringImpl *this)
{
  int v1;
  WTF::StringImpl *v2;
  WebCore::KeyframeEffect *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::KeyframeEffectStack *v11;
  WTF *v12;
  void *v13;
  WebCore::Node *v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  _BYTE v19[24];
  WTF::StringImpl *v20;

  v1 = *((unsigned __int8 *)this + 163);
  *((_BYTE *)this + 163) = 2;
  if (v1 == 1)
  {
    v2 = this;
    if (*((_QWORD *)this + 8))
    {
      v3 = (WebCore::KeyframeEffect *)*((_QWORD *)this + 7);
      if (v3)
      {
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 7));
        if ((_DWORD)this)
        {
          this = (WTF::StringImpl *)*((_QWORD *)v3 + 33);
          if (!this)
            goto LABEL_26;
          if (*((_BYTE *)v3 + 288))
          {
            v4 = *((_DWORD *)v3 + 68);
            v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 35);
            if (v5)
              *(_DWORD *)v5 += 2;
            v14 = this;
            v15 = v4;
            v16 = v5;
            v17 = 1;
          }
          else
          {
            v14 = (WebCore::Node *)*((_QWORD *)v3 + 33);
            LOBYTE(v15) = 0;
            v17 = 0;
          }
          v18 = 1;
          v6 = WebCore::Element::ensureAnimationRareData(this, (uint64_t)&v15);
          ++*((_DWORD *)v2 + 6);
          v20 = v2;
          WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t *)(v6 + 16), (uint64_t *)&v20, (uint64_t)v19);
          this = v20;
          v20 = 0;
          if (this)
          {
            if (*((_DWORD *)this + 6) == 1)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 72))(this);
            else
              --*((_DWORD *)this + 6);
          }
          if (v18)
          {
            v7 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v14, (uint64_t)&v15);
            v8 = *v7;
            if (!*v7)
            {
              v8 = WTF::fastMalloc((WTF *)0x50);
              *(_OWORD *)v8 = 0u;
              *(_OWORD *)(v8 + 16) = 0u;
              *(_OWORD *)(v8 + 32) = 0u;
              *(_OWORD *)(v8 + 48) = 0u;
              *(_QWORD *)(v8 + 64) = 0;
              *(_BYTE *)(v8 + 72) = 1;
              v11 = (WebCore::KeyframeEffectStack *)*v7;
              *v7 = v8;
              if (v11)
              {
                WebCore::KeyframeEffectStack::~KeyframeEffectStack(v11, v10);
                WTF::fastFree(v12, v13);
                v8 = *v7;
              }
            }
            this = WebCore::KeyframeEffectStack::addEffect((WTF::StringImpl *)v8, v3);
            if (v18)
            {
              if (v17)
              {
                this = v16;
                v16 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
                  else
                    *(_DWORD *)this -= 2;
                }
              }
            }
          }
          else
          {
LABEL_26:
            __break(1u);
          }
        }
      }
    }
  }
  return this;
}

void WebCore::WebAnimation::commitStyles(WebCore::WebAnimation *this@<X0>, void *a2@<X1>, unsigned int **a3@<X8>)
{
  unint64_t v4;
  WebCore::WebAnimation *v5;
  WebCore::Node *v6;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  WebCore::Node *v19;
  uint64_t v20;
  const WebCore::StyleProperties *v21;
  WebCore::MutableStyleProperties *v22;
  char v23;
  unsigned int **v24;
  uint64_t v25;
  WTF::String *v26;
  __n128 v27;
  uint64_t Attribute;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  void *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int **v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned int *v44;
  unsigned int *v45;
  WebCore::KeyframeEffectStack **v46;
  WebCore::KeyframeEffectStack *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t (*v65)();
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  void *v71;
  const WebCore::WebAnimation *v72;
  WTF *v73;
  WebCore::KeyframeEffect *v74;
  uint64_t v75;
  WebCore::WebAnimation *v76;
  unsigned int v77;
  int v78;
  int i;
  unsigned __int16 *v80;
  uint64_t v81;
  _BOOL4 v83;
  BOOL v85;
  char v86;
  BOOL v87;
  uint64_t v88;
  WebCore::WebAnimation *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  WTF::String *v94;
  __n128 v95;
  WebCore::RenderStyle *v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::Element *v101;
  WTF::StringImpl *v102;
  __n128 v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  WTF::StringImpl *v112;
  WebCore::Node *v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  _DWORD *v117;
  WTF *v118;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  _QWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD *v130;
  uint64_t v131;
  _DWORD *v132;
  unsigned int **v133;
  unsigned int *v134;
  uint64_t v135;
  WebCore::Node **v136;
  unsigned int **v137;
  unsigned int v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  char v141;
  char v142[8];
  int v143;
  __int16 v144;
  int v145;
  unsigned int *v146;
  WTF *v147;
  WebCore::Node *v148;
  char v149;
  WTF::StringImpl *v150;
  char v151;
  char v152;
  int v153;
  _DWORD *v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  WebCore::Node *v161;
  unsigned int **v162;
  int v163;
  int v164;
  WebCore::RenderStyle *v165;
  char v166;
  __int128 v167;
  _BYTE v168[32];
  WebCore::Node **v169;

  v4 = *((_QWORD *)this + 7);
  if (!v4 || (v5 = this, ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 24))(*((_QWORD *)this + 7)) & 1) == 0))
  {
    v6 = 0;
    v4 = 0;
    v23 = 1;
LABEL_28:
    *(_BYTE *)a3 = 4;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
    goto LABEL_29;
  }
  ++*(_DWORD *)(v4 + 8);
  v6 = *(WebCore::Node **)(v4 + 264);
  if (!v6)
    goto LABEL_27;
  if ((*((_WORD *)v6 + 14) & 0x70) == 0)
  {
    v6 = 0;
    goto LABEL_27;
  }
  *((_DWORD *)v6 + 6) += 2;
  v161 = v6;
  if (*(_BYTE *)(v4 + 288))
  {
LABEL_27:
    v23 = 0;
    goto LABEL_28;
  }
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v7);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v8 = (_QWORD *)(*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL);
  if (v8)
  {
    if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19568881CLL);
    }
    WebCore::Styleable::fromRenderer(*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL, (const WebCore::RenderElement *)a2, (uint64_t)&v167);
    if (v168[16])
    {
      if ((*(_QWORD *)(v167 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_13;
      v10 = *(unsigned int *)((*(_QWORD *)(v167 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
      if (!(_DWORD)v10)
        goto LABEL_13;
      v121 = *(uint64_t **)((*(_QWORD *)(v167 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
      if (v168[8])
      {
        v122 = 8 * v10;
        v11 = 1;
        do
        {
          v123 = *v121;
          if (*(_BYTE *)(*v121 + 96))
          {
            if (*(_DWORD *)(v123 + 80) == DWORD2(v167) && *(_QWORD *)(v123 + 88) == *(_QWORD *)v168)
              break;
          }
          ++v121;
          v122 -= 8;
        }
        while (v122);
      }
      else
      {
        v125 = 8 * v10;
        v11 = 1;
        while (1)
        {
          v123 = *v121;
          if (!*(_BYTE *)(*v121 + 96))
            break;
          ++v121;
          v125 -= 8;
          if (!v125)
            goto LABEL_14;
        }
      }
      v126 = *(_QWORD **)(v123 + 8);
      if (v126)
      {
        v11 = 0;
        v153 = 0;
        v127 = (_DWORD *)v126[1];
        ++*v127;
        v128 = v126[2];
        v129 = (_DWORD *)v126[3];
        v154 = v127;
        v155 = v128;
        ++*v129;
        v156 = v129;
        v130 = (_DWORD *)v126[4];
        ++*v130;
        v131 = v126[5];
        v157 = v130;
        v158 = v131;
        v159 = 0;
        v132 = (_DWORD *)v126[7];
        ++*v132;
        v160 = v132;
      }
      else
      {
LABEL_13:
        v11 = 1;
      }
LABEL_14:
      if (!v168[8] || (v12 = *(WTF::StringImpl **)v168, *(_QWORD *)v168 = 0, !v12))
      {
LABEL_18:
        if (!v11)
          goto LABEL_20;
        goto LABEL_19;
      }
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
        goto LABEL_18;
      }
      WTF::StringImpl::destroy(v12, v9);
      if (!v11)
      {
LABEL_20:
        v19 = v161;
        if (v161)
          *((_DWORD *)v161 + 6) += 2;
        v148 = v19;
        v149 = 0;
        v151 = 0;
        v152 = 0;
        v20 = *((_QWORD *)v19 + 13);
        if (v20 && (v21 = *(const WebCore::StyleProperties **)(v20 + 8)) != 0)
        {
          v22 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
          v147 = WebCore::MutableStyleProperties::MutableStyleProperties(v22, v21);
        }
        else
        {
          WebCore::Document::createCSSStyleDeclaration((void (****)(WebCore::PropertySetCSSStyleDeclaration *__hidden))&v162);
          v24 = v162;
          Attribute = WebCore::Element::getAttribute(v161, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v25, v26, v27);
          (*((void (**)(__int128 *__return_ptr, unsigned int **, uint64_t))*v24 + 8))(&v167, v24, Attribute);
          if (v168[0])
          {
            v30 = (WTF::StringImpl *)*((_QWORD *)&v167 + 1);
            *((_QWORD *)&v167 + 1) = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v29);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          (*((void (**)(WTF **__return_ptr, unsigned int **))*v24 + 20))(&v147, v24);
          (*((void (**)(unsigned int **))*v24 + 3))(v24);
        }
        LOBYTE(v167) = 0;
        v168[0] = 0;
        v31 = (uint64_t *)WebCore::Element::ensureAnimationRareData(v161, (uint64_t)&v167);
        v33 = *v31;
        if (!*v31)
        {
          v46 = (WebCore::KeyframeEffectStack **)v31;
          v33 = WTF::fastMalloc((WTF *)0x50);
          *(_OWORD *)v33 = 0u;
          *(_OWORD *)(v33 + 16) = 0u;
          *(_OWORD *)(v33 + 32) = 0u;
          *(_OWORD *)(v33 + 48) = 0u;
          *(_QWORD *)(v33 + 64) = 0;
          *(_BYTE *)(v33 + 72) = 1;
          v47 = *v46;
          *v46 = (WebCore::KeyframeEffectStack *)v33;
          if (v47)
          {
            WebCore::KeyframeEffectStack::~KeyframeEffectStack(v47, v32);
            WTF::fastFree(v48, v49);
            v33 = (uint64_t)*v46;
          }
        }
        v137 = (unsigned int **)v33;
        if (v168[0])
        {
          v34 = (WTF::StringImpl *)*((_QWORD *)&v167 + 1);
          *((_QWORD *)&v167 + 1) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v32);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        v146 = 0;
        v35 = WebCore::KeyframeEffect::animatedProperties((WebCore::KeyframeEffect *)v4);
        v37 = (unsigned int *)*v35;
        if (!*v35)
        {
          v44 = 0;
          v38 = 0;
          goto LABEL_62;
        }
        v38 = *(v37 - 1);
        v39 = (uint64_t)&v37[4 * v38];
        if (!*(v37 - 3))
          goto LABEL_278;
        if ((_DWORD)v38)
        {
          v40 = (unsigned int **)v35;
          v41 = 16 * v38;
          while (1)
          {
            v42 = v37[2];
            if ((_DWORD)v42)
              v43 = 0;
            else
              v43 = *(unsigned __int16 *)v37 == 0;
            if (!v43)
            {
              if ((_DWORD)v42 == -1)
              {
LABEL_277:
                while (2)
                {
                  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_278:
                  v44 = (unsigned int *)v39;
LABEL_62:
                  v39 = (uint64_t)&v37[4 * v38];
                  if (!v37)
                  {
LABEL_71:
                    v45 = 0;
LABEL_72:
                    while (v44 != v45)
                    {
                      LOBYTE(v162) = 0;
                      v163 = -1;
                      v50 = v44[2];
                      if ((_DWORD)v50 != -1)
                      {
                        ((void (*)(__int128 *, unsigned int ***, unsigned int *))off_1E3392008[v50])(&v167, &v162, v44);
                        v163 = v50;
                        if (!(_DWORD)v50)
                        {
                          v51 = WebCore::shorthandForProperty((unsigned __int16)v162);
                          if (v52)
                          {
                            v53 = (__int16 *)v51;
                            v54 = 2 * v52;
                            do
                            {
                              v144 = *v53;
                              v145 = 0;
                              WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)&v146, (uint64_t)&v144, (uint64_t (**)())&v167);
                              if (v145 != -1)
                                ((void (*)(__int128 *, __int16 *))off_1E3391FF8[v145])(&v167, &v144);
                              ++v53;
                              v54 -= 2;
                            }
                            while (v54);
                          }
                        }
                      }
                      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)&v146, (uint64_t)&v162, (uint64_t)&v167);
                      if (v163 != -1)
                        ((void (*)(__int128 *, unsigned int ***))off_1E3391FF8[v163])(&v167, &v162);
                      v37 = v44 + 4;
                      v44 = (unsigned int *)v39;
                      if (v37 != (unsigned int *)v39)
                      {
                        v44 = (unsigned int *)v39;
                        while (1)
                        {
                          v55 = v37[2];
                          if ((_DWORD)v55 || *(_WORD *)v37 != 0)
                          {
                            if ((_DWORD)v55 == -1)
                              goto LABEL_277;
                            *(_QWORD *)&v167 = &v162;
                            v44 = (unsigned int *)v39;
                            if (!((unsigned int (*)(__int128 *, unsigned int *))off_1E3392048[v55])(&v167, v37))break;
                          }
                          v37 += 4;
                          if (v37 == v44)
                            goto LABEL_94;
                        }
                        v44 = v37;
                      }
LABEL_94:
                      ;
                    }
                    v37 = v146;
                    if (v146)
                    {
                      v57 = *(v146 - 1);
                      v58 = &v146[4 * v57];
                      if (*(v146 - 3))
                      {
                        if (!(_DWORD)v57)
                        {
                          v61 = (uint64_t)v146;
                          goto LABEL_113;
                        }
                        v39 = 16 * v57;
                        do
                        {
                          v59 = v37[2];
                          if ((_DWORD)v59)
                            v60 = 0;
                          else
                            v60 = *(unsigned __int16 *)v37 == 0;
                          if (!v60)
                          {
                            if ((_DWORD)v59 == -1)
                              goto LABEL_277;
                            *(_QWORD *)&v167 = &v162;
                            if (!((unsigned int (*)(__int128 *, unsigned int *))off_1E3392048[v59])(&v167, v37))goto LABEL_112;
                          }
                          v37 += 4;
                          v39 -= 16;
                        }
                        while (v39);
                        v37 = v58;
LABEL_112:
                        v61 = (uint64_t)v37;
                        v37 = v146;
                        if (v146)
                        {
LABEL_113:
                          v62 = &v37[4 * *(v37 - 1)];
                          goto LABEL_116;
                        }
                        goto LABEL_115;
                      }
                      v61 = (uint64_t)&v146[4 * v57];
                    }
                    else
                    {
                      v61 = 0;
                      v57 = 0;
                    }
                    v58 = &v146[4 * v57];
                    if (v146)
                      goto LABEL_113;
LABEL_115:
                    v62 = 0;
LABEL_116:
                    if (v62 == (unsigned int *)v61)
                      goto LABEL_209;
                    v63 = 0;
                    v135 = (uint64_t)v58;
                    v136 = (WebCore::Node **)v4;
                    v133 = a3;
                    v134 = v62;
LABEL_118:
                    v138 = v63;
                    LOBYTE(v144) = 0;
                    v145 = -1;
                    v64 = *(unsigned int *)(v61 + 8);
                    if ((_DWORD)v64 == -1)
                    {
                      v142[0] = 0;
                    }
                    else
                    {
                      v65 = off_1E3392008[v64];
                      ((void (*)(__int128 *, __int16 *, uint64_t))v65)(&v167, &v144, v61);
                      v145 = v64;
                      v142[0] = 0;
                      v143 = -1;
                      ((void (*)(__int128 *, char *, __int16 *))v65)(&v167, v142, &v144);
                    }
                    v143 = v64;
                    v66 = WTF::fastMalloc((WTF *)0x40);
                    *(_DWORD *)v66 = 0;
                    v67 = v154;
                    ++*v154;
                    *(_QWORD *)(v66 + 8) = v67;
                    *(_QWORD *)(v66 + 16) = v155;
                    v68 = v156;
                    ++*v156;
                    *(_QWORD *)(v66 + 24) = v68;
                    v69 = v157;
                    ++*v157;
                    *(_QWORD *)(v66 + 32) = v69;
                    *(_QWORD *)(v66 + 40) = v158;
                    *(_QWORD *)(v66 + 48) = 0;
                    v70 = v160;
                    ++*v160;
                    *(_QWORD *)(v66 + 56) = v70;
                    v165 = (WebCore::RenderStyle *)v66;
                    WebCore::KeyframeEffectStack::sortedEffects(&v162, v137);
                    v73 = (WTF *)v162;
                    if (!v164)
                      goto LABEL_168;
                    a3 = &v162[v164];
                    v37 = (unsigned int *)v162;
LABEL_123:
                    v74 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v37 + 8);
                    v75 = *((_QWORD *)v74 + 12);
                    if (v75)
                      v76 = *(WebCore::WebAnimation **)(v75 + 8);
                    else
                      v76 = 0;
                    if (v76 != v5)
                    {
                      if (!WebCore::compareAnimationsByCompositeOrder(*(WebCore **)(v75 + 8), v5, v72))
                        goto LABEL_162;
                      if (*(_QWORD *)v37)
                        v74 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v37 + 8);
                      else
                        v74 = 0;
                    }
                    v39 = *WebCore::KeyframeEffect::animatedProperties(v74);
                    if (!v39)
                      goto LABEL_155;
                    if (v143 == -1)
                      continue;
                    v77 = *(_DWORD *)(v39 - 8);
                    *(_QWORD *)&v167 = &v166;
                    v78 = ((uint64_t (*)(__int128 *, char *))off_1E3392018[v143])(&v167, v142);
                    for (i = 0; ; v78 = i + v4)
                    {
                      v4 = v78 & v77;
                      v80 = (unsigned __int16 *)(v39 + 16 * v4);
                      v81 = *((unsigned int *)v80 + 2);
                      v83 = v143 == (_DWORD)v81 && v143 != -1;
                      if ((_DWORD)v81 == -1 || !v83)
                      {
                        v85 = v143 == -1;
                        if ((_DWORD)v81 != -1)
                          v85 = v83;
                        if (v85)
                        {
LABEL_154:
                          v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 8) + 96) + 8);
                          v167 = 0u;
                          memset(v168, 0, 25);
                          (*(void (**)(uint64_t, WebCore::RenderStyle *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v88 + 272))(v88, v165, &v167, 0, 0);
LABEL_155:
                          v89 = *(WebCore::WebAnimation **)(*(_QWORD *)(*(_QWORD *)v37 + 8) + 96);
                          if (v89)
                            v89 = (WebCore::WebAnimation *)*((_QWORD *)v89 + 1);
                          if (v89 == v5 || (v37 += 2, v37 == (unsigned int *)a3))
                          {
                            do
                            {
LABEL_162:
                              v90 = *(unsigned int **)v73;
                              *(_QWORD *)v73 = 0;
                              if (v90)
                              {
                                do
                                {
                                  v91 = __ldaxr(v90);
                                  v92 = v91 - 1;
                                }
                                while (__stlxr(v92, v90));
                                if (!v92)
                                {
                                  atomic_store(1u, v90);
                                  WTF::fastFree((WTF *)v90, v71);
                                }
                              }
                              v73 = (WTF *)((char *)v73 + 8);
                            }
                            while (v73 != (WTF *)a3);
                            v73 = (WTF *)v162;
                            a3 = v133;
LABEL_168:
                            v4 = (unint64_t)v136;
                            if (v73)
                            {
                              v162 = 0;
                              WTF::fastFree(v73, v71);
                            }
                            if (*((_BYTE *)v5 + 163) == 1)
                            {
                              v93 = *((_QWORD *)v136[12] + 1);
                              v167 = 0u;
                              memset(v168, 0, 25);
                              (*(void (**)(uint64_t, WebCore::RenderStyle *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v93 + 272))(v93, v165, &v167, 0, 0);
                            }
                            *(_QWORD *)&v167 = &v148;
                            *((_QWORD *)&v167 + 1) = &v165;
                            *(_QWORD *)v168 = &v147;
                            *(_QWORD *)&v168[8] = &v161;
                            *(_QWORD *)&v168[16] = &v148;
                            *(_QWORD *)&v168[24] = &v147;
                            v169 = &v161;
                            v39 = v135;
                            if (v143 == -1)
                              goto LABEL_277;
                            v162 = (unsigned int **)&v167;
                            v37 = (unsigned int *)((uint64_t (*)(unsigned int ***, char *))off_1E3392038[v143])(&v162, v142);
                            v96 = v165;
                            v165 = 0;
                            if (v96)
                            {
                              WebCore::RenderStyle::~RenderStyle(v96, v36);
                              if (*(_DWORD *)v97)
                              {
                                v95 = 0uLL;
                                *((_OWORD *)v97 + 2) = 0u;
                                *((_OWORD *)v97 + 3) = 0u;
                                *(_OWORD *)v97 = 0u;
                                *((_OWORD *)v97 + 1) = 0u;
                              }
                              else
                              {
                                WTF::fastFree(v97, v36);
                              }
                            }
                            if (v143 != -1)
                              ((void (*)(__int128 *, char *))off_1E3391FF8[v143])(&v167, v142);
                            v143 = -1;
                            if (v145 != -1)
                              ((void (*)(__int128 *, __int16 *))off_1E3391FF8[v145])(&v167, &v144);
                            v98 = v61 + 16;
                            v61 = v135;
                            if (v98 != v135)
                            {
                              v61 = v135;
                              while (1)
                              {
                                v99 = *(unsigned int *)(v98 + 8);
                                if ((_DWORD)v99 || *(_WORD *)v98 != 0)
                                {
                                  if ((_DWORD)v99 == -1)
                                    goto LABEL_277;
                                  *(_QWORD *)&v167 = &v162;
                                  v61 = v135;
                                  if (!((unsigned int (*)(__int128 *, uint64_t))off_1E3392048[v99])(&v167, v98))break;
                                }
                                v98 += 16;
                                if (v98 == v61)
                                  goto LABEL_192;
                              }
                              v61 = v98;
                            }
LABEL_192:
                            v63 = v37 | v138;
                            if ((unsigned int *)v61 == v134)
                            {
                              if ((v63 & 1) != 0)
                              {
                                v101 = v161;
                                WebCore::StyleProperties::asTextInternal(v147, (unsigned __int8 *)v36, v94, (uint64_t)&v167, v95);
                                WTF::StringBuilder::toAtomString((WTF::AtomString *)&v167, (WTF::AtomString *)&v162);
                                v104 = (WTF::StringImpl *)*((_QWORD *)&v167 + 1);
                                *((_QWORD *)&v167 + 1) = 0;
                                if (v104)
                                {
                                  if (*(_DWORD *)v104 == 2)
                                    WTF::StringImpl::destroy(v104, v102);
                                  else
                                    *(_DWORD *)v104 -= 2;
                                }
                                v105 = (WTF::StringImpl *)v167;
                                *(_QWORD *)&v167 = 0;
                                if (v105)
                                {
                                  if (*(_DWORD *)v105 == 2)
                                    WTF::StringImpl::destroy(v105, v102);
                                  else
                                    *(_DWORD *)v105 -= 2;
                                }
                                WebCore::Element::setAttribute(v101, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (WTF::StringImpl **)&v162, 0, &v139, v103);
                                if (v141)
                                {
                                  v106 = v140;
                                  v140 = 0;
                                  if (v106)
                                  {
                                    if (*(_DWORD *)v106 == 2)
                                      WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v36);
                                    else
                                      *(_DWORD *)v106 -= 2;
                                  }
                                }
                                v107 = (WTF::StringImpl *)v162;
                                v162 = 0;
                                if (v107)
                                {
                                  if (*(_DWORD *)v107 == 2)
                                    WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v36);
                                  else
                                    *(_DWORD *)v107 -= 2;
                                }
                              }
LABEL_209:
                              *a3 = 0;
                              a3[1] = 0;
                              a3[2] = 0;
                              v39 = (uint64_t)v146;
                              if (v146)
                              {
                                v5 = (WebCore::WebAnimation *)*(v146 - 1);
                                if ((_DWORD)v5)
                                {
                                  v108 = (uint64_t)v146;
                                  do
                                  {
                                    v109 = *(unsigned int *)(v108 + 8);
                                    if ((_DWORD)v109 == -1)
                                      goto LABEL_277;
                                    *(_QWORD *)&v167 = &v162;
                                    if ((((uint64_t (*)(__int128 *, uint64_t))off_1E3392048[v109])(&v167, v108) & 1) == 0)
                                    {
                                      v110 = *(unsigned int *)(v108 + 8);
                                      if ((_DWORD)v110 != -1)
                                        ((void (*)(__int128 *, uint64_t))off_1E3391FF8[v110])(&v167, v108);
                                      *(_DWORD *)(v108 + 8) = -1;
                                    }
                                    v108 += 16;
                                    v5 = (WebCore::WebAnimation *)((char *)v5 - 1);
                                  }
                                  while (v5);
                                }
                                WTF::fastFree((WTF *)(v39 - 16), v36);
                              }
                              v111 = v147;
                              v147 = 0;
                              if (v111)
                              {
                                if (*(_DWORD *)v111 == 1)
                                {
                                  v114 = *((unsigned int *)v111 + 7);
                                  if ((_DWORD)v114)
                                  {
                                    v115 = 16 * v114;
                                    v116 = (_DWORD **)(*((_QWORD *)v111 + 2) + 8);
                                    do
                                    {
                                      v117 = *v116;
                                      *v116 = 0;
                                      if (v117)
                                      {
                                        if (*v117 == 2)
                                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v117, (WTF::StringImpl *)v36);
                                        else
                                          *v117 -= 2;
                                      }
                                      v116 += 2;
                                      v115 -= 16;
                                    }
                                    while (v115);
                                  }
                                  v118 = (WTF *)*((_QWORD *)v111 + 2);
                                  if ((WTF *)((char *)v111 + 32) != v118 && v118 != 0)
                                  {
                                    *((_QWORD *)v111 + 2) = 0;
                                    *((_DWORD *)v111 + 6) = 0;
                                    WTF::fastFree(v118, v36);
                                  }
                                  v120 = *((_QWORD *)v111 + 1);
                                  *((_QWORD *)v111 + 1) = 0;
                                  if (v120)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
                                  WTF::fastFree(v111, v36);
                                }
                                else
                                {
                                  --*(_DWORD *)v111;
                                }
                              }
                              if (v151)
                              {
                                v112 = v150;
                                v150 = 0;
                                if (v112)
                                {
                                  if (*(_DWORD *)v112 == 2)
                                    WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v36);
                                  else
                                    *(_DWORD *)v112 -= 2;
                                }
                              }
                              v113 = v148;
                              v148 = 0;
                              if (v113)
                              {
                                if (*((_DWORD *)v113 + 6) == 2)
                                {
                                  if ((*((_WORD *)v113 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v113, v36);
                                }
                                else
                                {
                                  *((_DWORD *)v113 + 6) -= 2;
                                }
                              }
                              WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v153, v36);
                              v23 = 0;
                              v6 = v161;
LABEL_29:
                              v161 = 0;
                              if (v6)
                              {
                                if (*((_DWORD *)v6 + 6) != 2)
                                {
                                  *((_DWORD *)v6 + 6) -= 2;
                                  goto LABEL_32;
                                }
LABEL_268:
                                if ((*((_WORD *)v6 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v6, a2);
                              }
LABEL_32:
                              if ((v23 & 1) == 0)
                                goto LABEL_33;
                              return;
                            }
                            goto LABEL_118;
                          }
                          goto LABEL_123;
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v167 = &v166;
                        v86 = ((uint64_t (*)(__int128 *, uint64_t, char *))off_1E3392028[v81])(&v167, v39 + 16 * v4, v142);
                        if ((v86 & 1) != 0)
                          goto LABEL_154;
                        LODWORD(v81) = *((_DWORD *)v80 + 2);
                      }
                      if ((_DWORD)v81)
                        v87 = 0;
                      else
                        v87 = *v80 == 0;
                      if (v87)
                        goto LABEL_155;
                      ++i;
                    }
                  }
                  break;
                }
LABEL_65:
                v45 = &v37[4 * *(v37 - 1)];
                goto LABEL_72;
              }
              *(_QWORD *)&v167 = &v162;
              if (!((unsigned int (*)(__int128 *, unsigned int *))off_1E3392048[v42])(&v167, v37))
                goto LABEL_64;
            }
            v37 += 4;
            v41 -= 16;
            if (!v41)
            {
              v37 = (unsigned int *)v39;
LABEL_64:
              v44 = v37;
              v37 = *v40;
              if (!*v40)
                goto LABEL_71;
              goto LABEL_65;
            }
          }
        }
        v44 = (unsigned int *)*v35;
        if (!v37)
          goto LABEL_71;
        goto LABEL_65;
      }
    }
LABEL_19:
    v153 = 0;
    v13 = (_DWORD *)v8[11];
    ++*v13;
    v14 = v8[12];
    v15 = (_DWORD *)v8[13];
    v154 = v13;
    v155 = v14;
    ++*v15;
    v156 = v15;
    v16 = (_DWORD *)v8[14];
    ++*v16;
    v17 = v8[15];
    v157 = v16;
    v158 = v17;
    v159 = 0;
    v18 = (_DWORD *)v8[17];
    ++*v18;
    v160 = v18;
    goto LABEL_20;
  }
  *(_BYTE *)a3 = 8;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  v161 = 0;
  if (*((_DWORD *)v6 + 6) == 2)
  {
    v23 = 0;
    goto LABEL_268;
  }
  *((_DWORD *)v6 + 6) -= 2;
LABEL_33:
  if (*(_DWORD *)(v4 + 8) == 1)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  else
    --*(_DWORD *)(v4 + 8);
}

void WebCore::WebAnimation::timeToNextTick(WebCore::WebAnimation *this)
{
  double v2;
  uint64_t v3;
  _BYTE v4[40];

  if (!*((_BYTE *)this + 162) && !*((_BYTE *)this + 161))
  {
    v2 = *((double *)this + 14);
    if (WebCore::WebAnimation::playState(this) == 1 && v2 != 0.0)
    {
      v3 = *((_QWORD *)this + 7);
      WebCore::AnimationEffect::getBasicTiming(v3, (uint64_t)v4);
      (*(double (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 88))(v3, v4);
    }
  }
}

uint64_t WebCore::WebAnimation::isSkippedContentAnimation(WebCore::WebAnimation *this)
{
  unint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v1 = (unint64_t)this;
  if (!this)
    return v1;
  v2 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebAnimation *))(*(_QWORD *)this + 104))(this);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD *)(v1 + 184);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(unsigned __int8 *)(v1 + 208);
  if (*(_BYTE *)(v1 + 208))
  {
    v2 = *(WTF::StringImpl **)(v1 + 200);
    if (v2)
      *(_DWORD *)v2 += 2;
  }
  v7 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_20;
  if ((*(_BYTE *)(v7 + 45) & 2) == 0)
  {
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v1 = (*(_BYTE *)(*(_QWORD *)(v9 + 104) + 239) & 0x18) != 0;
LABEL_13:
        if (v6 && v2)
        {
          if (*(_DWORD *)v2 == 2)
            WTF::StringImpl::destroy(v2, v3);
          else
            *(_DWORD *)v2 -= 2;
        }
        return v1;
      }
    }
LABEL_20:
    v1 = 0;
    goto LABEL_13;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::compareAnimationsByCompositeOrder(WebCore *this, const WebCore::WebAnimation *a2, const WebCore::WebAnimation *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  const WebCore::CSSAnimation *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  _BOOL8 v30;
  BOOL v31;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  const WTF::StringImpl *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore *v41;
  const WebCore::CSSAnimation *v42;
  WebCore *v43;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  unsigned __int8 v52;
  char v53;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  char v57;
  char v58;
  char v59;
  WTF::StringImpl **v60;

  if (this == a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195688E6CLL);
  }
  if ((*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 104))(this)
    && (v6 = *((_QWORD *)this + 23)) != 0
    && *(_QWORD *)(v6 + 8))
  {
    if (*((_BYTE *)this + 208))
    {
      v7 = (WTF::StringImpl *)*((_QWORD *)this + 25);
      if (v7)
      {
        v8 = *(_DWORD *)v7;
        *(_DWORD *)v7 += 2;
        if (v8)
          *(_DWORD *)v7 = v8;
        else
          WTF::StringImpl::destroy(v7, v5);
      }
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  if ((*(unsigned int (**)(const WebCore::WebAnimation *))(*(_QWORD *)a2 + 104))(a2)
    && (v13 = *((_QWORD *)a2 + 23)) != 0
    && *(_QWORD *)(v13 + 8))
  {
    if (*((_BYTE *)a2 + 208))
    {
      v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 25);
      if (v14)
      {
        v15 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 2;
        if (v15)
          *(_DWORD *)v14 = v15;
        else
          WTF::StringImpl::destroy(v14, v10);
      }
    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  if (v9)
  {
    if ((*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 120))(this))
      v17 = (unint64_t)this;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  if (v16)
  {
    if ((*(unsigned int (**)(const WebCore::WebAnimation *))(*(_QWORD *)a2 + 120))(a2))
      v18 = (unint64_t)a2;
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  if (!(v17 | v18))
  {
    if (v9)
    {
      if ((*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 112))(this))
        v41 = this;
      else
        v41 = 0;
    }
    else
    {
      v41 = 0;
    }
    if (v16)
    {
      if ((*(unsigned int (**)(const WebCore::WebAnimation *))(*(_QWORD *)a2 + 112))(a2))
        v42 = a2;
      else
        v42 = 0;
    }
    else
    {
      v42 = 0;
    }
    if (!((unint64_t)v41 | (unint64_t)v42))
    {
      v45 = *((_QWORD *)this + 21);
      v46 = *((_QWORD *)a2 + 21);
      if (v45 == v46)
      {
        __break(0xC471u);
        JUMPOUT(0x195688E8CLL);
      }
      return v45 < v46;
    }
    if ((v41 != 0) == (v42 != 0))
    {
      v43 = v41;
      return WebCore::compareCSSAnimations(v43, v42, v11);
    }
    return v42 == 0;
  }
  v19 = v17 != 0;
  if ((v17 != 0) != (v18 != 0))
    return v18 == 0;
  v20 = *(WTF::StringImpl **)(v17 + 184);
  if (!v20)
    goto LABEL_57;
  v21 = *((_QWORD *)v20 + 1);
  if (!v21)
    goto LABEL_57;
  v20 = (WTF::StringImpl *)*(unsigned __int8 *)(v17 + 208);
  if (*(_BYTE *)(v17 + 208))
  {
    v22 = *(_DWORD *)(v17 + 192);
    v20 = *(WTF::StringImpl **)(v17 + 200);
    if (v20)
      *(_DWORD *)v20 += 2;
    v23 = 0;
    v54 = v21;
    v55 = v22;
    v56 = v20;
    v19 = 1;
    v57 = 1;
    v24 = 1;
  }
  else
  {
    v19 = 0;
    v23 = 0;
    v54 = v21;
    LOBYTE(v55) = 0;
    v24 = 1;
    v57 = 0;
  }
  while (1)
  {
    v58 = v24;
    v25 = *(_QWORD *)(v18 + 184);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        v27 = *(unsigned __int8 *)(v18 + 208);
        if (*(_BYTE *)(v18 + 208))
        {
          v28 = *(_DWORD *)(v18 + 192);
          v12 = *(WTF::StringImpl **)(v18 + 200);
          if (v12)
            *(_DWORD *)v12 += 2;
          v49 = v26;
          v50 = v28;
          v51 = v12;
          v29 = 1;
          v52 = 1;
        }
        else
        {
          v29 = 0;
          v49 = v26;
          LOBYTE(v50) = 0;
          v52 = 0;
        }
        v53 = 1;
        if ((v23 & 1) == 0)
          break;
      }
    }
    __break(1u);
LABEL_57:
    v24 = 0;
    LOBYTE(v54) = 0;
    v23 = 1;
  }
  if (v54 != v26)
    goto LABEL_42;
  if (v27 == 0 || !v19)
  {
    if (v19 != (v27 != 0))
    {
LABEL_42:
      v30 = WebCore::compareStyleOriginatedAnimationOwningElementPositionsInDocumentTreeOrder(&v54, &v49);
      v31 = 0;
      goto LABEL_43;
    }
  }
  else if (v55 != v50 || v20 != v12)
  {
    goto LABEL_42;
  }
  v33 = *(double *)(v17 + 248);
  v34 = *(double *)(v18 + 248);
  if (v33 != v34)
  {
    v31 = 0;
    v30 = v33 < v34;
LABEL_43:
    if (!v31 && v29 && v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v10);
      else
        *(_DWORD *)v51 -= 2;
    }
    if (v58 && v57 && v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v10);
      else
        *(_DWORD *)v56 -= 2;
    }
    return v30;
  }
  v35 = *(unsigned int *)(v17 + 240);
  if ((_DWORD)v35 != -1)
  {
    v60 = &v47;
    ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore13CSSTransition18transitionPropertyEvE3__0JZNKS9_18transitionPropertyEvE3__1EEEEEJRKNS0_6__implIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v48, &v60, v17 + 232);
    v36 = *(unsigned int *)(v18 + 240);
    if ((_DWORD)v36 != -1)
    {
      v60 = (WTF::StringImpl **)&v59;
      ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore13CSSTransition18transitionPropertyEvE3__0JZNKS9_18transitionPropertyEvE3__1EEEEEJRKNS0_6__implIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEEEEDcOT_DpOT0____fmatrix[v36])(&v47, &v60, v18 + 232);
      v38 = WTF::codePointCompare(v48, v47, v37);
      v39 = v47;
      v47 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v10);
        else
          *(_DWORD *)v39 -= 2;
      }
      v30 = v38 >> 31;
      v40 = v48;
      v48 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v10);
        else
          *(_DWORD *)v40 -= 2;
      }
      v29 = v52;
      v31 = v53 == 0;
      goto LABEL_43;
    }
  }
  v43 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::compareCSSAnimations(v43, v42, v11);
}

uint64_t WebCore::compareCSSAnimations(WebCore *this, const WebCore::CSSAnimation *a2, const WebCore::CSSAnimation *a3)
{
  char v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  WebCore::Node *v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  _BOOL8 v15;
  WTF::StringImpl *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WebCore::Node *v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  WebCore::Node *v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;

  v6 = *((_QWORD *)this + 23);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v6 = *((unsigned __int8 *)this + 208);
    if (!*((_BYTE *)this + 208))
      goto LABEL_19;
    v8 = *((_DWORD *)this + 48);
    v6 = *((_QWORD *)this + 25);
    if (v6)
      *(_DWORD *)v6 += 2;
    v9 = 0;
    v30 = (WebCore::Node *)v7;
    v31 = v8;
    v32 = v6;
    v3 = 1;
    v33 = 1;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    LOBYTE(v30) = 0;
    v9 = 1;
  }
  while (1)
  {
    v34 = v10;
    v7 = *((_QWORD *)a2 + 23);
    if (v7)
    {
      v11 = *(WebCore::Node **)(v7 + 8);
      if (v11)
      {
        v12 = *((unsigned __int8 *)a2 + 208);
        if (*((_BYTE *)a2 + 208))
        {
          v13 = *((_DWORD *)a2 + 48);
          v7 = *((_QWORD *)a2 + 25);
          if (v7)
            *(_DWORD *)v7 += 2;
          v25 = v11;
          v26 = v13;
          v27 = v7;
          v28 = 1;
        }
        else
        {
          v25 = *(WebCore::Node **)(v7 + 8);
          LOBYTE(v26) = 0;
          v28 = 0;
        }
        v29 = 1;
        if ((v9 & 1) == 0)
          break;
      }
    }
    __break(1u);
LABEL_19:
    v3 = 0;
    v9 = 0;
    v30 = (WebCore::Node *)v7;
    LOBYTE(v31) = 0;
    v10 = 1;
    v33 = 0;
  }
  if (v30 != v11)
    goto LABEL_15;
  if (v12 == 0 || (v3 & 1) == 0)
  {
    if ((v3 & 1) != (v12 != 0))
    {
LABEL_15:
      v15 = WebCore::compareStyleOriginatedAnimationOwningElementPositionsInDocumentTreeOrder((uint64_t *)&v30, (uint64_t *)&v25);
LABEL_16:
      std::optional<WebCore::Styleable const>::~optional((uint64_t)&v25, v14);
      std::optional<WebCore::Styleable const>::~optional((uint64_t)&v30, v16);
      return v15;
    }
  }
  else if (v31 != v26 || v6 != v7)
  {
    goto LABEL_15;
  }
  v18 = *(_QWORD *)(WebCore::Element::ensureKeyframeEffectStack(v11, (uint64_t)&v31) + 64);
  v19 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v19)
  {
    v20 = *((_QWORD *)this + 27);
    v21 = *((_QWORD *)a2 + 27);
    v22 = 8 * v19;
    v23 = *(_QWORD **)(v18 + 8);
    do
    {
      v15 = *v23 == v20;
      if (*v23 == v20 || *v23 == v21)
        goto LABEL_16;
      ++v23;
      v22 -= 8;
    }
    while (v22);
  }
  result = 179;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::pseudoElementIdentifierAsString@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  size_t v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  unsigned __int128 *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  unsigned __int128 *v36;
  unsigned __int128 *v37;
  unsigned __int128 v38;
  unsigned __int128 *v39;
  unsigned __int128 *v40;
  unsigned __int128 v41;
  const char *v42;
  unsigned __int128 *v43;
  unsigned __int128 *v44;
  unsigned __int128 v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;

  if (!*(_BYTE *)(result + 16))
  {
LABEL_25:
    v3 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v3 += 2;
    goto LABEL_27;
  }
  if ((_MergedGlobals_260 & 1) == 0)
  {
    _MergedGlobals_36 += 2;
    qword_1EE337A08 = (uint64_t)&_MergedGlobals_36;
    _MergedGlobals_260 = 1;
  }
  if ((byte_1EE3379F9 & 1) == 0)
  {
    dword_1ECE7B6E0 += 2;
    qword_1EE337A10 = (uint64_t)&dword_1ECE7B6E0;
    byte_1EE3379F9 = 1;
  }
  if ((byte_1EE3379FA & 1) == 0)
  {
    dword_1ECE7B700 += 2;
    qword_1EE337A18 = (uint64_t)&dword_1ECE7B700;
    byte_1EE3379FA = 1;
  }
  if ((byte_1EE3379FB & 1) == 0)
  {
    dword_1ECE7B720 += 2;
    qword_1EE337A20 = (uint64_t)&dword_1ECE7B720;
    byte_1EE3379FB = 1;
  }
  if ((byte_1EE3379FC & 1) == 0)
  {
    dword_1ECE7B740 += 2;
    qword_1EE337A28 = (uint64_t)&dword_1ECE7B740;
    byte_1EE3379FC = 1;
  }
  if ((byte_1EE3379FD & 1) == 0)
  {
    dword_1ECE7B760 += 2;
    qword_1EE337A30 = (uint64_t)&dword_1ECE7B760;
    byte_1EE3379FD = 1;
  }
  if ((byte_1EE3379FE & 1) == 0)
  {
    dword_1ECE7B780 += 2;
    qword_1EE337A38 = (uint64_t)&dword_1ECE7B780;
    byte_1EE3379FE = 1;
  }
  if ((byte_1EE3379FF & 1) == 0)
  {
    dword_1ECE7B7A0 += 2;
    qword_1EE337A40 = (uint64_t)&dword_1ECE7B7A0;
    byte_1EE3379FF = 1;
  }
  if ((byte_1EE337A00 & 1) == 0)
  {
    dword_1ECE7B7C0 += 2;
    qword_1EE337A48 = (uint64_t)&dword_1ECE7B7C0;
    byte_1EE337A00 = 1;
  }
  if ((byte_1EE337A01 & 1) == 0)
  {
    dword_1ECE7B7E0 += 2;
    qword_1EE337A50 = (uint64_t)&dword_1ECE7B7E0;
    byte_1EE337A01 = 1;
  }
  switch(*(_DWORD *)result)
  {
    case 1:
      v3 = qword_1EE337A20;
      if (qword_1EE337A20)
        dword_1ECE7B720 += 2;
      goto LABEL_27;
    case 2:
      v3 = qword_1EE337A18;
      if (qword_1EE337A18)
        dword_1ECE7B700 += 2;
      goto LABEL_27;
    case 3:
      v3 = qword_1EE337A28;
      if (qword_1EE337A28)
        dword_1ECE7B740 += 2;
      goto LABEL_27;
    case 4:
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        v23 = *(_DWORD *)(v4 + 4);
        *(_DWORD *)v4 += 2;
        if (v23 < 0)
          goto LABEL_173;
      }
      else
      {
        v23 = 0;
      }
      v6 = __OFADD__(v23, 1);
      v24 = v23 + 1;
      if (v6)
        goto LABEL_173;
      v6 = __OFADD__(v24, 1);
      v25 = v24 + 1;
      if (v6)
        goto LABEL_173;
      v26 = (v25 + 11);
      if (__OFADD__(v25, 11))
        goto LABEL_173;
      if (!v4)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
        v3 = v51;
        if (!v51)
          goto LABEL_173;
        *(_DWORD *)v51 = 2;
        *(_DWORD *)(v51 + 4) = v26;
        *(_QWORD *)(v51 + 20) = *(_QWORD *)"::highlight";
        *(_QWORD *)(v51 + 8) = v51 + 20;
        *(_DWORD *)(v51 + 16) = 4;
        *(_DWORD *)(v51 + 27) = 1952999273;
        *(_WORD *)(v51 + 31) = 10536;
LABEL_27:
        *a2 = v3;
        return result;
      }
      if ((*(_BYTE *)(v4 + 16) & 4) == 0)
      {
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a2, v26, 0, "::highlight", 0xBu, v4);
        if (!*a2)
          goto LABEL_174;
        goto LABEL_121;
      }
      result = WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
      v27 = v51;
      if (!v51)
      {
LABEL_173:
        *a2 = 0;
LABEL_174:
        __break(0xC471u);
        JUMPOUT(0x195689C10);
      }
      *(_QWORD *)(v51 + 20) = *(_QWORD *)"::highlight";
      *(_DWORD *)v51 = 2;
      *(_DWORD *)(v51 + 4) = v26;
      *(_QWORD *)(v51 + 8) = v51 + 20;
      *(_DWORD *)(v51 + 16) = 4;
      *(_DWORD *)(v51 + 27) = 1952999273;
      *(_BYTE *)(v51 + 31) = 40;
      v28 = (_BYTE *)(v51 + 32);
      v10 = *(_BYTE **)(v4 + 8);
      v29 = *(unsigned int *)(v4 + 4);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
LABEL_117:
        if ((_DWORD)v29)
        {
          if ((_DWORD)v29 == 1)
            *v28 = *v10;
          else
            result = (uint64_t)memcpy(v28, v10, v29);
        }
        goto LABEL_120;
      }
      if (v29 < 0x10)
      {
        v43 = (unsigned __int128 *)(v51 + 32);
      }
      else
      {
        v43 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
        v44 = (unsigned __int128 *)(v51 + 32);
        do
        {
          v45 = (unsigned __int128)vld2q_s8(v10);
          v10 += 32;
          *v44++ = v45;
        }
        while (v44 != v43);
      }
      while (v43 != (unsigned __int128 *)&v28[v29])
      {
        v50 = *v10;
        v10 += 2;
        *(_BYTE *)v43 = v50;
        v43 = (unsigned __int128 *)((char *)v43 + 1);
      }
LABEL_120:
      v28[*(unsigned int *)(v4 + 4)] = 41;
      *a2 = v27;
LABEL_121:
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v10);
      *(_DWORD *)v4 -= 2;
      return result;
    case 5:
      v3 = qword_1EE337A30;
      if (qword_1EE337A30)
        dword_1ECE7B760 += 2;
      goto LABEL_27;
    case 6:
      v3 = qword_1EE337A10;
      if (qword_1EE337A10)
        dword_1ECE7B6E0 += 2;
      goto LABEL_27;
    case 7:
      v3 = qword_1EE337A08;
      if (qword_1EE337A08)
        _MergedGlobals_36 += 2;
      goto LABEL_27;
    case 8:
      v3 = qword_1EE337A38;
      if (qword_1EE337A38)
        dword_1ECE7B780 += 2;
      goto LABEL_27;
    case 0xA:
      v3 = qword_1EE337A50;
      if (qword_1EE337A50)
        dword_1ECE7B7E0 += 2;
      goto LABEL_27;
    case 0xB:
      v3 = qword_1EE337A40;
      if (qword_1EE337A40)
        dword_1ECE7B7A0 += 2;
      goto LABEL_27;
    case 0xC:
      v3 = qword_1EE337A48;
      if (qword_1EE337A48)
        dword_1ECE7B7C0 += 2;
      goto LABEL_27;
    case 0xD:
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        v15 = *(_DWORD *)(v4 + 4);
        *(_DWORD *)v4 += 2;
        if (v15 < 0)
          goto LABEL_169;
      }
      else
      {
        v15 = 0;
      }
      v6 = __OFADD__(v15, 1);
      v16 = v15 + 1;
      if (!v6)
      {
        v6 = __OFADD__(v16, 1);
        v17 = v16 + 1;
        if (!v6)
        {
          v18 = (v17 + 23);
          if (!__OFADD__(v17, 23))
          {
            if (v4)
            {
              if ((*(_BYTE *)(v4 + 16) & 4) == 0)
              {
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a2, v18, 0, "::view-transition-group", 0x17u, v4);
                if (*a2)
                  goto LABEL_121;
LABEL_170:
                __break(0xC471u);
                JUMPOUT(0x195689BF8);
              }
              result = WTF::tryFastCompactMalloc((WTF *)(v18 + 20));
              v27 = v51;
              if (v51)
              {
                *(_DWORD *)v51 = 2;
                *(_DWORD *)(v51 + 4) = v18;
                *(_QWORD *)(v51 + 8) = v51 + 20;
                *(_DWORD *)(v51 + 16) = 4;
                qmemcpy((void *)(v51 + 20), "::view-transition-group(", 24);
                v28 = (_BYTE *)(v51 + 44);
                v10 = *(_BYTE **)(v4 + 8);
                v29 = *(unsigned int *)(v4 + 4);
                if ((*(_BYTE *)(v4 + 16) & 4) != 0)
                  goto LABEL_117;
                if (v29 < 0x10)
                {
                  v36 = (unsigned __int128 *)(v51 + 44);
                }
                else
                {
                  v36 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
                  v37 = (unsigned __int128 *)(v51 + 44);
                  do
                  {
                    v38 = (unsigned __int128)vld2q_s8(v10);
                    v10 += 32;
                    *v37++ = v38;
                  }
                  while (v37 != v36);
                }
                while (v36 != (unsigned __int128 *)&v28[v29])
                {
                  v48 = *v10;
                  v10 += 2;
                  *(_BYTE *)v36 = v48;
                  v36 = (unsigned __int128 *)((char *)v36 + 1);
                }
                goto LABEL_120;
              }
            }
            else
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v18 + 20));
              v3 = v51;
              if (v51)
              {
                *(_DWORD *)v51 = 2;
                *(_DWORD *)(v51 + 4) = v18;
                *(_QWORD *)(v51 + 8) = v51 + 20;
                *(_DWORD *)(v51 + 16) = 4;
                qmemcpy((void *)(v51 + 20), "::view-transition-group()", 25);
                goto LABEL_27;
              }
            }
          }
        }
      }
LABEL_169:
      *a2 = 0;
      goto LABEL_170;
    case 0xE:
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        v11 = *(_DWORD *)(v4 + 4);
        *(_DWORD *)v4 += 2;
        if (v11 < 0)
          goto LABEL_167;
      }
      else
      {
        v11 = 0;
      }
      v6 = __OFADD__(v11, 1);
      v12 = v11 + 1;
      if (!v6)
      {
        v6 = __OFADD__(v12, 1);
        v13 = v12 + 1;
        if (!v6)
        {
          v14 = (v13 + 28);
          if (!__OFADD__(v13, 28))
          {
            if (v4)
            {
              if ((*(_BYTE *)(v4 + 16) & 4) == 0)
              {
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a2, v14, 0, "::view-transition-image-pair", 0x1Cu, v4);
                if (*a2)
                  goto LABEL_121;
LABEL_168:
                __break(0xC471u);
                JUMPOUT(0x195689BECLL);
              }
              result = WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
              v27 = v51;
              if (v51)
              {
                *(_DWORD *)v51 = 2;
                *(_DWORD *)(v51 + 4) = v14;
                *(_QWORD *)(v51 + 8) = v51 + 20;
                *(_DWORD *)(v51 + 16) = 4;
                qmemcpy((void *)(v51 + 20), "::view-transition-image-pair(", 29);
                v28 = (_BYTE *)(v51 + 49);
                v10 = *(_BYTE **)(v4 + 8);
                v29 = *(unsigned int *)(v4 + 4);
                if ((*(_BYTE *)(v4 + 16) & 4) != 0)
                  goto LABEL_117;
                if (v29 < 0x10)
                {
                  v33 = (unsigned __int128 *)(v51 + 49);
                }
                else
                {
                  v33 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
                  v34 = (unsigned __int128 *)(v51 + 49);
                  do
                  {
                    v35 = (unsigned __int128)vld2q_s8(v10);
                    v10 += 32;
                    *v34++ = v35;
                  }
                  while (v34 != v33);
                }
                while (v33 != (unsigned __int128 *)&v28[v29])
                {
                  v47 = *v10;
                  v10 += 2;
                  *(_BYTE *)v33 = v47;
                  v33 = (unsigned __int128 *)((char *)v33 + 1);
                }
                goto LABEL_120;
              }
            }
            else
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
              v3 = v51;
              if (v51)
              {
                *(_DWORD *)v51 = 2;
                *(_DWORD *)(v51 + 4) = v14;
                *(_QWORD *)(v51 + 8) = v51 + 20;
                *(_DWORD *)(v51 + 16) = 4;
                qmemcpy((void *)(v51 + 20), "::view-transition-image-pair()", 30);
                goto LABEL_27;
              }
            }
          }
        }
      }
LABEL_167:
      *a2 = 0;
      goto LABEL_168;
    case 0xF:
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 4);
        *(_DWORD *)v4 += 2;
        if (v5 < 0)
          goto LABEL_165;
      }
      else
      {
        v5 = 0;
      }
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
        goto LABEL_165;
      v6 = __OFADD__(v7, 1);
      v8 = v7 + 1;
      if (v6)
        goto LABEL_165;
      v9 = (v8 + 21);
      if (__OFADD__(v8, 21))
        goto LABEL_165;
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 16) & 4) == 0)
        {
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a2, v9, 0, "::view-transition-old", 0x15u, v4);
          if (*a2)
            goto LABEL_121;
LABEL_166:
          __break(0xC471u);
          JUMPOUT(0x195689BE0);
        }
        result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
        v27 = v51;
        if (v51)
        {
          *(_DWORD *)v51 = 2;
          *(_DWORD *)(v51 + 4) = v9;
          *(_QWORD *)(v51 + 8) = v51 + 20;
          *(_DWORD *)(v51 + 16) = 4;
          qmemcpy((void *)(v51 + 20), "::view-transition-old(", 22);
          v28 = (_BYTE *)(v51 + 42);
          v10 = *(_BYTE **)(v4 + 8);
          v29 = *(unsigned int *)(v4 + 4);
          if ((*(_BYTE *)(v4 + 16) & 4) != 0)
            goto LABEL_117;
          if (v29 < 0x10)
          {
            v30 = (unsigned __int128 *)(v51 + 42);
          }
          else
          {
            v30 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
            v31 = (unsigned __int128 *)(v51 + 42);
            do
            {
              v32 = (unsigned __int128)vld2q_s8(v10);
              v10 += 32;
              *v31++ = v32;
            }
            while (v31 != v30);
          }
          while (v30 != (unsigned __int128 *)&v28[v29])
          {
            v46 = *v10;
            v10 += 2;
            *(_BYTE *)v30 = v46;
            v30 = (unsigned __int128 *)((char *)v30 + 1);
          }
          goto LABEL_120;
        }
LABEL_165:
        *a2 = 0;
        goto LABEL_166;
      }
      result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
      v3 = v51;
      if (!v51)
        goto LABEL_165;
      *(_DWORD *)v51 = 2;
      *(_DWORD *)(v51 + 4) = v9;
      *(_QWORD *)(v51 + 8) = v51 + 20;
      *(_DWORD *)(v51 + 16) = 4;
      v42 = "::view-transition-old";
      goto LABEL_132;
    case 0x10:
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        v19 = *(_DWORD *)(v4 + 4);
        *(_DWORD *)v4 += 2;
        if (v19 < 0)
          goto LABEL_171;
      }
      else
      {
        v19 = 0;
      }
      v6 = __OFADD__(v19, 1);
      v20 = v19 + 1;
      if (!v6)
      {
        v6 = __OFADD__(v20, 1);
        v21 = v20 + 1;
        if (!v6)
        {
          v22 = (v21 + 21);
          if (!__OFADD__(v21, 21))
          {
            if (v4)
            {
              if ((*(_BYTE *)(v4 + 16) & 4) == 0)
              {
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)a2, v22, 0, "::view-transition-new", 0x15u, v4);
                if (*a2)
                  goto LABEL_121;
LABEL_172:
                __break(0xC471u);
                JUMPOUT(0x195689C04);
              }
              result = WTF::tryFastCompactMalloc((WTF *)(v22 + 20));
              v27 = v51;
              if (v51)
              {
                *(_DWORD *)v51 = 2;
                *(_DWORD *)(v51 + 4) = v22;
                *(_QWORD *)(v51 + 8) = v51 + 20;
                *(_DWORD *)(v51 + 16) = 4;
                qmemcpy((void *)(v51 + 20), "::view-transition-new(", 22);
                v28 = (_BYTE *)(v51 + 42);
                v10 = *(_BYTE **)(v4 + 8);
                v29 = *(unsigned int *)(v4 + 4);
                if ((*(_BYTE *)(v4 + 16) & 4) != 0)
                  goto LABEL_117;
                if (v29 < 0x10)
                {
                  v39 = (unsigned __int128 *)(v51 + 42);
                }
                else
                {
                  v39 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
                  v40 = (unsigned __int128 *)(v51 + 42);
                  do
                  {
                    v41 = (unsigned __int128)vld2q_s8(v10);
                    v10 += 32;
                    *v40++ = v41;
                  }
                  while (v40 != v39);
                }
                while (v39 != (unsigned __int128 *)&v28[v29])
                {
                  v49 = *v10;
                  v10 += 2;
                  *(_BYTE *)v39 = v49;
                  v39 = (unsigned __int128 *)((char *)v39 + 1);
                }
                goto LABEL_120;
              }
            }
            else
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v22 + 20));
              v3 = v51;
              if (v51)
              {
                *(_DWORD *)v51 = 2;
                *(_DWORD *)(v51 + 4) = v22;
                *(_QWORD *)(v51 + 8) = v51 + 20;
                *(_DWORD *)(v51 + 16) = 4;
                v42 = "::view-transition-new";
LABEL_132:
                *(_OWORD *)(v3 + 20) = *(_OWORD *)v42;
                *(_QWORD *)(v3 + 33) = *(_QWORD *)(v42 + 13);
                *(_WORD *)(v3 + 41) = 10536;
                goto LABEL_27;
              }
            }
          }
        }
      }
LABEL_171:
      *a2 = 0;
      goto LABEL_172;
    default:
      goto LABEL_25;
  }
}

void WebCore::pseudoElementIdentifierFromString(unsigned int **this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>, int16x8_t a4@<Q0>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char *v19;
  char v20;
  char v21;
  char **v22;

  if (*this)
  {
    if (a2)
    {
      LOBYTE(v19) = *((_BYTE *)a2 + 3384) == 2;
      v7 = *((_QWORD *)a2 + 85);
      v8 = *(_DWORD *)(v7 + 704);
      v9 = *(_QWORD *)(v7 + 688);
      *((_QWORD *)&v11 + 1) = v9;
      *(_QWORD *)&v11 = *(_QWORD *)(v7 + 680);
      v10 = v11 >> 18;
      *((_QWORD *)&v11 + 1) = v9;
      v12 = v11 >> 14;
      *((_QWORD *)&v11 + 1) = v11;
      *(_QWORD *)&v11 = *(_QWORD *)(v7 + 672);
      a4.i16[0] = v11 >> 18;
      a4.i16[1] = v11 >> 38;
      a4.i16[2] = v12;
      a4.i16[3] = v10;
      v13 = *(_QWORD *)(v7 + 696);
      *(int8x8_t *)a4.i8 = vand_s8(*(int8x8_t *)a4.i8, (int8x8_t)0x1000100010001);
      *(_DWORD *)((char *)&v19 + 1) = vmovn_s16(a4).u32[0];
      BYTE5(v19) = (v9 & 0x20000000) != 0;
      BYTE6(v19) = (v13 & 0x20000000000000) != 0;
      HIBYTE(v19) = (v8 & 0x400) != 0;
      v20 = 0;
    }
    else
    {
      v18 = 0;
      WTF::URL::invalidate((WTF::URL *)&v18);
      v15 = v18;
      if (v18)
        *(_DWORD *)v18 += 2;
      v16 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
      if (v16 != -1)
      {
        v19 = &v21;
        v22 = &v19;
        std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
      }
      v19 = 0;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v17 = v18;
      v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    WebCore::CSSSelectorParser::parsePseudoElement(this, (const WTF::String *)&v19, (uint64_t)a3);
  }
  else
  {
    *a3 = 1;
    a3[8] = 0;
    a3[24] = 0;
  }
}

void WebCore::ViewTimeline::~ViewTimeline(WebCore::ViewTimeline *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ViewTimeline::~ViewTimeline(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_BYTE *)this + 132) && *((_BYTE *)this + 128) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 31));
  }
  if (*((_BYTE *)this + 120) && *((_BYTE *)this + 116) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 28));
  }
  v3 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v12 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v12)
      {
        v18 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v12));
        v5 = v18;
      }
      v13 = *(WTF **)(v5 + 16);
      if (v13)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v16 = v5;
        WTF::fastFree(v13, a2);
        v5 = v16;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *(_QWORD *)this = off_1E3391D80;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v14)
      {
        v19 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v14));
        v9 = v19;
      }
      v15 = *(WTF **)(v9 + 16);
      if (v15)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v17 = v9;
        WTF::fastFree(v15, a2);
        v9 = v17;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  WebCore::AnimationTimeline::~AnimationTimeline(this, a2);
}

uint64_t WebCore::ViewTimeline::isViewTimeline(WebCore::ViewTimeline *this)
{
  return 1;
}

uint64_t WebCore::WebAnimation::isStyleOriginatedAnimation(WebCore::WebAnimation *this)
{
  return 0;
}

uint64_t WebCore::WebAnimation::bindingsReplaceState(WebCore::WebAnimation *this)
{
  return *((unsigned __int8 *)this + 163);
}

BOOL WebCore::WebAnimation::bindingsPending(WebCore::WebAnimation *this)
{
  return *((_BYTE *)this + 162) || *((_BYTE *)this + 161) != 0;
}

uint64_t WebCore::WebAnimation::bindingsReady(WebCore::WebAnimation *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t WebCore::WebAnimation::bindingsFinished(WebCore::WebAnimation *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t WebCore::WebAnimation::bindingsPlay@<X0>(WebCore::WebAnimation *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return WebCore::WebAnimation::play((uint64_t)this, 1, a2, a3);
}

uint64_t WebCore::WebAnimation::canHaveGlobalPosition(WebCore::WebAnimation *this)
{
  return 1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF7SecondsEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebAnimation::commitStyles(void)::$_0::operator() const(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::{lambda(WebCore::CSSPropertyID)#1},WebCore::WebAnimation::commitStyles(void)::$_0::operator() const(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(_QWORD **a1, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::StringBuilder *v4;
  WTF::String *v5;
  __n128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;

  v2 = *a1;
  v3 = *a2;
  WebCore::ComputedStyleExtractor::valueForPropertyInStyle(**a1, *(_QWORD *)(*a1)[1], v3, 0, 1);
  if (!v18)
    return 0;
  v7 = *(_QWORD *)v2[2];
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v17, (uint64_t)v18, v4, v5, v6);
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v15, *(const WebCore::Document **)(*(_QWORD *)(*(_QWORD *)v2[3] + 40) + 8));
  v9 = WebCore::MutableStyleProperties::setProperty(v7, v3, (uint64_t)&v17, 0, (uint64_t)v15, 0);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v8);
    else
      *v13 -= 2;
  }
  return v9;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebAnimation::commitStyles(void)::$_0::operator() const(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::{lambda(WebCore::CSSPropertyID)#1},WebCore::WebAnimation::commitStyles(void)::$_0::operator() const(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(uint64_t *a1, const WTF::AtomString *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  _DWORD *v8;
  WebCore::MutableStyleProperties *v9;
  const WebCore::CSSParserContext *v10;
  __n128 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18[5];
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;

  v4 = *a1;
  v7.n128_f64[0] = WebCore::ComputedStyleExtractor::customPropertyValue(*(WebCore::ComputedStyleExtractor **)(*a1 + 32), a2, a3, &v21);
  v8 = v21;
  if (!v21)
    return 0;
  v9 = **(WebCore::MutableStyleProperties ***)(v4 + 40);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v20, (uint64_t)v21, v5, v6, v7);
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v18, *(const WebCore::Document **)(*(_QWORD *)(**(_QWORD **)(v4 + 48) + 40) + 8));
  v13 = WebCore::MutableStyleProperties::setCustomProperty(v9, a2, (const WTF::AtomString *)&v20, 0, (uint64_t)v18, v10, v11);
  v14 = v19;
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v18[0];
  v18[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*v8 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v12);
  else
    *v8 -= 2;
  return v13;
}

BOOL WebCore::compareStyleOriginatedAnimationOwningElementPositionsInDocumentTreeOrder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v20;
  _BOOL8 v22;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;

  v2 = *a1;
  if (*a1 != *a2)
  {
    v3 = 0;
    v4 = *a1;
    do
    {
      v4 = *(_QWORD *)(v4 + 32);
      ++v3;
    }
    while (v4);
    v5 = 0;
    v6 = v3 - 1;
    v7 = *a2;
    do
    {
      v7 = *(_QWORD *)(v7 + 32);
      ++v5;
    }
    while (v7);
    v8 = v5 - 1;
    v9 = v5 - v3;
    v10 = v3 - v5;
    if (v6 >= v8)
      v11 = *a1;
    else
      v11 = *a2;
    if (v6 < v8)
      v10 = v9;
    else
      v2 = *a2;
    if (v10)
    {
      v33 = v11;
      do
      {
        v11 = *(_QWORD *)(v33 + 32);
        v12 = v33;
        v33 = v11;
        --v10;
      }
      while (v10);
    }
    else
    {
      v12 = 0;
    }
    if (v11 == v2)
    {
      v14 = 0;
    }
    else
    {
      v13 = v2;
      v2 = v11;
      do
      {
        v12 = v2;
        v14 = v13;
        v2 = *(_QWORD *)(v2 + 32);
        v13 = *(_QWORD *)(v13 + 32);
      }
      while (v2 != v13);
    }
    v15 = v6 >= v8;
    if (v6 < v8)
      v16 = v14;
    else
      v16 = v12;
    if (v15)
      v17 = v14;
    else
      v17 = v12;
    if (!v2)
    {
      v20 = -127;
      return v20 != 129 && v20 < 0;
    }
    if (!v16)
    {
LABEL_34:
      v20 = -1;
      return v20 != 129 && v20 < 0;
    }
    if (!v17)
    {
LABEL_80:
      v20 = 1;
      return v20 != 129 && v20 < 0;
    }
    v18 = *(unsigned __int16 *)(v16 + 28);
    LODWORD(v2) = *(unsigned __int16 *)(v17 + 28);
    if (((v18 | v2) & 0x80) == 0)
    {
      if (v16 == v17)
        goto LABEL_34;
      do
        v16 = *(_QWORD *)(v16 + 56);
      while (v16 != v17 && v16 != 0);
      if (v16)
        goto LABEL_34;
      goto LABEL_80;
    }
LABEL_104:
    if ((v18 & 0x80) != 0)
      v20 = -127;
    else
      v20 = 1;
    if ((v2 & 0x80) == 0)
      v20 = -1;
    return v20 != 129 && v20 < 0;
  }
  v24 = *((unsigned __int8 *)a1 + 24);
  v25 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a1 + 24))
    v26 = v25 == 0;
  else
    v26 = 1;
  if (!v26)
  {
    v18 = *((_DWORD *)a1 + 2);
    v27 = *((_DWORD *)a2 + 2);
    if (v18 != v27 || a1[2] != a2[2])
    {
      if ((v18 - 13) > 3)
        goto LABEL_77;
      goto LABEL_61;
    }
LABEL_102:
    __break(0xC471u);
    goto LABEL_103;
  }
  LOBYTE(v18) = v24 != 0;
  if ((v24 != 0) == (v25 != 0))
    goto LABEL_102;
  v18 = *((_DWORD *)a1 + 2);
  v27 = *((_DWORD *)a2 + 2);
  if (!*((_BYTE *)a1 + 24) || (v18 - 13) >= 4)
  {
    if (!*((_BYTE *)a1 + 24))
    {
      v28 = 0;
LABEL_52:
      if (*((_BYTE *)a2 + 24))
      {
        if ((v27 - 1) > 0xF)
          v25 = 16;
        else
          v25 = byte_1968DF9A0[v27 - 1];
      }
      return v28 < v25;
    }
LABEL_77:
    v28 = 1;
    switch(v18)
    {
      case 1:
        v28 = 4;
        break;
      case 2:
        v28 = 3;
        break;
      case 3:
        v28 = 5;
        break;
      case 4:
        v28 = 6;
        break;
      case 5:
        goto LABEL_52;
      case 6:
        v28 = 2;
        break;
      case 7:
        v28 = 10;
        break;
      case 8:
        v28 = 8;
        break;
      case 10:
        v28 = 7;
        break;
      case 11:
        v28 = 9;
        break;
      case 12:
        v28 = 11;
        break;
      case 13:
        v28 = 12;
        break;
      case 14:
        v28 = 13;
        break;
      case 15:
        v28 = 14;
        break;
      case 16:
        v28 = 15;
        break;
      default:
        v28 = 16;
        break;
    }
    goto LABEL_52;
  }
LABEL_61:
  if (!*((_BYTE *)a2 + 24) || (v27 - 13) > 3 || a1[2] == a2[2])
    goto LABEL_77;
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 2112);
  if (v30)
    ++*(_DWORD *)(v30 + 24);
  v31 = *(_QWORD **)(v30 + 48);
  if (!v31)
  {
    v22 = 0;
    goto LABEL_75;
  }
  v2 = a1[2];
  LOBYTE(v18) = *((_BYTE *)a2 + 24);
  if (!(_BYTE)v18)
  {
    if (*v31 == v2)
    {
      v22 = 1;
LABEL_75:
      if (*(_DWORD *)(v30 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
      else
        --*(_DWORD *)(v30 + 24);
      return v22;
    }
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  while (1)
  {
    v22 = *v31 == v2;
    if (*v31 == v2 || *v31 == a2[2])
      break;
    v31 = (_QWORD *)v31[2];
    if (!v31)
    {
      v22 = 0;
      break;
    }
  }
  if (v30)
    goto LABEL_75;
  return v22;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<WebCore::WebAnimation& (WebCore::WebAnimation::*&)(void),WebCore::WebAnimation*>,WebCore::WebAnimation&>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebAnimation::cancel(WebCore::WebAnimation::Silently)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  v3 = (uint64_t *)a1[1];
  *a1 = &off_1E33920A0;
  a1[1] = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebAnimation::cancel(WebCore::WebAnimation::Silently)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33920A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebAnimation::cancel(WebCore::WebAnimation::Silently)::$_0,void>::call(uint64_t a1)
{
  char *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  char v4[8];
  WTF::StringImpl *v5;

  v1 = *(char **)(a1 + 8);
  v4[0] = 16;
  v5 = 0;
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::reject(v1, (WTF::StringImpl *)v4);
  result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

char *WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::reject(char *result, WTF::StringImpl *a2)
{
  char *v2;
  char v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char v20[8];
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  char v24;

  v2 = result;
  v3 = *(_BYTE *)a2;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result[32])
  {
    LOBYTE(v22) = v3;
    v23 = v4;
    v24 = 1;
    result = (char *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v22, (uint64_t)(result + 8));
    if (v24)
    {
      result = (char *)v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    result[8] = v3;
    *((_QWORD *)result + 2) = v4;
    result[24] = 1;
    result[32] = 1;
  }
  v5 = *((unsigned int *)v2 + 13);
  v22 = (WTF *)&v24;
  LODWORD(v23) = 1;
  HIDWORD(v23) = v5;
  if (v5 >= 2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
LABEL_49:
      __break(1u);
      return result;
    }
    result = (char *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v23) = v5;
    v22 = (WTF *)result;
    v5 = *((unsigned int *)v2 + 13);
  }
  else
  {
    result = &v24;
  }
  if ((_DWORD)v5)
  {
    v13 = (uint64_t *)*((_QWORD *)v2 + 5);
    v14 = 8 * v5;
    v15 = result;
    do
    {
      v16 = *v13++;
      ++*(_DWORD *)(v16 + 16);
      *(_QWORD *)v15 = v16;
      v15 += 8;
      v14 -= 8;
    }
    while (v14);
  }
  if (!v2[32] || !v2[24])
    goto LABEL_49;
  v6 = v2[8];
  v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  if (v7)
    *(_DWORD *)v7 += 2;
  if (HIDWORD(v23))
  {
    v10 = 8 * HIDWORD(v23);
    v18 = v6;
    do
    {
      v19 = result;
      v11 = *(_QWORD *)result;
      v20[0] = v6;
      if (v7)
        *(_DWORD *)v7 += 2;
      v21 = v7;
      WebCore::DeferredPromise::reject(v11, (uint64_t)v20, 1);
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = v19 + 8;
      v10 -= 8;
      v6 = v18;
    }
    while (v10);
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      result = (char *)WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v22;
  if (HIDWORD(v23))
  {
    v17 = 8 * HIDWORD(v23);
    do
    {
      result = *(char **)v8;
      *(_QWORD *)v8 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 4);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v17 -= 8;
    }
    while (v17);
    v8 = v22;
  }
  if (&v24 != (char *)v8 && v8 != 0)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return (char *)WTF::fastFree(v8, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebAnimation::resetPendingTasks(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  v3 = (uint64_t *)a1[1];
  *a1 = &off_1E33920C8;
  a1[1] = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebAnimation::resetPendingTasks(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  v3 = (uint64_t *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33920C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::~DOMPromiseProxyWithResolveCallback(v3, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebAnimation::resetPendingTasks(void)::$_0,void>::call(uint64_t a1)
{
  char *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  char v4[8];
  WTF::StringImpl *v5;

  v1 = *(char **)(a1 + 8);
  v4[0] = 16;
  v5 = 0;
  WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::reject(v1, (WTF::StringImpl *)v4);
  result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebAnimation::updateFinishedState(WebCore::WebAnimation::DidSeek,WebCore::WebAnimation::SynchronouslyNotify)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33920F0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 72))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebAnimation::updateFinishedState(WebCore::WebAnimation::DidSeek,WebCore::WebAnimation::SynchronouslyNotify)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33920F0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::WebAnimation::updateFinishedState(WebCore::WebAnimation::DidSeek,WebCore::WebAnimation::SynchronouslyNotify)::$_0,void>::call(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 8);
  if (result[157])
  {
    result[157] = 0;
    return WebCore::WebAnimation::finishNotificationSteps(result);
  }
  return result;
}

uint64_t WTF::downcast<WebCore::Element,WebCore::EventTarget>(uint64_t result)
{
  if (result && ((*(_BYTE *)(result + 22) & 2) == 0 || (*(_WORD *)(result + 28) & 8) == 0))
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, _OWORD *a4, unsigned int a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  char *v29;
  int8x16_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  unsigned __int128 *v44;
  unsigned __int128 *v45;
  unsigned __int128 v46;
  char v47;
  uint64_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v10 = (_QWORD *)result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      v11 = v48;
      if (v48)
      {
        v12 = (_BYTE *)(v48 + 20);
        *(_DWORD *)v48 = 2;
        *(_DWORD *)(v48 + 4) = a2;
        *(_QWORD *)(v48 + 8) = v48 + 20;
        *(_DWORD *)(v48 + 16) = 4;
        if (a5)
        {
          if (a5 == 1)
            *v12 = *(_BYTE *)a4;
          else
            result = (uint64_t)memcpy((void *)(v48 + 20), a4, a5);
        }
        v13 = &v12[a5];
        *v13 = 40;
        v14 = v13 + 1;
        if (a6)
        {
          v15 = *(_BYTE **)(a6 + 8);
          v16 = *(unsigned int *)(a6 + 4);
          if ((*(_BYTE *)(a6 + 16) & 4) != 0)
          {
            if ((_DWORD)v16)
            {
              if ((_DWORD)v16 == 1)
                *v14 = *v15;
              else
                result = (uint64_t)memcpy(v14, v15, v16);
            }
          }
          else
          {
            if (v16 < 0x10)
            {
              v44 = (unsigned __int128 *)v14;
            }
            else
            {
              v44 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
              v45 = (unsigned __int128 *)v14;
              do
              {
                v46 = (unsigned __int128)vld2q_s8(v15);
                v15 += 32;
                *v45++ = v46;
              }
              while (v45 != v44);
            }
            while (v44 != (unsigned __int128 *)&v14[v16])
            {
              v47 = *v15;
              v15 += 2;
              *(_BYTE *)v44 = v47;
              v44 = (unsigned __int128 *)((char *)v44 + 1);
            }
          }
          v17 = *(unsigned int *)(a6 + 4);
        }
        else
        {
          v17 = 0;
        }
        v14[v17] = 41;
      }
      goto LABEL_41;
    }
LABEL_42:
    v11 = 0;
    goto LABEL_41;
  }
  if (a2 > 0x7FFFFFEF)
    goto LABEL_42;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v11 = v48;
  if (v48)
  {
    v18 = (char *)(v48 + 20);
    *(_DWORD *)v48 = 2;
    *(_DWORD *)(v48 + 4) = a2;
    *(_QWORD *)(v48 + 8) = v48 + 20;
    *(_DWORD *)(v48 + 16) = 0;
    v19 = (char *)(v48 + 20 + 2 * a5);
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v20 = &v18[2 * (a5 & 0xFFFFFFC0)];
      v21 = 0uLL;
      do
      {
        v49.val[0] = (int8x16_t)*a4;
        v22 = *((int8x16_t *)a4 + 1);
        v51.val[0] = (int8x16_t)a4[2];
        v23 = a4[3];
        a4 += 4;
        v24 = v23;
        v51.val[1] = 0uLL;
        v53.val[0] = v22;
        v49.val[1] = 0uLL;
        v25 = v18;
        vst2q_s8(v25, v49);
        v25 += 32;
        v53.val[1] = 0uLL;
        vst2q_s8(v25, v53);
        v26 = v18 + 64;
        vst2q_s8(v26, v51);
        v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    while (v18 != v19)
    {
      v28 = *(unsigned __int8 *)a4;
      a4 = (_OWORD *)((char *)a4 + 1);
      *(_WORD *)v18 = v28;
      v18 += 2;
    }
    *(_WORD *)v19 = 40;
    v29 = v19 + 2;
    if (a6)
    {
      v30 = *(int8x16_t **)(a6 + 8);
      v31 = *(unsigned int *)(a6 + 4);
      if ((*(_BYTE *)(a6 + 16) & 4) != 0)
      {
        v32 = &v29[2 * v31];
        if (v31 >= 0x40)
        {
          v33 = &v29[2 * (v31 & 0xFFFFFFC0)];
          v35 = 0uLL;
          v36 = v29;
          do
          {
            v50.val[0] = *v30;
            v37 = v30[1];
            v52.val[0] = v30[2];
            v38 = v30[3];
            v30 += 4;
            v39 = v38;
            v52.val[1] = 0uLL;
            v54.val[0] = v37;
            v50.val[1] = 0uLL;
            v40 = v36;
            vst2q_s8(v40, v50);
            v40 += 32;
            v54.val[1] = 0uLL;
            vst2q_s8(v40, v54);
            v41 = v36 + 64;
            vst2q_s8(v41, v52);
            v42 = v36 + 96;
            vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
            v36 += 128;
          }
          while (v36 != v33);
        }
        else
        {
          v33 = v29;
        }
        while (v33 != v32)
        {
          v43 = v30->u8[0];
          v30 = (int8x16_t *)((char *)v30 + 1);
          *(_WORD *)v33 = v43;
          v33 += 2;
        }
      }
      else if ((_DWORD)v31 == 1)
      {
        *(_WORD *)v29 = v30->i16[0];
      }
      else if ((_DWORD)v31)
      {
        result = (uint64_t)memcpy(v29, v30, 2 * v31);
      }
      v34 = *(unsigned int *)(a6 + 4);
    }
    else
    {
      v34 = 0;
    }
    *(_WORD *)&v29[2 * v34] = 41;
  }
LABEL_41:
  *v10 = v11;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::animatablePropertyAsString(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::$_0,WebCore::animatablePropertyAsString(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>@<X0>(unsigned __int16 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::nameString(*a1);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::animatablePropertyAsString(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::$_0,WebCore::animatablePropertyAsString(std::variant<WebCore::CSSPropertyID,WTF::AtomString>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

void WebCore::CachedModuleScriptLoader::~CachedModuleScriptLoader(WebCore::CachedModuleScriptLoader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WebCore::CachedResource *v5;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;

  v4 = (uint64_t *)((char *)this + 64);
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v5 = *(WebCore::CachedResource **)(v3 + 8);
    if (v5)
    {
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this + 6);
      WebCore::CachedResourceHandleBase::setResource(v4, 0);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v4, a2);
  *((_QWORD *)this + 6) = &off_1E33F87C8;
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v7);
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  *(_QWORD *)this = off_1E3392C00;
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[4];
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedModuleScriptLoader::~CachedModuleScriptLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::CachedModuleScriptLoader::~CachedModuleScriptLoader(WebCore::CachedModuleScriptLoader *this, WTF::StringImpl *a2)
{
  WebCore::CachedModuleScriptLoader::~CachedModuleScriptLoader((WebCore::CachedModuleScriptLoader *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedModuleScriptLoader::~CachedModuleScriptLoader((WebCore::CachedModuleScriptLoader *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CachedModuleScriptLoader::load(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::CachedResource *v9;
  void *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::CachedResource *v19;
  WebCore::CachedResourceClient *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int *v24;
  WTF::StringImpl *v25;

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  v25 = v7;
  (*(void (**)(unsigned int **__return_ptr, _QWORD, uint64_t, uint64_t *, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(&v24, *(_QWORD *)(a1 + 32), a2, a3, &v25);
  v8 = a1 + 64;
  if (v24)
    v9 = (WebCore::CachedResource *)*((_QWORD *)v24 + 1);
  else
    v9 = 0;
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 64), v9);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v24, v10);
  if (*(_QWORD *)v8 && *(_QWORD *)(*(_QWORD *)v8 + 8))
  {
    v12 = *a3;
    *a3 = 0;
    v13 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0xFFFFFFFE | a3[1] & 1;
    v14 = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v14 & 0xFFFFFFFE;
    v15 = *(_DWORD *)(a1 + 80) & 0xFFFFFFFD | (2 * ((v14 >> 1) & 1));
    *(_DWORD *)(a1 + 80) = v15;
    v16 = v15 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 80) = v16;
    v17 = v16 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 80) = v17;
    *(_DWORD *)(a1 + 80) = a3[1] & 0xFFFFFFC0 | v17 & 0x3F;
    *(_OWORD *)(a1 + 84) = *(_OWORD *)((char *)a3 + 12);
    *(_QWORD *)(a1 + 100) = *(uint64_t *)((char *)a3 + 28);
    *(_DWORD *)(a1 + 108) = *((_DWORD *)a3 + 9);
    v18 = *(_QWORD *)(a1 + 64);
    if (v18)
      v19 = *(WebCore::CachedResource **)(v18 + 8);
    else
      v19 = 0;
    v20 = (WebCore::CachedResourceClient *)(a1 + 48);
    if (WebCore::CachedResource::addClientToSet(v19, v20))
      (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v19 + 88))(v19, v20);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v11);
    else
      *(_DWORD *)v22 -= 2;
  }
  return v21;
}

uint64_t *WebCore::CachedModuleScriptLoader::notifyFinished(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  WebCore::CachedResource *v5;
  uint64_t *result;
  _DWORD *v7;

  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v7 = *(_DWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v2 + 16))(v2, a1, a1 + 72, &v7);
    v3 = v7;
    v7 = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
  }
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(WebCore::CachedResource **)(v4 + 8);
  else
    v5 = 0;
  WebCore::CachedResource::removeClient(v5, (unsigned int **)(a1 + 48));
  result = WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 64), 0);
  if (*(_DWORD *)(a1 + 8) == 1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  --*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::CachedModuleScriptLoader::notifyFinished(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WebCore::CachedResource *v6;
  uint64_t *result;
  _DWORD *v8;

  v2 = a1 - 48;
  ++*(_DWORD *)(a1 - 40);
  v3 = *(_QWORD *)(a1 - 32);
  if (v3)
  {
    v8 = *(_DWORD **)(a1 - 24);
    *(_QWORD *)(a1 - 24) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v3 + 16))(v3, v2, a1 + 24, &v8);
    v4 = v8;
    v8 = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    v6 = *(WebCore::CachedResource **)(v5 + 8);
  else
    v6 = 0;
  WebCore::CachedResource::removeClient(v6, (unsigned int **)a1);
  result = WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 16), 0);
  if (*(_DWORD *)(a1 - 40) == 1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  --*(_DWORD *)(a1 - 40);
  return result;
}

WTF::StringImpl *WebCore::CachedScriptFetcher::requestModuleScript@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, WebCore::CachedResourceHandleBase *a5@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v7 = 0;
  WebCore::CachedScriptFetcher::requestScriptWithCache(a1, a2, a3, (uint64_t *)&v7, a4, 0, a5);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::DOMGCOutputConstraint::~DOMGCOutputConstraint(WebCore::DOMGCOutputConstraint *this)
{
  WTF *v1;
  void *v2;

  JSC::MarkingConstraint::~MarkingConstraint(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::DOMGCOutputConstraint::executeImpl(uint64_t this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  JSC::Subspace **v6;
  JSC::Subspace **v7;
  JSC::Subspace *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 40) + 1200);
  if (v2 != *(_QWORD *)(this + 56))
  {
    *(_QWORD *)(this + 56) = v2;
    v3 = *(_QWORD *)(this + 48);
    v4 = *(unsigned int *)(v3 + 2844);
    if ((_DWORD)v4)
    {
      v6 = *(JSC::Subspace ***)(v3 + 2832);
      v7 = &v6[v4];
      do
      {
        v8 = *v6;
        v9 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v9 + 8) = 1;
        v10 = (unsigned int *)(v9 + 8);
        *(_QWORD *)v9 = &off_1E33927E8;
        *(_QWORD *)(v9 + 16) = v8;
        JSC::Subspace::parallelNotEmptyMarkedBlockSource(v8);
        *(_BYTE *)(v9 + 33) = 0;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v17 = v9;
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
        this = v17;
        v17 = 0;
        if (this)
        {
          v12 = (unsigned int *)(this + 8);
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)(this + 8));
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          }
        }
        do
        {
          v15 = __ldaxr(v10);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v10));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)(v9 + 8));
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return this;
}

void WebCore::DOMWrapperWorld::~DOMWrapperWorld(WebCore::DOMWrapperWorld *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::DOMWrapperWorld *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  WebCore::WindowProxy **v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 41456);
  v6 = *(_QWORD *)(v3 + 8);
  v4 = (uint64_t *)(v3 + 8);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::DOMWrapperWorld **)(v5 + 8 * v11);
    if (v12 != this)
    {
      v25 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v25) & v7;
        v12 = *(WebCore::DOMWrapperWorld **)(v5 + 8 * v11);
        ++v25;
        if (v12 == this)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      *(_QWORD *)(v5 + 8 * v11) = -1;
      ++*(_DWORD *)(*v4 - 16);
      v13 = *v4;
      v14 = *v4 ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *v4;
      if (*v4)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::rehash(v4, v17 >> 1, 0);
      }
    }
  }
  while (1)
  {
    v19 = (_QWORD *)*((_QWORD *)this + 3);
    if (!v19 || !*((_DWORD *)v19 - 3))
      break;
    v26 = (WebCore::WindowProxy **)WTF::HashSet<WebCore::WindowProxy *,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTableTraits>::begin(v19);
    WebCore::WindowProxy::destroyJSWindowProxy(*v26, this);
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *((_QWORD *)this + 4);
  if (v21)
  {
    v27 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v27)
    {
      v28 = v21 + 8;
      do
      {
        if (*(_QWORD *)(v28 - 8) != -1 && *(_QWORD *)v28)
        {
          *(_QWORD *)(*(_QWORD *)v28 + 8) = 3;
          *(_QWORD *)v28 = 0;
        }
        v28 += 16;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  v22 = *((_QWORD *)this + 3);
  if (v22)
    WTF::fastFree((WTF *)(v22 - 16), a2);
  v23 = *((_QWORD *)this + 1);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 0;
    v24 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, a2);
      else
        --*(_DWORD *)v24;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *WTF::HashSet<WebCore::WindowProxy *,WTF::DefaultHash<WebCore::WindowProxy *>,WTF::HashTraits<WebCore::WindowProxy *>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (result)
  {
    v1 = *((unsigned int *)result - 1);
    v2 = &result[v1];
    if (*((_DWORD *)result - 3))
    {
      if ((_DWORD)v1)
      {
        v3 = 8 * v1;
        while ((unint64_t)(*result + 1) <= 1)
        {
          ++result;
          v3 -= 8;
          if (!v3)
            return v2;
        }
      }
    }
    else
    {
      return v2;
    }
  }
  return result;
}

uint64_t WebCore::DOMWrapperWorld::clearWrappers(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::WindowProxy **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::WindowProxy **v13;
  WebCore::WindowProxy *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v2 = this;
  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    *(_QWORD *)(this + 32) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1 && *(_QWORD *)v5)
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
          *(_QWORD *)v5 = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = *(WebCore::WindowProxy ***)(v2 + 24);
  if (v6)
  {
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = (v9 >> 31) ^ v9;
    do
    {
      if (!*((_DWORD *)v6 - 3))
        break;
      v11 = *((unsigned int *)v6 - 1);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = &v6[v11];
        while ((unint64_t)*v6 + 1 <= 1)
        {
          ++v6;
          v12 -= 8;
          if (!v12)
          {
            v6 = v13;
            break;
          }
        }
      }
      v14 = *v6;
      v15 = (uint64_t *)*((_QWORD *)*v6 + 2);
      v16 = *v15;
      if (*v15)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = v17 & v10;
        v19 = *(_QWORD *)(v16 + 16 * v18);
        if (v19 != v2)
        {
          v20 = 1;
          while (v19)
          {
            v18 = ((_DWORD)v18 + v20) & v17;
            v19 = *(_QWORD *)(v16 + 16 * v18);
            ++v20;
            if (v19 == v2)
              goto LABEL_19;
          }
          v18 = *(unsigned int *)(v16 - 4);
        }
LABEL_19:
        if (v18 != *(_DWORD *)(v16 - 4))
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::remove(v15, v16 + 16 * v18);
      }
      this = (uint64_t)WebCore::DOMWrapperWorld::didDestroyWindowProxy((WebCore::DOMWrapperWorld *)v2, v14);
      v6 = *(WebCore::WindowProxy ***)(v2 + 24);
    }
    while (v6);
  }
  return this;
}

void *WebCore::GCController::singleton(WebCore::GCController *this)
{
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return &WebCore::GCController::singleton(void)::controller;
}

void std::call_once[abi:sn180100]<WebCore::GCController::GCController(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::GCController::GCController(void)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::GCController::GCController(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::GCController::GCController(void)::$_0 &&>>);
  }
}

double WebCore::GCController::garbageCollectOnNextRunLoop(WebCore::GCController *this)
{
  double v2;
  double result;

  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *((_QWORD *)this + 3) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)this, v2 + 0.0);
  }
  return result;
}

uint64_t WebCore::collect(WebCore *this)
{
  WTF::ThreadGroup ***v1;
  WTF::RunLoop *v3;
  uint64_t v4;
  _BYTE v7[8];
  uint64_t v8;

  v1 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (WTF::ThreadGroup ***)v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v8 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v1[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v1, 0);
LABEL_9:
  v3 = (WTF::RunLoop *)MEMORY[0x19AEA3294](v7, v1);
  if (WebCore::g_commonVMOrNull)
    goto LABEL_17;
  WTF::RunLoop::webIfExists(v3);
  JSC::VM::create();
  v4 = v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
LABEL_13:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_14;
  }
  if (__stlxr(4u, (unsigned int *)(v8 + 1096)))
    goto LABEL_13;
LABEL_14:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
LABEL_17:
  JSC::Heap::collectNow();
  return MEMORY[0x19AEA32A0](v7);
}

uint64_t WebCore::GCController::garbageCollectNow(WebCore::GCController *this)
{
  WTF::ThreadGroup ***v1;
  WTF::RunLoop *v3;
  uint64_t v4;
  uint64_t IsDoingGCWork;
  uint64_t v7;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;

  v1 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (WTF::ThreadGroup ***)v12;
  WebCore::g_commonVMOrNull = v12;
  if (__ldaxr((unsigned int *)(v12 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v12 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v12 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v12 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v1[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v1, 0);
LABEL_9:
  v3 = (WTF::RunLoop *)MEMORY[0x19AEA3294](v11, v1);
  v4 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_17;
  WTF::RunLoop::webIfExists(v3);
  JSC::VM::create();
  v4 = v12;
  WebCore::g_commonVMOrNull = v12;
  if (__ldaxr((unsigned int *)(v12 + 1096)))
  {
    __clrex();
LABEL_13:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_14;
  }
  if (__stlxr(4u, (unsigned int *)(v12 + 1096)))
    goto LABEL_13;
LABEL_14:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
LABEL_17:
  IsDoingGCWork = JSC::Heap::currentThreadIsDoingGCWork((JSC::Heap *)(v4 + 192));
  if ((IsDoingGCWork & 1) == 0)
  {
    if (WebCore::g_commonVMOrNull)
    {
LABEL_26:
      JSC::Heap::collectNow();
      MEMORY[0x19AEA50A0](0, v9);
      return MEMORY[0x19AEA32A0](v11);
    }
    WTF::RunLoop::webIfExists((WTF::RunLoop *)IsDoingGCWork);
    JSC::VM::create();
    v7 = v12;
    WebCore::g_commonVMOrNull = v12;
    if (__ldaxr((unsigned int *)(v12 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v12 + 1096)))
    {
LABEL_23:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v7 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v7 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v7, 0);
      goto LABEL_26;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v7 + 192));
    goto LABEL_23;
  }
  return MEMORY[0x19AEA32A0](v11);
}

uint64_t WebCore::GCController::garbageCollectNowIfNotDoneRecently(WebCore::GCController *this)
{
  WTF::ThreadGroup ***v1;
  WTF::RunLoop *v3;
  uint64_t v4;
  uint64_t IsDoingGCWork;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v1 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (WTF::ThreadGroup ***)v11;
  WebCore::g_commonVMOrNull = v11;
  if (__ldaxr((unsigned int *)(v11 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v11 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v11 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v11 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v1[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v1, 0);
LABEL_9:
  v3 = (WTF::RunLoop *)MEMORY[0x19AEA3294](&v10, v1);
  v4 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_17;
  WTF::RunLoop::webIfExists(v3);
  JSC::VM::create();
  v4 = v11;
  WebCore::g_commonVMOrNull = v11;
  if (__ldaxr((unsigned int *)(v11 + 1096)))
  {
    __clrex();
LABEL_13:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_14;
  }
  if (__stlxr(4u, (unsigned int *)(v11 + 1096)))
    goto LABEL_13;
LABEL_14:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
LABEL_17:
  IsDoingGCWork = JSC::Heap::currentThreadIsDoingGCWork((JSC::Heap *)(v4 + 192));
  if ((IsDoingGCWork & 1) == 0)
  {
    if (WebCore::g_commonVMOrNull)
    {
LABEL_26:
      JSC::Heap::collectNowFullIfNotDoneRecently();
      return MEMORY[0x19AEA32A0](&v10);
    }
    WTF::RunLoop::webIfExists((WTF::RunLoop *)IsDoingGCWork);
    JSC::VM::create();
    v7 = v11;
    WebCore::g_commonVMOrNull = v11;
    if (__ldaxr((unsigned int *)(v11 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v11 + 1096)))
    {
LABEL_23:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v7 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v7 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v7, 0);
      goto LABEL_26;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v7 + 192));
    goto LABEL_23;
  }
  return MEMORY[0x19AEA32A0](&v10);
}

WTF::Thread *WebCore::GCController::garbageCollectOnAlternateThreadForDebugging(WebCore::GCController *this, int a2)
{
  _QWORD *v3;
  WTF::Thread *result;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  _QWORD *v9;
  WTF::Thread *v10;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3392888;
  v3[1] = WebCore::collect;
  v9 = v3;
  WTF::Thread::create();
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  if (a2)
    WTF::Thread::waitForCompletion(v10);
  else
    WTF::Thread::detach(v10);
  result = v10;
  if (v10)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v10);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v10));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::Thread::~Thread(v10);
      return (WTF::Thread *)WTF::fastFree(v7, v8);
    }
  }
  return result;
}

uint64_t WebCore::GCController::setJavaScriptGarbageCollectorTimerEnabled(WebCore::GCController *this)
{
  uint64_t v1;
  uint64_t v4;

  v1 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    return JSC::Heap::setGarbageCollectionTimerEnabled((JSC::Heap *)(v1 + 192));
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = v4;
  WebCore::g_commonVMOrNull = v4;
  if (__ldaxr((unsigned int *)(v4 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v4 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
  return JSC::Heap::setGarbageCollectionTimerEnabled((JSC::Heap *)(v1 + 192));
}

uint64_t WebCore::GCController::deleteAllCode(WTF::RunLoop *a1)
{
  WTF::ThreadGroup ***v1;
  WTF::RunLoop *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v1 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(a1);
  JSC::VM::create();
  v1 = (WTF::ThreadGroup ***)v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v8 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v1[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v1, 0);
LABEL_9:
  v3 = (WTF::RunLoop *)MEMORY[0x19AEA3294](&v7, v1);
  if (WebCore::g_commonVMOrNull)
    goto LABEL_17;
  WTF::RunLoop::webIfExists(v3);
  JSC::VM::create();
  v4 = v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
LABEL_13:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_14;
  }
  if (__stlxr(4u, (unsigned int *)(v8 + 1096)))
    goto LABEL_13;
LABEL_14:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
LABEL_17:
  JSC::VM::deleteAllCode();
  return MEMORY[0x19AEA32A0](&v7);
}

uint64_t WebCore::GCController::deleteAllLinkedCode(WTF::RunLoop *a1)
{
  WTF::ThreadGroup ***v1;
  WTF::RunLoop *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v1 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(a1);
  JSC::VM::create();
  v1 = (WTF::ThreadGroup ***)v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v8 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v1[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v1, 0);
LABEL_9:
  v3 = (WTF::RunLoop *)MEMORY[0x19AEA3294](&v7, v1);
  if (WebCore::g_commonVMOrNull)
    goto LABEL_17;
  WTF::RunLoop::webIfExists(v3);
  JSC::VM::create();
  v4 = v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
LABEL_13:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_14;
  }
  if (__stlxr(4u, (unsigned int *)(v8 + 1096)))
    goto LABEL_13;
LABEL_14:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
LABEL_17:
  JSC::VM::deleteAllLinkedCode();
  return MEMORY[0x19AEA32A0](&v7);
}

WTF::StringImpl *WebCore::GCController::dumpHeapForVM(WebCore::GCController *this, JSC::VM *a2)
{
  uint64_t v3;
  int *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF *v11;
  WTF *v12[12];
  WTF::StringImpl *v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;
  int v16;

  WTF::FileSystemImpl::openTemporaryFile();
  if (v16 == -1)
  {
    WTFLogAlways();
  }
  else
  {
    MEMORY[0x19AEA3294](v14, this);
    JSC::sanitizeStackForVM();
    ++*((_DWORD *)this + 229);
    v3 = *((_QWORD *)this + 11669);
    if ((v3 & 1) != 0)
      (*(void (**)(WebCore::GCController *, char *))(v3 & 0xFFFFFFFFFFFFFFFCLL))(this, (char *)this + 93352);
    JSC::HeapSnapshotBuilder::HeapSnapshotBuilder();
    JSC::HeapSnapshotBuilder::buildSnapshot((JSC::HeapSnapshotBuilder *)v12);
    JSC::HeapSnapshotBuilder::json((JSC::HeapSnapshotBuilder *)v12);
    MEMORY[0x19AEA3864](v12);
    --*((_DWORD *)this + 229);
    WTF::String::utf8();
    WTF::FileSystemImpl::writeToFile();
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v16, v4);
    v5 = (WTF *)WTF::String::utf8();
    WTF::isMainThread(v5);
    WTFLogAlways();
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v6);
      else
        --*(_DWORD *)v11;
    }
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    MEMORY[0x19AEA32A0](v14);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::toJS(WebCore *this, unint64_t a2, JSC::JSGlobalObject *a3, WebCore::IDBKey *a4)
{
  uint64_t v7;
  JSC::JSLock *v8;
  __n128 v9;
  JSC::Structure *v10;
  JSC::JSArray *v11;
  char *v12;
  int v13;
  unint64_t v14;
  WebCore::IDBKey *v15;
  uint64_t v16;
  unint64_t v17;
  JSValue v18;
  unsigned int v19;
  BOOL v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t (*v38)(_QWORD *);
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD v44[3];

  if (!a3)
    return 10;
  v7 = *((_QWORD *)this + 7);
  v8 = *(JSC::JSLock **)(v7 + 112);
  JSC::JSLock::lock(v8);
  switch(*((_BYTE *)a3 + 4))
  {
    case 1:
      if (*((_DWORD *)a3 + 6))
        goto LABEL_97;
      v10 = (JSC::Structure *)*((unsigned int *)a3 + 5);
      v11 = *(JSC::JSArray **)(a2 + 56);
      v44[0] = v11;
      if (v10 >> 27)
        v12 = (char *)(a2 + 912);
      else
        v12 = (char *)(a2 + 896);
      v13 = *(_DWORD *)v12;
      if (v13)
        v14 = 16 * (v13 & 0xFFFFFFFE);
      else
        v14 = 0;
      if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
      {
        v16 = 0;
      }
      else
      {
        v16 = JSC::JSArray::tryCreate(v11, v14, v10, v10, v9);
        if (!v16)
          JSC::throwOutOfMemoryError();
      }
      if (!*(_DWORD *)(v7 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) == 0)
      {
        if (!(_DWORD)v10)
          goto LABEL_76;
        v17 = 0;
        while (1)
        {
          if (v17 >= *((unsigned int *)a3 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x19568CAA4);
          }
          v18.super.isa = (Class)WebCore::toJS(this, (JSC::JSGlobalObject *)a2, *(JSC::JSGlobalObject **)(*((_QWORD *)a3 + 1) + 8 * v17), v15);
          v19 = *(_BYTE *)(v16 + 4) & 0x1F;
          if (v19 - 4 >= 0xA)
            break;
          if (*(_DWORD *)(*(_QWORD *)(v16 + 8) - 4) <= v17)
            goto LABEL_27;
          JSC::JSObject::setIndexQuickly(v16, *((_DWORD **)this + 7), v17, v18);
LABEL_20:
          if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
            goto LABEL_88;
          if (v10 == (JSC::Structure *)++v17)
            goto LABEL_76;
        }
        v20 = v19 > 3 || v19 == 2;
        if (v20 && (*(_BYTE *)(v16 + 4) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19568C7A8);
        }
LABEL_27:
        JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength();
        goto LABEL_20;
      }
LABEL_88:
      v16 = 0;
LABEL_76:
      if (v8)
        JSC::JSLock::unlock(v8);
      return v16;
    case 2:
      if (*((_DWORD *)a3 + 6) != 3)
        goto LABEL_97;
      if (!*((_QWORD *)a3 + 1))
      {
        v16 = 2;
        goto LABEL_76;
      }
      JSC::ArrayBuffer::create();
      if (*(_QWORD *)(v43 + 32))
        v26 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
      else
        v26 = 0;
      if (v26)
      {
        v27 = *(_QWORD *)(a2 + 1144);
        if ((v27 & 1) == 0)
        {
LABEL_57:
          if (v27)
          {
            v28 = v43;
            v43 = 0;
            v44[0] = v28;
            v16 = JSC::JSArrayBuffer::create();
            v29 = (_QWORD *)v44[0];
            v44[0] = 0;
            if (v29)
            {
              v20 = *(_DWORD *)v29 == 2;
              *(_DWORD *)v29 -= 2;
              if (v20)
              {
                v30 = v29[10];
                if (v30)
                {
                  *(_QWORD *)(v30 + 8) = 3;
                  v29[10] = 0;
                }
                if ((v29[9] & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v29 + 9));
                JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v29 + 2));
                v32 = (WTF *)v29[1];
                if ((v32 & 1) == 0 && v32)
                {
                  v33 = *(WTF **)v32;
                  if (*(_QWORD *)v32)
                  {
                    *(_QWORD *)v32 = 0;
                    *((_DWORD *)v32 + 2) = 0;
                    WTF::fastFree(v33, v31);
                  }
                  WTF::fastFree(v32, v31);
                }
                WTF::fastFree((WTF *)v29, v31);
              }
            }
          }
          else
          {
            v16 = 2;
          }
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v43);
          goto LABEL_76;
        }
        v38 = *(uint64_t (**)(_QWORD *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
        v42 = (uint64_t *)(a2 - 16);
        if ((a2 & 8) == 0)
          v42 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        v40 = *v42;
        v41 = (char *)(a2 + 1144);
      }
      else
      {
        v27 = *(_QWORD *)(a2 + 1600);
        if ((v27 & 1) == 0)
          goto LABEL_57;
        v38 = *(uint64_t (**)(_QWORD *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
        v39 = (uint64_t *)(a2 - 16);
        if ((a2 & 8) == 0)
          v39 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        v40 = *v39;
        v41 = (char *)(a2 + 1600);
      }
      v44[0] = v40;
      v44[1] = a2;
      v44[2] = v41;
      v27 = v38(v44);
      goto LABEL_57;
    case 3:
      if (*((_DWORD *)a3 + 6) != 1)
        goto LABEL_97;
      v23 = *((_QWORD *)a3 + 1);
      if (!v23 || (v24 = *(_DWORD *)(v23 + 4)) == 0)
      {
        v16 = *(_QWORD *)(v7 + 41968);
        goto LABEL_76;
      }
      if (v24 != 1)
        goto LABEL_44;
      v35 = *(unsigned __int8 **)(v23 + 8);
      if ((*(_BYTE *)(v23 + 16) & 4) != 0)
      {
        v36 = *v35;
      }
      else
      {
        v37 = *(unsigned __int16 *)v35;
        if (v37 > 0xFF)
        {
LABEL_44:
          v16 = *(_QWORD *)(v7 + 64760);
          if (!v16 || v23 != *(_QWORD *)(v16 + 8))
          {
            v25 = JSC::jsStringWithCacheSlowCase();
            goto LABEL_49;
          }
          goto LABEL_76;
        }
        v36 = v37;
      }
      v16 = *(_QWORD *)(v7 + 8 * v36 + 42216);
      goto LABEL_76;
    case 4:
      if (*((_DWORD *)a3 + 6) != 2)
        goto LABEL_97;
      v25 = WebCore::jsDate((uint64_t)this);
LABEL_49:
      v16 = v25;
      goto LABEL_76;
    case 5:
      if (*((_DWORD *)a3 + 6) == 2)
      {
        v21 = *((double *)a3 + 1);
      }
      else
      {
LABEL_97:
        std::__throw_bad_variant_access[abi:sn180100]();
        v21 = NAN;
      }
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v22 = (int)v21, v21 == (double)(int)v22)
        && ((_DWORD)v22 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
      {
        v16 = v22 | 0xFFFE000000000000;
      }
      else
      {
        v16 = *(_QWORD *)&v21 + 0x2000000000000;
      }
      goto LABEL_76;
    default:
      v16 = 10;
      goto LABEL_76;
  }
}

uint64_t WebCore::injectIDBKeyIntoScriptValue(unint64_t a1, uint64_t a2, bmalloc::api *a3, uint64_t a4)
{
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t SlowCase;
  uint64_t v20;
  uint64_t v21;
  WebCore::IDBKey *v22;
  WebCore::IDBKey *v23;
  unsigned int *v24;
  const WTF::String *v25;
  int v26;
  int v27;
  JSC::VM *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  unsigned int *v31;
  WTF *v32;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WebCore::IDBKey *v40;
  unint64_t v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  bmalloc::api *v45;
  bmalloc::api *v46;
  char v47;

  v43 = 0;
  v44 = 0;
  if (*(_DWORD *)(a4 + 16))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_55:
    __break(0xC471u);
    goto LABEL_58;
  }
  v42 = 0;
  WebCore::IDBParseKeyPath((uint64_t *)a4, (WTF::StringImpl *)&v43, &v42);
  if (!HIDWORD(v44))
  {
    v21 = 0;
    goto LABEL_37;
  }
  v46 = a3;
  v8 = HIDWORD(v44) - 1;
  if (HIDWORD(v44) == 1)
  {
LABEL_24:
    v46 = a3;
    if (a3 == (bmalloc::api *)10)
      goto LABEL_35;
    WebCore::IDBKeyData::maybeCreateIDBKey(a2, (uint64_t *)&v45);
    if (!v45)
      goto LABEL_35;
    v41 = 0;
    if (!HIDWORD(v44))
    {
      __break(0xC471u);
      JUMPOUT(0x19568CEA8);
    }
    if (!WebCore::get((JSC::JSGlobalObject *)a1, (uint64_t)a3, (WTF::StringImpl **)v43 + HIDWORD(v44) - 1, &v41))goto LABEL_30;
    v23 = v45;
    WebCore::createIDBKeyFromValue(&v40, (JSC::JSGlobalObject *)a1, v41);
    v24 = (unsigned int *)v40;
    v26 = WebCore::IDBKey::compare(v23, v40, v25);
    v27 = v26;
    if (*v24 == 1)
    {
      v35 = v24[6];
      if ((_DWORD)v35 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v35])(&v47, v24 + 2);
      v24[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v24, v7);
      if (v27)
        goto LABEL_30;
    }
    else
    {
      --*v24;
      if (v26)
      {
LABEL_30:
        if (HIDWORD(v44))
        {
          v28 = *(JSC::VM **)(a1 + 56);
          v29 = (WTF::StringImpl **)((char *)v43 + 8 * HIDWORD(v44));
          v30 = WebCore::toJS((WebCore *)a1, a1, v45, v22);
          v21 = WebCore::set(v28, (WTF::StringImpl *)&v46, *(v29 - 1), v30);
          goto LABEL_32;
        }
        __break(0xC471u);
LABEL_58:
        JUMPOUT(0x19568CEA0);
      }
    }
    v21 = 1;
LABEL_32:
    v31 = (unsigned int *)v45;
    v45 = 0;
    if (v31)
    {
      if (*v31 == 1)
      {
        v34 = v31[6];
        if ((_DWORD)v34 != -1)
          ((void (*)(unint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v34])(&v41, v31 + 2);
        v31[6] = -1;
        bmalloc::api::isoDeallocate((bmalloc::api *)v31, v7);
      }
      else
      {
        --*v31;
      }
    }
    goto LABEL_36;
  }
  v9 = 0;
  v10 = 8 * HIDWORD(v44) - 8;
  v11 = 1;
  v12 = 1;
  while (1)
  {
    v45 = v46;
    if (v11 - 1 >= HIDWORD(v44))
      goto LABEL_55;
    v13 = (WTF::StringImpl **)((char *)v43 + v9);
    if ((WebCore::get((JSC::JSGlobalObject *)a1, (uint64_t)v46, (WTF::StringImpl **)((char *)v43 + v9), &v46) & 1) == 0)
      break;
LABEL_14:
    v12 = v11 < v8;
    v9 += 8;
    ++v11;
    if (v10 == v9)
      goto LABEL_23;
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(v14 + 15056);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 + 60);
    v17 = *(_QWORD *)(v15 + 24);
    if (v17 < *(_QWORD *)(v15 + 32))
    {
LABEL_9:
      *(_QWORD *)(v15 + 24) = v17 + v16;
      goto LABEL_10;
    }
    v17 = *(_QWORD *)(v15 + 40);
    if ((v17 & 1) == 0)
    {
      v18 = *(_QWORD *)(v17 + 8) ^ *(_QWORD *)(v15 + 48);
      *(_QWORD *)(v15 + 32) = v17 + HIDWORD(v18);
      *(_QWORD *)(v15 + 40) = v17 + (int)v18;
      goto LABEL_9;
    }
    v39 = *(_QWORD *)(a1 + 56);
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
    v14 = v39;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 56);
    SlowCase = JSC::CompleteSubspace::allocateSlow();
    v14 = v20;
  }
  v17 = SlowCase;
LABEL_10:
  *(_DWORD *)v17 = 0;
  *(_DWORD *)v17 = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(v17 + 4) = 16783360;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_QWORD *)(v17 + 56) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  if (WebCore::set(*(JSC::VM **)(a1 + 56), (WTF::StringImpl *)&v45, *v13, v17))
  {
    v46 = (bmalloc::api *)v17;
    goto LABEL_14;
  }
  if (!v12)
  {
LABEL_23:
    a3 = v46;
    goto LABEL_24;
  }
LABEL_35:
  v21 = 0;
LABEL_36:
  if (HIDWORD(v44))
  {
    v36 = v43;
    v37 = 8 * HIDWORD(v44);
    do
    {
      v38 = *(WTF::StringImpl **)v36;
      *(_QWORD *)v36 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v38 -= 2;
      }
      v36 = (WTF *)((char *)v36 + 8);
      v37 -= 8;
    }
    while (v37);
  }
LABEL_37:
  v32 = v43;
  if (v43)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    WTF::fastFree(v32, v7);
  }
  return v21;
}

uint64_t WebCore::get(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl **a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  const WTF::URL *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  const WTF::String *v36;
  uint64_t v37;
  int OwnPropertyDescriptor;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  WTF::WallTime *v43;
  double v44;
  WTF::WallTime *v45;
  char v46;
  double v47;
  double v48;
  double v49;
  double v50;
  unint64_t v51;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  WTF::StringImpl *v57[4];

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v8 = *((_QWORD *)a1 + 7);
  v9 = *(unsigned __int8 *)(a2 + 5);
  if (v9 != 2)
  {
LABEL_11:
    if (v9 >= 0x17)
    {
      v15 = *a3;
      if (*a3)
      {
        if ((*((_BYTE *)v15 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v15 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase();
          v15 = v57[0];
        }
      }
      v16 = *(_DWORD *)v15;
      *(_DWORD *)v15 += 2;
      if (v16)
        *(_DWORD *)v15 = v16;
      else
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      if ((*(_BYTE *)(a2 + 5) & 0xFE) != 0x24 || !MEMORY[0x19AEA53F4](*a3, "length", 6))
      {
        v17 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSBlob::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSBlob::s_info && v19 != 0);
        }
        if (v18
          && ((MEMORY[0x19AEA53F4](*a3, "size", 4) & 1) != 0 || MEMORY[0x19AEA53F4](*a3, "type", 4)))
        {
          if (MEMORY[0x19AEA53F4](*a3, "size", 4))
          {
            v23 = *(_QWORD *)(a2 + 24);
            if (*(_BYTE *)(v23 + 64))
            {
              v24 = *(_QWORD *)(v23 + 56);
            }
            else
            {
              v39 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v23 + 80), v22);
              v24 = v39 & ~(v39 >> 63);
              *(_QWORD *)(v23 + 56) = v24;
              *(_BYTE *)(v23 + 64) = 1;
            }
            v40 = HIDWORD(v24);
            v41 = v24 | 0xFFFE000000000000;
            if ((v24 & 0x80000000) != 0)
              v41 = COERCE__INT64((double)v24) + 0x2000000000000;
            v42 = COERCE__INT64((double)v24) + 0x2000000000000;
            if (!v40)
              v42 = v41;
LABEL_91:
            *a4 = v42;
            goto LABEL_92;
          }
          if (MEMORY[0x19AEA53F4](*a3, "type", 4))
          {
            v25 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
            if (!v25)
              goto LABEL_104;
LABEL_51:
            v31 = *(_DWORD *)(v25 + 4);
            if (v31 == 1)
            {
              v53 = *(unsigned __int8 **)(v25 + 8);
              if ((*(_BYTE *)(v25 + 16) & 4) != 0)
              {
                v54 = *v53;
              }
              else
              {
                v55 = *(unsigned __int16 *)v53;
                if (v55 > 0xFF)
                {
LABEL_53:
                  *(_DWORD *)v25 += 2;
                  v57[0] = (WTF::StringImpl *)v25;
                  v32 = JSC::JSString::create(v8, v57);
                  v33 = v57[0];
                  v57[0] = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, v22);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  goto LABEL_54;
                }
                v54 = v55;
              }
              v32 = *(_QWORD *)(v8 + 8 * v54 + 42216);
LABEL_54:
              *a4 = v32;
LABEL_92:
              v14 = 1;
LABEL_93:
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v22);
              else
                *(_DWORD *)v15 -= 2;
              return v14;
            }
            if (v31)
              goto LABEL_53;
LABEL_104:
            v32 = *(_QWORD *)(v8 + 41968);
            goto LABEL_54;
          }
        }
        v26 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
        v27 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
        v28 = (char **)(16 * v26);
        if ((_DWORD)v26)
          v29 = v28 == &WebCore::JSFile::s_info;
        else
          v29 = 1;
        if (!v29)
        {
          do
          {
            v28 = (char **)v28[2];
            v27 = v28 != 0;
          }
          while (v28 != &WebCore::JSFile::s_info && v28 != 0);
        }
        if (v27)
        {
          if (MEMORY[0x19AEA53F4](*a3, "name", 4))
          {
            v25 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 144);
            if (!v25)
              goto LABEL_104;
            goto LABEL_51;
          }
          if (MEMORY[0x19AEA53F4](*a3, "lastModified", 12))
          {
            v34 = *(_QWORD *)(a2 + 24);
            if (*(_BYTE *)(v34 + 160))
            {
              v35 = *(_QWORD *)(v34 + 152);
            }
            else
            {
              v43 = (WTF::WallTime *)WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)(v34 + 128), v22);
              if ((_BYTE)v22)
                v44 = *(double *)&v43;
              else
                WTF::WallTime::now(v43);
              v47 = v44 * 1000.0;
              v48 = -9.22337204e18;
              if (v47 > -9.22337204e18)
                v48 = v47;
              v49 = (double)(uint64_t)v48;
              if (v47 >= 9.22337204e18)
                v50 = 9.22337204e18;
              else
                v50 = v49;
              if (fabs(v50) > 8.64e15)
                v50 = NAN;
              v35 = (uint64_t)v50;
            }
            v20 = v35 == (int)v35;
            v51 = v35 | 0xFFFE000000000000;
            v42 = COERCE__INT64((double)v35) + 0x2000000000000;
            if (v20)
              v42 = v51;
            goto LABEL_91;
          }
          if (MEMORY[0x19AEA53F4](*a3, "lastModifiedDate", 16))
          {
            v37 = *(_QWORD *)(a2 + 24);
            if (!*(_BYTE *)(v37 + 160))
            {
              v45 = (WTF::WallTime *)WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)(v37 + 128), v36);
              if (!v46)
                WTF::WallTime::now(v45);
            }
            *a4 = WebCore::jsDate((uint64_t)a1);
            goto LABEL_92;
          }
        }
        memset(v57, 0, 24);
        v57[3] = (WTF::StringImpl *)14;
        OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor();
        if (*(_DWORD *)(v8 + 80))
        {
          v56 = OwnPropertyDescriptor;
          v14 = 0;
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0 || ((v56 ^ 1) & 1) != 0)
            goto LABEL_93;
        }
        else if (!OwnPropertyDescriptor)
        {
          goto LABEL_67;
        }
        if (!JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)v57))
          goto LABEL_67;
      }
      *a4 = JSC::JSObject::get((JSC::Structure *)a2, a1, (unint64_t)v15);
      if (!*(_DWORD *)(v8 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) == 0)
        goto LABEL_92;
LABEL_67:
      v14 = 0;
      goto LABEL_93;
    }
    return 0;
  }
  if ((MEMORY[0x19AEA53F4](*a3, "length", 6) & 1) == 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 5);
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a2 + 8);
  if ((v10 & 1) != 0)
    v11 = (unsigned int *)(a2 + 16);
  else
    v11 = (unsigned int *)(v10 + 4);
  v12 = *v11;
  if ((v12 & 0x80000000) != 0)
    v13 = COERCE__INT64((double)v12) + 0x2000000000000;
  else
    v13 = v12 | 0xFFFE000000000000;
  *a4 = v13;
  return 1;
}

WTF *WebCore::createIDBKeyFromValue(_QWORD *a1, JSC::JSGlobalObject *a2, unint64_t a3)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WTF *result;
  uint64_t v9;
  bmalloc::api *v10;
  WTF *v11[2];
  char v12;

  v11[0] = 0;
  v11[1] = 0;
  WebCore::createIDBKeyFromValue((uint64_t)&v10, a2, a3, (uint64_t)v11);
  v5 = (unsigned int *)v10;
  if (v10)
  {
    v6 = (*(_DWORD *)v10)++;
    *a1 = v5;
    if (v6)
    {
      *v5 = v6;
    }
    else
    {
      v9 = v5[6];
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v9])(&v12, v5 + 2);
      v5[6] = -1;
      bmalloc::api::isoDeallocate((bmalloc::api *)v5, v4);
    }
  }
  else
  {
    v7 = bmalloc::api::isoAllocate();
    *(_DWORD *)v7 = 1;
    *(_BYTE *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 16;
    *a1 = v7;
  }
  result = v11[0];
  if (v11[0])
    return (WTF *)WTF::fastFree(v11[0], v4);
  return result;
}

uint64_t WebCore::set(JSC::VM *a1, WTF::StringImpl *a2, WTF::StringImpl *a3, uint64_t a4)
{
  WTF::StringImpl *v5;
  int v9;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  int v13;
  int v14;
  uint64_t v15;

  if ((*(_QWORD *)a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(*(_QWORD *)a2 + 5) < 0x17u)
    return 0;
  v5 = a3;
  if (a3)
  {
    if ((*((_BYTE *)a3 + 16) & 0x10) != 0)
    {
      *(_DWORD *)a3 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase();
      v5 = (WTF::StringImpl *)v12[0];
    }
  }
  v9 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  if (v9)
    *(_DWORD *)v5 = v9;
  else
    WTF::StringImpl::destroy(v5, a2);
  v10 = *(unsigned __int8 **)a2;
  v12[0] = 0;
  v12[1] = v10;
  v13 = -1;
  v14 = 0x1000000;
  v15 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v10, a1, (unint64_t)v5, a4, 0, (uint64_t)v12);
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v11);
  else
    *(_DWORD *)v5 -= 2;
  return 1;
}

uint64_t WebCore::maybeCreateIDBKeyFromScriptValueAndKeyPath@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v8 = *(_DWORD *)(a3 + 16);
  if (!v8)
    return WebCore::internalCreateIDBKeyFromScriptValueAndKeyPath(a4, a1, a2, (uint64_t *)a3);
  if (v8 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_41;
  }
  v9 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v9)
  {
    v10 = 0;
    goto LABEL_14;
  }
  if (v9 >> 29)
  {
LABEL_41:
    __break(0xC471u);
    goto LABEL_43;
  }
  v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
  v11 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v11)
  {
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)a3;
  v16 = 8 * v11;
  do
  {
    result = WebCore::internalCreateIDBKeyFromScriptValueAndKeyPath(&v31, a1, a2, (uint64_t *)(v15 + v13));
    if (!v31)
      v14 = 1;
    *(_QWORD *)((char *)v10 + v13) = v31;
    v13 += 8;
    ++v12;
  }
  while (v16 != v13);
  if (!v14)
  {
    if (v12)
    {
      v28 = 0;
      v29 = v10;
      do
      {
        v30 = *(_QWORD *)v29;
        v29 = (WTF *)((char *)v29 + 8);
        v28 += *(_QWORD *)(v30 + 32);
        v13 -= 8;
      }
      while (v13);
      v20 = v28 + 16;
      goto LABEL_16;
    }
LABEL_15:
    v20 = 16;
LABEL_16:
    result = bmalloc::api::isoAllocate();
    v19 = result;
    *(_DWORD *)result = 1;
    *(_BYTE *)(result + 4) = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = v12;
    if (!v12)
    {
LABEL_22:
      *(_DWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = v20;
      goto LABEL_23;
    }
    if (!(v12 >> 29))
    {
      v21 = (WTF *)(8 * v12);
      result = WTF::fastMalloc(v21);
      *(_DWORD *)(v19 + 16) = v12;
      *(_QWORD *)(v19 + 8) = result;
      v22 = v10;
      do
      {
        v23 = *(_DWORD **)v22;
        if (*(_QWORD *)v22)
          ++*v23;
        *(_QWORD *)result = v23;
        result += 8;
        v22 = (WTF *)((char *)v22 + 8);
        v21 = (WTF *)((char *)v21 - 8);
      }
      while (v21);
      goto LABEL_22;
    }
    __break(0xC471u);
LABEL_43:
    JUMPOUT(0x19568D870);
  }
  v19 = 0;
LABEL_23:
  *a4 = v19;
  if (v12)
  {
    v24 = 8 * v12;
    v25 = (unsigned int **)v10;
    do
    {
      v26 = *v25;
      *v25 = 0;
      if (v26)
      {
        if (*v26 == 1)
        {
          v27 = v26[6];
          if ((_DWORD)v27 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v27])(&v32, v26 + 2);
          v26[6] = -1;
          result = bmalloc::api::isoDeallocate((bmalloc::api *)v26, v18);
        }
        else
        {
          --*v26;
        }
      }
      ++v25;
      v24 -= 8;
    }
    while (v24);
  }
  if (v10)
    return WTF::fastFree(v10, v18);
  return result;
}

uint64_t WebCore::internalCreateIDBKeyFromScriptValueAndKeyPath(unint64_t *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t result;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  unint64_t v20;

  v18 = 0;
  v19 = 0;
  v17 = 0;
  result = (uint64_t)WebCore::IDBParseKeyPath(a4, (WTF::StringImpl *)&v18, &v17);
  v9 = HIDWORD(v19);
  v20 = a3;
  if (HIDWORD(v19))
  {
    v10 = 0;
    v11 = 8 * HIDWORD(v19);
    v12 = 1;
    v13 = 1;
    do
    {
      if (v12 - 1 >= HIDWORD(v19))
      {
        __break(0xC471u);
        return result;
      }
      result = WebCore::get(a2, v20, (WTF::StringImpl **)((char *)v18 + v10), &v20);
      if ((result & 1) == 0)
        break;
      v13 = v12 < v9;
      v10 += 8;
      ++v12;
    }
    while (v11 != v10);
    if (v13)
      goto LABEL_9;
    a3 = v20;
  }
  if (a3 == 10)
  {
LABEL_9:
    *a1 = 0;
  }
  else
  {
    WebCore::createIDBKeyFromValue(&v20, a2, a3);
    *a1 = v20;
  }
  if (HIDWORD(v19))
  {
    v14 = v18;
    v15 = 8 * HIDWORD(v19);
    do
    {
      v16 = *(WTF::StringImpl **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v8);
        else
          *(_DWORD *)v16 -= 2;
      }
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  result = (uint64_t)v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return WTF::fastFree((WTF *)result, v8);
  }
  return result;
}

uint64_t WebCore::canInjectIDBKeyIntoScriptValue(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  if (*(_DWORD *)(a3 + 16))
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    __break(0xC471u);
  }
  else
  {
    v17 = 0;
    result = (uint64_t)WebCore::IDBParseKeyPath((uint64_t *)a3, (WTF::StringImpl *)&v18, &v17);
    v7 = HIDWORD(v19);
    if (HIDWORD(v19))
    {
      if ((a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) >= 0x17u)
      {
        v8 = 0;
        v9 = 0;
        v20 = a2;
        v10 = 8 * HIDWORD(v19);
        while (1)
        {
          if (v9 >= HIDWORD(v19))
            goto LABEL_27;
          v11 = v20;
          result = WebCore::get(a1, v20, (WTF::StringImpl **)((char *)v18 + v8), &v20);
          if ((result & 1) == 0)
            break;
          ++v9;
          v8 += 8;
          if (v10 == v8)
          {
            v12 = 1;
            goto LABEL_22;
          }
        }
        v12 = (v11 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v11 + 5) > 0x16u;
LABEL_22:
        v7 = HIDWORD(v19);
        if (HIDWORD(v19))
          goto LABEL_11;
        goto LABEL_23;
      }
      v12 = 0;
LABEL_11:
      v13 = v18;
      v14 = 8 * v7;
      do
      {
        v15 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v6);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    else
    {
      v12 = 0;
    }
LABEL_23:
    v16 = v18;
    if (v18)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree(v16, v6);
    }
    return v12;
  }
  return result;
}

uint64_t WebCore::deserializeIDBValueToJSValue(WebCore *this, JSC::JSGlobalObject *a2, const WebCore::IDBValue *a3, const WebCore::IDBValue *a4)
{
  return WebCore::deserializeIDBValueToJSValue(this, this, a2, a4);
}

uint64_t WebCore::deserializeIDBValueToJSValue(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3, const WebCore::IDBValue *a4)
{
  uint64_t v4;
  WTF *v5;
  void *v9;
  WTF *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  unsigned int *v23;

  v4 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    return 10;
  v5 = (WTF *)*(unsigned int *)(v4 + 20);
  if (!(_DWORD)v5)
    return 2;
  HIDWORD(v22) = *(_DWORD *)(v4 + 20);
  LODWORD(v22) = (_DWORD)v5;
  v21 = (WTF *)WTF::fastMalloc(v5);
  memcpy(v21, *(const void **)(v4 + 8), *(unsigned int *)(v4 + 20));
  WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v21, (uint64_t *)&v23);
  v10 = v21;
  if (v21)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    WTF::fastFree(v10, v9);
  }
  JSC::JSLock::lock(*(JSC::JSLock **)(*((_QWORD *)this + 7) + 112));
  v21 = 0;
  v22 = 0;
  v11 = WebCore::SerializedScriptValue::deserialize((uint64_t)v23, this, a2, (uint64_t)&v21, (uint64_t)a3 + 8, (uint64_t *)a3 + 3, 0, 0);
  JSC::JSLock::unlock(*(JSC::JSLock **)(*((_QWORD *)this + 7) + 112));
  if (HIDWORD(v22))
  {
    v19 = (uint64_t *)v21;
    v20 = 8 * HIDWORD(v22);
    do
    {
      v19 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v19, v12)+ 1;
      v20 -= 8;
    }
    while (v20);
  }
  v13 = v21;
  if (v21)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    WTF::fastFree(v13, v12);
  }
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v14 + 2), v12);
      WTF::fastFree((WTF *)v14, v17);
    }
  }
  return v11;
}

_QWORD *WebCore::generateIndexKeyForValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v17[16];
  int v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[4];
  unsigned int v23;
  _QWORD v24[4];
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  v19 = 0;
  if (*(_BYTE *)(a5 + 24))
  {
    v18 = -1;
    v11 = *(unsigned int *)(a5 + 16);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E33924F8[v11])(v24, v17, a5);
      v18 = v11;
    }
    v19 = 1;
  }
  v20 = a3;
  v24[0] = v17;
  v24[1] = a6;
  v24[2] = a1;
  v24[3] = &v20;
  v25 = a2;
  v26 = v17;
  v27 = a6;
  v28 = a1;
  v29 = &v20;
  v12 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v12 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v21 = v24;
  result = ((_QWORD *(*)(_QWORD *__return_ptr, _QWORD **, uint64_t))off_1E3392400[v12])(v22, &v21, a2 + 24);
  if (v19)
  {
    if (v18 != -1)
      result = (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E3392410[v18])(v24, v17);
    v18 = -1;
  }
  v14 = v23;
  if (v23)
  {
    LOBYTE(v24[0]) = 0;
    LODWORD(v25) = -1;
    if (v23 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v23])(&v21, v24, v22);
      LODWORD(v25) = v14;
    }
    v15 = *(unsigned int *)(a4 + 32);
    if ((_DWORD)v15 == -1)
    {
      if ((_DWORD)v14 == -1)
        goto LABEL_21;
    }
    else if ((_DWORD)v14 == -1)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t))off_1E3392508[v15])(&v21, a4);
      *(_DWORD *)(a4 + 32) = -1;
      goto LABEL_19;
    }
    v21 = (_QWORD *)a4;
    result = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t, _QWORD *))off_1E3392520[v14])(&v21, a4, v24);
LABEL_19:
    if ((_DWORD)v25 != -1)
      result = (_QWORD *)((uint64_t (*)(_QWORD **, _QWORD *))off_1E3392508[v25])(&v21, v24);
LABEL_21:
    v16 = v23;
    if (v23 == -1)
      return result;
    return (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E3392508[v16])(v24, v22);
  }
  v16 = 0;
  return (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E3392508[v16])(v24, v22);
}

WebCore *WebCore::generateIndexKeyMapForValueIsolatedCopy@<X0>(WebCore *this@<X0>, JSC::JSGlobalObject *a2@<X1>, const WebCore::IDBObjectStoreInfo *a3@<X2>, const WebCore::IDBKeyData *a4@<X3>, const WebCore::IDBValue *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebCore *v11;
  const WebCore::IDBValue *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  _BYTE v54[15];
  char v55;
  _QWORD v56[4];
  int v57;
  _QWORD v58[4];
  unsigned int v59;
  _QWORD v60[4];
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 7);
  if (!v7 || (v8 = *(unsigned int *)(v7 - 12), !(_DWORD)v8))
  {
    *a6 = 0;
    return this;
  }
  v11 = this;
  MEMORY[0x19AEA3294](v54, *((_QWORD *)this + 7), a3, a4, a5);
  v13 = WebCore::deserializeIDBValueToJSValue(v11, v11, a4, v12);
  *a6 = 0;
  if ((v13 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v14 = v13;
    v15 = (v8 - 1) | ((v8 - 1) >> 1) | ((((_DWORD)v8 - 1) | ((v8 - 1) >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v17 = (v16 | HIWORD(v16)) + 1;
    if (v17 > 0x400)
    {
      if (v17 > 2 * v8)
        goto LABEL_10;
    }
    else if (3 * v17 > 4 * v8)
    {
LABEL_7:
      v18 = (double)v8;
      v19 = (double)v17;
      v20 = 0.604166667;
      goto LABEL_11;
    }
    LODWORD(v17) = 2 * v17;
    if (v17 <= 0x400)
      goto LABEL_7;
LABEL_10:
    v18 = (double)v8;
    v19 = (double)v17;
    v20 = 0.416666667;
LABEL_11:
    if (v19 * v20 <= v18)
      LODWORD(v17) = 2 * v17;
    if (v17 <= 8)
      v21 = 8;
    else
      v21 = v17;
    v22 = 48 * v21;
    v23 = WTF::fastMalloc((WTF *)(v22 + 16));
    v24 = 0;
    do
    {
      v25 = v23 + v24;
      *(_DWORD *)(v25 + 56) = 0;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = 0;
      v24 += 48;
    }
    while (v22 != v24);
    *a6 = v23 + 16;
    *(_DWORD *)(v23 + 8) = v21 - 1;
    *(_DWORD *)(v23 + 12) = v21;
    *(_QWORD *)v23 = 0;
    v26 = *((_QWORD *)a2 + 7);
    if (v26)
    {
      v27 = *(unsigned int *)(v26 - 4);
      v28 = (uint64_t *)(v26 + (v27 << 6));
      if (*(_DWORD *)(v26 - 12))
      {
        v29 = (uint64_t *)*((_QWORD *)a2 + 7);
        if ((_DWORD)v27)
        {
          v30 = v27 << 6;
          v29 = (uint64_t *)*((_QWORD *)a2 + 7);
          while ((unint64_t)(*v29 + 1) <= 1)
          {
            v29 += 8;
            v30 -= 64;
            if (!v30)
            {
              v29 = v28;
              break;
            }
          }
        }
LABEL_28:
        if (v26)
          v31 = (uint64_t *)(v26 + ((unint64_t)*(unsigned int *)(v26 - 4) << 6));
        else
          v31 = 0;
        if (v31 != v29)
        {
          v32 = (char *)a2 + 16;
          while (1)
          {
            v58[0] = 0;
            v59 = 0;
            WebCore::generateIndexKeyForValue((uint64_t)v11, (uint64_t)(v29 + 1), v14, (uint64_t)v58, (uint64_t)v32, (uint64_t)a3);
            if (v59)
              break;
            v46 = 0;
LABEL_68:
            ((void (*)(_QWORD *, _QWORD *))off_1E3392508[v46])(v60, v58);
LABEL_69:
            v52 = v29 + 8;
            v29 = v28;
            if (v52 != v28)
            {
              v29 = v52;
              while ((unint64_t)(*v29 + 1) <= 1)
              {
                v29 += 8;
                if (v29 == v28)
                {
                  v29 = v28;
                  break;
                }
              }
            }
            if (v29 == v31)
              return (WebCore *)MEMORY[0x19AEA32A0](v54);
          }
          if (v59 == -1)
            std::__throw_bad_variant_access[abi:sn180100]();
          v56[0] = &v55;
          ((void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJDnN7WebCore10IDBKeyDataENS6_6VectorISA_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEE4copyEOSF_EUlOT_E_EEJNS0_6__implIJDnSA_SE_EEEEEEDcSJ_DpOT0____fmatrix[v59])(v60, v56, v58);
          LOBYTE(v56[0]) = 0;
          v57 = -1;
          v33 = v61;
          if (v61 != -1)
          {
            ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v61])(&v55, v56, v60);
            v57 = v33;
            if (v61 != -1)
              ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyDataEN3WTF6VectorIS7_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v61])(&v55, v60);
          }
          v34 = *a6;
          if (*a6
            || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IndexKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IndexKey>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IndexKey,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IndexKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a6, 8u, 0), (v34 = *a6) != 0))
          {
            v35 = *(_DWORD *)(v34 - 8);
          }
          else
          {
            v35 = 0;
          }
          v36 = *v29;
          v37 = *v29 + ~(*v29 << 32);
          v38 = (v37 ^ (v37 >> 22)) + ~((v37 ^ (v37 >> 22)) << 13);
          v39 = (9 * (v38 ^ (v38 >> 8))) ^ ((9 * (v38 ^ (v38 >> 8))) >> 15);
          v40 = v35 & (((v39 + ~(v39 << 27)) >> 31) ^ (v39 + ~((_DWORD)v39 << 27)));
          v41 = v34 + 48 * v40;
          v42 = *(_QWORD *)v41;
          if (*(_QWORD *)v41)
          {
            v43 = 0;
            v44 = 1;
            while (v42 != v36)
            {
              if (v42 == -1)
                v43 = v41;
              v40 = (v40 + v44) & v35;
              v41 = v34 + 48 * v40;
              v42 = *(_QWORD *)v41;
              ++v44;
              if (!*(_QWORD *)v41)
              {
                if (v43)
                {
                  *(_DWORD *)(v43 + 40) = 0;
                  *(_QWORD *)v43 = 0;
                  *(_QWORD *)(v43 + 8) = 0;
                  --*(_DWORD *)(*a6 - 16);
                  v36 = *v29;
                  v41 = v43;
                }
                goto LABEL_49;
              }
            }
LABEL_65:
            if (v57 != -1)
              ((void (*)(_QWORD *, _QWORD *))off_1E3392508[v57])(v60, v56);
            v46 = v59;
            if (v59 == -1)
              goto LABEL_69;
            goto LABEL_68;
          }
LABEL_49:
          *(_QWORD *)v41 = v36;
          v45 = *(unsigned int *)(v41 + 40);
          if ((_DWORD)v45 == -1)
          {
            if (v57 == -1)
              goto LABEL_55;
          }
          else if (v57 == -1)
          {
            ((void (*)(_QWORD *, uint64_t))off_1E3392508[v45])(v60, v41 + 8);
            *(_DWORD *)(v41 + 40) = -1;
            goto LABEL_55;
          }
          v60[0] = v41 + 8;
          ((void (*)(_QWORD *))off_1E3392520[v57])(v60);
LABEL_55:
          v47 = *a6;
          if (*a6)
            v48 = *(_DWORD *)(v47 - 12) + 1;
          else
            v48 = 1;
          *(_DWORD *)(v47 - 12) = v48;
          v49 = (*(_DWORD *)(v47 - 16) + v48);
          v50 = *(unsigned int *)(v47 - 4);
          if (v50 > 0x400)
          {
            if (v50 > 2 * v49)
              goto LABEL_65;
          }
          else
          {
            if (3 * v50 > 4 * v49)
              goto LABEL_65;
            if (!(_DWORD)v50)
            {
              v51 = 8;
              goto LABEL_64;
            }
          }
          v51 = (_DWORD)v50 << (6 * v48 >= (2 * v50));
LABEL_64:
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IndexKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IndexKey>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IndexKey,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IndexKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a6, v51, (uint64_t *)v41);
          goto LABEL_65;
        }
        return (WebCore *)MEMORY[0x19AEA32A0](v54);
      }
      v29 = (uint64_t *)(v26 + (v27 << 6));
    }
    else
    {
      v29 = 0;
      v27 = 0;
    }
    v28 = (uint64_t *)(v26 + (v27 << 6));
    goto LABEL_28;
  }
  return (WebCore *)MEMORY[0x19AEA32A0](v54);
}

unint64_t WebCore::deserializeIDBValueWithKeyInjection(JSC::JSGlobalObject *a1, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::IDBValue *a4)
{
  const WebCore::IDBValue *v4;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _BYTE v20[8];
  _DWORD *v21;

  v4 = a4;
  v7 = WebCore::deserializeIDBValueToJSValue(a1, a1, a2, a4);
  if (v7 != 10)
  {
    v8 = *((_BYTE *)v4 + 24) && *((_DWORD *)v4 + 4) == 0;
    if (v8
      && std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::isIDBKeyPathValid(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::$_0,WebCore::isIDBKeyPathValid(std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>((uint64_t)&v18, (uint64_t *)v4))
    {
      MEMORY[0x19AEA3294](v20, *((_QWORD *)a1 + 7));
      if (*((_BYTE *)v4 + 24))
      {
        if ((WebCore::injectIDBKeyIntoScriptValue((unint64_t)a1, a3, (bmalloc::api *)v7, (uint64_t)v4) & 1) != 0)
        {
          v9 = v7 & 0xFFFFFFFFFFFFFF00;
LABEL_24:
          MEMORY[0x19AEA32A0](v20);
          return v9 & 0xFFFFFFFFFFFFFF00 | v7;
        }
        v7 = *((_QWORD *)a1 + 7);
        v4 = (const WebCore::IDBValue *)&v18;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v18;
        LOBYTE(v18) = 24;
        v19 = v12;
        if (*(_QWORD *)(v7 + 16))
        {
LABEL_20:
          v19 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          LOBYTE(v7) = 0;
          v9 = 0;
          goto LABEL_24;
        }
        v13 = *((_QWORD *)a1 + 7);
        v14 = *(_QWORD *)(v13 + 16);
        if (!v14)
          goto LABEL_15;
      }
      else
      {
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      if (*(_QWORD *)(v13 + 24) == v14)
      {
        v15 = 10;
LABEL_19:
        v17.super.isa = (Class)v15;
        JSC::VM::throwException((JSC::VM *)v7, a1, v17);
        v12 = v19;
        goto LABEL_20;
      }
LABEL_15:
      WebCore::DOMException::create(0x18u, (WTF::StringImpl **)v4 + 1, (uint64_t *)&v21);
      v15 = WebCore::wrap<WebCore::DOMException>((uint64_t)a1, (uint64_t)a1, v21);
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      JSC::addErrorInfo();
      goto LABEL_19;
    }
  }
  v9 = v7 & 0xFFFFFFFFFFFFFF00;
  return v9 & 0xFFFFFFFFFFFFFF00 | v7;
}

_QWORD *WebCore::callOnIDBSerializationThreadAndWait(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  __int16 v19;
  char v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;

  if ((_MergedGlobals_155 & 1) == 0)
  {
    word_1ECE827D8 = 0;
    *(_OWORD *)&qword_1ECE827E0 = 0u;
    *(_OWORD *)&qword_1ECE827F0 = 0u;
    byte_1ECE82800 = 0;
    _MergedGlobals_155 = 1;
  }
  v2 = atomic_load(&qword_1ECE82730);
  if (v2 != -1)
  {
    v23 = (uint64_t)&v19;
    v21[0] = &v23;
    std::__call_once(&qword_1ECE82730, v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::callOnIDBSerializationThreadAndWait(WTF::Function<void ()(JSC::JSGlobalObject &)> &&)::$_1 &&>>);
  }
  v19 = 0;
  v20 = 0;
  v3 = *a1;
  *a1 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *result = &off_1E3392548;
  result[1] = &v19;
  result[2] = v3;
  *v4 = result;
  if (__ldaxr((unsigned __int8 *)&word_1ECE827D8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&word_1ECE827D8))
  {
    goto LABEL_9;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](&word_1ECE827D8);
LABEL_9:
  if (qword_1ECE827E0)
  {
    if (qword_1ECE827E8 + 1 != qword_1ECE827E0)
      goto LABEL_26;
    v7 = dword_1ECE827F8;
  }
  else
  {
    v7 = dword_1ECE827F8;
    if (qword_1ECE827E8)
    {
      if (qword_1ECE827E8 != dword_1ECE827F8 - 1)
        goto LABEL_26;
    }
    else if (dword_1ECE827F8)
    {
      goto LABEL_26;
    }
  }
  v8 = v7;
  v9 = ((unint64_t)v7 >> 2) + v7;
  if (v9 <= 0xF)
    v9 = 15;
  if (v9 < 0x1FFFFFFF)
  {
    v10 = (char *)qword_1ECE827F0;
    v11 = v9 + 1;
    v12 = (char *)WTF::fastMalloc((WTF *)(8 * (v9 + 1)));
    dword_1ECE827F8 = v11;
    qword_1ECE827F0 = (uint64_t)v12;
    if (qword_1ECE827E0 <= (unint64_t)qword_1ECE827E8)
    {
      memcpy(&v12[8 * qword_1ECE827E0], &v10[8 * qword_1ECE827E0], 8 * qword_1ECE827E8 - 8 * qword_1ECE827E0);
      if (!v10)
        goto LABEL_26;
    }
    else
    {
      memcpy(v12, v10, 8 * qword_1ECE827E8);
      v13 = qword_1ECE827E0 - v8 + dword_1ECE827F8;
      memcpy((void *)(qword_1ECE827F0 + 8 * v13), &v10[8 * qword_1ECE827E0], 8 * v8 - 8 * qword_1ECE827E0);
      qword_1ECE827E0 = v13;
      if (!v10)
        goto LABEL_26;
    }
    if ((char *)qword_1ECE827F0 == v10)
    {
      qword_1ECE827F0 = 0;
      dword_1ECE827F8 = 0;
    }
    WTF::fastFree((WTF *)v10, v14);
LABEL_26:
    v15 = qword_1ECE827E8;
    *(_QWORD *)(qword_1ECE827F0 + 8 * qword_1ECE827E8) = v4;
    if (v15 == dword_1ECE827F8 - 1)
      v16 = 0;
    else
      v16 = v15 + 1;
    qword_1ECE827E8 = v16;
    v17 = atomic_load((unsigned __int8 *)&word_1ECE827D8 + 1);
    if ((v17 & 1) != 0)
    {
      v22 = 0;
      v21[0] = (char *)&word_1ECE827D8 + 1;
      v21[1] = &v22;
      v23 = (uint64_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v24 = &v23;
      v25 = v21;
      WTF::ParkingLot::unparkOneImpl();
    }
    v18 = __ldxr((unsigned __int8 *)&word_1ECE827D8);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&word_1ECE827D8))
        goto LABEL_36;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)&word_1ECE827D8);
LABEL_36:
    v23 = 0x7FF0000000000000;
    LODWORD(v24) = 0;
    return (_QWORD *)WTF::BinarySemaphore::waitUntil();
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::InternalReadableStream::createFromUnderlyingSource@<X0>(JSC::Structure *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v6;
  uint64_t v7;
  WebCore::DOMGuardedObject *v8;
  JSC::JSCell *v9;
  uint64_t v10;
  void *v11;
  int v12;
  WTF *result;
  uint64_t v14;
  _QWORD *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v6 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + 41456) + 3640);
  v19 = 0;
  v21 = (WTF *)&v23;
  v22 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v23 = a2;
  v24 = a3;
  v20 = 0x800000002;
  WebCore::invokeReadableStreamFunction((uint64_t)&v16, a1, v6);
  if (v18)
  {
    if (v18 == 1)
    {
      v14 = v17;
      v17 = 0;
      *(_BYTE *)a4 = (_BYTE)v16;
      *(_QWORD *)(a4 + 8) = v14;
      v12 = 1;
      *(_DWORD *)(a4 + 16) = 1;
LABEL_9:
      ((void (*)(char *, JSC::JSCell **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v28, &v16);
LABEL_10:
      a4 = v22;
      if (!v22)
        goto LABEL_11;
      goto LABEL_18;
    }
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    if (!v18)
    {
      v8 = (WebCore::DOMGuardedObject *)v7;
      v9 = v16;
      if (((unint64_t)v16 & 0xFFFE000000000002) != 0)
      {
        v10 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v16, a1);
      }
      else
      {
        if (*((unsigned __int8 *)v16 + 5) > 0x16u)
          goto LABEL_8;
        v10 = JSC::JSCell::toObjectSlow(v16, a1);
      }
      v9 = (JSC::JSCell *)v10;
LABEL_8:
      WebCore::DOMGuardedObject::DOMGuardedObject(v8, (unint64_t)a1, (unint64_t)v9);
      *(_QWORD *)v8 = &off_1E3392570;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
      v12 = v18;
      if (v18 == -1)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
  v16 = (JSC::JSCell *)&v20;
  v15 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)a4, (uint64_t *)&v16);
  WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove((uint64_t *)a4, v15);
LABEL_11:
  result = v21;
  if (v21 != (WTF *)&v23)
  {
    if (v21)
      return (WTF *)WTF::fastFree(v21, v11);
  }
  return result;
}

uint64_t WebCore::invokeReadableStreamFunction(uint64_t a1, JSC::Structure *a2, unint64_t *a3)
{
  JSC::VM *v6;
  JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v12[3];
  _BYTE v13[8];

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  MEMORY[0x19AEA3294](v13, v6);
  v8 = JSC::JSObject::get(a2, a2, *a3);
  if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
    goto LABEL_12;
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v12[0]) = 0;
  }
  else if (*(_BYTE *)(v8 + 5) == 26)
  {
    JSC::JSFunction::getCallData((JSC::JSFunction *)v8, v7);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v12, v8);
  }
  v9 = JSC::call();
  if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6))
  {
LABEL_12:
    *(_BYTE *)a1 = 37;
    *(_QWORD *)(a1 + 8) = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_QWORD *)a1 = v9;
  }
  *(_DWORD *)(a1 + 16) = v10;
  return MEMORY[0x19AEA32A0](v13);
}

BOOL WebCore::InternalReadableStream::isLocked(WebCore::InternalReadableStream *this)
{
  uint64_t v1;
  JSC::Structure *v2;
  JSC::VM *v3;
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  _BOOL8 v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11[2];
  int v12;
  char v13;
  uint64_t v14;
  WTF *v15;
  _OWORD v16[4];
  uint64_t v17;
  char v18;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 8) & 3) != 0)
    return 0;
  v2 = *(JSC::Structure **)v1;
  if (!*(_QWORD *)v1)
    return 0;
  v3 = (JSC::VM *)*((_QWORD *)v2 + 7);
  v4 = (unint64_t *)(*((_QWORD *)v3 + 5182) + 3720);
  v13 = 0;
  v14 = 0x800000000;
  v15 = (WTF *)((char *)v16 + 8);
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v5 = (uint64_t **)*((_QWORD *)this + 3);
  if (v5)
  {
    if (((_BYTE)v5[1] & 3) != 0)
      v5 = 0;
    else
      v5 = (uint64_t **)*v5;
  }
  *((_QWORD *)&v16[0] + 1) = v5;
  LODWORD(v14) = 1;
  WebCore::invokeReadableStreamFunction((uint64_t)v11, v2, v4);
  if (*((_QWORD *)v3 + 2))
    JSC::VM::clearException(v3);
  v7 = 0;
  if (v12 != -1)
  {
    if (!v12)
      v7 = v11[0] == 7;
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v18, v11);
  }
  if (*(_QWORD *)&v16[0])
  {
    v11[0] = (uint64_t)&v14;
    v9 = *(uint64_t **)&v16[0];
    v10 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v16[0], v11);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v9, v10);
  }
  if (v15 != (WTF *)((char *)v16 + 8) && v15)
    WTF::fastFree(v15, v6);
  return v7;
}

BOOL WebCore::InternalReadableStream::isDisturbed(WebCore::InternalReadableStream *this)
{
  uint64_t v1;
  JSC::Structure *v2;
  JSC::VM *v3;
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  _BOOL8 v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11[2];
  int v12;
  char v13;
  uint64_t v14;
  WTF *v15;
  _OWORD v16[4];
  uint64_t v17;
  char v18;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 8) & 3) != 0)
    return 0;
  v2 = *(JSC::Structure **)v1;
  if (!*(_QWORD *)v1)
    return 0;
  v3 = (JSC::VM *)*((_QWORD *)v2 + 7);
  v4 = (unint64_t *)(*((_QWORD *)v3 + 5182) + 3704);
  v13 = 0;
  v14 = 0x800000000;
  v15 = (WTF *)((char *)v16 + 8);
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v5 = (uint64_t **)*((_QWORD *)this + 3);
  if (v5)
  {
    if (((_BYTE)v5[1] & 3) != 0)
      v5 = 0;
    else
      v5 = (uint64_t **)*v5;
  }
  *((_QWORD *)&v16[0] + 1) = v5;
  LODWORD(v14) = 1;
  WebCore::invokeReadableStreamFunction((uint64_t)v11, v2, v4);
  if (*((_QWORD *)v3 + 2))
    JSC::VM::clearException(v3);
  v7 = 0;
  if (v12 != -1)
  {
    if (!v12)
      v7 = v11[0] == 7;
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v18, v11);
  }
  if (*(_QWORD *)&v16[0])
  {
    v11[0] = (uint64_t)&v14;
    v9 = *(uint64_t **)&v16[0];
    v10 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v16[0], v11);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v9, v10);
  }
  if (v15 != (WTF *)((char *)v16 + 8) && v15)
    WTF::fastFree(v15, v6);
  return v7;
}

uint64_t WebCore::InternalReadableStream::cancel(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  JSC::Structure *v3;
  uint64_t v5;
  JSC::VM *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _BYTE v10[8];

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 8) & 3) == 0)
    {
      v3 = *(JSC::Structure **)v2;
      if (*(_QWORD *)v2)
      {
        v5 = result;
        v6 = (JSC::VM *)*((_QWORD *)v3 + 7);
        MEMORY[0x19AEA3294](v10, v6);
        WebCore::DOMException::create(a2, (uint64_t *)&v9);
        v7 = WebCore::toJSNewlyCreated((uint64_t)v3, (uint64_t)v3, (WebCore::JSDOMGlobalObject *)&v9);
        WebCore::InternalReadableStream::cancel(v5, v3, v7, 1);
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (v8[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          else
            --v8[2];
        }
        if (*((_QWORD *)v6 + 2))
          JSC::VM::clearException(v6);
        return MEMORY[0x19AEA32A0](v10);
      }
    }
  }
  return result;
}

uint64_t WebCore::InternalReadableStream::cancel(uint64_t a1, JSC::Structure *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t **v7;
  void *v8;
  uint64_t v9;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13[2];
  int v14;
  char v15;
  uint64_t v16;
  WTF *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 41456);
  v5 = (unint64_t *)(v4 + 3928);
  v6 = (unint64_t *)(v4 + 3912);
  if (!a4)
    v6 = v5;
  v15 = 0;
  v16 = 0x800000000;
  v17 = (WTF *)((char *)&v18 + 8);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v7 = *(uint64_t ***)(a1 + 24);
  if (v7)
  {
    if (((_BYTE)v7[1] & 3) != 0)
      v7 = 0;
    else
      v7 = (uint64_t **)*v7;
  }
  *((_QWORD *)&v18 + 1) = v7;
  *(_QWORD *)&v19 = a3;
  LODWORD(v16) = 2;
  WebCore::invokeReadableStreamFunction((uint64_t)v13, a2, v6);
  v9 = 0;
  if (v14 != -1)
  {
    if (!v14)
      v9 = v13[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(&v23, v13);
  }
  if ((_QWORD)v18)
  {
    v13[0] = (uint64_t)&v16;
    v11 = (uint64_t *)v18;
    v12 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v18, v13);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v11, v12);
  }
  if (v17 != (WTF *)((char *)&v18 + 8) && v17)
    WTF::fastFree(v17, v8);
  return v9;
}

WTF *WebCore::InternalReadableStream::lock(WTF *this)
{
  uint64_t v1;
  JSC::Structure *v2;
  JSC::VM *v3;
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  uint64_t *v7;
  _QWORD *v8;
  _BYTE v9[16];
  int v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[4];
  uint64_t v15;
  uint64_t *v16;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 8) & 3) == 0)
    {
      v2 = *(JSC::Structure **)v1;
      if (*(_QWORD *)v1)
      {
        v3 = (JSC::VM *)*((_QWORD *)v2 + 7);
        v4 = (unint64_t *)(*((_QWORD *)v3 + 5182) + 3624);
        v11 = 0;
        v12 = 0x800000000;
        v13 = (WTF *)((char *)v14 + 8);
        memset(v14, 0, sizeof(v14));
        v15 = 0;
        v5 = (uint64_t **)*((_QWORD *)this + 3);
        if (v5)
        {
          if (((_BYTE)v5[1] & 3) != 0)
            v5 = 0;
          else
            v5 = (uint64_t **)*v5;
        }
        *((_QWORD *)&v14[0] + 1) = v5;
        LODWORD(v12) = 1;
        WebCore::invokeReadableStreamFunction((uint64_t)v9, v2, v4);
        if (v10 != -1)
          ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v16, v9);
        v10 = -1;
        if (*((_QWORD *)v3 + 2))
          JSC::VM::clearException(v3);
        v7 = *(uint64_t **)&v14[0];
        if (*(_QWORD *)&v14[0])
        {
          v16 = &v12;
          v8 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v14[0], (uint64_t *)&v16);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v7, v8);
        }
        this = v13;
        if (v13 != (WTF *)((char *)v14 + 8))
        {
          if (v13)
            return (WTF *)WTF::fastFree(v13, v6);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InternalReadableStream::pipeTo(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  JSC::Structure *v3;
  uint64_t v5;
  JSC::VM *v6;
  unint64_t *v7;
  uint64_t **v8;
  objc_class *v9;
  JSValue v10;
  void *v11;
  uint64_t *v12;
  _QWORD *v13;
  _BYTE v14[16];
  int v15;
  char v16;
  uint64_t v17;
  WTF *v18;
  _OWORD v19[4];
  uint64_t v20;
  _BYTE v21[8];
  uint64_t *v22;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 8) & 3) == 0)
    {
      v3 = *(JSC::Structure **)v2;
      if (*(_QWORD *)v2)
      {
        v5 = result;
        v6 = (JSC::VM *)*((_QWORD *)v3 + 7);
        MEMORY[0x19AEA3294](v21, v6);
        v7 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v3 + 7) + 41456) + 4216);
        v16 = 0;
        v17 = 0x800000000;
        v18 = (WTF *)((char *)v19 + 8);
        memset(v19, 0, sizeof(v19));
        v20 = 0;
        v8 = *(uint64_t ***)(v5 + 24);
        if (v8)
        {
          if (((_BYTE)v8[1] & 3) != 0)
            v8 = 0;
          else
            v8 = (uint64_t **)*v8;
        }
        *((_QWORD *)&v19[0] + 1) = v8;
        LODWORD(v17) = 1;
        v9 = (objc_class *)WebCore::wrap<WebCore::ReadableStreamSink>((uint64_t)v3, (uint64_t)v3, a2);
        v10.super.isa = v9;
        if (v18 == (WTF *)((char *)v19 + 8) || !v18)
        {
          *((_QWORD *)v18 + v17) = v9;
          LODWORD(v17) = 2;
        }
        else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v17, v10) == 1)
        {
          v16 = 1;
        }
        WebCore::invokeReadableStreamFunction((uint64_t)v14, v3, v7);
        if (v15 != -1)
          ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&v22, v14);
        v15 = -1;
        if (*((_QWORD *)v6 + 2))
          JSC::VM::clearException(v6);
        v12 = *(uint64_t **)&v19[0];
        if (*(_QWORD *)&v19[0])
        {
          v22 = &v17;
          v13 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v19[0], (uint64_t *)&v22);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v13);
        }
        if (v18 != (WTF *)((char *)v19 + 8))
        {
          if (v18)
            WTF::fastFree(v18, v11);
        }
        return MEMORY[0x19AEA32A0](v21);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InternalReadableStream::tee@<X0>(WTF::StringImpl *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  JSC::Structure *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  char v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  WebCore::DOMGuardedObject *v20;
  unint64_t *v21;
  unint64_t v22;
  WebCore::DOMGuardedObject *v23;
  WebCore::DOMGuardedObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33[2];
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;

  v4 = *((_QWORD *)this + 4);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0 || (v5 = *(JSC::Structure **)v4) == 0)
  {
    v15 = 8;
LABEL_27:
    *(_BYTE *)a3 = v15;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v6 = *((_QWORD *)v5 + 7);
  v7 = (uint64_t **)*((_QWORD *)this + 3);
  v8 = (unint64_t *)(*(_QWORD *)(v6 + 41456) + 4312);
  LOBYTE(v35) = 0;
  HIDWORD(v36) = 8;
  v37 = (WTF *)((char *)&v38 + 8);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  if (v7)
  {
    if (((_BYTE)v7[1] & 3) != 0)
      v7 = 0;
    else
      v7 = (uint64_t **)*v7;
  }
  v9 = 6;
  if (a2)
    v9 = 7;
  *((_QWORD *)&v38 + 1) = v7;
  *(_QWORD *)&v39 = v9;
  LODWORD(v36) = 2;
  WebCore::invokeReadableStreamFunction((uint64_t)v33, v5, v8);
  v11 = 0;
  if (v34 != -1)
  {
    if (!v34)
      v11 = v33[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v34])(&v43, v33);
  }
  v12 = (uint64_t *)v38;
  if ((_QWORD)v38)
  {
    v33[0] = (uint64_t)&v36;
    v32 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v38, v33);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v32);
  }
  this = v37;
  if (v37 != (WTF *)((char *)&v38 + 8) && v37)
    this = (WTF::StringImpl *)WTF::fastFree(v37, v10);
  if (*(_QWORD *)(v6 + 16))
  {
    v15 = 37;
    goto LABEL_27;
  }
  v33[0] = *((_QWORD *)v5 + 7);
  if ((v11 & 0xFFFE000000000002) != 0 || (v13 = *(unsigned __int8 *)(v11 + 5), v13 <= 0x16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    this = v35;
    v35 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
      else
        *(_DWORD *)this -= 2;
    }
    LODWORD(v37) = 1;
  }
  else if (v13 == 36 && (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)v11) & 1) != 0)
  {
    this = WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)v5, v11, (uint64_t)&v35);
  }
  else
  {
    this = (WTF::StringImpl *)WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(v5, v11, (uint64_t)&v35);
  }
  v16 = (int)v37;
  if ((_DWORD)v37)
  {
    *(_BYTE *)a3 = 37;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    v17 = v35;
    v18 = HIDWORD(v36);
    v35 = 0;
    v36 = 0;
    if (!(_DWORD)v18
      || (!*(_QWORD *)v17 ? (v19 = 0) : (v19 = **(_QWORD **)v17),
          v20 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28),
          *(_QWORD *)WebCore::DOMGuardedObject::DOMGuardedObject(v20, (unint64_t)v5, v19) = &off_1E3392570,
          v18 <= 1))
    {
      __break(0xC471u);
      JUMPOUT(0x19568F698);
    }
    v21 = (unint64_t *)*((_QWORD *)v17 + 1);
    if (v21)
      v22 = *v21;
    else
      v22 = 0;
    v23 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
    v24 = WebCore::DOMGuardedObject::DOMGuardedObject(v23, (unint64_t)v5, v22);
    v26 = 0;
    *(_QWORD *)v24 = &off_1E3392570;
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + 16) = 0;
    do
    {
      v27 = *(_QWORD *)((char *)v17 + v26);
      if (v27)
      {
        v28 = (uint64_t *)(v27 - 16);
        v29 = *(_QWORD *)(((v27 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v30 = *(uint64_t **)(v27 - 8);
        if (v30)
        {
          v31 = *v28;
          *v30 = *v28;
          *(_QWORD *)(v31 + 8) = v30;
          *v28 = 0;
          v28[1] = 0;
        }
        *v28 = *(_QWORD *)(v29 + 40);
        *(_QWORD *)(v29 + 40) = v28;
        *(_QWORD *)((char *)v17 + v26) = 0;
      }
      v26 += 8;
    }
    while (8 * v18 != v26);
    this = (WTF::StringImpl *)WTF::fastFree(v17, v25);
    v16 = (int)v37;
  }
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E33925A8[v16])(v33, &v35);
  return this;
}

uint64_t WebCore::InternalReadableStream::getReader(uint64_t a1, JSC::Structure *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  uint64_t v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11[2];
  int v12;
  char v13;
  uint64_t v14;
  WTF *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  v4 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 4184);
  v13 = 0;
  v14 = 0x800000000;
  v15 = (WTF *)((char *)&v16 + 8);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v5 = *(uint64_t ***)(a1 + 24);
  if (v5)
  {
    if (((_BYTE)v5[1] & 3) != 0)
      v5 = 0;
    else
      v5 = (uint64_t **)*v5;
  }
  *((_QWORD *)&v16 + 1) = v5;
  *(_QWORD *)&v17 = a3;
  LODWORD(v14) = 2;
  WebCore::invokeReadableStreamFunction((uint64_t)v11, a2, v4);
  v7 = 0;
  if (v12 != -1)
  {
    if (!v12)
      v7 = v11[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v21, v11);
  }
  if ((_QWORD)v16)
  {
    v11[0] = (uint64_t)&v14;
    v9 = (uint64_t *)v16;
    v10 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v16, v11);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v9, v10);
  }
  if (v15 != (WTF *)((char *)&v16 + 8) && v15)
    WTF::fastFree(v15, v6);
  return v7;
}

uint64_t WebCore::InternalReadableStream::pipeTo(uint64_t a1, JSC::Structure *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v5;
  uint64_t **v6;
  void *v7;
  uint64_t v8;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12[2];
  int v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v5 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 4232);
  v14 = 0;
  v15 = 0x800000000;
  v16 = (WTF *)((char *)&v17 + 8);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v6 = *(uint64_t ***)(a1 + 24);
  if (v6)
  {
    if (((_BYTE)v6[1] & 3) != 0)
      v6 = 0;
    else
      v6 = (uint64_t **)*v6;
  }
  *((_QWORD *)&v17 + 1) = v6;
  *(_QWORD *)&v18 = a3;
  *((_QWORD *)&v18 + 1) = a4;
  LODWORD(v15) = 3;
  WebCore::invokeReadableStreamFunction((uint64_t)v12, a2, v5);
  v8 = 0;
  if (v13 != -1)
  {
    if (!v13)
      v8 = v12[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(&v22, v12);
  }
  if ((_QWORD)v17)
  {
    v12[0] = (uint64_t)&v15;
    v10 = (uint64_t *)v17;
    v11 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v17, v12);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v10, v11);
  }
  if (v16 != (WTF *)((char *)&v17 + 8) && v16)
    WTF::fastFree(v16, v7);
  return v8;
}

uint64_t WebCore::InternalReadableStream::pipeThrough(uint64_t a1, JSC::Structure *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v5;
  uint64_t **v6;
  void *v7;
  uint64_t v8;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12[2];
  int v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v5 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 4200);
  v14 = 0;
  v15 = 0x800000000;
  v16 = (WTF *)((char *)&v17 + 8);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v6 = *(uint64_t ***)(a1 + 24);
  if (v6)
  {
    if (((_BYTE)v6[1] & 3) != 0)
      v6 = 0;
    else
      v6 = (uint64_t **)*v6;
  }
  *((_QWORD *)&v17 + 1) = v6;
  *(_QWORD *)&v18 = a3;
  *((_QWORD *)&v18 + 1) = a4;
  LODWORD(v15) = 3;
  WebCore::invokeReadableStreamFunction((uint64_t)v12, a2, v5);
  v8 = 0;
  if (v13 != -1)
  {
    if (!v13)
      v8 = v12[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(&v22, v12);
  }
  if ((_QWORD)v17)
  {
    v12[0] = (uint64_t)&v15;
    v10 = (uint64_t *)v17;
    v11 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v17, v12);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v10, v11);
  }
  if (v16 != (WTF *)((char *)&v17 + 8) && v16)
    WTF::fastFree(v16, v7);
  return v8;
}

WTF *WebCore::InternalWritableStream::createFromUnderlyingSink@<X0>(JSC::Structure *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v6;
  uint64_t v7;
  WebCore::DOMGuardedObject *v8;
  JSC::JSCell *v9;
  uint64_t v10;
  void *v11;
  int v12;
  WTF *result;
  uint64_t v14;
  _QWORD *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v6 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + 41456) + 8584);
  v19 = 0;
  v21 = (WTF *)&v23;
  v22 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v23 = a2;
  v24 = a3;
  v20 = 0x800000002;
  WebCore::invokeReadableStreamFunction((uint64_t)&v16, a1, v6);
  if (v18)
  {
    if (v18 == 1)
    {
      v14 = v17;
      v17 = 0;
      *(_BYTE *)a4 = (_BYTE)v16;
      *(_QWORD *)(a4 + 8) = v14;
      v12 = 1;
      *(_DWORD *)(a4 + 16) = 1;
LABEL_9:
      ((void (*)(char *, JSC::JSCell **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v28, &v16);
LABEL_10:
      a4 = v22;
      if (!v22)
        goto LABEL_11;
      goto LABEL_18;
    }
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    if (!v18)
    {
      v8 = (WebCore::DOMGuardedObject *)v7;
      v9 = v16;
      if (((unint64_t)v16 & 0xFFFE000000000002) != 0)
      {
        v10 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v16, a1);
      }
      else
      {
        if (*((unsigned __int8 *)v16 + 5) > 0x16u)
          goto LABEL_8;
        v10 = JSC::JSCell::toObjectSlow(v16, a1);
      }
      v9 = (JSC::JSCell *)v10;
LABEL_8:
      WebCore::DOMGuardedObject::DOMGuardedObject(v8, (unint64_t)a1, (unint64_t)v9);
      *(_QWORD *)v8 = &off_1E33925C8;
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
      v12 = v18;
      if (v18 == -1)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
  v16 = (JSC::JSCell *)&v20;
  v15 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)a4, (uint64_t *)&v16);
  WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove((uint64_t *)a4, v15);
LABEL_11:
  result = v21;
  if (v21 != (WTF *)&v23)
  {
    if (v21)
      return (WTF *)WTF::fastFree(v21, v11);
  }
  return result;
}

BOOL WebCore::InternalWritableStream::locked(WebCore::InternalWritableStream *this)
{
  uint64_t v1;
  JSC::Structure *v2;
  JSC::VM *v3;
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  _BOOL8 v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11[2];
  int v12;
  char v13;
  uint64_t v14;
  WTF *v15;
  _OWORD v16[4];
  uint64_t v17;
  char v18;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 8) & 3) != 0)
    return 0;
  v2 = *(JSC::Structure **)v1;
  if (!*(_QWORD *)v1)
    return 0;
  v3 = (JSC::VM *)*((_QWORD *)v2 + 7);
  v4 = (unint64_t *)(*((_QWORD *)v3 + 5182) + 8680);
  v13 = 0;
  v14 = 0x800000000;
  v15 = (WTF *)((char *)v16 + 8);
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v5 = (uint64_t **)*((_QWORD *)this + 3);
  if (v5)
  {
    if (((_BYTE)v5[1] & 3) != 0)
      v5 = 0;
    else
      v5 = (uint64_t **)*v5;
  }
  *((_QWORD *)&v16[0] + 1) = v5;
  LODWORD(v14) = 1;
  WebCore::invokeReadableStreamFunction((uint64_t)v11, v2, v4);
  if (*((_QWORD *)v3 + 2))
    JSC::VM::clearException(v3);
  v7 = 0;
  if (v12 != -1)
  {
    if (!v12)
      v7 = v11[0] == 7;
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v18, v11);
  }
  if (*(_QWORD *)&v16[0])
  {
    v11[0] = (uint64_t)&v14;
    v9 = *(uint64_t **)&v16[0];
    v10 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v16[0], v11);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v9, v10);
  }
  if (v15 != (WTF *)((char *)v16 + 8) && v15)
    WTF::fastFree(v15, v6);
  return v7;
}

WTF *WebCore::InternalWritableStream::lock(WTF *this)
{
  uint64_t v1;
  JSC::Structure *v2;
  JSC::VM *v3;
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  uint64_t *v7;
  _QWORD *v8;
  _BYTE v9[16];
  int v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[4];
  uint64_t v15;
  uint64_t *v16;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 8) & 3) == 0)
    {
      v2 = *(JSC::Structure **)v1;
      if (*(_QWORD *)v1)
      {
        v3 = (JSC::VM *)*((_QWORD *)v2 + 7);
        v4 = (unint64_t *)(*((_QWORD *)v3 + 5182) + 8568);
        v11 = 0;
        v12 = 0x800000000;
        v13 = (WTF *)((char *)v14 + 8);
        memset(v14, 0, sizeof(v14));
        v15 = 0;
        v5 = (uint64_t **)*((_QWORD *)this + 3);
        if (v5)
        {
          if (((_BYTE)v5[1] & 3) != 0)
            v5 = 0;
          else
            v5 = (uint64_t **)*v5;
        }
        *((_QWORD *)&v14[0] + 1) = v5;
        LODWORD(v12) = 1;
        WebCore::invokeReadableStreamFunction((uint64_t)v9, v2, v4);
        if (v10 != -1)
          ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v16, v9);
        v10 = -1;
        if (*((_QWORD *)v3 + 2))
          JSC::VM::clearException(v3);
        v7 = *(uint64_t **)&v14[0];
        if (*(_QWORD *)&v14[0])
        {
          v16 = &v12;
          v8 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v14[0], (uint64_t *)&v16);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v7, v8);
        }
        this = v13;
        if (v13 != (WTF *)((char *)v14 + 8))
        {
          if (v13)
            return (WTF *)WTF::fastFree(v13, v6);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InternalWritableStream::abortForBindings(uint64_t a1, JSC::Structure *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  uint64_t v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11[2];
  int v12;
  char v13;
  uint64_t v14;
  WTF *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  v4 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 8760);
  v13 = 0;
  v14 = 0x800000000;
  v15 = (WTF *)((char *)&v16 + 8);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v5 = *(uint64_t ***)(a1 + 24);
  if (v5)
  {
    if (((_BYTE)v5[1] & 3) != 0)
      v5 = 0;
    else
      v5 = (uint64_t **)*v5;
  }
  *((_QWORD *)&v16 + 1) = v5;
  *(_QWORD *)&v17 = a3;
  LODWORD(v14) = 2;
  WebCore::invokeReadableStreamFunction((uint64_t)v11, a2, v4);
  v7 = 0;
  if (v12 != -1)
  {
    if (!v12)
      v7 = v11[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v21, v11);
  }
  if ((_QWORD)v16)
  {
    v11[0] = (uint64_t)&v14;
    v9 = (uint64_t *)v16;
    v10 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v16, v11);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v9, v10);
  }
  if (v15 != (WTF *)((char *)&v16 + 8) && v15)
    WTF::fastFree(v15, v6);
  return v7;
}

uint64_t WebCore::InternalWritableStream::closeForBindings(WebCore::InternalWritableStream *this, JSC::JSGlobalObject *a2)
{
  unint64_t *v2;
  uint64_t **v3;
  void *v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9[2];
  int v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[4];
  uint64_t v15;
  char v16;

  v2 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 8808);
  v11 = 0;
  v12 = 0x800000000;
  v13 = (WTF *)((char *)v14 + 8);
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v3 = (uint64_t **)*((_QWORD *)this + 3);
  if (v3)
  {
    if (((_BYTE)v3[1] & 3) != 0)
      v3 = 0;
    else
      v3 = (uint64_t **)*v3;
  }
  *((_QWORD *)&v14[0] + 1) = v3;
  LODWORD(v12) = 1;
  WebCore::invokeReadableStreamFunction((uint64_t)v9, a2, v2);
  v5 = 0;
  if (v10 != -1)
  {
    if (!v10)
      v5 = v9[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v16, v9);
  }
  if (*(_QWORD *)&v14[0])
  {
    v9[0] = (uint64_t)&v12;
    v7 = *(uint64_t **)&v14[0];
    v8 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v14[0], v9);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v7, v8);
  }
  if (v13 != (WTF *)((char *)v14 + 8) && v13)
    WTF::fastFree(v13, v4);
  return v5;
}

WTF *WebCore::InternalWritableStream::closeIfPossible(WTF *this)
{
  uint64_t v1;
  JSC::Structure *v2;
  JSC::VM *v3;
  unint64_t *v4;
  uint64_t **v5;
  void *v6;
  uint64_t *v7;
  _QWORD *v8;
  _BYTE v9[16];
  int v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[4];
  uint64_t v15;
  uint64_t *v16;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 8) & 3) == 0)
    {
      v2 = *(JSC::Structure **)v1;
      if (*(_QWORD *)v1)
      {
        v3 = (JSC::VM *)*((_QWORD *)v2 + 7);
        v4 = (unint64_t *)(*((_QWORD *)v3 + 5182) + 8824);
        v11 = 0;
        v12 = 0x800000000;
        v13 = (WTF *)((char *)v14 + 8);
        memset(v14, 0, sizeof(v14));
        v15 = 0;
        v5 = (uint64_t **)*((_QWORD *)this + 3);
        if (v5)
        {
          if (((_BYTE)v5[1] & 3) != 0)
            v5 = 0;
          else
            v5 = (uint64_t **)*v5;
        }
        *((_QWORD *)&v14[0] + 1) = v5;
        LODWORD(v12) = 1;
        WebCore::invokeReadableStreamFunction((uint64_t)v9, v2, v4);
        if (v10 != -1)
          ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v16, v9);
        v10 = -1;
        if (*((_QWORD *)v3 + 2))
          JSC::VM::clearException(v3);
        v7 = *(uint64_t **)&v14[0];
        if (*(_QWORD *)&v14[0])
        {
          v16 = &v12;
          v8 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v14[0], (uint64_t *)&v16);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v7, v8);
        }
        this = v13;
        if (v13 != (WTF *)((char *)v14 + 8))
        {
          if (v13)
            return (WTF *)WTF::fastFree(v13, v6);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InternalWritableStream::getWriter(WebCore::InternalWritableStream *this, JSC::JSGlobalObject *a2)
{
  unint64_t *v2;
  uint64_t **v3;
  void *v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9[2];
  int v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[4];
  uint64_t v15;
  char v16;

  v2 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 8568);
  v11 = 0;
  v12 = 0x800000000;
  v13 = (WTF *)((char *)v14 + 8);
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v3 = (uint64_t **)*((_QWORD *)this + 3);
  if (v3)
  {
    if (((_BYTE)v3[1] & 3) != 0)
      v3 = 0;
    else
      v3 = (uint64_t **)*v3;
  }
  *((_QWORD *)&v14[0] + 1) = v3;
  LODWORD(v12) = 1;
  WebCore::invokeReadableStreamFunction((uint64_t)v9, a2, v2);
  v5 = 0;
  if (v10 != -1)
  {
    if (!v10)
      v5 = v9[0];
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v16, v9);
  }
  if (*(_QWORD *)&v14[0])
  {
    v9[0] = (uint64_t)&v12;
    v7 = *(uint64_t **)&v14[0];
    v8 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v14[0], v9);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v7, v8);
  }
  if (v13 != (WTF *)((char *)v14 + 8) && v13)
    WTF::fastFree(v13, v4);
  return v5;
}

uint64_t WebCore::JSAbortSignal::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(*(_QWORD *)(result + 24) + 144);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSAbortSignalOwner::isReachableFromOpaqueRoots(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WTF *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  WTF::ConcurrentPtrHashSet *v21;
  _DWORD *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (*(_BYTE *)(v5 + 156))
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    if (a5)
    {
      v9 = "Is Following Signal";
      v10 = 20;
LABEL_25:
      *a5 = v9;
      a5[1] = (const char *)v10;
      return 1;
    }
    return 1;
  }
  if (*(_BYTE *)(v5 + 158))
  {
    if (*(_BYTE *)(v5 + 157))
    {
      if (a5)
      {
        v9 = "Has Timeout And Abort Event Listener";
        v10 = 37;
        goto LABEL_25;
      }
      return 1;
    }
    v11 = *(_QWORD *)(v5 + 72);
    if (v11 && *(_DWORD *)(v11 - 12))
    {
      v12 = v5 + 80;
      if (*(_QWORD *)(v5 + 80))
      {
        v13 = *(_QWORD **)(v5 + 80);
        do
        {
          if (*(_QWORD *)(*v13 + 8))
          {
            if (!a5)
              return 1;
            v9 = "Has Source Signals And Abort Event Listener";
            v10 = 44;
            goto LABEL_25;
          }
          v13 = (_QWORD *)v13[2];
        }
        while (v13);
        v31 = *(WTF **)(v5 + 80);
        do
        {
          v14 = v31;
          v15 = (WTF *)*((_QWORD *)v31 + 2);
          v16 = *(unsigned int **)v31;
          *(_QWORD *)v31 = 0;
          v30 = (WTF *)v16;
          v31 = v15;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              v19 = v16[7];
              if ((_DWORD)v19)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v30 + 2), (WTF::StringImpl *)(*((_QWORD *)v30 + 2) + 32 * v19));
              v20 = (WTF *)*((_QWORD *)v30 + 2);
              if (v20)
              {
                *((_QWORD *)v30 + 2) = 0;
                *((_DWORD *)v30 + 6) = 0;
                WTF::fastFree(v20, a2);
              }
              WTF::fastFree(v30, a2);
            }
          }
          WTF::fastFree(v14, a2);
        }
        while (v31);
        v11 = *(_QWORD *)(v5 + 72);
        v12 = v5 + 80;
        if (!v11)
        {
          *(_QWORD *)(v5 + 80) = 0;
          *(_QWORD *)(v5 + 88) = 0;
          *(_DWORD *)(v5 + 96) = 0;
          goto LABEL_38;
        }
      }
      *(_QWORD *)(v5 + 72) = 0;
      WTF::fastFree((WTF *)(v11 - 16), a2);
      v11 = *(_QWORD *)(v5 + 72);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      if (v11)
      {
        LODWORD(v11) = *(_DWORD *)(v11 - 12);
        if (v11 > 0x7FFFFFFE)
          LODWORD(v11) = 0x7FFFFFFF;
      }
LABEL_38:
      *(_DWORD *)(v5 + 100) = 2 * v11;
    }
  }
  v21 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v22 = (_DWORD *)*((_QWORD *)v21 + 6);
  if ((_DWORD *)((char *)v21 + 56) != v22)
  {
    v23 = v22[1];
    v24 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    v28 = v27;
    while (1)
    {
      v29 = *(_QWORD *)&v22[2 * v28 + 4];
      if (!v29)
        return 0;
      if (v5 == v29)
        goto LABEL_46;
      v28 = (v28 + 1) & v23;
      if (v28 == v27)
      {
        __break(0xC471u);
        JUMPOUT(0x1956906BCLL);
      }
    }
  }
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v21, (void *)v5);
  if ((_DWORD)result)
  {
LABEL_46:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v5);
    return 1;
  }
  return result;
}

uint64_t WebCore::wrap<WebCore::AbstractRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3) & 1) != 0)
  {
    v18 = (_DWORD *)a3;
    v15 = WebCore::createWrapper<WebCore::Range,WebCore::Range>(a2, (uint64_t *)&v18);
  }
  else
  {
    v18 = (_DWORD *)a3;
    v15 = WebCore::createWrapper<WebCore::StaticRange,WebCore::StaticRange>(a2, (uint64_t *)&v18);
  }
  v14 = v15;
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  return v14;
}

unint64_t WebCore::wrap<WebCore::AnimationEffect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  JSC::VM *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t Prototype;
  unint64_t v29;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t v32;
  uint64_t v33;
  _QWORD *Allocator;
  _DWORD *v35;
  WebCore::JSAnimationEffectPrototype *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  int v44;
  unint64_t v45;
  unint64_t Structure;
  JSC::Structure *v47;
  JSC::JSCell *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _QWORD *v62;
  uint64_t v63;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    v61 = (_DWORD *)a3;
    v17 = *(_QWORD *)(a2 + 56);
    v18 = *(_QWORD *)(a2 + 3296);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = ((unint64_t)&WebCore::JSKeyframeEffect::s_info + ~((_QWORD)&WebCore::JSKeyframeEffect::s_info << 32)) ^ (((unint64_t)&WebCore::JSKeyframeEffect::s_info + ~((_QWORD)&WebCore::JSKeyframeEffect::s_info << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(char ***)(v18 + 16 * v23);
      if (v24 == &WebCore::JSKeyframeEffect::s_info)
      {
LABEL_15:
        v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
        if (v26)
        {
LABEL_24:
          v32 = WebCore::JSKeyframeEffect::create(v26, (JSC::VM *)a2, (uint64_t *)&v61);
          v14 = v32;
          v33 = *(_QWORD *)(a2 + 3320);
          {
            WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationEffect *)::owner = (uint64_t)&off_1E3226610;
          }
          v63 = a3;
          if (v32)
          {
            if ((v32 & 8) != 0)
              v59 = (v32 - 112) | 1;
            else
              v59 = v32 & 0xFFFFFFFFFFFFC000;
            if ((v59 & 1) != 0)
              v60 = v59 + 47;
            else
              v60 = *(_QWORD *)v59 + 32;
            Allocator = *(_QWORD **)(v60 + 16);
            if (!Allocator)
              Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v60 + 16) = *Allocator;
            *Allocator = v14;
            Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationEffect *)::owner;
            Allocator[2] = v33;
          }
          else
          {
            Allocator = 0;
          }
          v62 = Allocator;
          JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), &v63, (uint64_t *)&v62);
          if (v62)
            v62[1] = 3;
          v35 = v61;
          v61 = 0;
          if (v35)
          {
            if (v35[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            else
              --v35[2];
          }
          return v14;
        }
      }
      else
      {
        v25 = 1;
        while (v24)
        {
          v23 = ((_DWORD)v23 + v25) & v19;
          v24 = *(char ***)(v18 + 16 * v23);
          ++v25;
          if (v24 == &WebCore::JSKeyframeEffect::s_info)
            goto LABEL_15;
        }
      }
    }
    v27 = (uint64_t *)(v17 + 40136);
    Prototype = WebCore::JSKeyframeEffect::createPrototype(*(WebCore::JSKeyframeEffect **)(a2 + 56), (JSC::VM *)a2, v16);
    v29 = Prototype;
    LODWORD(v63) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (Object)
        JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v17);
    }
    SlowCase = *v27;
    if ((unint64_t)*v27 >= *(_QWORD *)(v17 + 40144))
    {
      SlowCase = *(_QWORD *)(v17 + 40152);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_21;
      }
      v58 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v17 + 40160);
      *(_QWORD *)(v17 + 40144) = SlowCase + HIDWORD(v58);
      *(_QWORD *)(v17 + 40152) = SlowCase + (int)v58;
    }
    *v27 = SlowCase + 128;
LABEL_21:
    *(_DWORD *)SlowCase = 0;
    MEMORY[0x19AEA4278](SlowCase, v17, a2, v29, &v63, &WebCore::JSKeyframeEffect::s_info, 0, 0);
    if (*(_BYTE *)(v17 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSKeyframeEffect::s_info);
    goto LABEL_24;
  }
  v36 = *(WebCore::JSAnimationEffectPrototype **)(a2 + 56);
  v37 = *(_QWORD *)(a2 + 3296);
  if (v37)
  {
    v38 = *(_DWORD *)(v37 - 8);
    v39 = ((unint64_t)&WebCore::JSAnimationEffect::s_info + ~((_QWORD)&WebCore::JSAnimationEffect::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationEffect::s_info + ~((_QWORD)&WebCore::JSAnimationEffect::s_info << 32)) >> 22);
    v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
    v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
    v42 = v38 & ((v41 >> 31) ^ v41);
    v43 = *(char ***)(v37 + 16 * v42);
    if (v43 == &WebCore::JSAnimationEffect::s_info)
    {
LABEL_38:
      v45 = *(_QWORD *)(v37 + 16 * v42 + 8);
      if (v45)
        goto LABEL_40;
    }
    else
    {
      v44 = 1;
      while (v43)
      {
        v42 = ((_DWORD)v42 + v44) & v38;
        v43 = *(char ***)(v37 + 16 * v42);
        ++v44;
        if (v43 == &WebCore::JSAnimationEffect::s_info)
          goto LABEL_38;
      }
    }
  }
  Structure = WebCore::JSAnimationEffectPrototype::createStructure(*(uint64_t **)(a2 + 56), a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v48 = (JSC::JSCell *)WebCore::JSAnimationEffectPrototype::create(v36, (JSC::VM *)a2, Structure, v47);
  v49 = WebCore::JSAnimationEffect::createStructure((uint64_t *)v36, a2, v48);
  v45 = WebCore::cacheDOMStructure((JSCell *)a2, v49, (uint64_t)&WebCore::JSAnimationEffect::s_info);
  v36 = *(WebCore::JSAnimationEffectPrototype **)(a2 + 56);
LABEL_40:
  v50 = (_QWORD *)WebCore::JSAnimationEffect::subspaceForImpl(v36, v15);
  v14 = v50[3];
  if (v14 >= v50[4])
  {
    v14 = v50[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_42;
    }
    v57 = *(_QWORD *)(v14 + 8) ^ v50[6];
    v50[4] = v14 + HIDWORD(v57);
    v50[5] = v14 + (int)v57;
  }
  v50[3] = v14 + 32;
LABEL_42:
  *(_DWORD *)v14 = 0;
  v51 = *(_DWORD *)(v45 + 8);
  *(_DWORD *)v14 = v45 >> 4;
  *(_DWORD *)(v14 + 4) = v51;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 16 * *(unsigned int *)(v45 + 76);
  *(_QWORD *)(v14 + 24) = a3;
  if (*((_BYTE *)v36 + 755))
    __dmb(0xAu);
  v52 = *(_QWORD *)(a2 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationEffect *)::owner = (uint64_t)&off_1E3226610;
  }
  v63 = a3;
  if ((v14 & 8) != 0)
    v53 = (v14 - 112) | 1;
  else
    v53 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v53 & 1) != 0)
    v54 = v53 + 47;
  else
    v54 = *(_QWORD *)v53 + 32;
  v55 = *(_QWORD **)(v54 + 16);
  if (!v55)
    v55 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v54 + 16) = *v55;
  *v55 = v14;
  v55[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationEffect *)::owner;
  v55[2] = v52;
  v62 = v55;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v52 + 32), &v63, (uint64_t *)&v62);
  if (v62)
    v62[1] = 3;
  return v14;
}

unint64_t WebCore::wrap<WebCore::AnimationTimeline>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  JSC::VM *v15;
  WebCore::JSDOMGlobalObject *v16;
  _DWORD *v17;
  WebCore::JSAnimationTimelinePrototype *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *Allocator;
  unint64_t v39;
  _QWORD *v40;
  _DWORD *v41;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
  {
    v41 = (_DWORD *)a3;
    SlowCase = WebCore::createWrapper<WebCore::DocumentTimeline,WebCore::DocumentTimeline>((JSC::VM *)a2, (uint64_t *)&v41, v16);
    v17 = v41;
    v41 = 0;
    if (v17)
    {
      if (v17[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      else
        --v17[2];
    }
    return SlowCase;
  }
  v18 = *(WebCore::JSAnimationTimelinePrototype **)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 3296);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)&WebCore::JSAnimationTimeline::s_info
         + ~((_QWORD)&WebCore::JSAnimationTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationTimeline::s_info
                                                                     + ~((_QWORD)&WebCore::JSAnimationTimeline::s_info << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(char ***)(v19 + 16 * v24);
    if (v25 == &WebCore::JSAnimationTimeline::s_info)
    {
LABEL_18:
      v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (v27)
        goto LABEL_20;
    }
    else
    {
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v26;
        if (v25 == &WebCore::JSAnimationTimeline::s_info)
          goto LABEL_18;
      }
    }
  }
  Structure = WebCore::JSAnimationTimelinePrototype::createStructure(*(uint64_t **)(a2 + 56), a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAnimationTimelinePrototype::create(v18, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAnimationTimeline::createStructure((uint64_t *)v18, a2, v30);
  v27 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAnimationTimeline::s_info);
  v18 = *(WebCore::JSAnimationTimelinePrototype **)(a2 + 56);
LABEL_20:
  v32 = (_QWORD *)WebCore::JSAnimationTimeline::subspaceForImpl(v18, v15);
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_22;
    }
    v39 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v39);
    v32[5] = SlowCase + (int)v39;
  }
  v32[3] = SlowCase + 32;
LABEL_22:
  *(_DWORD *)SlowCase = 0;
  v33 = *(_DWORD *)(v27 + 8);
  *(_DWORD *)SlowCase = v27 >> 4;
  *(_DWORD *)(SlowCase + 4) = v33;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v27 + 76);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v18 + 755))
    __dmb(0xAu);
  v34 = *(_QWORD *)(a2 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner = (uint64_t)&unk_1E32268D0;
  }
  v41 = (_DWORD *)a3;
  if ((SlowCase & 8) != 0)
    v35 = (SlowCase - 112) | 1;
  else
    v35 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v35 & 1) != 0)
    v36 = v35 + 47;
  else
    v36 = *(_QWORD *)v35 + 32;
  Allocator = *(_QWORD **)(v36 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v36 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner;
  Allocator[2] = v34;
  v40 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v34 + 32), (uint64_t *)&v41, (uint64_t *)&v40);
  if (v40)
    v40[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSAttr::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 22) & 8) == 0)
      {
        while (1)
        {
          v5 = v3;
          if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
          {
            v7 = *(_QWORD *)(v3 + 200);
            if (!v7)
              goto LABEL_12;
            v6 = (uint64_t *)(v7 + 8);
          }
          else
          {
            v6 = (uint64_t *)(v3 + 32);
          }
          v3 = *v6;
          if (!v3)
            goto LABEL_12;
        }
      }
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
LABEL_12:
      if (v5 && !*(_BYTE *)(a2 + 130))
      {
        result = *(_QWORD *)(a2 + 120);
        v8 = *(_QWORD *)(result + 48);
        v9 = *(_DWORD *)(v8 + 4);
        v10 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = v13;
        while (1)
        {
          v15 = *(_QWORD *)(v8 + 8 * v14 + 16);
          if (!v15)
            break;
          if (v5 == v15)
            return result;
          v14 = (v14 + 1) & v9;
          if (v14 == v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1956912B8);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::JSAudioBufferSourceNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v3 = result;
  v4 = (unsigned __int8 *)(*(_QWORD *)(result + 24) + 320);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_5:
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 216);
  if (v6)
    v7 = *(_BYTE *)(a2 + 130) == 0;
  else
    v7 = 0;
  if (v7)
  {
    result = *(_QWORD *)(a2 + 120);
    v8 = *(_QWORD *)(result + 48);
    v9 = *(_DWORD *)(v8 + 4);
    v10 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)(v8 + 8 * v14 + 16);
      if (!v15)
        break;
      if (v6 == v15)
        goto LABEL_19;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1956913DCLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_19:
  v16 = __ldxr(v4);
  if (v16 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::JSAudioWorkletProcessor::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD **)(result + 24);
  v4 = (unint64_t *)v3[6];
  if (v4)
  {
    if ((v4[1] & 3) == 0)
    {
      v5 = *v4;
      if (*v4)
      {
        if ((v5 & 8) != 0)
        {
          if ((*(_BYTE *)(v5 - 79) & 1) == 0)
            goto LABEL_16;
        }
        else
        {
          v10 = v5 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v13 = *v4;
            v16 = v5 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
            v5 = v13;
            v10 = v16;
          }
          if (((*(_QWORD *)(v10 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
            goto LABEL_16;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_4;
LABEL_16:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_4:
  v6 = (unint64_t *)v3[8];
  if (v6)
  {
    if ((v6[1] & 3) == 0)
    {
      v7 = *v6;
      if (*v6)
      {
        if ((v7 & 8) != 0)
        {
          if ((*(_BYTE *)(v7 - 79) & 1) == 0)
            goto LABEL_22;
        }
        else
        {
          v11 = v7 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v14 = *v6;
            v17 = v7 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
            v7 = v14;
            v11 = v17;
          }
          if (((*(_QWORD *)(v11 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) == 0)
            goto LABEL_22;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_7;
LABEL_22:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_7:
  v8 = (unint64_t *)v3[10];
  if (v8)
  {
    if ((v8[1] & 3) == 0)
    {
      v9 = *v8;
      if (*v8)
      {
        if ((v9 & 8) != 0)
        {
          if ((*(_BYTE *)(v9 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v12 = v9 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v15 = *v8;
            v18 = v9 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
            v9 = v15;
            v12 = v18;
          }
          if (((*(_QWORD *)(v12 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::AuthenticatorResponse>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  JSC::VM *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  unint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  _QWORD *v29;
  int v30;
  int v31;
  JSC::VM *v32;
  WebCore::JSDOMGlobalObject *v33;
  WebCore::JSAuthenticatorResponsePrototype *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  JSC::Structure *v45;
  JSC::JSCell *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *Allocator;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  int v61;
  unint64_t v62;
  JSC::JSCell *v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) == 1)
  {
    v17 = *(_QWORD *)(a2 + 56);
    v18 = *(_QWORD *)(a2 + 3296);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = ((unint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info
           + ~((_QWORD)&WebCore::JSAuthenticatorAttestationResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info
                                                                                      + ~((_QWORD)&WebCore::JSAuthenticatorAttestationResponse::s_info << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(char ***)(v18 + 16 * v23);
      if (v24 == &WebCore::JSAuthenticatorAttestationResponse::s_info)
      {
LABEL_15:
        v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
        if (v26)
          goto LABEL_17;
      }
      else
      {
        v25 = 1;
        while (v24)
        {
          v23 = ((_DWORD)v23 + v25) & v19;
          v24 = *(char ***)(v18 + 16 * v23);
          ++v25;
          if (v24 == &WebCore::JSAuthenticatorAttestationResponse::s_info)
            goto LABEL_15;
        }
      }
    }
    Prototype = (JSC::JSCell *)WebCore::JSAuthenticatorAttestationResponse::createPrototype(*(WebCore::JSAuthenticatorAttestationResponse **)(a2 + 56), (JSC::VM *)a2, v16);
    Structure = WebCore::JSAuthenticatorAttestationResponse::createStructure((uint64_t *)v17, a2, Prototype);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info);
    v17 = *(_QWORD *)(a2 + 56);
LABEL_17:
    v29 = (_QWORD *)WebCore::JSAuthenticatorAttestationResponse::subspaceForImpl((WebCore::JSAuthenticatorAttestationResponse *)v17, v15);
    SlowCase = v29[3];
    if (SlowCase >= v29[4])
    {
      SlowCase = v29[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_19:
        *(_DWORD *)SlowCase = 0;
        v30 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)SlowCase = v26 >> 4;
        *(_DWORD *)(SlowCase + 4) = v30;
        *(_QWORD *)(SlowCase + 8) = 0;
        *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v26 + 76);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (*(_BYTE *)(v17 + 755))
          goto LABEL_53;
        goto LABEL_54;
      }
      v70 = *(_QWORD *)(SlowCase + 8) ^ v29[6];
      v29[4] = SlowCase + HIDWORD(v70);
      v29[5] = SlowCase + (int)v70;
    }
    v29[3] = SlowCase + 32;
    goto LABEL_19;
  }
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v34 = *(WebCore::JSAuthenticatorResponsePrototype **)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 3296);
  if (v31)
  {
    if (v35)
    {
      v36 = *(_DWORD *)(v35 - 8);
      v37 = ((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
           + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
                                                                           + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = *(char ***)(v35 + 16 * v40);
      if (v41 == &WebCore::JSAuthenticatorResponse::s_info)
      {
LABEL_27:
        v43 = *(_QWORD *)(v35 + 16 * v40 + 8);
        if (v43)
          goto LABEL_29;
      }
      else
      {
        v42 = 1;
        while (v41)
        {
          v40 = ((_DWORD)v40 + v42) & v36;
          v41 = *(char ***)(v35 + 16 * v40);
          ++v42;
          if (v41 == &WebCore::JSAuthenticatorResponse::s_info)
            goto LABEL_27;
        }
      }
    }
    v44 = WebCore::JSAuthenticatorResponsePrototype::createStructure(*(uint64_t **)(a2 + 56), a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(v44 + 16) |= 0x80000u;
    v46 = (JSC::JSCell *)WebCore::JSAuthenticatorResponsePrototype::create(v34, (JSC::VM *)a2, v44, v45);
    v47 = WebCore::JSAuthenticatorResponse::createStructure((uint64_t *)v34, a2, v46);
    v43 = WebCore::cacheDOMStructure((JSCell *)a2, v47, (uint64_t)&WebCore::JSAuthenticatorResponse::s_info);
    v34 = *(WebCore::JSAuthenticatorResponsePrototype **)(a2 + 56);
LABEL_29:
    v48 = (_QWORD *)WebCore::JSAuthenticatorResponse::subspaceForImpl(v34, v32);
    SlowCase = v48[3];
    if (SlowCase >= v48[4])
    {
      SlowCase = v48[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_31;
      }
      v71 = *(_QWORD *)(SlowCase + 8) ^ v48[6];
      v48[4] = SlowCase + HIDWORD(v71);
      v48[5] = SlowCase + (int)v71;
    }
    v48[3] = SlowCase + 32;
LABEL_31:
    *(_DWORD *)SlowCase = 0;
    v49 = *(_DWORD *)(v43 + 8);
    *(_DWORD *)SlowCase = v43 >> 4;
    *(_DWORD *)(SlowCase + 4) = v49;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v43 + 76);
    *(_QWORD *)(SlowCase + 24) = a3;
    if (*((_BYTE *)v34 + 755))
      __dmb(0xAu);
    v50 = *(_QWORD *)(a2 + 3320);
    if ((byte_1ECE82750 & 1) == 0)
    {
      qword_1ECE82748 = (uint64_t)&off_1E3225AB0;
      byte_1ECE82750 = 1;
    }
    v51 = (uint64_t *)(v50 + 32);
    v74 = a3;
    if ((SlowCase & 8) != 0)
      v52 = (SlowCase - 112) | 1;
    else
      v52 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v52 & 1) != 0)
      v53 = v52 + 47;
    else
      v53 = *(_QWORD *)v52 + 32;
    Allocator = *(_QWORD **)(v53 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v53 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1ECE82748;
    goto LABEL_64;
  }
  if (v35)
  {
    v55 = *(_DWORD *)(v35 - 8);
    v56 = ((unint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info
         + ~((_QWORD)&WebCore::JSAuthenticatorAssertionResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info
                                                                                  + ~((_QWORD)&WebCore::JSAuthenticatorAssertionResponse::s_info << 32)) >> 22);
    v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
    v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
    v59 = v55 & ((v58 >> 31) ^ v58);
    v60 = *(char ***)(v35 + 16 * v59);
    if (v60 == &WebCore::JSAuthenticatorAssertionResponse::s_info)
    {
LABEL_48:
      v62 = *(_QWORD *)(v35 + 16 * v59 + 8);
      if (v62)
        goto LABEL_50;
    }
    else
    {
      v61 = 1;
      while (v60)
      {
        v59 = ((_DWORD)v59 + v61) & v55;
        v60 = *(char ***)(v35 + 16 * v59);
        ++v61;
        if (v60 == &WebCore::JSAuthenticatorAssertionResponse::s_info)
          goto LABEL_48;
      }
    }
  }
  v63 = (JSC::JSCell *)WebCore::JSAuthenticatorAssertionResponse::createPrototype(*(WebCore::JSAuthenticatorAssertionResponse **)(a2 + 56), (JSC::VM *)a2, v33);
  v64 = WebCore::JSAuthenticatorAssertionResponse::createStructure((uint64_t *)v34, a2, v63);
  v62 = WebCore::cacheDOMStructure((JSCell *)a2, v64, (uint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info);
  v34 = *(WebCore::JSAuthenticatorResponsePrototype **)(a2 + 56);
LABEL_50:
  v65 = (_QWORD *)WebCore::JSAuthenticatorAssertionResponse::subspaceForImpl(v34, v32);
  SlowCase = v65[3];
  if (SlowCase < v65[4])
  {
LABEL_51:
    v65[3] = SlowCase + 32;
    goto LABEL_52;
  }
  SlowCase = v65[5];
  if ((SlowCase & 1) == 0)
  {
    v72 = *(_QWORD *)(SlowCase + 8) ^ v65[6];
    v65[4] = SlowCase + HIDWORD(v72);
    v65[5] = SlowCase + (int)v72;
    goto LABEL_51;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_52:
  *(_DWORD *)SlowCase = 0;
  v66 = *(_DWORD *)(v62 + 8);
  *(_DWORD *)SlowCase = v62 >> 4;
  *(_DWORD *)(SlowCase + 4) = v66;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v62 + 76);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v34 + 755))
LABEL_53:
    __dmb(0xAu);
LABEL_54:
  v50 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE82750 & 1) == 0)
  {
    qword_1ECE82748 = (uint64_t)&off_1E3225AB0;
    byte_1ECE82750 = 1;
  }
  v51 = (uint64_t *)(v50 + 32);
  v74 = a3;
  if ((SlowCase & 8) != 0)
    v67 = (SlowCase - 112) | 1;
  else
    v67 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v67 & 1) != 0)
    v68 = v67 + 47;
  else
    v68 = *(_QWORD *)v67 + 32;
  Allocator = *(_QWORD **)(v68 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v68 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE82748;
LABEL_64:
  Allocator[2] = v50;
  v73 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v51, &v74, (uint64_t *)&v73);
  if (v73)
    v73[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::BaseAudioContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  int v19;
  unint64_t v20;
  JSC::JSCell *v21;
  unint64_t Structure;
  JSC::Structure *v23;
  JSC::JSCell *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  int v38;
  unint64_t v39;
  JSC::JSCell *v40;
  unint64_t v41;
  JSC::Structure *v42;
  JSC::JSCell *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int *v56;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v48 = *(_QWORD *)(v5 + 32);
    if (!v48)
      goto LABEL_5;
    v49 = *(_DWORD *)(v48 - 8);
    v50 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
    v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
    v53 = v49 & ((v52 >> 31) ^ v52);
    v54 = *(_QWORD *)(v48 + 16 * v53);
    if (v54 != a3)
    {
      v55 = 1;
      while (v54)
      {
        v53 = ((_DWORD)v53 + v55) & v49;
        v54 = *(_QWORD *)(v48 + 16 * v53);
        ++v55;
        if (v54 == a3)
          goto LABEL_37;
      }
      goto LABEL_5;
    }
LABEL_37:
    v6 = *(_QWORD *)(v48 + 16 * v53 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  v8 = (unsigned int *)(a3 + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3))
  {
    v56 = (unsigned int *)a3;
    v11 = *(uint64_t **)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 3296);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = ((unint64_t)&WebCore::JSOfflineAudioContext::s_info
           + ~((_QWORD)&WebCore::JSOfflineAudioContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSOfflineAudioContext::s_info
                                                                         + ~((_QWORD)&WebCore::JSOfflineAudioContext::s_info << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(char ***)(v12 + 16 * v17);
      if (v18 == &WebCore::JSOfflineAudioContext::s_info)
      {
LABEL_13:
        v20 = *(_QWORD *)(v12 + 16 * v17 + 8);
        if (v20)
        {
LABEL_15:
          v7 = WebCore::JSOfflineAudioContext::create(v20, (JSC::VM *)a2, (uint64_t *)&v56);
          WebCore::cacheWrapper<WebCore::OfflineAudioContext,WebCore::JSOfflineAudioContext>(*(_QWORD *)(a2 + 3320), a3, v7);
          v26 = v56;
          v56 = 0;
          if (!v26)
            return v7;
          v27 = v26 + 6;
          do
          {
            v28 = __ldaxr(v27);
            v29 = --v28 == 0;
          }
          while (__stlxr(v28, v27));
          goto LABEL_29;
        }
      }
      else
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(char ***)(v12 + 16 * v17);
          ++v19;
          if (v18 == &WebCore::JSOfflineAudioContext::s_info)
            goto LABEL_13;
        }
      }
    }
    v21 = (JSC::JSCell *)WebCore::JSBaseAudioContext::prototype(*(WebCore::JSBaseAudioContext **)(a2 + 56), (JSC::VM *)a2, v10);
    Structure = WebCore::JSOfflineAudioContextPrototype::createStructure(v11, a2, v21);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v24 = (JSC::JSCell *)WebCore::JSOfflineAudioContextPrototype::create((WebCore::JSOfflineAudioContextPrototype *)v11, (JSC::VM *)a2, Structure, v23);
    v25 = WebCore::JSOfflineAudioContext::createStructure(v11, a2, v24);
    v20 = WebCore::cacheDOMStructure((JSCell *)a2, v25, (uint64_t)&WebCore::JSOfflineAudioContext::s_info);
    goto LABEL_15;
  }
  v56 = (unsigned int *)a3;
  v30 = *(uint64_t **)(a2 + 56);
  v31 = *(_QWORD *)(a2 + 3296);
  if (!v31)
    goto LABEL_25;
  v32 = *(_DWORD *)(v31 - 8);
  v33 = ((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) >> 22);
  v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
  v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
  v36 = v32 & ((v35 >> 31) ^ v35);
  v37 = *(char ***)(v31 + 16 * v36);
  if (v37 != &WebCore::JSAudioContext::s_info)
  {
    v38 = 1;
    while (v37)
    {
      v36 = ((_DWORD)v36 + v38) & v32;
      v37 = *(char ***)(v31 + 16 * v36);
      ++v38;
      if (v37 == &WebCore::JSAudioContext::s_info)
        goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_24:
  v39 = *(_QWORD *)(v31 + 16 * v36 + 8);
  if (!v39)
  {
LABEL_25:
    v40 = (JSC::JSCell *)WebCore::JSBaseAudioContext::prototype(*(WebCore::JSBaseAudioContext **)(a2 + 56), (JSC::VM *)a2, v10);
    v41 = WebCore::JSAudioContextPrototype::createStructure(v30, a2, v40);
    *(_DWORD *)(v41 + 16) |= 0x80000u;
    v43 = (JSC::JSCell *)WebCore::JSAudioContextPrototype::create((WebCore::JSAudioContextPrototype *)v30, (JSC::VM *)a2, v41, v42);
    v44 = WebCore::JSAudioContext::createStructure(v30, a2, v43);
    v39 = WebCore::cacheDOMStructure((JSCell *)a2, v44, (uint64_t)&WebCore::JSAudioContext::s_info);
  }
  v7 = WebCore::JSAudioContext::create(v39, (JSC::VM *)a2, (uint64_t *)&v56);
  WebCore::cacheWrapper<WebCore::AudioContext,WebCore::JSAudioContext>(*(_QWORD *)(a2 + 3320), a3, v7);
  v26 = v56;
  v56 = 0;
  if (!v26)
    return v7;
  v45 = v26 + 6;
  do
  {
    v46 = __ldaxr(v45);
    v29 = --v46 == 0;
  }
  while (__stlxr(v46, v45));
LABEL_29:
  if (v29)
  {
    atomic_store(1u, v26 + 6);
    (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 16))(v26);
  }
  return v7;
}

unint64_t WebCore::wrap<WebCore::BasicCredential>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  JSC::VM *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  unint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  int v34;
  JSC::VM *v35;
  WebCore::JSDOMGlobalObject *v36;
  WebCore::JSBasicCredentialPrototype *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  JSC::Structure *v48;
  JSC::JSCell *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *Allocator;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  int v64;
  unint64_t v65;
  JSC::JSCell *v66;
  unint64_t v67;
  JSC::Structure *v68;
  JSC::JSCell *v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) == 1)
  {
    v17 = *(_QWORD *)(a2 + 56);
    v18 = *(_QWORD *)(a2 + 3296);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = ((unint64_t)&WebCore::JSPublicKeyCredential::s_info
           + ~((_QWORD)&WebCore::JSPublicKeyCredential::s_info << 32)) ^ (((unint64_t)&WebCore::JSPublicKeyCredential::s_info
                                                                         + ~((_QWORD)&WebCore::JSPublicKeyCredential::s_info << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(char ***)(v18 + 16 * v23);
      if (v24 == &WebCore::JSPublicKeyCredential::s_info)
      {
LABEL_15:
        v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
        if (v26)
          goto LABEL_17;
      }
      else
      {
        v25 = 1;
        while (v24)
        {
          v23 = ((_DWORD)v23 + v25) & v19;
          v24 = *(char ***)(v18 + 16 * v23);
          ++v25;
          if (v24 == &WebCore::JSPublicKeyCredential::s_info)
            goto LABEL_15;
        }
      }
    }
    v27 = (JSC::JSCell *)WebCore::JSBasicCredential::prototype(*(WebCore::JSBasicCredential **)(a2 + 56), (JSC::VM *)a2, v16);
    Structure = WebCore::JSPublicKeyCredentialPrototype::createStructure((uint64_t *)v17, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v30 = (JSC::JSCell *)WebCore::JSPublicKeyCredentialPrototype::create((WebCore::JSPublicKeyCredentialPrototype *)v17, (JSC::VM *)a2, Structure, v29);
    v31 = WebCore::JSPublicKeyCredential::createStructure((uint64_t *)v17, a2, v30);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSPublicKeyCredential::s_info);
    v17 = *(_QWORD *)(a2 + 56);
LABEL_17:
    v32 = (_QWORD *)WebCore::JSPublicKeyCredential::subspaceForImpl((WebCore::JSPublicKeyCredential *)v17, v15);
    SlowCase = v32[3];
    if (SlowCase >= v32[4])
    {
      SlowCase = v32[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_19:
        *(_DWORD *)SlowCase = 0;
        v33 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)SlowCase = v26 >> 4;
        *(_DWORD *)(SlowCase + 4) = v33;
        *(_QWORD *)(SlowCase + 8) = 0;
        *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v26 + 76);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (*(_BYTE *)(v17 + 755))
          goto LABEL_53;
        goto LABEL_54;
      }
      v76 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
      v32[4] = SlowCase + HIDWORD(v76);
      v32[5] = SlowCase + (int)v76;
    }
    v32[3] = SlowCase + 32;
    goto LABEL_19;
  }
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v37 = *(WebCore::JSBasicCredentialPrototype **)(a2 + 56);
  v38 = *(_QWORD *)(a2 + 3296);
  if (v34)
  {
    if (v38)
    {
      v39 = *(_DWORD *)(v38 - 8);
      v40 = ((unint64_t)&WebCore::JSBasicCredential::s_info + ~((_QWORD)&WebCore::JSBasicCredential::s_info << 32)) ^ (((unint64_t)&WebCore::JSBasicCredential::s_info + ~((_QWORD)&WebCore::JSBasicCredential::s_info << 32)) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v43 = v39 & ((v42 >> 31) ^ v42);
      v44 = *(char ***)(v38 + 16 * v43);
      if (v44 == &WebCore::JSBasicCredential::s_info)
      {
LABEL_27:
        v46 = *(_QWORD *)(v38 + 16 * v43 + 8);
        if (v46)
          goto LABEL_29;
      }
      else
      {
        v45 = 1;
        while (v44)
        {
          v43 = ((_DWORD)v43 + v45) & v39;
          v44 = *(char ***)(v38 + 16 * v43);
          ++v45;
          if (v44 == &WebCore::JSBasicCredential::s_info)
            goto LABEL_27;
        }
      }
    }
    v47 = WebCore::JSBasicCredentialPrototype::createStructure(*(uint64_t **)(a2 + 56), a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(v47 + 16) |= 0x80000u;
    v49 = (JSC::JSCell *)WebCore::JSBasicCredentialPrototype::create(v37, (JSC::VM *)a2, v47, v48);
    v50 = WebCore::JSBasicCredential::createStructure((uint64_t *)v37, a2, v49);
    v46 = WebCore::cacheDOMStructure((JSCell *)a2, v50, (uint64_t)&WebCore::JSBasicCredential::s_info);
    v37 = *(WebCore::JSBasicCredentialPrototype **)(a2 + 56);
LABEL_29:
    v51 = (_QWORD *)WebCore::JSBasicCredential::subspaceForImpl(v37, v35);
    SlowCase = v51[3];
    if (SlowCase >= v51[4])
    {
      SlowCase = v51[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_31;
      }
      v77 = *(_QWORD *)(SlowCase + 8) ^ v51[6];
      v51[4] = SlowCase + HIDWORD(v77);
      v51[5] = SlowCase + (int)v77;
    }
    v51[3] = SlowCase + 32;
LABEL_31:
    *(_DWORD *)SlowCase = 0;
    v52 = *(_DWORD *)(v46 + 8);
    *(_DWORD *)SlowCase = v46 >> 4;
    *(_DWORD *)(SlowCase + 4) = v52;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v46 + 76);
    *(_QWORD *)(SlowCase + 24) = a3;
    if (*((_BYTE *)v37 + 755))
      __dmb(0xAu);
    v53 = *(_QWORD *)(a2 + 3320);
    if ((byte_1ECE82760 & 1) == 0)
    {
      qword_1ECE82758 = (uint64_t)&off_1E3230E80;
      byte_1ECE82760 = 1;
    }
    v54 = (uint64_t *)(v53 + 32);
    v80 = a3;
    if ((SlowCase & 8) != 0)
      v55 = (SlowCase - 112) | 1;
    else
      v55 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v55 & 1) != 0)
      v56 = v55 + 47;
    else
      v56 = *(_QWORD *)v55 + 32;
    Allocator = *(_QWORD **)(v56 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v56 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1ECE82758;
    goto LABEL_64;
  }
  if (v38)
  {
    v58 = *(_DWORD *)(v38 - 8);
    v59 = ((unint64_t)&WebCore::JSDigitalCredential::s_info
         + ~((_QWORD)&WebCore::JSDigitalCredential::s_info << 32)) ^ (((unint64_t)&WebCore::JSDigitalCredential::s_info
                                                                     + ~((_QWORD)&WebCore::JSDigitalCredential::s_info << 32)) >> 22);
    v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
    v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
    v62 = v58 & ((v61 >> 31) ^ v61);
    v63 = *(char ***)(v38 + 16 * v62);
    if (v63 == &WebCore::JSDigitalCredential::s_info)
    {
LABEL_48:
      v65 = *(_QWORD *)(v38 + 16 * v62 + 8);
      if (v65)
        goto LABEL_50;
    }
    else
    {
      v64 = 1;
      while (v63)
      {
        v62 = ((_DWORD)v62 + v64) & v58;
        v63 = *(char ***)(v38 + 16 * v62);
        ++v64;
        if (v63 == &WebCore::JSDigitalCredential::s_info)
          goto LABEL_48;
      }
    }
  }
  v66 = (JSC::JSCell *)WebCore::JSBasicCredential::prototype(*(WebCore::JSBasicCredential **)(a2 + 56), (JSC::VM *)a2, v36);
  v67 = WebCore::JSDigitalCredentialPrototype::createStructure((uint64_t *)v37, a2, v66);
  *(_DWORD *)(v67 + 16) |= 0x80000u;
  v69 = (JSC::JSCell *)WebCore::JSDigitalCredentialPrototype::create(v37, (JSC::VM *)a2, v67, v68);
  v70 = WebCore::JSDigitalCredential::createStructure((uint64_t *)v37, a2, v69);
  v65 = WebCore::cacheDOMStructure((JSCell *)a2, v70, (uint64_t)&WebCore::JSDigitalCredential::s_info);
  v37 = *(WebCore::JSBasicCredentialPrototype **)(a2 + 56);
LABEL_50:
  v71 = (_QWORD *)WebCore::JSDigitalCredential::subspaceForImpl(v37, v35);
  SlowCase = v71[3];
  if (SlowCase < v71[4])
  {
LABEL_51:
    v71[3] = SlowCase + 32;
    goto LABEL_52;
  }
  SlowCase = v71[5];
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ v71[6];
    v71[4] = SlowCase + HIDWORD(v78);
    v71[5] = SlowCase + (int)v78;
    goto LABEL_51;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_52:
  *(_DWORD *)SlowCase = 0;
  v72 = *(_DWORD *)(v65 + 8);
  *(_DWORD *)SlowCase = v65 >> 4;
  *(_DWORD *)(SlowCase + 4) = v72;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v65 + 76);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v37 + 755))
LABEL_53:
    __dmb(0xAu);
LABEL_54:
  v53 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE82760 & 1) == 0)
  {
    qword_1ECE82758 = (uint64_t)&off_1E3230E80;
    byte_1ECE82760 = 1;
  }
  v54 = (uint64_t *)(v53 + 32);
  v80 = a3;
  if ((SlowCase & 8) != 0)
    v73 = (SlowCase - 112) | 1;
  else
    v73 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v73 & 1) != 0)
    v74 = v73 + 47;
  else
    v74 = *(_QWORD *)v73 + 32;
  Allocator = *(_QWORD **)(v74 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v74 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE82758;
LABEL_64:
  Allocator[2] = v53;
  v79 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v54, &v80, (uint64_t *)&v79);
  if (v79)
    v79[1] = 3;
  return SlowCase;
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, WebCore::JSBlob **a2, uint64_t *a3)
{
  WebCore::JSDOMGlobalObject *v5;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3))
    return WebCore::createWrapper<WebCore::File,WebCore::Blob>((uint64_t)a2, a3);
  else
    return WebCore::createWrapper<WebCore::Blob,WebCore::Blob>(a2, a3, v5);
}

unint64_t WebCore::createWrapper<WebCore::File,WebCore::Blob>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v8 = (_DWORD *)v3;
  v4 = WebCore::getDOMStructure<WebCore::JSFile>(*(WebCore::JSFile **)(a1 + 56), (JSC::VM *)a1);
  v5 = WebCore::JSFile::create(v4, (JSC::VM *)a1, (uint64_t *)&v8);
  WebCore::cacheWrapper<WebCore::File,WebCore::JSFile>(*(_QWORD *)(a1 + 3320), v3, v5);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  return v5;
}

unint64_t WebCore::createWrapper<WebCore::Blob,WebCore::Blob>(WebCore::JSBlob **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  WebCore::JSBlob *v7;
  JSC::VM *v8;
  _QWORD *v9;
  unint64_t SlowCase;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Allocator;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSBlob>(a1[7], (JSC::VM *)a1, a3);
  v7 = a1[7];
  v9 = (_QWORD *)WebCore::JSBlob::subspaceForImpl(v7, v8);
  SlowCase = v9[3];
  if (SlowCase < v9[4])
    goto LABEL_2;
  SlowCase = v9[5];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v9[6];
    v9[4] = SlowCase + HIDWORD(v20);
    v9[5] = SlowCase + (int)v20;
LABEL_2:
    v9[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v11 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)SlowCase = v6 >> 4;
  *(_DWORD *)(SlowCase + 4) = v11;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v6 + 76);
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v12;
  WebCore::JSBlob::finishCreation(SlowCase, v7);
  v13 = (uint64_t)a1[415];
  if ((byte_1ECE82770 & 1) == 0)
  {
    qword_1ECE82768 = (uint64_t)&off_1E3230EB0;
    byte_1ECE82770 = 1;
  }
  if (v5)
    v14 = (uint64_t *)(v5 + 8);
  else
    v14 = 0;
  if (*(_DWORD *)(v13 + 48))
  {
    v22 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v21, SlowCase, (uint64_t)&qword_1ECE82768, v13);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v13 + 32), &v22, &v21);
    v18 = v21;
    if (!v21)
      return SlowCase;
LABEL_19:
    *(_QWORD *)(v18 + 8) = 3;
    return SlowCase;
  }
  if ((SlowCase & 8) != 0)
    v15 = (SlowCase - 112) | 1;
  else
    v15 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v15 & 1) != 0)
    v16 = v15 + 47;
  else
    v16 = *(_QWORD *)v15 + 32;
  Allocator = *(_QWORD **)(v16 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v16 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE82768;
  Allocator[2] = v13;
  v18 = *v14;
  *v14 = (uint64_t)Allocator;
  if (v18)
    goto LABEL_19;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::Blob>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  _DWORD *v9;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(_QWORD *)(v11 + 16 * v16);
      if (v17 == a3)
      {
LABEL_16:
        v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(_QWORD *)(v11 + 16 * v16);
          ++v18;
          if (v17 == a3)
            goto LABEL_16;
        }
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return v7;
      }
    }
  }
  ++*(_DWORD *)(a3 + 16);
  v20 = (_DWORD *)a3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    v21 = (_DWORD *)a3;
    v19 = WebCore::getDOMStructure<WebCore::JSFile>(*(WebCore::JSFile **)(a2 + 56), (JSC::VM *)a2);
    v7 = WebCore::JSFile::create(v19, (JSC::VM *)a2, (uint64_t *)&v21);
    WebCore::cacheWrapper<WebCore::File,WebCore::JSFile>(*(_QWORD *)(a2 + 3320), a3, v7);
    v9 = v21;
    v21 = 0;
    if (!v9)
      return v7;
  }
  else
  {
    v7 = WebCore::createWrapper<WebCore::Blob,WebCore::Blob>((WebCore::JSBlob **)a2, (uint64_t *)&v20, v8);
    v9 = v20;
    v20 = 0;
    if (!v9)
      return v7;
  }
  if (v9[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  else
    --v9[4];
  return v7;
}

uint64_t WebCore::JSCSSRule::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  result = WebCore::root(*(_QWORD *)(a1 + 24), (WebCore::CSSRule *)a2);
  if (result)
    v4 = *(_BYTE *)(a2 + 130) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v5 = result;
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v13 == v5)
        return result;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19569462CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, uint64_t *a2)
{
  JSC::VM *v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  WebCore::JSCSSRulePrototype *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t SlowCase;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *Allocator;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  int v40;
  unint64_t v41;
  JSC::JSCell *v42;
  unint64_t v43;
  JSC::Structure *v44;
  JSC::JSCell *v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  unint64_t v58;
  JSC::JSCell *v59;
  unint64_t v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char **v74;
  int v75;
  unint64_t v76;
  JSC::JSCell *Prototype;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char **v88;
  int v89;
  unint64_t v90;
  JSC::JSCell *v91;
  unint64_t v92;
  JSC::Structure *v93;
  JSC::JSCell *v94;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char **v105;
  int v106;
  unint64_t v107;
  JSC::JSCell *v108;
  unint64_t v109;
  JSC::Structure *v110;
  JSC::JSCell *v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char **v122;
  int v123;
  unint64_t v124;
  JSC::JSCell *v125;
  unint64_t v126;
  JSC::Structure *v127;
  JSC::JSCell *v128;
  uint64_t v129;
  _QWORD *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char **v139;
  int v140;
  unint64_t v141;
  JSC::JSCell *v142;
  unint64_t v143;
  JSC::Structure *v144;
  JSC::JSCell *v145;
  uint64_t v146;
  _QWORD *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char **v156;
  int v157;
  unint64_t v158;
  JSC::JSCell *v159;
  unint64_t v160;
  JSC::Structure *v161;
  JSC::JSCell *v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char **v173;
  int v174;
  unint64_t v175;
  JSC::JSCell *v176;
  unint64_t v177;
  JSC::Structure *v178;
  JSC::JSCell *v179;
  uint64_t v180;
  _QWORD *v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char **v190;
  int v191;
  unint64_t v192;
  JSC::JSCell *v193;
  unint64_t v194;
  JSC::Structure *v195;
  JSC::JSCell *v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char **v207;
  int v208;
  unint64_t v209;
  JSC::JSCell *v210;
  unint64_t v211;
  JSC::Structure *v212;
  JSC::JSCell *v213;
  uint64_t v214;
  _QWORD *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char **v224;
  int v225;
  unint64_t v226;
  JSC::JSCell *v227;
  unint64_t v228;
  JSC::Structure *v229;
  JSC::JSCell *v230;
  uint64_t v231;
  _QWORD *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char **v241;
  int v242;
  unint64_t v243;
  JSC::JSCell *v244;
  unint64_t v245;
  JSC::Structure *v246;
  JSC::JSCell *v247;
  uint64_t v248;
  _QWORD *v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  char **v258;
  int v259;
  unint64_t v260;
  JSC::JSCell *v261;
  uint64_t v262;
  _QWORD *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  char **v272;
  int v273;
  unint64_t v274;
  JSC::JSCell *v275;
  unint64_t v276;
  JSC::Structure *v277;
  JSC::JSCell *v278;
  uint64_t v279;
  _QWORD *v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char **v289;
  int v290;
  unint64_t v291;
  JSC::JSCell *v292;
  unint64_t v293;
  JSC::Structure *v294;
  JSC::JSCell *v295;
  uint64_t v296;
  _QWORD *v297;
  int v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  _DWORD *v317;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2))
  {
    case 0u:
    case 2u:
    case 9u:
    case 0x14u:
      v6 = *a2;
      v7 = *(WebCore::JSCSSRulePrototype **)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 3296);
      if (!v8)
        goto LABEL_8;
      v9 = *(_DWORD *)(v8 - 8);
      v10 = ((unint64_t)&WebCore::JSCSSRule::s_info + ~((_QWORD)&WebCore::JSCSSRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSRule::s_info + ~((_QWORD)&WebCore::JSCSSRule::s_info << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(char ***)(v8 + 16 * v13);
      if (v14 == &WebCore::JSCSSRule::s_info)
        goto LABEL_7;
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSCSSRule::s_info)
        {
LABEL_7:
          v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
          if (v16)
            goto LABEL_9;
          break;
        }
      }
LABEL_8:
      Structure = WebCore::JSCSSRulePrototype::createStructure(*(uint64_t **)(a1 + 56), a1, *(JSC::JSCell **)(a1 + 656));
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v19 = (JSC::JSCell *)WebCore::JSCSSRulePrototype::create(v7, (JSC::VM *)a1, Structure, v18);
      v20 = WebCore::JSCSSRule::createStructure((uint64_t *)v7, a1, v19);
      v16 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSCSSRule::s_info);
      v7 = *(WebCore::JSCSSRulePrototype **)(a1 + 56);
LABEL_9:
      v21 = (_QWORD *)WebCore::JSCSSRule::subspaceForImpl(v7, v4);
      SlowCase = v21[3];
      if (SlowCase < v21[4])
        goto LABEL_10;
      SlowCase = v21[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v299 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
        v21[4] = SlowCase + HIDWORD(v299);
        v21[5] = SlowCase + (int)v299;
LABEL_10:
        v21[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v23 = *(_DWORD *)(v16 + 8);
      *(_DWORD *)SlowCase = v16 >> 4;
      *(_DWORD *)(SlowCase + 4) = v23;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v16 + 76);
      v24 = *a2;
      *a2 = 0;
      *(_QWORD *)(SlowCase + 24) = v24;
      if (*((_BYTE *)v7 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 1u:
    case 0x16u:
      v30 = *a2;
      *a2 = 0;
      v317 = (_DWORD *)v30;
      SlowCase = WebCore::createWrapper<WebCore::CSSStyleRule,WebCore::CSSStyleRule>((JSC::VM *)a1, (JSC::VM *)&v317, v5);
      v31 = v317;
      if (!v317)
        return SlowCase;
      goto LABEL_50;
    case 3u:
      v6 = *a2;
      *a2 = 0;
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 3296);
      if (!v33)
        goto LABEL_33;
      v34 = *(_DWORD *)(v33 - 8);
      v35 = ((unint64_t)&WebCore::JSCSSImportRule::s_info + ~((_QWORD)&WebCore::JSCSSImportRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSImportRule::s_info + ~((_QWORD)&WebCore::JSCSSImportRule::s_info << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v34 & ((v37 >> 31) ^ v37);
      v39 = *(char ***)(v33 + 16 * v38);
      if (v39 == &WebCore::JSCSSImportRule::s_info)
        goto LABEL_32;
      v40 = 1;
      while (v39)
      {
        v38 = ((_DWORD)v38 + v40) & v34;
        v39 = *(char ***)(v33 + 16 * v38);
        ++v40;
        if (v39 == &WebCore::JSCSSImportRule::s_info)
        {
LABEL_32:
          v41 = *(_QWORD *)(v33 + 16 * v38 + 8);
          if (v41)
            goto LABEL_34;
          break;
        }
      }
LABEL_33:
      v42 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v43 = WebCore::JSCSSImportRulePrototype::createStructure((uint64_t *)v32, a1, v42);
      *(_DWORD *)(v43 + 16) |= 0x80000u;
      v45 = (JSC::JSCell *)WebCore::JSCSSImportRulePrototype::create((WebCore::JSCSSImportRulePrototype *)v32, (JSC::VM *)a1, v43, v44);
      v46 = WebCore::JSCSSImportRule::createStructure((uint64_t *)v32, a1, v45);
      v41 = WebCore::cacheDOMStructure((JSCell *)a1, v46, (uint64_t)&WebCore::JSCSSImportRule::s_info);
      v32 = *(_QWORD *)(a1 + 56);
LABEL_34:
      v47 = (_QWORD *)WebCore::JSCSSImportRule::subspaceForImpl((WebCore::JSCSSImportRule *)v32, v4);
      SlowCase = v47[3];
      if (SlowCase < v47[4])
        goto LABEL_35;
      SlowCase = v47[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v300 = *(_QWORD *)(SlowCase + 8) ^ v47[6];
        v47[4] = SlowCase + HIDWORD(v300);
        v47[5] = SlowCase + (int)v300;
LABEL_35:
        v47[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v48 = *(_DWORD *)(v41 + 8);
      *(_DWORD *)SlowCase = v41 >> 4;
      *(_DWORD *)(SlowCase + 4) = v48;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v41 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v32 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 4u:
      v6 = *a2;
      *a2 = 0;
      v49 = *(_QWORD *)(a1 + 56);
      v50 = *(_QWORD *)(a1 + 3296);
      if (!v50)
        goto LABEL_44;
      v51 = *(_DWORD *)(v50 - 8);
      v52 = ((unint64_t)&WebCore::JSCSSMediaRule::s_info + ~((_QWORD)&WebCore::JSCSSMediaRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMediaRule::s_info + ~((_QWORD)&WebCore::JSCSSMediaRule::s_info << 32)) >> 22);
      v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
      v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
      v55 = v51 & ((v54 >> 31) ^ v54);
      v56 = *(char ***)(v50 + 16 * v55);
      if (v56 == &WebCore::JSCSSMediaRule::s_info)
        goto LABEL_43;
      v57 = 1;
      while (v56)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(char ***)(v50 + 16 * v55);
        ++v57;
        if (v56 == &WebCore::JSCSSMediaRule::s_info)
        {
LABEL_43:
          v58 = *(_QWORD *)(v50 + 16 * v55 + 8);
          if (v58)
            goto LABEL_45;
          break;
        }
      }
LABEL_44:
      v59 = (JSC::JSCell *)WebCore::JSCSSConditionRule::prototype(*(WebCore::JSCSSConditionRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v60 = WebCore::JSCSSMediaRulePrototype::createStructure((uint64_t *)v49, a1, v59);
      *(_DWORD *)(v60 + 16) |= 0x80000u;
      v62 = (JSC::JSCell *)WebCore::JSCSSMediaRulePrototype::create((WebCore::JSCSSMediaRulePrototype *)v49, (JSC::VM *)a1, v60, v61);
      v63 = WebCore::JSCSSMediaRule::createStructure((uint64_t *)v49, a1, v62);
      v58 = WebCore::cacheDOMStructure((JSCell *)a1, v63, (uint64_t)&WebCore::JSCSSMediaRule::s_info);
      v49 = *(_QWORD *)(a1 + 56);
LABEL_45:
      v64 = (_QWORD *)WebCore::JSCSSMediaRule::subspaceForImpl((WebCore::JSCSSMediaRule *)v49, v4);
      SlowCase = v64[3];
      if (SlowCase < v64[4])
        goto LABEL_46;
      SlowCase = v64[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v301 = *(_QWORD *)(SlowCase + 8) ^ v64[6];
        v64[4] = SlowCase + HIDWORD(v301);
        v64[5] = SlowCase + (int)v301;
LABEL_46:
        v64[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v65 = *(_DWORD *)(v58 + 8);
      *(_DWORD *)SlowCase = v58 >> 4;
      *(_DWORD *)(SlowCase + 4) = v65;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v58 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v49 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 5u:
      v66 = *a2;
      *a2 = 0;
      v317 = (_DWORD *)v66;
      SlowCase = WebCore::createWrapper<WebCore::CSSFontFaceRule,WebCore::CSSFontFaceRule>((JSC::VM *)a1, (uint64_t *)&v317, v5);
      v31 = v317;
      v317 = 0;
      if (v31)
      {
LABEL_50:
        if (v31[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
        else
          --v31[2];
      }
      return SlowCase;
    case 6u:
      v6 = *a2;
      *a2 = 0;
      v67 = *(_QWORD *)(a1 + 56);
      v68 = *(_QWORD *)(a1 + 3296);
      if (!v68)
        goto LABEL_58;
      v69 = *(_DWORD *)(v68 - 8);
      v70 = ((unint64_t)&WebCore::JSCSSPageRule::s_info + ~((_QWORD)&WebCore::JSCSSPageRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSPageRule::s_info + ~((_QWORD)&WebCore::JSCSSPageRule::s_info << 32)) >> 22);
      v71 = 9 * ((v70 + ~(v70 << 13)) ^ ((v70 + ~(v70 << 13)) >> 8));
      v72 = (v71 ^ (v71 >> 15)) + ~((v71 ^ (v71 >> 15)) << 27);
      v73 = v69 & ((v72 >> 31) ^ v72);
      v74 = *(char ***)(v68 + 16 * v73);
      if (v74 == &WebCore::JSCSSPageRule::s_info)
        goto LABEL_57;
      v75 = 1;
      while (v74)
      {
        v73 = ((_DWORD)v73 + v75) & v69;
        v74 = *(char ***)(v68 + 16 * v73);
        ++v75;
        if (v74 == &WebCore::JSCSSPageRule::s_info)
        {
LABEL_57:
          v76 = *(_QWORD *)(v68 + 16 * v73 + 8);
          if (v76)
            goto LABEL_59;
          break;
        }
      }
LABEL_58:
      Prototype = (JSC::JSCell *)WebCore::JSCSSPageRule::createPrototype(*(WebCore::JSCSSPageRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v78 = WebCore::JSCSSPageRule::createStructure((uint64_t *)v67, a1, Prototype);
      v76 = WebCore::cacheDOMStructure((JSCell *)a1, v78, (uint64_t)&WebCore::JSCSSPageRule::s_info);
      v67 = *(_QWORD *)(a1 + 56);
LABEL_59:
      v79 = (_QWORD *)WebCore::JSCSSPageRule::subspaceForImpl((WebCore::JSCSSPageRule *)v67, v4);
      SlowCase = v79[3];
      if (SlowCase < v79[4])
        goto LABEL_60;
      SlowCase = v79[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v302 = *(_QWORD *)(SlowCase + 8) ^ v79[6];
        v79[4] = SlowCase + HIDWORD(v302);
        v79[5] = SlowCase + (int)v302;
LABEL_60:
        v79[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v80 = *(_DWORD *)(v76 + 8);
      *(_DWORD *)SlowCase = v76 >> 4;
      *(_DWORD *)(SlowCase + 4) = v80;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v76 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v67 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 7u:
      v6 = *a2;
      *a2 = 0;
      v81 = *(_QWORD *)(a1 + 56);
      v82 = *(_QWORD *)(a1 + 3296);
      if (!v82)
        goto LABEL_69;
      v83 = *(_DWORD *)(v82 - 8);
      v84 = ((unint64_t)&WebCore::JSCSSKeyframesRule::s_info
           + ~((_QWORD)&WebCore::JSCSSKeyframesRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSKeyframesRule::s_info
                                                                      + ~((_QWORD)&WebCore::JSCSSKeyframesRule::s_info << 32)) >> 22);
      v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
      v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
      v87 = v83 & ((v86 >> 31) ^ v86);
      v88 = *(char ***)(v82 + 16 * v87);
      if (v88 == &WebCore::JSCSSKeyframesRule::s_info)
        goto LABEL_68;
      v89 = 1;
      while (v88)
      {
        v87 = ((_DWORD)v87 + v89) & v83;
        v88 = *(char ***)(v82 + 16 * v87);
        ++v89;
        if (v88 == &WebCore::JSCSSKeyframesRule::s_info)
        {
LABEL_68:
          v90 = *(_QWORD *)(v82 + 16 * v87 + 8);
          if (v90)
            goto LABEL_70;
          break;
        }
      }
LABEL_69:
      v91 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v92 = WebCore::JSCSSKeyframesRulePrototype::createStructure((uint64_t *)v81, a1, v91);
      *(_DWORD *)(v92 + 16) |= 0x80000u;
      v94 = (JSC::JSCell *)WebCore::JSCSSKeyframesRulePrototype::create((WebCore::JSCSSKeyframesRulePrototype *)v81, (JSC::VM *)a1, v92, v93);
      v95 = WebCore::JSCSSKeyframesRule::createStructure((uint64_t *)v81, a1, v94);
      v90 = WebCore::cacheDOMStructure((JSCell *)a1, v95, (uint64_t)&WebCore::JSCSSKeyframesRule::s_info);
      v81 = *(_QWORD *)(a1 + 56);
LABEL_70:
      v96 = (_QWORD *)WebCore::JSCSSKeyframesRule::subspaceForImpl((WebCore::JSCSSKeyframesRule *)v81, v4);
      SlowCase = v96[3];
      if (SlowCase < v96[4])
        goto LABEL_71;
      SlowCase = v96[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v303 = *(_QWORD *)(SlowCase + 8) ^ v96[6];
        v96[4] = SlowCase + HIDWORD(v303);
        v96[5] = SlowCase + (int)v303;
LABEL_71:
        v96[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v97 = *(_DWORD *)(v90 + 8);
      *(_DWORD *)SlowCase = v90 >> 4;
      *(_DWORD *)(SlowCase + 4) = v97;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v90 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v81 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 8u:
      v6 = *a2;
      *a2 = 0;
      v98 = *(_QWORD *)(a1 + 56);
      v99 = *(_QWORD *)(a1 + 3296);
      if (!v99)
        goto LABEL_80;
      v100 = *(_DWORD *)(v99 - 8);
      v101 = ((unint64_t)&WebCore::JSCSSKeyframeRule::s_info
            + ~((_QWORD)&WebCore::JSCSSKeyframeRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSKeyframeRule::s_info
                                                                      + ~((_QWORD)&WebCore::JSCSSKeyframeRule::s_info << 32)) >> 22);
      v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
      v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
      v104 = v100 & ((v103 >> 31) ^ v103);
      v105 = *(char ***)(v99 + 16 * v104);
      if (v105 == &WebCore::JSCSSKeyframeRule::s_info)
        goto LABEL_79;
      v106 = 1;
      while (v105)
      {
        v104 = ((_DWORD)v104 + v106) & v100;
        v105 = *(char ***)(v99 + 16 * v104);
        ++v106;
        if (v105 == &WebCore::JSCSSKeyframeRule::s_info)
        {
LABEL_79:
          v107 = *(_QWORD *)(v99 + 16 * v104 + 8);
          if (v107)
            goto LABEL_81;
          break;
        }
      }
LABEL_80:
      v108 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v109 = WebCore::JSCSSKeyframeRulePrototype::createStructure((uint64_t *)v98, a1, v108);
      *(_DWORD *)(v109 + 16) |= 0x80000u;
      v111 = (JSC::JSCell *)WebCore::JSCSSKeyframeRulePrototype::create((WebCore::JSCSSKeyframeRulePrototype *)v98, (JSC::VM *)a1, v109, v110);
      v112 = WebCore::JSCSSKeyframeRule::createStructure((uint64_t *)v98, a1, v111);
      v107 = WebCore::cacheDOMStructure((JSCell *)a1, v112, (uint64_t)&WebCore::JSCSSKeyframeRule::s_info);
      v98 = *(_QWORD *)(a1 + 56);
LABEL_81:
      v113 = (_QWORD *)WebCore::JSCSSKeyframeRule::subspaceForImpl((WebCore::JSCSSKeyframeRule *)v98, v4);
      SlowCase = v113[3];
      if (SlowCase < v113[4])
        goto LABEL_82;
      SlowCase = v113[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v304 = *(_QWORD *)(SlowCase + 8) ^ v113[6];
        v113[4] = SlowCase + HIDWORD(v304);
        v113[5] = SlowCase + (int)v304;
LABEL_82:
        v113[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v114 = *(_DWORD *)(v107 + 8);
      *(_DWORD *)SlowCase = v107 >> 4;
      *(_DWORD *)(SlowCase + 4) = v114;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v107 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v98 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0xAu:
      v6 = *a2;
      *a2 = 0;
      v115 = *(_QWORD *)(a1 + 56);
      v116 = *(_QWORD *)(a1 + 3296);
      if (!v116)
        goto LABEL_91;
      v117 = *(_DWORD *)(v116 - 8);
      v118 = ((unint64_t)&WebCore::JSCSSNamespaceRule::s_info
            + ~((_QWORD)&WebCore::JSCSSNamespaceRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSNamespaceRule::s_info
                                                                       + ~((_QWORD)&WebCore::JSCSSNamespaceRule::s_info << 32)) >> 22);
      v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
      v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
      v121 = v117 & ((v120 >> 31) ^ v120);
      v122 = *(char ***)(v116 + 16 * v121);
      if (v122 == &WebCore::JSCSSNamespaceRule::s_info)
        goto LABEL_90;
      v123 = 1;
      while (v122)
      {
        v121 = ((_DWORD)v121 + v123) & v117;
        v122 = *(char ***)(v116 + 16 * v121);
        ++v123;
        if (v122 == &WebCore::JSCSSNamespaceRule::s_info)
        {
LABEL_90:
          v124 = *(_QWORD *)(v116 + 16 * v121 + 8);
          if (v124)
            goto LABEL_92;
          break;
        }
      }
LABEL_91:
      v125 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v126 = WebCore::JSCSSNamespaceRulePrototype::createStructure((uint64_t *)v115, a1, v125);
      *(_DWORD *)(v126 + 16) |= 0x80000u;
      v128 = (JSC::JSCell *)WebCore::JSCSSNamespaceRulePrototype::create((WebCore::JSCSSNamespaceRulePrototype *)v115, (JSC::VM *)a1, v126, v127);
      v129 = WebCore::JSCSSNamespaceRule::createStructure((uint64_t *)v115, a1, v128);
      v124 = WebCore::cacheDOMStructure((JSCell *)a1, v129, (uint64_t)&WebCore::JSCSSNamespaceRule::s_info);
      v115 = *(_QWORD *)(a1 + 56);
LABEL_92:
      v130 = (_QWORD *)WebCore::JSCSSNamespaceRule::subspaceForImpl((WebCore::JSCSSNamespaceRule *)v115, v4);
      SlowCase = v130[3];
      if (SlowCase < v130[4])
        goto LABEL_93;
      SlowCase = v130[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v305 = *(_QWORD *)(SlowCase + 8) ^ v130[6];
        v130[4] = SlowCase + HIDWORD(v305);
        v130[5] = SlowCase + (int)v305;
LABEL_93:
        v130[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v131 = *(_DWORD *)(v124 + 8);
      *(_DWORD *)SlowCase = v124 >> 4;
      *(_DWORD *)(SlowCase + 4) = v131;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v124 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v115 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0xBu:
      v6 = *a2;
      *a2 = 0;
      v132 = *(_QWORD *)(a1 + 56);
      v133 = *(_QWORD *)(a1 + 3296);
      if (!v133)
        goto LABEL_102;
      v134 = *(_DWORD *)(v133 - 8);
      v135 = ((unint64_t)&WebCore::JSCSSCounterStyleRule::s_info
            + ~((_QWORD)&WebCore::JSCSSCounterStyleRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSCounterStyleRule::s_info
                                                                          + ~((_QWORD)&WebCore::JSCSSCounterStyleRule::s_info << 32)) >> 22);
      v136 = 9 * ((v135 + ~(v135 << 13)) ^ ((v135 + ~(v135 << 13)) >> 8));
      v137 = (v136 ^ (v136 >> 15)) + ~((v136 ^ (v136 >> 15)) << 27);
      v138 = v134 & ((v137 >> 31) ^ v137);
      v139 = *(char ***)(v133 + 16 * v138);
      if (v139 == &WebCore::JSCSSCounterStyleRule::s_info)
        goto LABEL_101;
      v140 = 1;
      while (v139)
      {
        v138 = ((_DWORD)v138 + v140) & v134;
        v139 = *(char ***)(v133 + 16 * v138);
        ++v140;
        if (v139 == &WebCore::JSCSSCounterStyleRule::s_info)
        {
LABEL_101:
          v141 = *(_QWORD *)(v133 + 16 * v138 + 8);
          if (v141)
            goto LABEL_103;
          break;
        }
      }
LABEL_102:
      v142 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v143 = WebCore::JSCSSCounterStyleRulePrototype::createStructure((uint64_t *)v132, a1, v142);
      *(_DWORD *)(v143 + 16) |= 0x80000u;
      v145 = (JSC::JSCell *)WebCore::JSCSSCounterStyleRulePrototype::create((WebCore::JSCSSCounterStyleRulePrototype *)v132, (JSC::VM *)a1, v143, v144);
      v146 = WebCore::JSCSSCounterStyleRule::createStructure((uint64_t *)v132, a1, v145);
      v141 = WebCore::cacheDOMStructure((JSCell *)a1, v146, (uint64_t)&WebCore::JSCSSCounterStyleRule::s_info);
      v132 = *(_QWORD *)(a1 + 56);
LABEL_103:
      v147 = (_QWORD *)WebCore::JSCSSCounterStyleRule::subspaceForImpl((WebCore::JSCSSCounterStyleRule *)v132, v4);
      SlowCase = v147[3];
      if (SlowCase < v147[4])
        goto LABEL_104;
      SlowCase = v147[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v306 = *(_QWORD *)(SlowCase + 8) ^ v147[6];
        v147[4] = SlowCase + HIDWORD(v306);
        v147[5] = SlowCase + (int)v306;
LABEL_104:
        v147[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v148 = *(_DWORD *)(v141 + 8);
      *(_DWORD *)SlowCase = v141 >> 4;
      *(_DWORD *)(SlowCase + 4) = v148;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v141 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v132 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0xCu:
      v6 = *a2;
      *a2 = 0;
      v149 = *(_QWORD *)(a1 + 56);
      v150 = *(_QWORD *)(a1 + 3296);
      if (!v150)
        goto LABEL_113;
      v151 = *(_DWORD *)(v150 - 8);
      v152 = ((unint64_t)&WebCore::JSCSSSupportsRule::s_info
            + ~((_QWORD)&WebCore::JSCSSSupportsRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSSupportsRule::s_info
                                                                      + ~((_QWORD)&WebCore::JSCSSSupportsRule::s_info << 32)) >> 22);
      v153 = 9 * ((v152 + ~(v152 << 13)) ^ ((v152 + ~(v152 << 13)) >> 8));
      v154 = (v153 ^ (v153 >> 15)) + ~((v153 ^ (v153 >> 15)) << 27);
      v155 = v151 & ((v154 >> 31) ^ v154);
      v156 = *(char ***)(v150 + 16 * v155);
      if (v156 == &WebCore::JSCSSSupportsRule::s_info)
        goto LABEL_112;
      v157 = 1;
      while (v156)
      {
        v155 = ((_DWORD)v155 + v157) & v151;
        v156 = *(char ***)(v150 + 16 * v155);
        ++v157;
        if (v156 == &WebCore::JSCSSSupportsRule::s_info)
        {
LABEL_112:
          v158 = *(_QWORD *)(v150 + 16 * v155 + 8);
          if (v158)
            goto LABEL_114;
          break;
        }
      }
LABEL_113:
      v159 = (JSC::JSCell *)WebCore::JSCSSConditionRule::prototype(*(WebCore::JSCSSConditionRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v160 = WebCore::JSCSSSupportsRulePrototype::createStructure((uint64_t *)v149, a1, v159);
      *(_DWORD *)(v160 + 16) |= 0x80000u;
      v162 = (JSC::JSCell *)WebCore::JSCSSSupportsRulePrototype::create((WebCore::JSCSSSupportsRulePrototype *)v149, (JSC::VM *)a1, v160, v161);
      v163 = WebCore::JSCSSSupportsRule::createStructure((uint64_t *)v149, a1, v162);
      v158 = WebCore::cacheDOMStructure((JSCell *)a1, v163, (uint64_t)&WebCore::JSCSSSupportsRule::s_info);
      v149 = *(_QWORD *)(a1 + 56);
LABEL_114:
      v164 = (_QWORD *)WebCore::JSCSSSupportsRule::subspaceForImpl((WebCore::JSCSSSupportsRule *)v149, v4);
      SlowCase = v164[3];
      if (SlowCase < v164[4])
        goto LABEL_115;
      SlowCase = v164[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v307 = *(_QWORD *)(SlowCase + 8) ^ v164[6];
        v164[4] = SlowCase + HIDWORD(v307);
        v164[5] = SlowCase + (int)v307;
LABEL_115:
        v164[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v165 = *(_DWORD *)(v158 + 8);
      *(_DWORD *)SlowCase = v158 >> 4;
      *(_DWORD *)(SlowCase + 4) = v165;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v158 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v149 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0xEu:
      v6 = *a2;
      *a2 = 0;
      v166 = *(_QWORD *)(a1 + 56);
      v167 = *(_QWORD *)(a1 + 3296);
      if (!v167)
        goto LABEL_124;
      v168 = *(_DWORD *)(v167 - 8);
      v169 = ((unint64_t)&WebCore::JSCSSFontFeatureValuesRule::s_info
            + ~((_QWORD)&WebCore::JSCSSFontFeatureValuesRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSFontFeatureValuesRule::s_info
                                                                               + ~((_QWORD)&WebCore::JSCSSFontFeatureValuesRule::s_info << 32)) >> 22);
      v170 = 9 * ((v169 + ~(v169 << 13)) ^ ((v169 + ~(v169 << 13)) >> 8));
      v171 = (v170 ^ (v170 >> 15)) + ~((v170 ^ (v170 >> 15)) << 27);
      v172 = v168 & ((v171 >> 31) ^ v171);
      v173 = *(char ***)(v167 + 16 * v172);
      if (v173 == &WebCore::JSCSSFontFeatureValuesRule::s_info)
        goto LABEL_123;
      v174 = 1;
      while (v173)
      {
        v172 = ((_DWORD)v172 + v174) & v168;
        v173 = *(char ***)(v167 + 16 * v172);
        ++v174;
        if (v173 == &WebCore::JSCSSFontFeatureValuesRule::s_info)
        {
LABEL_123:
          v175 = *(_QWORD *)(v167 + 16 * v172 + 8);
          if (v175)
            goto LABEL_125;
          break;
        }
      }
LABEL_124:
      v176 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v177 = WebCore::JSCSSFontFeatureValuesRulePrototype::createStructure((uint64_t *)v166, a1, v176);
      *(_DWORD *)(v177 + 16) |= 0x80000u;
      v179 = (JSC::JSCell *)WebCore::JSCSSFontFeatureValuesRulePrototype::create((WebCore::JSCSSFontFeatureValuesRulePrototype *)v166, (JSC::VM *)a1, v177, v178);
      v180 = WebCore::JSCSSFontFeatureValuesRule::createStructure((uint64_t *)v166, a1, v179);
      v175 = WebCore::cacheDOMStructure((JSCell *)a1, v180, (uint64_t)&WebCore::JSCSSFontFeatureValuesRule::s_info);
      v166 = *(_QWORD *)(a1 + 56);
LABEL_125:
      v181 = (_QWORD *)WebCore::JSCSSFontFeatureValuesRule::subspaceForImpl((WebCore::JSCSSFontFeatureValuesRule *)v166, v4);
      SlowCase = v181[3];
      if (SlowCase < v181[4])
        goto LABEL_126;
      SlowCase = v181[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v308 = *(_QWORD *)(SlowCase + 8) ^ v181[6];
        v181[4] = SlowCase + HIDWORD(v308);
        v181[5] = SlowCase + (int)v308;
LABEL_126:
        v181[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v182 = *(_DWORD *)(v175 + 8);
      *(_DWORD *)SlowCase = v175 >> 4;
      *(_DWORD *)(SlowCase + 4) = v182;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v175 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v166 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x10u:
      v6 = *a2;
      *a2 = 0;
      v183 = *(_QWORD *)(a1 + 56);
      v184 = *(_QWORD *)(a1 + 3296);
      if (!v184)
        goto LABEL_135;
      v185 = *(_DWORD *)(v184 - 8);
      v186 = ((unint64_t)&WebCore::JSCSSLayerBlockRule::s_info
            + ~((_QWORD)&WebCore::JSCSSLayerBlockRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSLayerBlockRule::s_info
                                                                        + ~((_QWORD)&WebCore::JSCSSLayerBlockRule::s_info << 32)) >> 22);
      v187 = 9 * ((v186 + ~(v186 << 13)) ^ ((v186 + ~(v186 << 13)) >> 8));
      v188 = (v187 ^ (v187 >> 15)) + ~((v187 ^ (v187 >> 15)) << 27);
      v189 = v185 & ((v188 >> 31) ^ v188);
      v190 = *(char ***)(v184 + 16 * v189);
      if (v190 == &WebCore::JSCSSLayerBlockRule::s_info)
        goto LABEL_134;
      v191 = 1;
      while (v190)
      {
        v189 = ((_DWORD)v189 + v191) & v185;
        v190 = *(char ***)(v184 + 16 * v189);
        ++v191;
        if (v190 == &WebCore::JSCSSLayerBlockRule::s_info)
        {
LABEL_134:
          v192 = *(_QWORD *)(v184 + 16 * v189 + 8);
          if (v192)
            goto LABEL_136;
          break;
        }
      }
LABEL_135:
      v193 = (JSC::JSCell *)WebCore::JSCSSGroupingRule::prototype(*(WebCore::JSCSSGroupingRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v194 = WebCore::JSCSSLayerBlockRulePrototype::createStructure((uint64_t *)v183, a1, v193);
      *(_DWORD *)(v194 + 16) |= 0x80000u;
      v196 = (JSC::JSCell *)WebCore::JSCSSLayerBlockRulePrototype::create((WebCore::JSCSSLayerBlockRulePrototype *)v183, (JSC::VM *)a1, v194, v195);
      v197 = WebCore::JSCSSLayerBlockRule::createStructure((uint64_t *)v183, a1, v196);
      v192 = WebCore::cacheDOMStructure((JSCell *)a1, v197, (uint64_t)&WebCore::JSCSSLayerBlockRule::s_info);
      v183 = *(_QWORD *)(a1 + 56);
LABEL_136:
      v198 = (_QWORD *)WebCore::JSCSSLayerBlockRule::subspaceForImpl((WebCore::JSCSSLayerBlockRule *)v183, v4);
      SlowCase = v198[3];
      if (SlowCase < v198[4])
        goto LABEL_137;
      SlowCase = v198[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v309 = *(_QWORD *)(SlowCase + 8) ^ v198[6];
        v198[4] = SlowCase + HIDWORD(v309);
        v198[5] = SlowCase + (int)v309;
LABEL_137:
        v198[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v199 = *(_DWORD *)(v192 + 8);
      *(_DWORD *)SlowCase = v192 >> 4;
      *(_DWORD *)(SlowCase + 4) = v199;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v192 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v183 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x11u:
      v6 = *a2;
      *a2 = 0;
      v200 = *(_QWORD *)(a1 + 56);
      v201 = *(_QWORD *)(a1 + 3296);
      if (!v201)
        goto LABEL_146;
      v202 = *(_DWORD *)(v201 - 8);
      v203 = ((unint64_t)&WebCore::JSCSSLayerStatementRule::s_info
            + ~((_QWORD)&WebCore::JSCSSLayerStatementRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSLayerStatementRule::s_info
                                                                            + ~((_QWORD)&WebCore::JSCSSLayerStatementRule::s_info << 32)) >> 22);
      v204 = 9 * ((v203 + ~(v203 << 13)) ^ ((v203 + ~(v203 << 13)) >> 8));
      v205 = (v204 ^ (v204 >> 15)) + ~((v204 ^ (v204 >> 15)) << 27);
      v206 = v202 & ((v205 >> 31) ^ v205);
      v207 = *(char ***)(v201 + 16 * v206);
      if (v207 == &WebCore::JSCSSLayerStatementRule::s_info)
        goto LABEL_145;
      v208 = 1;
      while (v207)
      {
        v206 = ((_DWORD)v206 + v208) & v202;
        v207 = *(char ***)(v201 + 16 * v206);
        ++v208;
        if (v207 == &WebCore::JSCSSLayerStatementRule::s_info)
        {
LABEL_145:
          v209 = *(_QWORD *)(v201 + 16 * v206 + 8);
          if (v209)
            goto LABEL_147;
          break;
        }
      }
LABEL_146:
      v210 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v211 = WebCore::JSCSSLayerStatementRulePrototype::createStructure((uint64_t *)v200, a1, v210);
      *(_DWORD *)(v211 + 16) |= 0x80000u;
      v213 = (JSC::JSCell *)WebCore::JSCSSLayerStatementRulePrototype::create((WebCore::JSCSSLayerStatementRulePrototype *)v200, (JSC::VM *)a1, v211, v212);
      v214 = WebCore::JSCSSLayerStatementRule::createStructure((uint64_t *)v200, a1, v213);
      v209 = WebCore::cacheDOMStructure((JSCell *)a1, v214, (uint64_t)&WebCore::JSCSSLayerStatementRule::s_info);
      v200 = *(_QWORD *)(a1 + 56);
LABEL_147:
      v215 = (_QWORD *)WebCore::JSCSSLayerStatementRule::subspaceForImpl((WebCore::JSCSSLayerStatementRule *)v200, v4);
      SlowCase = v215[3];
      if (SlowCase < v215[4])
        goto LABEL_148;
      SlowCase = v215[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v310 = *(_QWORD *)(SlowCase + 8) ^ v215[6];
        v215[4] = SlowCase + HIDWORD(v310);
        v215[5] = SlowCase + (int)v310;
LABEL_148:
        v215[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v216 = *(_DWORD *)(v209 + 8);
      *(_DWORD *)SlowCase = v209 >> 4;
      *(_DWORD *)(SlowCase + 4) = v216;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v209 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v200 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x12u:
      v6 = *a2;
      *a2 = 0;
      v217 = *(_QWORD *)(a1 + 56);
      v218 = *(_QWORD *)(a1 + 3296);
      if (!v218)
        goto LABEL_157;
      v219 = *(_DWORD *)(v218 - 8);
      v220 = ((unint64_t)&WebCore::JSCSSContainerRule::s_info
            + ~((_QWORD)&WebCore::JSCSSContainerRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSContainerRule::s_info
                                                                       + ~((_QWORD)&WebCore::JSCSSContainerRule::s_info << 32)) >> 22);
      v221 = 9 * ((v220 + ~(v220 << 13)) ^ ((v220 + ~(v220 << 13)) >> 8));
      v222 = (v221 ^ (v221 >> 15)) + ~((v221 ^ (v221 >> 15)) << 27);
      v223 = v219 & ((v222 >> 31) ^ v222);
      v224 = *(char ***)(v218 + 16 * v223);
      if (v224 == &WebCore::JSCSSContainerRule::s_info)
        goto LABEL_156;
      v225 = 1;
      while (v224)
      {
        v223 = ((_DWORD)v223 + v225) & v219;
        v224 = *(char ***)(v218 + 16 * v223);
        ++v225;
        if (v224 == &WebCore::JSCSSContainerRule::s_info)
        {
LABEL_156:
          v226 = *(_QWORD *)(v218 + 16 * v223 + 8);
          if (v226)
            goto LABEL_158;
          break;
        }
      }
LABEL_157:
      v227 = (JSC::JSCell *)WebCore::JSCSSConditionRule::prototype(*(WebCore::JSCSSConditionRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v228 = WebCore::JSCSSContainerRulePrototype::createStructure((uint64_t *)v217, a1, v227);
      *(_DWORD *)(v228 + 16) |= 0x80000u;
      v230 = (JSC::JSCell *)WebCore::JSCSSContainerRulePrototype::create((WebCore::JSCSSContainerRulePrototype *)v217, (JSC::VM *)a1, v228, v229);
      v231 = WebCore::JSCSSContainerRule::createStructure((uint64_t *)v217, a1, v230);
      v226 = WebCore::cacheDOMStructure((JSCell *)a1, v231, (uint64_t)&WebCore::JSCSSContainerRule::s_info);
      v217 = *(_QWORD *)(a1 + 56);
LABEL_158:
      v232 = (_QWORD *)WebCore::JSCSSContainerRule::subspaceForImpl((WebCore::JSCSSContainerRule *)v217, v4);
      SlowCase = v232[3];
      if (SlowCase < v232[4])
        goto LABEL_159;
      SlowCase = v232[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v311 = *(_QWORD *)(SlowCase + 8) ^ v232[6];
        v232[4] = SlowCase + HIDWORD(v311);
        v232[5] = SlowCase + (int)v311;
LABEL_159:
        v232[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v233 = *(_DWORD *)(v226 + 8);
      *(_DWORD *)SlowCase = v226 >> 4;
      *(_DWORD *)(SlowCase + 4) = v233;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v226 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v217 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x13u:
      v6 = *a2;
      *a2 = 0;
      v234 = *(_QWORD *)(a1 + 56);
      v235 = *(_QWORD *)(a1 + 3296);
      if (!v235)
        goto LABEL_168;
      v236 = *(_DWORD *)(v235 - 8);
      v237 = ((unint64_t)&WebCore::JSCSSFontPaletteValuesRule::s_info
            + ~((_QWORD)&WebCore::JSCSSFontPaletteValuesRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSFontPaletteValuesRule::s_info
                                                                               + ~((_QWORD)&WebCore::JSCSSFontPaletteValuesRule::s_info << 32)) >> 22);
      v238 = 9 * ((v237 + ~(v237 << 13)) ^ ((v237 + ~(v237 << 13)) >> 8));
      v239 = (v238 ^ (v238 >> 15)) + ~((v238 ^ (v238 >> 15)) << 27);
      v240 = v236 & ((v239 >> 31) ^ v239);
      v241 = *(char ***)(v235 + 16 * v240);
      if (v241 == &WebCore::JSCSSFontPaletteValuesRule::s_info)
        goto LABEL_167;
      v242 = 1;
      while (v241)
      {
        v240 = ((_DWORD)v240 + v242) & v236;
        v241 = *(char ***)(v235 + 16 * v240);
        ++v242;
        if (v241 == &WebCore::JSCSSFontPaletteValuesRule::s_info)
        {
LABEL_167:
          v243 = *(_QWORD *)(v235 + 16 * v240 + 8);
          if (v243)
            goto LABEL_169;
          break;
        }
      }
LABEL_168:
      v244 = (JSC::JSCell *)WebCore::JSCSSRule::prototype(*(WebCore::JSCSSRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v245 = WebCore::JSCSSFontPaletteValuesRulePrototype::createStructure((uint64_t *)v234, a1, v244);
      *(_DWORD *)(v245 + 16) |= 0x80000u;
      v247 = (JSC::JSCell *)WebCore::JSCSSFontPaletteValuesRulePrototype::create((WebCore::JSCSSFontPaletteValuesRulePrototype *)v234, (JSC::VM *)a1, v245, v246);
      v248 = WebCore::JSCSSFontPaletteValuesRule::createStructure((uint64_t *)v234, a1, v247);
      v243 = WebCore::cacheDOMStructure((JSCell *)a1, v248, (uint64_t)&WebCore::JSCSSFontPaletteValuesRule::s_info);
      v234 = *(_QWORD *)(a1 + 56);
LABEL_169:
      v249 = (_QWORD *)WebCore::JSCSSFontPaletteValuesRule::subspaceForImpl((WebCore::JSCSSFontPaletteValuesRule *)v234, v4);
      SlowCase = v249[3];
      if (SlowCase < v249[4])
        goto LABEL_170;
      SlowCase = v249[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v312 = *(_QWORD *)(SlowCase + 8) ^ v249[6];
        v249[4] = SlowCase + HIDWORD(v312);
        v249[5] = SlowCase + (int)v312;
LABEL_170:
        v249[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v250 = *(_DWORD *)(v243 + 8);
      *(_DWORD *)SlowCase = v243 >> 4;
      *(_DWORD *)(SlowCase + 4) = v250;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v243 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v234 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x15u:
      v6 = *a2;
      *a2 = 0;
      v251 = *(_QWORD *)(a1 + 56);
      v252 = *(_QWORD *)(a1 + 3296);
      if (!v252)
        goto LABEL_179;
      v253 = *(_DWORD *)(v252 - 8);
      v254 = ((unint64_t)&WebCore::JSCSSPropertyRule::s_info
            + ~((_QWORD)&WebCore::JSCSSPropertyRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSPropertyRule::s_info
                                                                      + ~((_QWORD)&WebCore::JSCSSPropertyRule::s_info << 32)) >> 22);
      v255 = 9 * ((v254 + ~(v254 << 13)) ^ ((v254 + ~(v254 << 13)) >> 8));
      v256 = (v255 ^ (v255 >> 15)) + ~((v255 ^ (v255 >> 15)) << 27);
      v257 = v253 & ((v256 >> 31) ^ v256);
      v258 = *(char ***)(v252 + 16 * v257);
      if (v258 == &WebCore::JSCSSPropertyRule::s_info)
        goto LABEL_178;
      v259 = 1;
      while (v258)
      {
        v257 = ((_DWORD)v257 + v259) & v253;
        v258 = *(char ***)(v252 + 16 * v257);
        ++v259;
        if (v258 == &WebCore::JSCSSPropertyRule::s_info)
        {
LABEL_178:
          v260 = *(_QWORD *)(v252 + 16 * v257 + 8);
          if (v260)
            goto LABEL_180;
          break;
        }
      }
LABEL_179:
      v261 = (JSC::JSCell *)WebCore::JSCSSPropertyRule::createPrototype(*(WebCore::JSCSSPropertyRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v262 = WebCore::JSCSSPropertyRule::createStructure((uint64_t *)v251, a1, v261);
      v260 = WebCore::cacheDOMStructure((JSCell *)a1, v262, (uint64_t)&WebCore::JSCSSPropertyRule::s_info);
      v251 = *(_QWORD *)(a1 + 56);
LABEL_180:
      v263 = (_QWORD *)WebCore::JSCSSPropertyRule::subspaceForImpl((WebCore::JSCSSPropertyRule *)v251, v4);
      SlowCase = v263[3];
      if (SlowCase < v263[4])
        goto LABEL_181;
      SlowCase = v263[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v313 = *(_QWORD *)(SlowCase + 8) ^ v263[6];
        v263[4] = SlowCase + HIDWORD(v313);
        v263[5] = SlowCase + (int)v313;
LABEL_181:
        v263[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v264 = *(_DWORD *)(v260 + 8);
      *(_DWORD *)SlowCase = v260 >> 4;
      *(_DWORD *)(SlowCase + 4) = v264;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v260 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v251 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x17u:
      v6 = *a2;
      *a2 = 0;
      v265 = *(_QWORD *)(a1 + 56);
      v266 = *(_QWORD *)(a1 + 3296);
      if (!v266)
        goto LABEL_190;
      v267 = *(_DWORD *)(v266 - 8);
      v268 = ((unint64_t)&WebCore::JSCSSScopeRule::s_info + ~((_QWORD)&WebCore::JSCSSScopeRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSScopeRule::s_info + ~((_QWORD)&WebCore::JSCSSScopeRule::s_info << 32)) >> 22);
      v269 = 9 * ((v268 + ~(v268 << 13)) ^ ((v268 + ~(v268 << 13)) >> 8));
      v270 = (v269 ^ (v269 >> 15)) + ~((v269 ^ (v269 >> 15)) << 27);
      v271 = v267 & ((v270 >> 31) ^ v270);
      v272 = *(char ***)(v266 + 16 * v271);
      if (v272 == &WebCore::JSCSSScopeRule::s_info)
        goto LABEL_189;
      v273 = 1;
      while (v272)
      {
        v271 = ((_DWORD)v271 + v273) & v267;
        v272 = *(char ***)(v266 + 16 * v271);
        ++v273;
        if (v272 == &WebCore::JSCSSScopeRule::s_info)
        {
LABEL_189:
          v274 = *(_QWORD *)(v266 + 16 * v271 + 8);
          if (v274)
            goto LABEL_191;
          break;
        }
      }
LABEL_190:
      v275 = (JSC::JSCell *)WebCore::JSCSSGroupingRule::prototype(*(WebCore::JSCSSGroupingRule **)(a1 + 56), (JSC::VM *)a1, v5);
      v276 = WebCore::JSCSSScopeRulePrototype::createStructure((uint64_t *)v265, a1, v275);
      *(_DWORD *)(v276 + 16) |= 0x80000u;
      v278 = (JSC::JSCell *)WebCore::JSCSSScopeRulePrototype::create((WebCore::JSCSSScopeRulePrototype *)v265, (JSC::VM *)a1, v276, v277);
      v279 = WebCore::JSCSSScopeRule::createStructure((uint64_t *)v265, a1, v278);
      v274 = WebCore::cacheDOMStructure((JSCell *)a1, v279, (uint64_t)&WebCore::JSCSSScopeRule::s_info);
      v265 = *(_QWORD *)(a1 + 56);
LABEL_191:
      v280 = (_QWORD *)WebCore::JSCSSScopeRule::subspaceForImpl((WebCore::JSCSSScopeRule *)v265, v4);
      SlowCase = v280[3];
      if (SlowCase < v280[4])
        goto LABEL_192;
      SlowCase = v280[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v314 = *(_QWORD *)(SlowCase + 8) ^ v280[6];
        v280[4] = SlowCase + HIDWORD(v314);
        v280[5] = SlowCase + (int)v314;
LABEL_192:
        v280[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v281 = *(_DWORD *)(v274 + 8);
      *(_DWORD *)SlowCase = v274 >> 4;
      *(_DWORD *)(SlowCase + 4) = v281;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v274 + 76);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*(_BYTE *)(v265 + 755))
        goto LABEL_12;
      goto LABEL_13;
    case 0x18u:
      v6 = *a2;
      *a2 = 0;
      v282 = *(_QWORD *)(a1 + 56);
      v283 = *(_QWORD *)(a1 + 3296);
      if (!v283)
        goto LABEL_201;
      v284 = *(_DWORD *)(v283 - 8);
      v285 = ((unint64_t)&WebCore::JSCSSStartingStyleRule::s_info
            + ~((_QWORD)&WebCore::JSCSSStartingStyleRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSStartingStyleRule::s_info
                                                                           + ~((_QWORD)&WebCore::JSCSSStartingStyleRule::s_info << 32)) >> 22);
      v286 = 9 * ((v285 + ~(v285 << 13)) ^ ((v285 + ~(v285 << 13)) >> 8));
      v287 = (v286 ^ (v286 >> 15)) + ~((v286 ^ (v286 >> 15)) << 27);
      v288 = v284 & ((v287 >> 31) ^ v287);
      v289 = *(char ***)(v283 + 16 * v288);
      if (v289 == &WebCore::JSCSSStartingStyleRule::s_info)
        goto LABEL_200;
      v290 = 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1956962D8);
  }
  while (v289)
  {
    v288 = ((_DWORD)v288 + v290) & v284;
    v289 = *(char ***)(v283 + 16 * v288);
    ++v290;
    if (v289 == &WebCore::JSCSSStartingStyleRule::s_info)
    {
LABEL_200:
      v291 = *(_QWORD *)(v283 + 16 * v288 + 8);
      if (v291)
        goto LABEL_202;
      break;
    }
  }
LABEL_201:
  v292 = (JSC::JSCell *)WebCore::JSCSSGroupingRule::prototype(*(WebCore::JSCSSGroupingRule **)(a1 + 56), (JSC::VM *)a1, v5);
  v293 = WebCore::JSCSSStartingStyleRulePrototype::createStructure((uint64_t *)v282, a1, v292);
  *(_DWORD *)(v293 + 16) |= 0x80000u;
  v295 = (JSC::JSCell *)WebCore::JSCSSStartingStyleRulePrototype::create((WebCore::JSCSSStartingStyleRulePrototype *)v282, (JSC::VM *)a1, v293, v294);
  v296 = WebCore::JSCSSStartingStyleRule::createStructure((uint64_t *)v282, a1, v295);
  v291 = WebCore::cacheDOMStructure((JSCell *)a1, v296, (uint64_t)&WebCore::JSCSSStartingStyleRule::s_info);
  v282 = *(_QWORD *)(a1 + 56);
LABEL_202:
  v297 = (_QWORD *)WebCore::JSCSSStartingStyleRule::subspaceForImpl((WebCore::JSCSSStartingStyleRule *)v282, v4);
  SlowCase = v297[3];
  if (SlowCase < v297[4])
    goto LABEL_203;
  SlowCase = v297[5];
  if ((SlowCase & 1) == 0)
  {
    v315 = *(_QWORD *)(SlowCase + 8) ^ v297[6];
    v297[4] = SlowCase + HIDWORD(v315);
    v297[5] = SlowCase + (int)v315;
LABEL_203:
    v297[3] = SlowCase + 32;
    goto LABEL_204;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_204:
  *(_DWORD *)SlowCase = 0;
  v298 = *(_DWORD *)(v291 + 8);
  *(_DWORD *)SlowCase = v291 >> 4;
  *(_DWORD *)(SlowCase + 4) = v298;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v291 + 76);
  *(_QWORD *)(SlowCase + 24) = v6;
  if (*(_BYTE *)(v282 + 755))
LABEL_12:
    __dmb(0xAu);
LABEL_13:
  v25 = *(_QWORD *)(a1 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSRule *)::owner = (uint64_t)&off_1E324B1A0;
  }
  v317 = (_DWORD *)v6;
  if ((SlowCase & 8) != 0)
    v26 = (SlowCase - 112) | 1;
  else
    v26 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v26 & 1) != 0)
    v27 = v26 + 47;
  else
    v27 = *(_QWORD *)v26 + 32;
  Allocator = *(_QWORD **)(v27 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v27 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSRule *)::owner;
  Allocator[2] = v25;
  v316 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v25 + 32), (uint64_t *)&v317, (uint64_t *)&v316);
  if (v316)
    v316[1] = 3;
  return SlowCase;
}

{
  JSC::VM *v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  WebCore::JSSVGPathSegClosePath *v16;
  JSC::JSCell *Prototype;
  uint64_t v18;
  WebCore::JSSVGPathSegClosePath *v19;
  _QWORD *v20;
  unint64_t SlowCase;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t Structure;
  JSC::Structure *v33;
  JSC::JSCell *v34;
  uint64_t v35;
  WebCore::JSSVGPathSeg *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  int v46;
  unint64_t v47;
  WebCore::JSSVGPathSegMovetoAbs *v48;
  JSC::JSCell *v49;
  uint64_t v50;
  WebCore::JSSVGPathSegMovetoAbs *v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  int v60;
  unint64_t v61;
  WebCore::JSSVGPathSegMovetoRel *v62;
  JSC::JSCell *v63;
  uint64_t v64;
  WebCore::JSSVGPathSegMovetoRel *v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  unint64_t v75;
  WebCore::JSSVGPathSegLinetoAbs *v76;
  JSC::JSCell *v77;
  uint64_t v78;
  WebCore::JSSVGPathSegLinetoAbs *v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char **v87;
  int v88;
  unint64_t v89;
  WebCore::JSSVGPathSegLinetoRel *v90;
  JSC::JSCell *v91;
  uint64_t v92;
  WebCore::JSSVGPathSegLinetoRel *v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char **v101;
  int v102;
  unint64_t v103;
  WebCore::JSSVGPathSegCurvetoCubicAbs *v104;
  JSC::JSCell *v105;
  uint64_t v106;
  WebCore::JSSVGPathSegCurvetoCubicAbs *v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char **v115;
  int v116;
  unint64_t v117;
  WebCore::JSSVGPathSegCurvetoCubicRel *v118;
  JSC::JSCell *v119;
  uint64_t v120;
  WebCore::JSSVGPathSegCurvetoCubicRel *v121;
  _QWORD *v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char **v129;
  int v130;
  unint64_t v131;
  WebCore::JSSVGPathSegCurvetoQuadraticAbs *v132;
  JSC::JSCell *v133;
  uint64_t v134;
  WebCore::JSSVGPathSegCurvetoQuadraticAbs *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char **v143;
  int v144;
  unint64_t v145;
  WebCore::JSSVGPathSegCurvetoQuadraticRel *v146;
  JSC::JSCell *v147;
  uint64_t v148;
  WebCore::JSSVGPathSegCurvetoQuadraticRel *v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char **v157;
  int v158;
  unint64_t v159;
  WebCore::JSSVGPathSegArcAbs *v160;
  JSC::JSCell *v161;
  uint64_t v162;
  WebCore::JSSVGPathSegArcAbs *v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char **v171;
  int v172;
  unint64_t v173;
  WebCore::JSSVGPathSegArcRel *v174;
  JSC::JSCell *v175;
  uint64_t v176;
  WebCore::JSSVGPathSegArcRel *v177;
  _QWORD *v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char **v185;
  int v186;
  unint64_t v187;
  WebCore::JSSVGPathSegLinetoHorizontalAbs *v188;
  JSC::JSCell *v189;
  uint64_t v190;
  WebCore::JSSVGPathSegLinetoHorizontalAbs *v191;
  _QWORD *v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char **v199;
  int v200;
  unint64_t v201;
  WebCore::JSSVGPathSegLinetoHorizontalRel *v202;
  JSC::JSCell *v203;
  uint64_t v204;
  WebCore::JSSVGPathSegLinetoHorizontalRel *v205;
  _QWORD *v206;
  uint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char **v213;
  int v214;
  unint64_t v215;
  WebCore::JSSVGPathSegLinetoVerticalAbs *v216;
  JSC::JSCell *v217;
  uint64_t v218;
  WebCore::JSSVGPathSegLinetoVerticalAbs *v219;
  _QWORD *v220;
  uint64_t v221;
  unsigned int v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char **v227;
  int v228;
  unint64_t v229;
  WebCore::JSSVGPathSegLinetoVerticalRel *v230;
  JSC::JSCell *v231;
  uint64_t v232;
  WebCore::JSSVGPathSegLinetoVerticalRel *v233;
  _QWORD *v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char **v241;
  int v242;
  unint64_t v243;
  WebCore::JSSVGPathSegCurvetoCubicSmoothAbs *v244;
  JSC::JSCell *v245;
  uint64_t v246;
  WebCore::JSSVGPathSegCurvetoCubicSmoothAbs *v247;
  _QWORD *v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char **v255;
  int v256;
  unint64_t v257;
  WebCore::JSSVGPathSegCurvetoCubicSmoothRel *v258;
  JSC::JSCell *v259;
  uint64_t v260;
  WebCore::JSSVGPathSegCurvetoCubicSmoothRel *v261;
  _QWORD *v262;
  uint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  char **v269;
  int v270;
  unint64_t v271;
  WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs *v272;
  JSC::JSCell *v273;
  uint64_t v274;
  WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  _QWORD *Allocator;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  char **v290;
  int v291;
  unint64_t v292;
  WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel *v293;
  JSC::JSCell *v294;
  uint64_t v295;
  WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel *v296;
  _QWORD *v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  _QWORD *v320;
  uint64_t v321;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 40))(*a2))
  {
    case 1u:
      v6 = *a2;
      *a2 = 0;
      v7 = *(_QWORD *)(a1 + 3296);
      if (!v7)
        goto LABEL_8;
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ((unint64_t)&WebCore::JSSVGPathSegClosePath::s_info
          + ~((_QWORD)&WebCore::JSSVGPathSegClosePath::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegClosePath::s_info
                                                                        + ~((_QWORD)&WebCore::JSSVGPathSegClosePath::s_info << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(char ***)(v7 + 16 * v12);
      if (v13 == &WebCore::JSSVGPathSegClosePath::s_info)
        goto LABEL_7;
      v14 = 1;
      do
      {
        if (!v13)
          goto LABEL_8;
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
      }
      while (v13 != &WebCore::JSSVGPathSegClosePath::s_info);
LABEL_7:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (!v15)
      {
LABEL_8:
        v16 = *(WebCore::JSSVGPathSegClosePath **)(a1 + 56);
        Prototype = (JSC::JSCell *)WebCore::JSSVGPathSegClosePath::createPrototype(v16, (JSC::VM *)a1, v5);
        LODWORD(v321) = 23;
        v18 = JSC::Structure::create((uint64_t *)v16, a1, Prototype);
        v15 = WebCore::cacheDOMStructure((JSCell *)a1, v18, (uint64_t)&WebCore::JSSVGPathSegClosePath::s_info);
      }
      v19 = *(WebCore::JSSVGPathSegClosePath **)(a1 + 56);
      v20 = (_QWORD *)WebCore::JSSVGPathSegClosePath::subspaceForImpl(v19, v4);
      SlowCase = v20[3];
      if (SlowCase < v20[4])
        goto LABEL_10;
      SlowCase = v20[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v300 = *(_QWORD *)(SlowCase + 8) ^ v20[6];
        v20[4] = SlowCase + HIDWORD(v300);
        v20[5] = SlowCase + (int)v300;
LABEL_10:
        v20[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (!*((_BYTE *)v19 + 755))
        goto LABEL_211;
      goto LABEL_210;
    case 2u:
      v6 = *a2;
      *a2 = 0;
      v39 = *(_QWORD *)(a1 + 3296);
      if (!v39)
        goto LABEL_30;
      v40 = *(_DWORD *)(v39 - 8);
      v41 = ((unint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info
           + ~((_QWORD)&WebCore::JSSVGPathSegMovetoAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGPathSegMovetoAbs::s_info << 32)) >> 22);
      v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
      v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
      v44 = v40 & ((v43 >> 31) ^ v43);
      v45 = *(char ***)(v39 + 16 * v44);
      if (v45 == &WebCore::JSSVGPathSegMovetoAbs::s_info)
        goto LABEL_29;
      v46 = 1;
      while (v45)
      {
        v44 = ((_DWORD)v44 + v46) & v40;
        v45 = *(char ***)(v39 + 16 * v44);
        ++v46;
        if (v45 == &WebCore::JSSVGPathSegMovetoAbs::s_info)
        {
LABEL_29:
          v47 = *(_QWORD *)(v39 + 16 * v44 + 8);
          if (v47)
            goto LABEL_31;
          break;
        }
      }
LABEL_30:
      v48 = *(WebCore::JSSVGPathSegMovetoAbs **)(a1 + 56);
      v49 = (JSC::JSCell *)WebCore::JSSVGPathSegMovetoAbs::createPrototype(v48, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v50 = JSC::Structure::create((uint64_t *)v48, a1, v49);
      v47 = WebCore::cacheDOMStructure((JSCell *)a1, v50, (uint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info);
LABEL_31:
      v51 = *(WebCore::JSSVGPathSegMovetoAbs **)(a1 + 56);
      v52 = (_QWORD *)WebCore::JSSVGPathSegMovetoAbs::subspaceForImpl(v51, v4);
      SlowCase = v52[3];
      if (SlowCase < v52[4])
        goto LABEL_32;
      SlowCase = v52[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v302 = *(_QWORD *)(SlowCase + 8) ^ v52[6];
        v52[4] = SlowCase + HIDWORD(v302);
        v52[5] = SlowCase + (int)v302;
LABEL_32:
        v52[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v47);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v51 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 3u:
      v6 = *a2;
      *a2 = 0;
      v53 = *(_QWORD *)(a1 + 3296);
      if (!v53)
        goto LABEL_41;
      v54 = *(_DWORD *)(v53 - 8);
      v55 = ((unint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info
           + ~((_QWORD)&WebCore::JSSVGPathSegMovetoRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGPathSegMovetoRel::s_info << 32)) >> 22);
      v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
      v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
      v58 = v54 & ((v57 >> 31) ^ v57);
      v59 = *(char ***)(v53 + 16 * v58);
      if (v59 == &WebCore::JSSVGPathSegMovetoRel::s_info)
        goto LABEL_40;
      v60 = 1;
      while (v59)
      {
        v58 = ((_DWORD)v58 + v60) & v54;
        v59 = *(char ***)(v53 + 16 * v58);
        ++v60;
        if (v59 == &WebCore::JSSVGPathSegMovetoRel::s_info)
        {
LABEL_40:
          v61 = *(_QWORD *)(v53 + 16 * v58 + 8);
          if (v61)
            goto LABEL_42;
          break;
        }
      }
LABEL_41:
      v62 = *(WebCore::JSSVGPathSegMovetoRel **)(a1 + 56);
      v63 = (JSC::JSCell *)WebCore::JSSVGPathSegMovetoRel::createPrototype(v62, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v64 = JSC::Structure::create((uint64_t *)v62, a1, v63);
      v61 = WebCore::cacheDOMStructure((JSCell *)a1, v64, (uint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info);
LABEL_42:
      v65 = *(WebCore::JSSVGPathSegMovetoRel **)(a1 + 56);
      v66 = (_QWORD *)WebCore::JSSVGPathSegMovetoRel::subspaceForImpl(v65, v4);
      SlowCase = v66[3];
      if (SlowCase < v66[4])
        goto LABEL_43;
      SlowCase = v66[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v303 = *(_QWORD *)(SlowCase + 8) ^ v66[6];
        v66[4] = SlowCase + HIDWORD(v303);
        v66[5] = SlowCase + (int)v303;
LABEL_43:
        v66[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v61);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v65 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 4u:
      v6 = *a2;
      *a2 = 0;
      v67 = *(_QWORD *)(a1 + 3296);
      if (!v67)
        goto LABEL_52;
      v68 = *(_DWORD *)(v67 - 8);
      v69 = ((unint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info
           + ~((_QWORD)&WebCore::JSSVGPathSegLinetoAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGPathSegLinetoAbs::s_info << 32)) >> 22);
      v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
      v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
      v72 = v68 & ((v71 >> 31) ^ v71);
      v73 = *(char ***)(v67 + 16 * v72);
      if (v73 == &WebCore::JSSVGPathSegLinetoAbs::s_info)
        goto LABEL_51;
      v74 = 1;
      while (v73)
      {
        v72 = ((_DWORD)v72 + v74) & v68;
        v73 = *(char ***)(v67 + 16 * v72);
        ++v74;
        if (v73 == &WebCore::JSSVGPathSegLinetoAbs::s_info)
        {
LABEL_51:
          v75 = *(_QWORD *)(v67 + 16 * v72 + 8);
          if (v75)
            goto LABEL_53;
          break;
        }
      }
LABEL_52:
      v76 = *(WebCore::JSSVGPathSegLinetoAbs **)(a1 + 56);
      v77 = (JSC::JSCell *)WebCore::JSSVGPathSegLinetoAbs::createPrototype(v76, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v78 = JSC::Structure::create((uint64_t *)v76, a1, v77);
      v75 = WebCore::cacheDOMStructure((JSCell *)a1, v78, (uint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info);
LABEL_53:
      v79 = *(WebCore::JSSVGPathSegLinetoAbs **)(a1 + 56);
      v80 = (_QWORD *)WebCore::JSSVGPathSegLinetoAbs::subspaceForImpl(v79, v4);
      SlowCase = v80[3];
      if (SlowCase < v80[4])
        goto LABEL_54;
      SlowCase = v80[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v304 = *(_QWORD *)(SlowCase + 8) ^ v80[6];
        v80[4] = SlowCase + HIDWORD(v304);
        v80[5] = SlowCase + (int)v304;
LABEL_54:
        v80[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v75);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v79 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 5u:
      v6 = *a2;
      *a2 = 0;
      v81 = *(_QWORD *)(a1 + 3296);
      if (!v81)
        goto LABEL_63;
      v82 = *(_DWORD *)(v81 - 8);
      v83 = ((unint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info
           + ~((_QWORD)&WebCore::JSSVGPathSegLinetoRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info
                                                                         + ~((_QWORD)&WebCore::JSSVGPathSegLinetoRel::s_info << 32)) >> 22);
      v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
      v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
      v86 = v82 & ((v85 >> 31) ^ v85);
      v87 = *(char ***)(v81 + 16 * v86);
      if (v87 == &WebCore::JSSVGPathSegLinetoRel::s_info)
        goto LABEL_62;
      v88 = 1;
      while (v87)
      {
        v86 = ((_DWORD)v86 + v88) & v82;
        v87 = *(char ***)(v81 + 16 * v86);
        ++v88;
        if (v87 == &WebCore::JSSVGPathSegLinetoRel::s_info)
        {
LABEL_62:
          v89 = *(_QWORD *)(v81 + 16 * v86 + 8);
          if (v89)
            goto LABEL_64;
          break;
        }
      }
LABEL_63:
      v90 = *(WebCore::JSSVGPathSegLinetoRel **)(a1 + 56);
      v91 = (JSC::JSCell *)WebCore::JSSVGPathSegLinetoRel::createPrototype(v90, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v92 = JSC::Structure::create((uint64_t *)v90, a1, v91);
      v89 = WebCore::cacheDOMStructure((JSCell *)a1, v92, (uint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info);
LABEL_64:
      v93 = *(WebCore::JSSVGPathSegLinetoRel **)(a1 + 56);
      v94 = (_QWORD *)WebCore::JSSVGPathSegLinetoRel::subspaceForImpl(v93, v4);
      SlowCase = v94[3];
      if (SlowCase < v94[4])
        goto LABEL_65;
      SlowCase = v94[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v305 = *(_QWORD *)(SlowCase + 8) ^ v94[6];
        v94[4] = SlowCase + HIDWORD(v305);
        v94[5] = SlowCase + (int)v305;
LABEL_65:
        v94[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v89);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v93 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 6u:
      v6 = *a2;
      *a2 = 0;
      v95 = *(_QWORD *)(a1 + 3296);
      if (!v95)
        goto LABEL_74;
      v96 = *(_DWORD *)(v95 - 8);
      v97 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info
           + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info << 32)) >> 22);
      v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
      v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
      v100 = v96 & ((v99 >> 31) ^ v99);
      v101 = *(char ***)(v95 + 16 * v100);
      if (v101 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info)
        goto LABEL_73;
      v102 = 1;
      while (v101)
      {
        v100 = ((_DWORD)v100 + v102) & v96;
        v101 = *(char ***)(v95 + 16 * v100);
        ++v102;
        if (v101 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info)
        {
LABEL_73:
          v103 = *(_QWORD *)(v95 + 16 * v100 + 8);
          if (v103)
            goto LABEL_75;
          break;
        }
      }
LABEL_74:
      v104 = *(WebCore::JSSVGPathSegCurvetoCubicAbs **)(a1 + 56);
      v105 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoCubicAbs::createPrototype(v104, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v106 = JSC::Structure::create((uint64_t *)v104, a1, v105);
      v103 = WebCore::cacheDOMStructure((JSCell *)a1, v106, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info);
LABEL_75:
      v107 = *(WebCore::JSSVGPathSegCurvetoCubicAbs **)(a1 + 56);
      v108 = (_QWORD *)WebCore::JSSVGPathSegCurvetoCubicAbs::subspaceForImpl(v107, v4);
      SlowCase = v108[3];
      if (SlowCase < v108[4])
        goto LABEL_76;
      SlowCase = v108[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v306 = *(_QWORD *)(SlowCase + 8) ^ v108[6];
        v108[4] = SlowCase + HIDWORD(v306);
        v108[5] = SlowCase + (int)v306;
LABEL_76:
        v108[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v103);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v107 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 7u:
      v6 = *a2;
      *a2 = 0;
      v109 = *(_QWORD *)(a1 + 3296);
      if (!v109)
        goto LABEL_85;
      v110 = *(_DWORD *)(v109 - 8);
      v111 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info
                                                                                + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info << 32)) >> 22);
      v112 = 9 * ((v111 + ~(v111 << 13)) ^ ((v111 + ~(v111 << 13)) >> 8));
      v113 = (v112 ^ (v112 >> 15)) + ~((v112 ^ (v112 >> 15)) << 27);
      v114 = v110 & ((v113 >> 31) ^ v113);
      v115 = *(char ***)(v109 + 16 * v114);
      if (v115 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info)
        goto LABEL_84;
      v116 = 1;
      while (v115)
      {
        v114 = ((_DWORD)v114 + v116) & v110;
        v115 = *(char ***)(v109 + 16 * v114);
        ++v116;
        if (v115 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info)
        {
LABEL_84:
          v117 = *(_QWORD *)(v109 + 16 * v114 + 8);
          if (v117)
            goto LABEL_86;
          break;
        }
      }
LABEL_85:
      v118 = *(WebCore::JSSVGPathSegCurvetoCubicRel **)(a1 + 56);
      v119 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoCubicRel::createPrototype(v118, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v120 = JSC::Structure::create((uint64_t *)v118, a1, v119);
      v117 = WebCore::cacheDOMStructure((JSCell *)a1, v120, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info);
LABEL_86:
      v121 = *(WebCore::JSSVGPathSegCurvetoCubicRel **)(a1 + 56);
      v122 = (_QWORD *)WebCore::JSSVGPathSegCurvetoCubicRel::subspaceForImpl(v121, v4);
      SlowCase = v122[3];
      if (SlowCase < v122[4])
        goto LABEL_87;
      SlowCase = v122[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v307 = *(_QWORD *)(SlowCase + 8) ^ v122[6];
        v122[4] = SlowCase + HIDWORD(v307);
        v122[5] = SlowCase + (int)v307;
LABEL_87:
        v122[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v117);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v121 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 8u:
      v6 = *a2;
      *a2 = 0;
      v123 = *(_QWORD *)(a1 + 3296);
      if (!v123)
        goto LABEL_96;
      v124 = *(_DWORD *)(v123 - 8);
      v125 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info
                                                                                    + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info << 32)) >> 22);
      v126 = 9 * ((v125 + ~(v125 << 13)) ^ ((v125 + ~(v125 << 13)) >> 8));
      v127 = (v126 ^ (v126 >> 15)) + ~((v126 ^ (v126 >> 15)) << 27);
      v128 = v124 & ((v127 >> 31) ^ v127);
      v129 = *(char ***)(v123 + 16 * v128);
      if (v129 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info)
        goto LABEL_95;
      v130 = 1;
      while (v129)
      {
        v128 = ((_DWORD)v128 + v130) & v124;
        v129 = *(char ***)(v123 + 16 * v128);
        ++v130;
        if (v129 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info)
        {
LABEL_95:
          v131 = *(_QWORD *)(v123 + 16 * v128 + 8);
          if (v131)
            goto LABEL_97;
          break;
        }
      }
LABEL_96:
      v132 = *(WebCore::JSSVGPathSegCurvetoQuadraticAbs **)(a1 + 56);
      v133 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoQuadraticAbs::createPrototype(v132, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v134 = JSC::Structure::create((uint64_t *)v132, a1, v133);
      v131 = WebCore::cacheDOMStructure((JSCell *)a1, v134, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info);
LABEL_97:
      v135 = *(WebCore::JSSVGPathSegCurvetoQuadraticAbs **)(a1 + 56);
      v136 = (_QWORD *)WebCore::JSSVGPathSegCurvetoQuadraticAbs::subspaceForImpl(v135, v4);
      SlowCase = v136[3];
      if (SlowCase < v136[4])
        goto LABEL_98;
      SlowCase = v136[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v308 = *(_QWORD *)(SlowCase + 8) ^ v136[6];
        v136[4] = SlowCase + HIDWORD(v308);
        v136[5] = SlowCase + (int)v308;
LABEL_98:
        v136[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v131);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v135 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 9u:
      v6 = *a2;
      *a2 = 0;
      v137 = *(_QWORD *)(a1 + 3296);
      if (!v137)
        goto LABEL_107;
      v138 = *(_DWORD *)(v137 - 8);
      v139 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info
                                                                                    + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info << 32)) >> 22);
      v140 = 9 * ((v139 + ~(v139 << 13)) ^ ((v139 + ~(v139 << 13)) >> 8));
      v141 = (v140 ^ (v140 >> 15)) + ~((v140 ^ (v140 >> 15)) << 27);
      v142 = v138 & ((v141 >> 31) ^ v141);
      v143 = *(char ***)(v137 + 16 * v142);
      if (v143 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info)
        goto LABEL_106;
      v144 = 1;
      while (v143)
      {
        v142 = ((_DWORD)v142 + v144) & v138;
        v143 = *(char ***)(v137 + 16 * v142);
        ++v144;
        if (v143 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info)
        {
LABEL_106:
          v145 = *(_QWORD *)(v137 + 16 * v142 + 8);
          if (v145)
            goto LABEL_108;
          break;
        }
      }
LABEL_107:
      v146 = *(WebCore::JSSVGPathSegCurvetoQuadraticRel **)(a1 + 56);
      v147 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoQuadraticRel::createPrototype(v146, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v148 = JSC::Structure::create((uint64_t *)v146, a1, v147);
      v145 = WebCore::cacheDOMStructure((JSCell *)a1, v148, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info);
LABEL_108:
      v149 = *(WebCore::JSSVGPathSegCurvetoQuadraticRel **)(a1 + 56);
      v150 = (_QWORD *)WebCore::JSSVGPathSegCurvetoQuadraticRel::subspaceForImpl(v149, v4);
      SlowCase = v150[3];
      if (SlowCase < v150[4])
        goto LABEL_109;
      SlowCase = v150[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v309 = *(_QWORD *)(SlowCase + 8) ^ v150[6];
        v150[4] = SlowCase + HIDWORD(v309);
        v150[5] = SlowCase + (int)v309;
LABEL_109:
        v150[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v145);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v149 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0xAu:
      v6 = *a2;
      *a2 = 0;
      v151 = *(_QWORD *)(a1 + 3296);
      if (!v151)
        goto LABEL_118;
      v152 = *(_DWORD *)(v151 - 8);
      v153 = ((unint64_t)&WebCore::JSSVGPathSegArcAbs::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegArcAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegArcAbs::s_info
                                                                       + ~((_QWORD)&WebCore::JSSVGPathSegArcAbs::s_info << 32)) >> 22);
      v154 = 9 * ((v153 + ~(v153 << 13)) ^ ((v153 + ~(v153 << 13)) >> 8));
      v155 = (v154 ^ (v154 >> 15)) + ~((v154 ^ (v154 >> 15)) << 27);
      v156 = v152 & ((v155 >> 31) ^ v155);
      v157 = *(char ***)(v151 + 16 * v156);
      if (v157 == &WebCore::JSSVGPathSegArcAbs::s_info)
        goto LABEL_117;
      v158 = 1;
      while (v157)
      {
        v156 = ((_DWORD)v156 + v158) & v152;
        v157 = *(char ***)(v151 + 16 * v156);
        ++v158;
        if (v157 == &WebCore::JSSVGPathSegArcAbs::s_info)
        {
LABEL_117:
          v159 = *(_QWORD *)(v151 + 16 * v156 + 8);
          if (v159)
            goto LABEL_119;
          break;
        }
      }
LABEL_118:
      v160 = *(WebCore::JSSVGPathSegArcAbs **)(a1 + 56);
      v161 = (JSC::JSCell *)WebCore::JSSVGPathSegArcAbs::createPrototype(v160, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v162 = JSC::Structure::create((uint64_t *)v160, a1, v161);
      v159 = WebCore::cacheDOMStructure((JSCell *)a1, v162, (uint64_t)&WebCore::JSSVGPathSegArcAbs::s_info);
LABEL_119:
      v163 = *(WebCore::JSSVGPathSegArcAbs **)(a1 + 56);
      v164 = (_QWORD *)WebCore::JSSVGPathSegArcAbs::subspaceForImpl(v163, v4);
      SlowCase = v164[3];
      if (SlowCase < v164[4])
        goto LABEL_120;
      SlowCase = v164[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v310 = *(_QWORD *)(SlowCase + 8) ^ v164[6];
        v164[4] = SlowCase + HIDWORD(v310);
        v164[5] = SlowCase + (int)v310;
LABEL_120:
        v164[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v159);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v163 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0xBu:
      v6 = *a2;
      *a2 = 0;
      v165 = *(_QWORD *)(a1 + 3296);
      if (!v165)
        goto LABEL_129;
      v166 = *(_DWORD *)(v165 - 8);
      v167 = ((unint64_t)&WebCore::JSSVGPathSegArcRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegArcRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegArcRel::s_info
                                                                       + ~((_QWORD)&WebCore::JSSVGPathSegArcRel::s_info << 32)) >> 22);
      v168 = 9 * ((v167 + ~(v167 << 13)) ^ ((v167 + ~(v167 << 13)) >> 8));
      v169 = (v168 ^ (v168 >> 15)) + ~((v168 ^ (v168 >> 15)) << 27);
      v170 = v166 & ((v169 >> 31) ^ v169);
      v171 = *(char ***)(v165 + 16 * v170);
      if (v171 == &WebCore::JSSVGPathSegArcRel::s_info)
        goto LABEL_128;
      v172 = 1;
      while (v171)
      {
        v170 = ((_DWORD)v170 + v172) & v166;
        v171 = *(char ***)(v165 + 16 * v170);
        ++v172;
        if (v171 == &WebCore::JSSVGPathSegArcRel::s_info)
        {
LABEL_128:
          v173 = *(_QWORD *)(v165 + 16 * v170 + 8);
          if (v173)
            goto LABEL_130;
          break;
        }
      }
LABEL_129:
      v174 = *(WebCore::JSSVGPathSegArcRel **)(a1 + 56);
      v175 = (JSC::JSCell *)WebCore::JSSVGPathSegArcRel::createPrototype(v174, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v176 = JSC::Structure::create((uint64_t *)v174, a1, v175);
      v173 = WebCore::cacheDOMStructure((JSCell *)a1, v176, (uint64_t)&WebCore::JSSVGPathSegArcRel::s_info);
LABEL_130:
      v177 = *(WebCore::JSSVGPathSegArcRel **)(a1 + 56);
      v178 = (_QWORD *)WebCore::JSSVGPathSegArcRel::subspaceForImpl(v177, v4);
      SlowCase = v178[3];
      if (SlowCase < v178[4])
        goto LABEL_131;
      SlowCase = v178[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v311 = *(_QWORD *)(SlowCase + 8) ^ v178[6];
        v178[4] = SlowCase + HIDWORD(v311);
        v178[5] = SlowCase + (int)v311;
LABEL_131:
        v178[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v173);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v177 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0xCu:
      v6 = *a2;
      *a2 = 0;
      v179 = *(_QWORD *)(a1 + 3296);
      if (!v179)
        goto LABEL_140;
      v180 = *(_DWORD *)(v179 - 8);
      v181 = ((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info
                                                                                    + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info << 32)) >> 22);
      v182 = 9 * ((v181 + ~(v181 << 13)) ^ ((v181 + ~(v181 << 13)) >> 8));
      v183 = (v182 ^ (v182 >> 15)) + ~((v182 ^ (v182 >> 15)) << 27);
      v184 = v180 & ((v183 >> 31) ^ v183);
      v185 = *(char ***)(v179 + 16 * v184);
      if (v185 == &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info)
        goto LABEL_139;
      v186 = 1;
      while (v185)
      {
        v184 = ((_DWORD)v184 + v186) & v180;
        v185 = *(char ***)(v179 + 16 * v184);
        ++v186;
        if (v185 == &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info)
        {
LABEL_139:
          v187 = *(_QWORD *)(v179 + 16 * v184 + 8);
          if (v187)
            goto LABEL_141;
          break;
        }
      }
LABEL_140:
      v188 = *(WebCore::JSSVGPathSegLinetoHorizontalAbs **)(a1 + 56);
      v189 = (JSC::JSCell *)WebCore::JSSVGPathSegLinetoHorizontalAbs::createPrototype(v188, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v190 = JSC::Structure::create((uint64_t *)v188, a1, v189);
      v187 = WebCore::cacheDOMStructure((JSCell *)a1, v190, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info);
LABEL_141:
      v191 = *(WebCore::JSSVGPathSegLinetoHorizontalAbs **)(a1 + 56);
      v192 = (_QWORD *)WebCore::JSSVGPathSegLinetoHorizontalAbs::subspaceForImpl(v191, v4);
      SlowCase = v192[3];
      if (SlowCase < v192[4])
        goto LABEL_142;
      SlowCase = v192[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v312 = *(_QWORD *)(SlowCase + 8) ^ v192[6];
        v192[4] = SlowCase + HIDWORD(v312);
        v192[5] = SlowCase + (int)v312;
LABEL_142:
        v192[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v187);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v191 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0xDu:
      v6 = *a2;
      *a2 = 0;
      v193 = *(_QWORD *)(a1 + 3296);
      if (!v193)
        goto LABEL_151;
      v194 = *(_DWORD *)(v193 - 8);
      v195 = ((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info
                                                                                    + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info << 32)) >> 22);
      v196 = 9 * ((v195 + ~(v195 << 13)) ^ ((v195 + ~(v195 << 13)) >> 8));
      v197 = (v196 ^ (v196 >> 15)) + ~((v196 ^ (v196 >> 15)) << 27);
      v198 = v194 & ((v197 >> 31) ^ v197);
      v199 = *(char ***)(v193 + 16 * v198);
      if (v199 == &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info)
        goto LABEL_150;
      v200 = 1;
      while (v199)
      {
        v198 = ((_DWORD)v198 + v200) & v194;
        v199 = *(char ***)(v193 + 16 * v198);
        ++v200;
        if (v199 == &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info)
        {
LABEL_150:
          v201 = *(_QWORD *)(v193 + 16 * v198 + 8);
          if (v201)
            goto LABEL_152;
          break;
        }
      }
LABEL_151:
      v202 = *(WebCore::JSSVGPathSegLinetoHorizontalRel **)(a1 + 56);
      v203 = (JSC::JSCell *)WebCore::JSSVGPathSegLinetoHorizontalRel::createPrototype(v202, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v204 = JSC::Structure::create((uint64_t *)v202, a1, v203);
      v201 = WebCore::cacheDOMStructure((JSCell *)a1, v204, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info);
LABEL_152:
      v205 = *(WebCore::JSSVGPathSegLinetoHorizontalRel **)(a1 + 56);
      v206 = (_QWORD *)WebCore::JSSVGPathSegLinetoHorizontalRel::subspaceForImpl(v205, v4);
      SlowCase = v206[3];
      if (SlowCase < v206[4])
        goto LABEL_153;
      SlowCase = v206[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v313 = *(_QWORD *)(SlowCase + 8) ^ v206[6];
        v206[4] = SlowCase + HIDWORD(v313);
        v206[5] = SlowCase + (int)v313;
LABEL_153:
        v206[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v201);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v205 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0xEu:
      v6 = *a2;
      *a2 = 0;
      v207 = *(_QWORD *)(a1 + 3296);
      if (!v207)
        goto LABEL_162;
      v208 = *(_DWORD *)(v207 - 8);
      v209 = ((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info
                                                                                  + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info << 32)) >> 22);
      v210 = 9 * ((v209 + ~(v209 << 13)) ^ ((v209 + ~(v209 << 13)) >> 8));
      v211 = (v210 ^ (v210 >> 15)) + ~((v210 ^ (v210 >> 15)) << 27);
      v212 = v208 & ((v211 >> 31) ^ v211);
      v213 = *(char ***)(v207 + 16 * v212);
      if (v213 == &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info)
        goto LABEL_161;
      v214 = 1;
      while (v213)
      {
        v212 = ((_DWORD)v212 + v214) & v208;
        v213 = *(char ***)(v207 + 16 * v212);
        ++v214;
        if (v213 == &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info)
        {
LABEL_161:
          v215 = *(_QWORD *)(v207 + 16 * v212 + 8);
          if (v215)
            goto LABEL_163;
          break;
        }
      }
LABEL_162:
      v216 = *(WebCore::JSSVGPathSegLinetoVerticalAbs **)(a1 + 56);
      v217 = (JSC::JSCell *)WebCore::JSSVGPathSegLinetoVerticalAbs::createPrototype(v216, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v218 = JSC::Structure::create((uint64_t *)v216, a1, v217);
      v215 = WebCore::cacheDOMStructure((JSCell *)a1, v218, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info);
LABEL_163:
      v219 = *(WebCore::JSSVGPathSegLinetoVerticalAbs **)(a1 + 56);
      v220 = (_QWORD *)WebCore::JSSVGPathSegLinetoVerticalAbs::subspaceForImpl(v219, v4);
      SlowCase = v220[3];
      if (SlowCase < v220[4])
        goto LABEL_164;
      SlowCase = v220[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v314 = *(_QWORD *)(SlowCase + 8) ^ v220[6];
        v220[4] = SlowCase + HIDWORD(v314);
        v220[5] = SlowCase + (int)v314;
LABEL_164:
        v220[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v215);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v219 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0xFu:
      v6 = *a2;
      *a2 = 0;
      v221 = *(_QWORD *)(a1 + 3296);
      if (!v221)
        goto LABEL_173;
      v222 = *(_DWORD *)(v221 - 8);
      v223 = ((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info
                                                                                  + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info << 32)) >> 22);
      v224 = 9 * ((v223 + ~(v223 << 13)) ^ ((v223 + ~(v223 << 13)) >> 8));
      v225 = (v224 ^ (v224 >> 15)) + ~((v224 ^ (v224 >> 15)) << 27);
      v226 = v222 & ((v225 >> 31) ^ v225);
      v227 = *(char ***)(v221 + 16 * v226);
      if (v227 == &WebCore::JSSVGPathSegLinetoVerticalRel::s_info)
        goto LABEL_172;
      v228 = 1;
      while (v227)
      {
        v226 = ((_DWORD)v226 + v228) & v222;
        v227 = *(char ***)(v221 + 16 * v226);
        ++v228;
        if (v227 == &WebCore::JSSVGPathSegLinetoVerticalRel::s_info)
        {
LABEL_172:
          v229 = *(_QWORD *)(v221 + 16 * v226 + 8);
          if (v229)
            goto LABEL_174;
          break;
        }
      }
LABEL_173:
      v230 = *(WebCore::JSSVGPathSegLinetoVerticalRel **)(a1 + 56);
      v231 = (JSC::JSCell *)WebCore::JSSVGPathSegLinetoVerticalRel::createPrototype(v230, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v232 = JSC::Structure::create((uint64_t *)v230, a1, v231);
      v229 = WebCore::cacheDOMStructure((JSCell *)a1, v232, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info);
LABEL_174:
      v233 = *(WebCore::JSSVGPathSegLinetoVerticalRel **)(a1 + 56);
      v234 = (_QWORD *)WebCore::JSSVGPathSegLinetoVerticalRel::subspaceForImpl(v233, v4);
      SlowCase = v234[3];
      if (SlowCase < v234[4])
        goto LABEL_175;
      SlowCase = v234[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v315 = *(_QWORD *)(SlowCase + 8) ^ v234[6];
        v234[4] = SlowCase + HIDWORD(v315);
        v234[5] = SlowCase + (int)v315;
LABEL_175:
        v234[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v229);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v233 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0x10u:
      v6 = *a2;
      *a2 = 0;
      v235 = *(_QWORD *)(a1 + 3296);
      if (!v235)
        goto LABEL_184;
      v236 = *(_DWORD *)(v235 - 8);
      v237 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info
                                                                                      + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info << 32)) >> 22);
      v238 = 9 * ((v237 + ~(v237 << 13)) ^ ((v237 + ~(v237 << 13)) >> 8));
      v239 = (v238 ^ (v238 >> 15)) + ~((v238 ^ (v238 >> 15)) << 27);
      v240 = v236 & ((v239 >> 31) ^ v239);
      v241 = *(char ***)(v235 + 16 * v240);
      if (v241 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info)
        goto LABEL_183;
      v242 = 1;
      while (v241)
      {
        v240 = ((_DWORD)v240 + v242) & v236;
        v241 = *(char ***)(v235 + 16 * v240);
        ++v242;
        if (v241 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info)
        {
LABEL_183:
          v243 = *(_QWORD *)(v235 + 16 * v240 + 8);
          if (v243)
            goto LABEL_185;
          break;
        }
      }
LABEL_184:
      v244 = *(WebCore::JSSVGPathSegCurvetoCubicSmoothAbs **)(a1 + 56);
      v245 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::createPrototype(v244, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v246 = JSC::Structure::create((uint64_t *)v244, a1, v245);
      v243 = WebCore::cacheDOMStructure((JSCell *)a1, v246, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info);
LABEL_185:
      v247 = *(WebCore::JSSVGPathSegCurvetoCubicSmoothAbs **)(a1 + 56);
      v248 = (_QWORD *)WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::subspaceForImpl(v247, v4);
      SlowCase = v248[3];
      if (SlowCase < v248[4])
        goto LABEL_186;
      SlowCase = v248[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v316 = *(_QWORD *)(SlowCase + 8) ^ v248[6];
        v248[4] = SlowCase + HIDWORD(v316);
        v248[5] = SlowCase + (int)v316;
LABEL_186:
        v248[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v243);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v247 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0x11u:
      v6 = *a2;
      *a2 = 0;
      v249 = *(_QWORD *)(a1 + 3296);
      if (!v249)
        goto LABEL_195;
      v250 = *(_DWORD *)(v249 - 8);
      v251 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info
                                                                                      + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info << 32)) >> 22);
      v252 = 9 * ((v251 + ~(v251 << 13)) ^ ((v251 + ~(v251 << 13)) >> 8));
      v253 = (v252 ^ (v252 >> 15)) + ~((v252 ^ (v252 >> 15)) << 27);
      v254 = v250 & ((v253 >> 31) ^ v253);
      v255 = *(char ***)(v249 + 16 * v254);
      if (v255 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info)
        goto LABEL_194;
      v256 = 1;
      while (v255)
      {
        v254 = ((_DWORD)v254 + v256) & v250;
        v255 = *(char ***)(v249 + 16 * v254);
        ++v256;
        if (v255 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info)
        {
LABEL_194:
          v257 = *(_QWORD *)(v249 + 16 * v254 + 8);
          if (v257)
            goto LABEL_196;
          break;
        }
      }
LABEL_195:
      v258 = *(WebCore::JSSVGPathSegCurvetoCubicSmoothRel **)(a1 + 56);
      v259 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoCubicSmoothRel::createPrototype(v258, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v260 = JSC::Structure::create((uint64_t *)v258, a1, v259);
      v257 = WebCore::cacheDOMStructure((JSCell *)a1, v260, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info);
LABEL_196:
      v261 = *(WebCore::JSSVGPathSegCurvetoCubicSmoothRel **)(a1 + 56);
      v262 = (_QWORD *)WebCore::JSSVGPathSegCurvetoCubicSmoothRel::subspaceForImpl(v261, v4);
      SlowCase = v262[3];
      if (SlowCase < v262[4])
        goto LABEL_197;
      SlowCase = v262[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v317 = *(_QWORD *)(SlowCase + 8) ^ v262[6];
        v262[4] = SlowCase + HIDWORD(v317);
        v262[5] = SlowCase + (int)v317;
LABEL_197:
        v262[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v257);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v261 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0x12u:
      v6 = *a2;
      *a2 = 0;
      v263 = *(_QWORD *)(a1 + 3296);
      if (!v263)
        goto LABEL_206;
      v264 = *(_DWORD *)(v263 - 8);
      v265 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info
                                                                                          + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info << 32)) >> 22);
      v266 = 9 * ((v265 + ~(v265 << 13)) ^ ((v265 + ~(v265 << 13)) >> 8));
      v267 = (v266 ^ (v266 >> 15)) + ~((v266 ^ (v266 >> 15)) << 27);
      v268 = v264 & ((v267 >> 31) ^ v267);
      v269 = *(char ***)(v263 + 16 * v268);
      if (v269 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info)
        goto LABEL_205;
      v270 = 1;
      while (v269)
      {
        v268 = ((_DWORD)v268 + v270) & v264;
        v269 = *(char ***)(v263 + 16 * v268);
        ++v270;
        if (v269 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info)
        {
LABEL_205:
          v271 = *(_QWORD *)(v263 + 16 * v268 + 8);
          if (v271)
            goto LABEL_207;
          break;
        }
      }
LABEL_206:
      v272 = *(WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs **)(a1 + 56);
      v273 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::createPrototype(v272, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v274 = JSC::Structure::create((uint64_t *)v272, a1, v273);
      v271 = WebCore::cacheDOMStructure((JSCell *)a1, v274, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info);
LABEL_207:
      v275 = *(WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs **)(a1 + 56);
      v276 = (_QWORD *)WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::subspaceForImpl(v275, v4);
      SlowCase = v276[3];
      if (SlowCase < v276[4])
        goto LABEL_208;
      SlowCase = v276[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v318 = *(_QWORD *)(SlowCase + 8) ^ v276[6];
        v276[4] = SlowCase + HIDWORD(v318);
        v276[5] = SlowCase + (int)v318;
LABEL_208:
        v276[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v271);
      *(_QWORD *)(SlowCase + 24) = v6;
      if (*((_BYTE *)v275 + 755))
        goto LABEL_210;
      goto LABEL_211;
    case 0x13u:
      v283 = *a2;
      *a2 = 0;
      v284 = *(_QWORD *)(a1 + 3296);
      if (!v284)
        goto LABEL_230;
      v285 = *(_DWORD *)(v284 - 8);
      v286 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info
            + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info
                                                                                          + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info << 32)) >> 22);
      v287 = 9 * ((v286 + ~(v286 << 13)) ^ ((v286 + ~(v286 << 13)) >> 8));
      v288 = (v287 ^ (v287 >> 15)) + ~((v287 ^ (v287 >> 15)) << 27);
      v289 = v285 & ((v288 >> 31) ^ v288);
      v290 = *(char ***)(v284 + 16 * v289);
      if (v290 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info)
        goto LABEL_229;
      v291 = 1;
      while (v290)
      {
        v289 = ((_DWORD)v289 + v291) & v285;
        v290 = *(char ***)(v284 + 16 * v289);
        ++v291;
        if (v290 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info)
        {
LABEL_229:
          v292 = *(_QWORD *)(v284 + 16 * v289 + 8);
          if (v292)
            goto LABEL_231;
          break;
        }
      }
LABEL_230:
      v293 = *(WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel **)(a1 + 56);
      v294 = (JSC::JSCell *)WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::createPrototype(v293, (JSC::VM *)a1, v5);
      LODWORD(v321) = 23;
      v295 = JSC::Structure::create((uint64_t *)v293, a1, v294);
      v292 = WebCore::cacheDOMStructure((JSCell *)a1, v295, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info);
LABEL_231:
      v296 = *(WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel **)(a1 + 56);
      v297 = (_QWORD *)WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::subspaceForImpl(v296, v4);
      SlowCase = v297[3];
      if (SlowCase < v297[4])
        goto LABEL_232;
      SlowCase = v297[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v319 = *(_QWORD *)(SlowCase + 8) ^ v297[6];
        v297[4] = SlowCase + HIDWORD(v319);
        v297[5] = SlowCase + (int)v319;
LABEL_232:
        v297[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v292);
      *(_QWORD *)(SlowCase + 24) = v283;
      if (*((_BYTE *)v296 + 755))
        __dmb(0xAu);
      v277 = *(_QWORD *)(a1 + 3320);
      if ((byte_1EE337B50 & 1) == 0)
      {
        qword_1EE337B48 = (uint64_t)&off_1E32FCE50;
        byte_1EE337B50 = 1;
      }
      v278 = (uint64_t *)(v277 + 32);
      v321 = v283;
      if ((SlowCase & 8) != 0)
        v298 = (SlowCase - 112) | 1;
      else
        v298 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v298 & 1) != 0)
        v299 = v298 + 47;
      else
        v299 = *(_QWORD *)v298 + 32;
      Allocator = *(_QWORD **)(v299 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v299 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &qword_1EE337B48;
      goto LABEL_221;
    default:
      v6 = *a2;
      v22 = *(_QWORD *)(a1 + 3296);
      if (!v22)
        goto LABEL_19;
      v23 = *(_DWORD *)(v22 - 8);
      v24 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(char ***)(v22 + 16 * v27);
      if (v28 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_18;
      v29 = 1;
      break;
  }
  while (v28)
  {
    v27 = ((_DWORD)v27 + v29) & v23;
    v28 = *(char ***)(v22 + 16 * v27);
    ++v29;
    if (v28 == &WebCore::JSSVGPathSeg::s_info)
    {
LABEL_18:
      v30 = *(_QWORD *)(v22 + 16 * v27 + 8);
      if (v30)
        goto LABEL_20;
      break;
    }
  }
LABEL_19:
  v31 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSVGPathSegPrototype::createStructure(v31, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v34 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create((WebCore::JSSVGPathSegPrototype *)v31, (JSC::VM *)a1, Structure, v33);
  LODWORD(v321) = 23;
  v35 = JSC::Structure::create(v31, a1, v34);
  v30 = WebCore::cacheDOMStructure((JSCell *)a1, v35, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
LABEL_20:
  v36 = *(WebCore::JSSVGPathSeg **)(a1 + 56);
  v37 = (_QWORD *)WebCore::JSSVGPathSeg::subspaceForImpl(v36, v4);
  SlowCase = v37[3];
  if (SlowCase >= v37[4])
  {
    SlowCase = v37[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
    }
    else
    {
      v301 = *(_QWORD *)(SlowCase + 8) ^ v37[6];
      v37[4] = SlowCase + HIDWORD(v301);
      v37[5] = SlowCase + (int)v301;
      v37[3] = SlowCase + 32;
    }
  }
  else
  {
    v37[3] = SlowCase + 32;
  }
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v30);
  v38 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v38;
  if (*((_BYTE *)v36 + 755))
LABEL_210:
    __dmb(0xAu);
LABEL_211:
  v277 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE337B50 & 1) == 0)
  {
    qword_1EE337B48 = (uint64_t)&off_1E32FCE50;
    byte_1EE337B50 = 1;
  }
  v278 = (uint64_t *)(v277 + 32);
  v321 = v6;
  if ((SlowCase & 8) != 0)
    v279 = (SlowCase - 112) | 1;
  else
    v279 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v279 & 1) != 0)
    v280 = v279 + 47;
  else
    v280 = *(_QWORD *)v279 + 32;
  Allocator = *(_QWORD **)(v280 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v280 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337B48;
LABEL_221:
  Allocator[2] = v277;
  v320 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v278, &v321, (uint64_t *)&v320);
  if (v320)
    v320[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::CSSRule>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_DWORD **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_DWORD **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++a3[2];
  v14 = a3;
  v12 = WebCore::toJSNewlyCreated(a2, (uint64_t *)&v14);
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v14 + 8))();
    else
      --v14[2];
  }
  return v12;
}

uint64_t WebCore::JSCSSRuleListOwner::isReachableFromOpaqueRoots(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::CSSRule *v12;
  uint64_t v13;
  WTF::ConcurrentPtrHashSet *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::CSSRule *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  WTF::ConcurrentPtrHashSet *v28;
  _DWORD *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v5 = (uint64_t)*a2;
  if ((*(_BYTE *)((16 * **a2) | 0x12) & 0x20) == 0)
    return 0;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 48))(*(_QWORD *)(v5 + 24));
  if (!v9)
  {
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), 0);
    v26 = v23;
    if (v23)
    {
      if (a5)
      {
        *a5 = "CSSRule is opaque root";
        a5[1] = 23;
      }
      v27 = WebCore::root(v23, v24);
      v28 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
      v29 = (_DWORD *)*((_QWORD *)v28 + 6);
      if ((_DWORD *)((char *)v28 + 56) == v29)
      {
        v39 = v27;
        v40 = WTF::ConcurrentPtrHashSet::containsImplSlow(v28, (void *)v27);
        v27 = v39;
        if (v40)
        {
LABEL_41:
          if (*(_BYTE *)(a4 + 131))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v27);
          v25 = 1;
          return (v26 != 0) & v25;
        }
      }
      else
      {
        v30 = v29[1];
        v31 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
        v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
        v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
        v34 = v30 & ((v33 >> 31) ^ v33);
        v35 = v34;
        while (1)
        {
          v36 = *(_QWORD *)&v29[2 * v35 + 4];
          if (!v36)
            break;
          if (v36 == v27)
            goto LABEL_41;
          v35 = (v35 + 1) & v30;
          if (v35 == v34)
          {
            __break(0xC471u);
            JUMPOUT(0x1956968E8);
          }
        }
      }
      v25 = 0;
    }
    return (v26 != 0) & v25;
  }
  v10 = v9;
  if (a5)
  {
    *a5 = "CSSStyleSheet is opaque root";
    a5[1] = 29;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
  if (v11)
  {
    v10 = WebCore::root(v11, v12);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 22) & 8) == 0)
      {
        while (1)
        {
          v10 = v13;
          if ((*(_WORD *)(v13 + 28) & 0x80) != 0)
          {
            v38 = *(_QWORD *)(v13 + 200);
            if (!v38)
              goto LABEL_9;
            v37 = (uint64_t *)(v38 + 8);
          }
          else
          {
            v37 = (uint64_t *)(v13 + 32);
          }
          v13 = *v37;
          if (!*v37)
            goto LABEL_9;
        }
      }
      v10 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8);
    }
  }
LABEL_9:
  v14 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v15 = (_DWORD *)*((_QWORD *)v14 + 6);
  if ((_DWORD *)((char *)v14 + 56) != v15)
  {
    v16 = v15[1];
    v17 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = v20;
    while (1)
    {
      v22 = *(_QWORD *)&v15[2 * v21 + 4];
      if (!v22)
        return 0;
      if (v10 == v22)
        goto LABEL_35;
      v21 = (v21 + 1) & v16;
      if (v21 == v20)
      {
        __break(0xC471u);
        JUMPOUT(0x195696824);
      }
    }
  }
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v14, (void *)v10);
  if ((_DWORD)result)
  {
LABEL_35:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v10);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSCSSStyleDeclaration::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CSSRule *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (v4)
    goto LABEL_33;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v3);
  if (!v6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v8 = v3;
    if (result)
    {
      if ((*(_BYTE *)(result + 22) & 8) == 0)
      {
        while (1)
        {
          v8 = result;
          if ((*(_WORD *)(result + 28) & 0x80) != 0)
          {
            v10 = *(_QWORD *)(result + 200);
            if (!v10)
              goto LABEL_22;
            v9 = (uint64_t *)(v10 + 8);
          }
          else
          {
            v9 = (uint64_t *)(result + 32);
          }
          result = *v9;
          if (!*v9)
            goto LABEL_22;
        }
      }
LABEL_20:
      v8 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v8 = v6;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
  if (v4)
  {
LABEL_33:
    result = WebCore::root(v4, v5);
    v8 = result;
LABEL_21:
    if (!v8)
      return result;
    goto LABEL_22;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (result)
  {
    if ((*(_BYTE *)(result + 22) & 8) == 0)
    {
      while (1)
      {
        v8 = result;
        if ((*(_WORD *)(result + 28) & 0x80) != 0)
        {
          v12 = *(_QWORD *)(result + 200);
          if (!v12)
            goto LABEL_22;
          v11 = (uint64_t *)(v12 + 8);
        }
        else
        {
          v11 = (uint64_t *)(result + 32);
        }
        result = *v11;
        if (!*v11)
          goto LABEL_22;
      }
    }
    goto LABEL_20;
  }
LABEL_22:
  if (!*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v13 = *(_QWORD *)(result + 48);
    v14 = *(_DWORD *)(v13 + 4);
    v15 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = v18;
    while (1)
    {
      v20 = *(_QWORD *)(v13 + 8 * v19 + 16);
      if (!v20)
        break;
      if (v8 == v20)
        return result;
      v19 = (v19 + 1) & v14;
      if (v19 == v18)
      {
        __break(0xC471u);
        JUMPOUT(0x195696B64);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v8);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSCSSStyleDeclaration::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CSSRule *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (v4)
  {
    result = WebCore::root(v4, v5);
LABEL_26:
    v3 = result;
    goto LABEL_12;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v3);
  if (v6)
  {
    result = WebCore::root(v6);
    goto LABEL_26;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (result)
  {
    if ((*(_BYTE *)(result + 22) & 8) == 0)
    {
      while (1)
      {
        v3 = result;
        if ((*(_WORD *)(result + 28) & 0x80) != 0)
        {
          v9 = *(_QWORD *)(result + 200);
          if (!v9)
            goto LABEL_13;
          v8 = (uint64_t *)(v9 + 8);
        }
        else
        {
          v8 = (uint64_t *)(result + 32);
        }
        result = *v8;
        if (!*v8)
          goto LABEL_13;
      }
    }
    v3 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
LABEL_12:
    if (!v3)
      return result;
  }
LABEL_13:
  if (!*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v3 == v17)
        return result;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x195696CDCLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::root(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::CSSRule *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v1 = a1;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v2)
    return WebCore::root(v2, v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 8) == 0)
    {
      while (1)
      {
        v1 = v4;
        if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
        {
          v7 = *(_QWORD *)(v4 + 200);
          if (!v7)
            return v1;
          v6 = (uint64_t *)(v7 + 8);
        }
        else
        {
          v6 = (uint64_t *)(v4 + 32);
        }
        v4 = *v6;
        if (!*v6)
          return v1;
      }
    }
    return *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  }
  return v1;
}

unint64_t WebCore::wrap<WebCore::CSSStyleValue>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  JSC::VM *v8;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char **v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  int v38;
  unint64_t v39;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  unint64_t v58;
  JSC::JSCell *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char **v68;
  int v69;
  unint64_t v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char **v83;
  int v84;
  unint64_t v85;
  JSC::JSCell *v86;
  unint64_t v87;
  JSC::Structure *v88;
  JSC::JSCell *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char **v98;
  int v99;
  unint64_t v100;
  JSC::JSCell *v101;
  unint64_t v102;
  JSC::Structure *v103;
  JSC::JSCell *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char **v113;
  int v114;
  unint64_t v115;
  JSC::JSCell *v116;
  unint64_t v117;
  JSC::Structure *v118;
  JSC::JSCell *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char **v128;
  int v129;
  unint64_t v130;
  JSC::JSCell *v131;
  unint64_t v132;
  JSC::Structure *v133;
  JSC::JSCell *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char **v143;
  int v144;
  unint64_t v145;
  JSC::JSCell *v146;
  unint64_t v147;
  JSC::Structure *v148;
  JSC::JSCell *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char **v158;
  int v159;
  unint64_t v160;
  JSC::JSCell *v161;
  unint64_t v162;
  JSC::Structure *v163;
  JSC::JSCell *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char **v173;
  int v174;
  unint64_t v175;
  JSC::JSCell *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char **v185;
  int v186;
  unint64_t v187;
  JSC::JSCell *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char **v197;
  int v198;
  unint64_t v199;
  JSC::JSCell *v200;
  unint64_t v201;
  JSC::Structure *v202;
  JSC::JSCell *v203;
  uint64_t v204;
  _DWORD *v205;
  uint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *Allocator;
  unint64_t v218;
  _DWORD *v219;
  _QWORD *v220;
  _DWORD *v221;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v207 = *(_QWORD *)(v5 + 32);
    if (v207)
    {
      v208 = *(_DWORD *)(v207 - 8);
      v209 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v210 = 9 * ((v209 + ~(v209 << 13)) ^ ((v209 + ~(v209 << 13)) >> 8));
      v211 = (v210 ^ (v210 >> 15)) + ~((v210 ^ (v210 >> 15)) << 27);
      v212 = v208 & ((v211 >> 31) ^ v211);
      v213 = *(_QWORD *)(v207 + 16 * v212);
      if (v213 == a3)
      {
LABEL_145:
        v6 = *(_QWORD *)(v207 + 16 * v212 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v214 = 1;
        while (v213)
        {
          v212 = ((_DWORD)v212 + v214) & v208;
          v213 = *(_QWORD *)(v207 + 16 * v212);
          ++v214;
          if (v213 == a3)
            goto LABEL_145;
        }
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        SlowCase = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return SlowCase;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v219 = (_DWORD *)a3;
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    case 0u:
      v10 = *(uint64_t **)(a2 + 56);
      v11 = *(_QWORD *)(a2 + 3296);
      if (!v11)
        goto LABEL_18;
      v12 = *(_DWORD *)(v11 - 8);
      v13 = ((unint64_t)&WebCore::JSCSSStyleValue::s_info + ~((_QWORD)&WebCore::JSCSSStyleValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSStyleValue::s_info + ~((_QWORD)&WebCore::JSCSSStyleValue::s_info << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(char ***)(v11 + 16 * v16);
      if (v17 == &WebCore::JSCSSStyleValue::s_info)
        goto LABEL_17;
      v18 = 1;
      do
      {
        if (!v17)
          goto LABEL_18;
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(char ***)(v11 + 16 * v16);
        ++v18;
      }
      while (v17 != &WebCore::JSCSSStyleValue::s_info);
      goto LABEL_17;
    case 1u:
      v219 = 0;
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *(_QWORD *)(a2 + 3296);
      if (!v31)
        goto LABEL_26;
      v32 = *(_DWORD *)(v31 - 8);
      v33 = ((unint64_t)&WebCore::JSCSSStyleImageValue::s_info
           + ~((_QWORD)&WebCore::JSCSSStyleImageValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSStyleImageValue::s_info
                                                                        + ~((_QWORD)&WebCore::JSCSSStyleImageValue::s_info << 32)) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = *(char ***)(v31 + 16 * v36);
      if (v37 == &WebCore::JSCSSStyleImageValue::s_info)
        goto LABEL_25;
      v38 = 1;
      while (v37)
      {
        v36 = ((_DWORD)v36 + v38) & v32;
        v37 = *(char ***)(v31 + 16 * v36);
        ++v38;
        if (v37 == &WebCore::JSCSSStyleImageValue::s_info)
        {
LABEL_25:
          v39 = *(_QWORD *)(v31 + 16 * v36 + 8);
          if (v39)
            goto LABEL_27;
          break;
        }
      }
LABEL_26:
      Prototype = (JSC::JSCell *)WebCore::JSCSSStyleImageValue::createPrototype(*(WebCore::JSCSSStyleImageValue **)(a2 + 56), (JSC::VM *)a2, v9);
      Structure = WebCore::JSCSSStyleImageValue::createStructure((uint64_t *)v30, a2, Prototype);
      v39 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSCSSStyleImageValue::s_info);
      v30 = *(_QWORD *)(a2 + 56);
LABEL_27:
      v42 = (_QWORD *)WebCore::JSCSSStyleImageValue::subspaceForImpl((WebCore::JSCSSStyleImageValue *)v30, v8);
      SlowCase = v42[3];
      if (SlowCase >= v42[4])
      {
        SlowCase = v42[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v218 = *(_QWORD *)(SlowCase + 8) ^ v42[6];
          v42[4] = SlowCase + HIDWORD(v218);
          v42[5] = SlowCase + (int)v218;
          v42[3] = SlowCase + 32;
        }
      }
      else
      {
        v42[3] = SlowCase + 32;
      }
      *(_DWORD *)SlowCase = 0;
      v43 = *(_DWORD *)(v39 + 8);
      *(_DWORD *)SlowCase = v39 >> 4;
      *(_DWORD *)(SlowCase + 4) = v43;
      *(_QWORD *)(SlowCase + 8) = 0;
      *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v39 + 76);
      *(_QWORD *)(SlowCase + 24) = a3;
      if (*(_BYTE *)(v30 + 755))
        __dmb(0xAu);
      v44 = *(_QWORD *)(a2 + 3320);
      {
        WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSStyleValue *)::owner = (uint64_t)&off_1E324B170;
      }
      if (*(_DWORD *)(v44 + 48))
      {
        v221 = (_DWORD *)a3;
        if ((SlowCase & 8) != 0)
          v215 = (SlowCase - 112) | 1;
        else
          v215 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v215 & 1) != 0)
          v216 = v215 + 47;
        else
          v216 = *(_QWORD *)v215 + 32;
        Allocator = *(_QWORD **)(v216 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v216 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSStyleValue *)::owner;
        Allocator[2] = v44;
        v220 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)&v221, (uint64_t *)&v220);
        v48 = (uint64_t)v220;
        if (v220)
          goto LABEL_42;
      }
      else
      {
        if ((SlowCase & 8) != 0)
          v45 = (SlowCase - 112) | 1;
        else
          v45 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v45 & 1) != 0)
          v46 = v45 + 47;
        else
          v46 = *(_QWORD *)v45 + 32;
        v47 = *(_QWORD **)(v46 + 16);
        if (!v47)
          v47 = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v46 + 16) = *v47;
        *v47 = SlowCase;
        v47[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSStyleValue *)::owner;
        v47[2] = v44;
        v48 = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v47;
        if (v48)
LABEL_42:
          *(_QWORD *)(v48 + 8) = 3;
      }
LABEL_134:
      if (v219)
      {
        if (v219[2] == 1)
          (*(void (**)(void))(*(_QWORD *)v219 + 16))();
        else
          --v219[2];
      }
      break;
    case 2u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v49 = *(uint64_t **)(a2 + 56);
      v50 = *(_QWORD *)(a2 + 3296);
      if (!v50)
        goto LABEL_49;
      v51 = *(_DWORD *)(v50 - 8);
      v52 = ((unint64_t)&WebCore::JSCSSTransformValue::s_info
           + ~((_QWORD)&WebCore::JSCSSTransformValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSTransformValue::s_info
                                                                       + ~((_QWORD)&WebCore::JSCSSTransformValue::s_info << 32)) >> 22);
      v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
      v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
      v55 = v51 & ((v54 >> 31) ^ v54);
      v56 = *(char ***)(v50 + 16 * v55);
      if (v56 == &WebCore::JSCSSTransformValue::s_info)
        goto LABEL_48;
      v57 = 1;
      while (v56)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(char ***)(v50 + 16 * v55);
        ++v57;
        if (v56 == &WebCore::JSCSSTransformValue::s_info)
        {
LABEL_48:
          v58 = *(_QWORD *)(v50 + 16 * v55 + 8);
          if (v58)
            goto LABEL_50;
          break;
        }
      }
LABEL_49:
      v59 = (JSC::JSCell *)WebCore::JSCSSTransformValue::createPrototype(*(WebCore::JSCSSTransformValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v60 = WebCore::JSCSSTransformValue::createStructure(v49, a2, v59);
      v58 = WebCore::cacheDOMStructure((JSCell *)a2, v60, (uint64_t)&WebCore::JSCSSTransformValue::s_info);
LABEL_50:
      SlowCase = WebCore::JSCSSTransformValue::create(v58, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 3u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v61 = *(uint64_t **)(a2 + 56);
      v62 = *(_QWORD *)(a2 + 3296);
      if (!v62)
        goto LABEL_57;
      v63 = *(_DWORD *)(v62 - 8);
      v64 = ((unint64_t)&WebCore::JSCSSMathClamp::s_info + ~((_QWORD)&WebCore::JSCSSMathClamp::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathClamp::s_info + ~((_QWORD)&WebCore::JSCSSMathClamp::s_info << 32)) >> 22);
      v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
      v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
      v67 = v63 & ((v66 >> 31) ^ v66);
      v68 = *(char ***)(v62 + 16 * v67);
      if (v68 == &WebCore::JSCSSMathClamp::s_info)
        goto LABEL_56;
      v69 = 1;
      while (v68)
      {
        v67 = ((_DWORD)v67 + v69) & v63;
        v68 = *(char ***)(v62 + 16 * v67);
        ++v69;
        if (v68 == &WebCore::JSCSSMathClamp::s_info)
        {
LABEL_56:
          v70 = *(_QWORD *)(v62 + 16 * v67 + 8);
          if (v70)
            goto LABEL_58;
          break;
        }
      }
LABEL_57:
      v71 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v72 = WebCore::JSCSSMathClampPrototype::createStructure(v61, a2, v71);
      *(_DWORD *)(v72 + 16) |= 0x80000u;
      v74 = (JSC::JSCell *)WebCore::JSCSSMathClampPrototype::create((WebCore::JSCSSMathClampPrototype *)v61, (JSC::VM *)a2, v72, v73);
      v75 = WebCore::JSCSSMathClamp::createStructure(v61, a2, v74);
      v70 = WebCore::cacheDOMStructure((JSCell *)a2, v75, (uint64_t)&WebCore::JSCSSMathClamp::s_info);
LABEL_58:
      SlowCase = WebCore::JSCSSMathClamp::create(v70, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 4u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v76 = *(uint64_t **)(a2 + 56);
      v77 = *(_QWORD *)(a2 + 3296);
      if (!v77)
        goto LABEL_65;
      v78 = *(_DWORD *)(v77 - 8);
      v79 = ((unint64_t)&WebCore::JSCSSMathInvert::s_info + ~((_QWORD)&WebCore::JSCSSMathInvert::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathInvert::s_info + ~((_QWORD)&WebCore::JSCSSMathInvert::s_info << 32)) >> 22);
      v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
      v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
      v82 = v78 & ((v81 >> 31) ^ v81);
      v83 = *(char ***)(v77 + 16 * v82);
      if (v83 == &WebCore::JSCSSMathInvert::s_info)
        goto LABEL_64;
      v84 = 1;
      while (v83)
      {
        v82 = ((_DWORD)v82 + v84) & v78;
        v83 = *(char ***)(v77 + 16 * v82);
        ++v84;
        if (v83 == &WebCore::JSCSSMathInvert::s_info)
        {
LABEL_64:
          v85 = *(_QWORD *)(v77 + 16 * v82 + 8);
          if (v85)
            goto LABEL_66;
          break;
        }
      }
LABEL_65:
      v86 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v87 = WebCore::JSCSSMathInvertPrototype::createStructure(v76, a2, v86);
      *(_DWORD *)(v87 + 16) |= 0x80000u;
      v89 = (JSC::JSCell *)WebCore::JSCSSMathInvertPrototype::create((WebCore::JSCSSMathInvertPrototype *)v76, (JSC::VM *)a2, v87, v88);
      v90 = WebCore::JSCSSMathInvert::createStructure(v76, a2, v89);
      v85 = WebCore::cacheDOMStructure((JSCell *)a2, v90, (uint64_t)&WebCore::JSCSSMathInvert::s_info);
LABEL_66:
      SlowCase = WebCore::JSCSSMathInvert::create(v85, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 5u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v91 = *(uint64_t **)(a2 + 56);
      v92 = *(_QWORD *)(a2 + 3296);
      if (!v92)
        goto LABEL_73;
      v93 = *(_DWORD *)(v92 - 8);
      v94 = ((unint64_t)&WebCore::JSCSSMathMin::s_info + ~((_QWORD)&WebCore::JSCSSMathMin::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathMin::s_info + ~((_QWORD)&WebCore::JSCSSMathMin::s_info << 32)) >> 22);
      v95 = 9 * ((v94 + ~(v94 << 13)) ^ ((v94 + ~(v94 << 13)) >> 8));
      v96 = (v95 ^ (v95 >> 15)) + ~((v95 ^ (v95 >> 15)) << 27);
      v97 = v93 & ((v96 >> 31) ^ v96);
      v98 = *(char ***)(v92 + 16 * v97);
      if (v98 == &WebCore::JSCSSMathMin::s_info)
        goto LABEL_72;
      v99 = 1;
      while (v98)
      {
        v97 = ((_DWORD)v97 + v99) & v93;
        v98 = *(char ***)(v92 + 16 * v97);
        ++v99;
        if (v98 == &WebCore::JSCSSMathMin::s_info)
        {
LABEL_72:
          v100 = *(_QWORD *)(v92 + 16 * v97 + 8);
          if (v100)
            goto LABEL_74;
          break;
        }
      }
LABEL_73:
      v101 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v102 = WebCore::JSCSSMathMinPrototype::createStructure(v91, a2, v101);
      *(_DWORD *)(v102 + 16) |= 0x80000u;
      v104 = (JSC::JSCell *)WebCore::JSCSSMathMinPrototype::create((WebCore::JSCSSMathMinPrototype *)v91, (JSC::VM *)a2, v102, v103);
      v105 = WebCore::JSCSSMathMin::createStructure(v91, a2, v104);
      v100 = WebCore::cacheDOMStructure((JSCell *)a2, v105, (uint64_t)&WebCore::JSCSSMathMin::s_info);
LABEL_74:
      SlowCase = WebCore::JSCSSMathMin::create(v100, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 6u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v106 = *(uint64_t **)(a2 + 56);
      v107 = *(_QWORD *)(a2 + 3296);
      if (!v107)
        goto LABEL_81;
      v108 = *(_DWORD *)(v107 - 8);
      v109 = ((unint64_t)&WebCore::JSCSSMathMax::s_info + ~((_QWORD)&WebCore::JSCSSMathMax::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathMax::s_info + ~((_QWORD)&WebCore::JSCSSMathMax::s_info << 32)) >> 22);
      v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
      v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
      v112 = v108 & ((v111 >> 31) ^ v111);
      v113 = *(char ***)(v107 + 16 * v112);
      if (v113 == &WebCore::JSCSSMathMax::s_info)
        goto LABEL_80;
      v114 = 1;
      while (v113)
      {
        v112 = ((_DWORD)v112 + v114) & v108;
        v113 = *(char ***)(v107 + 16 * v112);
        ++v114;
        if (v113 == &WebCore::JSCSSMathMax::s_info)
        {
LABEL_80:
          v115 = *(_QWORD *)(v107 + 16 * v112 + 8);
          if (v115)
            goto LABEL_82;
          break;
        }
      }
LABEL_81:
      v116 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v117 = WebCore::JSCSSMathMaxPrototype::createStructure(v106, a2, v116);
      *(_DWORD *)(v117 + 16) |= 0x80000u;
      v119 = (JSC::JSCell *)WebCore::JSCSSMathMaxPrototype::create((WebCore::JSCSSMathMaxPrototype *)v106, (JSC::VM *)a2, v117, v118);
      v120 = WebCore::JSCSSMathMax::createStructure(v106, a2, v119);
      v115 = WebCore::cacheDOMStructure((JSCell *)a2, v120, (uint64_t)&WebCore::JSCSSMathMax::s_info);
LABEL_82:
      SlowCase = WebCore::JSCSSMathMax::create(v115, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 7u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v121 = *(uint64_t **)(a2 + 56);
      v122 = *(_QWORD *)(a2 + 3296);
      if (!v122)
        goto LABEL_89;
      v123 = *(_DWORD *)(v122 - 8);
      v124 = ((unint64_t)&WebCore::JSCSSMathNegate::s_info + ~((_QWORD)&WebCore::JSCSSMathNegate::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathNegate::s_info + ~((_QWORD)&WebCore::JSCSSMathNegate::s_info << 32)) >> 22);
      v125 = 9 * ((v124 + ~(v124 << 13)) ^ ((v124 + ~(v124 << 13)) >> 8));
      v126 = (v125 ^ (v125 >> 15)) + ~((v125 ^ (v125 >> 15)) << 27);
      v127 = v123 & ((v126 >> 31) ^ v126);
      v128 = *(char ***)(v122 + 16 * v127);
      if (v128 == &WebCore::JSCSSMathNegate::s_info)
        goto LABEL_88;
      v129 = 1;
      while (v128)
      {
        v127 = ((_DWORD)v127 + v129) & v123;
        v128 = *(char ***)(v122 + 16 * v127);
        ++v129;
        if (v128 == &WebCore::JSCSSMathNegate::s_info)
        {
LABEL_88:
          v130 = *(_QWORD *)(v122 + 16 * v127 + 8);
          if (v130)
            goto LABEL_90;
          break;
        }
      }
LABEL_89:
      v131 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v132 = WebCore::JSCSSMathNegatePrototype::createStructure(v121, a2, v131);
      *(_DWORD *)(v132 + 16) |= 0x80000u;
      v134 = (JSC::JSCell *)WebCore::JSCSSMathNegatePrototype::create((WebCore::JSCSSMathNegatePrototype *)v121, (JSC::VM *)a2, v132, v133);
      v135 = WebCore::JSCSSMathNegate::createStructure(v121, a2, v134);
      v130 = WebCore::cacheDOMStructure((JSCell *)a2, v135, (uint64_t)&WebCore::JSCSSMathNegate::s_info);
LABEL_90:
      SlowCase = WebCore::JSCSSMathNegate::create(v130, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 8u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v136 = *(uint64_t **)(a2 + 56);
      v137 = *(_QWORD *)(a2 + 3296);
      if (!v137)
        goto LABEL_97;
      v138 = *(_DWORD *)(v137 - 8);
      v139 = ((unint64_t)&WebCore::JSCSSMathProduct::s_info + ~((_QWORD)&WebCore::JSCSSMathProduct::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathProduct::s_info + ~((_QWORD)&WebCore::JSCSSMathProduct::s_info << 32)) >> 22);
      v140 = 9 * ((v139 + ~(v139 << 13)) ^ ((v139 + ~(v139 << 13)) >> 8));
      v141 = (v140 ^ (v140 >> 15)) + ~((v140 ^ (v140 >> 15)) << 27);
      v142 = v138 & ((v141 >> 31) ^ v141);
      v143 = *(char ***)(v137 + 16 * v142);
      if (v143 == &WebCore::JSCSSMathProduct::s_info)
        goto LABEL_96;
      v144 = 1;
      while (v143)
      {
        v142 = ((_DWORD)v142 + v144) & v138;
        v143 = *(char ***)(v137 + 16 * v142);
        ++v144;
        if (v143 == &WebCore::JSCSSMathProduct::s_info)
        {
LABEL_96:
          v145 = *(_QWORD *)(v137 + 16 * v142 + 8);
          if (v145)
            goto LABEL_98;
          break;
        }
      }
LABEL_97:
      v146 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v147 = WebCore::JSCSSMathProductPrototype::createStructure(v136, a2, v146);
      *(_DWORD *)(v147 + 16) |= 0x80000u;
      v149 = (JSC::JSCell *)WebCore::JSCSSMathProductPrototype::create((WebCore::JSCSSMathProductPrototype *)v136, (JSC::VM *)a2, v147, v148);
      v150 = WebCore::JSCSSMathProduct::createStructure(v136, a2, v149);
      v145 = WebCore::cacheDOMStructure((JSCell *)a2, v150, (uint64_t)&WebCore::JSCSSMathProduct::s_info);
LABEL_98:
      SlowCase = WebCore::JSCSSMathProduct::create(v145, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 9u:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v151 = *(uint64_t **)(a2 + 56);
      v152 = *(_QWORD *)(a2 + 3296);
      if (!v152)
        goto LABEL_105;
      v153 = *(_DWORD *)(v152 - 8);
      v154 = ((unint64_t)&WebCore::JSCSSMathSum::s_info + ~((_QWORD)&WebCore::JSCSSMathSum::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSMathSum::s_info + ~((_QWORD)&WebCore::JSCSSMathSum::s_info << 32)) >> 22);
      v155 = 9 * ((v154 + ~(v154 << 13)) ^ ((v154 + ~(v154 << 13)) >> 8));
      v156 = (v155 ^ (v155 >> 15)) + ~((v155 ^ (v155 >> 15)) << 27);
      v157 = v153 & ((v156 >> 31) ^ v156);
      v158 = *(char ***)(v152 + 16 * v157);
      if (v158 == &WebCore::JSCSSMathSum::s_info)
        goto LABEL_104;
      v159 = 1;
      while (v158)
      {
        v157 = ((_DWORD)v157 + v159) & v153;
        v158 = *(char ***)(v152 + 16 * v157);
        ++v159;
        if (v158 == &WebCore::JSCSSMathSum::s_info)
        {
LABEL_104:
          v160 = *(_QWORD *)(v152 + 16 * v157 + 8);
          if (v160)
            goto LABEL_106;
          break;
        }
      }
LABEL_105:
      v161 = (JSC::JSCell *)WebCore::JSCSSMathValue::prototype(*(WebCore::JSCSSMathValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v162 = WebCore::JSCSSMathSumPrototype::createStructure(v151, a2, v161);
      *(_DWORD *)(v162 + 16) |= 0x80000u;
      v164 = (JSC::JSCell *)WebCore::JSCSSMathSumPrototype::create((WebCore::JSCSSMathSumPrototype *)v151, (JSC::VM *)a2, v162, v163);
      v165 = WebCore::JSCSSMathSum::createStructure(v151, a2, v164);
      v160 = WebCore::cacheDOMStructure((JSCell *)a2, v165, (uint64_t)&WebCore::JSCSSMathSum::s_info);
LABEL_106:
      SlowCase = WebCore::JSCSSMathSum::create(v160, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 0xAu:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v166 = *(uint64_t **)(a2 + 56);
      v167 = *(_QWORD *)(a2 + 3296);
      if (!v167)
        goto LABEL_113;
      v168 = *(_DWORD *)(v167 - 8);
      v169 = ((unint64_t)&WebCore::JSCSSUnitValue::s_info + ~((_QWORD)&WebCore::JSCSSUnitValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSUnitValue::s_info + ~((_QWORD)&WebCore::JSCSSUnitValue::s_info << 32)) >> 22);
      v170 = 9 * ((v169 + ~(v169 << 13)) ^ ((v169 + ~(v169 << 13)) >> 8));
      v171 = (v170 ^ (v170 >> 15)) + ~((v170 ^ (v170 >> 15)) << 27);
      v172 = v168 & ((v171 >> 31) ^ v171);
      v173 = *(char ***)(v167 + 16 * v172);
      if (v173 == &WebCore::JSCSSUnitValue::s_info)
        goto LABEL_112;
      v174 = 1;
      while (v173)
      {
        v172 = ((_DWORD)v172 + v174) & v168;
        v173 = *(char ***)(v167 + 16 * v172);
        ++v174;
        if (v173 == &WebCore::JSCSSUnitValue::s_info)
        {
LABEL_112:
          v175 = *(_QWORD *)(v167 + 16 * v172 + 8);
          if (v175)
            goto LABEL_114;
          break;
        }
      }
LABEL_113:
      v176 = (JSC::JSCell *)WebCore::JSCSSUnitValue::createPrototype(*(WebCore::JSCSSUnitValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v177 = WebCore::JSCSSUnitValue::createStructure(v166, a2, v176);
      v175 = WebCore::cacheDOMStructure((JSCell *)a2, v177, (uint64_t)&WebCore::JSCSSUnitValue::s_info);
LABEL_114:
      SlowCase = WebCore::JSCSSUnitValue::create(v175, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 0xBu:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v178 = *(uint64_t **)(a2 + 56);
      v179 = *(_QWORD *)(a2 + 3296);
      if (!v179)
        goto LABEL_121;
      v180 = *(_DWORD *)(v179 - 8);
      v181 = ((unint64_t)&WebCore::JSCSSUnparsedValue::s_info
            + ~((_QWORD)&WebCore::JSCSSUnparsedValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSUnparsedValue::s_info
                                                                       + ~((_QWORD)&WebCore::JSCSSUnparsedValue::s_info << 32)) >> 22);
      v182 = 9 * ((v181 + ~(v181 << 13)) ^ ((v181 + ~(v181 << 13)) >> 8));
      v183 = (v182 ^ (v182 >> 15)) + ~((v182 ^ (v182 >> 15)) << 27);
      v184 = v180 & ((v183 >> 31) ^ v183);
      v185 = *(char ***)(v179 + 16 * v184);
      if (v185 == &WebCore::JSCSSUnparsedValue::s_info)
        goto LABEL_120;
      v186 = 1;
      while (v185)
      {
        v184 = ((_DWORD)v184 + v186) & v180;
        v185 = *(char ***)(v179 + 16 * v184);
        ++v186;
        if (v185 == &WebCore::JSCSSUnparsedValue::s_info)
        {
LABEL_120:
          v187 = *(_QWORD *)(v179 + 16 * v184 + 8);
          if (v187)
            goto LABEL_122;
          break;
        }
      }
LABEL_121:
      v188 = (JSC::JSCell *)WebCore::JSCSSUnparsedValue::createPrototype(*(WebCore::JSCSSUnparsedValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v189 = WebCore::JSCSSUnparsedValue::createStructure(v178, a2, v188);
      v187 = WebCore::cacheDOMStructure((JSCell *)a2, v189, (uint64_t)&WebCore::JSCSSUnparsedValue::s_info);
LABEL_122:
      SlowCase = WebCore::JSCSSUnparsedValue::create(v187, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_131;
    case 0xCu:
      v219 = 0;
      v221 = (_DWORD *)a3;
      v190 = *(uint64_t **)(a2 + 56);
      v191 = *(_QWORD *)(a2 + 3296);
      if (!v191)
        goto LABEL_129;
      v192 = *(_DWORD *)(v191 - 8);
      v193 = ((unint64_t)&WebCore::JSCSSKeywordValue::s_info
            + ~((_QWORD)&WebCore::JSCSSKeywordValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSKeywordValue::s_info
                                                                      + ~((_QWORD)&WebCore::JSCSSKeywordValue::s_info << 32)) >> 22);
      v194 = 9 * ((v193 + ~(v193 << 13)) ^ ((v193 + ~(v193 << 13)) >> 8));
      v195 = (v194 ^ (v194 >> 15)) + ~((v194 ^ (v194 >> 15)) << 27);
      v196 = v192 & ((v195 >> 31) ^ v195);
      v197 = *(char ***)(v191 + 16 * v196);
      if (v197 == &WebCore::JSCSSKeywordValue::s_info)
        goto LABEL_128;
      v198 = 1;
      while (v197)
      {
        v196 = ((_DWORD)v196 + v198) & v192;
        v197 = *(char ***)(v191 + 16 * v196);
        ++v198;
        if (v197 == &WebCore::JSCSSKeywordValue::s_info)
        {
LABEL_128:
          v199 = *(_QWORD *)(v191 + 16 * v196 + 8);
          if (v199)
            goto LABEL_130;
          break;
        }
      }
LABEL_129:
      v200 = (JSC::JSCell *)WebCore::JSCSSStyleValue::prototype(*(WebCore::JSCSSStyleValue **)(a2 + 56), (JSC::VM *)a2, v9);
      v201 = WebCore::JSCSSKeywordValuePrototype::createStructure(v190, a2, v200);
      *(_DWORD *)(v201 + 16) |= 0x80000u;
      v203 = (JSC::JSCell *)WebCore::JSCSSKeywordValuePrototype::create((WebCore::JSCSSKeywordValuePrototype *)v190, (JSC::VM *)a2, v201, v202);
      v204 = WebCore::JSCSSKeywordValue::createStructure(v190, a2, v203);
      v199 = WebCore::cacheDOMStructure((JSCell *)a2, v204, (uint64_t)&WebCore::JSCSSKeywordValue::s_info);
LABEL_130:
      SlowCase = WebCore::JSCSSKeywordValue::create(v199, (JSC::VM *)a2, (uint64_t *)&v221);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
LABEL_131:
      v205 = v221;
      v221 = 0;
      if (v205)
      {
        if (v205[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v205 + 16))(v205);
        else
          --v205[2];
      }
      goto LABEL_134;
    default:
      v10 = *(uint64_t **)(a2 + 56);
      v11 = *(_QWORD *)(a2 + 3296);
      if (!v11)
        goto LABEL_18;
      v19 = *(_DWORD *)(v11 - 8);
      v20 = ((unint64_t)&WebCore::JSCSSStyleValue::s_info + ~((_QWORD)&WebCore::JSCSSStyleValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSStyleValue::s_info + ~((_QWORD)&WebCore::JSCSSStyleValue::s_info << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v16 = v19 & ((v22 >> 31) ^ v22);
      v23 = *(char ***)(v11 + 16 * v16);
      if (v23 == &WebCore::JSCSSStyleValue::s_info)
        goto LABEL_17;
      v24 = 1;
      while (v23)
      {
        v16 = ((_DWORD)v16 + v24) & v19;
        v23 = *(char ***)(v11 + 16 * v16);
        ++v24;
        if (v23 == &WebCore::JSCSSStyleValue::s_info)
        {
LABEL_17:
          v25 = *(_QWORD *)(v11 + 16 * v16 + 8);
          if (v25)
            goto LABEL_19;
          break;
        }
      }
LABEL_18:
      v26 = WebCore::JSCSSStyleValuePrototype::createStructure(v10, a2, *(JSC::JSCell **)(a2 + 656));
      *(_DWORD *)(v26 + 16) |= 0x80000u;
      v28 = (JSC::JSCell *)WebCore::JSCSSStyleValuePrototype::create((WebCore::JSCSSStyleValuePrototype *)v10, (JSC::VM *)a2, v26, v27);
      v29 = WebCore::JSCSSStyleValue::createStructure(v10, a2, v28);
      v25 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSCSSStyleValue::s_info);
      v10 = *(uint64_t **)(a2 + 56);
LABEL_19:
      SlowCase = WebCore::JSCSSStyleValue::create(v25, (WebCore::JSCSSStyleValue *)v10, (uint64_t *)&v219);
      WebCore::cacheWrapper<WebCore::CSSKeywordValue,WebCore::JSCSSKeywordValue>(*(_QWORD *)(a2 + 3320), a3, SlowCase);
      goto LABEL_134;
  }
  return SlowCase;
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  JSC::VM *v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::JSCSSTransformComponentPrototype *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  int v18;
  unint64_t v19;
  unint64_t Structure;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t SlowCase;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *Allocator;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v41;
  _QWORD *v42;
  _DWORD *v43;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 40))(*a3))
  {
    case 0u:
      v7 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v7;
      v8 = WebCore::createWrapper<WebCore::CSSMatrixComponent,WebCore::CSSMatrixComponent>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 1u:
      v32 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v32;
      v8 = WebCore::createWrapper<WebCore::CSSPerspective,WebCore::CSSPerspective>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 2u:
      v33 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v33;
      v8 = WebCore::createWrapper<WebCore::CSSRotate,WebCore::CSSRotate>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 3u:
      v34 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v34;
      v8 = WebCore::createWrapper<WebCore::CSSScale,WebCore::CSSScale>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 4u:
      v35 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v35;
      v8 = WebCore::createWrapper<WebCore::CSSSkew,WebCore::CSSSkew>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 5u:
      v36 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v36;
      v8 = WebCore::createWrapper<WebCore::CSSSkewX,WebCore::CSSSkewX>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 6u:
      v37 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v37;
      v8 = WebCore::createWrapper<WebCore::CSSSkewY,WebCore::CSSSkewY>((JSC::VM *)a2, (uint64_t *)&v43, v6);
      goto LABEL_32;
    case 7u:
      v38 = *a3;
      *a3 = 0;
      v43 = (_DWORD *)v38;
      v8 = WebCore::createWrapper<WebCore::CSSTranslate,WebCore::CSSTranslate>((JSC::VM *)a2, (uint64_t *)&v43, v6);
LABEL_32:
      SlowCase = v8;
      v39 = v43;
      v43 = 0;
      if (v39)
      {
        if (v39[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 32))(v39);
        else
          --v39[2];
      }
      return SlowCase;
    default:
      v9 = *a3;
      v10 = *(WebCore::JSCSSTransformComponentPrototype **)(a2 + 56);
      v11 = *(_QWORD *)(a2 + 3296);
      if (!v11)
        goto LABEL_9;
      v12 = *(_DWORD *)(v11 - 8);
      v13 = ((unint64_t)&WebCore::JSCSSTransformComponent::s_info
           + ~((_QWORD)&WebCore::JSCSSTransformComponent::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSTransformComponent::s_info
                                                                           + ~((_QWORD)&WebCore::JSCSSTransformComponent::s_info << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(char ***)(v11 + 16 * v16);
      if (v17 == &WebCore::JSCSSTransformComponent::s_info)
        goto LABEL_8;
      v18 = 1;
      break;
  }
  while (v17)
  {
    v16 = ((_DWORD)v16 + v18) & v12;
    v17 = *(char ***)(v11 + 16 * v16);
    ++v18;
    if (v17 == &WebCore::JSCSSTransformComponent::s_info)
    {
LABEL_8:
      v19 = *(_QWORD *)(v11 + 16 * v16 + 8);
      if (v19)
        goto LABEL_10;
      break;
    }
  }
LABEL_9:
  Structure = WebCore::JSCSSTransformComponentPrototype::createStructure(*(uint64_t **)(a2 + 56), a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSCSSTransformComponentPrototype::create(v10, (JSC::VM *)a2, Structure, v21);
  v23 = WebCore::JSCSSTransformComponent::createStructure((uint64_t *)v10, a2, v22);
  v19 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSCSSTransformComponent::s_info);
  v10 = *(WebCore::JSCSSTransformComponentPrototype **)(a2 + 56);
LABEL_10:
  v24 = (_QWORD *)WebCore::JSCSSTransformComponent::subspaceForImpl(v10, v5);
  SlowCase = v24[3];
  if (SlowCase >= v24[4])
  {
    SlowCase = v24[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
    }
    else
    {
      v41 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
      v24[4] = SlowCase + HIDWORD(v41);
      v24[5] = SlowCase + (int)v41;
      v24[3] = SlowCase + 32;
    }
  }
  else
  {
    v24[3] = SlowCase + 32;
  }
  *(_DWORD *)SlowCase = 0;
  v26 = *(_DWORD *)(v19 + 8);
  *(_DWORD *)SlowCase = v19 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v19 + 76);
  v27 = *a3;
  *a3 = 0;
  *(_QWORD *)(SlowCase + 24) = v27;
  if (*((_BYTE *)v10 + 755))
    __dmb(0xAu);
  v28 = *(_QWORD *)(a2 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSTransformComponent *)::owner = (uint64_t)&off_1E324B1D0;
  }
  v43 = (_DWORD *)v9;
  if ((SlowCase & 8) != 0)
    v29 = (SlowCase - 112) | 1;
  else
    v29 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v29 & 1) != 0)
    v30 = v29 + 47;
  else
    v30 = *(_QWORD *)v29 + 32;
  Allocator = *(_QWORD **)(v30 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v30 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSTransformComponent *)::owner;
  Allocator[2] = v28;
  v42 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v28 + 32), (uint64_t *)&v43, (uint64_t *)&v42);
  if (v42)
    v42[1] = 3;
  return SlowCase;
}

{
  uint64_t v5;
  int v6;
  unint64_t v7;
  WebCore::JSDeprecatedCSSOMValueList *v8;
  JSC::VM *v9;
  _QWORD *v10;
  unint64_t SlowCase;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *Allocator;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t Structure;
  JSC::Structure *v34;
  JSC::JSCell *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  WebCore::JSDeprecatedCSSOMValue *v40;
  JSC::VM *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v5 = *a3;
  v6 = *(_BYTE *)(*a3 + 16) & 0xC;
  if (v6 == 4)
  {
    v18 = *(_QWORD *)(v5 + 32);
    v19 = *(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16);
    if ((v19 & 0x3F800) == 0)
    {
      v20 = *(unsigned __int16 *)(v18 + 8) - 1;
      if ((v19 & 0x7F) == 0x50 && v20 < 5)
        goto LABEL_34;
    }
    *a3 = 0;
    v22 = *(_QWORD *)(a2 + 56);
    v23 = *(_QWORD *)(a2 + 3296);
    if (v23)
    {
      v24 = *(_DWORD *)(v23 - 8);
      v25 = ((unint64_t)&WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info
           + ~((_QWORD)&WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info
                                                                                   + ~((_QWORD)&WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info << 32)) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = *(char ***)(v23 + 16 * v28);
      if (v29 == &WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info)
      {
LABEL_28:
        v31 = *(_QWORD *)(v23 + 16 * v28 + 8);
        if (v31)
          goto LABEL_30;
      }
      else
      {
        v30 = 1;
        while (v29)
        {
          v28 = ((_DWORD)v28 + v30) & v24;
          v29 = *(char ***)(v23 + 16 * v28);
          ++v30;
          if (v29 == &WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info)
            goto LABEL_28;
        }
      }
    }
    v32 = WebCore::getDOMStructure<WebCore::JSDeprecatedCSSOMValue>(*(WebCore::JSDeprecatedCSSOMValue **)(a2 + 56), (JSC::JSCell **)a2);
    Structure = WebCore::JSDeprecatedCSSOMPrimitiveValuePrototype::createStructure((uint64_t *)v22, a2, *(JSC::JSCell **)(v32 + 48));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v35 = (JSC::JSCell *)WebCore::JSDeprecatedCSSOMPrimitiveValuePrototype::create((WebCore::JSDeprecatedCSSOMPrimitiveValuePrototype *)v22, (JSC::VM *)a2, Structure, v34);
    v36 = WebCore::JSDeprecatedCSSOMPrimitiveValue::createStructure((uint64_t *)v22, a2, v35);
    v31 = WebCore::cacheDOMStructure((JSCell *)a2, v36, (uint64_t)&WebCore::JSDeprecatedCSSOMPrimitiveValue::s_info);
    v22 = *(_QWORD *)(a2 + 56);
LABEL_30:
    v37 = (_QWORD *)WebCore::JSDeprecatedCSSOMPrimitiveValue::subspaceForImpl((WebCore::JSDeprecatedCSSOMPrimitiveValue *)v22, (JSC::VM *)a2);
    SlowCase = v37[3];
    if (SlowCase >= v37[4])
    {
      SlowCase = v37[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
        *(_DWORD *)SlowCase = 0;
        v38 = *(_DWORD *)(v31 + 8);
        *(_DWORD *)SlowCase = v31 >> 4;
        *(_DWORD *)(SlowCase + 4) = v38;
        *(_QWORD *)(SlowCase + 8) = 0;
        *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v31 + 76);
        *(_QWORD *)(SlowCase + 24) = v5;
        if (*(_BYTE *)(v22 + 755))
          goto LABEL_37;
        goto LABEL_38;
      }
      v50 = *(_QWORD *)(SlowCase + 8) ^ v37[6];
      v37[4] = SlowCase + HIDWORD(v50);
      v37[5] = SlowCase + (int)v50;
    }
    v37[3] = SlowCase + 32;
    goto LABEL_32;
  }
  if (v6 == 8)
  {
    *a3 = 0;
    v7 = WebCore::getDOMStructure<WebCore::JSDeprecatedCSSOMValueList>(*(WebCore::JSDeprecatedCSSOMValueList **)(a2 + 56), (JSC::JSCell **)a2);
    v8 = *(WebCore::JSDeprecatedCSSOMValueList **)(a2 + 56);
    v10 = (_QWORD *)WebCore::JSDeprecatedCSSOMValueList::subspaceForImpl(v8, v9);
    SlowCase = v10[3];
    if (SlowCase >= v10[4])
    {
      SlowCase = v10[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_5;
      }
      v49 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
      v10[4] = SlowCase + HIDWORD(v49);
      v10[5] = SlowCase + (int)v49;
    }
    v10[3] = SlowCase + 32;
LABEL_5:
    *(_DWORD *)SlowCase = 0;
    v12 = *(_DWORD *)(v7 + 8);
    *(_DWORD *)SlowCase = v7 >> 4;
    *(_DWORD *)(SlowCase + 4) = v12;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v7 + 76);
    *(_QWORD *)(SlowCase + 24) = v5;
    if (*((_BYTE *)v8 + 755))
      __dmb(0xAu);
    v13 = *(_QWORD *)(a2 + 3320);
    if ((byte_1ECE82780 & 1) == 0)
    {
      qword_1ECE82778 = (uint64_t)&off_1E3392318;
      byte_1ECE82780 = 1;
    }
    v14 = (uint64_t *)(v13 + 32);
    v52 = v5;
    if ((SlowCase & 8) != 0)
      v15 = (SlowCase - 112) | 1;
    else
      v15 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v15 & 1) != 0)
      v16 = v15 + 47;
    else
      v16 = *(_QWORD *)v15 + 32;
    Allocator = *(_QWORD **)(v16 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v16 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1ECE82778;
    goto LABEL_48;
  }
LABEL_34:
  v39 = WebCore::getDOMStructure<WebCore::JSDeprecatedCSSOMValue>(*(WebCore::JSDeprecatedCSSOMValue **)(a2 + 56), (JSC::JSCell **)a2);
  v40 = *(WebCore::JSDeprecatedCSSOMValue **)(a2 + 56);
  v42 = (_QWORD *)WebCore::JSDeprecatedCSSOMValue::subspaceForImpl(v40, v41);
  SlowCase = v42[3];
  if (SlowCase < v42[4])
  {
LABEL_35:
    v42[3] = SlowCase + 32;
    goto LABEL_36;
  }
  SlowCase = v42[5];
  if ((SlowCase & 1) == 0)
  {
    v48 = *(_QWORD *)(SlowCase + 8) ^ v42[6];
    v42[4] = SlowCase + HIDWORD(v48);
    v42[5] = SlowCase + (int)v48;
    goto LABEL_35;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_36:
  *(_DWORD *)SlowCase = 0;
  v43 = *(_DWORD *)(v39 + 8);
  *(_DWORD *)SlowCase = v39 >> 4;
  *(_DWORD *)(SlowCase + 4) = v43;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v39 + 76);
  v44 = *a3;
  *a3 = 0;
  *(_QWORD *)(SlowCase + 24) = v44;
  if (*((_BYTE *)v40 + 755))
LABEL_37:
    __dmb(0xAu);
LABEL_38:
  v13 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE82780 & 1) == 0)
  {
    qword_1ECE82778 = (uint64_t)&off_1E3392318;
    byte_1ECE82780 = 1;
  }
  v14 = (uint64_t *)(v13 + 32);
  v52 = v5;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  Allocator = *(_QWORD **)(v46 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE82778;
LABEL_48:
  Allocator[2] = v13;
  v51 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v14, &v52, (uint64_t *)&v51);
  if (v51)
    v51[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::CSSTransformComponent>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_DWORD **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_DWORD **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++a3[2];
  v14 = a3;
  v12 = WebCore::toJSNewlyCreated(a1, a2, (uint64_t *)&v14);
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v14 + 32))();
    else
      --v14[2];
  }
  return v12;
}

uint64_t WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(result + 16);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t JSC::getCallData@<X0>(uint64_t result@<X0>, JSCell *a2@<X1>, _BYTE *a3@<X8>)
{
  if ((result & 0xFFFE000000000002) != 0)
  {
    *a3 = 0;
  }
  else if (*(_BYTE *)(result + 5) == 26)
  {
    return JSC::JSFunction::getCallData((JSC::JSFunction *)result, a2);
  }
  else
  {
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) + 0x38))();
  }
  return result;
}

uint64_t WTF::makeString<char,WTF::String,WTF::ASCIILiteral>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  uint64_t result;

  v7 = *a2;
  if (a4)
  {
    v8 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19569861CLL);
    }
  }
  else
  {
    v8 = 0;
  }
  if (v7)
  {
    v9 = *(_DWORD *)(v7 + 4);
    if (v9 < 0)
    {
LABEL_13:
      *a5 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = __OFADD__(v9, v8);
  v11 = v9 + v8;
  if (v10 || __OFADD__(v11, 1))
    goto LABEL_13;
  v12 = !v7 || (*(_BYTE *)(v7 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v11 + 1), v12, a1, v7, a3, v8, a5);
  if (!*a5)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1956985F0);
  }
  return result;
}

WTF::StringImpl *WebCore::JSExecState::instrumentFunction(WTF::StringImpl *result, WebCore::ScriptExecutionContext *a2)
{
  BOOL v3;
  WebCore::InspectorInstrumentation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[2];

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v3 = result == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = result;
    result = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents(result, a2);
    if (result && *((_QWORD *)result + 29))
    {
      v10[0] = 0;
      if (*(_BYTE *)a2 == 2)
      {
        WTF::String::operator=((uint64_t *)v10, (WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 64));
        v6 = *((_QWORD *)a2 + 1);
        v7 = (*(_DWORD *)(v6 + 56) + 1);
        v8 = (*(_DWORD *)(v6 + 60) + 1);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10[0] = v10[1];
        v8 = 1;
        v7 = 1;
      }
      WebCore::InspectorInstrumentation::willCallFunction(v5, (WebCore::ScriptExecutionContext *)v10, (const WTF::String *)v7, (WTF::JSONImpl::Value *)v8);
      result = v10[0];
      v10[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCanvasRenderingContext2D::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195698870);
  }
  if ((*(_BYTE *)(v3 - 90) & 8) == 0)
  {
    v5 = v3 - 112;
    while (1)
    {
      v6 = v5;
      if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
      {
        v8 = *(_QWORD *)(v5 + 200);
        if (!v8)
          goto LABEL_11;
        v7 = (uint64_t *)(v8 + 8);
      }
      else
      {
        v7 = (uint64_t *)(v5 + 32);
      }
      v5 = *v7;
      if (!v5)
        goto LABEL_11;
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 - 72) + 8);
LABEL_11:
  if (v6 && !*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v9 = *(_QWORD *)(result + 48);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v15 + 16);
      if (!v16)
        break;
      if (v6 == v16)
        return result;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x195698824);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSCanvasRenderingContext2DOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t result;
  void *v21;

  if (a5)
  {
    *a5 = "Canvas is opaque root";
    a5[1] = 22;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1956989D8);
  }
  if ((*(_BYTE *)(v6 - 90) & 8) == 0)
  {
    v7 = v6 - 112;
    while (1)
    {
      v8 = (void *)v7;
      if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
      {
        v10 = *(_QWORD *)(v7 + 200);
        if (!v10)
          goto LABEL_13;
        v9 = (uint64_t *)(v10 + 8);
      }
      else
      {
        v9 = (uint64_t *)(v7 + 32);
      }
      v7 = *v9;
      if (!v7)
        goto LABEL_13;
    }
  }
  v8 = *(void **)(*(_QWORD *)(v6 - 72) + 8);
LABEL_13:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if ((_DWORD)result)
    {
LABEL_23:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v8);
      return 1;
    }
  }
  else
  {
    v13 = v12[1];
    v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = v17;
    while (1)
    {
      v19 = *(void **)&v12[2 * v18 + 4];
      if (!v19)
        return 0;
      if (v8 == v19)
        goto LABEL_23;
      v18 = (v18 + 1) & v13;
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x195698994);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::visitJSFunctions<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v4 = (uint64_t *)a1[4];
  if (!v4 || (v4[1] & 3) != 0)
    v5 = 0;
  else
    v5 = *v4;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v5);
  v6 = (uint64_t *)a1[5];
  if (!v6 || (v6[1] & 3) != 0)
    v7 = 0;
  else
    v7 = *v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
  v8 = (uint64_t *)a1[6];
  if (!v8 || (v8[1] & 3) != 0)
    v9 = 0;
  else
    v9 = *v8;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
  v10 = (uint64_t *)a1[7];
  if (!v10 || (v10[1] & 3) != 0)
    v11 = 0;
  else
    v11 = *v10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v11);
  v12 = (uint64_t *)a1[8];
  if (!v12 || (v12[1] & 3) != 0)
    v13 = 0;
  else
    v13 = *v12;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v13);
  v14 = (uint64_t *)a1[9];
  if (!v14 || (v14[1] & 3) != 0)
    v15 = 0;
  else
    v15 = *v14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v15);
  v16 = (uint64_t *)a1[10];
  if (!v16 || (v16[1] & 3) != 0)
    v17 = 0;
  else
    v17 = *v16;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v17);
  v18 = (uint64_t *)a1[11];
  if (!v18 || (v18[1] & 3) != 0)
    v19 = 0;
  else
    v19 = *v18;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v19);
  v20 = (uint64_t *)a1[12];
  if (!v20 || (v20[1] & 3) != 0)
    v21 = 0;
  else
    v21 = *v20;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v21);
}

uint64_t WebCore::JSCustomElementInterface::visitJSFunctions<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v3 = (_QWORD *)result;
  v4 = *(unint64_t **)(result + 32);
  if (v4)
  {
    if ((v4[1] & 3) == 0)
    {
      v5 = *v4;
      if (*v4)
      {
        if ((v5 & 8) != 0)
        {
          if ((*(_BYTE *)(v5 - 79) & 1) == 0)
            goto LABEL_34;
        }
        else
        {
          v22 = v5 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v31 = *v4;
            v39 = v5 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
            v5 = v31;
            v22 = v39;
          }
          if (((*(_QWORD *)(v22 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
            goto LABEL_34;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_4;
LABEL_34:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_4:
  v6 = (unint64_t *)v3[5];
  if (v6)
  {
    if ((v6[1] & 3) == 0)
    {
      v7 = *v6;
      if (*v6)
      {
        if ((v7 & 8) != 0)
        {
          if ((*(_BYTE *)(v7 - 79) & 1) == 0)
            goto LABEL_40;
        }
        else
        {
          v23 = v7 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v32 = *v6;
            v40 = v7 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
            v7 = v32;
            v23 = v40;
          }
          if (((*(_QWORD *)(v23 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) == 0)
            goto LABEL_40;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_7;
LABEL_40:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_7:
  v8 = (unint64_t *)v3[6];
  if (v8)
  {
    if ((v8[1] & 3) == 0)
    {
      v9 = *v8;
      if (*v8)
      {
        if ((v9 & 8) != 0)
        {
          if ((*(_BYTE *)(v9 - 79) & 1) == 0)
            goto LABEL_46;
        }
        else
        {
          v24 = v9 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v33 = *v8;
            v41 = v9 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
            v9 = v33;
            v24 = v41;
          }
          if (((*(_QWORD *)(v24 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) == 0)
            goto LABEL_46;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_10;
LABEL_46:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_10:
  v10 = (unint64_t *)v3[7];
  if (v10)
  {
    if ((v10[1] & 3) == 0)
    {
      v11 = *v10;
      if (*v10)
      {
        if ((v11 & 8) != 0)
        {
          if ((*(_BYTE *)(v11 - 79) & 1) == 0)
            goto LABEL_52;
        }
        else
        {
          v25 = v11 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v34 = *v10;
            v42 = v11 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000));
            v11 = v34;
            v25 = v42;
          }
          if (((*(_QWORD *)(v25 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) == 0)
            goto LABEL_52;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_13;
LABEL_52:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_13:
  v12 = (unint64_t *)v3[8];
  if (v12)
  {
    if ((v12[1] & 3) == 0)
    {
      v13 = *v12;
      if (*v12)
      {
        if ((v13 & 8) != 0)
        {
          if ((*(_BYTE *)(v13 - 79) & 1) == 0)
            goto LABEL_58;
        }
        else
        {
          v26 = v13 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v35 = *v12;
            v43 = v13 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000));
            v13 = v35;
            v26 = v43;
          }
          if (((*(_QWORD *)(v26 + 8 * ((v13 >> 10) & 0xF) + 40) >> (v13 >> 4)) & 1) == 0)
            goto LABEL_58;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_16;
LABEL_58:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_16:
  v14 = (unint64_t *)v3[9];
  if (v14)
  {
    if ((v14[1] & 3) == 0)
    {
      v15 = *v14;
      if (*v14)
      {
        if ((v15 & 8) != 0)
        {
          if ((*(_BYTE *)(v15 - 79) & 1) == 0)
            goto LABEL_64;
        }
        else
        {
          v27 = v15 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v36 = *v14;
            v44 = v15 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
            v15 = v36;
            v27 = v44;
          }
          if (((*(_QWORD *)(v27 + 8 * ((v15 >> 10) & 0xF) + 40) >> (v15 >> 4)) & 1) == 0)
            goto LABEL_64;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_19;
LABEL_64:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_19:
  v16 = (unint64_t *)v3[10];
  if (v16)
  {
    if ((v16[1] & 3) == 0)
    {
      v17 = *v16;
      if (*v16)
      {
        if ((v17 & 8) != 0)
        {
          if ((*(_BYTE *)(v17 - 79) & 1) == 0)
            goto LABEL_70;
        }
        else
        {
          v28 = v17 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v37 = *v16;
            v45 = v17 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000));
            v17 = v37;
            v28 = v45;
          }
          if (((*(_QWORD *)(v28 + 8 * ((v17 >> 10) & 0xF) + 40) >> (v17 >> 4)) & 1) == 0)
            goto LABEL_70;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_22;
LABEL_70:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_22:
  v18 = (unint64_t *)v3[11];
  if (v18)
  {
    if ((v18[1] & 3) == 0)
    {
      v19 = *v18;
      if (*v18)
      {
        if ((v19 & 8) != 0)
        {
          if ((*(_BYTE *)(v19 - 79) & 1) == 0)
            goto LABEL_76;
        }
        else
        {
          v29 = v19 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v38 = *v18;
            v46 = v19 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000));
            v19 = v38;
            v29 = v46;
          }
          if (((*(_QWORD *)(v29 + 8 * ((v19 >> 10) & 0xF) + 40) >> (v19 >> 4)) & 1) == 0)
            goto LABEL_76;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_25;
LABEL_76:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_25:
  v20 = (unint64_t *)v3[12];
  if (v20)
  {
    if ((v20[1] & 3) == 0)
    {
      v21 = *v20;
      if (*v20)
      {
        if ((v21 & 8) != 0)
        {
          if ((*(_BYTE *)(v21 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v30 = v21 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000));
            v30 = v21 & 0xFFFFFFFFFFFFC000;
          }
          if (((*(_QWORD *)(v30 + 8 * ((v21 >> 10) & 0xF) + 40) >> (v21 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

void WebCore::JSCustomElementInterface::~JSCustomElementInterface(WebCore::JSCustomElementInterface *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  WebCore::DOMWrapperWorld *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)this = &off_1E33921D8;
  v3 = (WTF *)*((_QWORD *)this + 17);
  if (v3)
  {
    v18 = *((unsigned int *)this + 36);
    if ((_DWORD)v18)
    {
      v19 = (WTF::StringImpl **)*((_QWORD *)this + 17);
      do
      {
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 31);
  if ((_DWORD)v4)
  {
    v25 = (uint64_t *)*((_QWORD *)this + 14);
    v26 = 8 * v4;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v27, a2);
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
        }
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  v5 = (WTF *)*((_QWORD *)this + 14);
  if ((WebCore::JSCustomElementInterface *)((char *)this + 128) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v5, a2);
  }
  v7 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v7, a2);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *((_QWORD *)this + 12);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 3;
    *((_QWORD *)this + 12) = 0;
  }
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 11) = 0;
  }
  v10 = *((_QWORD *)this + 10);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 3;
    *((_QWORD *)this + 10) = 0;
  }
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 3;
    *((_QWORD *)this + 9) = 0;
  }
  v12 = *((_QWORD *)this + 8);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 3;
    *((_QWORD *)this + 8) = 0;
  }
  v13 = *((_QWORD *)this + 7);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 3;
    *((_QWORD *)this + 7) = 0;
  }
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 3;
    *((_QWORD *)this + 6) = 0;
  }
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 3;
    *((_QWORD *)this + 5) = 0;
  }
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  v17 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSCustomElementInterface::~JSCustomElementInterface(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSCustomElementInterface::constructElementWithFallback@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, WebCore::QualifiedName::QualifiedNameImpl **a5@<X8>)
{
  uint64_t result;
  WebCore::Element *v9;
  WTF::StringImpl **v10;
  WTF *v11;
  void *v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;

  result = WebCore::JSCustomElementInterface::tryToConstructCustomElement(a1, a2, a3, a4, &v13);
  if (v13)
  {
    *a5 = v13;
  }
  else
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v13, MEMORY[0x1E0CBF2F8], a3, (WTF::StringImpl **)&WebCore::HTMLNames::xhtmlNamespaceURI);
    v9 = (WebCore::Element *)bmalloc::api::isoAllocate();
    *(_QWORD *)WebCore::Element::Element((uint64_t)v9, (_DWORD **)&v13, a2, 272) = off_1E321E008;
    v10 = (WTF::StringImpl **)v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
        WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    WebCore::Element::setIsCustomElementUpgradeCandidate(v9);
    result = (uint64_t)WebCore::Element::setIsFailedCustomElement(v9);
    *a5 = v9;
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::tryToConstructCustomElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  JSCell *v14;
  JSC::JSGlobalObject *v15;
  uint64_t v16;
  JSC::JSFunction *v17;
  WebCore::ScriptExecutionContext *v18;
  uint64_t v19;
  WTF::String *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  JSC::JSGlobalObject *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE v41[8];
  uint64_t *v42;
  int v43;
  char v44;
  uint64_t v45;
  WTF *v46;
  _OWORD v47[4];
  uint64_t v48;
  _QWORD v49[3];
  JSC::VM *v50;

  result = WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, (void *)a2);
  if ((result & 1) == 0)
  {
    *a5 = 0;
    return result;
  }
  ++*(_DWORD *)(a1 + 16);
  v11 = *(JSC::VM **)(*(_QWORD *)(a1 + 104) + 16);
  MEMORY[0x19AEA3294](v41, v11);
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    goto LABEL_54;
  if (!*(_QWORD *)v12)
    goto LABEL_54;
  if ((*(_BYTE *)(v12 + 8) & 3) != 0)
    goto LABEL_54;
  v13 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a2 + 192));
  if (!v13)
    goto LABEL_54;
  v15 = (JSC::JSGlobalObject *)v13;
  v16 = *(_QWORD *)(a1 + 32);
  if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
    v17 = 0;
  else
    v17 = *(JSC::JSFunction **)v16;
  v50 = v11;
  if (((unint64_t)v17 & 0xFFFE000000000002) == 0)
  {
    if (*((_BYTE *)v17 + 5) == 26)
      JSC::JSFunction::getConstructData(v17, v14);
    else
      (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v17 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0x40))(v49, v17);
    if (LOBYTE(v49[0]))
    {
      WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(a2 + 192), (WebCore::ScriptExecutionContext *)v49);
      v44 = 0;
      v45 = 0x800000000;
      v46 = (WTF *)((char *)v47 + 8);
      memset(v47, 0, sizeof(v47));
      v48 = 0;
      v42 = (uint64_t *)v47 + 1;
      v43 = 0;
      v21 = JSC::construct();
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v39 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(a2 + 192), v18);
        if (v39)
          WebCore::InspectorInstrumentation::didCallFunctionImpl(v39, (_BYTE *)(a2 + 192));
      }
      if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
        goto LABEL_64;
      if (a4)
      {
        v35 = WebCore::Document::eventLoop((WebCore::Document *)a2, v18);
        WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v35);
      }
      if ((v21 & 0xFFFE000000000002) != 0)
        goto LABEL_55;
      v24 = *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C);
      v25 = *(_DWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v24)
      {
        v26 = 16 * v24;
        if ((char **)v26 != &WebCore::JSHTMLElement::s_info)
        {
          do
          {
            v26 = *(_QWORD *)(v26 + 16);
            v25 = v26 != 0;
          }
          while ((char **)v26 != &WebCore::JSHTMLElement::s_info && v26 != 0);
        }
      }
      if (!v25 || (v28 = *(_QWORD *)(v21 + 24)) == 0)
      {
LABEL_55:
        JSC::throwTypeError();
LABEL_64:
        v28 = 0;
LABEL_41:
        v33 = *(uint64_t **)&v47[0];
        if (*(_QWORD *)&v47[0])
        {
          v42 = &v45;
          v40 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v47[0], (uint64_t *)&v42);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v33, v40);
        }
        if (v46 != (WTF *)((char *)v47 + 8) && v46)
          WTF::fastFree(v46, v18);
        if (v28)
          goto LABEL_45;
        goto LABEL_53;
      }
      v29 = *(_QWORD *)(v28 + 104);
      if (!v29)
        goto LABEL_72;
      if ((*(_BYTE *)(v29 + 4) & 8) != 0)
        WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(*(WebCore::StyledElement **)(v21 + 24), (unsigned __int8 *)v18, v22, v19, v20);
      if ((*(_WORD *)(v28 + 28) & 0x20) != 0)
        WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v28);
      v30 = *(_QWORD *)(v28 + 104);
      if (!v30
        || ((v31 = *(_DWORD *)(v30 + 4), (v31 & 1) != 0) ? (v32 = *(_DWORD *)(v30 + 52)) : (v32 = v31 >> 5), !v32))
      {
LABEL_72:
        if (*(_QWORD *)(v28 + 80))
        {
          v36 = "A newly constructed custom element must not have child nodes";
          v37 = v15;
          v38 = 61;
        }
        else
        {
          if (*(_QWORD *)(v28 + 32))
          {
            v36 = "A newly constructed custom element must not have a parent node";
          }
          else
          {
            if (*(_QWORD *)(*(_QWORD *)(v28 + 40) + 8) == a2)
            {
              if (*(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) == *a3)
              {
                *(_DWORD *)(v28 + 24) += 2;
                goto LABEL_41;
              }
              v36 = "A newly constructed custom element has incorrect local name";
              goto LABEL_62;
            }
            v36 = "A newly constructed custom element belongs to a wrong document";
          }
          v37 = v15;
          v38 = 63;
        }
LABEL_63:
        WebCore::throwNotSupportedError(v37, &v50, (uint64_t)v36, v38);
        goto LABEL_64;
      }
      v36 = "A newly constructed custom element must not have attributes";
LABEL_62:
      v37 = v15;
      v38 = 60;
      goto LABEL_63;
    }
  }
LABEL_53:
  v34 = *((_QWORD *)v11 + 2);
  JSC::VM::clearException(v11);
  WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(a1 + 32) & 0xFFFFFFFE) + 0x28), v34, 0, 0, 0);
LABEL_54:
  v28 = 0;
LABEL_45:
  *a5 = v28;
  result = MEMORY[0x19AEA32A0](v41);
  if (*(_DWORD *)(a1 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  --*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t *WebCore::JSCustomElementInterface::constructElementWithFallback@<X0>(WebCore::JSCustomElementInterface *this@<X0>, WebCore::Document *a2@<X1>, const WebCore::QualifiedName *a3@<X2>, WebCore::Element **a4@<X8>)
{
  uint64_t *result;
  const WTF::String *v8;
  int32x4_t v9;
  WebCore::Element *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  _DWORD *v19;
  WebCore::Document *v20;
  uint64_t v23;
  uint64_t v24;
  WebCore::Element *v25;

  result = (uint64_t *)WebCore::JSCustomElementInterface::tryToConstructCustomElement((uint64_t)this, (uint64_t)a2, (_QWORD *)(*(_QWORD *)a3 + 24), 0, &v25);
  v10 = v25;
  if (v25)
  {
    v11 = *(_QWORD *)a3;
    v14 = *(_QWORD *)(v11 + 16);
    v13 = (WebCore::Document *)(v11 + 16);
    v12 = v14;
    if (!v14)
      goto LABEL_16;
    if (*(_DWORD *)(v12 + 4))
    {
      result = (uint64_t *)WebCore::Document::isValidName(v13, v8, v9);
      if (!(_DWORD)result)
        goto LABEL_16;
    }
    result = (uint64_t *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v10 + 152))(v10);
    v15 = *result;
    if (*result && *(_DWORD *)(v15 + 4))
    {
      v16 = *(_QWORD *)v13;
    }
    else
    {
      v16 = *(_QWORD *)v13;
      if (!*(_QWORD *)v13)
      {
        if (!WebCore::xmlAtomData && v15 != WebCore::XMLNames::xmlNamespaceURI)
          goto LABEL_16;
        v17 = (WTF::StringImpl ***)((char *)v10 + 96);
        goto LABEL_10;
      }
      if (*(_DWORD *)(v16 + 4))
        goto LABEL_16;
    }
    if (v16 == WebCore::xmlAtomData && v15 != WebCore::XMLNames::xmlNamespaceURI)
      goto LABEL_16;
    v17 = (WTF::StringImpl ***)((char *)v10 + 96);
    if (v16 && *(_DWORD *)(v16 + 4))
    {
LABEL_11:
      result = (uint64_t *)WebCore::QualifiedName::setPrefix(v17, (WTF::StringImpl **)v13);
      goto LABEL_16;
    }
LABEL_10:
    v13 = (WebCore::Document *)MEMORY[0x1E0CBF2F8];
    goto LABEL_11;
  }
  v18 = bmalloc::api::isoAllocate();
  v10 = (WebCore::Element *)v18;
  *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v18 + 24) = 0x111C00000002;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  v19 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    ++*v19;
  *(_QWORD *)(v18 + 96) = v19;
  *(_QWORD *)(v18 + 104) = 0;
  *(_QWORD *)v18 = off_1E321E008;
  WebCore::Node::setCustomElementState(v18, (void *)1);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v23 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)v10 + 5) + 8), v20);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 40);
      if (v24)
        WebCore::InspectorDOMAgent::didChangeCustomElementState(v24, v10);
    }
  }
  result = (uint64_t *)WebCore::Element::setIsFailedCustomElement(v10);
LABEL_16:
  *a4 = v10;
  return result;
}

_QWORD *WebCore::JSCustomElementInterface::createElement@<X0>(WebCore::JSCustomElementInterface *this@<X0>, WebCore::Document *a2@<X1>, WebCore::HTMLMaybeFormAssociatedCustomElement **a3@<X8>)
{
  _QWORD *result;
  _DWORD *v7;
  WebCore::HTMLMaybeFormAssociatedCustomElement *v8;
  WebCore::HTMLMaybeFormAssociatedCustomElement *v9;

  if ((*((_BYTE *)this + 160) & 4) != 0)
  {
    WebCore::HTMLMaybeFormAssociatedCustomElement::create((_DWORD **)this + 3, (uint64_t)a2, (uint64_t *)&v9);
    WebCore::HTMLMaybeFormAssociatedCustomElement::setInterfaceIsFormAssociated(v9);
    v8 = v9;
    v9 = 0;
    *a3 = v8;
    return WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v9);
  }
  else
  {
    result = (_QWORD *)bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 1) = xmmword_1968BC9D0;
    result[3] = 0x101C00000002;
    result[4] = 0;
    result[5] = (char *)a2 + 96;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    ++*((_DWORD *)a2 + 831);
    result[10] = 0;
    result[11] = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 3);
    if (v7)
      ++*v7;
    result[12] = v7;
    result[13] = 0;
    *result = off_1E33BC680;
    *a3 = (WebCore::HTMLMaybeFormAssociatedCustomElement *)result;
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::upgradeElement(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSCell *v12;
  JSC *v13;
  uint64_t v14;
  JSC::JSFunction *v15;
  WebCore::Element *v16;
  uint64_t v17;
  WTF::String *v18;
  __n128 v19;
  WebCore::Document *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WebCore::Element *v32;
  BOOL v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t DOMException;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  void *v44;
  _QWORD *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _BYTE v48[40];
  uint64_t v49;
  JSC::JSGlobalObject *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF *v53;
  _OWORD v54[4];
  uint64_t v55;
  _QWORD v56[3];
  _BYTE v57[16];

  v2 = *((_QWORD *)a2 + 9) & 0x3000000000000000;
  if (v2 == 0x1000000000000000 || v2 == 0)
  {
    v5 = this;
    this = WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2);
    if ((_DWORD)this)
    {
      ++*(_DWORD *)(v5 + 16);
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 104) + 16);
      MEMORY[0x19AEA3294](v57, v6);
      v7 = *(_QWORD *)(v5 + 32);
      if (v7)
      {
        if (*(_QWORD *)v7)
        {
          if ((*(_BYTE *)(v7 + 8) & 3) == 0)
          {
            v8 = *(_QWORD *)(v5 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 8);
              if (v9)
              {
                if (*(_BYTE *)(v9 + 178))
                {
                  __break(0xC471u);
                }
                else
                {
                  v10 = *(_QWORD *)(v9 + 240);
                  if (!v10)
                    goto LABEL_45;
                  v11 = *(_QWORD *)(v10 + 8);
                  if (!v11)
                    goto LABEL_45;
                  v13 = (JSC *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v11 + 304) + 16)+ 112), *(WebCore::DOMWrapperWorld **)(v5 + 104))+ 2);
                  if (!v13)
                    goto LABEL_45;
                  v14 = *(_QWORD *)(v5 + 32);
                  if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
                    v15 = 0;
                  else
                    v15 = *(JSC::JSFunction **)v14;
                  if (((unint64_t)v15 & 0xFFFE000000000002) != 0)
                    goto LABEL_45;
                  if (*((_BYTE *)v15 + 5) == 26)
                    JSC::JSFunction::getConstructData(v15, v12);
                  else
                    (*(void (**)(_QWORD *__return_ptr))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x40))(v56);
                  if (!LOBYTE(v56[0]))
                    goto LABEL_45;
                  WebCore::CustomElementReactionQueue::enqueuePostUpgradeReactions((uint64_t)a2, v16, v17, v18, v19);
                  WebCore::Node::setCustomElementState((uint64_t)a2, (void *)3);
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    v38 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)a2 + 5) + 8), v20);
                    if (v38)
                    {
                      v39 = *(_QWORD *)(v38 + 40);
                      if (v39)
                        WebCore::InspectorDOMAgent::didChangeCustomElementState(v39, a2);
                    }
                  }
                  v22 = (_QWORD *)(v5 + 112);
                  v51 = a2;
                  v23 = *(unsigned int *)(v5 + 124);
                  if ((_DWORD)v23 == *(_DWORD *)(v5 + 120))
                  {
                    WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element*>(v5 + 112, (uint64_t *)&v51);
                  }
                  else
                  {
                    v24 = *(_QWORD *)(v5 + 112);
                    *((_DWORD *)a2 + 6) += 2;
                    *(_QWORD *)(v24 + 8 * v23) = a2;
                    *(_DWORD *)(v5 + 124) = v23 + 1;
                  }
                  if ((*(_BYTE *)(v5 + 160) & 2) != 0
                    && (*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0
                    && *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
                  {
                    WebCore::Element::clearReactionQueueFromFailedCustomElement((unsigned int *)a2, v20);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    DOMException = WebCore::createDOMException(v13, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&v51);
                    WebCore::reportException(v13, DOMException, 0, 0);
                    v43 = v51;
                    v51 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, v42);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    goto LABEL_45;
                  }
                  if ((*(_BYTE *)(v5 + 160) & 4) != 0)
                  {
                    if (((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 856))(a2) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19569A0D8);
                    }
                    WebCore::HTMLMaybeFormAssociatedCustomElement::willUpgradeFormAssociated(a2);
                  }
                  v25 = (WTF::StringImpl *)(v9 - 96);
                  LOBYTE(v51) = 0;
                  v52 = 0x800000000;
                  v53 = (WTF *)((char *)v54 + 8);
                  memset(v54, 0, sizeof(v54));
                  v55 = 0;
                  WebCore::JSExecState::instrumentFunction(v25, (WebCore::ScriptExecutionContext *)v56);
                  v46 = v53;
                  LODWORD(v47) = v52;
                  v27 = JSC::construct();
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26);
                    if (v40)
                      WebCore::InspectorInstrumentation::didCallFunctionImpl(v40, v25);
                  }
                  v29 = *(unsigned int *)(v5 + 124);
                  if ((_DWORD)v29)
                  {
                    v30 = v29 - 1;
                    v31 = *(_QWORD *)(*v22 + 8 * (v29 - 1));
                    *(_QWORD *)(*v22 + 8 * (v29 - 1)) = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)(v31 + 24) == 2)
                      {
                        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v31, v26);
                      }
                      else
                      {
                        *(_DWORD *)(v31 + 24) -= 2;
                      }
                    }
                    *(_DWORD *)(v5 + 124) = v30;
                    if (*(_QWORD *)(v6 + 16))
                    {
                      WebCore::Element::clearReactionQueueFromFailedCustomElement((unsigned int *)a2, v26);
                      WebCore::reportException(v13, *(_QWORD *)(v6 + 16), 0, 0, 0);
                    }
                    else if ((v27 & 0xFFFE000000000002) == 0
                           && *(unsigned __int8 *)(v27 + 5) == 241
                           && ((v32 = *(WebCore::Element **)(v27 + 24)) != 0 ? (v33 = v32 == a2) : (v33 = 0), v33))
                    {
                      WebCore::Element::setIsDefinedCustomElement(a2, (WebCore::JSCustomElementInterface *)v5);
                      if ((*(_BYTE *)(v5 + 160) & 4) != 0)
                      {
                        v46 = (WTF::StringImpl *)v48;
                        v47 = 4;
                        v48[32] = 0;
                        v49 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
                        v50 = v13;
                        WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v46;
                        if (((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 856))(a2) & 1) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19569A0F8);
                        }
                        WebCore::HTMLMaybeFormAssociatedCustomElement::didUpgradeFormAssociated(a2);
                        if (HIDWORD(v47))
                          WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v46, v50);
                        WebCore::CustomElementReactionStack::s_currentProcessingStack = v49;
                        WebCore::CustomElementQueue::~CustomElementQueue((uint64_t **)&v46, v44);
                      }
                    }
                    else
                    {
                      WebCore::Element::clearReactionQueueFromFailedCustomElement((unsigned int *)a2, v26);
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v36 = WebCore::createDOMException(v13, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v46);
                      WebCore::reportException(v13, v36, 0, 0);
                      v37 = v46;
                      v46 = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, v34);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                    }
                    v35 = *(uint64_t **)&v54[0];
                    if (*(_QWORD *)&v54[0])
                    {
                      v46 = (WTF::StringImpl *)&v52;
                      v45 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v54[0], (uint64_t *)&v46);
                      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v35, v45);
                    }
                    if (v53 != (WTF *)((char *)v54 + 8) && v53)
                      WTF::fastFree(v53, v34);
                    goto LABEL_45;
                  }
                  __break(0xC471u);
                }
                JUMPOUT(0x195699EE4);
              }
            }
          }
        }
      }
LABEL_45:
      this = MEMORY[0x19AEA32A0](v57);
      if (*(_DWORD *)(v5 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      else
        --*(_DWORD *)(v5 + 16);
    }
  }
  return this;
}

void WebCore::reportException(JSC::JSGlobalObject *a1, uint64_t a2, WebCore::CachedScript *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a1 + 7);
  v5 = *(_QWORD *)(v4 + 112);
  if (!*(_BYTE *)(v5 + 6))
    goto LABEL_10;
  v10 = *(_QWORD *)(v5 + 8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  if (v10 == v11)
  {
    if ((a2 & 0xFFFE000000000002) != 0
      || (v12 = a2, MEMORY[0x1E0CBEE50] != 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
    {
      v12 = *(_QWORD *)(v4 + 32);
      if (!v12)
        v12 = JSC::Exception::create();
    }
    WebCore::reportException(a1, v12, a3, a4, 0);
  }
  else
  {
LABEL_10:
    __break(0xC471u);
  }
}

uint64_t WebCore::JSCustomElementInterface::invokeConnectedCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2)
{
  uint64_t v4;
  JSC::JSFunction *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject **v11;
  WebCore::Element *v12;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  JSCell *v15;
  WebCore::JSDOMGlobalObject **v16;
  unint64_t StatusReg;
  uint64_t v18;
  WebCore *v19;
  uint64_t v20;
  JSC::JSGlobalObject *v21;
  WebCore::ScriptExecutionContext *v22;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WTF *v29;
  _OWORD v30[4];
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  WebCore::JSDOMGlobalObject *v34[2];

  v4 = *((_QWORD *)this + 5);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::JSFunction **)v4;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v33, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v8 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569A484);
        }
        v9 = *(_QWORD *)(v8 + 240);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v10 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
            v13 = v11[2];
            if (v13)
            {
              v14 = (WTF::StringImpl *)(v8 - 96);
              WebCore::toJS((WebCore *)v11, v11[2], a2, v12);
              if (*((_BYTE *)v5 + 5) == 26)
                JSC::JSFunction::getCallData(v5, v15);
              else
                (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(v32, v5);
              v28 = 0x800000000;
              v29 = (WTF *)((char *)v30 + 8);
              memset(v30, 0, sizeof(v30));
              v31 = 0;
              v16 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction(v14, (WebCore::ScriptExecutionContext *)v32);
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v18 = *(_QWORD *)(StatusReg + 736);
              if (!v18 || (v16 = *(WebCore::JSDOMGlobalObject ***)(v18 + 96)) == 0)
                v16 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v16);
              v34[0] = v16[8];
              v19 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
              v20 = *(_QWORD *)(StatusReg + 736);
              if (!v20 || (v19 = *(WebCore **)(v20 + 96)) == 0)
                v19 = (WebCore *)WebCore::threadGlobalDataSlow(v19);
              *((_QWORD *)v19 + 8) = v13;
              JSC::call();
              WebCore::JSExecState::~JSExecState(v34, v21);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v14, v22);
                if (v26)
                  WebCore::InspectorInstrumentation::didCallFunctionImpl(v26, v14);
              }
              v24 = 0;
              v25 = *(uint64_t **)&v30[0];
              if (*(_QWORD *)&v30[0])
              {
                v34[0] = (WebCore::JSDOMGlobalObject *)&v28;
                v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v30[0], (uint64_t *)v34);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v25, v27);
              }
              if (v29 != (WTF *)((char *)v30 + 8) && v29)
                WTF::fastFree(v29, v24);
            }
          }
        }
        result = MEMORY[0x19AEA32A0](v33);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeDisconnectedCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2)
{
  uint64_t v4;
  JSC::JSFunction *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject **v11;
  WebCore::Element *v12;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  JSCell *v15;
  WebCore::JSDOMGlobalObject **v16;
  unint64_t StatusReg;
  uint64_t v18;
  WebCore *v19;
  uint64_t v20;
  JSC::JSGlobalObject *v21;
  WebCore::ScriptExecutionContext *v22;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WTF *v29;
  _OWORD v30[4];
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  WebCore::JSDOMGlobalObject *v34[2];

  v4 = *((_QWORD *)this + 6);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::JSFunction **)v4;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v33, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v8 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569A758);
        }
        v9 = *(_QWORD *)(v8 + 240);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v10 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
            v13 = v11[2];
            if (v13)
            {
              v14 = (WTF::StringImpl *)(v8 - 96);
              WebCore::toJS((WebCore *)v11, v11[2], a2, v12);
              if (*((_BYTE *)v5 + 5) == 26)
                JSC::JSFunction::getCallData(v5, v15);
              else
                (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(v32, v5);
              v28 = 0x800000000;
              v29 = (WTF *)((char *)v30 + 8);
              memset(v30, 0, sizeof(v30));
              v31 = 0;
              v16 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction(v14, (WebCore::ScriptExecutionContext *)v32);
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v18 = *(_QWORD *)(StatusReg + 736);
              if (!v18 || (v16 = *(WebCore::JSDOMGlobalObject ***)(v18 + 96)) == 0)
                v16 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v16);
              v34[0] = v16[8];
              v19 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
              v20 = *(_QWORD *)(StatusReg + 736);
              if (!v20 || (v19 = *(WebCore **)(v20 + 96)) == 0)
                v19 = (WebCore *)WebCore::threadGlobalDataSlow(v19);
              *((_QWORD *)v19 + 8) = v13;
              JSC::call();
              WebCore::JSExecState::~JSExecState(v34, v21);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v14, v22);
                if (v26)
                  WebCore::InspectorInstrumentation::didCallFunctionImpl(v26, v14);
              }
              v24 = 0;
              v25 = *(uint64_t **)&v30[0];
              if (*(_QWORD *)&v30[0])
              {
                v34[0] = (WebCore::JSDOMGlobalObject *)&v28;
                v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v30[0], (uint64_t *)v34);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v25, v27);
              }
              if (v29 != (WTF *)((char *)v30 + 8) && v29)
                WTF::fastFree(v29, v24);
            }
          }
        }
        result = MEMORY[0x19AEA32A0](v33);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSCustomElementInterface::setAdoptedCallback(WebCore::JSCustomElementInterface *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  if ((a2 & 8) != 0)
    v4 = (a2 - 112) | 1;
  else
    v4 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v4 & 1) != 0)
    v5 = v4 + 47;
  else
    v5 = *(_QWORD *)v4 + 32;
  result = *(_QWORD **)(v5 + 16);
  if (!result)
    result = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v5 + 16) = *result;
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = result;
  if (v7)
    *(_QWORD *)(v7 + 8) = 3;
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeAdoptedCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2, WebCore::Document *a3, WebCore::Document *a4)
{
  uint64_t v8;
  JSC::JSFunction *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSGlobalObject **v15;
  WebCore::Element *v16;
  WebCore::DOMWrapperWorld **v17;
  JSCell *v18;
  WebCore::Document *v19;
  uint64_t v20;
  WebCore::Document *v21;
  objc_class *v22;
  int v23;
  uint64_t v24;
  objc_class *v25;
  int v26;
  WebCore::Node **v27;
  unint64_t StatusReg;
  uint64_t v29;
  WebCore *v30;
  uint64_t v31;
  JSC::JSGlobalObject *v32;
  WebCore::ScriptExecutionContext *v33;
  void *v35;
  uint64_t *v36;
  void *v37;
  WebCore::Node *v38;
  void *v39;
  WebCore::Node *v40;
  JSValue v41;
  JSValue v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  WTF *v50;
  _OWORD v51[4];
  uint64_t v52;
  _QWORD v53[3];
  _BYTE v54[8];
  WebCore::Node *v55[3];

  v8 = *((_QWORD *)this + 7);
  if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    v9 = 0;
  else
    v9 = *(JSC::JSFunction **)v8;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v11 = *((_QWORD *)this + 1);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v54, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v12 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569AC48);
        }
        v13 = *(_QWORD *)(v12 + 240);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v15 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v14 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
            v17 = (WebCore::DOMWrapperWorld **)v15[2];
            if (v17)
            {
              WebCore::toJS((WebCore *)v15, v15[2], a2, v16);
              if (*((_BYTE *)v9 + 5) == 26)
                JSC::JSFunction::getCallData(v9, v18);
              else
                (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(v53, v9);
              v48 = 0;
              v49 = 0x800000000;
              v50 = (WTF *)((char *)v51 + 8);
              memset(v51, 0, sizeof(v51));
              v52 = 0;
              v20 = WebCore::cachedDocumentWrapper(v17, (JSC::JSGlobalObject *)v17, a3, v19);
              if (v20)
              {
                v22 = (objc_class *)v20;
              }
              else
              {
                *((_DWORD *)a3 + 6) += 2;
                v55[0] = a3;
                v22 = (objc_class *)WebCore::toJSNewlyCreated((uint64_t)v17, (JSC::VM *)v17, v55);
                v38 = v55[0];
                v55[0] = 0;
                if (v38)
                {
                  if (*((_DWORD *)v38 + 6) == 2)
                  {
                    if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v38, v37);
                  }
                  else
                  {
                    *((_DWORD *)v38 + 6) -= 2;
                  }
                }
              }
              v23 = v49;
              if ((_DWORD)v49 == HIDWORD(v49) || v50 != (WTF *)((char *)v51 + 8) && v50)
              {
                v41.super.isa = v22;
                if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v49, v41) == 1)
                  v48 = 1;
              }
              else
              {
                *((_QWORD *)v50 + v49) = v22;
                LODWORD(v49) = v23 + 1;
              }
              v24 = WebCore::cachedDocumentWrapper(v17, (JSC::JSGlobalObject *)v17, a4, v21);
              if (v24)
              {
                v25 = (objc_class *)v24;
              }
              else
              {
                *((_DWORD *)a4 + 6) += 2;
                v55[0] = a4;
                v25 = (objc_class *)WebCore::toJSNewlyCreated((uint64_t)v17, (JSC::VM *)v17, v55);
                v40 = v55[0];
                v55[0] = 0;
                if (v40)
                {
                  if (*((_DWORD *)v40 + 6) == 2)
                  {
                    if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v40, v39);
                  }
                  else
                  {
                    *((_DWORD *)v40 + 6) -= 2;
                  }
                }
              }
              v26 = v49;
              if ((_DWORD)v49 == HIDWORD(v49) || v50 != (WTF *)((char *)v51 + 8) && v50)
              {
                v42.super.isa = v25;
                if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v49, v42) == 1)
                  goto LABEL_51;
              }
              else
              {
                *((_QWORD *)v50 + v49) = v25;
                LODWORD(v49) = v26 + 1;
              }
              if (v48)
              {
LABEL_51:
                __break(0xC471u);
                JUMPOUT(0x19569ABFCLL);
              }
              v27 = (WebCore::Node **)WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(v12 - 96), (WebCore::ScriptExecutionContext *)v53);
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v29 = *(_QWORD *)(StatusReg + 736);
              if (!v29 || (v27 = *(WebCore::Node ***)(v29 + 96)) == 0)
                v27 = (WebCore::Node **)WebCore::threadGlobalDataSlow((WebCore *)v27);
              v55[0] = v27[8];
              v30 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
              v31 = *(_QWORD *)(StatusReg + 736);
              if (!v31 || (v30 = *(WebCore **)(v31 + 96)) == 0)
                v30 = (WebCore *)WebCore::threadGlobalDataSlow(v30);
              *((_QWORD *)v30 + 8) = v17;
              JSC::call();
              WebCore::JSExecState::~JSExecState(v55, v32);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v43 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v12 - 96), v33);
                if (v43)
                {
                  v45 = *(_QWORD *)(v43 + 232);
                  if (v45)
                  {
                    if (!*(_BYTE *)(v12 + 178))
                    {
                      v46 = *(_DWORD *)(v12 - 264);
                      *(_DWORD *)(v12 - 264) = v46 + 2;
                      if (v46)
                      {
                        *(_DWORD *)(v12 - 264) = v46;
                      }
                      else if ((*(_WORD *)(v12 - 258) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 288), v44);
                      }
                    }
                    WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v45);
                  }
                }
              }
              v35 = 0;
              v36 = *(uint64_t **)&v51[0];
              if (*(_QWORD *)&v51[0])
              {
                v55[0] = (WebCore::Node *)&v49;
                v47 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v51[0], (uint64_t *)v55);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v36, v47);
              }
              if (v50 != (WTF *)((char *)v51 + 8) && v50)
                WTF::fastFree(v50, v35);
            }
          }
        }
        result = MEMORY[0x19AEA32A0](v54);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeAttributeChangedCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2, const WebCore::QualifiedName *a3, const WTF::AtomString *a4, const WTF::AtomString *a5)
{
  uint64_t v10;
  JSC::JSFunction *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject **v17;
  WebCore::Element *v18;
  JSC::JSGlobalObject *v19;
  JSCell *v20;
  uint64_t v21;
  objc_class **v22;
  uint64_t v23;
  int v24;
  objc_class *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  WebCore::JSDOMGlobalObject **v42;
  unint64_t StatusReg;
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  JSC::JSGlobalObject *v47;
  WebCore::ScriptExecutionContext *v48;
  void *v50;
  uint64_t *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  JSValue v64;
  JSValue v65;
  JSValue v66;
  JSValue v67;
  uint64_t v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  WTF *v72;
  _OWORD v73[4];
  uint64_t v74;
  _QWORD v75[3];
  _BYTE v76[8];
  WebCore::JSDOMGlobalObject *v77[3];

  v10 = *((_QWORD *)this + 8);
  if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
    v11 = 0;
  else
    v11 = *(JSC::JSFunction **)v10;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v13 = *((_QWORD *)this + 1);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v76, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v14 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569B2B0);
        }
        v15 = *(_QWORD *)(v14 + 240);
        if (!v15
          || (v16 = *(_QWORD *)(v15 + 8)) == 0
          || (v17 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v16 + 304) + 16)+ 112), *((WebCore::DOMWrapperWorld **)this + 13)), (v19 = v17[2]) == 0))
        {
LABEL_58:
          result = MEMORY[0x19AEA32A0](v76);
          if (*((_DWORD *)this + 4) == 1)
            return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
          --*((_DWORD *)this + 4);
          return result;
        }
        WebCore::toJS((WebCore *)v17, v17[2], a2, v18);
        if (*((_BYTE *)v11 + 5) == 26)
          JSC::JSFunction::getCallData(v11, v20);
        else
          (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x38))(v75, v11);
        v70 = 0;
        v71 = 0x800000000;
        v72 = (WTF *)((char *)v73 + 8);
        v74 = 0;
        memset(v73, 0, sizeof(v73));
        v21 = *((_QWORD *)v19 + 7);
        v22 = (objc_class **)(v21 + 41968);
        v23 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        if (v23)
        {
          v24 = *(_DWORD *)(v23 + 4);
          if (v24)
          {
            if (v24 != 1)
            {
LABEL_16:
              v25 = *(objc_class **)(v21 + 64760);
              if (!v25 || v23 != *((_QWORD *)v25 + 1))
              {
                v25 = (objc_class *)JSC::jsStringWithCacheSlowCase();
                v26 = v71;
                if (v72 != (WTF *)((char *)v73 + 8))
                {
                  v64.super.isa = v25;
                  if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v71, v64) == 1)
                    v70 = 1;
LABEL_20:
                  v27 = *(_QWORD *)a4;
                  if (!*(_QWORD *)a4)
                  {
                    v30 = 2;
                    goto LABEL_26;
                  }
                  v28 = *((_QWORD *)v19 + 7);
                  v29 = *(_DWORD *)(v27 + 4);
                  if (!v29)
                  {
                    v30 = *(_QWORD *)(v28 + 41968);
                    goto LABEL_26;
                  }
                  if (v29 != 1)
                  {
LABEL_23:
                    v30 = *(_QWORD *)(v28 + 64760);
                    if (!v30 || v27 != *(_QWORD *)(v30 + 8))
                      v30 = JSC::jsStringWithCacheSlowCase();
LABEL_26:
                    v31 = v71;
                    if ((_DWORD)v71 == HIDWORD(v71) || v72 != (WTF *)((char *)v73 + 8) && v72)
                    {
                      v65.super.isa = (Class)v30;
                      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v71, v65) == 1)
                        v70 = 1;
                    }
                    else
                    {
                      *((_QWORD *)v72 + v71) = v30;
                      LODWORD(v71) = v31 + 1;
                    }
                    v32 = *(_QWORD *)a5;
                    if (!*(_QWORD *)a5)
                    {
                      v35 = 2;
                      goto LABEL_35;
                    }
                    v33 = *((_QWORD *)v19 + 7);
                    v34 = *(_DWORD *)(v32 + 4);
                    if (!v34)
                    {
                      v35 = *(_QWORD *)(v33 + 41968);
                      goto LABEL_35;
                    }
                    if (v34 != 1)
                    {
LABEL_32:
                      v35 = *(_QWORD *)(v33 + 64760);
                      if (!v35 || v32 != *(_QWORD *)(v35 + 8))
                        v35 = JSC::jsStringWithCacheSlowCase();
LABEL_35:
                      v36 = v71;
                      if ((_DWORD)v71 == HIDWORD(v71) || v72 != (WTF *)((char *)v73 + 8) && v72)
                      {
                        v66.super.isa = (Class)v35;
                        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v71, v66) == 1)
                          v70 = 1;
                      }
                      else
                      {
                        *((_QWORD *)v72 + v71) = v35;
                        LODWORD(v71) = v36 + 1;
                      }
                      v37 = *(_QWORD *)(*(_QWORD *)a3 + 32);
                      if (v37)
                      {
                        v38 = *((_QWORD *)v19 + 7);
                        v39 = *(_DWORD *)(v37 + 4);
                        if (v39)
                        {
                          if (v39 != 1)
                          {
LABEL_41:
                            v40 = *(_QWORD *)(v38 + 64760);
                            if (!v40 || v37 != *(_QWORD *)(v40 + 8))
                              v40 = JSC::jsStringWithCacheSlowCase();
                            goto LABEL_44;
                          }
                          v58 = *(unsigned __int8 **)(v37 + 8);
                          if ((*(_BYTE *)(v37 + 16) & 4) != 0)
                          {
                            v59 = *v58;
                          }
                          else
                          {
                            v63 = *(unsigned __int16 *)v58;
                            if (v63 > 0xFF)
                              goto LABEL_41;
                            v59 = v63;
                          }
                          v40 = *(_QWORD *)(v38 + 8 * v59 + 42216);
                        }
                        else
                        {
                          v40 = *(_QWORD *)(v38 + 41968);
                        }
                      }
                      else
                      {
                        v40 = 2;
                      }
LABEL_44:
                      v41 = v71;
                      if ((_DWORD)v71 == HIDWORD(v71) || v72 != (WTF *)((char *)v73 + 8) && v72)
                      {
                        v67.super.isa = (Class)v40;
                        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v71, v67) == 1)
                          goto LABEL_102;
                      }
                      else
                      {
                        *((_QWORD *)v72 + v71) = v40;
                        LODWORD(v71) = v41 + 1;
                      }
                      if (v70)
                      {
LABEL_102:
                        __break(0xC471u);
                        JUMPOUT(0x19569B284);
                      }
                      v42 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(v14 - 96), (WebCore::ScriptExecutionContext *)v75);
                      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                      v44 = *(_QWORD *)(StatusReg + 736);
                      if (!v44 || (v42 = *(WebCore::JSDOMGlobalObject ***)(v44 + 96)) == 0)
                        v42 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v42);
                      v77[0] = v42[8];
                      v45 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
                      v46 = *(_QWORD *)(StatusReg + 736);
                      if (!v46 || (v45 = *(WebCore **)(v46 + 96)) == 0)
                        v45 = (WebCore *)WebCore::threadGlobalDataSlow(v45);
                      *((_QWORD *)v45 + 8) = v19;
                      JSC::call();
                      WebCore::JSExecState::~JSExecState(v77, v47);
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        v68 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v14 - 96), v48);
                        if (v68)
                          WebCore::InspectorInstrumentation::didCallFunctionImpl(v68, (_BYTE *)(v14 - 96));
                      }
                      v50 = 0;
                      v51 = *(uint64_t **)&v73[0];
                      if (*(_QWORD *)&v73[0])
                      {
                        v77[0] = (WebCore::JSDOMGlobalObject *)&v71;
                        v69 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v73[0], (uint64_t *)v77);
                        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v51, v69);
                      }
                      if (v72 != (WTF *)((char *)v73 + 8) && v72)
                        WTF::fastFree(v72, v50);
                      goto LABEL_58;
                    }
                    v56 = *(unsigned __int8 **)(v32 + 8);
                    if ((*(_BYTE *)(v32 + 16) & 4) != 0)
                    {
                      v57 = *v56;
                    }
                    else
                    {
                      v62 = *(unsigned __int16 *)v56;
                      if (v62 > 0xFF)
                        goto LABEL_32;
                      v57 = v62;
                    }
                    v35 = *(_QWORD *)(v33 + 8 * v57 + 42216);
                    goto LABEL_35;
                  }
                  v54 = *(unsigned __int8 **)(v27 + 8);
                  if ((*(_BYTE *)(v27 + 16) & 4) != 0)
                  {
                    v55 = *v54;
                  }
                  else
                  {
                    v61 = *(unsigned __int16 *)v54;
                    if (v61 > 0xFF)
                      goto LABEL_23;
                    v55 = v61;
                  }
                  v30 = *(_QWORD *)(v28 + 8 * v55 + 42216);
                  goto LABEL_26;
                }
LABEL_19:
                *((_QWORD *)v73 + v26 + 1) = v25;
                LODWORD(v71) = v26 + 1;
                goto LABEL_20;
              }
LABEL_73:
              v26 = 0;
              goto LABEL_19;
            }
            v52 = *(unsigned __int8 **)(v23 + 8);
            if ((*(_BYTE *)(v23 + 16) & 4) != 0)
            {
              v53 = *v52;
            }
            else
            {
              v60 = *(unsigned __int16 *)v52;
              if (v60 > 0xFF)
                goto LABEL_16;
              v53 = v60;
            }
            v22 = (objc_class **)(v21 + 8 * v53 + 42216);
          }
        }
        v25 = *v22;
        goto LABEL_73;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeFormAssociatedCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2, WebCore::HTMLFormElement *a3)
{
  uint64_t v6;
  JSC::JSFunction *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  WebCore::Element *v14;
  WebCore *v15;
  JSCell *v16;
  WebCore::HTMLElement *v17;
  unsigned int v18;
  JSValue v19;
  WebCore::JSDOMGlobalObject **v20;
  unint64_t StatusReg;
  uint64_t v22;
  WebCore *v23;
  uint64_t v24;
  JSC::JSGlobalObject *v25;
  WebCore::ScriptExecutionContext *v26;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  _OWORD v37[4];
  uint64_t v38;
  _QWORD v39[3];
  _BYTE v40[8];
  WebCore::JSDOMGlobalObject *v41[2];

  v6 = *((_QWORD *)this + 9);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(JSC::JSFunction **)v6;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v40, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v10 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569B5A8);
        }
        v11 = *(_QWORD *)(v10 + 240);
        if (!v11)
          goto LABEL_26;
        v12 = *(_QWORD *)(v11 + 8);
        if (!v12)
          goto LABEL_26;
        v13 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v12 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
        v15 = v13[2];
        if (!v15)
          goto LABEL_26;
        WebCore::toJS((WebCore *)v13, v13[2], a2, v14);
        if (*((_BYTE *)v7 + 5) == 26)
          JSC::JSFunction::getCallData(v7, v16);
        else
          (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v7 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x38))(v39, v7);
        v35 = 0x800000000;
        v36 = (WTF *)((char *)v37 + 8);
        memset(v37, 0, sizeof(v37));
        v38 = 0;
        if (a3)
        {
          v19.super.isa = (Class)WebCore::toJS(v15, v15, a3, v17);
          v18 = v35;
          if (v36 != (WTF *)((char *)v37 + 8))
          {
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v35, v19) == 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19569B64CLL);
            }
            goto LABEL_16;
          }
        }
        else
        {
          v18 = 0;
          v19.super.isa = (Class)2;
        }
        *((JSValue *)v37 + v18 + 1) = v19;
        LODWORD(v35) = v18 + 1;
LABEL_16:
        v20 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(v10 - 96), (WebCore::ScriptExecutionContext *)v39);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v22 = *(_QWORD *)(StatusReg + 736);
        if (!v22 || (v20 = *(WebCore::JSDOMGlobalObject ***)(v22 + 96)) == 0)
          v20 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v20);
        v41[0] = v20[8];
        v23 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
        v24 = *(_QWORD *)(StatusReg + 736);
        if (!v24 || (v23 = *(WebCore **)(v24 + 96)) == 0)
          v23 = (WebCore *)WebCore::threadGlobalDataSlow(v23);
        *((_QWORD *)v23 + 8) = v15;
        JSC::call();
        WebCore::JSExecState::~JSExecState(v41, v25);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v30 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v10 - 96), v26);
          if (v30)
          {
            v32 = *(_QWORD *)(v30 + 232);
            if (v32)
            {
              if (!*(_BYTE *)(v10 + 178))
              {
                v33 = *(_DWORD *)(v10 - 264);
                *(_DWORD *)(v10 - 264) = v33 + 2;
                if (v33)
                {
                  *(_DWORD *)(v10 - 264) = v33;
                }
                else if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v31);
                }
              }
              WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v32);
            }
          }
        }
        v28 = 0;
        v29 = *(uint64_t **)&v37[0];
        if (*(_QWORD *)&v37[0])
        {
          v41[0] = (WebCore::JSDOMGlobalObject *)&v35;
          v34 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v37[0], (uint64_t *)v41);
          WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v29, v34);
        }
        if (v36 != (WTF *)((char *)v37 + 8) && v36)
          WTF::fastFree(v36, v28);
LABEL_26:
        result = MEMORY[0x19AEA32A0](v40);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeFormResetCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2)
{
  uint64_t v4;
  JSC::JSFunction *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject **v11;
  WebCore::Element *v12;
  JSC::JSGlobalObject *v13;
  JSCell *v14;
  WebCore::JSDOMGlobalObject **v15;
  unint64_t StatusReg;
  uint64_t v17;
  WebCore *v18;
  uint64_t v19;
  JSC::JSGlobalObject *v20;
  WebCore::ScriptExecutionContext *v21;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  WTF *v31;
  _OWORD v32[4];
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[8];
  WebCore::JSDOMGlobalObject *v36[2];

  v4 = *((_QWORD *)this + 10);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::JSFunction **)v4;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v35, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v8 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569B91CLL);
        }
        v9 = *(_QWORD *)(v8 + 240);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v10 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
            v13 = v11[2];
            if (v13)
            {
              WebCore::toJS((WebCore *)v11, v11[2], a2, v12);
              if (*((_BYTE *)v5 + 5) == 26)
                JSC::JSFunction::getCallData(v5, v14);
              else
                (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(v34, v5);
              v30 = 0x800000000;
              v31 = (WTF *)((char *)v32 + 8);
              memset(v32, 0, sizeof(v32));
              v33 = 0;
              v15 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(v8 - 96), (WebCore::ScriptExecutionContext *)v34);
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v17 = *(_QWORD *)(StatusReg + 736);
              if (!v17 || (v15 = *(WebCore::JSDOMGlobalObject ***)(v17 + 96)) == 0)
                v15 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v15);
              v36[0] = v15[8];
              v18 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
              v19 = *(_QWORD *)(StatusReg + 736);
              if (!v19 || (v18 = *(WebCore **)(v19 + 96)) == 0)
                v18 = (WebCore *)WebCore::threadGlobalDataSlow(v18);
              *((_QWORD *)v18 + 8) = v13;
              JSC::call();
              WebCore::JSExecState::~JSExecState(v36, v20);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v25 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v8 - 96), v21);
                if (v25)
                {
                  v27 = *(_QWORD *)(v25 + 232);
                  if (v27)
                  {
                    if (!*(_BYTE *)(v8 + 178))
                    {
                      v28 = *(_DWORD *)(v8 - 264);
                      *(_DWORD *)(v8 - 264) = v28 + 2;
                      if (v28)
                      {
                        *(_DWORD *)(v8 - 264) = v28;
                      }
                      else if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288), v26);
                      }
                    }
                    WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v27);
                  }
                }
              }
              v23 = 0;
              v24 = *(uint64_t **)&v32[0];
              if (*(_QWORD *)&v32[0])
              {
                v36[0] = (WebCore::JSDOMGlobalObject *)&v30;
                v29 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v32[0], (uint64_t *)v36);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v24, v29);
              }
              if (v31 != (WTF *)((char *)v32 + 8) && v31)
                WTF::fastFree(v31, v23);
            }
          }
        }
        result = MEMORY[0x19AEA32A0](v35);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeFormDisabledCallback(WebCore::JSCustomElementInterface *this, WebCore::Element *a2, int a3)
{
  uint64_t v6;
  JSC::JSFunction *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  WebCore::Element *v14;
  JSC::JSGlobalObject *v15;
  JSCell *v16;
  uint64_t v17;
  WebCore::JSDOMGlobalObject **v18;
  unint64_t StatusReg;
  uint64_t v20;
  WebCore *v21;
  uint64_t v22;
  JSC::JSGlobalObject *v23;
  WebCore::ScriptExecutionContext *v24;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  _QWORD v37[3];
  _BYTE v38[8];
  WebCore::JSDOMGlobalObject *v39[2];

  v6 = *((_QWORD *)this + 11);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(JSC::JSFunction **)v6;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v38, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v10 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569BC44);
        }
        v11 = *(_QWORD *)(v10 + 240);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v12 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
            v15 = v13[2];
            if (v15)
            {
              WebCore::toJS((WebCore *)v13, v13[2], a2, v14);
              if (*((_BYTE *)v7 + 5) == 26)
                JSC::JSFunction::getCallData(v7, v16);
              else
                (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(v37, v7);
              v34 = (WTF *)((char *)v35 + 8);
              memset(v35, 0, sizeof(v35));
              v36 = 0;
              v17 = 6;
              if (a3)
                v17 = 7;
              *((_QWORD *)&v35[0] + 1) = v17;
              v33 = 0x800000001;
              v18 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(v10 - 96), (WebCore::ScriptExecutionContext *)v37);
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v20 = *(_QWORD *)(StatusReg + 736);
              if (!v20 || (v18 = *(WebCore::JSDOMGlobalObject ***)(v20 + 96)) == 0)
                v18 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v18);
              v39[0] = v18[8];
              v21 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
              v22 = *(_QWORD *)(StatusReg + 736);
              if (!v22 || (v21 = *(WebCore **)(v22 + 96)) == 0)
                v21 = (WebCore *)WebCore::threadGlobalDataSlow(v21);
              *((_QWORD *)v21 + 8) = v15;
              JSC::call();
              WebCore::JSExecState::~JSExecState(v39, v23);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v28 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v10 - 96), v24);
                if (v28)
                {
                  v30 = *(_QWORD *)(v28 + 232);
                  if (v30)
                  {
                    if (!*(_BYTE *)(v10 + 178))
                    {
                      v31 = *(_DWORD *)(v10 - 264);
                      *(_DWORD *)(v10 - 264) = v31 + 2;
                      if (v31)
                      {
                        *(_DWORD *)(v10 - 264) = v31;
                      }
                      else if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v29);
                      }
                    }
                    WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v30);
                  }
                }
              }
              v26 = 0;
              v27 = *(uint64_t **)&v35[0];
              if (*(_QWORD *)&v35[0])
              {
                v39[0] = (WebCore::JSDOMGlobalObject *)&v33;
                v32 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)v39);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v27, v32);
              }
              if (v34 != (WTF *)((char *)v35 + 8) && v34)
                WTF::fastFree(v34, v26);
            }
          }
        }
        result = MEMORY[0x19AEA32A0](v38);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::ActiveDOMCallback *this, void *a2, uint64_t a3)
{
  uint64_t v6;
  JSC::JSFunction *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  WebCore::Element *v14;
  uint64_t v15;
  JSCell *v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  objc_class *v20;
  WTF::StringImpl *v21;
  int v22;
  WebCore::JSDOMGlobalObject **v23;
  unint64_t StatusReg;
  uint64_t v25;
  WebCore *v26;
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  WebCore::ScriptExecutionContext *v29;
  void *v31;
  uint64_t *v32;
  JSValue v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  WebCore::JSCustomElementInterface *v39;
  JSC::JSObject *v40;
  WTF *v41;
  int v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  _OWORD v46[4];
  uint64_t v47;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  void *v51;
  WebCore::JSDOMGlobalObject *v52[5];

  v6 = *((_QWORD *)this + 12);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(JSC::JSFunction **)v6;
  result = WebCore::ActiveDOMCallback::canInvokeCallback(this, a2);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        ++*((_DWORD *)this + 4);
        MEMORY[0x19AEA3294](v49, *(_QWORD *)(*((_QWORD *)this + 13) + 16));
        if (*(_BYTE *)(v10 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19569C058);
        }
        v11 = *(_QWORD *)(v10 + 240);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = (JSC::JSGlobalObject **)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v12 + 304) + 16) + 112), *((WebCore::DOMWrapperWorld **)this + 13));
            v15 = (uint64_t)v13[2];
            if (v15)
            {
              WebCore::toJS((WebCore *)v13, v13[2], (WebCore::JSDOMGlobalObject *)a2, v14);
              if (*((_BYTE *)v7 + 5) == 26)
                JSC::JSFunction::getCallData(v7, v16);
              else
                (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x38))(v48, v7);
              v43 = 0;
              v44 = 0x800000000;
              v45 = (WTF *)((char *)v46 + 8);
              memset(v46, 0, sizeof(v46));
              v47 = 0;
              v50 = v15;
              v51 = (void *)v15;
              v17 = *(WebCore::JSDOMGlobalObject **)(v15 + 56);
              v52[0] = (WebCore::JSDOMGlobalObject *)&v43;
              v52[1] = (WebCore::JSDOMGlobalObject *)&v51;
              v52[2] = (WebCore::JSDOMGlobalObject *)&v50;
              v52[3] = (WebCore::JSDOMGlobalObject *)&v43;
              v52[4] = v17;
              v18 = *(unsigned int *)(a3 + 8);
              if ((_DWORD)v18 == -1)
              {
                v39 = (WebCore::JSCustomElementInterface *)std::__throw_bad_variant_access[abi:sn180100]();
                return WebCore::JSCustomElementInterface::setFormAssociatedCallback(v39, v40);
              }
              v41 = (WTF *)v52;
              ((void (*)(WTF **, uint64_t))off_1E33928E0[v18])(&v41, a3);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v20 = (objc_class *)JSC::JSString::create((uint64_t)v17, v52);
              v21 = v52[0];
              v52[0] = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v19);
                else
                  *(_DWORD *)v21 -= 2;
              }
              v22 = v44;
              if ((_DWORD)v44 == HIDWORD(v44) || v45 != (WTF *)((char *)v46 + 8) && v45)
              {
                v33.super.isa = v20;
                if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v44, v33) == 1)
                {
                  v43 = 1;
                  goto LABEL_43;
                }
              }
              else
              {
                *((_QWORD *)v45 + v44) = v20;
                LODWORD(v44) = v22 + 1;
              }
              if (v43)
              {
LABEL_43:
                __break(0xC471u);
                JUMPOUT(0x19569C02CLL);
              }
              v23 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction((WTF::StringImpl *)(v10 - 96), (WebCore::ScriptExecutionContext *)v48);
              v51 = 0;
              v41 = v45;
              v42 = v44;
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v25 = *(_QWORD *)(StatusReg + 736);
              if (!v25 || (v23 = *(WebCore::JSDOMGlobalObject ***)(v25 + 96)) == 0)
                v23 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v23);
              v52[0] = v23[8];
              v26 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
              v27 = *(_QWORD *)(StatusReg + 736);
              if (!v27 || (v26 = *(WebCore **)(v27 + 96)) == 0)
                v26 = (WebCore *)WebCore::threadGlobalDataSlow(v26);
              *((_QWORD *)v26 + 8) = v15;
              JSC::call();
              WebCore::JSExecState::~JSExecState(v52, v28);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v34 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v10 - 96), v29);
                if (v34)
                {
                  v36 = *(_QWORD *)(v34 + 232);
                  if (v36)
                  {
                    if (!*(_BYTE *)(v10 + 178))
                    {
                      v37 = *(_DWORD *)(v10 - 264);
                      *(_DWORD *)(v10 - 264) = v37 + 2;
                      if (v37)
                      {
                        *(_DWORD *)(v10 - 264) = v37;
                      }
                      else if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v35);
                      }
                    }
                    WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v36);
                  }
                }
              }
              v31 = v51;
              if (v51)
                WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28), (uint64_t)v51, 0, 0, 0);
              v32 = *(uint64_t **)&v46[0];
              if (*(_QWORD *)&v46[0])
              {
                v52[0] = (WebCore::JSDOMGlobalObject *)&v44;
                v38 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v46[0], (uint64_t *)v52);
                WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v32, v38);
              }
              if (v45 != (WTF *)((char *)v46 + 8) && v45)
                WTF::fastFree(v45, v31);
            }
          }
        }
        result = MEMORY[0x19AEA32A0](v49);
        if (*((_DWORD *)this + 4) == 1)
          return (*(uint64_t (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)this + 16))(this);
        else
          --*((_DWORD *)this + 4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSCustomElementInterface::setFormAssociatedCallback(WebCore::JSCustomElementInterface *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  if ((a2 & 8) != 0)
    v4 = (a2 - 112) | 1;
  else
    v4 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v4 & 1) != 0)
    v5 = v4 + 47;
  else
    v5 = *(_QWORD *)v4 + 32;
  result = *(_QWORD **)(v5 + 16);
  if (!result)
    result = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v5 + 16) = *result;
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = result;
  if (v7)
    *(_QWORD *)(v7 + 8) = 3;
  return result;
}

_QWORD *WebCore::JSCustomElementInterface::setFormResetCallback(WebCore::JSCustomElementInterface *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  if ((a2 & 8) != 0)
    v4 = (a2 - 112) | 1;
  else
    v4 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v4 & 1) != 0)
    v5 = v4 + 47;
  else
    v5 = *(_QWORD *)v4 + 32;
  result = *(_QWORD **)(v5 + 16);
  if (!result)
    result = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v5 + 16) = *result;
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = result;
  if (v7)
    *(_QWORD *)(v7 + 8) = 3;
  return result;
}

_QWORD *WebCore::JSCustomElementInterface::setFormDisabledCallback(WebCore::JSCustomElementInterface *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  if ((a2 & 8) != 0)
    v4 = (a2 - 112) | 1;
  else
    v4 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v4 & 1) != 0)
    v5 = v4 + 47;
  else
    v5 = *(_QWORD *)v4 + 32;
  result = *(_QWORD **)(v5 + 16);
  if (!result)
    result = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v5 + 16) = *result;
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = result;
  if (v7)
    *(_QWORD *)(v7 + 8) = 3;
  return result;
}

_QWORD *WebCore::JSCustomElementInterface::setFormStateRestoreCallback(WebCore::JSCustomElementInterface *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  if ((a2 & 8) != 0)
    v4 = (a2 - 112) | 1;
  else
    v4 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v4 & 1) != 0)
    v5 = v4 + 47;
  else
    v5 = *(_QWORD *)v4 + 32;
  result = *(_QWORD **)(v5 + 16);
  if (!result)
    result = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v5 + 16) = *result;
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = result;
  if (v7)
    *(_QWORD *)(v7 + 8) = 3;
  return result;
}

unsigned int *WebCore::JSCustomElementInterface::didUpgradeLastElementInConstructionStack(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this[31];
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 14) + 8 * v2;
    this = *(unsigned int **)(v3 - 8);
    *(_QWORD *)(v3 - 8) = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::JSCustomElementRegistry::define(WebCore::JSCustomElementRegistry *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  JSC::JSCell *v10;
  uint64_t Object;
  const WTF::AtomString *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int i;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v21;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  WebCore::JSDOMGlobalObject *v34;
  WebCore::ContainerNode *v35;
  WebCore::ScriptExecutionContext *v36;
  WebCore::QualifiedName::QualifiedNameImpl *v37;
  _QWORD *j;
  uint64_t *v39;
  _DWORD *v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl *v42;
  const JSC::Identifier *v43;
  WTF::StringImpl *v44;
  uint64_t CustomElementCallback;
  unint64_t v46;
  uint64_t v47;
  _QWORD *Allocator;
  uint64_t v49;
  WTF::StringImpl *v50;
  const JSC::Identifier *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  const JSC::Identifier *v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  const JSC::Identifier *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  WTF::StringImpl *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  WTF::StringImpl *v109;
  unsigned int v110;
  WTF *v111;
  void *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl **v118;
  WTF::StringImpl **v119;
  int v120;
  unsigned int v121;
  WTF::StringImpl **v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  const char *v125;
  JSC::JSGlobalObject *v126;
  uint64_t v127;
  unsigned int v128;
  WTF::StringImpl *v129;
  JSValue v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  WTF::StringImpl *v137;
  const JSC::Identifier *v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  WTF::StringImpl *v141;
  const JSC::Identifier *v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  WTF::StringImpl *v145;
  const JSC::Identifier *v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  WTF::StringImpl *v149;
  const JSC::Identifier *v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  WebCore::ContainerNode *v163;
  WebCore::QualifiedName::QualifiedNameImpl *v164;
  WTF::StringImpl *v165;
  JSC::VM *v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v166 = v4;
  if ((unint64_t)(*((int *)a3 + 8) - 1) <= 1)
  {
    v130.super.isa = (Class)JSC::createNotEnoughArgumentsError(a2, a2);
    return JSC::VM::throwException(v4, a2, v130);
  }
  v7 = *((_QWORD *)a3 + 6);
  v161 = (WTF::StringImpl *)v7;
  if ((v7 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v7 + 5) != 2)
    v7 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v161, a2);
  v8 = *(WTF::StringImpl **)(v7 + 8);
  if ((v8 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v7, a2);
    goto LABEL_9;
  }
  if (v8)
  {
    if ((*((_BYTE *)v8 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v8 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v8, a2);
      v8 = v167;
    }
    v9 = *(_QWORD *)(v7 + 8);
    v165 = v8;
    if ((*(_BYTE *)(v9 + 16) & 0x10) != 0)
      goto LABEL_9;
    v114 = *((_QWORD *)a2 + 7);
    if (v8)
      *(_DWORD *)v8 += 2;
  }
  else
  {
    v165 = 0;
    if ((MEMORY[0x10] & 0x10) != 0)
      goto LABEL_9;
    v8 = 0;
    v114 = *((_QWORD *)a2 + 7);
  }
  v167 = v8;
  __dmb(0xAu);
  v115 = *(WTF::StringImpl **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = v167;
  v167 = v115;
  JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v114 + 192, (unint64_t)&v167);
  v117 = v167;
  v167 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v116);
    else
      *(_DWORD *)v117 -= 2;
  }
LABEL_9:
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
  {
    v72 = 0;
    goto LABEL_110;
  }
  v10 = (JSC::JSCell *)*((_QWORD *)a3 + 7);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v10 + 5) < 0x17u
    || ((*(void (**)(WTF::StringImpl **__return_ptr, JSC::JSCell *))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x40))(&v167, v10), !(_BYTE)v167))
  {
    v72 = JSC::throwTypeError();
    goto LABEL_110;
  }
  Object = JSC::JSCell::getObject(v10);
  if (!WebCore::validateCustomElementNameAndThrowIfNeeded(a2, (JSC::JSGlobalObject *)&v165, v12))
  {
LABEL_206:
    v72 = 10;
    goto LABEL_110;
  }
  v14 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v14 + 96))
  {
    WebCore::throwNotSupportedError(a2, &v166, (uint64_t)"Cannot define a custom element while defining another custom element", 69);
    goto LABEL_206;
  }
  *(_BYTE *)(v14 + 96) = 1;
  v15 = *(_QWORD *)(v14 + 32);
  if (v15)
  {
    v16 = 0;
    for (i = *((_DWORD *)v165 + 4) >> 8; ; i = v16 + v18)
    {
      v18 = i & *(_DWORD *)(v15 - 8);
      v19 = *(WTF::StringImpl **)(v15 + 16 * v18);
      if (!v19)
        goto LABEL_24;
      if (v19 != (WTF::StringImpl *)-1 && v19 == v165)
        break;
      ++v16;
    }
    if (*(_QWORD *)(v15 + 16 * v18 + 8))
    {
      v125 = "Cannot define multiple custom elements with the same tag name";
      v126 = a2;
      v127 = 62;
LABEL_209:
      WebCore::throwNotSupportedError(v126, &v166, (uint64_t)v125, v127);
      v72 = 10;
      goto LABEL_109;
    }
  }
LABEL_24:
  v21 = (unsigned __int8 *)(v14 + 97);
  if (__ldaxr((unsigned __int8 *)(v14 + 97)))
  {
    __clrex();
LABEL_26:
    MEMORY[0x19AEA534C](v14 + 97);
    goto LABEL_27;
  }
  if (__stxr(1u, v21))
    goto LABEL_26;
LABEL_27:
  v23 = *(_QWORD *)(v14 + 40);
  if (v23)
  {
    v24 = *(_DWORD *)(v23 - 8);
    v25 = (~(Object << 32) + Object) ^ ((unint64_t)(~(Object << 32) + Object) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    v29 = *(_QWORD *)(v23 + 16 * v28);
    if (v29 == Object)
    {
      v31 = 1;
    }
    else
    {
      v30 = 1;
      do
      {
        v31 = v29 != 0;
        if (!v29)
          break;
        v28 = (v28 + v30) & v24;
        v29 = *(_QWORD *)(v23 + 16 * v28);
        ++v30;
      }
      while (v29 != Object);
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = __ldxr(v21);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v21))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 97));
  if (v31)
  {
    v125 = "Cannot define multiple custom elements with the same class";
    v126 = a2;
    v127 = 59;
    goto LABEL_209;
  }
  v33 = JSC::JSObject::get((JSC::Structure *)Object, a2, *(_QWORD *)(*((_QWORD *)v4 + 5244) + 2160));
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
  {
    v72 = 0;
    goto LABEL_109;
  }
  if ((v33 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v33 + 5) <= 0x16u)
  {
    v72 = JSC::throwTypeError();
    goto LABEL_109;
  }
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v164, MEMORY[0x1E0CBF2F8], &v165, (WTF::StringImpl **)&WebCore::HTMLNames::xhtmlNamespaceURI);
  v34 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v35 = (WebCore::ContainerNode *)WTF::fastMalloc((WTF *)0xA8);
  *((_DWORD *)v35 + 4) = 1;
  v36 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v34);
  *(_QWORD *)v35 = &off_1E33A18C0;
  *((_QWORD *)v35 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v35, v36);
  *(_QWORD *)v35 = &off_1E33921D8;
  v37 = v164;
  if (v164)
    ++*(_DWORD *)v164;
  *((_QWORD *)v35 + 3) = v37;
  if (Object)
  {
    if ((Object & 8) != 0)
      v136 = (Object - 112) | 1;
    else
      v136 = Object & 0xFFFFFFFFFFFFC000;
    if ((v136 & 1) != 0)
      v66 = (WTF::StringImpl *)(v136 + 47);
    else
      v66 = (WTF::StringImpl *)(*(_QWORD *)v136 + 32);
    j = (_QWORD *)*((_QWORD *)v66 + 2);
    if (!j)
      goto LABEL_304;
    goto LABEL_259;
  }
  for (j = 0; ; j[2] = 0)
  {
    *((_QWORD *)v35 + 4) = j;
    *(_OWORD *)((char *)v35 + 40) = 0u;
    v39 = (uint64_t *)((char *)v35 + 40);
    *(_OWORD *)((char *)v35 + 56) = 0u;
    *(_OWORD *)((char *)v35 + 72) = 0u;
    *(_OWORD *)((char *)v35 + 88) = 0u;
    v40 = (_DWORD *)*((_QWORD *)v34 + 415);
    ++*v40;
    *((_QWORD *)v35 + 13) = v40;
    *((_QWORD *)v35 + 14) = (char *)v35 + 128;
    *((_QWORD *)v35 + 15) = 1;
    *((_QWORD *)v35 + 17) = 0;
    v41 = (WTF::StringImpl ***)((char *)v35 + 136);
    *((_QWORD *)v35 + 18) = 0;
    *(_QWORD *)((char *)v35 + 149) = 0;
    *((_BYTE *)v35 + 160) &= 0xF8u;
    v163 = v35;
    WTF::AtomStringImpl::addLiteral();
    v42 = v167;
    CustomElementCallback = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v43);
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v44);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (CustomElementCallback)
    {
      if ((CustomElementCallback & 8) != 0)
        v46 = (CustomElementCallback - 112) | 1;
      else
        v46 = CustomElementCallback & 0xFFFFFFFFFFFFC000;
      if ((v46 & 1) != 0)
        v47 = v46 + 47;
      else
        v47 = *(_QWORD *)v46 + 32;
      Allocator = *(_QWORD **)(v47 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v47 + 16) = *Allocator;
      *Allocator = CustomElementCallback;
      Allocator[1] = 0;
      Allocator[2] = 0;
      v49 = *v39;
      *v39 = (uint64_t)Allocator;
      if (v49)
        *(_QWORD *)(v49 + 8) = 3;
    }
    if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
      goto LABEL_169;
    WTF::AtomStringImpl::addLiteral();
    v50 = v167;
    v53 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v51);
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v52);
      else
        *(_DWORD *)v50 -= 2;
    }
    if (v53)
    {
      if ((v53 & 8) != 0)
        v54 = (v53 - 112) | 1;
      else
        v54 = v53 & 0xFFFFFFFFFFFFC000;
      if ((v54 & 1) != 0)
        v55 = v54 + 47;
      else
        v55 = *(_QWORD *)v54 + 32;
      v56 = *(_QWORD **)(v55 + 16);
      if (!v56)
        v56 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v55 + 16) = *v56;
      *v56 = v53;
      v56[1] = 0;
      v56[2] = 0;
      v57 = *((_QWORD *)v35 + 6);
      *((_QWORD *)v35 + 6) = v56;
      if (v57)
        *(_QWORD *)(v57 + 8) = 3;
    }
    if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
      goto LABEL_169;
    WTF::AtomStringImpl::addLiteral();
    v58 = v167;
    v61 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v59);
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v60);
      else
        *(_DWORD *)v58 -= 2;
    }
    if (v61)
      WebCore::JSCustomElementInterface::setAdoptedCallback(v35, v61);
    if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
      goto LABEL_169;
    WTF::AtomStringImpl::addLiteral();
    v62 = v167;
    v65 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v63);
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v64);
      else
        *(_DWORD *)v62 -= 2;
    }
    if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
      goto LABEL_169;
    if (v65)
    {
      WTF::AtomStringImpl::addLiteral();
      v76 = v167;
      v78 = JSC::JSObject::get((JSC::Structure *)Object, a2, (unint64_t)v167);
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v77);
        else
          *(_DWORD *)v76 -= 2;
      }
      if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
        goto LABEL_169;
      if (v78 != 10)
      {
        v170 = *((_QWORD *)a2 + 7);
        if ((v78 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v78 + 5) <= 0x16u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v113 = v161;
          v161 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, v13);
            else
              *(_DWORD *)v113 -= 2;
          }
LABEL_169:
          v72 = 0;
          v163 = 0;
          goto LABEL_104;
        }
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert(a2, v78, (uint64_t)&v167);
        v79 = v169;
        if (v169)
        {
          v110 = v169;
          if (v169 == -1)
            goto LABEL_169;
        }
        else
        {
          v80 = v167;
          v81 = HIDWORD(v168);
          v167 = 0;
          v168 = 0;
          if ((v65 & 8) != 0)
            v82 = (v65 - 112) | 1;
          else
            v82 = v65 & 0xFFFFFFFFFFFFC000;
          if ((v82 & 1) != 0)
            v83 = v82 + 47;
          else
            v83 = *(_QWORD *)v82 + 32;
          v84 = *(_QWORD **)(v83 + 16);
          if (!v84)
          {
            v158 = v83;
            v160 = v80;
            v135 = v81;
            v84 = (_QWORD *)JSC::WeakSet::findAllocator();
            v81 = v135;
            v83 = v158;
            v80 = v160;
          }
          *(_QWORD *)(v83 + 16) = *v84;
          *v84 = v65;
          v84[1] = 0;
          v84[2] = 0;
          v85 = *((_QWORD *)v35 + 8);
          *((_QWORD *)v35 + 8) = v84;
          if (v85)
            *(_QWORD *)(v85 + 8) = 3;
          v86 = *v41;
          if (*v41)
          {
            v131 = (WTF::StringImpl *)*((unsigned int *)v35 + 36);
            *v41 = 0;
            *((_QWORD *)v35 + 18) = 0;
            *(_QWORD *)((char *)v35 + 149) = 0;
            v132 = v80;
            v133 = v81;
            WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v86, v131);
            v81 = v133;
            v80 = v132;
          }
          if ((_DWORD)v81)
          {
            v87 = (WTF::StringImpl *)((char *)v80 + 8 * v81);
            v157 = v87;
            v159 = v80;
            v88 = v80;
            do
            {
              v90 = *((unsigned int *)v35 + 36);
              v89 = *((unsigned int *)v35 + 37);
              if (10 * v89 >= (unint64_t)(9 * v90) || *((_BYTE *)v35 + 156) && v90 <= 2 * (int)v89)
              {
                if ((_DWORD)v90)
                  v91 = 2 * v90;
                else
                  v91 = 8;
                v92 = v81;
                WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v35 + 136, v91);
                v87 = v157;
                v81 = v92;
                LODWORD(v90) = *((_DWORD *)v35 + 36);
              }
              v93 = v90 - 1;
              v94 = *((_DWORD *)v35 + 38);
              v95 = *(WTF::StringImpl **)v88;
              v96 = *(_DWORD *)(*(_QWORD *)v88 + 16);
              LODWORD(v97) = (v94 ^ (v96 >> 8)) & (v90 - 1);
              v98 = *((_QWORD *)v35 + 17);
              v99 = (WTF::StringImpl **)(v98 + 8 * v97);
              v100 = *v99;
              if (*v99)
              {
                v103 = 0;
                v104 = v96 >> 8;
                v105 = *((_DWORD *)v100 + 4) >> 8;
                while (v100 != v95 || v105 != v104)
                {
                  v97 = ((_DWORD)v97 + 1) & v93;
                  ++v103;
                  v100 = *(WTF::StringImpl **)(v98 + 8 * v97);
                  if (!v100)
                  {
                    v99 = (WTF::StringImpl **)(v98 + 8 * v97);
                    if (v103 >= 0x80)
                      *((_BYTE *)v35 + 156) = 1;
                    goto LABEL_143;
                  }
                  v105 = *((_DWORD *)v100 + 4) >> 8;
                  if (v103 > (((_DWORD)v97 + (_DWORD)v90 - ((v94 ^ v105) & v93)) & v93))
                  {
                    v153 = *((_DWORD *)v35 + 38);
                    v154 = (v97 + v90 - ((v94 ^ v105) & v93)) & v93;
                    v155 = v90 - 1;
                    v156 = v81;
                    if (v103 >= 0x80)
                      *((_BYTE *)v35 + 156) = 1;
                    v118 = (WTF::StringImpl **)(v98 + 8 * v97);
                    *v118 = 0;
                    v161 = v100;
                    WebCore::ContentType::~ContentType(v118, (WTF::StringImpl *)v82);
                    *v119 = 0;
                    WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String>(v119, v88, (WTF::StringImpl **)v88);
                    v120 = v90 - 1;
                    v121 = (v97 + 1) & v155;
                    v122 = *v41;
                    v82 = (uint64_t)&(*v41)[v121];
                    v123 = *(WTF::StringImpl **)v82;
                    if (*(_QWORD *)v82)
                    {
                      do
                      {
                        v134 = (v121 + v90 - ((v153 ^ (*((_DWORD *)v123 + 4) >> 8)) & v120)) & v120;
                        if (++v154 > v134)
                        {
                          std::swap[abi:sn180100]<WTF::AtomString>(&v161, (WTF::StringImpl *)v82);
                          v122 = *v41;
                          v154 = v134;
                        }
                        v120 = v90 - 1;
                        v121 = (v121 + 1) & v155;
                        v82 = (uint64_t)&v122[v121];
                        v123 = *(WTF::StringImpl **)v82;
                      }
                      while (*(_QWORD *)v82);
                      v100 = v161;
                    }
                    v81 = v156;
                    v87 = v157;
                    v161 = 0;
                    v124 = *(WTF::StringImpl **)v82;
                    *(_QWORD *)v82 = v100;
                    if (v124)
                    {
                      if (*(_DWORD *)v124 == 2)
                      {
                        WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v82);
                        v87 = v157;
                        v81 = v156;
                      }
                      else
                      {
                        *(_DWORD *)v124 -= 2;
                      }
                    }
                    v101 = v161;
                    v161 = 0;
                    if (v101)
                    {
                      v102 = *(_DWORD *)v101 - 2;
                      if (*(_DWORD *)v101 != 2)
                        goto LABEL_145;
                      WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v82);
                      v87 = v157;
                      v81 = v156;
                    }
                    goto LABEL_146;
                  }
                }
              }
              else
              {
LABEL_143:
                *(_QWORD *)v88 = 0;
                v101 = *v99;
                *v99 = v95;
                if (v101)
                {
                  v102 = *(_DWORD *)v101 - 2;
                  if (*(_DWORD *)v101 == 2)
                  {
                    v106 = v81;
                    WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v82);
                    v87 = v157;
                    v81 = v106;
                  }
                  else
                  {
LABEL_145:
                    *(_DWORD *)v101 = v102;
                  }
                }
LABEL_146:
                ++*((_DWORD *)v35 + 37);
              }
              v88 = (WTF::StringImpl *)((char *)v88 + 8);
            }
            while (v88 != v87);
            v107 = 8 * v81;
            v80 = v159;
            v108 = (WTF::StringImpl **)v159;
            v79 = 0;
            do
            {
              v109 = *v108;
              *v108 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                {
                  WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v82);
                  v80 = v159;
                }
                else
                {
                  *(_DWORD *)v109 -= 2;
                }
              }
              ++v108;
              v107 -= 8;
            }
            while (v107);
          }
          if (v80)
            WTF::fastFree(v80, (void *)v82);
          v110 = v169;
          if (v169 == -1)
            goto LABEL_89;
        }
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33925F0[v110])(&v161, &v167);
        if (v79)
          goto LABEL_169;
      }
    }
LABEL_89:
    WTF::AtomStringImpl::addLiteral();
    v66 = v167;
    v68 = JSC::JSObject::get((JSC::Structure *)Object, a2, (unint64_t)v167);
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v67);
      else
        *(_DWORD *)v66 -= 2;
    }
    if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
      goto LABEL_169;
    if (v68 == 10)
      goto LABEL_94;
    WebCore::convert<WebCore::IDLSequence<WebCore::IDLDOMString>>(a2, v68, (uint64_t)&v167);
    v34 = (WebCore::JSDOMGlobalObject *)v169;
    v128 = v169;
    if (v169)
      goto LABEL_219;
    v161 = (WTF::StringImpl *)"internals";
    v162 = 10;
    if (WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WTF::ASCIILiteral>((uint64_t)&v167, &v161))*((_BYTE *)v35 + 160) |= 1u;
    if (!v169)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_304:
    j = (_QWORD *)JSC::WeakSet::findAllocator();
LABEL_259:
    *((_QWORD *)v66 + 2) = *j;
    *j = Object;
    j[1] = 0;
  }
  v161 = (WTF::StringImpl *)"shadow";
  v162 = 7;
  if (WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WTF::ASCIILiteral>((uint64_t)&v167, &v161))*((_BYTE *)v35 + 160) |= 2u;
  v128 = v169;
LABEL_219:
  if (v128 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3392600[v128])(&v161, &v167);
  if ((_DWORD)v34)
    goto LABEL_169;
LABEL_94:
  WTF::AtomStringImpl::addLiteral();
  v69 = v167;
  v71 = JSC::JSObject::get((JSC::Structure *)Object, a2, (unint64_t)v167);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v70);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
    goto LABEL_169;
  if (v71 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v71)
      goto LABEL_102;
  }
  else if (v71 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v71 - 0x2000000000000) == 0.0)
      goto LABEL_102;
  }
  else if ((v71 & 0xFFFE000000000002) != 0)
  {
    if (v71 != 7)
      goto LABEL_102;
  }
  else if ((JSC::JSCell::toBoolean(v71, (uint64_t)a2) & 1) == 0)
  {
    goto LABEL_102;
  }
  *((_BYTE *)v35 + 160) |= 4u;
  WTF::AtomStringImpl::addLiteral();
  v137 = v167;
  v140 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v138);
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, v139);
    else
      *(_DWORD *)v137 -= 2;
  }
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
    goto LABEL_169;
  if (v140)
    WebCore::JSCustomElementInterface::setFormAssociatedCallback(v35, v140);
  WTF::AtomStringImpl::addLiteral();
  v141 = v167;
  v144 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v142);
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
      WTF::StringImpl::destroy(v141, v143);
    else
      *(_DWORD *)v141 -= 2;
  }
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
    goto LABEL_169;
  if (v144)
    WebCore::JSCustomElementInterface::setFormResetCallback(v35, v144);
  WTF::AtomStringImpl::addLiteral();
  v145 = v167;
  v148 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v146);
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
      WTF::StringImpl::destroy(v145, v147);
    else
      *(_DWORD *)v145 -= 2;
  }
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
    goto LABEL_169;
  if (v148)
    WebCore::JSCustomElementInterface::setFormDisabledCallback(v35, v148);
  WTF::AtomStringImpl::addLiteral();
  v149 = v167;
  v152 = WebCore::getCustomElementCallback(a2, (JSC::JSGlobalObject *)v33, v167, v150);
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, v151);
    else
      *(_DWORD *)v149 -= 2;
  }
  if (*((_DWORD *)v166 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
    goto LABEL_169;
  if (v152)
    WebCore::JSCustomElementInterface::setFormStateRestoreCallback(v35, v152);
LABEL_102:
  WebCore::CustomElementRegistry::addElementDefinition(v14, &v163, &v167);
  if (v167)
  {
    WebCore::DeferredPromise::resolveWithJSValue((uint64_t)v167, (objc_class *)Object);
    v129 = v167;
    v167 = 0;
    if (v129)
    {
      if (*((_DWORD *)v129 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v129 + 16))(v129);
      else
        --*((_DWORD *)v129 + 4);
    }
  }
  v35 = v163;
  v163 = 0;
  v72 = 10;
  if (v35)
  {
LABEL_104:
    if (*((_DWORD *)v35 + 4) == 1)
      (*(void (**)(WebCore::ContainerNode *))(*(_QWORD *)v35 + 16))(v35);
    else
      --*((_DWORD *)v35 + 4);
  }
  v73 = (WTF::StringImpl **)v164;
  v164 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v73);
      WTF::fastFree(v111, v112);
    }
    else
    {
      --*(_DWORD *)v73;
    }
  }
LABEL_109:
  *(_BYTE *)(v14 + 96) = 0;
LABEL_110:
  v74 = v165;
  v165 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v13);
    else
      *(_DWORD *)v74 -= 2;
  }
  return v72;
}

uint64_t WebCore::validateCustomElementNameAndThrowIfNeeded(WebCore *this, JSC::JSGlobalObject *a2, const WTF::AtomString *a3)
{
  int v4;
  const char *v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  JSC::VM *v9;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v4 = WebCore::Document::validateCustomElementName(a2, a2);
  if (!v4)
    return 1;
  switch(v4)
  {
    case 1:
      v6 = "Custom element name must have a lowercase ASCII letter as its first character";
      v7 = this;
      v8 = 78;
      goto LABEL_9;
    case 2:
      v6 = "Custom element name must contain a hyphen";
      v7 = this;
      v8 = 42;
      goto LABEL_9;
    case 3:
      v6 = "Custom element name cannot contain an uppercase ASCII letter";
      goto LABEL_8;
    case 4:
      v6 = "Custom element name contains a character that is not allowed";
LABEL_8:
      v7 = this;
      v8 = 61;
      goto LABEL_9;
    case 5:
      v6 = "Custom element name cannot be same as one of the standard elements";
      v7 = this;
      v8 = 67;
LABEL_9:
      WebCore::throwDOMSyntaxError(v7, &v9, (uint64_t)v6, v8);
      break;
    default:
      return 0;
  }
  return 0;
}

WTF::StringImpl *WebCore::throwNotSupportedError(JSC::JSGlobalObject *a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  JSValue v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (a4)
  {
    if (a4 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v15;
    }
    v14 = v6;
  }
  else
  {
    v14 = 0;
  }
  v7 = *((_QWORD *)a1 + 7);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 && *(_QWORD *)(v7 + 24) == v8)
  {
    v9 = 10;
  }
  else
  {
    WebCore::DOMException::create(6u, &v14, (uint64_t *)&v15);
    v9 = WebCore::wrap<WebCore::DOMException>((uint64_t)a1, (uint64_t)a1, v15);
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 2);
    }
    JSC::addErrorInfo();
  }
  v11.super.isa = (Class)v9;
  JSC::VM::throwException(*a2, a1, v11);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::getCustomElementCallback(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, const JSC::Identifier *a4)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  char hasExceptionsAfterHandlingTraps;
  _QWORD v10[3];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = JSC::JSObject::get(a2, this, (unint64_t)a3);
  v6 = v5;
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || v6 == 10)
      return result;
  }
  else if (v5 == 10)
  {
    return 0;
  }
  if ((v6 & 0xFFFE000000000002) != 0
    || (v7 = *(unsigned __int8 *)(v6 + 5), v7 < 0x17)
    || (v7 & 0xFE) != 0x1A
    && ((*(_BYTE *)(v6 + 6) & 4) == 0
     || ((*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x38))(v10, v6), !LOBYTE(v10[0]))))
  {
    JSC::throwTypeError();
    return 0;
  }
  return JSC::JSCell::getObject((JSC::JSCell *)v6);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WTF::ASCIILiteral>(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 12))
    return 0;
  v4 = 0;
  do
  {
    v5 = a2[1];
    if (v5)
      v6 = v5 - 1;
    else
      v6 = 0;
    result = MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)a1 + 8 * v4), *a2, v6);
    if ((result & 1) != 0)
      break;
    ++v4;
  }
  while (v4 < *(unsigned int *)(a1 + 12));
  return result;
}

uint64_t WebCore::DeferredPromise::resolveWithJSValue(uint64_t result, objc_class *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE v7[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v4, v6, 0, a2);
    return MEMORY[0x19AEA32A0](v7);
  }
  return result;
}

unint64_t WebCore::JSCustomElementRegistry::whenDefined(WebCore::JSCustomElementRegistry *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v6;
  int v7;
  JSC::VM *v8;
  JSC::JSGlobalObject *v9;
  const WTF::AtomString *v10;
  unint64_t v11;
  JSC::VM *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  unsigned int i;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v25;
  uint64_t v26;
  WebCore::DOMGuardedObject *v27;
  uint64_t v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WebCore::DOMGuardedObject *v50;
  WebCore::DOMGuardedObject *v51;
  _DWORD *v52;
  int v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WebCore::DOMGuardedObject **v57;
  WTF::StringImpl *v58;
  WebCore::DOMGuardedObject *v59;
  WebCore::DOMGuardedObject *v60;
  WebCore::DOMGuardedObject *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v75;
  WTF::StringImpl *v76;
  _QWORD *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  JSValue v82;
  unint64_t v83;
  objc_class *v84;
  uint64_t v85;
  WebCore::DOMGuardedObject *v86;
  WebCore::DOMGuardedObject *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::JSDOMGlobalObject *v91;
  WebCore::JSCustomElementRegistry *v92;
  JSC::JSCell *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;

  v6 = *((_QWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 291);
  if (v7)
    v8 = (JSC::VM *)(16 * (v7 & 0xFFFFFFFE));
  else
    v8 = 0;
  v11 = JSC::JSPromise::create((JSC::JSPromise *)v6, v8, a3);
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*((_DWORD *)a3 + 8) == 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a2, v9);
    v33 = JSC::VM::throwException(v12, a2, v82);
    goto LABEL_86;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v14 = *((_QWORD *)this + 3);
  v15 = *((_QWORD *)a3 + 6);
  v94 = v15;
  if ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 2)
    v15 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v94, a2);
  v16 = *(WTF::StringImpl **)(v15 + 8);
  if ((v16 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v15, a2);
    goto LABEL_12;
  }
  if (v16)
  {
    if ((*((_BYTE *)v16 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v16 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v16, v9);
      v16 = v96;
    }
    v17 = *(_QWORD *)(v15 + 8);
    v95 = v16;
    if ((*(_BYTE *)(v17 + 16) & 0x10) != 0)
      goto LABEL_12;
    v75 = *((_QWORD *)a2 + 7);
    if (v16)
      *(_DWORD *)v16 += 2;
  }
  else
  {
    v95 = 0;
    if ((MEMORY[0x10] & 0x10) != 0)
      goto LABEL_12;
    v16 = 0;
    v75 = *((_QWORD *)a2 + 7);
  }
  v96 = v16;
  __dmb(0xAu);
  v76 = *(WTF::StringImpl **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v96;
  v96 = v76;
  v77 = (_QWORD *)(v75 + 808);
  v78 = *(unsigned int *)(v75 + 820);
  if ((_DWORD)v78 == *(_DWORD *)(v75 + 816))
  {
    v80 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v96);
    v78 = *(unsigned int *)(v75 + 820);
    v79 = (WTF::StringImpl **)(*(_QWORD *)(v75 + 808) + 8 * v78);
    v76 = *v80;
  }
  else
  {
    v79 = (WTF::StringImpl **)(*v77 + 8 * v78);
    v80 = &v96;
  }
  *v80 = 0;
  *v79 = v76;
  *(_DWORD *)(v75 + 820) = v78 + 1;
  v81 = v96;
  v96 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v9);
    else
      *(_DWORD *)v81 -= 2;
  }
LABEL_12:
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    goto LABEL_117;
  if (!WebCore::validateCustomElementNameAndThrowIfNeeded(a2, (JSC::JSGlobalObject *)&v95, v10))
  {
LABEL_82:
    v33 = 10;
    goto LABEL_83;
  }
  v19 = *(_QWORD *)(v14 + 32);
  if (v19)
  {
    v20 = 0;
    for (i = *((_DWORD *)v95 + 4) >> 8; ; i = v20 + v22)
    {
      v22 = i & *(_DWORD *)(v19 - 8);
      v23 = *(WTF::StringImpl **)(v19 + 16 * v22);
      if (!v23)
        break;
      if (v23 != (WTF::StringImpl *)-1 && v23 == v95)
      {
        v25 = *(_QWORD *)(v19 + 16 * v22 + 8);
        if (!v25)
          break;
        v26 = WTF::fastMalloc((WTF *)0x30);
        v27 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v26, v13, v11);
        *(_QWORD *)v27 = &off_1E3226868;
        *((_DWORD *)v27 + 10) = 0;
        *((_BYTE *)v27 + 44) = 0;
        v28 = *(_QWORD *)(v25 + 32);
        if (!v28 || (*(_BYTE *)(v28 + 8) & 3) != 0)
          v29 = 0;
        else
          v29 = *(objc_class **)v28;
        v30 = *(_QWORD *)(v26 + 24);
        if (v30 && *(_QWORD *)v30 && (*(_BYTE *)(v30 + 8) & 3) == 0)
        {
          v31 = *(_QWORD *)(v26 + 32);
          if (!v31 || (*(_BYTE *)(v31 + 8) & 3) != 0)
            v32 = 0;
          else
            v32 = *(uint64_t **)v31;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v26, v32, 0, v29);
          MEMORY[0x19AEA32A0](&v96);
        }
        if (*(_DWORD *)(v26 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        else
          --*(_DWORD *)(v26 + 16);
        v33 = v11;
        goto LABEL_83;
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(v14 + 56);
  v34 = *(unsigned int *)(v14 + 60);
  v92 = this;
  v93 = (JSC::JSCell *)v11;
  v91 = (WebCore::JSDOMGlobalObject *)v13;
  if (10 * v34 >= (unint64_t)(9 * v35) || v35 <= 2 * (int)v34 && *(_BYTE *)(v14 + 68))
  {
    if ((_DWORD)v35)
      v36 = 2 * v35;
    else
      v36 = 8;
    WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v14 + 48, v36);
    LODWORD(v35) = *(_DWORD *)(v14 + 56);
  }
  v37 = v35 - 1;
  v38 = *(_DWORD *)(v14 + 64);
  v39 = v95;
  v40 = *((_DWORD *)v95 + 4);
  v41 = (v38 ^ (v40 >> 8)) & ((_DWORD)v35 - 1);
  v42 = *(_QWORD *)(v14 + 48);
  v43 = v42 + 16 * v41;
  v44 = *(WTF::StringImpl **)v43;
  if (*(_QWORD *)v43)
  {
    v45 = 0;
    v46 = v40 >> 8;
    while (1)
    {
      v47 = *((_DWORD *)v44 + 4);
      v48 = (v41 + v35 - ((v38 ^ (v47 >> 8)) & v37)) & v37;
      if (v45 > v48)
        break;
      if (v44 == v95 && v47 >> 8 == v46)
      {
        v43 = v42 + 16 * v41;
        this = v92;
        v11 = (unint64_t)v93;
        goto LABEL_79;
      }
      v41 = ((_DWORD)v41 + 1) & v37;
      ++v45;
      v44 = *(WTF::StringImpl **)(v42 + 16 * v41);
      if (!v44)
      {
        v43 = v42 + 16 * v41;
        v11 = (unint64_t)v93;
        if (v45 >= 0x80)
          *(_BYTE *)(v14 + 68) = 1;
        this = v92;
        if (v39)
          goto LABEL_55;
        goto LABEL_56;
      }
    }
    v88 = (uint64_t *)(v14 + 48);
    v90 = v6;
    v54 = (WTF::StringImpl **)(v42 + 16 * v41);
    v55 = v54;
    if (v45 >= 0x80)
      *(_BYTE *)(v14 + 68) = 1;
    v58 = v54[1];
    v57 = v54 + 1;
    v56 = v58;
    *v55 = 0;
    v55[1] = 0;
    if (v39)
      *(_DWORD *)v39 += 2;
    v89 = v42 + 16 * v41;
    *v55 = v39;
    v59 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
    v60 = WebCore::DOMGuardedObject::DOMGuardedObject(v59, (unint64_t)v91, (unint64_t)v93);
    *(_QWORD *)v60 = &off_1E3226868;
    *((_DWORD *)v60 + 10) = 0;
    *((_BYTE *)v60 + 44) = 0;
    v61 = *v57;
    *v57 = v59;
    if (v61)
    {
      if (*((_DWORD *)v61 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v61 + 16))(v61);
      else
        --*((_DWORD *)v61 + 4);
    }
    v62 = ((_DWORD)v41 + 1) & v37;
    v63 = *v88;
    v64 = (WTF::StringImpl **)(*v88 + 16 * v62);
    v65 = *v64;
    if (*v64)
    {
      v43 = v89;
      do
      {
        ++v48;
        v66 = (v62 + v35 - ((v38 ^ (*((_DWORD *)v65 + 4) >> 8)) & v37)) & v37;
        if (v48 > v66)
        {
          *v64 = 0;
          v67 = v63 + 16 * v62;
          v68 = *(WTF::StringImpl **)(v67 + 8);
          *v64 = v44;
          *(_QWORD *)(v67 + 8) = v56;
          v63 = *v88;
          v56 = v68;
          v48 = v66;
          v44 = v65;
        }
        v62 = ((_DWORD)v62 + 1) & v37;
        v64 = (WTF::StringImpl **)(v63 + 16 * v62);
        v65 = *v64;
      }
      while (*v64);
    }
    else
    {
      v43 = v89;
    }
    *v64 = v44;
    v69 = v63 + 16 * v62;
    v52 = *(_DWORD **)(v69 + 8);
    *(_QWORD *)(v69 + 8) = v56;
    if (!v52)
    {
      v6 = v90;
      this = v92;
      v11 = (unint64_t)v93;
      goto LABEL_78;
    }
    v53 = v52[4] - 1;
    v6 = v90;
    this = v92;
    v11 = (unint64_t)v93;
    if (v52[4] != 1)
      goto LABEL_58;
    goto LABEL_94;
  }
  this = v92;
  v11 = (unint64_t)v93;
LABEL_55:
  *(_DWORD *)v39 += 2;
LABEL_56:
  *(_QWORD *)v43 = v39;
  v49 = v42 + 16 * v41;
  v50 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v51 = WebCore::DOMGuardedObject::DOMGuardedObject(v50, (unint64_t)v91, v11);
  *(_QWORD *)v51 = &off_1E3226868;
  *((_DWORD *)v51 + 10) = 0;
  *((_BYTE *)v51 + 44) = 0;
  v52 = *(_DWORD **)(v49 + 8);
  *(_QWORD *)(v49 + 8) = v50;
  if (v52)
  {
    v53 = v52[4] - 1;
    if (v52[4] == 1)
    {
LABEL_94:
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
      goto LABEL_78;
    }
LABEL_58:
    v52[4] = v53;
  }
LABEL_78:
  ++*(_DWORD *)(v14 + 60);
LABEL_79:
  v70 = *(_QWORD *)(*(_QWORD *)(v43 + 8) + 24);
  if (!v70)
    goto LABEL_82;
  v71 = *(_QWORD *)v70;
  if (!*(_QWORD *)v70 || (*(_BYTE *)(v70 + 8) & 3) != 0)
    goto LABEL_82;
  if ((v71 & 0xFFFE000000000002) != 0)
  {
LABEL_117:
    v33 = 0;
    goto LABEL_83;
  }
  if (*(_BYTE *)(v71 + 5) == 68)
    v33 = *(_QWORD *)v70;
  else
    v33 = 0;
LABEL_83:
  v72 = v95;
  v95 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v18);
    else
      *(_DWORD *)v72 -= 2;
  }
LABEL_86:
  v73 = *(_QWORD *)(v6 + 16);
  if (v73)
  {
    if (*(_QWORD *)(v6 + 24) != v73)
    {
      v83 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
      v84 = *(objc_class **)(v73 + 8);
      v85 = v6;
      JSC::VM::clearException((JSC::VM *)v6);
      v86 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
      v87 = WebCore::DOMGuardedObject::DOMGuardedObject(v86, v83, v11);
      *(_QWORD *)v87 = &off_1E3226868;
      *((_DWORD *)v87 + 10) = 0;
      *((_BYTE *)v87 + 44) = 0;
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v87, v84, 0);
      if (*((_DWORD *)v86 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v86 + 16))(v86);
      else
        --*((_DWORD *)v86 + 4);
      v6 = v85;
    }
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 10;
    else
      return v11;
  }
  return v33;
}

WebCore::DOMGuardedObject *WebCore::rejectPromiseWithExceptionIfAny(uint64_t a1, unint64_t a2, unint64_t a3, WebCore::DOMGuardedObject **a4)
{
  WebCore::DOMGuardedObject *result;
  uint64_t v5;
  objc_class *v8;
  WebCore::DOMGuardedObject *v9;

  result = *a4;
  v5 = *((_QWORD *)*a4 + 2);
  if (v5)
  {
    if (*((_QWORD *)result + 3) != v5)
    {
      v8 = *(objc_class **)(v5 + 8);
      JSC::VM::clearException(result);
      WebCore::DeferredPromise::create(a2, a3, 0, &v9);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v9, v8, 0);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          return (WebCore::DOMGuardedObject *)(*(uint64_t (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 4);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = *(unint64_t **)(*(_QWORD *)(result + 24) + 80);
  if (v4)
  {
    if ((v4[1] & 3) == 0)
    {
      v5 = *v4;
      if (*v4)
      {
        if ((v5 & 8) != 0)
        {
          if ((*(_BYTE *)(v5 - 79) & 1) == 0)
            goto LABEL_13;
        }
        else
        {
          v8 = v5 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v10 = *v4;
            v11 = v5 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
            v5 = v10;
            v8 = v11;
          }
          if (((*(_QWORD *)(v8 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
            goto LABEL_13;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_4;
LABEL_13:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_4:
  v6 = *(unint64_t **)(*(_QWORD *)(v3 + 24) + 96);
  if (v6)
  {
    if ((v6[1] & 3) == 0)
    {
      v7 = *v6;
      if (*v6)
      {
        if ((v7 & 8) != 0)
        {
          if ((*(_BYTE *)(v7 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v9 = v7 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
            v9 = v7 & 0xFFFFFFFFFFFFC000;
          }
          if (((*(_QWORD *)(v9 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSCustomEvent::detail(WebCore::JSCustomEvent *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t result;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *Allocator;
  uint64_t v20;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v5 + 88);
  v7 = (JSC::JSCell *)result;
  if (!result)
  {
    v8 = *(_QWORD *)(v5 + 96);
    v9 = v5;
    if (!v8)
      goto LABEL_5;
    v7 = *(JSC::JSCell **)v8;
    v9 = v5;
    if (!*(_QWORD *)v8)
      goto LABEL_5;
    v9 = v5;
    if ((*(_BYTE *)(v8 + 8) & 3) != 0)
      goto LABEL_5;
  }
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v7 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v7) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_16:
      result = *(_QWORD *)(v5 + 88);
      goto LABEL_17;
    }
    v9 = *((_QWORD *)this + 3);
LABEL_5:
    v10 = *(_QWORD *)(v9 + 72);
    if (!v10)
    {
      v11 = *(_QWORD *)(v9 + 80);
      if (v11 && *(_QWORD *)v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) != 0)
          v10 = 2;
        else
          v10 = *(_QWORD *)v11;
      }
      else
      {
        v10 = 2;
      }
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v12 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, (JSC::JSCell *)v10);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v5 + 88) = result;
      v15 = *(_QWORD *)(v5 + 96);
      if (!v15)
        return result;
      *(_QWORD *)(v15 + 8) = 3;
      *(_QWORD *)(v5 + 96) = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 88) = 0;
      if (result)
      {
        v16 = result;
        if ((result & 8) != 0)
          v17 = (result - 112) | 1;
        else
          v17 = result & 0xFFFFFFFFFFFFC000;
        if ((v17 & 1) != 0)
          v18 = v17 + 47;
        else
          v18 = *(_QWORD *)v17 + 32;
        Allocator = *(_QWORD **)(v18 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v18 + 16) = *Allocator;
        *Allocator = v16;
        Allocator[1] = 0;
        Allocator[2] = 0;
        __dmb(0xAu);
        v20 = *(_QWORD *)(v5 + 96);
        *(_QWORD *)(v5 + 96) = Allocator;
        if (v20)
          *(_QWORD *)(v20 + 8) = 3;
        if (*(_DWORD *)(v12 + 760) >= *((unsigned __int8 *)this + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), (const JSCell *)this);
      }
      else
      {
        __dmb(0xAu);
        v13 = *(_QWORD *)(v5 + 96);
        *(_QWORD *)(v5 + 96) = 0;
        if (v13)
          *(_QWORD *)(v13 + 8) = 3;
      }
    }
    goto LABEL_16;
  }
LABEL_17:
  if (!result)
  {
    v14 = *(_BYTE **)(v5 + 96);
    if (v14 && *(_QWORD *)v14)
    {
      if ((v14[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v14;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::activeDOMWindow(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 3408);
  if (*(_BYTE *)(result + 56))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::canAccessDocument(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityOrigin *v10;
  WebCore::SecurityOrigin *v11;
  WTF::StringImpl *v12;
  const WebCore::SecurityOrigin *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if (!a2)
    return 0;
  v4 = a2;
  v6 = *((_QWORD *)a2 + 329);
  if (v6)
  {
    v7 = *(WTF::StringImpl **)(v6 + 8);
    if (v7)
      v4 = v7;
  }
  v8 = *(_QWORD *)(a1 + 3408);
  if (*(_BYTE *)(v8 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x19569E520);
  }
  v9 = *(_QWORD *)(v8 + 72);
  if (v9)
  {
    v9 = *(_QWORD *)(v9 + 8);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19569E540);
      }
      v9 -= 288;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), a2);
  v11 = v10;
  WebCore::SecurityContext::securityOrigin((WTF::StringImpl *)((char *)v4 + 192), v12);
  if ((WebCore::SecurityOrigin::isSameOriginDomain(v11, v13) & 1) != 0)
    return 1;
  if (a3 == 1)
  {
    v17 = *((_QWORD *)v4 + 66);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(*((WTF::StringImpl **)v4 + 87), (WTF::StringImpl *)v8, 1, (char **)&v20);
      if (v18)
        WebCore::LocalDOMWindow::printErrorMessage(*(_QWORD *)(*(_QWORD *)(v18 + 296) + 696), (const WTF::String *)&v20);
    }
    else
    {
      WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(*((WTF::StringImpl **)v4 + 87), (WTF::StringImpl *)v8, 1, (char **)&v20);
    }
    v16 = v20;
    v20 = 0;
    if (!v16)
      return 0;
  }
  else
  {
    if (a3 != 2)
      return 0;
    v20 = *(WTF::StringImpl **)(a1 + 56);
    WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(*((WTF::StringImpl **)v4 + 87), (WTF::StringImpl *)v8, 0, (char **)&v19);
    WebCore::throwSecurityError((JSC::JSGlobalObject *)a1, &v20, &v19);
    v16 = v19;
    v19 = 0;
    if (!v16)
      return 0;
  }
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v15);
  else
    *(_DWORD *)v16 -= 2;
  return 0;
}

uint64_t WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(WTF::StringImpl *a1, WTF::StringImpl *a2, int a3)
{
  if (a2)
  {
    if (!*((_BYTE *)a2 + 56))
      return WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, a2, a3);
    WebCore::reportErrorAccessingRemoteFrame(a1, a3);
  }
  return 0;
}

{
  if (!*((_BYTE *)a2 + 56))
    return WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, a2, a3);
  WebCore::reportErrorAccessingRemoteFrame(a1, a3);
  return 0;
}

WTF::StringImpl *WebCore::reportErrorAccessingRemoteFrame(WTF::StringImpl *result, int a2)
{
  _DWORD *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13[7];

  if (a2 == 2)
  {
    v13[5] = v2;
    v13[6] = v3;
    v4 = result;
    v5 = (JSC::VM *)*((_QWORD *)result + 7);
    WebCore::remoteFrameAccessError((WebCore *)&v12, *((JSC::JSGlobalObject **)result + 426));
    v6 = *((_QWORD *)v4 + 7);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7 && *(_QWORD *)(v6 + 24) == v7)
    {
      v8 = 10;
    }
    else
    {
      WebCore::DOMException::create(0xEu, &v12, (uint64_t *)v13);
      v8 = WebCore::wrap<WebCore::DOMException>((uint64_t)v4, (uint64_t)v4, v13[0]);
      v9 = v13[0];
      v13[0] = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      JSC::addErrorInfo();
    }
    v10.super.isa = (Class)v8;
    JSC::VM::throwException(v5, v4, v10);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3, WTF::String *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  WebCore::SecurityOrigin *v14;
  WebCore::SecurityOrigin *v15;
  WTF::StringImpl *v16;
  const WebCore::SecurityOrigin *v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  if (!a2)
    return 0;
  if (*((_BYTE *)a2 + 56))
  {
    WebCore::remoteFrameAccessError((WebCore *)&v25, this[426]);
    goto LABEL_19;
  }
  v7 = *((_QWORD *)a2 + 9);
  if (!v7)
    goto LABEL_17;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_17;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19569E87CLL);
  }
  v9 = v8 - 288;
  v10 = *(_QWORD *)(v8 + 2344);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v9 = v11;
  }
  v12 = this[426];
  if (*((_BYTE *)v12 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x19569E89CLL);
  }
  v13 = *((_QWORD *)v12 + 9);
  if (v13)
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19569E8BCLL);
      }
      v13 -= 288;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v13 + 192), a2);
  v15 = v14;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), v16);
  if ((WebCore::SecurityOrigin::isSameOriginDomain(v15, v17) & 1) == 0)
  {
LABEL_17:
    v19 = this[426];
    if (*((_BYTE *)v19 + 56))
    {
      __break(0xC471u);
      JUMPOUT(0x19569E8DCLL);
    }
    WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(a2, v19, 0, (char **)&v25);
LABEL_19:
    v21 = v25;
    v25 = 0;
    v22 = *a3;
    *a3 = v21;
    if (v22)
    {
      v23 = *(_DWORD *)v22 - 2;
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        v22 = v25;
        v25 = 0;
        if (!v22)
          return 0;
        v23 = *(_DWORD *)v22 - 2;
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v24);
          return 0;
        }
      }
      *(_DWORD *)v22 = v23;
    }
    return 0;
  }
  return 1;
}

WTF::StringImpl *WebCore::remoteFrameAccessError(WebCore *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  char *v22;

  if (*((_BYTE *)a2 + 56))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  v3 = *((_QWORD *)a2 + 9);
  if (v3)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19569EB14);
      }
      v3 -= 288;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3 + 192), a2);
  v5 = v4;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = v4[8];
  if ((_DWORD)v7 == 1)
    goto LABEL_43;
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_45;
  }
  v22 = &v21;
  v8 = (_QWORD *)((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v7])(&v22, v4 + 2);
  if (MEMORY[0x19AEA53F4](*v8, "file", 4) && *((_BYTE *)v5 + 59))
LABEL_43:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v5 + 2), &v20);
  if (!v20)
  {
    v9 = 0;
    goto LABEL_14;
  }
  v9 = *((_DWORD *)v20 + 1);
  if (v9 < 0)
  {
LABEL_45:
    *(_QWORD *)this = 0;
LABEL_46:
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x19569EA7CLL);
  }
LABEL_14:
  v10 = __OFADD__(v9, 80);
  v11 = v9 + 80;
  if (v10 || __OFADD__(v11, 29))
    goto LABEL_45;
  v12 = !v20 || (*((_BYTE *)v20 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v11 + 29), v12, (int8x16_t *)"Blocked a frame with origin \"", 0x1Du, (uint64_t)v20, (int8x16_t *)"\" from accessing a cross-origin frame. Protocols, domains, and ports must match.", 0x50u, this);
  if (!*(_QWORD *)this)
    goto LABEL_46;
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v15 = __ldaxr(v5);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v5));
  if (!v16)
  {
    atomic_store(1u, v5);
    v17 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
    *((_QWORD *)v5 + 6) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v5[8];
    if ((_DWORD)v19 != -1)
      ((void (*)(char **, unsigned int *))off_1E33923F0[v19])(&v22, v5 + 2);
    v5[8] = -1;
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v5, v13);
  }
  return result;
}

uint64_t WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  WTF **v24;
  const WTF::StringImpl **v25;
  const WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF **v31;
  const WTF::StringImpl **v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t IdentifierInternal;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  WebCore::JSDOMBuiltinConstructorBase *v63;
  JSC::JSCell *v64;
  JSC::AbstractSlotVisitor *v65;
  _QWORD v66[2];
  char v67;
  WTF::StringImpl *v68[2];
  char v69;
  char v70;
  char *v71;

  v6 = a3;
  if (*((_BYTE *)a2 + 56))
  {
    WebCore::remoteFrameAccessError((WebCore *)v68, this[426]);
    goto LABEL_85;
  }
  v9 = *((_QWORD *)a2 + 9);
  if (!v9)
    goto LABEL_83;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_83;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19569EFF0);
  }
  v11 = v10 - 288;
  v12 = *(_QWORD *)(v10 + 2344);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v11 = v13;
  }
  v14 = this[426];
  if (*((_BYTE *)v14 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x19569F010);
  }
  v15 = *((_QWORD *)v14 + 9);
  if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
  {
    if (*(_BYTE *)(v16 + 178))
    {
      a3 = (WTF::StringImpl **)"match_constness_t<Source, Target> *WTF::downcast(Source *) [Target = WebCore::Document, S"
                               "ource = WebCore::ScriptExecutionContext]";
      a4 = 2;
      __break(0xC471u);
      goto LABEL_67;
    }
    v4 = v16 - 288;
  }
  else
  {
    v4 = 0;
  }
  v17 = *(uint64_t **)(v4 + 200);
  if (v17)
    goto LABEL_14;
  if (!*(_BYTE *)(v4 + 280))
    goto LABEL_63;
  v42 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v42 = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v44 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v44 != -1)
  {
    v68[0] = (WTF::StringImpl *)&v71;
    v66[0] = v68;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v16 = WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_67;
  v45 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(v42 + 8) = IdentifierInternal;
  *(_QWORD *)(v42 + 16) = v45;
  v5 = 1;
  *(_DWORD *)(v42 + 32) = 1;
  v46 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v46 += 2;
  *(_QWORD *)(v42 + 40) = v46;
  *(_QWORD *)(v42 + 48) = 0;
  *(_QWORD *)(v42 + 54) = 0;
  *(_WORD *)(v42 + 62) = 1;
  v17 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  v17[1] = v42;
  v47 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)(v4 + 200) = v17;
  if (!v47)
    goto LABEL_14;
  if (*(_DWORD *)v47 != 1)
  {
    --*(_DWORD *)v47;
    goto LABEL_14;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v47 + 1, a2);
  WTF::fastFree((WTF *)v47, v54);
  v17 = *(uint64_t **)(v4 + 200);
  if (!v17)
  {
LABEL_63:
    v4 = 0;
    goto LABEL_16;
  }
LABEL_14:
  v18 = (*(_DWORD *)v17)++;
  v4 = v17[1];
  if (v18)
  {
    *(_DWORD *)v17 = v18;
  }
  else
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v17 + 1, a2);
    WTF::fastFree((WTF *)v17, v40);
  }
LABEL_16:
  v19 = *(uint64_t **)(v11 + 200);
  if (v19)
    goto LABEL_17;
  if (!*(_BYTE *)(v11 + 280))
    goto LABEL_65;
  v48 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v48 = 1;
  v49 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v50 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v50 != -1)
  {
    v68[0] = (WTF::StringImpl *)&v71;
    v66[0] = v68;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v16 = WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v51 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(v48 + 8) = v49;
  *(_QWORD *)(v48 + 16) = v51;
  *(_DWORD *)(v48 + 32) = 1;
  v52 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v52 += 2;
  *(_QWORD *)(v48 + 40) = v52;
  *(_QWORD *)(v48 + 48) = 0;
  *(_QWORD *)(v48 + 54) = 0;
  *(_WORD *)(v48 + 62) = 1;
  v19 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  v19[1] = v48;
  v53 = *(uint64_t **)(v11 + 200);
  *(_QWORD *)(v11 + 200) = v19;
  if (!v53)
    goto LABEL_17;
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_17;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v53 + 1, a2);
  WTF::fastFree((WTF *)v53, v55);
  v19 = *(uint64_t **)(v11 + 200);
  if (!v19)
  {
LABEL_65:
    v5 = 0;
    goto LABEL_19;
  }
LABEL_17:
  v20 = (*(_DWORD *)v19)++;
  v5 = v19[1];
  if (v20)
  {
    *(_DWORD *)v19 = v20;
  }
  else
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v19 + 1, a2);
    WTF::fastFree((WTF *)v19, v41);
  }
LABEL_19:
  result = 1;
  if (v4 != v5 && !*(_BYTE *)(v4 + 56))
  {
    v16 = *(unsigned int *)(v4 + 32);
    if ((_DWORD)v16 != 1 && *(_DWORD *)(v5 + 32) != 1)
    {
      if ((_DWORD)v16 != -1)
      {
        v68[0] = (WTF::StringImpl *)v66;
        v22 = ((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v16])(v68, v4 + 8, a3, a4);
        v23 = *(unsigned int *)(v5 + 32);
        if ((_DWORD)v23 != -1)
        {
          v24 = (WTF **)v22;
          v68[0] = (WTF::StringImpl *)v66;
          v25 = (const WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v23])(v68, v5 + 8);
          if (!WTF::equal(*v24, *v25, v26))
            goto LABEL_83;
          if (*(unsigned __int8 *)(v4 + 57) | *(unsigned __int8 *)(v5 + 57))
          {
            if (!*(_BYTE *)(v4 + 57)
              || !*(_BYTE *)(v5 + 57)
              || (WTF::equal(*(WTF **)(v4 + 40), *(const WTF::StringImpl **)(v5 + 40), v27) & 1) == 0)
            {
              goto LABEL_83;
            }
            goto LABEL_40;
          }
          v28 = *(unsigned int *)(v4 + 32);
          if ((_DWORD)v28 != -1)
          {
            v68[0] = (WTF::StringImpl *)v66;
            v29 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v28])(v68, v4 + 8);
            v30 = *(unsigned int *)(v5 + 32);
            if ((_DWORD)v30 != -1)
            {
              v31 = (WTF **)v29;
              v68[0] = (WTF::StringImpl *)v66;
              v32 = (const WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v30])(v68, v5 + 8);
              if (!WTF::equal(*v31, *v32, v33))
                goto LABEL_83;
              v34 = *(unsigned int *)(v4 + 32);
              if ((_DWORD)v34 != -1)
              {
                v68[0] = (WTF::StringImpl *)v66;
                v35 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v34])(v68, v4 + 8);
                v36 = *(unsigned int *)(v5 + 32);
                if ((_DWORD)v36 != -1)
                {
                  v37 = v35;
                  v68[0] = (WTF::StringImpl *)v66;
                  v38 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v36])(v68, v5 + 8);
                  v39 = v38 & 0xFF0000;
                  if ((v37 & 0xFF0000) != 0 && v39)
                  {
                    if ((unsigned __int16)v37 != (unsigned __int16)v38)
                      goto LABEL_83;
                    goto LABEL_40;
                  }
                  if (((v37 & 0xFF0000) != 0) == (v39 != 0))
                  {
LABEL_40:
                    if (*(_BYTE *)(v4 + 63) && *(unsigned __int8 *)(v4 + 59) | *(unsigned __int8 *)(v5 + 59))
                      goto LABEL_83;
                    return 1;
                  }
LABEL_83:
                  v58 = this[426];
                  if (*((_BYTE *)v58 + 56))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19569F200);
                  }
                  WebCore::LocalDOMWindow::crossDomainAccessErrorMessage(a2, v58, 0, (char **)v68);
LABEL_85:
                  v59 = v68[0];
                  v68[0] = 0;
                  v60 = *v6;
                  *v6 = v59;
                  if (v60)
                  {
                    v61 = *(_DWORD *)v60 - 2;
                    if (*(_DWORD *)v60 == 2)
                    {
                      WTF::StringImpl::destroy(v60, v57);
                      v60 = v68[0];
                      v68[0] = 0;
                      if (!v60)
                        return 0;
                      v61 = *(_DWORD *)v60 - 2;
                      if (*(_DWORD *)v60 == 2)
                      {
                        WTF::StringImpl::destroy(v60, v62);
                        return 0;
                      }
                    }
                    *(_DWORD *)v60 = v61;
                  }
                  return 0;
                }
              }
            }
          }
        }
      }
LABEL_94:
      v63 = (WebCore::JSDOMBuiltinConstructorBase *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::JSDOMBuiltinConstructorBase::visitChildren(v63, v64, v65);
    }
LABEL_68:
    if ((_DWORD)v16 != -1)
    {
      v66[0] = &v71;
      ((void (*)(WTF::StringImpl **__return_ptr, _QWORD *, uint64_t, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v16])(v68, v66, v4 + 8, a3, a4);
      v56 = *(unsigned int *)(v5 + 32);
      if ((_DWORD)v56 != -1)
      {
        v71 = &v70;
        ((void (*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v56])(v66, &v71, v5 + 8);
        if (v69 && v67)
        {
          if (v68[0] != (WTF::StringImpl *)v66[0] || v68[1] != (WTF::StringImpl *)v66[1])
            goto LABEL_83;
        }
        else if ((v69 != 0) != (v67 != 0))
        {
          goto LABEL_83;
        }
        return 1;
      }
    }
    goto LABEL_94;
  }
  return result;
}

uint64_t WebCore::JSDOMBuiltinConstructorBase::visitChildren(WebCore::JSDOMBuiltinConstructorBase *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::InternalFunction::visitChildren();
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 6));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSDOMBuiltinConstructorBase::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = JSC::InternalFunction::visitChildren();
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v6 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v7;
        v6 = v8;
      }
      if (((*(_QWORD *)(v6 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (!*(_QWORD *)(a2 + 168))
      return result;
    return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::callThrowTypeErrorForJSDOMConstructor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::throwTypeError();
  return 2;
}

uint64_t WebCore::callThrowTypeErrorForJSDOMConstructorNotConstructable(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::throwTypeError();
  return 2;
}

uint64_t WebCore::jsDate(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t SlowCase;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  unint64_t v8;
  _QWORD v9[3];

  v1 = *(_QWORD **)(a1 + 56);
  v2 = v1 + 4753;
  v3 = *(_QWORD *)(a1 + 1488);
  if ((v3 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v3 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(a1 - 16);
    if ((a1 & 8) == 0)
      v7 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v9[0] = *v7;
    v9[1] = a1;
    v9[2] = a1 + 1488;
    v6(v9);
  }
  SlowCase = *v2;
  if ((unint64_t)*v2 >= v1[4754])
  {
    SlowCase = v1[4755];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_4;
    }
    v8 = *(_QWORD *)(SlowCase + 8) ^ v1[4756];
    v1[4754] = SlowCase + HIDWORD(v8);
    v1[4755] = SlowCase + (int)v8;
  }
  *v2 = SlowCase + 32;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  JSC::DateInstance::DateInstance();
  JSC::DateInstance::finishCreation();
  return SlowCase;
}

double WebCore::valueToDate(JSC::JSGlobalObject *a1, unint64_t a2)
{
  double v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  double v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 >> 49)
    {
      if (a2 >= 0xFFFE000000000000)
        v2 = (double)(int)a2;
      else
        *(_QWORD *)&v2 = a2 - 0x2000000000000;
      return v2 / 1000.0;
    }
LABEL_11:
    v2 = NAN;
    return v2 / 1000.0;
  }
  if (MEMORY[0x1E0CBE2E0] == 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C))
  {
    v2 = *(double *)(a2 + 16);
    return v2 / 1000.0;
  }
  if (*(_BYTE *)(a2 + 5) != 2)
    goto LABEL_11;
  v4 = *((_QWORD *)a1 + 7);
  JSC::JSCell::getString((JSC::JSCell *)a2, a1);
  JSC::DateCache::parseDate((JSC::DateCache *)(v4 + 90592), a1, (JSC::VM *)v4, (const WTF::String *)&v9);
  v2 = v6;
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v2 / 1000.0;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLByte>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  double v6;
  double v7;
  int v8;
  WTF::StringImpl *v9;
  double v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13[2];
  char v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  result = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v12 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    if ((_DWORD)a2 == (char)a2)
    {
      *(_BYTE *)a3 = a2;
      *(_DWORD *)(a3 + 4) = 0;
      return result;
    }
    result = (WTF::StringImpl *)JSC::throwTypeError();
    goto LABEL_18;
  }
  if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, a1);
    result = v11;
    v6 = v10;
  }
  else
  {
    *(_QWORD *)&v6 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
    {
LABEL_18:
      v8 = 1;
      goto LABEL_19;
    }
  }
  v13[1] = *((WTF::StringImpl **)a1 + 7);
  if (fabs(v6) == INFINITY)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v15 = 0x405FC00000000000;
    v16 = 0xC060000000000000;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
      goto LABEL_24;
    goto LABEL_15;
  }
  v7 = trunc(v6);
  if (v7 < -128.0 || v7 > 127.0)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v16 = 0xC060000000000000;
    v15 = 0x405FC00000000000;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x19569F6E8);
    }
LABEL_15:
    JSC::throwTypeError();
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_18;
  }
  v8 = 0;
  *(_BYTE *)a3 = (int)v7;
LABEL_19:
  *(_DWORD *)(a3 + 4) = v8;
  return result;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLOctet>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  double v7;
  double v8;
  int v9;
  WTF::StringImpl *v10;
  double v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  result = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v13 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    if ((a2 & 0xFFFFFF00) == 0)
    {
      *(_BYTE *)a3 = a2;
      *(_DWORD *)(a3 + 4) = 0;
      return result;
    }
    result = (WTF::StringImpl *)JSC::throwTypeError();
    goto LABEL_22;
  }
  if (a2 >= 0xFFFE000000000000)
  {
    v7 = (double)(int)a2;
  }
  else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v12 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v13, a1);
    result = v12;
    v7 = v11;
  }
  else
  {
    *(_QWORD *)&v7 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
    {
LABEL_22:
      v9 = 1;
      goto LABEL_23;
    }
  }
  v14[1] = *((WTF::StringImpl **)a1 + 7);
  if (fabs(v7) == INFINITY)
  {
    v20 = " is outside the range [";
    v21 = 24;
    v18 = ", ";
    v19 = 3;
    v16 = 0x406FE00000000000;
    v17 = 0;
    v15 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, "Value ", 7, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v18, (uint64_t)&v16, &v15);
    if (!v14[0])
      goto LABEL_29;
    goto LABEL_19;
  }
  v8 = trunc(v7);
  if (v8 < 0.0 || v8 > 255.0)
  {
    v20 = " is outside the range [";
    v21 = 24;
    v18 = ", ";
    v19 = 3;
    v16 = 0x406FE00000000000;
    v17 = 0;
    v15 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, "Value ", 7, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v18, (uint64_t)&v16, &v15);
    if (!v14[0])
    {
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x19569F900);
    }
LABEL_19:
    JSC::throwTypeError();
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_22;
  }
  v9 = 0;
  *(_BYTE *)a3 = (int)v8;
LABEL_23:
  *(_DWORD *)(a3 + 4) = v9;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLByte>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::JSGlobalObject *v4;
  double v5;
  int v6;
  double v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    if ((_DWORD)a2 == (char)a2)
    {
      *(_BYTE *)a3 = a2;
LABEL_14:
      *(_DWORD *)(a3 + 4) = 0;
      return result;
    }
    if ((int)a2 <= -129)
      goto LABEL_11;
    goto LABEL_12;
  }
  v4 = (JSC::JSGlobalObject *)result;
  result = *(_QWORD *)(result + 56);
  if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v8 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v9, v4);
    result = v8;
    v5 = v7;
  }
  else
  {
    *(_QWORD *)&v5 = a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(result + 80)
    || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), !(_DWORD)result))
  {
    if (v5 < 127.0)
    {
      if (v5 > -128.0)
      {
        v6 = (int)v5;
LABEL_13:
        *(_BYTE *)a3 = v6;
        goto LABEL_14;
      }
LABEL_11:
      LOBYTE(v6) = 0x80;
      goto LABEL_13;
    }
LABEL_12:
    LOBYTE(v6) = 127;
    goto LABEL_13;
  }
  *(_DWORD *)(a3 + 4) = 1;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLOctet>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::JSGlobalObject *v5;
  double v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  unint64_t v11;

  v11 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    if ((a2 & 0xFFFFFF00) != 0)
      LOBYTE(v7) = -1;
    else
      LOBYTE(v7) = a2;
  }
  else
  {
    v5 = (JSC::JSGlobalObject *)result;
    result = *(_QWORD *)(result + 56);
    if (a2 >= 0xFFFE000000000000)
    {
      v6 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v10 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v11, v5);
      result = v10;
      v6 = v9;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(result + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
      if ((result & 1) != 0)
      {
        v8 = 1;
        goto LABEL_18;
      }
    }
    if (v6 >= 255.0)
    {
      LOBYTE(v7) = -1;
    }
    else if (v6 <= 0.0)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      v7 = (int)v6;
    }
  }
  v8 = 0;
  *(_BYTE *)a3 = v7;
LABEL_18:
  *(_DWORD *)(a3 + 4) = v8;
  return result;
}

void WebCore::convertToInteger<WebCore::IDLByte>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  JSC::VM *v12;
  unint64_t v13;

  v13 = a2;
  if (a2 < 0xFFFE000000000000)
  {
    v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v12 = v5;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v13, a1);
      v5 = v12;
      v6 = v11;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      v10 = 1;
      goto LABEL_13;
    }
    LOBYTE(a2) = 0;
    if (fabs(v6) != INFINITY && v6 != 0.0)
    {
      v7 = -floor(-v6);
      v8 = floor(v6);
      if (v6 >= 0.0)
        v7 = v8;
      v9 = fmod(v7, 256.0);
      if (v9 > 127.0)
        v9 = v9 + -256.0;
      LODWORD(a2) = (int)v9;
    }
  }
  v10 = 0;
  *(_BYTE *)a3 = a2;
LABEL_13:
  *(_DWORD *)(a3 + 4) = v10;
}

void WebCore::convertToInteger<WebCore::IDLOctet>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  JSC::VM *v13;
  unint64_t v14;

  v14 = a2;
  if (a2 < 0xFFFE000000000000 || (a2 & 0x80000000) != 0)
  {
    v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (a2 >= 0xFFFE000000000000)
    {
      v7 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v13 = v6;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v14, a1);
      v6 = v13;
      v7 = v12;
    }
    else
    {
      *(_QWORD *)&v7 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    {
      v11 = 1;
      goto LABEL_17;
    }
    LOBYTE(a2) = 0;
    if (fabs(v7) != INFINITY && v7 != 0.0)
    {
      v8 = -floor(-v7);
      v9 = floor(v7);
      if (v7 >= 0.0)
        v8 = v9;
      v10 = fmod(v8, 256.0);
      if (v10 < 0.0)
        v10 = v10 + 256.0;
      LODWORD(a2) = (int)v10;
    }
  }
  v11 = 0;
  *(_BYTE *)a3 = a2;
LABEL_17:
  *(_DWORD *)(a3 + 4) = v11;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLShort>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  double v6;
  double v7;
  int v8;
  WTF::StringImpl *v9;
  double v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13[2];
  char v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  result = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v12 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    if ((_DWORD)a2 == (__int16)a2)
    {
      *(_WORD *)a3 = a2;
      *(_DWORD *)(a3 + 4) = 0;
      return result;
    }
    result = (WTF::StringImpl *)JSC::throwTypeError();
    goto LABEL_18;
  }
  if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, a1);
    result = v11;
    v6 = v10;
  }
  else
  {
    *(_QWORD *)&v6 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
    {
LABEL_18:
      v8 = 1;
      goto LABEL_19;
    }
  }
  v13[1] = *((WTF::StringImpl **)a1 + 7);
  if (fabs(v6) == INFINITY)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v15 = 0x40DFFFC000000000;
    v16 = 0xC0E0000000000000;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
      goto LABEL_24;
    goto LABEL_15;
  }
  v7 = trunc(v6);
  if (v7 < -32768.0 || v7 > 32767.0)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v16 = 0xC0E0000000000000;
    v15 = 0x40DFFFC000000000;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x19569FF28);
    }
LABEL_15:
    JSC::throwTypeError();
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_18;
  }
  v8 = 0;
  *(_WORD *)a3 = (int)v7;
LABEL_19:
  *(_DWORD *)(a3 + 4) = v8;
  return result;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedShort>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  double v7;
  double v8;
  int v9;
  WTF::StringImpl *v10;
  double v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  result = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v13 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    if ((a2 & 0xFFFF0000) == 0)
    {
      *(_WORD *)a3 = a2;
      *(_DWORD *)(a3 + 4) = 0;
      return result;
    }
    result = (WTF::StringImpl *)JSC::throwTypeError();
    goto LABEL_22;
  }
  if (a2 >= 0xFFFE000000000000)
  {
    v7 = (double)(int)a2;
  }
  else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v12 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v13, a1);
    result = v12;
    v7 = v11;
  }
  else
  {
    *(_QWORD *)&v7 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
    {
LABEL_22:
      v9 = 1;
      goto LABEL_23;
    }
  }
  v14[1] = *((WTF::StringImpl **)a1 + 7);
  if (fabs(v7) == INFINITY)
  {
    v20 = " is outside the range [";
    v21 = 24;
    v18 = ", ";
    v19 = 3;
    v16 = 0x40EFFFE000000000;
    v17 = 0;
    v15 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, "Value ", 7, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v18, (uint64_t)&v16, &v15);
    if (!v14[0])
      goto LABEL_29;
    goto LABEL_19;
  }
  v8 = trunc(v7);
  if (v8 < 0.0 || v8 > 65535.0)
  {
    v20 = " is outside the range [";
    v21 = 24;
    v18 = ", ";
    v19 = 3;
    v16 = 0x40EFFFE000000000;
    v17 = 0;
    v15 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, "Value ", 7, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v18, (uint64_t)&v16, &v15);
    if (!v14[0])
    {
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x1956A0140);
    }
LABEL_19:
    JSC::throwTypeError();
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_22;
  }
  v9 = 0;
  *(_WORD *)a3 = (int)v8;
LABEL_23:
  *(_DWORD *)(a3 + 4) = v9;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLShort>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::JSGlobalObject *v4;
  double v5;
  int v6;
  double v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    if ((_DWORD)a2 == (__int16)a2)
    {
      *(_WORD *)a3 = a2;
LABEL_14:
      *(_DWORD *)(a3 + 4) = 0;
      return result;
    }
    if ((int)a2 <= -32769)
      goto LABEL_11;
    goto LABEL_12;
  }
  v4 = (JSC::JSGlobalObject *)result;
  result = *(_QWORD *)(result + 56);
  if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v8 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v9, v4);
    result = v8;
    v5 = v7;
  }
  else
  {
    *(_QWORD *)&v5 = a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(result + 80)
    || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), !(_DWORD)result))
  {
    if (v5 < 32767.0)
    {
      if (v5 > -32768.0)
      {
        v6 = (int)v5;
LABEL_13:
        *(_WORD *)a3 = v6;
        goto LABEL_14;
      }
LABEL_11:
      LOWORD(v6) = 0x8000;
      goto LABEL_13;
    }
LABEL_12:
    LOWORD(v6) = 0x7FFF;
    goto LABEL_13;
  }
  *(_DWORD *)(a3 + 4) = 1;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLUnsignedShort>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::JSGlobalObject *v5;
  double v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  unint64_t v11;

  v11 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    if ((a2 & 0xFFFF0000) != 0)
      LOWORD(v7) = -1;
    else
      LOWORD(v7) = a2;
  }
  else
  {
    v5 = (JSC::JSGlobalObject *)result;
    result = *(_QWORD *)(result + 56);
    if (a2 >= 0xFFFE000000000000)
    {
      v6 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v10 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v11, v5);
      result = v10;
      v6 = v9;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(result + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
      if ((result & 1) != 0)
      {
        v8 = 1;
        goto LABEL_18;
      }
    }
    if (v6 >= 65535.0)
    {
      LOWORD(v7) = -1;
    }
    else if (v6 <= 0.0)
    {
      LOWORD(v7) = 0;
    }
    else
    {
      v7 = (int)v6;
    }
  }
  v8 = 0;
  *(_WORD *)a3 = v7;
LABEL_18:
  *(_DWORD *)(a3 + 4) = v8;
  return result;
}

void WebCore::convertToInteger<WebCore::IDLShort>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  JSC::VM *v12;
  unint64_t v13;

  v13 = a2;
  if (a2 < 0xFFFE000000000000)
  {
    v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v12 = v5;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v13, a1);
      v5 = v12;
      v6 = v11;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      v10 = 1;
      goto LABEL_13;
    }
    LOWORD(a2) = 0;
    if (fabs(v6) != INFINITY && v6 != 0.0)
    {
      v7 = -floor(-v6);
      v8 = floor(v6);
      if (v6 >= 0.0)
        v7 = v8;
      v9 = fmod(v7, 65536.0);
      if (v9 > 32767.0)
        v9 = v9 + -65536.0;
      LODWORD(a2) = (int)v9;
    }
  }
  v10 = 0;
  *(_WORD *)a3 = a2;
LABEL_13:
  *(_DWORD *)(a3 + 4) = v10;
}

void WebCore::convertToInteger<WebCore::IDLUnsignedShort>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  JSC::VM *v13;
  unint64_t v14;

  v14 = a2;
  if (a2 < 0xFFFE000000000000 || (a2 & 0x80000000) != 0)
  {
    v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (a2 >= 0xFFFE000000000000)
    {
      v7 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v13 = v6;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v14, a1);
      v6 = v13;
      v7 = v12;
    }
    else
    {
      *(_QWORD *)&v7 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    {
      v11 = 1;
      goto LABEL_17;
    }
    LOWORD(a2) = 0;
    if (fabs(v7) != INFINITY && v7 != 0.0)
    {
      v8 = -floor(-v7);
      v9 = floor(v7);
      if (v7 >= 0.0)
        v8 = v9;
      v10 = fmod(v8, 65536.0);
      if (v10 < 0.0)
        v10 = v10 + 65536.0;
      LODWORD(a2) = (int)v10;
    }
  }
  v11 = 0;
  *(_WORD *)a3 = a2;
LABEL_17:
  *(_DWORD *)(a3 + 4) = v11;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLLong>@<X0>(WTF::StringImpl *result@<X0>, unint64_t a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  JSC::VM *v3;
  double v4;
  double v5;
  JSC::JSGlobalObject *v6;
  unint64_t v8;

  v8 = a2;
  if (a2 < 0xFFFE000000000000)
  {
    v6 = result;
    v3 = (JSC::VM *)*((_QWORD *)result + 7);
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v8, result);
      v4 = v5;
    }
    else
    {
      *(_QWORD *)&v4 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v3 + 20)
      && (result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v3), (_DWORD)result))
    {
      *((_DWORD *)a3 + 1) = 1;
    }
    else
    {
      return WebCore::enforceRange<WebCore::IDLLong>(a3, (uint64_t)v6, v4);
    }
  }
  else
  {
    *(_DWORD *)a3 = a2;
    *((_DWORD *)a3 + 1) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::enforceRange<WebCore::IDLLong>(WTF::StringImpl *result, uint64_t a2, double a3)
{
  WTF::StringImpl *v3;
  double v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7[2];
  char v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v3 = result;
  v7[1] = *(WTF::StringImpl **)(a2 + 56);
  if (fabs(a3) == INFINITY)
  {
    v13 = " is outside the range [";
    v14 = 24;
    v11 = ", ";
    v12 = 3;
    v9 = 0x41DFFFFFFFC00000;
    v10 = 0xC1E0000000000000;
    v8 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v7, "Value ", 7, (uint64_t)&v13, (uint64_t)&v10, (uint64_t)&v11, (uint64_t)&v9, &v8);
    if (!v7[0])
      goto LABEL_14;
  }
  else
  {
    v4 = trunc(a3);
    if (v4 >= -2147483650.0 && v4 <= 2147483650.0)
    {
      v5 = 0;
      *(_DWORD *)result = (int)v4;
      goto LABEL_12;
    }
    v13 = " is outside the range [";
    v14 = 24;
    v11 = ", ";
    v12 = 3;
    v10 = 0xC1E0000000000000;
    v9 = 0x41DFFFFFFFC00000;
    v8 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v7, "Value ", 7, (uint64_t)&v13, (uint64_t)&v10, (uint64_t)&v11, (uint64_t)&v9, &v8);
    if (!v7[0])
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x1956A07C0);
    }
  }
  JSC::throwTypeError();
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = 1;
LABEL_12:
  *((_DWORD *)v3 + 1) = v5;
  return result;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>@<X0>(WTF::StringImpl *result@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  WTF::StringImpl **v5;
  double v6;
  double v7;
  int v8;
  WTF::StringImpl *v9;
  double v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v12 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    *a3 = a2;
    a3[1] = 0;
    return result;
  }
  v5 = (WTF::StringImpl **)result;
  result = (WTF::StringImpl *)*((_QWORD *)result + 7);
  if (a2 >= 0xFFFE000000000000)
  {
    v6 = (double)(int)a2;
  }
  else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, (JSC::JSGlobalObject *)v5);
    result = v11;
    v6 = v10;
  }
  else
  {
    *(_QWORD *)&v6 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v13[1] = v5[7];
  if (fabs(v6) == INFINITY)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v15 = 0x41EFFFFFFFE00000;
    v16 = 0;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
      goto LABEL_27;
    goto LABEL_17;
  }
  v7 = trunc(v6);
  if (v7 < 0.0 || v7 > 4294967300.0)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v15 = 0x41EFFFFFFFE00000;
    v16 = 0;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1956A099CLL);
    }
LABEL_17:
    JSC::throwTypeError();
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_20:
    v8 = 1;
    goto LABEL_21;
  }
  v8 = 0;
  *a3 = v7;
LABEL_21:
  a3[1] = v8;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLLong>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  JSC::JSGlobalObject *v4;
  double v5;
  int v6;
  double v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  if (a2 < 0xFFFE000000000000)
  {
    v4 = (JSC::JSGlobalObject *)result;
    result = *(_QWORD *)(result + 56);
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v8 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v9, v4);
      result = v8;
      v5 = v7;
    }
    else
    {
      *(_QWORD *)&v5 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(result + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
      if ((result & 1) != 0)
      {
        v6 = 1;
        goto LABEL_9;
      }
    }
    if (v5 >= 2147483650.0)
    {
      LODWORD(a2) = 0x7FFFFFFF;
    }
    else if (v5 <= -2147483650.0)
    {
      LODWORD(a2) = 0x80000000;
    }
    else
    {
      LODWORD(a2) = (int)v5;
    }
  }
  v6 = 0;
  *a3 = a2;
LABEL_9:
  a3[1] = v6;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLUnsignedLong>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  JSC::JSGlobalObject *v5;
  double v6;
  int v7;
  double v8;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  if (a2 < 0xFFFE000000000000 || (a2 & 0x80000000) != 0)
  {
    v5 = (JSC::JSGlobalObject *)result;
    result = *(_QWORD *)(result + 56);
    if (a2 >= 0xFFFE000000000000)
    {
      v6 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v9 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v10, v5);
      result = v9;
      v6 = v8;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(result + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
      if ((result & 1) != 0)
      {
        v7 = 1;
        goto LABEL_13;
      }
    }
    if (v6 >= 4294967300.0)
    {
      LODWORD(a2) = -1;
    }
    else if (v6 <= 0.0)
    {
      LODWORD(a2) = 0;
    }
    else
    {
      LODWORD(a2) = v6;
    }
  }
  v7 = 0;
  *a3 = a2;
LABEL_13:
  a3[1] = v7;
  return result;
}

uint64_t WebCore::convertToInteger<WebCore::IDLLong>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v16 = a2;
  result = *((_QWORD *)a1 + 7);
  if (a2 < 0xFFFE000000000000)
  {
    v8 = a2 - 0x2000000000000;
    if (a2 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v14 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v16, a1);
      result = v14;
      v8 = v15;
    }
    v9 = (v8 >> 52) & 0x7FF;
    v10 = v9 - 1023;
    v11 = v8 >> (51 - (v8 >> 52));
    if (v9 > 0x433)
      LODWORD(v11) = v8 << ((v8 >> 52) - 51);
    if (v9 >= 0x41F)
      v12 = v11;
    else
      v12 = (((1 << ((v8 >> 52) + 1)) - 1) & v11) + (1 << ((v8 >> 52) + 1));
    if ((v8 & 0x8000000000000000) == 0)
      v13 = v12;
    else
      v13 = -v12;
    if (v10 <= 0x53)
      LODWORD(a2) = v13;
    else
      LODWORD(a2) = 0;
  }
  if (*(_DWORD *)(result + 80)
    && (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) != 0))
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *a3 = a2;
  }
  a3[1] = v7;
  return result;
}

uint64_t WebCore::convertToInteger<WebCore::IDLUnsignedLong>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v16 = a2;
  result = *((_QWORD *)a1 + 7);
  if (a2 < 0xFFFE000000000000)
  {
    v8 = a2 - 0x2000000000000;
    if (a2 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v14 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v16, a1);
      result = v14;
      v8 = v15;
    }
    v9 = (v8 >> 52) & 0x7FF;
    v10 = v9 - 1023;
    v11 = v8 >> (51 - (v8 >> 52));
    if (v9 > 0x433)
      LODWORD(v11) = v8 << ((v8 >> 52) - 51);
    if (v9 >= 0x41F)
      v12 = v11;
    else
      v12 = (((1 << ((v8 >> 52) + 1)) - 1) & v11) + (1 << ((v8 >> 52) + 1));
    if ((v8 & 0x8000000000000000) == 0)
      v13 = v12;
    else
      v13 = -v12;
    if (v10 <= 0x53)
      LODWORD(a2) = v13;
    else
      LODWORD(a2) = 0;
  }
  if (*(_DWORD *)(result + 80)
    && (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) != 0))
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *a3 = a2;
  }
  a3[1] = v7;
  return result;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLLongLong>@<X0>(WTF::StringImpl *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v4;
  double v5;
  double v6;
  WTF::StringImpl *v8;
  int v9;
  double v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13[2];
  char v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v12 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    *(_QWORD *)a3 = (int)a2;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  v4 = (WTF::StringImpl **)result;
  result = (WTF::StringImpl *)*((_QWORD *)result + 7);
  if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, (JSC::JSGlobalObject *)v4);
    result = v11;
    v5 = v10;
  }
  else
  {
    *(_QWORD *)&v5 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
      goto LABEL_17;
  }
  v13[1] = v4[7];
  if (fabs(v5) == INFINITY)
  {
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v15 = 0x433FFFFFFFFFFFFFLL;
    v16 = 0xC33FFFFFFFFFFFFFLL;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
      goto LABEL_24;
  }
  else
  {
    v6 = trunc(v5);
    if (v6 >= -9.00719925e15 && v6 <= 9.00719925e15)
    {
      v9 = 0;
      *(_QWORD *)a3 = (uint64_t)v6;
      goto LABEL_19;
    }
    v19 = " is outside the range [";
    v20 = 24;
    v17 = ", ";
    v18 = 3;
    v15 = 0x433FFFFFFFFFFFFFLL;
    v16 = 0xC33FFFFFFFFFFFFFLL;
    v14 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v13, "Value ", 7, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v17, (uint64_t)&v15, &v14);
    if (!v13[0])
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x1956A0F20);
    }
  }
  JSC::throwTypeError();
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_17:
  v9 = 1;
LABEL_19:
  *(_DWORD *)(a3 + 8) = v9;
  return result;
}

WTF::StringImpl *WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>@<X0>(WTF::StringImpl *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v5;
  double v6;
  double v7;
  WTF::StringImpl *v9;
  int v10;
  double v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  v13 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a2;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  v5 = (WTF::StringImpl **)result;
  result = (WTF::StringImpl *)*((_QWORD *)result + 7);
  if (a2 >= 0xFFFE000000000000)
  {
    v6 = (double)(int)a2;
  }
  else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v12 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v13, (JSC::JSGlobalObject *)v5);
    result = v12;
    v6 = v11;
  }
  else
  {
    *(_QWORD *)&v6 = a2 - 0x2000000000000;
  }
  if (*((_DWORD *)result + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(result);
    if ((_DWORD)result)
      goto LABEL_21;
  }
  v14[1] = v5[7];
  if (fabs(v6) == INFINITY)
  {
    v20 = " is outside the range [";
    v21 = 24;
    v18 = ", ";
    v19 = 3;
    v16 = 0x433FFFFFFFFFFFFFLL;
    v17 = 0;
    v15 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, "Value ", 7, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v18, (uint64_t)&v16, &v15);
    if (!v14[0])
      goto LABEL_29;
  }
  else
  {
    v7 = trunc(v6);
    if (v7 >= 0.0 && v7 <= 9.00719925e15)
    {
      v10 = 0;
      *(_QWORD *)a3 = (unint64_t)v7;
      goto LABEL_23;
    }
    v20 = " is outside the range [";
    v21 = 24;
    v18 = ", ";
    v19 = 3;
    v16 = 0x433FFFFFFFFFFFFFLL;
    v17 = 0;
    v15 = 93;
    WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, "Value ", 7, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v18, (uint64_t)&v16, &v15);
    if (!v14[0])
    {
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x1956A1114);
    }
  }
  JSC::throwTypeError();
  result = v14[0];
  v14[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_21:
  v10 = 1;
LABEL_23:
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLLongLong>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  double v6;
  double v7;
  int v8;
  double v9;
  uint64_t v10;
  unint64_t v11;

  v11 = a2;
  if (a2 < 0xFFFE000000000000)
  {
    v5 = (JSC::JSGlobalObject *)result;
    result = *(_QWORD *)(result + 56);
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v10 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v11, v5);
      result = v10;
      v6 = v9;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(result + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
      if ((result & 1) != 0)
      {
        v8 = 1;
        goto LABEL_12;
      }
    }
    v7 = -9.00719925e15;
    if (v6 >= -9.00719925e15)
      v7 = v6;
    if (v7 > 9.00719925e15)
      v7 = 9.00719925e15;
    v4 = (uint64_t)v7;
  }
  else
  {
    v4 = (int)a2;
  }
  v8 = 0;
  *(_QWORD *)a3 = v4;
LABEL_12:
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

uint64_t WebCore::convertToIntegerClamp<WebCore::IDLUnsignedLongLong>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::JSGlobalObject *v5;
  double v6;
  double v7;
  unint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  unint64_t v12;

  v12 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    v8 = a2;
  }
  else
  {
    v5 = (JSC::JSGlobalObject *)result;
    result = *(_QWORD *)(result + 56);
    if (a2 >= 0xFFFE000000000000)
    {
      v6 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v11 = result;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, v5);
      result = v11;
      v6 = v10;
    }
    else
    {
      *(_QWORD *)&v6 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(result + 80))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
      if ((result & 1) != 0)
      {
        v9 = 1;
        goto LABEL_16;
      }
    }
    v7 = 0.0;
    if (v6 >= 0.0)
      v7 = v6;
    if (v7 > 9.00719925e15)
      v7 = 9.00719925e15;
    v8 = (unint64_t)v7;
  }
  v9 = 0;
  *(_QWORD *)a3 = v8;
LABEL_16:
  *(_DWORD *)(a3 + 8) = v9;
  return result;
}

void WebCore::convertToInteger<WebCore::IDLLongLong>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  JSC::VM *v6;
  double v7;
  double v8;
  int v9;
  double v10;
  JSC::VM *v11;
  unint64_t v12;

  v12 = a2;
  if (a2 < 0xFFFE000000000000)
  {
    v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v11 = v6;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, a1);
      v6 = v11;
      v7 = v10;
    }
    else
    {
      *(_QWORD *)&v7 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    {
      v9 = 1;
      goto LABEL_12;
    }
    if (fabs(v7) == INFINITY)
    {
      v4 = 0;
    }
    else
    {
      v8 = fmod(trunc(v7), 1.84467441e19);
      if (v8 >= 0.0)
        v4 = (unint64_t)v8;
      else
        v4 = -(uint64_t)(unint64_t)-v8;
    }
  }
  else
  {
    v4 = (int)a2;
  }
  v9 = 0;
  *(_QWORD *)a3 = v4;
LABEL_12:
  *(_DWORD *)(a3 + 8) = v9;
}

void WebCore::convertToInteger<WebCore::IDLUnsignedLongLong>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v6;
  double v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  JSC::VM *v12;
  unint64_t v13;

  v13 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    v8 = a2;
  }
  else
  {
    v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (a2 >= 0xFFFE000000000000)
    {
      v7 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v12 = v6;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v13, a1);
      v6 = v12;
      v7 = v11;
    }
    else
    {
      *(_QWORD *)&v7 = a2 - 0x2000000000000;
    }
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    {
      v9 = 1;
      goto LABEL_13;
    }
    if (fabs(v7) == INFINITY)
    {
      v8 = 0;
    }
    else
    {
      v10 = fmod(trunc(v7), 1.84467441e19);
      if (v10 >= 0.0)
        v8 = (unint64_t)v10;
      else
        v8 = -(uint64_t)(unint64_t)-v10;
    }
  }
  v9 = 0;
  *(_QWORD *)a3 = v8;
LABEL_13:
  *(_DWORD *)(a3 + 8) = v9;
}

uint64_t WebCore::identifierToString@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    if ((*(_BYTE *)(v3 + 16) & 0x20) != 0)
    {
      result = JSC::throwTypeError();
      *a2 = 0;
      return result;
    }
    *(_DWORD *)v3 += 2;
  }
  *a2 = v3;
  return result;
}

uint64_t WebCore::identifierToByteString@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;

  v4 = *(JSC::VM **)(result + 56);
  v5 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(v5 + 16) & 0x20) != 0)
    {
      result = JSC::throwTypeError();
      v5 = 0;
    }
    else
    {
      *(_DWORD *)v5 += 2;
    }
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    if (!v5)
      goto LABEL_7;
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
      goto LABEL_7;
    v6 = *(unsigned int *)(v5 + 4);
    if (!(_DWORD)v6)
      goto LABEL_7;
    v7 = 0;
    v8 = *(unsigned __int16 **)(v5 + 8);
    v9 = 2 * v6;
    do
    {
      v10 = *v8++;
      v7 |= v10;
      v9 -= 2;
    }
    while (v9);
    if (v7 < 0x100)
    {
LABEL_7:
      *a3 = v5;
      return result;
    }
    result = JSC::throwTypeError();
  }
  *a3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v5, v11);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t WebCore::valueToByteAtomString@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  JSC::JSRopeString *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v21 = a2;
  if ((a2 & 0xFFFE000000000002) != 0 || (v6 = (JSC::JSRopeString *)a2, *(_BYTE *)(a2 + 5) != 2))
    v6 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v21, a1);
  result = *((_QWORD *)v6 + 1);
  if ((result & 1) != 0)
  {
    result = JSC::JSRopeString::resolveRopeToAtomString(v6, a1);
    goto LABEL_8;
  }
  if (result)
  {
    if ((*(_BYTE *)(result + 16) & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)result, (WTF::StringImpl *)a2);
      result = (uint64_t)v22;
    }
    v20 = (WTF::StringImpl *)result;
    if ((*(_BYTE *)(*((_QWORD *)v6 + 1) + 16) & 0x10) != 0)
      goto LABEL_8;
    v14 = *((_QWORD *)a1 + 7);
    if (result)
      *(_DWORD *)result += 2;
  }
  else
  {
    v20 = 0;
    if ((MEMORY[0x10] & 0x10) != 0)
      goto LABEL_8;
    result = 0;
    v14 = *((_QWORD *)a1 + 7);
  }
  __dmb(0xAu);
  v15 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = result;
  v22 = v15;
  v16 = (_QWORD *)(v14 + 808);
  v17 = *(unsigned int *)(v14 + 820);
  if ((_DWORD)v17 == *(_DWORD *)(v14 + 816))
  {
    v19 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v22);
    v17 = *(unsigned int *)(v14 + 820);
    v18 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v17);
    v15 = *v19;
  }
  else
  {
    v18 = (WTF::StringImpl **)(*v16 + 8 * v17);
    v19 = &v22;
  }
  *v19 = 0;
  *v18 = v15;
  *(_DWORD *)(v14 + 820) = v17 + 1;
  result = (uint64_t)v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_8:
  if (!*((_DWORD *)v5 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v5), (result & 1) == 0))
  {
    if (!v20)
      goto LABEL_11;
    if ((*((_BYTE *)v20 + 16) & 4) != 0)
      goto LABEL_11;
    v8 = *((unsigned int *)v20 + 1);
    if (!(_DWORD)v8)
      goto LABEL_11;
    v9 = 0;
    v10 = (unsigned __int16 *)*((_QWORD *)v20 + 1);
    v11 = 2 * v8;
    do
    {
      v12 = *v10++;
      v9 |= v12;
      v11 -= 2;
    }
    while (v11);
    if (v9 < 0x100)
    {
LABEL_11:
      *(_QWORD *)a3 = v20;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    JSC::throwTypeError();
  }
  *(_DWORD *)(a3 + 8) = 1;
  result = (uint64_t)v20;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      return WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  return result;
}

uint64_t WebCore::identifierToUSVString(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;

  v2 = *a2;
  if (!*a2)
    goto LABEL_4;
  if ((*((_BYTE *)v2 + 16) & 0x20) == 0)
  {
    *(_DWORD *)v2 += 2;
LABEL_4:
    v5 = v2;
    goto LABEL_5;
  }
  JSC::throwTypeError();
  v5 = 0;
LABEL_5:
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  result = (uint64_t)v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t WebCore::valueToUSVAtomString@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  JSC::JSRopeString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v19 = a2;
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || (v6 = (JSC::JSRopeString *)a2, *(_BYTE *)(a2 + 5) != 2))
    v6 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v19, a1);
  v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
  if ((v7 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(v6, a1);
  }
  else
  {
    if (v7)
    {
      if ((*((_BYTE *)v7 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v7 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v7, (WTF::StringImpl *)a2);
        v7 = v20;
      }
      v18 = v7;
      if ((*(_BYTE *)(*((_QWORD *)v6 + 1) + 16) & 0x10) != 0)
        goto LABEL_8;
      v11 = *((_QWORD *)a1 + 7);
      if (v7)
        *(_DWORD *)v7 += 2;
    }
    else
    {
      v18 = 0;
      if ((MEMORY[0x10] & 0x10) != 0)
        goto LABEL_8;
      v7 = 0;
      v11 = *((_QWORD *)a1 + 7);
    }
    __dmb(0xAu);
    v12 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v7;
    v20 = v12;
    v13 = (_QWORD *)(v11 + 808);
    v14 = *(unsigned int *)(v11 + 820);
    if ((_DWORD)v14 == *(_DWORD *)(v11 + 816))
    {
      v16 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v20);
      v14 = *(unsigned int *)(v11 + 820);
      v15 = (WTF::StringImpl **)(*(_QWORD *)(v11 + 808) + 8 * v14);
      v12 = *v16;
    }
    else
    {
      v15 = (WTF::StringImpl **)(*v13 + 8 * v14);
      v16 = &v20;
    }
    *v16 = 0;
    *v15 = v12;
    *(_DWORD *)(v11 + 820) = v14 + 1;
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
LABEL_8:
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
    v9 = 0;
  }
  *(_DWORD *)(a3 + 8) = v9;
  result = (uint64_t)v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      return WTF::StringImpl::destroy(v18, v8);
    else
      *(_DWORD *)v18 -= 2;
  }
  return result;
}

uint64_t WebCore::trustedScriptCompliantString@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  WebCore::JSDOMGlobalObject *v20;
  uint64_t v21;
  int v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42[2];
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;

  v5 = (WTF::StringImpl *)a2;
  v6 = (WebCore::JSDOMGlobalObject *)result;
  v8 = *(_QWORD *)(result + 56);
  v9 = a2 & 0xFFFE000000000002;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSTrustedScript::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSTrustedScript::s_info && v12 != 0);
    }
    if (v11)
      goto LABEL_91;
  }
  while (1)
  {
    v15 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSDOMGlobalObject::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSDOMGlobalObject::s_info && v17 != 0);
    }
    if (v16)
      v20 = v6;
    else
      v20 = 0;
    result = WebCore::JSDOMGlobalObject::scriptExecutionContext(v20);
    if (!result)
    {
      *(_QWORD *)a4 = 0;
LABEL_74:
      *(_DWORD *)(a4 + 8) = 0;
      return result;
    }
    v21 = result;
    v22 = *(unsigned __int8 *)(result + 274);
    if (*(_BYTE *)(result + 274))
    {
      if (v22 == 1 || v22 == 2)
        ++*(_DWORD *)(result + 312);
    }
    else
    {
      *(_DWORD *)(result - 168) += 2;
    }
    v45 = v5;
    v23 = (JSC::VM *)*((_QWORD *)v6 + 7);
    if (v9 || *((_BYTE *)v5 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, v6);
      goto LABEL_33;
    }
    v24 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
    if ((v24 & 1) != 0)
    {
      v24 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(v5, v6);
      if (!v24)
        goto LABEL_32;
LABEL_31:
      *(_DWORD *)v24 += 2;
      goto LABEL_32;
    }
    if (v24)
      goto LABEL_31;
LABEL_32:
    v40 = v24;
LABEL_33:
    if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
    {
      v26 = 1;
    }
    else
    {
      WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
      v26 = 0;
    }
    LODWORD(v43) = v26;
    v27 = v40;
    v5 = (WTF::StringImpl *)&unk_1E3392610;
    v40 = 0;
    if (!v27)
      goto LABEL_38;
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
LABEL_38:
      LOBYTE(v45) = 0;
      v46 = -1;
      goto LABEL_39;
    }
    result = WTF::StringImpl::destroy(v27, v25);
    v26 = v43;
    LOBYTE(v45) = 0;
    v46 = -1;
    if ((_DWORD)v43 == -1)
      break;
LABEL_39:
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **, int *))off_1E33926D0[v26])(&v40, &v45, v42);
    v46 = v26;
    if ((_DWORD)v43 != -1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, int *))&unk_1E3392610 + v43))(&v40, v42);
      v26 = v46;
    }
    if (v26)
      break;
    v29 = v45;
    v45 = 0;
    v40 = v29;
    WebCore::trustedTypeCompliantString((WebCore::DOMWindow *)1, (WebCore::SecurityContext *)v21, &v40, a3, (uint64_t)v42);
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (!v44)
    {
LABEL_55:
      v35 = 0;
      v36 = *(_QWORD *)v42;
      *(_QWORD *)v42 = 0;
      *(_QWORD *)a4 = v36;
      *(_DWORD *)(a4 + 8) = 0;
      goto LABEL_56;
    }
    if (v44 == 1)
    {
      v32 = (WTF::StringImpl *)LOBYTE(v42[0]);
      LOBYTE(v40) = v42[0];
      v33 = v43;
      v43 = 0;
      v41 = v33;
      if (!*(_QWORD *)(v8 + 16))
      {
        v34.super.isa = (Class)WebCore::createDOMException(v6, (JSC::JSGlobalObject *)LOBYTE(v42[0]), (JSC::JSGlobalObject *)&v41);
        JSC::VM::throwException((JSC::VM *)v8, v6, v34);
        v33 = v41;
      }
      v41 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (!*(_DWORD *)(v8 + 80))
      {
        v35 = v44;
        goto LABEL_54;
      }
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
      v35 = v44;
      if ((result & 1) == 0)
      {
LABEL_54:
        if (!v35)
          goto LABEL_55;
        goto LABEL_90;
      }
      *(_DWORD *)(a4 + 8) = 1;
      if (v35 == -1)
      {
LABEL_57:
        v26 = v46;
        goto LABEL_58;
      }
LABEL_56:
      result = ((uint64_t (*)(WTF::StringImpl **, int *))off_1E3392620[v35])(&v40, v42);
      goto LABEL_57;
    }
LABEL_90:
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_91:
    v38 = *((_QWORD *)v5 + 3);
    if (v38)
    {
      v39 = *(_DWORD **)(v38 + 16);
      if (v39)
        *v39 += 2;
      *(_QWORD *)a4 = v39;
      goto LABEL_74;
    }
  }
  *(_DWORD *)(a4 + 8) = 1;
LABEL_58:
  if (v26 != -1)
    result = (*((uint64_t (**)(int *, WTF::StringImpl **))&unk_1E3392610 + v26))(v42, &v45);
  v37 = *(unsigned __int8 *)(v21 + 274);
  if (*(_BYTE *)(v21 + 274))
  {
    if (v37 == 1)
    {
      if (*(_DWORD *)(v21 + 312) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      else
        --*(_DWORD *)(v21 + 312);
    }
    else if (v37 == 2)
    {
      return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v21 + 312));
    }
  }
  else if (*(_DWORD *)(v21 - 168) == 2)
  {
    if ((*(_WORD *)(v21 - 162) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v21 - 192), v28);
  }
  else
  {
    *(_DWORD *)(v21 - 168) -= 2;
  }
  return result;
}

unint64_t WebCore::convertToJSValue(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v3;
  unint64_t result;

  v3 = *a3;
  switch(*((_DWORD *)v3 + 3))
  {
    case 0:
      result = WebCore::wrap<WebCore::ANGLEInstancedArrays>(a1, a2, v3);
      break;
    case 1:
      result = WebCore::wrap<WebCore::EXTBlendMinMax>(a1, a2, v3);
      break;
    case 2:
      result = WebCore::wrap<WebCore::EXTClipControl>(a1, a2, v3);
      break;
    case 3:
      result = WebCore::wrap<WebCore::EXTColorBufferFloat>(a1, a2, v3);
      break;
    case 4:
      result = WebCore::wrap<WebCore::EXTColorBufferHalfFloat>(a1, a2, v3);
      break;
    case 5:
      result = WebCore::wrap<WebCore::EXTConservativeDepth>(a1, a2, v3);
      break;
    case 6:
      result = WebCore::wrap<WebCore::EXTDepthClamp>(a1, a2, v3);
      break;
    case 7:
      result = WebCore::wrap<WebCore::EXTDisjointTimerQuery>(a1, a2, v3);
      break;
    case 8:
      result = WebCore::wrap<WebCore::EXTDisjointTimerQueryWebGL2>(a1, a2, v3);
      break;
    case 9:
      result = WebCore::wrap<WebCore::EXTFloatBlend>(a1, a2, v3);
      break;
    case 0xA:
      result = WebCore::wrap<WebCore::EXTFragDepth>(a1, a2, v3);
      break;
    case 0xB:
      result = WebCore::wrap<WebCore::EXTPolygonOffsetClamp>(a1, a2, v3);
      break;
    case 0xC:
      result = WebCore::wrap<WebCore::EXTRenderSnorm>(a1, a2, v3);
      break;
    case 0xD:
      result = WebCore::wrap<WebCore::EXTShaderTextureLOD>(a1, a2, v3);
      break;
    case 0xE:
      result = WebCore::wrap<WebCore::EXTTextureCompressionBPTC>(a1, a2, v3);
      break;
    case 0xF:
      result = WebCore::wrap<WebCore::EXTTextureCompressionRGTC>(a1, a2, v3);
      break;
    case 0x10:
      result = WebCore::wrap<WebCore::EXTTextureFilterAnisotropic>(a1, a2, v3);
      break;
    case 0x11:
      result = WebCore::wrap<WebCore::EXTTextureMirrorClampToEdge>(a1, a2, v3);
      break;
    case 0x12:
      result = WebCore::wrap<WebCore::EXTTextureNorm16>(a1, a2, v3);
      break;
    case 0x13:
      result = WebCore::wrap<WebCore::EXTsRGB>(a1, a2, v3);
      break;
    case 0x14:
      result = WebCore::wrap<WebCore::KHRParallelShaderCompile>(a1, a2, v3);
      break;
    case 0x15:
      result = WebCore::wrap<WebCore::NVShaderNoperspectiveInterpolation>(a1, a2, v3);
      break;
    case 0x16:
      result = WebCore::wrap<WebCore::OESDrawBuffersIndexed>(a1, a2, v3);
      break;
    case 0x17:
      result = WebCore::wrap<WebCore::OESElementIndexUint>(a1, a2, v3);
      break;
    case 0x18:
      result = WebCore::wrap<WebCore::OESFBORenderMipmap>(a1, a2, v3);
      break;
    case 0x19:
      result = WebCore::wrap<WebCore::OESSampleVariables>(a1, a2, v3);
      break;
    case 0x1A:
      result = WebCore::wrap<WebCore::OESShaderMultisampleInterpolation>(a1, a2, v3);
      break;
    case 0x1B:
      result = WebCore::wrap<WebCore::OESStandardDerivatives>(a1, a2, v3);
      break;
    case 0x1C:
      result = WebCore::wrap<WebCore::OESTextureFloat>(a1, a2, v3);
      break;
    case 0x1D:
      result = WebCore::wrap<WebCore::OESTextureFloatLinear>(a1, a2, v3);
      break;
    case 0x1E:
      result = WebCore::wrap<WebCore::OESTextureHalfFloat>(a1, a2, v3);
      break;
    case 0x1F:
      result = WebCore::wrap<WebCore::OESTextureHalfFloatLinear>(a1, a2, v3);
      break;
    case 0x20:
      result = WebCore::wrap<WebCore::OESVertexArrayObject>(a1, a2, v3);
      break;
    case 0x21:
      result = WebCore::wrap<WebCore::WebGLBlendFuncExtended>(a1, a2, v3);
      break;
    case 0x22:
      result = WebCore::wrap<WebCore::WebGLClipCullDistance>(a1, a2, v3);
      break;
    case 0x23:
      result = WebCore::wrap<WebCore::WebGLColorBufferFloat>(a1, a2, v3);
      break;
    case 0x24:
      result = WebCore::wrap<WebCore::WebGLCompressedTextureASTC>(a1, a2, v3);
      break;
    case 0x25:
      result = WebCore::wrap<WebCore::WebGLCompressedTextureETC>(a1, a2, v3);
      break;
    case 0x26:
      result = WebCore::wrap<WebCore::WebGLCompressedTextureETC1>(a1, a2, v3);
      break;
    case 0x27:
      result = WebCore::wrap<WebCore::WebGLCompressedTexturePVRTC>(a1, a2, v3);
      break;
    case 0x28:
      result = WebCore::wrap<WebCore::WebGLCompressedTextureS3TC>(a1, a2, v3);
      break;
    case 0x29:
      result = WebCore::wrap<WebCore::WebGLCompressedTextureS3TCsRGB>(a1, a2, v3);
      break;
    case 0x2A:
      result = WebCore::wrap<WebCore::WebGLDebugRendererInfo>(a1, a2, v3);
      break;
    case 0x2B:
      result = WebCore::wrap<WebCore::WebGLDebugShaders>(a1, a2, v3);
      break;
    case 0x2C:
      result = WebCore::wrap<WebCore::WebGLDepthTexture>(a1, a2, v3);
      break;
    case 0x2D:
      result = WebCore::wrap<WebCore::WebGLDrawBuffers>(a1, a2, v3);
      break;
    case 0x2E:
      result = WebCore::wrap<WebCore::WebGLDrawInstancedBaseVertexBaseInstance>(a1, a2, v3);
      break;
    case 0x2F:
      result = WebCore::wrap<WebCore::WebGLLoseContext>(a1, a2, v3);
      break;
    case 0x30:
      result = WebCore::wrap<WebCore::WebGLMultiDraw>(a1, a2, v3);
      break;
    case 0x31:
      result = WebCore::wrap<WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance>(a1, a2, v3);
      break;
    case 0x32:
      result = WebCore::wrap<WebCore::WebGLPolygonMode>(a1, a2, v3);
      break;
    case 0x33:
      result = WebCore::wrap<WebCore::WebGLProvokingVertex>(a1, a2, v3);
      break;
    case 0x34:
      result = WebCore::wrap<WebCore::WebGLRenderSharedExponent>(a1, a2, v3);
      break;
    case 0x35:
      result = WebCore::wrap<WebCore::WebGLStencilTexturing>(a1, a2, v3);
      break;
    default:
      result = 2;
      break;
  }
  return result;
}

void WebCore::reportExceptionIfJSDOMWindow(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMWindow::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMWindow::s_info && v6 != 0);
  }
  if (v5)
  {
    v9 = *((_QWORD *)a1 + 7);
    v10 = *(_QWORD *)(v9 + 112);
    if (!*(_BYTE *)(v10 + 6))
      goto LABEL_21;
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v12)
      v12 = WTF::Thread::initializeCurrentTLS(0);
    if (v11 == v12)
    {
      if ((a2 & 0xFFFE000000000002) != 0
        || (v13 = a2, MEMORY[0x1E0CBEE50] != 16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
      {
        v13 = *(_QWORD *)(v9 + 32);
        if (!v13)
          v13 = JSC::Exception::create();
      }
      WebCore::reportException(a1, v13, 0, 0, 0);
    }
    else
    {
LABEL_21:
      __break(0xC471u);
    }
  }
}

uint64_t WebCore::retrieveErrorMessageWithoutName@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t this@<X2>, uint64_t a3@<X1>, JSC::VM **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  _DWORD *v16;
  uint64_t result;
  _DWORD *v18;
  unint64_t v19;

  v19 = this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = 16 * v8;
  if ((_DWORD)v8)
    v11 = v10 == MEMORY[0x1E0CBE398];
  else
    v11 = 1;
  v12 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v11)
  {
    v13 = 16 * v8;
    do
    {
      v13 = *(_QWORD *)(v13 + 16);
      v12 = v13 != 0;
    }
    while (v13 != MEMORY[0x1E0CBE398] && v13 != 0);
  }
  if (!v12)
  {
    if ((_DWORD)v8 && (char **)v10 != &WebCore::JSDOMException::s_info)
    {
      do
      {
        v10 = *(_QWORD *)(v10 + 16);
        v9 = v10 != 0;
      }
      while ((char **)v10 != &WebCore::JSDOMException::s_info && v10 != 0);
    }
    if (v9)
    {
      v16 = *(_DWORD **)(*(_QWORD *)(this + 24) + 24);
      if (v16)
        *v16 += 2;
      goto LABEL_29;
    }
    if (*(_BYTE *)(this + 5) == 2)
    {
      v16 = *(_DWORD **)(this + 8);
      if ((v16 & 1) != 0)
      {
        v16 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v16)
          goto LABEL_29;
        goto LABEL_24;
      }
      if (v16)
LABEL_24:
        *v16 += 2;
LABEL_29:
      *a5 = v16;
      goto LABEL_30;
    }
LABEL_33:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v19, a1);
    v16 = v18;
    goto LABEL_29;
  }
  JSC::ErrorInstance::sanitizedMessageString();
LABEL_30:
  result = JSC::VM::clearException(*a4);
  *(_QWORD *)(a3 + 32) = 0;
  return result;
}

void WebCore::reportCurrentException(WebCore *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v3;
  uint64_t v4;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v4 = *((_QWORD *)v3 + 2);
  JSC::VM::clearException(v3);
  WebCore::reportException(this, v4, 0, 0, 0);
}

uint64_t WebCore::propagateExceptionSlowPath(JSC *a1, JSC::VM **a2, unsigned __int8 *a3)
{
  JSValue v5;

  v5.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)*a3, (JSC::JSGlobalObject *)(a3 + 8));
  return JSC::VM::throwException(*a2, a1, v5);
}

uint64_t WebCore::throwSecurityError(JSC::JSGlobalObject *a1, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  JSValue v9;
  _DWORD *v11;

  v5 = *((_QWORD *)a1 + 7);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 && *(_QWORD *)(v5 + 24) == v6)
  {
    v7 = 10;
  }
  else
  {
    WebCore::DOMException::create(0xEu, a3, (uint64_t *)&v11);
    v7 = WebCore::wrap<WebCore::DOMException>((uint64_t)a1, (uint64_t)a1, v11);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
    JSC::addErrorInfo();
  }
  v9.super.isa = (Class)v7;
  return JSC::VM::throwException(*a2, a1, v9);
}

char *WebCore::throwArgumentMustBeEnumError(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, const char *a9, uint64_t a10, char *a11, uint64_t a12)
{
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  char *result;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD v23[6];

  v13 = " constructor";
  v14 = "the ";
  v15 = 5;
  v16 = ".";
  v17 = 2;
  if (a9)
  {
    v14 = a6;
    v15 = a7;
  }
  else
  {
    v16 = a6;
    v17 = a7;
  }
  if (a9)
    v13 = a9;
  v23[0] = v14;
  v23[1] = v15;
  v23[2] = v16;
  v23[3] = v17;
  if (!a9)
    a10 = 13;
  v23[4] = v13;
  v23[5] = a10;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v22, "Argument ", 10, a3 + 1, " ('", 4, a4, a5, "') to ", 7, v23, " must be ", 10, "one of: ", 9, a11, a12);
  if (v22)
  {
    v20 = JSC::throwTypeError();
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    return (char *)v20;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

char *WebCore::throwArgumentMustBeFunctionError(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, const char *a9, uint64_t a10)
{
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  char *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD v21[6];

  v11 = " constructor";
  v12 = "the ";
  v13 = 5;
  v14 = ".";
  v15 = 2;
  if (a9)
  {
    v12 = a6;
    v13 = a7;
  }
  else
  {
    v14 = a6;
    v15 = a7;
  }
  if (a9)
    v11 = a9;
  v21[0] = v12;
  v21[1] = v13;
  v21[2] = v14;
  v21[3] = v15;
  if (!a9)
    a10 = 13;
  v21[4] = v11;
  v21[5] = a10;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v20, "Argument ", 10, a3 + 1, " ('", 4, a4, a5, "') to ", 7, v21, " must be ", 10, "a function", 11);
  if (v20)
  {
    v18 = JSC::throwTypeError();
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    return (char *)v18;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

char *WebCore::throwArgumentMustBeObjectError(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, const char *a9, uint64_t a10)
{
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  char *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD v21[6];

  v11 = " constructor";
  v12 = "the ";
  v13 = 5;
  v14 = ".";
  v15 = 2;
  if (a9)
  {
    v12 = a6;
    v13 = a7;
  }
  else
  {
    v14 = a6;
    v15 = a7;
  }
  if (a9)
    v11 = a9;
  v21[0] = v12;
  v21[1] = v13;
  v21[2] = v14;
  v21[3] = v15;
  if (!a9)
    a10 = 13;
  v21[4] = v11;
  v21[5] = a10;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v20, "Argument ", 10, a3 + 1, " ('", 4, a4, a5, "') to ", 7, v21, " must be ", 10, "an object", 10);
  if (v20)
  {
    v18 = JSC::throwTypeError();
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    return (char *)v18;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

char *WebCore::throwArgumentTypeError(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, const char *a9, uint64_t a10, char *a11, uint64_t a12)
{
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  char *result;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD v23[6];

  v13 = " constructor";
  v14 = "the ";
  v15 = 5;
  v16 = ".";
  v17 = 2;
  if (a9)
  {
    v14 = a6;
    v15 = a7;
  }
  else
  {
    v16 = a6;
    v17 = a7;
  }
  if (a9)
    v13 = a9;
  v23[0] = v14;
  v23[1] = v15;
  v23[2] = v16;
  v23[3] = v17;
  if (!a9)
    a10 = 13;
  v23[4] = v13;
  v23[5] = a10;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v22, "Argument ", 10, a3 + 1, " ('", 4, a4, a5, "') to ", 7, v23, " must be ", 10, "an instance of ", 16, a11, a12);
  if (v22)
  {
    v20 = JSC::throwTypeError();
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    return (char *)v20;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::throwAttributeTypeError(int a1, int a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v10, "The ", 5, a3, a4, 46, a5, a6, " attribute must be an instance of ", 35, a7, a8);
  if (v10)
  {
    JSC::throwTypeError();
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_BYTE *WebCore::throwRequiredMemberTypeError(int a1, int a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8)
{
  _BYTE *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v12, "Member ", 8, a5, a6, 46, a3, a4, " is required and must be an instance of ", 41, a7, a8);
  if (v12)
  {
    v10 = JSC::throwTypeError();
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    return (_BYTE *)v10;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WebCore::throwConstructorScriptExecutionContextUnavailableError(JSC *a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  const WTF::String *v7;
  JSValue v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v13[0] = " constructor associated execution context is unavailable";
  v13[1] = 57;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v14, (uint64_t)v13, &v12);
  if (v12)
  {
    v8.super.isa = (Class)JSC::createReferenceError(a1, (JSC::JSGlobalObject *)&v12, v7);
    v10 = JSC::VM::throwException(*a2, a1, v8);
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    return (_QWORD *)v10;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::throwSequenceTypeError()
{
  WTF::StringImpl *v0;
  uint64_t result;
  WTF::StringImpl *v2;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  JSC::throwTypeError();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return WTF::StringImpl::destroy(v2, v0);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WebCore::throwNonFiniteTypeError()
{
  return JSC::throwTypeError();
}

uint64_t WebCore::rejectPromiseWithGetterTypeError(JSC::JSGlobalObject *a1, JSC **a2, WTF::StringImpl *a3)
{
  JSC *v4;
  WTF::StringImpl *v5;
  uint64_t RejectedPromiseWithTypeError;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *a2;
  if (a3)
    *(_DWORD *)a3 += 2;
  v10 = a3;
  JSC::makeDOMAttributeGetterTypeErrorMessage(v4, (const char *)&v10, a3);
  RejectedPromiseWithTypeError = WebCore::createRejectedPromiseWithTypeError(a1, (JSC::JSGlobalObject *)&v11, 0);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  return RejectedPromiseWithTypeError;
}

uint64_t WebCore::createRejectedPromiseWithTypeError(JSC::JSGlobalObject *a1, JSC::JSGlobalObject *a2, int a3)
{
  JSC::VM *v6;
  JSC::Structure *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  uint64_t v11;
  uint64_t TypeError;
  JSCell *v13;
  uint64_t v14;
  uint64_t *v17;
  int v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28[3];

  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v7 = (JSC::Structure *)*((_QWORD *)a1 + 33);
  v8 = (_DWORD *)MEMORY[0x1E0CBEBE8];
  *MEMORY[0x1E0CBEBE8] += 2;
  v11 = JSC::JSObject::get(v7, a1, (unint64_t)v8);
  if (*v8 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBE8], v9);
  else
    *v8 -= 2;
  if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    return 0;
  TypeError = JSC::createTypeError(a1, a2, v10);
  v14 = TypeError;
  if (!a3)
    *(_BYTE *)(TypeError + 59) |= 8u;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v28[0]) = 0;
  }
  else if (*(_BYTE *)(v11 + 5) == 26)
  {
    JSC::JSFunction::getCallData((JSC::JSFunction *)v11, v13);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(v28, v11);
  }
  v19 = 0;
  v21 = (WTF *)&v23;
  v22 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v23 = v14;
  v20 = 0x800000001;
  v17 = &v23;
  v18 = 1;
  return JSC::call();
}

_BYTE *WebCore::throwThisTypeError(int a1, int a2, char *__s, char *a4)
{
  size_t v6;
  size_t v7;
  _BYTE *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (__s)
  {
    v6 = strlen(__s);
    if (a4)
    {
LABEL_3:
      v7 = strlen(a4);
      goto LABEL_4;
    }
  }
  else
  {
    v6 = 0;
    if (a4)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_4:
  result = WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,std::span<char const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v12, "Can only call ", 15, __s, v6, 46, a4, v7, " on instances of ", 18, __s, v6);
  if (v12)
  {
    v10 = JSC::throwTypeError();
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    return (_BYTE *)v10;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::rejectPromiseWithThisTypeError(WebCore *this, WebCore::DeferredPromise *__s, char *a3, const char *a4)
{
  size_t v7;
  size_t v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (__s)
  {
    v7 = strlen((const char *)__s);
    if (a3)
    {
LABEL_3:
      v8 = strlen(a3);
      goto LABEL_4;
    }
  }
  else
  {
    v7 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,std::span<char const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v12, "Can only call ", 15, __s, v7, 46, a3, v8, " on instances of ", 18, __s, v7);
  if (v12)
  {
    WebCore::DeferredPromise::reject((uint64_t)this, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v12, 0);
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return 10;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::reject(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  WebCore::JSDOMGlobalObject **v9;
  WebCore::JSDOMGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  objc_class *v13;
  _QWORD *v14;
  objc_class *DOMException;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  _BYTE v29[8];

  v4 = *(_QWORD *)(result + 24);
  if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v8 = result;
    ++*(_DWORD *)(result + 16);
    v9 = *(WebCore::JSDOMGlobalObject ***)(result + 32);
    v10 = *v9;
    v11 = (JSC::VM *)*((_QWORD *)*v9 + 7);
    MEMORY[0x19AEA3294](v29, v11);
    if ((_DWORD)a2 == 37)
    {
      v12 = *((_QWORD *)v11 + 2);
      v13 = *(objc_class **)(v12 + 8);
      v14 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
      if (!(*(unsigned int (**)(_QWORD *))(*v14 + 64))(v14))
      {
LABEL_6:
        JSC::VM::clearException(v11);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, v13, a4);
        goto LABEL_12;
      }
      v18 = v14[43];
      if (*((_QWORD *)v11 + 3) == v12)
        goto LABEL_28;
      if (!v18)
        goto LABEL_6;
      v19 = (unsigned __int8 *)(v18 + 40);
      if (__ldaxr((unsigned __int8 *)(v18 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v19))
      {
        goto LABEL_22;
      }
      MEMORY[0x19AEA534C](v18 + 40);
LABEL_22:
      v21 = *(unsigned __int8 *)(v18 + 41);
      v22 = __ldxr(v19);
      if (v22 == 1)
      {
        if (!__stlxr(0, v19))
        {
LABEL_27:
          if (!v21)
            goto LABEL_6;
LABEL_28:
          *(_BYTE *)(*(_QWORD *)(v18 + 8) + 93442) = 1;
          *(_BYTE *)(v8 + 44) = 1;
          goto LABEL_12;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v18 + 40));
      goto LABEL_27;
    }
    DOMException = (objc_class *)WebCore::createDOMException(v10, a2, a3);
    if (*((_QWORD *)v11 + 2))
    {
      v17 = *((_QWORD *)v11 + 2);
    }
    else
    {
      if (a4)
        v16 = 2;
      else
        v16 = 1;
      WebCore::DeferredPromise::callFunction(v8, (uint64_t *)v10, v16, DOMException);
      v17 = *((_QWORD *)v11 + 2);
      if (!v17)
        goto LABEL_12;
    }
    v23 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
    if (!(*(unsigned int (**)(_QWORD *))(*v23 + 64))(v23))
    {
LABEL_31:
      WebCore::reportException(v10, v17, 0, 0, 0);
LABEL_12:
      result = MEMORY[0x19AEA32A0](v29);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      --*(_DWORD *)(v8 + 16);
      return result;
    }
    v24 = v23[43];
    if (*((_QWORD *)v11 + 3) == v17)
    {
LABEL_44:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v8 + 44) = 1;
      goto LABEL_31;
    }
    if (!v24)
      goto LABEL_31;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_38:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_43:
        if (!v27)
          goto LABEL_31;
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_43;
  }
  return result;
}

_BYTE *WebCore::rejectPromiseWithThisTypeError(WebCore *this, JSC::JSGlobalObject *__s, char *a3, const char *a4)
{
  size_t v7;
  size_t v8;
  _BYTE *result;
  WTF::StringImpl *v10;
  uint64_t RejectedPromiseWithTypeError;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (__s)
  {
    v7 = strlen((const char *)__s);
    if (a3)
    {
LABEL_3:
      v8 = strlen(a3);
      goto LABEL_4;
    }
  }
  else
  {
    v7 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  result = WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,std::span<char const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v13, "Can only call ", 15, __s, v7, 46, a3, v8, " on instances of ", 18, __s, v7);
  if (v13)
  {
    RejectedPromiseWithTypeError = WebCore::createRejectedPromiseWithTypeError(this, (JSC::JSGlobalObject *)&v13, 1);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    return (_BYTE *)RejectedPromiseWithTypeError;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::throwDOMSyntaxError(JSC::JSGlobalObject *a1, JSC::VM **a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  JSValue v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (a4)
  {
    if (a4 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v15;
    }
    v14 = v6;
  }
  else
  {
    v14 = 0;
  }
  v7 = *((_QWORD *)a1 + 7);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 && *(_QWORD *)(v7 + 24) == v8)
  {
    v9 = 10;
  }
  else
  {
    WebCore::DOMException::create(9u, &v14, (uint64_t *)&v15);
    v9 = WebCore::wrap<WebCore::DOMException>((uint64_t)a1, (uint64_t)a1, v15);
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 2);
    }
    JSC::addErrorInfo();
  }
  v11.super.isa = (Class)v9;
  JSC::VM::throwException(*a2, a1, v11);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::throwDataCloneError(JSC::JSGlobalObject *a1, JSC::VM **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  JSValue v8;
  _DWORD *v10;

  v4 = *((_QWORD *)a1 + 7);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 && *(_QWORD *)(v4 + 24) == v5)
  {
    v6 = 10;
  }
  else
  {
    WebCore::DOMException::create(0x15u, MEMORY[0x1E0CBF738], (uint64_t *)&v10);
    v6 = WebCore::wrap<WebCore::DOMException>((uint64_t)a1, (uint64_t)a1, v10);
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    JSC::addErrorInfo();
  }
  v8.super.isa = (Class)v6;
  return JSC::VM::throwException(*a2, a1, v8);
}

uint64_t WebCore::JSDOMGlobalObject::visitChildren(WebCore::JSDOMGlobalObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  _QWORD v29[2];
  uint64_t v30;
  char v31;

  v29[0] = a2;
  v29[1] = this;
  v31 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v30 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1956A3914);
  }
  *((_QWORD *)a2 + 11) = v29;
  JSC::JSGlobalObject::visitChildren();
  v6 = (unsigned __int8 *)this + 3329;
  if (__ldaxr((unsigned __int8 *)this + 3329))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C]((char *)this + 3329);
LABEL_7:
  v8 = *((_QWORD *)this + 412);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = (_QWORD *)(v8 + 16 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = (_QWORD *)*((_QWORD *)this + 412);
      if ((_DWORD)v9)
      {
        v12 = 16 * v9;
        v11 = (_QWORD *)*((_QWORD *)this + 412);
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          v12 -= 16;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v11 = (_QWORD *)(v8 + 16 * v9);
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = (_QWORD *)(v8 + 16 * v9);
  if (v8)
  {
LABEL_14:
    v13 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    goto LABEL_15;
  }
  v13 = 0;
LABEL_15:
  while (v11 != v13)
  {
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v11[1]);
    v14 = v11 + 2;
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 2;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  v15 = *((_QWORD *)this + 413);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    v17 = v15 + 8 * v16;
    if (*(_DWORD *)(v15 - 12))
    {
      v18 = *((_QWORD *)this + 413);
      if ((_DWORD)v16)
      {
        v19 = 8 * v16;
        v18 = *((_QWORD *)this + 413);
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 8;
          v19 -= 8;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_33;
    }
    v18 = v15 + 8 * v16;
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = v15 + 8 * v16;
  if (!v15)
  {
    v20 = 0;
    goto LABEL_34;
  }
LABEL_33:
  v20 = v15 + 8 * *(unsigned int *)(v15 - 4);
LABEL_34:
  while (v18 != v20)
  {
    v21 = *(uint64_t **)(*(_QWORD *)v18 + 24);
    if (!v21 || (v21[1] & 3) != 0)
      v22 = 0;
    else
      v22 = *v21;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v22);
    v23 = v18 + 8;
    v18 = v17;
    if (v23 != v17)
    {
      v18 = v23;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 8;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  v24 = __ldxr(v6);
  if (v24 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_51;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::JSDOMGlobalObject *)((char *)this + 3329));
LABEL_51:
  v25 = 0;
  v26 = *((_QWORD *)this + 414);
  do
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v26 + 8 * v25++));
  while (v25 != 932);
  v27 = (_QWORD *)*((_QWORD *)this + 418);
  WebCore::ReadableByteStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(v27 + 1, (uint64_t)a2);
  WebCore::ReadableStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(v27 + 36, (uint64_t)a2);
  WebCore::StreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(v27 + 85, (uint64_t)a2);
  WebCore::TransformStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(v27 + 104, (uint64_t)a2);
  WebCore::WritableStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(v27 + 124, (uint64_t)a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v27[175]);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v27[176]);
  result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v27[178]);
  *(_QWORD *)(v29[0] + 88) = v30;
  return result;
}

uint64_t WebCore::JSDOMGlobalObject::JSDOMGlobalObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(JSC::JSGlobalObject::JSGlobalObject() + 3296) = 0u;
  v7 = (void *)WTF::fastMalloc((WTF *)0x1D20);
  bzero(v7, 0x1D20uLL);
  *(_QWORD *)(a1 + 3312) = v7;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 3320) = v8;
  *(_BYTE *)(a1 + 3328) = *(_DWORD *)(v8 + 48) == 0;
  *(_BYTE *)(a1 + 3329) = 0;
  *(_QWORD *)(a1 + 3336) = 0;
  v9 = operator new();
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a2;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_OWORD *)(v9 + 408) = 0u;
  *(_OWORD *)(v9 + 424) = 0u;
  *(_OWORD *)(v9 + 440) = 0u;
  *(_OWORD *)(v9 + 456) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  *(_OWORD *)(v9 + 520) = 0u;
  *(_OWORD *)(v9 + 536) = 0u;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_QWORD *)(v9 + 288) = a2;
  *(_OWORD *)(v9 + 552) = 0u;
  *(_OWORD *)(v9 + 568) = 0u;
  *(_OWORD *)(v9 + 584) = 0u;
  *(_OWORD *)(v9 + 600) = 0u;
  *(_OWORD *)(v9 + 616) = 0u;
  *(_OWORD *)(v9 + 632) = 0u;
  *(_OWORD *)(v9 + 648) = 0u;
  *(_OWORD *)(v9 + 664) = 0u;
  *(_QWORD *)(v9 + 680) = a2;
  *(_OWORD *)(v9 + 688) = 0u;
  *(_OWORD *)(v9 + 704) = 0u;
  *(_OWORD *)(v9 + 720) = 0u;
  *(_OWORD *)(v9 + 736) = 0u;
  *(_OWORD *)(v9 + 752) = 0u;
  *(_OWORD *)(v9 + 768) = 0u;
  *(_OWORD *)(v9 + 784) = 0u;
  *(_OWORD *)(v9 + 800) = 0u;
  *(_OWORD *)(v9 + 816) = 0u;
  *(_QWORD *)(v9 + 832) = a2;
  *(_OWORD *)(v9 + 840) = 0u;
  *(_OWORD *)(v9 + 856) = 0u;
  *(_OWORD *)(v9 + 872) = 0u;
  *(_OWORD *)(v9 + 888) = 0u;
  *(_OWORD *)(v9 + 904) = 0u;
  *(_OWORD *)(v9 + 920) = 0u;
  *(_OWORD *)(v9 + 936) = 0u;
  *(_OWORD *)(v9 + 952) = 0u;
  *(_OWORD *)(v9 + 968) = 0u;
  *(_QWORD *)(v9 + 984) = 0;
  *(_QWORD *)(v9 + 992) = a2;
  *(_OWORD *)(v9 + 1016) = 0u;
  *(_OWORD *)(v9 + 1032) = 0u;
  *(_OWORD *)(v9 + 1048) = 0u;
  *(_OWORD *)(v9 + 1064) = 0u;
  *(_OWORD *)(v9 + 1080) = 0u;
  *(_OWORD *)(v9 + 1096) = 0u;
  *(_OWORD *)(v9 + 1112) = 0u;
  *(_OWORD *)(v9 + 1128) = 0u;
  *(_OWORD *)(v9 + 1144) = 0u;
  *(_OWORD *)(v9 + 1160) = 0u;
  *(_OWORD *)(v9 + 1176) = 0u;
  *(_OWORD *)(v9 + 1192) = 0u;
  *(_OWORD *)(v9 + 1208) = 0u;
  *(_OWORD *)(v9 + 1224) = 0u;
  *(_OWORD *)(v9 + 1240) = 0u;
  *(_QWORD *)(v9 + 1384) = 0;
  *(_OWORD *)(v9 + 1000) = 0u;
  *(_OWORD *)(v9 + 1256) = 0u;
  *(_OWORD *)(v9 + 1272) = 0u;
  *(_OWORD *)(v9 + 1288) = 0u;
  *(_OWORD *)(v9 + 1304) = 0u;
  *(_OWORD *)(v9 + 1320) = 0u;
  *(_OWORD *)(v9 + 1336) = 0u;
  *(_OWORD *)(v9 + 1352) = 0u;
  *(_OWORD *)(v9 + 1368) = 0u;
  *(_QWORD *)(v9 + 1392) = a2;
  *(_QWORD *)(v9 + 1408) = 0;
  *(_QWORD *)(v9 + 1400) = 0;
  *(_QWORD *)(v9 + 1416) = a2;
  *(_QWORD *)(v9 + 1424) = 0;
  *(_QWORD *)(a1 + 3344) = v9;
  *(_QWORD *)(a1 + 3352) = off_1E33929E0;
  *(_QWORD *)(a1 + 3360) = 0;
  *(_QWORD *)(a1 + 3368) = a2;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(a1 + 3376) = off_1E3392A08;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3392) = a2;
  JSC::Heap::registerWeakGCHashTable();
  return a1;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(JSC::JSGlobalObject::JSGlobalObject() + 3296) = 0u;
  v7 = (void *)WTF::fastMalloc((WTF *)0x1D20);
  bzero(v7, 0x1D20uLL);
  *(_QWORD *)(a1 + 3312) = v7;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 3320) = v8;
  *(_BYTE *)(a1 + 3328) = *(_DWORD *)(v8 + 48) == 0;
  *(_BYTE *)(a1 + 3329) = 0;
  *(_QWORD *)(a1 + 3336) = 0;
  v9 = operator new();
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a2;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_OWORD *)(v9 + 408) = 0u;
  *(_OWORD *)(v9 + 424) = 0u;
  *(_OWORD *)(v9 + 440) = 0u;
  *(_OWORD *)(v9 + 456) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  *(_OWORD *)(v9 + 520) = 0u;
  *(_OWORD *)(v9 + 536) = 0u;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_QWORD *)(v9 + 288) = a2;
  *(_OWORD *)(v9 + 552) = 0u;
  *(_OWORD *)(v9 + 568) = 0u;
  *(_OWORD *)(v9 + 584) = 0u;
  *(_OWORD *)(v9 + 600) = 0u;
  *(_OWORD *)(v9 + 616) = 0u;
  *(_OWORD *)(v9 + 632) = 0u;
  *(_OWORD *)(v9 + 648) = 0u;
  *(_OWORD *)(v9 + 664) = 0u;
  *(_QWORD *)(v9 + 680) = a2;
  *(_OWORD *)(v9 + 688) = 0u;
  *(_OWORD *)(v9 + 704) = 0u;
  *(_OWORD *)(v9 + 720) = 0u;
  *(_OWORD *)(v9 + 736) = 0u;
  *(_OWORD *)(v9 + 752) = 0u;
  *(_OWORD *)(v9 + 768) = 0u;
  *(_OWORD *)(v9 + 784) = 0u;
  *(_OWORD *)(v9 + 800) = 0u;
  *(_OWORD *)(v9 + 816) = 0u;
  *(_QWORD *)(v9 + 832) = a2;
  *(_OWORD *)(v9 + 840) = 0u;
  *(_OWORD *)(v9 + 856) = 0u;
  *(_OWORD *)(v9 + 872) = 0u;
  *(_OWORD *)(v9 + 888) = 0u;
  *(_OWORD *)(v9 + 904) = 0u;
  *(_OWORD *)(v9 + 920) = 0u;
  *(_OWORD *)(v9 + 936) = 0u;
  *(_OWORD *)(v9 + 952) = 0u;
  *(_OWORD *)(v9 + 968) = 0u;
  *(_QWORD *)(v9 + 984) = 0;
  *(_QWORD *)(v9 + 992) = a2;
  *(_OWORD *)(v9 + 1016) = 0u;
  *(_OWORD *)(v9 + 1032) = 0u;
  *(_OWORD *)(v9 + 1048) = 0u;
  *(_OWORD *)(v9 + 1064) = 0u;
  *(_OWORD *)(v9 + 1080) = 0u;
  *(_OWORD *)(v9 + 1096) = 0u;
  *(_OWORD *)(v9 + 1112) = 0u;
  *(_OWORD *)(v9 + 1128) = 0u;
  *(_OWORD *)(v9 + 1144) = 0u;
  *(_OWORD *)(v9 + 1160) = 0u;
  *(_OWORD *)(v9 + 1176) = 0u;
  *(_OWORD *)(v9 + 1192) = 0u;
  *(_OWORD *)(v9 + 1208) = 0u;
  *(_OWORD *)(v9 + 1224) = 0u;
  *(_OWORD *)(v9 + 1240) = 0u;
  *(_QWORD *)(v9 + 1384) = 0;
  *(_OWORD *)(v9 + 1000) = 0u;
  *(_OWORD *)(v9 + 1256) = 0u;
  *(_OWORD *)(v9 + 1272) = 0u;
  *(_OWORD *)(v9 + 1288) = 0u;
  *(_OWORD *)(v9 + 1304) = 0u;
  *(_OWORD *)(v9 + 1320) = 0u;
  *(_OWORD *)(v9 + 1336) = 0u;
  *(_OWORD *)(v9 + 1352) = 0u;
  *(_OWORD *)(v9 + 1368) = 0u;
  *(_QWORD *)(v9 + 1392) = a2;
  *(_QWORD *)(v9 + 1408) = 0;
  *(_QWORD *)(v9 + 1400) = 0;
  *(_QWORD *)(v9 + 1416) = a2;
  *(_QWORD *)(v9 + 1424) = 0;
  *(_QWORD *)(a1 + 3344) = v9;
  *(_QWORD *)(a1 + 3352) = off_1E33929E0;
  *(_QWORD *)(a1 + 3360) = 0;
  *(_QWORD *)(a1 + 3368) = a2;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(a1 + 3376) = off_1E3392A08;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3392) = a2;
  JSC::Heap::registerWeakGCHashTable();
  return a1;
}

uint64_t JSC::WeakGCMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::GetterSetter,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::~WeakGCMap(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = v3 + 16;
      do
      {
        if (*(_QWORD *)(v6 - 16) != -1 && *(_QWORD *)v6)
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
          *(_QWORD *)v6 = 0;
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return a1;
}

uint64_t JSC::WeakGCMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::JSFunction,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::~WeakGCMap(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = v3 + 16;
      do
      {
        if (*(_QWORD *)(v6 - 16) != -1 && *(_QWORD *)v6)
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
          *(_QWORD *)v6 = 0;
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return a1;
}

_BYTE *WebCore::makeThisTypeErrorForBuiltins(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  JSC::JSCell *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  size_t v12;
  _BYTE *result;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  uint64_t TypeError;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  char *v21;
  char *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v5 = *((_QWORD *)this + 7);
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6 && *(_QWORD *)(v5 + 16))
    JSC::VMTraps::deferTerminationSlow();
  v7 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v7 & 0xFFFE000000000002) != 0)
    v25 = 0;
  else
    JSC::JSCell::getString(v7, this);
  v8 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0)
    v24 = 0;
  else
    JSC::JSCell::getString(v8, this);
  WTF::String::utf8();
  if (v22)
    v9 = v22 + 16;
  else
    v9 = 0;
  WTF::String::utf8();
  if (v21)
    v10 = v21 + 16;
  else
    v10 = 0;
  if (v22)
  {
    v11 = strlen(v22 + 16);
    if (v21)
    {
LABEL_18:
      v12 = strlen(v21 + 16);
      goto LABEL_19;
    }
  }
  else
  {
    v11 = 0;
    if (v21)
      goto LABEL_18;
  }
  v12 = 0;
LABEL_19:
  result = WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,std::span<char const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(&v23, "Can only call ", 15, v9, v11, 46, v10, v12, " on instances of ", 18, v9, v11);
  if (v23)
  {
    TypeError = JSC::createTypeError(this, (JSC::JSGlobalObject *)&v23, v14);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree((WTF *)v21, v15);
      else
        --*(_DWORD *)v21;
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree((WTF *)v22, v15);
      else
        --*(_DWORD *)v22;
    }
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v25;
    v25 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(_DWORD *)(v5 + 88) - 1;
    *(_DWORD *)(v5 + 88) = v20;
    if (!v20)
    {
      if (*(_BYTE *)(v5 + 93441))
        JSC::VMTraps::undoDeferTerminationSlow();
    }
    return (_BYTE *)TypeError;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::makeGetterTypeErrorForBuiltins(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  JSC::JSCell *v8;
  const WTF::String *v9;
  JSC *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  uint64_t TypeError;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v5 = *((_QWORD *)this + 7);
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6 && *(_QWORD *)(v5 + 16))
    JSC::VMTraps::deferTerminationSlow();
  v7 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v7 & 0xFFFE000000000002) != 0)
    v22 = 0;
  else
    JSC::JSCell::getString(v7, this);
  v8 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0)
    v21 = 0;
  else
    JSC::JSCell::getString(v8, this);
  WTF::String::utf8();
  if (v19)
    v10 = (WTF *)((char *)v19 + 16);
  else
    v10 = 0;
  JSC::makeDOMAttributeGetterTypeErrorMessage(v10, (const char *)&v21, v9);
  TypeError = JSC::createTypeError(this, (JSC::JSGlobalObject *)&v20, v11);
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree(v19, v12);
    else
      --*(_DWORD *)v19;
  }
  *(_BYTE *)(TypeError + 59) |= 8u;
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(_DWORD *)(v5 + 88) - 1;
  *(_DWORD *)(v5 + 88) = v17;
  if (!v17 && *(_BYTE *)(v5 + 93441))
    JSC::VMTraps::undoDeferTerminationSlow();
  return TypeError;
}

unint64_t WebCore::makeDOMExceptionForBuiltins(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  JSC::JSCell *v8;
  char v9;
  JSC::JSGlobalObject *v10;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t TypeError;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;

  v5 = *((_QWORD *)this + 7);
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6 && *(_QWORD *)(v5 + 16))
    JSC::VMTraps::deferTerminationSlow();
  v7 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v7 & 0xFFFE000000000002) != 0)
    v22 = 0;
  else
    JSC::JSCell::getString(v7, this);
  v8 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0)
    v21 = 0;
  else
    JSC::JSCell::getString(v8, this);
  v9 = MEMORY[0x19AEA53F4](v22, "AbortError", 10);
  v12 = *((_QWORD *)this + 7);
  v13 = *(_QWORD *)(v12 + 16);
  if ((v9 & 1) == 0)
  {
    if (!v13 || *(_QWORD *)(v12 + 24) != v13)
    {
      if (v21 && *((_DWORD *)v21 + 1))
        TypeError = JSC::createTypeError(this, (JSC::JSGlobalObject *)&v21, v11);
      else
        TypeError = JSC::createTypeError(this, v10);
      v14 = TypeError;
      goto LABEL_20;
    }
LABEL_38:
    v14 = 10;
    goto LABEL_20;
  }
  if (v13 && *(_QWORD *)(v12 + 24) == v13)
    goto LABEL_38;
  WebCore::DOMException::create(0x10u, &v21, (uint64_t *)&v23);
  v14 = WebCore::wrap<WebCore::DOMException>((uint64_t)this, (uint64_t)this, v23);
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  JSC::addErrorInfo();
LABEL_20:
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v10);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_DWORD *)(v5 + 88) - 1;
  *(_DWORD *)(v5 + 88) = v19;
  if (!v19 && *(_BYTE *)(v5 + 93441))
    JSC::VMTraps::undoDeferTerminationSlow();
  return v14;
}

uint64_t WebCore::isReadableByteStreamAPIEnabled()
{
  uint64_t result;

  {
    if (byte_1ECE90A5E)
      return 7;
    else
      return 6;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    result = 6;
  }
  return result;
}

uint64_t WebCore::getInternalWritableStream(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  char **v5;
  BOOL v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 48);
  if ((v2 & 0xFFFE000000000002) != 0)
    return 10;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSWritableStream::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSWritableStream::s_info && v5 != 0);
  }
  if (!v4)
    return 10;
  v8 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) + 24);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(unsigned __int8 *)(v8 + 5) <= 0x16u)
    return 0;
  return v8;
}

uint64_t WebCore::getInternalReadableStream(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = JSC::jsDynamicCast<WebCore::JSReadableStream *>(*(_QWORD *)(a2 + 48));
  if (!v2)
    return 10;
  v3 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 24);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(unsigned __int8 *)(v3 + 5) <= 0x16u)
    return 0;
  return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 24);
}

unint64_t WebCore::createWritableStreamFromInternal(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::DOMGuardedObject *v6;
  WTF *v7;
  void *v8;
  unint64_t v9;
  WTF *v10;
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;

  v4 = *((_QWORD *)a2 + 6);
  v17 = (WTF *)v4;
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    v5 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v17, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v4 + 5) > 0x16u)
      goto LABEL_6;
    v5 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v4, this);
  }
  v4 = v5;
LABEL_6:
  v6 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)WebCore::DOMGuardedObject::DOMGuardedObject(v6, (unint64_t)this, v4) = &off_1E33925C8;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  v17 = v7;
  v9 = WebCore::createWrapper<WebCore::WritableStream,WebCore::WritableStream>((uint64_t)this, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v12 = (_DWORD *)*((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      if (v12)
      {
        if (v12[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[4];
      }
      v13 = *((_QWORD *)v10 + 1);
      if (v13)
      {
        *(_QWORD *)(v13 + 8) = 0;
        v14 = (unsigned int *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v8);
          }
        }
      }
      else
      {
        *((_QWORD *)v10 + 1) = 0;
      }
      WTF::fastFree(v10, v8);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return v9;
}

unint64_t WebCore::addAbortAlgorithmToSignal(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  JSC::JSCell *v10;
  unint64_t Object;
  WebCore::JSAbortAlgorithm *v12;
  WebCore::AbortSignal *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  bmalloc::api *v23;
  void *v24;
  WebCore::JSAbortAlgorithm *v25;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 6;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAbortSignal::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAbortSignal::s_info && v7 != 0);
  }
  if (!v6)
    return 6;
  v10 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    Object = 0;
  else
    Object = JSC::JSCell::getObject(v10);
  v12 = (WebCore::JSAbortAlgorithm *)WTF::fastMalloc((WTF *)0x20);
  v25 = WebCore::JSAbortAlgorithm::JSAbortAlgorithm(v12, Object, this);
  v13 = *(WebCore::AbortSignal **)(v3 + 24);
  ++*((_DWORD *)v13 + 6);
  v14 = WebCore::AbortSignal::addAbortAlgorithmToSignal((uint64_t)v13, (uint64_t *)&v25);
  v16 = v14;
  if (*((_DWORD *)v13 + 6) == 1)
  {
    WebCore::AbortSignal::~AbortSignal(v13, v15);
    bmalloc::api::isoDeallocate(v23, v24);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_24:
    v17 = COERCE__INT64((double)v16) + 0x2000000000000;
    goto LABEL_17;
  }
  --*((_DWORD *)v13 + 6);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_24;
LABEL_16:
  v17 = v16 | 0xFFFE000000000000;
LABEL_17:
  v18 = (unsigned int *)v25;
  v25 = 0;
  if (v18)
  {
    v19 = v18 + 4;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  return v17;
}

uint64_t WebCore::removeAbortAlgorithmFromSignal(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  bmalloc::api *v18;
  void *v19;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSAbortSignal::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSAbortSignal::s_info && v6 != 0);
    }
    if (v5)
    {
      v9 = *(_QWORD *)(v3 + 24);
      v10 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 1;
      v11 = *(unsigned int *)(v9 + 60);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v9 + 48) + 16;
        v13 = *(unsigned int *)(v9 + 60);
        while (*(_DWORD *)(v12 - 16) != *((_DWORD *)a2 + 14))
        {
          v12 += 16;
          if (!--v13)
            goto LABEL_16;
        }
        v15 = *(_QWORD *)(v12 - 8);
        *(_QWORD *)(v12 - 8) = 0;
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v11 = *(unsigned int *)(v9 + 60);
        }
        v16 = *(_QWORD *)(v9 + 48) + 16 * v11;
        while (v12 != v16)
        {
          *(_DWORD *)(v12 - 16) = *(_DWORD *)v12;
          *(_QWORD *)(v12 - 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          v12 += 16;
        }
        *(_DWORD *)(v9 + 60) = v11 - 1;
        v17 = *(_DWORD *)(v9 + 24);
        v10 = v17 - 1;
        if (v17 == 1)
          goto LABEL_25;
      }
      else
      {
LABEL_16:
        if (!v10)
        {
LABEL_25:
          WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v9, a2);
          bmalloc::api::isoDeallocate(v18, v19);
          return 10;
        }
      }
      *(_DWORD *)(v9 + 24) = v10;
      return 10;
    }
  }
  return 6;
}

uint64_t WebCore::isAbortSignal(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;

  v2 = *(_QWORD *)(a2 + 48);
  if ((v2 & 0xFFFE000000000002) != 0)
    return 6;
  v4 = 16 * (*(_DWORD *)v2 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAbortSignal::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAbortSignal::s_info && v7 != 0);
  }
  if (v6)
    return 7;
  else
    return 6;
}

uint64_t WebCore::createAbortSignal(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  bmalloc::api *v9;
  void *v10;

  v4 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  v5 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = &unk_1E33A4FC0;
  *(_QWORD *)(v5 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v5 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 32), v4);
  *(_QWORD *)v5 = off_1E33A0468;
  *(_QWORD *)(v5 + 32) = &unk_1E33A04E0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 136) = 10;
  v7 = WebCore::wrap<WebCore::AbortSignal>((int)this, this, v5);
  if (*(_DWORD *)(v5 + 24) == 1)
  {
    WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v5, v6);
    bmalloc::api::isoDeallocate(v9, v10);
  }
  else
  {
    --*(_DWORD *)(v5 + 24);
  }
  return v7;
}

uint64_t WebCore::signalAbort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSAbortSignal::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSAbortSignal::s_info && v6 != 0);
    }
    if (v5)
    {
      v10 = *(_QWORD *)(v3 + 24);
      ++*(_DWORD *)(v10 + 24);
      WebCore::AbortSignal::signalAbort((_BYTE *)v10, *((_QWORD *)a2 + 7));
      if (*(_DWORD *)(v10 + 24) == 1)
      {
        WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v10, v11);
        bmalloc::api::isoDeallocate(v12, v13);
      }
      else
      {
        --*(_DWORD *)(v10 + 24);
      }
    }
  }
  return 10;
}

uint64_t WebCore::JSDOMGlobalObject::finishCreation(WebCore::JSDOMGlobalObject *this, JSC::VM *a2)
{
  uint64_t result;

  JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  JSC::JSGlobalObject::finishCreation();
  WebCore::JSDOMGlobalObject::addBuiltinGlobals((unint64_t)this, a2);
  if (*(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C))
    return JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  result = 331;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDOMGlobalObject::finishCreation(WebCore::JSDOMGlobalObject *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t result;

  JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  JSC::JSGlobalObject::finishCreation();
  WebCore::JSDOMGlobalObject::addBuiltinGlobals(this, a2);
  if (*(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C))
    return JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  result = 350;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDOMWindowBase::scriptExecutionContext(WebCore::DOMWindow **this)
{
  return WebCore::DOMWindow::documentIfLocal(this[426]);
}

uint64_t WTF::dataLog<char [27],JSC::JSValue,char [2]>(WTF *a1)
{
  uint64_t v1;

  v1 = WTF::dataFile(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::printInternal();
  JSC::JSValue::dump();
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t *WebCore::JSDOMGlobalObject::canCompileStrings(WebCore::JSDOMGlobalObject *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v7;
  WebCore::SecurityContext *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  int v15;
  _BOOL8 v16;
  uint64_t *result;
  char hasExceptionsAfterHandlingTraps;
  WebCore::JSDOMGlobalObject *v19;
  JSC::JSPromise *v20;
  int v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;

  v7 = *((_QWORD *)a1 + 7);
  v8 = (WebCore::SecurityContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  v24 = v9;
  WebCore::canCompile(v8, &v24, a4, (uint64_t)&v25);
  v11 = v24;
  v24 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (!v27)
    goto LABEL_16;
  if (v27 != 1)
    goto LABEL_23;
  v12 = (WTF::StringImpl *)v25;
  v22[0] = v25;
  v13 = v26;
  v26 = 0;
  v23 = v13;
  if (!*(_QWORD *)(v7 + 16))
  {
    v14.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v25, (JSC::JSGlobalObject *)&v23);
    JSC::VM::throwException((JSC::VM *)v7, a1, v14);
    v13 = v23;
  }
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!*(_DWORD *)(v7 + 80))
  {
    v15 = v27;
    goto LABEL_15;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7);
  v15 = v27;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
  {
LABEL_15:
    if (!v15)
    {
LABEL_16:
      v15 = 0;
      v16 = (_BYTE)v25 != 0;
LABEL_17:
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v15](v22, &v25);
      return (uint64_t *)v16;
    }
LABEL_23:
    v19 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSDOMGlobalObject::promiseRejectionTracker(v19, v20, v21);
  }
  v16 = 0;
  result = 0;
  if (v27 != -1)
    goto LABEL_17;
  return result;
}

uint64_t *WebCore::JSDOMGlobalObject::promiseRejectionTracker(WebCore::JSDOMGlobalObject *a1, JSC::JSPromise *a2, int a3)
{
  uint64_t *result;
  WebCore::ScriptExecutionContext *v7;

  result = (uint64_t *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (result)
  {
    v7 = (WebCore::ScriptExecutionContext *)result;
    result = (uint64_t *)result[19];
    if (result || (result = (uint64_t *)WebCore::ScriptExecutionContext::ensureRejectedPromiseTrackerSlow(v7)) != 0)
    {
      if (a3 == 1)
      {
        return WebCore::RejectedPromiseTracker::promiseHandled((WebCore::RejectedPromiseTracker *)result, a1, a2);
      }
      else if (!a3)
      {
        return (uint64_t *)WebCore::RejectedPromiseTracker::promiseRejected((WebCore::RejectedPromiseTracker *)result, (JSC::VM **)a1, a2);
      }
    }
  }
  return result;
}

void WebCore::JSDOMGlobalObject::reportUncaughtExceptionAtEventLoop(JSC::JSGlobalObject *a1, uint64_t a2)
{
  WebCore::reportException(a1, a2, 0, 0, 0);
}

uint64_t WebCore::JSDOMGlobalObject::clearDOMGuardedObjects(WebCore::JSDOMGlobalObject *this)
{
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  result = (uint64_t)WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::HashTable((uint64_t *)&v12, (_QWORD **)this + 413);
  v3 = (uint64_t)v12;
  if (!v12)
  {
    v6 = 0;
    v4 = 0;
LABEL_16:
    v5 = &v12[v4];
    goto LABEL_8;
  }
  v4 = *((unsigned int *)v12 - 1);
  v5 = &v12[v4];
  if (!*((_DWORD *)v12 - 3))
  {
    v6 = &v12[v4];
    goto LABEL_16;
  }
  v6 = v12;
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v6 = v12;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v12)
    v8 = &v12[*((unsigned int *)v12 - 1)];
  else
    v8 = 0;
  if (v8 != v6)
  {
    do
    {
      v9 = *v6;
      result = WebCore::DOMGuardedObject::removeFromGlobalObject(*v6);
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        *(_QWORD *)(v10 + 8) = 3;
        *(_QWORD *)(v9 + 24) = 0;
      }
      v11 = v6 + 1;
      v6 = v5;
      if (v11 != v5)
      {
        v6 = v11;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          if (++v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    v3 = (uint64_t)v12;
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v2);
  return result;
}

uint64_t WebCore::DOMGuardedObject::clear(WebCore::DOMGuardedObject *this)
{
  uint64_t result;
  uint64_t v3;

  result = WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t WebCore::JSDOMGlobalObject::createCrossOriginFunction(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *Allocator;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::StringImpl *v43;

  v7 = *(_QWORD *)(a2 + 56);
  ++*(_DWORD *)(v7 + 916);
  v8 = (uint64_t *)(a1 + 3360);
  v9 = *(_QWORD *)(a1 + 3360);
  if (v9
    || (WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::rehash((uint64_t *)(a1 + 3360), 8u, 0), (v9 = *v8) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((0xD7862706ELL
              * (unint64_t)(277951225 * ((v13 >> 31) ^ v13)
                                 + 95187966 * WTF::PtrHashBase<WTF::AtomString *,false>::hash(a4))) >> 4);
  v15 = (uint64_t *)(v9 + 24 * v14);
  v16 = *v15;
  v17 = v15[1];
  if (*(_OWORD *)v15 != 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v16 == a2 && v17 == a4)
      {
        v26 = 0;
        goto LABEL_45;
      }
      if (v16 == -1)
        v18 = v15;
      v14 = (v14 + v19) & v10;
      v15 = (uint64_t *)(v9 + 24 * v14);
      v16 = *v15;
      v17 = v15[1];
      ++v19;
    }
    while (*(_OWORD *)v15 != 0);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v8 - 16);
      v15 = v18;
    }
  }
  *v15 = a2;
  v15[1] = a4;
  if (!a3 || (*((_BYTE *)a3 + 16) & 0x20) != 0)
  {
    v20 = 0;
  }
  else
  {
    *(_DWORD *)a3 += 2;
    v20 = a3;
  }
  v43 = v20;
  v22 = JSC::JSFunction::create();
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v21);
      if (v22)
        goto LABEL_20;
LABEL_31:
      Allocator = 0;
      goto LABEL_32;
    }
    *(_DWORD *)v43 -= 2;
  }
  if (!v22)
    goto LABEL_31;
LABEL_20:
  if ((v22 & 8) != 0)
    v23 = (v22 - 112) | 1;
  else
    v23 = v22 & 0xFFFFFFFFFFFFC000;
  if ((v23 & 1) != 0)
    v24 = v23 + 47;
  else
    v24 = *(_QWORD *)v23 + 32;
  Allocator = *(_QWORD **)(v24 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v24 + 16) = *Allocator;
  *Allocator = v22;
  Allocator[1] = 0;
  Allocator[2] = 0;
LABEL_32:
  v27 = v15[2];
  v15[2] = (uint64_t)Allocator;
  if (v27)
    *(_QWORD *)(v27 + 8) = 3;
  v28 = *v8;
  if (*v8)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v8;
  if (*v8)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_44;
    goto LABEL_41;
  }
  if (3 * v33 <= 4 * v32)
  {
    if (!(_DWORD)v33)
    {
      v34 = 8;
      goto LABEL_43;
    }
LABEL_41:
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_43:
    v15 = (uint64_t *)WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::rehash(v8, v34, v15);
  }
LABEL_44:
  v26 = 1;
LABEL_45:
  v35 = v15[2];
  if (v35 && (*(_BYTE *)(v35 + 8) & 3) == 0)
    v36 = *(_QWORD *)v35;
  else
    v36 = 0;
  if (v36)
    v26 = 1;
  if ((v26 & 1) == 0)
  {
    if (a3)
    {
      if ((*((_BYTE *)a3 + 16) & 0x20) != 0)
        a3 = 0;
      else
        *(_DWORD *)a3 += 2;
    }
    v36 = JSC::JSFunction::create();
    if (a3)
    {
      if (*(_DWORD *)a3 == 2)
      {
        WTF::StringImpl::destroy(a3, v37);
        if (v36)
          goto LABEL_59;
        goto LABEL_70;
      }
      *(_DWORD *)a3 -= 2;
    }
    if (v36)
    {
LABEL_59:
      if ((v36 & 8) != 0)
        v38 = (v36 - 112) | 1;
      else
        v38 = v36 & 0xFFFFFFFFFFFFC000;
      if ((v38 & 1) != 0)
        v39 = v38 + 47;
      else
        v39 = *(_QWORD *)v38 + 32;
      v40 = *(_QWORD **)(v39 + 16);
      if (!v40)
        v40 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v39 + 16) = *v40;
      *v40 = v36;
      v40[1] = 0;
      v40[2] = 0;
      goto LABEL_71;
    }
LABEL_70:
    v40 = 0;
LABEL_71:
    v41 = v15[2];
    v15[2] = (uint64_t)v40;
    if (v41)
      *(_QWORD *)(v41 + 8) = 3;
  }
  --*(_DWORD *)(v7 + 916);
  if (*(_BYTE *)(v7 + 1198) || *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1489))
    JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow((JSC::Heap *)(v7 + 192));
  return v36;
}

unint64_t WebCore::JSDOMGlobalObject::createCrossOriginGetterSetter(uint64_t a1, uint64_t a2, uint64_t a3, JSC::JSGlobalObject *a4, uint64_t a5)
{
  JSC::JSGlobalObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSObject *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  JSC::JSGlobalObject *v23;
  JSC::JSObject *v24;
  unint64_t Allocator;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  JSC::JSObject *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = a4;
  v8 = *(_QWORD *)(a2 + 56);
  if (a4)
    v9 = (uint64_t)a4;
  else
    v9 = a5;
  ++*(_DWORD *)(v8 + 916);
  v10 = (uint64_t *)(a1 + 3384);
  v11 = *(_QWORD *)(a1 + 3384);
  if (v11
    || (WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::rehash((uint64_t *)(a1 + 3384), 8u, 0), (v11 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v17 = v12 & ((0xD7862706ELL
              * (unint64_t)(277951225 * ((v15 >> 31) ^ v15)
                                 + 95187966 * WTF::PtrHashBase<WTF::AtomString *,false>::hash(v9))) >> 4);
  v18 = (uint64_t *)(v11 + 24 * v17);
  v19 = *v18;
  v20 = v18[1];
  if (*(_OWORD *)v18 != 0)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v19 == a2 && v20 == v9)
      {
        v37 = 0;
        goto LABEL_45;
      }
      if (v19 == -1)
        v21 = v18;
      v17 = (v17 + v22) & v12;
      v18 = (uint64_t *)(v11 + 24 * v17);
      v19 = *v18;
      v20 = v18[1];
      ++v22;
    }
    while (*(_OWORD *)v18 != 0);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      v18 = v21;
    }
  }
  *v18 = a2;
  v18[1] = v9;
  if (v6)
  {
    v23 = (JSC::JSGlobalObject *)JSC::JSCustomGetterFunction::create();
    if (a5)
    {
LABEL_18:
      v24 = (JSC::JSObject *)JSC::JSCustomSetterFunction::create();
      goto LABEL_21;
    }
  }
  else
  {
    v23 = 0;
    if (a5)
      goto LABEL_18;
  }
  v24 = 0;
LABEL_21:
  Allocator = JSC::GetterSetter::create((JSC::GetterSetter *)v8, (JSC::VM *)a2, v23, v24, v16);
  if (Allocator)
  {
    v26 = Allocator;
    if ((Allocator & 8) != 0)
      v27 = (Allocator - 112) | 1;
    else
      v27 = Allocator & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD *)(v28 + 16);
    if (!Allocator)
      Allocator = JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *(_QWORD *)Allocator;
    *(_QWORD *)Allocator = v26;
    *(_QWORD *)(Allocator + 8) = 0;
    *(_QWORD *)(Allocator + 16) = 0;
  }
  v29 = v18[2];
  v18[2] = Allocator;
  if (v29)
    *(_QWORD *)(v29 + 8) = 3;
  v30 = *v10;
  if (*v10)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *v10;
  if (*v10)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_44;
    goto LABEL_39;
  }
  if (3 * v35 <= 4 * v34)
  {
    if (!(_DWORD)v35)
    {
      v36 = 8;
      goto LABEL_43;
    }
LABEL_39:
    v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
LABEL_43:
    v18 = (uint64_t *)WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::rehash(v10, v36, v18);
  }
LABEL_44:
  v37 = 1;
LABEL_45:
  v38 = v18[2];
  if (v38 && (*(_BYTE *)(v38 + 8) & 3) == 0)
    v39 = *(_QWORD *)v38;
  else
    v39 = 0;
  if (v39)
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    if (v6)
      v6 = (JSC::JSGlobalObject *)JSC::JSCustomGetterFunction::create();
    if (a5)
      v40 = (JSC::JSObject *)JSC::JSCustomSetterFunction::create();
    else
      v40 = 0;
    v41 = JSC::GetterSetter::create((JSC::GetterSetter *)v8, (JSC::VM *)a2, v6, v40, v16);
    v39 = v41;
    if (v41)
    {
      if ((v41 & 8) != 0)
        v42 = (v41 - 112) | 1;
      else
        v42 = v41 & 0xFFFFFFFFFFFFC000;
      if ((v42 & 1) != 0)
        v43 = v42 + 47;
      else
        v43 = *(_QWORD *)v42 + 32;
      v41 = *(_QWORD *)(v43 + 16);
      if (!v41)
        v41 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v43 + 16) = *(_QWORD *)v41;
      *(_QWORD *)v41 = v39;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
    }
    v44 = v18[2];
    v18[2] = v41;
    if (v44)
      *(_QWORD *)(v44 + 8) = 3;
  }
  --*(_DWORD *)(v8 + 916);
  if (*(_BYTE *)(v8 + 1198) || *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1489))
    JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow((JSC::Heap *)(v8 + 192));
  return v39;
}

uint64_t WebCore::JSDOMGlobalObject::compileStreaming(unint64_t a1, unint64_t a2)
{
  return WebCore::handleResponseOnStreamingAction(a1, a2);
}

uint64_t WebCore::handleResponseOnStreamingAction(unint64_t a1, unint64_t a2)
{
  JSC::Structure *v4;
  int v5;
  JSC::VM *v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::DOMGuardedObject *v9;
  unint64_t v10;
  uint64_t v11;
  const WTF::String *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v33;
  BOOL isSupportedWebAssemblyMIMEType;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  void *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF::StringImpl *v63;
  int v64;
  char v65[8];
  unint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  unint64_t *v70;
  WTF::StringImpl **v71;

  v66 = a1;
  MEMORY[0x19AEA3294](v65, *(_QWORD *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 1164);
  if (v5)
    v6 = (JSC::VM *)(16 * (v5 & 0xFFFFFFFE));
  else
    v6 = 0;
  v7 = JSC::JSPromise::create(*(JSC::JSPromise **)(a1 + 56), v6, v4);
  v8 = WTF::fastMalloc((WTF *)0x30);
  v9 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v8, a1, v7);
  *(_QWORD *)v9 = &off_1E3226868;
  *((_DWORD *)v9 + 10) = 1;
  *((_BYTE *)v9 + 44) = 0;
  v10 = JSC::jsDynamicCast<WebCore::JSFetchResponse *>(a2);
  if (!v10)
    goto LABEL_19;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    goto LABEL_19;
  WebCore::FetchBodyOwner::loadingException((uint64_t *)&v67, *(WebCore::FetchBodyOwner **)(v10 + 24));
  if ((_BYTE)v69)
  {
    v13 = (char)v67;
    v14 = v68;
    if (v68)
      *(_DWORD *)v68 += 4;
    v71 = 0;
    LOBYTE(v62) = v13;
    v63 = v14;
    WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v62, 0, (objc_class **)&v71);
    v16 = v63;
    v63 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v15);
        if (v14)
        {
LABEL_13:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v15);
          else
            *(_DWORD *)v14 -= 2;
        }
LABEL_15:
        v17 = *(_QWORD *)(v8 + 24);
        if (v17 && (v18 = *(_QWORD *)v17) != 0 && (*(_BYTE *)(v17 + 8) & 3) == 0)
        {
          if ((v18 & 0xFFFE000000000002) != 0)
          {
            v19 = 0;
          }
          else if (*(_BYTE *)(v18 + 5) == 68)
          {
            v19 = *(_QWORD *)v17;
          }
          else
          {
            v19 = 0;
          }
        }
        else
        {
          v19 = 10;
        }
        if ((_BYTE)v69)
        {
          v31 = v68;
          v68 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v15);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        goto LABEL_47;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (v14)
      goto LABEL_13;
    goto LABEL_15;
  }
  v24 = v11 + 288;
  v25 = *(_BYTE *)(v11 + 544) ? v11 + 288 : v11 + 552;
  if ((*(_BYTE *)(v25 + 234) & 7u) >= 3)
    goto LABEL_19;
  v26 = *(_QWORD *)(v11 + 152);
  v27 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = (WTF::StringImpl **)(*(_QWORD *)(v26 + 8) + 8);
    while (*((_WORD *)v29 - 4) != 26)
    {
      ++v28;
      v29 += 2;
      if (v27 == v28)
        goto LABEL_38;
    }
    if (v28 >= v27)
    {
      __break(0xC471u);
      goto LABEL_150;
    }
    v30 = *v29;
    if (*v29)
      *(_DWORD *)v30 += 2;
  }
  else
  {
LABEL_38:
    v30 = 0;
  }
  v67 = v30;
  isSupportedWebAssemblyMIMEType = WebCore::MIMETypeRegistry::isSupportedWebAssemblyMIMEType((WebCore::MIMETypeRegistry *)&v67, v12);
  v35 = v67;
  v67 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::destroy(v35, v33);
      if (!isSupportedWebAssemblyMIMEType)
        goto LABEL_19;
      goto LABEL_60;
    }
    *(_DWORD *)v35 -= 2;
  }
  if (!isSupportedWebAssemblyMIMEType)
    goto LABEL_19;
LABEL_60:
  if (!*(_BYTE *)(v11 + 544))
    v24 = v11 + 552;
  WebCore::ResourceResponse::platformLazyInit(v24, 1);
  if ((*(__int16 *)(v24 + 136) - 200) < 0x64)
  {
    if (!*(_BYTE *)(v11 + 128))
      goto LABEL_82;
    if (!*(_BYTE *)(v11 + 136))
    {
      v36 = *(_QWORD *)(v11 + 120);
      if (!v36)
        goto LABEL_66;
      if (!WebCore::InternalReadableStream::isDisturbed(*(WebCore::InternalReadableStream **)(v36 + 8)))
      {
        if (*(_BYTE *)(v11 + 128))
        {
          if (!WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(v11 + 120)
                                                                                              + 8)))
          {
            if (!*(_BYTE *)(v11 + 128))
            {
LABEL_82:
              JSC::Wasm::StreamingCompiler::create();
              if (*(_QWORD *)(v11 + 808))
              {
LABEL_83:
                v39 = v61;
                v61 = 0;
                v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                *(_QWORD *)v40 = &off_1E3392660;
                *((_QWORD *)v40 + 1) = a1;
                *((_QWORD *)v40 + 2) = v39;
                v67 = v40;
                *(_BYTE *)(v11 + 136) = 1;
                if (*(_BYTE *)(v11 + 128) && (v41 = *(_QWORD *)(v11 + 120)) != 0)
                {
                  v42 = v40;
                  v43 = WTF::fastMalloc((WTF *)0x18);
                  *(_DWORD *)(v43 + 8) = 1;
                  *(_QWORD *)v43 = off_1E3367688;
                  *(_QWORD *)(v43 + 16) = v42;
                  v44 = *(_DWORD **)(v11 + 80);
                  *(_QWORD *)(v11 + 80) = v43;
                  if (v44)
                  {
                    if (v44[2] == 1)
                    {
                      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
                      v43 = *(_QWORD *)(v11 + 80);
                    }
                    else
                    {
                      --v44[2];
                    }
                  }
                  WebCore::InternalReadableStream::pipeTo(*(_QWORD *)(v41 + 8), (WTF::StringImpl *)v43);
                }
                else
                {
                  WebCore::FetchResponse::Loader::consumeDataByChunk(*(_QWORD *)(v11 + 808), (uint64_t *)&v67);
                  if (v67)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
                }
                v45 = *(_QWORD *)(v8 + 24);
                if (!v45 || (v46 = *(_QWORD *)v45) == 0 || (*(_BYTE *)(v45 + 8) & 3) != 0)
                {
                  v19 = 10;
                  goto LABEL_114;
                }
LABEL_99:
                if ((v46 & 0xFFFE000000000002) != 0)
                {
                  v19 = 0;
                }
                else if (*(_BYTE *)(v46 + 5) == 68)
                {
                  v19 = v46;
                }
                else
                {
                  v19 = 0;
                }
LABEL_114:
                v50 = v61;
                v61 = 0;
                if (v50)
                {
                  v51 = (unsigned int *)(v50 + 8);
                  do
                  {
                    v52 = __ldaxr(v51);
                    v53 = v52 - 1;
                  }
                  while (__stlxr(v53, v51));
                  if (!v53)
                  {
                    atomic_store(1u, (unsigned int *)(v50 + 8));
                    v54 = (WTF *)MEMORY[0x19AEA3CFC]();
                    WTF::fastFree(v54, v55);
                  }
                }
                goto LABEL_47;
              }
              v47 = *(unsigned __int8 *)(v11 + 128);
              if (*(_BYTE *)(v11 + 128))
              {
                if (*(_QWORD *)(v11 + 120))
                  goto LABEL_83;
                *(_BYTE *)(v11 + 136) = 1;
                WebCore::FetchBody::take((uint64_t *)(v11 + 40), v38, (uint64_t)&v62);
                v47 = v63;
                v67 = (WTF::StringImpl *)&v61;
                v68 = (WTF::StringImpl *)&v66;
                v69 = &v61;
                v70 = &v66;
                if ((_DWORD)v63 == -1)
                {
                  std::__throw_bad_variant_access[abi:sn180100]();
                  goto LABEL_99;
                }
              }
              else
              {
                v62 = 0;
                LODWORD(v63) = 0;
                v67 = (WTF::StringImpl *)&v61;
                v68 = (WTF::StringImpl *)&v66;
                v69 = &v61;
                v70 = &v66;
              }
              v71 = &v67;
              ((void (*)(WTF::StringImpl ***, WTF **))*(&off_1E3392678 + v47))(&v71, &v62);
              v48 = *(_QWORD *)(v8 + 24);
              if (v48 && (v49 = *(_QWORD *)v48) != 0 && (*(_BYTE *)(v48 + 8) & 3) == 0)
              {
                if ((v49 & 0xFFFE000000000002) != 0)
                {
                  v19 = 0;
                }
                else if (*(_BYTE *)(v49 + 5) == 68)
                {
                  v19 = *(_QWORD *)v48;
                }
                else
                {
                  v19 = 0;
                }
              }
              else
              {
                v19 = 10;
              }
              if ((_DWORD)v63 != -1)
                ((void (*)(WTF::StringImpl **, WTF **))off_1E3392690[v63])(&v67, &v62);
              goto LABEL_114;
            }
LABEL_66:
            if ((*(_DWORD *)(v11 + 48) - 1) > 1)
              goto LABEL_82;
            if (*(_BYTE *)(v11 + 192))
            {
              v37 = 0;
LABEL_81:
              v62 = v37;
              v64 = 0;
              _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_((uint64_t)&v67, &v62);
              goto LABEL_82;
            }
            v37 = *(WTF **)(v11 + 120);
            if (v37)
            {
LABEL_80:
              ++*(_DWORD *)v37;
              goto LABEL_81;
            }
            WebCore::FetchBodyOwner::createReadableStream((WebCore::FetchBodyOwner *)v11, a1, (uint64_t)&v67);
            if (!(_BYTE)v69)
            {
              if (*(_BYTE *)(v11 + 128))
              {
                v37 = *(WTF **)(v11 + 120);
                if (!v37)
                  goto LABEL_81;
                goto LABEL_80;
              }
              goto LABEL_150;
            }
            v56 = v68;
            LOBYTE(v62) = (_BYTE)v67;
            v64 = 1;
            v63 = 0;
            v71 = 0;
            if (v68)
              *(_DWORD *)v68 += 2;
            v68 = v56;
            WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v67, 0, (objc_class **)&v71);
            v58 = v68;
            v68 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
              {
                WTF::StringImpl::destroy(v58, v57);
                if (!v56)
                  goto LABEL_134;
LABEL_132:
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, v57);
                else
                  *(_DWORD *)v56 -= 2;
LABEL_134:
                v59 = *(_QWORD *)(v8 + 24);
                if (v59 && (v60 = *(_QWORD *)v59) != 0 && (*(_BYTE *)(v59 + 8) & 3) == 0)
                {
                  if ((v60 & 0xFFFE000000000002) != 0)
                  {
                    v19 = 0;
                  }
                  else if (*(_BYTE *)(v60 + 5) == 68)
                  {
                    v19 = *(_QWORD *)v59;
                  }
                  else
                  {
                    v19 = 0;
                  }
                }
                else
                {
                  v19 = 10;
                }
                if (v64 != -1)
                  ((void (*)(WTF::StringImpl **, WTF **))off_1E3392640[v64])(&v67, &v62);
                goto LABEL_47;
              }
              *(_DWORD *)v58 -= 2;
            }
            if (!v56)
              goto LABEL_134;
            goto LABEL_132;
          }
          goto LABEL_19;
        }
LABEL_150:
        __break(1u);
        goto LABEL_82;
      }
    }
  }
LABEL_19:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v67, 0);
  v21 = v67;
  v67 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(_QWORD *)(v8 + 24);
  if (v22 && (v23 = *(_QWORD *)v22) != 0 && (*(_BYTE *)(v22 + 8) & 3) == 0)
  {
    if ((v23 & 0xFFFE000000000002) != 0)
    {
      v19 = 0;
    }
    else if (*(_BYTE *)(v23 + 5) == 68)
    {
      v19 = *(_QWORD *)v22;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = 10;
  }
LABEL_47:
  if (*(_DWORD *)(v8 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  else
    --*(_DWORD *)(v8 + 16);
  MEMORY[0x19AEA32A0](v65);
  return v19;
}

uint64_t WebCore::JSDOMGlobalObject::instantiateStreaming(unint64_t a1, unint64_t a2)
{
  return WebCore::handleResponseOnStreamingAction(a1, a2);
}

WTF::StringImpl *WebCore::JSDOMGlobalObject::moduleLoaderResolve@<X0>(WebCore::ShadowRealmGlobalScope **a1@<X0>, WebCore::JSDOMGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)WebCore::scriptModuleLoader(a1, a2);
  if (result)
    return WebCore::ScriptModuleLoader::resolve((JSC::JSGlobalObject *)a1, a3, (uint64_t)result, a4, a5);
  *a5 = 0;
  return result;
}

_QWORD *WebCore::scriptModuleLoader(WebCore::ShadowRealmGlobalScope **this, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  WebCore::ShadowRealmGlobalScope *v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;
  WebCore::ShadowRealmGlobalScope **v22;

  v2 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSDOMWindowBase::s_info;
  else
    v5 = 1;
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v5)
  {
    v11 = 16 * v2;
    do
    {
      v11 = *(_QWORD *)(v11 + 16);
      v6 = v11 != 0;
    }
    while ((char **)v11 != &WebCore::JSDOMWindowBase::s_info && v11 != 0);
  }
  if (!v6)
  {
    if ((_DWORD)v2)
      v13 = v4 == &WebCore::JSShadowRealmGlobalScopeBase::s_info;
    else
      v13 = 1;
    v14 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    if (!v13)
    {
      v16 = 16 * v2;
      do
      {
        v16 = *(_QWORD *)(v16 + 16);
        v14 = v16 != 0;
      }
      while ((char **)v16 != &WebCore::JSShadowRealmGlobalScopeBase::s_info && v16 != 0);
    }
    if (v14)
      return WebCore::ShadowRealmGlobalScope::moduleLoader(this[425]);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v2)
    {
      v15 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
      if (v4 != &WebCore::JSWorkerGlobalScopeBase::s_info)
      {
        v18 = 16 * v2;
        do
        {
          v18 = *(_QWORD *)(v18 + 16);
          v15 = v18 != 0;
        }
        while ((char **)v18 != &WebCore::JSWorkerGlobalScopeBase::s_info && v18 != 0);
      }
    }
    if (v15)
      return (_QWORD *)*((_QWORD *)this[425] + 44);
    if ((_DWORD)v2 && v4 != &WebCore::JSWorkletGlobalScopeBase::s_info)
    {
      v20 = 16 * v2;
      do
      {
        v20 = *(_QWORD *)(v20 + 16);
        v3 = v20 != 0;
      }
      while ((char **)v20 != &WebCore::JSWorkletGlobalScopeBase::s_info && v20 != 0);
    }
    if (v3)
      return (_QWORD *)*((_QWORD *)this[425] + 44);
    if (v4 != &WebCore::JSIDBSerializationGlobalObject::s_info)
    {
      v22 = this;
      WTF::dataLog<char [27],JSC::JSValue,char [2]>((WTF *)&v22);
      __break(0xC471u);
LABEL_55:
      JUMPOUT(0x1956A62CCLL);
    }
    return 0;
  }
  v7 = 0;
  v8 = this[426];
  if (!v8)
    return (_QWORD *)v7;
  if (*((_BYTE *)v8 + 56))
    return (_QWORD *)v7;
  v7 = *((_QWORD *)v8 + 9);
  if (!v7)
    return (_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
    return 0;
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    goto LABEL_55;
  }
  v7 = *(_QWORD *)(v9 + 1312);
  if (v7)
    return (_QWORD *)v7;
  return WebCore::Document::ensureModuleLoader((WebCore::Document *)(v9 - 288));
}

unint64_t WebCore::JSDOMGlobalObject::moduleLoaderFetch(WebCore::ShadowRealmGlobalScope **a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  JSC::JSPromise *v12;
  JSValue v13;

  v10 = WebCore::scriptModuleLoader(a1, a2);
  if (v10)
    return WebCore::ScriptModuleLoader::fetch((uint64_t)v10, (JSC::JSGlobalObject *)a1, (uint64_t)a2, a3, a4, a5);
  v12 = (JSC::JSPromise *)JSC::JSInternalPromise::create();
  v13.super.isa = (Class)10;
  JSC::JSPromise::reject(v12, (JSC::JSGlobalObject *)a1, v13);
  return (unint64_t)v12;
}

uint64_t WebCore::JSDOMGlobalObject::moduleLoaderEvaluate(WebCore::ShadowRealmGlobalScope **a1, WebCore::JSDOMGlobalObject *a2, unint64_t a3, JSC::AbstractModuleRecord *a4, uint64_t a5, objc_class *a6, objc_class *a7)
{
  int v12;
  _QWORD *v14;

  v12 = (int)a2;
  v14 = WebCore::scriptModuleLoader(a1, a2);
  if (v14)
    return WebCore::ScriptModuleLoader::evaluate((uint64_t)v14, (JSC::JSGlobalObject *)a1, v12, a3, a4, a5, a6, a7);
  else
    return 10;
}

uint64_t WebCore::JSDOMGlobalObject::moduleLoaderImportModule(WebCore::ShadowRealmGlobalScope **a1, WebCore::JSDOMGlobalObject *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  JSC::JSPromise *v12;
  JSValue v13;

  v10 = WebCore::scriptModuleLoader(a1, a2);
  if (v10)
    return WebCore::ScriptModuleLoader::importModule((uint64_t)v10, (unint64_t)a1, (uint64_t)a2, a3, a4, a5);
  v12 = (JSC::JSPromise *)JSC::JSInternalPromise::create();
  v13.super.isa = (Class)10;
  JSC::JSPromise::reject(v12, (JSC::JSGlobalObject *)a1, v13);
  return (uint64_t)v12;
}

unsigned __int8 *WebCore::JSDOMGlobalObject::moduleLoaderCreateImportMetaProperties(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  _QWORD *v6;
  JSC::Structure *v7;
  int v9;
  unint64_t v10;

  v6 = WebCore::scriptModuleLoader((WebCore::ShadowRealmGlobalScope **)a1, a2);
  if (v6)
    return WebCore::ScriptModuleLoader::createImportMetaProperties((uint64_t)v6, a1, a2, a3);
  v9 = *(_DWORD *)(a1 + 932);
  if (v9)
    v10 = 16 * (v9 & 0xFFFFFFFE);
  else
    v10 = 0;
  return (unsigned __int8 *)JSC::constructEmptyObject(*(JSC **)(a1 + 56), v10, v7);
}

unint64_t JSC::constructEmptyObject(JSC *this, unint64_t a2, JSC::Structure *a3)
{
  size_t v5;
  unint64_t v6;
  int v7;

  v5 = 8 * *(unsigned __int8 *)(a2 + 14);
  v6 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)this, v5 + 16);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  bzero((void *)(v6 + 16), v5);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v6;
}

unint64_t WebCore::JSDOMGlobalObject::deriveShadowRealmGlobalObject(WebCore::JSDOMGlobalObject *this, JSC::JSGlobalObject *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WebCore::SecurityContext *v5;
  WTF::StringImpl *v6;
  WebCore::Document *v7;
  const WebCore::SecurityOrigin *v8;
  const WebCore::SecurityOrigin *v9;
  WebCore::DOMWrapperWorld *v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::SecurityOrigin *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *Allocator;
  uint64_t SlowCase;
  uint64_t *v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  void *v26;
  uint64_t v27;
  JSValue v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF *v39;

  v2 = (unint64_t)this;
  v3 = *((_QWORD *)this + 7);
  v4 = (uint64_t *)(v3 + 40136);
  v5 = (WebCore::SecurityContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v5)
  {
    if (!*((_BYTE *)v5 + 274))
    {
      v7 = (WebCore::SecurityContext *)((char *)v5 - 192);
      WebCore::SecurityContext::securityOrigin(v5, v6);
      v9 = v8;
      v10 = *(WebCore::DOMWrapperWorld **)(v2 + 3320);
      if (!WebCore::Document::isTopDocument(v7))
      {
        v11 = WebCore::Document::parentDocument(v7);
        if (v11)
        {
          v12 = (_QWORD *)v11;
          do
          {
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 24), v6);
            if (!WebCore::SecurityOrigin::isSameOriginDomain(v13, v9))
              break;
            v2 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12[66] + 8) + 304)+ 16)+ 112), v10)+ 2);
            if (WebCore::Document::isTopDocument((WebCore::Document *)v12))
              break;
            v12 = (_QWORD *)WebCore::Document::parentDocument((WebCore::Document *)v12);
          }
          while (v12);
        }
      }
    }
  }
  v14 = WebCore::scriptModuleLoader((WebCore::ShadowRealmGlobalScope **)v2, v6);
  v15 = bmalloc::api::isoAllocate();
  *(_DWORD *)v15 = 1;
  if (v2)
  {
    if ((v2 & 8) != 0)
      v38 = ((v2 - 112) | 1) + 47;
    else
      v38 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFC000) + 32;
    Allocator = *(_QWORD **)(v38 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v38 + 16) = *Allocator;
    *Allocator = v2;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  else
  {
    Allocator = 0;
  }
  *(_QWORD *)(v15 + 8) = Allocator;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  LODWORD(v39) = 67381299;
  SlowCase = *v4;
  if ((unint64_t)*v4 < *(_QWORD *)(v3 + 40144))
    goto LABEL_12;
  SlowCase = *(_QWORD *)(v3 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v3 + 40160);
    *(_QWORD *)(v3 + 40144) = SlowCase + HIDWORD(v34);
    *(_QWORD *)(v3 + 40152) = SlowCase + (int)v34;
LABEL_12:
    *v4 = SlowCase + 128;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v3, 0, 2, &v39, &WebCore::JSShadowRealmGlobalScope::s_info, 0, 0);
  if (*(_BYTE *)(v3 + 755))
    __dmb(0xAu);
  v18 = (uint64_t *)(v3 + 38640);
  LODWORD(v39) = 755107872;
  v19 = *v4;
  if ((unint64_t)*v4 < *(_QWORD *)(v3 + 40144))
    goto LABEL_16;
  v19 = *(_QWORD *)(v3 + 40152);
  if ((v19 & 1) == 0)
  {
    v35 = *(_QWORD *)(v19 + 8) ^ *(_QWORD *)(v3 + 40160);
    *(_QWORD *)(v3 + 40144) = v19 + HIDWORD(v35);
    *(_QWORD *)(v3 + 40152) = v19 + (int)v35;
LABEL_16:
    *v4 = v19 + 128;
    goto LABEL_17;
  }
  JSC::sanitizeStackForVM();
  v19 = JSC::LocalAllocator::allocateSlowCase();
LABEL_17:
  *(_DWORD *)v19 = 0;
  MEMORY[0x19AEA4278](v19, v3, 0, 2, &v39, MEMORY[0x1E0CBE3E8], 0, 0);
  if (*(_BYTE *)(v3 + 755))
    __dmb(0xAu);
  v21 = *v18;
  if (*(_QWORD *)(v3 + 38640) < *(_QWORD *)(v3 + 38648))
    goto LABEL_20;
  v21 = *(_QWORD *)(v3 + 38656);
  if ((v21 & 1) == 0)
  {
    v36 = *(_QWORD *)(v21 + 8) ^ *(_QWORD *)(v3 + 38664);
    *(_QWORD *)(v3 + 38648) = v21 + HIDWORD(v36);
    *(_QWORD *)(v3 + 38656) = v21 + (int)v36;
LABEL_20:
    *v18 = v21 + 32;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  v21 = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)v21 = 0;
  v22 = *(_DWORD *)(v19 + 8);
  *(_DWORD *)v21 = v19 >> 4;
  *(_DWORD *)(v21 + 4) = v22;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  if (*(_BYTE *)(v3 + 755))
    __dmb(0xAu);
  v23 = (_QWORD *)WebCore::JSShadowRealmGlobalScope::subspaceForImpl((WebCore::JSShadowRealmGlobalScope *)v3, v20);
  v24 = v23[3];
  if (v24 < v23[4])
    goto LABEL_24;
  v24 = v23[5];
  if ((v24 & 1) == 0)
  {
    v37 = *(_QWORD *)(v24 + 8) ^ v23[6];
    v23[4] = v24 + HIDWORD(v37);
    v23[5] = v24 + (int)v37;
LABEL_24:
    v23[3] = v24 + 3408;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v24 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v24 = 0;
  v25 = *(_DWORD **)(*(_QWORD *)(v3 + 41456) + 16);
  ++*v25;
  JSC::JSGlobalObject::JSGlobalObject();
  *(_OWORD *)(v24 + 3296) = 0u;
  v26 = (void *)WTF::fastMalloc((WTF *)0x1D20);
  bzero(v26, 0x1D20uLL);
  *(_QWORD *)(v24 + 3312) = v26;
  *(_QWORD *)(v24 + 3320) = v25;
  *(_BYTE *)(v24 + 3328) = v25[12] == 0;
  *(_BYTE *)(v24 + 3329) = 0;
  *(_QWORD *)(v24 + 3336) = 0;
  v27 = operator new();
  *(_QWORD *)v27 = v3;
  *(_QWORD *)(v27 + 8) = v3;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_OWORD *)(v27 + 128) = 0u;
  *(_OWORD *)(v27 + 144) = 0u;
  *(_OWORD *)(v27 + 160) = 0u;
  *(_OWORD *)(v27 + 176) = 0u;
  *(_OWORD *)(v27 + 192) = 0u;
  *(_OWORD *)(v27 + 208) = 0u;
  *(_OWORD *)(v27 + 224) = 0u;
  *(_OWORD *)(v27 + 240) = 0u;
  *(_OWORD *)(v27 + 256) = 0u;
  *(_OWORD *)(v27 + 272) = 0u;
  *(_QWORD *)(v27 + 288) = v3;
  *(_OWORD *)(v27 + 312) = 0u;
  *(_OWORD *)(v27 + 328) = 0u;
  *(_OWORD *)(v27 + 344) = 0u;
  *(_OWORD *)(v27 + 360) = 0u;
  *(_OWORD *)(v27 + 376) = 0u;
  *(_OWORD *)(v27 + 392) = 0u;
  *(_OWORD *)(v27 + 408) = 0u;
  *(_OWORD *)(v27 + 424) = 0u;
  *(_OWORD *)(v27 + 440) = 0u;
  *(_OWORD *)(v27 + 456) = 0u;
  *(_OWORD *)(v27 + 472) = 0u;
  *(_OWORD *)(v27 + 488) = 0u;
  *(_OWORD *)(v27 + 504) = 0u;
  *(_OWORD *)(v27 + 520) = 0u;
  *(_OWORD *)(v27 + 536) = 0u;
  *(_OWORD *)(v27 + 296) = 0u;
  *(_OWORD *)(v27 + 552) = 0u;
  *(_OWORD *)(v27 + 568) = 0u;
  *(_OWORD *)(v27 + 584) = 0u;
  *(_OWORD *)(v27 + 600) = 0u;
  *(_OWORD *)(v27 + 616) = 0u;
  *(_OWORD *)(v27 + 632) = 0u;
  *(_OWORD *)(v27 + 648) = 0u;
  *(_OWORD *)(v27 + 664) = 0u;
  *(_QWORD *)(v27 + 680) = v3;
  *(_OWORD *)(v27 + 688) = 0u;
  *(_OWORD *)(v27 + 704) = 0u;
  *(_OWORD *)(v27 + 720) = 0u;
  *(_OWORD *)(v27 + 736) = 0u;
  *(_OWORD *)(v27 + 752) = 0u;
  *(_OWORD *)(v27 + 768) = 0u;
  *(_OWORD *)(v27 + 784) = 0u;
  *(_OWORD *)(v27 + 800) = 0u;
  *(_OWORD *)(v27 + 816) = 0u;
  *(_QWORD *)(v27 + 832) = v3;
  *(_OWORD *)(v27 + 840) = 0u;
  *(_OWORD *)(v27 + 856) = 0u;
  *(_OWORD *)(v27 + 872) = 0u;
  *(_OWORD *)(v27 + 888) = 0u;
  *(_OWORD *)(v27 + 904) = 0u;
  *(_OWORD *)(v27 + 920) = 0u;
  *(_OWORD *)(v27 + 936) = 0u;
  *(_OWORD *)(v27 + 952) = 0u;
  *(_OWORD *)(v27 + 968) = 0u;
  *(_QWORD *)(v27 + 984) = 0;
  *(_QWORD *)(v27 + 992) = v3;
  *(_OWORD *)(v27 + 1016) = 0u;
  *(_OWORD *)(v27 + 1032) = 0u;
  *(_OWORD *)(v27 + 1048) = 0u;
  *(_OWORD *)(v27 + 1064) = 0u;
  *(_OWORD *)(v27 + 1080) = 0u;
  *(_OWORD *)(v27 + 1096) = 0u;
  *(_OWORD *)(v27 + 1112) = 0u;
  *(_OWORD *)(v27 + 1128) = 0u;
  *(_OWORD *)(v27 + 1144) = 0u;
  *(_OWORD *)(v27 + 1160) = 0u;
  *(_OWORD *)(v27 + 1176) = 0u;
  *(_OWORD *)(v27 + 1192) = 0u;
  *(_OWORD *)(v27 + 1208) = 0u;
  *(_OWORD *)(v27 + 1224) = 0u;
  *(_OWORD *)(v27 + 1240) = 0u;
  *(_QWORD *)(v27 + 1384) = 0;
  *(_OWORD *)(v27 + 1000) = 0u;
  *(_OWORD *)(v27 + 1256) = 0u;
  *(_OWORD *)(v27 + 1272) = 0u;
  *(_OWORD *)(v27 + 1288) = 0u;
  *(_OWORD *)(v27 + 1304) = 0u;
  *(_OWORD *)(v27 + 1320) = 0u;
  *(_OWORD *)(v27 + 1336) = 0u;
  *(_OWORD *)(v27 + 1352) = 0u;
  *(_OWORD *)(v27 + 1368) = 0u;
  *(_QWORD *)(v27 + 1392) = v3;
  *(_QWORD *)(v27 + 1408) = 0;
  *(_QWORD *)(v27 + 1400) = 0;
  *(_QWORD *)(v27 + 1416) = v3;
  *(_QWORD *)(v27 + 1424) = 0;
  *(_QWORD *)(v24 + 3344) = v27;
  *(_QWORD *)(v24 + 3352) = off_1E33929E0;
  *(_QWORD *)(v24 + 3360) = 0;
  *(_QWORD *)(v24 + 3368) = v3;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(v24 + 3376) = off_1E3392A08;
  *(_QWORD *)(v24 + 3384) = 0;
  *(_QWORD *)(v24 + 3392) = v3;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(v24 + 3400) = v15;
  WebCore::JSShadowRealmGlobalScope::finishCreation(v24, (JSC::VM *)v3, (JSC::JSGlobalProxy *)v21);
  v28.super.isa = *(Class *)(v24 + 656);
  JSC::JSObject::setPrototypeDirect((JSC::JSObject *)v24, (JSC::VM *)v3, v28);
  JSC::JSGlobalProxy::setTarget();
  JSC::JSGlobalObject::consoleClient((JSC::JSGlobalObject *)v2);
  JSC::JSGlobalObject::setConsoleClient();
  v30 = (unsigned int *)v39;
  v39 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v29);
    }
  }
  return v24;
}

void WebCore::JSDOMGlobalObject::defaultAgentClusterID(_BYTE *a1@<X8>)
{
  unint64_t v3;
  const char *v4;
  int v5;
  char v6;
  const char **v7;

  v3 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v3 != -1)
  {
    v4 = &v6;
    v7 = &v4;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = "-default";
  v5 = 8;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, WebCore::Process::globalIdentifier, (uint64_t)&v4);
  if (!*(_QWORD *)a1)
LABEL_7:
    __break(0xC471u);
}

_BYTE *WebCore::JSDOMGlobalObject::agentClusterID@<X0>(WebCore::JSDOMGlobalObject *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  int v13;
  char v14;
  const char **v15;

  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v4
    || (v5 = v4, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4))
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 488))(v5) != 1)
  {
    v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v8
      && (v9 = v8, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8))
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 488))(v9) == 2)
    {
      v10 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v10 != -1)
      {
        v12 = &v14;
        v15 = &v12;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      if ((WebCore::Process::globalIdentifier & 1) != 0)
      {
        v12 = "-sharedworker";
        v13 = 13;
        result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a2, WebCore::Process::globalIdentifier, (uint64_t)&v12);
        if (!*(_QWORD *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x1956A6F30);
        }
        return result;
      }
    }
    else
    {
      v11 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v11 != -1)
      {
        v12 = &v14;
        v15 = &v12;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      if ((WebCore::Process::globalIdentifier & 1) != 0)
      {
        v12 = "-default";
        v13 = 8;
        result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a2, WebCore::Process::globalIdentifier, (uint64_t)&v12);
        if (*(_QWORD *)a2)
          return result;
LABEL_23:
        __break(0xC471u);
        JUMPOUT(0x1956A6E78);
      }
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v6 != -1)
  {
    v12 = &v14;
    v15 = &v12;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_22;
  v12 = "-serviceworker";
  v13 = 14;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a2, WebCore::Process::globalIdentifier, (uint64_t)&v12);
  if (!*(_QWORD *)a2)
    goto LABEL_23;
  return result;
}

WebCore *WebCore::callerGlobalObject(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;

  v3 = this;
  if (!a2)
    return v3;
  MEMORY[0x19AEA32D0](v9, a2, *((_QWORD *)this + 7), 0);
  if (!v10)
    goto LABEL_15;
  JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v9);
  if (!v10)
    goto LABEL_15;
  if (!v12)
  {
    if ((v11 & 0xFFFE000000000007) != 3 && *(unsigned __int8 *)(v11 + 5) >= 0x17u)
    {
      v5 = (uint64_t *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 40);
      goto LABEL_6;
    }
LABEL_15:
    v6 = 0;
    goto LABEL_7;
  }
  v5 = (uint64_t *)(v12 + 8);
LABEL_6:
  v6 = *v5;
LABEL_7:
  v7 = v13;
  v13 = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref((uint64_t)v7, v4);
  if (v6)
    return (WebCore *)v6;
  return v3;
}

WebCore::DOMGuardedObject *WebCore::DOMGuardedObject::DOMGuardedObject(WebCore::DOMGuardedObject *this, unint64_t a2, unint64_t a3)
{
  WebCore::ScriptExecutionContext *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *Allocator;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v15;
  int v17;
  uint64_t v18[3];
  WebCore::DOMGuardedObject *v19;

  *((_DWORD *)this + 4) = 1;
  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a2);
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3392210;
  if ((a3 & 8) != 0)
    v7 = (a3 - 112) | 1;
  else
    v7 = a3 & 0xFFFFFFFFFFFFC000;
  if ((v7 & 1) != 0)
    v8 = v7 + 47;
  else
    v8 = *(_QWORD *)v7 + 32;
  Allocator = *(_QWORD **)(v8 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v8 + 16) = *Allocator;
  *Allocator = a3;
  Allocator[1] = 0;
  Allocator[2] = 0;
  *((_QWORD *)this + 3) = Allocator;
  if ((a2 & 8) != 0)
    v10 = (a2 - 112) | 1;
  else
    v10 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v10 & 1) != 0)
    v11 = v10 + 47;
  else
    v11 = *(_QWORD *)v10 + 32;
  v12 = *(_QWORD **)(v11 + 16);
  if (!v12)
    v12 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v11 + 16) = *v12;
  *v12 = a2;
  v12[1] = 0;
  v12[2] = 0;
  *((_QWORD *)this + 4) = v12;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 56) + 755))
  {
    v19 = this;
    WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::add(v18, (uint64_t *)(a2 + 3304), (uint64_t *)&v19);
    goto LABEL_17;
  }
  v15 = (unsigned __int8 *)(a2 + 3329);
  if (__ldaxr((unsigned __int8 *)(a2 + 3329)))
  {
    __clrex();
LABEL_24:
    MEMORY[0x19AEA534C](a2 + 3329);
    goto LABEL_25;
  }
  if (__stxr(1u, v15))
    goto LABEL_24;
LABEL_25:
  v19 = this;
  WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::add(v18, (uint64_t *)(a2 + 3304), (uint64_t *)&v19);
  v17 = __ldxr(v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v15))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 3329));
LABEL_17:
  v13 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), (const JSCell *)a2);
  return this;
}

void WebCore::DOMGuardedObject::~DOMGuardedObject(WebCore::DOMGuardedObject *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
  WTF::fastFree(v5, v6);
}

uint64_t *WTF::HashSet<WebCore::DOMGuardedObject *,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTableTraits>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v15;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 8 * v7);
    if (v8 != a2)
    {
      v15 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v15) & v3;
        v8 = *(_QWORD *)(v2 + 8 * v7);
        ++v15;
        if (v8 == a2)
          goto LABEL_3;
      }
      v7 = *(unsigned int *)(v2 - 4);
    }
LABEL_3:
    if (v7 != *(_DWORD *)(v2 - 4))
    {
      *(_QWORD *)(v2 + 8 * v7) = -1;
      ++*(_DWORD *)(*result - 16);
      v9 = *result;
      v10 = *result ? *(_DWORD *)(v9 - 12) - 1 : -1;
      *(_DWORD *)(v9 - 12) = v10;
      v11 = *result;
      if (*result)
      {
        v12 = 6 * *(_DWORD *)(v11 - 12);
        v13 = *(_DWORD *)(v11 - 4);
        if (v12 < v13 && v13 >= 9)
          return WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::rehash(result, v13 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::DOMGuardedObject::contextDestroyed(WebCore::DOMGuardedObject *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  result = WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t WebCore::addValueIterableMethods(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t result;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  JSC::JSGlobalObject *v49;
  int v50;
  int v51;
  uint64_t v52;

  v4 = *((_QWORD *)this + 84);
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  v6 = v5 + 5244;
  v7 = MEMORY[0x1E0CBEBF8];
  v8 = v5[5244];
  *MEMORY[0x1E0CBEBF8] += 2;
  v9 = *(_QWORD *)(v8 + 48);
  if ((v7 >> 4)
    && ((v7 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x20)) == 0
    && (v10 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)), (JSC::VM *)v5)) != 0&& (v48 = v7, v11 = JSC::PropertyTable::get(v10, (uint64_t *)&v48), (_DWORD)v11 != -1))
  {
    if ((int)v11 > 63)
    {
      v40 = *(_QWORD *)(v4 + 8) - 8;
      v41 = 0x3F00000000 - (v11 << 32);
    }
    else
    {
      v40 = v4 + 16;
      v41 = v11 << 32;
    }
    v12 = *(_QWORD *)(v40 + (v41 >> 29));
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(v9 + 3952);
  v48 = 0;
  v49 = a2;
  v50 = -1;
  v51 = 0x1000000;
  v52 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, (JSC::VM *)v5, v13, v12, 0, (uint64_t)&v48);
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF8], v14);
  else
    *(_DWORD *)v7 -= 2;
  v15 = MEMORY[0x1E0CBEC00];
  v16 = *v6;
  *MEMORY[0x1E0CBEC00] += 2;
  v17 = *(_QWORD *)(v16 + 48);
  if ((v15 >> 4)
    && ((v15 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x20)) == 0
    && (v18 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)), (JSC::VM *)v5)) != 0&& (v48 = v15, v19 = JSC::PropertyTable::get(v18, (uint64_t *)&v48), (_DWORD)v19 != -1))
  {
    if ((int)v19 > 63)
    {
      v42 = *(_QWORD *)(v4 + 8) - 8;
      v43 = 0x3F00000000 - (v19 << 32);
    }
    else
    {
      v42 = v4 + 16;
      v43 = v19 << 32;
    }
    v20 = *(_QWORD *)(v42 + (v43 >> 29));
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)(v17 + 632);
  v48 = 0;
  v49 = a2;
  v50 = -1;
  v51 = 0x1000000;
  v52 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, (JSC::VM *)v5, v21, v20, 0, (uint64_t)&v48);
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEC00], v22);
  else
    *(_DWORD *)v15 -= 2;
  v23 = MEMORY[0x1E0CBEBC0];
  v24 = *v6;
  *MEMORY[0x1E0CBEBC0] += 2;
  v25 = *(_QWORD *)(v24 + 48);
  if ((v23 >> 4)
    && ((v23 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x20)) == 0
    && (v26 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)), (JSC::VM *)v5)) != 0&& (v48 = v23, v27 = JSC::PropertyTable::get(v26, (uint64_t *)&v48), (_DWORD)v27 != -1))
  {
    if ((int)v27 > 63)
    {
      v44 = *(_QWORD *)(v4 + 8) - 8;
      v45 = 0x3F00000000 - (v27 << 32);
    }
    else
    {
      v44 = v4 + 16;
      v45 = v27 << 32;
    }
    v28 = *(_QWORD *)(v44 + (v45 >> 29));
  }
  else
  {
    v28 = 0;
  }
  v29 = *(_QWORD *)(v25 + 3016);
  v48 = 0;
  v49 = a2;
  v50 = -1;
  v51 = 0x1000000;
  v52 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, (JSC::VM *)v5, v29, v28, 0, (uint64_t)&v48);
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC0], v30);
  else
    *(_DWORD *)v23 -= 2;
  v31 = MEMORY[0x1E0CBEBF0];
  v32 = *v6;
  *MEMORY[0x1E0CBEBF0] += 2;
  v33 = *(_QWORD *)(v32 + 48);
  if ((v31 >> 4)
    && ((v31 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x20)) == 0
    && (v34 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)), (JSC::VM *)v5)) != 0&& (v48 = v31, v35 = JSC::PropertyTable::get(v34, (uint64_t *)&v48), (_DWORD)v35 != -1))
  {
    if ((int)v35 > 63)
    {
      v46 = *(_QWORD *)(v4 + 8) - 8;
      v47 = 0x3F00000000 - (v35 << 32);
    }
    else
    {
      v46 = v4 + 16;
      v47 = v35 << 32;
    }
    v36 = *(_QWORD *)(v46 + (v47 >> 29));
  }
  else
  {
    v36 = 0;
  }
  v37 = *(_QWORD *)(v33 + 3024);
  v48 = 0;
  v49 = a2;
  v50 = -1;
  v51 = 0x1000000;
  v52 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, (JSC::VM *)v5, v37, v36, 0, (uint64_t)&v48);
  if (*(_DWORD *)v31 == 2)
    return WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v39);
  *(_DWORD *)v31 -= 2;
  return result;
}

uint64_t WebCore::getBackingMap(unint64_t this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v13)(unint64_t *);
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(JSC::VM **)(this + 56);
  v6 = *(_QWORD *)(*((_QWORD *)v5 + 5182) + 19152);
  if ((v6 >> 4))
  {
    if (((v6 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v7 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), v5);
      if (v7)
      {
        v17 = v6;
        v8 = JSC::PropertyTable::get(v7, (uint64_t *)&v17);
        if ((_DWORD)v8 != -1)
        {
          v15 = (char *)a2 + 16;
          v16 = v8 << 32;
          if ((int)v8 >= 64)
          {
            v16 = 0x3F00000000 - (v8 << 32);
            v15 = (char *)(*((_QWORD *)a2 + 1) - 8);
          }
          if (*(_QWORD *)&v15[v16 >> 29])
            return 0;
        }
      }
    }
  }
  v9 = *(_QWORD *)(this + 1520);
  if ((v9 & 1) != 0)
  {
    v13 = *(uint64_t (**)(unint64_t *))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(this - 16);
    if ((this & 8) == 0)
      v14 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v17 = *v14;
    v18 = (JSC::JSGlobalObject *)this;
    v19 = this + 1520;
    v9 = v13(&v17);
  }
  v10 = JSC::JSMap::create(v5, v9, a3);
  v11 = *(_QWORD *)(*((_QWORD *)v5 + 5182) + 19152);
  v17 = 0;
  v18 = a2;
  v19 = 0x1000000FFFFFFFFLL;
  v20 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, v5, v11, v10, 4, (uint64_t)&v17);
  return 1;
}

unint64_t JSC::JSMap::create(JSC::JSMap *this, unint64_t a2, JSC::Structure *a3)
{
  _QWORD *v5;
  unint64_t result;
  int v7;
  unint64_t v8;

  v5 = (_QWORD *)*((_QWORD *)this + 5083);
  if (!v5)
    v5 = (_QWORD *)JSC::GCClient::Heap::mapSpaceSlow((JSC::JSMap *)((char *)this + 37552));
  result = v5[3];
  if (result < v5[4])
    goto LABEL_4;
  result = v5[5];
  if ((result & 1) == 0)
  {
    v8 = *(_QWORD *)(result + 8) ^ v5[6];
    v5[4] = result + HIDWORD(v8);
    v5[5] = result + (int)v8;
LABEL_4:
    v5[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)result = 0;
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v7;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

WTF *WebCore::clearBackingMap(unint64_t this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  JSC::JSFunction *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *v12;
  WTF *result;
  uint64_t (*v14)(unint64_t *, JSC::JSGlobalObject *, JSC::JSObject *);
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  _OWORD v24[4];
  uint64_t v25;
  _QWORD v26[3];

  v4 = *(JSC::VM **)(this + 56);
  v5 = *(_QWORD *)(this + 1520);
  if ((v5 & 1) != 0)
  {
    v14 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *, JSC::JSObject *))(v5 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (uint64_t *)(this - 16);
    if ((this & 8) == 0)
      v15 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v21 = *v15;
    v22 = this;
    v23 = (WTF *)(this + 1520);
    v5 = v14(&v21, a2, a3);
  }
  v6 = 0;
  if (*(_QWORD *)(v5 + 48) == 2)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v5 + 48);
  v8 = MEMORY[0x1E0CBEBD8];
  *MEMORY[0x1E0CBEBD8] += 2;
  if ((v8 >> 4))
  {
    if (((v8 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x20)) != 0
      || (v9 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE)), v4)) == 0|| (v21 = v8, v10 = JSC::PropertyTable::get(v9, (uint64_t *)&v21), (_DWORD)v10 == -1))
    {
      v6 = 0;
    }
    else
    {
      if ((int)v10 > 63)
      {
        v17 = *(_QWORD *)(v7 + 8) - 8;
        v18 = 0x3F00000000 - (v10 << 32);
      }
      else
      {
        v17 = v7 + 16;
        v18 = v10 << 32;
      }
      v6 = *(JSC::JSFunction **)(v17 + (v18 >> 29));
    }
  }
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBD8], a2);
  else
    *(_DWORD *)v8 -= 2;
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v26[0]) = 0;
  }
  else if (*((_BYTE *)v6 + 5) == 26)
  {
    JSC::JSFunction::getCallData(v6, (JSCell *)a2);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *, JSC::JSGlobalObject *, JSC::JSObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) + 0x38))(v26, v6, a2, a3);
  }
  LOBYTE(v21) = 0;
  v22 = 0x800000000;
  v23 = (WTF *)((char *)v24 + 8);
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v19 = (unint64_t *)v24 + 1;
  v20 = 0;
  JSC::call();
  v12 = *(uint64_t **)&v24[0];
  if (*(_QWORD *)&v24[0])
  {
    v19 = &v22;
    v16 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v24[0], (uint64_t *)&v19);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v16);
  }
  result = v23;
  if (v23 != (WTF *)((char *)v24 + 8))
  {
    if (v23)
      return (WTF *)WTF::fastFree(v23, v11);
  }
  return result;
}

WTF *WebCore::setToBackingMap(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, unint64_t a4)
{
  JSC::VM *v7;
  uint64_t v8;
  JSC::JSFunction *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t *v15;
  WTF *result;
  uint64_t (*v17)(unint64_t *);
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];

  v7 = *(JSC::VM **)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 1520);
  if ((v8 & 1) != 0)
  {
    v17 = *(uint64_t (**)(unint64_t *))(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v18 = (uint64_t *)(a1 - 16);
    if ((a1 & 8) == 0)
      v18 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v24 = *v18;
    v25 = a1;
    v26 = (WTF *)(a1 + 1520);
    v8 = v17(&v24);
  }
  v9 = 0;
  if (*(_QWORD *)(v8 + 48) == 2)
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 48);
  v11 = MEMORY[0x1E0CBEBB8];
  *MEMORY[0x1E0CBEBB8] += 2;
  if ((v11 >> 4))
  {
    if (((v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) != 0
      || (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), v7)) == 0|| (v24 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v24), (_DWORD)v13 == -1))
    {
      v9 = 0;
    }
    else
    {
      if ((int)v13 > 63)
      {
        v20 = *(_QWORD *)(v10 + 8) - 8;
        v21 = 0x3F00000000 - (v13 << 32);
      }
      else
      {
        v20 = v10 + 16;
        v21 = v13 << 32;
      }
      v9 = *(JSC::JSFunction **)(v20 + (v21 >> 29));
    }
  }
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBB8], a2);
  else
    *(_DWORD *)v11 -= 2;
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v33[0]) = 0;
  }
  else if (*((_BYTE *)v9 + 5) == 26)
  {
    JSC::JSFunction::getCallData(v9, (JSCell *)a2);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(v33, v9);
  }
  LOBYTE(v24) = 0;
  v26 = (WTF *)&v28;
  v27 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v28 = a3;
  v29 = a4;
  v25 = 0x800000002;
  v22 = &v28;
  v23 = 2;
  JSC::call();
  v15 = v27;
  if (v27)
  {
    v22 = &v25;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v27, (uint64_t *)&v22);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v15, v19);
  }
  result = v26;
  if (v26 != (WTF *)&v28)
  {
    if (v26)
      return (WTF *)WTF::fastFree(v26, v14);
  }
  return result;
}

uint64_t WebCore::forwardAttributeGetterToBackingMap(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, const JSC::Identifier *a4)
{
  return JSC::JSObject::get(a2, this, *(_QWORD *)a3);
}

uint64_t WebCore::forwardFunctionCallToBackingMap(unint64_t this, JSCell *a2, JSC::CallFrame *a3, JSC::JSObject *a4, const JSC::Identifier *a5)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  JSC::JSFunction *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  JSValue v22;
  int v23;
  BOOL v24;
  uint64_t (*v25)(unint64_t *, JSCell *, JSC::CallFrame *, JSC::JSObject *, const JSC::Identifier *);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  _QWORD v37[3];

  v8 = *(JSC::VM **)(this + 56);
  v9 = *(_QWORD *)(this + 1520);
  if ((v9 & 1) != 0)
  {
    v25 = *(uint64_t (**)(unint64_t *, JSCell *, JSC::CallFrame *, JSC::JSObject *, const JSC::Identifier *))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (uint64_t *)(this - 16);
    if ((this & 8) == 0)
      v26 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v32 = *v26;
    v33 = this;
    v34 = (WTF *)(this + 1520);
    v9 = v25(&v32, a2, a3, a4, a5);
  }
  if (*(_QWORD *)(v9 + 48) == 2)
    v10 = 0;
  else
    v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)a4;
  if ((v11 >> 4)
    && ((v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), v8)) != 0&& (v32 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v32), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v27 = *(_QWORD *)(v10 + 8) - 8;
      v28 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v27 = v10 + 16;
      v28 = v13 << 32;
    }
    v14 = *(JSC::JSFunction **)(v27 + (v28 >> 29));
    if (((unint64_t)v14 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v37[0]) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v14 = 0;
  }
  if (*((_BYTE *)v14 + 5) == 26)
    JSC::JSFunction::getCallData(v14, a2);
  else
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *, JSCell *, JSC::CallFrame *, JSC::JSObject *, const JSC::Identifier *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) + 0x38))(v37, v14, a2, a3, a4, a5);
LABEL_12:
  LOBYTE(v32) = 0;
  v33 = 0x800000000;
  v34 = (WTF *)((char *)v35 + 8);
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  v15 = *((int *)a2 + 8);
  if ((unint64_t)(v15 - 1) >= 9)
  {
    LOBYTE(v32) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
    LODWORD(v15) = *((_DWORD *)a2 + 8);
  }
  if ((_DWORD)v15 != 1)
  {
    v20 = 0;
    v21 = 0x600000000;
    do
    {
      v22.super.isa = *(Class *)((char *)a2 + (v21 >> 29));
      v23 = v33;
      if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v24 = v34 == 0) : (v24 = 1), v24))
      {
        *((JSValue *)v34 + v33) = v22;
        LODWORD(v33) = v23 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v22) == 1)
      {
        LOBYTE(v32) = 1;
      }
      ++v20;
      v21 += 0x100000000;
    }
    while (v20 < *((int *)a2 + 8) - 1);
  }
  v30 = v34;
  v31 = v33;
  v17 = JSC::call();
  v18 = *(uint64_t **)&v35[0];
  if (*(_QWORD *)&v35[0])
  {
    v30 = (WTF *)&v33;
    v29 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v18, v29);
  }
  if (v34 != (WTF *)((char *)v35 + 8) && v34)
    WTF::fastFree(v34, v16);
  return v17;
}

uint64_t WebCore::forwardForEachCallToBackingMap(WebCore *this, WebCore::JSDOMGlobalObject *a2, JSC::CallFrame *a3, JSC::JSObject *a4)
{
  JSCell *v6;
  objc_class *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v14;
  uint64_t v15;
  JSValue v16;
  int v17;
  BOOL v18;
  JSValue v19;
  _QWORD *v20;
  WTF *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  WTF *v25;
  _OWORD v26[4];
  uint64_t v27;
  _QWORD v28[3];

  WebCore::getBackingMap((unint64_t)this, a3, a3);
  v7 = (objc_class *)v6;
  v8 = *(_QWORD *)(*((_QWORD *)this + 418) + 1400);
  if (*(_BYTE *)(v8 + 5) == 26)
    JSC::JSFunction::getCallData(*(JSC::JSFunction **)(*((_QWORD *)this + 418) + 1400), v6);
  else
    (*(void (**)(_QWORD *__return_ptr, _QWORD))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)
                                                         + 0x38))(v28, *(_QWORD *)(*((_QWORD *)this + 418) + 1400));
  v23 = 0;
  v24 = 0x800000000;
  v25 = (WTF *)((char *)v26 + 8);
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  if (*((_DWORD *)a2 + 8) >= 9u)
    v23 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v24) == 1;
  v9 = v24;
  if ((_DWORD)v24 == HIDWORD(v24) || v25 != (WTF *)((char *)v26 + 8) && v25)
  {
    v19.super.isa = v7;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v24, v19) == 1)
      v23 = 1;
  }
  else
  {
    *((_QWORD *)v25 + v24) = v7;
    LODWORD(v24) = v9 + 1;
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v14 = 0;
    v15 = 0x600000000;
    do
    {
      v16.super.isa = *(Class *)((char *)a2 + (v15 >> 29));
      v17 = v24;
      if ((_DWORD)v24 != HIDWORD(v24) && (v25 != (WTF *)((char *)v26 + 8) ? (v18 = v25 == 0) : (v18 = 1), v18))
      {
        *((JSValue *)v25 + v24) = v16;
        LODWORD(v24) = v17 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v24, v16) == 1)
      {
        v23 = 1;
      }
      ++v14;
      v15 += 0x100000000;
    }
    while (v14 < *((int *)a2 + 8) - 1);
  }
  v21 = v25;
  v22 = v24;
  v11 = JSC::call();
  v12 = *(uint64_t **)&v26[0];
  if (*(_QWORD *)&v26[0])
  {
    v21 = (WTF *)&v24;
    v20 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v26[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v20);
  }
  if (v25 != (WTF *)((char *)v26 + 8) && v25)
    WTF::fastFree(v25, v10);
  return v11;
}

uint64_t WebCore::createJSDOMMicrotask@<X0>(WebCore *this@<X0>, JSC::VM *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E33926B8;
  if (WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x1956A8528);
  }
  v8 = (_QWORD *)v7;
  result = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v8[2] = result;
  *v8 = off_1E33922F0;
  v10 = *((_QWORD *)this + 89);
  if (!v10)
  {
    result = JSC::HandleSet::grow((WebCore *)((char *)this + 672));
    v10 = *((_QWORD *)this + 89);
  }
  *((_QWORD *)this + 89) = *(_QWORD *)v10;
  *(_QWORD *)(v10 + 16) = 0;
  v11 = (_QWORD *)(v10 + 16);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v8[3] = v10 + 16;
  if ((a2 != 0) != (*(_QWORD *)(v10 + 16) != 0))
  {
    if (a2)
    {
      v12 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = v12[3];
      v12 += 3;
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v12;
      *v12 = v10;
      *(_QWORD *)(v13 + 8) = v10;
    }
    else
    {
      v15 = *(_QWORD *)v10;
      v14 = *(_QWORD **)(v10 + 8);
      *v14 = *(_QWORD *)v10;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v11 = (_QWORD *)v8[3];
    }
  }
  *v11 = a2;
  *a3 = v8;
  return result;
}

void WebCore::JSDOMMicrotask::run(WebCore::JSDOMMicrotask *this, JSC::JSGlobalObject *a2)
{
  JSC::JSFunction **v3;
  JSC::JSFunction *v4;
  JSC::VM *v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  JSCell *v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  WebCore *v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  _QWORD v19[3];
  WebCore::JSDOMGlobalObject *v20;

  v3 = (JSC::JSFunction **)*((_QWORD *)this + 3);
  if (v3)
    v4 = *v3;
  else
    v4 = 0;
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v6 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
  if (v7)
  {
    if (!*(_BYTE *)(v7 + 275) && !*(_BYTE *)(v7 + 276))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (!v8 || *((_QWORD *)v5 + 3) != v8)
      {
        JSC::VM::clearException(v5);
        if (*((_BYTE *)v4 + 5) == 26)
          JSC::JSFunction::getCallData(v4, v9);
        else
          (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v4 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x38))(v19, v4);
        v10 = *((_QWORD *)v5 + 2);
        if (!v10 || *((_QWORD *)v5 + 3) != v10)
        {
          v11 = (WebCore *)JSC::VM::clearException(v5);
          if (*((_QWORD *)a2 + 252))
          {
            JSC::VMTraps::deferTermination((uint64_t)v5 + 64);
            JSC::Debugger::willRunMicrotask();
            JSC::VM::clearException(v5);
            v11 = (WebCore *)JSC::VMTraps::undoDeferTermination((uint64_t)v5 + 64);
          }
          v12 = *((_QWORD *)v5 + 2);
          if (!v12 || *((_QWORD *)v5 + 3) != v12)
          {
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            v14 = *(_QWORD *)(StatusReg + 736);
            if (!v14 || (v11 = *(WebCore **)(v14 + 96)) == 0)
              v11 = (WebCore *)WebCore::threadGlobalDataSlow(v11);
            v20 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)v11 + 8);
            v15 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
            v16 = *(_QWORD *)(StatusReg + 736);
            if (!v16 || (v15 = *(WebCore **)(v16 + 96)) == 0)
              v15 = (WebCore *)WebCore::threadGlobalDataSlow(v15);
            *((_QWORD *)v15 + 8) = v6;
            JSC::profiledCall();
            WebCore::JSExecState::~JSExecState(&v20, v17);
            v18 = *((_QWORD *)v5 + 2);
            if (!v18 || *((_QWORD *)v5 + 3) != v18)
              JSC::VM::clearException(v5);
          }
          if (*((_QWORD *)a2 + 252))
          {
            JSC::VMTraps::deferTermination((uint64_t)v5 + 64);
            JSC::Debugger::didRunMicrotask();
            JSC::VM::clearException(v5);
            JSC::VMTraps::undoDeferTermination((uint64_t)v5 + 64);
          }
        }
      }
    }
  }
}

BOOL WebCore::DOMPromise::whenPromiseIsSettled(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  uint64_t v14;
  JSCell *v15;
  _BOOL8 v16;
  uint64_t *v17;
  _QWORD *v19;
  uint64_t v20[3];
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[8];

  v6 = *((_QWORD *)a1 + 7);
  MEMORY[0x19AEA3294](v30, v6);
  v21 = 0;
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E3392A58;
  v8[1] = v7;
  v20[0] = (uint64_t)v8;
  v10 = JSC::JSNativeStdFunction::create();
  v11 = v20[0];
  v20[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (_DWORD *)MEMORY[0x1E0CBEBD0];
  *MEMORY[0x1E0CBEBD0] += 2;
  v14 = JSC::JSObject::get(a2, a1, (unint64_t)v13);
  if (*(_QWORD *)(v6 + 16))
  {
    v16 = 0;
  }
  else
  {
    LOBYTE(v21) = 0;
    v23 = (WTF *)&v25;
    v24 = 0;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v25 = v10;
    v26 = (unint64_t)v10;
    v22 = 0x800000002;
    if ((v14 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v20[0]) = 0;
    }
    else if (*(_BYTE *)(v14 + 5) == 26)
    {
      JSC::JSFunction::getCallData((JSC::JSFunction *)v14, v15);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(v20, v14);
    }
    JSC::call();
    v16 = *(_QWORD *)(v6 + 16) == 0;
    v17 = v24;
    if (v24)
    {
      v20[0] = (uint64_t)&v22;
      v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v24, v20);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
    }
    if (v23 != (WTF *)&v25 && v23)
      WTF::fastFree(v23, v15);
  }
  if (*v13 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBD0], (WTF::StringImpl *)v15);
  else
    *v13 -= 2;
  MEMORY[0x19AEA32A0](v30);
  return v16;
}

_QWORD *JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)1>::Strong(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(a2 + 712);
  if (!v3)
  {
    v14 = result;
    v12 = a2;
    v13 = a3;
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672));
    a2 = v12;
    a3 = v13;
    result = v14;
    v3 = *(_QWORD *)(v12 + 712);
  }
  *(_QWORD *)(a2 + 712) = *(_QWORD *)v3;
  *(_QWORD *)(v3 + 16) = 0;
  v4 = (_QWORD *)(v3 + 16);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *result = v3 + 16;
  v6 = (a3 & 0xFFFE000000000002) == 0 && a3 != 0;
  v7 = (*v4 & 0xFFFE000000000002) == 0;
  if (!*v4)
    v7 = 0;
  if (v7 != v6)
  {
    if ((v6 & 1) != 0)
    {
      v8 = *(unint64_t **)((v3 & 0xFFFFFFFFFFFFF000) + 0x10);
      v9 = v8[3];
      v8 += 3;
      *(_QWORD *)v3 = v9;
      *(_QWORD *)(v3 + 8) = v8;
      *v8 = v3;
      *(_QWORD *)(v9 + 8) = v3;
    }
    else
    {
      v11 = *(_QWORD *)v3;
      v10 = *(_QWORD **)(v3 + 8);
      *v10 = *(_QWORD *)v3;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v4 = (_QWORD *)*result;
    }
  }
  *v4 = a3;
  return result;
}

_QWORD *JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)1>::Strong(_QWORD *result, unint64_t *a2)
{
  JSC::HandleSet *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  JSC::HandleSet *v15;
  unint64_t *v16;
  _QWORD *v17;

  *result = 0;
  if (*a2)
  {
    v2 = *(JSC::HandleSet **)(((*a2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v3 = (_QWORD *)*((_QWORD *)v2 + 5);
    if (!v3)
    {
      v17 = result;
      v15 = *(JSC::HandleSet **)(((*a2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = a2;
      JSC::HandleSet::grow(v2);
      v2 = v15;
      a2 = v16;
      result = v17;
      v3 = (_QWORD *)*((_QWORD *)v15 + 5);
    }
    *((_QWORD *)v2 + 5) = *v3;
    v3[2] = 0;
    v4 = v3 + 2;
    *v3 = 0;
    v3[1] = 0;
    *result = v3 + 2;
    v5 = *a2;
    if (*a2)
      v5 = *(_QWORD *)v5;
    v6 = (unint64_t)(v4 - 2);
    v7 = *v4;
    v9 = (v5 & 0xFFFE000000000002) == 0 && v5 != 0;
    v10 = (v7 & 0xFFFE000000000002) == 0;
    if (!v7)
      v10 = 0;
    if (v10 != v9)
    {
      if ((v9 & 1) != 0)
      {
        v11 = *(unint64_t **)((v6 & 0xFFFFFFFFFFFFF000) + 0x10);
        v12 = v11[3];
        v11 += 3;
        *(_QWORD *)v6 = v12;
        *(v4 - 1) = (unint64_t)v11;
        *v11 = v6;
        *(_QWORD *)(v12 + 8) = v6;
      }
      else
      {
        v14 = *(_QWORD *)v6;
        v13 = (_QWORD *)*(v4 - 1);
        *v13 = *(_QWORD *)v6;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        v4 = (unint64_t *)*result;
      }
    }
    *v4 = v5;
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::HandleSet *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  JSC::HandleSet *v22;
  uint64_t v23;

  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = *a2;
  *(_QWORD *)v4 = &off_1E3392A80;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(v4 + 32) = 0;
  v7 = a2[3];
  if (v7)
  {
    v8 = *(JSC::HandleSet **)(((v7 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v9 = (_QWORD *)*((_QWORD *)v8 + 5);
    if (!v9)
    {
      v22 = v8;
      v23 = v4;
      JSC::HandleSet::grow(v8);
      v8 = v22;
      v4 = v23;
      v9 = (_QWORD *)*((_QWORD *)v22 + 5);
    }
    *((_QWORD *)v8 + 5) = *v9;
    v9[2] = 0;
    v10 = v9 + 2;
    *v9 = 0;
    v9[1] = 0;
    *(_QWORD *)(v4 + 32) = v9 + 2;
    v11 = a2[3];
    if (v11)
      v11 = *(_QWORD *)v11;
    v12 = (unint64_t)(v10 - 2);
    v13 = *v10;
    v15 = (v11 & 0xFFFE000000000002) == 0 && v11 != 0;
    v16 = (v13 & 0xFFFE000000000002) == 0;
    if (!v13)
      v16 = 0;
    if (v16 != v15)
    {
      if ((v15 & 1) != 0)
      {
        v17 = *(unint64_t **)((v12 & 0xFFFFFFFFFFFFF000) + 0x10);
        v18 = v17[3];
        v17 += 3;
        *(_QWORD *)v12 = v18;
        *(v10 - 1) = (unint64_t)v17;
        *v17 = v12;
        *(_QWORD *)(v18 + 8) = v12;
      }
      else
      {
        v21 = *(_QWORD *)v12;
        v20 = (_QWORD *)*(v10 - 1);
        *v20 = *(_QWORD *)v12;
        *(_QWORD *)(v21 + 8) = v20;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        v10 = *(unint64_t **)(v4 + 32);
      }
    }
    *v10 = v11;
  }
  *a1 = v4;
  return a1;
}

uint64_t WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE v10[8];

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    MEMORY[0x19AEA3294](v10, *v3);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = (uint64_t *)(v4 - 16);
    v6 = *(uint64_t **)(v4 - 8);
    if (v6)
    {
      v7 = *v5;
      *v6 = *v5;
      *(_QWORD *)(v7 + 8) = v6;
      *v5 = 0;
      v5[1] = 0;
    }
    *v5 = v3[5];
    v3[5] = v5;
    *(_QWORD *)(a1 + 24) = 0;
    MEMORY[0x19AEA32A0](v10);
  }
  v8 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  return a1;
}

_QWORD *JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)1>::~Strong(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[8];

  if (*a1)
  {
    v2 = *(_QWORD **)(((*a1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    MEMORY[0x19AEA3294](v7, *v2);
    v3 = (uint64_t *)(*a1 - 16);
    v4 = *(uint64_t **)(*a1 - 8);
    if (v4)
    {
      v5 = *v3;
      *v4 = *v3;
      *(_QWORD *)(v5 + 8) = v4;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = v2[5];
    v2[5] = v3;
    *a1 = 0;
    MEMORY[0x19AEA32A0](v7);
  }
  return a1;
}

WebCore::ActiveDOMCallback *WebCore::DeferredPromise::whenSettled(WebCore::ActiveDOMCallback *result, uint64_t *a2)
{
  uint64_t v2;
  WebCore::ActiveDOMCallback *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::ActiveDOMCallback *v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Structure *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  WebCore::ActiveDOMCallback *v22;

  v2 = *((_QWORD *)result + 3);
  if (!v2 || !*(_QWORD *)v2 || (*(_BYTE *)(v2 + 8) & 3) != 0)
    return result;
  v4 = result;
  if (!WebCore::ActiveDOMCallback::activeDOMObjectsAreSuspended(result))
  {
    v10 = *((_QWORD *)v4 + 4);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(JSC::JSGlobalObject **)v10;
    v12 = *((_QWORD *)v11 + 7);
    MEMORY[0x19AEA3294](&v22, v12);
    v13 = **((_QWORD **)v4 + 3);
    if ((v13 & 0xFFFE000000000002) != 0)
    {
      v14 = 0;
    }
    else if (*(_BYTE *)(v13 + 5) == 68)
    {
      v14 = (JSC::Structure *)**((_QWORD **)v4 + 3);
    }
    else
    {
      v14 = 0;
    }
    WebCore::DOMPromise::whenPromiseIsSettled(v11, v14, a2);
    v15 = *(_QWORD *)(v12 + 16);
    if (!v15)
      return (WebCore::ActiveDOMCallback *)MEMORY[0x19AEA32A0](&v22);
    v16 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v11);
    if (!(*(unsigned int (**)(_QWORD *))(*v16 + 64))(v16))
    {
LABEL_21:
      WebCore::reportException(v11, v15, 0, 0, 0);
      return (WebCore::ActiveDOMCallback *)MEMORY[0x19AEA32A0](&v22);
    }
    v17 = v16[43];
    if (*(_QWORD *)(v12 + 24) == v15)
    {
LABEL_35:
      *(_BYTE *)(*(_QWORD *)(v17 + 8) + 93442) = 1;
      *((_BYTE *)v4 + 44) = 1;
      goto LABEL_21;
    }
    if (!v17)
      goto LABEL_21;
    v18 = (unsigned __int8 *)(v17 + 40);
    if (__ldaxr((unsigned __int8 *)(v17 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](v17 + 40);
LABEL_29:
    v20 = *(unsigned __int8 *)(v17 + 41);
    v21 = __ldxr(v18);
    if (v21 == 1)
    {
      if (!__stlxr(0, v18))
      {
LABEL_34:
        if (!v20)
          goto LABEL_21;
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v17 + 40));
    goto LABEL_34;
  }
  v5 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8);
  if (v5)
    v6 = v5 - 96;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  ++*((_DWORD *)v4 + 4);
  v8 = *a2;
  *a2 = 0;
  v9 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v9 = &off_1E3392AA8;
  *((_QWORD *)v9 + 1) = v4;
  *((_QWORD *)v9 + 2) = v4;
  *((_QWORD *)v9 + 3) = v8;
  v22 = v9;
  WebCore::EventLoopTaskGroup::queueTask(v7, 11, (uint64_t *)&v22);
  result = v22;
  v22 = 0;
  if (result)
    return (WebCore::ActiveDOMCallback *)(*(uint64_t (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)result
                                                                                                 + 8))(result);
  return result;
}

void WebCore::DeferredPromise::handleUncaughtException(uint64_t a1, uint64_t *a2, WebCore::JSDOMGlobalObject *this)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  int v12;

  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  v7 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(unsigned int (**)(_QWORD *))(*v7 + 64))(v7))
  {
    v8 = v7[43];
    if (*(_QWORD *)(v5 + 24) == v6)
      goto LABEL_15;
    if (!v8)
      goto LABEL_2;
    v9 = (unsigned __int8 *)(v8 + 40);
    if (__ldaxr((unsigned __int8 *)(v8 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v8 + 40);
LABEL_9:
    v11 = *(unsigned __int8 *)(v8 + 41);
    v12 = __ldxr(v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, v9))
      {
LABEL_14:
        if (!v11)
          goto LABEL_2;
LABEL_15:
        *(_BYTE *)(*(_QWORD *)(v8 + 8) + 93442) = 1;
        *(_BYTE *)(a1 + 44) = 1;
        goto LABEL_2;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 40));
    goto LABEL_14;
  }
LABEL_2:
  WebCore::reportException(this, v6, 0, 0, 0);
}

WTF::StringImpl *WebCore::DeferredPromise::reject(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v8 = 0;
  v6[0] = *(_BYTE *)a2;
  v3 = *(WTF::StringImpl **)(a2 + 8);
  if (v3)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  WebCore::DeferredPromise::reject(a1, v6, a3, &v8);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::reject(uint64_t result, unsigned __int8 *a2, int a3, objc_class **a4)
{
  uint64_t v4;
  uint64_t v8;
  WebCore::JSDOMGlobalObject **v9;
  WebCore::JSDOMGlobalObject *v10;
  JSC::VM *v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  objc_class *v14;
  _QWORD *v15;
  objc_class *DOMException;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;
  int v29;
  _BYTE v30[8];

  v4 = *(_QWORD *)(result + 24);
  if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v8 = result;
    ++*(_DWORD *)(result + 16);
    v9 = *(WebCore::JSDOMGlobalObject ***)(result + 32);
    v10 = *v9;
    v11 = (JSC::VM *)*((_QWORD *)*v9 + 7);
    MEMORY[0x19AEA3294](v30, v11);
    v12 = (JSC::JSGlobalObject *)*a2;
    if ((_DWORD)v12 == 37)
    {
      v13 = *((_QWORD *)v11 + 2);
      v14 = *(objc_class **)(v13 + 8);
      v15 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
      if (!(*(unsigned int (**)(_QWORD *))(*v15 + 64))(v15))
      {
LABEL_6:
        JSC::VM::clearException(v11);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, v14, a3);
        goto LABEL_13;
      }
      v19 = v15[43];
      if (*((_QWORD *)v11 + 3) == v13)
        goto LABEL_29;
      if (!v19)
        goto LABEL_6;
      v20 = (unsigned __int8 *)(v19 + 40);
      if (__ldaxr((unsigned __int8 *)(v19 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v20))
      {
        goto LABEL_23;
      }
      MEMORY[0x19AEA534C](v19 + 40);
LABEL_23:
      v22 = *(unsigned __int8 *)(v19 + 41);
      v23 = __ldxr(v20);
      if (v23 == 1)
      {
        if (!__stlxr(0, v20))
        {
LABEL_28:
          if (!v22)
            goto LABEL_6;
LABEL_29:
          *(_BYTE *)(*(_QWORD *)(v19 + 8) + 93442) = 1;
          *(_BYTE *)(v8 + 44) = 1;
          goto LABEL_13;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v19 + 40));
      goto LABEL_28;
    }
    DOMException = *a4;
    if (!*a4
      && (DOMException = (objc_class *)WebCore::createDOMException(v10, v12, (JSC::JSGlobalObject *)(a2 + 8)),
          *a4 = DOMException,
          *((_QWORD *)v11 + 2)))
    {
      v18 = *((_QWORD *)v11 + 2);
    }
    else
    {
      if (a3)
        v17 = 2;
      else
        v17 = 1;
      WebCore::DeferredPromise::callFunction(v8, (uint64_t *)v10, v17, DOMException);
      v18 = *((_QWORD *)v11 + 2);
      if (!v18)
        goto LABEL_13;
    }
    v24 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
    if (!(*(unsigned int (**)(_QWORD *))(*v24 + 64))(v24))
    {
LABEL_32:
      WebCore::reportException(v10, v18, 0, 0, 0);
LABEL_13:
      result = MEMORY[0x19AEA32A0](v30);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      --*(_DWORD *)(v8 + 16);
      return result;
    }
    v25 = v24[43];
    if (*((_QWORD *)v11 + 3) == v18)
    {
LABEL_45:
      *(_BYTE *)(*(_QWORD *)(v25 + 8) + 93442) = 1;
      *(_BYTE *)(v8 + 44) = 1;
      goto LABEL_32;
    }
    if (!v25)
      goto LABEL_32;
    v26 = (unsigned __int8 *)(v25 + 40);
    if (__ldaxr((unsigned __int8 *)(v25 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v25 + 40);
LABEL_39:
    v28 = *(unsigned __int8 *)(v25 + 41);
    v29 = __ldxr(v26);
    if (v29 == 1)
    {
      if (!__stlxr(0, v26))
      {
LABEL_44:
        if (!v28)
          goto LABEL_32;
        goto LABEL_45;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v25 + 40));
    goto LABEL_44;
  }
  return result;
}

WebCore::DOMGuardedObject *WebCore::DeferredPromise::create@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, WebCore::DOMGuardedObject **a4@<X8>)
{
  WebCore::DOMGuardedObject *v8;
  WebCore::DOMGuardedObject *result;

  v8 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  result = WebCore::DOMGuardedObject::DOMGuardedObject(v8, a1, a2);
  *(_QWORD *)result = &off_1E3226868;
  *((_DWORD *)result + 10) = a3;
  *((_BYTE *)result + 44) = 0;
  *a4 = result;
  return result;
}

WTF::StringImpl *WebCore::fulfillPromiseWithJSON(uint64_t *a1)
{
  objc_class *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  JSC::JSLockHolder::JSLockHolder();
  v2 = (objc_class *)JSC::JSONParse();
  MEMORY[0x19AEA32A0](&v6);
  v3 = *a1;
  if (v2)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLAny>(v3, v2);
  v6 = 0;
  WebCore::DeferredPromise::reject(v3, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v6, 0);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::fulfillPromiseWithArrayBuffer(uint64_t *a1, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  JSC *v5;
  objc_class *OutOfMemoryError;

  v2 = *a1;
  if (a2)
    return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(*a1, a2);
  v4 = *(_QWORD *)(v2 + 32);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC **)v4;
  OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v5, 0);
  return WebCore::DeferredPromise::reject<WebCore::IDLAny>(v2, OutOfMemoryError, 0);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(uint64_t result, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  JSC::ArrayBuffer *v8;
  objc_class *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(WebCore **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](v17, v7);
    v9 = (objc_class *)WebCore::toJS(v6, **(_QWORD **)(v4 + 32), a2, v8);
    v10 = *(_QWORD *)(v7 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v9);
      v10 = *(_QWORD *)(v7 + 16);
      if (!v10)
        return MEMORY[0x19AEA32A0](v17);
    }
    v11 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v11 + 64))(v11))
    {
LABEL_12:
      WebCore::reportException(v6, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v17);
    }
    v12 = v11[43];
    if (*(_QWORD *)(v7 + 24) == v10)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v12)
      goto LABEL_12;
    v13 = (unsigned __int8 *)(v12 + 40);
    if (__ldaxr((unsigned __int8 *)(v12 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v12 + 40);
LABEL_20:
    v15 = *(unsigned __int8 *)(v12 + 41);
    v16 = __ldxr(v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_25:
        if (!v15)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::fulfillPromiseWithArrayBufferFromSpan(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  JSC *v4;
  objc_class *OutOfMemoryError;
  uint64_t result;
  JSC::JSGlobalObject *v7;

  JSC::ArrayBuffer::tryCreate();
  v2 = *a1;
  if (v7)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v2, v7);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 32);
    if (!v3 || (*(_BYTE *)(v3 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(JSC **)v3;
    OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v4, 0);
    WebCore::DeferredPromise::reject<WebCore::IDLAny>(v2, OutOfMemoryError, 0);
  }
  result = (uint64_t)v7;
  if (v7)
    return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v7);
  return result;
}

uint64_t WebCore::fulfillPromiseWithUint8Array(uint64_t *a1, JSC::ArrayBufferView *a2)
{
  uint64_t v2;
  uint64_t v4;
  JSC *v5;
  objc_class *OutOfMemoryError;

  v2 = *a1;
  if (a2)
    return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>(*a1, a2);
  v4 = *(_QWORD *)(v2 + 32);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC **)v4;
  OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v5, 0);
  return WebCore::DeferredPromise::reject<WebCore::IDLAny>(v2, OutOfMemoryError, 0);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>(uint64_t result, JSC::ArrayBufferView *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(JSC::JSGlobalObject **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)JSC::ArrayBufferView::wrap(a2, v6, **(JSC::JSGlobalObject ***)(v4 + 32));
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException(v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

JSC::JSGlobalObject *WebCore::fulfillPromiseWithUint8ArrayFromSpan(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  JSC *v6;
  objc_class *OutOfMemoryError;
  JSC::JSGlobalObject *result;
  JSC::JSGlobalObject *v9;

  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(a2, a3, (uint64_t *)&v9);
  v4 = *a1;
  if (v9)
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>(v4, v9);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(JSC **)v5;
    OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v6, 0);
    WebCore::DeferredPromise::reject<WebCore::IDLAny>(v4, OutOfMemoryError, 0);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (JSC::JSGlobalObject *)JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSDOMQuad::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 24) + 16);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        goto LABEL_15;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956A9AB8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 24);
  if (v14)
    v15 = *(_BYTE *)(a2 + 130) == 0;
  else
    v15 = 0;
  if (v15)
  {
    result = *(_QWORD *)(a2 + 120);
    v16 = *(_QWORD *)(result + 48);
    v17 = *(_DWORD *)(v16 + 4);
    v18 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = v21;
    while (1)
    {
      v23 = *(_QWORD *)(v16 + 8 * v22 + 16);
      if (!v23)
        break;
      if (v14 == v23)
        goto LABEL_29;
      v22 = (v22 + 1) & v17;
      if (v22 == v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1956A9B7CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v14);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_29:
  v24 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 32);
  if (v24)
    v25 = *(_BYTE *)(a2 + 130) == 0;
  else
    v25 = 0;
  if (v25)
  {
    result = *(_QWORD *)(a2 + 120);
    v26 = *(_QWORD *)(result + 48);
    v27 = *(_DWORD *)(v26 + 4);
    v28 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = v31;
    while (1)
    {
      v33 = *(_QWORD *)(v26 + 8 * v32 + 16);
      if (!v33)
        break;
      if (v24 == v33)
        goto LABEL_43;
      v32 = (v32 + 1) & v27;
      if (v32 == v31)
      {
        __break(0xC471u);
        JUMPOUT(0x1956A9C40);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v24);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_43:
  v34 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 40);
  if (v34)
    v35 = *(_BYTE *)(a2 + 130) == 0;
  else
    v35 = 0;
  if (v35)
  {
    result = *(_QWORD *)(a2 + 120);
    v36 = *(_QWORD *)(result + 48);
    v37 = *(_DWORD *)(v36 + 4);
    v38 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
    v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
    v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
    v41 = v37 & ((v40 >> 31) ^ v40);
    v42 = v41;
    while (1)
    {
      v43 = *(_QWORD *)(v36 + 8 * v42 + 16);
      if (!v43)
        break;
      if (v34 == v43)
        return result;
      v42 = (v42 + 1) & v37;
      if (v42 == v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1956A9D04);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v34);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

WTF *WebCore::clearBackingSet(unint64_t this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  JSC::JSFunction *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *v12;
  WTF *result;
  uint64_t (*v14)(unint64_t *, JSC::JSGlobalObject *, JSC::JSObject *);
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  _OWORD v24[4];
  uint64_t v25;
  _QWORD v26[3];

  v4 = *(JSC::VM **)(this + 56);
  v5 = *(_QWORD *)(this + 1552);
  if ((v5 & 1) != 0)
  {
    v14 = *(uint64_t (**)(unint64_t *, JSC::JSGlobalObject *, JSC::JSObject *))(v5 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (uint64_t *)(this - 16);
    if ((this & 8) == 0)
      v15 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v21 = *v15;
    v22 = this;
    v23 = (WTF *)(this + 1552);
    v5 = v14(&v21, a2, a3);
  }
  v6 = 0;
  if (*(_QWORD *)(v5 + 48) == 2)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v5 + 48);
  v8 = MEMORY[0x1E0CBEBD8];
  *MEMORY[0x1E0CBEBD8] += 2;
  if ((v8 >> 4))
  {
    if (((v8 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x20)) != 0
      || (v9 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE)), v4)) == 0|| (v21 = v8, v10 = JSC::PropertyTable::get(v9, (uint64_t *)&v21), (_DWORD)v10 == -1))
    {
      v6 = 0;
    }
    else
    {
      if ((int)v10 > 63)
      {
        v17 = *(_QWORD *)(v7 + 8) - 8;
        v18 = 0x3F00000000 - (v10 << 32);
      }
      else
      {
        v17 = v7 + 16;
        v18 = v10 << 32;
      }
      v6 = *(JSC::JSFunction **)(v17 + (v18 >> 29));
    }
  }
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBD8], a2);
  else
    *(_DWORD *)v8 -= 2;
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v26[0]) = 0;
  }
  else if (*((_BYTE *)v6 + 5) == 26)
  {
    JSC::JSFunction::getCallData(v6, (JSCell *)a2);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *, JSC::JSGlobalObject *, JSC::JSObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) + 0x38))(v26, v6, a2, a3);
  }
  LOBYTE(v21) = 0;
  v22 = 0x800000000;
  v23 = (WTF *)((char *)v24 + 8);
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v19 = (unint64_t *)v24 + 1;
  v20 = 0;
  JSC::call();
  v12 = *(uint64_t **)&v24[0];
  if (*(_QWORD *)&v24[0])
  {
    v19 = &v22;
    v16 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v24[0], (uint64_t *)&v19);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v16);
  }
  result = v23;
  if (v23 != (WTF *)((char *)v24 + 8))
  {
    if (v23)
      return (WTF *)WTF::fastFree(v23, v11);
  }
  return result;
}

uint64_t WebCore::getBackingSet(unint64_t this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  JSC::JSSet *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v14)(unint64_t *);
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(JSC::VM **)(this + 56);
  v6 = *(_QWORD *)(*((_QWORD *)v5 + 5182) + 19168);
  if ((v6 >> 4))
  {
    if (((v6 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v7 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), v5);
      if (v7)
      {
        v18 = v6;
        v8 = JSC::PropertyTable::get(v7, (uint64_t *)&v18);
        if ((_DWORD)v8 != -1)
        {
          v16 = (char *)a2 + 16;
          v17 = v8 << 32;
          if ((int)v8 >= 64)
          {
            v17 = 0x3F00000000 - (v8 << 32);
            v16 = (char *)(*((_QWORD *)a2 + 1) - 8);
          }
          if (*(_QWORD *)&v16[v17 >> 29])
            return 0;
        }
      }
    }
  }
  v9 = *(JSC::JSSet **)(this + 56);
  v10 = *(_QWORD *)(this + 1552);
  if ((v10 & 1) != 0)
  {
    v14 = *(uint64_t (**)(unint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (uint64_t *)(this - 16);
    if ((this & 8) == 0)
      v15 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v18 = *v15;
    v19 = (JSC::JSGlobalObject *)this;
    v20 = this + 1552;
    v10 = v14(&v18);
  }
  v11 = JSC::JSSet::create(v9, v10, a3);
  v12 = *(_QWORD *)(*((_QWORD *)v9 + 5182) + 19168);
  v18 = 0;
  v19 = a2;
  v20 = 0x1000000FFFFFFFFLL;
  v21 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, v9, v12, v11, 4, (uint64_t)&v18);
  return 1;
}

unint64_t JSC::JSSet::create(JSC::JSSet *this, unint64_t a2, JSC::Structure *a3)
{
  _QWORD *v5;
  unint64_t result;
  int v7;
  unint64_t v8;

  v5 = (_QWORD *)*((_QWORD *)this + 5093);
  if (!v5)
    v5 = (_QWORD *)JSC::GCClient::Heap::setSpaceSlow((JSC::JSSet *)((char *)this + 37552));
  result = v5[3];
  if (result < v5[4])
    goto LABEL_4;
  result = v5[5];
  if ((result & 1) == 0)
  {
    v8 = *(_QWORD *)(result + 8) ^ v5[6];
    v5[4] = result + HIDWORD(v8);
    v5[5] = result + (int)v8;
LABEL_4:
    v5[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)result = 0;
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v7;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

WTF *WebCore::addToBackingSet(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  JSC::VM *v5;
  uint64_t v6;
  JSC::JSFunction *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t *v13;
  WTF *result;
  uint64_t (*v15)(unint64_t *);
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];

  v5 = *(JSC::VM **)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 1552);
  if ((v6 & 1) != 0)
  {
    v15 = *(uint64_t (**)(unint64_t *))(v6 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (uint64_t *)(a1 - 16);
    if ((a1 & 8) == 0)
      v16 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v22 = *v16;
    v23 = a1;
    v24 = (WTF *)(a1 + 1552);
    v6 = v15(&v22);
  }
  v7 = 0;
  if (*(_QWORD *)(v6 + 48) == 2)
    v8 = 0;
  else
    v8 = *(_QWORD *)(v6 + 48);
  v9 = MEMORY[0x1E0CBEBA0];
  *MEMORY[0x1E0CBEBA0] += 2;
  if ((v9 >> 4))
  {
    if (((v9 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x20)) != 0
      || (v10 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)), v5)) == 0|| (v22 = v9, v11 = JSC::PropertyTable::get(v10, (uint64_t *)&v22), (_DWORD)v11 == -1))
    {
      v7 = 0;
    }
    else
    {
      if ((int)v11 > 63)
      {
        v18 = *(_QWORD *)(v8 + 8) - 8;
        v19 = 0x3F00000000 - (v11 << 32);
      }
      else
      {
        v18 = v8 + 16;
        v19 = v11 << 32;
      }
      v7 = *(JSC::JSFunction **)(v18 + (v19 >> 29));
    }
  }
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBA0], a2);
  else
    *(_DWORD *)v9 -= 2;
  if (((unint64_t)v7 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v31[0]) = 0;
  }
  else if (*((_BYTE *)v7 + 5) == 26)
  {
    JSC::JSFunction::getCallData(v7, (JSCell *)a2);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v7 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(v31, v7);
  }
  LOBYTE(v22) = 0;
  v24 = (WTF *)&v26;
  v25 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v26 = a3;
  v23 = 0x800000001;
  v20 = &v26;
  v21 = 1;
  JSC::call();
  v13 = v25;
  if (v25)
  {
    v20 = &v23;
    v17 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v25, (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v13, v17);
  }
  result = v24;
  if (v24 != (WTF *)&v26)
  {
    if (v24)
      return (WTF *)WTF::fastFree(v24, v12);
  }
  return result;
}

uint64_t WebCore::forwardAttributeGetterToBackingSet(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, const JSC::Identifier *a4)
{
  return JSC::JSObject::get(a2, this, *(_QWORD *)a3);
}

uint64_t WebCore::forwardFunctionCallToBackingSet(unint64_t this, JSCell *a2, JSC::CallFrame *a3, JSC::JSObject *a4, const JSC::Identifier *a5)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  JSC::JSFunction *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  JSValue v22;
  int v23;
  BOOL v24;
  uint64_t (*v25)(unint64_t *, JSCell *, JSC::CallFrame *, JSC::JSObject *, const JSC::Identifier *);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  _QWORD v37[3];

  v8 = *(JSC::VM **)(this + 56);
  v9 = *(_QWORD *)(this + 1552);
  if ((v9 & 1) != 0)
  {
    v25 = *(uint64_t (**)(unint64_t *, JSCell *, JSC::CallFrame *, JSC::JSObject *, const JSC::Identifier *))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (uint64_t *)(this - 16);
    if ((this & 8) == 0)
      v26 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v32 = *v26;
    v33 = this;
    v34 = (WTF *)(this + 1552);
    v9 = v25(&v32, a2, a3, a4, a5);
  }
  if (*(_QWORD *)(v9 + 48) == 2)
    v10 = 0;
  else
    v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)a4;
  if ((v11 >> 4)
    && ((v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), v8)) != 0&& (v32 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v32), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v27 = *(_QWORD *)(v10 + 8) - 8;
      v28 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v27 = v10 + 16;
      v28 = v13 << 32;
    }
    v14 = *(JSC::JSFunction **)(v27 + (v28 >> 29));
    if (((unint64_t)v14 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v37[0]) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v14 = 0;
  }
  if (*((_BYTE *)v14 + 5) == 26)
    JSC::JSFunction::getCallData(v14, a2);
  else
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *, JSCell *, JSC::CallFrame *, JSC::JSObject *, const JSC::Identifier *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) + 0x38))(v37, v14, a2, a3, a4, a5);
LABEL_12:
  LOBYTE(v32) = 0;
  v33 = 0x800000000;
  v34 = (WTF *)((char *)v35 + 8);
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  v15 = *((int *)a2 + 8);
  if ((unint64_t)(v15 - 1) >= 9)
  {
    LOBYTE(v32) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
    LODWORD(v15) = *((_DWORD *)a2 + 8);
  }
  if ((_DWORD)v15 != 1)
  {
    v20 = 0;
    v21 = 0x600000000;
    do
    {
      v22.super.isa = *(Class *)((char *)a2 + (v21 >> 29));
      v23 = v33;
      if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v24 = v34 == 0) : (v24 = 1), v24))
      {
        *((JSValue *)v34 + v33) = v22;
        LODWORD(v33) = v23 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v22) == 1)
      {
        LOBYTE(v32) = 1;
      }
      ++v20;
      v21 += 0x100000000;
    }
    while (v20 < *((int *)a2 + 8) - 1);
  }
  v30 = v34;
  v31 = v33;
  v17 = JSC::call();
  v18 = *(uint64_t **)&v35[0];
  if (*(_QWORD *)&v35[0])
  {
    v30 = (WTF *)&v33;
    v29 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v18, v29);
  }
  if (v34 != (WTF *)((char *)v35 + 8) && v34)
    WTF::fastFree(v34, v16);
  return v17;
}

uint64_t WebCore::forwardForEachCallToBackingSet(WebCore *this, WebCore::JSDOMGlobalObject *a2, JSC::CallFrame *a3, JSC::JSObject *a4)
{
  JSCell *v6;
  objc_class *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v14;
  uint64_t v15;
  JSValue v16;
  int v17;
  BOOL v18;
  JSValue v19;
  _QWORD *v20;
  WTF *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  WTF *v25;
  _OWORD v26[4];
  uint64_t v27;
  _QWORD v28[3];

  WebCore::getBackingSet((unint64_t)this, a3, a3);
  v7 = (objc_class *)v6;
  v8 = *(_QWORD *)(*((_QWORD *)this + 418) + 1400);
  if (*(_BYTE *)(v8 + 5) == 26)
    JSC::JSFunction::getCallData(*(JSC::JSFunction **)(*((_QWORD *)this + 418) + 1400), v6);
  else
    (*(void (**)(_QWORD *__return_ptr, _QWORD))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)
                                                         + 0x38))(v28, *(_QWORD *)(*((_QWORD *)this + 418) + 1400));
  v23 = 0;
  v24 = 0x800000000;
  v25 = (WTF *)((char *)v26 + 8);
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  if (*((_DWORD *)a2 + 8) >= 9u)
    v23 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v24) == 1;
  v9 = v24;
  if ((_DWORD)v24 == HIDWORD(v24) || v25 != (WTF *)((char *)v26 + 8) && v25)
  {
    v19.super.isa = v7;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v24, v19) == 1)
      v23 = 1;
  }
  else
  {
    *((_QWORD *)v25 + v24) = v7;
    LODWORD(v24) = v9 + 1;
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v14 = 0;
    v15 = 0x600000000;
    do
    {
      v16.super.isa = *(Class *)((char *)a2 + (v15 >> 29));
      v17 = v24;
      if ((_DWORD)v24 != HIDWORD(v24) && (v25 != (WTF *)((char *)v26 + 8) ? (v18 = v25 == 0) : (v18 = 1), v18))
      {
        *((JSValue *)v25 + v24) = v16;
        LODWORD(v24) = v17 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v24, v16) == 1)
      {
        v23 = 1;
      }
      ++v14;
      v15 += 0x100000000;
    }
    while (v14 < *((int *)a2 + 8) - 1);
  }
  v21 = v25;
  v22 = v24;
  v11 = JSC::call();
  v12 = *(uint64_t **)&v26[0];
  if (*(_QWORD *)&v26[0])
  {
    v21 = (WTF *)&v24;
    v20 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v26[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v20);
  }
  if (v25 != (WTF *)((char *)v26 + 8) && v25)
    WTF::fastFree(v25, v10);
  return v11;
}

uint64_t (**WebCore::JSDOMWindowBase::globalObjectMethodTable(WebCore::JSDOMWindowBase *this))(WebCore::JSDOMWindowBase *__hidden this, const JSC::JSGlobalObject *)
{
  return WebCore::JSDOMWindowBase::globalObjectMethodTable(void)::table;
}

BOOL WebCore::JSDOMWindowBase::shouldInterruptScript(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3408) + 104))(*(_QWORD *)(a1 + 3408)) + 24);
  return !v1 || *(_QWORD *)(v1 + 8) == 0;
}

WebCore::WindowEventLoop *WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WebCore::UserGestureToken *v18;
  int v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  WebCore::WindowEventLoop *result;
  WTF *v34;
  void *v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  WebCore::WindowEventLoop *v49;
  WebCore::WindowEventLoop *v50;
  WebCore::WindowEventLoop *v51;
  int v52;
  WebCore::WindowEventLoop *v53[3];

  v4 = WTF::fastMalloc((WTF *)0x18);
  v6 = v4;
  *(_DWORD *)v4 = 1;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(v7 + 712);
  if (!v8)
  {
    v4 = JSC::HandleSet::grow((JSC::HandleSet *)(v7 + 672));
    v8 = *(_QWORD *)(v7 + 712);
  }
  *(_QWORD *)(v7 + 712) = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v6 + 8) = v8 + 16;
  if (!*(_QWORD *)(v8 + 16))
  {
    v9 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
    v10 = v9[3];
    v9 += 3;
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v9;
    *v9 = v8;
    *(_QWORD *)(v10 + 8) = v8;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = a1;
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 16) = v12;
  v13 = *(_QWORD *)(a1 + 3408);
  if (v13 && !*(_BYTE *)(v13 + 56))
  {
    v14 = *(_QWORD *)(v13 + 72);
    if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
    {
      if (*(_BYTE *)(v15 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1956AAD58);
      }
      v11 = v15 - 288;
    }
    else
    {
      v11 = 0;
    }
  }
  if (!*(_QWORD *)(v11 + 2952))
  {
    v40 = *(_QWORD *)(v11 + 2944);
    if (v40)
    {
LABEL_44:
      v41 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v41 = 0;
      *(_DWORD *)(v41 + 8) = 0;
      v42 = *(_QWORD *)(v40 + 16);
      if (v42)
        goto LABEL_72;
      v42 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = v40;
      v44 = *(unsigned int **)(v40 + 16);
      *(_QWORD *)(v40 + 16) = v42;
      if (!v44)
        goto LABEL_72;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v43);
      }
      v42 = *(_QWORD *)(v40 + 16);
      if (v42)
      {
LABEL_72:
        do
          v47 = __ldaxr((unsigned int *)v42);
        while (__stlxr(v47 + 1, (unsigned int *)v42));
      }
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0;
      *(_QWORD *)(v41 + 16) = v42;
      *(_BYTE *)(v41 + 40) = 0;
      WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTaskGroup>(v40 + 72, (uint64_t *)v41, (uint64_t)v53);
      v4 = *(_QWORD *)(v11 + 2952);
      *(_QWORD *)(v11 + 2952) = v41;
      if (v4)
      {
        WebCore::EventLoopTaskGroup::~EventLoopTaskGroup((WebCore::EventLoopTaskGroup *)v4, v48);
        if (*(_DWORD *)(v4 + 8))
        {
          *(_OWORD *)(v4 + 16) = 0u;
          *(_OWORD *)(v4 + 32) = 0u;
          *(_OWORD *)v4 = 0u;
        }
        else
        {
          v4 = WTF::fastFree((WTF *)v4, v48);
        }
      }
      if (*(_BYTE *)(v11 + 468))
      {
        v4 = (uint64_t)WebCore::EventLoopTaskGroup::markAsReadyToStop(*(WebCore::EventLoopTaskGroup **)(v11 + 2952), v48);
      }
      else if (*(_BYTE *)(v11 + 467))
      {
        v4 = (uint64_t)WebCore::EventLoopTaskGroup::suspend(*(WebCore::EventLoopTaskGroup **)(v11 + 2952));
      }
      goto LABEL_12;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), v5);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v49, v53);
    v50 = v53[0];
    v53[0] = 0;
    v51 = *(WebCore::WindowEventLoop **)(v11 + 2944);
    *(_QWORD *)(v11 + 2944) = v50;
    if (v51)
    {
      v52 = *((_DWORD *)v51 + 2) - 1;
      if (*((_DWORD *)v51 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v51 + 8))(v51);
        v51 = v53[0];
        v53[0] = 0;
        if (!v51)
          goto LABEL_64;
        v52 = *((_DWORD *)v51 + 2) - 1;
        if (*((_DWORD *)v51 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v51 + 8))(v51);
          goto LABEL_64;
        }
      }
      *((_DWORD *)v51 + 2) = v52;
    }
LABEL_64:
    WebCore::EventLoop::addAssociatedContext(*(WebCore::EventLoop **)(v11 + 2944), (WebCore::ScriptExecutionContext *)(v11 + 192));
    v40 = *(_QWORD *)(v11 + 2944);
    goto LABEL_44;
  }
LABEL_12:
  v16 = *(_QWORD *)(v11 + 2952);
  if (!WTF::isMainThread((WTF *)v4))
  {
LABEL_19:
    v18 = 0;
    goto LABEL_20;
  }
  {
    v18 = 0;
    WebCore::currentToken(void)::token = 0;
    goto LABEL_20;
  }
  v18 = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
  if (WebCore::currentToken(void)::token)
  {
    v19 = (*(_DWORD *)WebCore::currentToken(void)::token)++;
    if (!*((_BYTE *)v18 + 80) || (*(_QWORD *)(*(_QWORD *)(v11 + 680) + 704) & 0x10) == 0)
    {
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::UserGestureToken::~UserGestureToken(v18, v17);
        WTF::fastFree(v34, v35);
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  v20 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  v22 = v20;
  *(_QWORD *)v20 = &off_1E3392AD0;
  *((_QWORD *)v20 + 1) = v6;
  *((_QWORD *)v20 + 2) = v18;
  if (*(_BYTE *)(v16 + 40) == 3)
    return (WebCore::WindowEventLoop *)WTF::Detail::CallableWrapper<WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(v20, v21);
  v23 = *(_QWORD *)(v16 + 16);
  if (!v23)
    return (WebCore::WindowEventLoop *)WTF::Detail::CallableWrapper<WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(v20, v21);
  v24 = *(_DWORD **)(v23 + 8);
  if (!v24)
    return (WebCore::WindowEventLoop *)WTF::Detail::CallableWrapper<WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(v20, v21);
  ++v24[2];
  v25 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v25 = off_1E33A0990;
  *(_BYTE *)(v25 + 8) = 10;
  v26 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
    goto LABEL_73;
  v26 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v26 = 1;
  *(_QWORD *)(v26 + 8) = v16;
  v37 = *(unsigned int **)v16;
  *(_QWORD *)v16 = v26;
  if (!v37)
    goto LABEL_73;
  do
  {
    v38 = __ldaxr(v37);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v37));
  if (!v39)
  {
    atomic_store(1u, v37);
    WTF::fastFree((WTF *)v37, v36);
  }
  v26 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
LABEL_73:
    do
      v27 = __ldaxr((unsigned int *)v26);
    while (__stlxr(v27 + 1, (unsigned int *)v26));
  }
  *(_QWORD *)v25 = off_1E33A4C70;
  *(_QWORD *)(v25 + 16) = v26;
  *(_QWORD *)(v25 + 24) = v22;
  v53[0] = (WebCore::WindowEventLoop *)v25;
  v28 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
  v29 = (_QWORD *)(v28 + 8);
  v30 = *(unsigned int *)(v28 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v28 + 16))
  {
    v31 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)v53);
    v30 = *(unsigned int *)(v28 + 20);
    v32 = (uint64_t *)(*(_QWORD *)(v28 + 8) + 8 * v30);
    v25 = *v31;
  }
  else
  {
    v32 = (uint64_t *)(*v29 + 8 * v30);
    v31 = (uint64_t *)v53;
  }
  *v31 = 0;
  *v32 = v25;
  *(_DWORD *)(v28 + 20) = v30 + 1;
  if (!*((_BYTE *)v24 + 120))
  {
    *((_BYTE *)v24 + 120) = 1;
    (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 24))(v24);
  }
  result = v53[0];
  v53[0] = 0;
  if (result)
    result = (WebCore::WindowEventLoop *)(*(uint64_t (**)(WebCore::WindowEventLoop *))(*(_QWORD *)result + 8))(result);
  if (v24[2] == 1)
    return (WebCore::WindowEventLoop *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
  --v24[2];
  return result;
}

uint64_t WebCore::JSDOMWindowBase::shouldInterruptScriptBeforeTimeout(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3408) + 104))(*(_QWORD *)(a1 + 3408)) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1256))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
  else
    return 1;
}

unint64_t WebCore::JSDOMWindowBase::currentScriptExecutionOwner(WebCore::DOMWindow **this, JSC::JSGlobalObject *a2)
{
  WebCore::JSDOMGlobalObject *v3;
  WebCore::Document *v4;

  v3 = (WebCore::JSDOMGlobalObject *)WebCore::DOMWindow::documentIfLocal(this[426]);
  if (v3)
    return WebCore::toJS(this, (JSC::JSGlobalObject *)this, v3, v4);
  else
    return 2;
}

uint64_t WebCore::JSDOMWindowBase::scriptExecutionStatus(WebCore::JSDOMWindowBase *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  return WebCore::ScriptExecutionContext::jscScriptExecutionStatus((WebCore::ScriptExecutionContext *)(*((_QWORD *)a2 + 3) + 192));
}

_QWORD *WebCore::JSDOMWindowBase::reportViolationForUnsafeEval(_QWORD *this, JSC::JSGlobalObject *a2, JSC::JSString *a3)
{
  uint64_t v3;
  BOOL v4;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  WebCore::ContentSecurityPolicyDirectiveList **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  char v25;
  char v26;
  _QWORD *v27;
  _QWORD v28[2];

  v3 = this[426];
  if (v3)
    v4 = *(_BYTE *)(v3 + 56) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = this;
    ++*(_DWORD *)(v3 + 24);
    this = (_QWORD *)WebCore::LocalDOMWindow::frameElement((WebCore::LocalDOMWindow *)v3);
    if (this)
    {
      this = (_QWORD *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(*(_QWORD *)(this[5] + 8)
                                                                                                  + 192));
      v8 = (uint64_t)this;
      if (this)
        goto LABEL_12;
    }
    v9 = *(_QWORD *)(v3 + 72);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      if (*(_BYTE *)(v10 + 178))
      {
        __break(0xC471u);
        goto LABEL_41;
      }
      this = (_QWORD *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v10 - 96));
      v8 = (uint64_t)this;
      if (this)
      {
        do
LABEL_12:
          v11 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v11 + 1, (unsigned int *)v8));
        if (a2)
        {
          v12 = *((_QWORD *)a2 + 1);
          if ((v12 & 1) != 0)
          {
            this = (_QWORD *)JSC::JSRopeString::resolveRope(a2, 0);
            v12 = *this;
          }
          if (v12)
          {
            v13 = 0;
            *(_DWORD *)v12 += 2;
            v14 = *(_QWORD *)(v12 + 8);
            v15 = *(unsigned int *)(v12 + 4);
            v16 = (unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32;
LABEL_18:
            v28[0] = v14;
            v28[1] = v16 | v15;
            v27 = v6;
            v26 = 0;
            v17 = *(unsigned int *)(v8 + 148);
            if ((_DWORD)v17)
            {
              v25 = 0;
              v19 = operator new(0x30uLL);
              *v19 = &off_1E34032D0;
              v19[1] = &v26;
              v19[2] = v8;
              v19[3] = &v27;
              v19[4] = v28;
              v19[5] = &v25;
              v20 = *(WebCore::ContentSecurityPolicyDirectiveList ***)(v8 + 136);
              v21 = 8 * v17;
              do
              {
                v22 = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForUnsafeEval(*v20, v18);
                if (v22)
                  (*(void (**)(_QWORD *, uint64_t))(*v19 + 48))(v19, v22);
                ++v20;
                v21 -= 8;
              }
              while (v21);
              this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v19 + 40))(v19);
            }
            if ((v13 & 1) == 0)
            {
              if (*(_DWORD *)v12 == 2)
                this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v12, v7);
              else
                *(_DWORD *)v12 -= 2;
            }
            goto LABEL_27;
          }
          v14 = 0;
          v15 = 0;
        }
        else
        {
          v12 = 0;
          v14 = 0;
          v15 = 0;
        }
        v16 = 0x100000000;
        v13 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      v8 = 0;
    }
LABEL_27:
    if (*(_DWORD *)(v3 + 24) == 1)
    {
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      if (!v8)
        return this;
    }
    else
    {
      --*(_DWORD *)(v3 + 24);
      if (!v8)
        return this;
    }
    if (atomic_load((unsigned int *)v8))
    {
      do
        v24 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v24 - 1, (unsigned int *)v8));
      return this;
    }
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x1956AB10CLL);
  }
  return this;
}

uint64_t WebCore::JSDOMWindowBase::globalObjectMethodTable(void)::$_0::__invoke()
{
  return WTF::defaultLanguage();
}

void WebCore::JSDOMWindowBase::codeForEval(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  _DWORD *v7;
  uint64_t v8;

  if ((a1 & 0xFFFE000000000002) == 0)
  {
    v2 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
    v3 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
    v4 = (char **)(16 * v2);
    if ((_DWORD)v2)
      v5 = v4 == &WebCore::JSTrustedScript::s_info;
    else
      v5 = 1;
    if (!v5)
    {
      do
      {
        v4 = (char **)v4[2];
        v3 = v4 != 0;
      }
      while (v4 != &WebCore::JSTrustedScript::s_info && v4 != 0);
    }
    if (v3)
    {
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v7 = *(_DWORD **)(v8 + 16);
        if (!v7)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
  }
  v7 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_13:
    *v7 += 2;
LABEL_14:
  *a2 = v7;
}

uint64_t *WebCore::JSDOMWindowBase::canCompileStrings(WebCore::JSDOMGlobalObject *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF::StringImpl *v8;

  v4 = *a3;
  if (*a3)
  {
    *(_DWORD *)v4 += 2;
    v8 = v4;
    v6 = WebCore::JSDOMGlobalObject::canCompileStrings(a1, a2, &v8, a4);
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  else
  {
    v8 = 0;
    return WebCore::JSDOMGlobalObject::canCompileStrings(a1, a2, &v8, a4);
  }
  return v6;
}

uint64_t WebCore::JSDOMWindowBase::JSDOMWindowBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_DWORD **)(a5 + 24);
  ++*v9;
  *(_OWORD *)(JSC::JSGlobalObject::JSGlobalObject() + 3296) = 0u;
  v10 = (void *)WTF::fastMalloc((WTF *)0x1D20);
  bzero(v10, 0x1D20uLL);
  *(_QWORD *)(a1 + 3312) = v10;
  *(_QWORD *)(a1 + 3320) = v9;
  *(_BYTE *)(a1 + 3328) = v9[12] == 0;
  *(_BYTE *)(a1 + 3329) = 0;
  *(_QWORD *)(a1 + 3336) = 0;
  v11 = operator new();
  *(_QWORD *)v11 = a2;
  *(_QWORD *)(v11 + 8) = a2;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 312) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_OWORD *)(v11 + 344) = 0u;
  *(_OWORD *)(v11 + 360) = 0u;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_OWORD *)(v11 + 392) = 0u;
  *(_OWORD *)(v11 + 408) = 0u;
  *(_OWORD *)(v11 + 424) = 0u;
  *(_OWORD *)(v11 + 440) = 0u;
  *(_OWORD *)(v11 + 456) = 0u;
  *(_OWORD *)(v11 + 472) = 0u;
  *(_OWORD *)(v11 + 488) = 0u;
  *(_OWORD *)(v11 + 504) = 0u;
  *(_OWORD *)(v11 + 520) = 0u;
  *(_OWORD *)(v11 + 536) = 0u;
  *(_OWORD *)(v11 + 296) = 0u;
  *(_QWORD *)(v11 + 288) = a2;
  *(_OWORD *)(v11 + 552) = 0u;
  *(_OWORD *)(v11 + 568) = 0u;
  *(_OWORD *)(v11 + 584) = 0u;
  *(_OWORD *)(v11 + 600) = 0u;
  *(_OWORD *)(v11 + 616) = 0u;
  *(_OWORD *)(v11 + 632) = 0u;
  *(_OWORD *)(v11 + 648) = 0u;
  *(_OWORD *)(v11 + 664) = 0u;
  *(_QWORD *)(v11 + 680) = a2;
  *(_OWORD *)(v11 + 688) = 0u;
  *(_OWORD *)(v11 + 704) = 0u;
  *(_OWORD *)(v11 + 720) = 0u;
  *(_OWORD *)(v11 + 736) = 0u;
  *(_OWORD *)(v11 + 752) = 0u;
  *(_OWORD *)(v11 + 768) = 0u;
  *(_OWORD *)(v11 + 784) = 0u;
  *(_OWORD *)(v11 + 800) = 0u;
  *(_OWORD *)(v11 + 816) = 0u;
  *(_QWORD *)(v11 + 832) = a2;
  *(_OWORD *)(v11 + 840) = 0u;
  *(_OWORD *)(v11 + 856) = 0u;
  *(_OWORD *)(v11 + 872) = 0u;
  *(_OWORD *)(v11 + 888) = 0u;
  *(_OWORD *)(v11 + 904) = 0u;
  *(_OWORD *)(v11 + 920) = 0u;
  *(_OWORD *)(v11 + 936) = 0u;
  *(_OWORD *)(v11 + 952) = 0u;
  *(_OWORD *)(v11 + 968) = 0u;
  *(_QWORD *)(v11 + 984) = 0;
  *(_QWORD *)(v11 + 992) = a2;
  *(_OWORD *)(v11 + 1016) = 0u;
  *(_OWORD *)(v11 + 1032) = 0u;
  *(_OWORD *)(v11 + 1048) = 0u;
  *(_OWORD *)(v11 + 1064) = 0u;
  *(_OWORD *)(v11 + 1080) = 0u;
  *(_OWORD *)(v11 + 1096) = 0u;
  *(_OWORD *)(v11 + 1112) = 0u;
  *(_OWORD *)(v11 + 1128) = 0u;
  *(_OWORD *)(v11 + 1144) = 0u;
  *(_OWORD *)(v11 + 1160) = 0u;
  *(_OWORD *)(v11 + 1176) = 0u;
  *(_OWORD *)(v11 + 1192) = 0u;
  *(_OWORD *)(v11 + 1208) = 0u;
  *(_OWORD *)(v11 + 1224) = 0u;
  *(_OWORD *)(v11 + 1240) = 0u;
  *(_QWORD *)(v11 + 1384) = 0;
  *(_OWORD *)(v11 + 1000) = 0u;
  *(_OWORD *)(v11 + 1256) = 0u;
  *(_OWORD *)(v11 + 1272) = 0u;
  *(_OWORD *)(v11 + 1288) = 0u;
  *(_OWORD *)(v11 + 1304) = 0u;
  *(_OWORD *)(v11 + 1320) = 0u;
  *(_OWORD *)(v11 + 1336) = 0u;
  *(_OWORD *)(v11 + 1352) = 0u;
  *(_OWORD *)(v11 + 1368) = 0u;
  *(_QWORD *)(v11 + 1392) = a2;
  *(_QWORD *)(v11 + 1408) = 0;
  *(_QWORD *)(v11 + 1400) = 0;
  *(_QWORD *)(v11 + 1416) = a2;
  *(_QWORD *)(v11 + 1424) = 0;
  *(_QWORD *)(a1 + 3344) = v11;
  *(_QWORD *)(a1 + 3352) = off_1E33929E0;
  *(_QWORD *)(a1 + 3360) = 0;
  *(_QWORD *)(a1 + 3368) = a2;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(a1 + 3376) = off_1E3392A08;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3392) = a2;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(a1 + 3400) = 0;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 3408) = v12;
  *(_QWORD *)(a1 + 3416) = 0;
  *(_QWORD *)(a1 + 3336) = a5;
  if (a1 && a5 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  return a1;
}

uint64_t WebCore::JSDOMWindowBase::wrapped(WebCore::JSDOMWindowBase *this)
{
  return *((_QWORD *)this + 426);
}

uint64_t WebCore::showModalDialogGetter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const WebCore::LocalFrame *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v33;
  BOOL v34;
  char **v35;
  BOOL v36;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43[2];
  int v44;
  int v45;
  uint64_t v46;

  v4 = a1;
  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if ((a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject((JSC::JSCell *)a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v7 = (WTF::StringImpl *)Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v8 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v10 = (char **)(16 * v8);
    if ((_DWORD)v8)
      v11 = v10 == &WebCore::JSDOMWindow::s_info;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = (char **)v10[2];
        v9 = v10 != 0;
      }
      while (v10 != &WebCore::JSDOMWindow::s_info && v10 != 0);
    }
    if (v9)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v7 = *(WTF::StringImpl **)(Object + 16);
  v33 = *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C);
  v34 = *(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C) != 0;
  v35 = (char **)(16 * v33);
  if ((_DWORD)v33)
    v36 = v35 == &WebCore::JSDOMWindow::s_info;
  else
    v36 = 1;
  if (!v36)
  {
    do
    {
      v35 = (char **)v35[2];
      v34 = v35 != 0;
    }
    while (v35 != &WebCore::JSDOMWindow::s_info && v35 != 0);
  }
  if (!v34)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v13 = (_BYTE *)*((_QWORD *)v7 + 426);
  if (v13[56])
    v14 = 0;
  else
    v14 = *((_QWORD *)v7 + 426);
  if (v14)
  {
    ++*(_DWORD *)(v14 + 24);
    v15 = *(_QWORD *)(v14 + 72);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x1956AB954);
        }
        v17 = (_QWORD *)(v16 - 288);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage(v17, 1, 1, v43, 0);
        v19 = v43[0];
        v43[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        v13 = (_BYTE *)*((_QWORD *)v7 + 426);
      }
    }
  }
  v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 104))(v13);
  if (!v20)
    goto LABEL_47;
  v22 = (unsigned int *)(v20 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  if (!*(_BYTE *)(v20 + 144))
  {
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
    if ((*(_QWORD *)(*(_QWORD *)(v20 + 136) + 696) & 0x40000000) != 0
      && WebCore::LocalDOMWindow::canShowModalDialog((WebCore::LocalDOMWindow *)v20, v21))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = JSC::JSFunction::create();
      v26 = v43[0];
      v43[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v43[0] = 0;
      v43[1] = v7;
      v44 = -1;
      v45 = 0x1000000;
      v46 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, v5, a3, v4, 0, (uint64_t)v43);
      do
        v27 = __ldaxr(v22);
      while (__stlxr(v27 - 1, v22));
      if (v27 != 1)
        goto LABEL_40;
      v40 = 0;
LABEL_75:
      atomic_store(1u, v22);
      v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v41 = off_1E31FE290;
      *((_QWORD *)v41 + 1) = v22;
      v43[0] = v41;
      WTF::ensureOnMainThread();
      v42 = v43[0];
      v43[0] = 0;
      if (v42)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
      if ((v40 & 1) == 0)
      {
        do
LABEL_40:
          v28 = __ldaxr(v22);
        while (__stlxr(v28 - 1, v22));
        if (v28 != 1)
          goto LABEL_48;
        v29 = 0;
        goto LABEL_68;
      }
      goto LABEL_45;
    }
    do
      v30 = __ldaxr(v22);
    while (__stlxr(v30 - 1, v22));
    if (v30 == 1)
    {
      v40 = 1;
      goto LABEL_75;
    }
  }
  do
LABEL_45:
    v31 = __ldaxr(v22);
  while (__stlxr(v31 - 1, v22));
  if (v31 == 1)
  {
    v29 = 1;
LABEL_68:
    atomic_store(1u, v22);
    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v38 = off_1E31FE290;
    *((_QWORD *)v38 + 1) = v22;
    v43[0] = v38;
    WTF::ensureOnMainThread();
    v39 = v43[0];
    v43[0] = 0;
    if (v39)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 8))(v39);
    if (!v29)
      goto LABEL_48;
  }
LABEL_47:
  v4 = 10;
LABEL_48:
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
    else
      --*(_DWORD *)(v14 + 24);
  }
  return v4;
}

uint64_t WebCore::JSDOMWindowBase::updateDocument(WebCore::JSDOMWindowBase *this, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  char v13;

  v5 = *(_QWORD *)(*((_QWORD *)this + 7) + 41456);
  v13 = 0;
  v6 = *(_QWORD *)(v5 + 19704);
  v7 = *((_QWORD *)this + 426);
  if (v7)
    v8 = *(_BYTE *)(v7 + 56) == 0;
  else
    v8 = 0;
  if (!v8 || (v9 = *(_QWORD *)(v7 + 72)) == 0 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
    v11 = 2;
    return JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,WebCore::JSDOMWindowBase>((uint64_t)this, (uint64_t)this, v6, v11, 0, 1, &v13);
  }
  if (!*(_BYTE *)(v10 + 178))
  {
    v11 = WebCore::toJS((WebCore::DOMWrapperWorld **)this, this, (WebCore::JSDOMGlobalObject *)(v10 - 288), a4);
    return JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,WebCore::JSDOMWindowBase>((uint64_t)this, (uint64_t)this, v6, v11, 0, 1, &v13);
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDOMWindowBase::printErrorMessage(WebCore::JSDOMWindowBase *this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 426) + 104))(*((_QWORD *)this + 426));
  if (result)
  {
    if (!*(_BYTE *)(result + 144))
    {
      if (*(_QWORD *)a2)
      {
        if (*(_DWORD *)(*(_QWORD *)a2 + 4))
        {
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 296) + 696) + 104))(*(_QWORD *)(*(_QWORD *)(result + 296) + 696));
          if (result)
          {
            v4 = *(_QWORD *)(result + 24);
            if (v4)
            {
              v5 = *(_QWORD *)(v4 + 8);
              if (v5)
              {
                v6 = *(_QWORD *)(v5 + 792);
                if (v6)
                {
                  ++*(_DWORD *)(v6 + 16);
                  result = (uint64_t)WebCore::PageConsoleClient::addMessage((uint64_t *)v6, 1, 2, (uint64_t)a2, 0, 0);
                  v7 = *(_DWORD *)(v6 + 16);
                  if (v7)
                  {
                    *(_DWORD *)(v6 + 16) = v7 - 1;
                  }
                  else
                  {
                    result = 286;
                    __break(0xC471u);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WebCore::UserGestureToken **WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=(WebCore::UserGestureToken **a1, void *a2)
{
  WebCore::UserGestureToken *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

_DWORD *WebCore::JSDOMWindowBase::willRemoveFromWindowProxy(WebCore::JSDOMWindowBase *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *WebCore::JSDOMWindowBase::setCurrentEvent(WebCore::JSDOMWindowBase *this, WebCore::Event *a2)
{
  _DWORD *result;

  if (a2)
    ++*((_DWORD *)a2 + 4);
  result = (_DWORD *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = a2;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSDOMWindowBase::currentEvent(WebCore::JSDOMWindowBase *this)
{
  return *((_QWORD *)this + 427);
}

uint64_t WebCore::JSDOMWindowBase::proxy(WebCore::JSDOMWindowBase *this)
{
  return *((_QWORD *)this + 417);
}

uint64_t WebCore::toJS(WebCore::DOMWrapperWorld **this, JSC::JSGlobalObject *a2, WebCore::DOMWindow *a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(JSC::JSGlobalObject *))(*(_QWORD *)a2 + 104))(a2);
  if (!v4)
    return 2;
  result = (uint64_t)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(v4 + 112), this[415]);
  if (!result)
    return 2;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 2;
  v4 = (*(uint64_t (**)(JSC::JSGlobalObject *))(*(_QWORD *)a2 + 104))(a2);
  if (!v4)
    return 2;
  result = (uint64_t)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(v4 + 112), this[415]);
  if (!result)
    return 2;
  return result;
}

uint64_t WebCore::toJSDOMWindow(WebCore *this, WebCore::LocalFrame *a2, WebCore::DOMWrapperWorld *a3)
{
  return *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*((_QWORD *)this + 38) + 16) + 112), a2)+ 2);
}

uint64_t WebCore::incumbentDOMWindow(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  void *v4;
  WebCore **v5;
  WebCore *v6;
  WTF *v7;
  WebCore *v8;
  uint64_t result;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;

  MEMORY[0x19AEA32D0](v10, a2, *((_QWORD *)this + 7), 0);
  if (v11)
  {
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v10);
    if (v11)
    {
      if (v13)
      {
        v5 = (WebCore **)(v13 + 8);
LABEL_5:
        v6 = *v5;
        goto LABEL_6;
      }
      if ((v12 & 0xFFFE000000000007) != 3 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
      {
        v5 = (WebCore **)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 40);
        goto LABEL_5;
      }
    }
  }
  v6 = 0;
LABEL_6:
  v7 = v14;
  v14 = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref((uint64_t)v7, v4);
  if (v6)
    v8 = v6;
  else
    v8 = this;
  result = *((_QWORD *)v8 + 426);
  if (*(_BYTE *)(result + 56))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::firstDOMWindow(JSC::VM **this, JSC::JSGlobalObject *a2)
{
  uint64_t result;

  result = *(_QWORD *)(JSC::VM::deprecatedVMEntryGlobalObject(this[7], (JSC::JSGlobalObject *)this) + 3408);
  if (*(_BYTE *)(result + 56))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::legacyActiveDOMWindowForAccessor(WebCore *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WebCore **v6;
  WebCore *v7;
  WTF *v8;
  uint64_t result;
  uint64_t v10;
  WebCore *v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  WTF *v15;

  v3 = *((_QWORD *)this + 7);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
LABEL_11:
    v10 = *(_QWORD *)(v3 + 90568);
    if (v10)
    {
      v11 = *(WebCore **)(v10 + 8);
      if (v11)
        v7 = v11;
      else
        v7 = this;
    }
    else
    {
      v7 = this;
    }
    goto LABEL_9;
  }
  MEMORY[0x19AEA32D0](v12, v4, v3, 0);
  if (v12[2])
  {
    if (v14)
    {
      v6 = (WebCore **)(v14 + 8);
LABEL_5:
      v7 = *v6;
      goto LABEL_6;
    }
    if ((v13 & 0xFFFE000000000007) != 3 && *(unsigned __int8 *)(v13 + 5) >= 0x17u)
    {
      v6 = (WebCore **)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 40);
      goto LABEL_5;
    }
  }
  v7 = 0;
LABEL_6:
  v8 = v15;
  v15 = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref((uint64_t)v8, v5);
  if (!v7)
    goto LABEL_11;
LABEL_9:
  result = *((_QWORD *)v7 + 426);
  if (*(_BYTE *)(result + 56))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::JSDOMWindow::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v3 = result;
  v4 = *(_QWORD *)(result + 3408);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        goto LABEL_15;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956ABF3CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(v3 + 3408);
  if ((*(_QWORD *)(v14 + 16) & 0x1000000000000) != 0)
  {
    v15 = *(_QWORD *)(v14 + 16) & 0xFFFFFFFFFFFFLL;
    v16 = (unsigned __int8 *)(v15 + 32);
    if (__ldaxr((unsigned __int8 *)(v15 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
      goto LABEL_20;
    }
    result = MEMORY[0x19AEA534C](v15 + 32);
LABEL_20:
    v18 = *(unsigned int *)(v15 + 28);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(v15 + 16);
      v20 = v19 + 32 * v18;
      do
      {
        v21 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v21)
        {
          v22 = *(uint64_t **)(v19 + 8);
          v23 = 8 * v21;
          do
          {
            v24 = *v22++;
            result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 8) + 32))(*(_QWORD *)(v24 + 8), a2);
            v23 -= 8;
          }
          while (v23);
        }
        v19 += 32;
      }
      while (v19 != v20);
    }
    v25 = __ldxr(v16);
    if (v25 == 1)
    {
      if (!__stlxr(0, v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v16);
  }
  return result;
}

uint64_t WebCore::JSDOMWindow::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v3 = result;
  v4 = *(_QWORD *)(result + 3408);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        goto LABEL_15;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956AC10CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(v3 + 3408);
  if ((*(_QWORD *)(v14 + 16) & 0x1000000000000) != 0)
  {
    v15 = *(_QWORD *)(v14 + 16) & 0xFFFFFFFFFFFFLL;
    v16 = (unsigned __int8 *)(v15 + 32);
    if (__ldaxr((unsigned __int8 *)(v15 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
LABEL_19:
      v18 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(v15 + 16);
        v20 = v19 + 32 * v18;
        do
        {
          v21 = *(unsigned int *)(v19 + 20);
          if ((_DWORD)v21)
          {
            v22 = *(uint64_t **)(v19 + 8);
            v23 = 8 * v21;
            do
            {
              v24 = *v22++;
              result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 8) + 40))(*(_QWORD *)(v24 + 8), a2);
              v23 -= 8;
            }
            while (v23);
          }
          v19 += 32;
        }
        while (v19 != v20);
      }
      v25 = __ldxr(v16);
      if (v25 == 1)
      {
        if (!__stlxr(0, v16))
          return result;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v16);
    }
    result = MEMORY[0x19AEA534C](v15 + 32);
    goto LABEL_19;
  }
  return result;
}

WTF::StringImpl *WebCore::addCrossOriginOwnPropertyNames<(WebCore::CrossOriginObject)0>(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74[2];
  char v75;
  WTF::StringImpl *v76;

  v3 = (uint64_t *)((char *)result + 41456);
  if ((byte_1ECE8272B & 1) == 0)
  {
    v71 = *((_QWORD *)result + 5244);
    v72 = *v3;
    qword_1ECE82808 = *v3 + 19208;
    unk_1ECE82810 = v72 + 19368;
    unk_1ECE82818 = v72 + 19432;
    unk_1ECE82820 = v72 + 19928;
    unk_1ECE82828 = v72 + 19944;
    qword_1ECE82830 = v71 + 1768;
    unk_1ECE82838 = v72 + 20392;
    qword_1ECE82840 = v72 + 20904;
    unk_1ECE82848 = v72 + 20952;
    qword_1ECE82850 = v72 + 20984;
    unk_1ECE82858 = v72 + 21400;
    qword_1ECE82860 = v72 + 21880;
    unk_1ECE82868 = v72 + 22312;
    byte_1ECE8272B = 1;
  }
  v4 = a2 + 1;
  v5 = &qword_1ECE82808;
  do
  {
    v6 = *(WTF::StringImpl **)*v5;
    v76 = v6;
    v7 = *((_DWORD *)v6 + 4);
    if ((v7 & 0x20) != 0)
    {
      if ((a2[3] & 1) == 0 || *((_BYTE *)a2 + 25) && (*((_BYTE *)v6 + 36) & 4) != 0)
        goto LABEL_61;
    }
    else if ((a2[3] & 2) == 0)
    {
      goto LABEL_61;
    }
    v8 = *a2;
    v9 = *(unsigned int *)(*a2 + 20);
    if (v9 > 0x13)
    {
      if (*v4 && *(_DWORD *)(*v4 - 12))
      {
LABEL_18:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a2 + 1, (uint64_t *)&v76, (uint64_t)v74);
        if (!v75)
          goto LABEL_61;
        v6 = v76;
        v8 = *a2;
        v7 = *((_DWORD *)v76 + 4);
LABEL_20:
        if ((v7 & 0x20) != 0)
        {
          v31 = *(_DWORD *)v6 + 2;
        }
        else
        {
          if ((v7 & 0x10) != 0)
          {
            *(_DWORD *)v6 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v6 = v74[0];
          }
          v31 = *(_DWORD *)v6;
          *(_DWORD *)v6 += 2;
          if (!v31)
          {
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
LABEL_55:
            v32 = (uint64_t *)(v8 + 8);
            v74[0] = v6;
            v33 = *(unsigned int *)(v8 + 20);
            if ((_DWORD)v33 == *(_DWORD *)(v8 + 16))
            {
              v34 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)v74);
              v33 = *(unsigned int *)(v8 + 20);
              v35 = *(_QWORD *)(v8 + 8);
              v36 = *v34;
              *v34 = 0;
              *(_QWORD *)(v35 + 8 * v33) = v36;
            }
            else
            {
              v37 = *v32;
              v74[0] = 0;
              *(_QWORD *)(v37 + 8 * v33) = v6;
            }
            *(_DWORD *)(v8 + 20) = v33 + 1;
            result = v74[0];
            v74[0] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)result -= 2;
            }
            goto LABEL_61;
          }
        }
        *(_DWORD *)v6 = v31;
        goto LABEL_55;
      }
      v11 = *(uint64_t **)(v8 + 8);
      v12 = &v11[v9];
      while (1)
      {
        v13 = *v11;
        v14 = *v4;
        if (*v4
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, 8u, 0), (v14 = *v4) != 0))
        {
          v15 = *(_DWORD *)(v14 - 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = (uint64_t *)(v14 + 8 * v19);
        v21 = *v20;
        if (*v20)
        {
          v22 = 0;
          v23 = 1;
          while (v21 != v13)
          {
            if (v21 == -1)
              v22 = v20;
            v19 = (v19 + v23) & v15;
            v20 = (uint64_t *)(v14 + 8 * v19);
            v21 = *v20;
            ++v23;
            if (!*v20)
            {
              if (v22)
              {
                *v22 = 0;
                --*(_DWORD *)(*v4 - 16);
                v20 = v22;
              }
              goto LABEL_35;
            }
          }
          goto LABEL_48;
        }
LABEL_35:
        *v20 = v13;
        v24 = *v4;
        v25 = *v4 ? *(_DWORD *)(v24 - 12) + 1 : 1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v4;
        v27 = *v4 ? *(_DWORD *)(v26 - 12) : 0;
        v28 = (*(_DWORD *)(v26 - 16) + v27);
        v29 = *(unsigned int *)(v26 - 4);
        if (v29 > 0x400)
          break;
        if (3 * v29 <= 4 * v28)
        {
          if ((_DWORD)v29)
            goto LABEL_44;
          v30 = 8;
          goto LABEL_47;
        }
LABEL_48:
        if (++v11 == v12)
          goto LABEL_18;
      }
      if (v29 > 2 * v28)
        goto LABEL_48;
LABEL_44:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_47:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, v30, v20);
      goto LABEL_48;
    }
    if (!(_DWORD)v9)
      goto LABEL_20;
    v10 = *(WTF::StringImpl ***)(v8 + 8);
    while (*v10 != v6)
    {
      ++v10;
      if (!--v9)
        goto LABEL_20;
    }
LABEL_61:
    ++v5;
  }
  while (v5 != &_MergedGlobals_156);
  if ((byte_1ECE82738 & 1) == 0)
  {
    v73 = v3[62];
    qword_1ECE82798 = *(_QWORD *)(v73 + 48) + 1576;
    unk_1ECE827A0 = v73 + 2776;
    qword_1ECE827A8 = v73 + 2688;
    unk_1ECE827B0 = v73 + 2696;
    byte_1ECE82738 = 1;
  }
  v38 = &qword_1ECE82798;
  do
  {
    v39 = *(WTF::StringImpl **)*v38;
    v76 = v39;
    v40 = *((_DWORD *)v39 + 4);
    if ((v40 & 0x20) != 0)
    {
      if ((a2[3] & 1) == 0 || *((_BYTE *)a2 + 25) && (*((_BYTE *)v39 + 36) & 4) != 0)
        goto LABEL_126;
    }
    else if ((a2[3] & 2) == 0)
    {
      goto LABEL_126;
    }
    v41 = *a2;
    v42 = *(unsigned int *)(*a2 + 20);
    if (v42 > 0x13)
    {
      if (*v4 && *(_DWORD *)(*v4 - 12))
      {
LABEL_83:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a2 + 1, (uint64_t *)&v76, (uint64_t)v74);
        if (!v75)
          goto LABEL_126;
        v39 = v76;
        v41 = *a2;
        v40 = *((_DWORD *)v76 + 4);
LABEL_85:
        if ((v40 & 0x20) != 0)
        {
          v64 = *(_DWORD *)v39 + 2;
        }
        else
        {
          if ((v40 & 0x10) != 0)
          {
            *(_DWORD *)v39 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v39 = v74[0];
          }
          v64 = *(_DWORD *)v39;
          *(_DWORD *)v39 += 2;
          if (!v64)
          {
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
            goto LABEL_120;
          }
        }
        *(_DWORD *)v39 = v64;
LABEL_120:
        v65 = (uint64_t *)(v41 + 8);
        v74[0] = v39;
        v66 = *(unsigned int *)(v41 + 20);
        if ((_DWORD)v66 == *(_DWORD *)(v41 + 16))
        {
          v67 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)v74);
          v66 = *(unsigned int *)(v41 + 20);
          v68 = *(_QWORD *)(v41 + 8);
          v69 = *v67;
          *v67 = 0;
          *(_QWORD *)(v68 + 8 * v66) = v69;
        }
        else
        {
          v70 = *v65;
          v74[0] = 0;
          *(_QWORD *)(v70 + 8 * v66) = v39;
        }
        *(_DWORD *)(v41 + 20) = v66 + 1;
        result = v74[0];
        v74[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_126;
      }
      v44 = *(uint64_t **)(v41 + 8);
      v45 = &v44[v42];
      while (1)
      {
        v46 = *v44;
        v47 = *v4;
        if (*v4
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, 8u, 0), (v47 = *v4) != 0))
        {
          v48 = *(_DWORD *)(v47 - 8);
        }
        else
        {
          v48 = 0;
        }
        v49 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
        v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
        v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
        v52 = v48 & ((v51 >> 31) ^ v51);
        v53 = (uint64_t *)(v47 + 8 * v52);
        v54 = *v53;
        if (*v53)
        {
          v55 = 0;
          v56 = 1;
          while (v54 != v46)
          {
            if (v54 == -1)
              v55 = v53;
            v52 = (v52 + v56) & v48;
            v53 = (uint64_t *)(v47 + 8 * v52);
            v54 = *v53;
            ++v56;
            if (!*v53)
            {
              if (v55)
              {
                *v55 = 0;
                --*(_DWORD *)(*v4 - 16);
                v53 = v55;
              }
              goto LABEL_100;
            }
          }
          goto LABEL_113;
        }
LABEL_100:
        *v53 = v46;
        v57 = *v4;
        v58 = *v4 ? *(_DWORD *)(v57 - 12) + 1 : 1;
        *(_DWORD *)(v57 - 12) = v58;
        v59 = *v4;
        v60 = *v4 ? *(_DWORD *)(v59 - 12) : 0;
        v61 = (*(_DWORD *)(v59 - 16) + v60);
        v62 = *(unsigned int *)(v59 - 4);
        if (v62 > 0x400)
          break;
        if (3 * v62 <= 4 * v61)
        {
          if ((_DWORD)v62)
            goto LABEL_109;
          v63 = 8;
          goto LABEL_112;
        }
LABEL_113:
        if (++v44 == v45)
          goto LABEL_83;
      }
      if (v62 > 2 * v61)
        goto LABEL_113;
LABEL_109:
      v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
LABEL_112:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, v63, v53);
      goto LABEL_113;
    }
    if (!(_DWORD)v42)
      goto LABEL_85;
    v43 = *(WTF::StringImpl ***)(v41 + 8);
    while (*v43 != v39)
    {
      ++v43;
      if (!--v42)
        goto LABEL_85;
    }
LABEL_126:
    ++v38;
  }
  while (v38 != &qword_1ECE827B8);
  return result;
}

WTF::StringImpl *WebCore::addCrossOriginOwnPropertyNames<(WebCore::CrossOriginObject)1>(WTF::StringImpl *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73[2];
  char v74;
  WTF::StringImpl *v75;

  v3 = (_QWORD *)(*((_QWORD *)result + 7) + 41456);
  if ((byte_1ECE8272C & 1) == 0)
  {
    v71 = *(_QWORD *)(*((_QWORD *)result + 7) + 41952);
    qword_1ECE82788 = *v3 + 20136;
    unk_1ECE82790 = v71 + 2184;
    byte_1ECE8272C = 1;
  }
  v4 = a2 + 1;
  v5 = &qword_1ECE82788;
  do
  {
    v6 = *(WTF::StringImpl **)*v5;
    v75 = v6;
    v7 = *((_DWORD *)v6 + 4);
    if ((v7 & 0x20) != 0)
    {
      if ((a2[3] & 1) == 0 || *((_BYTE *)a2 + 25) && (*((_BYTE *)v6 + 36) & 4) != 0)
        goto LABEL_61;
    }
    else if ((a2[3] & 2) == 0)
    {
      goto LABEL_61;
    }
    v8 = *a2;
    v9 = *(unsigned int *)(*a2 + 20);
    if (v9 > 0x13)
    {
      if (*v4 && *(_DWORD *)(*v4 - 12))
      {
LABEL_18:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a2 + 1, (uint64_t *)&v75, (uint64_t)v73);
        if (!v74)
          goto LABEL_61;
        v6 = v75;
        v8 = *a2;
        v7 = *((_DWORD *)v75 + 4);
LABEL_20:
        if ((v7 & 0x20) != 0)
        {
          v31 = *(_DWORD *)v6 + 2;
        }
        else
        {
          if ((v7 & 0x10) != 0)
          {
            *(_DWORD *)v6 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v6 = v73[0];
          }
          v31 = *(_DWORD *)v6;
          *(_DWORD *)v6 += 2;
          if (!v31)
          {
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
LABEL_55:
            v32 = (uint64_t *)(v8 + 8);
            v73[0] = v6;
            v33 = *(unsigned int *)(v8 + 20);
            if ((_DWORD)v33 == *(_DWORD *)(v8 + 16))
            {
              v34 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)v73);
              v33 = *(unsigned int *)(v8 + 20);
              v35 = *(_QWORD *)(v8 + 8);
              v36 = *v34;
              *v34 = 0;
              *(_QWORD *)(v35 + 8 * v33) = v36;
            }
            else
            {
              v37 = *v32;
              v73[0] = 0;
              *(_QWORD *)(v37 + 8 * v33) = v6;
            }
            *(_DWORD *)(v8 + 20) = v33 + 1;
            result = v73[0];
            v73[0] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)result -= 2;
            }
            goto LABEL_61;
          }
        }
        *(_DWORD *)v6 = v31;
        goto LABEL_55;
      }
      v11 = *(uint64_t **)(v8 + 8);
      v12 = &v11[v9];
      while (1)
      {
        v13 = *v11;
        v14 = *v4;
        if (*v4
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, 8u, 0), (v14 = *v4) != 0))
        {
          v15 = *(_DWORD *)(v14 - 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = (uint64_t *)(v14 + 8 * v19);
        v21 = *v20;
        if (*v20)
        {
          v22 = 0;
          v23 = 1;
          while (v21 != v13)
          {
            if (v21 == -1)
              v22 = v20;
            v19 = (v19 + v23) & v15;
            v20 = (uint64_t *)(v14 + 8 * v19);
            v21 = *v20;
            ++v23;
            if (!*v20)
            {
              if (v22)
              {
                *v22 = 0;
                --*(_DWORD *)(*v4 - 16);
                v20 = v22;
              }
              goto LABEL_35;
            }
          }
          goto LABEL_48;
        }
LABEL_35:
        *v20 = v13;
        v24 = *v4;
        v25 = *v4 ? *(_DWORD *)(v24 - 12) + 1 : 1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v4;
        v27 = *v4 ? *(_DWORD *)(v26 - 12) : 0;
        v28 = (*(_DWORD *)(v26 - 16) + v27);
        v29 = *(unsigned int *)(v26 - 4);
        if (v29 > 0x400)
          break;
        if (3 * v29 <= 4 * v28)
        {
          if ((_DWORD)v29)
            goto LABEL_44;
          v30 = 8;
          goto LABEL_47;
        }
LABEL_48:
        if (++v11 == v12)
          goto LABEL_18;
      }
      if (v29 > 2 * v28)
        goto LABEL_48;
LABEL_44:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_47:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, v30, v20);
      goto LABEL_48;
    }
    if (!(_DWORD)v9)
      goto LABEL_20;
    v10 = *(WTF::StringImpl ***)(v8 + 8);
    while (*v10 != v6)
    {
      ++v10;
      if (!--v9)
        goto LABEL_20;
    }
LABEL_61:
    ++v5;
  }
  while (v5 != &qword_1ECE82798);
  if ((byte_1ECE82740 & 1) == 0)
  {
    v72 = v3[62];
    qword_1ECE827B8 = *(_QWORD *)(v72 + 48) + 1576;
    unk_1ECE827C0 = v72 + 2776;
    qword_1ECE827C8 = v72 + 2688;
    unk_1ECE827D0 = v72 + 2696;
    byte_1ECE82740 = 1;
  }
  v38 = (__int16 *)&qword_1ECE827B8;
  do
  {
    v39 = **(WTF::StringImpl ***)v38;
    v75 = v39;
    v40 = *((_DWORD *)v39 + 4);
    if ((v40 & 0x20) != 0)
    {
      if ((a2[3] & 1) == 0 || *((_BYTE *)a2 + 25) && (*((_BYTE *)v39 + 36) & 4) != 0)
        goto LABEL_126;
    }
    else if ((a2[3] & 2) == 0)
    {
      goto LABEL_126;
    }
    v41 = *a2;
    v42 = *(unsigned int *)(*a2 + 20);
    if (v42 > 0x13)
    {
      if (*v4 && *(_DWORD *)(*v4 - 12))
      {
LABEL_83:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a2 + 1, (uint64_t *)&v75, (uint64_t)v73);
        if (!v74)
          goto LABEL_126;
        v39 = v75;
        v41 = *a2;
        v40 = *((_DWORD *)v75 + 4);
LABEL_85:
        if ((v40 & 0x20) != 0)
        {
          v64 = *(_DWORD *)v39 + 2;
        }
        else
        {
          if ((v40 & 0x10) != 0)
          {
            *(_DWORD *)v39 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v39 = v73[0];
          }
          v64 = *(_DWORD *)v39;
          *(_DWORD *)v39 += 2;
          if (!v64)
          {
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
            goto LABEL_120;
          }
        }
        *(_DWORD *)v39 = v64;
LABEL_120:
        v65 = (uint64_t *)(v41 + 8);
        v73[0] = v39;
        v66 = *(unsigned int *)(v41 + 20);
        if ((_DWORD)v66 == *(_DWORD *)(v41 + 16))
        {
          v67 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)v73);
          v66 = *(unsigned int *)(v41 + 20);
          v68 = *(_QWORD *)(v41 + 8);
          v69 = *v67;
          *v67 = 0;
          *(_QWORD *)(v68 + 8 * v66) = v69;
        }
        else
        {
          v70 = *v65;
          v73[0] = 0;
          *(_QWORD *)(v70 + 8 * v66) = v39;
        }
        *(_DWORD *)(v41 + 20) = v66 + 1;
        result = v73[0];
        v73[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_126;
      }
      v44 = *(uint64_t **)(v41 + 8);
      v45 = &v44[v42];
      while (1)
      {
        v46 = *v44;
        v47 = *v4;
        if (*v4
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, 8u, 0), (v47 = *v4) != 0))
        {
          v48 = *(_DWORD *)(v47 - 8);
        }
        else
        {
          v48 = 0;
        }
        v49 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
        v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
        v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
        v52 = v48 & ((v51 >> 31) ^ v51);
        v53 = (uint64_t *)(v47 + 8 * v52);
        v54 = *v53;
        if (*v53)
        {
          v55 = 0;
          v56 = 1;
          while (v54 != v46)
          {
            if (v54 == -1)
              v55 = v53;
            v52 = (v52 + v56) & v48;
            v53 = (uint64_t *)(v47 + 8 * v52);
            v54 = *v53;
            ++v56;
            if (!*v53)
            {
              if (v55)
              {
                *v55 = 0;
                --*(_DWORD *)(*v4 - 16);
                v53 = v55;
              }
              goto LABEL_100;
            }
          }
          goto LABEL_113;
        }
LABEL_100:
        *v53 = v46;
        v57 = *v4;
        v58 = *v4 ? *(_DWORD *)(v57 - 12) + 1 : 1;
        *(_DWORD *)(v57 - 12) = v58;
        v59 = *v4;
        v60 = *v4 ? *(_DWORD *)(v59 - 12) : 0;
        v61 = (*(_DWORD *)(v59 - 16) + v60);
        v62 = *(unsigned int *)(v59 - 4);
        if (v62 > 0x400)
          break;
        if (3 * v62 <= 4 * v61)
        {
          if ((_DWORD)v62)
            goto LABEL_109;
          v63 = 8;
          goto LABEL_112;
        }
LABEL_113:
        if (++v44 == v45)
          goto LABEL_83;
      }
      if (v62 > 2 * v61)
        goto LABEL_113;
LABEL_109:
      v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
LABEL_112:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2 + 1, v63, v53);
      goto LABEL_113;
    }
    if (!(_DWORD)v42)
      goto LABEL_85;
    v43 = *(WTF::StringImpl ***)(v41 + 8);
    while (*v43 != v39)
    {
      ++v43;
      if (!--v42)
        goto LABEL_85;
    }
LABEL_126:
    v38 += 4;
  }
  while (v38 != &word_1ECE827D8);
  return result;
}

uint64_t WebCore::jsDOMWindow_webkit(uint64_t a1, JSC::JSCell *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v8;
  unint64_t v9;

  v3 = WebCore::toJSDOMGlobalObject<WebCore::JSDOMWindow>(a2);
  v4 = *(WTF::StringImpl **)(v3 + 3408);
  if (*((_BYTE *)v4 + 56))
    return 10;
  v5 = v3;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v4, 1))
    return 10;
  v6 = *(_QWORD *)(v5 + 3408);
  if (!v6 || *(_BYTE *)(v6 + 56) != 0)
    return 10;
  ++*(_DWORD *)(v6 + 24);
  v8 = (WTF *)WebCore::LocalDOMWindow::webkitNamespace((WebCore::LocalDOMWindow *)v6);
  if (v8)
    v9 = WebCore::wrap<WebCore::WebKitNamespace>(a1, v5, v8);
  else
    v9 = 2;
  if (*(_DWORD *)(v6 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  else
    --*(_DWORD *)(v6 + 24);
  return v9;
}

uint64_t WebCore::toJSDOMGlobalObject<WebCore::JSDOMWindow>(JSC::JSCell *a1)
{
  uint64_t result;
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  _DWORD *v7;
  uint64_t v8;
  _BOOL4 v9;
  char **v10;
  BOOL v11;

  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return 0;
  result = JSC::JSCell::getObject(a1);
  if (result)
  {
    if (*(_BYTE *)(result + 5) == 32)
    {
      v7 = *(_DWORD **)(result + 16);
      v8 = *(unsigned int *)(16 * (*v7 & 0xFFFFFFFE) + 0x4C);
      v9 = *(_DWORD *)(16 * (*v7 & 0xFFFFFFFE) + 0x4C) != 0;
      v10 = (char **)(16 * v8);
      if ((_DWORD)v8)
        v11 = v10 == &WebCore::JSDOMWindow::s_info;
      else
        v11 = 1;
      if (!v11)
      {
        do
        {
          v10 = (char **)v10[2];
          v9 = v10 != 0;
        }
        while (v10 != &WebCore::JSDOMWindow::s_info && v10 != 0);
      }
      if (v9)
        return *(_QWORD *)(result + 16);
      else
        return 0;
    }
    else
    {
      v2 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
      v3 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
      v4 = (char **)(16 * v2);
      if ((_DWORD)v2)
        v5 = v4 == &WebCore::JSDOMWindow::s_info;
      else
        v5 = 1;
      if (!v5)
      {
        do
        {
          v4 = (char **)v4[2];
          v3 = v4 != 0;
        }
        while (v4 != &WebCore::JSDOMWindow::s_info && v4 != 0);
      }
      if (!v3)
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::jsDOMWindowGetOwnPropertySlotRestrictedAccess(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, WTF::StringImpl **a6)
{
  JSC::VM *v10;
  _QWORD *v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore **v16;
  WTF::StringImpl *v17;
  WebCore *v18;
  WTF::StringImpl *v19;
  WebCore *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  char **v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  char **v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  JSValue v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  v10 = *(JSC::VM **)(a3 + 56);
  v11 = (_QWORD *)*((_QWORD *)v10 + 5182);
  if ((unsigned int *)v11[2421] == a4
    || (unsigned int *)v11[2491] == a4
    || (unsigned int *)v11[2401] == a4
    || (unsigned int *)v11[2623] == a4)
  {
    if (!a4
      || (v29 = a4[4], (v29 & 0x20) != 0)
      || (v30 = (v29 >> 8) & 0x7FF, v31 = WebCore::JSDOMWindowTableIndex[2 * v30], v31 == 0xFFFF))
    {
LABEL_43:
      v32 = 0;
    }
    else
    {
      while (1)
      {
        v32 = &(&WebCore::JSDOMWindowTableValues)[5 * (__int16)v31];
        v33 = v32[1];
        if (v33)
        {
          if ((MEMORY[0x19AEA53F4](a4, *v32, v33 - 1) & 1) != 0)
            break;
        }
        LODWORD(v30) = (__int16)WebCore::JSDOMWindowTableIndex[2 * (int)v30 + 1];
        if ((_DWORD)v30 == -1)
          goto LABEL_43;
        LOWORD(v31) = WebCore::JSDOMWindowTableIndex[2 * (int)v30];
      }
    }
    *(_QWORD *)a5 = WebCore::JSDOMGlobalObject::createCrossOriginFunction(a1, a3, (WTF::StringImpl *)a4, (uint64_t)v32[3]);
    goto LABEL_45;
  }
  if ((unsigned int *)v11[2789] == a4
    || (unsigned int *)v11[2675] == a4
    || (unsigned int *)v11[2549] == a4
    || (unsigned int *)v11[2429] == a4
    || (unsigned int *)v11[2493] == a4
    || *(unsigned int **)(*((_QWORD *)v10 + 5244) + 1768) == a4
    || (unsigned int *)v11[2735] == a4
    || (unsigned int *)v11[2613] == a4
    || (unsigned int *)v11[2619] == a4)
  {
    if (!a4
      || (v34 = a4[4], (v34 & 0x20) != 0)
      || (v35 = (v34 >> 8) & 0x7FF, v36 = WebCore::JSDOMWindowTableIndex[2 * v35], v36 == 0xFFFF))
    {
LABEL_54:
      v37 = 0;
    }
    else
    {
      while (1)
      {
        v37 = &(&WebCore::JSDOMWindowTableValues)[5 * (__int16)v36];
        v38 = v37[1];
        if (v38)
        {
          if ((MEMORY[0x19AEA53F4](a4, *v37, v38 - 1) & 1) != 0)
            break;
        }
        LODWORD(v35) = (__int16)WebCore::JSDOMWindowTableIndex[2 * (int)v35 + 1];
        if ((_DWORD)v35 == -1)
          goto LABEL_54;
        LOWORD(v36) = WebCore::JSDOMWindowTableIndex[2 * (int)v35];
      }
    }
    if ((unsigned int *)v11[2549] == a4)
      v39 = (uint64_t)v37[4];
    else
      v39 = 0;
    *(_QWORD *)a5 = WebCore::JSDOMGlobalObject::createCrossOriginGetterSetter(a1, a3, (uint64_t)a4, (JSC::JSGlobalObject *)v37[3], v39);
    *(_DWORD *)(a5 + 16) = 20;
    *(_QWORD *)(a5 + 32) = a1;
    *(_BYTE *)(a5 + 49) = 2;
    return 1;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (!v13)
  {
LABEL_63:
    v42 = (_QWORD *)*((_QWORD *)v10 + 5244);
    if (*(unsigned int **)(v42[6] + 1576) != a4
      && (unsigned int *)v42[347] != a4
      && (unsigned int *)v42[336] != a4
      && (unsigned int *)v42[337] != a4)
    {
      v43 = *(_QWORD *)(a3 + 56);
      v44 = *(_QWORD *)(v43 + 16);
      if (v44 && *(_QWORD *)(v43 + 24) == v44)
      {
        v45 = 10;
      }
      else
      {
        WebCore::DOMException::create(0xEu, a6, (uint64_t *)&v50);
        v45 = WebCore::wrap<WebCore::DOMException>(a3, a3, v50);
        v46 = v50;
        v50 = 0;
        if (v46)
        {
          if (*((_DWORD *)v46 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
          else
            --*((_DWORD *)v46 + 2);
        }
        JSC::addErrorInfo();
      }
      v47.super.isa = (Class)v45;
      JSC::VM::throwException(v10, (JSC::JSGlobalObject *)a3, v47);
      result = 0;
      *(_QWORD *)a5 = 10;
      *(_DWORD *)(a5 + 16) = 14;
      *(_QWORD *)(a5 + 32) = 0;
      *(_BYTE *)(a5 + 49) = 1;
      return result;
    }
    *(_QWORD *)a5 = 10;
LABEL_45:
    *(_DWORD *)(a5 + 16) = 6;
    *(_QWORD *)(a5 + 32) = a1;
    result = 1;
    *(_BYTE *)(a5 + 49) = 1;
    return result;
  }
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = (WebCore **)(v13 + 48);
  if (a4)
  {
    *a4 += 2;
    v17 = (WTF::StringImpl *)a4;
  }
  else
  {
    v17 = 0;
  }
  v50 = v17;
  v18 = WebCore::FrameTree::scopedChildBySpecifiedName(v16, (const WTF::AtomString *)&v50);
  if (v18)
  {
    if (*((_BYTE *)v18 + 144))
      v20 = 0;
    else
      v20 = v18;
  }
  else
  {
    v20 = 0;
  }
  v21 = v50;
  v50 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v19);
      if (v20)
        goto LABEL_27;
      goto LABEL_61;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!v20)
  {
    do
    {
LABEL_61:
      v40 = __ldaxr(v14);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v14));
    if (!v41)
    {
      atomic_store(1u, v14);
      v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v48 = off_1E31FE290;
      *((_QWORD *)v48 + 1) = v14;
      v50 = v48;
      WTF::ensureOnMainThread();
      v49 = v50;
      v50 = 0;
      if (v49)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
    }
    goto LABEL_63;
  }
LABEL_27:
  v22 = *(_QWORD *)(*((_QWORD *)v20 + 37) + 696);
  if (!v22
    || (v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 104))(v22)) == 0
    || (v24 = (uint64_t)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(v23 + 112), *(WebCore::DOMWrapperWorld **)(a3 + 3320))) == 0)
  {
    v24 = 2;
  }
  *(_QWORD *)a5 = v24;
  *(_DWORD *)(a5 + 16) = 6;
  *(_QWORD *)(a5 + 32) = a1;
  *(_BYTE *)(a5 + 49) = 1;
  do
    v25 = __ldaxr(v14);
  while (__stlxr(v25 - 1, v14));
  result = 1;
  if (v25 == 1)
  {
    atomic_store(1u, v14);
    v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v27 = off_1E31FE290;
    *((_QWORD *)v27 + 1) = v14;
    v50 = v27;
    WTF::ensureOnMainThread();
    v28 = v50;
    v50 = 0;
    if (v28)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
    return 1;
  }
  return result;
}

uint64_t WebCore::handleCommonCrossOriginProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;

  v4 = *(_QWORD **)(a2 + 41952);
  if (*(_QWORD *)(v4[6] + 1576) != a3 && v4[347] != a3 && v4[336] != a3 && v4[337] != a3)
    return 0;
  *(_QWORD *)a4 = 10;
  *(_DWORD *)(a4 + 16) = 6;
  *(_QWORD *)(a4 + 32) = a1;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSDOMWindow::getOwnPropertySlot(uint64_t a1, uint64_t a2, WTF *this, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v11;
  _WORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t OwnPropertySlotRestrictedAccess;
  WTF::StringImpl *v33;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  const WTF::StringImpl **v43;
  const WTF::StringImpl *v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF **v49;
  const WTF::StringImpl **v50;
  const WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  void *v58;
  void *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t IdentifierInternal;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t *v72;
  unsigned int *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  _QWORD v92[2];
  char v93;
  WTF::StringImpl *v94[2];
  char v95;
  char v96;
  char *v97;

  v7 = a4;
  v8 = this;
  if (!this)
    goto LABEL_9;
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 0x20) != 0)
    goto LABEL_9;
  v12 = (_WORD *)*((_QWORD *)this + 1);
  v13 = *((unsigned int *)this + 1);
  if ((v11 & 4) != 0)
    goto LABEL_141;
  if ((_DWORD)v13)
  {
    v14 = (unsigned __int16)*v12 - 48;
    if (v14 > 9 || v13 >= 2 && *v12 == 48)
    {
LABEL_6:
      v15 = 0;
      v16 = 0;
      LODWORD(v13) = 0;
    }
    else
    {
      v35 = v12 + 1;
      v36 = v13 - 1;
      while (v36)
      {
        if (v14 <= 0x19999999)
        {
          v37 = *v35 - 48;
          if (v37 <= 9)
          {
            v38 = __CFADD__(v37, 10 * v14);
            v14 = v37 + 10 * v14;
            ++v35;
            --v36;
            if (!v38)
              continue;
          }
        }
        goto LABEL_6;
      }
      v60 = v14 == -1;
      LODWORD(v13) = v14 & 0xFFFFFF00;
      v16 = v14;
      v15 = 0x100000000;
      if (v60)
      {
        v15 = 0;
        v16 = 0;
        LODWORD(v13) = 0;
      }
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  this = (WTF *)(v13 | v16);
  while ((v15 & 0x100000000) == 0)
  {
LABEL_9:
    v17 = *(_QWORD *)(a1 + 3408);
    if (*(_BYTE *)(v17 + 56))
    {
      if ((WTF::equal(v8, (const WTF::StringImpl *)"$vm", (const unsigned __int8 *)this) & 1) != 0)
        return 1;
      v17 = *(_QWORD *)(a1 + 3408);
      v77 = *(unsigned __int8 *)(v17 + 56);
      v91 = 0;
      if (v77)
      {
        WebCore::remoteFrameAccessError((WebCore *)v94, *(JSC::JSGlobalObject **)(a2 + 3408));
        v91 = v94[0];
        goto LABEL_131;
      }
    }
    else
    {
      v91 = 0;
    }
    v18 = *(_QWORD *)(v17 + 72);
    if (!v18)
      goto LABEL_127;
    v19 = *(_QWORD *)(v18 + 8);
    if (!v19)
      goto LABEL_127;
    if (*(_BYTE *)(v19 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1956ADD9CLL);
    }
    v20 = v19 - 288;
    v21 = *(_QWORD *)(v19 + 2344);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
        v20 = v22;
    }
    v23 = *(_QWORD *)(a2 + 3408);
    if (*(_BYTE *)(v23 + 56))
    {
      __break(0xC471u);
      JUMPOUT(0x1956ADDBCLL);
    }
    v24 = *(_QWORD *)(v23 + 72);
    if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
    {
      if (*(_BYTE *)(v25 + 178))
      {
        this = (WTF *)"match_constness_t<Source, Target> *WTF::downcast(Source *) [Target = WebCore::Document, Source = W"
                      "ebCore::ScriptExecutionContext]";
        a4 = 2;
        __break(0xC471u);
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      v5 = v25 - 288;
    }
    else
    {
      v5 = 0;
    }
    v26 = *(uint64_t **)(v5 + 200);
    if (v26)
      goto LABEL_23;
    if (*(_BYTE *)(v5 + 280))
    {
      v61 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v61 = 1;
      IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      v63 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v63 != -1)
      {
        v94[0] = (WTF::StringImpl *)&v97;
        v92[0] = v94;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      v25 = WebCore::Process::globalIdentifier;
      if ((WebCore::Process::globalIdentifier & 1) == 0)
        goto LABEL_110;
      v64 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(v61 + 8) = IdentifierInternal;
      *(_QWORD *)(v61 + 16) = v64;
      v6 = 1;
      *(_DWORD *)(v61 + 32) = 1;
      v65 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v65 += 2;
      *(_QWORD *)(v61 + 40) = v65;
      *(_QWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 54) = 0;
      *(_WORD *)(v61 + 62) = 1;
      v26 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v26 = 1;
      v26[1] = v61;
      v66 = *(uint64_t **)(v5 + 200);
      *(_QWORD *)(v5 + 200) = v26;
      if (!v66)
        goto LABEL_23;
      if (*(_DWORD *)v66 != 1)
      {
        --*(_DWORD *)v66;
LABEL_23:
        v27 = (*(_DWORD *)v26)++;
        v5 = v26[1];
        if (v27)
        {
          *(_DWORD *)v26 = v27;
        }
        else
        {
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v26 + 1, (WTF::StringImpl *)a2);
          WTF::fastFree((WTF *)v26, v58);
        }
        goto LABEL_25;
      }
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v66 + 1, (WTF::StringImpl *)a2);
      WTF::fastFree((WTF *)v66, v74);
      v26 = *(uint64_t **)(v5 + 200);
      if (v26)
        goto LABEL_23;
    }
    v5 = 0;
LABEL_25:
    v28 = *(uint64_t **)(v20 + 200);
    if (!v28)
    {
      if (!*(_BYTE *)(v20 + 280))
        goto LABEL_108;
      v67 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v67 = 1;
      v68 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      v69 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v69 != -1)
      {
        v94[0] = (WTF::StringImpl *)&v97;
        v92[0] = v94;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      v25 = WebCore::Process::globalIdentifier;
      if ((WebCore::Process::globalIdentifier & 1) == 0)
        goto LABEL_110;
      v70 = WebCore::Process::globalIdentifier;
      *(_QWORD *)(v67 + 8) = v68;
      *(_QWORD *)(v67 + 16) = v70;
      *(_DWORD *)(v67 + 32) = 1;
      v71 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v71 += 2;
      *(_QWORD *)(v67 + 40) = v71;
      *(_QWORD *)(v67 + 48) = 0;
      *(_QWORD *)(v67 + 54) = 0;
      *(_WORD *)(v67 + 62) = 1;
      v28 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v28 = 1;
      v28[1] = v67;
      v72 = *(uint64_t **)(v20 + 200);
      *(_QWORD *)(v20 + 200) = v28;
      if (v72)
      {
        if (*(_DWORD *)v72 == 1)
        {
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v72 + 1, (WTF::StringImpl *)a2);
          WTF::fastFree((WTF *)v72, v75);
          v28 = *(uint64_t **)(v20 + 200);
          if (!v28)
          {
LABEL_108:
            v6 = 0;
            goto LABEL_28;
          }
        }
        else
        {
          --*(_DWORD *)v72;
        }
      }
    }
    v29 = (*(_DWORD *)v28)++;
    v6 = v28[1];
    if (v29)
    {
      *(_DWORD *)v28 = v29;
    }
    else
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v28 + 1, (WTF::StringImpl *)a2);
      WTF::fastFree((WTF *)v28, v59);
    }
LABEL_28:
    if (v5 == v6 || *(_BYTE *)(v5 + 56))
      goto LABEL_30;
    v25 = *(unsigned int *)(v5 + 32);
    if ((_DWORD)v25 != 1 && *(_DWORD *)(v6 + 32) != 1)
    {
      if ((_DWORD)v25 != -1)
      {
        v94[0] = (WTF::StringImpl *)v92;
        v90 = v5 + 8;
        v40 = ((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v25])(v94);
        v41 = *(unsigned int *)(v6 + 32);
        if ((_DWORD)v41 != -1)
        {
          v42 = (WTF **)v40;
          v94[0] = (WTF::StringImpl *)v92;
          v89 = v6 + 8;
          v43 = (const WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v41])(v94);
          if (!WTF::equal(*v42, *v43, v44))
            goto LABEL_127;
          if (*(unsigned __int8 *)(v5 + 57) | *(unsigned __int8 *)(v6 + 57))
          {
            if (*(_BYTE *)(v5 + 57)
              && *(_BYTE *)(v6 + 57)
              && (WTF::equal(*(WTF **)(v5 + 40), *(const WTF::StringImpl **)(v6 + 40), v45) & 1) != 0)
            {
              goto LABEL_79;
            }
            goto LABEL_127;
          }
          v46 = *(unsigned int *)(v5 + 32);
          if ((_DWORD)v46 != -1)
          {
            v94[0] = (WTF::StringImpl *)v92;
            v47 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v46])(v94, v90);
            v48 = *(unsigned int *)(v6 + 32);
            if ((_DWORD)v48 != -1)
            {
              v49 = (WTF **)v47;
              v94[0] = (WTF::StringImpl *)v92;
              v50 = (const WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v48])(v94, v89);
              if (!WTF::equal(*v49, *v50, v51))
                goto LABEL_127;
              v52 = *(unsigned int *)(v5 + 32);
              if ((_DWORD)v52 != -1)
              {
                v94[0] = (WTF::StringImpl *)v92;
                v53 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v52])(v94, v90);
                v54 = *(unsigned int *)(v6 + 32);
                if ((_DWORD)v54 != -1)
                {
                  v55 = v53;
                  v94[0] = (WTF::StringImpl *)v92;
                  v56 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v54])(v94, v89);
                  v57 = v56 & 0xFF0000;
                  if ((v55 & 0xFF0000) != 0 && v57)
                  {
                    if ((unsigned __int16)v55 != (unsigned __int16)v56)
                      goto LABEL_127;
                  }
                  else if (((v55 & 0xFF0000) != 0) != (v57 != 0))
                  {
                    goto LABEL_127;
                  }
LABEL_79:
                  if (*(_BYTE *)(v5 + 63) && *(unsigned __int8 *)(v5 + 59) | *(unsigned __int8 *)(v6 + 59))
                  {
LABEL_127:
                    v78 = *(WTF::StringImpl **)(a2 + 3408);
                    if (*((_BYTE *)v78 + 56))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1956AE030);
                    }
                    WebCore::LocalDOMWindow::crossDomainAccessErrorMessage((WTF::StringImpl *)v17, v78, 0, (char **)v94);
                    v80 = v94[0];
                    v94[0] = 0;
                    v81 = v91;
                    v91 = v80;
                    if (v81)
                    {
                      v82 = *(_DWORD *)v81 - 2;
                      if (*(_DWORD *)v81 != 2)
                        goto LABEL_130;
                      WTF::StringImpl::destroy(v81, v79);
                      v81 = v94[0];
                      v94[0] = 0;
                      if (v81)
                      {
                        v82 = *(_DWORD *)v81 - 2;
                        if (*(_DWORD *)v81 == 2)
                          WTF::StringImpl::destroy(v81, v83);
                        else
LABEL_130:
                          *(_DWORD *)v81 = v82;
                      }
                    }
LABEL_131:
                    OwnPropertySlotRestrictedAccess = WebCore::jsDOMWindowGetOwnPropertySlotRestrictedAccess(a1, *(_QWORD *)(a1 + 3408), a2, (unsigned int *)v8, v7, &v91);
LABEL_35:
                    v33 = v91;
                    v91 = 0;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                        WTF::StringImpl::destroy(v33, v31);
                      else
                        *(_DWORD *)v33 -= 2;
                    }
                    return OwnPropertySlotRestrictedAccess;
                  }
LABEL_30:
                  v30 = *(_QWORD *)(a1 + 3400);
                  if (!v30)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 3408) + 104))(*(_QWORD *)(a1 + 3408));
                    WTF::fastMalloc((WTF *)0x18);
                    v30 = JSC::WatchpointSet::WatchpointSet();
                    v73 = *(unsigned int **)(a1 + 3400);
                    *(_QWORD *)(a1 + 3400) = v30;
                    if (v73)
                    {
                      WTF::ThreadSafeRefCounted<JSC::WatchpointSet,(WTF::DestructionThread)0>::deref(v73);
                      v30 = *(_QWORD *)(a1 + 3400);
                    }
                  }
                  if (*(_BYTE *)(v30 + 4) != 2)
                    *(_QWORD *)(v7 + 40) = v30;
                  if ((JSC::JSGlobalObject::getOwnPropertySlot() & 1) != 0)
                  {
                    OwnPropertySlotRestrictedAccess = 1;
                  }
                  else if (*(_BYTE *)(v7 + 50) == 3 && *(_BYTE *)(v7 + 52))
                  {
                    OwnPropertySlotRestrictedAccess = 0;
                  }
                  else
                  {
                    OwnPropertySlotRestrictedAccess = 0;
                    v39 = *(_QWORD *)(a1 + 3408);
                    if (v39 && !*(_BYTE *)(v39 + 56))
                    {
                      ++*(_DWORD *)(v39 + 24);
                      if (*(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41456) + 22072) == v8
                        && WebCore::LocalDOMWindow::shouldHaveWebKitNamespaceForWorld((WebCore::LocalDOMWindow *)v39, *(WebCore::DOMWrapperWorld **)(a1 + 3320)))
                      {
                        *(_QWORD *)v7 = WebCore::jsDOMWindow_webkit;
                        *(_QWORD *)(v7 + 8) = 0;
                        *(_DWORD *)(v7 + 16) = 10;
                        *(_QWORD *)(v7 + 32) = a1;
                        *(_WORD *)(v7 + 48) = 769;
                        OwnPropertySlotRestrictedAccess = 1;
                      }
                      else
                      {
                        OwnPropertySlotRestrictedAccess = 0;
                      }
                      if (*(_DWORD *)(v39 + 24) == 1)
                        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 72))(v39);
                      else
                        --*(_DWORD *)(v39 + 24);
                    }
                  }
                  goto LABEL_35;
                }
              }
            }
          }
        }
      }
      goto LABEL_140;
    }
LABEL_111:
    if ((_DWORD)v25 != -1)
    {
      v92[0] = &v97;
      ((void (*)(WTF::StringImpl **__return_ptr, _QWORD *, uint64_t, WTF *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v25])(v94, v92, v5 + 8, this, a4);
      v76 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v76 != -1)
      {
        v97 = &v96;
        ((void (*)(_QWORD *__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v76])(v92, &v97, v6 + 8);
        if (v95 && v93)
        {
          if (v94[0] != (WTF::StringImpl *)v92[0] || v94[1] != (WTF::StringImpl *)v92[1])
            goto LABEL_127;
        }
        else if ((v95 != 0) != (v93 != 0))
        {
          goto LABEL_127;
        }
        goto LABEL_30;
      }
    }
LABEL_140:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_141:
    if (!(_DWORD)v13)
    {
      v15 = 0;
      goto LABEL_144;
    }
    v84 = *(unsigned __int8 *)v12 - 48;
    if (v84 > 9 || v13 >= 2 && *(_BYTE *)v12 == 48)
    {
LABEL_143:
      v15 = 0;
      LODWORD(v13) = 0;
LABEL_144:
      v85 = 0;
      goto LABEL_145;
    }
    v86 = (unsigned __int8 *)v12 + 1;
    v87 = v13 - 1;
    while (v87)
    {
      if (v84 > 0x19999999)
        goto LABEL_143;
      v88 = *v86 - 48;
      if (v88 > 9)
        goto LABEL_143;
      v15 = 0;
      LODWORD(v13) = 0;
      v85 = 0;
      v38 = __CFADD__(v88, 10 * v84);
      v84 = v88 + 10 * v84;
      ++v86;
      --v87;
      if (v38)
        goto LABEL_145;
    }
    v15 = 0x100000000;
    if (v84 == -1)
    {
      v15 = 0;
      LODWORD(v13) = 0;
    }
    else
    {
      LODWORD(v13) = v84;
    }
    if (v84 == -1)
      v85 = 0;
    else
      v85 = v84 & 0xFFFFFF00;
LABEL_145:
    this = (WTF *)(v85 | v13);
  }
  return WebCore::JSDOMWindow::getOwnPropertySlotByIndex((WebCore::JSDOMWindow *)a1, (WebCore::DOMWrapperWorld **)a2, this, v7, a5);
}

uint64_t WebCore::JSDOMWindow::getOwnPropertySlotByIndex(WebCore::JSDOMWindow *this, WebCore::DOMWrapperWorld **a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  unsigned int v6;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::TreeScope *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v19;
  uint64_t v20;
  void *v21;
  WebCore::TreeScope *v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  WebCore *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  char v32;

  v6 = a3;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 426);
  v10 = (*(uint64_t (**)(WTF::StringImpl *, WebCore::DOMWrapperWorld **, JSC::JSGlobalObject *, uint64_t, JSC::PropertySlot *))(*(_QWORD *)v9 + 104))(v9, a2, a3, a4, a5);
  *(_BYTE *)(a4 + 48) = 0;
  if (!v10)
    goto LABEL_39;
  v13 = v10;
  if (*(_BYTE *)(v10 + 144))
  {
    v14 = *(_QWORD **)(v10 + 88);
    if (v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)(v13 + 88);
      do
      {
        ++v15;
        v16 = *(_QWORD *)(v16 + 72);
      }
      while (v16);
      if (v15 > v6)
      {
        if (v6)
        {
          v17 = v6 - 1;
          do
          {
            v14 = (_QWORD *)v14[9];
            v19 = v17-- != 0;
          }
          while (v14 && v19);
        }
        if (v14)
        {
          v20 = (*(uint64_t (**)(_QWORD *))(*v14 + 128))(v14);
          goto LABEL_34;
        }
      }
    }
LABEL_39:
    if (*((_BYTE *)v9 + 56))
    {
      WebCore::reportErrorAccessingRemoteFrame((WTF::StringImpl *)a2, 2);
    }
    else
    {
      result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v9, 2);
      if (!(_DWORD)result)
        return result;
      if (byte_1ECE8272A == 1)
      {
        if (byte_1ECE82729)
          return JSC::JSObject::getOwnPropertySlotByIndex();
      }
      else
      {
        v32 = WTF::linkedOnOrAfterSDKWithBehavior();
        byte_1ECE82729 = v32 ^ 1;
        byte_1ECE8272A = 1;
        if ((v32 & 1) == 0)
          return JSC::JSObject::getOwnPropertySlotByIndex();
      }
    }
    return 0;
  }
  if (WebCore::FrameTree::scopedChildCount((WebCore::FrameTree *)(v10 + 48), v11, v12) <= v6)
    goto LABEL_39;
  v23 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8);
  if (!v23 || *(_BYTE *)(v23 + 144) != 0)
    goto LABEL_39;
  v25 = *(_QWORD *)(v23 + 296);
  if (!v25)
    goto LABEL_39;
  v26 = *(_DWORD *)(v25 + 24);
  *(_DWORD *)(v25 + 24) = v26 + 2;
  v27 = *(WebCore **)(v13 + 88);
  if (v27)
  {
    v28 = 0;
    do
    {
      if (WebCore::inScope(v27, (WebCore::Frame *)(v25 + 96), v22))
      {
        if (v28 == v6)
          break;
        ++v28;
      }
      v27 = (WebCore *)*((_QWORD *)v27 + 9);
    }
    while (v27);
    v26 = *(_DWORD *)(v25 + 24) - 2;
  }
  if (v26)
  {
    *(_DWORD *)(v25 + 24) = v26;
  }
  else if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v25, v21);
  }
  if (!v27)
    goto LABEL_39;
  v20 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v27 + 128))(v27);
LABEL_34:
  if (!v20
    || (v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 104))(v20)) == 0
    || (v30 = (uint64_t)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(v29 + 112), a2[415])) == 0)
  {
    v30 = 2;
  }
  *(_QWORD *)a4 = v30;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSDOMWindow::put(uint64_t a1, WebCore::BindingSecurity *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  signed __int16 i;
  int v24;
  char **v25;
  char *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = 0;
  v35 = v9;
  if ((WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((JSC::JSGlobalObject **)this, *(JSC::JSGlobalObject **)(a1 + 3408), &v34, a4) & 1) == 0)
  {
    if (*(_QWORD *)(*((_QWORD *)v9 + 5182) + 20392) == a3)
    {
      v22 = ((unint64_t)*(unsigned int *)(a3 + 16) >> 8) & 0x7FF;
      for (i = WebCore::JSDOMWindowTableIndex[2 * v22]; ; i = WebCore::JSDOMWindowTableIndex[2 * v22])
      {
        v24 = i;
        v25 = &(&WebCore::JSDOMWindowTableValues)[5 * i];
        v26 = v25[1];
        if (v26)
        {
          if (MEMORY[0x19AEA53F4](a3, *v25, v26 - 1))
            break;
        }
        v22 = (__int16)WebCore::JSDOMWindowTableIndex[2 * (int)v22 + 1];
      }
      ((void (*)(WebCore::BindingSecurity *, _QWORD, uint64_t, uint64_t))(&WebCore::JSDOMWindowTableValues)[5 * v24 + 4])(this, *(_QWORD *)(a5 + 8), a4, a3);
      v15 = 1;
      goto LABEL_8;
    }
    WebCore::throwSecurityError(this, &v35, &v34);
    goto LABEL_24;
  }
  if (!a3)
    goto LABEL_7;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_7;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if (!(_DWORD)v12)
      goto LABEL_7;
    v13 = *v11 - 48;
    if (v13 > 9 || v12 >= 2 && *v11 == 48)
      goto LABEL_7;
    v27 = v11 + 1;
    v28 = v12 - 1;
    while (v28)
    {
      if (v13 <= 0x19999999)
      {
        v29 = *v27 - 48;
        if (v29 <= 9)
        {
          v21 = __CFADD__(v29, 10 * v13);
          v13 = v29 + 10 * v13;
          ++v27;
          --v28;
          if (!v21)
            continue;
        }
      }
      goto LABEL_7;
    }
  }
  else
  {
    if (!(_DWORD)v12)
      goto LABEL_7;
    v13 = *(unsigned __int16 *)v11 - 48;
    if (v13 > 9 || v12 >= 2 && *(_WORD *)v11 == 48)
      goto LABEL_7;
    v18 = (unsigned __int16 *)(v11 + 2);
    v19 = v12 - 1;
    while (v19)
    {
      if (v13 <= 0x19999999)
      {
        v20 = *v18 - 48;
        if (v20 <= 9)
        {
          v21 = __CFADD__(v20, 10 * v13);
          v13 = v20 + 10 * v13;
          ++v18;
          --v19;
          if (!v21)
            continue;
        }
      }
      goto LABEL_7;
    }
  }
  if (v13 == -1)
  {
LABEL_7:
    v15 = JSC::JSGlobalObject::put();
    goto LABEL_8;
  }
  if (byte_1ECE8272A == 1)
  {
    if (!byte_1ECE82729)
      goto LABEL_44;
    goto LABEL_7;
  }
  v32 = WTF::linkedOnOrAfterSDKWithBehavior();
  byte_1ECE82729 = v32 ^ 1;
  byte_1ECE8272A = 1;
  if (((v32 ^ 1) & 1) != 0)
    goto LABEL_7;
LABEL_44:
  v30 = *(_BYTE *)(a5 + 20);
  WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)"Failed to set an indexed property on ", 38, (uint64_t)"Window", 7, (uint64_t)": Indexed property setter is not supported.", 44, &v33);
  if ((v30 & 1) != 0)
    JSC::throwTypeError();
  v31 = v33;
  v33 = 0;
  if (!v31)
    goto LABEL_24;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::destroy(v31, v14);
LABEL_24:
    v15 = 0;
    goto LABEL_8;
  }
  v15 = 0;
  *(_DWORD *)v31 -= 2;
LABEL_8:
  v16 = v34;
  v34 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  return v15;
}

uint64_t WebCore::JSDOMWindow::putByIndex(JSC::JSGlobalObject **a1, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  WTF::StringImpl *v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  JSValue v24;
  JSValue v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31[2];
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;

  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v31[0] = 0;
  v31[1] = v10;
  if ((WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((JSC::JSGlobalObject **)a2, a1[426], v31, a4) & 1) == 0)
  {
    v20 = *((_QWORD *)a2 + 7);
    v21 = *(_QWORD *)(v20 + 16);
    if (v21 && *(_QWORD *)(v20 + 24) == v21)
    {
      v22 = 10;
    }
    else
    {
      WebCore::DOMException::create(0xEu, v31, (uint64_t *)&v36);
      v22 = WebCore::wrap<WebCore::DOMException>((uint64_t)a2, (uint64_t)a2, v36);
      v23 = v36;
      v36 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
        else
          --*((_DWORD *)v23 + 2);
      }
      JSC::addErrorInfo();
    }
    v24.super.isa = (Class)v22;
    JSC::VM::throwException(v10, a2, v24);
    goto LABEL_20;
  }
  if (byte_1ECE8272A != 1)
  {
    v26 = WTF::linkedOnOrAfterSDKWithBehavior();
    byte_1ECE82729 = v26 ^ 1;
    byte_1ECE8272A = 1;
    if ((v26 & 1) == 0)
      goto LABEL_4;
LABEL_27:
    v36 = (WTF::StringImpl *)"Failed to set an indexed property on ";
    v37 = 37;
    v34 = "Window";
    v35 = 6;
    v32 = ": Indexed property setter is not supported.";
    v33 = 43;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v36, (uint64_t)&v34, (uint64_t)&v32, &v30);
    v27 = v30;
    if (!v30)
    {
      __break(0xC471u);
LABEL_43:
      JUMPOUT(0x1956AE87CLL);
    }
    if ((a5 & 1) != 0)
    {
      JSC::throwTypeError();
      v27 = v30;
      v30 = 0;
      if (!v27)
        goto LABEL_20;
    }
    else
    {
      v30 = 0;
    }
    if (*(_DWORD *)v27 != 2)
    {
      v19 = 0;
      *(_DWORD *)v27 -= 2;
      goto LABEL_34;
    }
    WTF::StringImpl::destroy(v27, v18);
LABEL_20:
    v19 = 0;
    goto LABEL_34;
  }
  if (!byte_1ECE82729)
    goto LABEL_27;
LABEL_4:
  v11 = a1[426];
  if (!v11 || *((_BYTE *)v11 + 56))
  {
    v25.super.isa = a5;
    v19 = JSC::JSObject::putByIndex((JSC::JSObject *)a1, a2, a3, a4, v25);
    goto LABEL_34;
  }
  ++*((_DWORD *)v11 + 6);
  v12 = *((_QWORD *)v11 + 9);
  if (!v12)
    goto LABEL_12;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_12;
  if (*(_BYTE *)(v13 + 178))
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  v14 = (_QWORD *)(v13 - 288);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::Document::addConsoleMessage(v14, 1, 1, &v36, 0);
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_12:
  v17.super.isa = a5;
  v19 = JSC::JSObject::putByIndex((JSC::JSObject *)a1, a2, a3, a4, v17);
  if (*((_DWORD *)v11 + 6) == 1)
    (*(void (**)(JSC::JSGlobalObject *))(*(_QWORD *)v11 + 72))(v11);
  else
    --*((_DWORD *)v11 + 6);
LABEL_34:
  v28 = v31[0];
  v31[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v18);
    else
      *(_DWORD *)v28 -= 2;
  }
  return v19;
}

uint64_t WebCore::JSDOMWindow::deleteProperty(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  _BOOL8 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;

  v4 = *(WTF::StringImpl **)(a1 + 3408);
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a2, 2);
  }
  else if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v4, 2))
  {
    if (!a3)
      return JSC::JSSymbolTableObject::deleteProperty();
    v7 = *(_DWORD *)(a3 + 16);
    if ((v7 & 0x20) != 0)
      return JSC::JSSymbolTableObject::deleteProperty();
    v8 = *(_BYTE **)(a3 + 8);
    v9 = *(unsigned int *)(a3 + 4);
    if ((v7 & 4) != 0)
    {
      if (!(_DWORD)v9 || (v23 = *v8 - 48, v23 > 9) || v9 >= 2 && *v8 == 48)
      {
LABEL_36:
        v11 = 0;
        v24 = 0;
        v25 = 0;
      }
      else
      {
        v27 = v9 - 1;
        v28 = v8 + 1;
        while (v27)
        {
          if (v23 > 0x19999999)
            goto LABEL_36;
          v29 = *v28 - 48;
          if (v29 > 9)
            goto LABEL_36;
          v11 = 0;
          v24 = 0;
          v25 = 0;
          v19 = __CFADD__(v29, 10 * v23);
          v23 = v29 + 10 * v23;
          --v27;
          ++v28;
          if (v19)
            goto LABEL_37;
        }
        v11 = 0x100000000;
        if (v23 == -1)
        {
          v11 = 0;
          v24 = 0;
        }
        else
        {
          v24 = v23;
        }
        v25 = v23 == -1 ? 0 : v23 & 0xFFFFFF00;
      }
LABEL_37:
      v14 = v25 | v24;
    }
    else
    {
      if (!(_DWORD)v9 || (v10 = *(unsigned __int16 *)v8 - 48, v10 > 9) || v9 >= 2 && *(_WORD *)v8 == 48)
      {
LABEL_8:
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v16 = (unsigned __int16 *)(v8 + 2);
        v17 = v9 - 1;
        while (v17)
        {
          if (v10 <= 0x19999999)
          {
            v18 = *v16 - 48;
            if (v18 <= 9)
            {
              v19 = __CFADD__(v18, 10 * v10);
              v10 = v18 + 10 * v10;
              ++v16;
              --v17;
              if (!v19)
                continue;
            }
          }
          goto LABEL_8;
        }
        v20 = v10 == -1;
        v13 = v10 & 0xFFFFFF00;
        v12 = v10;
        v11 = 0x100000000;
        if (v20)
        {
          v11 = 0;
          v12 = 0;
          v13 = 0;
        }
      }
      v14 = v13 | v12;
    }
    if ((v11 & 0x100000000) == 0)
      return JSC::JSSymbolTableObject::deleteProperty();
    if (byte_1ECE8272A == 1)
    {
      if (!byte_1ECE82729)
      {
LABEL_26:
        v21 = 0;
        v22 = *(_QWORD *)(a1 + 3408);
        if (v22 && !*(_BYTE *)(v22 + 56))
        {
          ++*(_DWORD *)(v22 + 24);
          v21 = WebCore::LocalDOMWindow::length((WebCore::LocalDOMWindow *)v22) <= v14;
          if (*(_DWORD *)(v22 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
          else
            --*(_DWORD *)(v22 + 24);
        }
        return v21;
      }
    }
    else
    {
      v26 = WTF::linkedOnOrAfterSDKWithBehavior();
      byte_1ECE82729 = v26 ^ 1;
      byte_1ECE8272A = 1;
      if (((v26 ^ 1) & 1) == 0)
        goto LABEL_26;
    }
    return JSC::JSSymbolTableObject::deleteProperty();
  }
  return 0;
}

uint64_t WebCore::JSDOMWindow::deletePropertyByIndex(WebCore::JSDOMWindow *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  WTF::StringImpl *v4;
  _BOOL8 v8;
  int v9;
  uint64_t v10;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 426);
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a2, 2);
    return 0;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v4, 2))
    return 0;
  if ((_DWORD)a3 == -1)
    return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
  if (byte_1ECE8272A == 1)
  {
    if (byte_1ECE82729)
      return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
  }
  else
  {
    v9 = WTF::linkedOnOrAfterSDKWithBehavior();
    byte_1ECE82729 = v9 ^ 1;
    byte_1ECE8272A = 1;
    if (((v9 ^ 1) & 1) != 0)
      return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
  }
  v8 = 0;
  v10 = *((_QWORD *)this + 426);
  if (v10 && !*(_BYTE *)(v10 + 56))
  {
    ++*(_DWORD *)(v10 + 24);
    v8 = WebCore::LocalDOMWindow::length((WebCore::LocalDOMWindow *)v10) <= a3;
    if (*(_DWORD *)(v10 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    else
      --*(_DWORD *)(v10 + 24);
  }
  return v8;
}

uint64_t WebCore::JSDOMWindow::analyzeHeap(uint64_t a1, uint64_t a2)
{
  WebCore::Location *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v4 = (WebCore::Location *)WebCore::DOMWindow::location(*(WebCore::DOMWindow **)(a1 + 3408));
  WebCore::Location::href(v4, &v8);
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return JSC::JSSegmentedVariableObject::analyzeHeap();
}

uint64_t WebCore::JSDOMWindow::getOwnPropertyNames(uint64_t result, uint64_t a2, WebCore::TreeScope *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  WebCore::TreeScope *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[2];
  char v37;
  uint64_t v38;
  WTF::StringImpl *v39;

  v7 = result;
  v8 = *(_QWORD *)(result + 3408);
  if (*(_BYTE *)(v8 + 56))
    v9 = 0;
  else
    v9 = *(_QWORD *)(result + 3408);
  if (!*(_BYTE *)(v8 + 56))
  {
    ++*(_DWORD *)(v8 + 24);
    v10 = *(_QWORD *)(v8 + 72);
    if (!v10)
      goto LABEL_12;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
      goto LABEL_12;
    if (*(_BYTE *)(v11 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1956AF0C8);
    }
    v12 = *(_QWORD *)(v11 + 240);
    if (!v12)
      goto LABEL_12;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_12;
    v14 = *(_DWORD *)(v13 + 104);
    if (v14 == -1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8);
      if (v16)
        v17 = *(_BYTE *)(v16 + 144) == 0;
      else
        v17 = 0;
      if (!v17)
      {
        v14 = -1;
LABEL_30:
        v20 = 0;
        while (1)
        {
          JSC::Identifier::from();
          v22 = v35;
          v39 = v35;
          if ((*((_BYTE *)v35 + 16) & 0x20) != 0)
          {
            if ((*((_BYTE *)a3 + 24) & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v35 + 36) & 4) != 0)
              goto LABEL_43;
          }
          else if ((*((_BYTE *)a3 + 24) & 2) == 0)
          {
            goto LABEL_43;
          }
          v23 = *(_QWORD *)a3;
          v24 = *(unsigned int *)(*(_QWORD *)a3 + 20);
          if (v24 > 0x13)
          {
            v34 = v20;
            v31 = *((_QWORD *)a3 + 1);
            if (!v31 || !*(_DWORD *)(v31 - 12))
            {
              v25 = *(uint64_t **)(v23 + 8);
              v27 = 8 * v24;
              do
              {
                v26 = *v25++;
                v38 = v26;
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)a3 + 1, &v38, (uint64_t)v36);
                v27 -= 8;
              }
              while (v27);
            }
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)a3 + 1, (uint64_t *)&v39, (uint64_t)v36);
            v20 = v34;
            if (!v37)
              goto LABEL_43;
            v22 = v39;
            v23 = *(_QWORD *)a3;
          }
          else if ((_DWORD)v24)
          {
            v28 = *(WTF::StringImpl ***)(v23 + 8);
            while (*v28 != v35)
            {
              ++v28;
              if (!--v24)
                goto LABEL_51;
            }
            goto LABEL_43;
          }
LABEL_51:
          JSC::Identifier::fromUid(v36, *(WTF::StringImpl **)(*((_QWORD *)a3 + 2) + 41912), v22);
          v29 = *(unsigned int *)(v23 + 20);
          if ((_DWORD)v29 == *(_DWORD *)(v23 + 16))
          {
            WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v23 + 8, (unint64_t)v36);
          }
          else
          {
            v32 = *(_QWORD *)(v23 + 8);
            v33 = v36[0];
            v36[0] = 0;
            *(_QWORD *)(v32 + 8 * v29) = v33;
            *(_DWORD *)(v23 + 20) = v29 + 1;
          }
          v30 = v36[0];
          v36[0] = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v21);
            else
              *(_DWORD *)v30 -= 2;
          }
LABEL_43:
          result = (uint64_t)v35;
          v35 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
            else
              *(_DWORD *)result -= 2;
          }
          if (++v20 == v14)
            goto LABEL_12;
        }
      }
      v18 = *(_QWORD *)(v16 + 296);
      if (v18)
        v19 = (WebCore::TreeScope *)(v18 + 96);
      else
        v19 = 0;
      result = WebCore::FrameTree::scopedChildCount((WebCore::FrameTree *)(v13 + 48), v19, a3);
      v14 = result;
      *(_DWORD *)(v13 + 104) = result;
    }
    if (!v14)
    {
LABEL_12:
      if (*(_DWORD *)(v8 + 24) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      else
        --*(_DWORD *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_14:
  v15 = *(WTF::StringImpl **)(v7 + 3408);
  if (!*((_BYTE *)v15 + 56))
  {
    result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a2, v15, 0);
    if ((result & 1) != 0)
      return JSC::JSObject::getOwnPropertyNames();
  }
  if (!a4)
    return (uint64_t)WebCore::addCrossOriginOwnPropertyNames<(WebCore::CrossOriginObject)0>(*(WTF::StringImpl **)(a2 + 56), (uint64_t *)a3);
  return result;
}

uint64_t WebCore::JSDOMWindow::defineOwnProperty(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, int a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26[2];

  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v26[1] = v6;
  v7 = *(WTF::StringImpl **)(a1 + 3408);
  if (*((_BYTE *)v7 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a2, 2);
    return 0;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v7, 2))
    return 0;
  if (a3)
  {
    v10 = *(_DWORD *)(a3 + 16);
    if ((v10 & 0x20) == 0)
    {
      v11 = *(_BYTE **)(a3 + 8);
      v12 = *(unsigned int *)(a3 + 4);
      if ((v10 & 4) != 0)
      {
        if (!(_DWORD)v12)
          goto LABEL_8;
        v13 = *v11 - 48;
        if (v13 > 9 || v12 >= 2 && *v11 == 48)
          goto LABEL_8;
        v20 = v12 - 1;
        v21 = v11 + 1;
        while (v20)
        {
          if (v13 <= 0x19999999)
          {
            v22 = *v21 - 48;
            if (v22 <= 9)
            {
              v19 = __CFADD__(v22, 10 * v13);
              v13 = v22 + 10 * v13;
              --v20;
              ++v21;
              if (!v19)
                continue;
            }
          }
          goto LABEL_8;
        }
      }
      else
      {
        if (!(_DWORD)v12)
          goto LABEL_8;
        v13 = *(unsigned __int16 *)v11 - 48;
        if (v13 > 9 || v12 >= 2 && *(_WORD *)v11 == 48)
          goto LABEL_8;
        v16 = (unsigned __int16 *)(v11 + 2);
        v17 = v12 - 1;
        while (v17)
        {
          if (v13 <= 0x19999999)
          {
            v18 = *v16 - 48;
            if (v18 <= 9)
            {
              v19 = __CFADD__(v18, 10 * v13);
              v13 = v18 + 10 * v13;
              ++v16;
              --v17;
              if (!v19)
                continue;
            }
          }
          goto LABEL_8;
        }
      }
      if (v13 != -1)
      {
        if (byte_1ECE8272A == 1)
        {
          if (!byte_1ECE82729)
          {
LABEL_36:
            WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)"Failed to set an indexed property on ", 38, (uint64_t)"Window", 7, (uint64_t)": Indexed property setter is not supported.", 44, v26);
            if (a5)
              JSC::throwTypeError();
            v24 = v26[0];
            v26[0] = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v23);
              else
                *(_DWORD *)v24 -= 2;
            }
            return 0;
          }
        }
        else
        {
          v25 = WTF::linkedOnOrAfterSDKWithBehavior();
          byte_1ECE82729 = v25 ^ 1;
          byte_1ECE8272A = 1;
          if (((v25 ^ 1) & 1) == 0)
            goto LABEL_36;
        }
      }
    }
  }
LABEL_8:
  v14 = *((_QWORD *)v6 + 5182);
  if (*(_QWORD *)(v14 + 19704) == a3 || *(_QWORD *)(v14 + 22312) == a3)
    return JSC::JSObject::defineOwnProperty();
  else
    return JSC::JSGlobalObject::defineOwnProperty();
}

uint64_t WebCore::JSDOMWindow::getPrototype(WebCore::JSDOMWindow *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  WTF::StringImpl *v4;
  JSC::JSGlobalObject *v6;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 426);
  if (*((_BYTE *)v4 + 56) || !WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v4, 0))
    return 2;
  else
    return JSC::JSObject::getPrototype(this, a2, v6);
}

uint64_t WebCore::JSDOMWindow::preventExtensions()
{
  return 0;
}

unint64_t WebCore::JSDOMWindow::event(WebCore::JSDOMWindow *this, JSC::JSGlobalObject *a2, uint64_t a3, WebCore::Event *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)this + 427);
  if (v4)
    return WebCore::toJS(a2, this, v4, a4);
  else
    return 10;
}

uint64_t WebCore::showModalDialog(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  JSC::JSGlobalObject *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::LocalDOMWindow *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WTF::StringImpl *v19;
  WebCore::Node *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WebCore::JSDOMWindow *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  WebCore::Node *v40;
  WTF::StringImpl *v41;
  JSC::JSGlobalObject *v42[2];
  uint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  JSC::VM *v48;
  WTF::StringImpl *v49[7];
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSDOMWindow>::cast((unsigned __int8 *)this, (uint64_t)a2);
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "Window", "showModalDialog");
  v7 = v6;
  v8 = *(WTF::StringImpl **)(v6 + 3408);
  if (*((_BYTE *)v8 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(this, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)this, v8, 2))
    return 10;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v9);
    JSC::VM::throwException(v5, this, v32);
    return 0;
  }
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, *((_QWORD *)a2 + 6), (uint64_t)&v46);
  v10 = v47;
  if (v47)
  {
    v26 = 0;
LABEL_46:
    if (v10 != -1)
      (*((void (**)(WTF::StringImpl **, WTF::StringImpl **))&unk_1E3392610 + v10))(v49, &v46);
    return v26;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 8);
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(this, v11, (uint64_t)&v44);
  v12 = v45;
  if (v45)
  {
    v26 = 0;
LABEL_43:
    if (v12 != -1)
      (*((void (**)(WTF::StringImpl **, WTF::StringImpl **))&unk_1E3392610 + v12))(v49, &v44);
    v10 = v47;
    goto LABEL_46;
  }
  v42[0] = this;
  v42[1] = a2;
  v43 = 0;
  v13 = *(_QWORD *)(v7 + 3408);
  if (!v13 || *(_BYTE *)(v13 + 56))
  {
LABEL_25:
    if (v43)
    {
      v23 = *(WTF::StringImpl **)(WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v43 + 304) + 16) + 112), *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(*((_QWORD *)v42[0] + 7) + 41456) + 16))+ 16);
      if (v23)
      {
        WTF::AtomStringImpl::addLiteral();
        v24 = v49[0];
        v49[2] = (WTF::StringImpl *)0xFFFFFFFF00000000;
        LOBYTE(v50) = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        memset(&v49[4], 0, 21);
        v49[3] = v23;
        if (JSC::JSGlobalObject::getOwnPropertySlot())
        {
          if (BYTE1(v49[6]) == 1)
          {
            v26 = (uint64_t)v49[0];
          }
          else
          {
            if (BYTE1(v49[6]) == 2)
              v35 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v49, v42[0]);
            else
              v35 = JSC::PropertySlot::customGetter();
            v26 = v35;
          }
        }
        else
        {
          v26 = 10;
        }
        if (v51)
        {
          v27 = *(_DWORD *)(v50 + 4);
          if (!v27)
          {
            __break(0xC471u);
            JUMPOUT(0x1956AF7F0);
          }
          *(_DWORD *)(v50 + 4) = v27 - 1;
        }
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v25);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v26 = 10;
      }
      v28 = v43;
      v43 = 0;
      if (v28)
      {
        v29 = (unsigned int *)(v28 + 8);
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v33 = off_1E31FE290;
          *((_QWORD *)v33 + 1) = v29;
          v49[0] = v33;
          WTF::ensureOnMainThread();
          v34 = v49[0];
          v49[0] = 0;
          if (v34)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v26 = 10;
    }
    v12 = v45;
    goto LABEL_43;
  }
  ++*(_DWORD *)(v13 + 24);
  if (!v47)
  {
    v14 = v46;
    v46 = 0;
    v49[0] = v14;
    v15 = v44;
    v44 = 0;
    v41 = v15;
    v16 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 426);
    if (*((_BYTE *)v16 + 56))
    {
      __break(0xC471u);
      JUMPOUT(0x1956AF750);
    }
    v17 = *(_QWORD *)(JSC::VM::deprecatedVMEntryGlobalObject(*((JSC::VM **)this + 7), this) + 3408);
    if (*(_BYTE *)(v17 + 56))
    {
      __break(0xC471u);
      JUMPOUT(0x1956AF770);
    }
    v18 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = off_1E33926F0;
    *((_QWORD *)v18 + 1) = v42;
    v40 = v18;
    WebCore::LocalDOMWindow::showModalDialog((_QWORD *)v13, (WTF::StringImpl *)v49, (uint64_t *)&v41, v16, v17, &v40);
    v20 = v40;
    v40 = 0;
    if (v20)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v20 + 8))(v20);
    v21 = v41;
    v41 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v49[0];
    v49[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*(_DWORD *)(v13 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
    else
      --*(_DWORD *)(v13 + 24);
    goto LABEL_25;
  }
  v37 = (WebCore::JSDOMWindow *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSDOMWindow::queueMicrotask(v37, v38, v39);
}

uint64_t WebCore::JSDOMWindow::queueMicrotask(WebCore::JSDOMWindow *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  JSValue v19;
  _QWORD *v20;
  _DWORD *v21;

  v9 = (_QWORD *)*((_QWORD *)a2 + 7);
  v20 = v9;
  if (*((_DWORD *)a3 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(a2, a2);
    return JSC::VM::throwException((JSC::VM *)v9, a2, v19);
  }
  else
  {
    v10 = *((_QWORD *)a3 + 6);
    if ((v10 & 0xFFFE000000000002) == 0
      && (v11 = *(unsigned __int8 *)(v10 + 5), v11 >= 0x17)
      && ((v11 & 0xFE) == 0x1A
       || (*(_BYTE *)(v10 + 6) & 4) != 0
       && ((*(void (**)(_DWORD **__return_ptr, _QWORD))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x38))(&v21, *((_QWORD *)a3 + 6)), (_BYTE)v21)))
    {
      v12 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v12 + 8) = 1;
      *(_QWORD *)v12 = off_1E33926B8;
      if (WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
      {
        __break(0xC471u);
        JUMPOUT(0x1956AF9ACLL);
      }
      v13 = (_QWORD *)v12;
      *(_QWORD *)(v12 + 16) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      *v13 = off_1E33922F0;
      v14 = v9[89];
      if (!v14)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 84));
        v14 = v9[89];
      }
      v9[89] = *(_QWORD *)v14;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      v13[3] = v14 + 16;
      if (!*(_QWORD *)(v14 + 16))
      {
        v15 = *(unint64_t **)((v14 & 0xFFFFFFFFFFFFF000) + 0x10);
        v16 = v15[3];
        v15 += 3;
        *(_QWORD *)v14 = v16;
        *(_QWORD *)(v14 + 8) = v15;
        *v15 = v14;
        *(_QWORD *)(v16 + 8) = v14;
      }
      *(_QWORD *)(v14 + 16) = v10;
      v21 = v13;
      JSC::JSGlobalObject::queueMicrotask();
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
      }
      return 10;
    }
    else
    {
      return (uint64_t)WebCore::throwArgumentMustBeFunctionError((uint64_t)a2, (uint64_t)&v20, 0, "callback", 9, "Window", 7, a8, "queueMicrotask", 15);
    }
  }
}

uint64_t WebCore::JSDOMWindow::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  char **v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSDOMWindow::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 16 * v2;
    do
    {
      v6 = *(_QWORD *)(v6 + 16);
      v3 = v6 != 0;
    }
    while ((char **)v6 != &WebCore::JSDOMWindow::s_info && v6 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 3408);
  if (v4 != &WebCore::JSWindowProxy::s_info)
    return 0;
  a2 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMWindow::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMWindow::s_info && v11 != 0);
  }
  if (v10)
    return *(_QWORD *)(a2 + 3408);
  else
    return 0;
}

uint64_t WebCore::JSDOMWindow::setOpener(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a2, *(WTF::StringImpl **)(a1 + 3408), 2);
  if ((_DWORD)result)
  {
    if (a3 == 2)
    {
      v8 = *(_QWORD *)(a1 + 3408);
      if (v8 && !*(_BYTE *)(v8 + 56))
      {
        ++*(_DWORD *)(v8 + 24);
        result = WebCore::LocalDOMWindow::disownOpener(v8, v7);
        if (*(_DWORD *)(v8 + 24) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        else
          --*(_DWORD *)(v8 + 24);
      }
    }
    else
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 20904);
      v10[0] = a3;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = 0x700000000;
      return (*(uint64_t (**)(uint64_t, WTF::StringImpl *, uint64_t, _QWORD *, uint64_t))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x90))(a1, a2, v9, v10, 1);
    }
  }
  return result;
}

uint64_t WebCore::JSDOMWindow::self(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t WebCore::JSDOMWindow::window(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t WebCore::JSDOMWindow::frames(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t WebCore::JSDOMWindow::openDatabase(WebCore::JSDOMWindow *this, JSC::JSGlobalObject *a2)
{
  WTF::StringImpl *v2;
  uint64_t FunctionThatMasqueradesAsUndefined;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v7;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 20888);
  if (v2 && (*((_BYTE *)v2 + 16) & 0x20) != 0)
    v2 = 0;
  {
    if (byte_1ECE90A58)
    {
      if (v2)
        *(_DWORD *)v2 += 2;
      v7 = v2;
      FunctionThatMasqueradesAsUndefined = JSC::JSFunction::create();
      goto LABEL_13;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  if (v2)
    *(_DWORD *)v2 += 2;
  v7 = v2;
  FunctionThatMasqueradesAsUndefined = JSC::InternalFunction::createFunctionThatMasqueradesAsUndefined();
LABEL_13:
  v5 = FunctionThatMasqueradesAsUndefined;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5;
}

unint64_t WebCore::jsDOMWindowInstanceFunction_openDatabase(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  uint64_t v5;
  WebCore::JSDOMGlobalObject *v6;
  JSC::VM *v7;
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  uint64_t v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  JSC::VM *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  WebCore::JSDatabaseCallback *v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  void *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  JSValue v50;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v52;
  unsigned int v53;
  int v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  JSValue v60;
  JSC::VM *v61;
  unint64_t v62;
  unint64_t result;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WTF::StringImpl *v71;
  JSValue v72;
  uint64_t v73;
  unint64_t v74;
  size_t v75;
  int v76;
  JSC::VM *v77;
  uint64_t v78;
  unsigned int *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WebCore::JSDatabaseCallback *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;

  v3 = a2;
  v78 = *((_QWORD *)this + 7);
  v5 = WebCore::IDLOperation<WebCore::JSDOMWindow>::cast((unsigned __int8 *)this, (uint64_t)a2);
  if (!v5)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v78, "Window", "openDatabase");
  v6 = (WebCore::JSDOMGlobalObject *)v5;
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(this, *(WTF::StringImpl **)(v5 + 3408), 2))
    return 10;
  v9 = *((_QWORD *)v6 + 426);
  if (!v9 || *(_BYTE *)(v9 + 56) != 0)
    return 10;
  ++*(_DWORD *)(v9 + 24);
  if ((unint64_t)(*((int *)v3 + 8) - 1) <= 3)
  {
    v50.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v8);
    v26 = JSC::VM::throwException(v7, this, v50);
    goto LABEL_158;
  }
  v11 = *((_QWORD *)v3 + 6);
  v91 = (const char *)v11;
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v11 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, this);
      if (!v13)
        goto LABEL_14;
    }
    else if (!v13)
    {
LABEL_14:
      v97 = v13;
      goto LABEL_15;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_14;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v91, this);
LABEL_15:
  if (*((_DWORD *)v12 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v14 = v97;
    if (hasExceptionsAfterHandlingTraps)
    {
      v90 = 1;
      v97 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v52);
        else
          *(_DWORD *)v14 -= 2;
      }
      v26 = 0;
      v53 = 1;
LABEL_157:
      (*((void (**)(const char **, WTF::StringImpl **))&unk_1E3392610 + v53))(&v91, &v89);
LABEL_158:
      if (*(_DWORD *)(v9 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      else
        --*(_DWORD *)(v9 + 24);
      return v26;
    }
  }
  else
  {
    v14 = v97;
  }
  v89 = v14;
  v90 = 0;
  v15 = *((_QWORD *)v3 + 7);
  v91 = (const char *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v17)
        goto LABEL_22;
    }
    else if (!v17)
    {
LABEL_22:
      v97 = v17;
      goto LABEL_23;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_22;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v91, this);
LABEL_23:
  v77 = v7;
  if (*((_DWORD *)v16 + 20))
  {
    v54 = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v18 = v97;
    if (v54)
    {
      v88 = 1;
      v97 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v55);
        else
          *(_DWORD *)v18 -= 2;
      }
      v26 = 0;
      v56 = 1;
LABEL_155:
      (*((void (**)(const char **, WTF::StringImpl **))&unk_1E3392610 + v56))(&v91, &v87);
LABEL_156:
      v53 = v90;
      if (v90 == -1)
        goto LABEL_158;
      goto LABEL_157;
    }
  }
  else
  {
    v18 = v97;
  }
  v87 = v18;
  v88 = 0;
  v19 = *((_QWORD *)v3 + 8);
  v91 = (const char *)v19;
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v19 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v19 + 5) == 2)
  {
    v21 = *(WTF::StringImpl **)(v19 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v19, this);
      if (!v21)
        goto LABEL_30;
    }
    else if (!v21)
    {
LABEL_30:
      v97 = v21;
      goto LABEL_31;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_30;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v91, this);
LABEL_31:
  if (*((_DWORD *)v20 + 20))
  {
    v57 = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
    v22 = v97;
    if (v57)
    {
      v86 = 1;
      v97 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v58);
        else
          *(_DWORD *)v22 -= 2;
      }
      v26 = 0;
      v45 = 1;
      goto LABEL_153;
    }
  }
  else
  {
    v22 = v97;
  }
  v85 = v22;
  v86 = 0;
  v23 = *((_QWORD *)v3 + 9);
  v91 = (const char *)v23;
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v23 < 0xFFFE000000000000)
  {
    v46 = v23 - 0x2000000000000;
    if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v61 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v91, this);
      v24 = v61;
      v46 = v62;
    }
    v47 = (v46 >> 52) & 0x7FF;
    if ((v47 - 1023) <= 0x53)
    {
      v48 = v46 >> (51 - (v46 >> 52));
      if (v47 > 0x433)
        LODWORD(v48) = v46 << ((v46 >> 52) - 51);
      if (v47 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v46 >> 52) + 1)) - 1) & v48) + (1 << ((v46 >> 52) + 1));
      if ((v46 & 0x8000000000000000) == 0)
        LODWORD(v23) = v49;
      else
        LODWORD(v23) = -v49;
    }
    else
    {
      LODWORD(v23) = 0;
    }
  }
  if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
  {
    v26 = 0;
LABEL_152:
    v45 = 0;
    goto LABEL_153;
  }
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
LABEL_136:
    if (!MEMORY[0x19AEA53F4](v14, "null", 4)
      || !MEMORY[0x19AEA53F4](v18, "null", 4)
      || !MEMORY[0x19AEA53F4](v22, "null", 4)
      || (_DWORD)v23)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v67 = (WTF::StringImpl *)v91;
      LOBYTE(v91) = 24;
      v92 = (uint64_t)v67;
      if (!*((_QWORD *)v77 + 2))
      {
        v68 = *((_QWORD *)this + 7);
        v69 = *(_QWORD *)(v68 + 16);
        if (v69 && *(_QWORD *)(v68 + 24) == v69)
        {
          v70 = 10;
        }
        else
        {
          WebCore::DOMException::create(0x18u, (WTF::StringImpl **)&v92, (uint64_t *)&v97);
          v70 = WebCore::wrap<WebCore::DOMException>((uint64_t)this, (uint64_t)this, v97);
          v71 = v97;
          v97 = 0;
          if (v71)
          {
            if (*((_DWORD *)v71 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v71 + 8))(v71);
            else
              --*((_DWORD *)v71 + 2);
          }
          JSC::addErrorInfo();
        }
        v72.super.isa = (Class)v70;
        JSC::VM::throwException(v77, this, v72);
        v67 = (WTF::StringImpl *)v92;
      }
      v92 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v66);
        else
          *(_DWORD *)v67 -= 2;
      }
    }
    v73 = *((_QWORD *)this + 7);
    v74 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v75 = 8 * *(unsigned __int8 *)(v74 + 14);
    v26 = JSC::allocateCell<JSC::JSFinalObject>(v73, v75 + 16);
    v76 = *(_DWORD *)(v74 + 8);
    *(_DWORD *)v26 = v74 >> 4;
    *(_DWORD *)(v26 + 4) = v76;
    *(_QWORD *)(v26 + 8) = 0;
    bzero((void *)(v26 + 16), v75);
    if (*(_BYTE *)(v73 + 755))
      __dmb(0xAu);
    goto LABEL_152;
  }
  if (!byte_1ECE90A58)
    goto LABEL_136;
  if ((unint64_t)(*((int *)v3 + 8) - 6) > 0xFFFFFFFFFFFFFFFALL
    || (v25 = *((_QWORD *)v3 + 10), (v25 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v3 = 0;
    v84 = 0;
  }
  else
  {
    v83 = (WebCore::JSDatabaseCallback *)*((_QWORD *)this + 7);
    if ((v25 & 0xFFFE000000000002) == 0
      && (v27 = *(unsigned __int8 *)(v25 + 5), v27 >= 0x17)
      && ((v27 & 0xFE) == 0x1A
       || (*(_BYTE *)(v25 + 6) & 4) != 0
       && ((*(void (**)(const char **__return_ptr, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v25 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x38))(&v91, v25), (_BYTE)v91)))
    {
      v3 = (JSC::JSGlobalObject *)WTF::fastMalloc((WTF *)0x20);
      v28 = WebCore::JSDatabaseCallback::JSDatabaseCallback(v3, v25, v6);
      v29 = 0;
      LODWORD(v92) = 0;
      v91 = 0;
      v30 = 1;
      v83 = v28;
    }
    else
    {
      v91 = "Window";
      v92 = 7;
      v93 = ".";
      v94 = 2;
      v95 = "openDatabase";
      v96 = 13;
      result = (unint64_t)WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v97, "Argument ", 10, 5u, " ('", 4, "creationCallback", 17, "') to ", 7, &v91, " must be ", 10, "a function", 11);
      if (!v97)
        goto LABEL_168;
      JSC::throwTypeError();
      v65 = v97;
      v97 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v64);
        else
          *(_DWORD *)v65 -= 2;
      }
      v30 = 0;
      v29 = 1;
      LODWORD(v92) = 1;
    }
    v84 = v29;
    ((void (*)(WTF::StringImpl **, const char **))off_1E3392708[v29])(&v97, &v91);
    if (!v30)
    {
      v26 = 0;
      v44 = 1;
      goto LABEL_70;
    }
  }
  v89 = 0;
  v81 = v18;
  v82 = v14;
  v87 = 0;
  v85 = 0;
  v79 = (unsigned int *)v3;
  v80 = v22;
  v83 = 0;
  WebCore::LocalDOMWindowWebDatabase::openDatabase(v9, &v82, (int)&v81, (const WTF::String *)&v80, v23, &v79, (uint64_t)&v91);
  if (!(_DWORD)v93)
  {
    v32 = (unsigned int *)v91;
    v91 = 0;
    if (v32)
    {
      v26 = WebCore::wrap<WebCore::Database>((uint64_t)this, (uint64_t)v6, v32);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WebCore::Database::~Database((WebCore::Database *)v32);
        WTF::fastFree(v35, v36);
      }
    }
    else
    {
      v26 = 2;
    }
    goto LABEL_53;
  }
  if ((_DWORD)v93 == 1)
  {
    v31 = (WTF::StringImpl *)v91;
    LOBYTE(v97) = (_BYTE)v91;
    v59 = (WTF::StringImpl *)v92;
    v92 = 0;
    v98 = v59;
    if (!*((_QWORD *)v77 + 2))
    {
      v60.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v91, (JSC::JSGlobalObject *)&v98);
      JSC::VM::throwException(v77, this, v60);
      v59 = v98;
    }
    v98 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v31);
      else
        *(_DWORD *)v59 -= 2;
    }
    v26 = 0;
LABEL_53:
    if ((_DWORD)v93 != -1)
      ((void (*)(WTF::StringImpl **, const char **))off_1E3392718[v93])(&v97, &v91);
    LODWORD(v93) = -1;
    v37 = v79;
    v79 = 0;
    if (v37)
    {
      v38 = v37 + 4;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v37 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      }
    }
    v41 = v80;
    v80 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v31);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v81;
    v81 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v31);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v82;
    v82 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v31);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = v84;
    if (v84 == -1)
    {
LABEL_71:
      v45 = v86;
      if (v86 == -1)
      {
LABEL_154:
        v56 = v88;
        if (v88 == -1)
          goto LABEL_156;
        goto LABEL_155;
      }
LABEL_153:
      (*((void (**)(const char **, WTF::StringImpl **))&unk_1E3392610 + v45))(&v91, &v85);
      goto LABEL_154;
    }
LABEL_70:
    ((void (*)(const char **, WebCore::JSDatabaseCallback **))off_1E3392728[v44])(&v91, &v83);
    goto LABEL_71;
  }
  result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_168:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDOMWindow::setOpenDatabase(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[4];

  result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a2, *(WTF::StringImpl **)(a1 + 3408), 2);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41456) + 20888);
    v8[0] = a3;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0x700000000;
    return (*(uint64_t (**)(uint64_t, WTF::StringImpl *, uint64_t, _QWORD *, uint64_t))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x90))(a1, a2, v7, v8, 1);
  }
  return result;
}

uint64_t WebCore::JSDOMWindowProperties::deleteProperty()
{
  return 0;
}

uint64_t WebCore::JSDOMWindowProperties::deletePropertyByIndex()
{
  return 0;
}

uint64_t WebCore::JSDOMWindowProperties::getOwnPropertySlotByIndex(WebCore::JSDOMWindowProperties *this, WebCore::DOMWrapperWorld **a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  WTF::StringImpl *v8;
  uint64_t OwnPropertySlot;
  WTF::StringImpl *v11;

  JSC::Identifier::from();
  OwnPropertySlot = WebCore::JSDOMWindowProperties::getOwnPropertySlot((uint64_t)this, a2, (unint64_t)v11, a4);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return OwnPropertySlot;
}

uint64_t WebCore::JSDOMWindowProperties::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSDOMWindowProperties::preventExtensions()
{
  return 0;
}

uint64_t WebCore::JSDOMWindowProperties::isExtensible()
{
  return 1;
}

uint64_t WebCore::JSDOMObject::JSDOMObject(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v2;
  v3 = 16 * *(unsigned int *)(a2 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v3;
  return result;
}

{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v2;
  v3 = 16 * *(unsigned int *)(a2 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t WebCore::JSDeprecatedCSSOMValueOwner::isReachableFromOpaqueRoots(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  WebCore::CSSRule *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::ConcurrentPtrHashSet *v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v5 = (uint64_t)*a2;
  if ((*(_BYTE *)((16 * **a2) | 0x12) & 0x20) == 0)
    return 0;
  if (a5)
  {
    *a5 = "CSSStyleDeclaration is opaque root";
    a5[1] = 35;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 24);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  if (!v9)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 168))(v8);
    if (!v11)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      if (!v12)
        goto LABEL_26;
      if ((*(_BYTE *)(v12 + 22) & 8) == 0)
      {
        while (1)
        {
          v8 = v12;
          if ((*(_WORD *)(v12 + 28) & 0x80) != 0)
          {
            v14 = *(_QWORD *)(v12 + 200);
            if (!v14)
              goto LABEL_26;
            v13 = (uint64_t *)(v14 + 8);
          }
          else
          {
            v13 = (uint64_t *)(v12 + 32);
          }
          v12 = *v13;
          if (!*v13)
            goto LABEL_26;
        }
      }
LABEL_25:
      v8 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
      goto LABEL_26;
    }
    v8 = v11;
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 80))();
    if (!v9)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      if (!v12)
        goto LABEL_26;
      if ((*(_BYTE *)(v12 + 22) & 8) == 0)
      {
        while (1)
        {
          v8 = v12;
          if ((*(_WORD *)(v12 + 28) & 0x80) != 0)
          {
            v16 = *(_QWORD *)(v12 + 200);
            if (!v16)
              goto LABEL_26;
            v15 = (uint64_t *)(v16 + 8);
          }
          else
          {
            v15 = (uint64_t *)(v12 + 32);
          }
          v12 = *v15;
          if (!*v15)
            goto LABEL_26;
        }
      }
      goto LABEL_25;
    }
  }
  v8 = WebCore::root(v9, v10);
LABEL_26:
  v17 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v18 = (_DWORD *)*((_QWORD *)v17 + 6);
  if ((_DWORD *)((char *)v17 + 56) != v18)
  {
    v19 = v18[1];
    v20 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = v23;
    while (1)
    {
      v25 = *(_QWORD *)&v18[2 * v24 + 4];
      if (!v25)
        return 0;
      if (v8 == v25)
        goto LABEL_34;
      v24 = (v24 + 1) & v19;
      if (v24 == v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1956B0B94);
      }
    }
  }
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v17, (void *)v8);
  if ((_DWORD)result)
  {
LABEL_34:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  return result;
}

unint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::DeprecatedCSSOMValue *a4)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  WebCore::JSDOMGlobalObject *v11;

  v6 = (uint64_t *)(*((_QWORD *)a2 + 415) + 32);
  v11 = a3;
  v7 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get(v6, &v11);
  if (v7)
    return v7;
  ++*(_DWORD *)a3;
  v11 = a3;
  v8 = WebCore::toJSNewlyCreated(0, (uint64_t)a2, (uint64_t *)&v11);
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WebCore::DeprecatedCSSOMValue::operator delete((uint64_t)v11, v9);
    else
      --*(_DWORD *)v11;
  }
  return v8;
}

uint64_t WebCore::JSDocument::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (!*(_BYTE *)(a2 + 130))
  {
    v3 = *(_QWORD *)(result + 24) + 192;
    result = *(_QWORD *)(a2 + 120);
    v4 = *(_QWORD *)(result + 48);
    v5 = *(_DWORD *)(v4 + 4);
    v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = v9;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8 * v10 + 16);
      if (!v11)
        break;
      if (v3 == v11)
        return result;
      v10 = (v10 + 1) & v5;
      if (v10 == v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1956B1260);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::reportMemoryForDocumentIfFrameless(uint64_t this, JSC::JSGlobalObject *a2, WebCore::Document *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  JSC::JSGlobalObject *v6;

  v3 = *((_QWORD *)a2 + 66);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    v4 = 0;
    v5 = *(_QWORD *)(this + 56);
    do
    {
LABEL_4:
      v6 = a2;
      this = (*(uint64_t (**)(JSC::JSGlobalObject *))(*(_QWORD *)a2 + 128))(a2);
      v4 += this;
      if ((*((_WORD *)v6 + 14) & 4) == 0)
        break;
      a2 = (JSC::JSGlobalObject *)*((_QWORD *)v6 + 10);
    }
    while (a2);
    do
    {
      a2 = (JSC::JSGlobalObject *)*((_QWORD *)v6 + 7);
      if (a2)
        goto LABEL_4;
      v6 = (JSC::JSGlobalObject *)*((_QWORD *)v6 + 4);
    }
    while (v6);
    if (v4 >= 0x101)
      return JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v5 + 192));
  }
  return this;
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, JSC::VM *a2, WebCore::Node **a3)
{
  WebCore::Node *v4;
  __int16 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;

  v4 = *a3;
  v5 = *((_WORD *)*a3 + 1679);
  if ((v5 & 1) != 0)
  {
    v6 = WebCore::createWrapper<WebCore::HTMLDocument,WebCore::Document>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  }
  else if ((v5 & 0x80) != 0)
  {
    v6 = WebCore::createWrapper<WebCore::XMLDocument,WebCore::Document>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  }
  else
  {
    v6 = WebCore::createWrapper<WebCore::Document,WebCore::Document>(a2, (JSC::VM *)a3, (WebCore::JSDOMGlobalObject *)a3);
  }
  v7 = v6;
  v8 = *((_QWORD *)v4 + 66);
  if (!v8 || !*(_QWORD *)(v8 + 8))
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 56);
    do
    {
LABEL_6:
      v11 = v4;
      v9 += (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v4 + 128))(v4);
      if ((*((_WORD *)v4 + 14) & 4) == 0)
        break;
      v4 = (WebCore::Node *)*((_QWORD *)v4 + 10);
    }
    while (v4);
    do
    {
      v4 = (WebCore::Node *)*((_QWORD *)v11 + 7);
      if (v4)
        goto LABEL_6;
      v11 = (WebCore::Node *)*((_QWORD *)v11 + 4);
    }
    while (v11);
    if (v9 >= 0x101)
      JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v10 + 192));
  }
  return v7;
}

uint64_t WebCore::setAdoptedStyleSheetsOnTreeScope(uint64_t *a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  void *v8;
  JSValue v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t IndexQuickly;
  uint64_t v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _DWORD *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35[2];
  int v36;
  JSC::VM *v37;

  v4 = *((_QWORD *)a2 + 7);
  v37 = (JSC::VM *)v4;
  v30 = (WTF *)v4;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v23 = v35[0];
    v35[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v21 = 1;
    v36 = 1;
    return ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3392738[v21])(&v32, v35);
  }
  v32 = 0;
  v33 = 0;
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    v10 = 0;
    while (1)
    {
      v11 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8) : 0;
      if (v10 >= v11)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, v10, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a3, a2, v10);
      if (*(_DWORD *)(v4 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
        if ((result & 1) != 0)
          break;
      }
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::CSSStyleSheet>>::convert((uint64_t)a2, IndexQuickly, (uint64_t)&v32);
      ++v10;
      if (*(_QWORD *)(v4 + 16))
      {
        v13 = JSC::JSArrayIterator::create();
        v14 = v10 | 0xFFFE000000000000;
        if ((v10 & 0x80000000) != 0)
          v14 = COERCE__INT64((double)v10) + 0x2000000000000;
        *(_QWORD *)(v13 + 16) = v14;
        goto LABEL_15;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)a3, v9);
    if (!*(_DWORD *)(v4 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v4 + 16) || result == 6)
          break;
        v29 = JSC::iteratorValue();
        if (*(_DWORD *)(v4 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::CSSStyleSheet>>::convert((uint64_t)a2, v29, (uint64_t)&v32);
        if (*(_QWORD *)(v4 + 16))
        {
LABEL_15:
          result = JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v4 + 80))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v15 = v32;
    if ((_DWORD)result)
    {
      v36 = 1;
      if (HIDWORD(v33))
      {
        v25 = 8 * HIDWORD(v33);
        v26 = v32;
        do
        {
          v27 = *(_DWORD **)v26;
          *(_QWORD *)v26 = 0;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
          v26 = (WTF *)((char *)v26 + 8);
          v25 -= 8;
        }
        while (v25);
      }
      if (v15)
        WTF::fastFree(v15, v8);
      v21 = 1;
      return ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3392738[v21])(&v32, v35);
    }
  }
  else
  {
    v15 = v32;
  }
  v36 = 0;
  v35[0] = 0;
  v35[1] = 0;
  v30 = v15;
  v31 = v33;
  v16 = a1[10];
  if (!v16)
  {
    if (!HIDWORD(v33))
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      goto LABEL_26;
    }
    v17 = *a1;
    v16 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v16 + 8) = 1;
    *(_QWORD *)v16 = off_1E3398B38;
    v18 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v17);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 16) = v18;
    v20 = (_DWORD *)a1[10];
    a1[10] = v16;
    if (v20)
    {
      if (v20[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        v16 = a1[10];
      }
      else
      {
        --v20[2];
      }
    }
  }
  result = (uint64_t)WebCore::CSSStyleSheetObservableArray::setSheets(v16, (unsigned int *)&v30, (uint64_t)&v32);
  v15 = v30;
  if (HIDWORD(v31))
  {
    v24 = 8 * HIDWORD(v31);
    do
    {
      result = *(_QWORD *)v15;
      *(_QWORD *)v15 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      v15 = (WTF *)((char *)v15 + 8);
      v24 -= 8;
    }
    while (v24);
    v15 = v30;
  }
LABEL_26:
  if (v15)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    result = WTF::fastFree(v15, v8);
  }
  if ((_BYTE)v34)
  {
    LOBYTE(v30) = (_BYTE)v32;
    result = (uint64_t)v33;
    v33 = 0;
    v31 = (WTF::StringImpl *)result;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(a2, &v37, (unsigned __int8 *)&v30);
      result = (uint64_t)v31;
    }
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
    if ((_BYTE)v34)
    {
      result = (uint64_t)v33;
      v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  v21 = v36;
  if (v36 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E3392738[v21])(&v32, v35);
  return result;
}

uint64_t WebCore::JSDocument::setAdoptedStyleSheets(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  return WebCore::setAdoptedStyleSheetsOnTreeScope((uint64_t *)(*(_QWORD *)(a1 + 24) + 96), a2, a3);
}

uint64_t WebCore::JSDocument::analyzeHeap(uint64_t a1, uint64_t a2)
{
  WebCore::JSNode::analyzeHeap(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, *(_QWORD *)(a1 + 24) + 736);
}

unint64_t WebCore::toJSNewlyCreated(int a1, JSC::VM *a2, WebCore::Node **a3)
{
  if ((*((_WORD *)*a3 + 14) & 0x80) != 0)
    return WebCore::createWrapper<WebCore::ShadowRoot,WebCore::DocumentFragment>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  else
    return WebCore::createWrapper<WebCore::DocumentFragment,WebCore::DocumentFragment>(a2, (uint64_t *)a3, (WebCore::JSDOMGlobalObject *)a3);
}

uint64_t WebCore::createWrapper<WebCore::ShadowRoot,WebCore::DocumentFragment>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  WebCore::JSShadowRoot *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v21;

  v4 = *a2;
  *a2 = 0;
  v21 = v4;
  v5 = (WebCore::JSShadowRoot *)*((_QWORD *)a1 + 7);
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSShadowRoot::s_info + ~((_QWORD)&WebCore::JSShadowRoot::s_info << 32)) ^ (((unint64_t)&WebCore::JSShadowRoot::s_info + ~((_QWORD)&WebCore::JSShadowRoot::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSShadowRoot::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSShadowRoot::s_info)
          goto LABEL_6;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSShadowRoot::createPrototype(v5, a1, a3);
  Structure = WebCore::JSShadowRoot::createStructure((uint64_t *)v5, (uint64_t)a1, Prototype);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSShadowRoot::s_info);
LABEL_8:
  v17 = WebCore::JSShadowRoot::create(v14, a1, (uint64_t *)&v21);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v17);
  v19 = v21;
  v21 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v18);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  return v17;
}

unint64_t WebCore::createWrapper<WebCore::DocumentFragment,WebCore::DocumentFragment>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  WebCore::JSDocumentFragment *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *Allocator;
  uint64_t v22;
  int v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = *a2;
  v6 = (WebCore::JSDocumentFragment *)*((_QWORD *)a1 + 7);
  v7 = *((_QWORD *)a1 + 412);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSDocumentFragment::s_info + ~((_QWORD)&WebCore::JSDocumentFragment::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocumentFragment::s_info + ~((_QWORD)&WebCore::JSDocumentFragment::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSDocumentFragment::s_info)
    {
LABEL_3:
      v14 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v14)
        goto LABEL_5;
    }
    else
    {
      v24 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v24) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v24;
        if (v13 == &WebCore::JSDocumentFragment::s_info)
          goto LABEL_3;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSDocumentFragment::createPrototype(v6, a1, a3);
  Structure = WebCore::JSDocumentFragment::createStructure((uint64_t *)v6, (uint64_t)a1, Prototype);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSDocumentFragment::s_info);
LABEL_5:
  v17 = WebCore::JSDocumentFragment::create(v14, a1, a2);
  v18 = v17;
  v19 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v5)
    v20 = (uint64_t *)(v5 + 8);
  else
    v20 = 0;
  if (!*(_DWORD *)(v19 + 48))
  {
    if (v17)
    {
      v27 = v19;
      if ((v17 & 8) != 0)
        v28 = (v17 - 112) | 1;
      else
        v28 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v28 & 1) != 0)
        v29 = v28 + 47;
      else
        v29 = *(_QWORD *)v28 + 32;
      Allocator = *(_QWORD **)(v29 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v29 + 16) = *Allocator;
      *Allocator = v18;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      Allocator[2] = v27;
    }
    else
    {
      Allocator = 0;
    }
    v22 = *v20;
    *v20 = (uint64_t)Allocator;
    if (!v22)
      return v18;
LABEL_22:
    *(_QWORD *)(v22 + 8) = 3;
    return v18;
  }
  v25 = (uint64_t *)(v19 + 32);
  v34 = v5;
  if (v17)
  {
    v30 = v19;
    if ((v17 & 8) != 0)
      v31 = (v17 - 112) | 1;
    else
      v31 = v17 & 0xFFFFFFFFFFFFC000;
    if ((v31 & 1) != 0)
      v32 = v31 + 47;
    else
      v32 = *(_QWORD *)v31 + 32;
    v26 = *(_QWORD **)(v32 + 16);
    if (!v26)
      v26 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v32 + 16) = *v26;
    *v26 = v18;
    v26[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    v26[2] = v30;
  }
  else
  {
    v26 = 0;
  }
  v33 = v26;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v25, &v34, (uint64_t *)&v33);
  v22 = (uint64_t)v33;
  if (v33)
    goto LABEL_22;
  return v18;
}

uint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::DocumentFragment *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;

  v6 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v6 + 48))
  {
    v13 = a3;
    v8 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v6 + 32), &v13);
LABEL_5:
    if (v8)
      return v8;
    goto LABEL_7;
  }
  v7 = *((_QWORD *)a3 + 1);
  if (v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
  {
    v8 = *(_QWORD *)v7;
    goto LABEL_5;
  }
LABEL_7:
  *((_DWORD *)a3 + 6) += 2;
  v13 = a3;
  if ((*((_WORD *)a3 + 14) & 0x80) != 0)
    v10 = WebCore::createWrapper<WebCore::ShadowRoot,WebCore::DocumentFragment>(a2, &v13, a3);
  else
    v10 = WebCore::createWrapper<WebCore::DocumentFragment,WebCore::DocumentFragment>(a2, (uint64_t *)&v13, a3);
  v8 = v10;
  v12 = v13;
  v13 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  return v8;
}

uint64_t WebCore::JSElement::ariaControlsElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, a4);
}

uint64_t WebCore::getElementsArrayAttribute(WebCore *this, JSC::JSGlobalObject *a2, WebCore::QualifiedName::QualifiedNameImpl **a3, const WebCore::QualifiedName *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  __n128 v13;
  int v14;
  unint64_t v15;
  size_t v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t result;
  WTF::StringImpl *v21;
  WebCore::Element *v22;
  WebCore::QualifiedName::QualifiedNameImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  void *__s1;
  int v57;
  unsigned int v58;
  char v59;
  unint64_t v60;
  void *__s2;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 7);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 41456) + 19264);
  if (!(v8 >> 4))
    goto LABEL_5;
  if (((v8 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_5;
  v9 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), (JSC::VM *)v7);
  if (!v9)
    goto LABEL_5;
  v60 = v8;
  v10 = JSC::PropertyTable::get(v9, (uint64_t *)&v60);
  if ((_DWORD)v10 == -1)
    goto LABEL_5;
  v36 = (char *)a2 + 16;
  v37 = v10 << 32;
  if ((int)v10 >= 64)
  {
    v37 = 0x3F00000000 - (v10 << 32);
    v36 = (char *)(*((_QWORD *)a2 + 1) - 8);
  }
  v17 = *(_DWORD **)&v36[v37 >> 29];
  if (!v17)
  {
LABEL_5:
    v14 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 932);
    if (v14)
      v15 = 16 * (v14 & 0xFFFFFFFE);
    else
      v15 = 0;
    v16 = 8 * *(unsigned __int8 *)(v15 + 14);
    v17 = (_DWORD *)JSC::allocateCell<JSC::JSFinalObject>(v7, v16 + 16);
    v18 = *(_DWORD *)(v15 + 8);
    *v17 = v15 >> 4;
    v17[1] = v18;
    *((_QWORD *)v17 + 1) = 0;
    bzero(v17 + 4, v16);
    if (*(_BYTE *)(v7 + 755))
      __dmb(0xAu);
    v19 = *(_QWORD *)(*(_QWORD *)(v7 + 41456) + 19264);
    v60 = 0;
    __s2 = a2;
    v62 = -1;
    v63 = 0x1000000;
    v64 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, (JSC::VM *)v7, v19, (uint64_t)v17, 0, (uint64_t)&v60);
  }
  result = (uint64_t)WebCore::Element::getElementsArrayAttribute(*((WebCore::Element **)a2 + 3), a3, v11, v12, (uint64_t)&__s1, v13);
  v23 = *a3;
  v24 = (WTF::StringImpl *)*((_QWORD *)*a3 + 2);
  if (!v24)
  {
    v25 = *((_QWORD *)v23 + 3);
    if (v25)
      *(_DWORD *)v25 += 2;
    v55 = (WTF::StringImpl *)v25;
    if (v25)
    {
LABEL_15:
      if ((*(_BYTE *)(v25 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v25 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v25 = v60;
      }
    }
LABEL_18:
    v26 = *(_DWORD *)v25;
    *(_DWORD *)v25 += 2;
    if (v26)
    {
      *(_DWORD *)v25 = v26;
    }
    else
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v25, v21);
      v26 = *(_DWORD *)v25;
    }
    v27 = v26 - 2;
    if (v27)
      *(_DWORD *)v25 = v27;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v25, v21);
    v28 = v55;
    v55 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v21);
      else
        *(_DWORD *)v28 -= 2;
    }
    if ((v25 >> 4))
    {
      if (((v25 >> 4) & ~*(_DWORD *)(16 * (*v17 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v29 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v17 & 0xFFFFFFFE)), (JSC::VM *)v7);
        if (v29)
        {
          v60 = v25;
          v30 = JSC::PropertyTable::get(v29, (uint64_t *)&v60);
          if ((_DWORD)v30 != -1)
          {
            if ((int)v30 > 63)
            {
              v38 = *((_QWORD *)v17 + 1) - 8;
              v39 = 0x3F00000000 - (v30 << 32);
            }
            else
            {
              v38 = (uint64_t)(v17 + 4);
              v39 = v30 << 32;
            }
            v54 = *(_QWORD *)(v38 + (v39 >> 29));
            if (v54)
            {
              WebCore::Converter<WebCore::IDLNullable<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>>::convert((uint64_t)&v60, this, v54);
              v40 = v65;
              if (v65 != -1)
              {
                if (!v65)
                {
                  if (v59 && (_BYTE)v64)
                  {
                    v41 = v58;
                    if (v58 == v63)
                    {
                      v42 = (WTF *)__s2;
                      if (!memcmp(__s1, __s2, 8 * v58))
                        goto LABEL_85;
                    }
                  }
                  else if ((v59 != 0) == (v64 != 0))
                  {
                    if (!(_BYTE)v64)
                    {
LABEL_88:
                      v31 = v54;
LABEL_30:
                      if (v59)
                      {
                        v33 = (WTF *)__s1;
                        if (v58)
                        {
                          v34 = 8 * v58;
                          do
                          {
                            v35 = *(_QWORD *)v33;
                            *(_QWORD *)v33 = 0;
                            if (v35)
                            {
                              if (*(_DWORD *)(v35 + 24) == 2)
                              {
                                if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v35, v32);
                              }
                              else
                              {
                                *(_DWORD *)(v35 + 24) -= 2;
                              }
                            }
                            v33 = (WTF *)((char *)v33 + 8);
                            v34 -= 8;
                          }
                          while (v34);
                          v33 = (WTF *)__s1;
                          if (!__s1)
                            return v31;
                        }
                        else if (!__s1)
                        {
                          return v31;
                        }
                        __s1 = 0;
                        v57 = 0;
                        WTF::fastFree(v33, v32);
                      }
                      return v31;
                    }
                    v41 = v63;
                    v42 = (WTF *)__s2;
LABEL_85:
                    if (v41)
                    {
                      v51 = 8 * v41;
                      v52 = v42;
                      do
                      {
                        v53 = *(_QWORD *)v52;
                        *(_QWORD *)v52 = 0;
                        if (v53)
                        {
                          if (*(_DWORD *)(v53 + 24) == 2)
                          {
                            if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v53, v32);
                          }
                          else
                          {
                            *(_DWORD *)(v53 + 24) -= 2;
                          }
                        }
                        v52 = (WTF *)((char *)v52 + 8);
                        v51 -= 8;
                      }
                      while (v51);
                    }
                    if (v42)
                      WTF::fastFree(v42, v32);
                    goto LABEL_88;
                  }
                }
                ((void (*)(WTF::StringImpl **, void **))off_1E3392758[v40])(&v55, &__s2);
              }
            }
          }
        }
      }
    }
    v31 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>>::convert<std::optional<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>((uint64_t)this, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (uint64_t *)&__s1, v22);
    v60 = 0;
    __s2 = v17;
    v62 = -1;
    v63 = 0x1000000;
    v64 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v17, (JSC::VM *)v7, v25, v31, 0, (uint64_t)&v60);
    goto LABEL_30;
  }
  *(_DWORD *)v24 += 2;
  v43 = *((_QWORD *)v23 + 3);
  if (v43)
  {
    v44 = *(_DWORD *)(v43 + 4);
    *(_DWORD *)v43 += 2;
    if (v44 < 0)
    {
LABEL_100:
      v55 = 0;
      goto LABEL_101;
    }
  }
  else
  {
    v44 = 0;
  }
  v45 = *((_DWORD *)v24 + 1);
  v46 = __OFADD__(v44, 1);
  v47 = v44 + 1;
  v48 = v46;
  if (v45 < 0)
    goto LABEL_100;
  if ((v48 & 1) != 0)
    goto LABEL_100;
  result = (v45 + v47);
  if (__OFADD__(v45, v47))
    goto LABEL_100;
  v49 = *((_DWORD *)v24 + 4);
  v50 = (v49 >> 2) & 1;
  if (v43 && (v49 & 4) != 0)
    v50 = (*(unsigned __int8 *)(v43 + 16) >> 2) & 1;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v50, (uint64_t)v24, 58, v43, &v55);
  if (v55)
  {
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v43, v21);
      else
        *(_DWORD *)v43 -= 2;
    }
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
    v25 = (unint64_t)v55;
    if (v55)
      goto LABEL_15;
    goto LABEL_18;
  }
LABEL_101:
  __break(0xC471u);
  return result;
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  size_t v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WebCore::Element *v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  char v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  void *__s1;
  unsigned int v56;
  unsigned __int8 v57;
  unint64_t v58;
  void *__s2;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 7);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 41456) + 19264);
  if (!(v8 >> 4))
    goto LABEL_5;
  if (((v8 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_5;
  v9 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), (JSC::VM *)v7);
  if (!v9)
    goto LABEL_5;
  v58 = v8;
  v10 = JSC::PropertyTable::get(v9, (uint64_t *)&v58);
  if ((_DWORD)v10 == -1)
    goto LABEL_5;
  v34 = (char *)a2 + 16;
  v35 = v10 << 32;
  if ((int)v10 >= 64)
  {
    v35 = 0x3F00000000 - (v10 << 32);
    v34 = (char *)(*((_QWORD *)a2 + 1) - 8);
  }
  v14 = *(_DWORD **)&v34[v35 >> 29];
  if (!v14)
  {
LABEL_5:
    v11 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 932);
    if (v11)
      v12 = 16 * (v11 & 0xFFFFFFFE);
    else
      v12 = 0;
    v13 = 8 * *(unsigned __int8 *)(v12 + 14);
    v14 = (_DWORD *)JSC::allocateCell<JSC::JSFinalObject>(v7, v13 + 16);
    v15 = *(_DWORD *)(v12 + 8);
    *v14 = v12 >> 4;
    v14[1] = v15;
    *((_QWORD *)v14 + 1) = 0;
    bzero(v14 + 4, v13);
    if (*(_BYTE *)(v7 + 755))
      __dmb(0xAu);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 41456) + 19264);
    v58 = 0;
    __s2 = a2;
    v60 = -1;
    v61 = 0x1000000;
    v62 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)a2, (JSC::VM *)v7, v16, (uint64_t)v14, 0, (uint64_t)&v58);
  }
  result = (uint64_t)WebCore::ElementInternals::getElementsArrayAttribute(*((unsigned int **)a2 + 3), a3, (uint64_t)&__s1);
  v20 = *a3;
  v21 = (WTF::StringImpl *)*((_QWORD *)*a3 + 2);
  if (!v21)
  {
    v22 = *((_QWORD *)v20 + 3);
    if (v22)
      *(_DWORD *)v22 += 2;
    v54 = (WTF::StringImpl *)v22;
    if (v22)
    {
LABEL_15:
      if ((*(_BYTE *)(v22 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v22 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v22 = v58;
      }
    }
LABEL_18:
    v23 = *(_DWORD *)v22;
    *(_DWORD *)v22 += 2;
    if (v23)
    {
      *(_DWORD *)v22 = v23;
    }
    else
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v22, v18);
      v23 = *(_DWORD *)v22;
    }
    v24 = v23 - 2;
    if (v24)
      *(_DWORD *)v22 = v24;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v22, v18);
    v25 = v54;
    v54 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    if ((v22 >> 4))
    {
      if (((v22 >> 4) & ~*(_DWORD *)(16 * (*v14 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v26 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*v14 & 0xFFFFFFFE)), (JSC::VM *)v7);
        if (v26)
        {
          v58 = v22;
          v27 = JSC::PropertyTable::get(v26, (uint64_t *)&v58);
          if ((_DWORD)v27 != -1)
          {
            if ((int)v27 > 63)
            {
              v36 = *((_QWORD *)v14 + 1) - 8;
              v37 = 0x3F00000000 - (v27 << 32);
            }
            else
            {
              v36 = (uint64_t)(v14 + 4);
              v37 = v27 << 32;
            }
            v53 = *(_QWORD *)(v36 + (v37 >> 29));
            if (v53)
            {
              WebCore::Converter<WebCore::IDLNullable<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>>::convert((uint64_t)&v58, this, v53);
              v38 = v63;
              if (v63 != -1)
              {
                if (!v63)
                {
                  v39 = v57;
                  if (v57 && (_BYTE)v62)
                  {
                    v40 = v56;
                    if (v56 == v61)
                    {
                      v41 = (WTF *)__s2;
                      if (!memcmp(__s1, __s2, 8 * v56))
                        goto LABEL_83;
                    }
                  }
                  else if ((v57 != 0) == (v62 != 0))
                  {
                    if (!(_BYTE)v62)
                      goto LABEL_86;
                    v40 = v61;
                    v41 = (WTF *)__s2;
LABEL_83:
                    if (v40)
                    {
                      v50 = 8 * v40;
                      v51 = v41;
                      do
                      {
                        v52 = *(_QWORD *)v51;
                        *(_QWORD *)v51 = 0;
                        if (v52)
                        {
                          if (*(_DWORD *)(v52 + 24) == 2)
                          {
                            if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v52, v29);
                          }
                          else
                          {
                            *(_DWORD *)(v52 + 24) -= 2;
                          }
                        }
                        v51 = (WTF *)((char *)v51 + 8);
                        v50 -= 8;
                      }
                      while (v50);
                    }
                    if (v41)
                      WTF::fastFree(v41, v29);
LABEL_86:
                    v28 = v53;
                    if (!v39)
                      return v28;
                    goto LABEL_30;
                  }
                }
                ((void (*)(WTF::StringImpl **, void **))off_1E3392758[v38])(&v54, &__s2);
              }
            }
          }
        }
      }
    }
    v28 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>>::convert<std::optional<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>((uint64_t)this, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (uint64_t *)&__s1, v19);
    v58 = 0;
    __s2 = v14;
    v60 = -1;
    v61 = 0x1000000;
    v62 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v7, v22, v28, 0, (uint64_t)&v58);
    if (!v57)
      return v28;
LABEL_30:
    v30 = (WTF *)__s1;
    if (v56)
    {
      v31 = 8 * v56;
      v32 = (uint64_t *)__s1;
      do
      {
        v33 = *v32;
        *v32 = 0;
        if (v33)
        {
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v33, v29);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
        ++v32;
        v31 -= 8;
      }
      while (v31);
    }
    if (v30)
      WTF::fastFree(v30, v29);
    return v28;
  }
  *(_DWORD *)v21 += 2;
  v42 = *((_QWORD *)v20 + 3);
  if (v42)
  {
    v43 = *(_DWORD *)(v42 + 4);
    *(_DWORD *)v42 += 2;
    if (v43 < 0)
    {
LABEL_99:
      v54 = 0;
      goto LABEL_100;
    }
  }
  else
  {
    v43 = 0;
  }
  v44 = *((_DWORD *)v21 + 1);
  v45 = __OFADD__(v43, 1);
  v46 = v43 + 1;
  v47 = v45;
  if (v44 < 0)
    goto LABEL_99;
  if ((v47 & 1) != 0)
    goto LABEL_99;
  result = (v44 + v46);
  if (__OFADD__(v44, v46))
    goto LABEL_99;
  v48 = *((_DWORD *)v21 + 4);
  v49 = (v48 >> 2) & 1;
  if (v42 && (v48 & 4) != 0)
    v49 = (*(unsigned __int8 *)(v42 + 16) >> 2) & 1;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v49, (uint64_t)v21, 58, v42, &v54);
  if (v54)
  {
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v42, v18);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
    v22 = (unint64_t)v54;
    if (v54)
      goto LABEL_15;
    goto LABEL_18;
  }
LABEL_100:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSElement::ariaDescribedByElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr, a4);
}

uint64_t WebCore::JSElement::ariaDetailsElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_detailsAttr, a4);
}

uint64_t WebCore::JSElement::ariaErrorMessageElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_errormessageAttr, a4);
}

uint64_t WebCore::JSElement::ariaFlowToElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr, a4);
}

uint64_t WebCore::JSElement::ariaLabelledByElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr, a4);
}

uint64_t WebCore::JSElement::ariaOwnsElements(WebCore::JSElement *this, JSC::JSGlobalObject *a2, uint64_t a3, const WebCore::QualifiedName *a4)
{
  return WebCore::getElementsArrayAttribute(a2, this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr, a4);
}

uint64_t WebCore::JSElementInternals::setFormValue(WebCore::JSElementInternals *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  int v14;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSValue v19;
  WebCore *v20;
  JSC::JSGlobalObject *v21;
  WebCore::QualifiedName::QualifiedNameImpl **v22;
  const WebCore::QualifiedName *v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  _BYTE v26[8];
  int v27;
  char v28;
  _BYTE *v29;
  int v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  int v33;
  _BYTE v34[8];
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*((_DWORD *)a3 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(a2, a2);
    JSC::VM::throwException(v4, a2, v16);
    return 0;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLNull,WebCore::IDLInterface<WebCore::File>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::DOMFormData>>>::convert((uint64_t)v34, a2, *((_QWORD *)a3 + 6));
  v7 = v37;
  if (v37)
  {
    v12 = 0;
LABEL_29:
    if (v7 != -1)
      ((void (*)(int *, uint64_t *))off_1E33927C8[v7])(&v30, &v35);
    return v12;
  }
  v26[0] = 0;
  v28 = 0;
  if ((unint64_t)(*((int *)a3 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_19;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLNull,WebCore::IDLInterface<WebCore::File>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::DOMFormData>>>::convert((uint64_t)&v30, a2, *((_QWORD *)a3 + 7));
  v8 = v33;
  v9 = v33;
  if (v33)
    goto LABEL_14;
  v24[0] = 0;
  LODWORD(v25) = -1;
  v10 = v32;
  if (v32 == -1)
  {
    v26[0] = 0;
    v27 = -1;
LABEL_10:
    v28 = 1;
    goto LABEL_11;
  }
  v11 = off_1E3392788[v32];
  ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))v11)(&v29, v24, &v31);
  LODWORD(v25) = v10;
  if (!v28)
  {
    v26[0] = 0;
    v27 = -1;
    ((void (*)(_BYTE **, _BYTE *, _BYTE *))v11)(&v29, v26, v24);
    v27 = v10;
    goto LABEL_10;
  }
  v29 = v26;
  ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E33927A8[v10])(&v29, v26, v24);
LABEL_11:
  if ((_DWORD)v25 != -1)
    ((void (*)(_BYTE **, _BYTE *))off_1E3392768[v25])(&v29, v24);
  v9 = v33;
LABEL_14:
  if (v9 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E33927C8[v9])(v24, &v31);
  if (v8)
    goto LABEL_17;
  if (!v37)
  {
LABEL_19:
    v13 = *((_QWORD *)this + 3);
    v24[0] = 0;
    LODWORD(v25) = -1;
    v14 = v36;
    if (v36 != -1)
    {
      ((void (*)(_BYTE **, _BYTE *, uint64_t *))off_1E3392788[v36])(&v29, v24, &v35);
      LODWORD(v25) = v14;
    }
    WebCore::ElementInternals::setFormValue(v13, (uint64_t)v24, (uint64_t)v26, (uint64_t)&v30);
    if ((_DWORD)v25 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E3392768[v25])(&v29, v24);
    if (!(_BYTE)v32)
    {
      v12 = 10;
LABEL_25:
      if (v28 && v27 != -1)
        ((void (*)(int *, _BYTE *))off_1E3392768[v27])(&v30, v26);
      v7 = v37;
      goto LABEL_29;
    }
    v17 = (WTF::StringImpl *)v30;
    v24[0] = v30;
    v18 = v31;
    v25 = v31;
    if (!*((_QWORD *)v4 + 2))
    {
      v19.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v30, (JSC::JSGlobalObject *)&v25);
      JSC::VM::throwException(v4, a2, v19);
      v18 = v25;
    }
    v25 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
LABEL_17:
    v12 = 0;
    goto LABEL_25;
  }
  v20 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::getElementsArrayAttribute(v20, v21, v22, v23);
}

uint64_t WebCore::JSErrorEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(*(_QWORD *)(result + 24) + 104);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::JSErrorHandler::~JSErrorHandler(WebCore::JSErrorHandler *this, WTF::StringImpl *a2)
{
  WebCore::JSEventListener::~JSEventListener((WebCore::JSErrorHandler *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSEventListener::~JSEventListener((WebCore::JSErrorHandler *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::JSErrorHandler::~JSErrorHandler(WebCore::JSErrorHandler *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSEventListener::~JSEventListener(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSErrorHandler::handleEvent(WebCore::DOMWrapperWorld **this, WebCore::ScriptExecutionContext *a2, WebCore::Event *a3)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::DOMWrapperWorld *v9;
  JSC::JSFunction *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  _DWORD *v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  objc_class **v23;
  uint64_t v24;
  int v25;
  objc_class *v26;
  unsigned int v27;
  WTF *v28;
  JSValue v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  objc_class *v35;
  int v36;
  uint64_t v37;
  JSValue v38;
  int v39;
  uint64_t v40;
  JSValue v41;
  int v42;
  objc_class *v43;
  JSValue v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  JSC::JSGlobalObject *v48;
  WebCore::JSDOMGlobalObject **v49;
  unint64_t StatusReg;
  uint64_t v51;
  WebCore *v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JSGlobalObject *v55;
  WebCore::ScriptExecutionContext *v56;
  void *v58;
  _DWORD *v59;
  uint64_t *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  JSValue v65;
  uint64_t v66;
  JSC::JSGlobalObject **v67;
  JSC::JSGlobalObject **v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  JSC::JSGlobalObject *v75;
  char v76;
  uint64_t v77;
  WTF *v78;
  _OWORD v79[4];
  uint64_t v80;
  _QWORD v81[3];
  char v82[8];
  WebCore::JSDOMGlobalObject *v83[3];

  if (((*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a3 + 48))(a3) & 1) == 0)
    return WebCore::JSEventListener::handleEvent((WebCore::JSEventListener *)this, a2, a3);
  v7 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 344))(a2);
  MEMORY[0x19AEA3294](v82, v7);
  v8 = WebCore::JSEventListener::ensureJSFunction((WebCore::JSEventListener *)this, (const JSCell *)a2);
  if (v8)
  {
    v9 = this[8];
    if (v9)
    {
      v10 = (JSC::JSFunction *)v8;
      if (*((_BYTE *)a2 + 274))
      {
        if (*((_BYTE *)a2 + 274) != 1)
          return MEMORY[0x19AEA32A0](v82);
        v66 = *((_QWORD *)a2 + 43);
        v67 = *(JSC::JSGlobalObject ***)(v66 + 24);
        if (!v67 || (v13 = *v67) == 0)
        {
          WebCore::WorkerOrWorkletScriptController::initScript(*((_QWORD *)a2 + 43));
          v68 = *(JSC::JSGlobalObject ***)(v66 + 24);
          if (!v68)
            return MEMORY[0x19AEA32A0](v82);
          v13 = *v68;
        }
      }
      else
      {
        v11 = *((_QWORD *)a2 + 42);
        if (!v11)
          return MEMORY[0x19AEA32A0](v82);
        v12 = *(_QWORD *)(v11 + 8);
        if (!v12)
          return MEMORY[0x19AEA32A0](v82);
        v13 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v12 + 304) + 16)+ 112), v9)+ 2);
      }
      if (!v13)
        return MEMORY[0x19AEA32A0](v82);
      if (*((_BYTE *)v10 + 5) == 26)
        JSC::JSFunction::getCallData(v10, (JSCell *)v9);
      else
        (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x38))(v81, v10);
      if (!LOBYTE(v81[0]))
        return MEMORY[0x19AEA32A0](v82);
      ++*((_DWORD *)this + 4);
      v14 = *(_DWORD **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      v15 = *(unsigned int *)(16 * (*v14 & 0xFFFFFFFE) + 0x4C);
      v16 = *(_DWORD *)(16 * (*v14 & 0xFFFFFFFE) + 0x4C) != 0;
      v17 = (char **)(16 * v15);
      if ((_DWORD)v15)
        v18 = v17 == &WebCore::JSDOMWindow::s_info;
      else
        v18 = 1;
      if (!v18)
      {
        do
        {
          v17 = (char **)v17[2];
          v16 = v17 != 0;
        }
        while (v17 != &WebCore::JSDOMWindow::s_info && v17 != 0);
      }
      if (v16)
        v20 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      else
        v20 = 0;
      if (v20)
      {
        v21 = *(_DWORD **)(v20 + 3416);
        if (v21)
          ++v21[4];
        if ((*((_BYTE *)a3 + 21) & 8) == 0)
        {
          ++*((_DWORD *)a3 + 4);
          *(_QWORD *)(v20 + 3416) = a3;
          if (v21)
          {
            if (v21[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            else
              --v21[4];
          }
        }
      }
      else
      {
        v21 = 0;
      }
      v76 = 0;
      v77 = 0x800000000;
      v78 = (WTF *)((char *)v79 + 8);
      v80 = 0;
      memset(v79, 0, sizeof(v79));
      v22 = *((_QWORD *)v13 + 7);
      v23 = (objc_class **)(v22 + 41968);
      v24 = *((_QWORD *)a3 + 9);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 4);
        if (v25)
        {
          if (v25 != 1)
          {
LABEL_36:
            v26 = *(objc_class **)(v22 + 64760);
            if (!v26 || v24 != *((_QWORD *)v26 + 1))
            {
              v26 = (objc_class *)JSC::jsStringWithCacheSlowCase();
              v27 = v77;
              v28 = v78;
              if (v78 != (WTF *)((char *)v79 + 8))
              {
                v29.super.isa = v26;
                if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v77, v29) == 1)
                  v76 = 1;
LABEL_48:
                v32 = *((_QWORD *)v13 + 7);
                v33 = *((_QWORD *)a3 + 10);
                if (!v33 || (v34 = *(_DWORD *)(v33 + 4)) == 0)
                {
                  v35 = *(objc_class **)(v32 + 41968);
                  goto LABEL_54;
                }
                if (v34 != 1)
                {
LABEL_51:
                  v35 = *(objc_class **)(v32 + 64760);
                  if (!v35 || v33 != *((_QWORD *)v35 + 1))
                    v35 = (objc_class *)JSC::jsStringWithCacheSlowCase();
LABEL_54:
                  v36 = v77;
                  if ((_DWORD)v77 == HIDWORD(v77) || v78 != (WTF *)((char *)v79 + 8) && v78)
                  {
                    v65.super.isa = v35;
                    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v77, v65) == 1)
                      v76 = 1;
                  }
                  else
                  {
                    *((_QWORD *)v78 + v77) = v35;
                    LODWORD(v77) = v36 + 1;
                  }
                  v37 = *((unsigned int *)a3 + 22);
                  if ((v37 & 0x80000000) != 0)
                    v38.super.isa = (Class)(COERCE__INT64((double)v37) + 0x2000000000000);
                  else
                    v38.super.isa = (Class)(v37 | 0xFFFE000000000000);
                  v39 = v77;
                  if ((_DWORD)v77 == HIDWORD(v77) || v78 != (WTF *)((char *)v79 + 8) && v78)
                  {
                    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v77, v38) == 1)
                      v76 = 1;
                  }
                  else
                  {
                    *((JSValue *)v78 + v77) = v38;
                    LODWORD(v77) = v39 + 1;
                  }
                  v40 = *((unsigned int *)a3 + 23);
                  if ((v40 & 0x80000000) != 0)
                    v41.super.isa = (Class)(COERCE__INT64((double)v40) + 0x2000000000000);
                  else
                    v41.super.isa = (Class)(v40 | 0xFFFE000000000000);
                  v42 = v77;
                  if ((_DWORD)v77 == HIDWORD(v77) || v78 != (WTF *)((char *)v79 + 8) && v78)
                  {
                    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v77, v41) == 1)
                      v76 = 1;
                  }
                  else
                  {
                    *((JSValue *)v78 + v77) = v41;
                    LODWORD(v77) = v42 + 1;
                  }
                  v43 = (objc_class *)WebCore::ErrorEvent::error(a3, v13);
                  v44.super.isa = v43;
                  v45 = v77;
                  if ((_DWORD)v77 == HIDWORD(v77) || v78 != (WTF *)((char *)v79 + 8) && v78)
                  {
                    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v77, v44) == 1)
                      v76 = 1;
                  }
                  else
                  {
                    *((_QWORD *)v78 + v77) = v43;
                    LODWORD(v77) = v45 + 1;
                  }
                  v46 = *((_QWORD *)v13 + 7);
                  v47 = *(_QWORD *)(v46 + 90568);
                  if (v47)
                  {
                    v48 = *(JSC::JSGlobalObject **)(v47 + 8);
                    v74 = *((_QWORD *)v13 + 7);
                    v75 = v48;
                  }
                  else
                  {
                    v74 = *((_QWORD *)v13 + 7);
                    v75 = v13;
                    JSC::VMEntryScope::setUpSlow((JSC::VMEntryScope *)&v74);
                  }
                  *(_QWORD *)(v46 + 32) = 0;
                  v49 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction(a2, (WebCore::ScriptExecutionContext *)v81);
                  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                  v51 = *(_QWORD *)(StatusReg + 736);
                  if (!v51 || (v49 = *(WebCore::JSDOMGlobalObject ***)(v51 + 96)) == 0)
                    v49 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v49);
                  v83[0] = v49[8];
                  v52 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
                  v53 = *(_QWORD *)(StatusReg + 736);
                  if (!v53 || (v52 = *(WebCore **)(v53 + 96)) == 0)
                    v52 = (WebCore *)WebCore::threadGlobalDataSlow(v52);
                  *((_QWORD *)v52 + 8) = v13;
                  v54 = JSC::profiledCall();
                  WebCore::JSExecState::~JSExecState(v83, v55);
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    v69 = WebCore::InspectorInstrumentation::instrumentingAgents(a2, v56);
                    if (v69)
                    {
                      v71 = *(_QWORD *)(v69 + 232);
                      if (v71)
                      {
                        if (!*((_BYTE *)a2 + 274))
                        {
                          v72 = *((_DWORD *)a2 - 42);
                          *((_DWORD *)a2 - 42) = v72 + 2;
                          if (v72)
                          {
                            *((_DWORD *)a2 - 42) = v72;
                          }
                          else if ((*((_WORD *)a2 - 81) & 0x400) == 0)
                          {
                            WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 192), v70);
                          }
                        }
                        WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v71);
                      }
                    }
                  }
                  v58 = 0;
                  if (v54 == 7 && (*((_DWORD *)a3 + 5) & 0x404) == 4)
                    *((_DWORD *)a3 + 5) |= 0x40u;
                  if (v20)
                  {
                    if (v21)
                      ++v21[4];
                    v59 = *(_DWORD **)(v20 + 3416);
                    *(_QWORD *)(v20 + 3416) = v21;
                    if (v59)
                    {
                      if (v59[4] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
                      else
                        --v59[4];
                    }
                  }
                  if (*(uint64_t **)(v74 + 90568) == &v74)
                    JSC::VMEntryScope::tearDownSlow((JSC::VMEntryScope *)&v74);
                  v60 = *(uint64_t **)&v79[0];
                  if (*(_QWORD *)&v79[0])
                  {
                    v83[0] = (WebCore::JSDOMGlobalObject *)&v77;
                    v73 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v79[0], (uint64_t *)v83);
                    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v60, v73);
                  }
                  if (v78 != (WTF *)((char *)v79 + 8) && v78)
                    WTF::fastFree(v78, v58);
                  if (v21)
                  {
                    if (v21[4] == 1)
                    {
                      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
                      if (!this)
                        return MEMORY[0x19AEA32A0](v82);
                      goto LABEL_100;
                    }
                    --v21[4];
                  }
                  if (!this)
                    return MEMORY[0x19AEA32A0](v82);
LABEL_100:
                  if (*((_DWORD *)this + 4) == 1)
                    (*((void (**)(WebCore::DOMWrapperWorld **))*this + 1))(this);
                  else
                    --*((_DWORD *)this + 4);
                  return MEMORY[0x19AEA32A0](v82);
                }
                v61 = *(unsigned __int8 **)(v33 + 8);
                if ((*(_BYTE *)(v33 + 16) & 4) != 0)
                {
                  v62 = *v61;
                }
                else
                {
                  v64 = *(unsigned __int16 *)v61;
                  if (v64 > 0xFF)
                    goto LABEL_51;
                  v62 = v64;
                }
                v35 = *(objc_class **)(v32 + 8 * v62 + 42216);
                goto LABEL_54;
              }
LABEL_47:
              *((_QWORD *)v28 + v27) = v26;
              LODWORD(v77) = v27 + 1;
              goto LABEL_48;
            }
LABEL_46:
            v27 = 0;
            v28 = (WTF *)((char *)v79 + 8);
            goto LABEL_47;
          }
          v30 = *(unsigned __int8 **)(v24 + 8);
          if ((*(_BYTE *)(v24 + 16) & 4) != 0)
          {
            v31 = *v30;
          }
          else
          {
            v63 = *(unsigned __int16 *)v30;
            if (v63 > 0xFF)
              goto LABEL_36;
            v31 = v63;
          }
          v23 = (objc_class **)(v22 + 8 * v31 + 42216);
        }
      }
      v26 = *v23;
      goto LABEL_46;
    }
  }
  return MEMORY[0x19AEA32A0](v82);
}

unint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Event *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WebCore::JSDOMGlobalObject *v11;
  WebCore::JSDOMGlobalObject *v12;

  v6 = (int)this;
  v7 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v7 + 48))
  {
    v12 = a3;
    v9 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v7 + 32), &v12);
LABEL_5:
    if (v9)
      return v9;
    goto LABEL_7;
  }
  v8 = *((_QWORD *)a3 + 1);
  if (v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
  {
    v9 = *(_QWORD *)v8;
    goto LABEL_5;
  }
LABEL_7:
  ++*((_DWORD *)a3 + 4);
  v12 = a3;
  v9 = WebCore::toJSNewlyCreated(v6, a2, (WebCore::JSDOMGlobalObject *)&v12);
  v11 = v12;
  v12 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 4) == 1)
      (*(void (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 4);
  }
  return v9;
}

void WebCore::CachedScriptFetcher::~CachedScriptFetcher(WebCore::CachedScriptFetcher *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E3392C20;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E3392C20;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::JSAbortSignalOwner::~JSAbortSignalOwner(WebCore::JSAbortSignalOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSCSSRuleListOwner::~JSCSSRuleListOwner(WebCore::JSCSSRuleListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSCanvasRenderingContext2DOwner::~JSCanvasRenderingContext2DOwner(WebCore::JSCanvasRenderingContext2DOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSDOMMicrotask::~JSDOMMicrotask(WebCore::JSDOMMicrotask *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *((_QWORD *)this + 3) = 0;
  }
}

void WebCore::JSDOMMicrotask::~JSDOMMicrotask(WTF *this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (uint64_t *)(v2 - 16);
    v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = *(uint64_t **)(v2 - 8);
    if (v5)
    {
      v6 = *v3;
      *v5 = *v3;
      *(_QWORD *)(v6 + 8) = v5;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    *((_QWORD *)this + 3) = 0;
  }
  WTF::fastFree(this, a2);
}

void WebCore::JSDeprecatedCSSOMValueOwner::~JSDeprecatedCSSOMValueOwner(WebCore::JSDeprecatedCSSOMValueOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::JSEventListener::isAttribute(WebCore::JSEventListener *this)
{
  return *((_BYTE *)this + 40) & 1;
}

uint64_t WebCore::JSEventListener::sourceURL@<X0>(WTF::URL *a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  return WTF::URL::invalidate(a1);
}

uint64_t WebCore::JSEventListener::sourcePosition(WebCore::JSEventListener *this)
{
  return 0;
}

void WebCore::JSEventListener::code(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ModuleScriptLoader::~ModuleScriptLoader(WebCore::ModuleScriptLoader *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E3392C00;
  v2 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
}

void WebCore::ModuleScriptLoader::~ModuleScriptLoader(WebCore::ModuleScriptLoader *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = off_1E3392C00;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  WTF::fastFree(this, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_12CachedScriptEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_12CachedScriptEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::rehash(a1, v5, a2);
}

uint64_t WebCore::createIDBKeyFromValue(uint64_t result, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  JSC::VM *v7;
  double v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  JSC::JSObject *v25;
  unint64_t IndexQuickly;
  void *v27;
  bmalloc::api *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  WTF *v39;
  int v40;
  WTF *v41;
  char v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  _DWORD *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  bmalloc::api *v60;
  WTF *v61;
  uint64_t v62;
  JSC::JSObject *v63;
  char v64;

  v6 = (_QWORD *)result;
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (a3 >> 49)
  {
    if (a3 > 0xFFFDFFFFFFFFFFFFLL)
      v8 = (double)(int)a3;
    else
      *(_QWORD *)&v8 = a3 - 0x2000000000000;
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)result = 1;
    v9 = 5;
    goto LABEL_5;
  }
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_113;
  v10 = *(unsigned __int8 *)(a3 + 5);
  if (v10 == 2)
  {
    v11 = a3 + 8;
    if ((*(_BYTE *)(a3 + 8) & 1) != 0)
      v11 = JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, a2);
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
    {
      result = 0;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      *(_DWORD *)result = 1;
      *(_BYTE *)(result + 4) = 3;
      v12 = *(_DWORD **)v11;
      if (*(_QWORD *)v11)
        *v12 += 2;
      *(_QWORD *)(result + 8) = v12;
      *(_DWORD *)(result + 24) = 1;
      if (*(_QWORD *)v11)
        v13 = 2 * *(unsigned int *)(*(_QWORD *)v11 + 4) + 16;
      else
        v13 = 16;
      *(_QWORD *)(result + 32) = v13;
    }
    *v6 = result;
    return result;
  }
  if (MEMORY[0x1E0CBE2E0] == 16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C))
  {
    v21 = WebCore::valueToDate(a2, a3);
    if (!*((_DWORD *)v7 + 20)
      || (v58 = v21, result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), v21 = v58, !(_DWORD)result))
    {
      v8 = v21 * 1000.0;
      result = bmalloc::api::isoAllocate();
      *(_DWORD *)result = 1;
      v9 = 4;
LABEL_5:
      *(_BYTE *)(result + 4) = v9;
      *(double *)(result + 8) = v8;
      *(_DWORD *)(result + 24) = 2;
      *(_QWORD *)(result + 32) = 24;
      *v6 = result;
      return result;
    }
    goto LABEL_113;
  }
  if (v10 < 0x17)
    goto LABEL_113;
  if ((v10 & 0xFE) == 0x24)
    v14 = a3;
  else
    v14 = 0;
  v63 = (JSC::JSObject *)v14;
  if (!v14)
  {
    v22 = *(unsigned __int8 *)(a3 + 5);
    if (a3 && v22 == 38)
    {
      result = (uint64_t)WebCore::IDBKey::createBinary(a3, (uint64_t *)&v61);
    }
    else
    {
      if (!a3 || (v22 - 51) < 0xFFFFFFF4)
        goto LABEL_113;
      result = WebCore::IDBKey::createBinary((WebCore::IDBKey *)a3, (uint64_t *)&v61);
    }
    *v6 = v61;
    return result;
  }
  v15 = (*(_BYTE *)(v14 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v14 + 8) - 8) : 0;
  v16 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(char **)a4;
    v18 = *(unsigned int *)(a4 + 12);
    do
    {
      if (*(_QWORD *)v17 == v14)
        goto LABEL_113;
      v17 += 8;
      --v18;
    }
    while (v18);
    if (v16 >= 0x7D0)
    {
LABEL_113:
      *v6 = 0;
      return result;
    }
  }
  v19 = v15;
  if ((_DWORD)v16 == *(_DWORD *)(a4 + 8))
  {
    v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v16 + 1, (unint64_t)&v63);
    v16 = *(unsigned int *)(a4 + 12);
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = *(_QWORD *)v20;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v14;
  }
  v23 = v16 + 1;
  *(_DWORD *)(a4 + 12) = v16 + 1;
  v61 = 0;
  v62 = 0;
  if (!(_DWORD)v19)
  {
LABEL_82:
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B4624);
    }
    *(_DWORD *)(a4 + 12) = v23 - 1;
    if (HIDWORD(v62))
    {
      v45 = 0;
      v46 = v61;
      v47 = 8 * HIDWORD(v62);
      do
      {
        v48 = *(_QWORD *)v46;
        v46 = (WTF *)((char *)v46 + 8);
        v45 += *(_QWORD *)(v48 + 32);
        v47 -= 8;
      }
      while (v47);
      v49 = v45 + 16;
    }
    else
    {
      v49 = 16;
    }
    result = bmalloc::api::isoAllocate();
    v59 = result;
    *(_DWORD *)result = 1;
    *(_BYTE *)(result + 4) = 1;
    v50 = HIDWORD(v62);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = v50;
    if ((_DWORD)v50)
    {
      if (v50 >> 29)
      {
LABEL_119:
        __break(0xC471u);
        JUMPOUT(0x1956B461CLL);
      }
      result = WTF::fastMalloc((WTF *)(8 * v50));
      *(_DWORD *)(v59 + 16) = v50;
      *(_QWORD *)(v59 + 8) = result;
      if (HIDWORD(v62))
      {
        v51 = v61;
        v52 = 8 * HIDWORD(v62);
        do
        {
          v53 = *(_DWORD **)v51;
          if (*(_QWORD *)v51)
            ++*v53;
          *(_QWORD *)result = v53;
          result += 8;
          v51 = (WTF *)((char *)v51 + 8);
          v52 -= 8;
        }
        while (v52);
      }
    }
    *(_DWORD *)(v59 + 24) = 0;
    *(_QWORD *)(v59 + 32) = v49;
    goto LABEL_96;
  }
  v24 = 0;
  while (1)
  {
    v25 = v63;
    IndexQuickly = JSC::JSObject::tryGetIndexQuickly(v63, v24, 0);
    if (!IndexQuickly)
      IndexQuickly = JSC::JSObject::get(v25, a2, v24);
    if (*((_DWORD *)v7 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((result & 1) != 0)
        break;
    }
    result = WebCore::createIDBKeyFromValue(&v60, a2, IndexQuickly, a4);
    if (*((_DWORD *)v7 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
      {
        v42 = 0;
        *v6 = 0;
        goto LABEL_68;
      }
    }
    v28 = v60;
    if (v60)
    {
      v29 = HIDWORD(v62);
      if (HIDWORD(v62) == (_DWORD)v62)
      {
        result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v61, HIDWORD(v62) + 1, (unint64_t)&v60);
        v30 = HIDWORD(v62);
        v31 = v61;
        v32 = *(_DWORD **)result;
        if (*(_QWORD *)result)
          ++*v32;
        *((_QWORD *)v31 + v30) = v32;
        HIDWORD(v62) = v30 + 1;
      }
      else
      {
        v41 = v61;
        ++*(_DWORD *)v60;
        *((_QWORD *)v41 + v29) = v28;
        HIDWORD(v62) = v29 + 1;
      }
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      v33 = result;
      *(_DWORD *)result = 1;
      *(_BYTE *)(result + 4) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 16;
      v34 = HIDWORD(v62);
      if (HIDWORD(v62) != (_DWORD)v62)
      {
        *((_QWORD *)v61 + HIDWORD(v62)) = result;
        HIDWORD(v62) = v34 + 1;
        v42 = 1;
        goto LABEL_68;
      }
      v35 = HIDWORD(v62) + ((unint64_t)HIDWORD(v62) >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= (unint64_t)HIDWORD(v62) + 1)
        v37 = HIDWORD(v62) + 1;
      else
        v37 = v36;
      if (v37 >> 29)
        goto LABEL_119;
      v38 = v61;
      v39 = (WTF *)WTF::fastMalloc((WTF *)(8 * v37));
      LODWORD(v62) = v37;
      v61 = v39;
      result = (uint64_t)memcpy(v39, v38, 8 * v34);
      if (v38)
      {
        if (v61 == v38)
        {
          v61 = 0;
          LODWORD(v62) = 0;
        }
        result = WTF::fastFree(v38, v27);
      }
      v40 = HIDWORD(v62) + 1;
      *((_QWORD *)v61 + HIDWORD(v62)) = v33;
      HIDWORD(v62) = v40;
    }
    v42 = 1;
LABEL_68:
    v43 = (unsigned int *)v60;
    v60 = 0;
    if (v43)
    {
      if (*v43 == 1)
      {
        v44 = v43[6];
        if ((_DWORD)v44 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v44])(&v64, v43 + 2);
        v43[6] = -1;
        result = bmalloc::api::isoDeallocate((bmalloc::api *)v43, v27);
      }
      else
      {
        --*v43;
      }
    }
    if ((v42 & 1) == 0)
      goto LABEL_97;
    if (v19 == ++v24)
    {
      v23 = *(_DWORD *)(a4 + 12);
      goto LABEL_82;
    }
  }
  v59 = 0;
LABEL_96:
  *v6 = v59;
LABEL_97:
  v54 = v61;
  if (HIDWORD(v62))
  {
    v55 = 8 * HIDWORD(v62);
    do
    {
      v56 = *(unsigned int **)v54;
      *(_QWORD *)v54 = 0;
      if (v56)
      {
        if (*v56 == 1)
        {
          v57 = v56[6];
          if ((_DWORD)v57 != -1)
            ((void (*)(bmalloc::api **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v57])(&v60, v56 + 2);
          v56[6] = -1;
          result = bmalloc::api::isoDeallocate((bmalloc::api *)v56, v27);
        }
        else
        {
          --*v56;
        }
      }
      v54 = (WTF *)((char *)v54 + 8);
      v55 -= 8;
    }
    while (v55);
    v54 = v61;
  }
  if (v54)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    return WTF::fastFree(v54, v27);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = (WTF *)result;
  do
  {
    v3 = __ldaxr(result);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, result));
  if (!v4)
  {
    atomic_store(1u, result);
    WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(result + 2), a2);
    return (unsigned int *)WTF::fastFree(v2, v5);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createKeyPathArray(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IDBIndexInfo const&,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::IDBKeyData const&)::$_0,WebCore::createKeyPathArray(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IDBIndexInfo const&,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::IDBKeyData const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  const WebCore::IDBKey **v20;
  const WebCore::IDBKey **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const WebCore::IDBKey **v35;
  WebCore::IDBKey *v36;
  uint64_t v37;
  bmalloc::api *v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v6 = *a1;
  v7 = **a1;
  if (*(_BYTE *)(v7 + 24) && !*(_DWORD *)(v7 + 16))
  {
    v8 = (WTF *)*a2;
    if (*a2)
    {
      *(_DWORD *)v8 += 2;
      result = WTF::equal(v8, *(const WTF::StringImpl **)v7, a3);
      v11 = result;
      if (*(_DWORD *)v8 == 2)
      {
        result = WTF::StringImpl::destroy(v8, v10);
        if ((v11 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        *(_DWORD *)v8 -= 2;
        if ((_DWORD)result)
        {
LABEL_6:
          v12 = v6[1];
          *(_BYTE *)a4 = *(_BYTE *)v12;
          *(_BYTE *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 24) = -1;
          v13 = *(unsigned int *)(v12 + 24);
          if ((_DWORD)v13 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3392468[v13])(&v39, a4 + 8, v12 + 8);
            *(_DWORD *)(a4 + 24) = v13;
          }
          *(_DWORD *)(a4 + 32) = 1;
          return result;
        }
      }
    }
    else
    {
      result = WTF::equal(0, *(const WTF::StringImpl **)v7, a3);
      if ((result & 1) != 0)
        goto LABEL_6;
    }
  }
  result = WebCore::internalCreateIDBKeyFromScriptValueAndKeyPath((unint64_t *)&v38, (JSC::JSGlobalObject *)v6[2], *(_QWORD *)v6[3], a2);
  v15 = (unsigned int *)v38;
  if (!v38)
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 32) = 0;
    return result;
  }
  if (!*(_BYTE *)(v6[4] + 49) || *((_BYTE *)v38 + 4) != 1)
  {
    result = (uint64_t)WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)a4, v38);
    v32 = 1;
LABEL_42:
    *(_DWORD *)(a4 + 32) = v32;
LABEL_43:
    if (*v15 == 1)
    {
      v33 = v15[6];
      if ((_DWORD)v33 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v33])(&v42, v15 + 2);
      v15[6] = -1;
      return bmalloc::api::isoDeallocate((bmalloc::api *)v15, v14);
    }
    else
    {
      --*v15;
    }
    return result;
  }
  if (*((_DWORD *)v38 + 6))
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
    __break(0xC471u);
    return result;
  }
  v16 = *((unsigned int *)v38 + 5);
  if (!(_DWORD)v16)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v32 = 2;
    goto LABEL_42;
  }
  v34 = a4;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = (const WebCore::IDBKey **)*((_QWORD *)v38 + 1);
  v21 = &v20[v16];
  v35 = v21;
  do
  {
    if (v17 == v19)
    {
      v22 = v17 + (v17 >> 2);
      if (v22 >= 0x10)
        v23 = v22 + 1;
      else
        v23 = 16;
      v36 = *v20;
      if (v23 <= v17 + 1)
        v24 = v17 + 1;
      else
        v24 = v23;
      if (v24 >> 27)
        goto LABEL_53;
      v37 = WTF::fastMalloc((WTF *)(32 * v24));
      if (v17)
      {
        v26 = (_DWORD *)(v37 + 24);
        v27 = (_DWORD *)((char *)v18 + 24);
        v28 = 32 * v17;
        do
        {
          *((_BYTE *)v26 - 24) = *((_BYTE *)v27 - 24);
          *((_BYTE *)v26 - 16) = 0;
          v25 = v26 - 4;
          *v26 = -1;
          v29 = *v27;
          if ((_DWORD)v29 != -1)
          {
            ((void (*)(char *, _DWORD *, _DWORD *))off_1E33924B0[v29])(&v40, v25, v27 - 4);
            *v26 = v29;
            v30 = *v27;
            if ((_DWORD)v30 != -1)
              ((void (*)(char *, _DWORD *))off_1E3392420[v30])(&v41, v27 - 4);
          }
          *v27 = -1;
          v27 += 8;
          v26 += 8;
          v28 -= 32;
        }
        while (v28);
      }
      v19 = v24;
      if (v18)
      {
        if ((WTF *)v37 == v18)
        {
          v19 = 0;
          v31 = 0;
        }
        else
        {
          v31 = (WTF *)v37;
        }
        WTF::fastFree(v18, v25);
        v18 = v31;
      }
      else
      {
        v18 = (WTF *)v37;
      }
      v21 = v35;
      result = (uint64_t)WebCore::IDBKeyData::IDBKeyData((WTF *)((char *)v18 + 32 * v17++), v36);
    }
    else
    {
      result = (uint64_t)WebCore::IDBKeyData::IDBKeyData((WTF *)((char *)v18 + 32 * v17++), *v20);
    }
    ++v20;
  }
  while (v20 != v21);
  v15 = (unsigned int *)v38;
  *(_QWORD *)v34 = v18;
  *(_DWORD *)(v34 + 8) = v19;
  *(_DWORD *)(v34 + 12) = v17;
  *(_DWORD *)(v34 + 32) = 2;
  if (v15)
    goto LABEL_43;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createKeyPathArray(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IDBIndexInfo const&,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::IDBKeyData const&)::$_0,WebCore::createKeyPathArray(JSC::JSGlobalObject &,JSC::JSValue,WebCore::IDBIndexInfo const&,std::optional<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::IDBKeyData const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::IDBKey *v9;
  int v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  WTF *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  char *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  WebCore::IDBKey *v40[2];
  int v41;
  WTF *v42;
  uint64_t v43;
  char v44;

  v4 = *(_QWORD *)result;
  v5 = *(uint64_t **)a2;
  v6 = a2[3];
  v42 = 0;
  v43 = 0;
  if (!(_DWORD)v6)
  {
    v32 = 0;
    v33 = 0;
LABEL_55:
    *(_QWORD *)a4 = v32;
    *(_QWORD *)(a4 + 8) = v33;
    *(_DWORD *)(a4 + 32) = 2;
    return result;
  }
  v7 = &v5[v6];
  v38 = a4;
  v39 = v7;
  while (1)
  {
    v8 = *(_QWORD *)(v4 + 40);
    if (*(_BYTE *)(v8 + 24) && !*(_DWORD *)(v8 + 16))
    {
      v9 = (WebCore::IDBKey *)*v5;
      if (*v5)
      {
        v10 = *(_DWORD *)v9;
        *(_DWORD *)v9 += 2;
        v40[0] = v9;
        v41 = 0;
        if (*(_DWORD *)(v8 + 16))
        {
          v40[0] = 0;
          if (v10)
            *(_DWORD *)v9 = v10;
          else
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          goto LABEL_9;
        }
      }
      else
      {
        v40[0] = 0;
        v41 = 0;
        if (*(_DWORD *)(v8 + 16))
          goto LABEL_9;
      }
      result = WTF::equal(v9, *(const WTF::StringImpl **)v8, (const WTF::StringImpl *)a3);
      v26 = result;
      if (v41 == -1)
      {
        if (!(_DWORD)result)
          goto LABEL_9;
LABEL_46:
        a3 = *(unsigned int **)(v4 + 48);
        if (HIDWORD(v43) == (_DWORD)v43)
        {
          result = WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, HIDWORD(v43) + 1, (unint64_t)a3);
          v27 = (char *)v42 + 32 * HIDWORD(v43);
          *v27 = *(_BYTE *)result;
          v27[8] = 0;
          a2 = (unsigned int *)(v27 + 8);
          *((_DWORD *)v27 + 6) = -1;
          v28 = v27 + 24;
          v29 = *(unsigned int *)(result + 24);
          if ((_DWORD)v29 != -1)
          {
            v30 = (unsigned int *)(result + 8);
            goto LABEL_51;
          }
        }
        else
        {
          v31 = (char *)v42 + 32 * HIDWORD(v43);
          *v31 = *(_BYTE *)a3;
          v31[8] = 0;
          a2 = (unsigned int *)(v31 + 8);
          *((_DWORD *)v31 + 6) = -1;
          v28 = v31 + 24;
          v29 = a3[6];
          if ((_DWORD)v29 != -1)
          {
            v30 = a3 + 2;
LABEL_51:
            result = ((uint64_t (*)(WebCore::IDBKey **, unsigned int *, unsigned int *))off_1E3392468[v29])(v40, a2, v30);
            *v28 = v29;
          }
        }
        ++HIDWORD(v43);
        goto LABEL_35;
      }
      result = ((uint64_t (*)(char *, WebCore::IDBKey **))off_1E3392410[v41])(&v44, v40);
      if ((v26 & 1) != 0)
        goto LABEL_46;
    }
LABEL_9:
    WebCore::internalCreateIDBKeyFromScriptValueAndKeyPath((unint64_t *)v40, *(JSC::JSGlobalObject **)(v4 + 56), **(_QWORD **)(v4 + 64), v5);
    v12 = (unsigned int *)v40[0];
    if (!v40[0])
    {
      *(_QWORD *)v38 = 0;
      *(_DWORD *)(v38 + 32) = 0;
      goto LABEL_58;
    }
    result = WebCore::IDBKey::isValid(v40[0]);
    if ((result & 1) == 0)
      break;
    v13 = HIDWORD(v43);
    if (HIDWORD(v43) != (_DWORD)v43)
    {
      result = (uint64_t)WebCore::IDBKeyData::IDBKeyData((WTF *)((char *)v42 + 32 * HIDWORD(v43)), (const WebCore::IDBKey *)v12);
      ++HIDWORD(v43);
LABEL_33:
      if (*v12 == 1)
      {
        v25 = v12[6];
        if ((_DWORD)v25 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v25])(&v44, v12 + 2);
        v12[6] = -1;
        result = bmalloc::api::isoDeallocate((bmalloc::api *)v12, a2);
      }
      else
      {
        --*v12;
      }
      goto LABEL_35;
    }
    v14 = HIDWORD(v43) + ((unint64_t)HIDWORD(v43) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= (unint64_t)HIDWORD(v43) + 1)
      v16 = HIDWORD(v43) + 1;
    else
      v16 = v15;
    if (v16 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v17 = v42;
    v18 = (WTF *)WTF::fastMalloc((WTF *)(32 * v16));
    LODWORD(v43) = v16;
    v42 = v18;
    if ((_DWORD)v13)
    {
      v20 = (_DWORD *)((char *)v18 + 24);
      v21 = (_DWORD *)((char *)v17 + 24);
      v22 = 32 * v13;
      do
      {
        *((_BYTE *)v20 - 24) = *((_BYTE *)v21 - 24);
        *((_BYTE *)v20 - 16) = 0;
        v19 = v20 - 4;
        *v20 = -1;
        v23 = *v21;
        if ((_DWORD)v23 != -1)
        {
          ((void (*)(char *, _DWORD *, _DWORD *))off_1E33924B0[v23])(&v44, v19, v21 - 4);
          *v20 = v23;
          v24 = *v21;
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, _DWORD *))off_1E3392420[v24])(&v44, v21 - 4);
        }
        *v21 = -1;
        v21 += 8;
        v20 += 8;
        v22 -= 32;
      }
      while (v22);
      v18 = v42;
      v7 = v39;
    }
    if (v17)
    {
      if (v18 == v17)
      {
        v42 = 0;
        LODWORD(v43) = 0;
      }
      WTF::fastFree(v17, v19);
      v18 = v42;
    }
    result = (uint64_t)WebCore::IDBKeyData::IDBKeyData((WTF *)((char *)v18 + 32 * HIDWORD(v43)), (const WebCore::IDBKey *)v12);
    v12 = (unsigned int *)v40[0];
    ++HIDWORD(v43);
    if (v40[0])
      goto LABEL_33;
LABEL_35:
    if (++v5 == v7)
    {
      v32 = v42;
      v33 = v43;
      a4 = v38;
      goto LABEL_55;
    }
  }
  *(_QWORD *)v38 = 0;
  *(_DWORD *)(v38 + 32) = 0;
  if (*v12 == 1)
  {
    v37 = v12[6];
    if ((_DWORD)v37 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v37])(&v44, v12 + 2);
    v12[6] = -1;
    bmalloc::api::isoDeallocate((bmalloc::api *)v12, v11);
  }
  else
  {
    --*v12;
  }
LABEL_58:
  result = (uint64_t)v42;
  if (HIDWORD(v43))
  {
    v34 = 32 * HIDWORD(v43);
    v35 = (_DWORD *)((char *)v42 + 24);
    do
    {
      v36 = *v35;
      if ((_DWORD)v36 != -1)
        ((void (*)(WebCore::IDBKey **, _DWORD *))off_1E3392420[v36])(v40, v35 - 4);
      *v35 = -1;
      v35 += 8;
      v34 -= 32;
    }
    while (v34);
    result = (uint64_t)v42;
  }
  if (result)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    return WTF::fastFree((WTF *)result, v11);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::callOnIDBSerializationThreadAndWait(WTF::Function<void ()(JSC::JSGlobalObject &)> &&)::$_0,void,JSC::JSGlobalObject &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3392548;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::callOnIDBSerializationThreadAndWait(WTF::Function<void ()(JSC::JSGlobalObject &)> &&)::$_0,void,JSC::JSGlobalObject &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3392548;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::callOnIDBSerializationThreadAndWait(WTF::Function<void ()(JSC::JSGlobalObject &)> &&)::$_0,void,JSC::JSGlobalObject &>::call(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 8));
}

void WebCore::InternalReadableStream::~InternalReadableStream(WebCore::InternalReadableStream *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
  WTF::fastFree(v5, v6);
}

void WebCore::InternalWritableStream::~InternalWritableStream(WebCore::InternalWritableStream *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
  WTF::fastFree(v5, v6);
}

WebCore::InspectorInstrumentation *WebCore::InspectorInstrumentation::willCallFunction(WebCore::InspectorInstrumentation *this, WebCore::ScriptExecutionContext *a2, const WTF::String *a3, WTF::JSONImpl::Value *a4)
{
  BOOL v5;
  uint64_t v9;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    v5 = this == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v9 = (uint64_t)this;
    this = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(this, a2);
    if (this)
      return WebCore::InspectorInstrumentation::willCallFunctionImpl(this, a2, a3, a4, v9);
  }
  return this;
}

uint64_t *JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 616);
  v5 = *(unsigned int *)(a1 + 628);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 624))
  {
    result = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 628);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 628) = v5 + 1;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = v5;
    do
    {
      if (*(_QWORD *)v11)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (WTF::StringImpl **)v11);
      v12 = (_DWORD *)*((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      if (v12)
      {
        if (v12[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[4];
      }
      v13 = *(WTF::StringImpl **)v11;
      *(_QWORD *)v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 = (WTF *)((char *)v11 + 16);
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

_DWORD *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  int v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *result;
  int v28;

  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *a2;
  v7 = (v5 ^ (*((_DWORD *)*a2 + 4) >> 8)) & (v3 - 1);
  v8 = *a1;
  v9 = (WTF::StringImpl **)(*a1 + 16 * v7);
  v10 = *v9;
  if (*v9)
  {
    v12 = 0;
    v28 = *((_DWORD *)a1 + 2);
    do
    {
      v13 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v10 + 4) >> 8)) & v4)) & v4;
      if (v12 > v13)
      {
        v14 = *a2;
        v15 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v16 = *v9;
        *v9 = 0;
        v17 = *a2;
        *a2 = v16;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
            v3 = v28;
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        v18 = v8 + 16 * v7;
        v20 = *(WTF::StringImpl **)(v18 + 8);
        v19 = (WTF::StringImpl **)(v18 + 8);
        *v19 = 0;
        v21 = a2[1];
        a2[1] = v20;
        if (v21)
        {
          if (*((_DWORD *)v21 + 4) == 1)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21);
            v3 = v28;
          }
          else
          {
            --*((_DWORD *)v21 + 4);
          }
        }
        v22 = *v9;
        *v9 = v14;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
            v3 = v28;
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        v23 = *v19;
        *v19 = v15;
        if (v23)
        {
          if (*((_DWORD *)v23 + 4) == 1)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 16))(v23);
            v3 = v28;
          }
          else
          {
            --*((_DWORD *)v23 + 4);
          }
        }
        v12 = v13;
      }
      v7 = ((_DWORD)v7 + 1) & v4;
      ++v12;
      v8 = *a1;
      v9 = (WTF::StringImpl **)(*a1 + 16 * v7);
      v10 = *v9;
    }
    while (*v9);
    v6 = *a2;
  }
  *a2 = 0;
  v24 = *v9;
  *v9 = v6;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v8 + 16 * v7;
  v26 = a2[1];
  a2[1] = 0;
  result = *(_DWORD **)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin(a2);
      v10 = v9;
      v12 = v11;
      v13 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((uint64_t *)v13 != v9)
      {
        do
        {
          v14 = (_QWORD *)WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::DefaultHash<WebCore::DOMGuardedObject *>>,WebCore::DOMGuardedObject *>(a1, v10);
          v15 = *v10++;
          *v14 = v15;
          while (v10 != v12)
          {
            if ((unint64_t)(*v10 + 1) > 1)
              goto LABEL_13;
            ++v10;
          }
          v10 = v12;
LABEL_13:
          ;
        }
        while (v10 != (uint64_t *)v13);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::DefaultHash<WebCore::DOMGuardedObject *>>,WebCore::DOMGuardedObject *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_3,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E3392660;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      v7 = (WTF *)MEMORY[0x19AEA3CFC]();
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_3,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3392660;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = (WTF *)MEMORY[0x19AEA3CFC]();
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_3,void,WebCore::ExceptionOr<std::span<unsigned char const,18446744073709551615ul> *> &&>::call(uint64_t a1, unsigned __int8 *a2)
{
  JSC::VM *v4;
  int v5;
  JSC::JSGlobalObject *v6;
  WTF::StringImpl *v7;
  objc_class *v8;
  JSC::Wasm::StreamingCompiler *v9;
  JSC::JSGlobalObject *v10;
  JSValue v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  _BYTE v17[8];

  v4 = *(JSC::VM **)(*(_QWORD *)(a1 + 8) + 56);
  MEMORY[0x19AEA3294](v17, v4);
  v5 = *((_DWORD *)a2 + 4);
  if (!v5)
  {
    if (*(_QWORD *)a2)
      JSC::Wasm::StreamingParser::addBytes();
    else
      JSC::Wasm::StreamingCompiler::finalize(*(JSC::Wasm::StreamingCompiler **)(a1 + 16), *(JSC::JSGlobalObject **)(a1 + 8));
    return MEMORY[0x19AEA32A0](v17);
  }
  if (v5 == 1)
  {
    v6 = (JSC::JSGlobalObject *)*a2;
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (v7)
      *(_DWORD *)v7 += 2;
    v16 = v7;
    if ((_DWORD)v6 == 37)
    {
      v8 = *(objc_class **)(*((_QWORD *)v4 + 2) + 8);
      JSC::VM::clearException(v4);
      v10 = *(JSC::JSGlobalObject **)(a1 + 8);
      v9 = *(JSC::Wasm::StreamingCompiler **)(a1 + 16);
      v11.super.isa = v8;
    }
    else
    {
      v11.super.isa = (Class)WebCore::createDOMException(*(JSC **)(a1 + 8), v6, (JSC::JSGlobalObject *)&v16);
      v9 = *(JSC::Wasm::StreamingCompiler **)(a1 + 16);
      if (*((_QWORD *)v4 + 2))
      {
        JSC::Wasm::StreamingCompiler::cancel(v9);
LABEL_12:
        v13 = v16;
        v16 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        return MEMORY[0x19AEA32A0](v17);
      }
      v10 = *(JSC::JSGlobalObject **)(a1 + 8);
    }
    JSC::Wasm::StreamingCompiler::fail(v9, v10, v11);
    goto LABEL_12;
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_0,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_1,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(v15);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_0,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_1,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t a1)
{
  return JSC::Wasm::StreamingCompiler::finalize(**(JSC::Wasm::StreamingCompiler ***)(*(_QWORD *)a1 + 16), **(JSC::JSGlobalObject ***)(*(_QWORD *)a1 + 24));
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_0,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_1,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_0,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_1,WebCore::handleResponseOnStreamingAction(JSC::JSGlobalObject *,JSC::JSValue,JSC::Wasm::CompilerMode,JSC::JSObject *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(JSC::Wasm::StreamingCompiler ****a1, uint64_t a2)
{
  JSC::Wasm::StreamingCompiler ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  char v8;
  char *v9;

  v2 = *a1;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 20))
    goto LABEL_4;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
  v4 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v4 != -1)
  {
    v9 = &v8;
    ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v9, v3 + 8);
LABEL_4:
    JSC::Wasm::StreamingParser::addBytes();
    return JSC::Wasm::StreamingCompiler::finalize(**v2, *v2[1]);
  }
  v6 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(v6, v7);
}

uint64_t WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *(unsigned int *)(this + 52);
    v6 = *(WTF **)(this + 40);
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      do
      {
        v8 = *(WTF **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          WTF::fastFree(v8, a2);
        }
        v6 = (WTF *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
      v6 = *(WTF **)(v2 + 40);
    }
    if (v6)
    {
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 48) = 0;
      WTF::fastFree(v6, a2);
    }
    v9 = *(WTF **)(v2 + 24);
    if (v9)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    v10 = *(WTF **)(v2 + 8);
    if (v10)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v10, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

WTF::StringImpl **JSC::Identifier::fromUid(WTF::StringImpl **result, WTF::StringImpl *a2, WTF::StringImpl *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;

  v3 = this;
  v4 = result;
  v5 = *((_DWORD *)this + 4);
  if ((v5 & 0x20) != 0)
  {
    v6 = *(_DWORD *)this + 2;
  }
  else
  {
    if ((v5 & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
    }
    else
    {
      result = (WTF::StringImpl **)WTF::AtomStringImpl::addSlowCase();
      v3 = v7;
    }
    v6 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    if (!v6)
    {
      result = (WTF::StringImpl **)WTF::StringImpl::destroy(v3, a2);
      goto LABEL_6;
    }
  }
  *(_DWORD *)v3 = v6;
LABEL_6:
  *v4 = v3;
  return result;
}

uint64_t *WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::showModalDialog(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0,void,WebCore::LocalDOMWindow &>::call(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  JSC::VM *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  _QWORD v18[2];
  int v19;
  int v20;
  uint64_t v21;

  if (!*(_BYTE *)(a2 + 56))
  {
    v3 = (_QWORD *)result[1];
    ++*(_DWORD *)(a2 + 24);
    v4 = *(JSC::VM **)(*v3 + 56);
    v5 = *(_QWORD *)(a2 + 72);
    if (v5)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x1956B5BE0);
        }
        v5 = *(_QWORD *)(v5 + 240);
        if (v5)
        {
          v5 = *(_QWORD *)(v5 + 8);
          if (v5)
          {
            v6 = (unsigned int *)(v5 + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 + 1, v6));
          }
        }
      }
    }
    v8 = v3[2];
    v3[2] = v5;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v17 = off_1E31FE290;
        v17[1] = v9;
        v18[0] = v17;
        WTF::ensureOnMainThread();
        result = (_QWORD *)v18[0];
        v18[0] = 0;
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      }
      v5 = v3[2];
    }
    if (v5)
    {
      result = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v5 + 304) + 16) + 112), *(WebCore::DOMWrapperWorld **)(*((_QWORD *)v4 + 5182) + 16));
      v12 = (unsigned __int8 *)result[2];
    }
    else
    {
      v12 = 0;
    }
    v13 = v3[1];
    if ((unint64_t)(*(int *)(v13 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v14 = 10;
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 56);
      if (!v14)
      {
LABEL_23:
        if (*(_DWORD *)(a2 + 24) == 1)
          return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
        --*(_DWORD *)(a2 + 24);
        return result;
      }
    }
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v18[0];
    v18[0] = 0;
    v18[1] = v12;
    v19 = -1;
    v20 = 0x1000000;
    v21 = 0;
    result = (_QWORD *)JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v12, v4, (unint64_t)v15, v14, 0, (uint64_t)v18);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        result = (_QWORD *)WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_23;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18JSDatabaseCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      WebCore::Database::~Database((WebCore::Database *)result);
      return (unsigned int *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore18JSDatabaseCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unint64_t WebCore::createWrapper<WebCore::HTMLDocument,WebCore::Document>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  WebCore::JSHTMLDocument *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v16;
  WebCore::Node *v17;
  int v19;
  WebCore::Node *v20;

  v4 = *a2;
  *a2 = 0;
  v20 = v4;
  v5 = (WebCore::JSHTMLDocument *)*((_QWORD *)a1 + 7);
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSHTMLDocument::s_info + ~((_QWORD)&WebCore::JSHTMLDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLDocument::s_info + ~((_QWORD)&WebCore::JSHTMLDocument::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSHTMLDocument::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v19 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v19) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v19;
        if (v12 == &WebCore::JSHTMLDocument::s_info)
          goto LABEL_3;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSHTMLDocument::createPrototype(v5, a1, a3);
  Structure = WebCore::JSHTMLDocument::createStructure((uint64_t *)v5, (uint64_t)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSHTMLDocument::s_info);
LABEL_5:
  v16 = WebCore::JSHTMLDocument::create(v13, a1, (uint64_t *)&v20);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v16);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return v16;
}

unint64_t WebCore::createWrapper<WebCore::XMLDocument,WebCore::Document>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  WebCore::JSDocument *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  unint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v23;

  v4 = *a2;
  *a2 = 0;
  v23 = v4;
  v5 = (WebCore::JSDocument *)*((_QWORD *)a1 + 7);
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSXMLDocument::s_info + ~((_QWORD)&WebCore::JSXMLDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLDocument::s_info + ~((_QWORD)&WebCore::JSXMLDocument::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSXMLDocument::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSXMLDocument::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (JSC::JSCell *)WebCore::JSDocument::prototype(v5, a1, a3);
  Structure = WebCore::JSXMLDocumentPrototype::createStructure((uint64_t *)v5, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSXMLDocumentPrototype::create(v5, a1, Structure, v17);
  v19 = WebCore::JSXMLDocument::createStructure((uint64_t *)v5, (uint64_t)a1, v18);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSXMLDocument::s_info);
LABEL_8:
  v20 = WebCore::JSXMLDocument::create(v14, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  return v20;
}

unint64_t WebCore::createWrapper<WebCore::Document,WebCore::Document>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 7);
  v7 = *((_QWORD *)a1 + 412);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSDocument::s_info + ~((_QWORD)&WebCore::JSDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocument::s_info + ~((_QWORD)&WebCore::JSDocument::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSDocument::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSDocument::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = (JSC::JSCell *)WebCore::JSNode::prototype(*((WebCore::JSNode **)a1 + 7), a1, a3);
  Structure = WebCore::JSDocumentPrototype::createStructure((uint64_t *)v6, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v19 = (JSC::JSCell *)WebCore::JSDocumentPrototype::create((WebCore::JSDocumentPrototype *)v6, a1, Structure, v18);
  v20 = WebCore::JSDocument::createStructure((uint64_t *)v6, (uint64_t)a1, v19);
  v15 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSDocument::s_info);
  v6 = *((_QWORD *)a1 + 7);
LABEL_8:
  v21 = (_QWORD *)WebCore::JSDocument::subspaceForImpl((WebCore::JSDocument *)v6, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 48;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v35);
    v21[5] = SlowCase + (int)v35;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v23 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v24 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v24;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v15 + 76);
  *(_QWORD *)(SlowCase + 24) = v23;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v25 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v5)
    v26 = (uint64_t *)(v5 + 8);
  else
    v26 = 0;
  if (!*(_DWORD *)(v25 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v25;
    v30 = *v26;
    *v26 = (uint64_t)Allocator;
    if (!v30)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v37 = v5;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v34[2] = v25;
  v36 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v25 + 32), &v37, (uint64_t *)&v36);
  v30 = (uint64_t)v36;
  if (v36)
    goto LABEL_35;
  return SlowCase;
}

unint64_t WebCore::JSHTMLDocument::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSHTMLDocument *v5;
  _QWORD *v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  v5 = (WebCore::JSHTMLDocument *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSHTMLDocument::subspaceForImpl(v5, a2);
  result = v6[3];
  if (result < v6[4])
    goto LABEL_2;
  result = v6[5];
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(result + 8) ^ v6[6];
    v6[4] = result + HIDWORD(v11);
    v6[5] = result + (int)v11;
LABEL_2:
    v6[3] = result + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)result = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)result = a1 >> 4;
  *(_DWORD *)(result + 4) = v9;
  v10 = 16 * *(unsigned int *)(a1 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSXMLDocument::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSXMLDocument *v5;
  _QWORD *v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  v5 = (WebCore::JSXMLDocument *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSXMLDocument::subspaceForImpl(v5, a2);
  result = v6[3];
  if (result < v6[4])
    goto LABEL_2;
  result = v6[5];
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(result + 8) ^ v6[6];
    v6[4] = result + HIDWORD(v11);
    v6[5] = result + (int)v11;
LABEL_2:
    v6[3] = result + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)result = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)result = a1 >> 4;
  *(_DWORD *)(result + 4) = v9;
  v10 = 16 * *(unsigned int *)(a1 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore13CSSStyleSheetENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *a2;
    v6 = 8 * v3;
    do
    {
      v7 = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>>::convert(uint64_t result, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = result;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    return result;
  }
  v11 = *((_QWORD *)a2 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v4 = 1;
    v10 = 1;
    goto LABEL_12;
  }
  result = WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(a2, a3, (uint64_t)&v8);
  v4 = v10;
  if (!v10)
  {
    *(_QWORD *)(v3 + 8) = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(v3 + 16) = v7;
    *(_BYTE *)(v3 + 24) = 1;
LABEL_12:
    *(_DWORD *)(v3 + 32) = v4;
    return ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3392748[v4])(&v11, &v8);
  }
  *(_DWORD *)(v3 + 32) = 1;
  if (v4 != -1)
    return ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3392748[v4])(&v11, &v8);
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>>::convert<std::optional<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t result, JSC::JSGlobalObject *a2, uint64_t *a3, WebCore::Element *a4)
{
  JSC *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  WTF *v16;
  WebCore::JSDOMGlobalObject **v17;
  objc_class *v18;
  int v19;
  BOOL v20;
  JSValue v21;
  void *v22;
  JSC::VM *v23;
  JSC::JSObject *v24;
  JSC::JSGlobalObject *v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  _QWORD *v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  if (!*((_BYTE *)a3 + 16))
    return 2;
  v6 = (JSC *)result;
  v7 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v7)
  {
    v8 = 0;
    goto LABEL_10;
  }
  if (!(v7 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v7));
    v8 = (WTF *)result;
    v9 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *a3;
      v12 = 8 * v9;
      do
      {
        v13 = *(_QWORD *)(v11 + v10);
        *(_DWORD *)(v13 + 24) += 2;
        *(_QWORD *)(result + v10) = v13;
        v10 += 8;
      }
      while (v12 != v10);
    }
LABEL_10:
    v15 = (JSC::VM *)*((_QWORD *)v6 + 7);
    v37 = v15;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    if (v7 >= 9)
    {
      result = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33);
      v32 = (_DWORD)result == 1;
      v16 = (WTF *)((char *)v8 + 8 * v7);
    }
    else
    {
      v16 = (WTF *)((char *)v8 + 8 * v7);
      if (!(_DWORD)v7)
      {
LABEL_28:
        v30 = v34;
        v31 = v33;
        v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
        if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
          v25 = 0;
        else
          v25 = (JSC::JSGlobalObject *)JSC::constructArray();
        if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
        {
          v14 = JSC::objectConstructorFreeze(v6, v25, v24);
LABEL_32:
          v26 = *(uint64_t **)&v35[0];
          if (*(_QWORD *)&v35[0])
          {
            v30 = (WTF *)&v33;
            v29 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
            WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v26, v29);
          }
          if (v34 != (WTF *)((char *)v35 + 8) && v34)
            WTF::fastFree(v34, v22);
          if ((_DWORD)v7)
          {
            v27 = v8;
            do
            {
              v28 = *(_QWORD *)v27;
              *(_QWORD *)v27 = 0;
              if (v28)
              {
                if (*(_DWORD *)(v28 + 24) == 2)
                {
                  if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v28, v22);
                }
                else
                {
                  *(_DWORD *)(v28 + 24) -= 2;
                }
              }
              v27 = (WTF *)((char *)v27 + 8);
            }
            while (v27 != v16);
          }
          if (v8)
            WTF::fastFree(v8, v22);
          return v14;
        }
LABEL_54:
        v14 = 0;
        goto LABEL_32;
      }
    }
    v17 = (WebCore::JSDOMGlobalObject **)v8;
    while (1)
    {
      result = WebCore::toJS((WebCore *)result, a2, *v17, a4);
      v18 = (objc_class *)result;
      if (*((_DWORD *)v15 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
        if ((result & 1) != 0)
          goto LABEL_54;
      }
      v19 = v33;
      if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v20 = v34 == 0) : (v20 = 1), v20))
      {
        *((_QWORD *)v34 + v33) = v18;
        LODWORD(v33) = v19 + 1;
      }
      else
      {
        v21.super.isa = v18;
        result = JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v21);
        if ((_DWORD)result == 1)
          v32 = 1;
      }
      if (++v17 == (WebCore::JSDOMGlobalObject **)v16)
      {
        if (!v32)
          goto LABEL_28;
        JSC::throwOutOfMemoryError();
        goto LABEL_54;
      }
    }
  }
  __break(0xC471u);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJDnSG_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJDnSG_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJDnSG_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3392768[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3392768[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3392768[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3392768[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJDnN3WTF6RefPtrIN7WebCore4FileENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringENSA_INSB_11DOMFormDataENSD_ISJ_EENSF_ISJ_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3392768[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<JSC::WatchpointSet,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t JSC::Subspace::forEachMarkedCellInParallel<JSC::AbstractSlotVisitor,void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::AbstractSlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::AbstractSlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::Task::~Task(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t JSC::Subspace::forEachMarkedCellInParallel<JSC::AbstractSlotVisitor,void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::AbstractSlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::AbstractSlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::Task::~Task(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t JSC::Subspace::forEachMarkedCellInParallel<JSC::AbstractSlotVisitor,void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::AbstractSlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::AbstractSlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::Task::run(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  JSC::MarkedBlock *v6;
  char v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (result)
  {
    v5 = (unsigned int *)result;
    do
    {
      v6 = (JSC::MarkedBlock *)*((_QWORD *)v5 + 11);
      v7 = JSC::MarkedBlock::areMarksStale(v6);
      __dmb(0xBu);
      if ((v7 & 1) == 0)
      {
        v8 = v5[1];
        if (v8 <= 0x3FF)
        {
          v9 = (char *)v6 + 40;
          do
          {
            if (((*(_QWORD *)&v9[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v8) & 1) != 0)
            {
              v10 = *((_QWORD *)v5 + 11);
              v19 = *(_BYTE *)(a2 + 128);
              v21 = a2;
              v22 = 70;
              v24 = 0;
              v11 = *(_QWORD *)(a2 + 88);
              v23 = v11;
              if (v11 && *(_BYTE *)(v11 + 24))
              {
LABEL_22:
                __break(0xC471u);
                JUMPOUT(0x1956B6FE8);
              }
              *(_QWORD *)(a2 + 88) = &v21;
              *(_BYTE *)(a2 + 128) = 17;
              (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)(v10 + 16 * v8) & 0xFFFFFFFE) + 0x4C)
                                + 0xE8))();
              *(_BYTE *)(a2 + 128) = v19;
              *(_QWORD *)(v21 + 88) = v23;
            }
            v8 += *v5;
          }
          while (v8 < 0x400);
        }
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v5 = (unsigned int *)result;
    }
    while (result);
  }
  v12 = (unsigned __int8 *)(a1 + 33);
  do
    v13 = __ldxr(v12);
  while (__stxr(1u, v12));
  if ((v13 & 1) == 0)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v17 = *(uint64_t **)(v14 + 48);
    v15 = (uint64_t *)(v14 + 48);
    for (i = v17; i != v15; i = (uint64_t *)*i)
    {
      if ((*((_BYTE *)i + 33) & 1) != 0)
      {
        v20 = *(_BYTE *)(a2 + 128);
        v21 = a2;
        v22 = 70;
        v24 = 0;
        v18 = *(_QWORD *)(a2 + 88);
        v23 = v18;
        if (v18 && *(_BYTE *)(v18 + 24))
          goto LABEL_22;
        *(_QWORD *)(a2 + 88) = &v21;
        *(_BYTE *)(a2 + 128) = 17;
        result = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * ((_DWORD)i[14] & 0xFFFFFFFE) + 0x4C) + 0xE8))();
        *(_BYTE *)(a2 + 128) = v20;
        *(_QWORD *)(v21 + 88) = v23;
      }
    }
  }
  return result;
}

uint64_t JSC::Subspace::forEachMarkedCellInParallel<JSC::SlotVisitor,void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::SlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::SlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::Task::~Task(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t JSC::Subspace::forEachMarkedCellInParallel<JSC::SlotVisitor,void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::SlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::SlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::Task::~Task(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t JSC::Subspace::forEachMarkedCellInParallel<JSC::SlotVisitor,void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::SlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void WebCore::DOMGCOutputConstraint::executeImplImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(JSC::Subspace&)#1}::operator() const(JSC::Subspace&)::{lambda(JSC::SlotVisitor&,JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::Task::run(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t *v10;
  char v11;
  int v12;
  unsigned int *v13;
  JSC::MarkedBlock *v14;
  char v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char v19;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (result)
  {
    v13 = (unsigned int *)result;
    do
    {
      v14 = (JSC::MarkedBlock *)*((_QWORD *)v13 + 11);
      v15 = JSC::MarkedBlock::areMarksStale(v14);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
      {
        v16 = v13[1];
        if (v16 <= 0x3FF)
        {
          v17 = (char *)v14 + 40;
          do
          {
            if (((*(_QWORD *)&v17[(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v16) & 1) != 0)
            {
              v18 = (_DWORD *)(*((_QWORD *)v13 + 11) + 16 * v16);
              v19 = *(_BYTE *)(a2 + 128);
              *(_BYTE *)(a2 + 128) = 17;
              (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v18 & 0xFFFFFFFE) + 0x4C) + 0xE0))();
              *(_BYTE *)(a2 + 128) = v19;
            }
            v16 += *v13;
          }
          while (v16 < 0x400);
        }
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v13 = (unsigned int *)result;
    }
    while (result);
  }
  v5 = (unsigned __int8 *)(a1 + 33);
  do
    v6 = __ldxr(v5);
  while (__stxr(1u, v5));
  if ((v6 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(uint64_t **)(v7 + 48);
    v8 = (uint64_t *)(v7 + 48);
    for (i = v10; i != v8; i = (uint64_t *)*i)
    {
      if ((*((_BYTE *)i + 33) & 1) != 0)
      {
        v11 = *(_BYTE *)(a2 + 128);
        v12 = *((_DWORD *)i + 28);
        *(_BYTE *)(a2 + 128) = 17;
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(16
                                                               * *(unsigned int *)(16 * (v12 & 0xFFFFFFFE) + 0x4C)
                                                               + 0xE0))(i + 14, a2);
        *(_BYTE *)(a2 + 128) = v11;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::GCController::*&)(void),WebCore::GCController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::Detail::CallableWrapper<WebCore::GCController::GCController(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(WTF::RunLoop *a1, JSC::VM *a2)
{
  WebCore::GCController *v2;
  WTF::StringImpl *v4;
  uint64_t v5;

  {
    a1 = WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  v2 = (WebCore::GCController *)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v2 = (WebCore::GCController *)v5;
    WebCore::g_commonVMOrNull = v5;
    if (__ldaxr((unsigned int *)(v5 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v5 + 1096)))
    {
LABEL_8:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v5 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v5 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
      goto LABEL_11;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v5 + 192));
    goto LABEL_8;
  }
LABEL_11:
  v4 = WebCore::GCController::dumpHeapForVM(v2, a2);
  WebCore::WorkerGlobalScope::dumpGCHeapForWorkers(v4);
}

uint64_t WTF::Detail::CallableWrapper<void (*)(void),void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IndexKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IndexKey>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IndexKey,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IndexKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_DWORD *)(result + 56);
    do
    {
      *v10 = 0;
      *((_QWORD *)v10 - 5) = 0;
      *((_QWORD *)v10 - 4) = 0;
      v10 += 12;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 48 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v20 = *a1;
          v41 = v12;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v12 = (_QWORD *)(v20 + 48 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v12);
          v28 = v27;
          v29 = v20 + 48 * v27;
          v32 = *(_DWORD *)(v29 + 40);
          v31 = (_DWORD *)(v29 + 40);
          v30 = v32;
          if (v32 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E3392508[v30])(&v43, v20 + 48 * v27 + 8);
            v15 = *v14;
          }
          v33 = v20 + 48 * v28;
          *(_BYTE *)(v33 + 8) = 0;
          v8 = (void *)(v33 + 8);
          *v12 = v15;
          *v31 = -1;
          v34 = v4 + 48 * v11;
          v37 = *(_DWORD *)(v34 + 40);
          v35 = (_DWORD *)(v34 + 40);
          v36 = v37;
          if (v37 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E33928A0[v36])(&v44, v8, v4 + 48 * v11 + 8);
            *v31 = v36;
            v38 = *v35;
            if ((_DWORD)v38 != -1)
              ((void (*)(char *, uint64_t))off_1E3392508[v38])(&v45, v4 + 48 * v11 + 8);
          }
          *v35 = -1;
          if (v14 != a3)
            v12 = v41;
        }
        else
        {
          v16 = v4 + 48 * v11;
          v19 = *(_DWORD *)(v16 + 40);
          v18 = (_DWORD *)(v16 + 40);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(char *, uint64_t))off_1E3392508[v17])(&v42, v4 + 48 * v11 + 8);
          *v18 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::callOnIDBSerializationThreadAndWait(WTF::Function<void ()(JSC::JSGlobalObject &)> &&)::$_1 &&>>()
{
  _QWORD *v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t result;
  WTF *v4;
  void *v5;
  _QWORD *v6;
  unsigned int *v7;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E33928C8;
  v6 = v0;
  WTF::Thread::create();
  if (v7)
  {
    do
    {
      v1 = __ldaxr(v7);
      v2 = v1 - 1;
    }
    while (__stlxr(v2, v7));
    if (!v2)
    {
      atomic_store(1u, v7);
      WTF::Thread::~Thread((WTF::Thread *)v7);
      WTF::fastFree(v4, v5);
    }
  }
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::callOnIDBSerializationThreadAndWait(WTF::Function<void ()(JSC::JSGlobalObject &)> &&)::$_1::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t *v4;
  WTF *v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char v12;
  char v14;
  int v15;
  unint64_t SlowCase;
  WebCore::DOMWrapperWorld *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  WebCore::DOMWrapperWorld *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  int v49;
  __int16 *v50;
  char *v51;
  WebCore::DOMWrapperWorld *v52[3];
  uint64_t v53;
  uint64_t *v54;
  char **v55;

  if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736))
    result = WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
  v2 = 0;
  v3 = 0;
  v4 = &qword_1ECE82000;
  while (1)
  {
    if (__ldaxr((unsigned __int8 *)&word_1ECE827D8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&word_1ECE827D8))
    {
      goto LABEL_8;
    }
    result = MEMORY[0x19AEA534C](&word_1ECE827D8);
LABEL_8:
    if (*((_BYTE *)v4 + 2048))
    {
LABEL_9:
      v6 = 0;
      goto LABEL_10;
    }
    v10 = qword_1ECE827E0;
    v9 = qword_1ECE827E8;
    if (qword_1ECE827E0 == qword_1ECE827E8)
    {
      while (1)
      {
        v48 = 0x7FF0000000000000;
        v49 = 1;
        v53 = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v48);
        v54 = v11;
        result = WTF::TimeWithDynamicClockType::operator<();
        if (!(_DWORD)result)
        {
          v50 = &word_1ECE827D8;
          v51 = (char *)&word_1ECE827D8 + 1;
          v53 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
          v54 = &v53;
          v55 = &v51;
          v52[0] = (WebCore::DOMWrapperWorld *)WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
          v52[1] = (WebCore::DOMWrapperWorld *)v52;
          v52[2] = (WebCore::DOMWrapperWorld *)&v50;
          result = WTF::ParkingLot::parkConditionallyImpl();
          v12 = result & 1;
          goto LABEL_22;
        }
        v15 = __ldxr((unsigned __int8 *)&word_1ECE827D8);
        if (v15 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)&word_1ECE827D8))
            goto LABEL_37;
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)&word_1ECE827D8);
LABEL_37:
        v12 = 0;
LABEL_22:
        if (__ldaxr((unsigned __int8 *)&word_1ECE827D8))
        {
          __clrex();
LABEL_25:
          result = MEMORY[0x19AEA534C](&word_1ECE827D8);
          goto LABEL_26;
        }
        if (__stxr(1u, (unsigned __int8 *)&word_1ECE827D8))
          goto LABEL_25;
LABEL_26:
        if (*((_BYTE *)v4 + 2048))
          v14 = 0;
        else
          v14 = v12;
        if ((v14 & 1) == 0)
          goto LABEL_9;
        v10 = qword_1ECE827E0;
        if (qword_1ECE827E0 != qword_1ECE827E8)
        {
          v9 = qword_1ECE827E8;
          break;
        }
      }
    }
    v6 = *(WTF **)(qword_1ECE827F0 + 8 * v10);
    *(_QWORD *)(qword_1ECE827F0 + 8 * v10) = 0;
    if (v9 != v10)
    {
      v28 = qword_1ECE827F0;
      v29 = (WTF **)(qword_1ECE827F0 + 8 * v10);
      v30 = *v29;
      *v29 = 0;
      if (v30)
      {
        v31 = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        WTF::fastFree(v30, a2);
      }
      if (qword_1ECE827E0 <= v10)
      {
        result = (uint64_t)memmove((void *)(v28 + 8 * qword_1ECE827E0 + 8), (const void *)(v28 + 8 * qword_1ECE827E0), (size_t)v29 - v28 + -8 * qword_1ECE827E0);
        qword_1ECE827E0 = (qword_1ECE827E0 + 1) % (unint64_t)dword_1ECE827F8;
      }
      else
      {
        result = (uint64_t)memmove(v29, v29 + 1, v28 + 8 * qword_1ECE827E8 - (_QWORD)(v29 + 1));
        qword_1ECE827E8 = (qword_1ECE827E8 + (unint64_t)dword_1ECE827F8 - 1)
                        % dword_1ECE827F8;
      }
      v4 = &qword_1ECE82000;
    }
LABEL_10:
    v7 = __ldxr((unsigned __int8 *)&word_1ECE827D8);
    if (v7 != 1)
      break;
    if (__stlxr(0, (unsigned __int8 *)&word_1ECE827D8))
      goto LABEL_15;
    if (!v6)
      goto LABEL_72;
LABEL_16:
    WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)&v48);
    if (v2)
      goto LABEL_56;
    JSC::VM::create();
    v2 = v53;
    if (__ldaxr((unsigned int *)(v53 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v53 + 1096)))
    {
      goto LABEL_40;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v2 + 192));
LABEL_40:
    WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v2, 1);
    MEMORY[0x19AEA3288](&v53, v2);
    LODWORD(v52[0]) = 71575603;
    SlowCase = *(_QWORD *)(v2 + 40136);
    if (SlowCase < *(_QWORD *)(v2 + 40144))
    {
LABEL_41:
      *(_QWORD *)(v2 + 40136) = SlowCase + 128;
      goto LABEL_42;
    }
    SlowCase = *(_QWORD *)(v2 + 40152);
    if ((SlowCase & 1) == 0)
    {
      v34 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v2 + 40160);
      *(_QWORD *)(v2 + 40144) = SlowCase + HIDWORD(v34);
      *(_QWORD *)(v2 + 40152) = SlowCase + (int)v34;
      goto LABEL_41;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_42:
    *(_DWORD *)SlowCase = 0;
    MEMORY[0x19AEA4278](SlowCase, v2, 0, 2, v52, &WebCore::JSIDBSerializationGlobalObject::s_info, 0, 0);
    if (*(_BYTE *)(v2 + 755))
      __dmb(0xAu);
    v17 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v2 + 41456) + 16);
    ++*(_DWORD *)v17;
    v52[0] = v17;
    v18 = WebCore::JSIDBSerializationGlobalObject::create((JSC::VM *)v2, SlowCase, (uint64_t *)v52);
    if (!v3)
    {
      v20 = *(_QWORD *)(v2 + 712);
      if (!v20)
      {
        v35 = v18;
        JSC::HandleSet::grow((JSC::HandleSet *)(v2 + 672));
        v18 = v35;
        v20 = *(_QWORD *)(v2 + 712);
      }
      *(_QWORD *)(v2 + 712) = *(_QWORD *)v20;
      *(_QWORD *)(v20 + 16) = 0;
      v3 = (unint64_t *)(v20 + 16);
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      if (!v18)
        goto LABEL_52;
      goto LABEL_51;
    }
    if ((v18 != 0) != (*v3 != 0))
    {
      v20 = (unint64_t)(v3 - 2);
      if (!v18)
      {
        v22 = *(_QWORD *)v20;
        v21 = (_QWORD *)*(v3 - 1);
        *v21 = *(_QWORD *)v20;
        *(_QWORD *)(v22 + 8) = v21;
        *(_QWORD *)v20 = 0;
        *(v3 - 1) = 0;
        goto LABEL_52;
      }
LABEL_51:
      v23 = *(unint64_t **)((v20 & 0xFFFFFFFFFFFFF000) + 0x10);
      v24 = v23[3];
      v23 += 3;
      *(_QWORD *)(v20 + 8) = v23;
      *(v3 - 2) = v24;
      *v23 = v20;
      *(_QWORD *)(v24 + 8) = v20;
    }
LABEL_52:
    *v3 = v18;
    v25 = v52[0];
    v52[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::DOMWrapperWorld::~DOMWrapperWorld(v25, v19);
        WTF::fastFree(v32, v33);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    MEMORY[0x19AEA32A0](&v53);
LABEL_56:
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)v6 + 16))(*(_QWORD *)v6, *v3);
    WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)&v48);
    v27 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    result = WTF::fastFree(v6, v26);
  }
  __clrex();
LABEL_15:
  result = WTF::Lock::unlockSlow((WTF::Lock *)&word_1ECE827D8);
  if (v6)
    goto LABEL_16;
LABEL_72:
  if (v2)
  {
    MEMORY[0x19AEA3294](&v53, v2);
    if (v3)
    {
      v36 = v3 - 2;
      v37 = *(_QWORD *)(((unint64_t)(v3 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v38 = (unint64_t *)*(v3 - 1);
      if (v38)
      {
        v39 = *v36;
        *v38 = *v36;
        *(_QWORD *)(v39 + 8) = v38;
        *v36 = 0;
        *(v3 - 1) = 0;
      }
      *v36 = *(_QWORD *)(v37 + 40);
      *(_QWORD *)(v37 + 40) = v36;
    }
    do
    {
      v40 = __ldaxr((unsigned int *)v2);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v2));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)v2);
      v46 = (WTF *)MEMORY[0x19AEA3AF8](v2);
      WTF::fastFree(v46, v47);
    }
    return MEMORY[0x19AEA32A0](&v53);
  }
  else if (v3)
  {
    v42 = v3 - 2;
    v43 = *(_QWORD *)(((unint64_t)(v3 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v44 = (unint64_t *)*(v3 - 1);
    if (v44)
    {
      v45 = *v42;
      *v44 = *v42;
      *(_QWORD *)(v45 + 8) = v44;
      *v42 = 0;
      *(v3 - 1) = 0;
    }
    *v42 = *(_QWORD *)(v43 + 40);
    *(_QWORD *)(v43 + 40) = v42;
  }
  return result;
}

unint64_t WebCore::createWrapper<WebCore::CSSStyleRule,WebCore::CSSStyleRule>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  _QWORD *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *Allocator;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 7);
  v7 = *((_QWORD *)a1 + 412);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSCSSStyleRule::s_info + ~((_QWORD)&WebCore::JSCSSStyleRule::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSStyleRule::s_info + ~((_QWORD)&WebCore::JSCSSStyleRule::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSCSSStyleRule::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSCSSStyleRule::s_info)
          goto LABEL_6;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSCSSStyleRule::createPrototype(*((WebCore::JSCSSStyleRule **)a1 + 7), a1, a3);
  Structure = WebCore::JSCSSStyleRule::createStructure((uint64_t *)v6, (uint64_t)a1, Prototype);
  v15 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSCSSStyleRule::s_info);
  v6 = *((_QWORD *)a1 + 7);
LABEL_8:
  v18 = (_QWORD *)WebCore::JSCSSStyleRule::subspaceForImpl((WebCore::JSCSSStyleRule *)v6, a2);
  SlowCase = v18[3];
  if (SlowCase < v18[4])
  {
LABEL_9:
    v18[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v18[5];
  if ((SlowCase & 1) == 0)
  {
    v27 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v27);
    v18[5] = SlowCase + (int)v27;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v21 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v21;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 16 * *(unsigned int *)(v15 + 76);
  *(_QWORD *)(SlowCase + 24) = v20;
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v22 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSRule *)::owner = (uint64_t)&off_1E324B1A0;
  }
  v29 = v5;
  if ((SlowCase & 8) != 0)
    v23 = (SlowCase - 112) | 1;
  else
    v23 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v23 & 1) != 0)
    v24 = v23 + 47;
  else
    v24 = *(_QWORD *)v23 + 32;
  Allocator = *(_QWORD **)(v24 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v24 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::CSSRule *)::owner;
  Allocator[2] = v22;
  v28 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v22 + 32), &v29, (uint64_t *)&v28);
  if (v28)
    v28[1] = 3;
  return SlowCase;
}

unint64_t WebCore::JSCSSStyleValue::create(unint64_t a1, WebCore::JSCSSStyleValue *this, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = (_QWORD *)WebCore::JSCSSStyleValue::subspaceForImpl(this, this);
  result = v6[3];
  if (result < v6[4])
    goto LABEL_2;
  result = v6[5];
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(result + 8) ^ v6[6];
    v6[4] = result + HIDWORD(v11);
    v6[5] = result + (int)v11;
LABEL_2:
    v6[3] = result + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)result = 0;
  v8 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)result = a1 >> 4;
  *(_DWORD *)(result + 4) = v8;
  v9 = 16 * *(unsigned int *)(a1 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v9;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v10;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element*>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(void **)result;
    if (v8 < 2)
    {
      v10 = (void *)(result + 16);
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 1;
    }
    else
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(v3 + 8) = v8;
      *(_QWORD *)v3 = v10;
    }
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
    *(_DWORD *)(v14 + 24) += 2;
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = v5;
    do
    {
      if (*(_QWORD *)v11)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(a1, v11);
      WebCore::ContentType::~ContentType((WTF::StringImpl **)v11, v7);
      v11 = (WTF::StringImpl *)((char *)v11 + 8);
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v7);
  }
  if (v5)
    return WTF::fastFree(v5, v7);
  return result;
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - 1;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(WTF::StringImpl **)a2;
  v7 = (v5 ^ (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8)) & (v3 - 1);
  v8 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v7);
  v9 = *v8;
  if (*v8)
  {
    v11 = 0;
    do
    {
      v12 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v9 + 4) >> 8)) & v4)) & v4;
      if (v11 > v12)
      {
        v13 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = 0;
        v14 = *v8;
        *v8 = 0;
        v15 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = v14;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = *v8;
        *v8 = v13;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        v11 = v12;
      }
      v7 = (v7 + 1) & v4;
      ++v11;
      v8 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v7);
      v9 = *v8;
    }
    while (*v8);
    v6 = *(WTF::StringImpl **)a2;
  }
  *(_QWORD *)a2 = 0;
  result = *v8;
  *v8 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::String const&)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(decltype(nullptr))#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>> &>(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;
  int v3;

  result = *a2;
  if (*a2)
  {
    v3 = result[4];
    result[4] = v3 + 1;
    if (v3)
      result[4] = v3;
    else
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

JSC::MarkedVectorBase *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::String const&)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(decltype(nullptr))#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  objc_class *v7;
  WTF::StringImpl *v8;
  JSC::MarkedVectorBase *result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  JSValue v16;
  WTF::StringImpl *v17;

  v2 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (!*a2)
    goto LABEL_20;
  v5 = *(_DWORD *)(v2 + 4);
  if (v5 != 1)
  {
    if (v5)
      goto LABEL_4;
LABEL_20:
    v7 = *(objc_class **)(v3 + 41968);
    goto LABEL_5;
  }
  v13 = *(unsigned __int8 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    v14 = *v13;
LABEL_17:
    v7 = *(objc_class **)(v3 + 8 * v14 + 42216);
    goto LABEL_5;
  }
  v15 = *(unsigned __int16 *)v13;
  if (v15 <= 0xFF)
  {
    v14 = v15;
    goto LABEL_17;
  }
LABEL_4:
  *(_DWORD *)v2 += 2;
  v17 = (WTF::StringImpl *)v2;
  v7 = (objc_class *)JSC::JSString::create(v3, &v17);
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_5:
  v10 = *(unsigned int *)(v4 + 8);
  result = (JSC::MarkedVectorBase *)(v4 + 8);
  if ((_DWORD)v10 != *(_DWORD *)(v4 + 12)
    && ((v11 = *(_QWORD *)(v4 + 16), v11 != v4 + 32) ? (v12 = v11 == 0) : (v12 = 1), v12))
  {
    *(_QWORD *)(v11 + 8 * v10) = v7;
    *(_DWORD *)result = v10 + 1;
  }
  else
  {
    v16.super.isa = v7;
    result = (JSC::MarkedVectorBase *)JSC::MarkedVectorBase::slowAppend(result, v16);
    if ((_DWORD)result == 1)
      *(_BYTE *)v4 = 1;
  }
  return result;
}

JSC::MarkedVectorBase *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::String const&)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>)#1},WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(WebCore::Element &,std::variant<decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>>)::$_0::operator() const(JSC::JSGlobalObject *,WebCore::JSDOMGlobalObject *,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(decltype(nullptr))#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,WTF::String,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>> &>(uint64_t **a1, WTF **a2)
{
  uint64_t *v2;
  WTF *v3;
  uint64_t v4;
  JSValue v5;
  JSC::MarkedVectorBase *result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    ++*((_DWORD *)v3 + 4);
  v4 = *v2;
  v5.super.isa = (Class)WebCore::wrap<WebCore::DOMFormData>(*(_QWORD *)v2[1], *(_QWORD *)v2[2], v3);
  result = (JSC::MarkedVectorBase *)(v4 + 8);
  v7 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v7 != *(_DWORD *)(v4 + 12)
    && ((v8 = *(_QWORD *)(v4 + 16), v8 != v4 + 32) ? (v9 = v8 == 0) : (v9 = 1), v9))
  {
    *(JSValue *)(v8 + 8 * v7) = v5;
    *(_DWORD *)result = v7 + 1;
  }
  else
  {
    result = (JSC::MarkedVectorBase *)JSC::MarkedVectorBase::slowAppend(result, v5);
    if ((_DWORD)result == 1)
      *(_BYTE *)v4 = 1;
  }
  if (*((_DWORD *)v3 + 4) == 1)
    return (JSC::MarkedVectorBase *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v3 + 16))(v3);
  --*((_DWORD *)v3 + 4);
  return result;
}

size_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(_QWORD *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  size_t result;
  int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  char v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  char v40[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char __s[16];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD __src[7];
  size_t __n[2];
  _OWORD v90[7];
  size_t v91[2];
  _OWORD v92[7];
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      goto LABEL_56;
    }
  }
  else
  {
    v12 = 0;
  }
  WTF::numberToString();
  HIDWORD(v63) = strlen(__s);
  v14 = *(_BYTE **)a4;
  v13 = *(_QWORD *)(a4 + 8);
  if (v13)
  {
    v15 = v13 - 1;
    if ((unint64_t)(v13 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B8858);
    }
  }
  else
  {
    v15 = 0;
  }
  WTF::numberToString();
  HIDWORD(v55) = strlen(v48);
  v17 = *(_BYTE **)a6;
  v16 = *(_QWORD *)(a6 + 8);
  if (v16)
  {
    v18 = v16 - 1;
    if (!((unint64_t)(v16 - 1) >> 31))
      goto LABEL_7;
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x1956B882CLL);
  }
  v18 = 0;
LABEL_7:
  WTF::numberToString();
  result = strlen(v40);
  HIDWORD(v47) = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_48;
  v20 = result + 1;
  if (__OFADD__((_DWORD)result, 1))
    goto LABEL_48;
  v21 = 0;
  v22 = __OFADD__((_DWORD)v18, v20);
  v23 = v18 + v20;
  if (v22 || (HIDWORD(v55) & 0x80000000) != 0)
    goto LABEL_41;
  v24 = HIDWORD(v55) + v23;
  if (__OFADD__(HIDWORD(v55), v23))
    goto LABEL_48;
  v21 = 0;
  v22 = __OFADD__((_DWORD)v15, v24);
  v25 = v15 + v24;
  v26 = v22;
  if ((HIDWORD(v63) & 0x80000000) != 0 || (v26 & 1) != 0)
    goto LABEL_41;
  v27 = HIDWORD(v63) + v25;
  if (__OFADD__(HIDWORD(v63), v25))
    goto LABEL_48;
  v28 = (v12 + v27);
  if (__OFADD__((_DWORD)v12, v27))
    goto LABEL_48;
  v29 = *a8;
  v84 = v60;
  v85 = v61;
  v86 = v62;
  v87 = v63;
  v80 = *(_OWORD *)__s;
  v81 = v57;
  v82 = v58;
  v83 = v59;
  v74 = v50;
  v75 = v51;
  v72 = *(_OWORD *)v48;
  v73 = v49;
  v78 = v54;
  v79 = v55;
  v76 = v52;
  v77 = v53;
  v66 = v42;
  v67 = v43;
  v64 = *(_OWORD *)v40;
  v65 = v41;
  v70 = v46;
  v71 = v47;
  v68 = v44;
  v69 = v45;
  if (!(_DWORD)v28)
  {
    v21 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_41;
  }
  if ((v28 & 0x80000000) != 0)
  {
LABEL_48:
    v21 = 0;
    goto LABEL_41;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
  v21 = *(_QWORD *)&v92[0];
  if (*(_QWORD *)&v92[0])
  {
    v30 = (_BYTE *)(*(_QWORD *)&v92[0] + 20);
    **(_DWORD **)&v92[0] = 2;
    *(_DWORD *)(v21 + 4) = v28;
    *(_QWORD *)(v21 + 8) = v21 + 20;
    *(_DWORD *)(v21 + 16) = 4;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        *v30 = *a2;
      else
        result = (size_t)memcpy((void *)(v21 + 20), a2, v12);
    }
    v31 = &v30[v12];
    __src[4] = v84;
    __src[5] = v85;
    __src[6] = v86;
    *(_OWORD *)__n = v87;
    __src[0] = v80;
    __src[1] = v81;
    __src[2] = v82;
    __src[3] = v83;
    v32 = HIDWORD(v87);
    if (HIDWORD(v87))
    {
      if (HIDWORD(v87) == 1)
        *v31 = __src[0];
      else
        result = (size_t)memcpy(v31, __src, HIDWORD(v87));
    }
    v33 = &v31[v32];
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 == 1)
        *v33 = *v14;
      else
        result = (size_t)memcpy(v33, v14, v15);
    }
    v34 = &v33[v15];
    v90[4] = v76;
    v90[5] = v77;
    v90[6] = v78;
    *(_OWORD *)v91 = v79;
    v90[0] = v72;
    v90[1] = v73;
    v90[2] = v74;
    v90[3] = v75;
    v35 = HIDWORD(v79);
    if (HIDWORD(v79))
    {
      if (HIDWORD(v79) == 1)
        *v34 = v90[0];
      else
        result = (size_t)memcpy(v34, v90, HIDWORD(v79));
    }
    v36 = &v34[v35];
    if ((_DWORD)v18)
    {
      if ((_DWORD)v18 == 1)
        *v36 = *v17;
      else
        result = (size_t)memcpy(v36, v17, v18);
    }
    v37 = &v36[v18];
    v92[4] = v68;
    v92[5] = v69;
    v92[6] = v70;
    v93 = v71;
    v92[0] = v64;
    v92[1] = v65;
    v92[2] = v66;
    v92[3] = v67;
    v38 = HIDWORD(v71);
    if (HIDWORD(v71))
    {
      if (HIDWORD(v71) == 1)
        *v37 = v92[0];
      else
        result = (size_t)memcpy(v37, v92, HIDWORD(v93));
    }
    v37[v38] = v29;
  }
LABEL_41:
  *a1 = v21;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, __int128 *a7, char a8)
{
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  int8x16_t *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v43;
  int8x16_t *v44;
  char *v45;
  __int128 v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[7];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[8];
  uint64_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &result[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v74.val[0] = *a2;
      v11 = a2[1];
      v78.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v78.val[1] = 0uLL;
      v82.val[0] = v11;
      v74.val[1] = 0uLL;
      v14 = result;
      vst2q_s8(v14, v74);
      v14 += 32;
      v82.val[1] = 0uLL;
      vst2q_s8(v14, v82);
      v15 = result + 64;
      vst2q_s8(v15, v78);
      v16 = result + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      result += 128;
    }
    while (result != v9);
    result = v9;
  }
  while (result != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v17;
    result += 2;
  }
  v18 = a4[5];
  v62[4] = a4[4];
  v62[5] = v18;
  v19 = a4[7];
  v62[6] = a4[6];
  v63 = v19;
  v20 = a4[1];
  v62[0] = *a4;
  v62[1] = v20;
  v21 = a4[3];
  v62[2] = a4[2];
  v62[3] = v21;
  v56 = a7[2];
  v57 = a7[3];
  v54 = *a7;
  v55 = a7[1];
  v60 = a7[6];
  v61 = a7[7];
  v22 = &v8[2 * HIDWORD(v63)];
  v58 = a7[4];
  v59 = a7[5];
  if (HIDWORD(v63) >= 0x40)
  {
    v24 = &v8[2 * (HIDWORD(v63) & 0xFFFFFFC0)];
    v23 = (int8x16_t *)v62;
    v25 = 0uLL;
    do
    {
      v75.val[0] = *v23;
      v26 = v23[1];
      v79.val[0] = v23[2];
      v27 = v23[3];
      v23 += 4;
      v28 = v27;
      v79.val[1] = 0uLL;
      v83.val[0] = v26;
      v75.val[1] = 0uLL;
      v29 = v8;
      vst2q_s8(v29, v75);
      v29 += 32;
      v83.val[1] = 0uLL;
      vst2q_s8(v29, v83);
      v30 = v8 + 64;
      vst2q_s8(v30, v79);
      v31 = v8 + 96;
      vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
      v8 += 128;
    }
    while (v8 != v24);
    v8 = v24;
  }
  else
  {
    v23 = (int8x16_t *)v62;
  }
  while (v8 != v22)
  {
    v32 = v23->u8[0];
    v23 = (int8x16_t *)((char *)v23 + 1);
    *(_WORD *)v8 = v32;
    v8 += 2;
  }
  v68 = v58;
  v69 = v59;
  v70 = v60;
  v71 = v61;
  v64 = v54;
  v65 = v55;
  v33 = &v22[2 * a6];
  v66 = v56;
  v67 = v57;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v34 = &v22[2 * (a6 & 0xFFFFFFC0)];
    v35 = 0uLL;
    do
    {
      v76.val[0] = *a5;
      v36 = a5[1];
      v80.val[0] = a5[2];
      v37 = a5[3];
      a5 += 4;
      v38 = v37;
      v80.val[1] = 0uLL;
      v84.val[0] = v36;
      v76.val[1] = 0uLL;
      v39 = v22;
      vst2q_s8(v39, v76);
      v39 += 32;
      v84.val[1] = 0uLL;
      vst2q_s8(v39, v84);
      v40 = v22 + 64;
      vst2q_s8(v40, v80);
      v41 = v22 + 96;
      vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
      v22 += 128;
    }
    while (v22 != v34);
    v22 = v34;
  }
  while (v22 != v33)
  {
    v42 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v22 = v42;
    v22 += 2;
  }
  v72[4] = v68;
  v72[5] = v69;
  v72[6] = v70;
  v72[7] = v71;
  v72[0] = v64;
  v72[1] = v65;
  v72[2] = v66;
  v72[3] = v67;
  v43 = &v33[2 * HIDWORD(v71)];
  if (HIDWORD(v71) >= 0x40)
  {
    v45 = &v33[2 * (HIDWORD(v71) & 0xFFFFFFC0)];
    v44 = (int8x16_t *)v72;
    v46 = 0uLL;
    do
    {
      v77.val[0] = *v44;
      v47 = v44[1];
      v81.val[0] = v44[2];
      v48 = v44[3];
      v44 += 4;
      v49 = v48;
      v81.val[1] = 0uLL;
      v85.val[0] = v47;
      v77.val[1] = 0uLL;
      v50 = v33;
      vst2q_s8(v50, v77);
      v50 += 32;
      v85.val[1] = 0uLL;
      vst2q_s8(v50, v85);
      v51 = v33 + 64;
      vst2q_s8(v51, v81);
      v52 = v33 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
      v33 += 128;
    }
    while (v33 != v45);
    v33 = v45;
  }
  else
  {
    v44 = (int8x16_t *)v72;
  }
  while (v33 != v43)
  {
    v53 = v44->u8[0];
    v44 = (int8x16_t *)((char *)v44 + 1);
    *(_WORD *)v33 = v53;
    v33 += 2;
  }
  *(_WORD *)v43 = a8;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_()
{
  return 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, _BYTE *a2)
{
  if (*a2)
    return 7;
  else
    return 6;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, unsigned int *a2)
{
  return *a2 | 0xFFFE000000000000;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = *a2;
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, uint64_t *a2)
{
  if (*a2 == (int)*a2)
    return *a2 | 0xFFFE000000000000;
  else
    return COERCE__INT64((double)*a2) + 0x2000000000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;

  if ((*a2 & 0x80000000) != 0)
    v2 = COERCE__INT64((double)*a2) + 0x2000000000000;
  else
    v2 = *a2 | 0xFFFE000000000000;
  if (HIDWORD(*a2))
    return COERCE__INT64((double)*a2) + 0x2000000000000;
  else
    return v2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, float *a2)
{
  double v2;
  uint64_t v3;

  v2 = *a2;
  if (COERCE_UNSIGNED_INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)*a2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *a2;
  v3 = *(_QWORD *)(**(_QWORD **)a1 + 56);
  if (!v2)
    return *(_QWORD *)(v3 + 41968);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  uint64_t v6;
  JSValue v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  JSC::VM *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v16;
  WTF *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  WTF *v21;
  _OWORD v22[4];
  uint64_t v23;

  v3 = *a1;
  v19 = 0;
  v20 = 0x800000000;
  v21 = (WTF *)((char *)v22 + 8);
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 9)
  {
    v19 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v20) == 1;
    v4 = *(_DWORD *)(a2 + 12);
    if (!v4)
      goto LABEL_19;
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  v5 = *(_BYTE **)a2;
  v6 = v4;
  do
  {
    if (*v5)
      v7.super.isa = (Class)7;
    else
      v7.super.isa = (Class)6;
    v8 = v20;
    if ((_DWORD)v20 != HIDWORD(v20) && (v21 != (WTF *)((char *)v22 + 8) ? (v9 = v21 == 0) : (v9 = 1), v9))
    {
      *((JSValue *)v21 + v20) = v7;
      LODWORD(v20) = v8 + 1;
    }
    else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v20, v7) == 1)
    {
      v19 = 1;
    }
    ++v5;
    --v6;
  }
  while (v6);
LABEL_19:
  if (v19)
  {
    __break(0xC471u);
    JUMPOUT(0x1956B8E78);
  }
  v10 = *(_QWORD *)(v3 + 8);
  v17 = v21;
  v18 = v20;
  v11 = *(JSC::VM **)(v10 + 56);
  if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
    v13 = 0;
  else
    v13 = JSC::constructArray();
  v14 = *(uint64_t **)&v22[0];
  if (*(_QWORD *)&v22[0])
  {
    v17 = (WTF *)&v20;
    v16 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v22[0], (uint64_t *)&v17);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v14, v16);
  }
  if (v21 != (WTF *)((char *)v22 + 8) && v21)
    WTF::fastFree(v21, v12);
  return v13;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  JSValue v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  JSC::VM *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v16;
  WTF *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  WTF *v21;
  _OWORD v22[4];
  uint64_t v23;

  v3 = *a1;
  v19 = 0;
  v20 = 0x800000000;
  v21 = (WTF *)((char *)v22 + 8);
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v4 = *((_DWORD *)a2 + 3);
  if (v4 >= 9)
  {
    v19 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v20) == 1;
    v4 = *((_DWORD *)a2 + 3);
    if (!v4)
      goto LABEL_16;
  }
  else if (!v4)
  {
    goto LABEL_16;
  }
  v5 = *a2;
  v6 = 4 * v4;
  do
  {
    v7.super.isa = (Class)(*v5 | 0xFFFE000000000000);
    v8 = v20;
    if ((_DWORD)v20 != HIDWORD(v20) && (v21 != (WTF *)((char *)v22 + 8) ? (v9 = v21 == 0) : (v9 = 1), v9))
    {
      *((JSValue *)v21 + v20) = v7;
      LODWORD(v20) = v8 + 1;
    }
    else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v20, v7) == 1)
    {
      v19 = 1;
    }
    ++v5;
    v6 -= 4;
  }
  while (v6);
LABEL_16:
  if (v19)
  {
    __break(0xC471u);
    JUMPOUT(0x1956B9054);
  }
  v10 = *(_QWORD *)(v3 + 16);
  v17 = v21;
  v18 = v20;
  v11 = *(JSC::VM **)(v10 + 56);
  if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
    v13 = 0;
  else
    v13 = JSC::constructArray();
  v14 = *(uint64_t **)&v22[0];
  if (*(_QWORD *)&v22[0])
  {
    v17 = (WTF *)&v20;
    v16 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v22[0], (uint64_t *)&v17);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v14, v16);
  }
  if (v21 != (WTF *)((char *)v22 + 8) && v21)
    WTF::fastFree(v21, v12);
  return v13;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  JSValue v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  JSC::VM *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v17;
  WTF *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  WTF *v22;
  _OWORD v23[4];
  uint64_t v24;

  v3 = *a1;
  v20 = 0;
  v21 = 0x800000000;
  v22 = (WTF *)((char *)v23 + 8);
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  v4 = *((_DWORD *)a2 + 3);
  if (v4 >= 9)
  {
    v20 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v21) == 1;
    v4 = *((_DWORD *)a2 + 3);
    if (!v4)
      goto LABEL_19;
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  v5 = *a2;
  v6 = 4 * v4;
  do
  {
    v7 = *v5;
    if ((v7 & 0x80000000) != 0)
      v8.super.isa = (Class)(COERCE__INT64((double)v7) + 0x2000000000000);
    else
      v8.super.isa = (Class)(v7 | 0xFFFE000000000000);
    v9 = v21;
    if ((_DWORD)v21 != HIDWORD(v21) && (v22 != (WTF *)((char *)v23 + 8) ? (v10 = v22 == 0) : (v10 = 1), v10))
    {
      *((JSValue *)v22 + v21) = v8;
      LODWORD(v21) = v9 + 1;
    }
    else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v21, v8) == 1)
    {
      v20 = 1;
    }
    ++v5;
    v6 -= 4;
  }
  while (v6);
LABEL_19:
  if (v20)
  {
    __break(0xC471u);
    JUMPOUT(0x1956B9250);
  }
  v11 = *(_QWORD *)(v3 + 24);
  v18 = v22;
  v19 = v21;
  v12 = *(JSC::VM **)(v11 + 56);
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    v14 = 0;
  else
    v14 = JSC::constructArray();
  v15 = *(uint64_t **)&v23[0];
  if (*(_QWORD *)&v23[0])
  {
    v18 = (WTF *)&v21;
    v17 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v23[0], (uint64_t *)&v18);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v15, v17);
  }
  if (v22 != (WTF *)((char *)v23 + 8) && v22)
    WTF::fastFree(v22, v13);
  return v14;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  if (*a2)
    return JSC::ArrayBufferView::wrap(*a2, *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 32), *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 40));
  else
    return 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  if (*a2)
    return JSC::ArrayBufferView::wrap(*a2, *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 48), *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 56));
  else
    return 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  if (*a2)
    return JSC::ArrayBufferView::wrap(*a2, *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 80), *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 88));
  else
    return 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  if (*a2)
    return JSC::ArrayBufferView::wrap(*a2, *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 64), *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 72));
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLBuffer>(*(_QWORD *)(*(_QWORD *)a1 + 96), *(_QWORD *)(*(_QWORD *)a1 + 104), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLFramebuffer>(*(_QWORD *)(*(_QWORD *)a1 + 112), *(_QWORD *)(*(_QWORD *)a1 + 120), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLProgram>(*(_QWORD *)(*(_QWORD *)a1 + 128), *(_QWORD *)(*(_QWORD *)a1 + 136), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLQuery>(*(_QWORD *)(*(_QWORD *)a1 + 208), *(_QWORD *)(*(_QWORD *)a1 + 216), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLRenderbuffer>(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)a1 + 152), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLSampler>(*(_QWORD *)(*(_QWORD *)a1 + 224), *(_QWORD *)(*(_QWORD *)a1 + 232), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLTexture>(*(_QWORD *)(*(_QWORD *)a1 + 160), *(_QWORD *)(*(_QWORD *)a1 + 168), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF::StringImpl **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLTimerQueryEXT>(*(_QWORD *)(*(_QWORD *)a1 + 176), *(_QWORD *)(*(_QWORD *)a1 + 184), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLTransformFeedback>(*(_QWORD *)(*(_QWORD *)a1 + 240), *(_QWORD *)(*(_QWORD *)a1 + 248), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLVertexArrayObject>(*(_QWORD *)(*(_QWORD *)a1 + 256), *(_QWORD *)(*(_QWORD *)a1 + 264), *a2);
  else
    return 2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNSA_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS8_6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSI_IiLm0ESJ_Lm16ESK_EENSI_IjLm0ESJ_Lm16ESK_EENS8_6RefPtrINSB_21GenericTypedArrayViewINSB_14Float32AdaptorEEENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEENSO_INSP_INSB_12Int32AdaptorEEENSS_ISY_EENSU_ISY_EEEENSO_INSP_INSB_13Uint32AdaptorEEENSS_IS13_EENSU_IS13_EEEENSO_INSP_INSB_12Uint8AdaptorEEENSS_IS18_EENSU_IS18_EEEENSO_INSA_11WebGLBufferENSS_IS1C_EENSU_IS1C_EEEENSO_INSA_16WebGLFramebufferENSS_IS1G_EENSU_IS1G_EEEENSO_INSA_12WebGLProgramENSS_IS1K_EENSU_IS1K_EEEENSO_INSA_10WebGLQueryENSS_IS1O_EENSU_IS1O_EEEENSO_INSA_17WebGLRenderbufferENSS_IS1S_EENSU_IS1S_EEEENSO_INSA_12WebGLSamplerENSS_IS1W_EENSU_IS1W_EEEENSO_INSA_12WebGLTextureENSS_IS20_EENSU_IS20_EEEENSO_INSA_18WebGLTimerQueryEXTENSS_IS24_EENSU_IS24_EEEENSO_INSA_22WebGLTransformFeedbackENSS_IS28_EENSU_IS28_EEEENSO_INSA_22WebGLVertexArrayObjectENSS_IS2C_EENSU_IS2C_EEEENSO_INSA_25WebGLVertexArrayObjectOESENSS_IS2G_EENSU_IS2G_EEEEEEEE3__0JZNSA_16convertToJSValueESD_SF_S2M_E3__1ZNSA_16convertToJSValueESD_SF_S2M_E3__2ZNSA_16convertToJSValueESD_SF_S2M_E3__3ZNSA_16convertToJSValueESD_SF_S2M_E3__4ZNSA_16convertToJSValueESD_SF_S2M_E3__5ZNSA_16convertToJSValueESD_SF_S2M_E3__6ZNSA_16convertToJSValueESD_SF_S2M_E3__7ZNSA_16convertToJSValueESD_SF_S2M_E3__8ZNSA_16convertToJSValueESD_SF_S2M_E3__9ZNSA_16convertToJSValueESD_SF_S2M_E4__10ZNSA_16convertToJSValueESD_SF_S2M_E4__11ZNSA_16convertToJSValueESD_SF_S2M_E4__12ZNSA_16convertToJSValueESD_SF_S2M_E4__13ZNSA_16convertToJSValueESD_SF_S2M_E4__14ZNSA_16convertToJSValueESD_SF_S2M_E4__15ZNSA_16convertToJSValueESD_SF_S2M_E4__16ZNSA_16convertToJSValueESD_SF_S2M_E4__17ZNSA_16convertToJSValueESD_SF_S2M_E4__18ZNSA_16convertToJSValueESD_SF_S2M_E4__19ZNSA_16convertToJSValueESD_SF_S2M_E4__20ZNSA_16convertToJSValueESD_SF_S2M_E4__21ZNSA_16convertToJSValueESD_SF_S2M_E4__22ZNSA_16convertToJSValueESD_SF_S2M_E4__23ZNSA_16convertToJSValueESD_SF_S2M_E4__24ZNSA_16convertToJSValueESD_SF_S2M_E4__25EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJDnbijxyfSH_SL_SM_SN_SW_S11_S16_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_S23_S27_S2B_S2F_S2J_EEEEEEDcT_DpT0_(uint64_t a1, WTF::StringImpl **a2)
{
  if (*a2)
    return WebCore::wrap<WebCore::WebGLVertexArrayObjectOES>(*(_QWORD *)(*(_QWORD *)a1 + 192), *(_QWORD *)(*(_QWORD *)a1 + 200), *a2);
  else
    return 2;
}

char *WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(_QWORD *a1, _BYTE *a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, uint64_t a10, _QWORD *a11, char *a12, uint64_t a13, char *a14, uint64_t a15, char *a16, uint64_t a17)
{
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *result;
  size_t v28;
  int v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  char v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v59;
  size_t v60;
  size_t v61;
  size_t v62;
  size_t v63;
  _BYTE **v64;
  _QWORD v65[4];

  v65[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v19 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_94;
  }
  else
  {
    v19 = 0;
  }
  if (a6)
  {
    v20 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B98DCLL);
    }
  }
  else
  {
    v20 = 0;
  }
  if (a8)
  {
    v21 = a8 - 1;
    if ((unint64_t)(a8 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B990CLL);
    }
  }
  else
  {
    v21 = 0;
  }
  if (a10)
  {
    v22 = a10 - 1;
    if ((unint64_t)(a10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B993CLL);
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = a11[1];
  if (v23)
  {
    if ((unint64_t)--v23 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9968);
    }
  }
  v24 = a11[3];
  if (v24)
  {
    if ((unint64_t)--v24 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9994);
    }
  }
  v25 = a11[5];
  if (v25)
  {
    if ((unint64_t)--v25 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B99C0);
    }
  }
  if (a13)
  {
    v26 = a13 - 1;
    if ((unint64_t)(a13 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B99ECLL);
    }
  }
  else
  {
    v26 = 0;
  }
  if (a15)
  {
    result = (char *)(a15 - 1);
    if ((unint64_t)(a15 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9A1CLL);
    }
  }
  else
  {
    result = 0;
  }
  if (a17)
  {
    v28 = a17 - 1;
    if (!((unint64_t)(a17 - 1) >> 31))
      goto LABEL_18;
LABEL_94:
    __break(0xC471u);
    JUMPOUT(0x1956B98ACLL);
  }
  v28 = 0;
LABEL_18:
  v29 = 0;
  v30 = v24 + v23 + v25;
  v31 = a4;
  do
  {
    ++v29;
    v32 = v31 > 9;
    v31 /= 0xAu;
  }
  while (v32);
  v33 = (_DWORD)result + v28;
  if (__OFADD__((_DWORD)result, (_DWORD)v28))
    goto LABEL_72;
  v34 = 0;
  v35 = __OFADD__((_DWORD)v26, v33);
  v36 = v26 + v33;
  v37 = v35;
  if ((v30 & 0x80000000) == 0 && (v37 & 1) == 0)
  {
    v35 = __OFADD__(v30, v36);
    v38 = v30 + v36;
    if (v35)
      goto LABEL_72;
    v35 = __OFADD__((_DWORD)v22, v38);
    v39 = v22 + v38;
    if (v35)
      goto LABEL_72;
    v35 = __OFADD__((_DWORD)v21, v39);
    v40 = v21 + v39;
    if (v35)
      goto LABEL_72;
    v34 = 0;
    v35 = __OFADD__((_DWORD)v20, v40);
    v41 = v20 + v40;
    if (!v35 && (v29 & 0x80000000) == 0)
    {
      v35 = __OFADD__(v29, v41);
      v42 = v29 + v41;
      if (!v35)
      {
        v43 = (v19 + v42);
        if (!__OFADD__((_DWORD)v19, v42))
        {
          v63 = (size_t)result;
          if (!(_DWORD)v43)
          {
            v34 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            goto LABEL_63;
          }
          v59 = v30;
          v60 = v28;
          v61 = v21;
          v62 = v22;
          if ((v43 & 0x80000000) == 0)
          {
            v45 = a1;
            result = (char *)WTF::tryFastCompactMalloc((WTF *)(v43 + 20));
            v34 = v65[0];
            if (!v65[0])
              goto LABEL_63;
            v46 = (_BYTE *)(v65[0] + 20);
            *(_DWORD *)v65[0] = 2;
            *(_DWORD *)(v34 + 4) = v43;
            *(_QWORD *)(v34 + 8) = v34 + 20;
            *(_DWORD *)(v34 + 16) = 4;
            if ((_DWORD)v19)
            {
              if ((_DWORD)v19 == 1)
                *v46 = *a2;
              else
                memcpy((void *)(v34 + 20), a2, v19);
            }
            v47 = 0;
            v48 = a4;
            do
            {
              *((_BYTE *)&v65[1] + v47-- + 4) = (v48 % 0xA) | 0x30;
              v32 = v48 > 9;
              v48 /= 0xAu;
            }
            while (v32);
            v49 = &v46[v19];
            if (v47 + 14 <= 13)
              memcpy(v49, (char *)&v65[1] + v47 + 5, -v47);
            v50 = 0;
            a1 = v45;
            do
            {
              ++v50;
              v32 = a4 > 9;
              a4 /= 0xAu;
            }
            while (v32);
            v51 = &v49[v50];
            if ((_DWORD)v20)
            {
              if ((_DWORD)v20 == 1)
                *v51 = *a5;
              else
                memcpy(v51, a5, v20);
            }
            v52 = &v51[v20];
            if ((_DWORD)v61)
            {
              if ((_DWORD)v61 == 1)
                *v52 = *a7;
              else
                memcpy(v52, a7, v61);
            }
            v53 = &v52[v61];
            if ((_DWORD)v62)
            {
              if ((_DWORD)v62 == 1)
                *v53 = *a9;
              else
                memcpy(v53, a9, v62);
            }
            v54 = &v53[v62];
            v64 = (_BYTE **)v65;
            v65[0] = v54;
            result = (char *)WTF::StringTypeAdapter<std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,void>::writeTo<unsigned char>(unsigned char *)const::{lambda(WTF::ASCIILiteral const&,WTF::ASCIILiteral const&,WTF::ASCIILiteral const&)#1}::operator()(&v64, (uint64_t)a11, (uint64_t)(a11 + 2), (uint64_t)(a11 + 4));
            v55 = &v54[v59];
            if ((_DWORD)v26)
            {
              if ((_DWORD)v26 == 1)
                *v55 = *a12;
              else
                result = (char *)memcpy(v55, a12, v26);
            }
            v56 = &v55[v26];
            if ((_DWORD)v63)
            {
              if ((_DWORD)v63 == 1)
              {
                *v56 = *a14;
                if (!(_DWORD)v60)
                  goto LABEL_63;
LABEL_61:
                result = &v56[v63];
                if ((_DWORD)v60 == 1)
                  *result = *a16;
                else
                  result = (char *)memcpy(result, a16, v60);
                goto LABEL_63;
              }
              result = (char *)memcpy(v56, a14, v63);
            }
            if (!(_DWORD)v60)
              goto LABEL_63;
            goto LABEL_61;
          }
        }
      }
LABEL_72:
      v34 = 0;
    }
  }
LABEL_63:
  *a1 = v34;
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  int v9;
  BOOL v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;

  if ((a8 | a7) < 0)
    goto LABEL_34;
  v9 = a7 + a8;
  v10 = __OFADD__(a7, a8);
  if (a6 < 0 || v10)
    goto LABEL_34;
  v11 = __OFADD__(a6, v9);
  v12 = a6 + v9;
  v13 = v11;
  if (a5 < 0 || v13)
    goto LABEL_34;
  v11 = __OFADD__(a5, v12);
  v14 = a5 + v12;
  v15 = v11;
  if (a4 < 0 || v15)
    goto LABEL_34;
  v11 = __OFADD__(a4, v14);
  v16 = a4 + v14;
  v17 = v11;
  if (a3 < 0 || v17)
    goto LABEL_34;
  v11 = __OFADD__(a3, v16);
  v18 = a3 + v16;
  v19 = v11;
  if (a2 < 0
    || v19
    || ((v11 = __OFADD__(a2, v18), v20 = a2 + v18, !v11) ? (v21 = 0) : (v21 = 1),
        (result & 0x80000000) != 0 || v21 || (v11 = __OFADD__((_DWORD)result, v20), v22 = result + v20, v11)))
  {
LABEL_34:
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)a9 = 1;
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_DWORD *)(a9 + 4) = v22;
  }
  return result;
}

_BYTE ***WTF::StringTypeAdapter<std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,void>::writeTo<unsigned char>(unsigned char *)const::{lambda(WTF::ASCIILiteral const&,WTF::ASCIILiteral const&,WTF::ASCIILiteral const&)#1}::operator()(_BYTE ***result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE ***v18;
  _BYTE ***v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v16 = a3;
    v18 = result;
    v20 = a4;
    if ((unint64_t)(v4 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9B44);
    }
    v8 = *(_BYTE **)a2;
    v9 = **result;
    if ((_DWORD)v4 == 2)
    {
      *v9 = *v8;
    }
    else if ((_DWORD)v4 != 1)
    {
      memcpy(v9, v8, v4 - 1);
    }
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v5 = v13 - 1;
      if ((unint64_t)(v13 - 1) >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1956B9D08);
      }
    }
    else
    {
      v5 = 0;
    }
    a4 = v20;
    a3 = v16;
    result = v18;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    v15 = v5;
    v17 = a3;
    v19 = result;
    v21 = a4;
    if ((unint64_t)(v6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9B7CLL);
    }
    v10 = *(_BYTE **)a3;
    v11 = &(**result)[v5];
    if ((_DWORD)v6 == 2)
    {
      *v11 = *v10;
    }
    else if ((_DWORD)v6 != 1)
    {
      memcpy(v11, v10, v6 - 1);
    }
    v6 = *(_QWORD *)(v17 + 8);
    if (v6)
    {
      if ((unint64_t)--v6 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1956B9C8CLL);
      }
    }
    a4 = v21;
    result = v19;
    v5 = v15;
  }
  v7 = *(_QWORD *)(a4 + 8);
  if (v7)
  {
    v22 = a4;
    if ((unint64_t)(v7 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9BACLL);
    }
    v12 = *(_BYTE **)a4;
    result = (_BYTE ***)&(**result)[v6 + v5];
    if ((_DWORD)v7 == 2)
    {
      *(_BYTE *)result = *v12;
    }
    else if ((_DWORD)v7 != 1)
    {
      result = (_BYTE ***)memcpy(result, v12, v7 - 1);
    }
    if (*(_QWORD *)(v22 + 8) >= 0x80000001uLL)
    {
      __break(0xC471u);
      JUMPOUT(0x1956B9CD8);
    }
  }
  return result;
}

char *WTF::tryMakeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>(_QWORD *a1, _BYTE *a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, uint64_t a10, _QWORD *a11, _BYTE *a12, uint64_t a13, char *a14, uint64_t a15)
{
  unsigned int v15;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  int v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  size_t v32;
  int v33;
  size_t v34;
  char *result;
  uint64_t v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  size_t v47;
  _QWORD *v48;
  unsigned int v49;
  size_t v50;
  uint64_t v53;
  char v54[4];
  unsigned int v55;
  _BYTE **v56;
  _QWORD v57[4];

  v15 = a4;
  v57[2] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v17 = 0;
    if (!a6)
      goto LABEL_3;
LABEL_70:
    v18 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA24CLL);
    }
    if (!a8)
      goto LABEL_4;
LABEL_79:
    if ((unint64_t)(a8 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA2FCLL);
    }
    v19 = a8 - 1;
    goto LABEL_5;
  }
  v17 = a3 - 1;
  if ((unint64_t)(a3 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1956BA0F8);
  }
  if (a6)
    goto LABEL_70;
LABEL_3:
  v18 = 0;
  if (a8)
    goto LABEL_79;
LABEL_4:
  v19 = 0;
LABEL_5:
  if (a10)
  {
    v20 = a10 - 1;
    if ((unint64_t)(a10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA128);
    }
  }
  else
  {
    v20 = 0;
  }
  v21 = a11;
  v22 = a11[1];
  if (v22)
  {
    if ((unint64_t)--v22 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA154);
    }
  }
  v23 = a11[3];
  if (v23)
  {
    if ((unint64_t)--v23 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA180);
    }
  }
  v24 = a11[5];
  if (v24)
  {
    if ((unint64_t)--v24 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA1B0);
    }
    v21 = a11;
  }
  v53 = (uint64_t)v21;
  if (a13)
  {
    if ((unint64_t)(a13 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA1E0);
    }
    v25 = a13 - 1;
  }
  else
  {
    v25 = 0;
  }
  if (a15)
  {
    if ((unint64_t)(a15 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA210);
    }
    v26 = a15 - 1;
  }
  else
  {
    v26 = 0;
  }
  v28 = 0;
  v29 = v23 + v22 + v24;
  v30 = a4;
  do
  {
    ++v28;
    v31 = v30 > 9;
    v30 /= 0xAu;
  }
  while (v31);
  v32 = v18;
  v33 = v18;
  v34 = v19;
  result = (char *)WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v17, v28, v33, v19, v20, v29, v25, v26, (uint64_t)v54);
  if (v54[0])
    goto LABEL_17;
  v49 = v29;
  v50 = v26;
  v37 = v55;
  if (!v55)
  {
    v36 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_45;
  }
  if ((v55 & 0x80000000) != 0)
  {
LABEL_17:
    v36 = 0;
    goto LABEL_45;
  }
  v48 = a1;
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(v55 + 20));
  v36 = v57[0];
  if (!v57[0])
    goto LABEL_45;
  v38 = (_BYTE *)(v57[0] + 20);
  *(_DWORD *)v57[0] = 2;
  *(_DWORD *)(v36 + 4) = v37;
  *(_QWORD *)(v36 + 8) = v36 + 20;
  *(_DWORD *)(v36 + 16) = 4;
  if ((_DWORD)v17)
  {
    if ((_DWORD)v17 == 1)
      *v38 = *a2;
    else
      memcpy((void *)(v36 + 20), a2, v17);
  }
  v39 = 0;
  v40 = v15;
  do
  {
    *((_BYTE *)&v57[1] + v39-- + 4) = (v40 % 0xA) | 0x30;
    v31 = v40 > 9;
    v40 /= 0xAu;
  }
  while (v31);
  v41 = &v38[v17];
  if (v39 + 14 <= 13)
    memcpy(v41, (char *)&v57[1] + v39 + 5, -v39);
  v42 = 0;
  a1 = v48;
  do
  {
    ++v42;
    v31 = v15 > 9;
    v15 /= 0xAu;
  }
  while (v31);
  v43 = &v41[v42];
  if ((_DWORD)v32)
  {
    if ((_DWORD)v32 == 1)
      *v43 = *a5;
    else
      memcpy(v43, a5, v32);
  }
  v44 = &v43[v32];
  if ((_DWORD)v34)
  {
    if ((_DWORD)v34 == 1)
      *v44 = *a7;
    else
      memcpy(v44, a7, v34);
  }
  v45 = &v44[v34];
  if ((_DWORD)v20)
  {
    if ((_DWORD)v20 == 1)
      *v45 = *a9;
    else
      memcpy(v45, a9, v20);
  }
  v56 = (_BYTE **)v57;
  v57[0] = &v45[v20];
  result = (char *)WTF::StringTypeAdapter<std::tuple<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>,void>::writeTo<unsigned char>(unsigned char *)const::{lambda(WTF::ASCIILiteral const&,WTF::ASCIILiteral const&,WTF::ASCIILiteral const&)#1}::operator()(&v56, v53, v53 + 16, v53 + 32);
  v46 = &v45[v20 + v49];
  v47 = v50;
  if (!(_DWORD)v25)
    goto LABEL_42;
  if ((_DWORD)v25 != 1)
  {
    result = (char *)memcpy(&v45[v20 + v49], a12, v25);
    v47 = v50;
LABEL_42:
    if (!(_DWORD)v47)
      goto LABEL_45;
    goto LABEL_43;
  }
  *v46 = *a12;
  if (!(_DWORD)v50)
    goto LABEL_45;
LABEL_43:
  result = &v46[v25];
  if ((_DWORD)v47 == 1)
    *result = *a14;
  else
    result = (char *)memcpy(result, a14, v47);
LABEL_45:
  *a1 = v36;
  return result;
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, char a6, _BYTE *a7, uint64_t a8, _BYTE *a9, uint64_t a10, _BYTE *a11, uint64_t a12)
{
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _QWORD *v33;
  uint64_t v34;

  v33 = result;
  if (a3)
  {
    v14 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_52;
  }
  else
  {
    v14 = 0;
  }
  if (a5)
  {
    v15 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA550);
    }
  }
  else
  {
    v15 = 0;
  }
  if (a8)
  {
    v16 = a8 - 1;
    if ((unint64_t)(a8 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA57CLL);
    }
  }
  else
  {
    v16 = 0;
  }
  if (a10)
  {
    v17 = a10 - 1;
    if ((unint64_t)(a10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA5A8);
    }
  }
  else
  {
    v17 = 0;
  }
  if (!a12)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v18 = a12 - 1;
  if ((unint64_t)(a12 - 1) >> 31)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x1956BA524);
  }
LABEL_11:
  v19 = v17 + v18;
  if (__OFADD__((_DWORD)v17, (_DWORD)v18))
    goto LABEL_41;
  v20 = __OFADD__((_DWORD)v16, v19);
  v21 = v16 + v19;
  if (v20)
    goto LABEL_41;
  v20 = __OFADD__(v21, 1);
  v22 = v21 + 1;
  if (v20)
    goto LABEL_41;
  v20 = __OFADD__((_DWORD)v15, v22);
  v23 = v15 + v22;
  if (v20)
    goto LABEL_41;
  v24 = (v14 + v23);
  if (__OFADD__((_DWORD)v14, v23))
    goto LABEL_41;
  if (!(_DWORD)v24)
  {
    v25 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_34;
  }
  if ((v24 & 0x80000000) != 0)
  {
LABEL_41:
    v25 = 0;
    goto LABEL_34;
  }
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
  v25 = v34;
  if (v34)
  {
    v26 = (_BYTE *)(v34 + 20);
    *(_DWORD *)v34 = 2;
    *(_DWORD *)(v34 + 4) = v24;
    *(_QWORD *)(v34 + 8) = v34 + 20;
    *(_DWORD *)(v34 + 16) = 4;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
        *v26 = *a2;
      else
        result = memcpy((void *)(v34 + 20), a2, v14);
    }
    v27 = &v26[v14];
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 == 1)
        *v27 = *a4;
      else
        result = memcpy(v27, a4, v15);
    }
    v28 = &v27[v15];
    *v28 = a6;
    v29 = v28 + 1;
    if ((_DWORD)v16)
    {
      if ((_DWORD)v16 == 1)
        *v29 = *a7;
      else
        result = memcpy(v29, a7, v16);
    }
    v30 = &v29[v16];
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 == 1)
      {
        *v30 = *a9;
        if (!(_DWORD)v18)
          goto LABEL_34;
LABEL_32:
        result = &v30[v17];
        if ((_DWORD)v18 == 1)
          *result = *a11;
        else
          result = memcpy(result, a11, v18);
        goto LABEL_34;
      }
      result = memcpy(v30, a9, v17);
    }
    if (!(_DWORD)v18)
      goto LABEL_34;
    goto LABEL_32;
  }
LABEL_34:
  *v33 = v25;
  return result;
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>,char,std::span<char const,18446744073709551615ul>,WTF::ASCIILiteral,std::span<char const,18446744073709551615ul>>(_BYTE *result, _BYTE *a2, uint64_t a3, _BYTE *a4, size_t a5, char a6, _BYTE *a7, size_t a8, _BYTE *a9, uint64_t a10, _BYTE *a11, size_t a12)
{
  size_t v16;
  size_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _QWORD *v32;
  uint64_t v33;

  v32 = result;
  if (a3)
  {
    v16 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1956BA854);
    }
  }
  else
  {
    v16 = 0;
  }
  if (a5 >> 31)
    goto LABEL_46;
  if (a8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1956BA7E8);
  }
  if (a10)
  {
    v17 = a10 - 1;
    if (!((unint64_t)(a10 - 1) >> 31))
      goto LABEL_7;
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x1956BA7C8);
  }
  v17 = 0;
LABEL_7:
  if (a12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1956BA808);
  }
  v18 = v17 + a12;
  if (__OFADD__((_DWORD)v17, (_DWORD)a12))
    goto LABEL_41;
  v19 = __OFADD__((_DWORD)a8, v18);
  v20 = a8 + v18;
  if (v19)
    goto LABEL_41;
  v19 = __OFADD__(v20, 1);
  v21 = v20 + 1;
  if (v19)
    goto LABEL_41;
  v19 = __OFADD__((_DWORD)a5, v21);
  v22 = a5 + v21;
  if (v19)
    goto LABEL_41;
  v23 = (v16 + v22);
  if (__OFADD__((_DWORD)v16, v22))
    goto LABEL_41;
  if (!(_DWORD)v23)
  {
    v24 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_31;
  }
  if ((v23 & 0x80000000) != 0)
  {
LABEL_41:
    v24 = 0;
    goto LABEL_31;
  }
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
  v24 = v33;
  if (v33)
  {
    v25 = (_BYTE *)(v33 + 20);
    *(_DWORD *)v33 = 2;
    *(_DWORD *)(v33 + 4) = v23;
    *(_QWORD *)(v33 + 8) = v33 + 20;
    *(_DWORD *)(v33 + 16) = 4;
    if ((_DWORD)v16)
    {
      if ((_DWORD)v16 == 1)
        *v25 = *a2;
      else
        result = memcpy((void *)(v33 + 20), a2, v16);
    }
    v26 = &v25[v16];
    if ((_DWORD)a5)
    {
      if ((_DWORD)a5 == 1)
        *v26 = *a4;
      else
        result = memcpy(v26, a4, a5);
    }
    v27 = &v26[a5];
    *v27 = a6;
    v28 = v27 + 1;
    if ((_DWORD)a8)
    {
      if ((_DWORD)a8 == 1)
        *v28 = *a7;
      else
        result = memcpy(v28, a7, a8);
    }
    v29 = &v28[a8];
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 == 1)
      {
        *v29 = *a9;
        if (!(_DWORD)a12)
          goto LABEL_31;
LABEL_29:
        result = &v29[v17];
        if ((_DWORD)a12 == 1)
          *result = *a11;
        else
          result = memcpy(result, a11, a12);
        goto LABEL_31;
      }
      result = memcpy(v29, a9, v17);
    }
    if (!(_DWORD)a12)
      goto LABEL_31;
    goto LABEL_29;
  }
LABEL_31:
  *v32 = v24;
  return result;
}

uint64_t JSC::WeakGCMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::JSFunction,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::~WeakGCMap(WTF *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = v3 + 16;
      do
      {
        if (*(_QWORD *)(v6 - 16) != -1 && *(_QWORD *)v6)
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
          *(_QWORD *)v6 = 0;
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return WTF::fastFree(a1, v2);
}

uint64_t *JSC::WeakGCMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::JSFunction,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::pruneStaleEntries(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v2 = v3;
  if (!v3)
    return result;
  v4 = *(_DWORD *)(v2 - 4);
  if (!v4)
    return result;
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    v8 = (_QWORD *)(v2 + 24 * v6);
    if (*v8 != -1 && *(_OWORD *)v8 != 0)
    {
      v9 = v2 + 24 * v6;
      v12 = *(_QWORD **)(v9 + 16);
      v10 = (_QWORD *)(v9 + 16);
      v11 = v12;
      if (!v12)
      {
        *v8 = -1;
        goto LABEL_11;
      }
      if (!*v11 || (v11[1] & 3) != 0)
      {
        *v8 = -1;
        v11[1] = 3;
        *v10 = 0;
LABEL_11:
        ++v5;
      }
    }
    --v6;
  }
  while (v7);
  v13 = *result;
  if (v5)
  {
    *(_DWORD *)(v13 - 16) += v5;
    v14 = *result;
    if (*result)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v5;
    v13 = *result;
  }
  if (v13)
  {
    v16 = *(_DWORD *)(v13 - 4);
    v17 = 6 * *(_DWORD *)(v13 - 12);
    if (v16 >= 9 && v17 < v16)
      return (uint64_t *)WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::shrinkToBestSize(result);
  }
  return result;
}

_OWORD *WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::rehash(a1, v8, 0);
}

_OWORD *WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _OWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 24 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        v15 = v13[1];
        if (v14 | v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v24 >> 31) ^ v24)
                                         + 95187966 * WTF::PtrHashBase<WTF::AtomString *,false>::hash(v15))) >> 4);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (_OWORD *)(v20 + 24 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28 != 0);
          v29 = v20 + 24 * v27;
          v32 = *(_QWORD *)(v29 + 16);
          v30 = (_QWORD *)(v29 + 16);
          v31 = v32;
          if (v32)
          {
            *(_QWORD *)(v31 + 8) = 3;
            *v30 = 0;
          }
          *v28 = *(_OWORD *)v13;
          v33 = v5 + 24 * v10;
          v35 = *(_QWORD *)(v33 + 16);
          v34 = v33 + 16;
          *(_QWORD *)v34 = 0;
          *v30 = v35;
          if (*(_QWORD *)v34)
          {
            *(_QWORD *)(*(_QWORD *)v34 + 8) = 3;
            *(_QWORD *)v34 = 0;
          }
          if (v13 == a3)
            v11 = v28;
        }
        else
        {
          v16 = v5 + 24 * v10;
          v19 = *(_QWORD *)(v16 + 16);
          v17 = (_QWORD *)(v16 + 16);
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v18 + 8) = 3;
            *v17 = 0;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t JSC::WeakGCMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::GetterSetter,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::~WeakGCMap(WTF *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = v3 + 16;
      do
      {
        if (*(_QWORD *)(v6 - 16) != -1 && *(_QWORD *)v6)
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
          *(_QWORD *)v6 = 0;
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  return WTF::fastFree(a1, v2);
}

uint64_t *JSC::WeakGCMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::GetterSetter,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::pruneStaleEntries(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v2 = v3;
  if (!v3)
    return result;
  v4 = *(_DWORD *)(v2 - 4);
  if (!v4)
    return result;
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    v8 = (_QWORD *)(v2 + 24 * v6);
    if (*v8 != -1 && *(_OWORD *)v8 != 0)
    {
      v9 = v2 + 24 * v6;
      v12 = *(_QWORD **)(v9 + 16);
      v10 = (_QWORD *)(v9 + 16);
      v11 = v12;
      if (!v12)
      {
        *v8 = -1;
        goto LABEL_11;
      }
      if (!*v11 || (v11[1] & 3) != 0)
      {
        *v8 = -1;
        v11[1] = 3;
        *v10 = 0;
LABEL_11:
        ++v5;
      }
    }
    --v6;
  }
  while (v7);
  v13 = *result;
  if (v5)
  {
    *(_DWORD *)(v13 - 16) += v5;
    v14 = *result;
    if (*result)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v5;
    v13 = *result;
  }
  if (v13)
  {
    v16 = *(_DWORD *)(v13 - 4);
    v17 = 6 * *(_DWORD *)(v13 - 12);
    if (v16 >= 9 && v17 < v16)
      return (uint64_t *)WTF::HashTable<std::pair<JSC::JSGlobalObject *,void *>,WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>>>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashMap<std::pair<JSC::JSGlobalObject *,void *>,JSC::Weak<JSC::JSFunction>,WTF::DefaultHash<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>,WTF::HashTraits<JSC::Weak<JSC::JSFunction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::JSGlobalObject *,void *>>>::shrinkToBestSize(result);
  }
  return result;
}

uint64_t JSC::VMTraps::deferTermination(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v1 + 1;
  if (!v1)
  {
    if (*(_QWORD *)(result - 48))
      return JSC::VMTraps::deferTerminationSlow();
  }
  return result;
}

uint64_t JSC::VMTraps::undoDeferTermination(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 24) - 1;
  *(_DWORD *)(result + 24) = v1;
  if (!v1)
  {
    if (*(_BYTE *)(result + 93377))
      return JSC::VMTraps::undoDeferTerminationSlow();
  }
  return result;
}

unint64_t JSC::GetterSetter::create(JSC::GetterSetter *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::JSObject *a4, JSC::JSObject *a5)
{
  _QWORD *v8;
  JSC::Heap *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t SlowCase;
  char *v19;
  JSC::JSGlobalObject *v20;

  v8 = (_QWORD *)((char *)this + 38376);
  v9 = (JSC::GetterSetter *)((char *)this + 192);
  v10 = *((_QWORD *)this + 4797);
  if (v10 < *((_QWORD *)this + 4798))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4799);
  if ((v10 & 1) == 0)
  {
    v17 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4800);
    *((_QWORD *)this + 4798) = v10 + HIDWORD(v17);
    *((_QWORD *)this + 4799) = v10 + (int)v17;
LABEL_2:
    *v8 = v10 + 32;
    goto LABEL_3;
  }
  v19 = (char *)this + 38376;
  v20 = a3;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  v8 = v19;
  a3 = v20;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = v8[394];
  v12 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)v10 = v11 >> 4;
  *(_DWORD *)(v10 + 4) = v12;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  v13 = (_QWORD *)(v10 + 8);
  __dmb(0xAu);
  if (a3)
  {
    *v13 = a3;
  }
  else
  {
    v14 = *((_QWORD *)a2 + 59);
    *v13 = v14;
    if (!v14)
      goto LABEL_8;
  }
  if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v10 + 7))
    JSC::Heap::writeBarrierSlowPath(v9, (const JSCell *)v10);
LABEL_8:
  if (a4)
  {
    *(_QWORD *)(v10 + 16) = a4;
  }
  else
  {
    v15 = *((_QWORD *)a2 + 60);
    *(_QWORD *)(v10 + 16) = v15;
    if (!v15)
      goto LABEL_13;
  }
  if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v10 + 7))
    JSC::Heap::writeBarrierSlowPath(v9, (const JSCell *)v10);
LABEL_13:
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v10;
}

_BYTE *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD v17[5];

  v3 = a2;
  v4 = result;
  v5 = 0;
  v17[4] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  do
  {
    ++v5;
    v7 = v6 > 9;
    v6 /= 0xAuLL;
  }
  while (v7);
  v8 = *(_DWORD *)(a3 + 8);
  if ((v8 | v5) < 0)
    goto LABEL_19;
  v9 = (v5 + v8);
  if (__OFADD__(v5, v8))
    goto LABEL_19;
  if (!(_DWORD)v9)
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_17;
  }
  if ((v9 & 0x80000000) != 0)
  {
LABEL_19:
    v12 = 0;
  }
  else
  {
    v10 = *(_BYTE **)a3;
    v11 = *(unsigned int *)(a3 + 8);
    result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
    v12 = v17[0];
    if (v17[0])
    {
      v13 = 0;
      v14 = v17[0] + 20;
      *(_DWORD *)v17[0] = 2;
      *(_DWORD *)(v12 + 4) = v9;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      v15 = v3;
      do
      {
        *((_BYTE *)&v17[3] + v13--) = (v15 % 0xA) | 0x30;
        v7 = v15 > 9;
        v15 /= 0xAuLL;
      }
      while (v7);
      if (v13 + 26 <= 25)
        result = memcpy((void *)(v12 + 20), (char *)&v17[3] + v13 + 1, -v13);
      v16 = 0;
      do
      {
        ++v16;
        v7 = v3 > 9;
        v3 /= 0xAuLL;
      }
      while (v7);
      if ((_DWORD)v11)
      {
        result = (_BYTE *)(v14 + v16);
        if ((_DWORD)v11 == 1)
          *result = *v10;
        else
          result = memcpy(result, v10, v11);
      }
    }
  }
LABEL_17:
  *v4 = v12;
  return result;
}

uint64_t *WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v27;
        goto LABEL_11;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_10;
    goto LABEL_22;
  }
  if (3 * v21 <= 4 * v20)
  {
    if (!(_DWORD)v21)
    {
      v26 = 8;
LABEL_27:
      result = WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::rehash(a2, v26, v14);
      v14 = result;
      v18 = *a2;
      if (*a2)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
      goto LABEL_10;
    }
LABEL_22:
    v26 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
    goto LABEL_27;
  }
LABEL_10:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_11:
  *v5 = (uint64_t)v14;
  v5[1] = v22;
  *((_BYTE *)v5 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<std::function<void ()(void)>,void>::~CallableWrapper(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3392A30;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::function<void ()(void)>,void>::~CallableWrapper(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3392A30;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<std::function<void ()(void)>,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v3 = (_QWORD *)std::__throw_bad_function_call[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::DOMPromise::whenPromiseIsSettled(WebCore::JSDOMGlobalObject *,JSC::JSObject *,WTF::Function<void ()(void)> &&)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMPromise::whenPromiseIsSettled(WebCore::JSDOMGlobalObject *,JSC::JSObject *,WTF::Function<void ()(void)> &&)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3392A58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMPromise::whenPromiseIsSettled(WebCore::JSDOMGlobalObject *,JSC::JSObject *,WTF::Function<void ()(void)> &&)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3392A58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMPromise::whenPromiseIsSettled(WebCore::JSDOMGlobalObject *,JSC::JSObject *,WTF::Function<void ()(void)> &&)::$_0,long long,JSC::JSGlobalObject *,JSC::CallFrame *>::call(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  return 10;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE v10[8];

  *a1 = &off_1E3392A80;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD **)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    MEMORY[0x19AEA3294](v10, *v3);
    v4 = a1[4];
    v5 = (uint64_t *)(v4 - 16);
    v6 = *(uint64_t **)(v4 - 8);
    if (v6)
    {
      v7 = *v5;
      *v6 = *v5;
      *(_QWORD *)(v7 + 8) = v6;
      *v5 = 0;
      v5[1] = 0;
    }
    *v5 = v3[5];
    v3[5] = v5;
    a1[4] = 0;
    MEMORY[0x19AEA32A0](v10);
  }
  v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  _BYTE v11[8];

  *(_QWORD *)this = &off_1E3392A80;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD **)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    MEMORY[0x19AEA3294](v11, *v4);
    v5 = *((_QWORD *)this + 4);
    v6 = (uint64_t *)(v5 - 16);
    v7 = *(uint64_t **)(v5 - 8);
    if (v7)
    {
      v8 = *v6;
      *v7 = *v6;
      *(_QWORD *)(v8 + 8) = v7;
      *v6 = 0;
      v6[1] = 0;
    }
    *v6 = v4[5];
    v4[5] = v6;
    *((_QWORD *)this + 4) = 0;
    MEMORY[0x19AEA32A0](v11);
  }
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeferredPromise::callFunction(JSC::JSGlobalObject &,WebCore::DeferredPromise::ResolveMode,JSC::JSValue)::$_1,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  objc_class **v6;
  objc_class *v7;
  _BYTE v8[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = result;
    JSC::JSLockHolder::JSLockHolder();
    v4 = *(_QWORD *)(v1 + 32);
    if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
      v5 = 0;
    else
      v5 = *(uint64_t **)v4;
    v6 = *(objc_class ***)(v3 + 32);
    if (v6)
      v7 = *v6;
    else
      v7 = 0;
    WebCore::DeferredPromise::callFunction(v1, v5, *(_DWORD *)(v3 + 24), v7);
    return MEMORY[0x19AEA32A0](v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DeferredPromise::whenSettled(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E3392AA8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeferredPromise::whenSettled(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E3392AA8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WebCore::ActiveDOMCallback *WTF::Detail::CallableWrapper<WebCore::DeferredPromise::whenSettled(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::DeferredPromise::whenSettled(*(WebCore::ActiveDOMCallback **)(a1 + 8), (uint64_t *)(a1 + 24));
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate@<X0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  JSC::ArrayBuffer::tryCreate();
  result = v14;
  if (!v14)
    goto LABEL_6;
  if (*(_BYTE *)(v14 + 64) && (v13 = *(_QWORD *)(v14 + 32)) != 0)
    v7 = *(_QWORD *)(v13 + 32);
  else
    v7 = *(_QWORD *)(v14 + 48);
  if (v7 >= a2)
  {
    v8 = WTF::fastMalloc((WTF *)0x28);
    JSC::ArrayBufferView::ArrayBufferView();
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v14);
    v9 = *(_QWORD *)(v8 + 32);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v11 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v12 = *(_QWORD *)(v8 + 24);
          goto LABEL_22;
        }
        if ((v10 & 0x3FFFFFFFFLL) + v11)
        {
          v12 = *(_QWORD *)(v8 + 24);
          if (v12 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v12 = (v12 & 0x3FFFFFFFFLL) + v11;
          goto LABEL_22;
        }
      }
    }
    v12 = 0;
LABEL_22:
    result = (uint64_t)memcpy((void *)v12, a1, a2);
    goto LABEL_23;
  }
  result = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v14);
LABEL_6:
  v8 = 0;
LABEL_23:
  *a3 = v8;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::UserGestureToken *v3;
  WTF *v4;
  WTF *v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  *a1 = &off_1E3392AD0;
  v3 = (WebCore::UserGestureToken *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (_DWORD *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v9 = *((_QWORD *)v4 + 1);
      if (v9)
      {
        v10 = (uint64_t *)(v9 - 16);
        v11 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v12 = *(uint64_t **)(v9 - 8);
        if (v12)
        {
          v13 = *v10;
          *v12 = *v10;
          *(_QWORD *)(v13 + 8) = v12;
          *v10 = 0;
          v10[1] = 0;
        }
        *v10 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 40) = v10;
        *((_QWORD *)v4 + 1) = 0;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::UserGestureToken *v3;
  WTF *v4;
  WTF *v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E3392AD0;
  v3 = (WebCore::UserGestureToken *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v8 = (_DWORD *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v9 = *((_QWORD *)v4 + 1);
      if (v9)
      {
        v10 = (uint64_t *)(v9 - 16);
        v11 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v12 = *(uint64_t **)(v9 - 8);
        if (v12)
        {
          v13 = *v10;
          *v12 = *v10;
          *(_QWORD *)(v13 + 8) = v12;
          *v10 = 0;
          v10[1] = 0;
        }
        *v10 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 40) = v10;
        *((_QWORD *)v4 + 1) = 0;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::JSDOMWindowBase::queueMicrotaskToEventLoop(JSC::JSGlobalObject &,WTF::Ref<JSC::Microtask,WTF::RawPtrTraits<JSC::Microtask>,WTF::DefaultRefDerefTraits<JSC::Microtask>> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::UserGestureToken *v2;
  void *v3;
  WTF *v4;
  void *v5;
  WebCore::UserGestureToken *v6;
  _BYTE v7[8];

  v2 = *(WebCore::UserGestureToken **)(a1 + 16);
  if (v2)
  {
    ++*(_DWORD *)v2;
    v6 = v2;
    WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v7, (uint64_t *)&v6, 1, 1);
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v2, v3);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
    WebCore::JSMicrotaskCallback::call(*(WebCore::JSMicrotaskCallback **)(a1 + 8));
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v7);
  }
  else
  {
    WebCore::JSMicrotaskCallback::call(*(WebCore::JSMicrotaskCallback **)(a1 + 8));
  }
}

uint64_t WebCore::JSMicrotaskCallback::call(WebCore::JSMicrotaskCallback *this)
{
  WebCore *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  WebCore *v8;
  uint64_t v9;
  WebCore *v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  JSC::VM *v13;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;

  ++*(_DWORD *)this;
  v2 = (WebCore *)MEMORY[0x19AEA3294](v28, *(_QWORD *)(**((_QWORD **)this + 1) + 56));
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  if (v3)
    v4 = *v3;
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 736);
  if (!v7 || (v2 = *(WebCore **)(v7 + 96)) == 0)
    v2 = (WebCore *)WebCore::threadGlobalDataSlow(v2);
  v29 = *((_QWORD *)v2 + 8);
  v8 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v8 = *(WebCore **)(v9 + 96)) == 0)
    v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
  *((_QWORD *)v8 + 8) = v4;
  v10 = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
  v12 = *(_QWORD *)(StatusReg + 736);
  if (v12 && (v10 = *(WebCore **)(v12 + 96)) != 0)
  {
    v13 = *(JSC::VM **)(*((_QWORD *)v10 + 8) + 56);
  }
  else
  {
    v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    v20 = *(_QWORD *)(StatusReg + 736);
    v13 = *(JSC::VM **)(*((_QWORD *)v10 + 8) + 56);
    if (!v20 || (v10 = *(WebCore **)(v20 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
  }
  v14 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)v10 + 8);
  v15 = v29;
  if (v14)
  {
    v16 = *(_QWORD *)(StatusReg + 736);
    if (!v16 || (v10 = *(WebCore **)(v16 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    *((_QWORD *)v10 + 8) = v15;
    if (!v15)
    {
      WebCore::JSExecState::didLeaveScriptContext(v14, v11);
      v17 = *((_QWORD *)v13 + 2);
      if (!v17 || *((_QWORD *)v13 + 3) != v17)
        JSC::VM::clearException(v13);
    }
  }
  else
  {
    v27 = *(_QWORD *)(StatusReg + 736);
    if (!v27 || (v10 = *(WebCore **)(v27 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    *((_QWORD *)v10 + 8) = v15;
  }
  MEMORY[0x19AEA32A0](&v30);
  result = MEMORY[0x19AEA32A0](v28);
  if (*(_DWORD *)this == 1)
  {
    v21 = (_DWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v21)
    {
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[2];
    }
    v22 = *((_QWORD *)this + 1);
    if (v22)
    {
      v23 = (uint64_t *)(v22 - 16);
      v24 = *(_QWORD *)(((v22 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = *(uint64_t **)(v22 - 8);
      if (v25)
      {
        v26 = *v23;
        *v25 = *v23;
        *(_QWORD *)(v26 + 8) = v25;
        *v23 = 0;
        v23[1] = 0;
      }
      *v23 = *(_QWORD *)(v24 + 40);
      *(_QWORD *)(v24 + 40) = v23;
      *((_QWORD *)this + 1) = 0;
    }
    return WTF::fastFree(this, v19);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::CSSStyleSheet>>::convert(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(result + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSCSSStyleSheet::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSCSSStyleSheet::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    return JSC::throwTypeError();
  ++*(_DWORD *)(v8 + 8);
  v15 = v8;
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9 == *(_DWORD *)(a3 + 8))
  {
    v10 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v9 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(a3 + 12);
    v12 = *(_QWORD *)a3;
    v13 = *v10;
    *v10 = 0;
    *(_QWORD *)(v12 + 8 * v11) = v13;
    result = v15;
    *(_DWORD *)(a3 + 12) = v11 + 1;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
    *(_DWORD *)(a3 + 12) = v9 + 1;
  }
  return result;
}

unint64_t WebCore::JSDocumentFragment::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDocumentFragment *v5;
  _QWORD *v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  v5 = (WebCore::JSDocumentFragment *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDocumentFragment::subspaceForImpl(v5, a2);
  result = v6[3];
  if (result < v6[4])
    goto LABEL_2;
  result = v6[5];
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(result + 8) ^ v6[6];
    v6[4] = result + HIDWORD(v11);
    v6[5] = result + (int)v11;
LABEL_2:
    v6[3] = result + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  result = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)result = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)result = a1 >> 4;
  *(_DWORD *)(result + 4) = v9;
  v10 = 16 * *(unsigned int *)(a1 + 76);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLNull,WebCore::IDLInterface<WebCore::File>,WebCore::IDLUSVString,WebCore::IDLInterface<WebCore::DOMFormData>>>::convert(uint64_t result, JSC::JSGlobalObject *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 v26;
  WTF::StringImpl *v27;
  unint64_t v28;

  v3 = result;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    return result;
  }
  LOBYTE(v24) = 0;
  v26 = 0;
  v6 = a3 & 0xFFFE000000000002;
  if ((a3 & 0xFFFE000000000002) == 0)
  {
    v7 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v8 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v9 = (char **)(16 * v7);
    if ((_DWORD)v7)
      v10 = v9 == &WebCore::JSFile::s_info;
    else
      v10 = 1;
    if (!v10)
    {
      do
      {
        v9 = (char **)v9[2];
        v8 = v9 != 0;
      }
      while (v9 != &WebCore::JSFile::s_info && v9 != 0);
    }
    if (v8)
    {
      v23 = *(_QWORD *)(a3 + 24);
      if (v23)
      {
        ++*(_DWORD *)(v23 + 16);
        v24 = v23;
        v21 = 1;
        goto LABEL_34;
      }
    }
  }
  v12 = JSC::jsDynamicCast<WebCore::JSDOMFormData *>(a3);
  if (!v12 || (v20 = *(_QWORD *)(v12 + 24)) == 0)
  {
    v28 = a3;
    v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (v6 || *(_BYTE *)(a3 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, a2);
      goto LABEL_25;
    }
    v16 = *(WTF::StringImpl **)(a3 + 8);
    if ((v16 & 1) != 0)
    {
      v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, a2);
      if (!v16)
        goto LABEL_24;
    }
    else if (!v16)
    {
LABEL_24:
      v27 = v16;
LABEL_25:
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
      {
        v18 = 1;
      }
      else
      {
        WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
        v18 = 0;
      }
      v25 = v18;
      v19 = v27;
      v27 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v17);
          v18 = v25;
          if (v25)
            goto LABEL_31;
          goto LABEL_38;
        }
        *(_DWORD *)v19 -= 2;
      }
      if (v18)
      {
LABEL_31:
        *(_DWORD *)(v3 + 24) = 1;
        return (*((uint64_t (**)(unint64_t *, uint64_t *))&unk_1E3392610 + v18))(&v28, &v24);
      }
LABEL_38:
      v22 = v24;
      v24 = 0;
      *(_QWORD *)(v3 + 8) = v22;
      *(_DWORD *)(v3 + 16) = 2;
      *(_DWORD *)(v3 + 24) = 0;
      return (*((uint64_t (**)(unint64_t *, uint64_t *))&unk_1E3392610 + v18))(&v28, &v24);
    }
    *(_DWORD *)v16 += 2;
    goto LABEL_24;
  }
  ++*(_DWORD *)(v20 + 16);
  v24 = v20;
  v21 = 3;
LABEL_34:
  v25 = v21;
  v26 = 1;
  *(_BYTE *)(v3 + 8) = 0;
  v13 = v3 + 8;
  *(_DWORD *)(v13 + 8) = -1;
  result = ((uint64_t (*)(unint64_t *, uint64_t, uint64_t *))off_1E3392788[v21])(&v28, v13, &v24);
  *(_DWORD *)(v13 + 8) = v21;
  v14 = v26;
  *(_DWORD *)(v13 + 16) = 0;
  if (v14 && v25 != -1)
    return ((uint64_t (*)(unint64_t *, uint64_t *))off_1E3392768[v25])(&v28, &v24);
  return result;
}

void WebCore::JSEventListener::~JSEventListener(WebCore::JSEventListener *this, WTF::StringImpl *a2)
{
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_QWORD *)this = off_1E3392EE0;
  *((_QWORD *)this + 3) = &unk_1E3392F60;
  v3 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v3, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 7) = 0;
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::JSEventListener::~JSEventListener(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::JSEventListener::~JSEventListener(WebCore::JSEventListener *this, WTF::StringImpl *a2)
{
  WebCore::JSEventListener::~JSEventListener((WebCore::JSEventListener *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSEventListener::~JSEventListener((WebCore::JSEventListener *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSEventListener::create@<X0>(WebCore::JSEventListener *this@<X0>, JSC::JSObject *a2@<X1>, JSC::JSObject *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char v7;
  uint64_t v11;
  uint64_t result;

  v7 = (char)a3;
  v11 = WTF::fastMalloc((WTF *)0x48);
  result = WebCore::JSEventListener::JSEventListener(v11, (uint64_t)this, (uint64_t)a2, v7, 0, a4);
  *a5 = result;
  return result;
}

uint64_t WebCore::JSEventListener::initializeJSFunction(WebCore::JSEventListener *this, WebCore::ScriptExecutionContext *a2)
{
  return 0;
}

BOOL WebCore::JSEventListener::handleEvent(WebCore::ScriptExecutionContext &,WebCore::Event &)::$_1::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  int v10;

  v4 = *a1;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1))
  {
    v6 = *(_QWORD *)(v4 + 344);
    if (a2 && *(_QWORD *)(a1[1] + 24) == a2)
    {
LABEL_16:
      WebCore::WorkerOrWorkletScriptController::forbidExecution(v6);
      goto LABEL_2;
    }
    if (!v6)
      goto LABEL_2;
    v7 = (unsigned __int8 *)(v6 + 40);
    if (__ldaxr((unsigned __int8 *)(v6 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
LABEL_10:
      v9 = *(unsigned __int8 *)(v6 + 41);
      v10 = __ldxr(v7);
      if (v10 == 1)
      {
        if (!__stlxr(0, v7))
        {
LABEL_15:
          if (!v9)
            goto LABEL_2;
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 40));
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v6 + 40);
    goto LABEL_10;
  }
LABEL_2:
  if (a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 48) + 56))(*(_QWORD *)(a1[2] + 48));
    WebCore::reportException(*(JSC::JSGlobalObject **)a1[3], a2, 0, 0, 0);
  }
  return a2 != 0;
}

int *WebCore::handleBeforeUnloadEventReturnValue(int *this, WebCore::BeforeUnloadEvent *a2, const WTF::String *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;

  if (*(_QWORD *)a2)
  {
    v4 = (uint64_t)this;
    if ((this[5] & 0x404) == 4)
      this[5] |= 0x40u;
    this = (int *)*((_QWORD *)this + 9);
    if (this)
    {
      v5 = *this;
      v6 = this[1];
      *this += 2;
      if (v5)
      {
        *this = v5;
        if (v6)
          return this;
      }
      else
      {
        this = (int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        if (v6)
          return this;
      }
    }
    v7 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v7 += 2;
    this = *(int **)(v4 + 72);
    *(_QWORD *)(v4 + 72) = v7;
    if (this)
    {
      if (*this == 2)
        return (int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *this -= 2;
    }
  }
  return this;
}

uint64_t WebCore::JSEventListener::willDestroyVM(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::DOMWrapperWorld *v4;
  WTF *v5;
  void *v6;

  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *(_QWORD *)(this + 48) = 0;
  }
  v3 = *(_QWORD *)(this + 56);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *(_QWORD *)(this + 56) = 0;
  }
  *(_BYTE *)(this + 40) &= ~4u;
  v4 = *(WebCore::DOMWrapperWorld **)(this + 64);
  *(_QWORD *)(this + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v4, a2);
      return WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::JSEventListener::willDestroyVM(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::DOMWrapperWorld *v4;
  WTF *v5;
  void *v6;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *(_QWORD *)(this + 24) = 0;
  }
  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *(_QWORD *)(this + 32) = 0;
  }
  *(_BYTE *)(this + 16) &= ~4u;
  v4 = *(WebCore::DOMWrapperWorld **)(this + 40);
  *(_QWORD *)(this + 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v4, a2);
      return WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return this;
}

uint64_t WebCore::JSEventTarget::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *(_QWORD *)(result + 24);
  if ((*(_QWORD *)(v2 + 16) & 0x1000000000000) != 0)
  {
    v4 = *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFLL;
    v5 = (unsigned __int8 *)(v4 + 32);
    if (__ldaxr((unsigned __int8 *)(v4 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C](v4 + 32);
LABEL_6:
    v7 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = v8 + 32 * v7;
      do
      {
        v10 = *(unsigned int *)(v8 + 20);
        if ((_DWORD)v10)
        {
          v11 = *(uint64_t **)(v8 + 8);
          v12 = 8 * v10;
          do
          {
            v13 = *v11++;
            result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 32))(*(_QWORD *)(v13 + 8), a2);
            v12 -= 8;
          }
          while (v12);
        }
        v8 += 32;
      }
      while (v8 != v9);
    }
    v14 = __ldxr(v5);
    if (v14 == 1)
    {
      if (!__stlxr(0, v5))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebCore::createWrapper<WebCore::EventTarget,WebCore::EventTarget>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSEventTarget>(*(uint64_t **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSEventTarget::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::EventTarget,WebCore::JSEventTarget>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::executionContext(WebCore *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if (!this)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSDOMGlobalObject::s_info && v4 != 0);
  }
  if (v3)
    return WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  else
    return 0;
}

uint64_t WebCore::functionCallHandlerFromAnyThread(WebCore *a1)
{
  WebCore *v1;
  unint64_t StatusReg;
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  WebCore::JSDOMGlobalObject *v9;

  v1 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3 || (a1 = *(WebCore **)(v3 + 96)) == 0)
    a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
  v9 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)a1 + 8);
  v4 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v4 = *(WebCore **)(v5 + 96)) == 0)
    v4 = (WebCore *)WebCore::threadGlobalDataSlow(v4);
  *((_QWORD *)v4 + 8) = v1;
  v6 = JSC::call();
  WebCore::JSExecState::~JSExecState(&v9, v7);
  return v6;
}

uint64_t WebCore::evaluateHandlerFromAnyThread(WebCore *a1)
{
  WebCore *v1;
  unint64_t StatusReg;
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  WebCore::JSDOMGlobalObject *v9;

  v1 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3 || (a1 = *(WebCore **)(v3 + 96)) == 0)
    a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
  v9 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)a1 + 8);
  v4 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v4 = *(WebCore **)(v5 + 96)) == 0)
    v4 = (WebCore *)WebCore::threadGlobalDataSlow(v4);
  *((_QWORD *)v4 + 8) = v1;
  v6 = JSC::evaluate();
  WebCore::JSExecState::~JSExecState(&v9, v7);
  return v6;
}

uint64_t WebCore::JSExtendableMessageEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = *(unint64_t **)(*(_QWORD *)(result + 24) + 112);
  if (v4)
  {
    if ((v4[1] & 3) == 0)
    {
      v5 = *v4;
      if (*v4)
      {
        if ((v5 & 8) != 0)
        {
          if ((*(_BYTE *)(v5 - 79) & 1) == 0)
            goto LABEL_13;
        }
        else
        {
          v8 = v5 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v10 = *v4;
            v11 = v5 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
            v5 = v10;
            v8 = v11;
          }
          if (((*(_QWORD *)(v8 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
            goto LABEL_13;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_4;
LABEL_13:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_4:
  v6 = *(unint64_t **)(*(_QWORD *)(v3 + 24) + 184);
  if (v6)
  {
    if ((v6[1] & 3) == 0)
    {
      v7 = *v6;
      if (*v6)
      {
        if ((v7 & 8) != 0)
        {
          if ((*(_BYTE *)(v7 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v9 = v7 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
            v9 = v7 & 0xFFFFFFFFFFFFC000;
          }
          if (((*(_QWORD *)(v9 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::constructJSExtendableMessageEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  int v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  JSValue v25;
  uint64_t *v26;
  uint64_t v27;
  WebCore::JSExtendableMessageEvent *v28;
  JSC::JSGlobalObject *v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  WTF::StringImpl *v33[2];
  char v34[8];
  int v35;
  char v36;
  WTF *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  _QWORD *v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  char v48;
  WTF *v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  char v54;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v25);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v52);
  v6 = v53;
  if (v53)
  {
    v19 = 0;
LABEL_41:
    if (v6 != -1)
      ((void (*)(__int16 *, WTF::StringImpl **))off_1E3393118[v6])(&v42, &v52);
    return v19;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::ExtendableMessageEvent::Init>((JSC::JSCell *)v7, this, (uint64_t)&v42);
  v8 = v51;
  if (v51)
  {
    v19 = 0;
LABEL_38:
    if (v8 != -1)
      ((void (*)(__int16 *, __int16 *))off_1E3393108[v8])(&v30, &v42);
    v6 = v53;
    goto LABEL_41;
  }
  if (!v53)
  {
    v9 = v52;
    v52 = 0;
    v39 = v9;
    v30 = v42;
    v31 = v43;
    v32 = v44;
    v10 = v45;
    v45 = 0uLL;
    *(_OWORD *)v33 = v10;
    v34[0] = 0;
    v36 = 0;
    if (v48)
    {
      v35 = -1;
      v11 = v47;
      if (v47 != -1)
      {
        ((void (*)(_DWORD **, char *, uint64_t *))off_1E33930F0[v47])(&v40, v34, &v46);
        v35 = v11;
      }
      v36 = 1;
    }
    v37 = v49;
    v12 = v50;
    v49 = 0;
    v50 = 0;
    v38 = v12;
    WebCore::ExtendableMessageEvent::create(this, &v39, (uint64_t)&v30, 0, (uint64_t *)&v40);
    if (HIDWORD(v38))
    {
      v26 = (uint64_t *)v37;
      v27 = 8 * HIDWORD(v38);
      do
      {
        v26 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v26, v13)+ 1;
        v27 -= 8;
      }
      while (v27);
    }
    v14 = v37;
    if (v37)
    {
      v37 = 0;
      LODWORD(v38) = 0;
      WTF::fastFree(v14, v13);
    }
    if (v36)
    {
      if (v35 != -1)
        ((void (*)(char *, char *))off_1E33930D8[v35])(&v54, v34);
      v35 = -1;
    }
    v15 = v33[1];
    v33[1] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v33[0];
    v33[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v39;
    v39 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
      v19 = 0;
      v18 = v41;
      if (!v41)
        goto LABEL_34;
    }
    else
    {
      v18 = v41;
      if (!v41)
      {
        v19 = 0;
LABEL_34:
        if (v40)
        {
          if (v40[4] == 1)
            (*(void (**)(void))(*(_QWORD *)v40 + 8))();
          else
            --v40[4];
        }
        v8 = v51;
        goto LABEL_38;
      }
      v19 = *v41;
    }
    v20 = v18 - 2;
    v21 = *(_QWORD *)(((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = (uint64_t *)*(v18 - 1);
    if (v22)
    {
      v23 = *v20;
      *v22 = *v20;
      *(_QWORD *)(v23 + 8) = v22;
      *v20 = 0;
      v20[1] = 0;
    }
    *v20 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    v41 = 0;
    goto LABEL_34;
  }
  v28 = (WebCore::JSExtendableMessageEvent *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSExtendableMessageEvent::ports(v28, v29);
}

uint64_t WebCore::JSExtendableMessageEvent::ports(WebCore::JSExtendableMessageEvent *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t result;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::JSCell *v10;
  uint64_t v11;
  _QWORD *Allocator;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v5 + 176);
  v7 = (JSC::JSCell *)result;
  if (!result)
  {
    v8 = *(_QWORD *)(v5 + 184);
    v9 = v5;
    if (!v8)
      goto LABEL_9;
    v7 = *(JSC::JSCell **)v8;
    v9 = v5;
    if (!*(_QWORD *)v8)
      goto LABEL_9;
    v9 = v5;
    if ((*(_BYTE *)(v8 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v7 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v7) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_14:
      result = *(_QWORD *)(v5 + 176);
      goto LABEL_15;
    }
    v9 = *((_QWORD *)this + 3);
LABEL_9:
    v10 = (JSC::JSCell *)WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::MessagePort>>>::convert<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul>(a2, *(JSC::VM **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v9 + 160);
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v11 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v10);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v5 + 176) = result;
      v15 = *(_QWORD *)(v5 + 184);
      if (!v15)
        return result;
      *(_QWORD *)(v15 + 8) = 3;
      *(_QWORD *)(v5 + 184) = 0;
      goto LABEL_14;
    }
    Allocator = 0;
    *(_QWORD *)(v5 + 176) = 0;
    if (result)
    {
      v16 = result;
      if ((result & 8) != 0)
        v17 = (result - 112) | 1;
      else
        v17 = result & 0xFFFFFFFFFFFFC000;
      if ((v17 & 1) != 0)
        v18 = v17 + 47;
      else
        v18 = *(_QWORD *)v17 + 32;
      Allocator = *(_QWORD **)(v18 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v18 + 16) = *Allocator;
      result = v16;
      *Allocator = v16;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v13 = *(_QWORD *)(v5 + 184);
    *(_QWORD *)(v5 + 184) = Allocator;
    if (v13)
    {
      *(_QWORD *)(v13 + 8) = 3;
      if (!result)
        goto LABEL_14;
    }
    else if (!result)
    {
      goto LABEL_14;
    }
    if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)this);
    goto LABEL_14;
  }
LABEL_15:
  if (!result)
  {
    v14 = *(_BYTE **)(v5 + 184);
    if (v14 && *(_QWORD *)v14)
    {
      if ((v14[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v14;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSFetchEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 104);
  if (v2)
    v3 = *(_BYTE *)(a2 + 130) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v2 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956BD2D0);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v2);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::FileSystemEntry>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  int v8;
  JSC::VM *v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  int v18;
  unint64_t v19;
  WebCore::JSFileSystemDirectoryEntry *v20;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  WebCore::JSFileSystemDirectoryEntry *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *Allocator;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  int v37;
  unint64_t v38;
  WebCore::JSFileSystemFileEntry *v39;
  JSC::JSCell *v40;
  uint64_t v41;
  WebCore::JSFileSystemFileEntry *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v47 = *(_QWORD *)(v5 + 32);
    if (!v47)
      goto LABEL_5;
    v48 = *(_DWORD *)(v47 - 8);
    v49 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
    v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
    v52 = v48 & ((v51 >> 31) ^ v51);
    v53 = *(_QWORD *)(v47 + 16 * v52);
    if (v53 != a3)
    {
      v54 = 1;
      while (v53)
      {
        v52 = ((_DWORD)v52 + v54) & v48;
        v53 = *(_QWORD *)(v47 + 16 * v52);
        ++v54;
        if (v53 == a3)
          goto LABEL_57;
      }
LABEL_5:
      ++*(_DWORD *)(a3 + 32);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3);
      v11 = *((_QWORD *)a2 + 412);
      if (v8)
      {
        if (v11)
        {
          v12 = *(_DWORD *)(v11 - 8);
          v13 = ((unint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info
               + ~((_QWORD)&WebCore::JSFileSystemDirectoryEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info
                                                                                  + ~((_QWORD)&WebCore::JSFileSystemDirectoryEntry::s_info << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = *(char ***)(v11 + 16 * v16);
          if (v17 == &WebCore::JSFileSystemDirectoryEntry::s_info)
          {
LABEL_11:
            v19 = *(_QWORD *)(v11 + 16 * v16 + 8);
            if (v19)
              goto LABEL_13;
          }
          else
          {
            v18 = 1;
            while (v17)
            {
              v16 = ((_DWORD)v16 + v18) & v12;
              v17 = *(char ***)(v11 + 16 * v16);
              ++v18;
              if (v17 == &WebCore::JSFileSystemDirectoryEntry::s_info)
                goto LABEL_11;
            }
          }
        }
        v20 = (WebCore::JSFileSystemDirectoryEntry *)*((_QWORD *)a2 + 7);
        Prototype = (JSC::JSCell *)WebCore::JSFileSystemDirectoryEntry::createPrototype(v20, a2, v10);
        Structure = WebCore::JSFileSystemDirectoryEntry::createStructure((uint64_t *)v20, (uint64_t)a2, Prototype);
        v19 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info);
LABEL_13:
        v23 = (WebCore::JSFileSystemDirectoryEntry *)*((_QWORD *)a2 + 7);
        v24 = (_QWORD *)WebCore::JSFileSystemDirectoryEntry::subspaceForImpl(v23, v9);
        SlowCase = v24[3];
        if (SlowCase >= v24[4])
        {
          SlowCase = v24[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_15;
          }
          v62 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
          v24[4] = SlowCase + HIDWORD(v62);
          v24[5] = SlowCase + (int)v62;
        }
        v24[3] = SlowCase + 32;
LABEL_15:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v19);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (*((_BYTE *)v23 + 755))
          __dmb(0xAu);
        v25 = *((_QWORD *)a2 + 415);
        if ((byte_1EE337A80 & 1) == 0)
        {
          qword_1EE337A78 = (uint64_t)&off_1E327F380;
          byte_1EE337A80 = 1;
        }
        if (!*(_DWORD *)(v25 + 48))
        {
          if ((SlowCase & 8) != 0)
            v26 = (SlowCase - 112) | 1;
          else
            v26 = SlowCase & 0xFFFFFFFFFFFFC000;
          if ((v26 & 1) != 0)
            v27 = v26 + 47;
          else
            v27 = *(_QWORD *)v26 + 32;
          Allocator = *(uint64_t **)(v27 + 16);
          if (!Allocator)
            Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
          v29 = *Allocator;
          v30 = &qword_1EE337A78;
          goto LABEL_50;
        }
        v55 = (uint64_t *)(v25 + 32);
        v65 = a3;
        if ((SlowCase & 8) != 0)
          v56 = (SlowCase - 112) | 1;
        else
          v56 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v56 & 1) != 0)
          v57 = v56 + 47;
        else
          v57 = *(_QWORD *)v56 + 32;
        v58 = *(_QWORD **)(v57 + 16);
        if (!v58)
          v58 = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v57 + 16) = *v58;
        v59 = &qword_1EE337A78;
        goto LABEL_75;
      }
      if (v11)
      {
        v31 = *(_DWORD *)(v11 - 8);
        v32 = ((unint64_t)&WebCore::JSFileSystemFileEntry::s_info
             + ~((_QWORD)&WebCore::JSFileSystemFileEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemFileEntry::s_info
                                                                           + ~((_QWORD)&WebCore::JSFileSystemFileEntry::s_info << 32)) >> 22);
        v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
        v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
        v35 = v31 & ((v34 >> 31) ^ v34);
        v36 = *(char ***)(v11 + 16 * v35);
        if (v36 == &WebCore::JSFileSystemFileEntry::s_info)
        {
LABEL_33:
          v38 = *(_QWORD *)(v11 + 16 * v35 + 8);
          if (v38)
            goto LABEL_35;
        }
        else
        {
          v37 = 1;
          while (v36)
          {
            v35 = ((_DWORD)v35 + v37) & v31;
            v36 = *(char ***)(v11 + 16 * v35);
            ++v37;
            if (v36 == &WebCore::JSFileSystemFileEntry::s_info)
              goto LABEL_33;
          }
        }
      }
      v39 = (WebCore::JSFileSystemFileEntry *)*((_QWORD *)a2 + 7);
      v40 = (JSC::JSCell *)WebCore::JSFileSystemFileEntry::createPrototype(v39, a2, v10);
      v41 = WebCore::JSFileSystemFileEntry::createStructure((uint64_t *)v39, (uint64_t)a2, v40);
      v38 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSFileSystemFileEntry::s_info);
LABEL_35:
      v42 = (WebCore::JSFileSystemFileEntry *)*((_QWORD *)a2 + 7);
      v43 = (_QWORD *)WebCore::JSFileSystemFileEntry::subspaceForImpl(v42, v9);
      SlowCase = v43[3];
      if (SlowCase >= v43[4])
      {
        SlowCase = v43[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_37;
        }
        v63 = *(_QWORD *)(SlowCase + 8) ^ v43[6];
        v43[4] = SlowCase + HIDWORD(v63);
        v43[5] = SlowCase + (int)v63;
      }
      v43[3] = SlowCase + 32;
LABEL_37:
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v38);
      *(_QWORD *)(SlowCase + 24) = a3;
      if (*((_BYTE *)v42 + 755))
        __dmb(0xAu);
      v25 = *((_QWORD *)a2 + 415);
      if ((byte_1EE337A90 & 1) == 0)
      {
        qword_1EE337A88 = (uint64_t)&off_1E327F4B0;
        byte_1EE337A90 = 1;
      }
      if (!*(_DWORD *)(v25 + 48))
      {
        if ((SlowCase & 8) != 0)
          v44 = (SlowCase - 112) | 1;
        else
          v44 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v44 & 1) != 0)
          v27 = v44 + 47;
        else
          v27 = *(_QWORD *)v44 + 32;
        Allocator = *(uint64_t **)(v27 + 16);
        if (!Allocator)
          Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
        v29 = *Allocator;
        v30 = &qword_1EE337A88;
LABEL_50:
        *(_QWORD *)(v27 + 16) = v29;
        *Allocator = SlowCase;
        Allocator[1] = (uint64_t)v30;
        Allocator[2] = v25;
        v45 = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = Allocator;
        if (!v45)
          return SlowCase;
LABEL_76:
        *(_QWORD *)(v45 + 8) = 3;
        return SlowCase;
      }
      v55 = (uint64_t *)(v25 + 32);
      v65 = a3;
      if ((SlowCase & 8) != 0)
        v60 = (SlowCase - 112) | 1;
      else
        v60 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v60 & 1) != 0)
        v61 = v60 + 47;
      else
        v61 = *(_QWORD *)v60 + 32;
      v58 = *(_QWORD **)(v61 + 16);
      if (!v58)
        v58 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v61 + 16) = *v58;
      v59 = &qword_1EE337A88;
LABEL_75:
      *v58 = SlowCase;
      v58[1] = v59;
      v58[2] = v25;
      v64 = v58;
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v55, &v65, (uint64_t *)&v64);
      v45 = (uint64_t)v64;
      if (!v64)
        return SlowCase;
      goto LABEL_76;
    }
LABEL_57:
    v6 = *(_QWORD *)(v47 + 16 * v52 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    goto LABEL_5;
  SlowCase = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_5;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::FileSystemHandle>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  WebCore::JSFileSystemDirectoryHandle *v24;
  JSC::JSCell *v25;
  uint64_t v26;
  WebCore::JSFileSystemDirectoryHandle *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  void (**v31)(WebCore::JSFileSystemDirectoryHandleOwner *__hidden);
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  int v38;
  unint64_t v39;
  WebCore::JSFileSystemFileHandle *v40;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  WebCore::JSFileSystemFileHandle *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v15 = *((_QWORD *)a2 + 412);
  if (*(_BYTE *)(a3 + 28) != 1)
  {
    if (v15)
    {
      v32 = *(_DWORD *)(v15 - 8);
      v33 = ((unint64_t)&WebCore::JSFileSystemFileHandle::s_info
           + ~((_QWORD)&WebCore::JSFileSystemFileHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemFileHandle::s_info
                                                                          + ~((_QWORD)&WebCore::JSFileSystemFileHandle::s_info << 32)) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = *(char ***)(v15 + 16 * v36);
      if (v37 == &WebCore::JSFileSystemFileHandle::s_info)
      {
LABEL_28:
        v39 = *(_QWORD *)(v15 + 16 * v36 + 8);
        if (v39)
          goto LABEL_30;
      }
      else
      {
        v38 = 1;
        while (v37)
        {
          v36 = ((_DWORD)v36 + v38) & v32;
          v37 = *(char ***)(v15 + 16 * v36);
          ++v38;
          if (v37 == &WebCore::JSFileSystemFileHandle::s_info)
            goto LABEL_28;
        }
      }
    }
    v40 = (WebCore::JSFileSystemFileHandle *)*((_QWORD *)a2 + 7);
    Prototype = (JSC::JSCell *)WebCore::JSFileSystemFileHandle::createPrototype(v40, a2, (WebCore::JSDOMGlobalObject *)a3);
    Structure = WebCore::JSFileSystemFileHandle::createStructure((uint64_t *)v40, (uint64_t)a2, Prototype);
    v39 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFileSystemFileHandle::s_info);
LABEL_30:
    v43 = (WebCore::JSFileSystemFileHandle *)*((_QWORD *)a2 + 7);
    v44 = (_QWORD *)WebCore::JSFileSystemFileHandle::subspaceForImpl(v43, a2);
    SlowCase = v44[3];
    if (SlowCase >= v44[4])
    {
      SlowCase = v44[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_32;
      }
      v50 = *(_QWORD *)(SlowCase + 8) ^ v44[6];
      v44[4] = SlowCase + HIDWORD(v50);
      v44[5] = SlowCase + (int)v50;
    }
    v44[3] = SlowCase + 32;
LABEL_32:
    *(_DWORD *)SlowCase = 0;
    WebCore::JSDOMObject::JSDOMObject(SlowCase, v39);
    *(_QWORD *)(SlowCase + 24) = a3;
    if (*((_BYTE *)v43 + 755))
      __dmb(0xAu);
    v29 = *((_QWORD *)a2 + 415);
    v30 = &qword_1EE337AA8;
    if ((byte_1EE337AB0 & 1) != 0)
      goto LABEL_35;
    v31 = &off_1E327F710;
    goto LABEL_51;
  }
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info
         + ~((_QWORD)&WebCore::JSFileSystemDirectoryHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info
                                                                             + ~((_QWORD)&WebCore::JSFileSystemDirectoryHandle::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSFileSystemDirectoryHandle::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSFileSystemDirectoryHandle::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = (WebCore::JSFileSystemDirectoryHandle *)*((_QWORD *)a2 + 7);
  v25 = (JSC::JSCell *)WebCore::JSFileSystemDirectoryHandle::createPrototype(v24, a2, (WebCore::JSDOMGlobalObject *)a3);
  v26 = WebCore::JSFileSystemDirectoryHandle::createStructure((uint64_t *)v24, (uint64_t)a2, v25);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v26, (uint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info);
LABEL_17:
  v27 = (WebCore::JSFileSystemDirectoryHandle *)*((_QWORD *)a2 + 7);
  v28 = (_QWORD *)WebCore::JSFileSystemDirectoryHandle::subspaceForImpl(v27, a2);
  SlowCase = v28[3];
  if (SlowCase >= v28[4])
  {
    SlowCase = v28[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_19;
    }
    v49 = *(_QWORD *)(SlowCase + 8) ^ v28[6];
    v28[4] = SlowCase + HIDWORD(v49);
    v28[5] = SlowCase + (int)v49;
  }
  v28[3] = SlowCase + 32;
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v27 + 755))
    __dmb(0xAu);
  v29 = *((_QWORD *)a2 + 415);
  v30 = &qword_1EE337A98;
  if ((byte_1EE337AA0 & 1) != 0)
    goto LABEL_35;
  v31 = &off_1E327F5E0;
LABEL_51:
  *v30 = (uint64_t)v31;
  *((_BYTE *)v30 + 8) = 1;
LABEL_35:
  v52 = a3;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  Allocator = *(_QWORD **)(v46 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = v30;
  Allocator[2] = v29;
  v51 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v29 + 32), &v52, (uint64_t *)&v51);
  if (v51)
    v51[1] = 3;
  return SlowCase;
}

void WebCore::JSHTMLAllCollection::getCallData(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = WebCore::callJSHTMLAllCollection;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t WebCore::callJSHTMLAllCollection(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v6;
  uint64_t v7;
  WebCore::HTMLAllCollection *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WebCore::Element *v13;
  uint64_t v14;
  __n128 v15;
  WTF::StringImpl *v16;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  unsigned int v28;
  char v29;
  WTF::StringImpl *v30;
  _BYTE v31[8];
  int v32;
  _QWORD v33[5];
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37[5];

  if (*((_DWORD *)a2 + 8) == 1)
    return 2;
  v3 = *((_QWORD *)a2 + 6);
  if (v3 == 10)
    return 2;
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v7 = *((_QWORD *)a2 + 3);
  v8 = *(WebCore::HTMLAllCollection **)(v7 + 24);
  v33[0] = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 2)
    v3 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)v33, this);
  v9 = *(WTF::AtomStringImpl **)(v3 + 8);
  if ((v9 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v3, this);
    goto LABEL_11;
  }
  if (v9)
  {
    if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v9 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v9, a2);
      v9 = (WTF::AtomStringImpl *)v37[0];
    }
    v10 = *(_QWORD *)(v3 + 8);
    v30 = v9;
    if ((*(_BYTE *)(v10 + 16) & 0x10) != 0)
      goto LABEL_11;
    v18 = *((_QWORD *)this + 7);
    if (v9)
      *(_DWORD *)v9 += 2;
  }
  else
  {
    v30 = 0;
    if ((MEMORY[0x10] & 0x10) != 0)
      goto LABEL_11;
    v9 = 0;
    v18 = *((_QWORD *)this + 7);
  }
  __dmb(0xAu);
  v19 = *(uint64_t **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v9;
  v37[0] = v19;
  v20 = (_QWORD *)(v18 + 808);
  v21 = *(unsigned int *)(v18 + 820);
  if ((_DWORD)v21 == *(_DWORD *)(v18 + 816))
  {
    v23 = (uint64_t **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)v37);
    v21 = *(unsigned int *)(v18 + 820);
    v22 = (uint64_t **)(*(_QWORD *)(v18 + 808) + 8 * v21);
    v19 = *v23;
  }
  else
  {
    v22 = (uint64_t **)(*v20 + 8 * v21);
    v23 = v37;
  }
  *v23 = 0;
  *v22 = v19;
  *(_DWORD *)(v18 + 820) = v21 + 1;
  v24 = (WTF::StringImpl *)v37[0];
  v37[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_11:
  if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
  {
    v4 = 0;
LABEL_23:
    v16 = v30;
    v30 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return v4;
  }
  v11 = *(uint64_t **)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28);
  WebCore::HTMLAllCollection::namedOrIndexedItemOrItems(v8, (const WTF::AtomString *)&v30, (uint64_t)v27);
  if (!v29)
  {
    v4 = 2;
    goto LABEL_23;
  }
  v31[0] = 0;
  v32 = -1;
  v14 = v28;
  if (v28 == -1)
  {
    v14 = -1;
  }
  else
  {
    ((void (*)(uint64_t **, _BYTE *, _BYTE *))off_1E3393138[v28])(v37, v31, v27);
    v32 = v14;
  }
  LOBYTE(v34) = 0;
  v35 = 0;
  v36 = v14;
  v37[0] = &v36;
  v37[1] = &v34;
  v37[2] = (uint64_t *)this;
  v37[3] = v11;
  v37[4] = (uint64_t *)v31;
  v15 = _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_14HTMLCollectionEEENS4_INS_7ElementEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_(v37, v13, (uint64_t)v33);
  if (v35)
  {
    v4 = v34;
    if (v32 != -1)
      ((void (*)(uint64_t **, _BYTE *, __n128))off_1E3393128[v32])(v37, v31, v15);
    if (v29 && v28 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E3393128[v28])(v37, v27);
    goto LABEL_23;
  }
  v25 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::JSHTMLCanvasElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>(v25, v26);
}

uint64_t WebCore::JSHTMLCanvasElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (!*(_BYTE *)(a2 + 130))
  {
    v3 = *(_QWORD *)(result + 24) + 112;
    result = *(_QWORD *)(a2 + 120);
    v4 = *(_QWORD *)(result + 48);
    v5 = *(_DWORD *)(v4 + 4);
    v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = v9;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8 * v10 + 16);
      if (!v11)
        break;
      if (v3 == v11)
        return result;
      v10 = (v10 + 1) & v5;
      if (v10 == v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1956BE0F4);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

unint64_t WebCore::createWrapper<WebCore::HTMLFormControlsCollection,WebCore::HTMLCollection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  v3 = WebCore::createWrapper<WebCore::HTMLFormControlsCollection,WebCore::HTMLFormControlsCollection>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return v3;
}

unint64_t WebCore::createWrapper<WebCore::HTMLOptionsCollection,WebCore::HTMLCollection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  v3 = WebCore::createWrapper<WebCore::HTMLOptionsCollection,WebCore::HTMLOptionsCollection>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return v3;
}

uint64_t WebCore::createWrapper<WebCore::HTMLAllCollection,WebCore::HTMLCollection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  v3 = WebCore::createWrapper<WebCore::HTMLAllCollection,WebCore::HTMLAllCollection>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return v3;
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  JSC::JSGlobalObject *v4;
  unint64_t v5;
  WebCore::Document *v6;

  v4 = (JSC::JSGlobalObject *)*a3;
  v5 = WebCore::createWrapper<WebCore::HTMLDocument,WebCore::HTMLDocument>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  WebCore::reportMemoryForDocumentIfFrameless(a1, v4, v6);
  return v5;
}

{
  WebCore::JSDOMGlobalObject *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 112))(*a3))
  {
    v7 = *a3;
    v8 = *((_QWORD *)a2 + 412);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = ((unint64_t)&WebCore::JSSourceBuffer::s_info + ~((_QWORD)&WebCore::JSSourceBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSSourceBuffer::s_info + ~((_QWORD)&WebCore::JSSourceBuffer::s_info << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(char ***)(v8 + 16 * v13);
      if (v14 == &WebCore::JSSourceBuffer::s_info)
      {
LABEL_8:
        v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v16)
        {
LABEL_10:
          v6 = WebCore::JSSourceBuffer::create(v16, a2, a3);
          WebCore::cacheWrapper<WebCore::SourceBuffer,WebCore::JSSourceBuffer>(*((_QWORD *)a2 + 415), v7, v6);
          return v6;
        }
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(char ***)(v8 + 16 * v13);
          ++v15;
          if (v14 == &WebCore::JSSourceBuffer::s_info)
            goto LABEL_8;
        }
      }
    }
    v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
    v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, v5);
    Structure = WebCore::JSSourceBufferPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v21 = (JSC::JSCell *)WebCore::JSSourceBufferPrototype::create(v17, a2, Structure, v20);
    v22 = JSC::Structure::create((uint64_t *)v17, (int)a2, v21);
    v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSSourceBuffer::s_info);
    goto LABEL_10;
  }
  return WebCore::createWrapper<WebCore::ManagedSourceBuffer,WebCore::SourceBuffer>(a2, a3, v5);
}

unint64_t WebCore::createWrapper<WebCore::HTMLDocument,WebCore::HTMLDocument>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSHTMLDocument *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v17;
  int v19;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSHTMLDocument::s_info + ~((_QWORD)&WebCore::JSHTMLDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLDocument::s_info + ~((_QWORD)&WebCore::JSHTMLDocument::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSHTMLDocument::s_info)
  {
    v19 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v19) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v19;
      if (v12 == &WebCore::JSHTMLDocument::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_4:
    v14 = (WebCore::JSHTMLDocument *)*((_QWORD *)a1 + 7);
    Prototype = (JSC::JSCell *)WebCore::JSHTMLDocument::createPrototype(v14, a1, a3);
    Structure = WebCore::JSHTMLDocument::createStructure((uint64_t *)v14, (uint64_t)a1, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSHTMLDocument::s_info);
  }
  v17 = WebCore::JSHTMLDocument::create(v13, a1, a2);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), v5, v17);
  return v17;
}

_QWORD *WebCore::constructJSHTMLElement(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::JSObject *v8;
  uint64_t v9;
  JSC::JSCell *v10;
  JSC::JSGlobalObject *Object;
  JSC::VM *FunctionRealm;
  uint64_t v13;
  _DWORD *v14;
  JSC::JSObject *v15;
  WebCore::Element *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t SubclassStructure;
  WebCore::Node *v29;
  void *v30;
  uint64_t v31;
  WebCore::Node *v32;
  void *v33;
  WebCore::Element *v34;
  uint64_t v35;
  JSC::JSGlobalObject *v36;
  JSC::VM *v37;
  JSValue v38;
  int v40;
  WebCore::Node *v42;
  WebCore::Element *v43;
  uint64_t v44;
  JSC::VM *v45;

  v5 = *((_QWORD *)this + 7);
  v45 = (JSC::VM *)v5;
  v6 = *((_QWORD *)a2 + 3);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
  if (!v7)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v45, (uint64_t)"HTMLElement", 12);
  v9 = v7;
  v10 = (JSC::JSCell *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
    Object = 0;
  else
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v10);
  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v8);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  if ((JSC::JSGlobalObject *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(v5, (uint64_t)FunctionRealm) == Object)return (_QWORD *)JSC::throwTypeError();
  if (*(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1956BE7C4);
  }
  *(_DWORD *)(v9 - 168) += 2;
  v13 = *(_QWORD *)(v9 + 504);
  if (!v13)
  {
    v31 = JSC::throwTypeError();
    goto LABEL_32;
  }
  ++*(_DWORD *)(v13 + 24);
  v14 = *(_DWORD **)(v13 + 264);
  if (v14)
  {
    ++v14[4];
    WebCore::CustomElementRegistry::findInterface((uint64_t)v14, Object, &v44);
    v17 = (unsigned int *)v44;
    if (!v44)
    {
      v31 = JSC::throwTypeError();
LABEL_28:
      if (v14[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[4];
      goto LABEL_30;
    }
    v18 = *(unsigned int *)(v44 + 124);
    if ((_DWORD)v18)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v44 + 112) + 8 * v18 - 8);
      if (!v35)
      {
        JSC::throwTypeError();
        v31 = 10;
        goto LABEL_26;
      }
      *(_DWORD *)(v35 + 24) += 2;
      v31 = WebCore::toJS(this, *(JSC::JSGlobalObject **)(v6 + 40), (WebCore::JSDOMGlobalObject *)v35, v16);
      v36 = (JSC::JSGlobalObject *)JSC::JSObject::get(Object, this, *(_QWORD *)(*(_QWORD *)(v5 + 41952) + 2160));
      v37 = v45;
      if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0
        || (v38.super.isa = (Class)1,
            JSC::JSObject::setPrototype((JSC::JSObject *)v31, this, v36, v38),
            *((_DWORD *)v37 + 20))
        && (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) != 0)
      {
        v31 = 0;
      }
      else
      {
        WebCore::JSCustomElementInterface::didUpgradeLastElementInConstructionStack(v17, v33);
      }
      if (*(_DWORD *)(v35 + 24) != 2)
      {
        *(_DWORD *)(v35 + 24) -= 2;
        goto LABEL_26;
      }
      if ((*(_WORD *)(v35 + 30) & 0x400) != 0)
      {
LABEL_26:
        if (v17[4] == 1)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
        else
          --v17[4];
        goto LABEL_28;
      }
      v34 = (WebCore::Element *)v35;
LABEL_46:
      WebCore::Node::removedLastRef(v34, v33);
      goto LABEL_26;
    }
    v19 = *((_QWORD *)FunctionRealm + 412);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = ((unint64_t)&WebCore::JSHTMLElement::s_info + ~((_QWORD)&WebCore::JSHTMLElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLElement::s_info + ~((_QWORD)&WebCore::JSHTMLElement::s_info << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(char ***)(v19 + 16 * v24);
      if (v25 == &WebCore::JSHTMLElement::s_info)
      {
LABEL_13:
        v15 = *(JSC::JSObject **)(v19 + 16 * v24 + 8);
        if (v15)
        {
LABEL_15:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, Object, v15, v16);
          if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
          {
            v31 = 0;
            goto LABEL_26;
          }
          WebCore::JSCustomElementInterface::createElement((WebCore::JSCustomElementInterface *)v17, (WebCore::Document *)(v9 - 192), &v43);
          WebCore::Element::setIsDefinedCustomElement(v43, (WebCore::JSCustomElementInterface *)v17);
          v29 = v43;
          *((_DWORD *)v43 + 6) += 2;
          v42 = v29;
          v31 = WebCore::JSHTMLElement::create(SubclassStructure, FunctionRealm, (uint64_t *)&v42);
          v32 = v42;
          v42 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v32, v30);
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
          }
          WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)FunctionRealm + 415), (uint64_t)v43, v31);
          v34 = v43;
          v43 = 0;
          if (!v34)
            goto LABEL_26;
          if (*((_DWORD *)v34 + 6) != 2)
          {
            *((_DWORD *)v34 + 6) -= 2;
            goto LABEL_26;
          }
          if ((*((_WORD *)v34 + 15) & 0x400) != 0)
            goto LABEL_26;
          goto LABEL_46;
        }
      }
      else
      {
        v40 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v40) & v20;
          v25 = *(char ***)(v19 + 16 * v24);
          ++v40;
          if (v25 == &WebCore::JSHTMLElement::s_info)
            goto LABEL_13;
        }
      }
    }
    Prototype = (JSC::JSCell *)WebCore::JSHTMLElement::createPrototype((WebCore::JSHTMLElement *)v5, FunctionRealm, v15);
    Structure = WebCore::JSHTMLElement::createStructure((uint64_t *)v5, (uint64_t)FunctionRealm, Prototype);
    v15 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, Structure, (uint64_t)&WebCore::JSHTMLElement::s_info);
    goto LABEL_15;
  }
  v31 = JSC::throwTypeError();
LABEL_30:
  if (*(_DWORD *)(v13 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
  else
    --*(_DWORD *)(v13 + 24);
LABEL_32:
  if (*(_DWORD *)(v9 - 168) == 2)
  {
    if ((*(_WORD *)(v9 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 192), v33);
  }
  else
  {
    *(_DWORD *)(v9 - 168) -= 2;
  }
  return (_QWORD *)v31;
}

uint64_t WebCore::JSHTMLElement::pushEventHandlerScope(uint64_t a1, WebCore::DOMWrapperWorld **this, uint64_t a3, WebCore::Document *a4)
{
  WebCore::JSDOMGlobalObject *v6;
  JSC::VM *v7;
  WebCore::Node *v8;
  WebCore *Ref;
  WebCore::HTMLElement *v10;
  uint64_t v11;
  void *v13;
  WebCore::Node *v14;
  uint64_t v15;
  void *v16;
  WebCore::Node *v17;

  v6 = *(WebCore::JSDOMGlobalObject **)(a1 + 24);
  v7 = *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v8 = *(WebCore::Node **)(*((_QWORD *)v6 + 5) + 8);
  if (!WebCore::cachedDocumentWrapper(this, v7, v8, a4))
  {
    *((_DWORD *)v8 + 6) += 2;
    v17 = v8;
    WebCore::toJSNewlyCreated((uint64_t)this, v7, &v17);
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v13);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
  }
  JSC::JSWithScope::create();
  Ref = (WebCore *)(*(uint64_t (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)v6 + 1200))(v6);
  if (Ref)
  {
    v11 = *((_QWORD *)Ref + 1);
    if (v11)
    {
      v15 = *(_QWORD *)(v11 + 8);
      if (v15)
      {
        *(_DWORD *)(v15 + 24) += 2;
        WebCore::toJS(Ref, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v15, v10);
        Ref = (WebCore *)JSC::JSWithScope::create();
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            Ref = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
      }
    }
  }
  WebCore::toJS(Ref, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v6, v10);
  return JSC::JSWithScope::create();
}

uint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::HTMLElement *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t JSHTMLWrapper;
  void *v7;
  WebCore::Node *v8;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  WebCore::Node *v18;

  v4 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v4 + 48))
  {
    v10 = *(_QWORD *)(v4 + 32);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::JSDOMGlobalObject **)(v10 + 16 * v15);
      if (v16 == a3)
      {
LABEL_12:
        v5 = *(_QWORD *)(v10 + 16 * v15 + 8);
        if (v5)
          goto LABEL_3;
      }
      else
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::JSDOMGlobalObject **)(v10 + 16 * v15);
          ++v17;
          if (v16 == a3)
            goto LABEL_12;
        }
      }
    }
  }
  else
  {
    v5 = *((_QWORD *)a3 + 1);
    if (v5)
    {
LABEL_3:
      if ((*(_BYTE *)(v5 + 8) & 3) == 0)
      {
        JSHTMLWrapper = *(_QWORD *)v5;
        if (*(_QWORD *)v5)
          return JSHTMLWrapper;
      }
    }
  }
  *((_DWORD *)a3 + 6) += 2;
  v18 = a3;
  JSHTMLWrapper = WebCore::createJSHTMLWrapper(a2, (uint64_t *)&v18, a3);
  v8 = v18;
  v18 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v7);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return JSHTMLWrapper;
}

uint64_t WebCore::JSHTMLTemplateElement::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 112);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 22) & 8) == 0)
    {
      while (1)
      {
        v4 = v2;
        if ((*(_WORD *)(v2 + 28) & 0x80) != 0)
        {
          v6 = *(_QWORD *)(v2 + 200);
          if (!v6)
            goto LABEL_10;
          v5 = (uint64_t *)(v6 + 8);
        }
        else
        {
          v5 = (uint64_t *)(v2 + 32);
        }
        v2 = *v5;
        if (!v2)
          goto LABEL_10;
      }
    }
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
LABEL_10:
    if (v4 && !*(_BYTE *)(a2 + 130))
    {
      result = *(_QWORD *)(a2 + 120);
      v7 = *(_QWORD *)(result + 48);
      v8 = *(_DWORD *)(v7 + 4);
      v9 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = v12;
      while (1)
      {
        v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
        if (!v14)
          break;
        if (v4 == v14)
          return result;
        v13 = (v13 + 1) & v8;
        if (v13 == v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1956BEC7CLL);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
        ++*(_QWORD *)(a2 + 72);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSHistory::state(WebCore::JSHistory *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  JSC::JSCell *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  _QWORD *Allocator;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  int v24[2];
  WTF::StringImpl *v25;
  unsigned int v26;

  v4 = *((_QWORD *)a2 + 7);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  result = v5[4];
  if (result)
    goto LABEL_5;
  v7 = v5[5];
  if (!v7 || !*(_QWORD *)v7)
    goto LABEL_19;
  if ((*(_BYTE *)(v7 + 8) & 3) == 0)
  {
LABEL_5:
    v8 = v5[2];
    if (v8)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (v8)
      {
        v8 = *(_QWORD *)(v8 + 72);
        if (v8)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (v8)
          {
            if (*(_BYTE *)(v8 + 178))
            {
              __break(0xC471u);
              JUMPOUT(0x1956BEFE8);
            }
            v8 = *(_QWORD *)(v8 + 240);
            if (v8)
            {
              v8 = *(_QWORD *)(v8 + 8);
              if (v8)
              {
                v8 = *(_QWORD *)(*(_QWORD *)(v8 + 184) + 16);
                if (v8)
                  v8 = *(_QWORD *)(v8 + 168);
              }
            }
          }
        }
      }
    }
    if (v5[3] != v8)
    {
      v5[4] = 0;
      v19 = v5[5];
      if (!v19)
        goto LABEL_19;
      *(_QWORD *)(v19 + 8) = 3;
      v5[5] = 0;
      result = v5[4];
    }
    v9 = (JSC::JSCell *)result;
    if (result)
      goto LABEL_25;
    v7 = v5[5];
    if (!v7)
      goto LABEL_19;
  }
  v9 = *(JSC::JSCell **)v7;
  if (!*(_QWORD *)v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
    goto LABEL_19;
  result = 0;
LABEL_25:
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v9 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v9) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_42:
      result = v5[4];
      goto LABEL_43;
    }
LABEL_19:
    WebCore::History::state(*((WebCore::History **)this + 3), (uint64_t)v24);
    v10 = v26;
    if (v26 == -1 || (((void (*)(_BYTE *, int *))off_1E3393400[v26])(v22, v24), (_DWORD)v10))
    {
      WebCore::History::state(*((WebCore::History **)this + 3), (uint64_t)v24);
      if (v26 == 1)
      {
        v12 = (WTF::StringImpl *)LOBYTE(v24[0]);
        v22[0] = v24[0];
        v13 = v25;
        v23 = v25;
        if (!*(_QWORD *)(v4 + 16))
        {
          v14.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)LOBYTE(v24[0]), (JSC::JSGlobalObject *)&v23);
          JSC::VM::throwException((JSC::VM *)v4, a2, v14);
          v13 = v23;
        }
        v23 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        goto LABEL_35;
      }
    }
    else
    {
      WebCore::History::state(*((WebCore::History **)this + 3), (uint64_t)v24);
      if (!v26)
      {
        if (*(_QWORD *)v24)
        {
          v11 = (uint64_t)WebCore::SerializedScriptValue::deserialize(*(uint64_t *)v24, a2, *(_DWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), 1, 0);
LABEL_36:
          if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
            return 0;
          v4 = *((_QWORD *)a2 + 7);
          result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, (JSC::JSCell *)v11);
          if ((result & 0xFFFE000000000002) != 0)
          {
            v5[4] = result;
            v18 = v5[5];
            if (!v18)
              return result;
            *(_QWORD *)(v18 + 8) = 3;
            v5[5] = 0;
            goto LABEL_42;
          }
          Allocator = 0;
          v5[4] = 0;
          if (!result)
            goto LABEL_39;
          v10 = result;
          if ((result & 8) != 0)
            v20 = (result - 112) | 1;
          else
            v20 = result & 0xFFFFFFFFFFFFC000;
          if ((v20 & 1) == 0)
          {
            v21 = *(_QWORD *)v20 + 32;
LABEL_66:
            Allocator = *(_QWORD **)(v21 + 16);
            if (!Allocator)
              Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v21 + 16) = *Allocator;
            result = v10;
            *Allocator = v10;
            Allocator[1] = 0;
            Allocator[2] = 0;
LABEL_39:
            __dmb(0xAu);
            v16 = v5[5];
            v5[5] = Allocator;
            if (v16)
              *(_QWORD *)(v16 + 8) = 3;
            if (result && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)this + 7))
              JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), (const JSCell *)this);
            goto LABEL_42;
          }
LABEL_70:
          v21 = v20 + 47;
          goto LABEL_66;
        }
LABEL_35:
        v11 = 2;
        goto LABEL_36;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_70;
  }
LABEL_43:
  if (!result)
  {
    v17 = (_BYTE *)v5[5];
    if (v17 && *(_QWORD *)v17)
    {
      if ((v17[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v17;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSIDBCursor::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[21];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 && *(_BYTE *)(a2 + 130) == 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 48);
      v13 = *(_DWORD *)(v12 + 4);
      v14 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = v17;
      while (1)
      {
        v19 = *(_QWORD *)(v12 + 8 * v18 + 16);
        if (!v19)
          break;
        if (v5 == v19)
          goto LABEL_6;
        v18 = (v18 + 1) & v13;
        if (v18 == v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1956BF164);
        }
      }
      if (WTF::ConcurrentPtrHashSet::addSlow())
      {
        if (*(_BYTE *)(a2 + 131))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
        ++*(_QWORD *)(a2 + 72);
      }
    }
  }
LABEL_6:
  v7 = (uint64_t *)v3[43];
  if (!v7 || (v7[1] & 3) != 0)
    v8 = 0;
  else
    v8 = *v7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v8);
  v9 = (uint64_t *)v3[45];
  if (!v9 || (v9[1] & 3) != 0)
    v10 = 0;
  else
    v10 = *v9;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v10);
}

uint64_t WebCore::JSIDBCursor::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD **)(result + 24);
  v4 = v3[21];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 && *(_BYTE *)(a2 + 130) == 0)
    {
      result = *(_QWORD *)(a2 + 120);
      v11 = *(_QWORD *)(result + 48);
      v12 = *(_DWORD *)(v11 + 4);
      v13 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = v16;
      while (1)
      {
        v18 = *(_QWORD *)(v11 + 8 * v17 + 16);
        if (!v18)
          break;
        if (v5 == v18)
          goto LABEL_6;
        v17 = (v17 + 1) & v12;
        if (v17 == v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1956BF2C0);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
        ++*(_QWORD *)(a2 + 72);
      }
    }
  }
LABEL_6:
  v7 = (unint64_t *)v3[43];
  if (v7)
  {
    if ((v7[1] & 3) == 0)
    {
      v8 = *v7;
      if (*v7)
      {
        if ((v8 & 8) != 0)
        {
          if ((*(_BYTE *)(v8 - 79) & 1) == 0)
            goto LABEL_23;
        }
        else
        {
          v19 = v8 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v8 & 0xFFFFFFFFFFFFC000));
            v19 = v8 & 0xFFFFFFFFFFFFC000;
          }
          if (((*(_QWORD *)(v19 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) == 0)
            goto LABEL_23;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_9;
LABEL_23:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_9:
  v9 = (unint64_t *)v3[45];
  if (v9)
  {
    if ((v9[1] & 3) == 0)
    {
      v10 = *v9;
      if (*v9)
      {
        if ((v10 & 8) != 0)
        {
          if ((*(_BYTE *)(v10 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v20 = v10 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
            v20 = v10 & 0xFFFFFFFFFFFFC000;
          }
          if (((*(_QWORD *)(v20 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSIDBCursor::key(WebCore::JSIDBCursor *this, JSC::JSGlobalObject *a2, uint64_t a3, WebCore::IDBKey *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t result;
  JSC::JSCell *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t v13;
  _QWORD *Allocator;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v7 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v7 + 336);
  v9 = (JSC::JSCell *)result;
  if (!result)
  {
    v10 = *(_QWORD *)(v7 + 344);
    v11 = v7;
    if (!v10)
      goto LABEL_9;
    v9 = *(JSC::JSCell **)v10;
    v11 = v7;
    if (!*(_QWORD *)v10)
      goto LABEL_9;
    v11 = v7;
    if ((*(_BYTE *)(v10 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v9 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v9) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_14:
      result = *(_QWORD *)(v7 + 336);
      goto LABEL_15;
    }
    v11 = *((_QWORD *)this + 3);
LABEL_9:
    v12 = (JSC::JSCell *)WebCore::toJS(a2, (unint64_t)a2, *(JSC::JSGlobalObject **)(v11 + 184), a4);
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
      return 0;
    v13 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v12);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v7 + 336) = result;
      v17 = *(_QWORD *)(v7 + 344);
      if (!v17)
        return result;
      *(_QWORD *)(v17 + 8) = 3;
      *(_QWORD *)(v7 + 344) = 0;
      goto LABEL_14;
    }
    Allocator = 0;
    *(_QWORD *)(v7 + 336) = 0;
    if (result)
    {
      v18 = result;
      if ((result & 8) != 0)
        v19 = (result - 112) | 1;
      else
        v19 = result & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = v19 + 47;
      else
        v20 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD **)(v20 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v20 + 16) = *Allocator;
      result = v18;
      *Allocator = v18;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v15 = *(_QWORD *)(v7 + 344);
    *(_QWORD *)(v7 + 344) = Allocator;
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      if (!result)
        goto LABEL_14;
    }
    else if (!result)
    {
      goto LABEL_14;
    }
    if (*(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), (const JSCell *)this);
    goto LABEL_14;
  }
LABEL_15:
  if (!result)
  {
    v16 = *(_BYTE **)(v7 + 344);
    if (v16 && *(_QWORD *)v16)
    {
      if ((v16[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v16;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSIDBCursor::primaryKey(WebCore::JSIDBCursor *this, JSC::JSGlobalObject *a2, uint64_t a3, WebCore::IDBKey *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t result;
  JSC::JSCell *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t v13;
  _QWORD *Allocator;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v7 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v7 + 352);
  v9 = (JSC::JSCell *)result;
  if (!result)
  {
    v10 = *(_QWORD *)(v7 + 360);
    v11 = v7;
    if (!v10)
      goto LABEL_9;
    v9 = *(JSC::JSCell **)v10;
    v11 = v7;
    if (!*(_QWORD *)v10)
      goto LABEL_9;
    v11 = v7;
    if ((*(_BYTE *)(v10 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v9 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v9) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_14:
      result = *(_QWORD *)(v7 + 352);
      goto LABEL_15;
    }
    v11 = *((_QWORD *)this + 3);
LABEL_9:
    v12 = (JSC::JSCell *)WebCore::toJS(a2, (unint64_t)a2, *(JSC::JSGlobalObject **)(v11 + 192), a4);
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
      return 0;
    v13 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v12);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v7 + 352) = result;
      v17 = *(_QWORD *)(v7 + 360);
      if (!v17)
        return result;
      *(_QWORD *)(v17 + 8) = 3;
      *(_QWORD *)(v7 + 360) = 0;
      goto LABEL_14;
    }
    Allocator = 0;
    *(_QWORD *)(v7 + 352) = 0;
    if (result)
    {
      v18 = result;
      if ((result & 8) != 0)
        v19 = (result - 112) | 1;
      else
        v19 = result & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = v19 + 47;
      else
        v20 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD **)(v20 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v20 + 16) = *Allocator;
      result = v18;
      *Allocator = v18;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v15 = *(_QWORD *)(v7 + 360);
    *(_QWORD *)(v7 + 360) = Allocator;
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      if (!result)
        goto LABEL_14;
    }
    else if (!result)
    {
      goto LABEL_14;
    }
    if (*(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), (const JSCell *)this);
    goto LABEL_14;
  }
LABEL_15:
  if (!result)
  {
    v16 = *(_BYTE **)(v7 + 360);
    if (v16 && *(_QWORD *)v16)
    {
      if ((v16[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v16;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::IDBCursor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  JSC::VM *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  WebCore::JSIDBCursor *v18;
  uint64_t v19;
  unint64_t Structure;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  WebCore::JSIDBCursorWithValue *v24;
  _QWORD *v25;
  unint64_t v26;
  WebCore::JSIDBCursor *v27;
  JSC::VM *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *Allocator;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v39 = *(_QWORD *)(v5 + 32);
    if (!v39)
      goto LABEL_5;
    v40 = *(_DWORD *)(v39 - 8);
    v41 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
    v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
    v44 = v40 & ((v43 >> 31) ^ v43);
    v45 = *(_QWORD *)(v39 + 16 * v44);
    if (v45 != a3)
    {
      v46 = 1;
      while (v45)
      {
        v44 = ((_DWORD)v44 + v46) & v40;
        v45 = *(_QWORD *)(v39 + 16 * v44);
        ++v46;
        if (v45 == a3)
          goto LABEL_47;
      }
      goto LABEL_5;
    }
LABEL_47:
    v6 = *(_QWORD *)(v39 + 16 * v44 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
  {
    v26 = WebCore::getDOMStructure<WebCore::JSIDBCursor>(*(WebCore::JSIDBCursor **)(a2 + 56), (JSC::JSCell **)a2);
    v27 = *(WebCore::JSIDBCursor **)(a2 + 56);
    v29 = (_QWORD *)WebCore::JSIDBCursor::subspaceForImpl(v27, v28);
    SlowCase = v29[3];
    if (SlowCase >= v29[4])
    {
      SlowCase = v29[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_19:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v26);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (!*((_BYTE *)v27 + 755))
          goto LABEL_21;
        goto LABEL_20;
      }
      v48 = *(_QWORD *)(SlowCase + 8) ^ v29[6];
      v29[4] = SlowCase + HIDWORD(v48);
      v29[5] = SlowCase + (int)v48;
    }
    v29[3] = SlowCase + 32;
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(a2 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSIDBCursorWithValue::s_info
         + ~((_QWORD)&WebCore::JSIDBCursorWithValue::s_info << 32)) ^ (((unint64_t)&WebCore::JSIDBCursorWithValue::s_info
                                                                      + ~((_QWORD)&WebCore::JSIDBCursorWithValue::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSIDBCursorWithValue::s_info)
    {
LABEL_11:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_13;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSIDBCursorWithValue::s_info)
          goto LABEL_11;
      }
    }
  }
  v18 = *(WebCore::JSIDBCursor **)(a2 + 56);
  v19 = WebCore::getDOMStructure<WebCore::JSIDBCursor>(v18, (JSC::JSCell **)a2);
  Structure = WebCore::JSIDBCursorWithValuePrototype::createStructure((uint64_t *)v18, a2, *(JSC::JSCell **)(v19 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSIDBCursorWithValuePrototype::create(v18, (JSC::VM *)a2, Structure, v21);
  v23 = WebCore::JSIDBCursorWithValue::createStructure((uint64_t *)v18, a2, v22);
  v17 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSIDBCursorWithValue::s_info);
LABEL_13:
  v24 = *(WebCore::JSIDBCursorWithValue **)(a2 + 56);
  v25 = (_QWORD *)WebCore::JSIDBCursorWithValue::subspaceForImpl(v24, v8);
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_14:
    v25[3] = SlowCase + 32;
    goto LABEL_15;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v47 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v47);
    v25[5] = SlowCase + (int)v47;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (!*((_BYTE *)v24 + 755))
    goto LABEL_21;
LABEL_20:
  __dmb(0xAu);
LABEL_21:
  v30 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337AF0 & 1) == 0)
  {
    qword_1EE337AE8 = (uint64_t)&off_1E32ACC40;
    byte_1EE337AF0 = 1;
  }
  if (!*(_DWORD *)(v30 + 48))
  {
    if ((SlowCase & 8) != 0)
      v31 = (SlowCase - 112) | 1;
    else
      v31 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v31 & 1) != 0)
      v32 = v31 + 47;
    else
      v32 = *(_QWORD *)v31 + 32;
    Allocator = *(_QWORD **)(v32 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v32 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE337AE8;
    Allocator[2] = v30;
    v34 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v34)
      return SlowCase;
LABEL_41:
    *(_QWORD *)(v34 + 8) = 3;
    return SlowCase;
  }
  v50 = a3;
  if ((SlowCase & 8) != 0)
    v36 = (SlowCase - 112) | 1;
  else
    v36 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v36 & 1) != 0)
    v37 = v36 + 47;
  else
    v37 = *(_QWORD *)v36 + 32;
  v38 = *(_QWORD **)(v37 + 16);
  if (!v38)
    v38 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v37 + 16) = *v38;
  *v38 = SlowCase;
  v38[1] = &qword_1EE337AE8;
  v38[2] = v30;
  v49 = v38;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v30 + 32), &v50, (uint64_t *)&v49);
  v34 = (uint64_t)v49;
  if (v49)
    goto LABEL_41;
  return SlowCase;
}

uint64_t WebCore::JSIDBCursorWithValue::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = WebCore::JSIDBCursor::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v5 = *(unint64_t **)(*(_QWORD *)(a1 + 24) + 376);
  if (v5)
  {
    if ((v5[1] & 3) == 0)
    {
      v6 = *v5;
      if (*v5)
      {
        if ((v6 & 8) != 0)
        {
          if ((*(_BYTE *)(v6 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v7 = v6 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v8 = *v5;
            v9 = v6 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v6 & 0xFFFFFFFFFFFFC000));
            v6 = v8;
            v7 = v9;
          }
          if (((*(_QWORD *)(v7 + 8 * ((v6 >> 10) & 0xF) + 40) >> (v6 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSIDBCursorWithValue::value(WebCore::JSIDBCursorWithValue *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t result;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *Allocator;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[47];
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v5 + 368);
  v7 = (JSC::JSCell *)result;
  if (!result)
  {
    v8 = *(_QWORD *)(v5 + 376);
    v9 = v5;
    if (!v8)
      goto LABEL_9;
    v7 = *(JSC::JSCell **)v8;
    v9 = v5;
    if (!*(_QWORD *)v8)
      goto LABEL_9;
    v9 = v5;
    if ((*(_BYTE *)(v8 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v7 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v7) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_18:
      result = *(_QWORD *)(v5 + 368);
      goto LABEL_19;
    }
    v9 = *((_QWORD *)this + 3);
LABEL_9:
    WebCore::IDBCursor::value(v9, (uint64_t)v24);
    WebCore::IDBKeyData::IDBKeyData((WebCore::IDBKeyData *)&v21, *(const WebCore::IDBKey **)(*((_QWORD *)this + 3) + 192));
    v11 = WebCore::deserializeIDBValueWithKeyInjection(a2, (JSC::JSGlobalObject *)v24, (uint64_t)&v21, (const WebCore::IDBValue *)(*((_QWORD *)this + 3) + 304));
    v12 = (char)v10;
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))off_1E3393188[v23])(&v25, &v22);
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v24, v10);
    if (!v12)
      v11 = 2;
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v13 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, (JSC::JSCell *)v11);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v5 + 368) = result;
      v17 = *(_QWORD *)(v5 + 376);
      if (!v17)
        return result;
      *(_QWORD *)(v17 + 8) = 3;
      *(_QWORD *)(v5 + 376) = 0;
      goto LABEL_18;
    }
    Allocator = 0;
    *(_QWORD *)(v5 + 368) = 0;
    if (result)
    {
      v18 = result;
      if ((result & 8) != 0)
        v19 = (result - 112) | 1;
      else
        v19 = result & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = v19 + 47;
      else
        v20 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD **)(v20 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v20 + 16) = *Allocator;
      result = v18;
      *Allocator = v18;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v15 = *(_QWORD *)(v5 + 376);
    *(_QWORD *)(v5 + 376) = Allocator;
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      if (!result)
        goto LABEL_18;
    }
    else if (!result)
    {
      goto LABEL_18;
    }
    if (*(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), (const JSCell *)this);
    goto LABEL_18;
  }
LABEL_19:
  if (!result)
  {
    v16 = *(_BYTE **)(v5 + 376);
    if (v16 && *(_QWORD *)v16)
    {
      if ((v16[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v16;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSIDBRequest::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(*(_QWORD *)(result + 24) + 128);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

void WebCore::JSIDBRequest::result(WebCore::JSIDBRequest *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::JSIDBSerializationGlobalObject *v11;
  JSC::JSCell *v12;
  JSC::VM *v13;
  JSC::VM ***v14;
  _BYTE v15[160];
  int v16;
  _BYTE v17[8];
  char v18[8];
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  JSC::VM **v22;
  WTF::StringImpl *v23;
  WebCore::JSIDBRequest *v24;
  uint64_t v25;
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  WebCore::JSIDBRequest *v28;
  uint64_t v29;
  JSC::VM **v30;
  JSC::JSGlobalObject *v31;
  WebCore::JSIDBRequest *v32;
  uint64_t v33;
  JSC::VM **v34;
  JSC::JSGlobalObject *v35;
  WebCore::JSIDBRequest *v36;
  uint64_t v37;
  JSC::VM **v38;
  JSC::JSGlobalObject *v39;
  WebCore::JSIDBRequest *v40;
  uint64_t v41;
  JSC::VM **v42;
  JSC::JSGlobalObject *v43;
  WebCore::JSIDBRequest *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v13 = v3;
  v4 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v4 + 352) != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18[0] = 8;
    v21 = 1;
LABEL_8:
    LOBYTE(v22) = v18[0];
    v8 = v19;
    v19 = 0;
    v23 = v8;
    if (!*((_QWORD *)v3 + 2))
    {
      WebCore::propagateExceptionSlowPath(a2, &v13, (unsigned __int8 *)&v22);
      v8 = v23;
    }
    v23 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    goto LABEL_20;
  }
  LOBYTE(v22) = 0;
  LODWORD(v42) = -1;
  v6 = *(unsigned int *)(v4 + 304);
  if ((_DWORD)v6 == -1)
  {
    v18[0] = 0;
    v20 = -1;
    v21 = 0;
  }
  else
  {
    ((void (*)(_BYTE *, JSC::VM ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JS10_SZ_EEEDcmS12_DpOT0____fdiagonal[v6])(v17, &v22, v4 + 144);
    LODWORD(v42) = v6;
    v18[0] = 0;
    v20 = -1;
    ((void (*)(_BYTE *, char *, JSC::VM ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v6])(v15, v18, &v22);
    v20 = v6;
    v21 = 0;
    if ((_DWORD)v42 != -1)
    {
      ((void (*)(_BYTE *, JSC::VM ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9IDBCursorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11IDBDatabaseENSA_ISF_EENSC_ISF_EEEENS8_10IDBKeyDataENS6_6VectorISJ_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_12IDBGetResultENS8_15IDBGetAllResultEyNS8_10IDBRequest14NullResultTypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v42])(v15, &v22);
      if (v21)
      {
        if (v21 != 1)
        {
LABEL_24:
          v11 = (WebCore::JSIDBSerializationGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
          WebCore::JSIDBSerializationGlobalObject::destroy(v11, v12);
          return;
        }
        goto LABEL_8;
      }
    }
  }
  v15[0] = 0;
  v16 = -1;
  v9 = v20;
  if (v20 != -1)
  {
    ((void (*)(JSC::VM ***, _BYTE *, char *))off_1E3393410[v20])(&v22, v15, v18);
    v16 = v9;
  }
  v10 = *((_QWORD *)this + 3) + 120;
  v22 = &v13;
  v23 = a2;
  v24 = this;
  v25 = v10;
  v26 = &v13;
  v27 = a2;
  v28 = this;
  v29 = v10;
  v30 = &v13;
  v31 = a2;
  v32 = this;
  v33 = v10;
  v34 = &v13;
  v35 = a2;
  v36 = this;
  v37 = v10;
  v38 = &v13;
  v39 = a2;
  v40 = this;
  v41 = v10;
  v42 = &v13;
  v43 = a2;
  v44 = this;
  v45 = v10;
  if ((_DWORD)v9 == -1)
    goto LABEL_24;
  v14 = &v22;
  ((void (*)(JSC::VM ****, _BYTE *))off_1E3393450[v9])(&v14, v15);
  if (v16 != -1)
    ((void (*)(JSC::VM ***, _BYTE *))off_1E3393148[v16])(&v22, v15);
LABEL_20:
  if (v21 != -1)
    ((void (*)(JSC::VM ***, char *))off_1E33931D0[v21])(&v22, v18);
}

void WebCore::JSIDBSerializationGlobalObject::destroy(WebCore::JSIDBSerializationGlobalObject *this, JSC::JSCell *a2)
{
  WebCore::EmptyScriptExecutionContext *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::EmptyScriptExecutionContext *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 78) == 1)
    {
      WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext(v3);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 78);
    }
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

unint64_t WebCore::JSIDBSerializationGlobalObject::create(JSC::VM *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t SlowCase;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::EmptyScriptExecutionContext *v10;
  unint64_t v12;

  v5 = (_QWORD *)*((_QWORD *)a1 + 5182);
  SlowCase = v5[2934];
  if (SlowCase >= v5[2935])
  {
    SlowCase = v5[2936];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ v5[2937];
    v5[2935] = SlowCase + HIDWORD(v12);
    v5[2936] = SlowCase + (int)v12;
  }
  v5[2934] = SlowCase + 3408;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::JSGlobalObject::JSGlobalObject();
  *(_OWORD *)(SlowCase + 3296) = 0u;
  v7 = (void *)WTF::fastMalloc((WTF *)0x1D20);
  bzero(v7, 0x1D20uLL);
  *(_QWORD *)(SlowCase + 3312) = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(SlowCase + 3320) = v8;
  *(_BYTE *)(SlowCase + 3328) = *(_DWORD *)(v8 + 48) == 0;
  *(_BYTE *)(SlowCase + 3329) = 0;
  *(_QWORD *)(SlowCase + 3336) = 0;
  v9 = operator new();
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a1;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_QWORD *)(v9 + 288) = a1;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_OWORD *)(v9 + 408) = 0u;
  *(_OWORD *)(v9 + 424) = 0u;
  *(_OWORD *)(v9 + 440) = 0u;
  *(_OWORD *)(v9 + 456) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  *(_OWORD *)(v9 + 520) = 0u;
  *(_OWORD *)(v9 + 536) = 0u;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 552) = 0u;
  *(_OWORD *)(v9 + 568) = 0u;
  *(_OWORD *)(v9 + 584) = 0u;
  *(_OWORD *)(v9 + 600) = 0u;
  *(_OWORD *)(v9 + 616) = 0u;
  *(_OWORD *)(v9 + 632) = 0u;
  *(_OWORD *)(v9 + 648) = 0u;
  *(_OWORD *)(v9 + 664) = 0u;
  *(_QWORD *)(v9 + 680) = a1;
  *(_OWORD *)(v9 + 688) = 0u;
  *(_OWORD *)(v9 + 704) = 0u;
  *(_OWORD *)(v9 + 720) = 0u;
  *(_OWORD *)(v9 + 736) = 0u;
  *(_OWORD *)(v9 + 752) = 0u;
  *(_OWORD *)(v9 + 768) = 0u;
  *(_OWORD *)(v9 + 784) = 0u;
  *(_OWORD *)(v9 + 800) = 0u;
  *(_OWORD *)(v9 + 816) = 0u;
  *(_QWORD *)(v9 + 832) = a1;
  *(_OWORD *)(v9 + 840) = 0u;
  *(_OWORD *)(v9 + 856) = 0u;
  *(_OWORD *)(v9 + 872) = 0u;
  *(_OWORD *)(v9 + 888) = 0u;
  *(_OWORD *)(v9 + 904) = 0u;
  *(_OWORD *)(v9 + 920) = 0u;
  *(_OWORD *)(v9 + 936) = 0u;
  *(_OWORD *)(v9 + 952) = 0u;
  *(_OWORD *)(v9 + 968) = 0u;
  *(_QWORD *)(v9 + 984) = 0;
  *(_QWORD *)(v9 + 992) = a1;
  *(_OWORD *)(v9 + 1016) = 0u;
  *(_OWORD *)(v9 + 1032) = 0u;
  *(_OWORD *)(v9 + 1048) = 0u;
  *(_OWORD *)(v9 + 1064) = 0u;
  *(_OWORD *)(v9 + 1080) = 0u;
  *(_OWORD *)(v9 + 1096) = 0u;
  *(_OWORD *)(v9 + 1112) = 0u;
  *(_OWORD *)(v9 + 1128) = 0u;
  *(_OWORD *)(v9 + 1144) = 0u;
  *(_OWORD *)(v9 + 1160) = 0u;
  *(_OWORD *)(v9 + 1176) = 0u;
  *(_OWORD *)(v9 + 1192) = 0u;
  *(_OWORD *)(v9 + 1208) = 0u;
  *(_OWORD *)(v9 + 1224) = 0u;
  *(_OWORD *)(v9 + 1240) = 0u;
  *(_QWORD *)(v9 + 1384) = 0;
  *(_OWORD *)(v9 + 1000) = 0u;
  *(_OWORD *)(v9 + 1256) = 0u;
  *(_OWORD *)(v9 + 1272) = 0u;
  *(_OWORD *)(v9 + 1288) = 0u;
  *(_OWORD *)(v9 + 1304) = 0u;
  *(_OWORD *)(v9 + 1320) = 0u;
  *(_OWORD *)(v9 + 1336) = 0u;
  *(_OWORD *)(v9 + 1352) = 0u;
  *(_OWORD *)(v9 + 1368) = 0u;
  *(_QWORD *)(v9 + 1392) = a1;
  *(_QWORD *)(v9 + 1408) = 0;
  *(_QWORD *)(v9 + 1400) = 0;
  *(_QWORD *)(v9 + 1416) = a1;
  *(_QWORD *)(v9 + 1424) = 0;
  *(_QWORD *)(SlowCase + 3344) = v9;
  *(_QWORD *)(SlowCase + 3352) = off_1E33929E0;
  *(_QWORD *)(SlowCase + 3360) = 0;
  *(_QWORD *)(SlowCase + 3368) = a1;
  JSC::Heap::registerWeakGCHashTable();
  *(_QWORD *)(SlowCase + 3376) = off_1E3392A08;
  *(_QWORD *)(SlowCase + 3384) = 0;
  *(_QWORD *)(SlowCase + 3392) = a1;
  JSC::Heap::registerWeakGCHashTable();
  v10 = (WebCore::EmptyScriptExecutionContext *)WTF::fastMalloc((WTF *)0x380);
  *(_QWORD *)(SlowCase + 3400) = WebCore::EmptyScriptExecutionContext::EmptyScriptExecutionContext(v10, a1);
  WebCore::JSDOMGlobalObject::finishCreation((WebCore::JSDOMGlobalObject *)SlowCase, a1);
  return SlowCase;
}

unint64_t WebCore::toJSNewlyCreated(JSC::JSGlobalObject *a1, uint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WebCore::JSImageData *v10;
  JSC::VM *v11;
  _QWORD *v12;
  unint64_t SlowCase;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Allocator;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35[2];
  int v36;
  int v37;
  uint64_t v38;

  v6 = *((_QWORD *)a1 + 7);
  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v9 = WebCore::getDOMStructure<WebCore::JSImageData>(*(WebCore::JSImageData **)(a2 + 56), (JSC::VM *)a2, a3);
  v10 = *(WebCore::JSImageData **)(a2 + 56);
  v12 = (_QWORD *)WebCore::JSImageData::subspaceForImpl(v10, v11);
  SlowCase = v12[3];
  if (SlowCase < v12[4])
    goto LABEL_2;
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v27 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v27);
    v12[5] = SlowCase + (int)v27;
LABEL_2:
    v12[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v9);
  v14 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(SlowCase + 24) = v14;
  if (*((_BYTE *)v10 + 755))
    __dmb(0xAu);
  v15 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337B00 & 1) == 0)
  {
    qword_1EE337AF8 = (uint64_t)&unk_1E32ACE70;
    byte_1EE337B00 = 1;
  }
  v35[0] = v7;
  if ((SlowCase & 8) != 0)
    v16 = (SlowCase - 112) | 1;
  else
    v16 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v16 & 1) != 0)
    v17 = v16 + 47;
  else
    v17 = *(_QWORD *)v16 + 32;
  Allocator = *(_QWORD **)(v17 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v17 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337AF8;
  Allocator[2] = v15;
  v34 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v15 + 32), v35, (uint64_t *)&v34);
  if (v34)
    v34[1] = 3;
  WTF::AtomStringImpl::addLiteral();
  v19 = (WTF::StringImpl *)v35[0];
  v20 = JSC::ArrayBufferView::wrap((JSC::ArrayBufferView *)v8, a1, (JSC::JSGlobalObject *)a2);
  v35[0] = 0;
  v35[1] = SlowCase;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)v6, (unint64_t)v19, v20, 10, (uint64_t)v35);
  v22 = *(_QWORD *)(v8 + 32);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      if ((v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v23 & 0x3FFFFFFFFLL) + v24)
      {
        v25 = *(_BYTE *)(v8 + 6);
        if ((v25 & 3) != 0)
        {
          if (*(_BYTE *)(v22 + 64) && (v33 = *(_QWORD *)(v22 + 32)) != 0)
          {
            v28 = atomic_load((unint64_t *)(v33 + 32));
            v25 = *(_BYTE *)(v8 + 6);
          }
          else
          {
            v28 = *(_QWORD *)(v22 + 48);
          }
          v29 = *(_QWORD *)(v8 + 8);
          if ((v25 & 4) != 0)
          {
            v30 = v28 >= v29;
            v31 = v28 - v29;
            if (v30)
              goto LABEL_25;
            if ((*(_BYTE *)(v8 + 4) - 4) > 7u)
              LOBYTE(v32) = 0;
            else
              v32 = qword_1968DFA38[(char)(*(_BYTE *)(v8 + 4) - 4)];
            v21 = (WTF::StringImpl *)((-1 << v32) & v31);
          }
          else
          {
            v21 = *(WTF::StringImpl **)(v8 + 16);
            if (v28 >= v29 && (unint64_t)v21 + v29 <= v28)
              goto LABEL_25;
          }
        }
        else
        {
          v21 = *(WTF::StringImpl **)(v8 + 16);
        }
        if ((unint64_t)v21 >= 0x101)
          JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v6 + 192));
      }
    }
  }
LABEL_25:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v21);
    else
      *(_DWORD *)v19 -= 2;
  }
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::ImageData>(JSC::JSGlobalObject *a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  _DWORD *v16;
  WTF *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v17 = a3;
  v12 = WebCore::toJSNewlyCreated(a1, a2, (WebCore::JSDOMGlobalObject *)&v17);
  v14 = v17;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      v16 = (_DWORD *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v16)
      {
        if (*v16 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v16;
      }
      WTF::fastFree(v14, v13);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  return v12;
}

_QWORD *WebCore::JSIntersectionObserver::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 24);
  result = *(_QWORD **)(v4 + 80);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 24))(result, a2);
    v4 = *(_QWORD *)(a1 + 24);
  }
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 22) & 8) == 0)
      {
        while (1)
        {
          v8 = v7;
          if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
          {
            v10 = *(_QWORD *)(v7 + 200);
            if (!v10)
              goto LABEL_14;
            v9 = (uint64_t *)(v10 + 8);
          }
          else
          {
            v9 = (uint64_t *)(v7 + 32);
          }
          v7 = *v9;
          if (!v7)
            goto LABEL_14;
        }
      }
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
LABEL_14:
      if (v8 && !*(_BYTE *)(a2 + 130))
      {
        result = *(_QWORD **)(a2 + 120);
        v11 = result[6];
        v12 = *(_DWORD *)(v11 + 4);
        v13 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = v16;
        while (1)
        {
          v18 = *(_QWORD *)(v11 + 8 * v17 + 16);
          if (!v18)
            break;
          if (v8 == v18)
            return result;
          v17 = (v17 + 1) & v12;
          if (v17 == v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1956C0BA0);
          }
        }
        result = (_QWORD *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v8);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

BOOL WebCore::JSIntersectionObserverOwner::isReachableFromOpaqueRoots(int a1, uint64_t a2, int a3, JSC::AbstractSlotVisitor *a4, _QWORD *a5)
{
  _BOOL8 result;

  result = WebCore::IntersectionObserver::isReachableFromOpaqueRoots(*(WebCore::IntersectionObserver **)(*(_QWORD *)a2 + 24), a4);
  if (result && a5 != 0)
  {
    *a5 = "Reachable from observed nodes";
    a5[1] = 30;
  }
  return result;
}

void WebCore::JSKeyframeEffect::getKeyframes(WebCore::KeyframeEffect **this, JSC::VM **a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  JSC::VM *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  char v43;
  char v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unsigned __int16 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  JSC::VM *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  JSC::VM *v71;
  uint64_t v72;
  WTF *v73;
  objc_class *v74;
  int v75;
  BOOL v76;
  JSValue v77;
  JSC::VM *v78;
  uint64_t *v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  _QWORD *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  int v94;
  unsigned int v95;
  char v96[8];
  WTF::StringImpl *v97;
  int v98;
  JSC::VM *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF *v102;
  _OWORD v103[4];
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  JSC::JSLockHolder::JSLockHolder();
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a2))
    goto LABEL_157;
  WebCore::KeyframeEffect::getKeyframes(this[3], &v93);
  if (!v95)
  {
    v6 = 0;
LABEL_120:
    LODWORD(v7) = 0;
LABEL_121:
    v71 = a2[7];
    v99 = v71;
    LOBYTE(v100) = 0;
    v101 = 0x800000000;
    v102 = (WTF *)((char *)v103 + 8);
    memset(v103, 0, sizeof(v103));
    v104 = 0;
    v72 = v7;
    if (v7 >= 9)
    {
      LOBYTE(v100) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v101) == 1;
      v31 = (unsigned __int16 *)((char *)v6 + 8 * v72);
    }
    else
    {
      v31 = (unsigned __int16 *)((char *)v6 + 8 * v7);
      if (!(_DWORD)v7)
      {
        LOBYTE(v12) = 1;
LABEL_144:
        v97 = v102;
        v98 = v101;
        v78 = a2[7];
        if (!*((_DWORD *)v78 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) == 0)
          JSC::constructArray();
        goto LABEL_146;
      }
    }
    v73 = v6;
    while (1)
    {
      v74 = *(_QWORD *)v73 ? **(objc_class ***)v73 : 0;
      if (*((_DWORD *)v71 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v71) & 1) != 0)
        break;
      v75 = v101;
      if ((_DWORD)v101 != HIDWORD(v101) && (v102 != (WTF *)((char *)v103 + 8) ? (v76 = v102 == 0) : (v76 = 1), v76))
      {
        *((_QWORD *)v102 + v101) = v74;
        LODWORD(v101) = v75 + 1;
      }
      else
      {
        v77.super.isa = v74;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v101, v77) == 1)
          LOBYTE(v100) = 1;
      }
      v73 = (WTF *)((char *)v73 + 8);
      if (v73 == (WTF *)v31)
      {
        if (!(_BYTE)v100)
        {
          LOBYTE(v12) = 0;
          goto LABEL_144;
        }
        JSC::throwOutOfMemoryError();
        break;
      }
    }
    LOBYTE(v12) = 0;
LABEL_146:
    v79 = *(uint64_t **)&v103[0];
    if (*(_QWORD *)&v103[0])
    {
      v97 = (WTF::StringImpl *)&v101;
      v84 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v103[0], (uint64_t *)&v97);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v79, v84);
    }
    v10 = v102;
    if (v102 != (WTF *)((char *)v103 + 8))
      goto LABEL_159;
    goto LABEL_149;
  }
  if (v95 >> 29)
  {
    __break(0xC471u);
    return;
  }
  v5 = WTF::fastMalloc((WTF *)(8 * v95));
  v6 = (WTF *)v5;
  if (!v95)
    goto LABEL_120;
  v91 = (WTF *)v5;
  v7 = 0;
  v6 = (WTF *)&v100;
  while (1)
  {
    v8 = v93;
    v92 = v7;
    v9 = (char *)v93 + 48 * v7;
    v10 = (WTF::StringImpl *)WebCore::convertDictionaryToJS((uint64_t)a2, (uint64_t)a2, (uint64_t)v9);
    v12 = v10;
    v13 = *((_QWORD *)v9 + 5);
    if (v13)
    {
      v14 = *(unsigned int *)(v13 - 4);
      v15 = (_QWORD *)(v13 + 16 * v14);
      if (*(_DWORD *)(v13 - 12))
      {
        v16 = (_QWORD *)*((_QWORD *)v9 + 5);
        if ((_DWORD)v14)
        {
          v17 = 16 * v14;
          v16 = (_QWORD *)*((_QWORD *)v9 + 5);
          while ((unint64_t)(*v16 + 1) <= 1)
          {
            v16 += 2;
            v17 -= 16;
            if (!v17)
            {
              v16 = v15;
              break;
            }
          }
        }
LABEL_13:
        v18 = (_QWORD *)(v13 + 16 * *(unsigned int *)(v13 - 4));
        goto LABEL_18;
      }
      v16 = (_QWORD *)(v13 + 16 * v14);
    }
    else
    {
      v16 = 0;
      v14 = 0;
    }
    v15 = (_QWORD *)(v13 + 16 * v14);
    if (v13)
      goto LABEL_13;
    v18 = 0;
LABEL_18:
    if (v18 != v16)
    {
      do
      {
        v19 = a2[7];
        v20 = v16[1];
        if (v20 && (v21 = *(_DWORD *)(v20 + 4)) != 0)
        {
          if (v21 != 1)
            goto LABEL_22;
          v25 = *(unsigned __int8 **)(v20 + 8);
          if ((*(_BYTE *)(v20 + 16) & 4) != 0)
          {
            v26 = *v25;
          }
          else
          {
            v27 = *(unsigned __int16 *)v25;
            if (v27 > 0xFF)
            {
LABEL_22:
              v22 = *((_QWORD *)v19 + 8095);
              if (!v22 || v20 != *(_QWORD *)(v22 + 8))
                v22 = JSC::jsStringWithCacheSlowCase();
              goto LABEL_25;
            }
            v26 = v27;
          }
          v22 = *((_QWORD *)v19 + v26 + 5277);
        }
        else
        {
          v22 = *((_QWORD *)v19 + 5246);
        }
LABEL_25:
        v23 = v16 + 2;
        v100 = (WTF::StringImpl *)v22;
        v101 = 0;
        v102 = 0;
        *(_QWORD *)&v103[0] = 0x700000000;
        v10 = (WTF::StringImpl *)JSC::JSObject::defineOwnProperty();
        v24 = v15;
        if (v23 != v15)
        {
          v24 = v23;
          while ((unint64_t)(*v24 + 1) <= 1)
          {
            v24 += 2;
            if (v24 == v15)
            {
              v24 = v15;
              break;
            }
          }
        }
        v16 = v24;
      }
      while (v24 != v18);
    }
    v28 = (unsigned __int16 *)*((_QWORD *)v8 + 6 * v92 + 4);
    if (v28)
    {
      v29 = *((unsigned int *)v28 - 1);
      v30 = &v28[8 * v29];
      if (*((_DWORD *)v28 - 3))
      {
        v31 = (unsigned __int16 *)*((_QWORD *)v8 + 6 * v92 + 4);
        if ((_DWORD)v29)
        {
          v32 = 16 * v29;
          v31 = v28;
          while ((unsigned __int16)(*v31 + 1) <= 1u)
          {
            v31 += 8;
            v32 -= 16;
            if (!v32)
            {
              v31 = v30;
              break;
            }
          }
        }
LABEL_45:
        v33 = &v28[8 * *((unsigned int *)v28 - 1)];
        goto LABEL_50;
      }
      v31 = &v28[8 * v29];
    }
    else
    {
      v31 = 0;
      v29 = 0;
    }
    v30 = &v28[8 * v29];
    if (v28)
      goto LABEL_45;
    v33 = 0;
LABEL_50:
    if (v33 != v31)
      break;
LABEL_105:
    v55 = a2[7];
    v56 = *((_QWORD *)v55 + 89);
    if (!v56)
    {
      JSC::HandleSet::grow((JSC::VM *)((char *)v55 + 672));
      v56 = *((_QWORD *)v55 + 89);
    }
    *((_QWORD *)v55 + 89) = *(_QWORD *)v56;
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (uint64_t *)(v56 + 16);
    *(_QWORD *)v56 = 0;
    *(_QWORD *)(v56 + 8) = 0;
    if (v12)
    {
      v58 = *(unint64_t **)((v56 & 0xFFFFFFFFFFFFF000) + 0x10);
      v59 = v58[3];
      v58 += 3;
      *(_QWORD *)v56 = v59;
      *(_QWORD *)(v56 + 8) = v58;
      *v58 = v56;
      *(_QWORD *)(v59 + 8) = v56;
    }
    *v57 = (uint64_t)v12;
    *((_QWORD *)v91 + v92) = 0;
    v60 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF000) + 0x10);
    v61 = *(_QWORD *)(v60 + 40);
    if (!v61)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)((v56 & 0xFFFFFFFFFFFFF000) + 0x10));
      v61 = *(_QWORD *)(v60 + 40);
    }
    *(_QWORD *)(v60 + 40) = *(_QWORD *)v61;
    *(_QWORD *)(v61 + 16) = 0;
    v62 = (_QWORD *)(v61 + 16);
    *(_QWORD *)v61 = 0;
    *(_QWORD *)(v61 + 8) = 0;
    *((_QWORD *)v91 + v92) = v61 + 16;
    v63 = *v57;
    if ((*v57 != 0) != (*(_QWORD *)(v61 + 16) != 0))
    {
      if (v63)
      {
        v64 = *(unint64_t **)((v61 & 0xFFFFFFFFFFFFF000) + 0x10);
        v65 = v64[3];
        v64 += 3;
        *(_QWORD *)v61 = v65;
        *(_QWORD *)(v61 + 8) = v64;
        *v64 = v61;
        *(_QWORD *)(v65 + 8) = v61;
      }
      else
      {
        v70 = *(_QWORD *)v61;
        v69 = *(_QWORD **)(v61 + 8);
        *v69 = *(_QWORD *)v61;
        *(_QWORD *)(v70 + 8) = v69;
        *(_QWORD *)v61 = 0;
        *(_QWORD *)(v61 + 8) = 0;
        v62 = (_QWORD *)*((_QWORD *)v91 + v92);
      }
    }
    *v62 = v63;
    v66 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF000) + 0x10);
    v67 = *(_QWORD **)(v56 + 8);
    if (v67)
    {
      v68 = *(_QWORD *)v56;
      *v67 = *(_QWORD *)v56;
      *(_QWORD *)(v68 + 8) = v67;
      *(_QWORD *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
    }
    v7 = v92 + 1;
    *(_QWORD *)v56 = *(_QWORD *)(v66 + 40);
    *(_QWORD *)(v66 + 40) = v56;
    if (v92 + 1 >= (unint64_t)v95)
    {
      v6 = v91;
      goto LABEL_121;
    }
  }
  while (1)
  {
    v34 = *v31;
    if (v34 == 512 || v34 == 123)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_74;
    }
    v35 = v34 >= 2;
    v36 = v34 - 2;
    if (v35 && v36 <= 0x227)
    {
      v37 = (&WebCore::propertyNameStrings)[2 * v36];
      if (v37)
        break;
    }
    v45 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v45 += 2;
    v97 = v45;
LABEL_74:
    v46 = a2[7];
    v47 = *((_QWORD *)v31 + 1);
    if (v47 && (v48 = *(_DWORD *)(v47 + 4)) != 0)
    {
      if (v48 != 1)
        goto LABEL_77;
      v52 = *(unsigned __int8 **)(v47 + 8);
      if ((*(_BYTE *)(v47 + 16) & 4) != 0)
      {
        v53 = *v52;
      }
      else
      {
        v54 = *(unsigned __int16 *)v52;
        if (v54 > 0xFF)
        {
LABEL_77:
          v49 = *((_QWORD *)v46 + 8095);
          if (!v49 || v47 != *(_QWORD *)(v49 + 8))
            v49 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_80;
        }
        v53 = v54;
      }
      v49 = *((_QWORD *)v46 + v53 + 5277);
    }
    else
    {
      v49 = *((_QWORD *)v46 + 5246);
    }
LABEL_80:
    v50 = v97;
    if (v97)
    {
      if ((*((_BYTE *)v97 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v97 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v97, (WTF::StringImpl *)v47);
        v50 = v100;
      }
    }
    v100 = (WTF::StringImpl *)v49;
    v101 = 0;
    v102 = 0;
    *(_QWORD *)&v103[0] = 0x700000000;
    JSC::JSObject::defineOwnProperty();
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v11);
      else
        *(_DWORD *)v50 -= 2;
    }
    v10 = v97;
    v97 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        v10 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v11);
      else
        *(_DWORD *)v10 -= 2;
    }
    v51 = v31 + 8;
    v31 = v30;
    if (v51 != v30)
    {
      v31 = v51;
      while ((unsigned __int16)(*v31 + 1) <= 1u)
      {
        v31 += 8;
        if (v31 == v30)
        {
          v31 = v30;
          break;
        }
      }
    }
    if (v31 == v33)
      goto LABEL_105;
  }
  v38 = 0;
  v39 = v37;
  v40 = v37;
  while (2)
  {
    v42 = *v40++;
    v41 = v42;
    if (v42 != 45)
    {
      if (!v41)
        break;
      goto LABEL_68;
    }
    v41 = v39[1];
    if (v39[1])
    {
      v40 = v39 + 2;
      if ((v41 - 97) >= 0x1A)
        v43 = -1;
      else
        v43 = -33;
      v44 = v43 & v41;
      if (v39 != v37)
        LOBYTE(v41) = v44;
LABEL_68:
      *((_BYTE *)&v100 + v38++) = v41;
      v39 = v40;
      continue;
    }
    break;
  }
  if ((v38 & 0x8000000000000000) == 0)
  {
    WTF::String::String();
    goto LABEL_74;
  }
  __break(1u);
LABEL_159:
  if (v10)
    WTF::fastFree(v10, v11);
LABEL_149:
  if ((v12 & 1) == 0)
  {
    v85 = v6;
    do
    {
      v86 = *(_QWORD *)v85;
      if (*(_QWORD *)v85)
      {
        v87 = (uint64_t *)(v86 - 16);
        v88 = *(_QWORD *)(((v86 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v89 = *(uint64_t **)(v86 - 8);
        if (v89)
        {
          v90 = *v87;
          *v89 = *v87;
          *(_QWORD *)(v90 + 8) = v89;
          *v87 = 0;
          v87[1] = 0;
        }
        *v87 = *(_QWORD *)(v88 + 40);
        *(_QWORD *)(v88 + 40) = v87;
        *(_QWORD *)v85 = 0;
      }
      v85 = (WTF *)((char *)v85 + 8);
    }
    while (v85 != (WTF *)v31);
  }
  if (v6)
    WTF::fastFree(v6, v11);
  if (v95)
  {
    v80 = v93;
    v81 = 48 * v95;
    do
    {
      WebCore::KeyframeEffect::ComputedKeyframe::~ComputedKeyframe(v80, v11);
      v80 = (WTF *)(v82 + 48);
      v81 -= 48;
    }
    while (v81);
  }
  v83 = v93;
  if (v93)
  {
    v93 = 0;
    v94 = 0;
    WTF::fastFree(v83, v11);
  }
LABEL_157:
  MEMORY[0x19AEA32A0](v96);
}

void WebCore::JSLazyEventListener::~JSLazyEventListener(WebCore::JSLazyEventListener *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)this + 18, a2);
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 12, v3);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::JSEventListener::~JSEventListener(this, v4);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSLazyEventListener::~JSLazyEventListener(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::JSLazyEventListener::~JSLazyEventListener(WebCore::JSLazyEventListener *this, void *a2)
{
  WebCore::JSLazyEventListener::~JSLazyEventListener((WebCore::JSLazyEventListener *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSLazyEventListener::~JSLazyEventListener((WebCore::JSLazyEventListener *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSLazyEventListener::initializeJSFunction(WebCore::JSLazyEventListener *this, WebCore::ScriptExecutionContext *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int **v9;
  int v10;
  WebCore::LocalFrame *v11;
  unsigned int *v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  WebCore::DOMWrapperWorld *v21;
  uint64_t v22;
  WebCore *v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSC::Identifier *v35;
  _DWORD *v36;
  unsigned int *v37;
  __int128 v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WebCore::Node *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WebCore::JSDOMGlobalObject *v47;
  WTF::StringImpl *v48;
  int v49;
  _QWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  JSC::JSObject *v56;
  JSC::Identifier *v57;
  char v58;
  WebCore *v59;
  WebCore::DOMWrapperWorld *v60;
  char v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  unsigned int *v64;
  __int128 v65;
  __int128 v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  char v69[8];
  _QWORD *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;

  if (*((_BYTE *)a2 + 274))
  {
    __break(0xC471u);
    goto LABEL_118;
  }
  v3 = (char *)a2 - 192;
  *((_DWORD *)a2 - 42) += 2;
  v71 = (uint64_t)a2 - 192;
  v4 = *((_QWORD *)this + 18);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v3 = *(char **)(*(_QWORD *)(v5 + 40) + 8);
  }
  *((_DWORD *)v3 + 6) += 2;
  v70 = v3;
  v6 = *((_QWORD *)v3 + 66);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    v39 = 0;
    goto LABEL_79;
  }
  if (!v4)
    goto LABEL_10;
  v7 = *(_QWORD *)(v4 + 8);
  if (!v7)
  {
LABEL_11:
    v8 = 1;
    goto LABEL_12;
  }
  if ((*(_WORD *)(v7 + 28) & 8) == 0)
  {
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  v8 = 0;
  *(_DWORD *)(v7 + 24) += 2;
LABEL_12:
  WebCore::SecurityContext::checkedContentSecurityPolicy((WebCore::SecurityContext *)(v3 + 192), &v64);
  v9 = (unsigned int **)((char *)this + 96);
  v10 = WebCore::ContentSecurityPolicy::allowInlineEventHandlers((uint64_t)v64, (uint64_t)this + 96, (uint64_t)this + 136, (uint64_t *)this + 11, v7, 0);
  v12 = v64;
  if (v64)
  {
    if (!atomic_load(v64))
    {
      __break(0xC471u);
      JUMPOUT(0x1956C1BFCLL);
    }
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
  }
  if (v10)
  {
    v15 = v70[66];
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v19 = 0;
LABEL_21:
        v20 = *(_QWORD *)(v16 + 304);
        ++*(_DWORD *)(v20 + 8);
        if (!WebCore::ScriptController::canExecuteScripts(v20, 0)
          || *(_BYTE *)(v20 + 32)
          || (*(_QWORD *)(v70[85] + 688) & 0x20000000000000) == 0
          || (v22 = *(_QWORD *)(v71 + 528)) == 0
          || (v23 = *(WebCore **)(v22 + 8)) == 0
          || (v11 = (WebCore::LocalFrame *)*((_QWORD *)this + 8)) == 0)
        {
          v39 = 0;
          goto LABEL_73;
        }
        v61 = v8;
        v24 = v19;
        ++*(_DWORD *)v11;
        v25 = (unsigned int *)((char *)v23 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        v60 = v11;
        v27 = WebCore::toJSDOMWindow(v23, v11, v21);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
        if (!v27)
        {
          v39 = 0;
          v19 = v24;
          v8 = v61;
LABEL_70:
          WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v60, v28);
LABEL_73:
          v49 = *(_DWORD *)(v20 + 8);
          if (!v49)
          {
            __break(0xC471u);
            JUMPOUT(0x1956C1C1CLL);
          }
          *(_DWORD *)(v20 + 8) = v49 - 1;
          if ((v19 & 1) == 0)
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 8));
          goto LABEL_76;
        }
        v58 = v24;
        v59 = (WebCore *)v27;
        v57 = *(JSC::Identifier **)(v27 + 56);
        MEMORY[0x19AEA3294](v69);
        if ((_MergedGlobals_802 & 1) != 0)
        {
          v29 = (WTF::StringImpl *)qword_1EE337A60;
          if (!qword_1EE337A60)
          {
            v30 = 1;
            goto LABEL_33;
          }
        }
        else
        {
          v29 = (WTF::StringImpl *)&WebCore::JSLazyEventListener::initializeJSFunction(WebCore::ScriptExecutionContext &)::$_0::operator() const(void)::impl;
          WebCore::JSLazyEventListener::initializeJSFunction(WebCore::ScriptExecutionContext &)::$_0::operator() const(void)::impl += 2;
          qword_1EE337A60 = (uint64_t)&WebCore::JSLazyEventListener::initializeJSFunction(WebCore::ScriptExecutionContext &)::$_0::operator() const(void)::impl;
          _MergedGlobals_802 = 1;
        }
        v30 = 0;
LABEL_33:
        v31 = (WTF::StringImpl *)*((_QWORD *)this + 9);
        v32 = (WTF::StringImpl *)**((_QWORD **)this + 10);
        if ((v30 & 1) == 0)
          *(_DWORD *)v29 += 2;
        if (v31)
          *(_DWORD *)v31 += 2;
        if (v32)
          *(_DWORD *)v32 += 2;
        v33 = (WTF::StringImpl *)*((_QWORD *)this + 11);
        if (v33)
          *(_DWORD *)v33 += 2;
        v64 = (unsigned int *)" {\n";
        LODWORD(v65) = 3;
        v72 = (WTF::StringImpl *)"\n}";
        v73 = 2;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t *)&v68, (uint64_t)v29, (uint64_t)v31, (uint64_t)v32, (uint64_t)&v64, (uint64_t)v33, (uint64_t)&v72);
        if (v68)
        {
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v34);
            else
              *(_DWORD *)v33 -= 2;
          }
          v35 = v57;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v34);
            else
              *(_DWORD *)v32 -= 2;
          }
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v34);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v34);
            else
              *(_DWORD *)v29 -= 2;
          }
          JSC::Identifier::fromString((WTF::StringImpl **)this + 9, &v72);
          WebCore::Document::charset((WebCore::Document *)&v62, v70);
          WebCore::CachedScriptFetcher::create((WebCore::CachedScriptFetcher *)&v62, &v63);
          v36 = v63;
          v63 = 0;
          v37 = *v9;
          if (*v9)
            *v37 += 2;
          v64 = v37;
          v38 = *(_OWORD *)((char *)this + 120);
          v65 = *(_OWORD *)((char *)this + 104);
          v66 = v38;
          v67 = v36;
          v39 = JSC::constructFunctionSkippingEvalEnabledCheck();
          JSC::SourceOrigin::~SourceOrigin((JSC::SourceOrigin *)&v64, v40);
          v43 = v63;
          v63 = 0;
          v19 = v58;
          if (v43)
          {
            if (v43[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
            else
              --v43[2];
            v19 = v58;
            v35 = v57;
          }
          v44 = v62;
          v62 = 0;
          v8 = v61;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v41);
            else
              *(_DWORD *)v44 -= 2;
          }
          v45 = v72;
          v72 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v41);
            else
              *(_DWORD *)v45 -= 2;
          }
          if (*((_QWORD *)v35 + 2))
          {
            WebCore::reportCurrentException(v59, v41);
            JSC::VM::clearException(v35);
            v39 = 0;
LABEL_66:
            v48 = v68;
            v68 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, v41);
              else
                *(_DWORD *)v48 -= 2;
            }
            MEMORY[0x19AEA32A0](v69);
            goto LABEL_70;
          }
          v46 = *((_QWORD *)this + 18);
          if (!v46)
            goto LABEL_66;
          v47 = *(WebCore::JSDOMGlobalObject **)(v46 + 8);
          if (!v47)
            goto LABEL_66;
          v51 = (_QWORD *)*((_QWORD *)this + 7);
          if (!v51 || (v52 = v51[1], (v52 & 3) != 0) || !*v51)
          {
            v55 = WebCore::toJS((WebCore::DOMWrapperWorld **)v59, v59, v47, v42);
            WebCore::JSEventListener::setWrapperWhenInitializingJSFunction(this, v55, v56);
            v51 = (_QWORD *)*((_QWORD *)this + 7);
            if (!v51)
              goto LABEL_106;
            v52 = v51[1];
          }
          if ((v52 & 3) == 0)
          {
            v53 = (_DWORD *)*v51;
LABEL_88:
            v54 = WebCore::JSNode::pushEventHandlerScope(v53, (WebCore::DOMWrapperWorld **)v59, *(_QWORD *)(v39 + 16), v42);
            *(_QWORD *)(v39 + 16) = v54;
            if (v39 && v54)
            {
              if (*((_DWORD *)v35 + 190) >= *(unsigned __int8 *)(v39 + 7))
                JSC::Heap::writeBarrierSlowPath((JSC::Identifier *)((char *)v57 + 192), (const JSCell *)v39);
              v19 = v58;
            }
            goto LABEL_66;
          }
LABEL_106:
          v53 = 0;
          goto LABEL_88;
        }
        __break(0xC471u);
LABEL_118:
        JUMPOUT(0x1956C1BC0);
      }
    }
    else
    {
      v16 = 0;
    }
    v19 = 1;
    goto LABEL_21;
  }
  v39 = 0;
LABEL_76:
  if ((v8 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v11);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
LABEL_79:
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v70);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v71);
  return v39;
}

uint64_t JSC::Identifier::fromString@<X0>(WTF::StringImpl **a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;

  v5 = *a1;
  if (*a1)
  {
    if ((*((_BYTE *)v5 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v5 += 2;
    }
    else
    {
      result = WTF::AtomStringImpl::addSlowCase();
      v5 = v8;
    }
  }
  v6 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    result = WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a1);
  *a2 = v5;
  return result;
}

WTF::StringImpl *WebCore::Document::charset(WebCore::Document *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;

  WebCore::Document::encoding((uint64_t)a2, a2, &v6);
  result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *(_QWORD *)this = result;
    if (v5)
      *(_DWORD *)result = v5;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

void JSC::SourceOrigin::~SourceOrigin(JSC::SourceOrigin *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

_QWORD *WebCore::JSEventListener::setWrapperWhenInitializingJSFunction(WebCore::JSEventListener *this, unint64_t a2, JSC::JSObject *a3)
{
  WebCore::JSEventListener *v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = this;
  if (a2)
  {
    if ((a2 & 8) != 0)
      v6 = (a2 - 112) | 1;
    else
      v6 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v6 & 1) != 0)
      v7 = v6 + 47;
    else
      v7 = *(_QWORD *)v6 + 32;
    result = *(_QWORD **)(v7 + 16);
    if (!result)
      result = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v7 + 16) = *result;
    *result = a2;
    result[1] = 0;
    result[2] = 0;
    v3 = this;
  }
  else
  {
    result = 0;
  }
  v5 = *((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 7) = result;
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return result;
}

uint64_t WebCore::JSNode::pushEventHandlerScope(_DWORD *a1, WebCore::DOMWrapperWorld **a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;

  v4 = *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLElement::s_info && v6 != 0);
  }
  if (v5)
    return WebCore::JSHTMLElement::pushEventHandlerScope((uint64_t)a1, a2, a3, a4);
  else
    return a3;
}

WTF::StringImpl *WebCore::JSLazyEventListener::create@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::RunLoop *Allocator;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  _QWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::RunLoop *inited;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41[3];

  if (!**((_QWORD **)result + 1))
  {
    *a2 = 0;
    return result;
  }
  v3 = result;
  v38 = 0;
  WTF::URL::invalidate((WTF::URL *)&v38);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 528);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v12 = 0;
    LODWORD(v9) = 0;
    goto LABEL_14;
  }
  if (WebCore::ScriptController::canExecuteScripts(*(_QWORD *)(v5 + 304), 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 304) + 16) + 296) + 728);
    if (v7 && (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)) != 0)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 168))(v8);
    else
      v9 = 0;
    v10 = *((_QWORD *)v3 + 2);
    v11 = *(WTF::StringImpl **)(v10 + 736);
    if (v11)
      *(_DWORD *)v11 += 2;
    v12 = HIDWORD(v9);
    v13 = v38;
    v38 = v11;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
    v39 = *(_OWORD *)(v10 + 744);
    v40 = *(_OWORD *)(v10 + 760);
LABEL_14:
    v14 = WTF::fastMalloc((WTF *)0xA0);
    v15 = *((_QWORD *)v3 + 4);
    {
      v16 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v37 = *((_QWORD *)v3 + 4);
      v34 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v34 = WebCore::commonVMSlow(0);
      v16 = *(_QWORD *)(*(_QWORD *)(v34 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v16;
      v15 = v37;
    }
    Allocator = 0;
    *(_DWORD *)(v14 + 16) = 1;
    *(_QWORD *)(v14 + 24) = &unk_1E3392F60;
    v18 = v14 + 24;
    *(_BYTE *)(v14 + 20) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)v14 = off_1E3392EE0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 40) = *(_BYTE *)(v14 + 40) & 0xF8 | 3;
    *(_QWORD *)(v14 + 48) = 0;
    if (v15)
    {
      v35 = v16;
      v36 = v15;
      if ((v15 & 8) != 0)
        v32 = (v15 - 112) | 1;
      else
        v32 = v15 & 0xFFFFFFFFFFFFC000;
      if ((v32 & 1) != 0)
        v33 = v32 + 47;
      else
        v33 = *(_QWORD *)v32 + 32;
      Allocator = *(WTF::RunLoop **)(v33 + 16);
      if (!Allocator)
        Allocator = (WTF::RunLoop *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v33 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v36;
      *((_QWORD *)Allocator + 1) = 0;
      *((_QWORD *)Allocator + 2) = 0;
      v18 = v14 + 24;
      v16 = v35;
    }
    *(_QWORD *)(v14 + 56) = Allocator;
    ++*(_DWORD *)v16;
    *(_QWORD *)(v14 + 64) = v16;
    v19 = *(_QWORD *)(v16 + 16);
    if (v19 != WebCore::g_commonVMOrNull)
      Allocator = (WTF::RunLoop *)WTF::WeakHashSet<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::JSVMClientDataClient>((uint64_t)v41, *(_QWORD *)(v19 + 41456) + 23544, v18);
    *(_QWORD *)v14 = off_1E3392F88;
    *(_QWORD *)(v14 + 24) = &unk_1E3393008;
    v20 = *(_DWORD **)(**(_QWORD **)v3 + 24);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v14 + 72) = v20;
    if ((byte_1EE337A59 & 1) == 0)
    {
      _MergedGlobals_37 += 2;
      qword_1EE337A68[0] = &_MergedGlobals_37;
      byte_1EE337A59 = 1;
    }
    v21 = *((unsigned __int8 *)v3 + 40);
    if ((byte_1EE337A5A & 1) == 0)
    {
      dword_1ECE7B820 += 2;
      qword_1EE337A68[1] = &dword_1ECE7B820;
      byte_1EE337A5A = 1;
    }
    if (v21)
      v22 = &qword_1EE337A68[1];
    else
      v22 = qword_1EE337A68;
    *(_QWORD *)(v14 + 80) = v22;
    v23 = (_DWORD *)**((_QWORD **)v3 + 1);
    if (v23)
      *v23 += 2;
    *(_QWORD *)(v14 + 88) = v23;
    v24 = v38;
    if (v38)
      *(_DWORD *)v38 += 2;
    *(_QWORD *)(v14 + 96) = v24;
    *(_OWORD *)(v14 + 104) = v39;
    *(_OWORD *)(v14 + 120) = v40;
    if ((v9 & v12) == 0xFFFFFFFF)
      v25 = 0;
    else
      v25 = v9 | (v12 << 32);
    *(_QWORD *)(v14 + 136) = v25;
    v26 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    *(_QWORD *)(v14 + 144) = v26;
    if (WebCore::g_commonVMOrNull)
      goto LABEL_36;
    WTF::RunLoop::webIfExists(Allocator);
    JSC::VM::create();
    v27 = v41[0];
    WebCore::g_commonVMOrNull = v41[0];
    if (__ldaxr((unsigned int *)(v41[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v41[0] + 1096)))
    {
LABEL_44:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v27 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v27 + 584));
      inited = (WTF::RunLoop *)WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v27, 0);
      if (WebCore::g_commonVMOrNull)
        goto LABEL_36;
      WTF::RunLoop::webIfExists(inited);
      JSC::VM::create();
      v30 = v41[0];
      WebCore::g_commonVMOrNull = v41[0];
      if (__ldaxr((unsigned int *)(v41[0] + 1096)))
      {
        __clrex();
      }
      else if (!__stlxr(4u, (unsigned int *)(v41[0] + 1096)))
      {
        goto LABEL_50;
      }
      JSC::Heap::acquireAccessSlow((JSC::Heap *)(v30 + 192));
LABEL_50:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v30 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v30 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v30, 0);
LABEL_36:
      *(_BYTE *)(v14 + 152) = JSC::computeNewSourceTaintedOriginFromStack();
      goto LABEL_37;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v27 + 192));
    goto LABEL_44;
  }
  v14 = 0;
LABEL_37:
  *a2 = v14;
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::JSLazyEventListener::create@<X0>(WebCore::JSLazyEventListener *this@<X0>, WebCore::Element *a2@<X1>, const WebCore::QualifiedName *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  WTF *result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  _QWORD v17[3];
  WTF *v18;
  uint64_t v19;
  BOOL v20;

  v17[0] = a2;
  v17[1] = a3;
  v17[2] = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v18 = (WTF *)v7;
  v19 = 0;
  v20 = (*((_BYTE *)this + 28) & 0x20) != 0;
  WebCore::JSLazyEventListener::create((WTF::StringImpl *)v17, a4);
  result = v18;
  v18 = 0;
  if (result)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)result));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)result);
      v13 = *((unsigned int *)result + 7);
      if ((_DWORD)v13)
      {
        v16 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v13));
        result = v16;
      }
      v14 = (WTF *)*((_QWORD *)result + 2);
      if (v14)
      {
        *((_QWORD *)result + 2) = 0;
        *((_DWORD *)result + 6) = 0;
        v15 = result;
        WTF::fastFree(v14, v9);
        result = v15;
      }
      return (WTF *)WTF::fastFree(result, v9);
    }
  }
  return result;
}

void WebCore::JSLazyEventListener::CreationArguments::~CreationArguments(WebCore::JSLazyEventListener::CreationArguments *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF *WebCore::JSLazyEventListener::create@<X0>(WebCore::JSLazyEventListener *this@<X0>, WebCore::Document *a2@<X1>, const WebCore::QualifiedName *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  WTF *result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  _QWORD v16[3];
  WTF *v17;
  uint64_t v18;
  char v19;

  v16[0] = a2;
  v16[1] = a3;
  v16[2] = this;
  v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v17 = (WTF *)v6;
  v18 = 0;
  v19 = 0;
  WebCore::JSLazyEventListener::create((WTF::StringImpl *)v16, a4);
  result = v17;
  v17 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      v12 = *((unsigned int *)result + 7);
      if ((_DWORD)v12)
      {
        v15 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v12));
        result = v15;
      }
      v13 = (WTF *)*((_QWORD *)result + 2);
      if (v13)
      {
        *((_QWORD *)result + 2) = 0;
        *((_DWORD *)result + 6) = 0;
        v14 = result;
        WTF::fastFree(v13, v8);
        result = v14;
      }
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

void WebCore::JSLazyEventListener::create(WebCore::JSLazyEventListener *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, const WebCore::QualifiedName *a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore *v8;
  WebCore *v9;
  uint64_t v10;
  WebCore *v11;
  WebCore::LocalFrame *v12;
  WebCore::DOMWrapperWorld *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];
  BOOL v17;

  v8 = (WebCore *)WebCore::LocalDOMWindow::document(this);
  v9 = v8;
  v16[0] = a2;
  v16[1] = a3;
  v16[2] = v8;
  v16[3] = 0;
  v10 = *((_QWORD *)v8 + 66);
  if (!v10)
  {
    WebCore::mainThreadNormalWorld(v8);
    goto LABEL_6;
  }
  v11 = *(WebCore **)(v10 + 8);
  v12 = (WebCore::LocalFrame *)WebCore::mainThreadNormalWorld(v8);
  if (!v11)
  {
LABEL_6:
    v14 = 0;
    goto LABEL_4;
  }
  v14 = WebCore::toJSDOMWindow(v11, v12, v13);
LABEL_4:
  v16[4] = v14;
  v17 = (*((_BYTE *)v9 + 3358) & 0x20) != 0;
  WebCore::JSLazyEventListener::create((WTF::StringImpl *)v16, a4);
  WebCore::JSLazyEventListener::CreationArguments::~CreationArguments((WebCore::JSLazyEventListener::CreationArguments *)v16, v15);
}

uint64_t WebCore::JSLocation::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v8;
  int OwnPropertySlotCommon;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;

  v8 = a2[7];
  OwnPropertySlotCommon = WebCore::getOwnPropertySlotCommon(a1, (WebCore::BindingSecurity *)a2, (unsigned int *)a3, a4);
  v10 = OwnPropertySlotCommon;
  if (*((_DWORD *)v8 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v8);
    if (((hasExceptionsAfterHandlingTraps | v10) & 1) != 0)
      return hasExceptionsAfterHandlingTraps ^ 1u;
  }
  else if ((OwnPropertySlotCommon & 1) != 0)
  {
    return 1;
  }
  if ((a3 >> 4))
  {
    v11 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v11 + 0x20)) == 0)
    {
      v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7]);
      if (v12)
      {
        v39 = a3;
        v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v39);
        if ((_DWORD)v13 != -1)
        {
          if ((int)v13 > 63)
          {
            v24 = *(_QWORD *)(a1 + 8) - 8;
            v25 = 0x3F00000000 - (v13 << 32);
          }
          else
          {
            v24 = a1 + 16;
            v25 = v13 << 32;
          }
          v26 = *(_QWORD *)(v24 + (v25 >> 29));
          if ((v26 & 0xFFFE000000000002) != 0)
            goto LABEL_30;
          v27 = *(unsigned __int8 *)(v26 + 5);
          if (v27 == 6)
          {
            v29 = *(_DWORD *)(v11 + 16) & 3;
            v31 = *(_QWORD *)(v26 + 8);
            v30 = *(_QWORD *)(v26 + 16);
            if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C))
            {
              v33 = *(_QWORD *)(v26 + 24);
              v32 = *(_QWORD *)(v26 + 32);
              *(_QWORD *)a4 = v31;
              *(_QWORD *)(a4 + 8) = v30;
              *(_DWORD *)(a4 + 16) = HIDWORD(v13);
              *(_QWORD *)(a4 + 32) = a1;
              *(_BYTE *)(a4 + 49) = 3;
              result = 1;
              if (v29 != 2)
                *(_BYTE *)(a4 + 48) = 1;
              *(_BYTE *)(a4 + 51) = 1;
              *(_QWORD *)(a4 + 72) = v33;
              *(_QWORD *)(a4 + 80) = v32;
            }
            else
            {
              *(_QWORD *)a4 = v31;
              *(_QWORD *)(a4 + 8) = v30;
              *(_DWORD *)(a4 + 16) = HIDWORD(v13);
              *(_QWORD *)(a4 + 32) = a1;
              result = 1;
              *(_BYTE *)(a4 + 49) = 3;
              if (v29 != 2)
                *(_BYTE *)(a4 + 48) = 1;
            }
            return result;
          }
          if (v27 != 5)
          {
LABEL_30:
            *(_QWORD *)a4 = v26;
            *(_QWORD *)(a4 + 32) = a1;
            *(_DWORD *)(a4 + 16) = HIDWORD(v13);
            *(_DWORD *)(a4 + 20) = v13;
            result = 1;
            *(_WORD *)(a4 + 48) = 257;
            return result;
          }
          JSC::JSObject::fillGetterPropertySlot();
          return 1;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    return 1;
  if (!a3)
    return 0;
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return 0;
  v15 = *(_BYTE **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if ((_DWORD)v16)
    {
      v35 = *v15 - 48;
      if (v35 > 9 || v16 >= 2 && *v15 == 48)
      {
LABEL_52:
        v18 = 0;
      }
      else
      {
        v36 = v15 + 1;
        v37 = v16 - 1;
        while (v37)
        {
          if (v35 > 0x19999999)
            goto LABEL_52;
          v38 = *v36 - 48;
          if (v38 > 9)
            goto LABEL_52;
          v18 = 0;
          v23 = __CFADD__(v38, 10 * v35);
          v35 = v38 + 10 * v35;
          ++v36;
          --v37;
          if (v23)
            goto LABEL_14;
        }
        v18 = 0x100000000;
        if (v35 == -1)
          v18 = 0;
      }
    }
    else
    {
      v18 = 0;
    }
  }
  else if ((_DWORD)v16)
  {
    v17 = *(unsigned __int16 *)v15 - 48;
    if (v17 > 9 || v16 >= 2 && *(_WORD *)v15 == 48)
    {
LABEL_13:
      v18 = 0;
    }
    else
    {
      v20 = (unsigned __int16 *)(v15 + 2);
      v21 = v16 - 1;
      while (v21)
      {
        if (v17 <= 0x19999999)
        {
          v22 = *v20 - 48;
          if (v22 <= 9)
          {
            v23 = __CFADD__(v22, 10 * v17);
            v17 = v22 + 10 * v17;
            ++v20;
            --v21;
            if (!v23)
              continue;
          }
        }
        goto LABEL_13;
      }
      v28 = v17 == -1;
      v18 = 0x100000000;
      if (v28)
        v18 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_14:
  if ((v18 & 0x100000000) != 0)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  else
    return 0;
}

uint64_t WebCore::getOwnPropertySlotCommon(uint64_t a1, WebCore::BindingSecurity *this, unsigned int *a3, uint64_t a4)
{
  _DWORD *v7;
  JSC::VM *v8;
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char **v18;
  char *v19;
  char v20;
  int v21;
  unint64_t v22;
  unsigned __int16 i;
  int v24;
  char **v25;
  char *v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;

  v7 = (_DWORD *)a1;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v9)
    v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  else
    v10 = 0;
  v27 = 0;
  if ((WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((JSC::JSGlobalObject **)this, v10, &v27, (WTF::String *)a4) & 1) != 0)
  {
    v12 = 0;
    goto LABEL_5;
  }
  if (*(unsigned int **)(*((_QWORD *)v8 + 5244) + 2184) == a3)
  {
    if (!a3
      || (v15 = a3[4], (v15 & 0x20) != 0)
      || (v16 = (v15 >> 8) & 0x1F, v17 = WebCore::JSLocationTableIndex[2 * v16], v17 == 0xFFFF))
    {
LABEL_22:
      v18 = 0;
    }
    else
    {
      while (1)
      {
        v18 = &(&WebCore::JSLocationTableValues)[5 * (__int16)v17];
        v19 = v18[1];
        if (v19)
        {
          if ((MEMORY[0x19AEA53F4](a3, *v18, v19 - 1) & 1) != 0)
            break;
        }
        LODWORD(v16) = (__int16)WebCore::JSLocationTableIndex[2 * (int)v16 + 1];
        if ((_DWORD)v16 == -1)
          goto LABEL_22;
        LOWORD(v17) = WebCore::JSLocationTableIndex[2 * (int)v16];
      }
    }
    *(_QWORD *)a4 = WebCore::JSDOMGlobalObject::createCrossOriginFunction(*(_QWORD *)(16 * (*v7 & 0xFFFFFFFE) + 0x28), (uint64_t)this, (WTF::StringImpl *)a3, (uint64_t)v18[3]);
    v20 = 1;
    v21 = 6;
    v12 = 1;
  }
  else if (*(_BYTE *)(a4 + 50) == 2 && *(unsigned int **)(*((_QWORD *)v8 + 5182) + 20136) == a3)
  {
    v22 = ((unint64_t)a3[4] >> 8) & 0x1F;
    for (i = WebCore::JSLocationTableIndex[2 * v22]; ; i = WebCore::JSLocationTableIndex[2 * v22])
    {
      v24 = (__int16)i;
      v25 = &(&WebCore::JSLocationTableValues)[5 * (__int16)i];
      v26 = v25[1];
      if (v26)
      {
        if (MEMORY[0x19AEA53F4](a3, *v25, v26 - 1))
          break;
      }
      v22 = (__int16)WebCore::JSLocationTableIndex[2 * (int)v22 + 1];
    }
    *(_QWORD *)a4 = WebCore::JSDOMGlobalObject::createCrossOriginGetterSetter(*(_QWORD *)(16 * (*v7 & 0xFFFFFFFE) + 0x28), (uint64_t)this, (uint64_t)a3, 0, (uint64_t)(&WebCore::JSLocationTableValues)[5 * v24 + 4]);
    v12 = 1;
    v20 = 2;
    v21 = 20;
  }
  else
  {
    if ((WebCore::handleCommonCrossOriginProperties((uint64_t)v7, (uint64_t)v8, (uint64_t)a3, a4) & 1) != 0)
    {
      v12 = 1;
      goto LABEL_5;
    }
    WebCore::throwSecurityError(this, &v28, &v27);
    v7 = 0;
    v12 = 0;
    *(_QWORD *)a4 = 10;
    v20 = 1;
    v21 = 14;
  }
  *(_DWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 32) = v7;
  *(_BYTE *)(a4 + 49) = v20;
LABEL_5:
  v13 = v27;
  v27 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

uint64_t WebCore::JSLocation::getOwnPropertySlotByIndex(WebCore::JSLocation *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  WTF::StringImpl *v9;
  int OwnPropertySlotCommon;
  int hasExceptionsAfterHandlingTraps;
  unsigned int *v13;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::Identifier::from();
  OwnPropertySlotCommon = WebCore::getOwnPropertySlotCommon((uint64_t)this, a2, v13, a4);
  if (v13)
  {
    if (*v13 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v13, v9);
    else
      *v13 -= 2;
  }
  if (*((_DWORD *)v8 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v8);
    if (((hasExceptionsAfterHandlingTraps | OwnPropertySlotCommon) & 1) != 0)
      return hasExceptionsAfterHandlingTraps ^ 1u;
  }
  else if ((OwnPropertySlotCommon & 1) != 0)
  {
    return 1;
  }
  return JSC::JSObject::getOwnPropertySlotByIndex();
}

uint64_t WebCore::JSLocation::put(uint64_t a1, WebCore::BindingSecurity *this, uint64_t a3, WTF::String *a4, uint64_t a5)
{
  JSC::VM *v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  signed __int16 i;
  int v18;
  char **v19;
  char *v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = 0;
  v22 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v10)
    v11 = *(JSC::JSGlobalObject **)(v10 + 8);
  else
    v11 = 0;
  if ((WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((JSC::JSGlobalObject **)this, v11, &v21, a4) & 1) != 0)
  {
    v13 = JSC::JSObject::put();
  }
  else if (*(_QWORD *)(*((_QWORD *)v9 + 5182) + 20136) == a3)
  {
    v16 = ((unint64_t)*(unsigned int *)(a3 + 16) >> 8) & 0x1F;
    for (i = WebCore::JSLocationTableIndex[2 * v16]; ; i = WebCore::JSLocationTableIndex[2 * v16])
    {
      v18 = i;
      v19 = &(&WebCore::JSLocationTableValues)[5 * i];
      v20 = v19[1];
      if (v20)
      {
        if (MEMORY[0x19AEA53F4](a3, *v19, v20 - 1))
          break;
      }
      v16 = (__int16)WebCore::JSLocationTableIndex[2 * (int)v16 + 1];
    }
    ((void (*)(WebCore::BindingSecurity *, _QWORD, WTF::String *, uint64_t))(&WebCore::JSLocationTableValues)[5 * v18 + 4])(this, *(_QWORD *)(a5 + 8), a4, a3);
    v13 = 1;
  }
  else
  {
    WebCore::throwSecurityError(this, &v22, &v21);
    v13 = 0;
  }
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v13;
}

uint64_t WebCore::JSLocation::putByIndex(JSC::JSObject *a1, WTF::StringImpl *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v5;
  WTF::StringImpl *v7;
  JSValue v12;

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
  if (v5)
  {
    v7 = *(WTF::StringImpl **)(v5 + 8);
    if (v7)
    {
      if (*((_BYTE *)v7 + 56))
      {
        WebCore::reportErrorAccessingRemoteFrame(a2, 2);
      }
      else if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v7, 2))
      {
        v12.super.isa = a5;
        return JSC::JSObject::putByIndex(a1, a2, a3, a4, v12);
      }
    }
  }
  return 0;
}

uint64_t WebCore::JSLocation::deleteProperty(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v2)
  {
    v4 = *(WTF::StringImpl **)(v2 + 8);
    if (v4)
    {
      if (*((_BYTE *)v4 + 56))
      {
        WebCore::reportErrorAccessingRemoteFrame(a2, 2);
      }
      else if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v4, 2))
      {
        return JSC::JSObject::deleteProperty();
      }
    }
  }
  return 0;
}

uint64_t WebCore::JSLocation::deletePropertyByIndex(WebCore::JSLocation *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v3;
  WTF::StringImpl *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if (v3)
  {
    v5 = *(WTF::StringImpl **)(v3 + 8);
    if (v5)
    {
      if (*((_BYTE *)v5 + 56))
      {
        WebCore::reportErrorAccessingRemoteFrame(a2, 2);
      }
      else if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v5, 2))
      {
        return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
      }
    }
  }
  return 0;
}

uint64_t WebCore::JSLocation::getOwnPropertyNames(uint64_t result, WTF::StringImpl *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;

  v7 = *(_QWORD *)(*(_QWORD *)(result + 24) + 16);
  if (v7)
  {
    v8 = *(WTF::StringImpl **)(v7 + 8);
    if (v8)
    {
      if (*((_BYTE *)v8 + 56))
      {
        result = (uint64_t)WebCore::reportErrorAccessingRemoteFrame(a2, 0);
      }
      else
      {
        result = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v8, 0);
        if ((result & 1) != 0)
          return JSC::JSObject::getOwnPropertyNames();
      }
    }
  }
  if (!a4)
    return (uint64_t)WebCore::addCrossOriginOwnPropertyNames<(WebCore::CrossOriginObject)1>(a2, a3);
  return result;
}

uint64_t WebCore::JSLocation::defineOwnProperty(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v2)
  {
    v4 = *(WTF::StringImpl **)(v2 + 8);
    if (v4)
    {
      if (*((_BYTE *)v4 + 56))
      {
        WebCore::reportErrorAccessingRemoteFrame(a2, 2);
      }
      else if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v4, 2))
      {
        return JSC::JSObject::defineOwnProperty();
      }
    }
  }
  return 0;
}

uint64_t WebCore::JSLocation::getPrototype(WebCore::JSLocation *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  JSC::JSGlobalObject *v7;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if (v3)
  {
    v5 = *(WTF::StringImpl **)(v3 + 8);
    if (v5)
    {
      if (*((_BYTE *)v5 + 56))
      {
        WebCore::reportErrorAccessingRemoteFrame(a2, 0);
      }
      else if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a2, v5, 0))
      {
        return JSC::JSObject::getPrototype(this, a2, v7);
      }
    }
  }
  return 2;
}

uint64_t WebCore::JSLocation::preventExtensions()
{
  return 0;
}

uint64_t WebCore::createWrapper<WebCore::ManagedMediaSource,WebCore::MediaSource>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSMediaSource *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v23;
  int v24;

  v4 = *a2;
  *a2 = 0;
  v23 = (_DWORD *)v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSManagedMediaSource::s_info
        + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSManagedMediaSource::s_info
                                                                     + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSManagedMediaSource::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSManagedMediaSource::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSMediaSource *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSMediaSource::prototype(v14, a1, a3);
  Structure = WebCore::JSManagedMediaSourcePrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSManagedMediaSourcePrototype::create(v14, a1, Structure, v17);
  v24 = 23;
  v19 = JSC::Structure::create((uint64_t *)v14, (int)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSManagedMediaSource::s_info);
LABEL_8:
  v20 = WebCore::JSManagedMediaSource::create(v13, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::ManagedMediaSource,WebCore::JSManagedMediaSource>(*((_QWORD *)a1 + 415), v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (v21[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[6];
  }
  return v20;
}

uint64_t WebCore::wrap<WebCore::MediaSource>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 48);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v16 = (_DWORD *)a3;
  v5 = WebCore::toJSNewlyCreated(a1, a2, (uint64_t *)&v16);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[6];
  }
  return v5;
}

unint64_t WebCore::wrap<WebCore::MediaStreamTrack>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  int v8;
  JSC::VM *v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  int v18;
  unint64_t v19;
  WebCore::JSMediaStreamTrack *v20;
  JSC::JSCell *v21;
  unint64_t Structure;
  JSC::Structure *v23;
  JSC::JSCell *v24;
  uint64_t v25;
  WebCore::JSCanvasCaptureMediaStreamTrack *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *Allocator;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  int v40;
  unint64_t v41;
  WebCore::JSEventTarget *v42;
  JSC::JSCell *v43;
  unint64_t v44;
  JSC::Structure *v45;
  JSC::JSCell *v46;
  uint64_t v47;
  WebCore::JSMediaStreamTrack *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v53 = *(_QWORD *)(v5 + 32);
    if (!v53)
      goto LABEL_5;
    v54 = *(_DWORD *)(v53 - 8);
    v55 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
    v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
    v58 = v54 & ((v57 >> 31) ^ v57);
    v59 = *(_QWORD *)(v53 + 16 * v58);
    if (v59 != a3)
    {
      v60 = 1;
      while (v59)
      {
        v58 = ((_DWORD)v58 + v60) & v54;
        v59 = *(_QWORD *)(v53 + 16 * v58);
        ++v60;
        if (v59 == a3)
          goto LABEL_57;
      }
LABEL_5:
      ++*(_DWORD *)(a3 + 24);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
      v11 = *((_QWORD *)a2 + 412);
      if (v8)
      {
        if (v11)
        {
          v12 = *(_DWORD *)(v11 - 8);
          v13 = ((unint64_t)&WebCore::JSCanvasCaptureMediaStreamTrack::s_info
               + ~((_QWORD)&WebCore::JSCanvasCaptureMediaStreamTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSCanvasCaptureMediaStreamTrack::s_info
                                                                                       + ~((_QWORD)&WebCore::JSCanvasCaptureMediaStreamTrack::s_info << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = *(char ***)(v11 + 16 * v16);
          if (v17 == &WebCore::JSCanvasCaptureMediaStreamTrack::s_info)
          {
LABEL_11:
            v19 = *(_QWORD *)(v11 + 16 * v16 + 8);
            if (v19)
              goto LABEL_13;
          }
          else
          {
            v18 = 1;
            while (v17)
            {
              v16 = ((_DWORD)v16 + v18) & v12;
              v17 = *(char ***)(v11 + 16 * v16);
              ++v18;
              if (v17 == &WebCore::JSCanvasCaptureMediaStreamTrack::s_info)
                goto LABEL_11;
            }
          }
        }
        v20 = (WebCore::JSMediaStreamTrack *)*((_QWORD *)a2 + 7);
        v21 = (JSC::JSCell *)WebCore::JSMediaStreamTrack::prototype(v20, a2, v10);
        Structure = WebCore::JSCanvasCaptureMediaStreamTrackPrototype::createStructure((uint64_t *)v20, (uint64_t)a2, v21);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v24 = (JSC::JSCell *)WebCore::JSCanvasCaptureMediaStreamTrackPrototype::create(v20, a2, Structure, v23);
        LODWORD(v71) = 23;
        v25 = JSC::Structure::create((uint64_t *)v20, (int)a2, v24);
        v19 = WebCore::cacheDOMStructure((JSCell *)a2, v25, (uint64_t)&WebCore::JSCanvasCaptureMediaStreamTrack::s_info);
LABEL_13:
        v26 = (WebCore::JSCanvasCaptureMediaStreamTrack *)*((_QWORD *)a2 + 7);
        v27 = (_QWORD *)WebCore::JSCanvasCaptureMediaStreamTrack::subspaceForImpl(v26, v9);
        SlowCase = v27[3];
        if (SlowCase >= v27[4])
        {
          SlowCase = v27[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_15;
          }
          v68 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
          v27[4] = SlowCase + HIDWORD(v68);
          v27[5] = SlowCase + (int)v68;
        }
        v27[3] = SlowCase + 32;
LABEL_15:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v19);
        *(_QWORD *)(SlowCase + 24) = a3 + 32;
        if (*((_BYTE *)v26 + 755))
          __dmb(0xAu);
        v28 = *((_QWORD *)a2 + 415);
        if ((byte_1EE337B20 & 1) == 0)
        {
          qword_1EE337B18 = (uint64_t)&off_1E324A910;
          byte_1EE337B20 = 1;
        }
        if (!*(_DWORD *)(v28 + 48))
        {
          if ((SlowCase & 8) != 0)
            v29 = (SlowCase - 112) | 1;
          else
            v29 = SlowCase & 0xFFFFFFFFFFFFC000;
          if ((v29 & 1) != 0)
            v30 = v29 + 47;
          else
            v30 = *(_QWORD *)v29 + 32;
          Allocator = *(uint64_t **)(v30 + 16);
          if (!Allocator)
            Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
          v32 = *Allocator;
          v33 = &qword_1EE337B18;
          goto LABEL_50;
        }
        v61 = (uint64_t *)(v28 + 32);
        v71 = a3;
        if ((SlowCase & 8) != 0)
          v62 = (SlowCase - 112) | 1;
        else
          v62 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v62 & 1) != 0)
          v63 = v62 + 47;
        else
          v63 = *(_QWORD *)v62 + 32;
        v64 = *(_QWORD **)(v63 + 16);
        if (!v64)
          v64 = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v63 + 16) = *v64;
        v65 = &qword_1EE337B18;
        goto LABEL_75;
      }
      if (v11)
      {
        v34 = *(_DWORD *)(v11 - 8);
        v35 = ((unint64_t)&WebCore::JSMediaStreamTrack::s_info
             + ~((_QWORD)&WebCore::JSMediaStreamTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrack::s_info
                                                                        + ~((_QWORD)&WebCore::JSMediaStreamTrack::s_info << 32)) >> 22);
        v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
        v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
        v38 = v34 & ((v37 >> 31) ^ v37);
        v39 = *(char ***)(v11 + 16 * v38);
        if (v39 == &WebCore::JSMediaStreamTrack::s_info)
        {
LABEL_33:
          v41 = *(_QWORD *)(v11 + 16 * v38 + 8);
          if (v41)
            goto LABEL_35;
        }
        else
        {
          v40 = 1;
          while (v39)
          {
            v38 = ((_DWORD)v38 + v40) & v34;
            v39 = *(char ***)(v11 + 16 * v38);
            ++v40;
            if (v39 == &WebCore::JSMediaStreamTrack::s_info)
              goto LABEL_33;
          }
        }
      }
      v42 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
      v43 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v42, a2, v10);
      v44 = WebCore::JSMediaStreamTrackPrototype::createStructure((uint64_t *)v42, (uint64_t)a2, v43);
      *(_DWORD *)(v44 + 16) |= 0x80000u;
      v46 = (JSC::JSCell *)WebCore::JSMediaStreamTrackPrototype::create(v42, a2, v44, v45);
      LODWORD(v71) = 23;
      v47 = JSC::Structure::create((uint64_t *)v42, (int)a2, v46);
      v41 = WebCore::cacheDOMStructure((JSCell *)a2, v47, (uint64_t)&WebCore::JSMediaStreamTrack::s_info);
LABEL_35:
      v48 = (WebCore::JSMediaStreamTrack *)*((_QWORD *)a2 + 7);
      v49 = (_QWORD *)WebCore::JSMediaStreamTrack::subspaceForImpl(v48, v9);
      SlowCase = v49[3];
      if (SlowCase >= v49[4])
      {
        SlowCase = v49[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_37;
        }
        v69 = *(_QWORD *)(SlowCase + 8) ^ v49[6];
        v49[4] = SlowCase + HIDWORD(v69);
        v49[5] = SlowCase + (int)v69;
      }
      v49[3] = SlowCase + 32;
LABEL_37:
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v41);
      *(_QWORD *)(SlowCase + 24) = a3 + 32;
      if (*((_BYTE *)v48 + 755))
        __dmb(0xAu);
      v28 = *((_QWORD *)a2 + 415);
      if ((byte_1EE337B30 & 1) == 0)
      {
        qword_1EE337B28 = (uint64_t)&off_1E32B7C80;
        byte_1EE337B30 = 1;
      }
      if (!*(_DWORD *)(v28 + 48))
      {
        if ((SlowCase & 8) != 0)
          v50 = (SlowCase - 112) | 1;
        else
          v50 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v50 & 1) != 0)
          v30 = v50 + 47;
        else
          v30 = *(_QWORD *)v50 + 32;
        Allocator = *(uint64_t **)(v30 + 16);
        if (!Allocator)
          Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
        v32 = *Allocator;
        v33 = &qword_1EE337B28;
LABEL_50:
        *(_QWORD *)(v30 + 16) = v32;
        *Allocator = SlowCase;
        Allocator[1] = (uint64_t)v33;
        Allocator[2] = v28;
        v51 = *(_QWORD *)(a3 + 40);
        *(_QWORD *)(a3 + 40) = Allocator;
        if (!v51)
          return SlowCase;
LABEL_76:
        *(_QWORD *)(v51 + 8) = 3;
        return SlowCase;
      }
      v61 = (uint64_t *)(v28 + 32);
      v71 = a3;
      if ((SlowCase & 8) != 0)
        v66 = (SlowCase - 112) | 1;
      else
        v66 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v66 & 1) != 0)
        v67 = v66 + 47;
      else
        v67 = *(_QWORD *)v66 + 32;
      v64 = *(_QWORD **)(v67 + 16);
      if (!v64)
        v64 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v67 + 16) = *v64;
      v65 = &qword_1EE337B28;
LABEL_75:
      *v64 = SlowCase;
      v64[1] = v65;
      v64[2] = v28;
      v70 = v64;
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v61, &v71, (uint64_t *)&v70);
      v51 = (uint64_t)v70;
      if (!v70)
        return SlowCase;
      goto LABEL_76;
    }
LABEL_57:
    v6 = *(_QWORD *)(v53 + 16 * v58 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    goto LABEL_5;
  SlowCase = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_5;
  return SlowCase;
}

uint64_t WebCore::JSMessageChannel::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        goto LABEL_15;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C3DF4);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (v14)
    v15 = *(_BYTE *)(a2 + 130) == 0;
  else
    v15 = 0;
  if (v15)
  {
    result = *(_QWORD *)(a2 + 120);
    v16 = *(_QWORD *)(result + 48);
    v17 = *(_DWORD *)(v16 + 4);
    v18 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = v21;
    while (1)
    {
      v23 = *(_QWORD *)(v16 + 8 * v22 + 16);
      if (!v23)
        break;
      if (v14 == v23)
        return result;
      v22 = (v22 + 1) & v17;
      if (v22 == v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C3EB8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v14);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSMessageEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v3 = result;
  v4 = *(unint64_t **)(*(_QWORD *)(result + 24) + 152);
  if (v4)
  {
    if ((v4[1] & 3) == 0)
    {
      v5 = *v4;
      if (*v4)
      {
        if ((v5 & 8) != 0)
        {
          if ((*(_BYTE *)(v5 - 79) & 1) == 0)
            goto LABEL_16;
        }
        else
        {
          v10 = v5 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v13 = *v4;
            v15 = v5 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
            v5 = v13;
            v10 = v15;
          }
          if (((*(_QWORD *)(v10 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
            goto LABEL_16;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_4;
LABEL_16:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_4:
  v6 = *(unint64_t **)(*(_QWORD *)(v3 + 24) + 168);
  if (v6)
  {
    if ((v6[1] & 3) == 0)
    {
      v7 = *v6;
      if (*v6)
      {
        if ((v7 & 8) != 0)
        {
          if ((*(_BYTE *)(v7 - 79) & 1) == 0)
            goto LABEL_22;
        }
        else
        {
          v11 = v7 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v14 = *v6;
            v16 = v7 & 0xFFFFFFFFFFFFC000;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
            v7 = v14;
            v11 = v16;
          }
          if (((*(_QWORD *)(v11 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) == 0)
            goto LABEL_22;
        }
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_7;
LABEL_22:
        result = JSC::SlotVisitor::appendSlow();
      }
    }
  }
LABEL_7:
  v8 = *(unint64_t **)(*(_QWORD *)(v3 + 24) + 184);
  if (v8)
  {
    if ((v8[1] & 3) == 0)
    {
      v9 = *v8;
      if (*v8)
      {
        if ((v9 & 8) != 0)
        {
          if ((*(_BYTE *)(v9 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v12 = v9 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
            v12 = v9 & 0xFFFFFFFFFFFFC000;
          }
          if (((*(_QWORD *)(v12 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSMessageEvent::ports(WebCore::JSMessageEvent *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t result;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::JSCell *v10;
  uint64_t v11;
  _QWORD *Allocator;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v5 + 176);
  v7 = (JSC::JSCell *)result;
  if (!result)
  {
    v8 = *(_QWORD *)(v5 + 184);
    v9 = v5;
    if (!v8)
      goto LABEL_9;
    v7 = *(JSC::JSCell **)v8;
    v9 = v5;
    if (!*(_QWORD *)v8)
      goto LABEL_9;
    v9 = v5;
    if ((*(_BYTE *)(v8 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v7 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v7) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_14:
      result = *(_QWORD *)(v5 + 176);
      goto LABEL_15;
    }
    v9 = *((_QWORD *)this + 3);
LABEL_9:
    v10 = (JSC::JSCell *)WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::MessagePort>>>::convert<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul>(a2, *(JSC::VM **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v9 + 128);
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v11 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v10);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v5 + 176) = result;
      v15 = *(_QWORD *)(v5 + 184);
      if (!v15)
        return result;
      *(_QWORD *)(v15 + 8) = 3;
      *(_QWORD *)(v5 + 184) = 0;
      goto LABEL_14;
    }
    Allocator = 0;
    *(_QWORD *)(v5 + 176) = 0;
    if (result)
    {
      v16 = result;
      if ((result & 8) != 0)
        v17 = (result - 112) | 1;
      else
        v17 = result & 0xFFFFFFFFFFFFC000;
      if ((v17 & 1) != 0)
        v18 = v17 + 47;
      else
        v18 = *(_QWORD *)v17 + 32;
      Allocator = *(_QWORD **)(v18 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v18 + 16) = *Allocator;
      result = v16;
      *Allocator = v16;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v13 = *(_QWORD *)(v5 + 184);
    *(_QWORD *)(v5 + 184) = Allocator;
    if (v13)
    {
      *(_QWORD *)(v13 + 8) = 3;
      if (!result)
        goto LABEL_14;
    }
    else if (!result)
    {
      goto LABEL_14;
    }
    if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)this);
    goto LABEL_14;
  }
LABEL_15:
  if (!result)
  {
    v14 = *(_BYTE **)(v5 + 184);
    if (v14 && *(_QWORD *)v14)
    {
      if ((v14[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v14;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSMessageEvent::data(WebCore::JSMessageEvent *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  JSC::JSCell *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  _QWORD *Allocator;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  _QWORD *v20;

  v5 = (_DWORD *)*((_QWORD *)a2 + 7);
  v6 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v6 + 160);
  v8 = (JSC::JSCell *)result;
  if (!result)
  {
    v9 = *(_QWORD *)(v6 + 168);
    v10 = v6;
    if (!v9)
      goto LABEL_5;
    v8 = *(JSC::JSCell **)v9;
    v10 = v6;
    if (!*(_QWORD *)v9)
      goto LABEL_5;
    v10 = v6;
    if ((*(_BYTE *)(v9 + 8) & 3) != 0)
      goto LABEL_5;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v8) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_12:
      result = *(_QWORD *)(v6 + 160);
      goto LABEL_13;
    }
    v10 = *((_QWORD *)this + 3);
LABEL_5:
    v19[0] = this;
    v19[1] = this;
    v19[2] = a2;
    v19[3] = a2;
    v19[4] = this;
    v19[5] = a2;
    v19[6] = this;
    v19[7] = a2;
    v11 = *(unsigned int *)(v10 + 80);
    if ((_DWORD)v11 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v20 = v19;
      v12 = (JSC::JSCell *)((uint64_t (*)(_QWORD **, uint64_t))off_1E3393490[v11])(&v20, v10 + 72);
      if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
        return 0;
      v5 = (_DWORD *)*((_QWORD *)a2 + 7);
      result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v12);
      if ((result & 0xFFFE000000000002) != 0)
      {
        *(_QWORD *)(v6 + 160) = result;
        v16 = *(_QWORD *)(v6 + 168);
        if (!v16)
          return result;
        *(_QWORD *)(v16 + 8) = 3;
        *(_QWORD *)(v6 + 168) = 0;
        goto LABEL_12;
      }
      Allocator = 0;
      *(_QWORD *)(v6 + 160) = 0;
      if (!result)
        goto LABEL_9;
      v2 = result;
      if ((result & 8) != 0)
        v17 = (result - 112) | 1;
      else
        v17 = result & 0xFFFFFFFFFFFFC000;
      if ((v17 & 1) == 0)
      {
        v18 = *(_QWORD *)v17 + 32;
LABEL_36:
        Allocator = *(_QWORD **)(v18 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v18 + 16) = *Allocator;
        result = v2;
        *Allocator = v2;
        Allocator[1] = 0;
        Allocator[2] = 0;
LABEL_9:
        __dmb(0xAu);
        v14 = *(_QWORD *)(v6 + 168);
        *(_QWORD *)(v6 + 168) = Allocator;
        if (v14)
          *(_QWORD *)(v14 + 8) = 3;
        if (result && v5[190] >= *((unsigned __int8 *)this + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v5 + 48), (const JSCell *)this);
        goto LABEL_12;
      }
    }
    v18 = v17 + 47;
    goto LABEL_36;
  }
LABEL_13:
  if (!result)
  {
    v15 = *(_BYTE **)(v6 + 168);
    if (v15 && *(_QWORD *)v15)
    {
      if ((v15[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v15;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSMutationObserverOwner::isReachableFromOpaqueRoots(int a1, uint64_t a2, int a3, JSC::AbstractSlotVisitor *a4, _QWORD *a5)
{
  uint64_t result;
  BOOL v7;

  result = WebCore::MutationObserver::isReachableFromOpaqueRoots(*(WebCore::MutationObserver **)(*(_QWORD *)a2 + 24), a4);
  if ((_DWORD)result)
    v7 = a5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    *a5 = "Reachable from observed nodes";
    a5[1] = 30;
  }
  return result;
}

uint64_t WebCore::JSNavigator::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
    v3 = *(_BYTE *)(a2 + 130) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v2 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C4660);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v2);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSNavigator::getUserMedia(WebCore::JSNavigator *this, JSCell *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  JSValue v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  WTF *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  WTF *v19;
  _OWORD v20[4];
  uint64_t v21;
  _QWORD v22[3];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3344) + 1408);
  if (*(_BYTE *)(v4 + 5) == 26)
    JSC::JSFunction::getCallData(*(JSC::JSFunction **)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3344) + 1408), a2);
  else
    (*(void (**)(_QWORD *__return_ptr, _QWORD, JSCell *))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v4 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0x38))(v22, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3344) + 1408), a2);
  v17 = 0;
  v18 = 0x800000000;
  v19 = (WTF *)((char *)v20 + 8);
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  v5 = *((int *)a3 + 8);
  if ((unint64_t)(v5 - 1) >= 9)
  {
    v17 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v18) == 1;
    LODWORD(v5) = *((_DWORD *)a3 + 8);
  }
  if ((_DWORD)v5 != 1)
  {
    v9 = 0;
    v10 = 0x600000000;
    do
    {
      v11.super.isa = *(Class *)((char *)a3 + (v10 >> 29));
      v12 = v18;
      if ((_DWORD)v18 != HIDWORD(v18) && (v19 != (WTF *)((char *)v20 + 8) ? (v13 = v19 == 0) : (v13 = 1), v13))
      {
        *((JSValue *)v19 + v18) = v11;
        LODWORD(v18) = v12 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v18, v11) == 1)
      {
        v17 = 1;
      }
      ++v9;
      v10 += 0x100000000;
    }
    while (v9 < *((int *)a3 + 8) - 1);
  }
  v15 = v19;
  v16 = v18;
  JSC::call();
  v7 = *(uint64_t **)&v20[0];
  if (*(_QWORD *)&v20[0])
  {
    v15 = (WTF *)&v18;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v20[0], (uint64_t *)&v15);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v7, v14);
  }
  if (v19 != (WTF *)((char *)v20 + 8) && v19)
    WTF::fastFree(v19, v6);
  return 10;
}

uint64_t WebCore::JSNodeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 + 16);
  if ((v6 & 0x8000000000000) == 0 && ((v6 & 0x4000000000000) != 0 || (*(_BYTE *)(v5 + 54) & 4) != 0))
  {
    if (a5)
    {
      *a5 = "Node is scheduled to be used in an async script invocation)";
      a5[1] = 60;
    }
    return 1;
  }
  if (a5)
  {
    *a5 = "Connected node";
    a5[1] = 15;
  }
  if ((v6 & 0x8000000000000) == 0)
  {
    while (1)
    {
      v8 = (void *)v5;
      if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
      {
        v10 = *(_QWORD *)(v5 + 200);
        if (!v10)
          goto LABEL_18;
        v9 = (uint64_t *)(v10 + 8);
      }
      else
      {
        v9 = (uint64_t *)(v5 + 32);
      }
      v5 = *v9;
      if (!v5)
        goto LABEL_18;
    }
  }
  v8 = *(void **)(*(_QWORD *)(v5 + 40) + 8);
LABEL_18:
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v20 = a4;
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    a4 = v20;
    v8 = v21;
    if ((_DWORD)result)
    {
LABEL_26:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v8);
      return 1;
    }
  }
  else
  {
    v13 = v12[1];
    v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = v17;
    while (1)
    {
      v19 = *(void **)&v12[2 * v18 + 4];
      if (!v19)
        return 0;
      if (v8 == v19)
        goto LABEL_26;
      v18 = (v18 + 1) & v13;
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C49B0);
      }
    }
  }
  return result;
}

unint64_t WebCore::createWrapper(WebCore::DOMWrapperWorld **a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Document *a4)
{
  WebCore::Node *v4;
  unsigned int v5;
  unint64_t JSHTMLWrapper;
  unint64_t v7;
  WebCore::Node *v8;
  uint64_t v10;
  WebCore::Node *v11;

  v4 = *(WebCore::Node **)a3;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a3 + 28);
  if (v5 >> 12 == 1)
  {
    if ((v5 & 0x10) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      v11 = v4;
      JSHTMLWrapper = WebCore::createJSHTMLWrapper(a2, (uint64_t *)&v11, a3);
      goto LABEL_4;
    }
    if ((v5 & 0x20) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      v11 = v4;
      JSHTMLWrapper = WebCore::createJSSVGWrapper((WebCore::JSSVGCircleElement **)a2, &v11, a3);
LABEL_4:
      v7 = JSHTMLWrapper;
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
      }
      return v7;
    }
    if ((v5 & 0x40) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      v11 = v4;
      v7 = WebCore::createJSMathMLWrapper(a2, &v11, a3);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v11);
      return v7;
    }
    return WebCore::createWrapper<WebCore::Element,WebCore::Node>(a2, a3, a3);
  }
  else
  {
    switch(v5 >> 12)
    {
      case 2u:
        return WebCore::createWrapper<WebCore::Attr,WebCore::Node>((WebCore::JSAttr **)a2, (WebCore::Node **)a3, a3);
      case 3u:
        return WebCore::createWrapper<WebCore::Text,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 4u:
        return WebCore::createWrapper<WebCore::CDATASection,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 7u:
        return WebCore::createWrapper<WebCore::ProcessingInstruction,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 8u:
        return WebCore::createWrapper<WebCore::Comment,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 9u:
        return WebCore::toJS(a1, a2, *(WebCore::JSDOMGlobalObject **)a3, a4);
      case 0xAu:
        return WebCore::createWrapper<WebCore::DocumentType,WebCore::Node>(a2, (uint64_t *)a3, a3);
      case 0xBu:
        if ((v5 & 0x80) == 0)
        {
          *(_QWORD *)a3 = 0;
          v11 = v4;
          JSHTMLWrapper = WebCore::createWrapper<WebCore::DocumentFragment,WebCore::DocumentFragment>(a2, (uint64_t *)&v11, a3);
          goto LABEL_4;
        }
        v10 = WebCore::createWrapper<WebCore::ShadowRoot,WebCore::Node>(a2, (uint64_t *)a3, a3);
        break;
      default:
        return WebCore::createWrapper<WebCore::Node,WebCore::Node>(a2, a3, a3);
    }
  }
  return v10;
}

unint64_t WebCore::toJSNewlyCreated(WebCore::DOMWrapperWorld **a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Document *a4)
{
  WebCore::Node *v4;
  unsigned int v5;
  unint64_t JSHTMLWrapper;
  void *v7;
  unint64_t v8;
  WebCore::Node *v9;
  uint64_t v11;
  WebCore::Node *v12;

  v4 = *(WebCore::Node **)a3;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a3 + 28);
  if (v5 >> 12 == 1)
  {
    if ((v5 & 0x10) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      v12 = v4;
      JSHTMLWrapper = WebCore::createJSHTMLWrapper(a2, (uint64_t *)&v12, a3);
      goto LABEL_4;
    }
    if ((v5 & 0x20) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      v12 = v4;
      JSHTMLWrapper = WebCore::createJSSVGWrapper((WebCore::JSSVGCircleElement **)a2, &v12, a3);
LABEL_4:
      v8 = JSHTMLWrapper;
      v9 = v12;
      v12 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v7);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      return v8;
    }
    if ((v5 & 0x40) != 0)
    {
      *((_DWORD *)v4 + 6) += 2;
      v12 = v4;
      v8 = WebCore::createJSMathMLWrapper(a2, &v12, a3);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v12);
      return v8;
    }
    return WebCore::createWrapper<WebCore::Element,WebCore::Node>(a2, a3, a3);
  }
  else
  {
    switch(v5 >> 12)
    {
      case 2u:
        return WebCore::createWrapper<WebCore::Attr,WebCore::Node>((WebCore::JSAttr **)a2, (WebCore::Node **)a3, a3);
      case 3u:
        return WebCore::createWrapper<WebCore::Text,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 4u:
        return WebCore::createWrapper<WebCore::CDATASection,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 7u:
        return WebCore::createWrapper<WebCore::ProcessingInstruction,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 8u:
        return WebCore::createWrapper<WebCore::Comment,WebCore::Node>(a2, (WebCore::Node **)a3, a3);
      case 9u:
        return WebCore::toJS(a1, a2, *(WebCore::JSDOMGlobalObject **)a3, a4);
      case 0xAu:
        return WebCore::createWrapper<WebCore::DocumentType,WebCore::Node>(a2, (uint64_t *)a3, a3);
      case 0xBu:
        if ((v5 & 0x80) == 0)
        {
          *(_QWORD *)a3 = 0;
          v12 = v4;
          JSHTMLWrapper = WebCore::createWrapper<WebCore::DocumentFragment,WebCore::DocumentFragment>(a2, (uint64_t *)&v12, a3);
          goto LABEL_4;
        }
        v11 = WebCore::createWrapper<WebCore::ShadowRoot,WebCore::Node>(a2, (uint64_t *)a3, a3);
        break;
      default:
        return WebCore::createWrapper<WebCore::Node,WebCore::Node>(a2, a3, a3);
    }
  }
  return v11;
}

uint64_t WebCore::getOutOfLineCachedWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_BYTE **)(v2 + 16 * v7 + 8);
      if (v10 && (v10[8] & 3) == 0)
        return *(_QWORD *)v10;
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  return 0;
}

WebCore::Node *WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase(WebCore::Node *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Node *v4;
  WebCore::WindowProxy *v5;
  WebCore::DOMWrapperWorld *v6;
  WebCore::DOMWrapperWorld **v7;
  WebCore::Document *v8;
  WebCore::Node *v9;
  uint64_t v10;
  WebCore::WindowProxy *v11;
  WebCore::Node *v12;
  char v13[8];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      v5 = *(WebCore::WindowProxy **)(v3 + 112);
      {
        v6 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
      }
      else
      {
        v11 = *(WebCore::WindowProxy **)(v3 + 112);
        v10 = WebCore::g_commonVMOrNull;
        if (!WebCore::g_commonVMOrNull)
          v10 = WebCore::commonVMSlow(0);
        v6 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v10 + 41456) + 16);
        WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v6;
        v5 = v11;
      }
      v7 = *(WebCore::DOMWrapperWorld ***)(WebCore::WindowProxy::jsWindowProxy(v5, v6) + 16);
      JSC::JSLockHolder::JSLockHolder();
      *((_DWORD *)v4 + 6) += 2;
      v12 = v4;
      WebCore::createWrapper(v7, (JSC::VM *)v7, (WebCore::JSDOMGlobalObject *)&v12, v8);
      v9 = v12;
      v12 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      return (WebCore::Node *)MEMORY[0x19AEA32A0](v13);
    }
  }
  return this;
}

uint64_t WebCore::JSNodeIterator::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 32);
  if (v2)
    v3 = *(_BYTE *)(a2 + 130) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v2 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C5014);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v2);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSNodeListOwner::isReachableFromOpaqueRoots(uint64_t a1, unsigned int **a2, uint64_t a3, JSC::AbstractSlotVisitor *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v5 = (uint64_t)*a2;
  if ((*(_BYTE *)((16 * **a2) | 0x12) & 0x20) == 0)
    return 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 32))(*(_QWORD *)(v5 + 24)))
  {
    if (a5)
    {
      *a5 = "LiveNodeList owner is opaque root";
      a5[1] = 34;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 24);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        while (1)
        {
          v10 = (void *)v9;
          if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
          {
            v14 = *(_QWORD *)(v9 + 200);
            if (!v14)
              return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
            v13 = (uint64_t *)(v14 + 8);
          }
          else
          {
            v13 = (uint64_t *)(v9 + 32);
          }
          v9 = *v13;
          if (!v9)
            return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
        }
      }
      goto LABEL_38;
    }
  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24)))
  {
    if (a5)
    {
      *a5 = "ChildNodeList owner is opaque root";
      a5[1] = 35;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 32);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        while (1)
        {
          v10 = (void *)v9;
          if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
          {
            v16 = *(_QWORD *)(v9 + 200);
            if (!v16)
              return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
            v15 = (uint64_t *)(v16 + 8);
          }
          else
          {
            v15 = (uint64_t *)(v9 + 32);
          }
          v9 = *v15;
          if (!v9)
            return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
        }
      }
      goto LABEL_38;
    }
  }
  else
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 48))(*(_QWORD *)(v5 + 24)))
      return 0;
    if (a5)
    {
      *a5 = "EmptyNodeList owner is opaque root";
      a5[1] = 35;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 32);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        while (1)
        {
          v10 = (void *)v9;
          if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
          {
            v12 = *(_QWORD *)(v9 + 200);
            if (!v12)
              return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
            v11 = (uint64_t *)(v12 + 8);
          }
          else
          {
            v11 = (uint64_t *)(v9 + 32);
          }
          v9 = *v11;
          if (!v9)
            return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
        }
      }
LABEL_38:
      v10 = *(void **)(*(_QWORD *)(v9 + 40) + 8);
      return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
    }
  }
  v10 = 0;
  return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v10);
}

unint64_t WebCore::createWrapper(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  WebCore::JSNodeList *v15;
  JSC::JSCell *Prototype;
  uint64_t v17;
  unint64_t v18;
  int v20;

  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2) >= 0x101)
    JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v4 + 192));
  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 3296);
  if (!v7)
    goto LABEL_6;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = ((unint64_t)&WebCore::JSNodeList::s_info + ~((_QWORD)&WebCore::JSNodeList::s_info << 32)) ^ (((unint64_t)&WebCore::JSNodeList::s_info + ~((_QWORD)&WebCore::JSNodeList::s_info << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(char ***)(v7 + 16 * v12);
  if (v13 != &WebCore::JSNodeList::s_info)
  {
    v20 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v20) & v8;
      v13 = *(char ***)(v7 + 16 * v12);
      ++v20;
      if (v13 == &WebCore::JSNodeList::s_info)
        goto LABEL_5;
    }
    goto LABEL_6;
  }
LABEL_5:
  v14 = *(_QWORD *)(v7 + 16 * v12 + 8);
  if (!v14)
  {
LABEL_6:
    v15 = *(WebCore::JSNodeList **)(a1 + 56);
    Prototype = (JSC::JSCell *)WebCore::JSNodeList::createPrototype(v15, (JSC::JSCell **)a1, v5);
    v17 = JSC::Structure::create((uint64_t *)v15, a1, Prototype);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v17, (uint64_t)&WebCore::JSNodeList::s_info);
  }
  v18 = WebCore::JSNodeList::create(v14, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::NodeList,WebCore::JSNodeList>(*(_QWORD *)(a1 + 3320), v6, v18);
  return v18;
}

_DWORD *JSC::JSObservableArray::destroy(JSC::JSObservableArray *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t JSC::JSObservableArray::put(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4)
{
  int v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  JSC::VM *v28;

  v28 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*(_QWORD *)(*((_QWORD *)v28 + 5244) + 1768) == a3)
    return JSC::observableArraySetLength(a1, a2, &v28, a4);
  if (!a3)
    return JSC::JSObject::put();
  v6 = *(_DWORD *)(a3 + 16);
  if ((v6 & 0x20) != 0)
    return JSC::JSObject::put();
  v7 = *(_BYTE **)(a3 + 8);
  v8 = *(unsigned int *)(a3 + 4);
  if ((v6 & 4) != 0)
  {
    if (!(_DWORD)v8 || (v21 = *v7 - 48, v21 > 9) || v8 >= 2 && *v7 == 48)
    {
LABEL_27:
      v22 = 0;
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v25 = v8 - 1;
      v26 = v7 + 1;
      while (v25)
      {
        if (v21 > 0x19999999)
          goto LABEL_27;
        v27 = *v26 - 48;
        if (v27 > 9)
          goto LABEL_27;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v19 = __CFADD__(v27, 10 * v21);
        v21 = v27 + 10 * v21;
        --v25;
        ++v26;
        if (v19)
          goto LABEL_28;
      }
      v22 = 0x100000000;
      if (v21 == -1)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v23 = v21;
      }
      if (v21 == -1)
        v24 = 0;
      else
        v24 = v21 & 0xFFFFFF00;
    }
LABEL_28:
    v13 = v24 | v23;
    if ((v22 & 0x100000000) != 0)
      goto LABEL_11;
    return JSC::JSObject::put();
  }
  if ((_DWORD)v8 && (v9 = *(unsigned __int16 *)v7 - 48, v9 <= 9) && (v8 < 2 || *(_WORD *)v7 != 48))
  {
    v16 = (unsigned __int16 *)(v7 + 2);
    v17 = v8 - 1;
    while (v17)
    {
      if (v9 <= 0x19999999)
      {
        v18 = *v16 - 48;
        if (v18 <= 9)
        {
          v19 = __CFADD__(v18, 10 * v9);
          v9 = v18 + 10 * v9;
          ++v16;
          --v17;
          if (!v19)
            continue;
        }
      }
      goto LABEL_9;
    }
    v20 = v9 == -1;
    v12 = v9 & 0xFFFFFF00;
    v11 = v9;
    v10 = 0x100000000;
    if (v20)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  v13 = v12 | v11;
  if ((v10 & 0x100000000) == 0)
    return JSC::JSObject::put();
LABEL_11:
  v14 = *(_QWORD *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14) >= v13)
    return (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, a2, v13, a4);
  else
    return 0;
}

uint64_t JSC::JSObservableArray::putByIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) >= a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3, a4);
  else
    return 0;
}

uint64_t JSC::JSObservableArray::deleteProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 1768) == a3)
    return 0;
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v3 = *(_DWORD *)(a3 + 16);
  if ((v3 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v4 = *(_BYTE **)(a3 + 8);
  v5 = *(unsigned int *)(a3 + 4);
  if ((v3 & 4) != 0)
  {
    if (!(_DWORD)v5 || (v18 = *v4 - 48, v18 > 9) || v5 >= 2 && *v4 == 48)
    {
LABEL_28:
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v22 = v5 - 1;
      v23 = v4 + 1;
      while (v22)
      {
        if (v18 > 0x19999999)
          goto LABEL_28;
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_28;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v16 = __CFADD__(v24, 10 * v18);
        v18 = v24 + 10 * v18;
        --v22;
        ++v23;
        if (v16)
          goto LABEL_29;
      }
      v19 = 0x100000000;
      if (v18 == -1)
      {
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v20 = v18;
      }
      if (v18 == -1)
        v21 = 0;
      else
        v21 = v18 & 0xFFFFFF00;
    }
LABEL_29:
    v10 = v21 | v20;
    if ((v19 & 0x100000000) != 0)
      goto LABEL_11;
    return JSC::JSObject::deleteProperty();
  }
  if ((_DWORD)v5 && (v6 = *(unsigned __int16 *)v4 - 48, v6 <= 9) && (v5 < 2 || *(_WORD *)v4 != 48))
  {
    v13 = (unsigned __int16 *)(v4 + 2);
    v14 = v5 - 1;
    while (v14)
    {
      if (v6 <= 0x19999999)
      {
        v15 = *v13 - 48;
        if (v15 <= 9)
        {
          v16 = __CFADD__(v15, 10 * v6);
          v6 = v15 + 10 * v6;
          ++v13;
          --v14;
          if (!v16)
            continue;
        }
      }
      goto LABEL_9;
    }
    v17 = v6 == -1;
    v9 = v6 & 0xFFFFFF00;
    v8 = v6;
    v7 = 0x100000000;
    if (v17)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
  }
  else
  {
LABEL_9:
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  v10 = v9 | v8;
  if ((v7 & 0x100000000) == 0)
    return JSC::JSObject::deleteProperty();
LABEL_11:
  v11 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  if (!(_DWORD)result)
    return result;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) - 1 == v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    return 1;
  }
  return 0;
}

uint64_t JSC::JSObservableArray::deletePropertyByIndex(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) - 1 == a3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JSC::JSObservableArray::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t result;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;

  v6 = *(JSC::VM **)(a2 + 56);
  if (*(_QWORD *)(*((_QWORD *)v6 + 5244) + 1768) == a3)
  {
    *(_QWORD *)a4 = JSC::arrayLengthGetter;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 12;
    *(_QWORD *)(a4 + 32) = a1;
    *(_WORD *)(a4 + 48) = 769;
    return 1;
  }
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) == 0)
  {
    v10 = *(_BYTE **)(a3 + 8);
    v11 = *(unsigned int *)(a3 + 4);
    if ((v9 & 4) != 0)
    {
      if (!(_DWORD)v11)
        goto LABEL_9;
      v12 = *v10 - 48;
      if (v12 > 9 || v11 >= 2 && *v10 == 48)
        goto LABEL_9;
      v39 = v10 + 1;
      v40 = v11 - 1;
      while (v40)
      {
        if (v12 <= 0x19999999)
        {
          v41 = *v39 - 48;
          if (v41 <= 9)
          {
            v25 = __CFADD__(v41, 10 * v12);
            v12 = v41 + 10 * (_DWORD)v12;
            ++v39;
            --v40;
            if (!v25)
              continue;
          }
        }
        goto LABEL_9;
      }
    }
    else
    {
      if (!(_DWORD)v11)
        goto LABEL_9;
      v12 = *(unsigned __int16 *)v10 - 48;
      if (v12 > 9 || v11 >= 2 && *(_WORD *)v10 == 48)
        goto LABEL_9;
      v22 = (unsigned __int16 *)(v10 + 2);
      v23 = v11 - 1;
      while (v23)
      {
        if (v12 <= 0x19999999)
        {
          v24 = *v22 - 48;
          if (v24 <= 9)
          {
            v25 = __CFADD__(v24, 10 * v12);
            v12 = v24 + 10 * (_DWORD)v12;
            ++v22;
            --v23;
            if (!v25)
              continue;
          }
        }
        goto LABEL_9;
      }
    }
    if ((_DWORD)v12 != -1)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16)) > v12)
      {
        *(_QWORD *)a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, v12);
        *(_DWORD *)(a4 + 16) = 8;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      v6 = *(JSC::VM **)(a2 + 56);
    }
  }
LABEL_9:
  if (!(a3 >> 4)
    || (v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v13 + 0x20)) != 0)
    || (v14 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6)) == 0
    || (v47 = a3, v15 = JSC::PropertyTable::get(v14, (uint64_t *)&v47), (_DWORD)v15 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) != 0)
      return 0;
    v17 = *(_BYTE **)(a3 + 8);
    v18 = *(unsigned int *)(a3 + 4);
    if ((v16 & 4) != 0)
    {
      if ((_DWORD)v18)
      {
        v42 = *v17 - 48;
        if (v42 > 9 || v18 >= 2 && *v17 == 48)
        {
LABEL_79:
          v43 = 0;
        }
        else
        {
          v44 = v17 + 1;
          v45 = v18 - 1;
          while (v45)
          {
            if (v42 > 0x19999999)
              goto LABEL_79;
            v46 = *v44 - 48;
            if (v46 > 9)
              goto LABEL_79;
            v43 = 0;
            v25 = __CFADD__(v46, 10 * v42);
            v42 = v46 + 10 * v42;
            ++v44;
            --v45;
            if (v25)
              goto LABEL_80;
          }
          v43 = 0x100000000;
          if (v42 == -1)
            v43 = 0;
        }
      }
      else
      {
        v43 = 0;
      }
LABEL_80:
      if ((v43 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v18)
      {
        v19 = *(unsigned __int16 *)v17 - 48;
        if (v19 > 9 || v18 >= 2 && *(_WORD *)v17 == 48)
        {
LABEL_20:
          v20 = 0;
        }
        else
        {
          v30 = (unsigned __int16 *)(v17 + 2);
          v31 = v18 - 1;
          while (v31)
          {
            if (v19 <= 0x19999999)
            {
              v32 = *v30 - 48;
              if (v32 <= 9)
              {
                v25 = __CFADD__(v32, 10 * v19);
                v19 = v32 + 10 * v19;
                ++v30;
                --v31;
                if (!v25)
                  continue;
              }
            }
            goto LABEL_20;
          }
          v33 = v19 == -1;
          v20 = 0x100000000;
          if (v33)
            v20 = 0;
        }
      }
      else
      {
        v20 = 0;
      }
      if ((v20 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v15 > 63)
  {
    v26 = *(_QWORD *)(a1 + 8) - 8;
    v27 = 0x3F00000000 - (v15 << 32);
  }
  else
  {
    v26 = a1 + 16;
    v27 = v15 << 32;
  }
  v28 = *(_QWORD *)(v26 + (v27 >> 29));
  if ((v28 & 0xFFFE000000000002) != 0)
  {
LABEL_39:
    *(_QWORD *)a4 = v28;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v15);
    *(_DWORD *)(a4 + 20) = v15;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v29 = *(unsigned __int8 *)(v28 + 5);
  if (v29 != 6)
  {
    if (v29 != 5)
      goto LABEL_39;
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  v34 = *(_DWORD *)(v13 + 16) & 3;
  v36 = *(_QWORD *)(v28 + 8);
  v35 = *(_QWORD *)(v28 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C))
  {
    v38 = *(_QWORD *)(v28 + 24);
    v37 = *(_QWORD *)(v28 + 32);
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 8) = v35;
    *(_DWORD *)(a4 + 16) = HIDWORD(v15);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v34 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v38;
    *(_QWORD *)(a4 + 80) = v37;
  }
  else
  {
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 8) = v35;
    *(_DWORD *)(a4 + 16) = HIDWORD(v15);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v34 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::JSObservableArray::getOwnPropertySlotByIndex(JSC::JSObservableArray *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  if ((*(unsigned int (**)(_QWORD, JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, JSC::PropertySlot *))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), a2, a3, a4, a5) <= a3)return JSC::JSObject::getOwnPropertySlotByIndex();
  *(_QWORD *)a4 = (*(uint64_t (**)(_QWORD, JSC::JSObject *, JSC::JSGlobalObject *))(**((_QWORD **)this + 2)
                                                                                            + 32))(*((_QWORD *)this + 2), a2, a3);
  *(_DWORD *)(a4 + 16) = 8;
  *(_QWORD *)(a4 + 32) = this;
  *(_BYTE *)(a4 + 49) = 1;
  return 1;
}

uint64_t JSC::JSObservableArray::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v64[2];
  char v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;

  v5 = *(_QWORD *)(a2 + 56);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  if (v6)
  {
    v8 = v6;
    v9 = 0;
    v10 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v11 = v66;
      v67 = v66;
      v12 = *((_DWORD *)v66 + 4);
      if ((v12 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v66 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v13 = *a3;
      v14 = *(unsigned int *)(*a3 + 20);
      if (v14 <= 0x13)
      {
        if ((_DWORD)v14)
        {
          v15 = *(WTF::StringImpl ***)(v13 + 8);
          while (*v15 != v66)
          {
            ++v15;
            if (!--v14)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v12 & 0x20) != 0)
        {
          v36 = *(_DWORD *)v11 + 2;
        }
        else
        {
          if ((v12 & 0x10) != 0)
          {
            *(_DWORD *)v11 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v11 = v64[0];
          }
          v36 = *(_DWORD *)v11;
          *(_DWORD *)v11 += 2;
          if (!v36)
          {
            WTF::StringImpl::destroy(v11, v7);
LABEL_54:
            v37 = (uint64_t *)(v13 + 8);
            v64[0] = v11;
            v38 = *(unsigned int *)(v13 + 20);
            if ((_DWORD)v38 == *(_DWORD *)(v13 + 16))
            {
              v39 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)v64);
              v38 = *(unsigned int *)(v13 + 20);
              v40 = *(_QWORD *)(v13 + 8);
              v41 = *v39;
              *v39 = 0;
              *(_QWORD *)(v40 + 8 * v38) = v41;
            }
            else
            {
              v42 = *v37;
              v64[0] = 0;
              *(_QWORD *)(v42 + 8 * v38) = v11;
            }
            *(_DWORD *)(v13 + 20) = v38 + 1;
            v43 = v64[0];
            v64[0] = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, v7);
              else
                *(_DWORD *)v43 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v11 = v36;
        goto LABEL_54;
      }
      if (!*v10 || !*(_DWORD *)(*v10 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v67, (uint64_t)v64);
      if (v65)
      {
        v11 = v67;
        v13 = *a3;
        v12 = *((_DWORD *)v67 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v44 = v66;
      v66 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v7);
        else
          *(_DWORD *)v44 -= 2;
      }
      if (++v9 == v8)
        goto LABEL_69;
    }
    v16 = *(uint64_t **)(v13 + 8);
    v17 = &v16[v14];
    while (1)
    {
      v18 = *v16;
      v19 = *v10;
      if (*v10
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v19 = *v10) != 0))
      {
        v20 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        v20 = 0;
      }
      v21 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = (uint64_t *)(v19 + 8 * v24);
      v26 = *v25;
      if (*v25)
      {
        v27 = 0;
        v28 = 1;
        while (v26 != v18)
        {
          if (v26 == -1)
            v27 = v25;
          v24 = (v24 + v28) & v20;
          v25 = (uint64_t *)(v19 + 8 * v24);
          v26 = *v25;
          ++v28;
          if (!*v25)
          {
            if (v27)
            {
              *v27 = 0;
              --*(_DWORD *)(*v10 - 16);
              v25 = v27;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v25 = v18;
      v29 = *v10;
      v30 = *v10 ? *(_DWORD *)(v29 - 12) + 1 : 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *v10;
      v32 = *v10 ? *(_DWORD *)(v31 - 12) : 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
        break;
      if (3 * v34 <= 4 * v33)
      {
        if ((_DWORD)v34)
          goto LABEL_43;
        v35 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v16 == v17)
        goto LABEL_17;
    }
    if (v34 > 2 * v33)
      goto LABEL_47;
LABEL_43:
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v35, v25);
    goto LABEL_47;
  }
LABEL_69:
  if (!a4)
  {
    v46 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 1768);
    v67 = v46;
    v47 = *((_DWORD *)v46 + 4);
    if ((v47 & 0x20) != 0)
    {
      if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v46 + 36) & 4) != 0)
        return JSC::JSObject::getOwnNonIndexPropertyNames();
    }
    else if ((a3[3] & 2) == 0)
    {
      return JSC::JSObject::getOwnNonIndexPropertyNames();
    }
    v48 = *a3;
    v49 = *(unsigned int *)(*a3 + 20);
    if (v49 > 0x13)
    {
      v51 = a3[1];
      if (!v51 || !*(_DWORD *)(v51 - 12))
      {
        v52 = *(WTF::StringImpl ***)(v48 + 8);
        v53 = 8 * v49;
        do
        {
          v54 = *v52++;
          v66 = v54;
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v66, (uint64_t)v64);
          v53 -= 8;
        }
        while (v53);
      }
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v67, (uint64_t)v64);
      if (!v65)
        return JSC::JSObject::getOwnNonIndexPropertyNames();
      v46 = v67;
      v48 = *a3;
      v47 = *((_DWORD *)v67 + 4);
    }
    else if ((_DWORD)v49)
    {
      v50 = *(WTF::StringImpl ***)(v48 + 8);
      while (*v50 != v46)
      {
        ++v50;
        if (!--v49)
          goto LABEL_89;
      }
      return JSC::JSObject::getOwnNonIndexPropertyNames();
    }
LABEL_89:
    if ((v47 & 0x20) != 0)
    {
      v55 = *(_DWORD *)v46 + 2;
    }
    else
    {
      if ((v47 & 0x10) != 0)
      {
        *(_DWORD *)v46 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v46 = v64[0];
      }
      v55 = *(_DWORD *)v46;
      *(_DWORD *)v46 += 2;
      if (!v55)
      {
        WTF::StringImpl::destroy(v46, v7);
LABEL_95:
        v64[0] = v46;
        v56 = *(unsigned int *)(v48 + 20);
        if ((_DWORD)v56 == *(_DWORD *)(v48 + 16))
        {
          v57 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48 + 8, v56 + 1, (unint64_t)v64);
          v59 = *(unsigned int *)(v48 + 20);
          v60 = *(_QWORD *)(v48 + 8);
          v61 = *v57;
          *v57 = 0;
          *(_QWORD *)(v60 + 8 * v59) = v61;
          v62 = v64[0];
          *(_DWORD *)(v48 + 20) = v59 + 1;
          v64[0] = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
              WTF::StringImpl::destroy(v62, v58);
            else
              *(_DWORD *)v62 -= 2;
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * v56) = v46;
          *(_DWORD *)(v48 + 20) = v56 + 1;
        }
        return JSC::JSObject::getOwnNonIndexPropertyNames();
      }
    }
    *(_DWORD *)v46 = v55;
    goto LABEL_95;
  }
  return JSC::JSObject::getOwnNonIndexPropertyNames();
}

uint64_t JSC::JSObservableArray::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  JSC::VM *v32;

  v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*(_QWORD *)(*((_QWORD *)v32 + 5244) + 1768) == a3)
  {
    if (JSC::PropertyDescriptor::isAccessorDescriptor(this))
    {
      if (a5)
        goto LABEL_17;
      return 0;
    }
    v20 = *((_DWORD *)this + 7);
    if ((v20 & 4) != 0)
    {
      if ((JSC::PropertyDescriptor::configurable(this) & 1) != 0)
      {
        if (!a5)
          return 0;
        goto LABEL_17;
      }
      v20 = *((_DWORD *)this + 7);
    }
    if ((v20 & 2) != 0)
    {
      if ((JSC::PropertyDescriptor::enumerable(this) & 1) != 0)
      {
        if (!a5)
          return 0;
        goto LABEL_17;
      }
      v20 = *((_DWORD *)this + 7);
    }
    if ((v20 & 1) != 0 && (JSC::PropertyDescriptor::writable(this) & 1) == 0)
    {
      if (!a5)
        return 0;
      goto LABEL_17;
    }
    if (*(_QWORD *)this)
      return JSC::observableArraySetLength(a1, a2, &v32, *(_QWORD *)this);
    return 1;
  }
  if (!a3)
    return JSC::JSArray::defineOwnProperty();
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    return JSC::JSArray::defineOwnProperty();
  v10 = *(_BYTE **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) != 0)
  {
    if ((_DWORD)v11)
    {
      v26 = *v10 - 48;
      if (v26 <= 9 && (v11 < 2 || *v10 != 48))
      {
        v29 = v10 + 1;
        v30 = v11 - 1;
        while (v30)
        {
          if (v26 > 0x19999999)
            goto LABEL_65;
          v31 = *v29 - 48;
          if (v31 > 9)
            goto LABEL_65;
          v27 = 0;
          LODWORD(v11) = 0;
          v28 = 0;
          v24 = __CFADD__(v31, 10 * v26);
          v26 = v31 + 10 * v26;
          ++v29;
          --v30;
          if (v24)
            goto LABEL_67;
        }
        v27 = 0x100000000;
        if (v26 == -1)
        {
          v27 = 0;
          LODWORD(v11) = 0;
        }
        else
        {
          LODWORD(v11) = v26;
        }
        if (v26 == -1)
          v28 = 0;
        else
          v28 = v26 & 0xFFFFFF00;
LABEL_67:
        v15 = v28 | v11;
        if ((v27 & 0x100000000) != 0)
          goto LABEL_15;
        return JSC::JSArray::defineOwnProperty();
      }
LABEL_65:
      v27 = 0;
      LODWORD(v11) = 0;
    }
    else
    {
      v27 = 0;
    }
    v28 = 0;
    goto LABEL_67;
  }
  if ((_DWORD)v11)
  {
    v12 = *(unsigned __int16 *)v10 - 48;
    if (v12 > 9 || v11 >= 2 && *(_WORD *)v10 == 48)
    {
LABEL_9:
      v13 = 0;
      v14 = 0;
      LODWORD(v11) = 0;
    }
    else
    {
      v21 = (unsigned __int16 *)(v10 + 2);
      v22 = v11 - 1;
      while (v22)
      {
        if (v12 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v12);
            v12 = v23 + 10 * v12;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_9;
      }
      v25 = v12 == -1;
      LODWORD(v11) = v12 & 0xFFFFFF00;
      v14 = v12;
      v13 = 0x100000000;
      if (v25)
      {
        v13 = 0;
        v14 = 0;
        LODWORD(v11) = 0;
      }
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = v11 | v14;
  if ((v13 & 0x100000000) == 0)
    return JSC::JSArray::defineOwnProperty();
LABEL_15:
  if (JSC::PropertyDescriptor::isAccessorDescriptor(this))
  {
    if (a5)
LABEL_17:
      JSC::throwTypeError();
    return 0;
  }
  v17 = *((_DWORD *)this + 7);
  if ((v17 & 4) != 0)
  {
    if (!JSC::PropertyDescriptor::configurable(this))
    {
      if (!a5)
        return 0;
      goto LABEL_17;
    }
    v17 = *((_DWORD *)this + 7);
  }
  if ((v17 & 2) != 0)
  {
    if (!JSC::PropertyDescriptor::enumerable(this))
    {
      if (!a5)
        return 0;
      goto LABEL_17;
    }
    v17 = *((_DWORD *)this + 7);
  }
  if ((v17 & 1) != 0 && (JSC::PropertyDescriptor::writable(this) & 1) == 0)
  {
    if (!a5)
      return 0;
    goto LABEL_17;
  }
  v18 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v19 = *(_QWORD *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19) < v15)
    return 0;
  return (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, a2, v15, v18);
}

uint64_t JSC::JSObservableArray::JSObservableArray(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

_DWORD *JSC::JSObservableArray::finishCreation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _DWORD *result;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v4 = *a3;
  *a3 = 0;
  result = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unint64_t JSC::arrayLengthGetter(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::JSObservableArray::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

{
  unsigned int v2;

  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::RuntimeArray::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t JSC::observableArraySetLength(uint64_t a1, JSC::JSGlobalObject *a2, JSC::VM **a3, unint64_t a4)
{
  unint64_t v4;
  double v8;
  const WTF::String *v9;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  double v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;

  v4 = a4;
  v24 = a4;
  if (a4 < 0xFFFE000000000000)
  {
    v15 = a4 - 0x2000000000000;
    if (a4 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, a2);
      v15 = v22;
    }
    v16 = (v15 >> 52) & 0x7FF;
    v17 = v16 - 1023;
    v18 = v15 >> (51 - (v15 >> 52));
    if (v16 > 0x433)
      LODWORD(v18) = v15 << ((v15 >> 52) - 51);
    if (v16 >= 0x41F)
      v19 = v18;
    else
      v19 = (((1 << ((v15 >> 52) + 1)) - 1) & v18) + (1 << ((v15 >> 52) + 1));
    if ((v15 & 0x8000000000000000) == 0)
      v20 = v19;
    else
      v20 = -v19;
    if (v17 <= 0x53)
      v4 = v20;
    else
      v4 = 0;
  }
  if (*((_DWORD *)*a3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*a3) & 1) != 0)
    return 0;
  if (v24 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)v24;
  }
  else if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, a2);
    v8 = v21;
  }
  else
  {
    *(_QWORD *)&v8 = v24 - 0x2000000000000;
  }
  if (*((_DWORD *)*a3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*a3) & 1) != 0)
    return 0;
  if (v8 != (double)v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10.super.isa = (Class)JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v23, v9);
    JSC::VM::throwException(*a3, a2, v10);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (v4 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13))
    return 0;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 48))(v13, v4);
  return 1;
}

uint64_t WebCore::JSOffscreenCanvasRenderingContext2D::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1956C6B04);
  }
  if (!*(_BYTE *)(a2 + 130))
  {
    v5 = v3 - 32;
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v5 == v13)
        return result;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C6AB8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSOffscreenCanvasRenderingContext2DOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  void *v7;
  WTF::ConcurrentPtrHashSet *v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t result;

  if (a5)
  {
    *a5 = "Canvas is opaque root";
    a5[1] = 22;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1956C6C30);
  }
  v7 = (void *)(v6 - 32);
  v8 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v9 = (_DWORD *)*((_QWORD *)v8 + 6);
  if ((_DWORD *)((char *)v8 + 56) == v9)
  {
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v8, v7);
    v7 = (void *)(v6 - 32);
    if ((_DWORD)result)
    {
LABEL_14:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v7);
      return 1;
    }
  }
  else
  {
    v10 = v9[1];
    v11 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(void **)&v9[2 * v15 + 4];
      if (!v16)
        return 0;
      if (v7 == v16)
        goto LABEL_14;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C6BECLL);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSPaintRenderingContext2D::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1956C6D70);
  }
  if (!*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v3 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C6D24);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSPaintRenderingContext2DOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;

  if (a5)
  {
    *a5 = "Canvas is opaque root";
    a5[1] = 22;
  }
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 32);
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1956C6E98);
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
    if ((_DWORD)result)
    {
LABEL_14:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C6E54);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSPaintWorkletGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;

  v3 = result;
  v4 = (unsigned __int8 *)(*(_QWORD *)(result + 3400) + 1056);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_5:
  v6 = *(_QWORD **)(*(_QWORD *)(v3 + 3400) + 1048);
  if (v6)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[2 * v7];
    if (*((_DWORD *)v6 - 3))
    {
      v9 = v6;
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = v6;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = &v6[2 * v7];
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = &v6[2 * v7];
  if (v6)
  {
LABEL_12:
    v11 = &v6[2 * *((unsigned int *)v6 - 1)];
    goto LABEL_17;
  }
  v11 = 0;
LABEL_17:
  while (v9 != v11)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9[1] + 24) + 24))(*(_QWORD *)(v9[1] + 24), a2);
    if ((*(_QWORD *)(v9[1] + 16) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v12 = v9 + 2;
    v9 = v8;
    if (v12 != v8)
    {
      v9 = v12;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::JSPaintWorkletGlobalScope::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  int v15;

  v3 = result;
  v4 = (unsigned __int8 *)(*(_QWORD *)(result + 3400) + 1056);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_5:
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 3400) + 1048);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(*(_QWORD *)(v3 + 3400) + 1048);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(_QWORD **)(*(_QWORD *)(v3 + 3400) + 1048);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = (_QWORD *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_12:
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_17;
  }
  v11 = 0;
LABEL_17:
  while (v9 != v11)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9[1] + 24) + 32))(*(_QWORD *)(v9[1] + 24), a2);
    v12 = *(_QWORD *)(v9[1] + 16);
    if (v12)
      v13 = (v12 & 0xFFFE000000000002) == 0;
    else
      v13 = 0;
    if (!v13)
      goto LABEL_22;
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) == 0)
        goto LABEL_34;
    }
    else
    {
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
      {
LABEL_34:
        result = JSC::SlotVisitor::appendSlow();
        goto LABEL_22;
      }
    }
    if (*(_QWORD *)(a2 + 168))
      goto LABEL_34;
LABEL_22:
    v14 = v9 + 2;
    v9 = v8;
    if (v14 != v8)
    {
      v9 = v14;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v15 = __ldxr(v4);
  if (v15 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::JSPaymentMethodChangeEvent *v7;
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = *(_QWORD *)(a1 + 24);
  v9 = a2;
  v3 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v3 == -1)
  {
    v7 = (WebCore::JSPaymentMethodChangeEvent *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSPaymentMethodChangeEvent::methodDetails(v7, v8);
  }
  else
  {
    v10 = &v9;
    ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26JSPaymentMethodChangeEvent23visitAdditionalChildrenIN3JSC11SlotVisitorEEEvRT_EUlRKNS8_22JSValueInWrappedObjectEE_JZNSA_ISC_EEvSE_EUlRKNS_8functionIFNSB_6StrongINSB_8JSObjectELNSB_30ShouldStrongDestructorGrabLockE0EEERNSB_14JSGlobalObjectEEEEE_EEEEEJRKNS0_6__implIJSF_SR_EEEEEEDcOSD_DpOT0____fmatrix[v3])(&v10, v2 + 88);
    return WebCore::JSValueInWrappedObject::visit<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24) + 128, a2);
  }
}

uint64_t WebCore::JSPaymentMethodChangeEvent::methodDetails(WebCore::JSPaymentMethodChangeEvent *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  JSC::JSCell *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  _QWORD *Allocator;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  JSC::JSGlobalObject **v20;

  v5 = (_DWORD *)*((_QWORD *)a2 + 7);
  v6 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v6 + 128);
  v8 = (JSC::JSCell *)result;
  if (!result)
  {
    v9 = *(_QWORD *)(v6 + 136);
    v10 = v6;
    if (!v9)
      goto LABEL_9;
    v8 = *(JSC::JSCell **)v9;
    v10 = v6;
    if (!*(_QWORD *)v9)
      goto LABEL_9;
    v10 = v6;
    if ((*(_BYTE *)(v9 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v8) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_15:
      result = *(_QWORD *)(v6 + 128);
      goto LABEL_16;
    }
    v10 = *((_QWORD *)this + 3);
LABEL_9:
    v19 = a2;
    v11 = *(unsigned int *)(v10 + 120);
    if ((_DWORD)v11 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v20 = &v19;
      v12 = (JSC::JSCell *)((uint64_t (*)(JSC::JSGlobalObject ***, uint64_t))off_1E33934B8[v11])(&v20, v10 + 88);
      if (v5[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
        return 0;
      v5 = (_DWORD *)*((_QWORD *)a2 + 7);
      result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v12);
      if ((result & 0xFFFE000000000002) != 0)
      {
        *(_QWORD *)(v6 + 128) = result;
        v16 = *(_QWORD *)(v6 + 136);
        if (!v16)
          return result;
        *(_QWORD *)(v16 + 8) = 3;
        *(_QWORD *)(v6 + 136) = 0;
        goto LABEL_15;
      }
      Allocator = 0;
      *(_QWORD *)(v6 + 128) = 0;
      if (!result)
      {
LABEL_13:
        __dmb(0xAu);
        v14 = *(_QWORD *)(v6 + 136);
        *(_QWORD *)(v6 + 136) = Allocator;
        if (v14)
        {
          *(_QWORD *)(v14 + 8) = 3;
          if (!result)
            goto LABEL_15;
        }
        else if (!result)
        {
          goto LABEL_15;
        }
        if (v5[190] >= *((unsigned __int8 *)this + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v5 + 48), (const JSCell *)this);
        goto LABEL_15;
      }
      v2 = result;
      if ((result & 8) != 0)
        v17 = (result - 112) | 1;
      else
        v17 = result & 0xFFFFFFFFFFFFC000;
      if ((v17 & 1) == 0)
      {
        v18 = *(_QWORD *)v17 + 32;
LABEL_36:
        Allocator = *(_QWORD **)(v18 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v18 + 16) = *Allocator;
        result = v2;
        *Allocator = v2;
        Allocator[1] = 0;
        Allocator[2] = 0;
        goto LABEL_13;
      }
    }
    v18 = v17 + 47;
    goto LABEL_36;
  }
LABEL_16:
  if (!result)
  {
    v15 = *(_BYTE **)(v6 + 136);
    if (v15 && *(_QWORD *)v15)
    {
      if ((v15[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v15;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::JSPaymentResponse::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  return WebCore::JSValueInWrappedObject::visit<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24) + 64, a2);
}

uint64_t WebCore::JSPaymentResponse::details(WebCore::JSPaymentResponse *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t result;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::JSCell **v10;
  uint64_t v11;
  JSC::JSCell **v12;
  JSC::JSCell *v13;
  JSC::JSCell *v14;
  uint64_t v15;
  _QWORD *Allocator;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  JSC::JSCell **v23;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v5 + 64);
  v7 = (JSC::JSCell *)result;
  if (!result)
  {
    v8 = *(_QWORD *)(v5 + 72);
    v9 = v5;
    if (!v8)
      goto LABEL_9;
    v7 = *(JSC::JSCell **)v8;
    v9 = v5;
    if (!*(_QWORD *)v8)
      goto LABEL_9;
    v9 = v5;
    if ((*(_BYTE *)(v8 + 8) & 3) != 0)
      goto LABEL_9;
  }
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v7 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v7) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)a2 + 415))
    {
LABEL_18:
      result = *(_QWORD *)(v5 + 64);
      goto LABEL_19;
    }
    v9 = *((_QWORD *)this + 3);
LABEL_9:
    (*(void (**)(JSC::JSCell ***__return_ptr, _QWORD, JSC::JSGlobalObject *))(**(_QWORD **)(v9 + 56) + 16))(&v23, *(_QWORD *)(v9 + 56), a2);
    if (v23)
    {
      v10 = v23 - 2;
      v11 = *(_QWORD *)(((unint64_t)(v23 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v12 = (JSC::JSCell **)*(v23 - 1);
      v13 = *v23;
      if (v12)
      {
        v14 = *v10;
        *v12 = *v10;
        *((_QWORD *)v14 + 1) = v12;
        *v10 = 0;
        v10[1] = 0;
      }
      *v10 = *(JSC::JSCell **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;
    }
    else
    {
      v13 = 0;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v15 = *((_QWORD *)a2 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(a2, this, v13);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *(_QWORD *)(v5 + 64) = result;
      v19 = *(_QWORD *)(v5 + 72);
      if (!v19)
        return result;
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(v5 + 72) = 0;
      goto LABEL_18;
    }
    Allocator = 0;
    *(_QWORD *)(v5 + 64) = 0;
    if (result)
    {
      v20 = result;
      if ((result & 8) != 0)
        v21 = (result - 112) | 1;
      else
        v21 = result & 0xFFFFFFFFFFFFC000;
      if ((v21 & 1) != 0)
        v22 = v21 + 47;
      else
        v22 = *(_QWORD *)v21 + 32;
      Allocator = *(_QWORD **)(v22 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v22 + 16) = *Allocator;
      result = v20;
      *Allocator = v20;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v17 = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v5 + 72) = Allocator;
    if (v17)
    {
      *(_QWORD *)(v17 + 8) = 3;
      if (!result)
        goto LABEL_18;
    }
    else if (!result)
    {
      goto LABEL_18;
    }
    if (*(_DWORD *)(v15 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v15 + 192), (const JSCell *)this);
    goto LABEL_18;
  }
LABEL_19:
  if (!result)
  {
    v18 = *(_BYTE **)(v5 + 72);
    if (v18 && *(_QWORD *)v18)
    {
      if ((v18[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v18;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::createWrapper<WebCore::PerformanceNavigationTiming,WebCore::PerformanceEntry>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  result = WebCore::createWrapper<WebCore::PerformanceNavigationTiming,WebCore::PerformanceNavigationTiming>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[2] == 1)
    {
      v5 = result;
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      return v5;
    }
    else
    {
      --v4[2];
    }
  }
  return result;
}

uint64_t WebCore::createWrapper<WebCore::PerformanceMark,WebCore::PerformanceEntry>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v7;

  v3 = *a2;
  *a2 = 0;
  v7 = (_DWORD *)v3;
  v4 = WebCore::createWrapper<WebCore::PerformanceMark,WebCore::PerformanceMark>(a1, (uint64_t *)&v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return v4;
}

unint64_t WebCore::createWrapper<WebCore::PerformanceResourceTiming,WebCore::PerformanceEntry>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  WebCore::JSPerformanceResourceTiming *v5;
  JSC::VM *v6;
  _QWORD *v7;
  unint64_t SlowCase;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *Allocator;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *a2;
  *a2 = 0;
  v4 = WebCore::getDOMStructure<WebCore::JSPerformanceResourceTiming>(*(WebCore::JSPerformanceResourceTiming **)(a1 + 56), (JSC::JSCell **)a1);
  v5 = *(WebCore::JSPerformanceResourceTiming **)(a1 + 56);
  v7 = (_QWORD *)WebCore::JSPerformanceResourceTiming::subspaceForImpl(v5, v6);
  SlowCase = v7[3];
  if (SlowCase < v7[4])
    goto LABEL_2;
  SlowCase = v7[5];
  if ((SlowCase & 1) == 0)
  {
    v14 = *(_QWORD *)(SlowCase + 8) ^ v7[6];
    v7[4] = SlowCase + HIDWORD(v14);
    v7[5] = SlowCase + (int)v14;
LABEL_2:
    v7[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v4);
  *(_QWORD *)(SlowCase + 24) = v3;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(a1 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner = (uint64_t)&off_1E32CD620;
  }
  v16 = v3;
  if ((SlowCase & 8) != 0)
    v10 = (SlowCase - 112) | 1;
  else
    v10 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v10 & 1) != 0)
    v11 = v10 + 47;
  else
    v11 = *(_QWORD *)v10 + 32;
  Allocator = *(_QWORD **)(v11 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v11 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner;
  Allocator[2] = v9;
  v15 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v9 + 32), &v16, (uint64_t *)&v15);
  if (v15)
    v15[1] = 3;
  return SlowCase;
}

uint64_t WebCore::createWrapper<WebCore::PerformancePaintTiming,WebCore::PerformanceEntry>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v6 = (_DWORD *)v2;
  result = WebCore::createWrapper<WebCore::PerformancePaintTiming,WebCore::PerformancePaintTiming>(a1, (uint64_t *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (v4[2] == 1)
    {
      v5 = result;
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      return v5;
    }
    else
    {
      --v4[2];
    }
  }
  return result;
}

unint64_t WebCore::createWrapper<WebCore::PerformanceEntry,WebCore::PerformanceEntry>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSPerformanceEntry *v15;
  JSC::JSCell *Prototype;
  uint64_t v17;
  WebCore::JSPerformanceEntry *v18;
  _QWORD *v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *Allocator;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSPerformanceEntry::s_info + ~((_QWORD)&WebCore::JSPerformanceEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSPerformanceEntry::s_info + ~((_QWORD)&WebCore::JSPerformanceEntry::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSPerformanceEntry::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSPerformanceEntry::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSPerformanceEntry *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSPerformanceEntry::createPrototype(v15, (JSC::JSCell **)a1, a3);
  LODWORD(v29) = 23;
  v17 = JSC::Structure::create((uint64_t *)v15, (int)a1, Prototype);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v17, (uint64_t)&WebCore::JSPerformanceEntry::s_info);
LABEL_8:
  v18 = (WebCore::JSPerformanceEntry *)*((_QWORD *)a1 + 7);
  v19 = (_QWORD *)WebCore::JSPerformanceEntry::subspaceForImpl(v18, a2);
  SlowCase = v19[3];
  if (SlowCase < v19[4])
  {
LABEL_9:
    v19[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v19[5];
  if ((SlowCase & 1) == 0)
  {
    v27 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v27);
    v19[5] = SlowCase + (int)v27;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  v21 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v21;
  if (*((_BYTE *)v18 + 755))
    __dmb(0xAu);
  v22 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner = (uint64_t)&off_1E32CD620;
  }
  v29 = v5;
  if ((SlowCase & 8) != 0)
    v23 = (SlowCase - 112) | 1;
  else
    v23 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v23 & 1) != 0)
    v24 = v23 + 47;
  else
    v24 = *(_QWORD *)v23 + 32;
  Allocator = *(_QWORD **)(v24 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v24 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner;
  Allocator[2] = v22;
  v28 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v22 + 32), &v29, (uint64_t *)&v28);
  if (v28)
    v28[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::PerformanceEntry>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  int v15;
  JSC::VM *v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  unint64_t v25;
  WebCore::JSPerformanceMeasure *v26;
  JSC::JSCell *Prototype;
  uint64_t v28;
  WebCore::JSPerformanceMeasure *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *Allocator;
  int v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v39 = (_DWORD *)a3;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (v15 == 4)
  {
    v39 = 0;
    v18 = *((_QWORD *)a2 + 412);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = ((unint64_t)&WebCore::JSPerformanceMeasure::s_info
           + ~((_QWORD)&WebCore::JSPerformanceMeasure::s_info << 32)) ^ (((unint64_t)&WebCore::JSPerformanceMeasure::s_info
                                                                        + ~((_QWORD)&WebCore::JSPerformanceMeasure::s_info << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(char ***)(v18 + 16 * v23);
      if (v24 == &WebCore::JSPerformanceMeasure::s_info)
      {
LABEL_12:
        v25 = *(_QWORD *)(v18 + 16 * v23 + 8);
        if (v25)
          goto LABEL_14;
      }
      else
      {
        v36 = 1;
        while (v24)
        {
          v23 = ((_DWORD)v23 + v36) & v19;
          v24 = *(char ***)(v18 + 16 * v23);
          ++v36;
          if (v24 == &WebCore::JSPerformanceMeasure::s_info)
            goto LABEL_12;
        }
      }
    }
    v26 = (WebCore::JSPerformanceMeasure *)*((_QWORD *)a2 + 7);
    Prototype = (JSC::JSCell *)WebCore::JSPerformanceMeasure::createPrototype(v26, a2, v17);
    LODWORD(v41) = 23;
    v28 = JSC::Structure::create((uint64_t *)v26, (int)a2, Prototype);
    v25 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSPerformanceMeasure::s_info);
LABEL_14:
    v29 = (WebCore::JSPerformanceMeasure *)*((_QWORD *)a2 + 7);
    v30 = (_QWORD *)WebCore::JSPerformanceMeasure::subspaceForImpl(v29, v16);
    SlowCase = v30[3];
    if (SlowCase >= v30[4])
    {
      SlowCase = v30[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_16;
      }
      v38 = *(_QWORD *)(SlowCase + 8) ^ v30[6];
      v30[4] = SlowCase + HIDWORD(v38);
      v30[5] = SlowCase + (int)v38;
    }
    v30[3] = SlowCase + 48;
LABEL_16:
    *(_DWORD *)SlowCase = 0;
    WebCore::JSDOMObject::JSDOMObject(SlowCase, v25);
    *(_QWORD *)(SlowCase + 24) = a3;
    *(_QWORD *)(SlowCase + 32) = 0;
    if (*((_BYTE *)v29 + 755))
      __dmb(0xAu);
    v31 = *((_QWORD *)a2 + 415);
    {
      WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner = (uint64_t)&off_1E32CD620;
    }
    v41 = a3;
    if ((SlowCase & 8) != 0)
      v32 = (SlowCase - 112) | 1;
    else
      v32 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v32 & 1) != 0)
      v33 = v32 + 47;
    else
      v33 = *(_QWORD *)v32 + 32;
    Allocator = *(_QWORD **)(v33 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v33 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner;
    Allocator[2] = v31;
    v40 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v31 + 32), &v41, (uint64_t *)&v40);
    if (v40)
      v40[1] = 3;
    goto LABEL_29;
  }
  if (v15 > 7)
  {
    if (v15 == 16)
    {
      v37 = WebCore::createWrapper<WebCore::PerformancePaintTiming,WebCore::PerformanceEntry>((uint64_t)a2, (uint64_t *)&v39);
      goto LABEL_44;
    }
    if (v15 == 8)
    {
      v37 = WebCore::createWrapper<WebCore::PerformanceResourceTiming,WebCore::PerformanceEntry>((uint64_t)a2, (uint64_t *)&v39);
      goto LABEL_44;
    }
LABEL_51:
    v37 = WebCore::createWrapper<WebCore::PerformanceEntry,WebCore::PerformanceEntry>(a2, (JSC::VM *)&v39, v17);
    goto LABEL_44;
  }
  if (v15 != 1)
  {
    if (v15 == 2)
    {
      v37 = WebCore::createWrapper<WebCore::PerformanceMark,WebCore::PerformanceEntry>(a2, (uint64_t *)&v39, v17);
      goto LABEL_44;
    }
    goto LABEL_51;
  }
  v37 = WebCore::createWrapper<WebCore::PerformanceNavigationTiming,WebCore::PerformanceEntry>((uint64_t)a2, (uint64_t *)&v39);
LABEL_44:
  SlowCase = v37;
LABEL_29:
  if (v39)
  {
    if (v39[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
    else
      --v39[2];
  }
  return SlowCase;
}

uint64_t WebCore::JSPerformanceObserverOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  if (a5)
  {
    *a5 = "Registered PerformanceObserver callback";
    a5[1] = 40;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 41);
}

uint64_t WebCore::pluginScriptObject(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSHTMLElement *a3)
{
  WebCore::HTMLPlugInElement *v4;
  JSC::Bindings::Instance *v5;
  uint64_t v6;

  v4 = (WebCore::HTMLPlugInElement *)*((_QWORD *)a2 + 3);
  if (!(*(unsigned int (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)v4 + 200))(v4))
    return 0;
  if (WebCore::DOMTimerFireState::current)
    *(_BYTE *)(WebCore::DOMTimerFireState::current + 10) = 1;
  v5 = (JSC::Bindings::Instance *)WebCore::HTMLPlugInElement::bindingsInstance(v4);
  if (v5 && (v6 = *((_QWORD *)v5 + 2)) != 0 && *(_BYTE *)(v6 + 12))
    return JSC::Bindings::Instance::createRuntimeObject(v5, this);
  else
    return 0;
}

uint64_t WebCore::pluginElementPropertyGetter(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::HTMLPlugInElement *v11;
  JSC::Bindings::Instance *v12;
  uint64_t v13;
  JSC::Structure *RuntimeObject;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSHTMLElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSHTMLElement::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwTypeError();
  v11 = *(WebCore::HTMLPlugInElement **)(a2 + 24);
  if (!(*(unsigned int (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)v11 + 200))(v11))
    return 10;
  if (WebCore::DOMTimerFireState::current)
    *(_BYTE *)(WebCore::DOMTimerFireState::current + 10) = 1;
  v12 = (JSC::Bindings::Instance *)WebCore::HTMLPlugInElement::bindingsInstance(v11);
  if (v12
    && (v13 = *((_QWORD *)v12 + 2)) != 0
    && *(_BYTE *)(v13 + 12)
    && (RuntimeObject = (JSC::Structure *)JSC::Bindings::Instance::createRuntimeObject(v12, a1)) != 0)
  {
    return JSC::JSObject::get(RuntimeObject, a1, a3);
  }
  else
  {
    return 10;
  }
}

BOOL WebCore::pluginElementCustomGetOwnPropertySlot(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  WebCore::HTMLPlugInElement *v11;
  JSC::Bindings::Instance *v12;
  uint64_t v13;
  char v14;
  int v15;

  v4 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a4 + 52) = 1;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 41952) + 2768) != a3)
  {
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 3320) + 48))
      goto LABEL_8;
    v8 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
    if (!v8)
      v8 = *(_QWORD *)(a1 + 16);
    if ((v8 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v8 + 5) < 0x17u
      || (JSC::JSObject::hasProperty() & 1) == 0)
    {
LABEL_8:
      v9 = *(unsigned __int8 *)(a4 + 50);
      v10 = v9 != 3;
      if (v9 == 3)
      {
        v15 = 0;
        *(_QWORD *)a4 = 10;
        v14 = 1;
        goto LABEL_20;
      }
      v11 = *(WebCore::HTMLPlugInElement **)(a1 + 24);
      if ((*(unsigned int (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)v11 + 200))(v11))
      {
        if (WebCore::DOMTimerFireState::current)
          *(_BYTE *)(WebCore::DOMTimerFireState::current + 10) = 1;
        v12 = (JSC::Bindings::Instance *)WebCore::HTMLPlugInElement::bindingsInstance(v11);
        if (v12)
        {
          v13 = *((_QWORD *)v12 + 2);
          if (v13)
          {
            if (*(_BYTE *)(v13 + 12)
              && JSC::Bindings::Instance::createRuntimeObject(v12, a2)
              && JSC::JSObject::hasProperty())
            {
              *(_QWORD *)a4 = WebCore::pluginElementPropertyGetter;
              *(_QWORD *)(a4 + 8) = 0;
              v14 = 3;
              v15 = 12;
LABEL_20:
              *(_DWORD *)(a4 + 16) = v15;
              *(_QWORD *)(a4 + 32) = a1;
              *(_BYTE *)(a4 + 49) = v14;
              return v10;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::callPlugin(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::HTMLPlugInElement *v5;
  JSValue v6;
  JSC::Bindings::Instance *v7;
  uint64_t v8;
  JSC::JSFunction *RuntimeObject;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  uint64_t v20[3];
  BOOL v21;
  uint64_t v22;
  WTF *v23;
  _OWORD v24[4];
  uint64_t v25;

  v5 = *(WebCore::HTMLPlugInElement **)(*((_QWORD *)a2 + 3) + 24);
  if (!(*(unsigned int (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)v5 + 200))(v5))
    goto LABEL_8;
  if (WebCore::DOMTimerFireState::current)
    *(_BYTE *)(WebCore::DOMTimerFireState::current + 10) = 1;
  v7 = (JSC::Bindings::Instance *)WebCore::HTMLPlugInElement::bindingsInstance(v5);
  if (v7 && (v8 = *((_QWORD *)v7 + 2)) != 0 && *(_BYTE *)(v8 + 12))
    RuntimeObject = (JSC::JSFunction *)JSC::Bindings::Instance::createRuntimeObject(v7, this);
  else
LABEL_8:
    RuntimeObject = 0;
  v10 = *((int *)a2 + 8) - 1;
  v21 = 0;
  v22 = 0x800000000;
  v23 = (WTF *)((char *)v24 + 8);
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  if (v10 >= 9)
    v21 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v22) == 1;
  if (v10)
  {
    v11 = 0;
    v12 = 0x600000000;
    do
    {
      if (*((int *)a2 + 8) - 1 <= v11)
        v6.super.isa = (Class)10;
      else
        v6.super.isa = *(Class *)((char *)a2 + (v12 >> 29));
      v13 = v22;
      if ((_DWORD)v22 != HIDWORD(v22) && (v23 != (WTF *)((char *)v24 + 8) ? (v14 = v23 == 0) : (v14 = 1), v14))
      {
        *((JSValue *)v23 + v22) = v6;
        LODWORD(v22) = v13 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v22, v6) == 1)
      {
        v21 = 1;
      }
      ++v11;
      v12 += 0x100000000;
    }
    while (v10 != v11);
  }
  if (*((_BYTE *)RuntimeObject + 5) == 26)
    JSC::JSFunction::getCallData(RuntimeObject, (JSCell *)v6.super.isa);
  else
    (*(void (**)(uint64_t *__return_ptr, JSC::JSFunction *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)RuntimeObject & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(v20, RuntimeObject);
  v16 = JSC::call();
  v17 = *(uint64_t **)&v24[0];
  if (*(_QWORD *)&v24[0])
  {
    v20[0] = (uint64_t)&v22;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v24[0], v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v23 != (WTF *)((char *)v24 + 8) && v23)
    WTF::fastFree(v23, v15);
  return v16;
}

uint64_t WebCore::JSPopStateEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  return WebCore::JSValueInWrappedObject::visit<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24) + 72, a2);
}

uint64_t WebCore::JSPopStateEvent::state(JSCell *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  void *v22;
  WebCore::JSHistory *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t result;
  unsigned int *v27;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) < 0x17u)
      return v4;
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(*((JSC::JSCell **)this + 4)) & 0xFFFFFFFE)
                               + 0x28)
                   + 3320) == *((_QWORD *)a2 + 415))
      return *((_QWORD *)this + 4);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v4 = v5[9];
  if (v4 || (v6 = v5[10]) != 0 && (v4 = *(_QWORD *)v6) != 0 && (*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    if ((v4 & 0xFFFE000000000002) == 0
      && *(unsigned __int8 *)(v4 + 5) >= 0x17u
      && *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject((JSC::JSCell *)v4) & 0xFFFFFFFE) + 0x28)
                   + 3320) != *((_QWORD *)a2 + 415))
    {
      WebCore::PopStateEvent::trySerializeState(v5, a2, &v27);
      v17 = v27;
      if (v27)
      {
        v4 = (uint64_t)WebCore::SerializedScriptValue::deserialize((uint64_t)v27, a2, *(_DWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), 1, 0);
        v27 = 0;
        do
        {
          v19 = __ldaxr(v17);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v17));
        if (!v20)
        {
          atomic_store(1u, v17);
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v17 + 2), v18);
          WTF::fastFree((WTF *)v17, v21);
        }
      }
      else
      {
        v4 = 2;
      }
    }
    goto LABEL_36;
  }
  v7 = v5[13];
  if (!v7 || (v8 = v5[11]) == 0)
  {
    v4 = 2;
    *((_QWORD *)this + 4) = 2;
    return v4;
  }
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9)
    goto LABEL_30;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_30;
  v11 = *(_QWORD *)(v10 + 72);
  if (!v11)
    goto LABEL_30;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    goto LABEL_30;
  if (!*(_BYTE *)(v12 + 178))
  {
    v13 = *(_QWORD *)(v12 + 240);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 184) + 16);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 168);
LABEL_31:
          if (v16 == v8)
          {
            v23 = (WebCore::JSHistory *)WebCore::wrap<WebCore::History>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v7);
            v22 = (void *)WebCore::JSHistory::state(v23, a2);
          }
          else
          {
            v22 = WebCore::SerializedScriptValue::deserialize(v8, a2, *(_DWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), 1, 0);
          }
          v4 = (uint64_t)v22;
LABEL_36:
          v24 = *((_QWORD *)a2 + 7);
          *((_QWORD *)this + 4) = v4;
          if (v4)
            v25 = (v4 & 0xFFFE000000000002) == 0;
          else
            v25 = 0;
          if (v25 && *(_DWORD *)(v24 + 760) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v24 + 192), this);
          return v4;
        }
      }
    }
LABEL_30:
    v16 = 0;
    goto LABEL_31;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSPromiseRejectionEvent::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  return WebCore::JSValueInWrappedObject::visit<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24) + 80, a2);
}

uint64_t WebCore::JSRTCRtpSFrameTransform::setEncryptionKey(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  JSValue v24;
  const WTF::String *v25;
  uint64_t v26;
  uint64_t v27;
  const WTF::String *v28;
  WTF::StringImpl *v29;
  uint64_t RangeError;
  WTF::StringImpl *v31;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  double v35;
  double v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  char v41;
  char hasExceptionsAfterHandlingTraps;
  char v43;
  double v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = *(int *)(a3 + 32);
  if ((_DWORD)v10 == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(a2, a2);
    JSC::VM::throwException(v9, a2, v24);
    return 10;
  }
  v11 = *(_QWORD *)(a3 + 48);
  v46 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v14 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v15 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v16 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v17 = v16 == &WebCore::JSCryptoKey::s_info;
  else
    v17 = 1;
  if (!v17)
  {
    do
    {
      v16 = (char **)v16[2];
      v15 = v16 != 0;
    }
    while (v16 != &WebCore::JSCryptoKey::s_info && v16 != 0);
  }
  if (!v15 || (v20 = *(_QWORD *)(v11 + 24)) == 0)
  {
LABEL_13:
    WebCore::throwArgumentTypeError((uint64_t)a2, (uint64_t)&v46, 0, "key", 4, "SFrameTransform", 16, a8, "setEncryptionKey", 17, "CryptoKey", 10);
    return 10;
  }
  if ((unint64_t)(v10 - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = 0;
    v23 = 0;
    goto LABEL_42;
  }
  v21 = *(_QWORD *)(a3 + 56);
  if (v21 == 10)
  {
    v22 = 0;
    v23 = 0;
LABEL_42:
    if (!*((_DWORD *)v9 + 20)
      || (v40 = v9,
          v41 = v23,
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v40),
          v23 = v41,
          (hasExceptionsAfterHandlingTraps & 1) == 0))
    {
      v37 = *(_QWORD *)(a1 + 24) - 32;
      v38 = *a4;
      *a4 = 0;
      v46 = v38;
      WebCore::RTCRtpSFrameTransform::setEncryptionKey(v37, v20, v22, v23, (WTF::StringImpl *)&v46);
      v39 = v46;
      v46 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39);
        else
          --*((_DWORD *)v39 + 4);
      }
    }
    return 10;
  }
  if ((v21 & 0xFFFE000000000002) != 0)
  {
    v46 = *(WTF::StringImpl **)(a3 + 56);
    if (v21 >= 0xFFFE000000000000 && (v21 & 0x80000000) == 0)
    {
      v22 = v21;
      goto LABEL_41;
    }
    if (v21 >= 0xFFFE000000000000)
    {
      v35 = (double)(int)v21;
    }
    else
    {
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_33;
      *(_QWORD *)&v35 = v21 - 0x2000000000000;
    }
LABEL_34:
    if (*((_DWORD *)v9 + 20))
    {
      v44 = v35;
      v43 = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
      v35 = v44;
      if ((v43 & 1) != 0)
        return 10;
    }
    if (fabs(v35) == INFINITY)
    {
      v22 = 0;
    }
    else
    {
      v36 = fmod(trunc(v35), 1.84467441e19);
      if (v36 >= 0.0)
        v22 = (unint64_t)v36;
      else
        v22 = -(uint64_t)(unint64_t)-v36;
    }
    goto LABEL_41;
  }
  if (*(_BYTE *)(v21 + 5) != 3)
  {
    v46 = *(WTF::StringImpl **)(a3 + 56);
LABEL_33:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, a2);
    goto LABEL_34;
  }
  if (*(_DWORD *)(v21 + 8) < 2u)
  {
    v22 = JSC::JSBigInt::toBigUInt64Heap(*(JSC::JSBigInt **)(a3 + 56), a2);
LABEL_41:
    v23 = 1;
    goto LABEL_42;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = *((_QWORD *)a2 + 7);
  v27 = *(_QWORD *)(v26 + 16);
  if (v27 && *(_QWORD *)(v26 + 24) == v27)
  {
    RangeError = 10;
  }
  else if (v45 && *((_DWORD *)v45 + 1))
  {
    RangeError = JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v45, v25);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    RangeError = JSC::createRangeError(a2, (JSC::JSGlobalObject *)&v46, v28);
    v31 = v46;
    v46 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v29);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  v32.super.isa = (Class)RangeError;
  JSC::VM::throwException(v9, a2, v32);
  v34 = v45;
  v45 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  return 10;
}

uint64_t WebCore::JSRange::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  return WebCore::Range::visitNodesConcurrently(*(WebCore::Range **)(a1 + 24), a2);
}

uint64_t WebCore::JSReadableStreamSource::start(JSCell *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  WTF *v18;
  _DWORD *v19;
  _QWORD *v21;

  v5 = *(_QWORD *)(a3 + 48);
  if ((v5 & 0xFFFE000000000002) != 0)
  {
    v12 = 0;
    *((_QWORD *)a1 + 4) = 0;
  }
  else
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSReadableStreamDefaultController::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSReadableStreamDefaultController::s_info && v8 != 0);
    }
    v11 = *(_QWORD *)(a2 + 56);
    if (v7)
      v12 = *(_QWORD *)(a3 + 48);
    else
      v12 = 0;
    *((_QWORD *)a1 + 4) = v12;
    if (v12)
      v13 = (v12 & 0xFFFE000000000002) == 0;
    else
      v13 = 0;
    if (v13)
    {
      v12 = v5;
      if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)a1 + 7))
      {
        v21 = a4;
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), a1);
        a4 = v21;
        v12 = v5;
      }
    }
  }
  v14 = *((_QWORD *)a1 + 3);
  v15 = *a4;
  *a4 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v16 = v15;
  v18 = *(WTF **)(v14 + 8);
  *(_QWORD *)(v14 + 8) = v16;
  if (v18)
  {
    v19 = *(_DWORD **)v18;
    *(_QWORD *)v18 = 0;
    if (v19)
    {
      if (v19[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[4];
    }
    WTF::fastFree(v18, v17);
  }
  if (!*(_BYTE *)(v14 + 24))
    *(_BYTE *)(v14 + 24) = 1;
  *(_QWORD *)(v14 + 16) = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  return 10;
}

unint64_t WebCore::wrap<WebCore::ReportBody>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  JSC::VM *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  unint64_t v25;
  WebCore::JSReportBody *v26;
  JSC::JSCell *v27;
  unint64_t v28;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  WebCore::JSCSPViolationReportBody *v32;
  _QWORD *v33;
  JSC::VM *v34;
  WebCore::JSDOMGlobalObject *v35;
  JSC::VM *v36;
  WebCore::JSDOMGlobalObject *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  int v45;
  unint64_t v46;
  WebCore::JSReportBody *v47;
  JSC::JSCell *v48;
  unint64_t Structure;
  JSC::Structure *v50;
  JSC::JSCell *v51;
  uint64_t v52;
  WebCore::JSCORPViolationReportBody *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char **v61;
  int v62;
  unint64_t v63;
  WebCore::JSReportBody *v64;
  JSC::JSCell *v65;
  unint64_t v66;
  JSC::Structure *v67;
  JSC::JSCell *v68;
  uint64_t v69;
  WebCore::JSCOEPInheritenceViolationReportBody *v70;
  _QWORD *v71;
  JSC::VM *v72;
  WebCore::JSDOMGlobalObject *v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char **v80;
  int v81;
  unint64_t v82;
  WebCore::JSReportBody *v83;
  JSC::JSCell *v84;
  unint64_t v85;
  JSC::Structure *v86;
  JSC::JSCell *v87;
  uint64_t v88;
  WebCore::JSDeprecationReportBody *v89;
  _QWORD *v90;
  int v91;
  JSC::VM *v92;
  WebCore::JSDOMGlobalObject *v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char **v100;
  int v101;
  unint64_t v102;
  WebCore::JSReportBody *v103;
  JSC::JSCell *v104;
  unint64_t v105;
  JSC::Structure *v106;
  JSC::JSCell *v107;
  uint64_t v108;
  WebCore::JSTestReportBody *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *Allocator;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char **v122;
  int v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  JSC::Structure *v127;
  JSC::JSCell *v128;
  uint64_t v129;
  WebCore::JSReportBody *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) != 2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) == 1)
      {
        v38 = *(_QWORD *)(a2 + 3296);
        if (v38)
        {
          v39 = *(_DWORD *)(v38 - 8);
          v40 = ((unint64_t)&WebCore::JSCORPViolationReportBody::s_info
               + ~((_QWORD)&WebCore::JSCORPViolationReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSCORPViolationReportBody::s_info
                                                                                 + ~((_QWORD)&WebCore::JSCORPViolationReportBody::s_info << 32)) >> 22);
          v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
          v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
          v43 = v39 & ((v42 >> 31) ^ v42);
          v44 = *(char ***)(v38 + 16 * v43);
          if (v44 == &WebCore::JSCORPViolationReportBody::s_info)
          {
LABEL_28:
            v46 = *(_QWORD *)(v38 + 16 * v43 + 8);
            if (v46)
              goto LABEL_30;
          }
          else
          {
            v45 = 1;
            while (v44)
            {
              v43 = ((_DWORD)v43 + v45) & v39;
              v44 = *(char ***)(v38 + 16 * v43);
              ++v45;
              if (v44 == &WebCore::JSCORPViolationReportBody::s_info)
                goto LABEL_28;
            }
          }
        }
        v47 = *(WebCore::JSReportBody **)(a2 + 56);
        v48 = (JSC::JSCell *)WebCore::JSReportBody::prototype(v47, (JSC::VM *)a2, v37);
        Structure = WebCore::JSCORPViolationReportBodyPrototype::createStructure((uint64_t *)v47, a2, v48);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v51 = (JSC::JSCell *)WebCore::JSCORPViolationReportBodyPrototype::create(v47, (JSC::VM *)a2, Structure, v50);
        LODWORD(v141) = 23;
        v52 = JSC::Structure::create((uint64_t *)v47, a2, v51);
        v46 = WebCore::cacheDOMStructure((JSCell *)a2, v52, (uint64_t)&WebCore::JSCORPViolationReportBody::s_info);
LABEL_30:
        v53 = *(WebCore::JSCORPViolationReportBody **)(a2 + 56);
        v54 = (_QWORD *)WebCore::JSCORPViolationReportBody::subspaceForImpl(v53, v36);
        SlowCase = v54[3];
        if (SlowCase >= v54[4])
        {
          SlowCase = v54[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_32:
            *(_DWORD *)SlowCase = 0;
            WebCore::JSDOMObject::JSDOMObject(SlowCase, v46);
            *(_QWORD *)(SlowCase + 24) = a3;
            if (*((_BYTE *)v53 + 755))
              goto LABEL_68;
            goto LABEL_69;
          }
          v136 = *(_QWORD *)(SlowCase + 8) ^ v54[6];
          v54[4] = SlowCase + HIDWORD(v136);
          v54[5] = SlowCase + (int)v136;
        }
        v54[3] = SlowCase + 32;
        goto LABEL_32;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) == 4)
      {
        v74 = *(_QWORD *)(a2 + 3296);
        if (v74)
        {
          v75 = *(_DWORD *)(v74 - 8);
          v76 = ((unint64_t)&WebCore::JSDeprecationReportBody::s_info
               + ~((_QWORD)&WebCore::JSDeprecationReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSDeprecationReportBody::s_info
                                                                               + ~((_QWORD)&WebCore::JSDeprecationReportBody::s_info << 32)) >> 22);
          v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
          v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
          v79 = v75 & ((v78 >> 31) ^ v78);
          v80 = *(char ***)(v74 + 16 * v79);
          if (v80 == &WebCore::JSDeprecationReportBody::s_info)
          {
LABEL_51:
            v82 = *(_QWORD *)(v74 + 16 * v79 + 8);
            if (v82)
              goto LABEL_53;
          }
          else
          {
            v81 = 1;
            while (v80)
            {
              v79 = ((_DWORD)v79 + v81) & v75;
              v80 = *(char ***)(v74 + 16 * v79);
              ++v81;
              if (v80 == &WebCore::JSDeprecationReportBody::s_info)
                goto LABEL_51;
            }
          }
        }
        v83 = *(WebCore::JSReportBody **)(a2 + 56);
        v84 = (JSC::JSCell *)WebCore::JSReportBody::prototype(v83, (JSC::VM *)a2, v73);
        v85 = WebCore::JSDeprecationReportBodyPrototype::createStructure((uint64_t *)v83, a2, v84);
        *(_DWORD *)(v85 + 16) |= 0x80000u;
        v87 = (JSC::JSCell *)WebCore::JSDeprecationReportBodyPrototype::create(v83, (JSC::VM *)a2, v85, v86);
        LODWORD(v141) = 23;
        v88 = JSC::Structure::create((uint64_t *)v83, a2, v87);
        v82 = WebCore::cacheDOMStructure((JSCell *)a2, v88, (uint64_t)&WebCore::JSDeprecationReportBody::s_info);
LABEL_53:
        v89 = *(WebCore::JSDeprecationReportBody **)(a2 + 56);
        v90 = (_QWORD *)WebCore::JSDeprecationReportBody::subspaceForImpl(v89, v72);
        SlowCase = v90[3];
        if (SlowCase >= v90[4])
        {
          SlowCase = v90[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
          }
          else
          {
            v137 = *(_QWORD *)(SlowCase + 8) ^ v90[6];
            v90[4] = SlowCase + HIDWORD(v137);
            v90[5] = SlowCase + (int)v137;
            v90[3] = SlowCase + 32;
          }
        }
        else
        {
          v90[3] = SlowCase + 32;
        }
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v82);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (!*((_BYTE *)v89 + 755))
          goto LABEL_69;
        goto LABEL_68;
      }
      v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
      v94 = *(_QWORD *)(a2 + 3296);
      if (v91 == 6)
      {
        if (v94)
        {
          v95 = *(_DWORD *)(v94 - 8);
          v96 = ((unint64_t)&WebCore::JSTestReportBody::s_info
               + ~((_QWORD)&WebCore::JSTestReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSTestReportBody::s_info
                                                                        + ~((_QWORD)&WebCore::JSTestReportBody::s_info << 32)) >> 22);
          v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
          v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
          v99 = v95 & ((v98 >> 31) ^ v98);
          v100 = *(char ***)(v94 + 16 * v99);
          if (v100 == &WebCore::JSTestReportBody::s_info)
          {
LABEL_63:
            v102 = *(_QWORD *)(v94 + 16 * v99 + 8);
            if (v102)
              goto LABEL_65;
          }
          else
          {
            v101 = 1;
            while (v100)
            {
              v99 = ((_DWORD)v99 + v101) & v95;
              v100 = *(char ***)(v94 + 16 * v99);
              ++v101;
              if (v100 == &WebCore::JSTestReportBody::s_info)
                goto LABEL_63;
            }
          }
        }
        v103 = *(WebCore::JSReportBody **)(a2 + 56);
        v104 = (JSC::JSCell *)WebCore::JSReportBody::prototype(v103, (JSC::VM *)a2, v93);
        v105 = WebCore::JSTestReportBodyPrototype::createStructure((uint64_t *)v103, a2, v104);
        *(_DWORD *)(v105 + 16) |= 0x80000u;
        v107 = (JSC::JSCell *)WebCore::JSTestReportBodyPrototype::create(v103, (JSC::VM *)a2, v105, v106);
        LODWORD(v141) = 23;
        v108 = JSC::Structure::create((uint64_t *)v103, a2, v107);
        v102 = WebCore::cacheDOMStructure((JSCell *)a2, v108, (uint64_t)&WebCore::JSTestReportBody::s_info);
LABEL_65:
        v109 = *(WebCore::JSTestReportBody **)(a2 + 56);
        v110 = (_QWORD *)WebCore::JSTestReportBody::subspaceForImpl(v109, v92);
        SlowCase = v110[3];
        if (SlowCase >= v110[4])
        {
          SlowCase = v110[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
          }
          else
          {
            v138 = *(_QWORD *)(SlowCase + 8) ^ v110[6];
            v110[4] = SlowCase + HIDWORD(v138);
            v110[5] = SlowCase + (int)v138;
            v110[3] = SlowCase + 32;
          }
        }
        else
        {
          v110[3] = SlowCase + 32;
        }
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v102);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (!*((_BYTE *)v109 + 755))
          goto LABEL_69;
        goto LABEL_68;
      }
      if (v94)
      {
        v117 = *(_DWORD *)(v94 - 8);
        v118 = ((unint64_t)&WebCore::JSReportBody::s_info + ~((_QWORD)&WebCore::JSReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSReportBody::s_info + ~((_QWORD)&WebCore::JSReportBody::s_info << 32)) >> 22);
        v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
        v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
        v121 = v117 & ((v120 >> 31) ^ v120);
        v122 = *(char ***)(v94 + 16 * v121);
        if (v122 == &WebCore::JSReportBody::s_info)
        {
LABEL_87:
          v124 = *(_QWORD *)(v94 + 16 * v121 + 8);
          if (v124)
          {
LABEL_89:
            v130 = *(WebCore::JSReportBody **)(a2 + 56);
            v131 = (_QWORD *)WebCore::JSReportBody::subspaceForImpl(v130, v92);
            SlowCase = v131[3];
            if (SlowCase >= v131[4])
            {
              SlowCase = v131[5];
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                SlowCase = JSC::LocalAllocator::allocateSlowCase();
              }
              else
              {
                v139 = *(_QWORD *)(SlowCase + 8) ^ v131[6];
                v131[4] = SlowCase + HIDWORD(v139);
                v131[5] = SlowCase + (int)v139;
                v131[3] = SlowCase + 32;
              }
            }
            else
            {
              v131[3] = SlowCase + 32;
            }
            *(_DWORD *)SlowCase = 0;
            WebCore::JSDOMObject::JSDOMObject(SlowCase, v124);
            *(_QWORD *)(SlowCase + 24) = a3;
            if (*((_BYTE *)v130 + 755))
              __dmb(0xAu);
            v111 = *(_QWORD *)(a2 + 3320);
            if ((byte_1EE337B40 & 1) == 0)
            {
              qword_1EE337B38 = (uint64_t)&off_1E32DD380;
              byte_1EE337B40 = 1;
            }
            v112 = (uint64_t *)(v111 + 32);
            v141 = a3;
            if ((SlowCase & 8) != 0)
              v132 = (SlowCase - 112) | 1;
            else
              v132 = SlowCase & 0xFFFFFFFFFFFFC000;
            if ((v132 & 1) != 0)
              v133 = v132 + 47;
            else
              v133 = *(_QWORD *)v132 + 32;
            Allocator = *(_QWORD **)(v133 + 16);
            if (!Allocator)
              Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v133 + 16) = *Allocator;
            *Allocator = SlowCase;
            Allocator[1] = &qword_1EE337B38;
            goto LABEL_79;
          }
        }
        else
        {
          v123 = 1;
          while (v122)
          {
            v121 = ((_DWORD)v121 + v123) & v117;
            v122 = *(char ***)(v94 + 16 * v121);
            ++v123;
            if (v122 == &WebCore::JSReportBody::s_info)
              goto LABEL_87;
          }
        }
      }
      v125 = *(uint64_t **)(a2 + 56);
      v126 = WebCore::JSReportBodyPrototype::createStructure(v125, a2, *(JSC::JSCell **)(a2 + 656));
      *(_DWORD *)(v126 + 16) |= 0x80000u;
      v128 = (JSC::JSCell *)WebCore::JSReportBodyPrototype::create((WebCore::JSReportBodyPrototype *)v125, (JSC::VM *)a2, v126, v127);
      LODWORD(v141) = 23;
      v129 = JSC::Structure::create(v125, a2, v128);
      v124 = WebCore::cacheDOMStructure((JSCell *)a2, v129, (uint64_t)&WebCore::JSReportBody::s_info);
      goto LABEL_89;
    }
    v55 = *(_QWORD *)(a2 + 3296);
    if (v55)
    {
      v56 = *(_DWORD *)(v55 - 8);
      v57 = ((unint64_t)&WebCore::JSCOEPInheritenceViolationReportBody::s_info
           + ~((_QWORD)&WebCore::JSCOEPInheritenceViolationReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSCOEPInheritenceViolationReportBody::s_info
                                                                                        + ~((_QWORD)&WebCore::JSCOEPInheritenceViolationReportBody::s_info << 32)) >> 22);
      v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
      v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
      v60 = v56 & ((v59 >> 31) ^ v59);
      v61 = *(char ***)(v55 + 16 * v60);
      if (v61 == &WebCore::JSCOEPInheritenceViolationReportBody::s_info)
      {
LABEL_39:
        v63 = *(_QWORD *)(v55 + 16 * v60 + 8);
        if (v63)
          goto LABEL_41;
      }
      else
      {
        v62 = 1;
        while (v61)
        {
          v60 = ((_DWORD)v60 + v62) & v56;
          v61 = *(char ***)(v55 + 16 * v60);
          ++v62;
          if (v61 == &WebCore::JSCOEPInheritenceViolationReportBody::s_info)
            goto LABEL_39;
        }
      }
    }
    v64 = *(WebCore::JSReportBody **)(a2 + 56);
    v65 = (JSC::JSCell *)WebCore::JSReportBody::prototype(v64, (JSC::VM *)a2, v35);
    v66 = WebCore::JSCOEPInheritenceViolationReportBodyPrototype::createStructure((uint64_t *)v64, a2, v65);
    *(_DWORD *)(v66 + 16) |= 0x80000u;
    v68 = (JSC::JSCell *)WebCore::JSCOEPInheritenceViolationReportBodyPrototype::create(v64, (JSC::VM *)a2, v66, v67);
    LODWORD(v141) = 23;
    v69 = JSC::Structure::create((uint64_t *)v64, a2, v68);
    v63 = WebCore::cacheDOMStructure((JSCell *)a2, v69, (uint64_t)&WebCore::JSCOEPInheritenceViolationReportBody::s_info);
LABEL_41:
    v70 = *(WebCore::JSCOEPInheritenceViolationReportBody **)(a2 + 56);
    v71 = (_QWORD *)WebCore::JSCOEPInheritenceViolationReportBody::subspaceForImpl(v70, v34);
    SlowCase = v71[3];
    if (SlowCase >= v71[4])
    {
      SlowCase = v71[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_43:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v63);
        *(_QWORD *)(SlowCase + 24) = a3;
        if (*((_BYTE *)v70 + 755))
          goto LABEL_68;
        goto LABEL_69;
      }
      v135 = *(_QWORD *)(SlowCase + 8) ^ v71[6];
      v71[4] = SlowCase + HIDWORD(v135);
      v71[5] = SlowCase + (int)v135;
    }
    v71[3] = SlowCase + 32;
    goto LABEL_43;
  }
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSCSPViolationReportBody::s_info
         + ~((_QWORD)&WebCore::JSCSPViolationReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSPViolationReportBody::s_info
                                                                          + ~((_QWORD)&WebCore::JSCSPViolationReportBody::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSCSPViolationReportBody::s_info)
    {
LABEL_15:
      v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v25)
        goto LABEL_17;
    }
    else
    {
      v24 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v24) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v24;
        if (v23 == &WebCore::JSCSPViolationReportBody::s_info)
          goto LABEL_15;
      }
    }
  }
  v26 = *(WebCore::JSReportBody **)(a2 + 56);
  v27 = (JSC::JSCell *)WebCore::JSReportBody::prototype(v26, (JSC::VM *)a2, v16);
  v28 = WebCore::JSCSPViolationReportBodyPrototype::createStructure((uint64_t *)v26, a2, v27);
  *(_DWORD *)(v28 + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSCSPViolationReportBodyPrototype::create(v26, (JSC::VM *)a2, v28, v29);
  LODWORD(v141) = 23;
  v31 = JSC::Structure::create((uint64_t *)v26, a2, v30);
  v25 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSCSPViolationReportBody::s_info);
LABEL_17:
  v32 = *(WebCore::JSCSPViolationReportBody **)(a2 + 56);
  v33 = (_QWORD *)WebCore::JSCSPViolationReportBody::subspaceForImpl(v32, v15);
  SlowCase = v33[3];
  if (SlowCase < v33[4])
  {
LABEL_18:
    v33[3] = SlowCase + 32;
    goto LABEL_19;
  }
  SlowCase = v33[5];
  if ((SlowCase & 1) == 0)
  {
    v134 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v134);
    v33[5] = SlowCase + (int)v134;
    goto LABEL_18;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v25);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v32 + 755))
LABEL_68:
    __dmb(0xAu);
LABEL_69:
  v111 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337B40 & 1) == 0)
  {
    qword_1EE337B38 = (uint64_t)&off_1E32DD380;
    byte_1EE337B40 = 1;
  }
  v112 = (uint64_t *)(v111 + 32);
  v141 = a3;
  if ((SlowCase & 8) != 0)
    v113 = (SlowCase - 112) | 1;
  else
    v113 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v113 & 1) != 0)
    v114 = v113 + 47;
  else
    v114 = *(_QWORD *)v113 + 32;
  Allocator = *(_QWORD **)(v114 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v114 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337B38;
LABEL_79:
  Allocator[2] = v111;
  v140 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v112, &v141, (uint64_t *)&v140);
  if (v140)
    v140[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSResizeObserver::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  JSC::AbstractSlotVisitor *v9;
  char v10;
  char *v11;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v3 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSResizeObserverOwner::isReachableFromOpaqueRoots(v6, v7, v8, v9);
  }
  else
  {
    v11 = &v10;
    result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14ResizeObserver20callbackConcurrentlyEvE3__0JZNS9_20callbackConcurrentlyEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_22ResizeObserverCallbackENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSH_ISO_EENSJ_ISO_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERS9_EEEEEEEDcOT_DpOT0____fmatrix[v3])(&v11, v2 + 24);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  }
  return result;
}

BOOL WebCore::JSResizeObserverOwner::isReachableFromOpaqueRoots(int a1, uint64_t a2, int a3, JSC::AbstractSlotVisitor *a4, _QWORD *a5)
{
  _BOOL8 result;

  result = WebCore::ResizeObserver::isReachableFromOpaqueRoots(*(WebCore::ResizeObserver **)(*(_QWORD *)a2 + 24), a4);
  if (result && a5 != 0)
  {
    *a5 = "Reachable from observed nodes";
    a5[1] = 30;
  }
  return result;
}

uint64_t WebCore::JSResizeObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
  if (v4)
  {
    v26 = result;
    if ((*(_BYTE *)(v4 + 22) & 8) == 0)
    {
      while (1)
      {
        v15 = v4;
        if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
        {
          v17 = *(_QWORD *)(v4 + 200);
          if (!v17)
            goto LABEL_25;
          v16 = (uint64_t *)(v17 + 8);
        }
        else
        {
          v16 = (uint64_t *)(v4 + 32);
        }
        v4 = *v16;
        if (!*v16)
          goto LABEL_25;
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
LABEL_25:
    v3 = result;
    if (v15 && !*(_BYTE *)(a2 + 130))
    {
      result = *(_QWORD *)(a2 + 120);
      v18 = *(_QWORD *)(result + 48);
      v19 = *(_DWORD *)(v18 + 4);
      v20 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = v23;
      while (1)
      {
        v25 = *(_QWORD *)(v18 + 8 * v24 + 16);
        if (!v25)
          break;
        v6 = v15 == v25;
        v3 = v26;
        if (v6)
          goto LABEL_2;
        v24 = (v24 + 1) & v19;
        if (v24 == v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1956C9CF0);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      v3 = v26;
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v15);
        ++*(_QWORD *)(a2 + 72);
        v3 = v26;
      }
    }
  }
LABEL_2:
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (v5)
    v6 = *(_BYTE *)(a2 + 130) == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = *(_QWORD *)(a2 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v5 == v14)
        return result;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1956C9BC8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGPathSeg>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_DWORD **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_DWORD **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++a3[2];
  v14 = a3;
  v12 = WebCore::toJSNewlyCreated(a2, (uint64_t *)&v14);
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v14 + 8))();
    else
      --v14[2];
  }
  return v12;
}

uint64_t WebCore::JSSVGViewSpec::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 22) & 8) == 0)
      {
        while (1)
        {
          v4 = v3;
          if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
          {
            v6 = *(_QWORD *)(v3 + 200);
            if (!v6)
              goto LABEL_12;
            v5 = (uint64_t *)(v6 + 8);
          }
          else
          {
            v5 = (uint64_t *)(v3 + 32);
          }
          v3 = *v5;
          if (!v3)
            goto LABEL_12;
        }
      }
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
LABEL_12:
      if (v4 && !*(_BYTE *)(a2 + 130))
      {
        result = *(_QWORD *)(a2 + 120);
        v7 = *(_QWORD *)(result + 48);
        v8 = *(_DWORD *)(v7 + 4);
        v9 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        v13 = v12;
        while (1)
        {
          v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
          if (!v14)
            break;
          if (v4 == v14)
            return result;
          v13 = (v13 + 1) & v8;
          if (v13 == v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1956CBFC0);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::ServiceWorkerClient>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  WebCore::JSServiceWorkerClient *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  int v42;
  unint64_t v43;
  WebCore::JSServiceWorkerWindowClient *v44;
  JSC::JSCell *Prototype;
  uint64_t v46;
  WebCore::JSServiceWorkerWindowClient *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 16);
  v15 = *((_QWORD *)a2 + 412);
  if (!*(_BYTE *)(a3 + 64))
  {
    if (v15)
    {
      v36 = *(_DWORD *)(v15 - 8);
      v37 = ((unint64_t)&WebCore::JSServiceWorkerWindowClient::s_info
           + ~((_QWORD)&WebCore::JSServiceWorkerWindowClient::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerWindowClient::s_info
                                                                               + ~((_QWORD)&WebCore::JSServiceWorkerWindowClient::s_info << 32)) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = *(char ***)(v15 + 16 * v40);
      if (v41 == &WebCore::JSServiceWorkerWindowClient::s_info)
      {
LABEL_36:
        v43 = *(_QWORD *)(v15 + 16 * v40 + 8);
        if (v43)
          goto LABEL_38;
      }
      else
      {
        v42 = 1;
        while (v41)
        {
          v40 = ((_DWORD)v40 + v42) & v36;
          v41 = *(char ***)(v15 + 16 * v40);
          ++v42;
          if (v41 == &WebCore::JSServiceWorkerWindowClient::s_info)
            goto LABEL_36;
        }
      }
    }
    v44 = (WebCore::JSServiceWorkerWindowClient *)*((_QWORD *)a2 + 7);
    Prototype = (JSC::JSCell *)WebCore::JSServiceWorkerWindowClient::createPrototype(v44, a2, (WebCore::JSDOMGlobalObject *)a3);
    LODWORD(v55) = 23;
    v46 = JSC::Structure::create((uint64_t *)v44, (int)a2, Prototype);
    v43 = WebCore::cacheDOMStructure((JSCell *)a2, v46, (uint64_t)&WebCore::JSServiceWorkerWindowClient::s_info);
LABEL_38:
    v47 = (WebCore::JSServiceWorkerWindowClient *)*((_QWORD *)a2 + 7);
    v48 = (_QWORD *)WebCore::JSServiceWorkerWindowClient::subspaceForImpl(v47, a2);
    SlowCase = v48[3];
    if (SlowCase >= v48[4])
    {
      SlowCase = v48[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_40;
      }
      v53 = *(_QWORD *)(SlowCase + 8) ^ v48[6];
      v48[4] = SlowCase + HIDWORD(v53);
      v48[5] = SlowCase + (int)v53;
    }
    v48[3] = SlowCase + 32;
LABEL_40:
    *(_DWORD *)SlowCase = 0;
    WebCore::JSDOMObject::JSDOMObject(SlowCase, v43);
    *(_QWORD *)(SlowCase + 24) = a3;
    if (*((_BYTE *)v47 + 755))
      __dmb(0xAu);
    v31 = *((_QWORD *)a2 + 415);
    if ((byte_1EE337B60 & 1) == 0)
    {
      qword_1EE337B58 = (uint64_t)&unk_1E330CA80;
      byte_1EE337B60 = 1;
    }
    v32 = (uint64_t *)(v31 + 32);
    v55 = a3;
    if ((SlowCase & 8) != 0)
      v49 = (SlowCase - 112) | 1;
    else
      v49 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v49 & 1) != 0)
      v50 = v49 + 47;
    else
      v50 = *(_QWORD *)v49 + 32;
    Allocator = *(_QWORD **)(v50 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v50 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE337B58;
    goto LABEL_52;
  }
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSServiceWorkerClient::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerClient::s_info
                                                                       + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSServiceWorkerClient::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSServiceWorkerClient::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = (uint64_t *)*((_QWORD *)a2 + 7);
  Structure = WebCore::JSServiceWorkerClientPrototype::createStructure(v24, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSServiceWorkerClientPrototype::create((WebCore::JSServiceWorkerClientPrototype *)v24, a2, Structure, v26);
  LODWORD(v55) = 23;
  v28 = JSC::Structure::create(v24, (int)a2, v27);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSServiceWorkerClient::s_info);
LABEL_17:
  v29 = (WebCore::JSServiceWorkerClient *)*((_QWORD *)a2 + 7);
  v30 = (_QWORD *)WebCore::JSServiceWorkerClient::subspaceForImpl(v29, a2);
  SlowCase = v30[3];
  if (SlowCase >= v30[4])
  {
    SlowCase = v30[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_19;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v30[6];
    v30[4] = SlowCase + HIDWORD(v52);
    v30[5] = SlowCase + (int)v52;
  }
  v30[3] = SlowCase + 32;
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v29 + 755))
    __dmb(0xAu);
  v31 = *((_QWORD *)a2 + 415);
  if ((byte_1EE337B60 & 1) == 0)
  {
    qword_1EE337B58 = (uint64_t)&unk_1E330CA80;
    byte_1EE337B60 = 1;
  }
  v32 = (uint64_t *)(v31 + 32);
  v55 = a3;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337B58;
LABEL_52:
  Allocator[2] = v31;
  v54 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v32, &v55, (uint64_t *)&v54);
  if (v54)
    v54[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSServiceWorkerGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 3400) + 1824);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        goto LABEL_15;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956CC604);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 3400) + 1808);
  if (v14)
    v15 = *(_BYTE *)(a2 + 130) == 0;
  else
    v15 = 0;
  if (v15)
  {
    result = *(_QWORD *)(a2 + 120);
    v16 = *(_QWORD *)(result + 48);
    v17 = *(_DWORD *)(v16 + 4);
    v18 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = v21;
    while (1)
    {
      v23 = *(_QWORD *)(v16 + 8 * v22 + 16);
      if (!v23)
        break;
      if (v14 == v23)
        return result;
      v22 = (v22 + 1) & v17;
      if (v22 == v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1956CC6C8);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v14);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

void WebCore::JSShadowRealmGlobalScopeBase::destroy(WebCore::JSShadowRealmGlobalScopeBase *this, JSC::JSCell *a2)
{
  bmalloc::api *v3;
  WebCore::ScriptModuleLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (bmalloc::api *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (WebCore::ScriptModuleLoader *)*((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (v4)
      {
        WebCore::ScriptModuleLoader::~ScriptModuleLoader(v4, a2);
        WTF::fastFree(v5, v6);
      }
      v7 = *((_QWORD *)v3 + 3);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v3 + 3) = 0;
      }
      v8 = *((_QWORD *)v3 + 1);
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        *((_QWORD *)v3 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = WebCore::JSDOMGlobalObject::visitChildren(a1, a2);
  v5 = *(_QWORD *)(a1 + 3336);
  if (v5)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v6 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v7 = *(_QWORD *)(a1 + 3336);
        v8 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v7;
        v6 = v8;
      }
      if (((*(_QWORD *)(v6 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (!*(_QWORD *)(a2 + 168))
      return result;
    return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::visitChildren(WebCore::JSShadowRealmGlobalScopeBase *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSDOMGlobalObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 417));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::supportsRichSourceInfo(uint64_t a1)
{
  return (**(uint64_t (***)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::shouldInterruptScript(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280) + 8))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::javaScriptRuntimeFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280) + 16))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::queueMicrotaskToEventLoop(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280) + 24))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::shouldInterruptScriptBeforeTimeout(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280) + 32))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::scriptExecutionStatus(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280) + 104))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::reportViolationForUnsafeEval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 3400) + 8) + 3280) + 112))();
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::globalObjectMethodTable(void)::$_0::__invoke()
{
  return WTF::defaultLanguage();
}

void WebCore::JSShadowRealmGlobalScopeBase::codeForEval(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v1 += 2;
  *a1 = v1;
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::canCompileStrings(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v3;
  int v4;

  v3 = *a3;
  if (*a3)
  {
    v4 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      WTF::StringImpl::destroy(v3, a2);
  }
  return 1;
}

uint64_t WebCore::JSShadowRealmGlobalScopeBase::scriptExecutionContext(WebCore::JSShadowRealmGlobalScopeBase *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 425) + 8);
  if (!v1 || (*(_BYTE *)(v1 + 8) & 3) != 0)
    return WebCore::JSDOMGlobalObject::scriptExecutionContext(0);
  else
    return WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)v1);
}

unint64_t WebCore::createWrapper<WebCore::ManagedSourceBuffer,WebCore::SourceBuffer>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSSourceBuffer *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v23;
  int v24;

  v4 = *a2;
  *a2 = 0;
  v23 = (_DWORD *)v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSManagedSourceBuffer::s_info
        + ~((_QWORD)&WebCore::JSManagedSourceBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSManagedSourceBuffer::s_info
                                                                      + ~((_QWORD)&WebCore::JSManagedSourceBuffer::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSManagedSourceBuffer::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSManagedSourceBuffer::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSSourceBuffer *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSSourceBuffer::prototype(v14, a1, a3);
  Structure = WebCore::JSManagedSourceBufferPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSManagedSourceBufferPrototype::create(v14, a1, Structure, v17);
  v24 = 23;
  v19 = JSC::Structure::create((uint64_t *)v14, (int)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSManagedSourceBuffer::s_info);
LABEL_8:
  v20 = WebCore::JSManagedSourceBuffer::create(v13, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::ManagedSourceBuffer,WebCore::JSManagedSourceBuffer>(*((_QWORD *)a1 + 415), v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (v21[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[6];
  }
  return v20;
}

unint64_t WebCore::wrap<WebCore::SourceBuffer>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 48);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v16 = (_DWORD *)a3;
  v5 = WebCore::toJSNewlyCreated(a1, a2, (uint64_t *)&v16);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[6];
  }
  return v5;
}

void WebCore::JSIntersectionObserverOwner::~JSIntersectionObserverOwner(WebCore::JSIntersectionObserverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

__n128 WebCore::JSLazyEventListener::sourceURL@<Q0>(WebCore::JSLazyEventListener *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;

  v2 = (_DWORD *)*((_QWORD *)this + 12);
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)this + 104);
  result = *(__n128 *)((char *)this + 120);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t WebCore::JSLazyEventListener::sourcePosition(WebCore::JSLazyEventListener *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t WebCore::JSLazyEventListener::code@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 88);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

void WebCore::JSMutationObserverOwner::~JSMutationObserverOwner(WebCore::JSMutationObserverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSNodeOwner::~JSNodeOwner(WebCore::JSNodeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSNodeListOwner::~JSNodeListOwner(WebCore::JSNodeListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSOffscreenCanvasRenderingContext2DOwner::~JSOffscreenCanvasRenderingContext2DOwner(WebCore::JSOffscreenCanvasRenderingContext2DOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSPaintRenderingContext2DOwner::~JSPaintRenderingContext2DOwner(WebCore::JSPaintRenderingContext2DOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSPerformanceObserverOwner::~JSPerformanceObserverOwner(WebCore::JSPerformanceObserverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSResizeObserverOwner::~JSResizeObserverOwner(WebCore::JSResizeObserverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

unsigned int *WTF::WeakHashSet<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::JSVMClientDataClient>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int *result;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore20JSVMClientDataClientES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)a2, (void *)a2);
    v8 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v8;
  }
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v9 = *(unsigned int **)(a3 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v18 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v18, a1);
  result = (unsigned int *)v18;
  v18 = 0;
  if (result)
  {
    do
    {
      v16 = __ldaxr(result);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, result));
    if (!v17)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  if (v9)
  {
    do
    {
      v14 = __ldaxr(v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v9));
    if (!v15)
    {
      atomic_store(1u, v9);
      return (unsigned int *)WTF::fastFree((WTF *)v9, v12);
    }
  }
  return result;
}

unsigned int **_ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore20JSVMClientDataClientES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  unsigned int *v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v2 = *result;
  if (*result)
  {
    v3 = *(v2 - 1);
    if (v3)
    {
      v4 = (uint64_t *)result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        result = (unsigned int **)&v2[2 * v6];
        if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
        {
          result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v9 = *v4;
        if (*v4)
          v10 = *(_DWORD *)(v9 - 12);
        else
          v10 = 0;
        *(_DWORD *)(v9 - 12) = v10 - v5;
        v8 = *v4;
      }
      if (v8)
      {
        v11 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v11 && v11 >= 9)
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22ExtendableMessageEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v3 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v3)
  {
    v8 = *(uint64_t **)(a2 + 56);
    v9 = 8 * v3;
    do
    {
      v8 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v8, (void *)a2)+ 1;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = *(WTF **)(a2 + 56);
  if (v4)
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v5 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E33930D8[v5])(&v10, a2 + 32);
    *(_DWORD *)(a2 + 40) = -1;
  }
  v6 = *(WTF::StringImpl **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore9IDBCursorENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11IDBDatabaseENSD_ISI_EENSF_ISI_EEEENSB_10IDBKeyDataENS9_6VectorISM_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENSB_12IDBGetResultENSB_15IDBGetAllResultEyNSB_10IDBRequest14NullResultTypeEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSY_1EJSV_SW_EEEEEEDcS10_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3393148[v3])(&v5, a2);
  *(_DWORD *)(a2 + 160) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore9IDBCursorENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11IDBDatabaseENSD_ISI_EENSF_ISI_EEEENSB_10IDBKeyDataENS9_6VectorISM_Lm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENSB_12IDBGetResultENSB_15IDBGetAllResultEyNSB_10IDBRequest14NullResultTypeEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSY_1EJSV_SW_EEEEEEDcS10_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::EmptyScriptExecutionContext *WebCore::EmptyScriptExecutionContext::EmptyScriptExecutionContext(WebCore::EmptyScriptExecutionContext *this, JSC::VM *a2)
{
  void *v4;
  uint64_t WeakRandomUUIDVersion4;
  void *v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t IdentifierInternal;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v30;
  _QWORD *v31;
  _QWORD v32[3];

  *((_DWORD *)this + 78) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 80) = 7;
  *(_QWORD *)((char *)this + 81) = 0;
  *((_BYTE *)this + 89) = 0;
  *(_QWORD *)this = off_1E33A73D8;
  *((_QWORD *)this + 12) = &unk_1E33A7598;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4(this);
  v6 = v4;
  v7 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v7 != -1)
  {
    v32[0] = &v30;
    v31 = v32;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v8 = (unsigned int *)WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_27;
  v9 = WebCore::Process::globalIdentifier;
  *((_QWORD *)this + 28) = WeakRandomUUIDVersion4;
  *((_QWORD *)this + 29) = v6;
  *((_QWORD *)this + 30) = v9;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_BYTE *)this + 272) = 0;
  *(_WORD *)((char *)this + 273) = 767;
  *(_DWORD *)((char *)this + 275) = 0;
  *(_WORD *)((char *)this + 279) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)this = off_1E33931F0;
  *((_QWORD *)this + 12) = &unk_1E33933B0;
  do
    v10 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v10 + 1, (unsigned int *)a2));
  *((_QWORD *)this + 40) = a2;
  WeakRandomUUIDVersion4 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)WeakRandomUUIDVersion4 = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v12 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v12 != -1)
  {
    v32[0] = &v30;
    v31 = v32;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v8 = (unsigned int *)WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v13 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(WeakRandomUUIDVersion4 + 8) = IdentifierInternal;
    *(_QWORD *)(WeakRandomUUIDVersion4 + 16) = v13;
    *(_DWORD *)(WeakRandomUUIDVersion4 + 32) = 1;
    v14 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v14 += 2;
    *(_QWORD *)(WeakRandomUUIDVersion4 + 40) = v14;
    *(_QWORD *)(WeakRandomUUIDVersion4 + 48) = 0;
    *(_QWORD *)(WeakRandomUUIDVersion4 + 54) = 0;
    *(_WORD *)(WeakRandomUUIDVersion4 + 62) = 1;
    *((_QWORD *)this + 41) = WeakRandomUUIDVersion4;
    *((_QWORD *)this + 42) = 0;
    WTF::URL::invalidate((WebCore::EmptyScriptExecutionContext *)((char *)this + 336));
    v15 = WTF::fastMalloc((WTF *)0xC0);
    WeakRandomUUIDVersion4 = v15;
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)(v15 + 16) = 0;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_BYTE *)(v15 + 120) = 0;
    *(_QWORD *)(v15 + 128) = 0x7FF8000000000000;
    *(_QWORD *)v15 = off_1E33933D8;
    *(_BYTE *)(v15 + 136) = 0;
    *(_QWORD *)(v15 + 144) = 0;
    *(_QWORD *)(v15 + 152) = 0;
    do
      v16 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v16 + 1, (unsigned int *)a2));
    *(_QWORD *)(v15 + 160) = a2;
    v17 = *(_QWORD *)(v15 + 16);
    if (v17)
      goto LABEL_18;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = WeakRandomUUIDVersion4;
    v8 = *(unsigned int **)(WeakRandomUUIDVersion4 + 16);
    *(_QWORD *)(WeakRandomUUIDVersion4 + 16) = v17;
    if (!v8)
      goto LABEL_18;
    do
    {
      v18 = __ldaxr(v8);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v8));
    if (v19)
      goto LABEL_17;
  }
  else
  {
LABEL_27:
    __break(1u);
  }
  atomic_store(1u, v8);
  WTF::fastFree((WTF *)v8, v4);
LABEL_17:
  v17 = *(_QWORD *)(WeakRandomUUIDVersion4 + 16);
  if (v17)
  {
    do
LABEL_18:
      v20 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v20 + 1, (unsigned int *)v17));
  }
  *(_QWORD *)(WeakRandomUUIDVersion4 + 176) = 0;
  *(_QWORD *)(WeakRandomUUIDVersion4 + 184) = 0;
  *(_QWORD *)(WeakRandomUUIDVersion4 + 168) = v17;
  *((_QWORD *)this + 47) = WeakRandomUUIDVersion4;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_QWORD *)this + 47);
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(v21 + 8) = 0;
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
    goto LABEL_31;
  v23 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v23 = 1;
  *(_QWORD *)(v23 + 8) = v22;
  v25 = *(unsigned int **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = v23;
  if (!v25)
    goto LABEL_31;
  do
  {
    v26 = __ldaxr(v25);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v25));
  if (!v27)
  {
    atomic_store(1u, v25);
    WTF::fastFree((WTF *)v25, v24);
  }
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
LABEL_31:
    do
      v28 = __ldaxr((unsigned int *)v23);
    while (__stlxr(v28 + 1, (unsigned int *)v23));
  }
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = v23;
  *(_BYTE *)(v21 + 40) = 0;
  WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTaskGroup>(v22 + 72, (uint64_t *)v21, (uint64_t)v32);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = v21;
  *((_DWORD *)this + 102) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_DWORD *)this + 146) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  WTF::URL::invalidate((WebCore::EmptyScriptExecutionContext *)((char *)this + 728));
  WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*((_QWORD *)this + 47) + 104, this, (uint64_t)v32);
  return this;
}

uint64_t WebCore::EmptyScriptExecutionContext::referrerPolicy(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::isSecureContext(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

void WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext(WebCore::EmptyScriptExecutionContext *this)
{
  WTF *v1;
  void *v2;

  WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext(this);
  WTF::fastFree(v1, v2);
}

{
  WTF::StringImpl *v2;
  void *v3;
  WebCore::EventLoopTaskGroup *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  void *v13;

  WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScriptExecutionContext>(*((_QWORD *)this + 47) + 104, this);
  WebCore::Settings::Values::~Values((WebCore::EmptyScriptExecutionContext *)((char *)this + 392), v2);
  v4 = (WebCore::EventLoopTaskGroup *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v4)
  {
    WebCore::EventLoopTaskGroup::~EventLoopTaskGroup(v4, v3);
    if (*(_DWORD *)(v5 + 8))
    {
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 41, (WTF::StringImpl *)v3);
  v9 = (unsigned int *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (WTF *)MEMORY[0x19AEA3AF8]();
      WTF::fastFree(v12, v13);
    }
  }
  WebCore::ScriptExecutionContext::~ScriptExecutionContext(this, v8);
}

uint64_t WebCore::ScriptExecutionContext::isContextThread(WebCore::ScriptExecutionContext *this)
{
  return 1;
}

uint64_t WebCore::EmptyScriptExecutionContext::isJSExecutionForbidden(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::eventLoop(WebCore::EmptyScriptExecutionContext *this)
{
  return *((_QWORD *)this + 48);
}

uint64_t WebCore::EmptyScriptExecutionContext::url(WebCore::EmptyScriptExecutionContext *this)
{
  return (uint64_t)this + 336;
}

uint64_t WebCore::EmptyScriptExecutionContext::completeURL@<X0>(WTF::URL *a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  return WTF::URL::invalidate(a1);
}

void WebCore::EmptyScriptExecutionContext::userAgent(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

uint64_t WebCore::EmptyScriptExecutionContext::settingsValues(WebCore::EmptyScriptExecutionContext *this)
{
  return (uint64_t)this + 392;
}

uint64_t WebCore::EmptyScriptExecutionContext::notificationClient(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::ScriptExecutionContext::sessionID(WebCore::ScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::idbConnectionProxy(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::socketProvider(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::advancedPrivacyProtections(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::noiseInjectionHashSalt(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

uint64_t WebCore::EmptyScriptExecutionContext::topOrigin(WebCore::EmptyScriptExecutionContext *this)
{
  return *((_QWORD *)this + 41);
}

uint64_t WebCore::EmptyScriptExecutionContext::vm(WebCore::EmptyScriptExecutionContext *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t WebCore::EmptyScriptExecutionContext::errorEventTarget(WebCore::EmptyScriptExecutionContext *this)
{
  return 0;
}

void WebCore::EmptyScriptExecutionContext::wrapCryptoKey(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void WebCore::EmptyScriptExecutionContext::unwrapCryptoKey(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void `non-virtual thunk to'WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext(WebCore::EmptyScriptExecutionContext *this)
{
  WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext((WebCore::EmptyScriptExecutionContext *)((char *)this - 96));
}

{
  WTF *v1;
  void *v2;

  WebCore::EmptyScriptExecutionContext::~EmptyScriptExecutionContext((WebCore::EmptyScriptExecutionContext *)((char *)this - 96));
  WTF::fastFree(v1, v2);
}

void WebCore::EmptyScriptExecutionContext::EmptyEventLoop::~EmptyEventLoop(WebCore::EmptyScriptExecutionContext::EmptyEventLoop *this, void *a2)
{
  void *v3;

  WebCore::MicrotaskQueue::~MicrotaskQueue((WebCore::EmptyScriptExecutionContext::EmptyEventLoop *)((char *)this + 136), a2);
  WebCore::EventLoop::~EventLoop(this, v3);
}

{
  void *v3;
  WTF *v4;
  void *v5;

  WebCore::MicrotaskQueue::~MicrotaskQueue((WebCore::EmptyScriptExecutionContext::EmptyEventLoop *)((char *)this + 136), a2);
  WebCore::EventLoop::~EventLoop(this, v3);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::EmptyScriptExecutionContext::EmptyEventLoop::microtaskQueue(WebCore::EmptyScriptExecutionContext::EmptyEventLoop *this)
{
  return (uint64_t)this + 136;
}

uint64_t WebCore::EmptyScriptExecutionContext::EmptyEventLoop::isContextThread(WebCore::EmptyScriptExecutionContext::EmptyEventLoop *this)
{
  return 1;
}

unint64_t WebCore::createWrapper<WebCore::Element,WebCore::Node>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSElement *v14;
  JSC::JSCell *Prototype;
  uint64_t v16;
  WebCore::JSElement *v17;
  _QWORD *v18;
  unint64_t SlowCase;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *Allocator;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSElement::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSElement::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSElement *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSElement::createPrototype(v14, a1, a3);
  LODWORD(v32) = 241;
  v16 = JSC::Structure::create((uint64_t *)v14, (int)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v16, (uint64_t)&WebCore::JSElement::s_info);
LABEL_8:
  v17 = (WebCore::JSElement *)*((_QWORD *)a1 + 7);
  v18 = (_QWORD *)WebCore::JSElement::subspaceForImpl(v17, a2);
  SlowCase = v18[3];
  if (SlowCase < v18[4])
  {
LABEL_9:
    v18[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v18[5];
  if ((SlowCase & 1) == 0)
  {
    v30 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v30);
    v18[5] = SlowCase + (int)v30;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  *(_QWORD *)(SlowCase + 24) = v4;
  if (*((_BYTE *)v17 + 755))
    __dmb(0xAu);
  v20 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v4)
    v21 = (uint64_t *)(v4 + 8);
  else
    v21 = 0;
  if (!*(_DWORD *)(v20 + 48))
  {
    if ((SlowCase & 8) != 0)
      v22 = (SlowCase - 112) | 1;
    else
      v22 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v22 & 1) != 0)
      v23 = v22 + 47;
    else
      v23 = *(_QWORD *)v22 + 32;
    Allocator = *(_QWORD **)(v23 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v23 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v20;
    v25 = *v21;
    *v21 = (uint64_t)Allocator;
    if (!v25)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v25 + 8) = 3;
    return SlowCase;
  }
  v32 = v4;
  if ((SlowCase & 8) != 0)
    v27 = (SlowCase - 112) | 1;
  else
    v27 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v27 & 1) != 0)
    v28 = v27 + 47;
  else
    v28 = *(_QWORD *)v27 + 32;
  v29 = *(_QWORD **)(v28 + 16);
  if (!v29)
    v29 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v28 + 16) = *v29;
  *v29 = SlowCase;
  v29[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v29[2] = v20;
  v31 = v29;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v20 + 32), &v32, (uint64_t *)&v31);
  v25 = (uint64_t)v31;
  if (v31)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::createWrapper<WebCore::Attr,WebCore::Node>(WebCore::JSAttr **a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v3;
  uint64_t v4;
  WebCore::Node *v5;
  WebCore::Node *v7;

  v3 = *a2;
  *a2 = 0;
  v7 = v3;
  v4 = WebCore::createWrapper<WebCore::Attr,WebCore::Attr>(a1, (uint64_t *)&v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::Text,WebCore::Node>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  WebCore::JSText *v13;
  JSC::JSCell *Prototype;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  int v19;
  WebCore::Node *v20;
  int v21;

  v4 = *a2;
  *a2 = 0;
  v20 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSText::s_info + ~((_QWORD)&WebCore::JSText::s_info << 32)) ^ (((unint64_t)&WebCore::JSText::s_info + ~((_QWORD)&WebCore::JSText::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSText::s_info)
    {
LABEL_3:
      v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v12)
        goto LABEL_5;
    }
    else
    {
      v19 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v19) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v19;
        if (v11 == &WebCore::JSText::s_info)
          goto LABEL_3;
      }
    }
  }
  v13 = (WebCore::JSText *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSText::createPrototype(v13, a1, a3);
  v21 = 243;
  v15 = JSC::Structure::create((uint64_t *)v13, (int)a1, Prototype);
  v12 = WebCore::cacheDOMStructure((JSCell *)a1, v15, (uint64_t)&WebCore::JSText::s_info);
LABEL_5:
  v16 = WebCore::JSText::create(v12, a1, (uint64_t *)&v20);
  WebCore::cacheWrapper<WebCore::Text,WebCore::JSText>(*((_QWORD *)a1 + 415), (uint64_t)v4, v16);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return v16;
}

uint64_t WebCore::createWrapper<WebCore::CDATASection,WebCore::Node>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSText *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v23;
  int v24;

  v4 = *a2;
  *a2 = 0;
  v23 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSCDATASection::s_info + ~((_QWORD)&WebCore::JSCDATASection::s_info << 32)) ^ (((unint64_t)&WebCore::JSCDATASection::s_info + ~((_QWORD)&WebCore::JSCDATASection::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSCDATASection::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSCDATASection::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSText *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSText::prototype(v14, a1, a3);
  Structure = WebCore::JSCDATASectionPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSCDATASectionPrototype::create(v14, a1, Structure, v17);
  v24 = 244;
  v19 = JSC::Structure::create((uint64_t *)v14, (int)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSCDATASection::s_info);
LABEL_8:
  v20 = WebCore::JSCDATASection::create(v13, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  return v20;
}

uint64_t WebCore::createWrapper<WebCore::ProcessingInstruction,WebCore::Node>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSCharacterData *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v23;
  int v24;

  v4 = *a2;
  *a2 = 0;
  v23 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSProcessingInstruction::s_info
        + ~((_QWORD)&WebCore::JSProcessingInstruction::s_info << 32)) ^ (((unint64_t)&WebCore::JSProcessingInstruction::s_info
                                                                        + ~((_QWORD)&WebCore::JSProcessingInstruction::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSProcessingInstruction::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSProcessingInstruction::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSCharacterData *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSCharacterData::prototype(v14, a1, a3);
  Structure = WebCore::JSProcessingInstructionPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSProcessingInstructionPrototype::create(v14, a1, Structure, v17);
  v24 = 247;
  v19 = JSC::Structure::create((uint64_t *)v14, (int)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSProcessingInstruction::s_info);
LABEL_8:
  v20 = WebCore::JSProcessingInstruction::create(v13, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  return v20;
}

uint64_t WebCore::createWrapper<WebCore::Comment,WebCore::Node>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  WebCore::JSComment *v13;
  JSC::JSCell *Prototype;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  int v19;
  WebCore::Node *v20;
  int v21;

  v4 = *a2;
  *a2 = 0;
  v20 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSComment::s_info + ~((_QWORD)&WebCore::JSComment::s_info << 32)) ^ (((unint64_t)&WebCore::JSComment::s_info + ~((_QWORD)&WebCore::JSComment::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSComment::s_info)
    {
LABEL_3:
      v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v12)
        goto LABEL_5;
    }
    else
    {
      v19 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v19) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v19;
        if (v11 == &WebCore::JSComment::s_info)
          goto LABEL_3;
      }
    }
  }
  v13 = (WebCore::JSComment *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSComment::createPrototype(v13, a1, a3);
  v21 = 248;
  v15 = JSC::Structure::create((uint64_t *)v13, (int)a1, Prototype);
  v12 = WebCore::cacheDOMStructure((JSCell *)a1, v15, (uint64_t)&WebCore::JSComment::s_info);
LABEL_5:
  v16 = WebCore::JSComment::create(v12, a1, (uint64_t *)&v20);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v16);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return v16;
}

uint64_t WebCore::createWrapper<WebCore::DocumentType,WebCore::Node>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  v4 = WebCore::createWrapper<WebCore::DocumentType,WebCore::DocumentType>(a1, &v6, a3);
  WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::ShadowRoot,WebCore::Node>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  v4 = WebCore::createWrapper<WebCore::ShadowRoot,WebCore::ShadowRoot>(a1, &v6, a3);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v6);
  return v4;
}

unint64_t WebCore::createWrapper<WebCore::Node,WebCore::Node>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSNode *v15;
  JSC::JSCell *Prototype;
  uint64_t v17;
  WebCore::JSNode *v18;
  _QWORD *v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *Allocator;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSNode::s_info + ~((_QWORD)&WebCore::JSNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSNode::s_info + ~((_QWORD)&WebCore::JSNode::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSNode::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSNode::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSNode *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSNode::createPrototype(v15, a1, a3);
  LODWORD(v34) = 240;
  v17 = JSC::Structure::create((uint64_t *)v15, (int)a1, Prototype);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v17, (uint64_t)&WebCore::JSNode::s_info);
LABEL_8:
  v18 = (WebCore::JSNode *)*((_QWORD *)a1 + 7);
  v19 = (_QWORD *)WebCore::JSNode::subspaceForImpl(v18, a2);
  SlowCase = v19[3];
  if (SlowCase < v19[4])
  {
LABEL_9:
    v19[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v19[5];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v32);
    v19[5] = SlowCase + (int)v32;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v21 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v21;
  if (*((_BYTE *)v18 + 755))
    __dmb(0xAu);
  v22 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v5)
    v23 = (uint64_t *)(v5 + 8);
  else
    v23 = 0;
  if (!*(_DWORD *)(v22 + 48))
  {
    if ((SlowCase & 8) != 0)
      v24 = (SlowCase - 112) | 1;
    else
      v24 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v24 & 1) != 0)
      v25 = v24 + 47;
    else
      v25 = *(_QWORD *)v24 + 32;
    Allocator = *(_QWORD **)(v25 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v25 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v22;
    v27 = *v23;
    *v23 = (uint64_t)Allocator;
    if (!v27)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v27 + 8) = 3;
    return SlowCase;
  }
  v34 = v5;
  if ((SlowCase & 8) != 0)
    v29 = (SlowCase - 112) | 1;
  else
    v29 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v29 & 1) != 0)
    v30 = v29 + 47;
  else
    v30 = *(_QWORD *)v29 + 32;
  v31 = *(_QWORD **)(v30 + 16);
  if (!v31)
    v31 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v30 + 16) = *v31;
  *v31 = SlowCase;
  v31[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v31[2] = v22;
  v33 = v31;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v22 + 32), &v34, (uint64_t *)&v33);
  v27 = (uint64_t)v33;
  if (v33)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::JSText::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSText *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSText *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSText::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

WebCore::DOMWrapperWorld *WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(WebCore::DOMWrapperWorld *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, a2);
    return (WebCore::DOMWrapperWorld *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSEventTarget::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSEventTarget *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSEventTarget>(v6, a2);
  result = WebCore::JSEventTarget::JSEventTarget(v7, a1, (uint64_t)a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::EventTarget,WebCore::JSEventTarget>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner = (uint64_t)&off_1E3276300;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSEventTarget>(WebCore::JSEventTarget *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSEventTarget::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::MessagePort>>>::convert<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul>(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  JSC::JSObject *v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v21;
  WTF *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  WTF *v26;
  _OWORD v27[4];
  uint64_t v28;
  JSC::VM *v29;

  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v29 = v6;
  v24 = 0;
  v25 = 0x800000000;
  v26 = (WTF *)((char *)v27 + 8);
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v24 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v25) == 1;
    v7 = *(_DWORD *)(a3 + 12);
    if (v7)
    {
LABEL_3:
      v8 = *(uint64_t **)a3;
      v9 = 8 * v7;
      do
      {
        v10 = (objc_class *)WebCore::wrap<WebCore::MessagePort>((uint64_t)a1, a2, *v8);
        if (*((_DWORD *)v6 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
            goto LABEL_34;
        }
        v11 = v25;
        if ((_DWORD)v25 != HIDWORD(v25) && (v26 != (WTF *)((char *)v27 + 8) ? (v12 = v26 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v26 + v25) = v10;
          LODWORD(v25) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v25, v13) == 1)
            v24 = 1;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  if (v24)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v22 = v26;
    v23 = v25;
    v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
      v17 = 0;
    else
      v17 = (JSC::JSGlobalObject *)JSC::constructArray();
    if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
    {
      v18 = JSC::objectConstructorFreeze(a1, v17, v16);
      goto LABEL_24;
    }
  }
LABEL_34:
  v18 = 0;
LABEL_24:
  v19 = *(uint64_t **)&v27[0];
  if (*(_QWORD *)&v27[0])
  {
    v22 = (WTF *)&v25;
    v21 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v27[0], (uint64_t *)&v22);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v19, v21);
  }
  if (v26 != (WTF *)((char *)v27 + 8) && v26)
    WTF::fastFree(v26, v14);
  return v18;
}

unint64_t WebCore::createWrapper<WebCore::HTMLFormControlsCollection,WebCore::HTMLFormControlsCollection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSHTMLFormControlsCollection>(*(WebCore::JSHTMLFormControlsCollection **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSHTMLFormControlsCollection::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::HTMLFormControlsCollection,WebCore::JSHTMLFormControlsCollection>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

unint64_t WebCore::JSHTMLFormControlsCollection::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSHTMLFormControlsCollection *v6;
  unint64_t v7;
  WebCore::JSHTMLCollection *v8;

  v6 = (WebCore::JSHTMLFormControlsCollection *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSHTMLFormControlsCollection>(v6, a2);
  v8 = (WebCore::JSHTMLCollection *)WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(v7, a1, (uint64_t)a2, a3);
  WebCore::JSHTMLCollection::finishCreation(v8, v6);
  return v7;
}

uint64_t *WebCore::cacheWrapper<WebCore::HTMLFormControlsCollection,WebCore::JSHTMLFormControlsCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  if ((byte_1EE337AC0 & 1) == 0)
  {
    qword_1EE337AB8 = (uint64_t)&off_1E32A11E0;
    byte_1EE337AC0 = 1;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&qword_1EE337AB8);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&qword_1EE337AB8, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSHTMLFormControlsCollection>(WebCore::JSHTMLFormControlsCollection *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSHTMLFormControlsCollection::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::HTMLOptionsCollection,WebCore::HTMLOptionsCollection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSHTMLOptionsCollection>(*(WebCore::JSHTMLOptionsCollection **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSHTMLOptionsCollection::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::HTMLOptionsCollection,WebCore::JSHTMLOptionsCollection>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

unint64_t WebCore::JSHTMLOptionsCollection::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSHTMLOptionsCollection *v6;
  unint64_t v7;
  WebCore::JSHTMLCollection *v8;

  v6 = (WebCore::JSHTMLOptionsCollection *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSHTMLOptionsCollection>(v6, a2);
  v8 = (WebCore::JSHTMLCollection *)WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(v7, a1, (uint64_t)a2, a3);
  WebCore::JSHTMLCollection::finishCreation(v8, v6);
  return v7;
}

uint64_t *WebCore::cacheWrapper<WebCore::HTMLOptionsCollection,WebCore::JSHTMLOptionsCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  if ((byte_1EE337AD0 & 1) == 0)
  {
    qword_1EE337AC8 = (uint64_t)&off_1E32A1310;
    byte_1EE337AD0 = 1;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&qword_1EE337AC8);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&qword_1EE337AC8, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSHTMLOptionsCollection>(WebCore::JSHTMLOptionsCollection *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSHTMLOptionsCollection::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore21SerializedScriptValueENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::IDBCursor::value@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;

  v2 = this;
  v4 = *(unsigned int **)(this + 264);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *(unsigned int *)(this + 284);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 20) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
      goto LABEL_20;
    this = WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 8) = this;
    v8 = *(unsigned int *)(v2 + 284);
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD ***)(v2 + 272);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        if (*v9)
          *v11 += 2;
        *(_QWORD *)this = v11;
        this += 8;
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v7 = *(unsigned int *)(v2 + 300);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 36) = v7;
  if (!(_DWORD)v7)
    return this;
  if (v7 >> 29)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1956CF098);
  }
  this = WTF::fastMalloc((WTF *)(8 * v7));
  *(_DWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 24) = this;
  v12 = *(unsigned int *)(v2 + 300);
  if ((_DWORD)v12)
  {
    v13 = *(_DWORD ***)(v2 + 288);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)this = v15;
      this += 8;
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(JSC::VM ****a1, uint64_t *a2)
{
  JSC::JSGlobalObject *v3;
  JSC::VM **v4;
  JSC::VM **v5;
  uint64_t *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *Allocator;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = **a1;
  v3 = (JSC::JSGlobalObject *)(*a1)[1];
  v5 = (*a1)[2];
  v6 = (uint64_t *)(*a1)[3];
  result = *v6;
  v8 = *v6;
  if (!*v6)
  {
    v9 = v6[1];
    if (!v9)
      goto LABEL_8;
    v8 = *(_QWORD *)v9;
    if (!*(_QWORD *)v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
      goto LABEL_8;
  }
  if ((v8 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject((JSC::JSCell *)v8) & 0xFFFFFFFE) + 0x28)
                   + 3320) == *((_QWORD *)v3 + 415))
    {
LABEL_16:
      result = *v6;
      goto LABEL_17;
    }
LABEL_8:
    if (*a2)
      v10 = WebCore::wrap<WebCore::IDBCursor>((uint64_t)v3, (uint64_t)v3, *a2);
    else
      v10 = 2;
    if (*((_DWORD *)*v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*v4) & 1) != 0)
      return 0;
    v11 = *((_QWORD *)v3 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(v3, v5, (JSC::JSCell *)v10);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *v6 = result;
      v15 = v6[1];
      if (!v15)
        return result;
      *(_QWORD *)(v15 + 8) = 3;
      v6[1] = 0;
      goto LABEL_16;
    }
    Allocator = 0;
    *v6 = 0;
    if (result)
    {
      v16 = result;
      if ((result & 8) != 0)
        v17 = (result - 112) | 1;
      else
        v17 = result & 0xFFFFFFFFFFFFC000;
      if ((v17 & 1) != 0)
        v18 = v17 + 47;
      else
        v18 = *(_QWORD *)v17 + 32;
      Allocator = *(_QWORD **)(v18 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v18 + 16) = *Allocator;
      result = v16;
      *Allocator = v16;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v13 = v6[1];
    v6[1] = (uint64_t)Allocator;
    if (v13)
    {
      *(_QWORD *)(v13 + 8) = 3;
      if (!result)
        goto LABEL_16;
    }
    else if (!result)
    {
      goto LABEL_16;
    }
    if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)v5 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v5);
    goto LABEL_16;
  }
LABEL_17:
  if (!result)
  {
    v14 = (_BYTE *)v6[1];
    if (v14 && *(_QWORD *)v14)
    {
      if ((v14[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v14;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, unsigned int **a2)
{
  JSC::JSGlobalObject *v3;
  JSC::VM **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *Allocator;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(JSC::VM ***)(*(_QWORD *)a1 + 32);
  v3 = *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(uint64_t **)(*(_QWORD *)a1 + 56);
  result = *v6;
  v8 = *v6;
  if (!*v6)
  {
    v9 = v6[1];
    if (!v9)
      goto LABEL_8;
    v8 = *(_QWORD *)v9;
    if (!*(_QWORD *)v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
      goto LABEL_8;
  }
  if ((v8 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject((JSC::JSCell *)v8) & 0xFFFFFFFE) + 0x28)
                   + 3320) == *((_QWORD *)v3 + 415))
    {
LABEL_16:
      result = *v6;
      goto LABEL_17;
    }
LABEL_8:
    if (*a2)
      v10 = WebCore::wrap<WebCore::IDBDatabase>((uint64_t)v3, (uint64_t)v3, *a2);
    else
      v10 = 2;
    if (*((_DWORD *)*v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*v4) & 1) != 0)
      return 0;
    v11 = *((_QWORD *)v3 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(v3, (_DWORD *)v5, (JSC::JSCell *)v10);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *v6 = result;
      v15 = v6[1];
      if (!v15)
        return result;
      *(_QWORD *)(v15 + 8) = 3;
      v6[1] = 0;
      goto LABEL_16;
    }
    Allocator = 0;
    *v6 = 0;
    if (result)
    {
      v16 = result;
      if ((result & 8) != 0)
        v17 = (result - 112) | 1;
      else
        v17 = result & 0xFFFFFFFFFFFFC000;
      if ((v17 & 1) != 0)
        v18 = v17 + 47;
      else
        v18 = *(_QWORD *)v17 + 32;
      Allocator = *(_QWORD **)(v18 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v18 + 16) = *Allocator;
      result = v16;
      *Allocator = v16;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v13 = v6[1];
    v6[1] = (uint64_t)Allocator;
    if (v13)
    {
      *(_QWORD *)(v13 + 8) = 3;
      if (!result)
        goto LABEL_16;
    }
    else if (!result)
    {
      goto LABEL_16;
    }
    if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v5 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v5);
    goto LABEL_16;
  }
LABEL_17:
  if (!result)
  {
    v14 = (_BYTE *)v6[1];
    if (v14 && *(_QWORD *)v14)
    {
      if ((v14[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v14;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, WebCore::IDBKeyData *this)
{
  WebCore *v3;
  JSC::VM **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  WebCore::IDBKey *v10;
  void *v11;
  JSC::JSCell *v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *Allocator;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  bmalloc::api *v23;
  char v24;

  v4 = *(JSC::VM ***)(*(_QWORD *)a1 + 64);
  v3 = *(WebCore **)(*(_QWORD *)a1 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v6 = *(uint64_t **)(*(_QWORD *)a1 + 88);
  result = *v6;
  v8 = *v6;
  if (!*v6)
  {
    v9 = v6[1];
    if (!v9)
      goto LABEL_8;
    v8 = *(_QWORD *)v9;
    if (!*(_QWORD *)v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
      goto LABEL_8;
  }
  if ((v8 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject((JSC::JSCell *)v8) & 0xFFFFFFFE) + 0x28)
                   + 3320) == *((_QWORD *)v3 + 415))
    {
LABEL_16:
      result = *v6;
      goto LABEL_17;
    }
LABEL_8:
    WebCore::IDBKeyData::maybeCreateIDBKey((uint64_t)this, (uint64_t *)&v23);
    v12 = (JSC::JSCell *)WebCore::toJS(v3, (unint64_t)v3, v23, v10);
    v13 = (unsigned int *)v23;
    v23 = 0;
    if (v13)
    {
      if (*v13 == 1)
      {
        v18 = v13[6];
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v18])(&v24, v13 + 2);
        v13[6] = -1;
        bmalloc::api::isoDeallocate((bmalloc::api *)v13, v11);
      }
      else
      {
        --*v13;
      }
    }
    if (*((_DWORD *)*v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*v4) & 1) != 0)
      return 0;
    v14 = *((_QWORD *)v3 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(v3, (_DWORD *)v5, v12);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *v6 = result;
      v19 = v6[1];
      if (!v19)
        return result;
      *(_QWORD *)(v19 + 8) = 3;
      v6[1] = 0;
      goto LABEL_16;
    }
    Allocator = 0;
    *v6 = 0;
    if (result)
    {
      v20 = result;
      if ((result & 8) != 0)
        v21 = (result - 112) | 1;
      else
        v21 = result & 0xFFFFFFFFFFFFC000;
      if ((v21 & 1) != 0)
        v22 = v21 + 47;
      else
        v22 = *(_QWORD *)v21 + 32;
      Allocator = *(_QWORD **)(v22 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v22 + 16) = *Allocator;
      result = v20;
      *Allocator = v20;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v16 = v6[1];
    v6[1] = (uint64_t)Allocator;
    if (v16)
    {
      *(_QWORD *)(v16 + 8) = 3;
      if (!result)
        goto LABEL_16;
    }
    else if (!result)
    {
      goto LABEL_16;
    }
    if (*(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(v5 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v14 + 192), (const JSCell *)v5);
    goto LABEL_16;
  }
LABEL_17:
  if (!result)
  {
    v17 = (_BYTE *)v6[1];
    if (v17 && *(_QWORD *)v17)
    {
      if ((v17[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v17;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, uint64_t a2)
{
  WebCore *v3;
  JSC::VM **v4;
  JSCell *v5;
  JSC::JSCell **v6;
  JSC::JSCell *v7;
  JSC::JSCell *v8;
  JSC::JSCell *v9;
  JSC::VM *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::IDBKey *v14;
  void *v15;
  objc_class *v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  JSValue v20;
  void *v21;
  JSC::VM *v22;
  JSC::JSCell *v23;
  const JSCell *v24;
  uint64_t *v25;
  uint64_t v26;
  JSC::JSCell *v27;
  JSC::JSCell *Allocator;
  JSC::JSCell *v29;
  JSC::JSCell *v30;
  JSC::JSCell *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  JSCell *v36;
  bmalloc::api *v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  WTF *v41;
  _OWORD v42[4];
  uint64_t v43;
  JSC::VM *v44;
  char v45;

  v4 = *(JSC::VM ***)(*(_QWORD *)a1 + 96);
  v3 = *(WebCore **)(*(_QWORD *)a1 + 104);
  v5 = *(JSCell **)(*(_QWORD *)a1 + 112);
  v6 = *(JSC::JSCell ***)(*(_QWORD *)a1 + 120);
  v7 = *v6;
  v8 = *v6;
  if (!*v6)
  {
    v9 = v6[1];
    if (!v9)
      goto LABEL_8;
    v8 = *(JSC::JSCell **)v9;
    if (!*(_QWORD *)v9 || (*((_BYTE *)v9 + 8) & 3) != 0)
      goto LABEL_8;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(v8) & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)v3 + 415))
    {
LABEL_40:
      v7 = *v6;
      goto LABEL_41;
    }
LABEL_8:
    v10 = (JSC::VM *)*((_QWORD *)v3 + 7);
    v44 = v10;
    v39 = 0;
    v40 = 0x800000000;
    v41 = (WTF *)((char *)v42 + 8);
    memset(v42, 0, sizeof(v42));
    v43 = 0;
    v11 = *(_DWORD *)(a2 + 12);
    if (v11 >= 9)
    {
      v39 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v40) == 1;
      v11 = *(_DWORD *)(a2 + 12);
    }
    v36 = v5;
    if (v11)
    {
      v12 = *(_QWORD *)a2;
      v13 = 32 * v11;
      while (1)
      {
        WebCore::IDBKeyData::maybeCreateIDBKey(v12, (uint64_t *)&v37);
        v16 = (objc_class *)WebCore::toJS(v3, (unint64_t)v3, v37, v14);
        v17 = (unsigned int *)v37;
        v37 = 0;
        if (v17)
        {
          if (*v17 == 1)
          {
            v19 = v17[6];
            if ((_DWORD)v19 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrIN7WebCore6IDBKeyENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_6StringEdNS9_20ThreadSafeDataBufferEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v19])(&v45, v17 + 2);
            v17[6] = -1;
            bmalloc::api::isoDeallocate((bmalloc::api *)v17, v15);
          }
          else
          {
            --*v17;
          }
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          break;
        v18 = v40;
        if ((_DWORD)v40 == HIDWORD(v40) || v41 != (WTF *)((char *)v42 + 8) && v41)
        {
          v20.super.isa = v16;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v40, v20) == 1)
            v39 = 1;
        }
        else
        {
          *((_QWORD *)v41 + v40) = v16;
          LODWORD(v40) = v18 + 1;
        }
        v12 += 32;
        v13 -= 32;
        if (!v13)
          goto LABEL_29;
      }
    }
    else
    {
LABEL_29:
      if (v39)
      {
        JSC::throwOutOfMemoryError();
      }
      else
      {
        v37 = v41;
        v38 = v40;
        v22 = (JSC::VM *)*((_QWORD *)v3 + 7);
        if (!*((_DWORD *)v22 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) == 0)
        {
          v23 = (JSC::JSCell *)JSC::constructArray();
          goto LABEL_32;
        }
      }
    }
    v23 = 0;
LABEL_32:
    v24 = v5;
    v25 = *(uint64_t **)&v42[0];
    if (*(_QWORD *)&v42[0])
    {
      v37 = (bmalloc::api *)&v40;
      v33 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v42[0], (uint64_t *)&v37);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v25, v33);
    }
    if (v41 != (WTF *)((char *)v42 + 8) && v41)
      WTF::fastFree(v41, v21);
    if (*((_DWORD *)*v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*v4) & 1) != 0)
      return 0;
    v26 = *((_QWORD *)v3 + 7);
    v27 = WebCore::cloneAcrossWorlds(v3, v36, v23);
    v7 = v27;
    if (((unint64_t)v27 & 0xFFFE000000000002) != 0)
    {
      *v6 = v27;
      v32 = v6[1];
      if (!v32)
        return (uint64_t)v7;
      *((_QWORD *)v32 + 1) = 3;
      v6[1] = 0;
      goto LABEL_40;
    }
    Allocator = 0;
    *v6 = 0;
    if (v7)
    {
      if ((v7 & 8) != 0)
        v34 = ((unint64_t)v7 - 112) | 1;
      else
        v34 = (unint64_t)v7 & 0xFFFFFFFFFFFFC000;
      if ((v34 & 1) != 0)
        v35 = v34 + 47;
      else
        v35 = *(_QWORD *)v34 + 32;
      Allocator = *(JSC::JSCell **)(v35 + 16);
      if (!Allocator)
        Allocator = (JSC::JSCell *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v35 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v7;
      *((_QWORD *)Allocator + 1) = 0;
      *((_QWORD *)Allocator + 2) = 0;
      v24 = v36;
    }
    __dmb(0xAu);
    v29 = v6[1];
    v6[1] = Allocator;
    if (v29)
    {
      *((_QWORD *)v29 + 1) = 3;
      if (!v7)
        goto LABEL_40;
    }
    else if (!v7)
    {
      goto LABEL_40;
    }
    if (*(_DWORD *)(v26 + 760) >= *((unsigned __int8 *)v24 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v26 + 192), v24);
    goto LABEL_40;
  }
LABEL_41:
  if (!v7)
  {
    v30 = v6[1];
    if (v30 && *(_QWORD *)v30)
    {
      if ((*((_BYTE *)v30 + 8) & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v30;
    }
    else
    {
      return 10;
    }
  }
  return (uint64_t)v7;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, JSC::JSGlobalObject *a2)
{
  JSC::JSGlobalObject *v3;
  JSC::VM **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *Allocator;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = *(JSC::VM ***)(*(_QWORD *)a1 + 128);
  v3 = *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 136);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v6 = *(uint64_t **)(*(_QWORD *)a1 + 152);
  result = *v6;
  v8 = *v6;
  if (!*v6)
  {
    v9 = v6[1];
    if (!v9)
      goto LABEL_8;
    v8 = *(_QWORD *)v9;
    if (!*(_QWORD *)v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
      goto LABEL_8;
  }
  if ((v8 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v8 + 5) >= 0x17u)
  {
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject((JSC::JSCell *)v8) & 0xFFFFFFFE) + 0x28)
                   + 3320) == *((_QWORD *)v3 + 415))
    {
LABEL_16:
      result = *v6;
      goto LABEL_17;
    }
LABEL_8:
    v10 = WebCore::deserializeIDBValueWithKeyInjection(v3, a2, (uint64_t)a2 + 40, (JSC::JSGlobalObject *)((char *)a2 + 104));
    if (v11)
      v12 = v10;
    else
      v12 = 2;
    if (*((_DWORD *)*v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*v4) & 1) != 0)
      return 0;
    v13 = *((_QWORD *)v3 + 7);
    result = (uint64_t)WebCore::cloneAcrossWorlds(v3, (_DWORD *)v5, (JSC::JSCell *)v12);
    if ((result & 0xFFFE000000000002) != 0)
    {
      *v6 = result;
      v17 = v6[1];
      if (!v17)
        return result;
      *(_QWORD *)(v17 + 8) = 3;
      v6[1] = 0;
      goto LABEL_16;
    }
    Allocator = 0;
    *v6 = 0;
    if (result)
    {
      v18 = result;
      if ((result & 8) != 0)
        v19 = (result - 112) | 1;
      else
        v19 = result & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = v19 + 47;
      else
        v20 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD **)(v20 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v20 + 16) = *Allocator;
      result = v18;
      *Allocator = v18;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    __dmb(0xAu);
    v15 = v6[1];
    v6[1] = (uint64_t)Allocator;
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      if (!result)
        goto LABEL_16;
    }
    else if (!result)
    {
      goto LABEL_16;
    }
    if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v5 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), (const JSCell *)v5);
    goto LABEL_16;
  }
LABEL_17:
  if (!result)
  {
    v16 = (_BYTE *)v6[1];
    if (v16 && *(_QWORD *)v16)
    {
      if ((v16[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v16;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  JSC::VM **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  JSValue v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *Allocator;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31[2];
  WTF *v32;
  WTF::StringImpl *v33;
  BOOL v34;
  uint64_t v35;
  WTF *v36;
  _OWORD v37[4];
  uint64_t v38;

  v4 = *(JSC::VM ***)(*(_QWORD *)a1 + 160);
  v3 = *(JSC::JSGlobalObject **)(*(_QWORD *)a1 + 168);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  v6 = *(uint64_t **)(*(_QWORD *)a1 + 184);
  v7 = *v6;
  result = *v6;
  if (*v6 || (v9 = v6[1]) != 0 && (result = *(_QWORD *)v9) != 0 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    if ((result & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(result + 5) < 0x17u)
      goto LABEL_40;
    result = JSC::JSCell::getObject((JSC::JSCell *)result);
    if (*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x28) + 3320) == *((_QWORD *)v3 + 415))
      goto LABEL_39;
  }
  v34 = 0;
  v35 = 0x800000000;
  v36 = (WTF *)((char *)v37 + 8);
  memset(v37, 0, sizeof(v37));
  v38 = 0;
  v10 = *(_DWORD *)(a2 + 36);
  if (v10 >= 9)
  {
    result = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v35);
    v34 = (_DWORD)result == 1;
    v10 = *(_DWORD *)(a2 + 36);
  }
  *(_QWORD *)v31 = v5;
  if (!v10)
  {
LABEL_28:
    v32 = v36;
    LODWORD(v33) = v35;
    v20 = (JSC::VM *)*((_QWORD *)v3 + 7);
    if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
      v14 = 0;
    else
      v14 = JSC::constructArray();
LABEL_30:
    v18 = *(_QWORD *)v31;
    goto LABEL_31;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 2;
  while (1)
  {
    if (v13 >= *(unsigned int *)(a2 + 20))
    {
      __break(0xC471u);
      return result;
    }
    result = WebCore::deserializeIDBValueWithKeyInjection(v3, (JSC::JSGlobalObject *)(*(_QWORD *)(a2 + 24) + v12), *(_QWORD *)(a2 + 8) + v11, (const WebCore::IDBValue *)(a2 + 40));
    if (!(_BYTE)v15)
      goto LABEL_30;
    v16 = v35;
    if ((_DWORD)v35 != HIDWORD(v35) && (v36 == (WTF *)((char *)v37 + 8) || !v36))
    {
      *((_QWORD *)v36 + v35) = result;
      LODWORD(v35) = v16 + 1;
      goto LABEL_17;
    }
    v17.super.isa = (Class)result;
    result = JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v35, v17);
    if ((_DWORD)result == 1)
      break;
LABEL_17:
    if (v34)
      goto LABEL_23;
    ++v13;
    v12 += 40;
    v11 += 32;
    if (v13 >= *(unsigned int *)(a2 + 36))
      goto LABEL_28;
  }
  v34 = 1;
LABEL_23:
  LOBYTE(v32) = 24;
  v33 = 0;
  v18 = *(_QWORD *)v31;
  if (!*((_QWORD *)*v4 + 2))
  {
    WebCore::propagateExceptionSlowPath(v3, v4, (unsigned __int8 *)&v32);
    v19 = v33;
    v33 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v14 = 2;
LABEL_31:
  v21 = *(uint64_t **)&v37[0];
  if (*(_QWORD *)&v37[0])
  {
    v32 = (WTF *)&v35;
    v28 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v37[0], (uint64_t *)&v32);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v21, v28);
  }
  if (v36 != (WTF *)((char *)v37 + 8) && v36)
    WTF::fastFree(v36, v15);
  if (*((_DWORD *)*v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(*v4) & 1) != 0)
    return 0;
  v22 = *((_QWORD *)v3 + 7);
  v23 = (uint64_t)WebCore::cloneAcrossWorlds(v3, (_DWORD *)v18, (JSC::JSCell *)v14);
  v7 = v23;
  if ((v23 & 0xFFFE000000000002) == 0)
  {
    Allocator = 0;
    *v6 = 0;
    if (v7)
    {
      if ((v7 & 8) != 0)
        v29 = (v7 - 112) | 1;
      else
        v29 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v29 & 1) != 0)
        v30 = v29 + 47;
      else
        v30 = *(_QWORD *)v29 + 32;
      Allocator = *(_QWORD **)(v30 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v30 + 16) = *Allocator;
      *Allocator = v7;
      Allocator[1] = 0;
      Allocator[2] = 0;
      v18 = *(_QWORD *)v31;
    }
    __dmb(0xAu);
    v25 = v6[1];
    v6[1] = (uint64_t)Allocator;
    if (v25)
    {
      *(_QWORD *)(v25 + 8) = 3;
      if (v7)
        goto LABEL_48;
    }
    else
    {
      if (!v7)
        goto LABEL_39;
LABEL_48:
      if (*(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v18 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v22 + 192), (const JSCell *)v18);
    }
LABEL_39:
    v7 = *v6;
LABEL_40:
    if (!v7)
    {
      v26 = (_BYTE *)v6[1];
      if (v26 && *(_QWORD *)v26)
      {
        if ((v26[8] & 3) != 0)
          return 10;
        else
          return *(_QWORD *)v26;
      }
      else
      {
        return 10;
      }
    }
    return v7;
  }
  *v6 = v23;
  v27 = v6[1];
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 3;
    v6[1] = 0;
    goto LABEL_39;
  }
  return v7;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;

  if ((*a2 & 0x80000000) != 0)
    v2 = COERCE__INT64((double)*a2) + 0x2000000000000;
  else
    v2 = *a2 | 0xFFFE000000000000;
  if (HIDWORD(*a2))
    return COERCE__INT64((double)*a2) + 0x2000000000000;
  else
    return v2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_0,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_1,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_2,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_3,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_4,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_5,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_6,WebCore::JSIDBRequest::result(JSC::JSGlobalObject &)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,WebCore::IDBKeyData,WTF::Vector<std::__variant_detail::_Trait<WebCore::IDBDatabase,WebCore::IDBCursor<WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::IDBCursor,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::IDBGetResult,WebCore::IDBGetAllResult,unsigned long long,WebCore::IDBRequest::NullResultType> &>(uint64_t a1, _DWORD *a2)
{
  if (*a2)
    return 10;
  else
    return 2;
}

uint64_t *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  char v26;
  int v27;
  char v28;
  unsigned int v29;
  _BOOL4 v30;
  uint64_t v31;

  v13 = result;
  if (a2)
    v14 = *(_DWORD *)(a2 + 4);
  else
    v14 = 0;
  if (a3)
    v15 = *(_DWORD *)(a3 + 4);
  else
    v15 = 0;
  if (a4)
    v16 = *(_DWORD *)(a4 + 4);
  else
    v16 = 0;
  if (a6)
    v17 = *(_DWORD *)(a6 + 4);
  else
    v17 = 0;
  v18 = *(_DWORD *)(a7 + 8);
  if ((v18 | v17) < 0)
    goto LABEL_37;
  v19 = *(_DWORD *)(a5 + 8);
  v20 = __OFADD__(v17, v18);
  v21 = v17 + v18;
  v22 = v20;
  if (v19 < 0 || v22)
    goto LABEL_37;
  v20 = __OFADD__(v19, v21);
  v23 = v19 + v21;
  v24 = v20;
  if (v16 < 0
    || v24
    || ((v20 = __OFADD__(v16, v23), v25 = v16 + v23, !v20) ? (v26 = 0) : (v26 = 1),
        v15 < 0
     || (v26 & 1) != 0
     || ((v20 = __OFADD__(v15, v25), v27 = v15 + v25, !v20) ? (v28 = 0) : (v28 = 1),
         v14 < 0 || (v28 & 1) != 0 || (v29 = v14 + v27, __OFADD__(v14, v27)))))
  {
LABEL_37:
    *result = 0;
  }
  else
  {
    v30 = WTF::are8Bit<WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &,WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &>(a2, a3, a4, a6);
    result = &v31;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v31, v29, v30, a2, a3, a4, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), a6, *(int8x16_t **)a7, *(_QWORD *)(a7 + 8));
    *v13 = v31;
  }
  return result;
}

BOOL WTF::are8Bit<WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &,WTF::StringTypeAdapter<WTF::String,void> &,WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (!a1 || (*(_BYTE *)(a1 + 16) & 4) != 0)
      && (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
      && (!a3 || (*(_BYTE *)(a3 + 16) & 4) != 0)
      && (!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_QWORD *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x16_t *a7, unsigned int a8, uint64_t a9, int8x16_t *a10, uint64_t a11)
{
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v18 = v20;
        if (v20)
        {
          *(_DWORD *)v20 = 2;
          *(_DWORD *)(v20 + 4) = a2;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v20 + 20), a4, a5, a6, a7, a8, a9, v17, a10, a11);
        }
        goto LABEL_6;
      }
LABEL_12:
      v18 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_11;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_12;
  WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v18 = v20;
  if (v20)
  {
    *(_DWORD *)v20 = 2;
    *(_DWORD *)(v20 + 4) = a2;
    *(_QWORD *)(v20 + 8) = v20 + 20;
    *(_DWORD *)(v20 + 16) = 0;
    WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v20 + 20), a4, a5, a6, a7, a8, a9, v19, a10, a11);
  }
LABEL_6:
  *a1 = v18;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, unsigned int a6, uint64_t a7, int a8, _BYTE *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v18;

  v18 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v18, __dst);
  v16 = v18;
  if (v18)
    v16 = *(unsigned int *)(v18 + 4);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[v16], a3, a4, a5, a6, a7, a9, a10);
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, int a8, int8x16_t *a9, uint64_t a10)
{
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  int8x16_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  char *v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  if (a2)
  {
    v17 = *(int8x16_t **)(a2 + 8);
    v18 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v19 = &__dst[2 * v18];
      if (v18 >= 0x40)
      {
        v20 = &__dst[2 * (v18 & 0xFFFFFFC0)];
        v22 = 0uLL;
        v23 = __dst;
        do
        {
          v47.val[0] = *v17;
          v24 = v17[1];
          v49.val[0] = v17[2];
          v25 = v17[3];
          v17 += 4;
          v26 = v25;
          v49.val[1] = 0uLL;
          v51.val[0] = v24;
          v47.val[1] = 0uLL;
          v27 = v23;
          vst2q_s8(v27, v47);
          v27 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v27, v51);
          v28 = v23 + 64;
          vst2q_s8(v28, v49);
          v29 = v23 + 96;
          vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
          v23 += 128;
        }
        while (v23 != v20);
      }
      else
      {
        v20 = __dst;
      }
      while (v20 != v19)
      {
        v30 = v17->u8[0];
        v17 = (int8x16_t *)((char *)v17 + 1);
        *(_WORD *)v20 = v30;
        v20 += 2;
      }
    }
    else if ((_DWORD)v18 == 1)
    {
      *(_WORD *)__dst = v17->i16[0];
    }
    else if ((_DWORD)v18)
    {
      memcpy(__dst, v17, 2 * v18);
    }
    v21 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v21 = 0;
  }
  v31 = &__dst[2 * v21];
  if (a3)
  {
    v32 = *(int8x16_t **)(a3 + 8);
    v33 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v34 = &v31[2 * v33];
      if (v33 >= 0x40)
      {
        v35 = &v31[2 * (v33 & 0xFFFFFFC0)];
        v37 = 0uLL;
        v38 = v31;
        do
        {
          v48.val[0] = *v32;
          v39 = v32[1];
          v50.val[0] = v32[2];
          v40 = v32[3];
          v32 += 4;
          v41 = v40;
          v50.val[1] = 0uLL;
          v52.val[0] = v39;
          v48.val[1] = 0uLL;
          v42 = v38;
          vst2q_s8(v42, v48);
          v42 += 32;
          v52.val[1] = 0uLL;
          vst2q_s8(v42, v52);
          v43 = v38 + 64;
          vst2q_s8(v43, v50);
          v44 = v38 + 96;
          vst2q_s8(v44, *(int8x16x2_t *)(&v37 - 1));
          v38 += 128;
        }
        while (v38 != v35);
      }
      else
      {
        v35 = v31;
      }
      while (v35 != v34)
      {
        v45 = v32->u8[0];
        v32 = (int8x16_t *)((char *)v32 + 1);
        *(_WORD *)v35 = v45;
        v35 += 2;
      }
    }
    else if ((_DWORD)v33 == 1)
    {
      *(_WORD *)v31 = v32->i16[0];
    }
    else if ((_DWORD)v33)
    {
      memcpy(v31, v32, 2 * v33);
    }
    v36 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v36 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v31[2 * v36], a4, a5, a6, a7, a9, a10);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, _BYTE *a4, unsigned int a5, uint64_t a6, _BYTE *a7, unsigned int a8)
{
  uint64_t v15;
  uint64_t v17;

  v17 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v17, __dst);
  v15 = v17;
  if (v17)
    v15 = *(unsigned int *)(v17 + 4);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[v15], a3, a4, a5, a6, a7, a8);
}

uint64_t WebCore::JSMediaSource::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaSource *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;

  v5 = (WebCore::JSMediaSource *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaSource::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v11 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v11);
    v6[5] = SlowCase + (int)v11;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = v8 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v9;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::MediaSource,WebCore::JSMediaSource>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE337B10 & 1) == 0)
  {
    qword_1EE337B08 = (uint64_t)&off_1E32B7C50;
    byte_1EE337B10 = 1;
  }
  v3 = (_QWORD *)(a2 + 48);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE337B08;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE337B08;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::MessageEvent::JSValueTag)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::String const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WTF::String,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE *v3;

  v1 = *(_QWORD *)(**(_QWORD **)a1 + 24);
  result = *(_QWORD *)(v1 + 144);
  if (!result)
  {
    v3 = *(_BYTE **)(v1 + 152);
    if (v3 && *(_QWORD *)v3)
    {
      if ((v3[8] & 3) != 0)
        return 2;
      else
        return *(_QWORD *)v3;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::MessageEvent::JSValueTag)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::String const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WTF::String,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14[2];
  WTF *v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = *(WTF::StringImpl **)(v2 + 16);
  v6 = *(_DWORD **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v7 = *(_QWORD *)(v5 + 24) + 128;
  v15 = 0;
  v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v9 = WebCore::SerializedScriptValue::deserialize(v3, v4, v6, v7, (uint64_t)&v15, v14, 0, 0);
  v10 = v15;
  if (!HIDWORD(v16))
  {
    if (!v15)
      return v9;
LABEL_12:
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree(v10, v8);
    return v9;
  }
  v12 = 8 * HIDWORD(v16);
  do
  {
    v13 = *(WTF::StringImpl **)v10;
    *(_QWORD *)v10 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v10 = (WTF *)((char *)v10 + 8);
    v12 -= 8;
  }
  while (v12);
  v10 = v15;
  if (v15)
    goto LABEL_12;
  return v9;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::MessageEvent::JSValueTag)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::String const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WTF::String,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 56);
  if (!v2)
    return *(_QWORD *)(v3 + 41968);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::MessageEvent::JSValueTag)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::String const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WTF::String,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> const&>(uint64_t a1, uint64_t *a2)
{
  return WebCore::wrap<WebCore::Blob>(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_QWORD *)(16 * (**(_DWORD **)(*(_QWORD *)a1 + 32) & 0xFFFFFFFE) + 0x28), *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::MessageEvent::JSValueTag)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::String const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>> const&)#1},WebCore::JSMessageEvent::data(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MessageEvent::JSValueTag,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,WTF::String,WTF::Ref<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> const&>(uint64_t a1, WebCore::JSDOMGlobalObject **a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  return WebCore::toJS(*(WebCore **)(*(_QWORD *)a1 + 56), *(_QWORD *)(16 * (**(_DWORD **)(*(_QWORD *)a1 + 48) & 0xFFFFFFFE) + 0x28), *a2, a4);
}

unint64_t WebCore::JSNodeList::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSNodeList *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  WebCore::JSHTMLCollection *v8;
  uint64_t v9;
  unint64_t v11;

  v5 = (WebCore::JSNodeList *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSNodeList::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase >= v6[4])
  {
    SlowCase = v6[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v11);
    v6[5] = SlowCase + (int)v11;
  }
  v6[3] = SlowCase + 32;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = (WebCore::JSHTMLCollection *)WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(SlowCase + 24) = v9;
  WebCore::JSHTMLCollection::finishCreation(v8, v5);
  return SlowCase;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSPaymentMethodChangeEvent::methodDetails(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::JSValueInWrappedObject const&)#1},WebCore::JSPaymentMethodChangeEvent::methodDetails(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::JSValueInWrappedObject,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _BYTE *v3;

  result = *a2;
  if (!*a2)
  {
    v3 = (_BYTE *)a2[1];
    if (v3 && *(_QWORD *)v3)
    {
      if ((v3[8] & 3) != 0)
        return 2;
      else
        return *(_QWORD *)v3;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::JSPaymentMethodChangeEvent::methodDetails(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(WebCore::JSValueInWrappedObject const&)#1},WebCore::JSPaymentMethodChangeEvent::methodDetails(JSC::JSGlobalObject &)::$_0::operator() const(JSC::ThrowScope &)::{lambda(std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::JSValueInWrappedObject,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>> const&>(_QWORD **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    (*(void (**)(uint64_t **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(&v11, v3, **a1);
    if (v11)
    {
      v4 = v11 - 2;
      v5 = *(_QWORD *)(((unint64_t)(v11 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v7 = (uint64_t *)*(v11 - 1);
      result = *v11;
      if (v7)
      {
        v8 = *v4;
        *v7 = *v4;
        *(_QWORD *)(v8 + 8) = v7;
        *v4 = 0;
        v4[1] = 0;
      }
      *v4 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v9 = (uint64_t **)std::__throw_bad_function_call[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(WebCore::JSValueInWrappedObject const&)#1},void WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::JSValueInWrappedObject,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>> const&>(v9, v10);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(WebCore::JSValueInWrappedObject const&)#1},void WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::JSValueInWrappedObject,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = **a1;
  v3 = *(uint64_t **)(a2 + 8);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(WebCore::JSValueInWrappedObject const&)#1},void WebCore::JSPaymentMethodChangeEvent::visitAdditionalChildren<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::JSValueInWrappedObject,std::function<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0> ()(JSC::JSGlobalObject &)>> const&>(uint64_t **a1, uint64_t a2)
{
  return WebCore::JSValueInWrappedObject::visit<JSC::SlotVisitor>(a2, **a1);
}

uint64_t WebCore::createWrapper<WebCore::PerformanceNavigationTiming,WebCore::PerformanceNavigationTiming>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSPerformanceNavigationTiming>(*(WebCore::JSPerformanceNavigationTiming **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSPerformanceNavigationTiming::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::PerformanceNavigationTiming,WebCore::JSPerformanceNavigationTiming>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSPerformanceNavigationTiming::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPerformanceNavigationTiming *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSPerformanceNavigationTiming *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSPerformanceNavigationTiming>(v6, a2);
  result = WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(v7, a1, (uint64_t)a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::PerformanceNavigationTiming,WebCore::JSPerformanceNavigationTiming>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner = (uint64_t)&off_1E32CD620;
  }
  v3 = (uint64_t *)(a1 + 32);
  v6 = a2;
  JSC::Weak<JSC::JSObject>::Weak(&v5, a3, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PerformanceEntry *)::owner, a1);
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v3, &v6, &v5);
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSPerformanceNavigationTiming>(WebCore::JSPerformanceNavigationTiming *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSPerformanceNavigationTiming::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::createWrapper<WebCore::PerformancePaintTiming,WebCore::PerformancePaintTiming>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSPerformancePaintTiming>(*(WebCore::JSPerformancePaintTiming **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSPerformancePaintTiming::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::PerformanceNavigationTiming,WebCore::JSPerformanceNavigationTiming>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSPerformancePaintTiming::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPerformancePaintTiming *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSPerformancePaintTiming *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSPerformancePaintTiming>(v6, a2);
  result = WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(v7, a1, (uint64_t)a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSPerformancePaintTiming>(WebCore::JSPerformancePaintTiming *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSPerformancePaintTiming::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

unint64_t WebCore::JSManagedSourceBuffer::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSManagedSourceBuffer *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v5 = (WebCore::JSManagedSourceBuffer *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSManagedSourceBuffer::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v12 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v12);
    v6[5] = SlowCase + (int)v12;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = v8 + 40;
  v10 = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(SlowCase + 24) = v9;
  WebCore::JSSourceBuffer::finishCreation(v10, v5);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(SlowCase + 24) + 272) + 400) >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return SlowCase;
}

_QWORD *WebCore::cacheWrapper<WebCore::ManagedSourceBuffer,WebCore::JSManagedSourceBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE337B70 & 1) == 0)
  {
    qword_1EE337B68 = (uint64_t)&unk_1E32B7DB0;
    byte_1EE337B70 = 1;
  }
  v3 = (_QWORD *)(a2 + 48);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE337B68;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE337B68;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

unint64_t WebCore::JSSourceBuffer::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSourceBuffer *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v5 = (WebCore::JSSourceBuffer *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSourceBuffer::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase >= v6[4])
  {
    SlowCase = v6[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v12);
    v6[5] = SlowCase + (int)v12;
  }
  v6[3] = SlowCase + 32;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = v8 + 40;
  v10 = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(SlowCase + 24) = v9;
  WebCore::JSSourceBuffer::finishCreation(v10, v5);
  return SlowCase;
}

_QWORD *WebCore::cacheWrapper<WebCore::SourceBuffer,WebCore::JSSourceBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE337B80 & 1) == 0)
  {
    qword_1EE337B78 = (uint64_t)&unk_1E330CBB0;
    byte_1EE337B80 = 1;
  }
  v3 = (_QWORD *)(a2 + 48);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE337B78;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE337B78;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSStyleSheet::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CSSRule *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
  if (v4)
  {
    result = WebCore::root(v4, v5);
    v3 = result;
    goto LABEL_23;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (result)
  {
    if ((*(_BYTE *)(result + 22) & 8) == 0)
    {
      while (1)
      {
        v3 = result;
        if ((*(_WORD *)(result + 28) & 0x80) != 0)
        {
          v16 = *(_QWORD *)(result + 200);
          if (!v16)
            goto LABEL_3;
          v15 = (uint64_t *)(v16 + 8);
        }
        else
        {
          v15 = (uint64_t *)(result + 32);
        }
        result = *v15;
        if (!*v15)
          goto LABEL_3;
      }
    }
    v3 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
LABEL_23:
    if (!v3)
      return result;
  }
LABEL_3:
  if (!*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v3 == v14)
        return result;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D1648);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSStyleSheet::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CSSRule *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
  if (v4)
  {
    result = WebCore::root(v4, v5);
    v3 = result;
    goto LABEL_15;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (result)
  {
    if ((*(_BYTE *)(result + 22) & 8) == 0)
    {
      while (1)
      {
        v3 = result;
        if ((*(_WORD *)(result + 28) & 0x80) != 0)
        {
          v16 = *(_QWORD *)(result + 200);
          if (!v16)
            goto LABEL_3;
          v15 = (uint64_t *)(v16 + 8);
        }
        else
        {
          v15 = (uint64_t *)(result + 32);
        }
        result = *v15;
        if (!*v15)
          goto LABEL_3;
      }
    }
    v3 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
LABEL_15:
    if (!v3)
      return result;
  }
LABEL_3:
  if (!*(_BYTE *)(a2 + 130))
  {
    result = *(_QWORD *)(a2 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v3 == v14)
        return result;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D17ACLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v3);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::StyleSheet>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  JSC::VM *v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *Allocator;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t Prototype;
  unint64_t v34;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _QWORD *v48;
  uint64_t v49;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3))
  {
    v47 = (_DWORD *)a3;
    v17 = WebCore::getDOMStructure<WebCore::JSCSSStyleSheet>(*(WebCore::JSCSSStyleSheet **)(a2 + 56), (JSC::VM *)a2, v16);
    v18 = WebCore::JSCSSStyleSheet::create(v17, (JSC::VM *)a2, (uint64_t *)&v47);
    v14 = v18;
    v19 = *(_QWORD *)(a2 + 3320);
    {
      WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::StyleSheet *)::owner = (uint64_t)&off_1E330D1B0;
    }
    v49 = a3;
    if (v18)
    {
      if ((v18 & 8) != 0)
        v45 = (v18 - 112) | 1;
      else
        v45 = v18 & 0xFFFFFFFFFFFFC000;
      if ((v45 & 1) != 0)
        v46 = v45 + 47;
      else
        v46 = *(_QWORD *)v45 + 32;
      Allocator = *(_QWORD **)(v46 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v46 + 16) = *Allocator;
      *Allocator = v14;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::StyleSheet *)::owner;
      Allocator[2] = v19;
    }
    else
    {
      Allocator = 0;
    }
    v48 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v19 + 32), &v49, (uint64_t *)&v48);
    if (v48)
      v48[1] = 3;
    v21 = v47;
    v47 = 0;
    if (v21)
    {
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[2];
    }
    return v14;
  }
  v22 = *(_QWORD *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 3296);
  if (v23)
  {
    v24 = *(_DWORD *)(v23 - 8);
    v25 = ((unint64_t)&WebCore::JSStyleSheet::s_info + ~((_QWORD)&WebCore::JSStyleSheet::s_info << 32)) ^ (((unint64_t)&WebCore::JSStyleSheet::s_info + ~((_QWORD)&WebCore::JSStyleSheet::s_info << 32)) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    v29 = *(char ***)(v23 + 16 * v28);
    if (v29 == &WebCore::JSStyleSheet::s_info)
    {
LABEL_24:
      v31 = *(_QWORD *)(v23 + 16 * v28 + 8);
      if (v31)
        goto LABEL_33;
    }
    else
    {
      v30 = 1;
      while (v29)
      {
        v28 = ((_DWORD)v28 + v30) & v24;
        v29 = *(char ***)(v23 + 16 * v28);
        ++v30;
        if (v29 == &WebCore::JSStyleSheet::s_info)
          goto LABEL_24;
      }
    }
  }
  v32 = (uint64_t *)(v22 + 40136);
  Prototype = WebCore::JSStyleSheet::createPrototype(*(WebCore::JSStyleSheet **)(a2 + 56), (JSC::JSCell **)a2, v16);
  v34 = Prototype;
  LODWORD(v49) = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v22);
  }
  SlowCase = *v32;
  if ((unint64_t)*v32 >= *(_QWORD *)(v22 + 40144))
  {
    SlowCase = *(_QWORD *)(v22 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_30;
    }
    v44 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v22 + 40160);
    *(_QWORD *)(v22 + 40144) = SlowCase + HIDWORD(v44);
    *(_QWORD *)(v22 + 40152) = SlowCase + (int)v44;
  }
  *v32 = SlowCase + 128;
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v22, a2, v34, &v49, &WebCore::JSStyleSheet::s_info, 0, 0);
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v31 = WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSStyleSheet::s_info);
  v22 = *(_QWORD *)(a2 + 56);
LABEL_33:
  v37 = (_QWORD *)WebCore::JSStyleSheet::subspaceForImpl((WebCore::JSStyleSheet *)v22, v15);
  v14 = v37[3];
  if (v14 >= v37[4])
  {
    v14 = v37[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v43 = *(_QWORD *)(v14 + 8) ^ v37[6];
    v37[4] = v14 + HIDWORD(v43);
    v37[5] = v14 + (int)v43;
  }
  v37[3] = v14 + 32;
LABEL_35:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v31);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a2 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::StyleSheet *)::owner = (uint64_t)&off_1E330D1B0;
  }
  v49 = a3;
  if ((v14 & 8) != 0)
    v39 = (v14 - 112) | 1;
  else
    v39 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  v41 = *(_QWORD **)(v40 + 16);
  if (!v41)
    v41 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *v41;
  *v41 = v14;
  v41[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::StyleSheet *)::owner;
  v41[2] = v38;
  v48 = v41;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), &v49, (uint64_t *)&v48);
  if (v48)
    v48[1] = 3;
  return v14;
}

uint64_t WebCore::toJSNewlyCreated(int a1, JSC::VM *a2, WebCore::Node **a3)
{
  WebCore::Node *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSText *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v17;
  int v19;

  v5 = *a3;
  if ((*((_WORD *)*a3 + 14) & 0xF000) == 0x4000)
    return WebCore::createWrapper<WebCore::CDATASection,WebCore::Text>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  v6 = *((_QWORD *)a2 + 412);
  if (!v6)
    goto LABEL_5;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSText::s_info + ~((_QWORD)&WebCore::JSText::s_info << 32)) ^ (((unint64_t)&WebCore::JSText::s_info
                                                                                                  + ~((_QWORD)&WebCore::JSText::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSText::s_info)
  {
    v19 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v19) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v19;
      if (v12 == &WebCore::JSText::s_info)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_5:
    v14 = (WebCore::JSText *)*((_QWORD *)a2 + 7);
    Prototype = (JSC::JSCell *)WebCore::JSText::createPrototype(v14, a2, (WebCore::JSDOMGlobalObject *)a3);
    Structure = WebCore::JSText::createStructure((uint64_t *)v14, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSText::s_info);
  }
  v17 = WebCore::JSText::create(v13, a2, (uint64_t *)a3);
  WebCore::cacheWrapper<WebCore::Text,WebCore::JSText>(*((_QWORD *)a2 + 415), (uint64_t)v5, v17);
  return v17;
}

uint64_t WebCore::createWrapper<WebCore::CDATASection,WebCore::Text>(JSC::VM *a1, WebCore::Node **a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSText *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WebCore::Node *v22;
  WebCore::Node *v24;

  v4 = *a2;
  *a2 = 0;
  v24 = v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSCDATASection::s_info + ~((_QWORD)&WebCore::JSCDATASection::s_info << 32)) ^ (((unint64_t)&WebCore::JSCDATASection::s_info + ~((_QWORD)&WebCore::JSCDATASection::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSCDATASection::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSCDATASection::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSText *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSText::prototype(v14, a1, a3);
  Structure = WebCore::JSCDATASectionPrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSCDATASectionPrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSCDATASection::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSCDATASection::s_info);
LABEL_8:
  v20 = WebCore::JSCDATASection::create(v13, a1, (uint64_t *)&v24);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a1 + 415), (uint64_t)v4, v20);
  v22 = v24;
  v24 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22, v21);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  return v20;
}

uint64_t WebCore::wrap<WebCore::Text>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::Node *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v9 + 16 * v14);
      if (v15 == a3)
      {
LABEL_16:
        v4 = *(_QWORD *)(v9 + 16 * v14 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v9 + 16 * v14);
          ++v16;
          if (v15 == a3)
            goto LABEL_16;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  *(_DWORD *)(a3 + 24) += 2;
  v17 = (WebCore::Node *)a3;
  v5 = WebCore::toJSNewlyCreated(a1, a2, &v17);
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v5;
}

uint64_t WebCore::JSTextTrackCue::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = v3 - 120;
      v6 = *(_QWORD *)(v3 - 16);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 80);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            v5 = v7;
            if (v9)
            {
              result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8));
              v5 = result;
            }
          }
          else
          {
            v5 = v7;
          }
        }
      }
      if (v5 && *(_BYTE *)(a2 + 130) == 0)
      {
        result = *(_QWORD *)(a2 + 120);
        v11 = *(_QWORD *)(result + 48);
        v12 = *(_DWORD *)(v11 + 4);
        v13 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = v16;
        while (1)
        {
          v18 = *(_QWORD *)(v11 + 8 * v17 + 16);
          if (!v18)
            break;
          if (v5 == v18)
            return result;
          v17 = (v17 + 1) & v12;
          if (v17 == v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1956D21F0);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::JSTextTrackCueOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::ConcurrentPtrHashSet *v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v7 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v8 = v7[5];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 180) && (v7[6] || (*(unsigned int (**)(_QWORD *))(v7[4] + 64))(v7 + 4)))
      {
        if (a5)
        {
          *a5 = "TextTrackCue with pending activity";
          a5[1] = 35;
        }
        return 1;
      }
    }
  }
  v10 = v7[13];
  if (!v10 || !*(_QWORD *)(v10 + 8))
    return 0;
  if (!a5 || (*a5 = "TextTrack is an opaque root", a5[1] = 28, (v10 = v7[13]) != 0))
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v12 = v11 - 120;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(v12 + 104);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 80);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        v12 = v14;
        if (v16)
          v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 8) + 16))(*(_QWORD *)(v16 + 8), v14);
      }
      else
      {
        v12 = v14;
      }
    }
  }
  v17 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v18 = (_DWORD *)*((_QWORD *)v17 + 6);
  if ((_DWORD *)((char *)v17 + 56) != v18)
  {
    v19 = v18[1];
    v20 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = v23;
    while (1)
    {
      v25 = *(_QWORD *)&v18[2 * v24 + 4];
      if (!v25)
        return 0;
      if (v12 == v25)
        goto LABEL_31;
      v24 = (v24 + 1) & v19;
      if (v24 == v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D239CLL);
      }
    }
  }
  v27 = v12;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v17, (void *)v12);
  v12 = v27;
  if ((_DWORD)result)
  {
LABEL_31:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v12);
    return 1;
  }
  return result;
}

uint64_t WebCore::createWrapper<WebCore::DataCue,WebCore::TextTrackCue>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSTextTrackCue *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v23;

  v4 = *a2;
  *a2 = 0;
  v23 = (_DWORD *)v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSDataCue::s_info + ~((_QWORD)&WebCore::JSDataCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSDataCue::s_info + ~((_QWORD)&WebCore::JSDataCue::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSDataCue::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSDataCue::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSTextTrackCue *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSTextTrackCue::prototype(v14, a1, a3);
  Structure = WebCore::JSDataCuePrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSDataCuePrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSDataCue::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSDataCue::s_info);
LABEL_8:
  v20 = WebCore::JSDataCue::create(v13, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::DataCue,WebCore::JSDataCue>(*((_QWORD *)a1 + 415), v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (v21[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
    else
      --v21[6];
  }
  return v20;
}

uint64_t WebCore::createWrapper<WebCore::VTTCue,WebCore::TextTrackCue>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  WebCore::JSTextTrackCue *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v23;

  v4 = *a2;
  *a2 = 0;
  v23 = (_DWORD *)v4;
  v5 = *((_QWORD *)a1 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) ^ (((unint64_t)&WebCore::JSVTTCue::s_info + ~((_QWORD)&WebCore::JSVTTCue::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSVTTCue::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSVTTCue::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (WebCore::JSTextTrackCue *)*((_QWORD *)a1 + 7);
  v15 = (JSC::JSCell *)WebCore::JSTextTrackCue::prototype(v14, a1, a3);
  Structure = WebCore::JSVTTCuePrototype::createStructure((uint64_t *)v14, (uint64_t)a1, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSVTTCuePrototype::create(v14, a1, Structure, v17);
  v19 = WebCore::JSVTTCue::createStructure((uint64_t *)v14, (uint64_t)a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSVTTCue::s_info);
LABEL_8:
  v20 = WebCore::JSVTTCue::create(v13, a1, (uint64_t *)&v23);
  WebCore::cacheWrapper<WebCore::DataCue,WebCore::JSDataCue>(*((_QWORD *)a1 + 415), v4, v20);
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (v21[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
    else
      --v21[6];
  }
  return v20;
}

uint64_t WebCore::wrap<WebCore::TextTrackCue>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v16 = (_DWORD *)a3;
  v5 = WebCore::toJSNewlyCreated(a1, a2, (uint64_t *)&v16);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
    else
      --v6[6];
  }
  return v5;
}

uint64_t WebCore::JSTreeWalker::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 24);
  if (v2)
    v3 = *(_BYTE *)(a2 + 130) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v2 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D2A58);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v2);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSTreeWalker::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, JSC::AbstractSlotVisitor *this)
{
  void *v2;

  v2 = *(void **)(*(_QWORD *)(result + 24) + 24);
  if (v2)
    return JSC::AbstractSlotVisitor::addOpaqueRoot(this, v2);
  return result;
}

uint64_t WebCore::JSTrustedTypePolicy::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;

  v3 = result;
  v4 = (unsigned __int8 *)(*(_QWORD *)(result + 24) + 48);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_5:
  v6 = *(_QWORD **)(v3 + 24);
  v7 = (_DWORD *)v6[3];
  if (v7)
    ++v7[4];
  v8 = (_DWORD *)v6[4];
  if (v8)
    ++v8[4];
  v9 = (_DWORD *)v6[5];
  if (v9)
    ++v9[4];
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
LABEL_14:
    result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 24))(v7, a2);
LABEL_15:
  if (v8)
    result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v8 + 24))(v8, a2);
  if (v9)
  {
    result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2);
    if (v9[4] == 1)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      if (!v8)
        goto LABEL_23;
      goto LABEL_21;
    }
    --v9[4];
  }
  if (!v8)
    goto LABEL_23;
LABEL_21:
  if (v8[4] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
  else
    --v8[4];
LABEL_23:
  if (v7)
  {
    if (v7[4] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicy::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;

  v3 = result;
  v4 = (unsigned __int8 *)(*(_QWORD *)(result + 24) + 48);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_5:
  v6 = *(_QWORD **)(v3 + 24);
  v7 = (_DWORD *)v6[3];
  if (v7)
    ++v7[4];
  v8 = (_DWORD *)v6[4];
  if (v8)
    ++v8[4];
  v9 = (_DWORD *)v6[5];
  if (v9)
    ++v9[4];
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
LABEL_14:
    result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
LABEL_15:
  if (v8)
    result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  if (v9)
  {
    result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
    if (v9[4] == 1)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      if (!v8)
        goto LABEL_23;
      goto LABEL_21;
    }
    --v9[4];
  }
  if (!v8)
    goto LABEL_23;
LABEL_21:
  if (v8[4] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
  else
    --v8[4];
LABEL_23:
  if (v7)
  {
    if (v7[4] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  return result;
}

uint64_t WebCore::JSTrustedTypePolicyFactory::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 32);
  if (v2)
    v3 = *(_BYTE *)(a2 + 130) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v2 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D2E84);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v2);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSUndoItemOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF::ConcurrentPtrHashSet *v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  if (a5)
  {
    *a5 = "Document is an opaque root.";
    a5[1] = 28;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 48);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if ((*(_BYTE *)(v6 + 22) & 8) == 0)
    {
      while (1)
      {
        v7 = (void *)v6;
        if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
        {
          v19 = *(_QWORD *)(v6 + 200);
          if (!v19)
            goto LABEL_6;
          v18 = (uint64_t *)(v19 + 8);
        }
        else
        {
          v18 = (uint64_t *)(v6 + 32);
        }
        v6 = *v18;
        if (!v6)
          goto LABEL_6;
      }
    }
    v7 = *(void **)(*(_QWORD *)(v6 + 40) + 8);
  }
  else
  {
    v7 = 0;
  }
LABEL_6:
  v8 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v9 = (_DWORD *)*((_QWORD *)v8 + 6);
  if ((_DWORD *)((char *)v8 + 56) == v9)
  {
    v20 = a4;
    v21 = v7;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v8, v7);
    a4 = v20;
    v7 = v21;
    if ((_DWORD)result)
    {
LABEL_15:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v7);
      return 1;
    }
  }
  else
  {
    v10 = v9[1];
    v11 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(void **)&v9[2 * v15 + 4];
      if (!v16)
        return 0;
      if (v16 == v7)
        goto LABEL_15;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D2F8CLL);
      }
    }
  }
  return result;
}

unint64_t WebCore::toJSNewlyCreated(JSC::VM *a1, uint64_t *a2)
{
  int v4;
  JSC::VM *v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSWebAnimation *v17;
  JSC::JSCell *v18;
  unint64_t v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  WebCore::JSCSSAnimation *v23;
  _QWORD *v24;
  unint64_t SlowCase;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v33;
  JSC::VM *v34;
  WebCore::JSDOMGlobalObject *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  int v44;
  unint64_t v45;
  WebCore::JSWebAnimation *v46;
  JSC::JSCell *v47;
  unint64_t Structure;
  JSC::Structure *v49;
  JSC::JSCell *v50;
  uint64_t v51;
  WebCore::JSCSSTransition *v52;
  _QWORD *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *Allocator;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  int v67;
  unint64_t v68;
  WebCore::JSEventTarget *v69;
  JSC::JSCell *v70;
  unint64_t v71;
  JSC::Structure *v72;
  JSC::JSCell *v73;
  uint64_t v74;
  WebCore::JSWebAnimation *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 112))(*a2);
  v7 = *a2;
  if (!v4)
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(*a2);
    v36 = *a2;
    if (v33)
    {
      *a2 = 0;
      v37 = *((_QWORD *)a1 + 412);
      if (v37)
      {
        v38 = *(_DWORD *)(v37 - 8);
        v39 = ((unint64_t)&WebCore::JSCSSTransition::s_info + ~((_QWORD)&WebCore::JSCSSTransition::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSTransition::s_info + ~((_QWORD)&WebCore::JSCSSTransition::s_info << 32)) >> 22);
        v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
        v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
        v42 = v38 & ((v41 >> 31) ^ v41);
        v43 = *(char ***)(v37 + 16 * v42);
        if (v43 == &WebCore::JSCSSTransition::s_info)
        {
LABEL_34:
          v45 = *(_QWORD *)(v37 + 16 * v42 + 8);
          if (v45)
            goto LABEL_36;
        }
        else
        {
          v44 = 1;
          while (v43)
          {
            v42 = ((_DWORD)v42 + v44) & v38;
            v43 = *(char ***)(v37 + 16 * v42);
            ++v44;
            if (v43 == &WebCore::JSCSSTransition::s_info)
              goto LABEL_34;
          }
        }
      }
      v46 = (WebCore::JSWebAnimation *)*((_QWORD *)a1 + 7);
      v47 = (JSC::JSCell *)WebCore::JSWebAnimation::prototype(v46, a1, v35);
      Structure = WebCore::JSCSSTransitionPrototype::createStructure((uint64_t *)v46, (uint64_t)a1, v47);
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v50 = (JSC::JSCell *)WebCore::JSCSSTransitionPrototype::create(v46, a1, Structure, v49);
      v51 = WebCore::JSCSSTransition::createStructure((uint64_t *)v46, (uint64_t)a1, v50);
      v45 = WebCore::cacheDOMStructure((JSCell *)a1, v51, (uint64_t)&WebCore::JSCSSTransition::s_info);
LABEL_36:
      v52 = (WebCore::JSCSSTransition *)*((_QWORD *)a1 + 7);
      v53 = (_QWORD *)WebCore::JSCSSTransition::subspaceForImpl(v52, v34);
      SlowCase = v53[3];
      if (SlowCase >= v53[4])
      {
        SlowCase = v53[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_38;
        }
        v89 = *(_QWORD *)(SlowCase + 8) ^ v53[6];
        v53[4] = SlowCase + HIDWORD(v89);
        v53[5] = SlowCase + (int)v89;
      }
      v53[3] = SlowCase + 32;
LABEL_38:
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v45);
      *(_QWORD *)(SlowCase + 24) = v36;
      if (*((_BYTE *)v52 + 755))
        __dmb(0xAu);
      v26 = *((_QWORD *)a1 + 415);
      if ((byte_1ECE82888 & 1) == 0)
      {
        qword_1ECE82880 = (uint64_t)&off_1E324AB40;
        byte_1ECE82888 = 1;
      }
      if (v36)
        v54 = (uint64_t *)(v36 + 8);
      else
        v54 = 0;
      if (!*(_DWORD *)(v26 + 48))
      {
        if ((SlowCase & 8) != 0)
          v55 = (SlowCase - 112) | 1;
        else
          v55 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v55 & 1) != 0)
          v56 = v55 + 47;
        else
          v56 = *(_QWORD *)v55 + 32;
        Allocator = *(uint64_t **)(v56 + 16);
        if (!Allocator)
          Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
        v58 = *Allocator;
        v59 = &qword_1ECE82880;
        goto LABEL_79;
      }
      v79 = (uint64_t *)(v26 + 32);
      v92 = v36;
      if ((SlowCase & 8) != 0)
        v84 = (SlowCase - 112) | 1;
      else
        v84 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v84 & 1) != 0)
        v85 = v84 + 47;
      else
        v85 = *(_QWORD *)v84 + 32;
      v82 = *(_QWORD **)(v85 + 16);
      if (!v82)
        v82 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v85 + 16) = *v82;
      v83 = &qword_1ECE82880;
      goto LABEL_105;
    }
    v60 = *((_QWORD *)a1 + 412);
    if (v60)
    {
      v61 = *(_DWORD *)(v60 - 8);
      v62 = ((unint64_t)&WebCore::JSWebAnimation::s_info + ~((_QWORD)&WebCore::JSWebAnimation::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebAnimation::s_info + ~((_QWORD)&WebCore::JSWebAnimation::s_info << 32)) >> 22);
      v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
      v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
      v65 = v61 & ((v64 >> 31) ^ v64);
      v66 = *(char ***)(v60 + 16 * v65);
      if (v66 == &WebCore::JSWebAnimation::s_info)
      {
LABEL_59:
        v68 = *(_QWORD *)(v60 + 16 * v65 + 8);
        if (v68)
          goto LABEL_61;
      }
      else
      {
        v67 = 1;
        while (v66)
        {
          v65 = ((_DWORD)v65 + v67) & v61;
          v66 = *(char ***)(v60 + 16 * v65);
          ++v67;
          if (v66 == &WebCore::JSWebAnimation::s_info)
            goto LABEL_59;
        }
      }
    }
    v69 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
    v70 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v69, a1, v35);
    v71 = WebCore::JSWebAnimationPrototype::createStructure((uint64_t *)v69, (uint64_t)a1, v70);
    *(_DWORD *)(v71 + 16) |= 0x80000u;
    v73 = (JSC::JSCell *)WebCore::JSWebAnimationPrototype::create(v69, a1, v71, v72);
    v74 = WebCore::JSWebAnimation::createStructure((uint64_t *)v69, (uint64_t)a1, v73);
    v68 = WebCore::cacheDOMStructure((JSCell *)a1, v74, (uint64_t)&WebCore::JSWebAnimation::s_info);
LABEL_61:
    v75 = (WebCore::JSWebAnimation *)*((_QWORD *)a1 + 7);
    v76 = (_QWORD *)WebCore::JSWebAnimation::subspaceForImpl(v75, v34);
    SlowCase = v76[3];
    if (SlowCase >= v76[4])
    {
      SlowCase = v76[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_63;
      }
      v90 = *(_QWORD *)(SlowCase + 8) ^ v76[6];
      v76[4] = SlowCase + HIDWORD(v90);
      v76[5] = SlowCase + (int)v90;
    }
    v76[3] = SlowCase + 32;
LABEL_63:
    *(_DWORD *)SlowCase = 0;
    v77 = *a2;
    *a2 = 0;
    WebCore::JSDOMObject::JSDOMObject(SlowCase, v68);
    *(_QWORD *)(SlowCase + 24) = v77;
    if (*((_BYTE *)v75 + 755))
      __dmb(0xAu);
    v26 = *((_QWORD *)a1 + 415);
    if ((byte_1ECE82898 & 1) == 0)
    {
      qword_1ECE82890 = (uint64_t)&unk_1E33313C0;
      byte_1ECE82898 = 1;
    }
    if (v36)
      v54 = (uint64_t *)(v36 + 8);
    else
      v54 = 0;
    if (!*(_DWORD *)(v26 + 48))
    {
      if ((SlowCase & 8) != 0)
        v78 = (SlowCase - 112) | 1;
      else
        v78 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v78 & 1) != 0)
        v56 = v78 + 47;
      else
        v56 = *(_QWORD *)v78 + 32;
      Allocator = *(uint64_t **)(v56 + 16);
      if (!Allocator)
        Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
      v58 = *Allocator;
      v59 = &qword_1ECE82890;
LABEL_79:
      *(_QWORD *)(v56 + 16) = v58;
      *Allocator = SlowCase;
      Allocator[1] = (uint64_t)v59;
      Allocator[2] = v26;
      v31 = *v54;
      *v54 = (uint64_t)Allocator;
      if (!v31)
        return SlowCase;
LABEL_80:
      *(_QWORD *)(v31 + 8) = 3;
      return SlowCase;
    }
    v79 = (uint64_t *)(v26 + 32);
    v92 = v36;
    if ((SlowCase & 8) != 0)
      v86 = (SlowCase - 112) | 1;
    else
      v86 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v86 & 1) != 0)
      v87 = v86 + 47;
    else
      v87 = *(_QWORD *)v86 + 32;
    v82 = *(_QWORD **)(v87 + 16);
    if (!v82)
      v82 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v87 + 16) = *v82;
    v83 = &qword_1ECE82890;
LABEL_105:
    *v82 = SlowCase;
    v82[1] = v83;
    v82[2] = v26;
    v91 = v82;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v79, &v92, (uint64_t *)&v91);
    v31 = (uint64_t)v91;
    if (!v91)
      return SlowCase;
    goto LABEL_80;
  }
  *a2 = 0;
  v8 = *((_QWORD *)a1 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSCSSAnimation::s_info + ~((_QWORD)&WebCore::JSCSSAnimation::s_info << 32)) ^ (((unint64_t)&WebCore::JSCSSAnimation::s_info + ~((_QWORD)&WebCore::JSCSSAnimation::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSCSSAnimation::s_info)
    {
LABEL_7:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_9;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSCSSAnimation::s_info)
          goto LABEL_7;
      }
    }
  }
  v17 = (WebCore::JSWebAnimation *)*((_QWORD *)a1 + 7);
  v18 = (JSC::JSCell *)WebCore::JSWebAnimation::prototype(v17, a1, v6);
  v19 = WebCore::JSCSSAnimationPrototype::createStructure((uint64_t *)v17, (uint64_t)a1, v18);
  *(_DWORD *)(v19 + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSCSSAnimationPrototype::create(v17, a1, v19, v20);
  v22 = WebCore::JSCSSAnimation::createStructure((uint64_t *)v17, (uint64_t)a1, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a1, v22, (uint64_t)&WebCore::JSCSSAnimation::s_info);
LABEL_9:
  v23 = (WebCore::JSCSSAnimation *)*((_QWORD *)a1 + 7);
  v24 = (_QWORD *)WebCore::JSCSSAnimation::subspaceForImpl(v23, v5);
  SlowCase = v24[3];
  if (SlowCase < v24[4])
  {
LABEL_10:
    v24[3] = SlowCase + 32;
    goto LABEL_11;
  }
  SlowCase = v24[5];
  if ((SlowCase & 1) == 0)
  {
    v88 = *(_QWORD *)(SlowCase + 8) ^ v24[6];
    v24[4] = SlowCase + HIDWORD(v88);
    v24[5] = SlowCase + (int)v88;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = v7;
  if (*((_BYTE *)v23 + 755))
    __dmb(0xAu);
  v26 = *((_QWORD *)a1 + 415);
  if ((byte_1ECE82878 & 1) == 0)
  {
    _MergedGlobals_156 = (uint64_t)&off_1E32328E0;
    byte_1ECE82878 = 1;
  }
  if (v7)
    v27 = (uint64_t *)(v7 + 8);
  else
    v27 = 0;
  if (*(_DWORD *)(v26 + 48))
  {
    v79 = (uint64_t *)(v26 + 32);
    v92 = v7;
    if ((SlowCase & 8) != 0)
      v80 = (SlowCase - 112) | 1;
    else
      v80 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v80 & 1) != 0)
      v81 = v80 + 47;
    else
      v81 = *(_QWORD *)v80 + 32;
    v82 = *(_QWORD **)(v81 + 16);
    if (!v82)
      v82 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v81 + 16) = *v82;
    v83 = &_MergedGlobals_156;
    goto LABEL_105;
  }
  if ((SlowCase & 8) != 0)
    v28 = (SlowCase - 112) | 1;
  else
    v28 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v28 & 1) != 0)
    v29 = v28 + 47;
  else
    v29 = *(_QWORD *)v28 + 32;
  v30 = *(_QWORD **)(v29 + 16);
  if (!v30)
    v30 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v29 + 16) = *v30;
  *v30 = SlowCase;
  v30[1] = &_MergedGlobals_156;
  v30[2] = v26;
  v31 = *v27;
  *v27 = (uint64_t)v30;
  if (v31)
    goto LABEL_80;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebAnimation>(uint64_t a1, JSC::VM *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_DWORD **)(v7 + 16 * v12);
      if (v13 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_DWORD **)(v7 + 16 * v12);
          ++v14;
          if (v13 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *((_QWORD *)a3 + 1);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++a3[6];
  v15 = a3;
  v5 = WebCore::toJSNewlyCreated(a2, (uint64_t *)&v15);
  if (v15)
  {
    if (v15[6] == 1)
      (*(void (**)(void))(*(_QWORD *)v15 + 72))();
    else
      --v15[6];
  }
  return v5;
}

unint64_t WebCore::constructJSWebAnimation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebAnimation *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Document *v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  WebCore::AnimationEffect *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  unint64_t v24;
  unint64_t result;
  JSC::VM *v26;
  WebCore::WebAnimation *v27;

  v26 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (unint64_t)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v26, (uint64_t)"Animation", 10);
  if (!*(_BYTE *)(v6 + 274))
  {
    v8 = (WebCore::WebAnimation *)(v6 - 192);
    v9 = *((int *)a2 + 8);
    if ((_DWORD)v9 == 1)
    {
      v11 = 0;
LABEL_22:
      WebCore::WebAnimation::create(v8, v11, &v27);
      goto LABEL_40;
    }
    v10 = *((_QWORD *)a2 + 6);
    if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v11 = 0;
    }
    else
    {
      v27 = (WebCore::WebAnimation *)*((_QWORD *)this + 7);
      if ((v10 & 0xFFFE000000000002) != 0)
        goto LABEL_18;
      v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
      v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
      v14 = (char **)(16 * v12);
      if ((_DWORD)v12)
        v15 = v14 == &WebCore::JSAnimationEffect::s_info;
      else
        v15 = 1;
      if (!v15)
      {
        do
        {
          v14 = (char **)v14[2];
          v13 = v14 != 0;
        }
        while (v14 != &WebCore::JSAnimationEffect::s_info && v14 != 0);
      }
      if (!v13 || (v11 = *(WebCore::Document **)(v10 + 24)) == 0)
      {
LABEL_18:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "effect", 7, "Animation", 10, v7, 0, 0, "AnimationEffect", 16);
        return 0;
      }
    }
    if ((unint64_t)(v9 - 3) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_22;
    v17 = *((_QWORD *)a2 + 7);
    if (v17 == 10)
      goto LABEL_22;
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
LABEL_39:
      WebCore::WebAnimation::create(v8, v11, v18, &v27);
LABEL_40:
      v24 = WebCore::toJSNewlyCreated(*(JSC::VM **)(v5 + 40), (uint64_t *)&v27);
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 1)
          (*(void (**)(void))(*(_QWORD *)v27 + 72))();
        else
          --*((_DWORD *)v27 + 6);
      }
      return v24;
    }
    v27 = (WebCore::WebAnimation *)*((_QWORD *)this + 7);
    if ((v17 & 0xFFFE000000000002) == 0)
    {
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSAnimationTimeline::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSAnimationTimeline::s_info && v21 != 0);
      }
      if (v20)
      {
        v18 = *(WebCore::AnimationEffect **)(v17 + 24);
        if (v18)
          goto LABEL_39;
      }
    }
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 1, "timeline", 9, "Animation", 10, v7, 0, 0, "AnimationTimeline", 18);
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

WTF::Lock *WebCore::JSWebGL2RenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    v5 = *((_BYTE *)a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        return WebCore::WebGL2RenderingContext::addMembersToOpaqueRoots(*(WTF::Lock ***)(a1 + 24), a2);
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D3CD0);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*((_QWORD *)a2 + 9);
    }
  }
  return WebCore::WebGL2RenderingContext::addMembersToOpaqueRoots(*(WTF::Lock ***)(a1 + 24), a2);
}

uint64_t WebCore::JSWebGLRenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    v5 = *((_BYTE *)a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v4 == v13)
        return WebCore::WebGLRenderingContext::addMembersToOpaqueRoots(*(WebCore::WebGLRenderingContext **)(a1 + 24), a2);
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D3DD8);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*((_QWORD *)a2 + 9);
    }
  }
  return WebCore::WebGLRenderingContext::addMembersToOpaqueRoots(*(WebCore::WebGLRenderingContext **)(a1 + 24), a2);
}

WebCore::DOMWrapperWorld *WebCore::JSWindowProxy::destroy(WebCore::JSWindowProxy *this, JSC::JSCell *a2)
{
  WebCore::DOMWrapperWorld *result;
  WTF *v4;
  void *v5;

  result = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(result, a2);
      return (WebCore::DOMWrapperWorld *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSWindowProxy::putByIndex(uint64_t *a1, WebCore::JSDOMGlobalObject *a2, int a3)
{
  _DWORD v4[4];

  v4[0] = a3;
  v4[2] = 1;
  WebCore::checkCrossTabWindowProxyUsage(a1, a2, (uint64_t)v4);
  return JSC::JSGlobalProxy::putByIndex();
}

uint64_t WebCore::JSWindowProxy::deleteProperty(uint64_t *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  v4 = a3;
  v5 = 0;
  WebCore::checkCrossTabWindowProxyUsage(a1, a2, (uint64_t)&v4);
  return JSC::JSGlobalProxy::deleteProperty();
}

uint64_t WebCore::JSWindowProxy::deletePropertyByIndex(WebCore::JSWindowProxy *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  _DWORD v4[4];

  v4[0] = (_DWORD)a3;
  v4[2] = 1;
  WebCore::checkCrossTabWindowProxyUsage((uint64_t *)this, a2, (uint64_t)v4);
  return JSC::JSGlobalProxy::deletePropertyByIndex();
}

uint64_t WebCore::JSWindowProxy::getOwnPropertySlotByIndex(WebCore::JSWindowProxy *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, unsigned int a4, JSC::PropertySlot *a5)
{
  _DWORD v6[4];

  v6[0] = (_DWORD)a3;
  v6[2] = 1;
  WebCore::checkCrossTabWindowProxyUsage((uint64_t *)this, a2, (uint64_t)v6);
  return JSC::JSGlobalProxy::getOwnPropertySlotByIndex();
}

uint64_t WebCore::JSWindowProxy::defineOwnProperty(uint64_t *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  v4 = a3;
  v5 = 0;
  WebCore::checkCrossTabWindowProxyUsage(a1, a2, (uint64_t)&v4);
  return JSC::JSGlobalProxy::defineOwnProperty();
}

void WebCore::JSWindowProxy::~JSWindowProxy(WebCore::JSWindowProxy *this, WTF::StringImpl *a2)
{
  WebCore::DOMWrapperWorld *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

{
  WebCore::DOMWrapperWorld *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

uint64_t WebCore::JSWindowProxy::finishCreation(WebCore::JSWindowProxy *this, JSC::VM *a2, WebCore::DOMWindow *a3)
{
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return WebCore::JSWindowProxy::setWindow(this, a3);
}

uint64_t WebCore::JSWindowProxy::world(WebCore::JSWindowProxy *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::JSWindowProxy::setWindow(WebCore::JSWindowProxy *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v6;

  JSC::JSGlobalProxy::setTarget();
  v6 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  *(_QWORD *)(v6 + 40) = a3;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v6 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)v6);
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return WebCore::GCController::garbageCollectSoon((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
}

uint64_t WebCore::JSWindowProxy::windowProxy(WebCore::JSWindowProxy *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 3408);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
  if (result)
    return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1) + 112);
  return result;
}

uint64_t WebCore::JSWindowProxy::wrapped(WebCore::JSWindowProxy *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 3408);
}

uint64_t WebCore::JSWindowProxy::attachDebugger(WebCore::JSWindowProxy *this, JSC::Debugger *a2)
{
  JSC::JSGlobalObject *v3;
  _BYTE v5[8];

  v3 = (JSC::JSGlobalObject *)*((_QWORD *)this + 2);
  MEMORY[0x19AEA3294](v5, *((_QWORD *)v3 + 7));
  if (a2)
  {
    JSC::Debugger::attach(a2, v3);
  }
  else if (*((_QWORD *)v3 + 252))
  {
    JSC::Debugger::detach();
  }
  return MEMORY[0x19AEA32A0](v5);
}

uint64_t WebCore::toJS(WebCore::DOMWrapperWorld **this, JSC::JSGlobalObject *a2, WebCore::WindowProxy *a3)
{
  uint64_t result;

  result = (uint64_t)WebCore::WindowProxy::jsWindowProxy(a2, this[415]);
  if (!result)
    return 2;
  return result;
}

uint64_t WebCore::JSWindowProxy::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u
    || &WebCore::JSWindowProxy::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return 0;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 3408);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
  if (result)
    return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3) + 112);
  return result;
}

uint64_t WebCore::JSWindowProxy::subspaceForImpl(uint64_t a1)
{
  return *(_QWORD *)(a1 + 41456) + 23360;
}

uint64_t WebCore::JSWindowProxy::protectedWorld@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 24);
  ++*v2;
  *a2 = v2;
  return this;
}

void WebCore::JSWorkerGlobalScopeBase::destroy(WebCore::JSWorkerGlobalScopeBase *this, JSC::JSCell *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v3)
  {
    if (v3[78] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 40))(v3, a2);
    else
      --v3[78];
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

uint64_t WebCore::JSWorkerGlobalScopeBase::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = WebCore::JSDOMGlobalObject::visitChildren(a1, a2);
  v5 = *(_QWORD *)(a1 + 3336);
  if (v5)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v6 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v7 = *(_QWORD *)(a1 + 3336);
        v8 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v7;
        v6 = v8;
      }
      if (((*(_QWORD *)(v6 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (!*(_QWORD *)(a2 + 168))
      return result;
    return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSWorkerGlobalScopeBase::visitChildren(WebCore::JSWorkerGlobalScopeBase *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSDOMGlobalObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 417));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWorkerGlobalScopeBase::supportsRichSourceInfo()
{
  return 1;
}

uint64_t WebCore::JSWorkerGlobalScopeBase::shouldInterruptScript()
{
  return 1;
}

uint64_t WebCore::JSWorkerGlobalScopeBase::javaScriptRuntimeFlags(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 3400) + 360) + 160);
}

uint64_t WebCore::JSWorkerGlobalScopeBase::queueMicrotaskToEventLoop(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::EventLoopTaskGroup *v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v4 = 1;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 712);
  if (!v6)
  {
    v13 = *(_QWORD *)(a1 + 56);
    JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 672));
    v5 = v13;
    v6 = *(_QWORD *)(v13 + 712);
  }
  *(_QWORD *)(v5 + 712) = *(_QWORD *)v6;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6 + 16;
  if (!*(_QWORD *)(v6 + 16))
  {
    v7 = *(unint64_t **)((v6 & 0xFFFFFFFFFFFFF000) + 0x10);
    v8 = v7[3];
    v7 += 3;
    *(_QWORD *)v6 = v8;
    *(_QWORD *)(v6 + 8) = v7;
    *v7 = v6;
    *(_QWORD *)(v8 + 8) = v6;
  }
  *(_QWORD *)(v6 + 16) = a1;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 16) = v9;
  v10 = WebCore::WorkerOrWorkletGlobalScope::eventLoop(*(WebCore::WorkerOrWorkletGlobalScope **)(a1 + 3400));
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E3394298;
  v11[1] = v4;
  v14 = v11;
  WebCore::EventLoopTaskGroup::queueMicrotask((uint64_t)v10, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebCore::JSWorkerGlobalScopeBase::shouldInterruptScriptBeforeTimeout()
{
  return 0;
}

uint64_t WebCore::JSWorkerGlobalScopeBase::scriptExecutionStatus(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 3400);
  if (*(_BYTE *)(v1 + 275))
    return 1;
  else
    return 2 * *(unsigned __int8 *)(v1 + 276);
}

uint64_t WebCore::JSWorkerGlobalScopeBase::globalObjectMethodTable(void)::$_0::__invoke()
{
  return WTF::defaultLanguage();
}

void WebCore::JSWorkerGlobalScopeBase::codeForEval(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  _DWORD *v7;
  uint64_t v8;

  if ((a1 & 0xFFFE000000000002) == 0)
  {
    v2 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
    v3 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
    v4 = (char **)(16 * v2);
    if ((_DWORD)v2)
      v5 = v4 == &WebCore::JSTrustedScript::s_info;
    else
      v5 = 1;
    if (!v5)
    {
      do
      {
        v4 = (char **)v4[2];
        v3 = v4 != 0;
      }
      while (v4 != &WebCore::JSTrustedScript::s_info && v4 != 0);
    }
    if (v3)
    {
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v7 = *(_DWORD **)(v8 + 16);
        if (!v7)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
  }
  v7 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_13:
    *v7 += 2;
LABEL_14:
  *a2 = v7;
}

uint64_t *WebCore::JSWorkerGlobalScopeBase::canCompileStrings(WebCore::JSDOMGlobalObject *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF::StringImpl *v8;

  v4 = *a3;
  if (*a3)
  {
    *(_DWORD *)v4 += 2;
    v8 = v4;
    v6 = WebCore::JSDOMGlobalObject::canCompileStrings(a1, a2, &v8, a4);
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  else
  {
    v8 = 0;
    return WebCore::JSDOMGlobalObject::canCompileStrings(a1, a2, &v8, a4);
  }
  return v6;
}

uint64_t WebCore::JSWorkerGlobalScope::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 3400) + 544);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v18 = *(_QWORD *)(result + 48);
    v19 = *(_DWORD *)(v18 + 4);
    v20 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = v23;
    while (1)
    {
      v25 = *(_QWORD *)(v18 + 8 * v24 + 16);
      if (!v25)
        break;
      if (v4 == v25)
        goto LABEL_5;
      v24 = (v24 + 1) & v19;
      if (v24 == v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D489CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_5:
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 3400) + 552);
  if (v6)
    v7 = *(_BYTE *)(a2 + 130) == 0;
  else
    v7 = 0;
  if (v7)
  {
    result = *(_QWORD *)(a2 + 120);
    v26 = *(_QWORD *)(result + 48);
    v27 = *(_DWORD *)(v26 + 4);
    v28 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = v31;
    while (1)
    {
      v33 = *(_QWORD *)(v26 + 8 * v32 + 16);
      if (!v33)
        break;
      if (v6 == v33)
        goto LABEL_9;
      v32 = (v32 + 1) & v27;
      if (v32 == v31)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D4928);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_9:
  v8 = *(_QWORD *)(v3 + 3400);
  if (v8)
    v9 = *(_BYTE *)(a2 + 130) == 0;
  else
    v9 = 0;
  if (v9)
  {
    result = *(_QWORD *)(a2 + 120);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v8 == v17)
        goto LABEL_33;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D4810);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v8);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_33:
  v34 = *(_QWORD *)(v3 + 3400);
  if ((*(_QWORD *)(v34 + 336) & 0x1000000000000) != 0)
  {
    v35 = *(_QWORD *)(v34 + 336) & 0xFFFFFFFFFFFFLL;
    v36 = (unsigned __int8 *)(v35 + 32);
    if (__ldaxr((unsigned __int8 *)(v35 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v36))
    {
      goto LABEL_38;
    }
    result = MEMORY[0x19AEA534C](v35 + 32);
LABEL_38:
    v38 = *(unsigned int *)(v35 + 28);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD *)(v35 + 16);
      v40 = v39 + 32 * v38;
      do
      {
        v41 = *(unsigned int *)(v39 + 20);
        if ((_DWORD)v41)
        {
          v42 = *(uint64_t **)(v39 + 8);
          v43 = 8 * v41;
          do
          {
            v44 = *v42++;
            result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v44 + 8) + 32))(*(_QWORD *)(v44 + 8), a2);
            v43 -= 8;
          }
          while (v43);
        }
        v39 += 32;
      }
      while (v39 != v40);
    }
    v45 = __ldxr(v36);
    if (v45 == 1)
    {
      if (!__stlxr(0, v36))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v36);
  }
  return result;
}

uint64_t WebCore::JSWorkerGlobalScope::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t result, JSC::AbstractSlotVisitor *this)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v3 = result;
  v4 = *(_QWORD *)(result + 3400);
  v5 = *(void **)(v4 + 544);
  if (v5)
  {
    result = JSC::AbstractSlotVisitor::addOpaqueRoot(this, v5);
    v4 = *(_QWORD *)(v3 + 3400);
  }
  v6 = *(void **)(v4 + 552);
  if (v6)
  {
    result = JSC::AbstractSlotVisitor::addOpaqueRoot(this, v6);
    v4 = *(_QWORD *)(v3 + 3400);
  }
  if (v4)
    v7 = *((_BYTE *)this + 130) == 0;
  else
    v7 = 0;
  if (v7)
  {
    result = *((_QWORD *)this + 15);
    v8 = *(_QWORD *)(result + 48);
    v9 = *(_DWORD *)(v8 + 4);
    v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)(v8 + 8 * v14 + 16);
      if (!v15)
        break;
      if (v4 == v15)
        goto LABEL_19;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D4B80);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)this + 131))
        result = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)this + 144))(this, v4);
      ++*((_QWORD *)this + 9);
    }
  }
LABEL_19:
  v16 = *(_QWORD *)(v3 + 3400);
  if ((*(_QWORD *)(v16 + 336) & 0x1000000000000) != 0)
  {
    v17 = *(_QWORD *)(v16 + 336) & 0xFFFFFFFFFFFFLL;
    v18 = (unsigned __int8 *)(v17 + 32);
    if (__ldaxr((unsigned __int8 *)(v17 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
LABEL_23:
      v20 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v17 + 16);
        v22 = v21 + 32 * v20;
        do
        {
          v23 = *(unsigned int *)(v21 + 20);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)(v21 + 8);
            v25 = 8 * v23;
            do
            {
              v26 = *v24++;
              result = (*(uint64_t (**)(_QWORD, JSC::AbstractSlotVisitor *))(**(_QWORD **)(v26 + 8) + 40))(*(_QWORD *)(v26 + 8), this);
              v25 -= 8;
            }
            while (v25);
          }
          v21 += 32;
        }
        while (v21 != v22);
      }
      v27 = __ldxr(v18);
      if (v27 == 1)
      {
        if (!__stlxr(0, v18))
          return result;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v18);
    }
    result = MEMORY[0x19AEA534C](v17 + 32);
    goto LABEL_23;
  }
  return result;
}

uint64_t WebCore::JSWorkerGlobalScope::queueMicrotask(WebCore::JSWorkerGlobalScope *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::VM *v10;
  unsigned int v11;
  _DWORD *v12;
  JSValue v14;
  unsigned __int8 *v15;
  JSC::VM *v16;
  _QWORD v17[3];

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v16 = v9;
  if (*((_DWORD *)a3 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(a2, a2);
    return JSC::VM::throwException(v9, a2, v14);
  }
  else
  {
    v10 = (JSC::VM *)*((_QWORD *)a3 + 6);
    if (((unint64_t)v10 & 0xFFFE000000000002) == 0
      && (v11 = *((unsigned __int8 *)v10 + 5), v11 >= 0x17)
      && ((v11 & 0xFE) == 0x1A
       || (*((_BYTE *)v10 + 6) & 4) != 0
       && (v15 = (unsigned __int8 *)*((_QWORD *)a3 + 6),
           (*(void (**)(_QWORD *__return_ptr, unsigned __int8 *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(v17, v15), v10 = (JSC::VM *)v15, LOBYTE(v17[0]))))
    {
      WebCore::createJSDOMMicrotask(v9, v10, v17);
      JSC::JSGlobalObject::queueMicrotask();
      v12 = (_DWORD *)v17[0];
      v17[0] = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      return 10;
    }
    else
    {
      return (uint64_t)WebCore::throwArgumentMustBeFunctionError((uint64_t)a2, (uint64_t)&v16, 0, "callback", 9, "WorkerGlobalScope", 18, a8, "queueMicrotask", 15);
    }
  }
}

uint64_t WebCore::JSWorkerNavigator::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
    v3 = *(_BYTE *)(a2 + 130) == 0;
  else
    v3 = 0;
  if (v3)
  {
    result = *(_QWORD *)(a2 + 120);
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_DWORD *)(v5 + 4);
    v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v5 + 8 * v11 + 16);
      if (!v12)
        break;
      if (v2 == v12)
        return result;
      v11 = (v11 + 1) & v6;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D4EB0);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v2);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

void WebCore::JSWorkletGlobalScopeBase::destroy(WebCore::JSWorkletGlobalScopeBase *this, JSC::JSCell *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v3)
  {
    if (v3[78] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 40))(v3, a2);
    else
      --v3[78];
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

uint64_t WebCore::JSWorkletGlobalScopeBase::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = WebCore::JSDOMGlobalObject::visitChildren(a1, a2);
  v5 = *(_QWORD *)(a1 + 3336);
  if (v5)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v6 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v7 = *(_QWORD *)(a1 + 3336);
        v8 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v7;
        v6 = v8;
      }
      if (((*(_QWORD *)(v6 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (!*(_QWORD *)(a2 + 168))
      return result;
    return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::visitChildren(WebCore::JSWorkletGlobalScopeBase *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSDOMGlobalObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 417));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::supportsRichSourceInfo()
{
  return 1;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::shouldInterruptScript()
{
  return 1;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::javaScriptRuntimeFlags(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 3400) + 488);
}

uint64_t WebCore::JSWorkletGlobalScopeBase::shouldInterruptScriptBeforeTimeout()
{
  return 0;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::scriptExecutionStatus(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 3400);
  if (*(_BYTE *)(v1 + 275))
    return 1;
  else
    return 2 * *(unsigned __int8 *)(v1 + 276);
}

uint64_t WebCore::JSWorkletGlobalScopeBase::globalObjectMethodTable(void)::$_0::__invoke()
{
  return WTF::defaultLanguage();
}

void WebCore::JSWorkletGlobalScopeBase::codeForEval(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
    *v1 += 2;
  *a1 = v1;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::canCompileStrings(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v3;
  int v4;

  v3 = *a3;
  if (*a3)
  {
    v4 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      WTF::StringImpl::destroy(v3, a2);
  }
  return 1;
}

uint64_t WebCore::JSWorkletGlobalScopeBase::scriptExecutionContext(WebCore::JSWorkletGlobalScopeBase *this)
{
  return *((_QWORD *)this + 425);
}

unint64_t WebCore::toJSNewlyCreated(uint64_t a1, JSC::VM *a2, JSC::JSGlobalObject **a3)
{
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  WebCore::JSDocument *v16;
  JSC::JSCell *v17;
  unint64_t Structure;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  unint64_t v22;

  WebCore::reportMemoryForDocumentIfFrameless(a1, *a3, (WebCore::Document *)a3);
  v6 = *a3;
  v7 = *((_QWORD *)a2 + 412);
  if (!v7)
    goto LABEL_7;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = ((unint64_t)&WebCore::JSXMLDocument::s_info + ~((_QWORD)&WebCore::JSXMLDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLDocument::s_info + ~((_QWORD)&WebCore::JSXMLDocument::s_info << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(char ***)(v7 + 16 * v12);
  if (v13 != &WebCore::JSXMLDocument::s_info)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(char ***)(v7 + 16 * v12);
      ++v14;
      if (v13 == &WebCore::JSXMLDocument::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
  if (!v15)
  {
LABEL_7:
    v16 = (WebCore::JSDocument *)*((_QWORD *)a2 + 7);
    v17 = (JSC::JSCell *)WebCore::JSDocument::prototype(v16, a2, v5);
    Structure = WebCore::JSXMLDocumentPrototype::createStructure((uint64_t *)v16, (uint64_t)a2, v17);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v20 = (JSC::JSCell *)WebCore::JSXMLDocumentPrototype::create(v16, a2, Structure, v19);
    v21 = WebCore::JSXMLDocument::createStructure((uint64_t *)v16, (uint64_t)a2, v20);
    v15 = WebCore::cacheDOMStructure((JSCell *)a2, v21, (uint64_t)&WebCore::JSXMLDocument::s_info);
  }
  v22 = WebCore::JSXMLDocument::create(v15, a2, (uint64_t *)a3);
  WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(*((_QWORD *)a2 + 415), (uint64_t)v6, v22);
  return v22;
}

uint64_t WebCore::JSXMLHttpRequest::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 24) + 32);
  if (v4)
    v5 = *(_BYTE *)(a2 + 130) == 0;
  else
    v5 = 0;
  if (v5)
  {
    result = *(_QWORD *)(a2 + 120);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v4 == v17)
        goto LABEL_5;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1956D5384);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v4);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_5:
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 464);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 22) & 8) == 0)
    {
      while (1)
      {
        v7 = v6;
        if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
        {
          v9 = *(_QWORD *)(v6 + 200);
          if (!v9)
            goto LABEL_19;
          v8 = (uint64_t *)(v9 + 8);
        }
        else
        {
          v8 = (uint64_t *)(v6 + 32);
        }
        v6 = *v8;
        if (!v6)
          goto LABEL_19;
      }
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
LABEL_19:
    if (v7 && !*(_BYTE *)(a2 + 130))
    {
      result = *(_QWORD *)(a2 + 120);
      v18 = *(_QWORD *)(result + 48);
      v19 = *(_DWORD *)(v18 + 4);
      v20 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = v23;
      while (1)
      {
        v25 = *(_QWORD *)(v18 + 8 * v24 + 16);
        if (!v25)
          break;
        if (v7 == v25)
          return result;
        v24 = (v24 + 1) & v19;
        if (v24 == v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1956D5424);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(a2 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
        ++*(_QWORD *)(a2 + 72);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::response(WebCore::JSXMLHttpRequest *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  unsigned int v4;
  WebCore::XMLHttpRequest *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  JSC::ArrayBuffer *v11;
  WTF::DeferrableRefCountedBase *v12;
  uint64_t result;
  WebCore::Document *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::JSBlob **v18;
  WebCore::JSDOMGlobalObject *v19;
  WTF::StringImpl **v20;
  JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::JSDOMGlobalObject *v24[2];
  int v25;
  JSC::VM *v26;
  char v27;

  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int16 *)(v3 + 24);
  if ((v4 & 0x80) != 0)
    return *((_QWORD *)this + 4);
  v6 = (WebCore::XMLHttpRequest *)(v3 - 56);
  v7 = (v4 >> 11) & 7;
  if (v7 == 5 || v7 == 0)
  {
    v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
    WebCore::XMLHttpRequest::responseText((uint64_t)v6, (uint64_t)v24);
    v9 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLUSVString>,WebCore::ExceptionOr<WebCore::OwnedString>>((JSC **)a2, &v26, (unsigned __int8 *)v24);
    WebCore::JSXMLHttpRequest::response(JSC::JSGlobalObject &)const::$_0::operator()((JSCell *)this, *((_QWORD *)a2 + 7), v9);
    if (v25 != -1)
      ((void (*)(char *, WebCore::JSDOMGlobalObject **))off_1E3393BD8[v25])(&v27, v24);
    return v9;
  }
  if ((v4 & 0x710) != 0x400)
  {
    v9 = 2;
    *((_QWORD *)this + 4) = 2;
    return v9;
  }
  v9 = 10;
  switch(v7)
  {
    case 0:
    case 5:
      return v9;
    case 1:
      v10 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
      WebCore::XMLHttpRequest::createResponseArrayBuffer(v6, v24);
      if (v24[0])
      {
        v9 = WebCore::toJS(a2, v10, v24[0], v11);
        v12 = v24[0];
        v24[0] = 0;
        if (v12)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v12);
      }
      else
      {
        v9 = 2;
      }
      goto LABEL_11;
    case 2:
      v18 = *(WebCore::JSBlob ***)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
      WebCore::XMLHttpRequest::createResponseBlob(v6, (uint64_t *)v24);
      v9 = WebCore::toJSNewlyCreated((uint64_t)a2, v18, (uint64_t *)v24);
      v19 = v24[0];
      v24[0] = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 4) == 1)
          (*(void (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)v19 + 8))(v19);
        else
          --*((_DWORD *)v19 + 4);
      }
      goto LABEL_11;
    case 3:
      WebCore::XMLHttpRequest::responseXML((uint64_t)v6, (uint64_t)v24);
      if (!v25)
      {
        if (v24[0])
        {
          v9 = WebCore::toJS((WebCore::DOMWrapperWorld **)a2, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v24[0], v14);
          v15 = v25;
          if (v25 == -1)
            goto LABEL_11;
        }
        else
        {
          v15 = 0;
          v9 = 2;
        }
        ((void (*)(JSC::VM **, WebCore::JSDOMGlobalObject **))off_1E3393BE8[v15])(&v26, v24);
LABEL_11:
        WebCore::XMLHttpRequest::didCacheResponse((WebCore::XMLHttpRequest *)(*((_QWORD *)this + 3) - 56), a2);
        WebCore::JSXMLHttpRequest::response(JSC::JSGlobalObject &)const::$_0::operator()((JSCell *)this, *((_QWORD *)a2 + 7), v9);
        return v9;
      }
      v21 = (JSCell *)std::__throw_bad_variant_access[abi:sn180100]();
      result = WebCore::JSXMLHttpRequest::response(JSC::JSGlobalObject &)const::$_0::operator()(v21, v22, v23);
      break;
    case 4:
      v16 = *(WTF::StringImpl **)(v3 + 480);
      if (v16
        || (v20 = (WTF::StringImpl **)(v3 + 480),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)(v3 + 480)),
            (v16 = *v20) != 0))
      {
        *(_DWORD *)v16 += 2;
        v17 = WebCore::toJS<WebCore::IDLJSON,WTF::String>();
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      else
      {
        v17 = WebCore::toJS<WebCore::IDLJSON,WTF::String>();
      }
      if (v17)
        v9 = v17;
      else
        v9 = 2;
      goto LABEL_11;
    default:
      v9 = 0;
      goto LABEL_11;
  }
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::response(JSC::JSGlobalObject &)const::$_0::operator()(JSCell *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *((_QWORD *)a1 + 4) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
  {
    v4 = a3;
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), a1);
    return v4;
  }
  return a3;
}

unint64_t WebCore::toJS<WebCore::IDLNullable<WebCore::IDLUSVString>,WebCore::ExceptionOr<WebCore::OwnedString>>(JSC **this, JSC::VM **a2, unsigned __int8 *a3)
{
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  JSC::JSGlobalObject *v11;
  WTF::StringImpl *v12;
  JSValue v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v4 = *((_DWORD *)a3 + 4);
  if (!v4)
  {
    v5 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v15 = v5;
    if (!v5)
      return 2;
    v7 = JSC::jsOwnedString(this[7], (JSC::VM *)&v15, (const WTF::String *)a3);
    v8 = v15;
    v15 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    return v7;
  }
  if (v4 == 1)
  {
    v11 = (JSC::JSGlobalObject *)*a3;
    LOBYTE(v15) = *a3;
    v12 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v16 = v12;
    if (!*((_QWORD *)*a2 + 2))
    {
      v13.super.isa = (Class)WebCore::createDOMException((JSC *)this, v11, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException(*a2, (JSC::JSGlobalObject *)this, v13);
      v12 = v16;
    }
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    return 0;
  }
  v14 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::toJS<WebCore::IDLJSON,WTF::String>(v14);
}

uint64_t WebCore::toJS<WebCore::IDLJSON,WTF::String>()
{
  return JSC::JSONParse();
}

uint64_t WebCore::JSXPathResult::visitAdditionalChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(result + 24);
  if (!*(_BYTE *)(v2 + 8))
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = (__int16 *)(v3 + 16);
    }
    else
    {
      v4 = &WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet;
      {
        WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet = 1;
        qword_1EE2F9850 = 0;
        unk_1EE2F9858 = 0;
      }
    }
    v5 = *((unsigned int *)v4 + 5);
    if ((_DWORD)v5)
    {
      v6 = (_QWORD *)*((_QWORD *)v4 + 1);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        if (*v6)
        {
          v21 = v7;
          v22 = v6;
          v23 = a2;
          if ((*(_BYTE *)(v8 + 22) & 8) == 0)
          {
            while (1)
            {
              v9 = v8;
              if ((*(_WORD *)(v8 + 28) & 0x80) != 0)
              {
                v11 = *(_QWORD *)(v8 + 200);
                if (!v11)
                  goto LABEL_20;
                v10 = (uint64_t *)(v11 + 8);
              }
              else
              {
                v10 = (uint64_t *)(v8 + 32);
              }
              v8 = *v10;
              if (!v8)
                goto LABEL_20;
            }
          }
          v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
LABEL_20:
          if (v9 && !*(_BYTE *)(a2 + 130))
          {
            result = *(_QWORD *)(a2 + 120);
            v12 = *(_QWORD *)(result + 48);
            v13 = *(_DWORD *)(v12 + 4);
            v14 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
            v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
            v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
            v17 = v13 & ((v16 >> 31) ^ v16);
            v18 = v17;
            while (1)
            {
              v19 = *(_QWORD *)(v12 + 8 * v18 + 16);
              if (!v19)
                break;
              v20 = v9 == v19;
              v6 = v22;
              a2 = v23;
              v7 = v21;
              if (v20)
                goto LABEL_10;
              v18 = (v18 + 1) & v13;
              if (v18 == v17)
              {
                result = 165;
                __break(0xC471u);
                return result;
              }
            }
            result = WTF::ConcurrentPtrHashSet::addSlow();
            v6 = v22;
            a2 = v23;
            v7 = v21;
            if ((_DWORD)result)
            {
              if (*(_BYTE *)(v23 + 131))
                result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 144))(v23, v9);
              v6 = v22;
              a2 = v23;
              ++*(_QWORD *)(v23 + 72);
              v7 = v21;
            }
          }
        }
LABEL_10:
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return result;
}

BOOL WebCore::invokeReadableStreamDefaultControllerFunction(JSC::Structure *a1, unint64_t *a2)
{
  uint64_t v4;
  JSCell *v5;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD v9[3];
  _BYTE v10[8];

  v4 = *((_QWORD *)a1 + 7);
  MEMORY[0x19AEA3294](v10, v4);
  v6 = JSC::JSObject::get(a1, a1, *a2);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    if ((v6 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v9[0]) = 0;
    }
    else if (*(_BYTE *)(v6 + 5) == 26)
    {
      JSC::JSFunction::getCallData((JSC::JSFunction *)v6, v5);
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(v9, v6);
    }
    JSC::call();
    v7 = *(_QWORD *)(v4 + 16) == 0;
  }
  MEMORY[0x19AEA32A0](v10);
  return v7;
}

uint64_t WebCore::ReadableStreamDefaultController::error(_DWORD **a1, unsigned __int8 *a2)
{
  JSC *v4;
  uint64_t v5;
  uint64_t DOMException;
  uint64_t v8;
  WTF *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[8];

  v4 = *(JSC **)(16 * (**a1 & 0xFFFFFFFE) + 0x28);
  v5 = *((_QWORD *)v4 + 7);
  MEMORY[0x19AEA3294](v15, v5);
  DOMException = WebCore::createDOMException(v4, (JSC::JSGlobalObject *)*a2, (JSC::JSGlobalObject *)(a2 + 8));
  if (!*(_QWORD *)(v5 + 16))
  {
    v9 = (WTF *)((char *)&v10 + 8);
    v10 = 0u;
    v11 = 0u;
    v14 = 0;
    v13 = 0u;
    v12 = 0u;
    *((_QWORD *)&v10 + 1) = *a1;
    *(_QWORD *)&v11 = DOMException;
    v8 = 0x800000002;
    WebCore::invokeReadableStreamDefaultControllerFunction(*(JSC::Structure **)(16 * (**((_DWORD **)&v10 + 1) & 0xFFFFFFFE) + 0x28), (unint64_t *)(*(_QWORD *)(v5 + 41456) + 4040));
  }
  return MEMORY[0x19AEA32A0](v15);
}

BOOL WebCore::ReadableStreamDefaultController::enqueue(_DWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[8];

  v4 = *(_QWORD *)(16 * (**a1 & 0xFFFFFFFE) + 0x28);
  MEMORY[0x19AEA3294](v14, *(_QWORD *)(v4 + 56));
  v8 = (WTF *)((char *)&v9 + 8);
  v9 = 0u;
  v10 = 0u;
  v13 = 0;
  v12 = 0u;
  v11 = 0u;
  *((_QWORD *)&v9 + 1) = *a1;
  *(_QWORD *)&v10 = a2;
  v7 = 0x800000002;
  v5 = WebCore::invokeReadableStreamDefaultControllerFunction(*(JSC::Structure **)(16 * (**((_DWORD **)&v9 + 1) & 0xFFFFFFFE) + 0x28), (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 41456) + 4024));
  MEMORY[0x19AEA32A0](v14);
  return v5;
}

BOOL WebCore::ReadableStreamDefaultController::enqueue(_DWORD **a1, _QWORD *a2)
{
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  _DWORD *v5;
  JSC::ArrayBufferView *v6;
  uint64_t v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;

  if (*a2)
  {
    v3 = *(JSC::JSGlobalObject **)(16 * (**a1 & 0xFFFFFFFE) + 0x28);
    v4 = (JSC::VM *)*((_QWORD *)v3 + 7);
    MEMORY[0x19AEA3294](v12, v4);
    v5 = (_DWORD *)WTF::fastMalloc((WTF *)0x28);
    v6 = (JSC::ArrayBufferView *)JSC::ArrayBufferView::ArrayBufferView();
    v7 = JSC::ArrayBufferView::wrap(v6, v3, v3);
    v8 = (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
      && WebCore::ReadableStreamDefaultController::enqueue(a1, v7);
    if (*v5 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v5;
    MEMORY[0x19AEA32A0](v12);
  }
  else
  {
    v12[0] = 36;
    v13 = 0;
    WebCore::ReadableStreamDefaultController::error(a1, v12);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    return 0;
  }
  return v8;
}

uint64_t WebCore::ScheduledAction::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = WTF::fastMalloc((WTF *)0x28);
  ++*(_DWORD *)a1;
  *(_QWORD *)v6 = a1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD **)(v7 + 712);
  if (!v8)
  {
    v14 = *(_QWORD *)(a1 + 16);
    JSC::HandleSet::grow((JSC::HandleSet *)(v7 + 672));
    v7 = v14;
    v8 = *(_QWORD **)(v14 + 712);
  }
  *(_QWORD *)(v7 + 712) = *v8;
  v8[2] = 0;
  v9 = v8 + 2;
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)(v6 + 8) = v8 + 2;
  if (v8[2])
  {
    v11 = *v8;
    v10 = (_QWORD *)v8[1];
    *v10 = v11;
    *(_QWORD *)(v11 + 8) = v10;
    *(v9 - 2) = 0;
    *(v9 - 1) = 0;
    v9 = *(_QWORD **)(v6 + 8);
  }
  *v9 = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 24) = v12;
  result = JSC::computeNewSourceTaintedOriginFromStack();
  *(_BYTE *)(v6 + 32) = result;
  *a3 = v6;
  return result;
}

_DWORD *WebCore::ScheduledAction::execute(WebCore::ScheduledAction *this, WebCore::WorkerGlobalScope *a2)
{
  uint64_t v4;
  _QWORD *v5;
  JSC **v6;
  JSC *v7;
  JSC **v8;
  _DWORD *result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  _DWORD *v15;
  int32x2_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;
  _DWORD *v21;
  unsigned int *v22;

  v4 = *((_QWORD *)a2 + 43);
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5 && *v5)
  {
    v6 = *(JSC ***)(v4 + 24);
    if (!v6 || (v7 = *v6) == 0)
    {
      WebCore::WorkerOrWorkletScriptController::initScript(v4);
      v8 = *(JSC ***)(v4 + 24);
      if (v8)
        v7 = *v8;
      else
        v7 = 0;
    }
    return (_DWORD *)WebCore::ScheduledAction::executeFunctionInContext((uint64_t)this, v7, (uint64_t)v7, a2);
  }
  else
  {
    v10 = *((unsigned __int8 *)this + 32);
    v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 56);
    if (v11)
      *(_DWORD *)v11 += 2;
    v16 = 0;
    v17 = v11;
    v18 = *(_OWORD *)((char *)a2 + 456);
    v19 = *(_OWORD *)((char *)a2 + 472);
    WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v20, (_DWORD **)this + 3, v10, &v17, &v16);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebCore::WorkerOrWorkletScriptController::evaluate(v4, (const WebCore::ScriptSourceCode *)&v20, 0);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v22, v14);
    v15 = v21;
    v21 = 0;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::ScriptController::executeScriptInWorldIgnoringException(uint64_t a1, WebCore::DOMWrapperWorld *a2, _DWORD **a3, char a4, char a5)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;
  char v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  _QWORD v30[4];
  int v31;

  v17 = 0;
  WTF::URL::invalidate((WTF::URL *)&v17);
  v10 = *a3;
  if (*a3)
    *v10 += 2;
  v20 = v10;
  v21 = a4;
  v11 = v17;
  v17 = 0;
  v22 = v11;
  v23 = v18;
  v24 = v19;
  LODWORD(v18) = v18 & 0xFFFFFFFE;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = a5;
  v29 = 1;
  WebCore::ScriptController::executeScriptInWorld((uint64_t)v30, a1, a2, (uint64_t)&v20);
  WebCore::RunJavaScriptParameters::~RunJavaScriptParameters((WebCore::RunJavaScriptParameters *)&v20, v12);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = 0;
  if (v31 != -1)
  {
    if (!v31)
      v15 = v30[0];
    ((void (*)(_DWORD **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v31])(&v20, v30);
  }
  return v15;
}

WebCore::ScriptCachedFrameData *WebCore::ScriptCachedFrameData::ScriptCachedFrameData(WebCore::ScriptCachedFrameData *this, WebCore::LocalFrame *a2)
{
  WTF::ThreadGroup ***v3;
  WTF **v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  WebCore::DOMWrapperWorld **v30;
  WebCore::DOMWrapperWorld *v31;
  WebCore::DOMWrapperWorld **v32;
  int v33;
  uint64_t v34;
  WebCore::DOMWrapperWorld *v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  WTF *v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  WTF *v69;
  WTF *v71;
  uint64_t v72;
  char v73[8];
  WTF *v74[5];

  *(_QWORD *)this = 0;
  v3 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v3 = (WTF::ThreadGroup ***)v74[0];
  WebCore::g_commonVMOrNull = (uint64_t)v74[0];
  if (__ldaxr((unsigned int *)v74[0] + 274))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((WTF *)((char *)v74[0] + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)v74[0] + 274))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*((_QWORD *)v74[0] + 14) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v3[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v3, 0);
LABEL_9:
  MEMORY[0x19AEA3294](v73, v3);
  v5 = *(WTF ***)(*((_QWORD *)a2 + 14) + 16);
  v6 = *v5;
  if (*v5)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = (WTF *)((char *)v6 + 16 * v7);
    if (*((_DWORD *)v6 - 3))
    {
      v9 = *v5;
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *v5;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 = (WTF *)((char *)v9 + 16);
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            break;
          }
        }
      }
      if (v6)
        goto LABEL_17;
LABEL_85:
      v12 = 0;
      v11 = 0;
      goto LABEL_18;
    }
    v9 = (WTF *)((char *)v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (WTF *)((char *)v6 + 16 * v7);
  if (!v6)
    goto LABEL_85;
LABEL_17:
  v11 = *((unsigned int *)v6 - 1);
  v12 = (WTF *)((char *)v6 + 16 * v11);
LABEL_18:
  v74[0] = *(WTF **)(*((_QWORD *)a2 + 14) + 16);
  v74[1] = v9;
  v74[2] = v8;
  v74[3] = v12;
  v74[4] = (WTF *)((char *)v6 + 16 * v11);
  v71 = 0;
  v72 = 0;
  WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map((uint64_t)&v71, (uint64_t **)v74);
  v14 = v71;
  if (!HIDWORD(v72))
    goto LABEL_80;
  v69 = (WTF *)((char *)v71 + 8 * HIDWORD(v72));
  do
  {
    v15 = *(_QWORD *)(((*(_QWORD *)v14 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = *(_QWORD *)(v15 + 40);
    if (!v16)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((*(_QWORD *)v14 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
      v16 = *(_QWORD *)(v15 + 40);
    }
    *(_QWORD *)(v15 + 40) = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    v17 = **(_QWORD **)v14;
    v18 = *(unint64_t **)((v16 & 0xFFFFFFFFFFFFF000) + 0x10);
    v19 = v18[3];
    v18 += 3;
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v18;
    *v18 = v16;
    *(_QWORD *)(v19 + 8) = v16;
    *(_QWORD *)(v16 + 16) = v17;
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(WTF **)(v17 + 24);
    ++*(_DWORD *)v21;
    v74[0] = v21;
    v22 = *(_QWORD *)(v20 + 56);
    v23 = *(_QWORD *)(v22 + 712);
    if (!v23)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v22 + 672));
      v23 = *(_QWORD *)(v22 + 712);
    }
    *(_QWORD *)(v22 + 712) = *(_QWORD *)v23;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    v24 = *(unint64_t **)((v23 & 0xFFFFFFFFFFFFF000) + 0x10);
    v25 = v24[3];
    v24 += 3;
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v24;
    *v24 = v23;
    *(_QWORD *)(v25 + 8) = v23;
    *(_QWORD *)(v23 + 16) = v20;
    v26 = *(_QWORD *)this;
    if (*(_QWORD *)this
      || (WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash((uint64_t *)this, 8u), (v26 = *(_QWORD *)this) != 0))
    {
      v27 = *(_DWORD *)(v26 - 8);
    }
    else
    {
      v27 = 0;
    }
    v29 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)v21) & v27;
    v30 = (WebCore::DOMWrapperWorld **)(v26 + 16 * v29);
    v31 = *v30;
    if (*v30)
    {
      v32 = 0;
      v33 = 1;
      while (v31 != v21)
      {
        if (v31 == (WebCore::DOMWrapperWorld *)-1)
          v32 = v30;
        v29 = (v29 + v33) & v27;
        v30 = (WebCore::DOMWrapperWorld **)(v26 + 16 * v29);
        v31 = *v30;
        ++v33;
        if (!*v30)
        {
          if (v32)
          {
            *v32 = 0;
            v32[1] = 0;
            --*(_DWORD *)(*(_QWORD *)this - 16);
            v30 = v32;
          }
          goto LABEL_35;
        }
      }
    }
    else
    {
LABEL_35:
      WTF::GenericHashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>::assignToEmpty<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>(v30, (WTF::StringImpl *)v74);
      v34 = *(_QWORD *)(v23 + 16);
      v35 = v30[1];
      if (!v35)
      {
        v36 = *(uint64_t **)((v23 & 0xFFFFFFFFFFFFF000) + 0x10);
        v37 = *v36;
        v38 = *(_QWORD **)(*v36 + 712);
        if (!v38)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v37 + 672));
          v38 = *(_QWORD **)(v37 + 712);
        }
        *(_QWORD *)(v37 + 712) = *v38;
        v38[2] = 0;
        v35 = (WebCore::DOMWrapperWorld *)(v38 + 2);
        *v38 = 0;
        v38[1] = 0;
        v30[1] = (WebCore::DOMWrapperWorld *)(v38 + 2);
      }
      v39 = (unint64_t)v35 - 16;
      if ((v34 != 0) != (*(_QWORD *)v35 != 0))
      {
        if (v34)
        {
          v40 = *(unint64_t **)((v39 & 0xFFFFFFFFFFFFF000) + 0x10);
          v41 = v40[3];
          v40 += 3;
          *(_QWORD *)v39 = v41;
          *((_QWORD *)v35 - 1) = v40;
          *v40 = v39;
          *(_QWORD *)(v41 + 8) = v39;
        }
        else
        {
          v61 = *(_QWORD *)v39;
          v60 = (_QWORD *)*((_QWORD *)v35 - 1);
          *v60 = *(_QWORD *)v39;
          *(_QWORD *)(v61 + 8) = v60;
          *(_QWORD *)v39 = 0;
          *(_QWORD *)(v39 + 8) = 0;
          v35 = v30[1];
        }
      }
      *(_QWORD *)v35 = v34;
      v42 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v43 = *(_DWORD *)(v42 - 12) + 1;
      else
        v43 = 1;
      *(_DWORD *)(v42 - 12) = v43;
      v44 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v45 = *(_DWORD *)(v44 - 12);
      else
        v45 = 0;
      v46 = (*(_DWORD *)(v44 - 16) + v45);
      v47 = *(unsigned int *)(v44 - 4);
      if (v47 <= 0x400)
      {
        if (3 * v47 > 4 * v46)
          goto LABEL_55;
        if ((_DWORD)v47)
LABEL_51:
          v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
        else
          v48 = 8;
        WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::rehash((uint64_t *)this, v48);
        goto LABEL_55;
      }
      if (v47 <= 2 * v46)
        goto LABEL_51;
    }
LABEL_55:
    v49 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF000) + 0x10);
    v50 = *(_QWORD **)(v23 + 8);
    if (v50)
    {
      v51 = *(_QWORD *)v23;
      *v50 = *(_QWORD *)v23;
      *(_QWORD *)(v51 + 8) = v50;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
    }
    *(_QWORD *)v23 = *(_QWORD *)(v49 + 40);
    *(_QWORD *)(v49 + 40) = v23;
    if (v74[0])
    {
      if (*(_DWORD *)v74[0] == 1)
      {
        WebCore::DOMWrapperWorld::~DOMWrapperWorld(v74[0], v28);
        WTF::fastFree(v58, v59);
      }
      else
      {
        --*(_DWORD *)v74[0];
      }
    }
    v74[0] = 0;
    JSC::JSGlobalObject::setConsoleClient();
    v52 = (unsigned int *)v74[0];
    v74[0] = 0;
    if (v52)
    {
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v13);
      }
    }
    v55 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF000) + 0x10);
    v56 = *(_QWORD **)(v16 + 8);
    if (v56)
    {
      v57 = *(_QWORD *)v16;
      *v56 = *(_QWORD *)v16;
      *(_QWORD *)(v57 + 8) = v56;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
    }
    *(_QWORD *)v16 = *(_QWORD *)(v55 + 40);
    *(_QWORD *)(v55 + 40) = v16;
    v14 = (WTF *)((char *)v14 + 8);
  }
  while (v14 != v69);
  v14 = v71;
  if (HIDWORD(v72))
  {
    v62 = 8 * HIDWORD(v72);
    do
    {
      v63 = *(uint64_t **)v14;
      if (*(_QWORD *)v14)
      {
        v64 = v63 - 2;
        v65 = *(_QWORD *)(((unint64_t)(v63 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v66 = (uint64_t *)*(v63 - 1);
        if (v66)
        {
          v67 = *v64;
          *v66 = *v64;
          *(_QWORD *)(v67 + 8) = v66;
          *v64 = 0;
          v64[1] = 0;
        }
        *v64 = *(_QWORD *)(v65 + 40);
        *(_QWORD *)(v65 + 40) = v64;
        *(_QWORD *)v14 = 0;
      }
      v14 = (WTF *)((char *)v14 + 8);
      v62 -= 8;
    }
    while (v62);
    v14 = v71;
LABEL_80:
    if (v14)
    {
LABEL_81:
      v71 = 0;
      LODWORD(v72) = 0;
      WTF::fastFree(v14, v13);
    }
  }
  else if (v71)
  {
    goto LABEL_81;
  }
  WebCore::WindowProxy::attachDebugger(*((_QWORD *)a2 + 14), 0);
  MEMORY[0x19AEA32A0](v73);
  return this;
}

uint64_t WebCore::WindowProxy::jsWindowProxiesAsVector@<X0>(WebCore::WindowProxy *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13[5];

  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v5 = *v4;
  if (!*v4)
  {
    v8 = 0;
    v6 = 0;
LABEL_12:
    v7 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_8;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = (uint64_t *)(v5 + 16 * v6);
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_12;
  }
  v8 = (uint64_t *)*v4;
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = (uint64_t *)*v4;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v5)
  {
    v10 = *(unsigned int *)(v5 - 4);
    v11 = (uint64_t *)(v5 + 16 * v10);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v13[0] = v4;
  v13[1] = v8;
  v13[2] = v7;
  v13[3] = v11;
  v13[4] = (uint64_t *)(v5 + 16 * v10);
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map((uint64_t)a2, v13);
}

uint64_t WebCore::WindowProxy::attachDebugger(uint64_t this, JSC::Debugger *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  _BYTE v13[8];

  v3 = **(_QWORD **)(this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 16 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = **(_QWORD **)(this + 16);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = **(_QWORD **)(this + 16);
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 16;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = v3 + 16 * v4;
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = v3 + 16 * v4;
  if (v3)
  {
LABEL_8:
    v8 = v3 + 16 * *(unsigned int *)(v3 - 4);
    goto LABEL_9;
  }
  v8 = 0;
LABEL_9:
  if (v8 != v6)
  {
    if (a2)
    {
      do
      {
        v11 = *(JSC::JSGlobalObject **)(**(_QWORD **)(v6 + 8) + 16);
        MEMORY[0x19AEA3294](v13, *((_QWORD *)v11 + 7));
        JSC::Debugger::attach(a2, v11);
        this = MEMORY[0x19AEA32A0](v13);
        v12 = v6 + 16;
        v6 = v5;
        if (v12 != v5)
        {
          v6 = v12;
          while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
          {
            v6 += 16;
            if (v6 == v5)
            {
              v6 = v5;
              break;
            }
          }
        }
      }
      while (v6 != v8);
    }
    else
    {
      do
      {
        v9 = *(_QWORD *)(**(_QWORD **)(v6 + 8) + 16);
        MEMORY[0x19AEA3294](v13, *(_QWORD *)(v9 + 56));
        if (*(_QWORD *)(v9 + 2016))
          JSC::Debugger::detach();
        this = MEMORY[0x19AEA32A0](v13);
        v10 = v6 + 16;
        v6 = v5;
        if (v10 != v5)
        {
          v6 = v10;
          while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
          {
            v6 += 16;
            if (v6 == v5)
            {
              v6 = v5;
              break;
            }
          }
        }
      }
      while (v6 != v8);
    }
  }
  return this;
}

void WebCore::ScriptCachedFrameData::~ScriptCachedFrameData(WTF::RunLoop **this, WTF::StringImpl *a2)
{
  WTF::RunLoop *v3;
  WTF::ThreadGroup ***v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *this;
  if (!v3)
    return;
  if (!*((_DWORD *)v3 - 3))
  {
LABEL_16:
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable((uint64_t)v3, a2);
    return;
  }
  v4 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(v3);
    JSC::VM::create();
    v4 = (WTF::ThreadGroup ***)v8;
    WebCore::g_commonVMOrNull = v8;
    if (__ldaxr((unsigned int *)(v8 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v8 + 1096)))
    {
LABEL_8:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v4[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
      goto LABEL_11;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_8;
  }
LABEL_11:
  MEMORY[0x19AEA3294](&v8, v4);
  v7 = (uint64_t)*this;
  if (*this)
  {
    *this = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(v7, v6);
  }
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  WebCore::GCController::garbageCollectSoon((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  MEMORY[0x19AEA32A0](&v8);
  v3 = *this;
  if (*this)
    goto LABEL_16;
}

uint64_t WebCore::ScriptCachedFrameData::restore(WebCore::ScriptCachedFrameData *this, WebCore::LocalFrame *a2)
{
  WTF::ThreadGroup ***v3;
  uint64_t v5;
  WebCore::ScriptCachedFrameData *v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WebCore::DOMWindow *v15;
  WTF *v16;
  uint64_t v17;
  unint64_t v18;
  WebCore::JSWindowProxy **v19;
  WebCore::JSWindowProxy *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM ****v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  JSC::VM ***v36;
  JSC::VM ***v37;
  JSC::VM **v38;
  JSC::VM **v39;
  JSC::VM *v40;
  JSC::VM ***v41;
  uint64_t v42;
  JSC::VM ***v43;
  JSC::VM **v44;
  JSC::Debugger *v45;
  JSC::JSGlobalObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  void *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  WTF **v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::JSWindowProxy **v73;
  WebCore::JSWindowProxy **v74;
  uint64_t v75;
  WebCore::JSWindowProxy **v76;
  WebCore::JSWindowProxy *v77;
  WebCore::LocalFrame *v79;
  WTF *v81;
  WebCore::Page *v82;
  WTF *v83;
  uint64_t v84;
  char v85[8];
  WTF *v86[5];

  v3 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v3 = (WTF::ThreadGroup ***)v86[0];
  WebCore::g_commonVMOrNull = (uint64_t)v86[0];
  if (__ldaxr((unsigned int *)v86[0] + 274))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((WTF *)((char *)v86[0] + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)v86[0] + 274))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*((_QWORD *)v86[0] + 14) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v3[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v3, 0);
LABEL_9:
  MEMORY[0x19AEA3294](v85, v3);
  v5 = *((_QWORD *)a2 + 3);
  if (v5)
    v82 = *(WebCore::Page **)(v5 + 8);
  else
    v82 = 0;
  v6 = this;
  v7 = *(WTF ***)(*((_QWORD *)a2 + 14) + 16);
  v8 = *v7;
  if (*v7)
  {
    v9 = *((unsigned int *)v8 - 1);
    v10 = (WTF *)((char *)v8 + 16 * v9);
    if (*((_DWORD *)v8 - 3))
    {
      v11 = *v7;
      if ((_DWORD)v9)
      {
        v12 = 16 * v9;
        v11 = *v7;
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 = (WTF *)((char *)v11 + 16);
          v12 -= 16;
          if (!v12)
          {
            v11 = v10;
            break;
          }
        }
      }
      if (v8)
        goto LABEL_20;
LABEL_92:
      v14 = 0;
      v13 = 0;
      goto LABEL_21;
    }
    v11 = (WTF *)((char *)v8 + 16 * v9);
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = (WTF *)((char *)v8 + 16 * v9);
  if (!v8)
    goto LABEL_92;
LABEL_20:
  v13 = *((unsigned int *)v8 - 1);
  v14 = (WTF *)((char *)v8 + 16 * v13);
LABEL_21:
  v86[0] = *(WTF **)(*((_QWORD *)a2 + 14) + 16);
  v86[1] = v11;
  v86[2] = v10;
  v86[3] = v14;
  v86[4] = (WTF *)((char *)v8 + 16 * v13);
  v83 = 0;
  v84 = 0;
  WTF::Mapper<WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&)::{lambda(JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>&&)#1},WTF::Vector<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>,WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>> const&,void>::map((uint64_t)&v83, (uint64_t **)v86);
  v16 = v83;
  if (!HIDWORD(v84))
    goto LABEL_87;
  v81 = (WTF *)((char *)v83 + 8 * HIDWORD(v84));
  v79 = a2;
  do
  {
    v17 = *(_QWORD *)(((*(_QWORD *)v16 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v18 = *(_QWORD *)(v17 + 40);
    if (!v18)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((*(_QWORD *)v16 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
      v18 = *(_QWORD *)(v17 + 40);
    }
    *(_QWORD *)(v17 + 40) = *(_QWORD *)v18;
    *(_QWORD *)(v18 + 16) = 0;
    v19 = (WebCore::JSWindowProxy **)(v18 + 16);
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    v20 = **(WebCore::JSWindowProxy ***)v16;
    v21 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = v21[3];
    v21 += 3;
    *(_QWORD *)v18 = v22;
    *(_QWORD *)(v18 + 8) = v21;
    *v21 = v18;
    *(_QWORD *)(v22 + 8) = v18;
    *(_QWORD *)(v18 + 16) = v20;
    v23 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v24 = *((_QWORD *)v20 + 3);
      v25 = *(_DWORD *)(v23 - 8);
      v26 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v24) & v25;
      v27 = *(_QWORD *)(v23 + 16 * v26);
      if (v27 == v24)
      {
LABEL_30:
        v29 = v23 + 16 * v26;
        v32 = *(_QWORD *)(v29 + 8);
        v31 = (JSC::VM ****)(v29 + 8);
        v30 = v32;
        if (v32)
        {
          v33 = (v30 - 16) & 0xFFFFFFFFFFFFF000;
          v34 = *(_QWORD *)(v33 + 16);
          v35 = *(_QWORD **)(v34 + 40);
          if (!v35)
          {
            JSC::HandleSet::grow(*(JSC::HandleSet **)(v33 + 16));
            v35 = *(_QWORD **)(v34 + 40);
          }
          *(_QWORD *)(v34 + 40) = *v35;
          v35[2] = 0;
          v36 = (JSC::VM ***)(v35 + 2);
          *v35 = 0;
          v35[1] = 0;
          v37 = *v31;
          if (*v31)
          {
            v38 = *v37;
            if (*v37)
            {
              v39 = *(JSC::VM ***)(((unint64_t)(v36 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v40 = v39[3];
              v39 += 3;
              *(v36 - 2) = (JSC::VM **)v40;
              *(v36 - 1) = v39;
              *v39 = (JSC::VM *)(v36 - 2);
              *((_QWORD *)v40 + 1) = v36 - 2;
            }
          }
          else
          {
            v38 = 0;
          }
          *v36 = v38;
          v41 = v36 - 2;
          v42 = *(_QWORD *)(((unint64_t)(v36 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v43 = (JSC::VM ***)*(v36 - 1);
          if (v43)
          {
            v44 = *v41;
            *v43 = *v41;
            v44[1] = (JSC::VM *)v43;
            *v41 = 0;
            v41[1] = 0;
          }
          *v41 = *(JSC::VM ***)(v42 + 40);
          *(_QWORD *)(v42 + 40) = v41;
          v20 = *v19;
          if (v38)
          {
            WebCore::JSWindowProxy::setWindow(*v19, v38[7], (WebCore::JSDOMGlobalObject *)v38);
            goto LABEL_58;
          }
        }
      }
      else
      {
        v28 = 1;
        while (v27)
        {
          v26 = ((_DWORD)v26 + v28) & v25;
          v27 = *(_QWORD *)(v23 + 16 * v26);
          ++v28;
          if (v27 == v24)
            goto LABEL_30;
        }
      }
    }
    v15 = *(WebCore::DOMWindow **)(*((_QWORD *)a2 + 37) + 696);
    if (*(WebCore::DOMWindow **)(*((_QWORD *)v20 + 2) + 3408) == v15)
      goto LABEL_73;
    WebCore::JSWindowProxy::setWindow(v20, v15);
    if (!v82)
      goto LABEL_73;
    v45 = (JSC::Debugger *)*((_QWORD *)v82 + 67);
    v46 = (JSC::JSGlobalObject *)*((_QWORD *)*v19 + 2);
    MEMORY[0x19AEA3294](v86, *((_QWORD *)v46 + 7));
    if (v45)
    {
      JSC::Debugger::attach(v45, v46);
    }
    else if (*((_QWORD *)v46 + 252))
    {
      JSC::Debugger::detach();
    }
    MEMORY[0x19AEA32A0](v86);
    v47 = *((_QWORD *)*v19 + 2);
    v48 = *((_QWORD *)v82 + 66);
    if (!v48 || (v49 = *(_QWORD *)(v48 + 8)) == 0)
    {
      WebCore::Page::initGroup(v82);
      v49 = *(_QWORD *)(*((_QWORD *)v82 + 66) + 8);
    }
    v50 = *(_DWORD *)(v49 + 32);
    v51 = *(_QWORD **)(v47 + 2088);
    if (!v51)
    {
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v51 = 0;
      v51[1] = 0;
      v53 = *(WTF **)(v47 + 2088);
      *(_QWORD *)(v47 + 2088) = v51;
      if (v53)
      {
        v54 = *((_QWORD *)v53 + 1);
        if (v54)
        {
          v55 = *(unsigned int *)(v54 - 4);
          if ((_DWORD)v55)
          {
            v56 = (WTF **)(v54 + 8);
            do
            {
              if (*(v56 - 1) != (WTF *)-1)
              {
                v57 = *v56;
                *v56 = 0;
                if (v57)
                  std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100](v57, v52);
              }
              v56 += 2;
              --v55;
            }
            while (v55);
          }
          WTF::fastFree((WTF *)(v54 - 16), v52);
          WTF::fastFree(v53, v58);
          **(_DWORD **)(v47 + 2088) = v50;
          a2 = v79;
          v6 = this;
LABEL_58:
          if (!v82)
            goto LABEL_73;
          goto LABEL_62;
        }
        WTF::fastFree(v53, v52);
        v51 = *(_QWORD **)(v47 + 2088);
      }
    }
    *(_DWORD *)v51 = v50;
LABEL_62:
    v59 = *((_QWORD *)v82 + 99);
    v60 = *(_QWORD *)(v59 + 8);
    if (v60)
      goto LABEL_96;
    v60 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v60 = 1;
    *(_QWORD *)(v60 + 8) = v59;
    v62 = *(unsigned int **)(v59 + 8);
    *(_QWORD *)(v59 + 8) = v60;
    if (!v62)
      goto LABEL_96;
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
    {
      atomic_store(1u, v62);
      WTF::fastFree((WTF *)v62, v61);
    }
    v60 = *(_QWORD *)(v59 + 8);
    if (v60)
    {
LABEL_96:
      do
        v65 = __ldaxr((unsigned int *)v60);
      while (__stlxr(v65 + 1, (unsigned int *)v60));
    }
    v86[0] = (WTF *)v60;
    JSC::JSGlobalObject::setConsoleClient();
    v66 = (unsigned int *)v86[0];
    v86[0] = 0;
    if (v66)
    {
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        atomic_store(1u, v66);
        WTF::fastFree((WTF *)v66, v15);
      }
    }
LABEL_73:
    v69 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
    v70 = *(_QWORD **)(v18 + 8);
    if (v70)
    {
      v71 = *(_QWORD *)v18;
      *v70 = *(_QWORD *)v18;
      *(_QWORD *)(v71 + 8) = v70;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
    }
    *(_QWORD *)v18 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v69 + 40) = v18;
    v16 = (WTF *)((char *)v16 + 8);
  }
  while (v16 != v81);
  v16 = v83;
  if (HIDWORD(v84))
  {
    v72 = 8 * HIDWORD(v84);
    do
    {
      v73 = *(WebCore::JSWindowProxy ***)v16;
      if (*(_QWORD *)v16)
      {
        v74 = v73 - 2;
        v75 = *(_QWORD *)(((unint64_t)(v73 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v76 = (WebCore::JSWindowProxy **)*(v73 - 1);
        if (v76)
        {
          v77 = *v74;
          *v76 = *v74;
          *((_QWORD *)v77 + 1) = v76;
          *v74 = 0;
          v74[1] = 0;
        }
        *v74 = *(WebCore::JSWindowProxy **)(v75 + 40);
        *(_QWORD *)(v75 + 40) = v74;
        *(_QWORD *)v16 = 0;
      }
      v16 = (WTF *)((char *)v16 + 8);
      v72 -= 8;
    }
    while (v72);
    v16 = v83;
  }
LABEL_87:
  if (v16)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree(v16, v15);
  }
  return MEMORY[0x19AEA32A0](v85);
}

void WebCore::ScriptController::~ScriptController(WebCore::ScriptController *this, WebScriptObject *a2)
{
  WebCore *v3;
  const void *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[8];

  v3 = (WebCore *)*((_QWORD *)this + 8);
  if (v3)
    v3 = (WebCore *)WebCore::disconnectWindowWrapper(v3, a2);
  if (*((_QWORD *)this + 6))
  {
    if (!WebCore::g_commonVMOrNull)
      WebCore::commonVMSlow(v3);
    MEMORY[0x19AEA3294](v16);
    JSC::Bindings::RootObject::invalidate(*((_QWORD **)this + 6), v8);
    v9 = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    MEMORY[0x19AEA32A0](v16);
  }
  v4 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v10 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v10)
    {
      v11 = (_DWORD **)(v5 + 8);
      do
      {
        if (*(v11 - 1) != (_DWORD *)-1)
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
          {
            if (v12[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            else
              --v12[2];
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v13 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willEvaluateScript(WTF::JSONImpl::Object *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        return WebCore::InspectorInstrumentation::willEvaluateScriptImpl(*(WTF::JSONImpl::Object **)(*(_QWORD *)(v5 + 80) + 8), this, a2, (WTF::String *)1, (WTF::JSONImpl::Value *)1);
    }
  }
  return this;
}

uint64_t std::optional<WebCore::ExceptionDetails>::operator=[abi:sn180100]<WebCore::ExceptionDetails,void>(uint64_t a1, WTF::StringImpl *a2)
{
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v5;
    v10 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    v11 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t WebCore::JSExecState::loadModule(WebCore *a1, WTF::StringImpl **a2)
{
  WebCore *v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t Module;
  WebCore::JSDOMGlobalObject *v14;
  WTF::StringImpl *v15;

  v3 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (a1 = *(WebCore **)(v5 + 96)) == 0)
    a1 = (WebCore *)WebCore::threadGlobalDataSlow(a1);
  v14 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)a1 + 8);
  v6 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v8 = *(_QWORD *)(StatusReg + 736);
  if (!v8 || (v6 = *(WebCore **)(v8 + 96)) == 0)
    v6 = (WebCore *)WebCore::threadGlobalDataSlow(v6);
  *((_QWORD *)v6 + 8) = v3;
  v9 = *a2;
  if (v9)
  {
    if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v9 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase();
      v9 = v15;
    }
  }
  v10 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  if (v10)
    *(_DWORD *)v9 = v10;
  else
    WTF::StringImpl::destroy(v9, v7);
  Module = JSC::loadModule();
  v15 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::JSExecState::~JSExecState(&v14, v11);
  return Module;
}

uint64_t WebCore::ScriptController::setupModuleScriptHandlers(WebCore::ScriptController *this, WebCore::LoadableModuleScript *a2, JSC::JSInternalPromise *a3, WebCore::DOMWrapperWorld *a4)
{
  JSC::JSGlobalObject *v6;
  _QWORD *v7;
  JSC::JSFunction *v8;
  _QWORD *v9;
  JSC::JSFunction *v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;

  v6 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(this, a4) + 2);
  *((_DWORD *)a2 + 2) += 2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E33942C0;
  v7[1] = a2;
  v12 = v7;
  v8 = (JSC::JSFunction *)JSC::JSNativeStdFunction::create();
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  ++*((_DWORD *)a2 + 2);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E33942E8;
  v9[1] = a2;
  v13 = v9;
  v10 = (JSC::JSFunction *)JSC::JSNativeStdFunction::create();
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  result = JSC::JSInternalPromise::then(a3, v6, v8, v10);
  if (*((_DWORD *)a2 + 2) == 1)
    return (*(uint64_t (**)(WebCore::LoadableModuleScript *))(*(_QWORD *)a2 + 8))(a2);
  --*((_DWORD *)a2 + 2);
  return result;
}

uint64_t WebCore::ScriptController::loadModuleScript(uint64_t a1, WebCore::LoadableModuleScript *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebCore::DOMWrapperWorld *v8;
  uint64_t *v9;
  uint64_t v10;
  JSC::JSInternalPromise *Module;
  WebCore::LoadableModuleScript *v12;
  uint64_t v14;
  WebCore::LoadableModuleScript *v15;
  char v16[8];

  {
    v8 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    v14 = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      v14 = WebCore::commonVMSlow(0);
    v8 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v14 + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v8;
  }
  MEMORY[0x19AEA3294](v16, *((_QWORD *)v8 + 2));
  v9 = (uint64_t *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(a1 + 16) + 112), v8)+ 2);
  JSC::JSScriptFetchParameters::create(v9[7], *(_QWORD *)(v9[7] + 41680), a4);
  v10 = v9[7];
  ++*((_DWORD *)a2 + 2);
  v15 = a2;
  JSC::JSScriptFetcher::create(v10, *(_QWORD *)(v10 + 41672), (uint64_t *)&v15);
  Module = (JSC::JSInternalPromise *)WebCore::JSExecState::loadModule((WebCore *)v9, a3);
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)(WebCore::LoadableModuleScript *))(*(_QWORD *)v12 + 8))(v12);
    else
      --*((_DWORD *)v12 + 2);
  }
  if (Module)
    WebCore::ScriptController::setupModuleScriptHandlers(*(WebCore::ScriptController **)(*(_QWORD *)(a1 + 16) + 112), a2, Module, v8);
  return MEMORY[0x19AEA32A0](v16);
}

uint64_t WebCore::ScriptController::loadModuleScript(WebCore::ScriptController *this, WebCore::LoadableModuleScript *a2, const WebCore::ScriptSourceCode *a3)
{
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v8;
  unint64_t StatusReg;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  JSC::JSInternalPromise *Module;
  JSC::JSGlobalObject *v14;
  WebCore::LoadableModuleScript *v15;
  WebCore::JSDOMGlobalObject *v17;
  WebCore::LoadableModuleScript *v19;
  _BYTE v20[8];
  WebCore::JSDOMGlobalObject *v21;

  {
    v17 = (WebCore::JSDOMGlobalObject *)WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_25:
      v5 = *(WebCore::DOMWrapperWorld **)(*((_QWORD *)v17 + 5182) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v5;
      goto LABEL_3;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v17 = v21;
    WebCore::g_commonVMOrNull = (uint64_t)v21;
    if (__ldaxr((unsigned int *)v21 + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)v21 + 274))
    {
LABEL_22:
      if (webThreadStarted == 1)
        *(_BYTE *)(*((_QWORD *)v21 + 14) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v17 + 73));
      WebCore::JSVMClientData::initNormalWorld(v17, 0);
      goto LABEL_25;
    }
    JSC::Heap::acquireAccessSlow((WebCore::JSDOMGlobalObject *)((char *)v21 + 192));
    goto LABEL_22;
  }
  v5 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_3:
  MEMORY[0x19AEA3294](v20, *((_QWORD *)v5 + 2));
  v6 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v5) + 2);
  v7 = *(_QWORD *)(v6 + 56);
  ++*((_DWORD *)a2 + 2);
  v19 = a2;
  v8 = (WebCore *)JSC::JSScriptFetcher::create(v7, *(_QWORD *)(v7 + 41672), (uint64_t *)&v19);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v8 = *(WebCore **)(v10 + 96)) == 0)
    v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
  v21 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)v8 + 8);
  v11 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v12 = *(_QWORD *)(StatusReg + 736);
  if (!v12 || (v11 = *(WebCore **)(v12 + 96)) == 0)
    v11 = (WebCore *)WebCore::threadGlobalDataSlow(v11);
  *((_QWORD *)v11 + 8) = v6;
  Module = (JSC::JSInternalPromise *)JSC::loadModule();
  WebCore::JSExecState::~JSExecState(&v21, v14);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
    {
      (*(void (**)(WebCore::LoadableModuleScript *))(*(_QWORD *)v15 + 8))(v15);
      if (!Module)
        return MEMORY[0x19AEA32A0](v20);
      goto LABEL_13;
    }
    --*((_DWORD *)v15 + 2);
  }
  if (Module)
LABEL_13:
    WebCore::ScriptController::setupModuleScriptHandlers(*(WebCore::ScriptController **)(*((_QWORD *)this + 2) + 112), a2, Module, v5);
  return MEMORY[0x19AEA32A0](v20);
}

uint64_t WebCore::ScriptController::linkAndEvaluateModuleScriptInWorld(WebCore::ScriptController *this, WebCore::LoadableModuleScript *a2, WebCore::DOMWrapperWorld *a3)
{
  WTF::StringImpl *v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;

  MEMORY[0x19AEA3294](v23, *((_QWORD *)a3 + 2));
  v7 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), a3)+ 2);
  v8 = *((_QWORD *)this + 2);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v22 = 0;
  v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  v12 = *((_DWORD *)v11 + 4);
  if ((v12 & 0x20) != 0)
  {
    v13 = *(_DWORD *)v11 + 2;
LABEL_7:
    *(_DWORD *)v11 = v13;
    goto LABEL_8;
  }
  if ((v12 & 0x10) != 0)
  {
    *(_DWORD *)v11 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase();
    v11 = v24;
  }
  v13 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  if (v13)
    goto LABEL_7;
  WTF::StringImpl::destroy(v11, v6);
LABEL_8:
  v24 = v11;
  v15 = WebCore::JSExecState::linkAndEvaluateModule((uint64_t)v7, (uint64_t)&v24, 10, &v22);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v22)
  {
    WebCore::reportException(v7, v22, 0, 1, 0);
    v15 = 10;
  }
  if (v8)
  {
    do
    {
      v17 = __ldaxr(v9);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v9));
    if (!v18)
    {
      atomic_store(1u, v9);
      v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v20 = off_1E31FE290;
      *((_QWORD *)v20 + 1) = v9;
      v24 = v20;
      WTF::ensureOnMainThread();
      v21 = v24;
      v24 = 0;
      if (v21)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  MEMORY[0x19AEA32A0](v23);
  return v15;
}

uint64_t WebCore::JSExecState::linkAndEvaluateModule(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  JSC::VM *v6;
  unint64_t StatusReg;
  uint64_t v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::JSDOMGlobalObject *v16[2];

  v5 = a1;
  v6 = *(JSC::VM **)(a1 + 56);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 736);
  if (!v8 || (a1 = *(_QWORD *)(v8 + 96)) == 0)
    a1 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v16[0] = *(WebCore::JSDOMGlobalObject **)(a1 + 64);
  v9 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v9 = *(WebCore **)(v10 + 96)) == 0)
    v9 = (WebCore *)WebCore::threadGlobalDataSlow(v9);
  *((_QWORD *)v9 + 8) = v5;
  v11 = JSC::linkAndEvaluateModule();
  v13 = *((_QWORD *)v6 + 2);
  if (v13)
  {
    *a4 = v13;
    if (*((_QWORD *)v6 + 3) != v13)
      JSC::VM::clearException(v6);
    WebCore::JSExecState::~JSExecState(v16, v12);
    return 10;
  }
  else
  {
    v14 = v11;
    WebCore::JSExecState::~JSExecState(v16, v12);
  }
  return v14;
}

uint64_t *WebCore::ScriptController::createWorld@<X0>(WTF::RunLoop *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t v14[3];
  uint64_t v15;

  v6 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(a1);
  JSC::VM::create();
  v6 = v14[0];
  WebCore::g_commonVMOrNull = v14[0];
  if (__ldaxr((unsigned int *)(v14[0] + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v14[0] + 1096)))
  {
    goto LABEL_11;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v14[0] + 192));
LABEL_11:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v14[0] + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v6 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
LABEL_2:
  v7 = WTF::fastMalloc((WTF *)0x38);
  v8 = v7;
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  v9 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v9 += 2;
  if (a2)
    v10 = 2;
  else
    v10 = 1;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = v10;
  *(_WORD *)(v7 + 52) = 0;
  v11 = (uint64_t *)(*(_QWORD *)(v6 + 41456) + 8);
  v15 = v8;
  result = WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::add(v11, &v15, (uint64_t)v14);
  *a3 = v8;
  return result;
}

uint64_t WebCore::ScriptController::getAllWorlds(WTF::RunLoop *a1)
{
  uint64_t v2;
  uint64_t v5;

  v2 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    return WebCore::JSVMClientData::getAllWorlds(*(_QWORD *)(v2 + 41456), (uint64_t)a1);
  WTF::RunLoop::webIfExists(a1);
  JSC::VM::create();
  v2 = v5;
  WebCore::g_commonVMOrNull = v5;
  if (__ldaxr((unsigned int *)(v5 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v5 + 1096)))
  {
    goto LABEL_6;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v5 + 192));
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v5 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v5 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
  return WebCore::JSVMClientData::getAllWorlds(*(_QWORD *)(v2 + 41456), (uint64_t)a1);
}

uint64_t WebCore::JSVMClientData::getAllWorlds(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *i;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  _DWORD **v33;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a2 + 8) = v5;
      *(_QWORD *)a2 = result;
    }
  }
  {
    v6 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  }
  else
  {
    result = WebCore::g_commonVMOrNull;
    if (!WebCore::g_commonVMOrNull)
      result = WebCore::commonVMSlow(0);
    v6 = *(_QWORD *)(*(_QWORD *)(result + 41456) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v6;
  }
  v7 = *(_QWORD *)(v3 + 8);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 8 * v12);
    if (v13 == v6)
    {
LABEL_9:
      v14 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 8))
      {
        result = WTF::Vector<WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMWrapperWorld&>(a2, (_DWORD *)v6);
      }
      else
      {
        v15 = *(_QWORD *)a2;
        ++*(_DWORD *)v6;
        *(_QWORD *)(v15 + 8 * v14) = v6;
        *(_DWORD *)(a2 + 12) = v14 + 1;
      }
    }
    else
    {
      v29 = 1;
      while (v13)
      {
        v12 = (v12 + v29) & v8;
        v13 = *(_QWORD *)(v7 + 8 * v12);
        ++v29;
        if (v13 == v6)
          goto LABEL_9;
      }
    }
    v16 = *(_QWORD **)(v3 + 8);
    if (v16 && *((_DWORD *)v16 - 3))
    {
      v17 = *((unsigned int *)v16 - 1);
      v18 = *(_DWORD ***)(v3 + 8);
      if ((_DWORD)v17)
      {
        v19 = 0;
        while ((unint64_t)(v16[v19] + 1) <= 1)
        {
          if (v17 == ++v19)
            goto LABEL_17;
        }
        v18 = (_DWORD **)&v16[v19];
      }
      v27 = (_DWORD **)&v16[v17];
      if (v18 != v27)
      {
        v28 = *v18;
LABEL_36:
        if (v28 != (_DWORD *)v6 && !v28[12])
        {
          v32 = v18;
          v33 = v27;
          v30 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v30 == *(_DWORD *)(a2 + 8))
          {
            result = WTF::Vector<WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMWrapperWorld&>(a2, v28);
          }
          else
          {
            v31 = *(_QWORD *)a2;
            ++*v28;
            *(_QWORD *)(v31 + 8 * v30) = v28;
            *(_DWORD *)(a2 + 12) = v30 + 1;
          }
          v18 = v32;
          v27 = v33;
        }
        while (++v18 != v27)
        {
          v28 = *v18;
          if ((unint64_t)*v18 + 1 > 1)
          {
            if (v18 != v27)
              goto LABEL_36;
            break;
          }
        }
        v16 = *(_QWORD **)(v3 + 8);
      }
LABEL_17:
      if (v16 && *((_DWORD *)v16 - 3))
      {
        v20 = *((unsigned int *)v16 - 1);
        i = v16;
        if ((_DWORD)v20)
        {
          v22 = 8 * v20;
          for (i = v16; (unint64_t)(*i + 1) <= 1; ++i)
          {
            v22 -= 8;
            if (!v22)
              return result;
          }
        }
        v23 = &v16[v20];
        if (v23 != i)
        {
          v24 = (_DWORD *)*i;
LABEL_26:
          if (v24[12])
          {
            v25 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v25 == *(_DWORD *)(a2 + 8))
            {
              result = WTF::Vector<WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMWrapperWorld&>(a2, v24);
            }
            else
            {
              v26 = *(_QWORD *)a2;
              ++*v24;
              *(_QWORD *)(v26 + 8 * v25) = v24;
              *(_DWORD *)(a2 + 12) = v25 + 1;
            }
          }
          while (++i != v23)
          {
            v24 = (_DWORD *)*i;
            if ((unint64_t)(*i + 1) > 1)
            {
              if (i != v23)
                goto LABEL_26;
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ScriptController::windowProxy(WebCore::ScriptController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 112);
}

WTF::RunLoop *WebCore::ScriptController::setRequiresTrustedTypes(WTF::RunLoop *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 112);
  {
    v3 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    goto LABEL_3;
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 2) + 112);
  v16 = a2;
  v14 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v14 = v18;
    WebCore::g_commonVMOrNull = v18;
    if (__ldaxr((unsigned int *)(v18 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v18 + 1096)))
    {
LABEL_20:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v18 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v18 + 584));
      this = (WTF::RunLoop *)WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v18, 0);
      goto LABEL_23;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v18 + 192));
    goto LABEL_20;
  }
LABEL_23:
  v3 = *(_QWORD *)(*(_QWORD *)(v14 + 41456) + 16);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v3;
  a2 = v16;
  v2 = v17;
LABEL_3:
  v4 = **(_QWORD **)(v2 + 16);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 != v3)
    {
      v13 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v13) & v5;
        v10 = *(_QWORD *)(v4 + 16 * v9);
        ++v13;
        if (v10 == v3)
          goto LABEL_5;
      }
      v9 = *(unsigned int *)(v4 - 4);
    }
LABEL_5:
    if (v9 != *(_DWORD *)(v4 - 4))
    {
      v11 = *(uint64_t **)(v4 + 16 * v9 + 8);
      if (v11)
      {
        v12 = *v11;
        if (v12)
          *(_BYTE *)(*(_QWORD *)(v12 + 16) + 3171) = a2;
      }
    }
  }
  return this;
}

uint64_t WebCore::ScriptController::canAccessFromCurrentOrigin(WebCore::ScriptController *this, WebCore::LocalFrame *a2, WebCore::Document *a3)
{
  WebCore::ScriptController *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::SecurityOrigin *v9;
  WebCore::SecurityOrigin *v10;
  WTF::StringImpl *v11;
  const WebCore::SecurityOrigin *v12;

  v4 = this;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (this = *(WebCore::ScriptController **)(v5 + 96)) == 0)
    this = (WebCore::ScriptController *)WebCore::threadGlobalDataSlow(this);
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    if (v4)
      return WebCore::canAccessDocument(v6, *((WTF::StringImpl **)v4 + 37), 1);
  }
  else if (v4)
  {
    v8 = *((_QWORD *)v4 + 37);
    if (v8)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::LocalFrame *)((char *)a2 + 192), a2);
      v10 = v9;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 + 192), v11);
      return WebCore::SecurityOrigin::isSameOriginDomain(v10, v12);
    }
  }
  return 0;
}

uint64_t WebCore::ScriptController::bindingRootObject(WebCore::ScriptController *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t result;
  WTF::ThreadGroup ***v9;
  WTF::RunLoop *v11;
  WebCore::DOMWrapperWorld *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v22;
  char v23[8];
  uint64_t v24[3];
  uint64_t v25;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = v2[37];
  if (v3 && (*(_BYTE *)(v3 + 268) & 0x10) != 0)
    return 0;
  v4 = v2[3];
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)(v2[35] + 16);
  v6 = v2[17];
  v7 = *(_BYTE *)(v6 + 245) ? *(_BYTE *)(v6 + 244) != 0 : (*(_QWORD *)(v6 + 688) >> 52) & 1;
  if (!(*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)v5 + 968))(v5, v7))
    return 0;
  result = *((_QWORD *)this + 5);
  if (result)
    return result;
  v9 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(0);
    JSC::VM::create();
    v9 = (WTF::ThreadGroup ***)v24[0];
    WebCore::g_commonVMOrNull = v24[0];
    if (__ldaxr((unsigned int *)(v24[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v24[0] + 1096)))
    {
LABEL_16:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v24[0] + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v9[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v9, 0);
      goto LABEL_19;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v24[0] + 192));
    goto LABEL_16;
  }
LABEL_19:
  v11 = (WTF::RunLoop *)MEMORY[0x19AEA3294](v23, v9);
  {
    v20 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_41:
      v12 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v20 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v12;
      goto LABEL_21;
    }
    WTF::RunLoop::webIfExists(v11);
    JSC::VM::create();
    v20 = v24[0];
    WebCore::g_commonVMOrNull = v24[0];
    if (__ldaxr((unsigned int *)(v24[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v24[0] + 1096)))
    {
LABEL_38:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v20 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v20 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v20, 0);
      goto LABEL_41;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v20 + 192));
    goto LABEL_38;
  }
  v12 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_21:
  v13 = *(_QWORD *)(WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v12)
                  + 16);
  v14 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E3394D70;
  *(_BYTE *)(v14 + 12) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  v15 = *(_QWORD *)(v13 + 56);
  v16 = *(_QWORD *)(v15 + 712);
  if (!v16)
  {
    v22 = *(_QWORD *)(v13 + 56);
    JSC::HandleSet::grow((JSC::HandleSet *)(v15 + 672));
    v15 = v22;
    v16 = *(_QWORD *)(v22 + 712);
  }
  *(_QWORD *)(v15 + 712) = *(_QWORD *)v16;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v14 + 24) = v16 + 16;
  if (!*(_QWORD *)(v16 + 16))
  {
    v17 = *(unint64_t **)((v16 & 0xFFFFFFFFFFFFF000) + 0x10);
    v18 = v17[3];
    v17 += 3;
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v17;
    *v17 = v16;
    *(_QWORD *)(v18 + 8) = v16;
  }
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  {
    JSC::Bindings::rootObjectSet(void)::staticRootObjectSet = 0;
  }
  v25 = v14;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&JSC::Bindings::rootObjectSet(void)::staticRootObjectSet, &v25, (uint64_t)v24);
  v19 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v14;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  MEMORY[0x19AEA32A0](v23);
  return *((_QWORD *)this + 5);
}

uint64_t WebCore::ScriptController::createRootObject@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::DOMWrapperWorld *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39[3];
  uint64_t v40;

  v4 = this;
  v6 = (uint64_t *)(this + 56);
  v7 = *(_QWORD *)(this + 56);
  if (!v7)
    goto LABEL_10;
  v8 = *(_DWORD *)(v7 - 8);
  this = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2);
  v9 = this & v8;
  v10 = *(void **)(v7 + 16 * v9);
  if (v10 == a2)
  {
LABEL_6:
    v12 = v7 + 16 * v9;
    v13 = *v6;
    if (!*v6)
      goto LABEL_7;
    v36 = *(unsigned int *)(v13 - 4);
  }
  else
  {
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v8;
      v10 = *(void **)(v7 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_6;
    }
    v13 = *v6;
    if (!*v6)
      goto LABEL_10;
    v36 = *(unsigned int *)(v13 - 4);
    v12 = v13 + 16 * v36;
  }
  v13 += 16 * v36;
LABEL_7:
  if (v12 != v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    ++*(_DWORD *)(v14 + 8);
    *a3 = v14;
    return this;
  }
LABEL_10:
  {
    v15 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    goto LABEL_12;
  }
  v37 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)this);
    JSC::VM::create();
    v37 = v39[0];
    WebCore::g_commonVMOrNull = v39[0];
    if (__ldaxr((unsigned int *)(v39[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v39[0] + 1096)))
    {
LABEL_61:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v39[0] + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v37 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v37, 0);
      goto LABEL_64;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v39[0] + 192));
    goto LABEL_61;
  }
LABEL_64:
  v15 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v37 + 41456) + 16);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v15;
LABEL_12:
  v16 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v4 + 16) + 112), v15)
        + 2);
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)v17 = off_1E3394D70;
  *(_BYTE *)(v17 + 12) = 1;
  *(_QWORD *)(v17 + 16) = a2;
  v18 = *(_QWORD *)(v16 + 56);
  v19 = *(_QWORD *)(v18 + 712);
  if (!v19)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v18 + 672));
    v19 = *(_QWORD *)(v18 + 712);
  }
  *(_QWORD *)(v18 + 712) = *(_QWORD *)v19;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v17 + 24) = v19 + 16;
  if (!*(_QWORD *)(v19 + 16))
  {
    v20 = *(unint64_t **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = v20[3];
    v20 += 3;
    *(_QWORD *)v19 = v21;
    *(_QWORD *)(v19 + 8) = v20;
    *v20 = v19;
    *(_QWORD *)(v21 + 8) = v19;
  }
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  {
    JSC::Bindings::rootObjectSet(void)::staticRootObjectSet = 0;
  }
  v40 = v17;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&JSC::Bindings::rootObjectSet(void)::staticRootObjectSet, &v40, (uint64_t)v39);
  *a3 = v17;
  ++*(_DWORD *)(v17 + 8);
  v22 = *v6;
  if (*v6
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, 8u), (v22 = *v6) != 0))
  {
    v23 = *(_DWORD *)(v22 - 8);
  }
  else
  {
    v23 = 0;
  }
  v24 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2) & v23;
  v25 = (_QWORD *)(v22 + 16 * v24);
  v26 = (void *)*v25;
  if (!*v25)
  {
LABEL_29:
    this = v25[1];
    *v25 = a2;
    v25[1] = v17;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 8);
    }
    v29 = *v6;
    if (*v6)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v6;
    if (*v6)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        return this;
    }
    else
    {
      if (3 * v34 > 4 * v33)
        return this;
      if (!(_DWORD)v34)
      {
        v35 = 8;
        return WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v35);
      }
    }
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
    return WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v35);
  }
  v27 = 0;
  v28 = 1;
  while (v26 != a2)
  {
    if (v26 == (void *)-1)
      v27 = v25;
    v24 = (v24 + v28) & v23;
    v25 = (_QWORD *)(v22 + 16 * v24);
    v26 = (void *)*v25;
    ++v28;
    if (!*v25)
    {
      if (v27)
      {
        *v27 = 0;
        v27[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v25 = v27;
      }
      goto LABEL_29;
    }
  }
  this = v25[1];
  v25[1] = v17;
  if (this)
  {
    if (*(_DWORD *)(this + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    else
      --*(_DWORD *)(this + 8);
  }
  return this;
}

uint64_t WebCore::ScriptController::jsObjectForPluginElement(WebCore::ScriptController *this, uint64_t Object)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  WTF::RunLoop *v10;
  WTF::ThreadGroup ***v11;
  WTF::RunLoop *v13;
  WebCore::DOMWrapperWorld *v14;
  WebCore::JSWindowProxy *v15;
  WebCore::Document *v16;
  WebCore::Node *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t Wrapper;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WebCore::HTMLPlugInElement *v29;
  int v30;
  void *v31;
  WebCore::Node *v32;
  uint64_t v33;
  WebCore::Node *v34;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v5 = v4[37];
  if (!v5 || (*(_BYTE *)(v5 + 268) & 0x10) == 0)
  {
    v6 = v4[3];
    if (v6 && *(_QWORD *)(v6 + 8))
    {
      v7 = *(_QWORD *)(v4[35] + 16);
      v8 = v4[17];
      v9 = *(_BYTE *)(v8 + 245) ? *(_BYTE *)(v8 + 244) != 0 : (*(_QWORD *)(v8 + 688) >> 52) & 1;
      v10 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v7 + 968))(v7, v9);
      if ((_DWORD)v10)
      {
        v11 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
        if (WebCore::g_commonVMOrNull)
          goto LABEL_17;
        WTF::RunLoop::webIfExists(v10);
        JSC::VM::create();
        v11 = (WTF::ThreadGroup ***)v34;
        WebCore::g_commonVMOrNull = (uint64_t)v34;
        if (__ldaxr((unsigned int *)v34 + 274))
        {
          __clrex();
        }
        else if (!__stlxr(4u, (unsigned int *)v34 + 274))
        {
LABEL_14:
          if (webThreadStarted == 1)
            *(_BYTE *)(*((_QWORD *)v34 + 14) + 5) = 1;
          WTF::ThreadGroup::addCurrentThread(*v11[73]);
          WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v11, 0);
LABEL_17:
          v13 = (WTF::RunLoop *)MEMORY[0x19AEA3294](&v33, v11);
          {
            v14 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
            goto LABEL_19;
          }
          v18 = (WebCore::Node *)WebCore::g_commonVMOrNull;
          if (WebCore::g_commonVMOrNull)
          {
LABEL_36:
            v14 = *(WebCore::DOMWrapperWorld **)(*((_QWORD *)v18 + 5182) + 16);
            WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v14;
LABEL_19:
            v15 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v14);
            if (!Object)
            {
LABEL_20:
              MEMORY[0x19AEA32A0](&v33);
              return Object;
            }
            v20 = *((_QWORD *)v15 + 2);
            if (*(_BYTE *)(v20 + 3328))
            {
              v21 = *(_QWORD *)(Object + 8);
              if (!v21)
                goto LABEL_43;
            }
            else
            {
              v23 = *(_QWORD *)(*(_QWORD *)(v20 + 3320) + 32);
              if (!v23)
                goto LABEL_43;
              v24 = *(_DWORD *)(v23 - 8);
              v25 = (~(Object << 32) + Object) ^ ((unint64_t)(~(Object << 32) + Object) >> 22);
              v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
              v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
              v28 = v24 & ((v27 >> 31) ^ v27);
              v29 = *(WebCore::HTMLPlugInElement **)(v23 + 16 * v28);
              if (v29 != (WebCore::HTMLPlugInElement *)Object)
              {
                v30 = 1;
                while (v29)
                {
                  v28 = ((_DWORD)v28 + v30) & v24;
                  v29 = *(WebCore::HTMLPlugInElement **)(v23 + 16 * v28);
                  ++v30;
                  if (v29 == (WebCore::HTMLPlugInElement *)Object)
                    goto LABEL_42;
                }
                goto LABEL_43;
              }
LABEL_42:
              v21 = *(_QWORD *)(v23 + 16 * v28 + 8);
              if (!v21)
              {
LABEL_43:
                *(_DWORD *)(Object + 24) += 2;
                v34 = (WebCore::Node *)Object;
                Wrapper = WebCore::createWrapper((WebCore::DOMWrapperWorld **)v20, (JSC::VM *)v20, (WebCore::JSDOMGlobalObject *)&v34, v16);
                v32 = v34;
                v34 = 0;
                if (v32)
                {
                  if (*((_DWORD *)v32 + 6) == 2)
                  {
                    if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v32, v31);
                  }
                  else
                  {
                    *((_DWORD *)v32 + 6) -= 2;
                  }
                }
                goto LABEL_46;
              }
            }
            if ((*(_BYTE *)(v21 + 8) & 3) == 0)
            {
              Wrapper = *(_QWORD *)v21;
              if (*(_QWORD *)v21)
              {
LABEL_46:
                Object = 0;
                if (Wrapper && (Wrapper & 0xFFFE000000000002) == 0)
                {
                  if (*(unsigned __int8 *)(Wrapper + 5) < 0x17u)
                    Object = 0;
                  else
                    Object = JSC::JSCell::getObject((JSC::JSCell *)Wrapper);
                }
                goto LABEL_20;
              }
            }
            goto LABEL_43;
          }
          WTF::RunLoop::webIfExists(v13);
          JSC::VM::create();
          v18 = v34;
          WebCore::g_commonVMOrNull = (uint64_t)v34;
          if (__ldaxr((unsigned int *)v34 + 274))
          {
            __clrex();
          }
          else if (!__stlxr(4u, (unsigned int *)v34 + 274))
          {
LABEL_33:
            if (webThreadStarted == 1)
              *(_BYTE *)(*((_QWORD *)v18 + 14) + 5) = 1;
            WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v18 + 73));
            WebCore::JSVMClientData::initNormalWorld(v18, 0);
            goto LABEL_36;
          }
          JSC::Heap::acquireAccessSlow((WebCore::Node *)((char *)v18 + 192));
          goto LABEL_33;
        }
        JSC::Heap::acquireAccessSlow((WebCore::Node *)((char *)v34 + 192));
        goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t WebCore::ScriptController::cleanupScriptObjectsForPlugin(uint64_t this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;

  v2 = (uint64_t *)(this + 56);
  v3 = *(_QWORD *)(this + 56);
  if (!v3)
    return this;
  v5 = *(_DWORD *)(v3 - 8);
  this = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2);
  v7 = this & v5;
  v8 = *(void **)(v3 + 16 * v7);
  if (v8 == a2)
  {
LABEL_6:
    v10 = v3 + 16 * v7;
    v11 = *v2;
    if (!*v2)
      goto LABEL_7;
    v19 = *(unsigned int *)(v11 - 4);
LABEL_30:
    v11 += 16 * v19;
LABEL_7:
    if (v10 != v11)
    {
      this = (uint64_t)JSC::Bindings::RootObject::invalidate(*(_QWORD **)(v10 + 8), v6);
      v12 = *v2;
      if (!*v2 || (v12 += 16 * *(unsigned int *)(v12 - 4), v12 != v10))
      {
        if (v12 != v10)
        {
          this = *(_QWORD *)(v10 + 8);
          *(_QWORD *)v10 = -1;
          *(_QWORD *)(v10 + 8) = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          ++*(_DWORD *)(*v2 - 16);
          v13 = *v2;
          if (*v2)
            v14 = *(_DWORD *)(v13 - 12) - 1;
          else
            v14 = -1;
          *(_DWORD *)(v13 - 12) = v14;
          v15 = *v2;
          if (*v2)
          {
            v16 = 6 * *(_DWORD *)(v15 - 12);
            v17 = *(_DWORD *)(v15 - 4);
            if (v16 < v17 && v17 >= 9)
              return WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::Bindings::RootObject,WTF::RawPtrTraits<JSC::Bindings::RootObject>,WTF::DefaultRefDerefTraits<JSC::Bindings::RootObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v2, v17 >> 1);
          }
        }
      }
    }
    return this;
  }
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v5;
    v8 = *(void **)(v3 + 16 * v7);
    ++v9;
    if (v8 == a2)
      goto LABEL_6;
  }
  v11 = *v2;
  if (*v2)
  {
    v19 = *(unsigned int *)(v11 - 4);
    v10 = v11 + 16 * v19;
    goto LABEL_30;
  }
  return this;
}

uint64_t WebCore::ScriptController::executeScriptIgnoringException(WTF::RunLoop *a1, _DWORD **a2, char a3, char a4)
{
  uint64_t v5;
  uint64_t v11;

  {
    v5 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_12:
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = *(_QWORD *)(*(_QWORD *)(v5 + 41456) + 16);
      return WebCore::ScriptController::executeScriptInWorldIgnoringException((uint64_t)a1, (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld, a2, a3, a4);
    }
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v5 = v11;
    WebCore::g_commonVMOrNull = v11;
    if (__ldaxr((unsigned int *)(v11 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v11 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v11 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v11 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v11, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v11 + 192));
    goto LABEL_9;
  }
  return WebCore::ScriptController::executeScriptInWorldIgnoringException((uint64_t)a1, (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld, a2, a3, a4);
}

uint64_t WebCore::ScriptController::executeUserAgentScriptInWorldIgnoringException(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2, const WTF::String *a3, char a4)
{
  uint64_t v4;
  _QWORD v6[4];
  int v7;
  char v8;

  WebCore::ScriptController::executeUserAgentScriptInWorld(this, a2, a3, a4, (uint64_t)v6);
  v4 = 0;
  if (v7 != -1)
  {
    if (!v7)
      v4 = v6[0];
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v7])(&v8, v6);
  }
  return v4;
}

WTF::StringImpl *WebCore::ScriptController::executeUserAgentScriptInWorld@<X0>(WebCore::ScriptController *this@<X0>, WebCore::DOMWrapperWorld *a2@<X1>, const WTF::String *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  _DWORD *v18;
  char v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v15 = 0;
  WTF::URL::invalidate((WTF::URL *)&v15);
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  v18 = v10;
  v19 = 0;
  v11 = v15;
  v15 = 0;
  v20 = v11;
  v21 = v16;
  v22 = v17;
  LODWORD(v16) = v16 & 0xFFFFFFFE;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = a4;
  v27 = 0;
  WebCore::ScriptController::executeScriptInWorld(a5, (uint64_t)this, a2, (uint64_t)&v18);
  WebCore::RunJavaScriptParameters::~RunJavaScriptParameters((WebCore::RunJavaScriptParameters *)&v18, v12);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld(WebCore::DOMWrapperWorld &,WebCore::RunJavaScriptParameters &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>)> &&)::$_3::~$_3(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x19AEA7644](v2, 0x1000C4052888210);
  v3 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WebCore::ScriptController::executeJavaScriptURL(uint64_t result, WebCore::ScriptExecutionContext *a2, WebCore::SecurityOrigin **a3, int a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::SecurityOrigin *v13;
  const WebCore::SecurityOrigin *v14;
  uint64_t v15;
  WebCore::DOMWrapperWorld *v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  __n128 v27;
  unsigned int v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v35;
  __int16 v36;
  WTF::RunLoop *v37;
  WTF::StringImpl *v38;
  WebCore::DOMWrapperWorld *v39;
  WTF::RunLoop *v40;
  WTF::StringImpl *v41;
  JSC::JSCell *v42;
  WebCore::DOMWrapperWorld *v43;
  uint64_t v44;
  int String;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v59;
  WTF::StringImpl *v61;
  JSC::VM *v63;
  JSC::JSGlobalObject *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _QWORD v68[2];
  int v69;
  WTF::StringImpl *v70[2];

  v8 = result;
  v9 = *(_QWORD *)(result + 16);
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(result + 16) + 296);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v13 = *a3;
  if (!*a3
    || (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), a2),
        result = WebCore::SecurityOrigin::isSameOriginDomain(v13, v14),
        (_DWORD)result))
  {
    v15 = *(_QWORD *)(v9 + 24);
    if (v15)
    {
      if (*(_QWORD *)(v15 + 8))
      {
        {
          v16 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
          goto LABEL_11;
        }
        v33 = WebCore::g_commonVMOrNull;
        if (WebCore::g_commonVMOrNull)
        {
LABEL_44:
          v16 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v33 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v16;
LABEL_11:
          v17 = *(WebCore::JSDOMGlobalObject **)(WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v8 + 16) + 112), v16)+ 16);
          result = WebCore::JSDOMGlobalObject::scriptExecutionContext(v17);
          if (!result)
            goto LABEL_98;
          v18 = result;
          v19 = *(unsigned __int8 *)(result + 274);
          if (*(_BYTE *)(result + 274))
          {
            if (v19 == 1 || v19 == 2)
              ++*(_DWORD *)(result + 312);
          }
          else
          {
            *(_DWORD *)(result - 168) += 2;
          }
          result = (uint64_t)WebCore::requireTrustedTypesForPreNavigationCheckPasses((WebCore *)result, a2, (uint64_t)v68);
          v20 = v69;
          if (v69)
            goto LABEL_93;
          v67 = (WTF::StringImpl *)v68[0];
          v68[0] = 0;
          if (!v67)
          {
LABEL_92:
            v20 = v69;
LABEL_93:
            if (v20 != -1)
              result = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E3393C18[v20])(v70, v68);
            v54 = *(unsigned __int8 *)(v18 + 274);
            if (*(_BYTE *)(v18 + 274))
            {
              if (v54 == 1)
              {
                if (*(_DWORD *)(v18 + 312) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
                else
                  --*(_DWORD *)(v18 + 312);
              }
              else if (v54 == 2)
              {
                result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v18 + 312));
              }
            }
            else if (*(_DWORD *)(v18 - 168) == 2)
            {
              if ((*(_WORD *)(v18 - 162) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)(v18 - 192));
            }
            else
            {
              *(_DWORD *)(v18 - 168) -= 2;
            }
            goto LABEL_98;
          }
          v21 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v12 + 192));
          v22 = v21;
          if (v21)
          {
            do
              v23 = __ldaxr(v21);
            while (__stlxr(v23 + 1, v21));
          }
          v24 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 296) + 728);
          if (v24)
          {
            v24 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 16))(v24);
            if (v24)
              v24 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 168))(v24);
          }
          v70[0] = v24;
          v25 = WebCore::ContentSecurityPolicy::allowJavaScriptURLs((uint64_t)v22, (uint64_t (**)())(v12 + 736), (uint64_t (**)())v70, (uint64_t (**)())&v67, 0);
          if (v22)
          {
            if (!atomic_load(v22))
            {
              __break(0xC471u);
              JUMPOUT(0x1956D94D8);
            }
            do
              v29 = __ldaxr(v22);
            while (__stlxr(v29 - 1, v22));
          }
          if (!v25)
          {
LABEL_89:
            result = (uint64_t)v67;
            v67 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
              else
                *(_DWORD *)result -= 2;
            }
            goto LABEL_92;
          }
          v64 = v17;
          if (v67)
          {
            v30 = (WTF::StringImpl *)*((_QWORD *)v67 + 1);
            v31 = *((_DWORD *)v67 + 1);
            v32 = ((unint64_t)*((unsigned int *)v67 + 4) >> 2) & 1;
          }
          else
          {
            v30 = 0;
            v31 = 0;
            v32 = 1;
          }
          v63 = (JSC::VM *)*((_QWORD *)v64 + 7);
          {
            if (v31)
            {
LABEL_29:
              PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v30, v31 | (v32 << 32), (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v66, v27);
LABEL_56:
              v37 = v66;
              if (v66)
              {
                v37 = (WTF::RunLoop *)WTF::StringImpl::substring(v66);
                v38 = v70[0];
              }
              else
              {
                v38 = 0;
              }
              v65 = v38;
              {
                v39 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
                goto LABEL_60;
              }
              v59 = (WTF::StringImpl *)WebCore::g_commonVMOrNull;
              if (WebCore::g_commonVMOrNull)
              {
LABEL_138:
                v39 = *(WebCore::DOMWrapperWorld **)(*((_QWORD *)v59 + 5182) + 16);
                WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v39;
LABEL_60:
                v40 = (WTF::RunLoop *)WebCore::ScriptController::executeScriptInWorldIgnoringException(v8, v39, (_DWORD **)&v65, 0, 0);
                v42 = v40;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    v40 = (WTF::RunLoop *)WTF::StringImpl::destroy(v38, v41);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                {
                  v43 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
                  goto LABEL_65;
                }
                v61 = (WTF::StringImpl *)WebCore::g_commonVMOrNull;
                if (WebCore::g_commonVMOrNull)
                {
LABEL_144:
                  v43 = *(WebCore::DOMWrapperWorld **)(*((_QWORD *)v61 + 5182) + 16);
                  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v43;
LABEL_65:
                  if (v63 != *(JSC::VM **)(*(_QWORD *)(WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v8 + 16) + 112), v43)+ 16)+ 56))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1956D9950);
                  }
                  v44 = *(_QWORD *)(v9 + 24);
                  if (!v44 || !*(_QWORD *)(v44 + 8) || !v42)
                    goto LABEL_86;
                  v70[0] = 0;
                  if (((unint64_t)v42 & 0xFFFE000000000002) != 0)
                    String = 0;
                  else
                    String = JSC::JSCell::getString(v42, v64, (WTF::String *)v70);
                  if (*((_DWORD *)v63 + 20))
                  {
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v63);
                    if (a4 || (String & ~hasExceptionsAfterHandlingTraps & 1) == 0)
                    {
LABEL_83:
                      v52 = v70[0];
                      v70[0] = 0;
                      if (v52)
                      {
                        if (*(_DWORD *)v52 == 2)
                          WTF::StringImpl::destroy(v52, v26);
                        else
                          *(_DWORD *)v52 -= 2;
                      }
LABEL_86:
                      v53 = v66;
                      v66 = 0;
                      if (v53)
                      {
                        if (*(_DWORD *)v53 == 2)
                          WTF::StringImpl::destroy(v53, v26);
                        else
                          *(_DWORD *)v53 -= 2;
                      }
                      goto LABEL_89;
                    }
                  }
                  else
                  {
                    v46 = String ^ 1;
                    if (a4)
                      v46 = 1;
                    if ((v46 & 1) != 0)
                      goto LABEL_83;
                  }
                  v47 = *(_BYTE *)(v8 + 33);
                  *(_BYTE *)(v8 + 33) = 1;
                  v48 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 296);
                  v49 = *(_QWORD *)(v48 + 528);
                  if (v49)
                  {
                    v50 = *(_QWORD *)(v49 + 8);
                    if (v50)
                    {
                      v51 = *(_DWORD **)(*(_QWORD *)(v50 + 280) + 88);
                      if (v51)
                      {
                        if (*(_QWORD *)(v50 + 296) == v48)
                        {
                          ++v51[6];
                          WebCore::DocumentWriter::replaceDocumentWithResultOfExecutingJavascriptURL((WebCore::DocumentWriter *)(v51 + 28), (const WTF::String *)v70, (WebCore::Document *)v12);
                          *a5 = 1;
                          if (v51[6] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 24))(v51);
                          else
                            --v51[6];
                        }
                      }
                    }
                  }
                  *(_BYTE *)(v8 + 33) = v47;
                  goto LABEL_83;
                }
                WTF::RunLoop::webIfExists(v40);
                JSC::VM::create();
                v61 = v70[0];
                WebCore::g_commonVMOrNull = (uint64_t)v70[0];
                if (__ldaxr((unsigned int *)v70[0] + 274))
                {
                  __clrex();
                }
                else if (!__stlxr(4u, (unsigned int *)v70[0] + 274))
                {
LABEL_141:
                  if (webThreadStarted == 1)
                    *(_BYTE *)(*((_QWORD *)v61 + 14) + 5) = 1;
                  WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v61 + 73));
                  WebCore::JSVMClientData::initNormalWorld(v61, 0);
                  goto LABEL_144;
                }
                JSC::Heap::acquireAccessSlow((WTF::StringImpl *)((char *)v61 + 192));
                goto LABEL_141;
              }
              WTF::RunLoop::webIfExists(v37);
              JSC::VM::create();
              v59 = v70[0];
              WebCore::g_commonVMOrNull = (uint64_t)v70[0];
              if (__ldaxr((unsigned int *)v70[0] + 274))
              {
                __clrex();
              }
              else if (!__stlxr(4u, (unsigned int *)v70[0] + 274))
              {
LABEL_135:
                if (webThreadStarted == 1)
                  *(_BYTE *)(*((_QWORD *)v59 + 14) + 5) = 1;
                WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v59 + 73));
                WebCore::JSVMClientData::initNormalWorld(v59, 0);
                goto LABEL_138;
              }
              JSC::Heap::acquireAccessSlow((WTF::StringImpl *)((char *)v59 + 192));
              goto LABEL_135;
            }
          }
          else
          {
            PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
            *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", (const char *)v26);
            *((_QWORD *)&xmmword_1ECE86C80 + 1) = v35;
            v70[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
            v70[1] = v35;
            if (v35 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
            {
              if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v70))
              {
                v36 = 165;
              }
              else
              {
                v36 = 92;
              }
            }
            else
            {
              v36 = 92;
            }
            word_1ECE86C90 = v36;
            if (v31)
              goto LABEL_29;
          }
          if (v32)
            WTF::String::String();
          else
            WTF::String::String();
          goto LABEL_56;
        }
        WTF::RunLoop::webIfExists((WTF::RunLoop *)result);
        JSC::VM::create();
        v33 = v68[0];
        WebCore::g_commonVMOrNull = v68[0];
        if (__ldaxr((unsigned int *)(v68[0] + 1096)))
        {
          __clrex();
        }
        else if (!__stlxr(4u, (unsigned int *)(v68[0] + 1096)))
        {
LABEL_41:
          if (webThreadStarted == 1)
            *(_BYTE *)(*(_QWORD *)(v68[0] + 112) + 5) = 1;
          WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v33 + 584));
          WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v33, 0);
          goto LABEL_44;
        }
        JSC::Heap::acquireAccessSlow((JSC::Heap *)(v68[0] + 192));
        goto LABEL_41;
      }
    }
  }
LABEL_98:
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v9)
  {
    do
    {
      v55 = __ldaxr(v10);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v10));
    if (!v56)
    {
      atomic_store(1u, v10);
      v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v57 = off_1E31FE290;
      v57[1] = v10;
      v68[0] = v57;
      WTF::ensureOnMainThread();
      result = v68[0];
      v68[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::ScriptController::reportExceptionFromScriptError(WTF::RunLoop *a1, uint64_t a2, char a3)
{
  WebCore::DOMWrapperWorld *v6;
  JSC::JSGlobalObject *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;

  {
    v6 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    goto LABEL_3;
  }
  v11 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v11 = v13;
    WebCore::g_commonVMOrNull = v13;
    if (__ldaxr((unsigned int *)(v13 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v13 + 1096)))
    {
LABEL_12:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v13 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v11 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v11, 0);
      goto LABEL_15;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v13 + 192));
    goto LABEL_12;
  }
LABEL_15:
  v6 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v11 + 41456) + 16);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v6;
LABEL_3:
  MEMORY[0x19AEA3294](&v13, *((_QWORD *)v6 + 2));
  v7 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)a1 + 2) + 112), v6)+ 2);
  v8 = *(uint64_t **)(a2 + 32);
  if (v8)
    v9 = *v8;
  else
    v9 = 0;
  WebCore::reportException(v7, v9, 0, a3);
  return MEMORY[0x19AEA32A0](&v13);
}

uint64_t WebCore::ScriptController::registerImportMap(WebCore::ScriptController *this, const WebCore::ScriptSourceCode *a2, const WTF::URL *a3)
{
  WebCore::DOMWrapperWorld *v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  WTF::StringImpl *v12;
  char v13;
  void (**v14)(WebCore::ImportMapWarningReporter *__hidden);
  WebCore::JSDOMGlobalObject *v15;
  _BYTE v16[8];

  {
    v4 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    goto LABEL_3;
  }
  v10 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v10 = (uint64_t)v14;
    WebCore::g_commonVMOrNull = (uint64_t)v14;
    if (__ldaxr((unsigned int *)v14 + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)v14 + 274))
    {
LABEL_16:
      if (webThreadStarted == 1)
        *((_BYTE *)v14[14] + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v10 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v10, 0);
      goto LABEL_19;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v14 + 24));
    goto LABEL_16;
  }
LABEL_19:
  v4 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v10 + 41456) + 16);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v4;
LABEL_3:
  MEMORY[0x19AEA3294](v16, *((_QWORD *)v4 + 2), a3);
  v5 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v4)+ 2);
  v14 = &off_1E3393C38;
  v15 = v5;
  JSC::ImportMap::registerImportMap();
  if (v13)
  {
    v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v6 + 248))(v6, 1, 2, &v12, 0);
  }
  JSC::JSGlobalObject::clearPendingImportMaps(v5);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return MEMORY[0x19AEA32A0](v16);
}

uint64_t WebCore::ScriptController::isAcquiringImportMaps(WebCore::ScriptController *this)
{
  WebCore::DOMWrapperWorld *v2;
  WebCore::JSWindowProxy *v3;
  uint64_t isAcquiringImportMaps;
  uint64_t v6;
  uint64_t v8;

  {
    v6 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_12:
      v2 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v6 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v2;
      goto LABEL_3;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v6 = v8;
    WebCore::g_commonVMOrNull = v8;
    if (__ldaxr((unsigned int *)(v8 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v8 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v6 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_9;
  }
  v2 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_3:
  MEMORY[0x19AEA3294](&v8, *((_QWORD *)v2 + 2));
  v3 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v2);
  isAcquiringImportMaps = JSC::JSGlobalObject::isAcquiringImportMaps(*((JSC::JSGlobalObject **)v3 + 2));
  MEMORY[0x19AEA32A0](&v8);
  return isAcquiringImportMaps;
}

uint64_t WebCore::ScriptController::setAcquiringImportMaps(WebCore::ScriptController *this)
{
  WebCore::DOMWrapperWorld *v2;
  WebCore::JSWindowProxy *v3;
  uint64_t v5;
  uint64_t v7;

  {
    v5 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_12:
      v2 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v5 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v2;
      goto LABEL_3;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v5 = v7;
    WebCore::g_commonVMOrNull = v7;
    if (__ldaxr((unsigned int *)(v7 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v7 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v7 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v5 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v7 + 192));
    goto LABEL_9;
  }
  v2 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_3:
  MEMORY[0x19AEA3294](&v7, *((_QWORD *)v2 + 2));
  v3 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v2);
  JSC::JSGlobalObject::setAcquiringImportMaps(*((JSC::JSGlobalObject **)v3 + 2));
  return MEMORY[0x19AEA32A0](&v7);
}

uint64_t WebCore::ScriptController::setPendingImportMaps(WebCore::ScriptController *this)
{
  WebCore::DOMWrapperWorld *v2;
  WebCore::JSWindowProxy *v3;
  uint64_t v5;
  uint64_t v7;

  {
    v5 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_12:
      v2 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v5 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v2;
      goto LABEL_3;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v5 = v7;
    WebCore::g_commonVMOrNull = v7;
    if (__ldaxr((unsigned int *)(v7 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v7 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v7 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v5 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v7 + 192));
    goto LABEL_9;
  }
  v2 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_3:
  MEMORY[0x19AEA3294](&v7, *((_QWORD *)v2 + 2));
  v3 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v2);
  JSC::JSGlobalObject::setPendingImportMaps(*((JSC::JSGlobalObject **)v3 + 2));
  return MEMORY[0x19AEA32A0](&v7);
}

uint64_t WebCore::ScriptController::clearPendingImportMaps(WebCore::ScriptController *this)
{
  WebCore::DOMWrapperWorld *v2;
  WebCore::JSWindowProxy *v3;
  uint64_t v5;
  uint64_t v7;

  {
    v5 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_12:
      v2 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v5 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v2;
      goto LABEL_3;
    }
    WTF::RunLoop::webIfExists(this);
    JSC::VM::create();
    v5 = v7;
    WebCore::g_commonVMOrNull = v7;
    if (__ldaxr((unsigned int *)(v7 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v7 + 1096)))
    {
LABEL_9:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v7 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v5 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
      goto LABEL_12;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v7 + 192));
    goto LABEL_9;
  }
  v2 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_3:
  MEMORY[0x19AEA3294](&v7, *((_QWORD *)v2 + 2));
  v3 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), v2);
  JSC::JSGlobalObject::clearPendingImportMaps(*((JSC::JSGlobalObject **)v3 + 2));
  return MEMORY[0x19AEA32A0](&v7);
}

_QWORD *WebCore::ScriptModuleLoader::ScriptModuleLoader(_QWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v13;

  v3 = a1;
  *a1 = off_1E3393AD0;
  if (a2)
  {
    v13 = a3;
    v4 = *(_QWORD *)(a2 + 104);
    if (v4)
      goto LABEL_15;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2 + 96;
    v8 = *(unsigned int **)(a2 + 104);
    *(_QWORD *)(a2 + 104) = v4;
    if (!v8)
      goto LABEL_15;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    v4 = *(_QWORD *)(a2 + 104);
    if (v4)
    {
LABEL_15:
      do
        v6 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v6 + 1, (unsigned int *)v4));
    }
    v3 = a1;
    a3 = v13;
  }
  else
  {
    v4 = 0;
  }
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = v4;
  *(_QWORD *)((char *)v3 + 29) = 0;
  v3[5] = 0;
  *((_BYTE *)v3 + 48) = a3;
  v3[7] = 0;
  return v3;
}

void WebCore::ScriptModuleLoader::~ScriptModuleLoader(WebCore::ScriptModuleLoader *this, void *a2)
{
  _DWORD **v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD **v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD **v20;

  v3 = (_DWORD **)*((_QWORD *)this + 5);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_20:
    v5 = &v3[v4];
    goto LABEL_8;
  }
  v4 = *((unsigned int *)v3 - 1);
  v5 = &v3[v4];
  if (!*((_DWORD *)v3 - 3))
  {
    v6 = &v3[v4];
    goto LABEL_20;
  }
  v6 = (_DWORD **)*((_QWORD *)this + 5);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    v6 = (_DWORD **)*((_QWORD *)this + 5);
    while ((unint64_t)*v6 + 1 <= 1)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v3)
    v8 = &v3[*((unsigned int *)v3 - 1)];
  else
    v8 = 0;
  if (v8 != v6)
  {
    do
    {
      v20 = v6 + 1;
      *((_QWORD *)*v6 + 2) = 0;
      v6 = v5;
      if (v20 != v5)
      {
        v6 = v20;
        while ((unint64_t)*v6 + 1 <= 1)
        {
          if (++v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    v3 = (_DWORD **)*((_QWORD *)this + 5);
  }
  if (v3)
  {
    v13 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v13)
    {
      v14 = v3;
      do
      {
        v15 = *v14;
        if (*v14 != (_DWORD *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
        ++v14;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 2);
  if (v9)
  {
    v16 = *((unsigned int *)this + 6);
    if ((_DWORD)v16)
    {
      v17 = (WTF::StringImpl **)((char *)v9 + 8);
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = *(v17 - 1);
        *(v17 - 1) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        v17 += 6;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v9, a2);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ScriptModuleLoader::~ScriptModuleLoader(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::ScriptModuleLoader::resolve@<X0>(JSC::JSGlobalObject *a1@<X1>, unint64_t this@<X3>, uint64_t a3@<X0>, uint64_t a4@<X4>, WTF::StringImpl **a5@<X8>)
{
  JSC::VM *v7;
  int v8;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *result;
  int v19;
  int v20;
  unsigned __int8 *TypeError;
  JSValue v22;
  WTF::StringImpl *v23[5];
  int v24;
  WTF::StringImpl *v25[5];
  WTF::StringImpl *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;

  v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v27 = v7;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_38;
  v8 = *(unsigned __int8 *)(this + 5);
  if (v8 != 2)
  {
    if (v8 == 4)
    {
      result = *(WTF::StringImpl **)(this + 8);
      v19 = *(_DWORD *)result;
      *(_DWORD *)result += 4;
      *a5 = result;
      v20 = v19 + 2;
      if (!v20)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a1);
      *(_DWORD *)result = v20;
      return result;
    }
LABEL_38:
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *a5 = 0;
    return result;
  }
  v11 = *(WTF::StringImpl **)(this + 8);
  if ((v11 & 1) != 0)
    v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
  if (v11)
    *(_DWORD *)v11 += 2;
  v26 = v11;
  if (*((_DWORD *)v7 + 20))
    goto LABEL_40;
  while (1)
  {
    WebCore::ScriptModuleLoader::responseURLFromRequestURL((uint64_t)v25, a3, a1, a4);
    if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
      goto LABEL_35;
    v12 = *(_QWORD *)(a3 + 8);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0)
    {
      JSC::throwTypeError();
LABEL_35:
      *a5 = 0;
      goto LABEL_19;
    }
    a4 = (uint64_t)v7 + 41456;
    WebCore::resolveModuleSpecifier((uint64_t)v23, v13 - 96, *(unsigned __int8 *)(a3 + 48), *((JSC::ImportMap **)a1 + 409), (WTF::String *)&v26, (WTF::URL *)v25);
    if (!v24)
      break;
    if (v24 == 1)
    {
      TypeError = (unsigned __int8 *)JSC::createTypeError(a1, (JSC::JSGlobalObject *)v23, v15);
      JSC::JSObject::putDirect(TypeError, v7, *(_QWORD *)(*(_QWORD *)a4 + 19776), 0xFFFE000000000003, 0);
      v22.super.isa = (Class)TypeError;
      JSC::VM::throwException(v27, a1, v22);
      v16 = 0;
      goto LABEL_17;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_40:
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
    if ((_DWORD)result)
    {
      *a5 = 0;
      goto LABEL_23;
    }
  }
  v16 = v23[0];
  if (v23[0])
  {
    if ((*((_BYTE *)v23[0] + 16) & 0x10) != 0)
    {
      *(_DWORD *)v23[0] += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase();
      v16 = v28;
    }
  }
  v17 = *(_DWORD *)v16;
  *(_DWORD *)v16 += 2;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v14);
LABEL_17:
  *a5 = v16;
  if (v24 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3393C50[v24])(&v28, v23);
LABEL_19:
  result = v25[0];
  v25[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  v11 = v26;
LABEL_23:
  v26 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v14);
    else
      *(_DWORD *)v11 -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptModuleLoader::responseURLFromRequestURL(uint64_t result, uint64_t a2, JSC::JSGlobalObject *a3, uint64_t a4)
{
  uint64_t v5;
  JSC::VM *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  _DWORD *v24;
  WTF::StringImpl *v25;

  v5 = result;
  v6 = (JSC::VM *)*((_QWORD *)a3 + 7);
  if ((a4 & 0xFFFE000000000002) == 0)
  {
    if (a4 != 10 && *(_BYTE *)(a4 + 5) != 4)
      goto LABEL_4;
LABEL_42:
    v20 = *(_QWORD *)(a2 + 8);
    if (!v20 || (result = *(_QWORD *)(v20 + 8)) == 0)
    {
      *(_QWORD *)v5 = 0;
      return WTF::URL::invalidate((WTF::URL *)v5);
    }
    if (*(_BYTE *)(a2 + 48))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 96) + 112))(result - 96);
      v21 = *(WTF::StringImpl **)result;
      if (*(_QWORD *)result)
        *(_DWORD *)v21 += 2;
      *(_QWORD *)v5 = v21;
      v22 = *(_OWORD *)(result + 8);
      v23 = *(_OWORD *)(result + 24);
    }
    else
    {
      if (*(_BYTE *)(result + 178))
      {
        result = 96;
        __break(0xC471u);
        return result;
      }
      v24 = *(_DWORD **)(result + 560);
      if (v24)
        *v24 += 2;
      *(_QWORD *)v5 = v24;
      v22 = *(_OWORD *)(result + 568);
      v23 = *(_OWORD *)(result + 584);
    }
    *(_OWORD *)(v5 + 24) = v23;
    *(_OWORD *)(v5 + 8) = v22;
    return result;
  }
  if (a4 == 10)
    goto LABEL_42;
LABEL_4:
  v7 = *(WTF::StringImpl **)(a4 + 8);
  if ((v7 & 1) != 0)
  {
    result = JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a4, a3);
    v7 = *(WTF::StringImpl **)result;
  }
  if (v7)
    *(_DWORD *)v7 += 2;
  v25 = v7;
  if (*((_DWORD *)v6 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v6), (_DWORD)result))
  {
    *(_QWORD *)v5 = 0;
    result = WTF::URL::invalidate((WTF::URL *)v5);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(unsigned int *)(a2 + 24);
    if (v8)
    {
      v10 = v9 - 1;
      v11 = *(_DWORD *)(a2 + 32);
      v12 = *((_DWORD *)v7 + 4);
      if (v12 < 0x100)
      {
        v13 = WTF::StringImpl::hashSlowCase(v7);
        v8 = *(_QWORD *)(a2 + 16);
      }
      else
      {
        v13 = v12 >> 8;
      }
      v14 = (v13 ^ v11) & v10;
      v15 = v8 + 48 * v14;
      result = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        v16 = -1;
        while (1)
        {
          v17 = *(_DWORD *)(result + 16);
          result = v17 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result) : v17 >> 8;
          if (++v16 > ((v14 + (_DWORD)v9 - ((result ^ v11) & v10)) & v10))
            break;
          if ((_DWORD)result == v13)
          {
            result = WTF::equal(*(WTF **)v15, v7, a3);
            v8 = *(_QWORD *)(a2 + 16);
            if ((result & 1) != 0)
            {
              LODWORD(v9) = *(_DWORD *)(a2 + 24);
              goto LABEL_25;
            }
          }
          else
          {
            v8 = *(_QWORD *)(a2 + 16);
          }
          v14 = (v14 + 1) & v10;
          v15 = v8 + 48 * v14;
          result = *(_QWORD *)v15;
          if (!*(_QWORD *)v15)
            goto LABEL_38;
        }
        v8 = *(_QWORD *)(a2 + 16);
      }
LABEL_38:
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
      v15 = v8 + 48 * v9;
    }
    else
    {
      v15 = 48 * v9;
    }
LABEL_25:
    if (v8 + 48 * v9 == v15)
    {
      result = WTF::URL::URL(v5, &v25);
      v7 = v25;
    }
    else
    {
      v18 = *(_DWORD **)(v15 + 8);
      if (v18)
        *v18 += 2;
      *(_QWORD *)v5 = v18;
      v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(v5 + 8) = v19;
    }
  }
  v25 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

uint64_t WebCore::resolveModuleSpecifier(uint64_t a1, uint64_t a2, int a3, JSC::ImportMap *this, WTF::String *a5, WTF::URL *a6)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;

  if (a3)
  {
    v9 = *(WTF::StringImpl **)a6;
    if (*(_QWORD *)a6)
      *(_DWORD *)v9 += 2;
    v16 = v9;
    v17 = *(_OWORD *)((char *)a6 + 8);
    v18 = *(_OWORD *)((char *)a6 + 24);
  }
  else
  {
    if (*(_BYTE *)(a2 + 274))
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    WebCore::Document::baseURLForComplete((WebCore::Document *)(a2 - 192), a6, (uint64_t)&v16);
  }
  JSC::ImportMap::resolve(this, a5, (const WTF::URL *)&v16);
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v19)
  {
    *(_QWORD *)a1 = v19;
    *(_OWORD *)(a1 + 8) = v20;
    *(_OWORD *)(a1 + 24) = v21;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    v12 = *(WTF::StringImpl **)a5;
    if (*(_QWORD *)a5)
      *(_DWORD *)v12 += 2;
    v15 = v12;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Module name, '", 15, (uint64_t *)&v15, (int8x16_t *)"' does not resolve to a valid URL.", 35, &v16);
    v14 = v15;
    *(_QWORD *)a1 = v16;
    *(_DWORD *)(a1 + 40) = 1;
    v15 = 0;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = (uint64_t)v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WebCore::ScriptModuleLoader::fetch(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42[3];
  _DWORD *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  char v46;
  WebCore::DOMGuardedObject *v47;

  v11 = JSC::JSInternalPromise::create();
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1956DB164);
  }
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 && *(_QWORD *)(v13 + 8))
  {
    v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
    v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)a2, v12);
    *(_QWORD *)v15 = &off_1E3226868;
    *((_DWORD *)v15 + 10) = 0;
    *((_BYTE *)v15 + 44) = 0;
    v47 = v15;
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_53;
    v16 = *(unsigned __int8 *)(a4 + 5);
    if (v16 == 2)
    {
      v17 = *(WTF::StringImpl **)(a4 + 8);
      if ((v17 & 1) != 0)
        v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a4, a2);
      if (v17)
        *(_DWORD *)v17 += 2;
      v42[0] = v17;
      MEMORY[0x19AEA52D4](&v45, v42, 0);
      v19 = v42[0];
      v42[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      if ((v46 & 1) == 0)
      {
        v33 = *(_QWORD *)(a1 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
            v35 = v34 - 96;
          else
            v35 = 0;
        }
        else
        {
          v35 = 0;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::rejectWithFetchError(v35, (uint64_t *)&v47, (uint64_t *)v42);
        v36 = v42[0];
        v42[0] = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v25);
          else
            *(_DWORD *)v36 -= 2;
        }
        goto LABEL_32;
      }
      v44 = 0;
      if ((a5 & 0xFFFE000000000002) != 0
        || MEMORY[0x1E0CBE800] != 16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C))
      {
        v20 = 0;
      }
      else
      {
        v20 = *(_DWORD **)(a5 + 8);
        if (v20)
          ++v20[2];
        v44 = v20;
      }
      if (*(_BYTE *)(a1 + 48))
      {
        WebCore::WorkerModuleScriptLoader::create((uint64_t *)&v43, a1, (uint64_t)v14, *(_QWORD *)(a6 + 8), (uint64_t *)&v44);
        v22 = (uint64_t)v43;
        ++v43[2];
        v41 = (_DWORD *)v22;
        WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::add(v42, (uint64_t *)(a1 + 40), &v41);
        if (v41)
        {
          if (v41[2] == 1)
            (*(void (**)(void))(*(_QWORD *)v41 + 8))();
          else
            --v41[2];
        }
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        if (v37)
          v38 = v37 - 96;
        else
          v38 = 0;
        WebCore::WorkerModuleScriptLoader::load(v22, v38, (uint64_t)&v45);
      }
      else
      {
        v21 = *(_QWORD *)(a6 + 8);
        v22 = WTF::fastMalloc((WTF *)0x70);
        *(_DWORD *)(v22 + 8) = 1;
        *(_QWORD *)(v22 + 16) = a1;
        ++*((_DWORD *)v14 + 4);
        *(_QWORD *)(v22 + 24) = v14;
        ++*(_DWORD *)(v21 + 8);
        v44 = 0;
        *(_QWORD *)(v22 + 32) = v21;
        *(_QWORD *)(v22 + 40) = v20;
        *(_QWORD *)v22 = off_1E3392130;
        *(_QWORD *)(v22 + 48) = &unk_1E3392158;
        *(_QWORD *)(v22 + 56) = 0;
        *(_QWORD *)(v22 + 64) = 0;
        *(_QWORD *)(v22 + 72) = 0;
        WTF::URL::invalidate((WTF::URL *)(v22 + 72));
        ++*(_DWORD *)(v22 + 8);
        v43 = (_DWORD *)v22;
        WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::add(v42, (uint64_t *)(a1 + 40), &v43);
        if (v43)
        {
          if (v43[2] == 1)
            (*(void (**)(void))(*(_QWORD *)v43 + 8))();
          else
            --v43[2];
        }
        v23 = *(_QWORD *)(a1 + 8);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 8);
          if (v24)
            v23 = v24 - 96;
          else
            v23 = 0;
        }
        if (*(_BYTE *)(v23 + 274))
        {
          __break(0xC471u);
          JUMPOUT(0x1956DB184);
        }
        if ((WebCore::CachedModuleScriptLoader::load(v22, v23 - 192, (uint64_t *)&v45) & 1) == 0)
        {
          *(_QWORD *)(v22 + 16) = 0;
          WTF::HashSet<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 40), v22);
          if (*(_DWORD *)(v22 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          else
            --*(_DWORD *)(v22 + 8);
          v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          if (v39)
            v40 = v39 - 96;
          else
            v40 = 0;
          WebCore::rejectToPropagateNetworkError(v40, (uint64_t *)&v47, 0, (uint64_t)"Importing a module script failed.", 34);
LABEL_29:
          if (v44)
          {
            if (v44[2] == 1)
              (*(void (**)(void))(*(_QWORD *)v44 + 8))();
            else
              --v44[2];
          }
          goto LABEL_32;
        }
      }
      if (*(_DWORD *)(v22 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      else
        --*(_DWORD *)(v22 + 8);
      goto LABEL_29;
    }
    if (v16 != 4)
    {
LABEL_53:
      v31 = *(_QWORD *)(a1 + 8);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
          v30 = v32 - 96;
        else
          v30 = 0;
      }
      else
      {
        v30 = 0;
      }
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 8);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
          v30 = v29 - 96;
        else
          v30 = 0;
      }
      else
      {
        v30 = 0;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::rejectWithFetchError(v30, (uint64_t *)&v47, (uint64_t *)&v45);
LABEL_32:
    v26 = v45;
    v45 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (v47)
    {
      if (*((_DWORD *)v47 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v47 + 16))();
      else
        --*((_DWORD *)v47 + 4);
    }
  }
  return v12;
}

uint64_t WebCore::rejectWithFetchError(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v6 = *a2;
  *a2 = 0;
  v7 = *a3;
  *a3 = 0;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = &off_1E3393C70;
  *(_QWORD *)(v8 + 8) = v6;
  *(_BYTE *)(v8 + 16) = 33;
  *(_QWORD *)(v8 + 24) = v7;
  v10 = v8;
  WebCore::EventLoopTaskGroup::queueTask(v5, 11, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::URL::URL(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  MEMORY[0x19AEA52D4](a1, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t *WTF::HashSet<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    for (i = 0; ; v6 = i + v8)
    {
      v8 = v6 & v5;
      v9 = *(_QWORD *)(v3 + 8 * v8);
      if (v9 != -1)
      {
        if (!v9)
        {
          v10 = (uint64_t **)(v3 + 8 * *(unsigned int *)(v3 - 4));
          return WTF::HashSet<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTableTraits>::remove(a1, v10);
        }
        if (v9 == a2)
          break;
      }
      ++i;
    }
    v10 = (uint64_t **)(v3 + 8 * v8);
  }
  else
  {
    v10 = 0;
  }
  return WTF::HashSet<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTableTraits>::remove(a1, v10);
}

uint64_t WebCore::rejectToPropagateNetworkError(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v10 = *a2;
  *a2 = 0;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E3393C98;
  *(_QWORD *)(v11 + 8) = v10;
  *(_DWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a4;
  *(_QWORD *)(v11 + 32) = a5;
  v13 = v11;
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, &v13);
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::WorkerModuleScriptLoader::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v10 + 8) = 1;
  ++*(_DWORD *)(a3 + 16);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  ++*(_DWORD *)(a4 + 8);
  *(_QWORD *)(v10 + 32) = a4;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)v10 = off_1E3393B58;
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = &unk_1E3393B88;
  *(_QWORD *)(v10 + 56) = 0;
  v12 = WTF::fastMalloc((WTF *)0x1B0);
  *(_QWORD *)(v12 + 16) = 0x100000000;
  *(_QWORD *)v12 = &off_1E347D7E0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  WebCore::ScriptBuffer::empty((WebCore::SharedBufferBuilder *)(v12 + 48));
  *(_QWORD *)(v12 + 56) = 0;
  WTF::URL::invalidate((WTF::URL *)(v12 + 56));
  *(_QWORD *)(v12 + 96) = 0;
  WTF::URL::invalidate((WTF::URL *)(v12 + 96));
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 173) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_WORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 240) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_QWORD *)(v12 + 222) = 0;
  WTF::URL::invalidate((WTF::URL *)(v12 + 240));
  *(_QWORD *)(v12 + 296) = 0;
  *(_QWORD *)(v12 + 280) = 0;
  *(_QWORD *)(v12 + 286) = 0;
  *(_BYTE *)(v12 + 304) = 1;
  *(_QWORD *)(v12 + 328) = 0;
  *(_QWORD *)(v12 + 336) = 0;
  *(_QWORD *)(v12 + 320) = 0;
  *(_WORD *)(v12 + 352) = 0;
  *(_BYTE *)(v12 + 360) = 0;
  *(_BYTE *)(v12 + 392) = 0;
  *(_QWORD *)(v12 + 408) = 0;
  *(_QWORD *)(v12 + 416) = 0;
  *(_QWORD *)(v12 + 400) = 0;
  *(_WORD *)(v12 + 424) = 0;
  *(_QWORD *)(v10 + 64) = v12;
  *(_QWORD *)(v10 + 72) = 0;
  WTF::URL::invalidate((WTF::URL *)(v10 + 72));
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 120) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(v10 + 120));
  *(_QWORD *)(v10 + 160) = 0;
  *(_WORD *)(v10 + 168) = 0;
  *a1 = v10;
  return result;
}

void WebCore::WorkerModuleScriptLoader::load(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  char v27;
  _DWORD *v28;
  _BYTE *v29;
  int v30;
  int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v41;
  uint64_t v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50[2];
  __int128 v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[7];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  char v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71[2];
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v6 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v8 = (WTF::StringImpl **)(a1 + 72);
  v7 = *(WTF::StringImpl **)(a1 + 72);
  *v8 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0xFFFFFFFE | *(_DWORD *)(a3 + 8) & 1;
  v9 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = v9 & 0xFFFFFFFE;
  v10 = *(_DWORD *)(a1 + 80) & 0xFFFFFFFD | (2 * ((v9 >> 1) & 1));
  *(_DWORD *)(a1 + 80) = v10;
  v11 = v10 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a3 + 8) >> 2) & 1));
  *(_DWORD *)(a1 + 80) = v11;
  v12 = v11 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a3 + 8) >> 3) & 7));
  *(_DWORD *)(a1 + 80) = v12;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a3 + 8) & 0xFFFFFFC0 | v12 & 0x3F;
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a3 + 12);
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a3 + 28);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a3 + 36);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 488))(a2) == 1)
  {
    v13 = *(_QWORD *)(a2 + 1720);
    if (v13)
    {
      v14 = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(a2 + 1720, v8);
      v13 = *(_QWORD *)(a2 + 1720);
      LODWORD(v15) = *(_DWORD *)(a2 + 1728);
      v16 = v14 ? (uint64_t)v14 : v13 + 96 * v15;
    }
    else
    {
      v15 = *(unsigned int *)(a2 + 1728);
      v16 = 96 * v15;
    }
    if (v16 != v13 + 96 * v15)
    {
      WebCore::SharedBufferBuilder::operator=((unsigned int **)(a1 + 112), (unsigned int **)(v16 + 40));
      v18 = *(_DWORD **)(v16 + 48);
      if (v18)
        *v18 += 2;
      v19 = *(WTF::StringImpl **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *(_OWORD *)(v16 + 72);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(v16 + 56);
      *(_OWORD *)(a1 + 144) = v20;
      v21 = *(_DWORD **)(v16 + 88);
      if (v21)
        *v21 += 2;
      v22 = *(WTF::StringImpl **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v17);
        else
          *(_DWORD *)v22 -= 2;
      }
      *(_BYTE *)(a1 + 169) = 1;
      ++*(_DWORD *)(a1 + 8);
      v23 = *(_QWORD *)(a1 + 16);
      if (v23)
      {
        v53 = *(WTF::StringImpl **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v23 + 16))(v23, a1, v8, &v53);
        v24 = v53;
        v53 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 4) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 16))(v24);
          else
            --*((_DWORD *)v24 + 4);
        }
      }
      if (*(_DWORD *)(a1 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      else
        --*(_DWORD *)(a1 + 8);
      return;
    }
  }
  v25 = *v8;
  if (*v8)
    *(_DWORD *)v25 += 2;
  v53 = v25;
  v26 = *(_OWORD *)(a1 + 96);
  v54 = *(_OWORD *)(a1 + 80);
  v55 = v26;
  v56[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v56);
  v56[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56[6] = v49;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0x10000;
  v27 = v61 & 0x80 | 4;
  v61 = v27;
  v62 = 0;
  v28 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v28 += 2;
    v27 = v61;
  }
  v63 = v28;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = v67 & 0xE0 | 5;
  v61 = v27 | 2;
  v68 = 0;
  BYTE6(v49) = 0;
  *(_OWORD *)v50 = 0uLL;
  v51 = 0uLL;
  v52 = 0;
  BYTE1(v49) = 3;
  *(_WORD *)((char *)&v49 + 3) = 0;
  v29 = *(_BYTE **)(a1 + 32);
  BYTE2(v49) = v29[12];
  v30 = v29[13];
  LOBYTE(v49) = v29[13];
  BYTE5(v49) = v29[14];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 264))(a2) & 1) != 0)
  {
    v31 = 0;
    goto LABEL_50;
  }
  v32 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)a2);
  if (v32)
  {
    v33 = v32;
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 + 1, v32));
    if (v49 == 13)
    {
      *(_QWORD *)&v72 = 0;
      WTF::URL::invalidate((WTF::URL *)&v72);
      v36 = WebCore::ContentSecurityPolicy::allowScriptFromSource((uint64_t)v33, (WTF::URL *)v8, 0, (WTF::URL *)&v72, MEMORY[0x1E0CBF6F0]);
      v37 = (WTF::StringImpl *)v72;
      *(_QWORD *)&v72 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v35);
        else
          *(_DWORD *)v37 -= 2;
      }
      v31 = 3;
    }
    else
    {
      *(_QWORD *)&v72 = 0;
      WTF::URL::invalidate((WTF::URL *)&v72);
      v36 = WebCore::ContentSecurityPolicy::allowWorkerFromSource((uint64_t)v33, (WTF::URL *)v8, 0, (WTF::URL *)&v72);
      v39 = (WTF::StringImpl *)v72;
      *(_QWORD *)&v72 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v38);
        else
          *(_DWORD *)v39 -= 2;
      }
      v31 = 1;
    }
    if (!atomic_load(v33))
    {
      __break(0xC471u);
      JUMPOUT(0x1956DBBF4);
    }
    do
      v41 = __ldaxr(v33);
    while (__stlxr(v41 - 1, v33));
    if (!v36)
    {
      v72 = 0uLL;
      *(_QWORD *)&v73 = 0;
      if (!*(_BYTE *)(a2 + 274))
      {
        v72 = *(_OWORD *)(a2 + 224);
        *(_QWORD *)&v73 = *(_QWORD *)(a2 + 240);
      }
      v47 = *(_DWORD **)(a1 + 64);
      ++v47[5];
      v71[0] = v72;
      v71[1] = v73;
      WebCore::WorkerScriptLoader::notifyError((uint64_t)v47, v71);
      if (v47[5] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 64))(v47);
      else
        --v47[5];
      WebCore::WorkerModuleScriptLoader::notifyFinished(a1);
      goto LABEL_70;
    }
    v30 = v49;
    goto LABEL_50;
  }
  if (v30 != 13)
  {
    v31 = 1;
LABEL_50:
    if (v30 == 19 || v30 == 14)
    {
      v43 = *(_QWORD *)(a1 + 40);
      if (v43)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
          BYTE1(v49) = 1;
      }
    }
    goto LABEL_58;
  }
  v31 = 3;
LABEL_58:
  v44 = *(_DWORD **)(a1 + 64);
  ++v44[5];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = 0uLL;
  v70 = 0;
  WebCore::WorkerScriptLoader::loadAsynchronously((uint64_t)v44, (_QWORD *)a2, (uint64_t)&v53, 2, (uint64_t)&v49, v31, 0, a1 + 48, (uint64_t)&v72, &v69);
  v46 = (WTF::StringImpl *)v72;
  *(_QWORD *)&v72 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (v44[5] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 64))(v44);
  else
    --v44[5];
LABEL_70:
  v48 = v50[0];
  v50[0] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v45);
    else
      *(_DWORD *)v48 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v53, v45);
}

uint64_t WebCore::ScriptModuleLoader::evaluate(uint64_t a1, JSC::JSGlobalObject *a2, int a3, unint64_t this, JSC::AbstractModuleRecord *a5, uint64_t a6, objc_class *a7, objc_class *a8)
{
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  BOOL v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  WebCore::DOMWrapperWorld *v26;
  const WTF::String *v27;
  JSC::JSGlobalObject *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  JSValue v35;
  JSValue v36;
  uint64_t v37;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  __int128 v51;
  JSValue v52;
  JSValue v53;
  uint64_t v54;
  WTF::JSONImpl::Object *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[8];
  WTF::StringImpl *v71;

  v69 = *((_QWORD *)a2 + 7);
  if (((unint64_t)a5 & 0xFFFE000000000002) != 0)
    return 10;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = 16 * v12;
  if ((_DWORD)v12)
    v15 = v14 == MEMORY[0x1E0CBE798];
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = *(_QWORD *)(v14 + 16);
      v13 = v14 != 0;
    }
    while (v14 != MEMORY[0x1E0CBE798] && v14 != 0);
  }
  if (!v13)
    return 10;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 4)
  {
    v47 = *(_QWORD *)(a1 + 8);
    if (v47 && (v48 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v48 - 96) + 112))(v48 - 96);
      v50 = *(WTF::StringImpl **)v49;
      if (*(_QWORD *)v49)
        *(_DWORD *)v50 += 2;
      v66 = v50;
      v51 = *(_OWORD *)(v49 + 24);
      v67 = *(_OWORD *)(v49 + 8);
      v68 = v51;
    }
    else
    {
      v66 = 0;
      WTF::URL::invalidate((WTF::URL *)&v66);
    }
  }
  else
  {
    v16 = *(WTF::StringImpl **)(this + 8);
    if ((v16 & 1) != 0)
      v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
    if (v16)
      *(_DWORD *)v16 += 2;
    v71 = v16;
    MEMORY[0x19AEA52D4](&v66, &v71, 0);
    v18 = v71;
    v71 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if ((v67 & 1) == 0)
  {
    v46 = JSC::throwTypeError();
LABEL_60:
    v37 = v46;
    goto LABEL_41;
  }
  v19 = *(_QWORD *)(a1 + 8);
  if (!v19)
    goto LABEL_64;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    goto LABEL_64;
  v17 = *(WTF::StringImpl **)(a1 + 56);
  if (v17)
  {
    v52.super.isa = a7;
    v53.super.isa = a8;
    v46 = JSC::AbstractModuleRecord::evaluate(a5, v17, v52, v53);
    goto LABEL_60;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    if (!*(_BYTE *)(v20 + 178))
    {
      v21 = *(_QWORD *)(v20 + 240);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = (unsigned int *)(v22 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          v25 = *(_QWORD *)(v22 + 304);
          {
            v26 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
          }
          else
          {
            v65 = WebCore::g_commonVMOrNull;
            if (!WebCore::g_commonVMOrNull)
              v65 = WebCore::commonVMSlow(0);
            v26 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v65 + 41456) + 16);
            WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v26;
          }
          MEMORY[0x19AEA3294](v70, *((_QWORD *)v26 + 2));
          v28 = (JSC::JSGlobalObject *)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v25 + 16) + 112), v26)+ 2);
          v29 = *(_QWORD *)(v25 + 16);
          v30 = (unsigned int *)(v29 + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          v32 = *(_QWORD *)(v25 + 24);
          *(_QWORD *)(v25 + 24) = &v66;
          v33 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C);
          if (v33 == MEMORY[0x1E0CBE810])
          {
            v55 = *(WTF::JSONImpl::Object **)(v25 + 16);
          }
          else
          {
            if (v33 != MEMORY[0x1E0CBE7C0])
            {
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v61 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 24);
                if (v61)
                {
                  v62 = *(_QWORD *)(v61 + 8);
                  if (v62)
                    WebCore::InspectorInstrumentation::willEvaluateScriptImpl(*(WTF::JSONImpl::Object **)(*(_QWORD *)(v62 + 80) + 8), *(WebCore::Frame **)(v25 + 16), (WebCore::TimelineRecordFactory *)&v66, (WTF::String *)(*((_DWORD *)a5 + 36) + 1), (WTF::JSONImpl::Value *)(*((_DWORD *)a5 + 37) + 1));
                }
              }
              goto LABEL_34;
            }
            v55 = *(WTF::JSONImpl::Object **)(v25 + 16);
          }
          WebCore::InspectorInstrumentation::willEvaluateScript(v55, (WebCore::LocalFrame *)&v66, v27);
LABEL_34:
          v35.super.isa = a7;
          v36.super.isa = a8;
          v37 = JSC::AbstractModuleRecord::evaluate(a5, v28, v35, v36);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v56 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 24);
            if (v56)
            {
              v57 = *(_QWORD *)(v56 + 8);
              if (v57)
              {
                v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 80) + 8) + 232);
                if (v58)
                  WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v58);
              }
            }
          }
          *(_QWORD *)(v25 + 24) = v32;
          if (v29)
          {
            do
            {
              v39 = __ldaxr(v30);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v30));
            if (!v40)
            {
              atomic_store(1u, v30);
              v63 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v63 = off_1E31FE290;
              *((_QWORD *)v63 + 1) = v30;
              v71 = v63;
              WTF::ensureOnMainThread();
              v64 = v71;
              v71 = 0;
              if (v64)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v64 + 8))(v64);
            }
          }
          MEMORY[0x19AEA32A0](v70);
          do
          {
            v41 = __ldaxr(v23);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v23));
          if (!v42)
          {
            atomic_store(1u, v23);
            v59 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v59 = off_1E31FE290;
            *((_QWORD *)v59 + 1) = v23;
            v71 = v59;
            WTF::ensureOnMainThread();
            v60 = v71;
            v71 = 0;
            if (v60)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
          }
          goto LABEL_41;
        }
      }
      goto LABEL_64;
    }
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x1956DBFB0);
  }
  if (*(_BYTE *)(v20 + 178) != 1)
    goto LABEL_84;
  v54 = *(_QWORD *)(v20 + 248);
  if (v54)
  {
    v46 = WebCore::WorkerOrWorkletScriptController::evaluateModule(v54, a5, a7, a8);
    goto LABEL_60;
  }
LABEL_64:
  v37 = 10;
LABEL_41:
  v43 = v66;
  v66 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v17);
    else
      *(_DWORD *)v43 -= 2;
  }
  return v37;
}

uint64_t WebCore::ScriptModuleLoader::importModule(uint64_t a1, unint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  char v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  __int128 v82;
  __int128 v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  __int128 v86;
  __int128 v87;
  JSC::VM *v88[3];
  WTF::StringImpl *v89;
  JSC::VM *v90;
  uint64_t v91;
  WTF::StringImpl *v92;

  v6 = *(unint64_t **)(a2 + 56);
  v90 = (JSC::VM *)v6;
  v91 = a5;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    return 0;
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 80))(v9 - 96) & 1) != 0
    || ((v13 = *(_QWORD *)(a1 + 8)) == 0
      ? (v15 = 0)
      : (v14 = *(_QWORD *)(v13 + 8)) != 0
      ? (v15 = v14 - 96)
      : (v15 = 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15)
     && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 488))(v15) == 1))
  {
    v16 = *(_QWORD *)(a1 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        v18 = v17 - 96;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = WebCore::rejectPromise(v18, a2, (uint64_t *)&v89);
    v21 = v89;
    v89 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    return v20;
  }
  v88[0] = (JSC::VM *)v6;
  v88[1] = (JSC::VM *)a2;
  v88[2] = (JSC::VM *)&v91;
  v22 = (const WTF::String *)(a4 + 8);
  if ((a4[8] & 1) != 0)
    v22 = (const WTF::String *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a4, (JSC::JSGlobalObject *)a2);
  v85 = 0;
  WTF::URL::invalidate((WTF::URL *)&v85);
  v84 = 0;
  v23 = *(WTF::StringImpl **)a6;
  if (!*(_QWORD *)a6)
  {
    v34 = WebCore::ScriptModuleLoader::importModule(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSString *,JSC::JSValue,JSC::SourceOrigin const&)::$_1::operator()(v88);
    if (*((_DWORD *)v90 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v90))
      goto LABEL_152;
    v35 = WTF::fastMalloc((WTF *)0x20);
    v37 = (WTF::StringImpl *)v35;
    *(_DWORD *)(v35 + 8) = 1;
    *(_BYTE *)(v35 + 12) = v34;
    *(_QWORD *)v35 = off_1E33948A0;
    v38 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v38 += 2;
    *(_QWORD *)(v35 + 16) = v38;
    *(_BYTE *)(v35 + 24) = 1;
    v39 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 48))
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
        v41 = v40 - 96;
      else
        v41 = 0;
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 112))(v41);
      v44 = *(WTF::StringImpl **)v43;
      if (*(_QWORD *)v43)
        *(_DWORD *)v44 += 2;
      v45 = v85;
      v85 = v44;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v42);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = *(_OWORD *)(v43 + 8);
      v87 = *(_OWORD *)(v43 + 24);
      v86 = v46;
      ++*((_DWORD *)v37 + 2);
      v48 = WTF::fastMalloc((WTF *)0x58);
      *(_DWORD *)(v48 + 8) = 1;
      *(_QWORD *)v48 = off_1E33948D0;
      *(_WORD *)(v48 + 12) = 3329;
      *(_BYTE *)(v48 + 14) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)(v48 + 24) = v37;
      *(_BYTE *)(v48 + 32) = 0;
      *(_BYTE *)(v48 + 72) = 0;
      *(_WORD *)(v48 + 80) = 0;
      v84 = (WTF::StringImpl *)v48;
    }
    else
    {
      if (v39)
      {
        v55 = *(_QWORD *)(v39 + 8);
        if (v55)
          v56 = v55 - 96;
        else
          v56 = 0;
      }
      else
      {
        v56 = 0;
      }
      if (*(_BYTE *)(v56 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1956DCAA4);
      }
      v57 = *(WTF::StringImpl **)(v56 + 656);
      if (v57)
        *(_DWORD *)v57 += 2;
      v58 = v85;
      v85 = v57;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v36);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = *(_OWORD *)(v56 + 680);
      v86 = *(_OWORD *)(v56 + 664);
      v87 = v59;
      WebCore::Document::encoding(v56 - 192, v36, &v81);
      v61 = v81;
      if (v81)
      {
        v62 = *(_DWORD *)v81;
        *(_DWORD *)v81 += 2;
        v92 = v61;
        if (v62)
          *(_DWORD *)v61 = v62;
        else
          WTF::StringImpl::destroy(v61, v60);
      }
      else
      {
        v92 = 0;
      }
      WebCore::CachedScriptFetcher::create((WebCore::CachedScriptFetcher *)&v92, &v81);
      v48 = (uint64_t)v81;
      v84 = v81;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          v68 = v61;
          goto LABEL_133;
        }
        *(_DWORD *)v61 -= 2;
      }
    }
LABEL_96:
    if (*((_DWORD *)v90 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v90) & 1) != 0)
    {
      JSC::JSInternalPromise::create();
      v20 = JSC::JSInternalPromise::rejectWithCaughtException();
      if (*((_DWORD *)v37 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
      else
        --*((_DWORD *)v37 + 2);
LABEL_112:
      v84 = 0;
      if (v48)
      {
        if (*(_DWORD *)(v48 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        else
          --*(_DWORD *)(v48 + 8);
      }
      goto LABEL_115;
    }
    v69 = *(WTF::StringImpl **)v22;
    if (v69)
    {
      if ((*((_BYTE *)v69 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v69 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v69 = v81;
      }
    }
    v70 = *(_DWORD *)v69;
    *(_DWORD *)v69 += 2;
    if (v70)
      *(_DWORD *)v69 = v70;
    else
      WTF::StringImpl::destroy(v69, v47);
    v92 = v69;
    v71 = v85;
    if (v85)
    {
      v72 = *((_DWORD *)v85 + 1);
      if (v72 == 1)
      {
        if ((*((_BYTE *)v85 + 16) & 4) == 0 && **((unsigned __int16 **)v85 + 1) > 0xFFu)
        {
LABEL_106:
          *(_DWORD *)v85 += 2;
          v81 = v71;
          JSC::JSString::create((uint64_t)v6, &v81);
          v74 = v81;
          v81 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v73);
            else
              *(_DWORD *)v74 -= 2;
          }
        }
      }
      else if (v72)
      {
        goto LABEL_106;
      }
    }
    v81 = v37;
    JSC::JSScriptFetchParameters::create((uint64_t)v6, v6[5210], (uint64_t *)&v81);
    JSC::JSScriptFetcher::create((uint64_t)v6, v6[5209], (uint64_t *)&v84);
    v20 = JSC::importModule();
    v75 = v81;
    v81 = 0;
    if (v75)
    {
      if (*((_DWORD *)v75 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v75 + 8))(v75);
      else
        --*((_DWORD *)v75 + 2);
    }
    v76 = v92;
    v92 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v32);
      else
        *(_DWORD *)v76 -= 2;
    }
    v48 = (uint64_t)v84;
    goto LABEL_112;
  }
  *(_DWORD *)v23 += 2;
  v92 = v23;
  MEMORY[0x19AEA52D4](&v81, &v92, 0);
  v25 = v92;
  v92 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v81;
  v81 = 0;
  v27 = v85;
  v85 = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v24);
      v28 = v81;
    }
    else
    {
      v28 = 0;
      *(_DWORD *)v27 -= 2;
    }
  }
  else
  {
    v28 = 0;
  }
  v86 = v82;
  LODWORD(v82) = v82 & 0xFFFFFFFE;
  v87 = v83;
  v81 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v24);
    else
      *(_DWORD *)v28 -= 2;
  }
  if ((v86 & 1) == 0)
  {
    v29 = *(_QWORD *)(a1 + 8);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
        v31 = v30 - 96;
      else
        v31 = 0;
    }
    else
    {
      v31 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = WebCore::rejectPromise(v31, a2, (uint64_t *)&v80);
    v33 = v80;
    v80 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    goto LABEL_115;
  }
  v49 = WebCore::ScriptModuleLoader::importModule(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSString *,JSC::JSValue,JSC::SourceOrigin const&)::$_1::operator()(v88);
  if (!*((_DWORD *)v90 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v90))
  {
    JSC::ImportMap::resolve(*(JSC::ImportMap **)(a2 + 3272), v22, (const WTF::URL *)&v85);
    JSC::ImportMap::integrityForURL(*(JSC::ImportMap **)(a2 + 3272), (const WTF::URL *)&v81);
    v37 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *((_DWORD *)v37 + 2) = 1;
    *((_BYTE *)v37 + 12) = v49;
    *(_QWORD *)v37 = off_1E33948A0;
    v50 = v92;
    if (v92)
    {
      v51 = *(_DWORD *)v92;
      *(_DWORD *)v92 += 2;
      *((_QWORD *)v37 + 2) = v50;
      *((_BYTE *)v37 + 24) = 1;
      v92 = 0;
      if (v51)
        *(_DWORD *)v50 = v51;
      else
        WTF::StringImpl::destroy(v50, v47);
    }
    else
    {
      *((_QWORD *)v37 + 2) = 0;
      *((_BYTE *)v37 + 24) = 1;
    }
    v52 = *(_QWORD *)(a6 + 40);
    if (v52)
    {
      ++*(_DWORD *)(v52 + 8);
      v84 = (WTF::StringImpl *)v52;
      if (*(_BYTE *)(a1 + 48) == 1)
      {
        ++*((_DWORD *)v37 + 2);
        v53 = *(_BYTE *)(v52 + 12);
        v54 = *(_BYTE *)(v52 + 14);
        v48 = WTF::fastMalloc((WTF *)0x58);
        *(_DWORD *)(v48 + 8) = 1;
        *(_QWORD *)v48 = off_1E33948D0;
        *(_BYTE *)(v48 + 12) = v53;
        *(_BYTE *)(v48 + 13) = 13;
        *(_BYTE *)(v48 + 14) = v54;
        *(_QWORD *)(v48 + 16) = 0;
        *(_QWORD *)(v48 + 24) = v37;
        *(_BYTE *)(v48 + 32) = 0;
        *(_BYTE *)(v48 + 72) = 0;
        *(_WORD *)(v48 + 80) = 0;
        v84 = (WTF::StringImpl *)v48;
        if (*(_DWORD *)(v52 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        else
          --*(_DWORD *)(v52 + 8);
      }
      else
      {
        v48 = v52;
      }
    }
    else if (*(_BYTE *)(a1 + 48))
    {
      ++*((_DWORD *)v37 + 2);
      v48 = WTF::fastMalloc((WTF *)0x58);
      *(_DWORD *)(v48 + 8) = 1;
      *(_QWORD *)v48 = off_1E33948D0;
      *(_WORD *)(v48 + 12) = 3329;
      *(_BYTE *)(v48 + 14) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)(v48 + 24) = v37;
      *(_BYTE *)(v48 + 32) = 0;
      *(_BYTE *)(v48 + 72) = 0;
      *(_WORD *)(v48 + 80) = 0;
      v84 = (WTF::StringImpl *)v48;
    }
    else
    {
      v63 = *(_QWORD *)(a1 + 8);
      if (v63)
      {
        v64 = *(_QWORD *)(v63 + 8);
        if (v64)
          v63 = v64 - 96;
        else
          v63 = 0;
      }
      if (*(_BYTE *)(v63 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1956DCAD4);
      }
      WebCore::Document::encoding(v63 - 192, v47, &v92);
      v66 = v92;
      if (v92)
      {
        v67 = *(_DWORD *)v92;
        *(_DWORD *)v92 += 2;
        v79 = v66;
        if (v67)
          *(_DWORD *)v66 = v67;
        else
          WTF::StringImpl::destroy(v66, v65);
      }
      else
      {
        v79 = 0;
      }
      WebCore::CachedScriptFetcher::create((WebCore::CachedScriptFetcher *)&v79, &v92);
      v48 = (uint64_t)v92;
      v84 = v92;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v47);
        else
          *(_DWORD *)v66 -= 2;
      }
    }
    v68 = v81;
    v81 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        goto LABEL_96;
      }
LABEL_133:
      WTF::StringImpl::destroy(v68, v47);
      goto LABEL_96;
    }
    goto LABEL_96;
  }
LABEL_152:
  JSC::JSInternalPromise::create();
  v20 = JSC::JSInternalPromise::rejectWithCaughtException();
LABEL_115:
  v77 = v85;
  v85 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v32);
    else
      *(_DWORD *)v77 -= 2;
  }
  return v20;
}

uint64_t WebCore::rejectPromise(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  WebCore::DOMGuardedObject *v8;
  WebCore::DOMGuardedObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v6 = JSC::JSInternalPromise::create();
  if (v6)
  {
    v7 = v6;
    v8 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
    v9 = WebCore::DOMGuardedObject::DOMGuardedObject(v8, a2, v7);
    *(_QWORD *)v9 = &off_1E3226868;
    *((_DWORD *)v9 + 10) = 0;
    *((_BYTE *)v9 + 44) = 0;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    v11 = *a3;
    *a3 = 0;
    v12 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v12 = &off_1E3393C70;
    *(_QWORD *)(v12 + 8) = v8;
    *(_BYTE *)(v12 + 16) = 33;
    *(_QWORD *)(v12 + 24) = v11;
    v15 = v12;
    WebCore::EventLoopTaskGroup::queueTask(v10, 11, &v15);
    v13 = v15;
    v15 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return v7;
  }
  else
  {
    result = 293;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ScriptModuleLoader::importModule(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSString *,JSC::JSValue,JSC::SourceOrigin const&)::$_1::operator()(JSC::VM **a1)
{
  JSC::VM *v1;
  WTF::StringImpl *v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int16 TypeImportAttribute;
  unsigned __int8 v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v16;
  WTF::StringImpl **v17;

  v1 = *a1;
  v2 = *(WTF::StringImpl **)(*((_QWORD *)*a1 + 5244) + 2560);
  if (v2)
  {
    *(_DWORD *)v2 += 2;
    v3 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)v2 += 2;
  }
  else
  {
    v3 = (WTF *)WTF::fastMalloc((WTF *)8);
  }
  v16 = v3;
  *(_QWORD *)v3 = v2;
  JSC::retrieveImportAttributesFromDynamicImportOptions();
  v5 = (WTF::StringImpl **)v16;
  v6 = 8;
  do
  {
    v7 = *v5;
    *v5 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    ++v5;
    v6 -= 8;
  }
  while (v6);
  if (v16)
    WTF::fastFree(v16, v4);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (*((_DWORD *)v1 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v1) & 1) != 0
    || (TypeImportAttribute = JSC::retrieveTypeImportAttribute(), *((_DWORD *)v1 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v1) & 1) != 0)
  {
    v10 = 0;
  }
  else if ((TypeImportAttribute & 0xFF00) != 0)
  {
    v10 = TypeImportAttribute;
  }
  else
  {
    v10 = 1;
  }
  if (v17)
  {
    v11 = *((unsigned int *)v17 - 1);
    if ((_DWORD)v11)
    {
      v12 = v17;
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          v14 = v12[1];
          v12[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, v8);
              v13 = *v12;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v17 - 2), v8);
  }
  return v10;
}

uint64_t JSC::jsString(JSC *this, JSC::VM *a2, const WTF::String *a3)
{
  int v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v10;

  if (!a2)
    return *((_QWORD *)this + 5246);
  v3 = *((_DWORD *)a2 + 1);
  if (v3 != 1)
  {
    if (v3)
      goto LABEL_4;
    return *((_QWORD *)this + 5246);
  }
  v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
  {
    v9 = *v8;
    return *((_QWORD *)this + v9 + 5277);
  }
  v9 = *(unsigned __int16 *)v8;
  if (v9 <= 0xFF)
  {
    v9 = v9;
    return *((_QWORD *)this + v9 + 5277);
  }
LABEL_4:
  *(_DWORD *)a2 += 2;
  v10 = a2;
  v5 = JSC::JSString::create((uint64_t)this, &v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

unsigned __int8 *WebCore::ScriptModuleLoader::createImportMetaProperties(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4)
{
  JSC *v7;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  const WTF::String *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;

  v7 = *(JSC **)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 932);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  v10 = (unsigned __int8 *)JSC::constructEmptyObject(v7, v9, a3);
  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
    return 0;
  WebCore::ScriptModuleLoader::responseURLFromRequestURL((uint64_t)&v29, a1, (JSC::JSGlobalObject *)a2, a4);
  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
    goto LABEL_37;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::jsString(v7, v29, v11);
  JSC::JSObject::putDirect(v10, v7, (unint64_t)v23, v12, 0);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v13);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
  {
LABEL_37:
    v10 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v23) = *(_BYTE *)(a1 + 48);
    v14 = v29;
    if (v29)
      *(_DWORD *)v29 += 2;
    v24 = v14;
    v25 = v30;
    v26 = v31;
    WTF::Function<long long ()(JSC::JSGlobalObject *,JSC::CallFrame *)>::Function<WebCore::ScriptModuleLoader::createImportMetaProperties(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSModuleRecord *,JSC::JSValue)::$_0,void>(&v27, (uint64_t)&v23);
    v16 = JSC::JSNativeStdFunction::create();
    v17 = v27;
    v27 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v15);
      else
        *(_DWORD *)v24 -= 2;
    }
    JSC::Identifier::fromString(&v28, &v23);
    JSC::JSObject::putDirect(v10, v7, (unint64_t)v23, v16, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v28;
    v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v21 = v29;
  v29 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  return v10;
}

uint64_t *WTF::Function<long long ()(JSC::JSGlobalObject *,JSC::CallFrame *)>::Function<WebCore::ScriptModuleLoader::createImportMetaProperties(JSC::JSGlobalObject *,JSC::JSModuleLoader *,JSC::JSValue,JSC::JSModuleRecord *,JSC::JSValue)::$_0,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v4 = &off_1E3394460;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_DWORD *)(v4 + 24) & 0xFFFFFFFE | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(v4 + 24) = v6;
  v7 = v6 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 16) >> 1) & 1));
  *(_DWORD *)(v4 + 24) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 16) >> 2) & 1));
  *(_DWORD *)(v4 + 24) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 16) >> 3) & 7));
  *(_DWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 16) & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(v4 + 28) = *(_OWORD *)(a2 + 20);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(v4 + 52) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 16) &= ~1u;
  *a1 = v4;
  return a1;
}

unsigned int *WebCore::ScriptModuleLoader::notifyFinished(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned int *v34;
  int v35;
  uint64_t v36;
  const WTF::String *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  int v43;
  uint64_t *v44;
  WTF::StringImpl *v45;
  const WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  const WTF::StringImpl **v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  const WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _DWORD *v69;
  _QWORD *v70;
  WTF::StringImpl **v71;
  void *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  _DWORD *v77;
  WTF::StringImpl *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  WTF **v108;
  WTF::StringImpl *v109;
  int v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF *v126;
  WTF *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int **v132;
  void *v133;
  _DWORD *v134;
  int v135;
  const char *v136;
  uint64_t v137;
  uint64_t *v138;
  int v139;
  uint64_t v140;
  const WTF::String *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int **v144;
  void *v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  _DWORD *v153;
  int v154;
  WTF::StringImpl *v155;
  __int128 v156;
  unsigned int **v157;
  uint64_t v158;
  WTF::StringImpl **v159;
  uint64_t v160;
  const WTF::String *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  unsigned int *v174;
  unsigned int v175;
  WTF::StringImpl **v176;
  _DWORD *v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  void *v180;
  unsigned int *v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  int v186;
  int32x2_t v187;
  void *v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  int v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  unsigned int *v211;
  unsigned int *v212;
  int v214;
  WebCore::CachedResource *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  WTF::StringImpl *v220;
  _BYTE v221[40];
  _DWORD *v222;
  WTF::StringImpl *v223;
  __int128 v224;
  __int128 v225;
  WTF::StringImpl *v226;
  _DWORD *v227;
  WTF::StringImpl **v228;
  __int128 v229;
  __int128 v230;
  WTF::StringImpl *v231;
  __int128 v232;
  __int128 v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  unsigned int *v237;
  uint64_t v238[3];
  int32x2_t v239[2];

  v5 = (uint64_t *)(result + 10);
  v4 = *((_QWORD *)result + 5);
  if (v4)
  {
    v8 = result;
    v9 = *(_DWORD *)(v4 - 8);
    v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    for (i = 1; ; ++i)
    {
      v15 = v13;
      v16 = *(_QWORD *)(v4 + 8 * v13);
      if (v16 != -1)
      {
        if (!v16)
          return result;
        if (v16 == a2)
          break;
      }
      v13 = (v15 + i) & v9;
    }
    if ((_DWORD)v15 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 8 * v15) = 0;
      if (*(_DWORD *)(a2 + 8) == 1)
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      else
        --*(_DWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 8 * v15) = -1;
      ++*(_DWORD *)(*v5 - 16);
      v17 = *v5;
      if (*v5)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v5;
      if (*v5)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>,WTF::HashTraits<WTF::Ref<WebCore::ModuleScriptLoader,WTF::RawPtrTraits<WebCore::ModuleScriptLoader>,WTF::DefaultRefDerefTraits<WebCore::ModuleScriptLoader>>>>::rehash(v5, v21 >> 1, 0);
      }
      *(_QWORD *)(a2 + 16) = 0;
      v23 = *((_QWORD *)v8 + 1);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v25 = v24 - 96;
          v26 = *(unsigned __int8 *)(v24 + 178);
          if (*(_BYTE *)(v24 + 178))
          {
            if (v26 == 1 || v26 == 2)
              ++*(_DWORD *)(v24 + 216);
          }
          else
          {
            *(_DWORD *)(v24 - 264) += 2;
          }
          v218 = v24 - 96;
          if (!*((_BYTE *)v8 + 48))
          {
            v27 = *(_QWORD *)(a2 + 64);
            if (v27)
              v28 = *(_QWORD *)(v27 + 8);
            else
              v28 = 0;
            v29 = *(_QWORD *)(v28 + 400);
            if (v29)
            {
              v30 = (uint64_t *)(v29 + 320);
            }
            else
            {
              std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v220);
              v30 = &WebCore::CachedResource::resourceError(void)const::emptyError;
            }
            if (*((_BYTE *)v30 + 60) != 2)
            {
              if ((*(_WORD *)(v28 + 557) >> 5) - 3 > 1)
              {
                v31 = *(_QWORD *)(v28 + 400);
                if (v31)
                {
                  v32 = (uint64_t *)(v31 + 320);
                }
                else
                {
                  std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v220);
                  v32 = &WebCore::CachedResource::resourceError(void)const::emptyError;
                }
                if (*((_BYTE *)v32 + 60) != 3)
                {
                  v33 = *(uint64_t **)(v28 + 400);
                  if (!v33)
                  {
                    v97 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
                    if (v97 != -1)
                    {
                      v220 = (WTF::StringImpl *)v238;
                      v228 = &v220;
                      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v228, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
                    }
                    v33 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
                  }
                  WebCore::ResourceResponse::platformLazyInit((uint64_t)v33, 1);
                  v34 = (unsigned int *)v33[5];
                  if (v34)
                    *v34 += 2;
                  v237 = v34;
                  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)&v237))
                  {
                    v35 = 1;
                  }
                  else if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 136))(v24 - 96) + 480) & 0x4000000000000000) != 0
                         && WebCore::MIMETypeRegistry::isSupportedWebAssemblyMIMEType((WebCore::MIMETypeRegistry *)&v237, v141))
                  {
                    v35 = 2;
                  }
                  else
                  {
                    v148 = *(_QWORD *)(a2 + 40);
                    if (!v148
                      || *(_BYTE *)(v148 + 12) != 3
                      || (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType((WebCore::MIMETypeRegistry *)&v237, v141) & 1) == 0)
                    {
                      v149 = WebCore::CachedResource::response((WebCore::CachedResource *)v28);
                      WebCore::ResourceResponse::platformLazyInit((uint64_t)v149, 1);
                      v150 = (WTF::StringImpl *)v149[5];
                      if (v150)
                        *(_DWORD *)v150 += 2;
                      v236 = v150;
                      WTF::makeString<char,WTF::String,WTF::ASCIILiteral>(39, (uint64_t *)&v236, (int8x16_t *)"' is not a valid JavaScript MIME type.", 39, &v220);
                      WebCore::rejectWithFetchError(v24 - 96, a4, (uint64_t *)&v220);
                      v151 = v220;
                      v220 = 0;
                      if (v151)
                      {
                        if (*(_DWORD *)v151 == 2)
                          WTF::StringImpl::destroy(v151, v76);
                        else
                          *(_DWORD *)v151 -= 2;
                      }
                      v152 = v236;
                      v236 = 0;
                      if (v152)
                      {
                        if (*(_DWORD *)v152 == 2)
                          WTF::StringImpl::destroy(v152, v76);
                        else
                          *(_DWORD *)v152 -= 2;
                      }
                      v74 = 0;
                      v73 = 0;
                      v81 = 1;
                      v75 = -1;
LABEL_80:
                      result = v237;
                      v237 = 0;
                      if (result)
                      {
                        if (*result == 2)
                          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v76);
                        else
                          *result -= 2;
                      }
                      if (v81)
                      {
LABEL_84:
                        if (v73)
                        {
                          if (v73[2] == 1)
                            result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v73 + 8))(v73);
                          else
                            --v73[2];
                        }
                        goto LABEL_87;
                      }
LABEL_281:
                      v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 104))(v25);
                      ++*(_DWORD *)(v183 + 8);
                      v184 = *a4;
                      *a4 = 0;
                      v185 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
                      *(_QWORD *)v185 = &off_1E3394488;
                      *((_QWORD *)v185 + 1) = v184;
                      *((_QWORD *)v185 + 2) = v73;
                      *((_QWORD *)v185 + 3) = v74;
                      *((_QWORD *)v185 + 4) = v75;
                      v220 = v185;
                      WebCore::EventLoopTaskGroup::queueTask(v183, 11, (uint64_t *)&v220);
                      result = (unsigned int *)v220;
                      v220 = 0;
                      if (result)
                        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                      v186 = *(_DWORD *)(v183 + 8);
                      if (!v186)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1956DE490);
                      }
                      *(_DWORD *)(v183 + 8) = v186 - 1;
                      goto LABEL_87;
                    }
                    v35 = 3;
                  }
                  v36 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v24 - 96));
                  if (v36)
                    JSC::ImportMap::integrityForURL(*(JSC::ImportMap **)(v36 + 3272), (const WTF::URL *)a3);
                  else
                    v235 = 0;
                  v38 = *(_QWORD *)(a2 + 40);
                  if (v38)
                  {
                    v39 = *(WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
                    if (v39)
                      *(_DWORD *)v39 += 2;
                    v90 = v235;
                    v235 = v39;
                    if (!v90)
                    {
LABEL_40:
                      if (v39
                        && *((_DWORD *)v39 + 1)
                        && (WebCore::matchIntegrityMetadataSlow((WebCore *)v28, (const WebCore::CachedResource *)&v235, v37) & 1) == 0)
                      {
                        WebCore::integrityMismatchDescription((WebCore *)v28, (const WebCore::CachedResource *)&v235, &v234);
                        WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Cannot load script ", 20, (uint64_t *)&v234, &v220);
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v25 + 248))(v24 - 96, 8, 2, &v220, 0);
                        v92 = v220;
                        v220 = 0;
                        if (v92)
                        {
                          if (*(_DWORD *)v92 == 2)
                            WTF::StringImpl::destroy(v92, v91);
                          else
                            *(_DWORD *)v92 -= 2;
                        }
                        v93 = v234;
                        v234 = 0;
                        if (v93)
                        {
                          if (*(_DWORD *)v93 == 2)
                            WTF::StringImpl::destroy(v93, v91);
                          else
                            *(_DWORD *)v93 -= 2;
                        }
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        WebCore::rejectWithFetchError(v24 - 96, a4, (uint64_t *)&v220);
                        v94 = v220;
                        v220 = 0;
                        if (v94)
                        {
                          if (*(_DWORD *)v94 == 2)
                            WTF::StringImpl::destroy(v94, v76);
                          else
                            *(_DWORD *)v94 -= 2;
                        }
                        v74 = 0;
                        v73 = 0;
                        v81 = 1;
                        v75 = -1;
LABEL_77:
                        v82 = v235;
                        v235 = 0;
                        if (v82)
                        {
                          if (*(_DWORD *)v82 == 2)
                            WTF::StringImpl::destroy(v82, v76);
                          else
                            *(_DWORD *)v82 -= 2;
                        }
                        goto LABEL_80;
                      }
                      v40 = *(uint64_t **)(v28 + 400);
                      if (!v40)
                      {
                        v98 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
                        if (v98 != -1)
                        {
                          v220 = (WTF::StringImpl *)v238;
                          v228 = &v220;
                          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v228, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
                        }
                        v40 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
                      }
                      WebCore::ResourceResponse::platformLazyInit((uint64_t)v40, 1);
                      v41 = (WTF::StringImpl *)*v40;
                      if (*v40)
                        *(_DWORD *)v41 += 2;
                      v231 = v41;
                      v42 = *(_OWORD *)(v40 + 3);
                      v232 = *(_OWORD *)(v40 + 1);
                      v233 = v42;
                      v43 = *(unsigned __int8 *)(v28 + 536);
                      v44 = *(uint64_t **)(v28 + 400);
                      if (!v44)
                      {
                        v99 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
                        if (v99 != -1)
                        {
                          v220 = (WTF::StringImpl *)v238;
                          v228 = &v220;
                          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v228, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
                        }
                        v44 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
                      }
                      v215 = (WebCore::CachedResource *)v28;
                      WebCore::ResourceResponse::platformLazyInit((uint64_t)v44, 2);
                      if (!v43
                        && (v44[29] & 0x3C00) != 0x1800
                        && (*(_BYTE *)(a3 + 8) & 1) != 0
                        && *(_QWORD *)a3
                        && *(_DWORD *)(*(_QWORD *)a3 + 4) > *(_DWORD *)(a3 + 36))
                      {
                        WTF::URL::fragmentIdentifier((WTF::URL *)a3);
                        WTF::URL::setFragmentIdentifier();
                      }
                      v47 = v231;
                      *(_OWORD *)v221 = v232;
                      *(_OWORD *)&v221[16] = v233;
                      LODWORD(v232) = v232 & 0xFFFFFFFE;
                      v231 = 0;
                      v49 = v8[6];
                      v48 = v8[7];
                      v219 = (uint64_t *)(v8 + 4);
                      v220 = v47;
                      if (10 * v48 >= (unint64_t)(9 * v49)
                        || *((_BYTE *)v8 + 36) && v49 <= 2 * (int)v48)
                      {
                        if ((_DWORD)v49)
                          v142 = 2 * v49;
                        else
                          v142 = 8;
                        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)(v8 + 4), v142);
                        LODWORD(v49) = v8[6];
                      }
                      v216 = a2;
                      v217 = v24;
                      v50 = v49 - 1;
                      v51 = v8[8];
                      v52 = *(_DWORD *)(*(_QWORD *)a3 + 16);
                      v214 = v35;
                      v53 = (const WTF::StringImpl **)a3;
                      if (v52 < 0x100)
                      {
                        v95 = v8[8];
                        v96 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
                        v51 = v95;
                        v54 = v96;
                      }
                      else
                      {
                        v54 = v52 >> 8;
                      }
                      v55 = (v54 ^ v51) & v50;
                      v56 = (uint64_t *)(v8 + 4);
                      v57 = *v219;
                      v58 = *v219 + 48 * v55;
                      v59 = *(WTF **)v58;
                      if (*(_QWORD *)v58)
                      {
                        v84 = 0;
                        v211 = v8;
                        while (1)
                        {
                          v85 = *((_DWORD *)v59 + 4);
                          if (v85 < 0x100)
                          {
                            v88 = v51;
                            v86 = WTF::StringImpl::hashSlowCase(v59);
                            v51 = v88;
                            v56 = v219;
                          }
                          else
                          {
                            v86 = v85 >> 8;
                          }
                          v87 = (v55 + v49 - ((v86 ^ v51) & v50)) & v50;
                          if (v84 > v87)
                            break;
                          if (v86 == v54)
                          {
                            v146 = v51;
                            v147 = WTF::equal(*(WTF **)v58, *v53, v46);
                            v51 = v146;
                            v56 = v219;
                            if ((v147 & 1) != 0)
                              goto LABEL_63;
                          }
                          v57 = *v56;
                          v55 = ((_DWORD)v55 + 1) & v50;
                          ++v84;
                          v58 = *v56 + 48 * v55;
                          v59 = *(WTF **)v58;
                          v8 = v211;
                          if (!*(_QWORD *)v58)
                          {
                            if (v84 >= 0x80)
                              *((_BYTE *)v211 + 36) = 1;
                            goto LABEL_56;
                          }
                        }
                        v202 = v51;
                        if (v84 >= 0x80)
                          *((_BYTE *)v211 + 36) = 1;
                        v100 = *(WTF **)v58;
                        *(_QWORD *)v58 = 0;
                        v101 = v57 + 48 * v55;
                        v102 = *(_QWORD *)(v101 + 8);
                        v203 = *(_OWORD *)(v101 + 16);
                        v207 = *(_OWORD *)(v101 + 32);
                        *(_DWORD *)(v101 + 16) = v203 & 0xFFFFFFFE;
                        *(_QWORD *)(v101 + 8) = 0;
                        v103 = *(WTF::StringImpl **)v58;
                        *(_QWORD *)v58 = 0;
                        if (v103)
                        {
                          if (*(_DWORD *)v103 == 2)
                            WTF::StringImpl::destroy(v103, v45);
                          else
                            *(_DWORD *)v103 -= 2;
                        }
                        *(_OWORD *)(v58 + 16) = 0u;
                        *(_OWORD *)(v58 + 32) = 0u;
                        *(_OWORD *)v58 = 0u;
                        WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::String const&,WTF::URL>((WTF::StringImpl **)v58, *v53, (WTF::StringImpl *)&v220);
                        v105 = ((_DWORD)v55 + 1) & v50;
                        v106 = v219;
                        v107 = *v219;
                        v108 = (WTF **)(*v219 + 48 * v105);
                        v109 = *v108;
                        if (*v108)
                        {
                          v110 = v202;
                          v112 = v203;
                          v111 = v207;
                          v113 = v102;
                          do
                          {
                            v114 = *((_DWORD *)v109 + 4);
                            if (v114 < 0x100)
                            {
                              v204 = v112;
                              v208 = v111;
                              v115 = WTF::StringImpl::hashSlowCase(v109);
                              v112 = v204;
                              v111 = v208;
                              v110 = v202;
                              v106 = v219;
                            }
                            else
                            {
                              v115 = v114 >> 8;
                            }
                            v116 = v87 + 1;
                            v87 = (v105 + v49 - ((v115 ^ v110) & v50)) & v50;
                            if (v116 <= v87)
                            {
                              v87 = v116;
                              v122 = v112;
                              v123 = v111;
                            }
                            else
                            {
                              v117 = *v108;
                              *v108 = 0;
                              v118 = v107 + 48 * v105;
                              v121 = *(_QWORD *)(v118 + 8);
                              v120 = v118 + 8;
                              v119 = v121;
                              *(_QWORD *)v120 = 0;
                              v122 = *(_OWORD *)(v120 + 8);
                              *(_DWORD *)(v120 + 8) = v122 & 0xFFFFFFFE;
                              v123 = *(_OWORD *)(v120 + 24);
                              v124 = *v108;
                              *v108 = v100;
                              if (v124)
                              {
                                if (*(_DWORD *)v124 == 2)
                                {
                                  v205 = v112;
                                  v209 = v111;
                                  v196 = v123;
                                  v199 = v122;
                                  v126 = v117;
                                  WTF::StringImpl::destroy(v124, v104);
                                  v117 = v126;
                                  v123 = v196;
                                  v122 = v199;
                                  v112 = v205;
                                  v111 = v209;
                                  v110 = v202;
                                  v106 = v219;
                                }
                                else
                                {
                                  *(_DWORD *)v124 -= 2;
                                }
                              }
                              v125 = *(WTF::StringImpl **)v120;
                              *(_QWORD *)v120 = v113;
                              if (v125)
                              {
                                if (*(_DWORD *)v125 == 2)
                                {
                                  v206 = v112;
                                  v210 = v111;
                                  v197 = v123;
                                  v200 = v122;
                                  v127 = v117;
                                  WTF::StringImpl::destroy(v125, v104);
                                  v117 = v127;
                                  v123 = v197;
                                  v122 = v200;
                                  v112 = v206;
                                  v111 = v210;
                                  v110 = v202;
                                  v106 = v219;
                                }
                                else
                                {
                                  *(_DWORD *)v125 -= 2;
                                }
                              }
                              *(_OWORD *)(v120 + 8) = v112;
                              *(_OWORD *)(v120 + 24) = v111;
                              v113 = v119;
                              v100 = v117;
                              v112 = v122;
                              v111 = v123;
                            }
                            v105 = ((_DWORD)v105 + 1) & v50;
                            v107 = *v106;
                            v108 = (WTF **)(*v106 + 48 * v105);
                            v109 = *v108;
                          }
                          while (*v108);
                        }
                        else
                        {
                          v122 = v203;
                          v123 = v207;
                          v113 = v102;
                        }
                        *v108 = v100;
                        v128 = v107 + 48 * v105;
                        v129 = *(WTF::StringImpl **)(v128 + 8);
                        *(_QWORD *)(v128 + 8) = v113;
                        v8 = v211;
                        if (v129)
                        {
                          if (*(_DWORD *)v129 == 2)
                          {
                            v198 = v123;
                            v201 = v122;
                            WTF::StringImpl::destroy(v129, v104);
                            v123 = v198;
                            v122 = v201;
                          }
                          else
                          {
                            *(_DWORD *)v129 -= 2;
                          }
                        }
                        v130 = v107 + 48 * v105;
                        *(_OWORD *)(v130 + 16) = v122;
                        *(_OWORD *)(v130 + 32) = v123;
                      }
                      else
                      {
LABEL_56:
                        v60 = *v53;
                        if (*v53)
                          *(_DWORD *)v60 += 2;
                        *(_QWORD *)v58 = v60;
                        v61 = v57 + 48 * v55;
                        v62 = v220;
                        v220 = 0;
                        v63 = *(WTF::StringImpl **)(v61 + 8);
                        *(_QWORD *)(v61 + 8) = v62;
                        if (v63)
                        {
                          if (*(_DWORD *)v63 == 2)
                            WTF::StringImpl::destroy(v63, v45);
                          else
                            *(_DWORD *)v63 -= 2;
                        }
                        v64 = v57 + 48 * v55;
                        *(_DWORD *)(v64 + 16) = *(_DWORD *)(v64 + 16) & 0xFFFFFFFE | v221[0] & 1;
                        v65 = *(_DWORD *)v221;
                        *(_DWORD *)v221 &= ~1u;
                        v66 = *(_DWORD *)(v64 + 16) & 0xFFFFFFFD | (2 * ((v65 >> 1) & 1));
                        *(_DWORD *)(v64 + 16) = v66;
                        v67 = v66 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v221 >> 2) & 1));
                        *(_DWORD *)(v64 + 16) = v67;
                        v68 = v67 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v221 >> 3) & 7));
                        *(_DWORD *)(v64 + 16) = v68;
                        *(_DWORD *)(v64 + 16) = *(_DWORD *)v221 & 0xFFFFFFC0 | v68 & 0x3F;
                        *(_OWORD *)(v64 + 20) = *(_OWORD *)&v221[4];
                        *(_QWORD *)(v64 + 36) = *(_QWORD *)&v221[20];
                        *(_DWORD *)(v64 + 44) = *(_DWORD *)&v221[28];
                      }
                      ++v8[7];
LABEL_63:
                      if (v214 == 1)
                      {
                        v69 = *(_DWORD **)(v216 + 32);
                        ++v69[2];
                        v227 = v69;
                        v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x90);
                        v71 = (WTF::StringImpl **)WebCore::CachedScriptSourceProvider::CachedScriptSourceProvider(v70, v215, 1, &v227);
                        ++*((_DWORD *)v71 + 2);
                        v228 = v71;
                        *(_QWORD *)&v229 = v71;
                        DWORD2(v229) = 0;
                        (*((void (**)(WTF::StringImpl **))*v71 + 3))(v71);
                        *(_QWORD *)&v230 = 0;
                        HIDWORD(v229) = (_DWORD)v72;
                        v24 = v217;
                        v25 = v218;
                        if (!v215)
                          goto LABEL_65;
                        v189 = *((_QWORD *)v215 + 1);
                        if (v189)
                          goto LABEL_328;
                        v189 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v189 = 1;
                        *(_QWORD *)(v189 + 8) = v215;
                        v193 = (unsigned int *)*((_QWORD *)v215 + 1);
                        *((_QWORD *)v215 + 1) = v189;
                        if (!v193)
                          goto LABEL_328;
                        do
                        {
                          v194 = __ldaxr(v193);
                          v195 = v194 - 1;
                        }
                        while (__stlxr(v195, v193));
                        if (!v195)
                        {
                          atomic_store(1u, v193);
                          WTF::fastFree((WTF *)v193, v72);
                        }
                        v189 = *((_QWORD *)v215 + 1);
                        v24 = v217;
                        v25 = v218;
                        if (v189)
                        {
LABEL_328:
                          do
                            v190 = __ldaxr((unsigned int *)v189);
                          while (__stlxr(v190 + 1, (unsigned int *)v189));
                          *((_QWORD *)&v230 + 1) = v189;
                          v191 = *(_QWORD *)(v189 + 8);
                          v24 = v217;
                          v25 = v218;
                          if (v191)
                          {
                            v239[0] = (int32x2_t)((char *)&v230 + 8);
                            ++*(_DWORD *)(v191 + 548);
                            v192 = *(_QWORD *)(v191 + 488);
                            if (v192 && *(_QWORD *)(v192 + 8))
                              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v191 + 464), (uint64_t *)v239, (uint64_t)v238);
                            v24 = v217;
                            v25 = v218;
                          }
                        }
                        else
                        {
LABEL_65:
                          *((_QWORD *)&v230 + 1) = 0;
                        }
                        v73 = (_DWORD *)v229;
                        if ((_QWORD)v229)
                          ++*(_DWORD *)(v229 + 8);
                        v74 = *((_QWORD *)&v229 + 1);
                        v75 = v230;
                        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v230 + 1, v72);
                        v77 = (_DWORD *)v229;
                        *(_QWORD *)&v229 = 0;
                        if (v77)
                        {
                          if (v77[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
                          else
                            --v77[2];
                        }
                        v78 = (WTF::StringImpl *)v228;
                        v228 = 0;
                        if (v78)
                        {
                          if (*((_DWORD *)v78 + 2) == 1)
                            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v78 + 8))(v78);
                          else
                            --*((_DWORD *)v78 + 2);
                        }
                        v79 = v227;
                        v227 = 0;
                        if (v79)
                        {
                          if (v79[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
                          else
                            --v79[2];
                        }
                      }
                      else
                      {
                        v24 = v217;
                        v25 = v218;
                        if (v214 == 2)
                        {
                          v143 = *(_QWORD *)(v216 + 32);
                          ++*(_DWORD *)(v143 + 8);
                          v238[0] = v143;
                          v144 = (unsigned int **)WebCore::WebAssemblyScriptSourceCode::WebAssemblyScriptSourceCode((uint64_t)&v228, v215, v238);
                          v73 = (_DWORD *)v229;
                          if ((_QWORD)v229)
                            ++*(_DWORD *)(v229 + 8);
                          v74 = *((_QWORD *)&v229 + 1);
                          v75 = v230;
                          WebCore::ScriptSourceCode::~ScriptSourceCode(v144, v145);
                          v134 = (_DWORD *)v238[0];
                          if (!v238[0])
                            goto LABEL_73;
                        }
                        else
                        {
                          v131 = *(_QWORD *)(v216 + 32);
                          ++*(_DWORD *)(v131 + 8);
                          v238[0] = v131;
                          v132 = (unsigned int **)WebCore::ScriptSourceCode::ScriptSourceCode((uint64_t)&v228, v215, v238);
                          v73 = (_DWORD *)v229;
                          if ((_QWORD)v229)
                            ++*(_DWORD *)(v229 + 8);
                          v74 = *((_QWORD *)&v229 + 1);
                          v75 = v230;
                          WebCore::ScriptSourceCode::~ScriptSourceCode(v132, v133);
                          v134 = (_DWORD *)v238[0];
                          v238[0] = 0;
                          if (!v134)
                            goto LABEL_73;
                        }
                        if (v134[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v134 + 8))(v134);
                        else
                          --v134[2];
                        v24 = v217;
                        v25 = v218;
                      }
LABEL_73:
                      v80 = v220;
                      v220 = 0;
                      if (v80)
                      {
                        if (*(_DWORD *)v80 == 2)
                          WTF::StringImpl::destroy(v80, v76);
                        else
                          *(_DWORD *)v80 -= 2;
                      }
                      v81 = 0;
                      goto LABEL_77;
                    }
                    if (*(_DWORD *)v90 == 2)
                      WTF::StringImpl::destroy(v90, v89);
                    else
                      *(_DWORD *)v90 -= 2;
                  }
                  v39 = v235;
                  goto LABEL_40;
                }
                goto LABEL_183;
              }
LABEL_182:
              v136 = "Importing a module script failed.";
              v137 = v24 - 96;
              v138 = a4;
              v139 = 0;
              v140 = 34;
              goto LABEL_184;
            }
LABEL_181:
            v136 = "Cross-origin script load denied by Cross-Origin Resource Sharing policy.";
            v137 = v24 - 96;
            v138 = a4;
            v139 = 0;
            v140 = 73;
LABEL_184:
            result = (unsigned int *)WebCore::rejectToPropagateNetworkError(v137, v138, v139, (uint64_t)v136, v140);
LABEL_87:
            v83 = *(unsigned __int8 *)(v24 + 178);
            if (*(_BYTE *)(v24 + 178))
            {
              if (v83 == 1)
              {
                if (*(_DWORD *)(v24 + 216) == 1)
                  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
                else
                  --*(_DWORD *)(v24 + 216);
              }
              else if (v83 == 2)
              {
                return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v24 + 216));
              }
            }
            else if (*(_DWORD *)(v24 - 264) == 2)
            {
              if ((*(_WORD *)(v24 - 258) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)(v24 - 288), v76);
            }
            else
            {
              *(_DWORD *)(v24 - 264) -= 2;
            }
            return result;
          }
          if (*(_BYTE *)(a2 + 168))
          {
            v135 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 64) + 292);
            if (v135 == 3)
            {
LABEL_183:
              v136 = "Importing a module script is canceled.";
              v137 = v24 - 96;
              v138 = a4;
              v139 = 1;
              v140 = 39;
              goto LABEL_184;
            }
            if (v135 != 2)
              goto LABEL_182;
            goto LABEL_181;
          }
          v153 = *(_DWORD **)(a2 + 160);
          if (v153)
            *v153 += 2;
          v238[0] = (uint64_t)v153;
          if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, v238))
          {
            v154 = 1;
          }
          else if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 136))(v24 - 96) + 480) & 0x4000000000000000) != 0
                 && WebCore::MIMETypeRegistry::isSupportedWebAssemblyMIMEType((WebCore::MIMETypeRegistry *)v238, v161))
          {
            v154 = 2;
          }
          else
          {
            v162 = *(_QWORD *)(a2 + 40);
            if (!v162
              || *(_BYTE *)(v162 + 12) != 3
              || (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType((WebCore::MIMETypeRegistry *)v238, v161) & 1) == 0)
            {
              v163 = *(WTF::StringImpl **)(a2 + 160);
              if (v163)
                *(_DWORD *)v163 += 2;
              v226 = v163;
              WTF::makeString<char,WTF::String,WTF::ASCIILiteral>(39, (uint64_t *)&v226, (int8x16_t *)"' is not a valid JavaScript MIME type.", 39, &v220);
              WebCore::rejectWithFetchError(v24 - 96, a4, (uint64_t *)&v220);
              v164 = v220;
              v220 = 0;
              if (v164)
              {
                if (*(_DWORD *)v164 == 2)
                  WTF::StringImpl::destroy(v164, v76);
                else
                  *(_DWORD *)v164 -= 2;
              }
              v165 = v226;
              v226 = 0;
              if (v165)
              {
                if (*(_DWORD *)v165 == 2)
                  WTF::StringImpl::destroy(v165, v76);
                else
                  *(_DWORD *)v165 -= 2;
              }
              v74 = 0;
              v73 = 0;
              v166 = 0;
              v75 = -1;
LABEL_277:
              result = (unsigned int *)v238[0];
              v238[0] = 0;
              if (result)
              {
                if (*result == 2)
                  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v76);
                else
                  *result -= 2;
              }
              if (!v166)
                goto LABEL_84;
              goto LABEL_281;
            }
            v154 = 3;
          }
          v155 = *(WTF::StringImpl **)(a2 + 120);
          if (v155)
            *(_DWORD *)v155 += 2;
          v228 = (WTF::StringImpl **)v155;
          v156 = *(_OWORD *)(a2 + 144);
          v229 = *(_OWORD *)(a2 + 128);
          v230 = v156;
          if (!*(_BYTE *)(a2 + 169))
          {
            v212 = v8;
            v167 = *(_QWORD *)(a2 + 64);
            v168 = *(_QWORD *)(a2 + 40);
            if (v168 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v168 + 24))(v168))
            {
              v169 = *(_QWORD *)(a2 + 32);
              *(_BYTE *)(v169 + 14) = WebCore::WorkerModuleScriptLoader::referrerPolicy(*(WebCore::WorkerModuleScriptLoader **)(*(_QWORD *)(a2 + 64) + 184));
            }
            v170 = (WTF::StringImpl *)v228;
            if (v228)
              *(_DWORD *)v228 += 2;
            v223 = v170;
            v224 = v229;
            v225 = v230;
            WebCore::ScriptModuleLoader::notifyFinished(WebCore::ModuleScriptLoader &,WTF::URL &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_0::operator()((uint64_t)&v220, (WTF::URL *)a3, (uint64_t *)&v223, *(_BYTE *)(v167 + 226), *(unsigned __int8 *)(v167 + 228));
            WTF::URL::operator=((uint64_t)&v228, (uint64_t *)&v220);
            v172 = v220;
            v220 = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 2)
                WTF::StringImpl::destroy(v172, v171);
              else
                *(_DWORD *)v172 -= 2;
            }
            v173 = v223;
            v223 = 0;
            if (v173)
            {
              if (*(_DWORD *)v173 == 2)
                WTF::StringImpl::destroy(v173, v171);
              else
                *(_DWORD *)v173 -= 2;
            }
            v25 = v24 - 96;
            v8 = v212;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 64))(v218)
              && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 488))(v218) == 1)
            {
              v174 = *(unsigned int **)(a2 + 112);
              if (v174)
              {
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 + 1, v174));
              }
              v220 = (WTF::StringImpl *)v174;
              v176 = v228;
              if (v228)
                *(_DWORD *)v228 += 2;
              *(_QWORD *)v221 = v176;
              *(_OWORD *)&v221[8] = v229;
              *(_OWORD *)&v221[24] = v230;
              v177 = *(_DWORD **)(a2 + 160);
              if (v177)
                *v177 += 2;
              v222 = v177;
              v25 = v24 - 96;
              WebCore::ServiceWorkerGlobalScope::setScriptResource(v218, a3, &v220);
              WebCore::ServiceWorkerImportedScript::~ServiceWorkerImportedScript((WebCore::ServiceWorkerImportedScript *)&v220, v178);
              v8 = v212;
            }
          }
          WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::URL&>((uint64_t)&v220, (uint64_t)(v8 + 4), (WTF::StringImpl **)a3, (uint64_t)&v228);
          if (v154 == 3)
          {
            v157 = (unsigned int **)(a2 + 112);
            v239[0] = 0;
            v179 = *(_QWORD *)(a2 + 32);
            ++*(_DWORD *)(v179 + 8);
            v237 = (unsigned int *)v179;
            v159 = (WTF::StringImpl **)a3;
            v160 = 3;
          }
          else
          {
            if (v154 == 2)
            {
              v187 = *(int32x2_t *)(a2 + 32);
              ++*(_DWORD *)(*(_QWORD *)&v187 + 8);
              v239[0] = v187;
              WebCore::WebAssemblyScriptSourceCode::WebAssemblyScriptSourceCode((uint64_t)&v220, (unsigned int **)(a2 + 112), (WTF::StringImpl **)&v228, v239);
              v73 = *(_DWORD **)v221;
              if (*(_QWORD *)v221)
                ++*(_DWORD *)(*(_QWORD *)v221 + 8);
              v74 = *(_QWORD *)&v221[8];
              v75 = *(_QWORD *)&v221[16];
              WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)&v220, v188);
              v181 = (unsigned int *)v239[0];
              if (!*(_QWORD *)v239)
                goto LABEL_273;
LABEL_289:
              if (v181[2] == 1)
                (*(void (**)(unsigned int *))(*(_QWORD *)v181 + 8))(v181);
              else
                --v181[2];
LABEL_273:
              v182 = (WTF::StringImpl *)v228;
              v228 = 0;
              if (v182)
              {
                if (*(_DWORD *)v182 == 2)
                  WTF::StringImpl::destroy(v182, v76);
                else
                  *(_DWORD *)v182 -= 2;
              }
              v166 = 1;
              goto LABEL_277;
            }
            v157 = (unsigned int **)(a2 + 112);
            v239[0] = 0;
            v158 = *(_QWORD *)(a2 + 32);
            ++*(_DWORD *)(v158 + 8);
            v237 = (unsigned int *)v158;
            v159 = (WTF::StringImpl **)a3;
            v160 = 1;
          }
          WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v220, v157, (WTF::StringImpl **)&v228, v159, v239, v160, &v237);
          v73 = *(_DWORD **)v221;
          if (*(_QWORD *)v221)
            ++*(_DWORD *)(*(_QWORD *)v221 + 8);
          v74 = *(_QWORD *)&v221[8];
          v75 = *(_QWORD *)&v221[16];
          WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)&v220, v180);
          v181 = v237;
          v237 = 0;
          if (!v181)
            goto LABEL_273;
          goto LABEL_289;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;

  if (a2)
  {
    v6 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
      goto LABEL_13;
  }
  else
  {
    v6 = 0;
  }
  v7 = *a3;
  if (*a3)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 < 0 || (v9 = (v6 + v8), __OFADD__((_DWORD)v6, v8)))
    {
      *a4 = 0;
      goto LABEL_13;
    }
    v10 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
  }
  else
  {
    v10 = 1;
    v9 = v6;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, v10, a1, v6, v7, a4);
  if (!*a4)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1956DE72CLL);
  }
  return result;
}

__n128 WebCore::ScriptModuleLoader::notifyFinished(WebCore::ModuleScriptLoader &,WTF::URL &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_0::operator()(uint64_t a1, WTF::URL *this, uint64_t *a3, char a4, int a5)
{
  uint64_t v7;
  __n128 result;

  if (a5 != 6
    && (a4 & 1) == 0
    && (*((_BYTE *)this + 8) & 1) != 0
    && *(_QWORD *)this
    && *(_DWORD *)(*(_QWORD *)this + 4) > *((_DWORD *)this + 9))
  {
    WTF::URL::fragmentIdentifier(this);
    WTF::URL::setFragmentIdentifier();
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = v7;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 3);
  *((_DWORD *)a3 + 2) = result.n128_u32[0] & 0xFFFFFFFE;
  return result;
}

uint64_t WebCore::ScriptSourceCode::ScriptSourceCode(uint64_t a1, WebCore::CachedResource *a2, _QWORD *a3)
{
  _QWORD *v6;
  _DWORD *v7;
  int v8;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x90);
  v7 = WebCore::CachedScriptSourceProvider::CachedScriptSourceProvider(v6, a2, 3, a3);
  ++v7[2];
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = 0;
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = v8;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 32), a2);
  return a1;
}

uint64_t WebCore::WebAssemblyScriptSourceCode::WebAssemblyScriptSourceCode(uint64_t a1, WebCore::CachedResource *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::CachedResource *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  int v24;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  _DWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;

  v6 = WTF::fastMalloc((WTF *)0x98);
  v7 = (uint64_t *)*((_QWORD *)a2 + 50);
  if (!v7)
  {
    v8 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v8 != -1)
    {
      v31 = (WTF::StringImpl *)&v36;
      v35[0] = &v31;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v7 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v7, 1);
  v9 = (_DWORD *)*a3;
  *a3 = 0;
  v10 = (WTF::StringImpl *)*v7;
  if (*v7)
    *(_DWORD *)v10 += 2;
  v31 = v10;
  v11 = *(_OWORD *)(v7 + 3);
  v32 = *(_OWORD *)(v7 + 1);
  v33 = v11;
  v34 = v9;
  v12 = (uint64_t *)*((_QWORD *)a2 + 50);
  if (!v12)
  {
    v13 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v13 != -1)
    {
      v35[0] = &v30;
      v36 = v35;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v12 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v12, 1);
  v14 = (WTF::StringImpl *)*v12;
  if (*v12)
    *(_DWORD *)v14 += 2;
  v30 = v14;
  JSC::BaseWebAssemblySourceProvider::BaseWebAssemblySourceProvider();
  *(_QWORD *)(v6 + 120) = &unk_1E3393D30;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)v6 = off_1E3393CC0;
  v15 = *((_QWORD *)a2 + 1);
  if (v15)
    goto LABEL_46;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = a2;
  v27 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v15;
  if (!v27)
    goto LABEL_46;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v26);
  }
  v15 = *((_QWORD *)a2 + 1);
  if (v15)
  {
LABEL_46:
    do
      v16 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v16 + 1, (unsigned int *)v15));
    *(_QWORD *)(v6 + 136) = v15;
    v17 = *(_QWORD *)(v15 + 8);
    if (v17)
    {
      v36 = (_QWORD *)(v6 + 136);
      ++*(_DWORD *)(v17 + 548);
      v18 = *(_QWORD *)(v17 + 488);
      if (v18 && *(_QWORD *)(v18 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), (uint64_t *)&v36, (uint64_t)v35);
        v15 = *(_QWORD *)(v6 + 136);
        *(_QWORD *)(v6 + 144) = 0;
        if (!v15)
        {
          v19 = 0;
          goto LABEL_20;
        }
      }
      else
      {
        *(_QWORD *)(v6 + 144) = 0;
      }
      v19 = *(WebCore::CachedResource **)(v15 + 8);
      goto LABEL_20;
    }
    v19 = 0;
    *(_QWORD *)(v6 + 144) = 0;
  }
  else
  {
    v19 = 0;
    *(_QWORD *)(v6 + 136) = 0;
    *(_QWORD *)(v6 + 144) = 0;
  }
LABEL_20:
  if (WebCore::CachedResource::addClientToSet(v19, (WebCore::CachedResourceClient *)(v6 + 120)))
    (*(void (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v19 + 88))(v19, v6 + 120);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v34;
  v34 = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = v31;
  v31 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  *(_QWORD *)a1 = v6;
  ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = v24;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 32), a2);
  return a1;
}

uint64_t WebCore::WorkerModuleScriptLoader::referrerPolicy(WebCore::WorkerModuleScriptLoader *this)
{
  WebCore::WorkerModuleScriptLoader *v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;

  if (this)
  {
    v1 = this;
    v2 = *((_DWORD *)this + 4);
    this = (WebCore::WorkerModuleScriptLoader *)*((_QWORD *)this + 1);
    v3 = *((unsigned int *)v1 + 1) | ((unint64_t)((v2 >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0x100000000;
  }
  v4 = (unsigned __int16)WebCore::parseReferrerPolicy((unsigned __int16 *)this, v3, 1);
  if (v4 <= 0x100)
    LOBYTE(v4) = 0;
  return v4;
}

uint64_t WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::URL&>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t result;
  WTF::StringImpl *v22;
  uint64_t *v23;
  _DWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  WTF *v47;
  unsigned int v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;

  v8 = *(unsigned int *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8) || *(_BYTE *)(a2 + 20) && v8 <= 2 * (int)v7)
  {
    if ((_DWORD)v8)
      v9 = 2 * v8;
    else
      v9 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::URL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::URL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a2, v9);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  v10 = v8 - 1;
  v89 = *(_DWORD *)(a2 + 16);
  v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v12 = v11 >> 8;
  v13 = (v12 ^ v89) & v10;
  v14 = *(_QWORD *)a2;
  v15 = *(_QWORD *)a2 + 48 * v13;
  v16 = *(WTF **)v15;
  if (*(_QWORD *)v15)
  {
    v80 = a1;
    v81 = a4;
    v17 = 0;
    while (1)
    {
      v18 = *((_DWORD *)v16 + 4);
      v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(v16) : v18 >> 8;
      v20 = (v13 + v8 - ((v19 ^ v89) & v10)) & v10;
      if (v17 > v20)
        break;
      if (v19 == v12)
      {
        result = WTF::equal(*(WTF **)v15, *a3, (const WTF::StringImpl *)a3);
        v14 = *(_QWORD *)a2;
        if ((result & 1) != 0)
        {
          v61 = 0;
          a1 = v80;
          goto LABEL_68;
        }
      }
      else
      {
        v14 = *(_QWORD *)a2;
      }
      v13 = ((_DWORD)v13 + 1) & v10;
      ++v17;
      v15 = v14 + 48 * v13;
      v16 = *(WTF **)v15;
      if (!*(_QWORD *)v15)
      {
        if (v17 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        a1 = v80;
        a4 = v81;
        goto LABEL_25;
      }
    }
    if (v17 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v28 = *(WTF **)v15;
    *(_QWORD *)v15 = 0;
    v29 = v14 + 48 * v13;
    v32 = *(_QWORD *)(v29 + 8);
    v31 = v29 + 8;
    v30 = v32;
    v33 = *(_OWORD *)(v31 + 8);
    v34 = *(_OWORD *)(v31 + 24);
    *(_DWORD *)(v31 + 8) = v33 & 0xFFFFFFFE;
    *(_QWORD *)v31 = 0;
    v35 = *(WTF::StringImpl **)v15;
    *(_QWORD *)v15 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        v73 = v33;
        v78 = v34;
        v64 = v30;
        v65 = v28;
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
        v28 = v65;
        v30 = v64;
        v33 = v73;
        v34 = v78;
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)v15 = 0u;
    v36 = *a3;
    if (*a3)
      *(_DWORD *)v36 += 2;
    *(_QWORD *)v15 = v36;
    v37 = *(_DWORD **)v81;
    if (*(_QWORD *)v81)
      *v37 += 2;
    v38 = *(WTF::StringImpl **)v31;
    *(_QWORD *)v31 = v37;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        v74 = v33;
        v79 = v34;
        v66 = v30;
        v67 = v28;
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)a2);
        v28 = v67;
        v30 = v66;
        v33 = v74;
        v34 = v79;
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    v39 = *(_OWORD *)(v81 + 24);
    *(_OWORD *)(v31 + 8) = *(_OWORD *)(v81 + 8);
    *(_OWORD *)(v31 + 24) = v39;
    v40 = ((_DWORD)v13 + 1) & v10;
    v41 = *(_QWORD *)a2;
    v42 = (WTF **)(*(_QWORD *)a2 + 48 * v40);
    v43 = *v42;
    if (*v42)
    {
      do
      {
        v44 = *((_DWORD *)v43 + 4);
        if (v44 < 0x100)
        {
          v70 = v33;
          v75 = v34;
          v46 = v30;
          v47 = v28;
          v45 = WTF::StringImpl::hashSlowCase(v43);
          v28 = v47;
          v30 = v46;
          v33 = v70;
          v34 = v75;
        }
        else
        {
          v45 = v44 >> 8;
        }
        v48 = v20 + 1;
        v20 = (v40 + v8 - ((v45 ^ v89) & v10)) & v10;
        if (v48 <= v20)
        {
          v20 = v48;
          v25 = v33;
          v26 = v34;
        }
        else
        {
          v49 = *v42;
          *v42 = 0;
          v50 = v41 + 48 * v40;
          v53 = *(_QWORD *)(v50 + 8);
          v52 = v50 + 8;
          v51 = v53;
          *(_QWORD *)v52 = 0;
          v54 = (_OWORD *)(v52 + 8);
          v25 = *(_OWORD *)(v52 + 8);
          *(_DWORD *)(v52 + 8) = v25 & 0xFFFFFFFE;
          v55 = (_OWORD *)(v52 + 24);
          v26 = *(_OWORD *)(v52 + 24);
          v56 = *v42;
          *v42 = v28;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
            {
              v71 = v33;
              v76 = v34;
              v58 = v30;
              v82 = v26;
              v86 = v25;
              v68 = v51;
              v69 = v49;
              WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
              v51 = v68;
              v49 = v69;
              v26 = v82;
              v25 = v86;
              v30 = v58;
              v33 = v71;
              v34 = v76;
            }
            else
            {
              *(_DWORD *)v56 -= 2;
            }
          }
          v57 = *(WTF::StringImpl **)v52;
          *(_QWORD *)v52 = v30;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
            {
              v72 = v33;
              v77 = v34;
              v83 = v26;
              v87 = v25;
              v59 = v49;
              v60 = v51;
              WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
              v51 = v60;
              v49 = v59;
              v26 = v83;
              v25 = v87;
              v33 = v72;
              v34 = v77;
            }
            else
            {
              *(_DWORD *)v57 -= 2;
            }
          }
          *v54 = v33;
          *v55 = v34;
          v30 = v51;
          v28 = v49;
          v33 = v25;
          v34 = v26;
        }
        v40 = ((_DWORD)v40 + 1) & v10;
        v41 = *(_QWORD *)a2;
        v42 = (WTF **)(*(_QWORD *)a2 + 48 * v40);
        v43 = *v42;
      }
      while (*v42);
    }
    else
    {
      v25 = v33;
      v26 = v34;
    }
    *v42 = v28;
    v62 = v41 + 48 * v40;
    result = *(_QWORD *)(v62 + 8);
    *(_QWORD *)(v62 + 8) = v30;
    a1 = v80;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        v84 = v26;
        v88 = v25;
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        v26 = v84;
        v25 = v88;
      }
      else
      {
        *(_DWORD *)result -= 2;
      }
    }
    v27 = v41 + 48 * v40;
  }
  else
  {
LABEL_25:
    v22 = *a3;
    if (*a3)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)v15 = v22;
    v23 = (uint64_t *)(v14 + 48 * v13 + 8);
    v24 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v24 += 2;
    result = *v23;
    *v23 = (uint64_t)v24;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v25 = *(_OWORD *)(a4 + 8);
    v26 = *(_OWORD *)(a4 + 24);
    v27 = v14 + 48 * v13;
  }
  *(_OWORD *)(v27 + 16) = v25;
  *(_OWORD *)(v27 + 32) = v26;
  ++*(_DWORD *)(a2 + 12);
  v14 = *(_QWORD *)a2;
  v61 = 1;
LABEL_68:
  v63 = v14 + 48 * *(unsigned int *)(a2 + 8);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v63;
  *(_BYTE *)(a1 + 16) = v61;
  return result;
}

