uint64_t WebCore::JSCookieChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::CustomEvent,WebCore::CustomEvent>(WebCore::JSCustomEvent **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::JSCustomEvent *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *Allocator;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  WebCore::JSCustomEvent *v22;
  WebCore::JSCustomEvent *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSCustomEvent>(a1[7], (JSC::VM *)a1, a3);
  v7 = WebCore::JSCustomEvent::create(v6, (JSC::VM *)a1, a2);
  v8 = v7;
  v9 = a1[415];
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v10 = (_QWORD *)(v5 + 8);
  if (!v5)
    v10 = 0;
  if (*((_DWORD *)v9 + 12))
  {
    v14 = (uint64_t *)((char *)v9 + 32);
    v25 = v5;
    if (v7)
    {
      v21 = (uint64_t *)((char *)v9 + 32);
      v23 = v9;
      if ((v7 & 8) != 0)
        v18 = (v7 - 112) | 1;
      else
        v18 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v18 & 1) != 0)
        v19 = v18 + 47;
      else
        v19 = *(_QWORD *)v18 + 32;
      Allocator = *(_QWORD **)(v19 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v19 + 16) = *Allocator;
      *Allocator = v8;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v23;
      v14 = v21;
    }
    else
    {
      Allocator = 0;
    }
    v24 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v14, &v25, (uint64_t *)&v24);
    if (v24)
      v24[1] = 3;
  }
  else
  {
    if (v7)
    {
      v20 = v10;
      v22 = v9;
      if ((v7 & 8) != 0)
        v16 = (v7 - 112) | 1;
      else
        v16 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v16 & 1) != 0)
        v17 = v16 + 47;
      else
        v17 = *(_QWORD *)v16 + 32;
      v11 = *(_QWORD **)(v17 + 16);
      if (!v11)
        v11 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v17 + 16) = *v11;
      *v11 = v8;
      v11[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      v11[2] = v22;
      v10 = v20;
    }
    else
    {
      v11 = 0;
    }
    v12 = *v10;
    *v10 = v11;
    if (v12)
      *(_QWORD *)(v12 + 8) = 3;
  }
  return v8;
}

uint64_t WebCore::JSCustomEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSCustomEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSCustomEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSCustomEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDeviceMotionEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDeviceOrientationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDragEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDragEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDragEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDragEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDragEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableCookieChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSExtendableCookieChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSExtendableCookieChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSExtendableCookieChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableCookieChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSExtendableEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSExtendableEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSExtendableEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableMessageEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSExtendableMessageEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSExtendableMessageEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSExtendableMessageEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSExtendableMessageEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFetchEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSFetchEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSFetchEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSFetchEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFetchEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::FocusEvent,WebCore::FocusEvent>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSFocusEvent *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *Allocator;
  uint64_t v22;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSFocusEvent::s_info + ~((_QWORD)&WebCore::JSFocusEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFocusEvent::s_info + ~((_QWORD)&WebCore::JSFocusEvent::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSFocusEvent::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v24 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v24) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v24;
        if (v12 == &WebCore::JSFocusEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSFocusEvent *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSFocusEvent::createPrototype(v14, a1, a3);
  Structure = WebCore::JSFocusEvent::createStructure((uint64_t *)v14, (uint64_t)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSFocusEvent::s_info);
LABEL_5:
  v17 = WebCore::JSFocusEvent::create(v13, a1, a2);
  v18 = v17;
  v19 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v20 = (_QWORD *)(v5 + 8);
  if (!v5)
    v20 = 0;
  if (*(_DWORD *)(v19 + 48))
  {
    v29 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v28, v17, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner, v19);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v19 + 32), &v29, &v28);
    if (v28)
      *(_QWORD *)(v28 + 8) = 3;
  }
  else
  {
    if (v17)
    {
      v25 = v20;
      if ((v17 & 8) != 0)
        v26 = (v17 - 112) | 1;
      else
        v26 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v26 & 1) != 0)
        v27 = v26 + 47;
      else
        v27 = *(_QWORD *)v26 + 32;
      Allocator = *(_QWORD **)(v27 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v27 + 16) = *Allocator;
      *Allocator = v18;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v19;
      v20 = v25;
    }
    else
    {
      Allocator = 0;
    }
    v22 = *v20;
    *v20 = Allocator;
    if (v22)
      *(_QWORD *)(v22 + 8) = 3;
  }
  return v18;
}

uint64_t WebCore::JSFocusEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSFocusEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSFocusEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSFocusEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFocusEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFormDataEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSFormDataEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSFormDataEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSFormDataEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFormDataEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUUncapturedErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSGPUUncapturedErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSGPUUncapturedErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSGPUUncapturedErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUUncapturedErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGamepadEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSGamepadEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSGamepadEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSGamepadEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGamepadEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGestureEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::HashChangeEvent,WebCore::HashChangeEvent>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSHashChangeEvent *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *Allocator;
  uint64_t v22;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSHashChangeEvent::s_info + ~((_QWORD)&WebCore::JSHashChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSHashChangeEvent::s_info + ~((_QWORD)&WebCore::JSHashChangeEvent::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSHashChangeEvent::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v24 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v24) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v24;
        if (v12 == &WebCore::JSHashChangeEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSHashChangeEvent *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSHashChangeEvent::createPrototype(v14, a1, a3);
  Structure = WebCore::JSHashChangeEvent::createStructure((uint64_t *)v14, (uint64_t)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSHashChangeEvent::s_info);
LABEL_5:
  v17 = WebCore::JSHashChangeEvent::create(v13, a1, a2);
  v18 = v17;
  v19 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v20 = (_QWORD *)(v5 + 8);
  if (!v5)
    v20 = 0;
  if (*(_DWORD *)(v19 + 48))
  {
    v29 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v28, v17, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner, v19);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v19 + 32), &v29, &v28);
    if (v28)
      *(_QWORD *)(v28 + 8) = 3;
  }
  else
  {
    if (v17)
    {
      v25 = v20;
      if ((v17 & 8) != 0)
        v26 = (v17 - 112) | 1;
      else
        v26 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v26 & 1) != 0)
        v27 = v26 + 47;
      else
        v27 = *(_QWORD *)v26 + 32;
      Allocator = *(_QWORD **)(v27 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v27 + 16) = *Allocator;
      *Allocator = v18;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v19;
      v20 = v25;
    }
    else
    {
      Allocator = 0;
    }
    v22 = *v20;
    *v20 = Allocator;
    if (v22)
      *(_QWORD *)(v22 + 8) = 3;
  }
  return v18;
}

uint64_t WebCore::JSHashChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSHashChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSHashChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSHashChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHashChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSIDBVersionChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSIDBVersionChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSIDBVersionChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSIDBVersionChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSIDBVersionChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSInputEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSInputEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSInputEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSInputEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSInvokeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSInvokeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSInvokeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSInvokeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::KeyboardEvent,WebCore::KeyboardEvent>(WebCore::JSKeyboardEvent **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::JSKeyboardEvent *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *Allocator;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  WebCore::JSKeyboardEvent *v22;
  WebCore::JSKeyboardEvent *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSKeyboardEvent>(a1[7], (JSC::VM *)a1, a3);
  v7 = WebCore::JSKeyboardEvent::create(v6, (JSC::VM *)a1, a2);
  v8 = v7;
  v9 = a1[415];
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v10 = (_QWORD *)(v5 + 8);
  if (!v5)
    v10 = 0;
  if (*((_DWORD *)v9 + 12))
  {
    v14 = (uint64_t *)((char *)v9 + 32);
    v25 = v5;
    if (v7)
    {
      v21 = (uint64_t *)((char *)v9 + 32);
      v23 = v9;
      if ((v7 & 8) != 0)
        v18 = (v7 - 112) | 1;
      else
        v18 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v18 & 1) != 0)
        v19 = v18 + 47;
      else
        v19 = *(_QWORD *)v18 + 32;
      Allocator = *(_QWORD **)(v19 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v19 + 16) = *Allocator;
      *Allocator = v8;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v23;
      v14 = v21;
    }
    else
    {
      Allocator = 0;
    }
    v24 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v14, &v25, (uint64_t *)&v24);
    if (v24)
      v24[1] = 3;
  }
  else
  {
    if (v7)
    {
      v20 = v10;
      v22 = v9;
      if ((v7 & 8) != 0)
        v16 = (v7 - 112) | 1;
      else
        v16 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v16 & 1) != 0)
        v17 = v16 + 47;
      else
        v17 = *(_QWORD *)v16 + 32;
      v11 = *(_QWORD **)(v17 + 16);
      if (!v11)
        v11 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v17 + 16) = *v11;
      *v11 = v8;
      v11[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      v11[2] = v22;
      v10 = v20;
    }
    else
    {
      v11 = 0;
    }
    v12 = *v10;
    *v10 = v11;
    if (v12)
      *(_QWORD *)(v12 + 8) = 3;
  }
  return v8;
}

uint64_t WebCore::JSKeyboardEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSKeyboardEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSKeyboardEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSKeyboardEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSKeyboardEvent>(WebCore::JSKeyboardEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSKeyboardEvent::s_info + ~((_QWORD)&WebCore::JSKeyboardEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSKeyboardEvent::s_info + ~((_QWORD)&WebCore::JSKeyboardEvent::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSKeyboardEvent::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSKeyboardEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSKeyboardEvent::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 8431;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSKeyboardEvent::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSKeyboardEvent::s_info);
}

uint64_t WebCore::JSMediaEncryptedEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaEncryptedEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaEncryptedEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaEncryptedEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaEncryptedEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaKeyMessageEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaKeyMessageEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaKeyMessageEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaKeyMessageEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaKeyMessageEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaQueryListEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaQueryListEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaQueryListEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaQueryListEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaQueryListEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaRecorderErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaRecorderErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaRecorderErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaRecorderErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaRecorderErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamTrackEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaStreamTrackEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaStreamTrackEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaStreamTrackEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamTrackEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMerchantValidationEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMerchantValidationEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMerchantValidationEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMerchantValidationEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMerchantValidationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::MessageEvent,WebCore::MessageEvent>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSMessageEvent *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *Allocator;
  uint64_t v22;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSMessageEvent::s_info + ~((_QWORD)&WebCore::JSMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMessageEvent::s_info + ~((_QWORD)&WebCore::JSMessageEvent::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSMessageEvent::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v24 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v24) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v24;
        if (v12 == &WebCore::JSMessageEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSMessageEvent *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSMessageEvent::createPrototype(v14, a1, a3);
  Structure = WebCore::JSMessageEvent::createStructure((uint64_t *)v14, (uint64_t)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSMessageEvent::s_info);
LABEL_5:
  v17 = WebCore::JSMessageEvent::create(v13, a1, a2);
  v18 = v17;
  v19 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v20 = (_QWORD *)(v5 + 8);
  if (!v5)
    v20 = 0;
  if (*(_DWORD *)(v19 + 48))
  {
    v29 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v28, v17, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner, v19);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v19 + 32), &v29, &v28);
    if (v28)
      *(_QWORD *)(v28 + 8) = 3;
  }
  else
  {
    if (v17)
    {
      v25 = v20;
      if ((v17 & 8) != 0)
        v26 = (v17 - 112) | 1;
      else
        v26 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v26 & 1) != 0)
        v27 = v26 + 47;
      else
        v27 = *(_QWORD *)v26 + 32;
      Allocator = *(_QWORD **)(v27 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v27 + 16) = *Allocator;
      *Allocator = v18;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v19;
      v20 = v25;
    }
    else
    {
      Allocator = 0;
    }
    v22 = *v20;
    *v20 = Allocator;
    if (v22)
      *(_QWORD *)(v22 + 8) = 3;
  }
  return v18;
}

unint64_t WebCore::JSMessageEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMessageEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  WebCore::MessageEvent **v9;
  unint64_t v11;

  v5 = (WebCore::JSMessageEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMessageEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase >= v6[4])
  {
    SlowCase = v6[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v11);
    v6[5] = SlowCase + (int)v11;
  }
  v6[3] = SlowCase + 32;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = (WebCore::MessageEvent **)WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(SlowCase + 24) = v8;
  WebCore::JSMessageEvent::finishCreation(v9, v5);
  return SlowCase;
}

uint64_t WebCore::JSMessageEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::MouseEvent,WebCore::MouseEvent>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  WebCore::JSMouseEvent *v14;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *Allocator;
  uint64_t v22;
  int v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSMouseEvent::s_info + ~((_QWORD)&WebCore::JSMouseEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMouseEvent::s_info + ~((_QWORD)&WebCore::JSMouseEvent::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSMouseEvent::s_info)
    {
LABEL_3:
      v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      v24 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v24) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v24;
        if (v12 == &WebCore::JSMouseEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (WebCore::JSMouseEvent *)*((_QWORD *)a1 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSMouseEvent::createPrototype(v14, a1, a3);
  Structure = WebCore::JSMouseEvent::createStructure((uint64_t *)v14, (uint64_t)a1, Prototype);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, Structure, (uint64_t)&WebCore::JSMouseEvent::s_info);
LABEL_5:
  v17 = WebCore::JSMouseEvent::create(v13, a1, a2);
  v18 = v17;
  v19 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  if (v5)
    v20 = (uint64_t *)(v5 + 8);
  else
    v20 = 0;
  if (!*(_DWORD *)(v19 + 48))
  {
    if (v17)
    {
      v27 = v19;
      if ((v17 & 8) != 0)
        v28 = (v17 - 112) | 1;
      else
        v28 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v28 & 1) != 0)
        v29 = v28 + 47;
      else
        v29 = *(_QWORD *)v28 + 32;
      Allocator = *(_QWORD **)(v29 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v29 + 16) = *Allocator;
      *Allocator = v18;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v27;
    }
    else
    {
      Allocator = 0;
    }
    v22 = *v20;
    *v20 = (uint64_t)Allocator;
    if (!v22)
      return v18;
LABEL_22:
    *(_QWORD *)(v22 + 8) = 3;
    return v18;
  }
  v25 = (uint64_t *)(v19 + 32);
  v34 = v5;
  if (v17)
  {
    v30 = v19;
    if ((v17 & 8) != 0)
      v31 = (v17 - 112) | 1;
    else
      v31 = v17 & 0xFFFFFFFFFFFFC000;
    if ((v31 & 1) != 0)
      v32 = v31 + 47;
    else
      v32 = *(_QWORD *)v31 + 32;
    v26 = *(_QWORD **)(v32 + 16);
    if (!v26)
      v26 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v32 + 16) = *v26;
    *v26 = v18;
    v26[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
    v26[2] = v30;
  }
  else
  {
    v26 = 0;
  }
  v33 = v26;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v25, &v34, (uint64_t *)&v33);
  v22 = (uint64_t)v33;
  if (v33)
    goto LABEL_22;
  return v18;
}

uint64_t WebCore::JSMouseEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMouseEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMouseEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMouseEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMouseEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMutationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNavigateEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSNavigateEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSNavigateEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSNavigateEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNavigateEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNavigationCurrentEntryChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSNavigationCurrentEntryChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSNavigationCurrentEntryChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSNavigationCurrentEntryChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNavigationCurrentEntryChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNotificationEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSNotificationEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSNotificationEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSNotificationEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNotificationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSOfflineAudioCompletionEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSOfflineAudioCompletionEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSOfflineAudioCompletionEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSOfflineAudioCompletionEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSOfflineAudioCompletionEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSOverconstrainedErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSOverconstrainedErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSOverconstrainedErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSOverconstrainedErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSOverconstrainedErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSOverflowEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSOverflowEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSOverflowEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSOverflowEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSOverflowEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::PageTransitionEvent,WebCore::PageTransitionEvent>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSPageTransitionEvent>(*(WebCore::JSPageTransitionEvent **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSPageTransitionEvent::create(v5, a1, a2);
  WebCore::cacheWrapper<WebCore::BeforeUnloadEvent,WebCore::JSBeforeUnloadEvent>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSPageTransitionEvent::create(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::JSPageTransitionEvent *v6;
  unint64_t v7;
  uint64_t result;

  v6 = *(WebCore::JSPageTransitionEvent **)(a2 + 56);
  v7 = JSC::allocateCell<WebCore::JSPageTransitionEvent>(v6, (JSC::VM *)0x20);
  result = WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(v7, a1, a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSPageTransitionEvent>(WebCore::JSPageTransitionEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSPageTransitionEvent::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSPageTransitionEvent::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSPageTransitionEvent::s_info);
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSPageTransitionEvent>(WebCore::JSPageTransitionEvent *a1, JSC::VM *a2)
{
  _QWORD *v3;
  unint64_t result;
  unint64_t v5;

  v3 = (_QWORD *)WebCore::JSPageTransitionEvent::subspaceForImpl(a1, a2);
  result = v3[3];
  if (result >= v3[4])
  {
    result = v3[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v5 = *(_QWORD *)(result + 8) ^ v3[6];
    v3[4] = result + HIDWORD(v5);
    v3[5] = result + (int)v5;
  }
  v3[3] = result + (((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSPaymentMethodChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPaymentMethodChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPaymentMethodChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPaymentMethodChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPaymentMethodChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPaymentRequestUpdateEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPaymentRequestUpdateEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPaymentRequestUpdateEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPaymentRequestUpdateEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPaymentRequestUpdateEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPictureInPictureEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPictureInPictureEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPictureInPictureEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPictureInPictureEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPictureInPictureEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPointerEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPointerEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPointerEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPointerEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPointerEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPopStateEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPopStateEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPopStateEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPopStateEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPopStateEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSProgressEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSProgressEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSProgressEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSProgressEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPromiseRejectionEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPromiseRejectionEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPromiseRejectionEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPromiseRejectionEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSPromiseRejectionEvent>(WebCore::JSPromiseRejectionEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSPromiseRejectionEvent::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSPromiseRejectionEvent::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSPromiseRejectionEvent::s_info);
  }
  return result;
}

uint64_t WebCore::JSPushEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPushEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPushEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPushEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushNotificationEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPushNotificationEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  v5 = (WebCore::JSPushNotificationEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPushNotificationEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v9;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::PushNotificationEvent,WebCore::JSPushNotificationEvent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PushNotificationEvent *)::owner = (uint64_t)&unk_1E32D4E40;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PushNotificationEvent *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::PushNotificationEvent *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSPushNotificationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSPushSubscriptionChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSPushSubscriptionChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSPushSubscriptionChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCDTMFToneChangeEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCDTMFToneChangeEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCDTMFToneChangeEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCDTMFToneChangeEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCDTMFToneChangeEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCDataChannelEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCDataChannelEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCDataChannelEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCDataChannelEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCDataChannelEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCPeerConnectionIceErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCPeerConnectionIceErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCPeerConnectionIceErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCPeerConnectionIceErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCPeerConnectionIceErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCPeerConnectionIceEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCPeerConnectionIceEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCPeerConnectionIceEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCPeerConnectionIceEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCPeerConnectionIceEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransformErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCRtpSFrameTransformErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCRtpSFrameTransformErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCRtpSFrameTransformErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransformErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCTrackEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCTrackEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCTrackEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCTrackEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCTrackEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCTransformEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSRTCTransformEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSRTCTransformEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSRTCTransformEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCTransformEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSecurityPolicyViolationEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSecurityPolicyViolationEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSSecurityPolicyViolationEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSecurityPolicyViolationEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSecurityPolicyViolationEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSpeechRecognitionErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSSpeechRecognitionErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSpeechRecognitionErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSpeechRecognitionEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSSpeechRecognitionEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSpeechRecognitionEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechRecognitionEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisErrorEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSpeechSynthesisErrorEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSSpeechSynthesisErrorEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSpeechSynthesisErrorEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisErrorEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSpeechSynthesisEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSSpeechSynthesisEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSpeechSynthesisEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStorageEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSStorageEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSStorageEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSStorageEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSStorageEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSubmitEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSSubmitEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSSubmitEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSSubmitEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSubmitEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTextEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSToggleEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSToggleEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSToggleEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSToggleEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSToggleEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTouchEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSTouchEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSTouchEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSTouchEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTouchEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTrackEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSTrackEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSTrackEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSTrackEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSTrackEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSUIEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSUIEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSUIEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSUIEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSUIEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLContextEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSWebGLContextEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSWebGLContextEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSWebGLContextEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLContextEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyMessageEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSWebKitMediaKeyMessageEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSWebKitMediaKeyMessageEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSWebKitMediaKeyMessageEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyMessageEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyNeededEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSWebKitMediaKeyNeededEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSWebKitMediaKeyNeededEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSWebKitMediaKeyNeededEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyNeededEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebKitPlaybackTargetAvailabilityEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSWebKitPlaybackTargetAvailabilityEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSWebKitPlaybackTargetAvailabilityEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSWebKitPlaybackTargetAvailabilityEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebKitPlaybackTargetAvailabilityEvent::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::WheelEvent,WebCore::WheelEvent>(WebCore::JSWheelEvent **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *Allocator;
  uint64_t v12;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSWheelEvent>(a1[7], (JSC::VM *)a1, a3);
  v7 = WebCore::JSWheelEvent::create(v6, (JSC::VM *)a1, a2);
  v8 = v7;
  v9 = (uint64_t)a1[415];
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner = (uint64_t)&off_1E3276530;
  }
  v10 = (_QWORD *)(v5 + 8);
  if (!v5)
    v10 = 0;
  if (*(_DWORD *)(v9 + 48))
  {
    v14 = (uint64_t *)(v9 + 32);
    v20 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v19, v7, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner, v9);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v14, &v20, &v19);
    if (v19)
      *(_QWORD *)(v19 + 8) = 3;
  }
  else
  {
    if (v7)
    {
      v17 = v9;
      v18 = v10;
      if ((v7 & 8) != 0)
        v15 = (v7 - 112) | 1;
      else
        v15 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v15 & 1) != 0)
        v16 = v15 + 47;
      else
        v16 = *(_QWORD *)v15 + 32;
      Allocator = *(_QWORD **)(v16 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v16 + 16) = *Allocator;
      *Allocator = v8;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Event *)::owner;
      Allocator[2] = v17;
      v10 = v18;
    }
    else
    {
      Allocator = 0;
    }
    v12 = *v10;
    *v10 = Allocator;
    if (v12)
      *(_QWORD *)(v12 + 8) = 3;
  }
  return v8;
}

uint64_t WebCore::JSWheelEvent::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSWheelEvent *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSWheelEvent *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSWheelEvent::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSWheelEvent>(WebCore::JSWheelEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWheelEvent::s_info + ~((_QWORD)&WebCore::JSWheelEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWheelEvent::s_info + ~((_QWORD)&WebCore::JSWheelEvent::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWheelEvent::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSWheelEvent::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSWheelEvent::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 8431;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSWheelEvent::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSWheelEvent::s_info);
}

uint64_t WebCore::createWrapper<WebCore::XMLHttpRequestProgressEvent,WebCore::XMLHttpRequestProgressEvent>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSXMLHttpRequestProgressEvent>(*(WebCore::JSXMLHttpRequestProgressEvent **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSXMLHttpRequestProgressEvent::create(v5, (JSC::VM *)a1, (uint64_t)a2);
  WebCore::cacheWrapper<WebCore::BeforeUnloadEvent,WebCore::JSBeforeUnloadEvent>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::JSXMLHttpRequestProgressEvent::create(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  WebCore::JSXMLHttpRequestProgressEvent *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSXMLHttpRequestProgressEvent *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSXMLHttpRequestProgressEvent>(v6, a2);
  result = WebCore::JSXMLHttpRequestProgressEvent::JSXMLHttpRequestProgressEvent(v7, a1, a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSXMLHttpRequestProgressEvent>(WebCore::JSXMLHttpRequestProgressEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSXMLHttpRequestProgressEvent::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSXMLHttpRequestProgressEvent::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSXMLHttpRequestProgressEvent::s_info);
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSXMLHttpRequestProgressEvent>(WebCore::JSXMLHttpRequestProgressEvent *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSXMLHttpRequestProgressEvent::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v32;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity(a1, a3);
  if (a3)
  {
    v6 = &a2[4 * a3];
    do
    {
      v7 = *(_DWORD *)(a1 + 8);
      v8 = *(unsigned int *)(a1 + 12);
      if (20 * v8 >= 19 * (unint64_t)v7 || *(_BYTE *)(a1 + 20) && v7 <= 2 * (int)v8)
      {
        if (v7)
          v32 = 2 * v7;
        else
          v32 = 8;
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v32);
        v7 = *(_DWORD *)(a1 + 8);
      }
      v9 = v7 - 1;
      v10 = *(_DWORD *)(a1 + 16);
      v11 = *(_DWORD **)a2;
      v12 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      v13 = (v10 ^ (v12 >> 8)) & (v7 - 1);
      v14 = *(_QWORD *)a1;
      v15 = (_QWORD *)(*(_QWORD *)a1 + 16 * v13);
      v16 = (_DWORD *)*v15;
      if (*v15)
      {
        v17 = 0;
        v18 = v12 >> 8;
        v19 = v16[4] >> 8;
        while (v19 != v18 || v16 != v11)
        {
          v13 = ((_DWORD)v13 + 1) & v9;
          ++v17;
          v16 = *(_DWORD **)(v14 + 16 * v13);
          if (!v16)
          {
            if (v17 >= 0x80)
              *(_BYTE *)(a1 + 20) = 1;
            v15 = (_QWORD *)(v14 + 16 * v13);
            if (v11)
              goto LABEL_6;
            goto LABEL_7;
          }
          v19 = v16[4] >> 8;
          v20 = (v13 + v7 - ((v10 ^ v19) & v9)) & v9;
          if (v17 > v20)
          {
            if (v17 >= 0x80)
              *(_BYTE *)(a1 + 20) = 1;
            v21 = v14 + 16 * v13;
            v22 = *(_DWORD *)(v21 + 8);
            *(_QWORD *)v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
            v23 = *(_DWORD **)a2;
            if (*(_QWORD *)a2)
              *v23 += 2;
            *(_QWORD *)v21 = v23;
            *(_DWORD *)(v21 + 8) = a2[2];
            v24 = ((_DWORD)v13 + 1) & v9;
            v25 = *(_QWORD *)a1;
            while (1)
            {
              v26 = (_QWORD *)(v25 + 16 * v24);
              v27 = (_DWORD *)*v26;
              if (!*v26)
                break;
              ++v20;
              v28 = (v24 + v7 - ((v10 ^ (v27[4] >> 8)) & v9)) & v9;
              if (v20 > v28)
              {
                *v26 = 0;
                v29 = v25 + 16 * v24;
                v30 = *(_DWORD *)(v29 + 8);
                *v26 = v16;
                *(_DWORD *)(v29 + 8) = v22;
                v25 = *(_QWORD *)a1;
                v22 = v30;
                v16 = v27;
                v20 = v28;
              }
              v24 = ((_DWORD)v24 + 1) & v9;
            }
            *v26 = v16;
            *(_DWORD *)(v25 + 16 * v24 + 8) = v22;
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_6:
        *v11 += 2;
LABEL_7:
        *v15 = v11;
        *(_DWORD *)(v14 + 16 * v13 + 8) = a2[2];
LABEL_8:
        ++*(_DWORD *)(a1 + 12);
      }
      a2 += 4;
    }
    while (a2 != v6);
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t Table;
  uint64_t result;

  v3 = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(a2);
  Table = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(v3);
  *(_QWORD *)a1 = Table;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(Table);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;

  result = WTF::fastMalloc((WTF *)(16 * a1));
  if (a1)
  {
    v3 = a1;
    v4 = (_DWORD *)(result + 8);
    do
    {
      *((_QWORD *)v4 - 1) = 0;
      *v4 = 0;
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(a2);
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v40 = a1;
    v37 = v4;
    v38 = v5;
    do
    {
      v13 = (WTF::StringImpl **)((char *)v5 + 16 * v12);
      v14 = *v13;
      if (*v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = v15 - 1;
        v17 = *((_DWORD *)v11 + 4);
        v18 = (v17 ^ (*((_DWORD *)v14 + 4) >> 8)) & (v15 - 1);
        v19 = *v11;
        v20 = (WTF::StringImpl **)(*v11 + 16 * v18);
        v21 = *v20;
        if (*v20)
        {
          v22 = 0;
          v39 = v12;
          v23 = (int *)((char *)v5 + 16 * v12 + 8);
          v41 = *((_DWORD *)v11 + 2);
          do
          {
            v24 = (v18 + v15 - ((v17 ^ (*((_DWORD *)v21 + 4) >> 8)) & v16)) & v16;
            if (v22 > v24)
            {
              v25 = *v13;
              *v13 = 0;
              v26 = *v23;
              v27 = *v20;
              *v20 = 0;
              v28 = *v13;
              *v13 = v27;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                {
                  WTF::StringImpl::destroy(v28, v7);
                  v15 = v41;
                  v11 = v40;
                }
                else
                {
                  *(_DWORD *)v28 -= 2;
                }
              }
              v29 = v19 + 16 * v18;
              v31 = *(_DWORD *)(v29 + 8);
              v30 = (_DWORD *)(v29 + 8);
              *v23 = v31;
              v32 = *v20;
              *v20 = v25;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::destroy(v32, v7);
                  v15 = v41;
                  v11 = v40;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              *v30 = v26;
              v19 = *v11;
              v22 = v24;
            }
            v18 = ((_DWORD)v18 + 1) & v16;
            ++v22;
            v20 = (WTF::StringImpl **)(v19 + 16 * v18);
            v21 = *v20;
          }
          while (*v20);
          v14 = *v13;
          v4 = v37;
          v5 = v38;
          v12 = v39;
        }
        *v13 = 0;
        v33 = *v20;
        *v20 = v14;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
          {
            v35 = v12;
            WTF::StringImpl::destroy(v33, v7);
            v12 = v35;
            v11 = v40;
          }
          else
          {
            *(_DWORD *)v33 -= 2;
          }
        }
        *(_DWORD *)(v19 + 16 * v18 + 8) = *((_DWORD *)v5 + 4 * v12 + 2);
        v34 = *v13;
        *v13 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            v36 = v12;
            WTF::StringImpl::destroy(v34, v7);
            v12 = v36;
            v11 = v40;
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v12;
    }
    while (v12 != v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

_QWORD *WebCore::Payment::Payment(_QWORD *this)
{
  *this = &off_1E321E4F8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E321E4F8;
  this[1] = 0;
  return this;
}

_QWORD *WebCore::Payment::Payment(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E321E4F8;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E321E4F8;
  result[1] = v2;
  return result;
}

void WebCore::Payment::~Payment(WebCore::Payment *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E4F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E4F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E4F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::Payment::toApplePayPayment@<X0>(WebCore::Payment *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  void *v5;
  WTF::StringImpl **v6;
  void *v7;
  const void *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  void *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  WTF::StringImpl *result;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  _QWORD v75[2];
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  _BYTE v79[152];
  WTF::StringImpl *v80;

  v5 = (void *)*((_QWORD *)this + 1);
  *(_BYTE *)(a3 + 20) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 216) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 392) = 0;
  v6 = (WTF::StringImpl **)(a3 + 400);
  *(_BYTE *)(a3 + 400) = 0;
  *(_BYTE *)(a3 + 544) = 0;
  *(_QWORD *)(a3 + 552) = 0;
  *(_QWORD *)(a3 + 232) = 0;
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 224) = 0;
  *(_BYTE *)(a3 + 248) = 0;
  v7 = (void *)objc_msgSend(v5, "token");
  BYTE4(v61) = 0;
  BYTE8(v61) = 0;
  LOBYTE(v64) = 0;
  LOBYTE(v65) = 0;
  v71 = 0;
  v60[0] = 0;
  v60[1] = 0;
  LOBYTE(v61) = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  v8 = (const void *)objc_msgSend(v7, "paymentMethod");
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v75[0] = &off_1E321E548;
  v75[1] = v9;
  WebCore::PaymentMethod::toApplePayPaymentMethod((WebCore::PaymentMethod *)v75, (uint64_t)&v76);
  WebCore::ApplePayPaymentMethod::operator=((uint64_t)v60, &v76);
  v11 = v80;
  v80 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v79[144])
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v79, v10);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78, v10);
  v13 = v77;
  v77 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v76;
  v76 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      if (!v9)
        goto LABEL_16;
      goto LABEL_15;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (v9)
LABEL_15:
    CFRelease(v9);
LABEL_16:
  if (objc_msgSend(v7, "transactionIdentifier"))
  {
    MEMORY[0x19AEA5508](&v76);
    v16 = v76;
    v76 = 0;
    v17 = v73;
    v73 = v16;
    if (v17)
    {
      v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        v17 = v76;
        v76 = 0;
        if (!v17)
          goto LABEL_20;
        v18 = *(_DWORD *)v17 - 2;
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, v57);
          goto LABEL_20;
        }
      }
      *(_DWORD *)v17 = v18;
    }
  }
LABEL_20:
  v19 = (void *)objc_msgSend(v7, "paymentData");
  v20 = v19;
  if (v19)
  {
    objc_msgSend(v19, "bytes");
    objc_msgSend(v20, "length");
    WTF::String::fromUTF8();
    v22 = v76;
    v76 = 0;
    v23 = v74;
    v74 = v22;
    if (v23)
    {
      v24 = *(_DWORD *)v23 - 2;
      if (*(_DWORD *)v23 != 2)
      {
LABEL_23:
        *(_DWORD *)v23 = v24;
        goto LABEL_24;
      }
      WTF::StringImpl::destroy(v23, v21);
      v23 = v76;
      v76 = 0;
      if (v23)
      {
        v24 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 != 2)
          goto LABEL_23;
        WTF::StringImpl::destroy(v23, v58);
      }
    }
  }
LABEL_24:
  WebCore::ApplePayPaymentMethod::operator=(a3, v60);
  v26 = v73;
  v73 = 0;
  v27 = *(WTF::StringImpl **)(a3 + 232);
  *(_QWORD *)(a3 + 232) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v74;
  v74 = 0;
  v29 = *(WTF::StringImpl **)(a3 + 240);
  *(_QWORD *)(a3 + 240) = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPayment::Token *)v60, v25);
  if (objc_msgSend(v5, "billingContact"))
  {
    v30 = (WTF::StringImpl *)objc_msgSend(v5, "billingContact");
    v31 = v30;
    if (v30)
      CFRetain(v30);
    v76 = (WTF::StringImpl *)&off_1E321E520;
    v77 = v31;
    WebCore::PaymentContact::toApplePayPaymentContact((WebCore::PaymentContact *)&v76, a2, (uint64_t)v60);
    if (*(_BYTE *)(a3 + 392))
    {
      WebCore::ApplePayPaymentContact::operator=((WTF::StringImpl **)(a3 + 248), v60);
    }
    else
    {
      v33 = v61;
      *(_OWORD *)(a3 + 248) = *(_OWORD *)v60;
      v34 = v62;
      v35 = v63;
      *(_OWORD *)(a3 + 264) = v33;
      *(_OWORD *)(a3 + 280) = v34;
      *(_OWORD *)v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      *(_OWORD *)(a3 + 296) = v35;
      *(_BYTE *)(a3 + 312) = 0;
      *(_BYTE *)(a3 + 328) = 0;
      if (v66)
      {
        *(_QWORD *)(a3 + 312) = v64;
        v36 = v65;
        v64 = 0;
        v65 = 0;
        *(_QWORD *)(a3 + 320) = v36;
        *(_BYTE *)(a3 + 328) = 1;
      }
      v37 = v67;
      v67 = 0uLL;
      v38 = v68;
      v68 = 0uLL;
      *(_OWORD *)(a3 + 336) = v37;
      *(_OWORD *)(a3 + 352) = v38;
      v39 = v69;
      v69 = 0uLL;
      *(_OWORD *)(a3 + 368) = v39;
      v40 = v70;
      v70 = 0;
      *(_QWORD *)(a3 + 384) = v40;
      *(_BYTE *)(a3 + 392) = 1;
    }
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v60, v32);
    if (v31)
      CFRelease(v31);
  }
  if (objc_msgSend(v5, "shippingContact", v60[0]))
  {
    v41 = (WTF::StringImpl *)objc_msgSend(v5, "shippingContact");
    v42 = v41;
    if (v41)
      CFRetain(v41);
    v76 = (WTF::StringImpl *)&off_1E321E520;
    v77 = v42;
    WebCore::PaymentContact::toApplePayPaymentContact((WebCore::PaymentContact *)&v76, a2, (uint64_t)v60);
    if (*(_BYTE *)(a3 + 544))
    {
      WebCore::ApplePayPaymentContact::operator=(v6, v60);
    }
    else
    {
      v44 = *(_OWORD *)v60;
      v45 = v61;
      *(_OWORD *)v60 = 0u;
      v61 = 0u;
      *(_OWORD *)(a3 + 400) = v44;
      *(_OWORD *)(a3 + 416) = v45;
      v46 = v62;
      v47 = v63;
      v62 = 0u;
      v63 = 0u;
      *(_OWORD *)(a3 + 432) = v46;
      *(_OWORD *)(a3 + 448) = v47;
      *(_BYTE *)(a3 + 464) = 0;
      *(_BYTE *)(a3 + 480) = 0;
      if (v66)
      {
        *(_QWORD *)(a3 + 464) = v64;
        v48 = v65;
        v64 = 0;
        v65 = 0;
        *(_QWORD *)(a3 + 472) = v48;
        *(_BYTE *)(a3 + 480) = 1;
      }
      v49 = v67;
      v67 = 0uLL;
      v50 = v68;
      v68 = 0uLL;
      *(_OWORD *)(a3 + 488) = v49;
      *(_OWORD *)(a3 + 504) = v50;
      v51 = v69;
      v69 = 0uLL;
      *(_OWORD *)(a3 + 520) = v51;
      v52 = v70;
      v70 = 0;
      *(_QWORD *)(a3 + 536) = v52;
      *(_BYTE *)(a3 + 544) = 1;
    }
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v60, v43);
    if (v42)
      CFRelease(v42);
  }
  result = (WTF::StringImpl *)objc_msgSend(v5, "installmentAuthorizationToken", v60[0], v60[1], v61, v62, v63, v64, v65);
  if (result)
  {
    MEMORY[0x19AEA5508](v60);
    v55 = v60[0];
    v60[0] = 0;
    result = *(WTF::StringImpl **)(a3 + 552);
    *(_QWORD *)(a3 + 552) = v55;
    if (result)
    {
      v56 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_53:
        *(_DWORD *)result = v56;
        return result;
      }
      WTF::StringImpl::destroy(result, v54);
      result = v60[0];
      v60[0] = 0;
      if (result)
      {
        v56 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
        goto LABEL_53;
      }
    }
  }
  return result;
}

void sub_19482EE74(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  WebCore::ApplePayPaymentContact *v10;
  const void *v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&a9, a2);
  if (v11)
    CFRelease(v11);
  v14 = *(WTF::StringImpl **)(v9 + 552);
  *(_QWORD *)(v9 + 552) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*(_BYTE *)(v9 + 544))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact(v10, v13);
  if (*(_BYTE *)(v9 + 392))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(v9 + 248), v13);
  WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPayment::Token *)v9, v13);
  _Unwind_Resume(a1);
}

CFTypeRef WebCore::Payment::pkPayment@<X0>(WebCore::Payment *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 1);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

_QWORD *WebCore::PaymentContact::PaymentContact(_QWORD *this)
{
  *this = &off_1E321E520;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E321E520;
  this[1] = 0;
  return this;
}

_QWORD *WebCore::PaymentContact::PaymentContact(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E321E520;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E321E520;
  result[1] = v2;
  return result;
}

void WebCore::PaymentContact::~PaymentContact(WebCore::PaymentContact *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E520;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E520;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E520;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::PaymentContact::fromApplePayPaymentContact(PAL *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  const __CFString *v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  const __CFString *i;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  char v48;
  char v49;

  v4 = a1;
  v6 = (void *)objc_msgSend(objc_alloc((Class)PAL::getPKContactClass(a1)), "init");
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 && *(_DWORD *)(v7 + 4))
  {
    v8 = WTF::StringImpl::operator NSString *();
    if (v4 >= 3)
    {
      v42 = *(_QWORD *)(a2 + 48);
      if (v42)
      {
        if (*(_DWORD *)(v42 + 4))
        {
          v9 = WTF::StringImpl::operator NSString *();
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
LABEL_4:
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    v11 = WTF::StringImpl::operator NSString *();
    if (v4 >= 3)
    {
      v43 = *(_QWORD *)(a2 + 40);
      if (v43)
      {
        if (*(_DWORD *)(v43 + 4))
        {
          v12 = WTF::StringImpl::operator NSString *();
          goto LABEL_7;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_7:
  if (v8 | v11)
  {
    v13 = objc_alloc_init(MEMORY[0x1E0CB3850]);
    objc_msgSend(v13, "setFamilyName:", v8);
    objc_msgSend(v13, "setGivenName:", v11);
    if (v9 | v12)
    {
      v8 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3850]);
      objc_msgSend((id)v8, "setFamilyName:", v9);
      objc_msgSend((id)v8, "setGivenName:", v12);
      objc_msgSend(v13, "setPhoneticRepresentation:", v8);
      if (v8)
        CFRelease((CFTypeRef)v8);
    }
    objc_msgSend(v6, "setName:", v13);
    if (v13)
      CFRelease(v13);
  }
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 && *(_DWORD *)(v14 + 4))
    objc_msgSend(v6, "setEmailAddress:", WTF::StringImpl::operator NSString *());
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    goto LABEL_15;
  v8 = (uint64_t)objc_alloc((Class)_MergedGlobals_8());
  if (!*(_QWORD *)a2)
    goto LABEL_114;
  for (i = (const __CFString *)WTF::StringImpl::operator NSString *(); ; i = &stru_1E3487BC0)
  {
    v8 = objc_msgSend((id)v8, "initWithStringValue:", i, v45);
    objc_msgSend(v6, "setPhoneNumber:", v8);
    if (v8)
      CFRelease((CFTypeRef)v8);
LABEL_15:
    if (!*(_BYTE *)(a2 + 80) || !*(_DWORD *)(a2 + 76))
      goto LABEL_75;
    v15 = objc_msgSend(objc_alloc((Class)off_1ECE76AB0()), "init");
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 1;
    if (*(_BYTE *)(a2 + 80))
      break;
LABEL_113:
    __break(1u);
LABEL_114:
    ;
  }
  v8 = v15;
  v17 = 0;
  while (v17 < *(unsigned int *)(a2 + 76))
  {
    v18 = *(_QWORD *)(a2 + 64);
    v19 = *(WTF::StringImpl **)(v18 + 8 * v17);
    if (v47)
      v20 = 0;
    else
      v20 = v46 == 0;
    if (v20)
    {
      if (v19)
        *(_DWORD *)v19 += 2;
      v21 = v45;
      v45 = v19;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v16);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(_QWORD *)(v18 + 8 * v17);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 4);
      v47 = v22;
    }
    else if (v19 && (*((_BYTE *)v19 + 16) & 4) == 0)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if (*(_BYTE *)(a2 + 80))
    {
      if (v17 == *(unsigned int *)(a2 + 76) - 1)
      {
        v23 = 1;
      }
      else
      {
        v49 = 10;
        if (v46 && ((v24 = v47, v47 < *((_DWORD *)v46 + 1)) ? (v25 = v45 == 0) : (v25 = 0), v25))
        {
          v26 = *((_DWORD *)v46 + 4);
          v27 = *((_QWORD *)v46 + 1);
          ++v47;
          if ((v26 & 4) != 0)
            *(_BYTE *)(v27 + v24) = 10;
          else
            *(_WORD *)(v27 + 2 * v24) = 10;
        }
        else
        {
          WTF::StringBuilder::append();
        }
        v23 = *(unsigned __int8 *)(a2 + 80);
      }
      ++v17;
      if (v23)
        continue;
    }
    goto LABEL_113;
  }
  v28 = v45;
  if (v45
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v45),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v45),
        (v28 = v45) != 0))
  {
    *(_DWORD *)v28 += 2;
    v29 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v30 = 0;
  }
  else
  {
    v29 = &stru_1E3487BC0;
    v30 = 1;
  }
  objc_msgSend((id)v8, "setStreet:", v29, v45);
  if ((v30 & 1) == 0)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v31);
    else
      *(_DWORD *)v28 -= 2;
  }
  v32 = *(_QWORD *)(a2 + 88);
  if (v32 && *(_DWORD *)(v32 + 4))
    objc_msgSend((id)v8, "setSubLocality:", WTF::StringImpl::operator NSString *());
  v33 = *(_QWORD *)(a2 + 96);
  if (v33 && *(_DWORD *)(v33 + 4))
    objc_msgSend((id)v8, "setCity:", WTF::StringImpl::operator NSString *());
  v34 = *(_QWORD *)(a2 + 104);
  if (v34 && *(_DWORD *)(v34 + 4))
    objc_msgSend((id)v8, "setPostalCode:", WTF::StringImpl::operator NSString *());
  v35 = *(_QWORD *)(a2 + 112);
  if (v35 && *(_DWORD *)(v35 + 4))
    objc_msgSend((id)v8, "setSubAdministrativeArea:", WTF::StringImpl::operator NSString *());
  v36 = *(_QWORD *)(a2 + 120);
  if (v36 && *(_DWORD *)(v36 + 4))
    objc_msgSend((id)v8, "setState:", WTF::StringImpl::operator NSString *());
  v37 = *(_QWORD *)(a2 + 128);
  if (v37 && *(_DWORD *)(v37 + 4))
    objc_msgSend((id)v8, "setCountry:", WTF::StringImpl::operator NSString *());
  v38 = *(_QWORD *)(a2 + 136);
  if (v38 && *(_DWORD *)(v38 + 4))
    objc_msgSend((id)v8, "setISOCountryCode:", WTF::StringImpl::operator NSString *());
  objc_msgSend(v6, "setPostalAddress:", v8);
  v40 = v46;
  v46 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v45;
  v45 = 0;
  if (!v41)
    goto LABEL_73;
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
LABEL_73:
    if (!v8)
      goto LABEL_75;
    goto LABEL_74;
  }
  WTF::StringImpl::destroy(v41, v39);
  if (v8)
LABEL_74:
    CFRelease((CFTypeRef)v8);
LABEL_75:
  if (v6)
  {
    CFRetain(v6);
    *a3 = &off_1E321E520;
    a3[1] = v6;
    CFRelease(v6);
  }
  else
  {
    *a3 = &off_1E321E520;
    a3[1] = 0;
  }
}

void sub_19482F668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PaymentContact::toApplePayPaymentContact@<X0>(WebCore::PaymentContact *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (void *)*((_QWORD *)this + 1);
  *(_BYTE *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  v6 = (_QWORD *)(a3 + 88);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_BYTE *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  MEMORY[0x19AEA5508](&v15, objc_msgSend((id)objc_msgSend(v5, "phoneNumber"), "stringValue"));
  *(_QWORD *)a3 = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v5, "emailAddress"));
  *(_QWORD *)(a3 + 8) = v15;
  v7 = (void *)objc_msgSend(v5, "name");
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v7, "givenName"));
  *(_QWORD *)(a3 + 16) = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v7, "familyName"));
  *(_QWORD *)(a3 + 24) = v15;
  if (v7)
  {
    MEMORY[0x19AEA5508](&v15, objc_msgSend(MEMORY[0x1E0CB3858], "localizedStringFromPersonNameComponents:style:options:", v7, 0, 0));
    *(_QWORD *)(a3 + 32) = v15;
  }
  if (a2 >= 3)
  {
    v8 = (void *)objc_msgSend(v7, "phoneticRepresentation");
    MEMORY[0x19AEA5508](&v15, objc_msgSend(v8, "givenName"));
    *(_QWORD *)(a3 + 40) = v15;
    MEMORY[0x19AEA5508](&v15, objc_msgSend(v8, "familyName"));
    *(_QWORD *)(a3 + 48) = v15;
    if (v8)
    {
      MEMORY[0x19AEA5508](&v15, objc_msgSend(MEMORY[0x1E0CB3858], "localizedStringFromPersonNameComponents:style:options:", v7, 0, 2));
      *(_QWORD *)(a3 + 56) = v15;
    }
  }
  v9 = (void *)objc_msgSend(v5, "postalAddress");
  if (objc_msgSend((id)objc_msgSend(v9, "street"), "length"))
  {
    MEMORY[0x19AEA5508](&v14, objc_msgSend(v9, "street"));
    WTF::String::split();
    v11 = v14;
    *(_QWORD *)(a3 + 64) = v15;
    v12 = v16;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(a3 + 72) = v12;
    *(_BYTE *)(a3 + 80) = 1;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "subLocality"));
  *v6 = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "city"));
  *(_QWORD *)(a3 + 96) = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "postalCode"));
  *(_QWORD *)(a3 + 104) = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "subAdministrativeArea"));
  *(_QWORD *)(a3 + 112) = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "state"));
  *(_QWORD *)(a3 + 120) = v15;
  MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "country"));
  *(_QWORD *)(a3 + 128) = v15;
  result = MEMORY[0x19AEA5508](&v15, objc_msgSend(v9, "ISOCountryCode"));
  *(_QWORD *)(a3 + 136) = v15;
  return result;
}

void sub_19482FA28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WebCore::ApplePayPaymentContact *v10;

  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact(v10, a2);
  _Unwind_Resume(a1);
}

CFTypeRef WebCore::PaymentContact::pkContact@<X0>(WebCore::PaymentContact *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 1);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::PaymentMerchantSession::fromJS@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t isKindOfClass;
  const void *v5;
  const void *v6;
  uint64_t result;
  WTF::StringImpl *v8;

  JSC::JSONStringify();
  if (v8
    && (v3 = objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", objc_msgSend((id)WTF::StringImpl::operator NSString *(), "dataUsingEncoding:", 4), 0, 0), objc_opt_class(), (objc_opt_isKindOfClass() & (v3 != 0)) == 1)&& (objc_opt_class(), isKindOfClass = objc_opt_isKindOfClass(), (isKindOfClass & 1) != 0))
  {
    v5 = (const void *)objc_msgSend(objc_alloc((Class)PAL::getPKPaymentMerchantSessionClass[0]((PAL *)isKindOfClass)), "initWithDictionary:", v3);
    v6 = v5;
    if (v5)
    {
      CFRetain(v5);
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 8) = 1;
      CFRelease(v6);
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

void sub_19482FBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WebCore::PaymentMethod::PaymentMethod(_QWORD *this)
{
  *this = &off_1E321E548;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E321E548;
  this[1] = 0;
  return this;
}

_QWORD *WebCore::PaymentMethod::PaymentMethod(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E321E548;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E321E548;
  result[1] = v2;
  return result;
}

void WebCore::PaymentMethod::~PaymentMethod(WebCore::PaymentMethod *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E548;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E548;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E321E548;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::PaymentMethod::toApplePayPaymentMethod@<X0>(WebCore::PaymentMethod *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  void *v13;
  WTF::StringImpl *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  void *v42;
  WTF::StringImpl *v43;
  void *v44;
  WTF *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  WTF::StringImpl *v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  WTF::StringImpl *v99;
  void *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  __int128 v116;
  WTF::StringImpl *result;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139[2];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  WTF *v143;
  uint64_t v144;
  char v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  WTF::StringImpl *v149;
  unsigned __int8 v150;
  WTF::StringImpl *v151[2];
  WTF::StringImpl *v152[2];
  WTF::StringImpl *v153[2];
  WTF::StringImpl *v154[2];
  WTF *v155;
  uint64_t v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  WTF::StringImpl *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v3 = (void *)*((_QWORD *)this + 1);
  *(_BYTE *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v4 = (WTF::StringImpl **)(a2 + 24);
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (objc_msgSend(v3, "displayName"))
  {
    MEMORY[0x19AEA5508](v139);
    v6 = v139[0];
    v139[0] = 0;
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v6;
    if (v7)
    {
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        v7 = v139[0];
        v139[0] = 0;
        if (!v7)
          goto LABEL_5;
        v8 = *(_DWORD *)v7 - 2;
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v121);
          goto LABEL_5;
        }
      }
      *(_DWORD *)v7 = v8;
    }
  }
LABEL_5:
  if (objc_msgSend(v3, "network", v139[0]))
  {
    MEMORY[0x19AEA5508](v139);
    v10 = v139[0];
    v139[0] = 0;
    v11 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    if (v11)
    {
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 != 2)
      {
LABEL_8:
        *(_DWORD *)v11 = v12;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy(v11, v9);
      v11 = v139[0];
      v139[0] = 0;
      if (v11)
      {
        v12 = *(_DWORD *)v11 - 2;
        if (*(_DWORD *)v11 != 2)
          goto LABEL_8;
        WTF::StringImpl::destroy(v11, v122);
      }
    }
  }
LABEL_9:
  v13 = (void *)objc_msgSend(v3, "billingAddress", v139[0]);
  v15 = v13;
  if (!v13)
  {
    v50 = 0;
    LOBYTE(v139[0]) = 0;
    v150 = 0;
    goto LABEL_68;
  }
  v157 = 0;
  *(_OWORD *)v151 = 0u;
  *(_OWORD *)v152 = 0u;
  *(_OWORD *)v153 = 0u;
  *(_OWORD *)v154 = 0u;
  LOBYTE(v155) = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0;
  v16 = (void *)objc_msgSend((id)objc_msgSend(v13, "phoneNumbers"), "firstObject");
  if (v16)
  {
    MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v16, "value"), "stringValue"));
    v18 = (WTF::StringImpl *)v162[0];
    v162[0] = 0;
    v19 = v151[0];
    v151[0] = v18;
    if (v19)
    {
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v17);
        v19 = (WTF::StringImpl *)v162[0];
        v162[0] = 0;
        if (!v19)
          goto LABEL_14;
        v20 = *(_DWORD *)v19 - 2;
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v128);
          goto LABEL_14;
        }
      }
      *(_DWORD *)v19 = v20;
    }
  }
LABEL_14:
  v21 = (void *)objc_msgSend((id)objc_msgSend(v15, "emailAddresses"), "firstObject");
  if (v21)
  {
    MEMORY[0x19AEA5508](v162, objc_msgSend(v21, "value"));
    v23 = (WTF::StringImpl *)v162[0];
    v162[0] = 0;
    v24 = v151[1];
    v151[1] = v23;
    if (v24)
    {
      v25 = *(_DWORD *)v24 - 2;
      if (*(_DWORD *)v24 != 2)
      {
LABEL_17:
        *(_DWORD *)v24 = v25;
        goto LABEL_18;
      }
      WTF::StringImpl::destroy(v24, v22);
      v24 = (WTF::StringImpl *)v162[0];
      v162[0] = 0;
      if (v24)
      {
        v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 != 2)
          goto LABEL_17;
        WTF::StringImpl::destroy(v24, v129);
      }
    }
  }
LABEL_18:
  MEMORY[0x19AEA5508](v162, objc_msgSend(v15, "givenName"));
  v27 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  v28 = v152[0];
  v152[0] = v27;
  if (!v28)
    goto LABEL_21;
  v29 = *(_DWORD *)v28 - 2;
  if (*(_DWORD *)v28 != 2)
    goto LABEL_20;
  WTF::StringImpl::destroy(v28, v26);
  v28 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v28)
  {
    v29 = *(_DWORD *)v28 - 2;
    if (*(_DWORD *)v28 != 2)
    {
LABEL_20:
      *(_DWORD *)v28 = v29;
      goto LABEL_21;
    }
    WTF::StringImpl::destroy(v28, v123);
  }
LABEL_21:
  MEMORY[0x19AEA5508](v162, objc_msgSend(v15, "familyName"));
  v31 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  v32 = v152[1];
  v152[1] = v31;
  if (!v32)
    goto LABEL_24;
  v33 = *(_DWORD *)v32 - 2;
  if (*(_DWORD *)v32 != 2)
    goto LABEL_23;
  WTF::StringImpl::destroy(v32, v30);
  v32 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v32)
  {
    v33 = *(_DWORD *)v32 - 2;
    if (*(_DWORD *)v32 != 2)
    {
LABEL_23:
      *(_DWORD *)v32 = v33;
      goto LABEL_24;
    }
    WTF::StringImpl::destroy(v32, v124);
  }
LABEL_24:
  MEMORY[0x19AEA5508](v162, objc_msgSend(v15, "phoneticGivenName"));
  v35 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  v36 = v153[1];
  v153[1] = v35;
  if (!v36)
    goto LABEL_27;
  v37 = *(_DWORD *)v36 - 2;
  if (*(_DWORD *)v36 != 2)
    goto LABEL_26;
  WTF::StringImpl::destroy(v36, v34);
  v36 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v36)
  {
    v37 = *(_DWORD *)v36 - 2;
    if (*(_DWORD *)v36 != 2)
    {
LABEL_26:
      *(_DWORD *)v36 = v37;
      goto LABEL_27;
    }
    WTF::StringImpl::destroy(v36, v125);
  }
LABEL_27:
  MEMORY[0x19AEA5508](v162, objc_msgSend(v15, "phoneticFamilyName"));
  v39 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  v40 = v154[0];
  v154[0] = v39;
  if (!v40)
    goto LABEL_30;
  v41 = *(_DWORD *)v40 - 2;
  if (*(_DWORD *)v40 != 2)
    goto LABEL_29;
  WTF::StringImpl::destroy(v40, v38);
  v40 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v40)
  {
    v41 = *(_DWORD *)v40 - 2;
    if (*(_DWORD *)v40 != 2)
    {
LABEL_29:
      *(_DWORD *)v40 = v41;
      goto LABEL_30;
    }
    WTF::StringImpl::destroy(v40, v126);
  }
LABEL_30:
  v42 = (void *)objc_msgSend((id)objc_msgSend(v15, "postalAddresses"), "firstObject");
  v44 = v42;
  if (!v42)
    goto LABEL_65;
  if (objc_msgSend((id)objc_msgSend(v42, "value"), "street"))
  {
    MEMORY[0x19AEA5508](v162);
    v45 = (WTF *)WTF::fastMalloc((WTF *)8);
    v47 = v45;
    v48 = v162[0];
    if (v162[0])
      *(_DWORD *)v162[0] += 2;
    *(_QWORD *)v45 = v48;
    if (v157)
    {
      if (HIDWORD(v156))
      {
        v136 = v155;
        v137 = 8 * HIDWORD(v156);
        do
        {
          v138 = *(WTF::StringImpl **)v136;
          *(_QWORD *)v136 = 0;
          if (v138)
          {
            if (*(_DWORD *)v138 == 2)
              WTF::StringImpl::destroy(v138, v46);
            else
              *(_DWORD *)v138 -= 2;
          }
          v136 = (WTF *)((char *)v136 + 8);
          v137 -= 8;
        }
        while (v137);
      }
      v49 = v155;
      if (v155)
      {
        v155 = 0;
        LODWORD(v156) = 0;
        WTF::fastFree(v49, v46);
      }
      v155 = v47;
      v156 = 0x100000001;
    }
    else
    {
      v155 = v45;
      v156 = 0x100000001;
      v157 = 1;
    }
    v51 = (WTF::StringImpl *)v162[0];
    v162[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v46);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "subLocality"));
  v53 = v162[0];
  v162[0] = 0;
  v54 = (WTF::StringImpl *)v158;
  *(_QWORD *)&v158 = v53;
  if (v54)
  {
    v55 = *(_DWORD *)v54 - 2;
    if (*(_DWORD *)v54 != 2)
    {
LABEL_46:
      *(_DWORD *)v54 = v55;
      goto LABEL_47;
    }
    WTF::StringImpl::destroy(v54, v52);
    v54 = (WTF::StringImpl *)v162[0];
    v162[0] = 0;
    if (v54)
    {
      v55 = *(_DWORD *)v54 - 2;
      if (*(_DWORD *)v54 != 2)
        goto LABEL_46;
      WTF::StringImpl::destroy(v54, v130);
    }
  }
LABEL_47:
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "city"));
  v57 = v162[0];
  v162[0] = 0;
  v58 = (WTF::StringImpl *)*((_QWORD *)&v158 + 1);
  *((_QWORD *)&v158 + 1) = v57;
  if (!v58)
    goto LABEL_50;
  v59 = *(_DWORD *)v58 - 2;
  if (*(_DWORD *)v58 != 2)
    goto LABEL_49;
  WTF::StringImpl::destroy(v58, v56);
  v58 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v58)
  {
    v59 = *(_DWORD *)v58 - 2;
    if (*(_DWORD *)v58 != 2)
    {
LABEL_49:
      *(_DWORD *)v58 = v59;
      goto LABEL_50;
    }
    WTF::StringImpl::destroy(v58, v131);
  }
LABEL_50:
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "subAdministrativeArea"));
  v61 = v162[0];
  v162[0] = 0;
  v62 = (WTF::StringImpl *)*((_QWORD *)&v159 + 1);
  *((_QWORD *)&v159 + 1) = v61;
  if (!v62)
    goto LABEL_53;
  v63 = *(_DWORD *)v62 - 2;
  if (*(_DWORD *)v62 != 2)
    goto LABEL_52;
  WTF::StringImpl::destroy(v62, v60);
  v62 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v62)
  {
    v63 = *(_DWORD *)v62 - 2;
    if (*(_DWORD *)v62 != 2)
    {
LABEL_52:
      *(_DWORD *)v62 = v63;
      goto LABEL_53;
    }
    WTF::StringImpl::destroy(v62, v132);
  }
LABEL_53:
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "state"));
  v65 = v162[0];
  v162[0] = 0;
  v66 = (WTF::StringImpl *)v160;
  *(_QWORD *)&v160 = v65;
  if (!v66)
    goto LABEL_56;
  v67 = *(_DWORD *)v66 - 2;
  if (*(_DWORD *)v66 != 2)
    goto LABEL_55;
  WTF::StringImpl::destroy(v66, v64);
  v66 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v66)
  {
    v67 = *(_DWORD *)v66 - 2;
    if (*(_DWORD *)v66 != 2)
    {
LABEL_55:
      *(_DWORD *)v66 = v67;
      goto LABEL_56;
    }
    WTF::StringImpl::destroy(v66, v133);
  }
LABEL_56:
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "postalCode"));
  v69 = v162[0];
  v162[0] = 0;
  v70 = (WTF::StringImpl *)v159;
  *(_QWORD *)&v159 = v69;
  if (!v70)
    goto LABEL_59;
  v71 = *(_DWORD *)v70 - 2;
  if (*(_DWORD *)v70 != 2)
    goto LABEL_58;
  WTF::StringImpl::destroy(v70, v68);
  v70 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v70)
  {
    v71 = *(_DWORD *)v70 - 2;
    if (*(_DWORD *)v70 != 2)
    {
LABEL_58:
      *(_DWORD *)v70 = v71;
      goto LABEL_59;
    }
    WTF::StringImpl::destroy(v70, v134);
  }
LABEL_59:
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "country"));
  v73 = v162[0];
  v162[0] = 0;
  v74 = (WTF::StringImpl *)*((_QWORD *)&v160 + 1);
  *((_QWORD *)&v160 + 1) = v73;
  if (!v74)
    goto LABEL_62;
  v75 = *(_DWORD *)v74 - 2;
  if (*(_DWORD *)v74 != 2)
    goto LABEL_61;
  WTF::StringImpl::destroy(v74, v72);
  v74 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 != 2)
    {
LABEL_61:
      *(_DWORD *)v74 = v75;
      goto LABEL_62;
    }
    WTF::StringImpl::destroy(v74, v135);
  }
LABEL_62:
  MEMORY[0x19AEA5508](v162, objc_msgSend((id)objc_msgSend(v44, "value"), "ISOCountryCode"));
  v76 = (WTF::StringImpl *)v162[0];
  v162[0] = 0;
  v77 = v161;
  v161 = v76;
  if (v77)
  {
    v78 = *(_DWORD *)v77 - 2;
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::destroy(v77, v43);
      v77 = (WTF::StringImpl *)v162[0];
      v162[0] = 0;
      if (!v77)
        goto LABEL_65;
      v78 = *(_DWORD *)v77 - 2;
      if (*(_DWORD *)v77 == 2)
      {
        WTF::StringImpl::destroy(v77, v43);
        goto LABEL_65;
      }
    }
    *(_DWORD *)v77 = v78;
  }
LABEL_65:
  v79 = *(_OWORD *)v151;
  v80 = *(_OWORD *)v152;
  *(_OWORD *)v151 = 0u;
  *(_OWORD *)v152 = 0u;
  *(_OWORD *)v139 = v79;
  v140 = v80;
  v81 = *(_OWORD *)v153;
  v82 = *(_OWORD *)v154;
  *(_OWORD *)v153 = 0u;
  *(_OWORD *)v154 = 0u;
  v141 = v81;
  v142 = v82;
  LOBYTE(v143) = 0;
  v145 = 0;
  if (v157)
  {
    v143 = v155;
    v83 = v156;
    v155 = 0;
    v156 = 0;
    v144 = v83;
    v145 = 1;
  }
  v84 = v158;
  v158 = 0uLL;
  v146 = v84;
  v85 = v159;
  v159 = 0uLL;
  v147 = v85;
  v86 = v160;
  v160 = 0uLL;
  v148 = v86;
  v87 = v161;
  v161 = 0;
  v149 = v87;
  v150 = 1;
  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v151, v43);
  v50 = v150;
LABEL_68:
  if (*(unsigned __int8 *)(a2 + 216) == v50)
  {
    if (!*(_BYTE *)(a2 + 216))
      goto LABEL_79;
    WebCore::ApplePayPaymentContact::operator=((WTF::StringImpl **)(a2 + 72), v139);
  }
  else
  {
    if (*(_BYTE *)(a2 + 216))
    {
      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)(a2 + 72), v14);
      v88 = 0;
    }
    else
    {
      v89 = v140;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)v139;
      *(_OWORD *)(a2 + 88) = v89;
      v90 = v142;
      *(_OWORD *)(a2 + 104) = v141;
      *(_OWORD *)v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0u;
      *(_OWORD *)(a2 + 120) = v90;
      *(_BYTE *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v145)
      {
        *(_QWORD *)(a2 + 136) = v143;
        v91 = v144;
        v143 = 0;
        v144 = 0;
        *(_QWORD *)(a2 + 144) = v91;
        *(_BYTE *)(a2 + 152) = 1;
      }
      v92 = v146;
      v146 = 0uLL;
      v93 = v147;
      v147 = 0uLL;
      *(_OWORD *)(a2 + 160) = v92;
      *(_OWORD *)(a2 + 176) = v93;
      v94 = v148;
      v148 = 0uLL;
      *(_OWORD *)(a2 + 192) = v94;
      v95 = v149;
      v149 = 0;
      v88 = 1;
      *(_QWORD *)(a2 + 208) = v95;
    }
    *(_BYTE *)(a2 + 216) = v88;
  }
  if (v150)
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v139, v14);
LABEL_79:
  v96 = objc_msgSend(v3, "type", v139[0]);
  if ((unint64_t)(v96 - 1) >= 4)
    v97 = 0;
  else
    v97 = (v96 - 1) | 0x100000000;
  *(_DWORD *)(a2 + 16) = v97;
  *(_BYTE *)(a2 + 20) = BYTE4(v97);
  v98 = (void *)objc_msgSend(v3, "paymentPass");
  v100 = v98;
  if (v98)
  {
    MEMORY[0x19AEA5508](v151, objc_msgSend(v98, "primaryAccountIdentifier"));
    v101 = v151[0];
    MEMORY[0x19AEA5508](v151, objc_msgSend(v100, "primaryAccountNumberSuffix"));
    v102 = v151[0];
    if (objc_msgSend(v100, "deviceAccountIdentifier"))
    {
      MEMORY[0x19AEA5508](v151);
      v103 = v151[0];
    }
    else
    {
      v103 = 0;
    }
    if (objc_msgSend(v100, "deviceAccountNumberSuffix"))
    {
      MEMORY[0x19AEA5508](v151);
      v105 = v151[0];
    }
    else
    {
      v105 = 0;
    }
    v106 = objc_msgSend(v100, "activationState");
    if ((unint64_t)(v106 - 1) < 4)
      v107 = v106;
    else
      v107 = 0;
    v139[0] = v101;
    v139[1] = v102;
    *(_QWORD *)&v140 = v103;
    *((_QWORD *)&v140 + 1) = v105;
    LODWORD(v141) = v107;
    v104 = 1;
  }
  else
  {
    v104 = 0;
    LOBYTE(v139[0]) = 0;
  }
  BYTE8(v141) = v104;
  if (*(unsigned __int8 *)(a2 + 64) == v104)
  {
    if (*(_BYTE *)(a2 + 64))
    {
      v108 = v139[0];
      v139[0] = 0;
      v109 = *v4;
      *v4 = v108;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
          WTF::StringImpl::destroy(v109, v99);
        else
          *(_DWORD *)v109 -= 2;
      }
      v110 = v139[1];
      v139[1] = 0;
      v111 = *(WTF::StringImpl **)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v110;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, v99);
        else
          *(_DWORD *)v111 -= 2;
      }
      v112 = v140;
      *(_QWORD *)&v140 = 0;
      v113 = *(WTF::StringImpl **)(a2 + 40);
      *(_QWORD *)(a2 + 40) = v112;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
          WTF::StringImpl::destroy(v113, v99);
        else
          *(_DWORD *)v113 -= 2;
      }
      v114 = *((_QWORD *)&v140 + 1);
      *((_QWORD *)&v140 + 1) = 0;
      v115 = *(WTF::StringImpl **)(a2 + 48);
      *(_QWORD *)(a2 + 48) = v114;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, v99);
        else
          *(_DWORD *)v115 -= 2;
      }
      *(_DWORD *)(a2 + 56) = v141;
    }
  }
  else if (*(_BYTE *)(a2 + 64))
  {
    std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::reset[abi:sn180100](a2 + 24, v99);
  }
  else
  {
    v116 = v140;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v139;
    *(_OWORD *)v139 = 0u;
    v140 = 0u;
    *(_OWORD *)(a2 + 40) = v116;
    *(_DWORD *)(a2 + 56) = v141;
    *(_BYTE *)(a2 + 64) = 1;
  }
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v139, v99);
  result = (WTF::StringImpl *)objc_msgSend(v3, "bindToken");
  if (result)
  {
    MEMORY[0x19AEA5508](v139);
    v119 = v139[0];
    v139[0] = 0;
    result = *(WTF::StringImpl **)(a2 + 224);
    *(_QWORD *)(a2 + 224) = v119;
    if (result)
    {
      v120 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_115:
        *(_DWORD *)result = v120;
        return result;
      }
      WTF::StringImpl::destroy(result, v118);
      result = v139[0];
      v139[0] = 0;
      if (result)
      {
        v120 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v127);
        goto LABEL_115;
      }
    }
  }
  return result;
}

void sub_194830864(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  WebCore::ApplePayPaymentContact *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  v35 = *(WTF::StringImpl **)v32;
  *(_QWORD *)v32 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, a2);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::fastFree(v32, a2);
  v37 = *(WTF::StringImpl **)(v33 - 96);
  *(_QWORD *)(v33 - 96) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&a29, v36);
  v39 = *(WTF::StringImpl **)(v29 + 224);
  *(_QWORD *)(v29 + 224) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (*(_BYTE *)(v29 + 216))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact(v31, v38);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100](v30, v38);
  v41 = *(WTF::StringImpl **)(v29 + 8);
  *(_QWORD *)(v29 + 8) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = *(WTF::StringImpl **)v29;
  *(_QWORD *)v29 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::PaymentMethod::pkPaymentMethod(WebCore::PaymentMethod *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *WebCore::PaymentSessionError::PaymentSessionError(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t WebCore::PaymentSessionError::sessionError@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  id v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];

  v28[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = *this;
  if (objc_msgSend(*this, "code") == -2016)
  {
    v5 = objc_msgSend((id)objc_msgSend(v3, "userInfo"), "objectForKeyedSubscript:", CFSTR("PKPaymentErrorBindToken"));
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194830CE0);
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v27;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = v26;
    MEMORY[0x19AEA5508](v28, v5);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v9 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    *v7 = v9;
    v10 = v28[0];
    if (v28[0])
      *(_DWORD *)v28[0] += 2;
    v7[1] = v10;
    v22 = v6;
    v23 = v7;
    v24 = 0x100000001;
    v25 = 1;
    v11 = v28[0];
    v28[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v27;
    v27 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v22;
    if (v22)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = v13;
    *(_DWORD *)(a2 + 20) = 1;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 8) = v14;
    if (HIDWORD(v24))
    {
      v16 = v23;
      v17 = &v23[2 * HIDWORD(v24)];
      do
      {
        v18 = (_DWORD *)*v16;
        if (*v16)
          *v18 += 2;
        *v14 = v18;
        v19 = (_DWORD *)v16[1];
        if (v19)
          *v19 += 2;
        v14[1] = v19;
        v16 += 2;
        v14 += 2;
      }
      while (v16 != v17);
    }
    return std::__optional_destruct_base<WebCore::ApplePaySessionError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v15);
  }
  else
  {
    LOBYTE(v22) = 0;
    v25 = 0;
    std::__optional_destruct_base<WebCore::ApplePaySessionError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v4);
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v22;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = v21;
  }
  return result;
}

void sub_194830CE8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  _QWORD *v15;
  WTF::StringImpl *v16;

  *v15 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  std::__optional_destruct_base<WebCore::ApplePaySessionError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PaymentSessionError::unknownError@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  return result;
}

CFTypeRef WebCore::PaymentSessionError::platformError@<X0>(CFTypeRef *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = *this;
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::toDecimalNumber(WebCore *this, const WTF::String *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB3598];
  if (!*(_QWORD *)this)
    return objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  v3 = WTF::StringImpl::operator NSString *();
  v5 = *MEMORY[0x1E0C997C8];
  v6[0] = CFSTR(".");
  return objc_msgSend(v2, "decimalNumberWithString:locale:", v3, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
}

void *WebCore::platformRecurringSummaryItem(uint64_t a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)PAL::getPKRecurringPaymentSummaryItemClass[0]((PAL *)a1);
  if (*(_QWORD *)(a1 + 8))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v4 = (void *)MEMORY[0x1E0CB3598];
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = WTF::StringImpl::operator NSString *();
    v10 = *MEMORY[0x1E0C997C8];
    v11[0] = CFSTR(".");
    v6 = objc_msgSend(v4, "decimalNumberWithString:locale:", v5, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1));
  }
  else
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  v7 = (void *)objc_msgSend(v2, "summaryItemWithLabel:amount:type:", v3, v6, *(_BYTE *)a1 == 0);
  objc_msgSend(v7, "setStartDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)(a1 + 32)));
  if ((*(_BYTE *)(a1 + 40) - 1) > 3u)
    v8 = 4;
  else
    v8 = qword_1968BC9E0[(char)(*(_BYTE *)(a1 + 40) - 1)];
  objc_msgSend(v7, "setIntervalUnit:", v8);
  objc_msgSend(v7, "setIntervalCount:", *(unsigned int *)(a1 + 44));
  objc_msgSend(v7, "setEndDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)(a1 + 48)));
  return v7;
}

void *WebCore::platformDeferredSummaryItem(uint64_t a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)PAL::getPKDeferredPaymentSummaryItemClass[0]((PAL *)a1);
  if (*(_QWORD *)(a1 + 8))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v4 = (void *)MEMORY[0x1E0CB3598];
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = WTF::StringImpl::operator NSString *();
    v9 = *MEMORY[0x1E0C997C8];
    v10[0] = CFSTR(".");
    v6 = objc_msgSend(v4, "decimalNumberWithString:locale:", v5, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
  }
  else
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  v7 = (void *)objc_msgSend(v2, "summaryItemWithLabel:amount:type:", v3, v6, *(_BYTE *)a1 == 0);
  objc_msgSend(v7, "setDeferredDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)(a1 + 56)));
  return v7;
}

void *WebCore::platformAutomaticReloadSummaryItem(PAL *a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)PAL::getPKAutomaticReloadPaymentSummaryItemClass[0](a1);
  if (*((_QWORD *)a1 + 1))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v4 = (void *)MEMORY[0x1E0CB3598];
  v5 = (uint64_t *)MEMORY[0x1E0C997C8];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = WTF::StringImpl::operator NSString *();
    v14 = *v5;
    v15[0] = CFSTR(".");
    v7 = objc_msgSend(v4, "decimalNumberWithString:locale:", v6, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1));
  }
  else
  {
    v7 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  v8 = (void *)objc_msgSend(v2, "summaryItemWithLabel:amount:type:", v3, v7, *(_BYTE *)a1 == 0);
  v9 = *((_QWORD *)a1 + 8);
  v10 = (void *)MEMORY[0x1E0CB3598];
  if (v9)
  {
    v11 = WTF::StringImpl::operator NSString *();
    v14 = *v5;
    v15[0] = CFSTR(".");
    v12 = objc_msgSend(v10, "decimalNumberWithString:locale:", v11, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1));
  }
  else
  {
    v12 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  objc_msgSend(v8, "setThresholdAmount:", v12);
  return v8;
}

uint64_t WebCore::platformDisbursementSummaryItem(PAL *a1)
{
  void *v2;
  const __CFString *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)PAL::getPKDisbursementSummaryItemClass[0](a1);
  if (*((_QWORD *)a1 + 1))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v4 = *((_QWORD *)a1 + 2);
  v5 = (void *)MEMORY[0x1E0CB3598];
  if (v4)
  {
    v6 = WTF::StringImpl::operator NSString *();
    v9 = *MEMORY[0x1E0C997C8];
    v10[0] = CFSTR(".");
    v7 = objc_msgSend(v5, "decimalNumberWithString:locale:", v6, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
  }
  else
  {
    v7 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  return objc_msgSend(v2, "summaryItemWithLabel:amount:", v3, v7);
}

uint64_t WebCore::platformInstantFundsOutFeeSummaryItem(PAL *a1)
{
  void *v2;
  const __CFString *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)PAL::getPKInstantFundsOutFeeSummaryItemClass[0](a1);
  if (*((_QWORD *)a1 + 1))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v4 = *((_QWORD *)a1 + 2);
  v5 = (void *)MEMORY[0x1E0CB3598];
  if (v4)
  {
    v6 = WTF::StringImpl::operator NSString *();
    v9 = *MEMORY[0x1E0C997C8];
    v10[0] = CFSTR(".");
    v7 = objc_msgSend(v5, "decimalNumberWithString:locale:", v6, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
  }
  else
  {
    v7 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  return objc_msgSend(v2, "summaryItemWithLabel:amount:", v3, v7);
}

void *WebCore::platformSummaryItem(uint64_t a1)
{
  uint64_t (**v2)(PAL *__hidden);
  int v3;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 73))
  {
    if (*(_BYTE *)(a1 + 72) == 1)
    {
      v2 = PAL::getPKInstantFundsOutFeeSummaryItemClass;
      goto LABEL_10;
    }
    if (!*(_BYTE *)(a1 + 72))
    {
      v2 = PAL::getPKDisbursementSummaryItemClass;
LABEL_10:
      v5 = (void *)((uint64_t (*)(void))*v2)();
      if (*(_QWORD *)(a1 + 8))
        v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v6 = &stru_1E3487BC0;
      v7 = *(_QWORD *)(a1 + 16);
      v8 = (void *)MEMORY[0x1E0CB3598];
      if (v7)
      {
        v9 = WTF::StringImpl::operator NSString *();
        v16 = *MEMORY[0x1E0C997C8];
        v17[0] = CFSTR(".");
        v10 = objc_msgSend(v8, "decimalNumberWithString:locale:", v9, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1));
      }
      else
      {
        v10 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
      }
      return (void *)objc_msgSend(v5, "summaryItemWithLabel:amount:", v6, v10);
    }
  }
  v3 = *(unsigned __int8 *)(a1 + 24);
  switch(v3)
  {
    case 3:
      return WebCore::platformAutomaticReloadSummaryItem((PAL *)a1);
    case 2:
      return WebCore::platformDeferredSummaryItem(a1);
    case 1:
      return WebCore::platformRecurringSummaryItem(a1);
  }
  v11 = (void *)PAL::getPKPaymentSummaryItemClass[0]((PAL *)a1);
  if (*(_QWORD *)(a1 + 8))
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E3487BC0;
  v13 = (void *)MEMORY[0x1E0CB3598];
  if (*(_QWORD *)(a1 + 16))
  {
    v14 = WTF::StringImpl::operator NSString *();
    v16 = *MEMORY[0x1E0C997C8];
    v17[0] = CFSTR(".");
    v15 = objc_msgSend(v13, "decimalNumberWithString:locale:", v14, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1));
  }
  else
  {
    v15 = objc_msgSend(MEMORY[0x1E0CB3598], "zero");
  }
  return (void *)objc_msgSend(v11, "summaryItemWithLabel:amount:type:", v12, v15, *(_BYTE *)a1 == 0);
}

CFTypeRef WebCore::platformDisbursementSummaryItems(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a1 + 12));
  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = 80 * v3;
    do
    {
      v6 = WebCore::platformSummaryItem(v4);
      if (v6)
        objc_msgSend(v2, "addObject:", v6);
      v4 += 80;
      v5 -= 80;
    }
    while (v5);
  }
  return (id)CFMakeCollectable((CFTypeRef)objc_msgSend(v2, "copy"));
}

CFTypeRef WebCore::platformSummaryItems(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a2 + 12) + 1);
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 80 * v5;
    do
    {
      v8 = WebCore::platformSummaryItem(v6);
      if (v8)
        objc_msgSend(v4, "addObject:", v8);
      v6 += 80;
      v7 -= 80;
    }
    while (v7);
  }
  v9 = WebCore::platformSummaryItem(a1);
  if (v9)
    objc_msgSend(v4, "addObject:", v9);
  return (id)CFMakeCollectable((CFTypeRef)objc_msgSend(v4, "copy"));
}

void WebCore::ClipboardImageReader::readBuffer(_QWORD *a1, uint64_t a2, uint64_t a3, WebCore::SharedBuffer **a4)
{
  _QWORD *v6;
  PAL *v7;
  id v8;
  UIImage *v9;
  PAL *v10;
  CFTypeRef v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  void *v24;
  _DWORD *v25;
  CFTypeRef cf;
  int v27;
  int v28;

  v6 = a1 + 2;
  v7 = (PAL *)MEMORY[0x19AEA53F4](a1[2], "image/png", 9);
  if ((_DWORD)v7)
  {
    v8 = objc_alloc((Class)PAL::getUIImageClass[0](v7));
    WebCore::SharedBuffer::createNSData(*a4, (WebCoreSharedBufferData **)&cf);
    v10 = (PAL *)objc_msgSend(v8, "initWithData:", cf);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = (void *)PAL::softLinkUIKitUIImagePNGRepresentation(v10, v9);
    v13 = v12;
    if (v12)
    {
      v14 = a1[1];
      v15 = (char *)objc_msgSend(v12, "bytes", cf);
      v16 = objc_msgSend(v13, "length");
      v17 = v16;
      cf = 0;
      v27 = 0;
      v28 = v16;
      if (v16)
      {
        if (HIDWORD(v16))
        {
          __break(0xC471u);
          return;
        }
        v18 = (_BYTE *)WTF::fastMalloc((WTF *)v16);
        v27 = v17;
        cf = v18;
        do
        {
          v19 = *v15++;
          *v18++ = v19;
          --v17;
        }
        while (v17);
      }
      v20 = bmalloc::api::isoAllocate();
      v21 = v20;
      if (v14)
        v22 = (WebCore::ScriptExecutionContext *)(v14 + 192);
      else
        v22 = 0;
      v23 = WebCore::Blob::Blob(v20, v22, (uint64_t)&cf, v6);
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v23 + 24));
      v25 = (_DWORD *)a1[3];
      a1[3] = v21;
      if (v25)
      {
        if (v25[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[4];
      }
      if (cf)
        WTF::fastFree((WTF *)cf, v24);
    }
    if (v10)
      CFRelease(v10);
  }
}

void sub_194831A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::ApplePayPaymentMethod::operator=(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_BYTE *)a2 + 20);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(a1 + 20) = v8;
  v9 = (WTF::StringImpl **)(a1 + 24);
  if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v10 = a2[3];
      a2[3] = 0;
      v11 = *v9;
      *v9 = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = a2[4];
      a2[4] = 0;
      v13 = *(WTF::StringImpl **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = a2[5];
      a2[5] = 0;
      v15 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = a2[6];
      a2[6] = 0;
      v17 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::reset[abi:sn180100]((uint64_t)v9, (WTF::StringImpl *)a2);
  }
  else
  {
    v18 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 24) = v18;
    v19 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(a1 + 32) = v19;
    v20 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v20;
    v21 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 48) = v21;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_BYTE *)(a1 + 64) = 1;
  }
  v22 = (WTF::StringImpl **)(a1 + 72);
  v23 = a2 + 9;
  if (*(unsigned __int8 *)(a1 + 216) == *((unsigned __int8 *)a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
      WebCore::ApplePayPaymentContact::operator=(v22, v23);
  }
  else if (*(_BYTE *)(a1 + 216))
  {
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v22, (WTF::StringImpl *)v23);
    *(_BYTE *)(a1 + 216) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>((uint64_t)v22, (uint64_t *)v23);
    *(_BYTE *)(a1 + 216) = 1;
  }
  v24 = a2[28];
  a2[28] = 0;
  v25 = *(WTF::StringImpl **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(result + 40))
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(result + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 40) = 0;
  }
  return result;
}

WTF::StringImpl **WebCore::ApplePayPaymentContact::operator=(WTF::StringImpl **a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a2[2];
  a2[2] = 0;
  v9 = a1[2];
  a1[2] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = a2[3];
  a2[3] = 0;
  v11 = a1[3];
  a1[3] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = a2[4];
  a2[4] = 0;
  v13 = a1[4];
  a1[4] = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = a2[5];
  a2[5] = 0;
  v15 = a1[5];
  a1[5] = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = a2[6];
  a2[6] = 0;
  v17 = a1[6];
  a1[6] = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = a2[7];
  a2[7] = 0;
  v19 = a1[7];
  a1[7] = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  v21 = a2[11];
  a2[11] = 0;
  v22 = a1[11];
  a1[11] = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = a2[12];
  a2[12] = 0;
  v24 = a1[12];
  a1[12] = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = a2[13];
  a2[13] = 0;
  v26 = a1[13];
  a1[13] = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = a2[14];
  a2[14] = 0;
  v28 = a1[14];
  a1[14] = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v20);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = a2[15];
  a2[15] = 0;
  v30 = a1[15];
  a1[15] = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v20);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = a2[16];
  a2[16] = 0;
  v32 = a1[16];
  a1[16] = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v20);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = a2[17];
  a2[17] = 0;
  v34 = a1[17];
  a1[17] = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v20);
    else
      *(_DWORD *)v34 -= 2;
  }
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(unsigned int *)(result + 12);
      if ((_DWORD)v4)
      {
        v8 = *(WTF::StringImpl ***)result;
        v9 = 8 * v4;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v5 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v5;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    v6 = *(unsigned int *)(result + 12);
    if ((_DWORD)v6)
    {
      v11 = *(WTF::StringImpl ***)result;
      v12 = 8 * v6;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    result = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v7;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result)
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v4;
    v5 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v5;
    v6 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(result + 32) = v6;
    v7 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(result + 40) = v7;
    v8 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v8;
    v9 = a2[7];
    a2[7] = 0;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)(result + 56) = v9;
    *(_BYTE *)(result + 80) = 0;
    if (*((_BYTE *)a2 + 80))
    {
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      v10 = a2[8];
      a2[8] = 0;
      *(_QWORD *)(result + 64) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 18);
      *((_DWORD *)a2 + 18) = 0;
      *(_DWORD *)(result + 72) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 19);
      *((_DWORD *)a2 + 19) = 0;
      *(_DWORD *)(result + 76) = v10;
      *(_BYTE *)(result + 80) = 1;
    }
    v11 = a2[11];
    a2[11] = 0;
    *(_QWORD *)(result + 88) = v11;
    v12 = a2[12];
    a2[12] = 0;
    *(_QWORD *)(result + 96) = v12;
    v13 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(result + 104) = v13;
    v14 = a2[14];
    a2[14] = 0;
    *(_QWORD *)(result + 112) = v14;
    v15 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(result + 120) = v15;
    v16 = a2[16];
    a2[16] = 0;
    *(_QWORD *)(result + 128) = v16;
    v17 = a2[17];
    a2[17] = 0;
    *(_QWORD *)(result + 136) = v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebCore::ApplePayPayment::Token::~Token(WebCore::ApplePayPayment::Token *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*((_BYTE *)this + 216))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPayment::Token *)((char *)this + 72), a2);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::ApplePayPaymentContact::~ApplePayPaymentContact(WebCore::ApplePayPaymentContact *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (*((_BYTE *)this + 80))
  {
    v10 = *((unsigned int *)this + 19);
    if ((_DWORD)v10)
    {
      v20 = (WTF::StringImpl **)*((_QWORD *)this + 8);
      v21 = 8 * v10;
      do
      {
        v22 = *v20;
        *v20 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, a2);
          else
            *(_DWORD *)v22 -= 2;
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    v11 = (WTF *)*((_QWORD *)this + 8);
    if (v11)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v11, a2);
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
}

Class initCNPhoneNumber(void)
{
  Class result;
  void *v1;

  if ((_MergedGlobals_27 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x19483271CLL);
    }
    qword_1EE334B30 = (uint64_t)v1;
    _MergedGlobals_27 = 1;
  }
  result = objc_getClass("CNPhoneNumber");
  qword_1EE334B28 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  _MergedGlobals_8 = CNPhoneNumberFunction;
  return result;
}

uint64_t CNPhoneNumberFunction(void)
{
  return qword_1EE334B28;
}

Class initCNMutablePostalAddress(void)
{
  Class result;
  void *v1;

  if ((_MergedGlobals_27 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x1948327D8);
    }
    qword_1EE334B30 = (uint64_t)v1;
    _MergedGlobals_27 = 1;
  }
  result = objc_getClass("CNMutablePostalAddress");
  qword_1EE334B38 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  off_1ECE76AB0 = CNMutablePostalAddressFunction;
  return result;
}

uint64_t CNMutablePostalAddressFunction(void)
{
  return qword_1EE334B38;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePaySessionError,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v3)
    {
      v7 = 16 * v3;
      v8 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 8) + 8);
      do
      {
        v9 = *v8;
        *v8 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = *(v8 - 1);
        *(v8 - 1) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
    }
    v4 = *(WTF **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::ReadableByteStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[4]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[5]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[6]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[7]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[8]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[9]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[10]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[11]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[12]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[13]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[14]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[15]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[16]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[17]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[18]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[19]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[20]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[21]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[22]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[23]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[24]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[25]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[26]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[27]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[28]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[29]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[30]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[31]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[32]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[33]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[34]);
}

uint64_t WebCore::ReadableStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[4]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[5]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[6]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[7]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[8]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[9]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[10]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[11]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[12]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[13]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[14]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[15]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[16]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[17]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[18]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[19]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[20]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[21]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[22]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[23]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[24]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[25]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[26]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[27]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[28]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[29]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[30]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[31]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[32]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[33]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[34]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[35]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[36]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[37]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[38]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[39]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[40]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[41]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[42]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[43]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[44]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[45]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[46]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[47]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[48]);
}

uint64_t WebCore::StreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[4]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[5]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[6]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[7]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[8]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[9]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[10]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[11]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[12]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[13]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[14]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[15]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[16]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[17]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[18]);
}

uint64_t WebCore::TransformStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[4]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[5]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[6]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[7]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[8]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[9]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[10]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[11]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[12]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[13]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[14]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[15]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[16]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[17]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[18]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[19]);
}

uint64_t WebCore::WritableStreamInternalsBuiltinFunctions::visit<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[4]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[5]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[6]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[7]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[8]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[9]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[10]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[11]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[12]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[13]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[14]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[15]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[16]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[17]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[18]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[19]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[20]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[21]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[22]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[23]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[24]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[25]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[26]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[27]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[28]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[29]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[30]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[31]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[32]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[33]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[34]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[35]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[36]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[37]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[38]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[39]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[40]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[41]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[42]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[43]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[44]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[45]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[46]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[47]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[48]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a1[49]);
}

_DWORD *WebCore::JSANGLEInstancedArrays::destroy(WebCore::JSANGLEInstancedArrays *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSANGLEInstancedArrays::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSANGLEInstancedArraysOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsANGLEInstancedArrays";
    a5[1] = 38;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1948338E4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSANGLEInstancedArraysOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::ANGLEInstancedArrays>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::ANGLEInstancedArrays *__hidden))a3 != off_1E33DBD40)
  {
    __break(0xC471u);
    JUMPOUT(0x1948340CCLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSANGLEInstancedArrays::s_info
         + ~((_QWORD)&WebCore::JSANGLEInstancedArrays::s_info << 32)) ^ (((unint64_t)&WebCore::JSANGLEInstancedArrays::s_info
                                                                        + ~((_QWORD)&WebCore::JSANGLEInstancedArrays::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSANGLEInstancedArrays::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSANGLEInstancedArrays::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSANGLEInstancedArraysPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSANGLEInstancedArrays::s_info, &WebCore::JSANGLEInstancedArraysPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSANGLEInstancedArrays::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSANGLEInstancedArrays::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 4896);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 4896))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 4896);
    *(_QWORD *)(v46 + 4896) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 4896);
  *(_QWORD *)(v42 + 4896) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE334B50 & 1) == 0)
  {
    qword_1EE334B48 = (uint64_t)&off_1E3222E00;
    byte_1EE334B50 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE334B48;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

unint64_t WebCore::convertDictionary<WebCore::AacEncoderConfig>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int16 v10;
  JSC::VM *v11;
  int v12;
  WTF::StringImpl *v13;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v5 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v7 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        result = JSC::JSObject::get(v7, v5, (unint64_t)v13);
        v9 = result;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            result = WTF::StringImpl::destroy(v13, v8);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_16;
        }
        if (v9 == 10)
          goto LABEL_9;
        v11 = (JSC::VM *)*((_QWORD *)v5 + 7);
        result = WebCore::parseEnumeration<WebCore::AacBitstreamFormat>(v5, v9);
        v10 = result;
        if (*((_DWORD *)v11 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          if ((result & 1) != 0)
          {
LABEL_16:
            v12 = 1;
            goto LABEL_13;
          }
        }
        if (v10 > 0xFFu)
          goto LABEL_12;
      }
    }
    result = JSC::throwTypeError();
    goto LABEL_16;
  }
LABEL_9:
  LOBYTE(v10) = 0;
LABEL_12:
  v12 = 0;
  *(_BYTE *)a3 = v10;
LABEL_13:
  *(_DWORD *)(a3 + 4) = v12;
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[2];
  int v25;
  int v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = (uint64_t *)(v12 + 41968);
  if ((_MergedGlobals_579[0] & 1) == 0)
  {
    qword_1EE334C08 = (uint64_t)&_MergedGlobals_9;
    _MergedGlobals_9 += 2;
    dword_1ECE76AF0 += 2;
    qword_1EE334C10 = (uint64_t)&dword_1ECE76AF0;
    _MergedGlobals_579[0] = 1;
  }
  v14 = *(_QWORD *)&_MergedGlobals_579[8 * v11 + 200];
  if (!v14)
  {
    v17 = *v13;
    goto LABEL_13;
  }
  v15 = *(_DWORD *)v14;
  v16 = *(_DWORD *)(v14 + 4);
  *(_DWORD *)v14 += 2;
  if (v16)
  {
    if (v16 != 1)
    {
LABEL_8:
      v17 = *(_QWORD *)(v12 + 64760);
      if (!v17 || v14 != *(_QWORD *)(v17 + 8))
      {
        v17 = JSC::jsStringWithCacheSlowCase();
        v15 = *(_DWORD *)v14 - 2;
      }
      goto LABEL_11;
    }
    v21 = *(unsigned __int8 **)(v14 + 8);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      v22 = *v21;
    }
    else
    {
      v23 = *(unsigned __int16 *)v21;
      if (v23 > 0xFF)
        goto LABEL_8;
      v22 = v23;
    }
    v17 = *(_QWORD *)(v12 + 8 * v22 + 42216);
  }
  else
  {
    v17 = *v13;
  }
LABEL_11:
  if (v15)
    *(_DWORD *)v14 = v15;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v14, v10);
LABEL_13:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = (WTF::StringImpl *)v24[0];
  v24[0] = 0;
  v24[1] = v8;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v18, v17, 0, (uint64_t)v24);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  if (a3[24])
  {
    v11 = *((_QWORD *)a3 + 2);
    if ((int)v11 < 0)
      v12 = COERCE__INT64((double)v11) + 0x2000000000000;
    else
      v12 = *((_QWORD *)a3 + 2) | 0xFFFE000000000000;
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v44;
    v44 = 0;
    v45 = v8;
    v46 = -1;
    v47 = 0x1000000;
    v48 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v13, v12, 0, (uint64_t)&v44);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v14 = *a3;
  v15 = *(_QWORD *)(a1 + 56);
  v16 = (uint64_t *)(v15 + 41968);
  if ((byte_1EE33613A & 1) == 0)
  {
    dword_1ECE790F0 += 2;
    byte_1EE33613A = 1;
    qword_1EE3362F0 = (uint64_t)&dword_1ECE790F0;
    dword_1ECE79110 += 2;
    qword_1EE3362F8 = (uint64_t)&dword_1ECE79110;
  }
  v17 = *(_QWORD *)&_MergedGlobals_1139[8 * v14 + 440];
  if (v17)
  {
    v18 = *(_DWORD *)v17;
    v19 = *(_DWORD *)(v17 + 4);
    *(_DWORD *)v17 += 2;
    if (v19)
    {
      if (v19 != 1)
      {
LABEL_16:
        v20 = *(_QWORD *)(v15 + 64760);
        if (!v20 || v17 != *(_QWORD *)(v20 + 8))
        {
          v20 = JSC::jsStringWithCacheSlowCase();
          v18 = *(_DWORD *)v17 - 2;
        }
        goto LABEL_19;
      }
      v41 = *(unsigned __int8 **)(v17 + 8);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
      {
        v42 = *v41;
      }
      else
      {
        v43 = *(unsigned __int16 *)v41;
        if (v43 > 0xFF)
          goto LABEL_16;
        v42 = v43;
      }
      v20 = *(_QWORD *)(v15 + 8 * v42 + 42216);
    }
    else
    {
      v20 = *v16;
    }
LABEL_19:
    if (v18)
      *(_DWORD *)v17 = v18;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v17, v10);
    goto LABEL_21;
  }
  v20 = *v16;
LABEL_21:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v44;
  v44 = 0;
  v45 = v8;
  v46 = -1;
  v47 = 0x1000000;
  v48 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v44);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = *((_QWORD *)a3 + 1);
  v24 = HIDWORD(v23);
  v25 = (double)v23;
  v26 = (v23 & 0x80000000) != 0
      ? COERCE__INT64((double)v23) + 0x2000000000000
      : v23 | 0xFFFE000000000000;
  v27 = v24 ? *(_QWORD *)&v25 + 0x2000000000000 : v26;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v44;
  v44 = 0;
  v45 = v8;
  v46 = -1;
  v47 = 0x1000000;
  v48 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v28, v27, 0, (uint64_t)&v44);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = *((_QWORD *)a3 + 4);
  v31 = (v30 & 0x80000000) != 0
      ? COERCE__INT64((double)v30) + 0x2000000000000
      : *((_QWORD *)a3 + 4) | 0xFFFE000000000000;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v32 = v44;
  v44 = 0;
  v45 = v8;
  v46 = -1;
  v47 = 0x1000000;
  v48 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v32, v31, 0, (uint64_t)&v44);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = a3[41] ? 7 : 6;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v35 = v44;
  v44 = 0;
  v45 = v8;
  v46 = -1;
  v47 = 0x1000000;
  v48 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v35, v34, 0, (uint64_t)&v44);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  v37 = a3[40] ? 7 : 6;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v38 = v44;
  v44 = 0;
  v45 = v8;
  v46 = -1;
  v47 = 0x1000000;
  v48 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v38, v37, 0, (uint64_t)&v44);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  return v8;
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  JSC::VM *v13;
  objc_class *v14;
  int v15;
  BOOL v16;
  JSValue v17;
  void *v18;
  uint64_t v19;
  JSC::VM *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _QWORD *v36;
  WTF *v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  _BYTE v41[80];
  JSC::VM *v42;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (!a3[136])
    goto LABEL_36;
  v11 = *((unsigned int *)a3 + 33);
  if ((_DWORD)v11)
  {
    v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)*((unsigned int *)a3 + 33));
    memcpy(v12, *((const void **)a3 + 15), *((unsigned int *)a3 + 33));
  }
  else
  {
    v12 = 0;
  }
  v13 = *(JSC::VM **)(a1 + 56);
  v42 = v13;
  LOBYTE(v40) = 0;
  *((_QWORD *)&v40 + 1) = 0x800000000;
  *(_QWORD *)v41 = &v41[16];
  memset(&v41[8], 0, 72);
  if (v11 >= 9)
  {
    LOBYTE(v40) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)((char *)&v40 + 8)) == 1;
  }
  else if (!(_DWORD)v11)
  {
    goto LABEL_25;
  }
  v37 = (WTF *)v12;
  do
  {
    v14 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::FillLightMode>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*v12);
    if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    {
      v19 = 0;
      v12 = (unsigned __int8 *)v37;
      goto LABEL_27;
    }
    v15 = DWORD2(v40);
    if (DWORD2(v40) != HIDWORD(v40) && (*(_BYTE **)v41 != &v41[16] ? (v16 = *(_QWORD *)v41 == 0) : (v16 = 1), v16))
    {
      *(_QWORD *)(*(_QWORD *)v41 + 8 * DWORD2(v40)) = v14;
      DWORD2(v40) = v15 + 1;
    }
    else
    {
      v17.super.isa = v14;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)((char *)&v40 + 8), v17) == 1)
        LOBYTE(v40) = 1;
    }
    ++v12;
    --v11;
  }
  while (v11);
  v12 = (unsigned __int8 *)v37;
  if ((_BYTE)v40)
  {
    JSC::throwOutOfMemoryError();
LABEL_61:
    v19 = 0;
    goto LABEL_27;
  }
LABEL_25:
  v38 = *(_QWORD *)v41;
  v39 = DWORD2(v40);
  v20 = *(JSC::VM **)(a2 + 56);
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
    goto LABEL_61;
  v19 = JSC::constructArray();
LABEL_27:
  v21 = *(uint64_t **)&v41[8];
  if (*(_QWORD *)&v41[8])
  {
    v38 = (uint64_t)&v40 + 8;
    v36 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v41[8], &v38);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v21, v36);
  }
  if (*(_BYTE **)v41 != &v41[16] && *(_QWORD *)v41)
    WTF::fastFree(*(WTF **)v41, v18);
  if (v12)
    WTF::fastFree((WTF *)v12, v18);
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v22 = (WTF::StringImpl *)v40;
  *(_QWORD *)&v40 = 0;
  *((_QWORD *)&v40 + 1) = v9;
  *(_QWORD *)v41 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v41[8] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v22, v19, 0, (uint64_t)&v40);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_36:
  if (a3[56])
  {
    v24 = *(_OWORD *)(a3 + 24);
    v40 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)v41 = v24;
    *(_OWORD *)&v41[16] = *(_OWORD *)(a3 + 40);
    v25 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t)&v40);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v26 = (WTF::StringImpl *)v40;
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = v9;
    *(_QWORD *)v41 = 0x1000000FFFFFFFFLL;
    *(_QWORD *)&v41[8] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v26, v25, 0, (uint64_t)&v40);
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v27);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (a3[112])
  {
    v28 = *((_OWORD *)a3 + 5);
    v40 = *((_OWORD *)a3 + 4);
    *(_OWORD *)v41 = v28;
    *(_OWORD *)&v41[16] = *((_OWORD *)a3 + 6);
    v29 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t)&v40);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v30 = (WTF::StringImpl *)v40;
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = v9;
    *(_QWORD *)v41 = 0x1000000FFFFFFFFLL;
    *(_QWORD *)&v41[8] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v30, v29, 0, (uint64_t)&v40);
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v31);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (a3[1])
  {
    v32 = WebCore::convertEnumerationToJS<WebCore::RedEyeReduction>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*a3);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v33 = (WTF::StringImpl *)v40;
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = v9;
    *(_QWORD *)v41 = 0x1000000FFFFFFFFLL;
    *(_QWORD *)&v41[8] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v33, v32, 0, (uint64_t)&v40);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v34);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  return v9;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = 6;
  if (a3[6])
    v10 = 7;
  if (a3[7])
    v11 = v10;
  else
    v11 = 2;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = v39;
  v39 = 0;
  v40 = v8;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v12, v11, 0, (uint64_t)&v39);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  v14 = a3[5]
      ? WebCore::convertEnumerationToJS<WebCore::PlatformVideoMatrixCoefficients>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)a3[4]): 2;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v39;
  v39 = 0;
  v40 = v8;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v15, v14, 0, (uint64_t)&v39);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (!a3[1])
  {
    v22 = 2;
    goto LABEL_29;
  }
  v17 = *(_QWORD *)(a1 + 56);
  v18 = (uint64_t *)(v17 + 41968);
  WebCore::convertEnumerationToString(*a3, &v39);
  v20 = v39;
  if (!v39)
  {
    v22 = *v18;
    goto LABEL_29;
  }
  v21 = *((_DWORD *)v39 + 1);
  if (v21)
  {
    if (v21 != 1)
    {
LABEL_23:
      v22 = *(_QWORD *)(v17 + 64760);
      if (!v22 || v39 != *(WTF::StringImpl **)(v22 + 8))
        v22 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_26;
    }
    v35 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
    if ((*((_BYTE *)v39 + 16) & 4) != 0)
    {
      v36 = *v35;
    }
    else
    {
      v36 = *(unsigned __int16 *)v35;
      if (v36 > 0xFF)
        goto LABEL_23;
      v36 = v36;
    }
    v22 = *(_QWORD *)(v17 + 8 * v36 + 42216);
  }
  else
  {
    v22 = *v18;
  }
LABEL_26:
  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, v19);
  else
    *(_DWORD *)v20 -= 2;
LABEL_29:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v23 = v39;
  v39 = 0;
  v40 = v8;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v23, v22, 0, (uint64_t)&v39);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (!a3[3])
  {
    v31 = 2;
    goto LABEL_43;
  }
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 56);
  v27 = (uint64_t *)(v26 + 41968);
  WebCore::convertEnumerationToString(v25, &v39);
  v29 = v39;
  if (!v39)
  {
    v31 = *v27;
    goto LABEL_43;
  }
  v30 = *((_DWORD *)v39 + 1);
  if (v30)
  {
    if (v30 != 1)
    {
LABEL_37:
      v31 = *(_QWORD *)(v26 + 64760);
      if (!v31 || v39 != *(WTF::StringImpl **)(v31 + 8))
        v31 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_40;
    }
    v37 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
    if ((*((_BYTE *)v39 + 16) & 4) != 0)
    {
      v38 = *v37;
    }
    else
    {
      v38 = *(unsigned __int16 *)v37;
      if (v38 > 0xFF)
        goto LABEL_37;
      v38 = v38;
    }
    v31 = *(_QWORD *)(v26 + 8 * v38 + 42216);
  }
  else
  {
    v31 = *v27;
  }
LABEL_40:
  if (*(_DWORD *)v29 == 2)
    WTF::StringImpl::destroy(v29, v28);
  else
    *(_DWORD *)v29 -= 2;
LABEL_43:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v32 = v39;
  v39 = 0;
  v40 = v8;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v32, v31, 0, (uint64_t)&v39);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned __int8 *v81;
  unsigned int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned __int8 *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  int v100;
  int v101;
  uint64_t v102;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *((_QWORD *)a3 + 2);
  if (!v10)
    goto LABEL_13;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(v10 + 4);
  if (v12)
  {
    if (v12 != 1)
    {
LABEL_6:
      v13 = *(_QWORD *)(v11 + 64760);
      if (!v13 || v10 != *(_QWORD *)(v13 + 8))
        v13 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v83 = *(unsigned __int8 **)(v10 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    {
      v84 = *v83;
    }
    else
    {
      v94 = *(unsigned __int16 *)v83;
      if (v94 > 0xFF)
        goto LABEL_6;
      v84 = v94;
    }
    v13 = *(_QWORD *)(v11 + 8 * v84 + 42216);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)&v98);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_13:
  v16 = *((_QWORD *)a3 + 8);
  if (!v16)
    goto LABEL_23;
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_DWORD *)(v16 + 4);
  if (v18)
  {
    if (v18 != 1)
    {
LABEL_16:
      v19 = *(_QWORD *)(v17 + 64760);
      if (!v19 || v16 != *(_QWORD *)(v19 + 8))
        v19 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_19;
    }
    v85 = *(unsigned __int8 **)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
    {
      v86 = *v85;
    }
    else
    {
      v95 = *(unsigned __int16 *)v85;
      if (v95 > 0xFF)
        goto LABEL_16;
      v86 = v95;
    }
    v19 = *(_QWORD *)(v17 + 8 * v86 + 42216);
  }
  else
  {
    v19 = *(_QWORD *)(v17 + 41968);
  }
LABEL_19:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v20 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v20, v19, 0, (uint64_t)&v98);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
LABEL_23:
  v22 = WebCore::jsDate(a1);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v23 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v23, v22, 0, (uint64_t)&v98);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (!a3[73])
    goto LABEL_42;
  v25 = a3[72];
  v26 = *(_QWORD *)(a1 + 56);
  v27 = (uint64_t *)(v26 + 41968);
  if ((byte_1EE3374E0 & 1) == 0)
  {
    qword_1EE337568 = (uint64_t)&dword_1ECE7AE10;
    dword_1ECE7AE10 += 2;
    dword_1ECE7AE30 += 2;
    qword_1EE337570 = (uint64_t)&dword_1ECE7AE30;
    byte_1EE3374E0 = 1;
  }
  v28 = *(_QWORD *)&_MergedGlobals_204[8 * v25 + 144];
  if (v28)
  {
    v29 = *(_DWORD *)v28;
    v30 = *(_DWORD *)(v28 + 4);
    *(_DWORD *)v28 += 2;
    if (v30)
    {
      if (v30 != 1)
      {
LABEL_33:
        v31 = *(_QWORD *)(v26 + 64760);
        if (!v31 || v28 != *(_QWORD *)(v31 + 8))
        {
          v31 = JSC::jsStringWithCacheSlowCase();
          v29 = *(_DWORD *)v28 - 2;
        }
        goto LABEL_36;
      }
      v89 = *(unsigned __int8 **)(v28 + 8);
      if ((*(_BYTE *)(v28 + 16) & 4) != 0)
      {
        v90 = *v89;
      }
      else
      {
        v97 = *(unsigned __int16 *)v89;
        if (v97 > 0xFF)
          goto LABEL_33;
        v90 = v97;
      }
      v31 = *(_QWORD *)(v26 + 8 * v90 + 42216);
    }
    else
    {
      v31 = *v27;
    }
LABEL_36:
    if (v29)
      *(_DWORD *)v28 = v29;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v28, v24);
    goto LABEL_38;
  }
  v31 = *v27;
LABEL_38:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v32 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v32, v31, 0, (uint64_t)&v98);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
LABEL_42:
  v34 = *((_QWORD *)a3 + 1);
  if (!v34)
    goto LABEL_52;
  v35 = *(_QWORD *)(a1 + 56);
  v36 = *(_DWORD *)(v34 + 4);
  if (v36)
  {
    if (v36 != 1)
    {
LABEL_45:
      v37 = *(_QWORD *)(v35 + 64760);
      if (!v37 || v34 != *(_QWORD *)(v37 + 8))
        v37 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_48;
    }
    v87 = *(unsigned __int8 **)(v34 + 8);
    if ((*(_BYTE *)(v34 + 16) & 4) != 0)
    {
      v88 = *v87;
    }
    else
    {
      v96 = *(unsigned __int16 *)v87;
      if (v96 > 0xFF)
        goto LABEL_45;
      v88 = v96;
    }
    v37 = *(_QWORD *)(v35 + 8 * v88 + 42216);
  }
  else
  {
    v37 = *(_QWORD *)(v35 + 41968);
  }
LABEL_48:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v38 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v38, v37, 0, (uint64_t)&v98);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v34);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_52:
  v39 = a3[24];
  v40 = *(_QWORD *)(a1 + 56);
  v41 = (uint64_t *)(v40 + 41968);
  if ((byte_1EE3374E3 & 1) == 0)
  {
    dword_1ECE7AF70 += 2;
    byte_1EE3374E3 = 1;
    dword_1ECE7AF90 += 2;
    qword_1EE337608 = (uint64_t)&dword_1ECE7AF70;
    unk_1EE337610 = &dword_1ECE7AF90;
    dword_1ECE7AFB0 += 2;
    dword_1ECE7AFD0 += 2;
    qword_1EE337618 = (uint64_t)&dword_1ECE7AFB0;
    unk_1EE337620 = &dword_1ECE7AFD0;
  }
  v42 = *(_QWORD *)&_MergedGlobals_204[8 * v39 + 304];
  if (v42)
  {
    v43 = *(_DWORD *)v42;
    v44 = *(_DWORD *)(v42 + 4);
    *(_DWORD *)v42 += 2;
    if (v44)
    {
      if (v44 != 1)
      {
LABEL_57:
        v45 = *(_QWORD *)(v40 + 64760);
        if (!v45 || v42 != *(_QWORD *)(v45 + 8))
        {
          v45 = JSC::jsStringWithCacheSlowCase();
          v43 = *(_DWORD *)v42 - 2;
        }
        goto LABEL_60;
      }
      v77 = *(unsigned __int8 **)(v42 + 8);
      if ((*(_BYTE *)(v42 + 16) & 4) != 0)
      {
        v78 = *v77;
      }
      else
      {
        v91 = *(unsigned __int16 *)v77;
        if (v91 > 0xFF)
          goto LABEL_57;
        v78 = v91;
      }
      v45 = *(_QWORD *)(v40 + 8 * v78 + 42216);
    }
    else
    {
      v45 = *v41;
    }
LABEL_60:
    if (v43)
      *(_DWORD *)v42 = v43;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v42, (WTF::StringImpl *)v34);
    goto LABEL_62;
  }
  v45 = *v41;
LABEL_62:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v46, v45, 0, (uint64_t)&v98);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  v48 = WebCore::jsDate(a1);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v49 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v49, v48, 0, (uint64_t)&v98);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v50);
    else
      *(_DWORD *)v49 -= 2;
  }
  v51 = *((unsigned int *)a3 + 11);
  v52 = (v51 & 0x80000000) != 0
      ? COERCE__INT64((double)v51) + 0x2000000000000
      : v51 | 0xFFFE000000000000;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v53 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v53, v52, 0, (uint64_t)&v98);
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v54);
    else
      *(_DWORD *)v53 -= 2;
  }
  v55 = a3[40];
  v56 = *(_QWORD *)(a1 + 56);
  v57 = (uint64_t *)(v56 + 41968);
  if ((byte_1EE3374E4 & 1) == 0)
  {
    dword_1ECE7AFF0 += 2;
    byte_1EE3374E4 = 1;
    dword_1ECE7B010 += 2;
    qword_1EE3376C0 = (uint64_t)&dword_1ECE7AFF0;
    unk_1EE3376C8 = &dword_1ECE7B010;
    dword_1ECE7B030 += 2;
    dword_1ECE7B050 += 2;
    qword_1EE3376D0 = (uint64_t)&dword_1ECE7B030;
    unk_1EE3376D8 = &dword_1ECE7B050;
    dword_1ECE7B070 += 2;
    qword_1EE3376E0 = (uint64_t)&dword_1ECE7B070;
  }
  v58 = *(_QWORD *)&_MergedGlobals_204[8 * v55 + 488];
  if (v58)
  {
    v59 = *(_DWORD *)v58;
    v60 = *(_DWORD *)(v58 + 4);
    *(_DWORD *)v58 += 2;
    if (v60)
    {
      if (v60 != 1)
      {
LABEL_81:
        v61 = *(_QWORD *)(v56 + 64760);
        if (!v61 || v58 != *(_QWORD *)(v61 + 8))
        {
          v61 = JSC::jsStringWithCacheSlowCase();
          v59 = *(_DWORD *)v58 - 2;
        }
        goto LABEL_84;
      }
      v79 = *(unsigned __int8 **)(v58 + 8);
      if ((*(_BYTE *)(v58 + 16) & 4) != 0)
      {
        v80 = *v79;
      }
      else
      {
        v92 = *(unsigned __int16 *)v79;
        if (v92 > 0xFF)
          goto LABEL_81;
        v80 = v92;
      }
      v61 = *(_QWORD *)(v56 + 8 * v80 + 42216);
    }
    else
    {
      v61 = *v57;
    }
LABEL_84:
    if (v59)
      *(_DWORD *)v58 = v59;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v58, v54);
    goto LABEL_86;
  }
  v61 = *v57;
LABEL_86:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v62 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v62, v61, 0, (uint64_t)&v98);
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v63);
    else
      *(_DWORD *)v62 -= 2;
  }
  v64 = WebCore::jsDate(a1);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v65 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v65, v64, 0, (uint64_t)&v98);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v66);
    else
      *(_DWORD *)v65 -= 2;
  }
  v67 = *a3;
  v68 = *(_QWORD *)(a1 + 56);
  v69 = (uint64_t *)(v68 + 41968);
  if ((byte_1EE3374DF & 1) == 0)
  {
    unk_1EE337558 = &dword_1ECE7ADD0;
    dword_1ECE7ADD0 += 2;
    dword_1ECE7ADF0 += 2;
    unk_1EE337560 = &dword_1ECE7ADF0;
    byte_1EE3374DF = 1;
  }
  v70 = *(_QWORD *)&_MergedGlobals_204[8 * v67 + 128];
  if (!v70)
  {
    v73 = *v69;
    goto LABEL_104;
  }
  v71 = *(_DWORD *)v70;
  v72 = *(_DWORD *)(v70 + 4);
  *(_DWORD *)v70 += 2;
  if (v72)
  {
    if (v72 != 1)
    {
LABEL_99:
      v73 = *(_QWORD *)(v68 + 64760);
      if (!v73 || v70 != *(_QWORD *)(v73 + 8))
      {
        v73 = JSC::jsStringWithCacheSlowCase();
        v71 = *(_DWORD *)v70 - 2;
      }
      goto LABEL_102;
    }
    v81 = *(unsigned __int8 **)(v70 + 8);
    if ((*(_BYTE *)(v70 + 16) & 4) != 0)
    {
      v82 = *v81;
    }
    else
    {
      v93 = *(unsigned __int16 *)v81;
      if (v93 > 0xFF)
        goto LABEL_99;
      v82 = v93;
    }
    v73 = *(_QWORD *)(v68 + 8 * v82 + 42216);
  }
  else
  {
    v73 = *v69;
  }
LABEL_102:
  if (v71)
    *(_DWORD *)v70 = v71;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v70, v66);
LABEL_104:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v74 = v98;
  v98 = 0;
  v99 = v8;
  v100 = -1;
  v101 = 0x1000000;
  v102 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v74, v73, 0, (uint64_t)&v98);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v75);
    else
      *(_DWORD *)v74 -= 2;
  }
  return v8;
}

uint64_t WebCore::parseEnumeration<WebCore::AacBitstreamFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v14;
  uint64_t v18;
  unint64_t v19;

  v3 = a1;
  v19 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v19, a1);
  v4 = v18;
  if (!v18)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "aac" && v7 == 3)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_WORD *)(v6 + 1) != 25441)
        goto LABEL_15;
    }
    else if (*(_WORD *)v6 != 97 || *(_DWORD *)(v6 + 2) != 6488161)
    {
      goto LABEL_15;
    }
LABEL_36:
    v13 = &WebCore::parseEnumerationFromString<WebCore::AacBitstreamFormat>(WTF::String const&)::mappings;
    goto LABEL_37;
  }
  if (v6 == "aac" && v7 == 3)
    goto LABEL_36;
  if (v6 == "adts" || v7 != 4)
  {
    if (v7 != 4 || v6 != "adts")
      goto LABEL_15;
    goto LABEL_29;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 97)
      goto LABEL_15;
    if (*((_DWORD *)v6 + 1) != 7536756 || *(_DWORD *)(v6 + 2) != 7602276)
      goto LABEL_15;
    goto LABEL_29;
  }
  if (*v6 != 97 || *(_WORD *)(v6 + 1) != 29796 || *((_WORD *)v6 + 1) != 29556)
  {
LABEL_15:
    v9 = 0;
    v10 = 0;
    goto LABEL_38;
  }
LABEL_29:
  v13 = &off_1E321E778;
LABEL_37:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_38:
  v14 = v10 | (v9 << 8);
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14;
}

WebCore::JSAbortAlgorithm *WebCore::JSAbortAlgorithm::JSAbortAlgorithm(WebCore::JSAbortAlgorithm *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E321E7A0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(WebCore::JSAbortAlgorithm *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = v4 - 96, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 88))(v4 - 96)))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3226900;
    v10[1] = v9;
    v12 = v10;
    v13 = 1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v5, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    v6 = (WTF *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 2);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v6 + 2) = 0;
      }
      JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v6 + 8));
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
        *(_QWORD *)v6 = 0;
      }
      WTF::fastFree(v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSAbortAlgorithm::handleEvent(uint64_t a1, void *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  _BYTE v18[8];
  uint64_t v19;
  WTF *v20;
  uint64_t *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t *v28;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  v4 = (unsigned int *)(a1 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  MEMORY[0x19AEA3294](v27, *(_QWORD *)(***(_QWORD ***)(a1 + 24) + 56));
  v18[0] = 0;
  v20 = (WTF *)&v22;
  v21 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v22 = a2;
  v19 = 0x800000001;
  v28 = 0;
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v18, 0, 0, (uint64_t *)&v28), (v6 = v28) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v28, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  if (v21)
  {
    v28 = &v19;
    v15 = v21;
    v16 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v21, (uint64_t *)&v28);
    v17 = v15;
    v4 = (unsigned int *)(a1 + 16);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v16);
  }
  if (v20 != (WTF *)&v22 && v20)
    WTF::fastFree(v20, v6);
  MEMORY[0x19AEA32A0](v27);
  do
  {
    v12 = __ldaxr(v4);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v4));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)(a1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  return v11;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSAbortController>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v21;
  JSC::Structure *v22;
  JSC::JSCell *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  unint64_t SlowCase;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  JSC::JSCell *v47;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v49;
  JSC::JSGlobalObject *v50;
  JSC::VM *v51;
  JSC::Structure *v52;
  uint64_t FunctionRealm;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  int v61;
  JSC::JSObject *v62;
  unint64_t v63;
  WebCore::JSDOMGlobalObject *v64;
  JSC::Structure *v65;
  JSC::JSCell *v66;
  uint64_t v67;
  unint64_t SubclassStructure;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  JSC::VM *v74;
  JSC::VM *v76;
  _QWORD *v77;
  WTF *v78;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v76 = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v4 + 40));
  if (!v5)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v76, (uint64_t)"AbortController", 16);
  v6 = (WebCore::ScriptExecutionContext *)v5;
  v7 = bmalloc::api::isoAllocate();
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 1;
  v8 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v8 + 24) = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = &unk_1E33A4FC0;
  *(_QWORD *)(v8 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v8 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v8 + 32), v6);
  *(_QWORD *)v8 = off_1E33A0468;
  *(_QWORD *)(v8 + 32) = &unk_1E33A04E0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 136) = 10;
  *(_QWORD *)(v7 + 16) = v8;
  v9 = *(_QWORD *)(v4 + 40);
  v10 = *(_QWORD *)(v9 + 3296);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = ((unint64_t)&WebCore::JSAbortController::s_info + ~((_QWORD)&WebCore::JSAbortController::s_info << 32)) ^ (((unint64_t)&WebCore::JSAbortController::s_info + ~((_QWORD)&WebCore::JSAbortController::s_info << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(char ***)(v10 + 16 * v15);
    if (v16 == &WebCore::JSAbortController::s_info)
    {
LABEL_7:
      v18 = *(_QWORD *)(v10 + 16 * v15 + 8);
      if (v18)
        goto LABEL_9;
    }
    else
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(char ***)(v10 + 16 * v15);
        ++v17;
        if (v16 == &WebCore::JSAbortController::s_info)
          goto LABEL_7;
      }
    }
  }
  v19 = *(uint64_t **)(v9 + 56);
  Structure = WebCore::JSAbortControllerPrototype::createStructure(v19, *(_QWORD *)(v4 + 40), *(JSC::JSCell **)(v9 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v23 = (JSC::JSCell *)WebCore::JSAbortControllerPrototype::create((WebCore::JSAbortControllerPrototype *)v19, Structure, v21, v22);
  v24 = WebCore::JSAbortController::createStructure(v19, v9, v23);
  v18 = WebCore::cacheDOMStructure((JSCell *)v9, v24, (uint64_t)&WebCore::JSAbortController::s_info);
LABEL_9:
  v25 = *(_QWORD *)(v9 + 56);
  v26 = *(_QWORD *)(v25 + 41456);
  v27 = *(_QWORD *)(v26 + 23536);
  v28 = *(_QWORD **)(v27 + 3368);
  if (v28)
    goto LABEL_29;
  v29 = *(_QWORD *)(v26 + 22648);
  v30 = __ldaxr((unsigned __int8 *)v29);
  v74 = v3;
  if (v30)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v29))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v29);
LABEL_14:
  v31 = *(_QWORD *)(v29 + 2824);
  if (!*(_QWORD *)(v31 + 3368))
  {
    v32 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v78, "IsoSpace T");
    v77 = 0;
    MEMORY[0x19AEA3204](v32, &v78, v25 + 192, v25 + 1872, 32, 8, &v77);
    v34 = (uint64_t)v77;
    v77 = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v78;
    v78 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree(v35, v33);
      else
        --*(_DWORD *)v35;
    }
    v36 = *(_QWORD *)(v31 + 3368);
    *(_QWORD *)(v31 + 3368) = v32;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v27 + 3368);
  *(_QWORD *)(v27 + 3368) = v28;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v29);
  v3 = v74;
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v29))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_29:
  SlowCase = v28[3];
  if (SlowCase >= v28[4])
  {
    SlowCase = v28[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
    }
    else
    {
      v73 = *(_QWORD *)(SlowCase + 8) ^ v28[6];
      v28[4] = SlowCase + HIDWORD(v73);
      v28[5] = SlowCase + (int)v73;
      v28[3] = SlowCase + 32;
    }
  }
  else
  {
    v28[3] = SlowCase + 32;
  }
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v18);
  *(_QWORD *)(SlowCase + 24) = v7;
  if (*(_BYTE *)(v25 + 755))
    __dmb(0xAu);
  v42 = *(_QWORD *)(v9 + 3320);
  if ((byte_1EE334B60 & 1) == 0)
  {
    qword_1EE334B58 = (uint64_t)&off_1E3222E30;
    byte_1EE334B60 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE334B58;
    Allocator[2] = v42;
    v46 = *(_QWORD *)v7;
    *(_QWORD *)v7 = Allocator;
    if (!v46)
      goto LABEL_44;
LABEL_67:
    *(_QWORD *)(v46 + 8) = 3;
    goto LABEL_44;
  }
  v78 = (WTF *)v7;
  if ((SlowCase & 8) != 0)
    v70 = (SlowCase - 112) | 1;
  else
    v70 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v70 & 1) != 0)
    v71 = v70 + 47;
  else
    v71 = *(_QWORD *)v70 + 32;
  v72 = *(_QWORD **)(v71 + 16);
  if (!v72)
    v72 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v71 + 16) = *v72;
  *v72 = SlowCase;
  v72[1] = &qword_1EE334B58;
  v72[2] = v42;
  v77 = v72;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v78, (uint64_t *)&v77);
  v46 = (uint64_t)v77;
  if (v77)
    goto LABEL_67;
LABEL_44:
  v47 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v47 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v47);
    if (Object)
    {
      v50 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v51 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v49);
        if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
        {
          v54 = *(_QWORD *)(FunctionRealm + 3296);
          if (v54)
          {
            v55 = *(_DWORD *)(v54 - 8);
            v56 = ((unint64_t)&WebCore::JSAbortController::s_info
                 + ~((_QWORD)&WebCore::JSAbortController::s_info << 32)) ^ (((unint64_t)&WebCore::JSAbortController::s_info
                                                                           + ~((_QWORD)&WebCore::JSAbortController::s_info << 32)) >> 22);
            v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
            v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
            v59 = v55 & ((v58 >> 31) ^ v58);
            v60 = *(char ***)(v54 + 16 * v59);
            if (v60 == &WebCore::JSAbortController::s_info)
            {
LABEL_53:
              v62 = *(JSC::JSObject **)(v54 + 16 * v59 + 8);
              if (v62)
              {
LABEL_55:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v50, v62, v52);
                if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v51, SubclassStructure);
                goto LABEL_57;
              }
            }
            else
            {
              v61 = 1;
              while (v60)
              {
                v59 = ((_DWORD)v59 + v61) & v55;
                v60 = *(char ***)(v54 + 16 * v59);
                ++v61;
                if (v60 == &WebCore::JSAbortController::s_info)
                  goto LABEL_53;
              }
            }
          }
          v63 = WebCore::JSAbortControllerPrototype::createStructure((uint64_t *)v51, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v63 + 16) |= 0x80000u;
          v66 = (JSC::JSCell *)WebCore::JSAbortControllerPrototype::create(v51, v63, v64, v65);
          v67 = WebCore::JSAbortController::createStructure((uint64_t *)v51, FunctionRealm, v66);
          v62 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v67, (uint64_t)&WebCore::JSAbortController::s_info);
          goto LABEL_55;
        }
      }
    }
  }
LABEL_57:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return (_QWORD *)SlowCase;
}

uint64_t WebCore::JSAbortController::destroy(uint64_t this, JSC::JSCell *a2)
{
  _DWORD *v2;
  WebCore::AbortSignal *v3;
  bmalloc::api *v4;
  void *v5;

  v2 = *(_DWORD **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = (WebCore::AbortSignal *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*((_DWORD *)v3 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v3, a2);
          bmalloc::api::isoDeallocate(v4, v5);
        }
        else
        {
          --*((_DWORD *)v3 + 6);
        }
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::JSAbortController::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAbortController::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v5)
    v6 = *(_BYTE *)(a2 + 130) == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = *(_QWORD *)(a2 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v5 == v14)
        return result;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x194835528);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSAbortController::visitChildren(WebCore::JSAbortController *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  char v19;

  v17[0] = a2;
  v17[1] = this;
  v19 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v18 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1948356B4);
  }
  *((_QWORD *)a2 + 11) = v17;
  result = JSC::JSObject::visitChildren();
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if (v7)
    v8 = *((_BYTE *)a2 + 130) == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = *((_QWORD *)a2 + 15);
    v9 = *(_QWORD *)(result + 48);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v15 + 16);
      if (!v16)
        break;
      if (v7 == v16)
        goto LABEL_17;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x194835658);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_17:
  *(_QWORD *)(v17[0] + 88) = v18;
  return result;
}

uint64_t WebCore::JSAbortControllerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAbortControllerPrototype::create(WebCore::JSAbortControllerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSAbortController::s_info, &WebCore::JSAbortControllerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3288);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSAbortController>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAbortController::s_info + ~((_QWORD)&WebCore::JSAbortController::s_info << 32)) ^ (((unint64_t)&WebCore::JSAbortController::s_info + ~((_QWORD)&WebCore::JSAbortController::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAbortController::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAbortController::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAbortControllerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAbortControllerPrototype::create((WebCore::JSAbortControllerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAbortController::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAbortController::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3288) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAbortControllerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAbortControllerPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAbortController_signal(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AbortSignal>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16));
}

uint64_t WebCore::JSAbortControllerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSAbortControllerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  WebCore::AbortSignal *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  bmalloc::api *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  bmalloc::api *v26;
  void *v27;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(bmalloc::api **)(v7 + 16 * v13);
      if (v14 != v3)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(bmalloc::api **)(v7 + 16 * v13);
          ++v15;
          if (v14 == v3)
            goto LABEL_17;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_17:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    v5 = (WebCore::AbortSignal *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v5, a2);
        bmalloc::api::isoDeallocate(v26, v27);
      }
      else
      {
        --*((_DWORD *)v5 + 6);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
}

uint64_t WebCore::JSAbortSignal::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 144);
  if (!v4 || (v4[1] & 3) != 0)
    v5 = 0;
  else
    v5 = *v4;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v5);
}

uint64_t WebCore::JSAbortSignal::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSAbortSignal::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAbortSignal::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAbortSignal::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSAbortSignal::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAbortSignal::visitChildren(WebCore::JSAbortSignal *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 144);
    if (!v6 || (v6[1] & 3) != 0)
      v7 = 0;
    else
      v7 = *v6;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

uint64_t WebCore::JSAbortSignalPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAbortSignalPrototype::create(WebCore::JSAbortSignalPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSAbortSignal::s_info, &WebCore::JSAbortSignalPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char **v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  unint64_t v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3296);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v53) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v51 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v51);
    v5[2] = SlowCase + (int)v51;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v53, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v52 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v52);
    v10[2848] = v2 + (int)v52;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v53 = 0;
  v54 = v2;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v53);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v53);
  v14 = v53;
  v53 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v53 = 0;
  v54 = v2;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v53);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSAbortSignal::s_info + ~((_QWORD)&WebCore::JSAbortSignal::s_info << 32)) ^ (((unint64_t)&WebCore::JSAbortSignal::s_info + ~((_QWORD)&WebCore::JSAbortSignal::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSAbortSignal::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSAbortSignal::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSAbortSignalPrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSAbortSignalPrototype::create((WebCore::JSAbortSignalPrototype *)a1, Structure, v29, v30);
    v32 = WebCore::JSAbortSignal::createStructure((uint64_t *)a1, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSAbortSignal::s_info);
  }
  v33 = (int *)(a1 + 93124);
  v34 = *(_QWORD *)(v26 + 48);
  v53 = 0;
  v54 = v2;
  v55 = -1;
  v56 = 0x1000000;
  v57 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v34, 14, (uint64_t)&v53);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSAbortSignal::s_info, &WebCore::JSAbortSignalConstructorTableValues, (JSC::JSObject *)v2);
  v35 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v36 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v37 = (char **)(16 * v35);
  if ((_DWORD)v35)
    v38 = v37 == &WebCore::JSDOMWindowBase::s_info;
  else
    v38 = 1;
  v39 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v38)
  {
    v40 = 16 * v35;
    do
    {
      v40 = *(_QWORD *)(v40 + 16);
      v39 = v40 != 0;
    }
    while ((char **)v40 != &WebCore::JSDOMWindowBase::s_info && v40 != 0);
  }
  if (!v39)
  {
    if ((_DWORD)v35 && v37 != &WebCore::JSWorkerGlobalScopeBase::s_info)
    {
      do
      {
        v37 = (char **)v37[2];
        v36 = v37 != 0;
      }
      while (v37 != &WebCore::JSWorkerGlobalScopeBase::s_info && v37 != 0);
    }
    if (!v36)
    {
      WTF::AtomStringImpl::addLiteral();
      v43 = v53;
      v44 = *v33;
      *v33 = 1;
      LODWORD(v53) = -1;
      WORD2(v53) = 1;
      JSC::JSObject::deleteProperty();
      *v33 = v44;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v45);
        else
          *(_DWORD *)v43 -= 2;
      }
    }
  }
  v46 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a2);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 136))(v46) + 432) & 4) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v47 = v53;
    v48 = *v33;
    *v33 = 1;
    LODWORD(v53) = -1;
    WORD2(v53) = 1;
    JSC::JSObject::deleteProperty();
    *v33 = v48;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v49);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3296) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAbortSignalConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAbortSignalPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAbortSignal_aborted(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 156))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsAbortSignal_reason(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE *v4;

  v2 = *(_QWORD *)(a2 + 24);
  result = *(_QWORD *)(v2 + 136);
  if (!result)
  {
    v4 = *(_BYTE **)(v2 + 144);
    if (v4 && *(_QWORD *)v4)
    {
      if ((v4[8] & 3) != 0)
        return 10;
      else
        return *(_QWORD *)v4;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::jsAbortSignal_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::AbortSignal::~AbortSignal(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSAbortSignal_onabort(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSAbortSignal::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSAbortSignal::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 64), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

void WebCore::JSAbortSignalOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::AbortSignal *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::AbortSignal *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::AbortSignal **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::AbortSignal **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::AbortSignal **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::AbortSignal::~AbortSignal(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::createWrapper<WebCore::AbortSignal,WebCore::AbortSignal>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *Allocator;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  WTF *v55;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSAbortSignal::s_info + ~((_QWORD)&WebCore::JSAbortSignal::s_info << 32)) ^ (((unint64_t)&WebCore::JSAbortSignal::s_info + ~((_QWORD)&WebCore::JSAbortSignal::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSAbortSignal::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSAbortSignal::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSAbortSignalPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSAbortSignalPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSAbortSignal::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSAbortSignal::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 3376);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v53 = *(_QWORD *)(v28 + 3376);
  if (!v53)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v55, "IsoSpace T");
    v54 = 0;
    MEMORY[0x19AEA3204](v29, &v55, v22 + 192, v22 + 1872, 32, 8, &v54);
    v31 = (uint64_t)v54;
    v54 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v55;
    v55 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v53 = v29;
    v33 = *(_QWORD *)(v28 + 3376);
    *(_QWORD *)(v28 + 3376) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v53);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 3376);
  *(_QWORD *)(v24 + 3376) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v52 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v52);
    v25[5] = SlowCase + (int)v52;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v41;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a1 + 415);
  if ((byte_1EE334B70 & 1) == 0)
  {
    qword_1EE334B68 = (uint64_t)&off_1E3392C48;
    byte_1EE334B70 = 1;
  }
  if (v5)
    v43 = (uint64_t *)((char *)v5 + 8);
  else
    v43 = 0;
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v44 = (SlowCase - 112) | 1;
    else
      v44 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v44 & 1) != 0)
      v45 = v44 + 47;
    else
      v45 = *(_QWORD *)v44 + 32;
    Allocator = *(_QWORD **)(v45 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v45 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE334B68;
    Allocator[2] = v42;
    v47 = *v43;
    *v43 = (uint64_t)Allocator;
    if (!v47)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v47 + 8) = 3;
    return SlowCase;
  }
  v55 = v5;
  if ((SlowCase & 8) != 0)
    v49 = (SlowCase - 112) | 1;
  else
    v49 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  v51 = *(_QWORD **)(v50 + 16);
  if (!v51)
    v51 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *v51;
  *v51 = SlowCase;
  v51[1] = &qword_1EE334B68;
  v51[2] = v42;
  v54 = v51;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v55, (uint64_t *)&v54);
  v47 = (uint64_t)v54;
  if (v54)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::AbortSignal>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t result;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::AbortSignal *v18;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (!v10)
      goto LABEL_5;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 16 * v15);
    if (v16 != a3)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 16 * v15);
        ++v17;
        if (v16 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v18 = (WebCore::AbortSignal *)a3;
  if (*(uint64_t (***)(WebCore::AbortSignal *__hidden))a3 == off_1E33A0468)
  {
    v5 = WebCore::createWrapper<WebCore::AbortSignal,WebCore::AbortSignal>(a2, &v18, (WebCore::JSDOMGlobalObject *)a3);
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v18, v6);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*((_DWORD *)v18 + 6);
      }
    }
    return v5;
  }
  result = 413;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAbortSignal::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSAbortSignal::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSAbortSignal::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

WTF::StringImpl *WebCore::JSAbstractRangePrototype::finishCreation(WebCore::JSAbstractRangePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(a2, (uint64_t)&WebCore::JSAbstractRange::s_info, &WebCore::JSAbstractRangePrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSAbstractRange::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAbstractRange::JSAbstractRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSAbstractRange::createPrototype(WebCore::JSAbstractRange *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSAbstractRangePrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbstractRange>,(WebCore::DOMConstructorID)413>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3304);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v20) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v18);
    v5[2] = SlowCase + (int)v18;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v20, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbstractRange>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v19 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v19);
    v9[2848] = v2 + (int)v19;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v20);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v20);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v20);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSAbstractRange>((WebCore::JSAbstractRange *)a1, (JSC::JSCell **)a2)+ 48);
  v20 = 0;
  v21 = v2;
  v22 = -1;
  v23 = 0x1000000;
  v24 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v16, 14, (uint64_t)&v20);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3304) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAbstractRangeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAbstractRangePrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbstractRange>,(WebCore::DOMConstructorID)413>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAbstractRange_startContainer(WebCore::DOMWrapperWorld **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v19;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  if (*(_BYTE *)(v3 + 3328))
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return Wrapper;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == v4)
      {
LABEL_11:
        v6 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v4)
            goto LABEL_11;
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v19 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v3, (WebCore::JSDOMGlobalObject *)&v19, v5);
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v16);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return Wrapper;
}

unint64_t WebCore::jsAbstractRange_startOffset(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsAbstractRange_endContainer(WebCore::DOMWrapperWorld **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  unint64_t Wrapper;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v19;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 32))(*(_QWORD *)(a2 + 24));
  if (*(_BYTE *)(v3 + 3328))
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return Wrapper;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == v4)
      {
LABEL_11:
        v6 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v4)
            goto LABEL_11;
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v19 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v3, (WebCore::JSDOMGlobalObject *)&v19, v5);
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, v16);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return Wrapper;
}

unint64_t WebCore::jsAbstractRange_endOffset(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsAbstractRange_collapsed(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 48))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSAbstractRange::subspaceForImpl(WebCore::JSAbstractRange *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3384);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3384))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3384);
    *(_QWORD *)(v8 + 3384) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3384);
  *(_QWORD *)(v3 + 3384) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAbstractRangeOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSAbstractRangeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::JSAbstractRange::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSAbstractRange::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSAbstractRange::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::AddEventListenerOptions>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, uint64_t a3@<X8>)
{
  WebCore::AbortSignal *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v10;
  JSC::VM *v11;
  double v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  BOOL v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore::AbortSignal *v22;
  JSC::VM *v23;
  double v24;
  __int16 v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  _BOOL4 v38;
  WebCore::AbortSignal *v39[2];

  v4 = (WebCore::AbortSignal *)*((_QWORD *)result + 7);
  v39[1] = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v22 = 0;
    v10 = 0;
    v38 = 0;
    goto LABEL_37;
  }
  v5 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
    goto LABEL_49;
  }
  v7 = (JSC::Structure *)Object;
  v38 = 0;
  v39[0] = 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, v5, (unint64_t)v36);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v8);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_49;
  }
  if (v9 == 10)
  {
    v10 = 0;
    goto LABEL_15;
  }
  v11 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if (v9 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v9 == 0;
    goto LABEL_68;
  }
  *(_QWORD *)&v12 = v9 - 0x2000000000000;
  if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v10 = v9 == 7;
      goto LABEL_14;
    }
    v27 = *(unsigned __int8 *)(v9 + 5);
    if (v27 == 3)
    {
      v30 = *(_DWORD *)(v9 + 8);
    }
    else
    {
      if (v27 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v10 = 1;
          goto LABEL_14;
        }
        v26 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) == (_QWORD)v5;
        goto LABEL_68;
      }
      v28 = *(_QWORD *)(v9 + 8);
      if ((v28 & 1) != 0)
        v29 = (int *)(v9 + 16);
      else
        v29 = (int *)(v28 + 4);
      v30 = *v29;
    }
    v26 = v30 == 0;
LABEL_68:
    v10 = !v26;
    goto LABEL_14;
  }
  v10 = v12 > 0.0 || v12 < 0.0;
LABEL_14:
  if (*((_DWORD *)v11 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    if ((_DWORD)result)
      goto LABEL_49;
  }
LABEL_15:
  LOBYTE(v38) = v10;
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v7, v5, (unint64_t)v36);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v13);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_49;
  }
  if (v14 != 10)
  {
    v16 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if (v14 >= 0xFFFE000000000000)
    {
      v31 = (_DWORD)v14 == 0;
      goto LABEL_81;
    }
    *(_QWORD *)&v17 = v14 - 0x2000000000000;
    if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v17 <= 0.0)
      {
        v15 = v17 < 0.0;
        goto LABEL_25;
      }
    }
    else
    {
      if ((v14 & 0xFFFE000000000002) != 0)
      {
        v15 = v14 == 7;
        goto LABEL_25;
      }
      v32 = *(unsigned __int8 *)(v14 + 5);
      if (v32 == 3)
      {
        v35 = *(_DWORD *)(v14 + 8);
LABEL_98:
        v31 = v35 == 0;
        goto LABEL_81;
      }
      if (v32 == 2)
      {
        v33 = *(_QWORD *)(v14 + 8);
        if ((v33 & 1) != 0)
          v34 = (int *)(v14 + 16);
        else
          v34 = (int *)(v33 + 4);
        v35 = *v34;
        goto LABEL_98;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v31 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)v5;
LABEL_81:
        v15 = !v31;
LABEL_25:
        if (*((_DWORD *)v16 + 20))
        {
          result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v16);
          if ((_DWORD)result)
            goto LABEL_49;
        }
        goto LABEL_26;
      }
    }
    v15 = 1;
    goto LABEL_25;
  }
  v15 = 0;
LABEL_26:
  HIBYTE(v38) = v15;
  WTF::AtomStringImpl::addLiteral();
  v19 = JSC::JSObject::get(v7, v5, (unint64_t)v36);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v18);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_49;
  }
  if (v19 != 10)
  {
    v23 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if (v19 >= 0xFFFE000000000000)
    {
      v25 = (_DWORD)v19 != 0;
    }
    else
    {
      *(_QWORD *)&v24 = v19 - 0x2000000000000;
      if (v19 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v25 = v24 > 0.0 || v24 < 0.0;
      }
      else if ((v19 & 0xFFFE000000000002) != 0)
      {
        v25 = v19 == 7;
      }
      else
      {
        v25 = JSC::JSCell::toBoolean(v19, (uint64_t)v5);
      }
    }
    if (*((_DWORD *)v23 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v23);
      if ((_DWORD)result)
        goto LABEL_49;
    }
    *(_WORD *)((char *)&v38 + 1) = v25 | 0x100;
  }
  WTF::AtomStringImpl::addLiteral();
  result = (JSC::JSGlobalObject *)JSC::JSObject::get(v7, v5, (unint64_t)v36);
  v21 = (uint64_t)result;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v36, v20);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_49;
  }
  if (v21 == 10)
  {
    v22 = 0;
LABEL_37:
    *(_BYTE *)a3 = v10;
    *(_WORD *)(a3 + 1) = *(_WORD *)((char *)&v38 + 1);
    *(_BYTE *)(a3 + 3) = HIBYTE(v38);
    v39[0] = 0;
    *(_QWORD *)(a3 + 8) = v22;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  result = (JSC::JSGlobalObject *)WebCore::convert<WebCore::IDLInterface<WebCore::AbortSignal>>(&v36, (uint64_t)v5, v21);
  if (!v37)
  {
    result = (JSC::JSGlobalObject *)WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>>::operator=(v39, v36);
    v10 = v38;
    v22 = v39[0];
    goto LABEL_37;
  }
LABEL_49:
  *(_DWORD *)(a3 + 16) = 1;
  return result;
}

_QWORD *WebCore::convert<WebCore::IDLInterface<WebCore::AbortSignal>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  int v9;
  uint64_t v10;

  v3 = result;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_12;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSAbortSignal::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSAbortSignal::s_info && v6 != 0);
  }
  if (v5 && (v10 = *(_QWORD *)(a3 + 24)) != 0)
  {
    v9 = 0;
    *result = v10;
  }
  else
  {
LABEL_12:
    result = (_QWORD *)JSC::throwTypeError();
    v9 = 1;
  }
  *((_DWORD *)v3 + 2) = v9;
  return result;
}

WebCore::AbortSignal **WTF::RefPtr<WebCore::AbortSignal,WTF::RawPtrTraits<WebCore::AbortSignal>,WTF::DefaultRefDerefTraits<WebCore::AbortSignal>>::operator=(WebCore::AbortSignal **a1, WebCore::AbortSignal *a2)
{
  WebCore::AbortSignal *v3;
  bmalloc::api *v5;
  void *v6;

  if (a2)
    ++*((_DWORD *)a2 + 6);
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

void WebCore::convertDictionary<WebCore::AddressErrors>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSC::VM *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  JSC::VM *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  JSC::VM *v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  WTF::StringImpl *v73;
  int hasExceptionsAfterHandlingTraps;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  char v84;
  int v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  WTF::StringImpl *v94[2];
  JSC::VM *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v95 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v93 = 0u;
    *(_OWORD *)v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
LABEL_179:
    v69 = v89;
    v70 = v90;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)a3 = v69;
    *(_OWORD *)(a3 + 16) = v70;
    v71 = v91;
    v72 = v92;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)(a3 + 32) = v71;
    *(_OWORD *)(a3 + 48) = v72;
    *(_OWORD *)(a3 + 64) = v93;
    v73 = v94[0];
    v93 = 0u;
    *(_OWORD *)v94 = 0u;
    *(_QWORD *)(a3 + 80) = v73;
    *(_QWORD *)(a3 + 88) = v5;
    *(_DWORD *)(a3 + 96) = 0;
LABEL_180:
    WebCore::AddressErrors::~AddressErrors((WebCore::AddressErrors *)&v89, this);
    return;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(this);
    if (Object)
    {
      v8 = (JSC::Structure *)Object;
      v93 = 0u;
      *(_OWORD *)v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      WTF::AtomStringImpl::addLiteral();
      v10 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
          WTF::StringImpl::destroy(v87, v9);
        else
          *(_DWORD *)v87 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
        goto LABEL_279;
      if (v10 == 10)
        goto LABEL_19;
      v87 = (WTF::StringImpl *)v10;
      v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
        goto LABEL_16;
      }
      v12 = *(WTF::StringImpl **)(v10 + 8);
      if ((v12 & 1) != 0)
      {
        v12 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v10, a2);
        if (!v12)
          goto LABEL_15;
      }
      else if (!v12)
      {
LABEL_15:
        v97 = v12;
LABEL_16:
        if (*((_DWORD *)v11 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          v13 = v97;
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_276;
        }
        else
        {
          v13 = v97;
        }
        *(_QWORD *)&v89 = v13;
LABEL_19:
        WTF::AtomStringImpl::addLiteral();
        v14 = v87;
        v16 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v15);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
          goto LABEL_279;
        if (v16 == 10)
          goto LABEL_33;
        v87 = (WTF::StringImpl *)v16;
        v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
        if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
          goto LABEL_30;
        }
        v18 = *(WTF::StringImpl **)(v16 + 8);
        if ((v18 & 1) != 0)
        {
          v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, a2);
          if (!v18)
            goto LABEL_29;
        }
        else if (!v18)
        {
LABEL_29:
          v97 = v18;
LABEL_30:
          if (*((_DWORD *)v17 + 20))
          {
            v75 = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
            v13 = v97;
            if (v75)
              goto LABEL_276;
          }
          else
          {
            v13 = v97;
          }
          *((_QWORD *)&v89 + 1) = v13;
LABEL_33:
          WTF::AtomStringImpl::addLiteral();
          v19 = v87;
          v21 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v20);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
            goto LABEL_279;
          if (v21 == 10)
            goto LABEL_47;
          v87 = (WTF::StringImpl *)v21;
          v22 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v21 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v21 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
            goto LABEL_44;
          }
          v23 = *(WTF::StringImpl **)(v21 + 8);
          if ((v23 & 1) != 0)
          {
            v23 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v21, a2);
            if (!v23)
              goto LABEL_43;
          }
          else if (!v23)
          {
LABEL_43:
            v97 = v23;
LABEL_44:
            if (*((_DWORD *)v22 + 20))
            {
              v76 = JSC::VM::hasExceptionsAfterHandlingTraps(v22);
              v13 = v97;
              if (v76)
                goto LABEL_276;
            }
            else
            {
              v13 = v97;
            }
            *(_QWORD *)&v90 = v13;
LABEL_47:
            WTF::AtomStringImpl::addLiteral();
            v24 = v87;
            v26 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v25);
              else
                *(_DWORD *)v24 -= 2;
            }
            if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
              goto LABEL_279;
            if (v26 == 10)
              goto LABEL_61;
            v87 = (WTF::StringImpl *)v26;
            v27 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
              goto LABEL_58;
            }
            v28 = *(WTF::StringImpl **)(v26 + 8);
            if ((v28 & 1) != 0)
            {
              v28 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, a2);
              if (!v28)
                goto LABEL_57;
            }
            else if (!v28)
            {
LABEL_57:
              v97 = v28;
LABEL_58:
              if (*((_DWORD *)v27 + 20))
              {
                v77 = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
                v13 = v97;
                if (v77)
                  goto LABEL_276;
              }
              else
              {
                v13 = v97;
              }
              *((_QWORD *)&v90 + 1) = v13;
LABEL_61:
              WTF::AtomStringImpl::addLiteral();
              v29 = v87;
              v31 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v30);
                else
                  *(_DWORD *)v29 -= 2;
              }
              if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                goto LABEL_279;
              if (v31 == 10)
                goto LABEL_75;
              v87 = (WTF::StringImpl *)v31;
              v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if ((v31 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v31 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
                goto LABEL_72;
              }
              v33 = *(WTF::StringImpl **)(v31 + 8);
              if ((v33 & 1) != 0)
              {
                v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v31, a2);
                if (!v33)
                  goto LABEL_71;
              }
              else if (!v33)
              {
LABEL_71:
                v97 = v33;
LABEL_72:
                if (*((_DWORD *)v32 + 20))
                {
                  v78 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
                  v13 = v97;
                  if (v78)
                    goto LABEL_276;
                }
                else
                {
                  v13 = v97;
                }
                *(_QWORD *)&v91 = v13;
LABEL_75:
                WTF::AtomStringImpl::addLiteral();
                v34 = v87;
                v36 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, v35);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                  goto LABEL_279;
                if (v36 == 10)
                  goto LABEL_89;
                v87 = (WTF::StringImpl *)v36;
                v37 = (JSC::VM *)*((_QWORD *)a2 + 7);
                if ((v36 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v36 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
                  goto LABEL_86;
                }
                v38 = *(WTF::StringImpl **)(v36 + 8);
                if ((v38 & 1) != 0)
                {
                  v38 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v36, a2);
                  if (!v38)
                    goto LABEL_85;
                }
                else if (!v38)
                {
LABEL_85:
                  v97 = v38;
LABEL_86:
                  if (*((_DWORD *)v37 + 20))
                  {
                    v79 = JSC::VM::hasExceptionsAfterHandlingTraps(v37);
                    v13 = v97;
                    if (v79)
                      goto LABEL_276;
                  }
                  else
                  {
                    v13 = v97;
                  }
                  *((_QWORD *)&v91 + 1) = v13;
LABEL_89:
                  WTF::AtomStringImpl::addLiteral();
                  v39 = v87;
                  v41 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, v40);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                    goto LABEL_279;
                  if (v41 == 10)
                    goto LABEL_103;
                  v87 = (WTF::StringImpl *)v41;
                  v42 = (JSC::VM *)*((_QWORD *)a2 + 7);
                  if ((v41 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v41 + 5) != 2)
                  {
                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
                    goto LABEL_100;
                  }
                  v43 = *(WTF::StringImpl **)(v41 + 8);
                  if ((v43 & 1) != 0)
                  {
                    v43 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v41, a2);
                    if (!v43)
                      goto LABEL_99;
                  }
                  else if (!v43)
                  {
LABEL_99:
                    v97 = v43;
LABEL_100:
                    if (*((_DWORD *)v42 + 20))
                    {
                      v80 = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
                      v13 = v97;
                      if (v80)
                        goto LABEL_276;
                    }
                    else
                    {
                      v13 = v97;
                    }
                    *(_QWORD *)&v92 = v13;
LABEL_103:
                    WTF::AtomStringImpl::addLiteral();
                    v44 = v87;
                    v46 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, v45);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                      goto LABEL_279;
                    if (v46 == 10)
                      goto LABEL_117;
                    v87 = (WTF::StringImpl *)v46;
                    v47 = (JSC::VM *)*((_QWORD *)a2 + 7);
                    if ((v46 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v46 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
                      goto LABEL_114;
                    }
                    v48 = *(WTF::StringImpl **)(v46 + 8);
                    if ((v48 & 1) != 0)
                    {
                      v48 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v46, a2);
                      if (!v48)
                        goto LABEL_113;
                    }
                    else if (!v48)
                    {
LABEL_113:
                      v97 = v48;
LABEL_114:
                      if (*((_DWORD *)v47 + 20))
                      {
                        v81 = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
                        v13 = v97;
                        if (v81)
                          goto LABEL_276;
                      }
                      else
                      {
                        v13 = v97;
                      }
                      *((_QWORD *)&v92 + 1) = v13;
LABEL_117:
                      WTF::AtomStringImpl::addLiteral();
                      v49 = v87;
                      v51 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                          WTF::StringImpl::destroy(v49, v50);
                        else
                          *(_DWORD *)v49 -= 2;
                      }
                      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                        goto LABEL_279;
                      if (v51 == 10)
                        goto LABEL_131;
                      v87 = (WTF::StringImpl *)v51;
                      v52 = (JSC::VM *)*((_QWORD *)a2 + 7);
                      if ((v51 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v51 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
                        goto LABEL_128;
                      }
                      v53 = *(WTF::StringImpl **)(v51 + 8);
                      if ((v53 & 1) != 0)
                      {
                        v53 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v51, a2);
                        if (!v53)
                          goto LABEL_127;
                      }
                      else if (!v53)
                      {
LABEL_127:
                        v97 = v53;
LABEL_128:
                        if (*((_DWORD *)v52 + 20))
                        {
                          v82 = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
                          v13 = v97;
                          if (v82)
                            goto LABEL_276;
                        }
                        else
                        {
                          v13 = v97;
                        }
                        *(_QWORD *)&v93 = v13;
LABEL_131:
                        WTF::AtomStringImpl::addLiteral();
                        v54 = v87;
                        v56 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                        if (v54)
                        {
                          if (*(_DWORD *)v54 == 2)
                            WTF::StringImpl::destroy(v54, v55);
                          else
                            *(_DWORD *)v54 -= 2;
                        }
                        if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                          goto LABEL_279;
                        if (v56 == 10)
                        {
LABEL_145:
                          WTF::AtomStringImpl::addLiteral();
                          v59 = v87;
                          v60 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                          if (v59)
                          {
                            if (*(_DWORD *)v59 == 2)
                              WTF::StringImpl::destroy(v59, this);
                            else
                              *(_DWORD *)v59 -= 2;
                          }
                          if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                            goto LABEL_279;
                          if (v60 == 10)
                          {
LABEL_162:
                            WTF::AtomStringImpl::addLiteral();
                            v65 = v87;
                            v66 = JSC::JSObject::get(v8, a2, (unint64_t)v87);
                            if (v65)
                            {
                              if (*(_DWORD *)v65 == 2)
                                WTF::StringImpl::destroy(v65, this);
                              else
                                *(_DWORD *)v65 -= 2;
                            }
                            if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
                              goto LABEL_279;
                            if (v66 == 10)
                            {
                              v5 = v94[1];
                              goto LABEL_179;
                            }
                            v87 = (WTF::StringImpl *)v66;
                            v67 = (JSC::VM *)*((_QWORD *)a2 + 7);
                            if ((v66 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v66 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
LABEL_174:
                              if (!*((_DWORD *)v67 + 20))
                              {
                                v5 = v97;
                                goto LABEL_176;
                              }
                              v86 = JSC::VM::hasExceptionsAfterHandlingTraps(v67);
                              v5 = v97;
                              if (!v86)
                              {
LABEL_176:
                                if (v94[1])
                                {
                                  if (*(_DWORD *)v94[1] == 2)
                                    WTF::StringImpl::destroy(v94[1], this);
                                  else
                                    *(_DWORD *)v94[1] -= 2;
                                }
                                goto LABEL_179;
                              }
                              v97 = 0;
                              if (v5)
                              {
                                if (*(_DWORD *)v5 != 2)
                                {
                                  *(_DWORD *)v5 -= 2;
                                  goto LABEL_279;
                                }
                                v13 = v5;
LABEL_294:
                                WTF::StringImpl::destroy(v13, this);
                                goto LABEL_279;
                              }
                              goto LABEL_279;
                            }
                            v68 = *(WTF::StringImpl **)(v66 + 8);
                            if ((v68 & 1) != 0)
                            {
                              v68 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v66, a2);
                              if (!v68)
                                goto LABEL_173;
                            }
                            else if (!v68)
                            {
LABEL_173:
                              v97 = v68;
                              goto LABEL_174;
                            }
                            *(_DWORD *)v68 += 2;
                            goto LABEL_173;
                          }
                          v97 = (WTF::StringImpl *)v60;
                          v61 = (JSC::VM *)*((_QWORD *)a2 + 7);
                          if ((v60 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v60 + 5) != 2)
                          {
                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v97, a2);
LABEL_156:
                            if (!*((_DWORD *)v61 + 20))
                            {
                              v63 = v96;
LABEL_158:
                              v88 = 0;
                              goto LABEL_159;
                            }
                            v84 = JSC::VM::hasExceptionsAfterHandlingTraps(v61);
                            v63 = v96;
                            if ((v84 & 1) == 0)
                              goto LABEL_158;
                            v85 = 1;
                            v88 = 1;
                            v96 = 0;
                            if (v63)
                            {
                              if (*(_DWORD *)v63 == 2)
                              {
                                WTF::StringImpl::destroy(v63, this);
                                v85 = v88;
                                if (!v88)
                                {
                                  v63 = v87;
LABEL_159:
                                  v87 = 0;
                                  v64 = v94[0];
                                  v94[0] = v63;
                                  if (v64)
                                  {
                                    if (*(_DWORD *)v64 == 2)
                                    {
                                      WTF::StringImpl::destroy(v64, this);
                                      if (v88 != -1)
                                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3223358[v88])(&v97, &v87);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v64 -= 2;
                                    }
                                  }
                                  goto LABEL_162;
                                }
                                *(_DWORD *)(a3 + 96) = 1;
                                if (v85 == -1)
                                  goto LABEL_180;
LABEL_285:
                                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3223358[v85])(&v97, &v87);
                                goto LABEL_180;
                              }
                              *(_DWORD *)v63 -= 2;
                            }
                            *(_DWORD *)(a3 + 96) = 1;
                            goto LABEL_285;
                          }
                          v62 = *(WTF::StringImpl **)(v60 + 8);
                          if ((v62 & 1) != 0)
                          {
                            v62 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v60, a2);
                            if (!v62)
                              goto LABEL_155;
                          }
                          else if (!v62)
                          {
LABEL_155:
                            v96 = v62;
                            goto LABEL_156;
                          }
                          *(_DWORD *)v62 += 2;
                          goto LABEL_155;
                        }
                        v87 = (WTF::StringImpl *)v56;
                        v57 = (JSC::VM *)*((_QWORD *)a2 + 7);
                        if ((v56 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v56 + 5) != 2)
                        {
                          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v87, a2);
                          goto LABEL_142;
                        }
                        v58 = *(WTF::StringImpl **)(v56 + 8);
                        if ((v58 & 1) != 0)
                        {
                          v58 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v56, a2);
                          if (!v58)
                            goto LABEL_141;
                        }
                        else if (!v58)
                        {
LABEL_141:
                          v97 = v58;
LABEL_142:
                          if (!*((_DWORD *)v57 + 20))
                          {
                            v13 = v97;
LABEL_144:
                            *((_QWORD *)&v93 + 1) = v13;
                            goto LABEL_145;
                          }
                          v83 = JSC::VM::hasExceptionsAfterHandlingTraps(v57);
                          v13 = v97;
                          if (!v83)
                            goto LABEL_144;
LABEL_276:
                          v97 = 0;
                          if (v13)
                          {
                            if (*(_DWORD *)v13 == 2)
                              goto LABEL_294;
                            *(_DWORD *)v13 -= 2;
                          }
LABEL_279:
                          *(_DWORD *)(a3 + 96) = 1;
                          goto LABEL_180;
                        }
                        *(_DWORD *)v58 += 2;
                        goto LABEL_141;
                      }
                      *(_DWORD *)v53 += 2;
                      goto LABEL_127;
                    }
                    *(_DWORD *)v48 += 2;
                    goto LABEL_113;
                  }
                  *(_DWORD *)v43 += 2;
                  goto LABEL_99;
                }
                *(_DWORD *)v38 += 2;
                goto LABEL_85;
              }
              *(_DWORD *)v33 += 2;
              goto LABEL_71;
            }
            *(_DWORD *)v28 += 2;
            goto LABEL_57;
          }
          *(_DWORD *)v23 += 2;
          goto LABEL_43;
        }
        *(_DWORD *)v18 += 2;
        goto LABEL_29;
      }
      *(_DWORD *)v12 += 2;
      goto LABEL_15;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 96) = 1;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmAesCbcCfbParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSArrayBufferView *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  uint64_t (*v20)();
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v27;
  int v28;
  uint64_t v29;
  int v30;
  void (**v31)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden);
  WTF::StringImpl *v32;
  char v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  uint64_t v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v38 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v31 = off_1E3223378;
    v32 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 56) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v31 = off_1E3223378;
  v32 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v42);
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v7);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
    goto LABEL_11;
  if (v8 != 10)
  {
    v42 = (WTF::StringImpl *)v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v39;
        if (hasExceptionsAfterHandlingTraps)
        {
          v16 = 1;
          v30 = 1;
          v39 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          *(_DWORD *)(a3 + 56) = 1;
          goto LABEL_50;
        }
      }
      else
      {
        v11 = v39;
      }
      v30 = 0;
      v29 = 0;
      v12 = v32;
      v32 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = v42;
      v15 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v42);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
        goto LABEL_29;
      if (v15 == (JSC::JSArrayBufferView *)10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v38, "iv", 3, "AesCbcCfbParams", 16, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_29:
        v16 = 0;
        *(_DWORD *)(a3 + 56) = 1;
LABEL_50:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223358[v16])(&v42, &v29);
        goto LABEL_51;
      }
      v27 = a2[7];
      v17 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped((uint64_t)v27, (uint64_t)v15);
      if (v17)
      {
        *(_DWORD *)v17 += 2;
        v40 = 1;
        v39 = 0;
        v43 = v17;
        v44 = 1;
        v45 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v41);
        v18 = v45;
        if (!v45)
        {
          v19 = v44;
          LOBYTE(v27) = 0;
          v28 = -1;
          if (v44 == -1)
          {
            LOBYTE(v39) = 0;
            v40 = -1;
            if (v35 == -1)
            {
LABEL_40:
              v40 = -1;
              if (v28 != -1)
                ((void (*)(uint64_t **, JSC::VM **))off_1E3223390[v28])(&v41, &v27);
              v21 = v32;
              if (v32)
                *(_DWORD *)v32 += 2;
              *(_BYTE *)(a3 + 16) = v33;
              *(_QWORD *)a3 = off_1E3223378;
              *(_QWORD *)(a3 + 8) = v21;
              *(_BYTE *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 32) = -1;
              v22 = v35;
              if (v35 != -1)
              {
                ((void (*)(WTF::StringImpl **, uint64_t, uint64_t *))off_1E32233A0[v35])(&v39, a3 + 24, &v34);
                *(_DWORD *)(a3 + 32) = v22;
              }
              *(_QWORD *)(a3 + 40) = v36;
              v23 = v37;
              v36 = 0;
              v37 = 0;
              *(_QWORD *)(a3 + 48) = v23;
              *(_DWORD *)(a3 + 56) = 0;
              v18 = v45;
              goto LABEL_47;
            }
            ((void (*)(uint64_t **, uint64_t *))off_1E3223390[v35])(&v41, &v34);
            v35 = -1;
LABEL_38:
            if (v40 != -1)
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1E3223390[v40])(&v41, &v39);
            goto LABEL_40;
          }
LABEL_37:
          v20 = off_1E32233A0[v19];
          ((void (*)(uint64_t **, JSC::VM **, WTF::StringImpl **))v20)(&v41, &v27, &v43);
          v28 = v19;
          LOBYTE(v39) = 0;
          v40 = -1;
          ((void (*)(uint64_t **, WTF::StringImpl **, JSC::VM **))v20)(&v41, &v39, &v27);
          v40 = v19;
          v41 = &v34;
          ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32233B0[v19])(&v41, &v34, &v39);
          goto LABEL_38;
        }
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v15, &v39);
        if (v39)
        {
          v19 = 0;
          v43 = v39;
          v44 = 0;
          v45 = 0;
          LOBYTE(v27) = 0;
          v28 = -1;
          goto LABEL_37;
        }
        JSC::throwTypeError();
        v18 = 1;
        v45 = 1;
      }
      *(_DWORD *)(a3 + 56) = 1;
LABEL_47:
      if (v18 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32233C0[v18])(&v39, &v43);
      v16 = 0;
      goto LABEL_50;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v39 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v38, "name", 5, "AesCbcCfbParams", 16, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 56) = 1;
LABEL_51:
  v24 = v36;
  if (v36)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v24, v7);
  }
  if (v35 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223390[v35])(&v42, &v34);
  v35 = -1;
  result = v32;
  v31 = off_1E3226840;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmAesCbcCfbParams::~CryptoAlgorithmAesCbcCfbParams(WebCore::CryptoAlgorithmAesCbcCfbParams *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3223390[v4])(&v6, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3223390[v4])(&v6, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmAesCtrParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSArrayBufferView *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  uint64_t (*v20)();
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v33;
  int v34;
  uint64_t v35;
  int v36;
  void (**v37)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  JSC::VM *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v45 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v37 = off_1E32233E0;
    v38 = 0;
    v40 = 0;
    v41 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 64) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v37 = off_1E32233E0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v43 = 0;
  v44 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v49);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v7);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (*((_DWORD *)v45 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v45))
    goto LABEL_11;
  if (v8 != 10)
  {
    v49 = (WTF::StringImpl *)v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v49, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v46;
        if (hasExceptionsAfterHandlingTraps)
        {
          v16 = 1;
          v36 = 1;
          v46 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          *(_DWORD *)(a3 + 64) = 1;
          goto LABEL_59;
        }
      }
      else
      {
        v11 = v46;
      }
      v36 = 0;
      v35 = 0;
      v12 = v38;
      v38 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = v49;
      v15 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v49);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v45 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v45))
        goto LABEL_29;
      if (v15 == (JSC::JSArrayBufferView *)10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v45, "counter", 8, "AesCtrParams", 13, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_29:
        v16 = 0;
        *(_DWORD *)(a3 + 64) = 1;
LABEL_59:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223358[v16])(&v49, &v35);
        goto LABEL_60;
      }
      v33 = a2[7];
      v17 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped((uint64_t)v33, (uint64_t)v15);
      if (v17)
      {
        *(_DWORD *)v17 += 2;
        v47 = 1;
        v46 = 0;
        v50 = v17;
        v51 = 1;
        v52 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v48);
        v18 = v52;
        if (!v52)
        {
          v19 = v51;
          LOBYTE(v33) = 0;
          v34 = -1;
          if (v51 == -1)
          {
            LOBYTE(v46) = 0;
            v47 = -1;
            if (v41 == -1)
              goto LABEL_40;
            ((void (*)(uint64_t **, uint64_t *))off_1E3223390[v41])(&v48, &v40);
            v41 = -1;
LABEL_38:
            if (v47 != -1)
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1E3223390[v47])(&v48, &v46);
LABEL_40:
            v47 = -1;
            if (v34 != -1)
              ((void (*)(uint64_t **, JSC::VM **))off_1E3223390[v34])(&v48, &v33);
            WTF::AtomStringImpl::addLiteral();
            v21 = v46;
            v23 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v22);
              else
                *(_DWORD *)v21 -= 2;
            }
            if (!*((_DWORD *)v45 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) == 0)
            {
              if (v23 == 10)
              {
                WebCore::throwRequiredMemberTypeError((int)a2, (int)&v45, "length", 7, "AesCtrParams", 13, "octet", 6);
              }
              else
              {
                WebCore::convertToIntegerEnforceRange<WebCore::IDLOctet>((JSC::JSGlobalObject *)a2, v23, (uint64_t)&v46);
                if (!((unint64_t)v46 >> 32))
                {
                  v25 = v46;
                  v42 = v46;
                  v26 = v38;
                  if (v38)
                    *(_DWORD *)v38 += 2;
                  *(_BYTE *)(a3 + 16) = v39;
                  *(_QWORD *)a3 = off_1E32233E0;
                  *(_QWORD *)(a3 + 8) = v26;
                  *(_BYTE *)(a3 + 24) = 0;
                  *(_DWORD *)(a3 + 32) = -1;
                  v27 = v41;
                  if (v41 != -1)
                  {
                    ((void (*)(WTF::StringImpl **, uint64_t, uint64_t *))off_1E32233A0[v41])(&v46, a3 + 24, &v40);
                    *(_DWORD *)(a3 + 32) = v27;
                    v25 = v42;
                  }
                  v24 = 0;
                  v28 = v43;
                  *(_QWORD *)(a3 + 40) = v25;
                  *(_QWORD *)(a3 + 48) = v28;
                  v29 = v44;
                  v43 = 0;
                  v44 = 0;
                  *(_QWORD *)(a3 + 56) = v29;
                  goto LABEL_55;
                }
              }
            }
            v24 = 1;
LABEL_55:
            *(_DWORD *)(a3 + 64) = v24;
            v18 = v52;
LABEL_56:
            if (v18 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32233C0[v18])(&v46, &v50);
            v16 = 0;
            goto LABEL_59;
          }
LABEL_37:
          v20 = off_1E32233A0[v19];
          ((void (*)(uint64_t **, JSC::VM **, WTF::StringImpl **))v20)(&v48, &v33, &v50);
          v34 = v19;
          LOBYTE(v46) = 0;
          v47 = -1;
          ((void (*)(uint64_t **, WTF::StringImpl **, JSC::VM **))v20)(&v48, &v46, &v33);
          v47 = v19;
          v48 = &v40;
          ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32233B0[v19])(&v48, &v40, &v46);
          goto LABEL_38;
        }
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v15, &v46);
        if (v46)
        {
          v19 = 0;
          v50 = v46;
          v51 = 0;
          v52 = 0;
          LOBYTE(v33) = 0;
          v34 = -1;
          goto LABEL_37;
        }
        JSC::throwTypeError();
        v18 = 1;
        v52 = 1;
      }
      *(_DWORD *)(a3 + 64) = 1;
      goto LABEL_56;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v46 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v45, "name", 5, "AesCtrParams", 13, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 64) = 1;
LABEL_60:
  v30 = v43;
  if (v43)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    WTF::fastFree(v30, v7);
  }
  if (v41 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223390[v41])(&v49, &v40);
  v41 = -1;
  result = v38;
  v37 = off_1E3226840;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmAesCtrParams::~CryptoAlgorithmAesCtrParams(WebCore::CryptoAlgorithmAesCtrParams *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3223390[v4])(&v6, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3223390[v4])(&v6, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmAesGcmParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  JSC::ArrayBufferView *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSArrayBufferView *v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t (*v19)();
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSC::JSArrayBufferView *v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t (*v28)();
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  int v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v42;
  int v43;
  uint64_t v44;
  int v45;
  void (**v46)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v47;
  char v48;
  uint64_t v49;
  int v50;
  _BYTE v51[8];
  int v52;
  char v53;
  __int16 v54;
  WTF *v55[2];
  WTF *v56[2];
  JSC::VM *v57;
  unint64_t v58;
  int v59;
  uint64_t *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v57 = a2[7];
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 104) = 1;
    return result;
  }
  v46 = off_1E3223408;
  v47 = 0;
  v49 = 0;
  v50 = 0;
  v51[0] = 0;
  v53 = 0;
  v54 = 0;
  *(_OWORD *)v55 = 0u;
  *(_OWORD *)v56 = 0u;
  if (v5 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v61);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v7);
      else
        *(_DWORD *)v61 -= 2;
    }
    if (*((_DWORD *)v57 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v57))
      goto LABEL_12;
    if (v8 != 10)
    {
      v61 = (WTF::StringImpl *)v8;
      v9 = a2[7];
      if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v61, (JSC::JSGlobalObject *)a2);
LABEL_19:
        if (*((_DWORD *)v9 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
          v11 = (WTF::StringImpl *)v58;
          if (hasExceptionsAfterHandlingTraps)
          {
            v24 = 1;
            v45 = 1;
            v58 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v7);
              else
                *(_DWORD *)v11 -= 2;
            }
            *(_DWORD *)(a3 + 104) = 1;
            goto LABEL_94;
          }
        }
        else
        {
          v11 = (WTF::StringImpl *)v58;
        }
        v45 = 0;
        v44 = 0;
        v12 = v47;
        v47 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v7);
          else
            *(_DWORD *)v12 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v13 = v61;
        v15 = (JSC::JSArrayBufferView *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v61);
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v14);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v57 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v57))
          goto LABEL_61;
        if (v15 == (JSC::JSArrayBufferView *)10)
          goto LABEL_55;
        v42 = a2[7];
        v16 = (_DWORD *)JSC::JSArrayBuffer::toWrapped((uint64_t)v42, (uint64_t)v15);
        if (v16)
        {
          *v16 += 2;
          v59 = 1;
          v58 = 0;
          v62 = (unint64_t)v16;
          v63 = 1;
          v64 = 0;
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v60);
          v17 = v64;
          if (!v64)
          {
            v18 = v63;
            LOBYTE(v58) = 0;
            v59 = -1;
            if (v63 == -1)
            {
              if (v53)
              {
                if (v52 == -1)
                {
LABEL_51:
                  v20 = 1;
                  v17 = v64;
LABEL_52:
                  if (v17 != -1)
                    ((void (*)(unint64_t *, unint64_t *))off_1E32233C0[v17])(&v58, &v62);
                  if (!v20)
                    goto LABEL_93;
LABEL_55:
                  WTF::AtomStringImpl::addLiteral();
                  v21 = v61;
                  v23 = (JSC::JSArrayBufferView *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v61);
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2)
                      WTF::StringImpl::destroy(v21, v22);
                    else
                      *(_DWORD *)v21 -= 2;
                  }
                  if (*((_DWORD *)v57 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v57))
                    goto LABEL_61;
                  if (v23 == (JSC::JSArrayBufferView *)10)
                  {
                    WebCore::throwRequiredMemberTypeError((int)a2, (int)&v57, "iv", 3, "AesGcmParams", 13, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_61:
                    v24 = 0;
                    *(_DWORD *)(a3 + 104) = 1;
LABEL_94:
                    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223358[v24])(&v61, &v44);
                    goto LABEL_95;
                  }
                  v42 = a2[7];
                  v25 = (_DWORD *)JSC::JSArrayBuffer::toWrapped((uint64_t)v42, (uint64_t)v23);
                  if (v25)
                  {
                    *v25 += 2;
                    v59 = 1;
                    v58 = 0;
                    v62 = (unint64_t)v25;
                    v63 = 1;
                    v64 = 0;
                    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v60);
                    v26 = v64;
                    if (!v64)
                    {
                      v27 = v63;
                      LOBYTE(v42) = 0;
                      v43 = -1;
                      if (v63 == -1)
                      {
                        LOBYTE(v58) = 0;
                        v59 = -1;
                        if (v50 == -1)
                          goto LABEL_72;
                        ((void (*)(uint64_t **, uint64_t *))off_1E3223390[v50])(&v60, &v49);
                        v50 = -1;
LABEL_70:
                        if (v59 != -1)
                          ((void (*)(uint64_t **, unint64_t *))off_1E3223390[v59])(&v60, &v58);
LABEL_72:
                        v59 = -1;
                        if (v43 != -1)
                          ((void (*)(uint64_t **, JSC::VM **))off_1E3223390[v43])(&v60, &v42);
                        WTF::AtomStringImpl::addLiteral();
                        v29 = (WTF::StringImpl *)v58;
                        v31 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v58);
                        if (v29)
                        {
                          if (*(_DWORD *)v29 == 2)
                            WTF::StringImpl::destroy(v29, v30);
                          else
                            *(_DWORD *)v29 -= 2;
                        }
                        if (*((_DWORD *)v57 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) != 0)
                          goto LABEL_128;
                        if (v31 != 10)
                        {
                          WebCore::convertToIntegerEnforceRange<WebCore::IDLOctet>((JSC::JSGlobalObject *)a2, v31, (uint64_t)&v58);
                          if (HIDWORD(v58))
                          {
LABEL_128:
                            v35 = 1;
LABEL_90:
                            *(_DWORD *)(a3 + 104) = v35;
                            v26 = v64;
                            goto LABEL_91;
                          }
                          v54 = v58 | 0x100;
                        }
                        v32 = v47;
                        if (v47)
                          *(_DWORD *)v47 += 2;
                        *(_BYTE *)(a3 + 16) = v48;
                        *(_QWORD *)a3 = off_1E3223408;
                        *(_QWORD *)(a3 + 8) = v32;
                        *(_BYTE *)(a3 + 24) = 0;
                        *(_DWORD *)(a3 + 32) = -1;
                        v33 = v50;
                        if (v50 != -1)
                        {
                          ((void (*)(unint64_t *, uint64_t, uint64_t *))off_1E32233A0[v50])(&v58, a3 + 24, &v49);
                          *(_DWORD *)(a3 + 32) = v33;
                        }
                        *(_BYTE *)(a3 + 40) = 0;
                        *(_BYTE *)(a3 + 56) = 0;
                        if (v53)
                        {
                          *(_DWORD *)(a3 + 48) = -1;
                          v34 = v52;
                          if (v52 != -1)
                          {
                            ((void (*)(unint64_t *))off_1E32233A0[v52])(&v58);
                            *(_DWORD *)(a3 + 48) = v34;
                          }
                          *(_BYTE *)(a3 + 56) = 1;
                        }
                        v35 = 0;
                        *(_WORD *)(a3 + 64) = v54;
                        *(WTF **)(a3 + 72) = v55[0];
                        *(WTF **)(a3 + 88) = v56[0];
                        v55[0] = 0;
                        v36 = v55[1];
                        v55[1] = 0;
                        *(_QWORD *)(a3 + 80) = v36;
                        v56[0] = 0;
                        v37 = v56[1];
                        v56[1] = 0;
                        *(_QWORD *)(a3 + 96) = v37;
                        goto LABEL_90;
                      }
LABEL_69:
                      v28 = off_1E32233A0[v27];
                      ((void (*)(uint64_t **, JSC::VM **, unint64_t *))v28)(&v60, &v42, &v62);
                      v43 = v27;
                      LOBYTE(v58) = 0;
                      v59 = -1;
                      ((void (*)(uint64_t **, unint64_t *, JSC::VM **))v28)(&v60, &v58, &v42);
                      v59 = v27;
                      v60 = &v49;
                      ((void (*)(uint64_t **, uint64_t *, unint64_t *))off_1E32233B0[v27])(&v60, &v49, &v58);
                      goto LABEL_70;
                    }
                  }
                  else
                  {
                    JSC::JSArrayBufferView::toWrapped(v23, (JSC::ArrayBufferView **)&v58);
                    if (v58)
                    {
                      v27 = 0;
                      v62 = v58;
                      v63 = 0;
                      v64 = 0;
                      LOBYTE(v42) = 0;
                      v43 = -1;
                      goto LABEL_69;
                    }
                    JSC::throwTypeError();
                    v26 = 1;
                    v64 = 1;
                  }
                  *(_DWORD *)(a3 + 104) = 1;
LABEL_91:
                  if (v26 != -1)
                    ((void (*)(unint64_t *, unint64_t *))off_1E32233C0[v26])(&v58, &v62);
LABEL_93:
                  v24 = 0;
                  goto LABEL_94;
                }
                ((void (*)(JSC::VM **, _BYTE *))off_1E3223390[v52])(&v42, v51);
                v52 = -1;
LABEL_49:
                if (v59 != -1)
                  ((void (*)(JSC::VM **, unint64_t *))off_1E3223390[v59])(&v42, &v58);
                goto LABEL_51;
              }
              v51[0] = 0;
              v52 = -1;
LABEL_48:
              v53 = 1;
              goto LABEL_49;
            }
LABEL_37:
            v19 = off_1E32233A0[v18];
            ((void (*)(JSC::VM **, unint64_t *, unint64_t *))v19)(&v42, &v58, &v62);
            v59 = v18;
            if (v53)
            {
              v42 = (JSC::VM *)v51;
              ((void (*)(JSC::VM **, _BYTE *, unint64_t *))off_1E32233B0[v18])(&v42, v51, &v58);
              goto LABEL_49;
            }
            v51[0] = 0;
            v52 = -1;
            ((void (*)(JSC::VM **, _BYTE *, unint64_t *))v19)(&v42, v51, &v58);
            v52 = v18;
            goto LABEL_48;
          }
        }
        else
        {
          JSC::JSArrayBufferView::toWrapped(v15, (JSC::ArrayBufferView **)&v58);
          if (v58)
          {
            v18 = 0;
            v62 = v58;
            v63 = 0;
            v64 = 0;
            LOBYTE(v58) = 0;
            v59 = -1;
            goto LABEL_37;
          }
          JSC::throwTypeError();
          v17 = 1;
          v64 = 1;
        }
        v20 = 0;
        *(_DWORD *)(a3 + 104) = 1;
        goto LABEL_52;
      }
      v10 = *(JSC::ArrayBufferView **)(v8 + 8);
      if ((v10 & 1) != 0)
      {
        v10 = *(JSC::ArrayBufferView **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
        if (!v10)
          goto LABEL_18;
      }
      else if (!v10)
      {
LABEL_18:
        v58 = (unint64_t)v10;
        goto LABEL_19;
      }
      *(_DWORD *)v10 += 2;
      goto LABEL_18;
    }
  }
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v57, "name", 5, "AesGcmParams", 13, "DOMString", 10);
LABEL_12:
  *(_DWORD *)(a3 + 104) = 1;
LABEL_95:
  v38 = v56[0];
  if (v56[0])
  {
    v56[0] = 0;
    LODWORD(v56[1]) = 0;
    WTF::fastFree(v38, v7);
  }
  v39 = v55[0];
  if (v55[0])
  {
    v55[0] = 0;
    LODWORD(v55[1]) = 0;
    WTF::fastFree(v39, v7);
  }
  if (v53)
  {
    if (v52 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3223390[v52])(&v61, v51);
    v52 = -1;
  }
  if (v50 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223390[v50])(&v61, &v49);
  v50 = -1;
  result = v47;
  v46 = off_1E3226840;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmAesGcmParams::~CryptoAlgorithmAesGcmParams(WebCore::CryptoAlgorithmAesGcmParams *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  char v9;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_BYTE *)this + 56))
  {
    v5 = *((unsigned int *)this + 12);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, char *))off_1E3223390[v5])(&v8, (char *)this + 40);
    *((_DWORD *)this + 12) = -1;
  }
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E3223390[v6])(&v9, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  char v9;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_BYTE *)this + 56))
  {
    v5 = *((unsigned int *)this + 12);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, char *))off_1E3223390[v5])(&v8, (char *)this + 40);
    *((_DWORD *)this + 12) = -1;
  }
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E3223390[v6])(&v9, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::convertDictionary<WebCore::CryptoAlgorithmAesKeyParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  unint64_t v25;

  v23 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v21);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v7);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v23 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v23, "name", 5, "AesKeyParams", 13, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 24) = 1;
    return result;
  }
  v25 = v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v24 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (*((_DWORD *)v10 + 20))
  {
    v12 = v24;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    {
      v22 = 1;
      v24 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v20);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      v17 = 1;
      v16 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    v12 = v24;
  }
  v22 = 0;
  v21 = 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = (WTF::StringImpl *)v25;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v25);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
  {
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v23, "length", 7, "AesKeyParams", 13, "unsigned short", 15);
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedShort>((JSC::JSGlobalObject *)a2, v15, (uint64_t)&v25);
      v18 = v25;
      if (!HIDWORD(v25))
      {
        if (v12)
          *(_DWORD *)v12 += 2;
        v17 = 0;
        v16 = 0;
        *(_QWORD *)a3 = off_1E3223430;
        *(_QWORD *)(a3 + 8) = v12;
        *(_WORD *)(a3 + 18) = v18;
        goto LABEL_30;
      }
    }
  }
  v16 = 0;
  v17 = 1;
LABEL_30:
  *(_DWORD *)(a3 + 24) = v17;
  result = ((uint64_t (*)(unint64_t *, WTF::StringImpl **))off_1E3223358[v16])(&v25, &v21);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v19);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmAesKeyParams::~CryptoAlgorithmAesKeyParams(WebCore::CryptoAlgorithmAesKeyParams *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSAnalyserNode>::construct(WebCore::AudioNode **a1, uint64_t a2)
{
  WebCore::AudioNode *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  JSCell *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v21;
  JSC::JSCell *v22;
  uint64_t Object;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  char v27;
  unsigned __int8 v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  void *v35;
  double v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  WebCore::AudioNode *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  WebCore::AudioNode *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WebCore::AudioNode *v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::AudioNode *v56;
  JSC::VM *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WebCore::AudioNode *v60;
  JSC::VM *v61;
  WebCore::JSDOMGlobalObject *v62;
  JSC::VM *v63;
  WebCore::AudioNode *v64;
  WebCore::AudioNode *v65;
  JSC::JSCell *v66;
  JSC::JSGlobalObject *v67;
  JSC::JSObject *v68;
  JSC::JSGlobalObject *v69;
  JSC::VM *v70;
  JSC::JSObject *v71;
  JSC::Structure *v72;
  JSC::VM *FunctionRealm;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char **v80;
  int v81;
  JSC::JSCell *v82;
  unint64_t Structure;
  JSC::Structure *v84;
  JSC::JSCell *v85;
  uint64_t v86;
  unint64_t SubclassStructure;
  JSValue v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  JSValue v92;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v94;
  double v95;
  JSC::VM *v96;
  double v97;
  uint64_t v98;
  double v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WebCore::AudioNode *v109;
  WTF::StringImpl *v110;
  int v111;
  char v112;
  __int16 v113;
  char v114;
  int v115;
  double v116;
  double v117;
  double v118;
  int v119[2];
  WTF::StringImpl *v120;
  int v121;
  WebCore::AudioNode *v122;
  uint64_t v123;
  __int16 v124;
  char v125;
  __int16 v126;
  char v127;
  __int16 v128;
  char v129;
  WebCore::AudioNode *v130;

  v4 = a1[7];
  v122 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19483BC70);
  }
  v11 = v6 - 192;
  if (!v6)
    v11 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v11 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v13 = *(int *)(a2 + 32);
  if ((_DWORD)v13 == 1)
  {
    v89.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, v7);
    return JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v89);
  }
  v14 = *(_QWORD *)(a2 + 48);
  v15 = a1[7];
  v109 = v15;
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSBaseAudioContext::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSBaseAudioContext::s_info && v18 != 0);
  }
  if (!v17)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v109, 0, "context", 8, "AnalyserNode", 13, v8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v21 = *(_QWORD *)(v14 + 24);
  if ((unint64_t)(v13 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v130 = v15;
  }
  else
  {
    v22 = *(JSC::JSCell **)(a2 + 56);
    v130 = v15;
    if (((unint64_t)v22 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v108 = v21;
      if (((unint64_t)v22 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v22)) == 0)
      {
        JSC::throwTypeError();
        return 0;
      }
      v24 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v26 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
          WTF::StringImpl::destroy(v109, v25);
        else
          *(_DWORD *)v109 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      if (v26 == 10)
      {
        v106 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v26, &v109);
        if (HIDWORD(v109))
          return 0;
        BYTE4(v106) = (_BYTE)v109;
        v102 = v109 >> 8;
        LOBYTE(v106) = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v38 = v109;
      v40 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v39);
        else
          *(_DWORD *)v38 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      if (v40 == 10)
      {
        v105 = 0;
        LOBYTE(v30) = 0;
      }
      else
      {
        v109 = a1[7];
        v41 = v109;
        v30 = WebCore::parseEnumeration<WebCore::ChannelCountMode>((JSC::JSGlobalObject *)a1, v40);
        if (*((_DWORD *)v41 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
          return 0;
        if ((v30 & 0xFF00000000) == 0)
          goto LABEL_154;
        v101 = v30 >> 8;
        v105 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v42 = v109;
      v44 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v43);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      v107 = v5;
      if (v44 == 10)
      {
        v104 = 0;
        LOBYTE(v32) = 0;
        goto LABEL_52;
      }
      v109 = a1[7];
      v45 = v109;
      v32 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>((JSC::JSGlobalObject *)a1, v44);
      if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
        return 0;
      if ((v32 & 0xFF00000000) != 0)
      {
        v100 = v32 >> 8;
        v104 = 1;
LABEL_52:
        WTF::AtomStringImpl::addLiteral();
        v46 = v109;
        v48 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v47);
          else
            *(_DWORD *)v46 -= 2;
        }
        if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
          return 0;
        if (v48 == 10)
        {
          v123 = 2048;
          v49 = 2048;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v48, &v123);
          if (HIDWORD(v123))
            return 0;
          v49 = v123;
        }
        v103 = v49;
        WTF::AtomStringImpl::addLiteral();
        v50 = v109;
        v52 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v51);
          else
            *(_DWORD *)v50 -= 2;
        }
        if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
          return 0;
        v33 = -30.0;
        if (v52 == (WebCore::AudioNode *)10)
          goto LABEL_70;
        v109 = v52;
        v53 = a1[7];
        *(_QWORD *)v119 = v53;
        if ((unint64_t)v52 >= 0xFFFE000000000000)
        {
          v33 = (double)(int)v52;
        }
        else if ((unint64_t)v52 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v94 = v53;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, (JSC::JSGlobalObject *)a1);
          v53 = v94;
          v33 = v95;
        }
        else
        {
          *(_QWORD *)&v33 = (char *)v52 - 0x2000000000000;
        }
        if (*((_DWORD *)v53 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
          return 0;
        if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
LABEL_70:
          WTF::AtomStringImpl::addLiteral();
          v54 = v109;
          v56 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v55);
            else
              *(_DWORD *)v54 -= 2;
          }
          v5 = v107;
          if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
            return 0;
          if (v56 == (WebCore::AudioNode *)10)
          {
            v34 = -100.0;
          }
          else
          {
            v109 = v56;
            v57 = a1[7];
            *(_QWORD *)v119 = v57;
            if ((unint64_t)v56 >= 0xFFFE000000000000)
            {
              v34 = (double)(int)v56;
            }
            else if ((unint64_t)v56 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              v96 = v57;
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, (JSC::JSGlobalObject *)a1);
              v57 = v96;
              v34 = v97;
            }
            else
            {
              *(_QWORD *)&v34 = (char *)v56 - 0x2000000000000;
            }
            if (*((_DWORD *)v57 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) != 0)
              return 0;
            if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              goto LABEL_147;
          }
          WTF::AtomStringImpl::addLiteral();
          v58 = v109;
          v60 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v109);
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v59);
            else
              *(_DWORD *)v58 -= 2;
          }
          if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
            return 0;
          if (v60 == (WebCore::AudioNode *)10)
          {
            v36 = 0.8;
LABEL_92:
            v21 = v108;
            v27 = v106;
            v28 = BYTE4(v106);
            v9 = v101;
            LODWORD(v35) = v102;
            v31 = v104;
            v29 = v105;
            v10 = v100;
            v37 = v103;
            goto LABEL_93;
          }
          v109 = v60;
          v61 = a1[7];
          *(_QWORD *)v119 = v61;
          if ((unint64_t)v60 >= 0xFFFE000000000000)
          {
            v36 = (double)(int)v60;
          }
          else if ((unint64_t)v60 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, (JSC::JSGlobalObject *)a1);
          }
          else
          {
            *(_QWORD *)&v36 = (char *)v60 - 0x2000000000000;
          }
          if (*((_DWORD *)v61 + 20))
          {
            v99 = v36;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v61);
            v36 = v99;
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              return 0;
          }
          if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            goto LABEL_92;
        }
LABEL_147:
        JSC::throwTypeError();
        return 0;
      }
LABEL_154:
      JSC::throwTypeError();
      return 0;
    }
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  LOBYTE(v30) = 0;
  v31 = 0;
  LOBYTE(v32) = 0;
  v33 = -30.0;
  v34 = -100.0;
  v35 = &unk_1968BC000;
  v36 = 0.8;
  v37 = 2048;
LABEL_93:
  *(_WORD *)((char *)&v109 + 5) = v128;
  HIBYTE(v109) = v129;
  *(_WORD *)((char *)&v110 + 5) = v126;
  HIBYTE(v110) = v127;
  v113 = v124;
  v114 = v125;
  LODWORD(v109) = v28 | ((_DWORD)v35 << 8);
  BYTE4(v109) = v27;
  LODWORD(v110) = v30 | (v9 << 8);
  BYTE4(v110) = v29;
  v111 = v32 | (v10 << 8);
  v112 = v31;
  v115 = v37;
  v116 = v33;
  v117 = v34;
  v118 = v36;
  WebCore::AnalyserNode::create(v21 - 32, (uint64_t)&v109, (uint64_t)v119);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_142;
  if (!v121)
  {
    v63 = *(JSC::VM **)(v5 + 40);
    v64 = *(WebCore::AudioNode **)v119;
    *(_QWORD *)v119 = 0;
    v109 = v64;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v64 != off_1E3367CB8)
    {
      __break(0xC471u);
      JUMPOUT(0x19483BD4CLL);
    }
    v12 = (JSCell *)WebCore::createWrapper<WebCore::AnalyserNode,WebCore::AnalyserNode>(v63, (uint64_t *)&v109, v62);
    v65 = v109;
    v109 = 0;
    if (v65)
      WebCore::AudioNode::deref(v65);
    goto LABEL_98;
  }
  if (v121 == 1)
  {
    v90 = (WTF::StringImpl *)LOBYTE(v119[0]);
    LOBYTE(v109) = v119[0];
    v91 = v120;
    v120 = 0;
    v110 = v91;
    if (!*((_QWORD *)v4 + 2))
    {
      v92.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v119[0]), (JSC::JSGlobalObject *)&v110);
      JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v92);
      v91 = v110;
    }
    v110 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v90);
      else
        *(_DWORD *)v91 -= 2;
    }
    v12 = 0;
LABEL_98:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
LABEL_142:
      v12 = 0;
LABEL_113:
      if (v121 != -1)
        ((void (*)(WebCore::AudioNode **, int *))off_1E3223448[v121])(&v109, v119);
      return (uint64_t)v12;
    }
    v66 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v66 & 0xFFFE000000000002) != 0
      || (v67 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v66)) == 0
      || (v69 = v67, v67 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v70 = a1[7], FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v67, v68), *((_DWORD *)v70 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
    {
LABEL_112:
      if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
        goto LABEL_113;
      goto LABEL_142;
    }
    v74 = *((_QWORD *)FunctionRealm + 412);
    if (v74)
    {
      v75 = *(_DWORD *)(v74 - 8);
      v76 = ((unint64_t)&WebCore::JSAnalyserNode::s_info + ~((_QWORD)&WebCore::JSAnalyserNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnalyserNode::s_info + ~((_QWORD)&WebCore::JSAnalyserNode::s_info << 32)) >> 22);
      v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
      v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
      v79 = v75 & ((v78 >> 31) ^ v78);
      v80 = *(char ***)(v74 + 16 * v79);
      if (v80 == &WebCore::JSAnalyserNode::s_info)
      {
LABEL_108:
        v71 = *(JSC::JSObject **)(v74 + 16 * v79 + 8);
        if (v71)
        {
LABEL_110:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v69, v71, v72);
          if (!*((_DWORD *)v70 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) == 0)
            JSC::JSObject::setStructure(v12, v70, SubclassStructure);
          goto LABEL_112;
        }
      }
      else
      {
        v81 = 1;
        while (v80)
        {
          v79 = ((_DWORD)v79 + v81) & v75;
          v80 = *(char ***)(v74 + 16 * v79);
          ++v81;
          if (v80 == &WebCore::JSAnalyserNode::s_info)
            goto LABEL_108;
        }
      }
    }
    v82 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v70, FunctionRealm, v71);
    Structure = WebCore::JSAnalyserNodePrototype::createStructure((uint64_t *)v70, (uint64_t)FunctionRealm, v82);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v85 = (JSC::JSCell *)WebCore::JSAnalyserNodePrototype::create(v70, FunctionRealm, Structure, v84);
    v86 = WebCore::JSAnalyserNode::createStructure((uint64_t *)v70, (uint64_t)FunctionRealm, v85);
    v71 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v86, (uint64_t)&WebCore::JSAnalyserNode::s_info);
    goto LABEL_110;
  }
  v98 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSAnalyserNode::analyzeHeap(v98);
}

uint64_t WebCore::JSAnalyserNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAnalyserNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioNode::prototype(WebCore::JSAudioNode *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAudioNode::s_info + ~((_QWORD)&WebCore::JSAudioNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioNode::s_info + ~((_QWORD)&WebCore::JSAudioNode::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAudioNode::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAudioNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSAudioNodePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSAudioNodePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSAudioNode::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSAudioNode::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

unint64_t WebCore::JSAnalyserNodePrototype::create(WebCore::JSAnalyserNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSAnalyserNode::s_info, (uint64_t)&WebCore::JSAnalyserNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAnalyserNode>,(WebCore::DOMConstructorID)231>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1848);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSAnalyserNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAnalyserNode::s_info + ~((_QWORD)&WebCore::JSAnalyserNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnalyserNode::s_info + ~((_QWORD)&WebCore::JSAnalyserNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAnalyserNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAnalyserNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAnalyserNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAnalyserNodePrototype::create((WebCore::JSAnalyserNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAnalyserNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAnalyserNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1848) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAnalyserNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAnalyserNodePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAnalyserNode>,(WebCore::DOMConstructorID)231>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAnalyserNode_fftSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 192);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 192) | 0xFFFE000000000000;
}

BOOL WebCore::setJSAnalyserNode_fftSize(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  unsigned int v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAnalyserNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAnalyserNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v17);
  v11 = v18 == 0;
  if (!v18 && (WebCore::RealtimeAnalyser::setFftSize((WebCore::RealtimeAnalyser *)(v10 + 152), v17) & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = 0;
    v23 = 1;
    v19 = 0;
    v13 = v22;
    v22 = 0;
    v20 = v13;
    if (!*((_QWORD *)v4 + 2))
    {
      v14.super.isa = (Class)WebCore::createDOMException(a1, 0, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException(v4, a1, v14);
      v13 = v20;
    }
    v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v23)
    {
      v15 = v22;
      v22 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  return v11;
}

unint64_t WebCore::jsAnalyserNode_frequencyBinCount(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 192);
  if (((v2 >> 1) & 0x80000000) != 0)
    return COERCE__INT64((double)(v2 >> 1)) + 0x2000000000000;
  else
    return (v2 >> 1) | 0xFFFE000000000000;
}

unint64_t WebCore::jsAnalyserNode_minDecibels(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 232);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSAnalyserNode_minDecibels(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  double v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAnalyserNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAnalyserNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, a1);
    v11 = v17;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(double *)(v10 + 240) <= v11)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v19) = 0;
    v21 = 1;
    v13 = v20;
    v20 = 0;
    v18 = v13;
    if (!*(_QWORD *)(v4 + 16))
    {
      v14.super.isa = (Class)WebCore::createDOMException(a1, 0, (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException((JSC::VM *)v4, a1, v14);
      v13 = v18;
    }
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v21)
    {
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v10 + 232) = v11;
  }
  return 1;
}

unint64_t WebCore::jsAnalyserNode_maxDecibels(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 240);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSAnalyserNode_maxDecibels(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  double v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAnalyserNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAnalyserNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, a1);
    v11 = v17;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(double *)(v10 + 232) >= v11)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v19) = 0;
    v21 = 1;
    v13 = v20;
    v20 = 0;
    v18 = v13;
    if (!*(_QWORD *)(v4 + 16))
    {
      v14.super.isa = (Class)WebCore::createDOMException(a1, 0, (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException((JSC::VM *)v4, a1, v14);
      v13 = v18;
    }
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v21)
    {
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v10 + 240) = v11;
  }
  return 1;
}

unint64_t WebCore::jsAnalyserNode_smoothingTimeConstant(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 224);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSAnalyserNode_smoothingTimeConstant(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  double v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  char v22;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAnalyserNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAnalyserNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, a1);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v11 >= 0.0 && v11 <= 1.0)
  {
    *(double *)(v10 + 224) = v11;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v20) = 0;
    v22 = 1;
    v14 = v21;
    v21 = 0;
    v19 = v14;
    if (!*(_QWORD *)(v4 + 16))
    {
      v15.super.isa = (Class)WebCore::createDOMException(a1, 0, (JSC::JSGlobalObject *)&v19);
      JSC::VM::throwException((JSC::VM *)v4, a1, v15);
      v14 = v19;
    }
    v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v22)
    {
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::JSAnalyserNode::subspaceForImpl(WebCore::JSAnalyserNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1872);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1872);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1872);
    *(_QWORD *)(v8 + 1872) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1872);
  *(_QWORD *)(v3 + 1872) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAudioNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::AnalyserNode,WebCore::AnalyserNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSAnalyserNode::s_info + ~((_QWORD)&WebCore::JSAnalyserNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnalyserNode::s_info + ~((_QWORD)&WebCore::JSAnalyserNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSAnalyserNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSAnalyserNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSAnalyserNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSAnalyserNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSAnalyserNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSAnalyserNode::s_info);
  }
  v21 = WebCore::JSAnalyserNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::AnalyserNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E3367CB8)
  {
    v7 = WebCore::createWrapper<WebCore::AnalyserNode,WebCore::AnalyserNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 500;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAnimationEffect::prototype(WebCore::JSAnimationEffect *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAnimationEffect::s_info + ~((_QWORD)&WebCore::JSAnimationEffect::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationEffect::s_info + ~((_QWORD)&WebCore::JSAnimationEffect::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAnimationEffect::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAnimationEffect::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSAnimationEffectPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSAnimationEffectPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSAnimationEffect::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSAnimationEffect::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSAnimationEffect::destroy(WebCore::JSAnimationEffect *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSAnimationEffect::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAnimationEffectPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAnimationEffectPrototype::create(WebCore::JSAnimationEffectPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSAnimationEffect::s_info, &WebCore::JSAnimationEffectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationEffect>,(WebCore::DOMConstructorID)316>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2528);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationEffect>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAnimationEffect::s_info + ~((_QWORD)&WebCore::JSAnimationEffect::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationEffect::s_info + ~((_QWORD)&WebCore::JSAnimationEffect::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAnimationEffect::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAnimationEffect::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAnimationEffectPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSAnimationEffectPrototype::create((WebCore::JSAnimationEffectPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSAnimationEffect::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSAnimationEffect::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2528) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAnimationEffectConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAnimationEffectPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationEffect>,(WebCore::DOMConstructorID)316>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSAnimationEffect::subspaceForImpl(WebCore::JSAnimationEffect *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2568);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2568))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2568);
    *(_QWORD *)(v8 + 2568) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2568);
  *(_QWORD *)(v3 + 2568) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAnimationEffectOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSAnimationEffectOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::AnimationFrameRatePreset>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F42D8 = &WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_1::operator() const(void)::impl;
    qword_1EE2F42E0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_2::operator() const(void)::impl;
    unk_1EE2F42E8 = &WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::$_3::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::AnimationFrameRatePreset)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::AnimationFrameRatePreset>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v11;
  int v12;
  int v13;
  uint64_t v18;
  unint64_t v19;

  v3 = a1;
  v19 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v19, a1);
    v4 = v18;
    if (v18)
      goto LABEL_7;
LABEL_39:
    v12 = 0;
    v13 = 0;
    return v12 | (v13 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_39;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 4;
  if (v6 != "auto" && v7 == 4)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_WORD *)(v6 + 1) != 29813 || *((_WORD *)v6 + 1) != 28532)
      {
LABEL_13:
        v9 = 4;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 97)
        goto LABEL_13;
      if (*(_DWORD *)(v6 + 2) != 7602293 || *((_DWORD *)v6 + 1) != 7274612)
        goto LABEL_13;
    }
LABEL_54:
    v11 = &WebCore::parseEnumerationFromString<WebCore::AnimationFrameRatePreset>(WTF::String const&)::mappings;
    goto LABEL_55;
  }
  v10 = v6 == "auto" && v7 == 4;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_54;
LABEL_18:
  if (v6 == "high")
    v8 = 1;
  if (v8)
  {
    if (v6 == "high" && v7 == 4)
      goto LABEL_35;
  }
  else
  {
    if (!v9)
      goto LABEL_35;
    if ((v5 & 4) != 0)
    {
      if (*v6 != 104 || *(_WORD *)(v6 + 1) != 26473 || *((_WORD *)v6 + 1) != 26727)
        goto LABEL_26;
LABEL_35:
      v11 = &off_1E321F2F8;
      goto LABEL_55;
    }
    if (*(_WORD *)v6 == 104 && *(_DWORD *)(v6 + 2) == 6750313 && *((_DWORD *)v6 + 1) == 6815847)
      goto LABEL_35;
  }
LABEL_26:
  if (v6 == "highest" || v9 != 7)
  {
    if (v6 == "highest" && v9 == 7)
      goto LABEL_32;
    if (v6 == "low" || v9 != 3)
    {
      if (v9 != 3 || v6 != "low")
        goto LABEL_74;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 != 108 || *(_WORD *)(v6 + 1) != 30575)
        goto LABEL_74;
    }
    else if (*(_WORD *)v6 != 108 || *(_DWORD *)(v6 + 2) != 7798895)
    {
      goto LABEL_74;
    }
    v11 = &off_1E321F328;
    goto LABEL_55;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 104 && *(_DWORD *)(v6 + 1) == 1701341033 && *(_DWORD *)(v6 + 3) == 1953719656)
      goto LABEL_32;
    goto LABEL_74;
  }
  if (*(_WORD *)v6 != 104)
  {
LABEL_74:
    v13 = 0;
    v12 = 0;
    goto LABEL_56;
  }
  v13 = 0;
  if (*(_QWORD *)(v6 + 2) == 0x65006800670069)
  {
    v12 = 0;
    if (*(_QWORD *)(v6 + 6) == 0x74007300650068)
    {
LABEL_32:
      v11 = &off_1E321F310;
LABEL_55:
      v12 = *((unsigned __int8 *)v11 + 16);
      v13 = 1;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_56:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v12 | (v13 << 8);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSAnimationPlaybackEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  JSC::JSCell *v9;
  JSC::VM *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t Object;
  JSC::Structure *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  JSC::VM *v31;
  double v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebCore::JSDOMGlobalObject *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  char *v46;
  double v47;
  JSC::VM *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char **v55;
  int v56;
  unint64_t v57;
  WebCore::JSEvent *v58;
  JSC::JSCell *v59;
  unint64_t v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  JSCell *v64;
  JSC::JSCell *v65;
  JSC::JSGlobalObject *v66;
  JSC::JSObject *v67;
  JSC::JSGlobalObject *v68;
  JSC::VM *v69;
  JSC::JSObject *v70;
  JSC::Structure *v71;
  JSC::VM *FunctionRealm;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char **v79;
  int v80;
  JSC::JSCell *v81;
  unint64_t Structure;
  JSC::Structure *v83;
  JSC::JSCell *v84;
  uint64_t v85;
  unint64_t SubclassStructure;
  _DWORD *v87;
  JSValue v89;
  JSC::VM *v90;
  double v91;
  double v92;
  double v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  int *v102;
  int v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  int *v107;
  int v108;
  uint64_t v109;
  JSC::VM *v110;
  int v111;
  JSC::VM *v112;
  JSC::VM *v113;
  unint64_t v114;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v89.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v89);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v110);
  v8 = v111;
  if (!v111)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v10 = v5;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = NAN;
      goto LABEL_7;
    }
    v9 = *(JSC::JSCell **)(a2 + 56);
    v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v112 = v2;
    if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v10 = v5;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = NAN;
LABEL_7:
      v15 = NAN;
      goto LABEL_65;
    }
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
      v64 = 0;
LABEL_105:
      v8 = v111;
      goto LABEL_106;
    }
    v17 = (JSC::Structure *)Object;
    v109 = v7;
    WTF::AtomStringImpl::addLiteral();
    v18 = (WTF::StringImpl *)v114;
    v20 = JSC::JSObject::get(v17, a1, v114);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
    v10 = v5;
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
    {
LABEL_148:
      v64 = 0;
      goto LABEL_105;
    }
    if (v20 == 10)
    {
      v11 = 0;
      goto LABEL_21;
    }
    v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v20 >= 0xFFFE000000000000)
    {
      v94 = (_DWORD)v20 == 0;
    }
    else
    {
      *(_QWORD *)&v22 = v20 - 0x2000000000000;
      if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v11 = v22 > 0.0 || v22 < 0.0;
LABEL_20:
        if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
          goto LABEL_148;
LABEL_21:
        WTF::AtomStringImpl::addLiteral();
        v23 = (WTF::StringImpl *)v114;
        v25 = JSC::JSObject::get(v17, a1, v114);
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v24);
          else
            *(_DWORD *)v23 -= 2;
        }
        if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
          goto LABEL_148;
        if (v25 == 10)
        {
          v12 = 0;
          goto LABEL_32;
        }
        v26 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v25 >= 0xFFFE000000000000)
        {
          v99 = (_DWORD)v25 == 0;
          goto LABEL_197;
        }
        *(_QWORD *)&v27 = v25 - 0x2000000000000;
        if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v27 <= 0.0)
          {
            v12 = v27 < 0.0;
            goto LABEL_31;
          }
        }
        else
        {
          if ((v25 & 0xFFFE000000000002) != 0)
          {
            v12 = v25 == 7;
            goto LABEL_31;
          }
          v100 = *(unsigned __int8 *)(v25 + 5);
          if (v100 == 3)
          {
            v103 = *(_DWORD *)(v25 + 8);
LABEL_185:
            v99 = v103 == 0;
            goto LABEL_197;
          }
          if (v100 == 2)
          {
            v101 = *(_QWORD *)(v25 + 8);
            if ((v101 & 1) != 0)
              v102 = (int *)(v25 + 16);
            else
              v102 = (int *)(v101 + 4);
            v103 = *v102;
            goto LABEL_185;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v99 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_197:
            v12 = !v99;
LABEL_31:
            if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
              goto LABEL_148;
LABEL_32:
            WTF::AtomStringImpl::addLiteral();
            v28 = (WTF::StringImpl *)v114;
            v30 = JSC::JSObject::get(v17, a1, v114);
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v29);
              else
                *(_DWORD *)v28 -= 2;
            }
            if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
              goto LABEL_148;
            if (v30 == 10)
            {
              v13 = 0;
              goto LABEL_43;
            }
            v31 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v30 >= 0xFFFE000000000000)
            {
              v104 = (_DWORD)v30 == 0;
              goto LABEL_201;
            }
            *(_QWORD *)&v32 = v30 - 0x2000000000000;
            if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v32 <= 0.0)
              {
                v13 = v32 < 0.0;
                goto LABEL_42;
              }
            }
            else
            {
              if ((v30 & 0xFFFE000000000002) != 0)
              {
                v13 = v30 == 7;
                goto LABEL_42;
              }
              v105 = *(unsigned __int8 *)(v30 + 5);
              if (v105 == 3)
              {
                v108 = *(_DWORD *)(v30 + 8);
LABEL_189:
                v104 = v108 == 0;
                goto LABEL_201;
              }
              if (v105 == 2)
              {
                v106 = *(_QWORD *)(v30 + 8);
                if ((v106 & 1) != 0)
                  v107 = (int *)(v30 + 16);
                else
                  v107 = (int *)(v106 + 4);
                v108 = *v107;
                goto LABEL_189;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v104 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_201:
                v13 = !v104;
LABEL_42:
                if (*((_DWORD *)v31 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
                  goto LABEL_148;
LABEL_43:
                WTF::AtomStringImpl::addLiteral();
                v33 = (WTF::StringImpl *)v114;
                v35 = JSC::JSObject::get(v17, a1, v114);
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, v34);
                  else
                    *(_DWORD *)v33 -= 2;
                }
                if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
                  goto LABEL_148;
                if ((v35 | 8) == 0xA)
                {
                  v14 = NAN;
                }
                else
                {
                  v36 = (JSC::VM *)*((_QWORD *)a1 + 7);
                  v113 = v36;
                  v114 = v35;
                  if (v35 >= 0xFFFE000000000000)
                  {
                    v14 = (double)(int)v35;
                  }
                  else if (v35 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                  {
                    v90 = v36;
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v114, a1);
                    v36 = v90;
                    v14 = v91;
                  }
                  else
                  {
                    *(_QWORD *)&v14 = v35 - 0x2000000000000;
                  }
                  if (*((_DWORD *)v36 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) != 0)
                    goto LABEL_148;
                  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                    goto LABEL_138;
                }
                WTF::AtomStringImpl::addLiteral();
                v37 = (WTF::StringImpl *)v114;
                v3 = JSC::JSObject::get(v17, a1, v114);
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, v38);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
                  goto LABEL_148;
                if ((v3 | 8) == 0xA)
                {
                  v15 = NAN;
                  v7 = v109;
                  goto LABEL_65;
                }
                v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
                v113 = v2;
                v114 = v3;
                v7 = v109;
                if (v3 >= 0xFFFE000000000000)
                {
                  v15 = (double)(int)v3;
                }
                else if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v114, a1);
                  v15 = v92;
                }
                else
                {
                  *(_QWORD *)&v15 = v3 - 0x2000000000000;
                }
                if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
                  goto LABEL_148;
                if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                {
LABEL_65:
                  if (v111)
                  {
                    std::__throw_bad_variant_access[abi:sn180100]();
                    v47 = v93;
                  }
                  else
                  {
                    v2 = v110;
                    v110 = 0;
                    v3 = bmalloc::api::isoAllocate();
                    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
                    *(_QWORD *)(v3 + 8) = 0;
                    if (v12)
                      v42 = 4;
                    else
                      v42 = 0;
                    if ((_DWORD)v13)
                      v43 = 8;
                    else
                      v43 = 0;
                    if ((_DWORD)v11)
                      v44 = 1540098;
                    else
                      v44 = 1540096;
                    v45 = v42 | v43 | v44 | (v2 != 0) | *(_DWORD *)(v3 + 20) & 0xFFC00000;
                    *(_DWORD *)(v3 + 16) = 1;
                    *(_DWORD *)(v3 + 20) = v45;
                    if (v2)
                    {
                      *(_DWORD *)v2 += 2;
                      v45 = *(_DWORD *)(v3 + 20);
                    }
                    v11 = (uint64_t)v10;
                    *(_QWORD *)(v3 + 24) = v2;
                    *(_QWORD *)(v3 + 32) = 0;
                    *(_QWORD *)(v3 + 40) = 0;
                    *(_QWORD *)(v3 + 48) = 0;
                    *(_QWORD *)(v3 + 56) = v41;
                    *(_DWORD *)(v3 + 20) = v45 | 0x4000;
                    v13 = (uint64_t)off_1E338C7A0;
                    *(_QWORD *)(v3 + 64) = 0;
                    *(_QWORD *)(v3 + 72) = 0;
                    *(_QWORD *)(v3 + 80) = 0x7FF8000000000000;
                    v46 = &byte_19689B000;
                    *(_QWORD *)v3 = off_1E338C7A0;
                    v47 = v14 / 1000.0;
                  }
                  *(double *)(v3 + 96) = v47;
                  *(double *)(v3 + 88) = v15 / *((double *)v46 + 48);
                  v114 = v3;
                  if (v2)
                  {
                    if (*(_DWORD *)v2 == 2)
                    {
                      WTF::StringImpl::destroy(v2, v39);
                      if (*(_QWORD *)v3 != v13)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19483F0E4);
                      }
                    }
                    else
                    {
                      *(_DWORD *)v2 -= 2;
                    }
                  }
                  v48 = *(JSC::VM **)(v7 + 40);
                  v49 = *((_QWORD *)v48 + 412);
                  if (v49)
                  {
                    v50 = *(_DWORD *)(v49 - 8);
                    v51 = ((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
                         + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
                                                                                          + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) >> 22);
                    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
                    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
                    v54 = v50 & ((v53 >> 31) ^ v53);
                    v55 = *(char ***)(v49 + 16 * v54);
                    if (v55 == &WebCore::JSAnimationPlaybackEvent::s_info)
                    {
LABEL_86:
                      v57 = *(_QWORD *)(v49 + 16 * v54 + 8);
                      if (v57)
                      {
LABEL_88:
                        v64 = (JSCell *)WebCore::JSAnimationPlaybackEvent::create(v57, v48, (uint64_t *)&v114);
                        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v48 + 415), v3, (uint64_t)v64);
                        v65 = *(JSC::JSCell **)(a2 + 40);
                        if (((unint64_t)v65 & 0xFFFE000000000002) != 0
                          || (v66 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v65)) == 0
                          || (v68 = v66, v66 == *(JSC::JSGlobalObject **)(a2 + 24))
                          || (v69 = (JSC::VM *)*((_QWORD *)a1 + 7),
                              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v66, v67),
                              *((_DWORD *)v69 + 20))
                          && (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) != 0)
                        {
LABEL_101:
                          if (*(_DWORD *)(v11 + 80)
                            && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
                          {
                            v64 = 0;
                          }
                          v87 = (_DWORD *)v114;
                          v114 = 0;
                          if (v87)
                          {
                            if (v87[4] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v87 + 8))(v87);
                            else
                              --v87[4];
                          }
                          goto LABEL_105;
                        }
                        v73 = *((_QWORD *)FunctionRealm + 412);
                        if (v73)
                        {
                          v74 = *(_DWORD *)(v73 - 8);
                          v75 = ((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
                               + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
                                                                                                + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) >> 22);
                          v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
                          v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
                          v78 = v74 & ((v77 >> 31) ^ v77);
                          v79 = *(char ***)(v73 + 16 * v78);
                          if (v79 == &WebCore::JSAnimationPlaybackEvent::s_info)
                          {
LABEL_97:
                            v70 = *(JSC::JSObject **)(v73 + 16 * v78 + 8);
                            if (v70)
                            {
LABEL_99:
                              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v68, v70, v71);
                              if (!*((_DWORD *)v69 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) == 0)
                                JSC::JSObject::setStructure(v64, v69, SubclassStructure);
                              goto LABEL_101;
                            }
                          }
                          else
                          {
                            v80 = 1;
                            while (v79)
                            {
                              v78 = ((_DWORD)v78 + v80) & v74;
                              v79 = *(char ***)(v73 + 16 * v78);
                              ++v80;
                              if (v79 == &WebCore::JSAnimationPlaybackEvent::s_info)
                                goto LABEL_97;
                            }
                          }
                        }
                        v81 = (JSC::JSCell *)WebCore::JSEvent::prototype(v69, FunctionRealm, v70);
                        Structure = WebCore::JSAnimationPlaybackEventPrototype::createStructure((uint64_t *)v69, (uint64_t)FunctionRealm, v81);
                        *(_DWORD *)(Structure + 16) |= 0x80000u;
                        v84 = (JSC::JSCell *)WebCore::JSAnimationPlaybackEventPrototype::create(v69, FunctionRealm, Structure, v83);
                        v85 = WebCore::JSAnimationPlaybackEvent::createStructure((uint64_t *)v69, (uint64_t)FunctionRealm, v84);
                        v70 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v85, (uint64_t)&WebCore::JSAnimationPlaybackEvent::s_info);
                        goto LABEL_99;
                      }
                    }
                    else
                    {
                      v56 = 1;
                      while (v55)
                      {
                        v54 = ((_DWORD)v54 + v56) & v50;
                        v55 = *(char ***)(v49 + 16 * v54);
                        ++v56;
                        if (v55 == &WebCore::JSAnimationPlaybackEvent::s_info)
                          goto LABEL_86;
                      }
                    }
                  }
                  v58 = (WebCore::JSEvent *)*((_QWORD *)v48 + 7);
                  v59 = (JSC::JSCell *)WebCore::JSEvent::prototype(v58, v48, v40);
                  v60 = WebCore::JSAnimationPlaybackEventPrototype::createStructure((uint64_t *)v58, (uint64_t)v48, v59);
                  *(_DWORD *)(v60 + 16) |= 0x80000u;
                  v62 = (JSC::JSCell *)WebCore::JSAnimationPlaybackEventPrototype::create(v58, v48, v60, v61);
                  v63 = WebCore::JSAnimationPlaybackEvent::createStructure((uint64_t *)v58, (uint64_t)v48, v62);
                  v57 = WebCore::cacheDOMStructure((JSCell *)v48, v63, (uint64_t)&WebCore::JSAnimationPlaybackEvent::s_info);
                  goto LABEL_88;
                }
LABEL_138:
                JSC::throwTypeError();
                goto LABEL_148;
              }
            }
            v13 = 1;
            goto LABEL_42;
          }
        }
        v12 = 1;
        goto LABEL_31;
      }
      if ((v20 & 0xFFFE000000000002) != 0)
      {
        v11 = v20 == 7;
        goto LABEL_20;
      }
      v95 = *(unsigned __int8 *)(v20 + 5);
      if (v95 == 3)
      {
        v98 = *(_DWORD *)(v20 + 8);
      }
      else
      {
        if (v95 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v11 = 1;
            goto LABEL_20;
          }
          v94 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_193;
        }
        v96 = *(_QWORD *)(v20 + 8);
        if ((v96 & 1) != 0)
          v97 = (int *)(v20 + 16);
        else
          v97 = (int *)(v96 + 4);
        v98 = *v97;
      }
      v94 = v98 == 0;
    }
LABEL_193:
    v11 = !v94;
    goto LABEL_20;
  }
  v64 = 0;
LABEL_106:
  if (v8 != -1)
    ((void (*)(unint64_t *, JSC::VM **))off_1E32236D8[v8])(&v114, &v110);
  return v64;
}

WTF::StringImpl *WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t this@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  JSC::JSRopeString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v19 = this;
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((this & 0xFFFE000000000002) != 0 || (v6 = (JSC::JSRopeString *)this, *(_BYTE *)(this + 5) != 2))
    v6 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v19, a1);
  v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
  if ((v7 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(v6, a1);
    goto LABEL_8;
  }
  if (v7)
  {
    if ((*((_BYTE *)v7 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v7 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v7, (WTF::StringImpl *)this);
      v7 = v20;
    }
    v18 = v7;
    if ((*(_BYTE *)(*((_QWORD *)v6 + 1) + 16) & 0x10) != 0)
      goto LABEL_8;
    v9 = *((_QWORD *)a1 + 7);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
  else
  {
    v18 = 0;
    if ((MEMORY[0x10] & 0x10) != 0)
      goto LABEL_8;
    v7 = 0;
    v9 = *((_QWORD *)a1 + 7);
  }
  __dmb(0xAu);
  v10 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v7;
  v20 = v10;
  v11 = (_QWORD *)(v9 + 808);
  v12 = *(unsigned int *)(v9 + 820);
  if ((_DWORD)v12 == *(_DWORD *)(v9 + 816))
  {
    v14 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v20);
    v12 = *(unsigned int *)(v9 + 820);
    v13 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v12);
    v10 = *v14;
  }
  else
  {
    v13 = (WTF::StringImpl **)(*v11 + 8 * v12);
    v14 = &v20;
  }
  *v14 = 0;
  *v13 = v10;
  *(_DWORD *)(v9 + 820) = v12 + 1;
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)this);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_8:
  if (!*((_DWORD *)v5 + 20))
  {
    result = v18;
LABEL_10:
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  result = v18;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_10;
  *(_DWORD *)(a3 + 8) = 1;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return result;
}

uint64_t WebCore::JSAnimationPlaybackEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAnimationPlaybackEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAnimationPlaybackEventPrototype::create(WebCore::JSAnimationPlaybackEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSAnimationPlaybackEvent::s_info, &WebCore::JSAnimationPlaybackEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAnimationPlaybackEvent>,(WebCore::DOMConstructorID)317>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2536);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSAnimationPlaybackEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
         + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationPlaybackEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSAnimationPlaybackEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAnimationPlaybackEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAnimationPlaybackEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAnimationPlaybackEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAnimationPlaybackEventPrototype::create((WebCore::JSAnimationPlaybackEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAnimationPlaybackEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAnimationPlaybackEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2536) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAnimationPlaybackEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAnimationPlaybackEventPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAnimationPlaybackEvent>,(WebCore::DOMConstructorID)317>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAnimationPlaybackEvent_currentTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = round(*(double *)(*(_QWORD *)(a2 + 24) + 96) * 1000.0 * 1000.0) / 1000.0;
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((*(_QWORD *)&v2 & 0x8000000000000000) == 0 || (_DWORD)v3))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAnimationPlaybackEvent_timelineTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = round(*(double *)(*(_QWORD *)(a2 + 24) + 88) * 1000.0 * 1000.0) / 1000.0;
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((*(_QWORD *)&v2 & 0x8000000000000000) == 0 || (_DWORD)v3))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSAnimationPlaybackEvent::subspaceForImpl(WebCore::JSAnimationPlaybackEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2576);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2576))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2576);
    *(_QWORD *)(v8 + 2576) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2576);
  *(_QWORD *)(v3 + 2576) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAnimationTimeline::prototype(WebCore::JSAnimationTimeline *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAnimationTimeline::s_info + ~((_QWORD)&WebCore::JSAnimationTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationTimeline::s_info + ~((_QWORD)&WebCore::JSAnimationTimeline::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAnimationTimeline::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAnimationTimeline::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSAnimationTimelinePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSAnimationTimelinePrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSAnimationTimeline::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSAnimationTimeline::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSAnimationTimeline::destroy(WebCore::JSAnimationTimeline *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSAnimationTimeline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAnimationTimeline::JSAnimationTimeline(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSAnimationTimeline::createPrototype(WebCore::JSAnimationTimeline *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  JSC::Structure *v6;

  Structure = WebCore::JSAnimationTimelinePrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSAnimationTimelinePrototype::create(this, (JSC::VM *)a2, Structure, v6);
}

uint64_t WebCore::JSAnimationTimelinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAnimationTimelinePrototype::create(WebCore::JSAnimationTimelinePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSAnimationTimeline::s_info, (uint64_t)&WebCore::JSAnimationTimelinePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationTimeline>,(WebCore::DOMConstructorID)318>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2544);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationTimeline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAnimationTimeline::s_info
         + ~((_QWORD)&WebCore::JSAnimationTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSAnimationTimeline::s_info
                                                                     + ~((_QWORD)&WebCore::JSAnimationTimeline::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAnimationTimeline::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAnimationTimeline::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAnimationTimelinePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSAnimationTimelinePrototype::create((WebCore::JSAnimationTimelinePrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSAnimationTimeline::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSAnimationTimeline::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2544) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAnimationTimelineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAnimationTimelinePrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationTimeline>,(WebCore::DOMConstructorID)318>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAnimationTimeline_currentTime(uint64_t a1, uint64_t a2)
{
  double v2;
  char v3;
  double v4;
  uint64_t v5;

  v2 = COERCE_DOUBLE((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 56))(*(_QWORD *)(a2 + 24)));
  if (!v3)
    return 2;
  v4 = round(v2 * 1000.0 * 1000.0) / 1000.0;
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v5 = (int)v4, v4 == (double)(int)v5)
    && ((*(_QWORD *)&v4 & 0x8000000000000000) == 0 || (_DWORD)v5))
  {
    return v5 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

uint64_t WebCore::JSAnimationTimeline::subspaceForImpl(WebCore::JSAnimationTimeline *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2584);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2584))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2584);
    *(_QWORD *)(v8 + 2584) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2584);
  *(_QWORD *)(v3 + 2584) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAnimationTimelineOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSAnimationTimelineOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::JSAnimationTimeline::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSAnimationTimeline::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSAnimationTimeline::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::parseEnumeration<WebCore::AttestationConveyancePreference>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v22;
  unint64_t v23;

  v3 = a1;
  v23 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v23, a1);
  v4 = v22;
  if (!v22)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "direct" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_DWORD *)(v6 + 1) != 1667592809 || *(_DWORD *)(v6 + 2) != 1952671090)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v14 = *(_QWORD *)(v6 + 2);
      v15 = *(_QWORD *)(v6 + 4);
      if (v14 != 0x63006500720069 || v15 != 0x74006300650072)
        goto LABEL_16;
    }
    goto LABEL_41;
  }
  if (v6 == "direct" && v7 == 6)
  {
LABEL_41:
    v13 = &WebCore::parseEnumerationFromString<WebCore::AttestationConveyancePreference>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 != "enterprise" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 101 || *(_QWORD *)(v6 + 1) != 0x736972707265746ELL || *(_QWORD *)(v6 + 2) != 0x6573697270726574)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 101)
        goto LABEL_16;
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BCA30);
      v18.i16[0] = vminvq_u16(v18);
      if (!v18.i32[0])
        goto LABEL_16;
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BCA40);
      v19.i16[0] = vminvq_u16(v19);
      if (!v19.i32[0])
        goto LABEL_16;
    }
    goto LABEL_30;
  }
  if (v6 == "enterprise" && v7 == 10)
  {
LABEL_30:
    v13 = &off_1E321F758;
LABEL_42:
    v10 = *((unsigned __int8 *)v13 + 16);
    v9 = 1;
    goto LABEL_43;
  }
  if (v6 == "indirect" || v7 != 8)
  {
    if (v6 == "indirect" && v7 == 8)
      goto LABEL_59;
    if (v6 == "none" || v7 != 4)
    {
      if (v7 != 4 || v6 != "none")
        goto LABEL_16;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 != 110 || *(_WORD *)(v6 + 1) != 28271 || *((_WORD *)v6 + 1) != 25966)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 110)
        goto LABEL_16;
      if (*((_DWORD *)v6 + 1) != 6619246 || *(_DWORD *)(v6 + 2) != 7209071)
        goto LABEL_16;
    }
    v13 = &off_1E321F788;
    goto LABEL_42;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 105 && *(_DWORD *)(v6 + 1) == 1919509614 && *((_DWORD *)v6 + 1) == 1952671090)
      goto LABEL_59;
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_43;
  }
  if (*(_WORD *)v6 != 105)
    goto LABEL_16;
  v9 = 0;
  if (*(_QWORD *)(v6 + 2) == 0x7200690064006ELL)
  {
    v10 = 0;
    if (*((_QWORD *)v6 + 1) == 0x74006300650072)
    {
LABEL_59:
      v13 = &off_1E321F770;
      goto LABEL_42;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::JSAttr::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSAttr::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAttr::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSAttr::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

WTF::StringImpl *WebCore::JSAttrPrototype::finishCreation(WebCore::JSAttrPrototype *this, JSC::VM *a2)
{
  char *v4;
  WebCore::DeprecatedGlobalSettings *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v4 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v5 = JSC::reifyStaticProperties<9u>(a2, (uint64_t)&WebCore::JSAttr::s_info, (uint64_t)&WebCore::JSAttrPrototypeTableValues, this);
  if (!*((_BYTE *)WebCore::DeprecatedGlobalSettings::shared(v5) + 23))
  {
    WTF::AtomStringImpl::addLiteral();
    v6 = v13;
    v7 = *((_DWORD *)a2 + 23281);
    *((_DWORD *)a2 + 23281) = 1;
    LODWORD(v13) = -1;
    WORD2(v13) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)a2 + 23281) = v7;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v8);
      else
        *(_DWORD *)v6 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, this);
  }
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSAttr::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAttr::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSAttr::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAttr::visitChildren(WebCore::JSAttr *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSNode::visitChildren(this, a2, a3);
    result = WebCore::JSAttr::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSAttr::createPrototype(WebCore::JSAttr *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSAttrPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSAttrPrototype::create(WebCore::JSAttrPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSAttrPrototype::finishCreation((WebCore::JSAttrPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAttr>,(WebCore::DOMConstructorID)414>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3312);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSNode>,(WebCore::DOMConstructorID)466>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAttr>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSAttr>((WebCore::JSAttr *)a1, (JSC::VM *)a2, v17) + 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3312) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAttrConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAttrPrototype::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAttr>,(WebCore::DOMConstructorID)414>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAttr_namespaceURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 88) + 32);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsAttr_prefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 88) + 16);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsAttr_localName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 88) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsAttr_name(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  WebCore::Attr::name(*(WTF::StringImpl **)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_8;
  }
  if (v5 != 1)
    goto LABEL_4;
  v8 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v9 = *v8;
LABEL_15:
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
    goto LABEL_16;
  }
  v10 = *(unsigned __int16 *)v8;
  if (v10 <= 0xFF)
  {
    v9 = v10;
    goto LABEL_15;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_16:
  v11 = 0;
LABEL_8:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSAttr_value(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unsigned int *v10;
  WTF::StringImpl *v11;
  __n128 v12;
  int v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[40];
  uint64_t v31;
  JSC::JSGlobalObject *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAttr::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAttr::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(unsigned int **)(a2 + 24);
  v28 = (WTF *)v30;
  v29 = 4;
  v30[32] = 0;
  v31 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v32 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v28;
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v26);
  v13 = v27;
  v14 = v27 == 0;
  if (!v27)
  {
    v15 = v26;
    v26 = 0;
    v33 = v15;
    WebCore::Attr::setValue(v10, &v33, &v35, v12);
    v16 = v33;
    v33 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v37)
    {
      v11 = (WTF::StringImpl *)v35;
      LOBYTE(v33) = v35;
      v23 = v36;
      v36 = 0;
      v34 = v23;
      if (!*((_QWORD *)v4 + 2))
      {
        v24.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v35, (JSC::JSGlobalObject *)&v34);
        JSC::VM::throwException(v4, a1, v24);
        v23 = v34;
      }
      v34 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v11);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (v37)
      {
        v25 = v36;
        v36 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v11);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
    }
    v13 = v27;
  }
  if (v13 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32236D8[v13])(&v35, &v26);
  if (HIDWORD(v29))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v28, v32);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v31;
    if (HIDWORD(v29))
    {
      v20 = v28;
      v21 = 8 * HIDWORD(v29);
      do
      {
        v22 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v11);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        v20 = (WTF *)((char *)v20 + 8);
        v21 -= 8;
      }
      while (v21);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v31;
  }
  v17 = v28;
  if (v30 != (_BYTE *)v28 && v28 != 0)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v17, v11);
  }
  return v14;
}

unint64_t WebCore::jsAttr_ownerElement(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v6;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (v4 && (v6 = *(WebCore::JSDOMGlobalObject **)(v4 + 8)) != 0)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v6, a4);
  else
    return 2;
}

uint64_t WebCore::jsAttr_specified()
{
  return 7;
}

unint64_t WebCore::jsAttr_style(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::CSSStyleDeclaration *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)WebCore::Attr::style(*(WebCore::Attr **)(a2 + 24));
  if (v4)
    return WebCore::toJS(a1, v3, v4, v5);
  else
    return 2;
}

uint64_t WebCore::toJSNewlyCreated(int a1, WebCore::JSAttr **a2, uint64_t *a3)
{
  uint64_t result;

  if (*(uint64_t (***)(WebCore::Node *__hidden))*a3 == off_1E33A0600)
    return WebCore::createWrapper<WebCore::Attr,WebCore::Attr>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  result = 380;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::Attr,WebCore::Attr>(WebCore::JSAttr **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *Allocator;
  uint64_t v12;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSAttr>(a1[7], (JSC::VM *)a1, a3);
  v7 = WebCore::JSAttr::create(v6, (JSC::VM *)a1, a2);
  v8 = v7;
  v9 = (uint64_t)a1[415];
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  v10 = (_QWORD *)(v5 + 8);
  if (!v5)
    v10 = 0;
  if (*(_DWORD *)(v9 + 48))
  {
    v14 = (uint64_t *)(v9 + 32);
    v20 = v5;
    JSC::Weak<JSC::JSObject>::Weak(&v19, v7, (uint64_t)&WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner, v9);
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v14, &v20, &v19);
    if (v19)
      *(_QWORD *)(v19 + 8) = 3;
  }
  else
  {
    if (v7)
    {
      v17 = v9;
      v18 = v10;
      if ((v7 & 8) != 0)
        v15 = (v7 - 112) | 1;
      else
        v15 = v7 & 0xFFFFFFFFFFFFC000;
      if ((v15 & 1) != 0)
        v16 = v15 + 47;
      else
        v16 = *(_QWORD *)v15 + 32;
      Allocator = *(_QWORD **)(v16 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v16 + 16) = *Allocator;
      *Allocator = v8;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      Allocator[2] = v17;
      v10 = v18;
    }
    else
    {
      Allocator = 0;
    }
    v12 = *v10;
    *v10 = Allocator;
    if (v12)
      *(_QWORD *)(v12 + 8) = 3;
  }
  return v8;
}

uint64_t WebCore::JSAttr::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSAttr::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSAttr::s_info && v4 != 0);
  }
  if (!v3)
    return 0;
  else
    return *(_QWORD *)(a2 + 24);
}

uint64_t WebCore::JSAudioBuffer::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v3 = a2[11];
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    result = 75;
    __break(0xC471u);
    return result;
  }
  v4 = *(_QWORD *)(result + 24);
  v5 = (unsigned __int8 *)(v4 + 33);
  if (__ldaxr((unsigned __int8 *)(v4 + 33)))
  {
    __clrex();
LABEL_6:
    result = MEMORY[0x19AEA534C](v4 + 33);
    goto LABEL_7;
  }
  if (__stxr(1u, v5))
    goto LABEL_6;
LABEL_7:
  v7 = *(unsigned int **)(v4 + 24);
  if (v7)
    v8 = v7 + 2;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&v7[4 * *v7 + 2];
  else
    v9 = 0;
  while (v8 != (unsigned int *)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)v8 + 1);
    if (!v10 || (v10[1] & 3) != 0)
      v11 = 0;
    else
      v11 = *v10;
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v11);
    v8 += 4;
  }
  v12 = __ldxr(v5);
  if (v12 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebCore::JSAudioBuffer::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  return WebCore::AudioBuffer::visitChannelWrappers<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSAudioBuffer>::construct(JSC::VM **a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  JSCell *v9;
  JSC::JSCell *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  WTF *v27;
  double v28;
  float v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  WTF **v33;
  JSC::JSCell *v34;
  JSC::JSGlobalObject *v35;
  JSC::JSObject *v36;
  JSC::JSGlobalObject *v37;
  JSC::VM *v38;
  JSC::Structure *v39;
  uint64_t FunctionRealm;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  int v48;
  JSC::JSObject *v49;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v51;
  JSC::Structure *v52;
  JSC::JSCell *v53;
  uint64_t v54;
  unint64_t SubclassStructure;
  JSValue v56;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  JSValue v60;
  WebCore::JSAudioBuffer *v61;
  JSC::JSCell *v62;
  double v63;
  int v64[2];
  WTF::StringImpl *v65;
  int v66;
  JSC::VM *v67;
  WTF *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  _DWORD v71[2];
  JSC::VM *v72;

  v4 = a1[7];
  v67 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194842A30);
  }
  v8 = v6 - 192;
  if (!v6)
    v8 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v8 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v56.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, v7);
    return JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v56);
  }
  v10 = *(JSC::JSCell **)(a2 + 48);
  v72 = a1[7];
  if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_16;
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
  {
    JSC::throwTypeError();
    return 0;
  }
  v12 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v12, (JSC::JSGlobalObject *)a1, *(unint64_t *)v64);
  if (*(_QWORD *)v64)
  {
    if (**(_DWORD **)v64 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v64, v13);
    else
      **(_DWORD **)v64 -= 2;
  }
  if (*((_DWORD *)v72 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
    return 0;
  if (v14 == 10)
  {
LABEL_16:
    v15 = "length";
    v16 = "unsigned long";
    v17 = (int)a1;
    v18 = 7;
    v19 = 14;
LABEL_17:
    WebCore::throwRequiredMemberTypeError(v17, (int)&v72, v15, v18, "AudioBufferOptions", 19, v16, v19);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v14, v71);
  if (v71[1])
    return 0;
  v21 = v71[0];
  WTF::AtomStringImpl::addLiteral();
  v23 = JSC::JSObject::get(v12, (JSC::JSGlobalObject *)a1, *(unint64_t *)v64);
  if (*(_QWORD *)v64)
  {
    if (**(_DWORD **)v64 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v64, v22);
    else
      **(_DWORD **)v64 -= 2;
  }
  if (*((_DWORD *)v72 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
    return 0;
  if (v23 == 10)
  {
    v70 = 1;
    v24 = 1;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v23, &v70);
    if (HIDWORD(v70))
      return 0;
    v24 = v70;
  }
  WTF::AtomStringImpl::addLiteral();
  v26 = JSC::JSObject::get(v12, (JSC::JSGlobalObject *)a1, *(unint64_t *)v64);
  if (*(_QWORD *)v64)
  {
    if (**(_DWORD **)v64 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v64, v25);
    else
      **(_DWORD **)v64 -= 2;
  }
  if (*((_DWORD *)v72 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
    return 0;
  if (v26 == 10)
  {
    v15 = "sampleRate";
    v16 = "float";
    v17 = (int)a1;
    v18 = 11;
    v19 = 6;
    goto LABEL_17;
  }
  *(_QWORD *)v64 = v26;
  v27 = a1[7];
  v68 = v27;
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
  }
  else if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v64, (JSC::JSGlobalObject *)a1);
  }
  else
  {
    *(_QWORD *)&v28 = v26 - 0x2000000000000;
  }
  if (*((_DWORD *)v27 + 20))
  {
    v63 = v28;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
    v28 = v63;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v28 < -3.40282347e38 || v28 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v29 = v28;
  v68 = (WTF *)(v24 | (unint64_t)(v21 << 32));
  *(float *)&v69 = v29;
  WebCore::AudioBuffer::create((float *)&v68, (uint64_t)v64);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_91;
  if (!v66)
  {
    v30 = *(_QWORD *)(v5 + 40);
    v31 = *(WTF **)v64;
    *(_QWORD *)v64 = 0;
    v68 = v31;
    v9 = (JSCell *)WebCore::createWrapper<WebCore::AudioBuffer,WebCore::AudioBuffer>(v30, &v68);
    v33 = (WTF **)v68;
    v68 = 0;
    if (v33)
      WTF::RefCounted<WebCore::AudioBuffer>::deref(v33, v32);
    goto LABEL_46;
  }
  if (v66 == 1)
  {
    v58 = (WTF::StringImpl *)LOBYTE(v64[0]);
    LOBYTE(v68) = v64[0];
    v59 = v65;
    v65 = 0;
    v69 = v59;
    if (!*((_QWORD *)v4 + 2))
    {
      v60.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v64[0]), (JSC::JSGlobalObject *)&v69);
      JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v60);
      v59 = v69;
    }
    v69 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
    v9 = 0;
LABEL_46:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
LABEL_91:
      v9 = 0;
LABEL_61:
      if (v66 != -1)
        ((void (*)(WTF **, int *))off_1E3223918[v66])(&v68, v64);
      return (uint64_t)v9;
    }
    v34 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v34 & 0xFFFE000000000002) != 0
      || (v35 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v34)) == 0
      || (v37 = v35, v35 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v38 = a1[7], FunctionRealm = JSC::getFunctionRealm((JSC *)a1, v35, v36), *((_DWORD *)v38 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
    {
LABEL_60:
      if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
        goto LABEL_61;
      goto LABEL_91;
    }
    v41 = *(_QWORD *)(FunctionRealm + 3296);
    if (v41)
    {
      v42 = *(_DWORD *)(v41 - 8);
      v43 = ((unint64_t)&WebCore::JSAudioBuffer::s_info + ~((_QWORD)&WebCore::JSAudioBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioBuffer::s_info + ~((_QWORD)&WebCore::JSAudioBuffer::s_info << 32)) >> 22);
      v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
      v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
      v46 = v42 & ((v45 >> 31) ^ v45);
      v47 = *(char ***)(v41 + 16 * v46);
      if (v47 == &WebCore::JSAudioBuffer::s_info)
      {
LABEL_56:
        v49 = *(JSC::JSObject **)(v41 + 16 * v46 + 8);
        if (v49)
        {
LABEL_58:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v37, v49, v39);
          if (!*((_DWORD *)v38 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) == 0)
            JSC::JSObject::setStructure(v9, v38, SubclassStructure);
          goto LABEL_60;
        }
      }
      else
      {
        v48 = 1;
        while (v47)
        {
          v46 = ((_DWORD)v46 + v48) & v42;
          v47 = *(char ***)(v41 + 16 * v46);
          ++v48;
          if (v47 == &WebCore::JSAudioBuffer::s_info)
            goto LABEL_56;
        }
      }
    }
    Structure = WebCore::JSAudioBufferPrototype::createStructure((uint64_t *)v38, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v53 = (JSC::JSCell *)WebCore::JSAudioBufferPrototype::create(v38, Structure, v51, v52);
    v54 = WebCore::JSAudioBuffer::createStructure((uint64_t *)v38, FunctionRealm, v53);
    v49 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v54, (uint64_t)&WebCore::JSAudioBuffer::s_info);
    goto LABEL_58;
  }
  v61 = (WebCore::JSAudioBuffer *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSAudioBuffer::destroy(v61, v62);
}

WTF **WebCore::JSAudioBuffer::destroy(WebCore::JSAudioBuffer *this, JSC::JSCell *a2)
{
  WTF **result;

  result = (WTF **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::AudioBuffer>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSAudioBuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioBuffer::estimatedSize(WebCore::AudioBuffer **this, JSC::JSCell *a2, JSC::VM *a3)
{
  uint64_t v4;

  v4 = JSC::JSObject::estimatedSize((JSC::JSObject *)this, a2, a3);
  return WebCore::AudioBuffer::memoryCost(this[3]) + v4;
}

uint64_t WebCore::JSAudioBuffer::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  JSC::JSObject::visitChildren();
  WebCore::AudioBuffer::visitChannelWrappers<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
  result = WebCore::AudioBuffer::memoryCost(*(WebCore::AudioBuffer **)(a1 + 24));
  if (*(_BYTE *)(a2 + 184))
  {
    *(_QWORD *)(a2 + 144) += result;
    v5 = *(_QWORD *)(a2 + 160);
    v6 = __CFADD__(v5, result);
    v7 = v5 + result;
    if (v6)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v7;
  }
  return result;
}

uint64_t WebCore::JSAudioBuffer::visitChildren(WebCore::JSAudioBuffer *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];
  uint64_t v18;
  char v19;

  v17[0] = a2;
  v17[1] = this;
  v19 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v18 = v5;
  if (!v5 || !*(_BYTE *)(v5 + 24))
  {
    *((_QWORD *)a2 + 11) = v17;
    JSC::JSObject::visitChildren();
    v6 = *((_QWORD *)this + 3);
    v7 = (unsigned __int8 *)(v6 + 33);
    if (__ldaxr((unsigned __int8 *)(v6 + 33)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
LABEL_7:
      v9 = *(unsigned int **)(v6 + 24);
      if (v9)
        v10 = v9 + 2;
      else
        v10 = 0;
      if (v9)
        v11 = (uint64_t)&v9[4 * *v9 + 2];
      else
        v11 = 0;
      while (v10 != (unsigned int *)v11)
      {
        v12 = (uint64_t *)*((_QWORD *)v10 + 1);
        if (!v12 || (v12[1] & 3) != 0)
          v13 = 0;
        else
          v13 = *v12;
        (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v13);
        v10 += 4;
      }
      v14 = __ldxr(v7);
      if (v14 == 1)
      {
        if (!__stlxr(0, v7))
          goto LABEL_24;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_24:
      v15 = WebCore::AudioBuffer::memoryCost(*((WebCore::AudioBuffer **)this + 3));
      result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v15);
      *(_QWORD *)(v17[0] + 88) = v18;
      return result;
    }
    MEMORY[0x19AEA534C](v6 + 33);
    goto LABEL_7;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioBufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioBufferPrototype::create(WebCore::JSAudioBufferPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSAudioBuffer::s_info, (uint64_t)&WebCore::JSAudioBufferPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioBuffer>,(WebCore::DOMConstructorID)232>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1856);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSAudioBuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioBuffer::s_info + ~((_QWORD)&WebCore::JSAudioBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioBuffer::s_info + ~((_QWORD)&WebCore::JSAudioBuffer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioBuffer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioBuffer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioBufferPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioBufferPrototype::create((WebCore::JSAudioBufferPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioBuffer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioBuffer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1856) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioBufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioBufferPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioBuffer>,(WebCore::DOMConstructorID)232>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioBuffer_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) | 0xFFFE000000000000;
}

unint64_t WebCore::jsAudioBuffer_duration(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = (double)*(unint64_t *)(*(_QWORD *)(a2 + 24) + 8) / *(float *)(*(_QWORD *)(a2 + 24) + 4);
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAudioBuffer_sampleRate(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 4);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAudioBuffer_numberOfChannels(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(a2 + 24) + 16);
  if (v2 && (LODWORD(v2) = *v2, (v2 & 0x80000000) != 0))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSAudioBufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from AudioBuffer";
    a5[1] = 27;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19484381CLL);
      }
    }
  }
  return result;
}

WTF **WebCore::JSAudioBufferOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF **v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(WTF ***)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF ***)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF ***)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
}

unint64_t WebCore::createWrapper<WebCore::AudioBuffer,WebCore::AudioBuffer>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  WebCore::AudioBuffer *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  WTF *v48;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSAudioBuffer::s_info + ~((_QWORD)&WebCore::JSAudioBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioBuffer::s_info + ~((_QWORD)&WebCore::JSAudioBuffer::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSAudioBuffer::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSAudioBuffer::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSAudioBufferPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSAudioBufferPrototype::create((WebCore::JSAudioBufferPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSAudioBuffer::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSAudioBuffer::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1880);
  if (v23)
    goto LABEL_31;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  v46 = *(_QWORD *)(v26 + 1880);
  if (!v46)
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v48, "IsoSpace T");
    v47 = 0;
    MEMORY[0x19AEA3204](v27, &v48, v20 + 192, v20 + 1872, 32, 8, &v47);
    v29 = (uint64_t)v47;
    v47 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v48;
    v48 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v46 = v27;
    v31 = *(_QWORD *)(v26 + 1880);
    *(_QWORD *)(v26 + 1880) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *(unsigned int *)(v24 + 2844);
    if ((_DWORD)v32 == *(_DWORD *)(v24 + 2840))
    {
      v33 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 2832, v32 + 1, (unint64_t)&v46);
      v32 = *(unsigned int *)(v24 + 2844);
      *(_QWORD *)(*(_QWORD *)(v24 + 2832) + 8 * v32) = *v33;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v24 + 2832) + 8 * v32) = v27;
    }
    *(_DWORD *)(v24 + 2844) = v32 + 1;
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v22 + 1880);
  *(_QWORD *)(v22 + 1880) = v23;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v24);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_31:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_32:
    v23[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v45 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v45);
    v23[5] = SlowCase + (int)v45;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v39 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v39;
  if (*(_BYTE *)(v20 + 755))
  {
    __dmb(0xAu);
    v39 = *(WebCore::AudioBuffer **)(SlowCase + 24);
  }
  if ((unint64_t)WebCore::AudioBuffer::memoryCost(v39) >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  v40 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE334B80 & 1) == 0)
  {
    qword_1EE334B78 = (uint64_t)&off_1E3222E60;
    byte_1EE334B80 = 1;
  }
  v48 = v4;
  if ((SlowCase & 8) != 0)
    v41 = (SlowCase - 112) | 1;
  else
    v41 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v41 & 1) != 0)
    v42 = v41 + 47;
  else
    v42 = *(_QWORD *)v41 + 32;
  Allocator = *(_QWORD **)(v42 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v42 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334B78;
  Allocator[2] = v40;
  v47 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v48, (uint64_t *)&v47);
  if (v47)
    v47[1] = 3;
  return SlowCase;
}

unint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::AudioBuffer *a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  WTF **v15;
  WTF *v17;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::JSDOMGlobalObject **)(v4 + 16 * v9);
    if (v10 == a3)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          v13 = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return v13;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebCore::JSDOMGlobalObject **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v17 = a3;
  v13 = WebCore::createWrapper<WebCore::AudioBuffer,WebCore::AudioBuffer>((uint64_t)a2, &v17);
  v15 = (WTF **)v17;
  v17 = 0;
  if (v15)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v15, v14);
  return v13;
}

WebCore::JSAudioBufferCallback *WebCore::JSAudioBufferCallback::JSAudioBufferCallback(WebCore::JSAudioBufferCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E321FCB0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSAudioBufferCallback::~JSAudioBufferCallback(WebCore::JSAudioBufferCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSAudioBufferCallback::handleEvent(uint64_t **this, WebCore::AudioBuffer *a2)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  WebCore *v6;
  WebCore::AudioBuffer *v7;
  JSValue v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Structure *v14;
  uint64_t *v15;
  _QWORD *v17;
  BOOL v18[8];
  uint64_t v19;
  WTF *v20;
  _OWORD v21[4];
  uint64_t v22;
  _BYTE v23[8];
  objc_class *v24;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::JSGlobalObject **)v4;
  v6 = (WebCore *)MEMORY[0x19AEA3294](v23, *((_QWORD *)v5 + 7));
  v18[0] = 0;
  v19 = 0x800000000;
  v20 = (WTF *)((char *)v21 + 8);
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  if (!a2)
  {
    v9 = 0;
    v8.super.isa = (Class)2;
    goto LABEL_10;
  }
  v8.super.isa = (Class)WebCore::toJS(v6, v5, a2, v7);
  v9 = v19;
  if (v20 == (WTF *)((char *)v21 + 8))
  {
LABEL_10:
    *((JSValue *)v21 + v9 + 1) = v8;
    LODWORD(v19) = v9 + 1;
    goto LABEL_11;
  }
  v18[0] = JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v19, v8) == 1;
LABEL_11:
  v24 = 0;
  v11 = this[3];
  v12 = *v11;
  if (*v11
    && (*(_BYTE *)(v12 + 8) & 3) == 0
    && *(_QWORD *)v12
    && ((v13 = v11[2]) == 0 || (*(_BYTE *)(v13 + 8) & 3) != 0 ? (v14 = 0) : (v14 = *(JSC::Structure **)v13),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v12, v14, 10, (uint64_t)v18, 0, 0, (uint64_t *)&v24), (v8.super.isa = v24) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v24, 0, 0, 0);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  v15 = *(uint64_t **)&v21[0];
  if (*(_QWORD *)&v21[0])
  {
    v24 = (objc_class *)&v19;
    v17 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v21[0], (uint64_t *)&v24);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v15, v17);
  }
  if (v20 != (WTF *)((char *)v21 + 8) && v20)
    WTF::fastFree(v20, v8.super.isa);
  MEMORY[0x19AEA32A0](v23);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v10;
}

uint64_t WebCore::JSAudioBufferSourceNode::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  return WebCore::JSAudioBufferSourceNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAudioBufferSourceNode::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSAudioBufferSourceNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSAudioBufferSourceNode>::construct(WTF **a1, uint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  JSCell *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  JSC::JSCell *v20;
  uint64_t Object;
  JSC::Structure *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  float v27;
  JSC::VM *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  BOOL v33;
  WTF *v34;
  double v35;
  float v36;
  double v37;
  void *v38;
  WebCore::JSDOMGlobalObject *v39;
  int v40;
  JSC::VM *v41;
  WTF *v42;
  WebCore::AudioNode *v43;
  JSC::JSCell *v44;
  JSC::JSGlobalObject *v45;
  JSC::JSObject *v46;
  JSC::JSGlobalObject *v47;
  JSC::VM *v48;
  JSC::JSObject *v49;
  JSC::Structure *v50;
  JSC::VM *FunctionRealm;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  JSC::JSCell *v60;
  unint64_t Structure;
  JSC::Structure *v62;
  JSC::JSCell *v63;
  uint64_t v64;
  unint64_t SubclassStructure;
  uint64_t v66;
  JSC::VM *v68;
  double v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  JSC::VM *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  JSC::VM *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  JSC::VM *v81;
  double v82;
  uint64_t v83;
  _BOOL4 v84;
  char **v85;
  BOOL v86;
  _DWORD *v88;
  JSValue v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  JSValue v92;
  void *v93;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v95;
  double v96;
  JSC::VM *v97;
  double v98;
  JSC::VM *v99;
  double v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  int *v104;
  int v105;
  uint64_t v106;
  double v107;
  WTF **v108;
  uint64_t v109;
  WTF *v110;
  _OWORD v111[2];
  int v112[2];
  WTF::StringImpl *v113;
  int v114;
  JSC::VM *v115;
  _BYTE v116[28];
  int v117;
  WTF *v118;
  __int16 v119;
  char v120;
  JSC::VM *v121;

  v4 = a1[7];
  v118 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194844BFCLL);
  }
  v9 = v6 - 192;
  if (!v6)
    v9 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v9 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v11 = *(int *)(a2 + 32);
  if ((_DWORD)v11 == 1)
  {
    v89.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, v7);
    return JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v89);
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = a1[7];
  v115 = v13;
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v14 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
  v15 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
  v16 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v17 = v16 == &WebCore::JSBaseAudioContext::s_info;
  else
    v17 = 1;
  if (!v17)
  {
    do
    {
      v16 = (char **)v16[2];
      v15 = v16 != 0;
    }
    while (v16 != &WebCore::JSBaseAudioContext::s_info && v16 != 0);
  }
  if (!v15)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v115, 0, "context", 8, "AudioBufferSourceNode", 22, v8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v19 = *(_QWORD *)(v12 + 24);
  if ((unint64_t)(v11 - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v20 = *(JSC::JSCell **)(a2 + 56), v121 = v13, ((unint64_t)v20 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v33 = 0;
    v34 = 0;
    v27 = 0.0;
    v35 = 0.0;
    v36 = 1.0;
    v37 = 0.0;
    goto LABEL_50;
  }
  if (((unint64_t)v20 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v20)) == 0)
  {
    JSC::throwTypeError();
    v10 = 0;
    v66 = 1;
    v117 = 1;
    goto LABEL_75;
  }
  v22 = (JSC::Structure *)Object;
  v109 = v19;
  WTF::AtomStringImpl::addLiteral();
  v24 = JSC::JSObject::get(v22, (JSC::JSGlobalObject *)a1, (unint64_t)v110);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v23);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    goto LABEL_128;
  if ((v24 | 8) == 0xA)
  {
    v108 = 0;
  }
  else
  {
    v110 = a1[7];
    if ((v24 & 0xFFFE000000000002) != 0)
      goto LABEL_127;
    v83 = *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C);
    v84 = *(_DWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C) != 0;
    v85 = (char **)(16 * v83);
    if ((_DWORD)v83)
      v86 = v85 == &WebCore::JSAudioBuffer::s_info;
    else
      v86 = 1;
    if (!v86)
    {
      do
      {
        v85 = (char **)v85[2];
        v84 = v85 != 0;
      }
      while (v85 != &WebCore::JSAudioBuffer::s_info && v85 != 0);
    }
    if (!v84 || (v88 = *(_DWORD **)(v24 + 24)) == 0)
    {
LABEL_127:
      JSC::throwTypeError();
LABEL_128:
      v117 = 1;
LABEL_129:
      v10 = 0;
      v66 = 1;
      goto LABEL_75;
    }
    v108 = *(WTF ***)(v24 + 24);
    ++*v88;
  }
  WTF::AtomStringImpl::addLiteral();
  v26 = (WTF *)JSC::JSObject::get(v22, (JSC::JSGlobalObject *)a1, (unint64_t)v110);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v25);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
  {
LABEL_175:
    v117 = 1;
    if (v108)
      WTF::RefCounted<WebCore::AudioBuffer>::deref(v108, v93);
    goto LABEL_129;
  }
  v27 = 0.0;
  if (v26 != (WTF *)10)
  {
    v110 = v26;
    v28 = a1[7];
    *(_QWORD *)v112 = v28;
    if ((unint64_t)v26 >= 0xFFFE000000000000)
    {
      v29 = (double)(int)v26;
    }
    else if ((unint64_t)v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v95 = v28;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v110, (JSC::JSGlobalObject *)a1);
      v28 = v95;
      v29 = v96;
    }
    else
    {
      *(_QWORD *)&v29 = (char *)v26 - 0x2000000000000;
    }
    if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
      goto LABEL_175;
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v29 < -3.40282347e38 || v29 > 3.40282347e38)
      goto LABEL_174;
    v27 = v29;
  }
  WTF::AtomStringImpl::addLiteral();
  v30 = v110;
  v32 = JSC::JSObject::get(v22, (JSC::JSGlobalObject *)a1, (unint64_t)v110);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    goto LABEL_175;
  if (v32 != 10)
  {
    v68 = a1[7];
    if (v32 >= 0xFFFE000000000000)
    {
      v101 = (_DWORD)v32 == 0;
      goto LABEL_205;
    }
    *(_QWORD *)&v69 = v32 - 0x2000000000000;
    if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v69 <= 0.0)
      {
        v33 = v69 < 0.0;
        goto LABEL_81;
      }
    }
    else
    {
      if ((v32 & 0xFFFE000000000002) != 0)
      {
        v33 = v32 == 7;
        goto LABEL_81;
      }
      v102 = *(unsigned __int8 *)(v32 + 5);
      if (v102 == 3)
      {
        v105 = *(_DWORD *)(v32 + 8);
LABEL_204:
        v101 = v105 == 0;
        goto LABEL_205;
      }
      if (v102 == 2)
      {
        v103 = *(_QWORD *)(v32 + 8);
        if ((v103 & 1) != 0)
          v104 = (int *)(v32 + 16);
        else
          v104 = (int *)(v103 + 4);
        v105 = *v104;
        goto LABEL_204;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v101 = *(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_205:
        v33 = !v101;
LABEL_81:
        if (*((_DWORD *)v68 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v68) & 1) != 0)
          goto LABEL_175;
        goto LABEL_82;
      }
    }
    v33 = 1;
    goto LABEL_81;
  }
  v33 = 0;
LABEL_82:
  WTF::AtomStringImpl::addLiteral();
  v70 = v110;
  v72 = (WTF *)JSC::JSObject::get(v22, (JSC::JSGlobalObject *)a1, (unint64_t)v110);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v71);
    else
      *(_DWORD *)v70 -= 2;
  }
  if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    goto LABEL_175;
  v35 = 0.0;
  if (v72 != (WTF *)10)
  {
    v110 = v72;
    v73 = a1[7];
    *(_QWORD *)v112 = v73;
    if ((unint64_t)v72 >= 0xFFFE000000000000)
    {
      v35 = (double)(int)v72;
    }
    else if ((unint64_t)v72 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v97 = v73;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v110, (JSC::JSGlobalObject *)a1);
      v73 = v97;
      v35 = v98;
    }
    else
    {
      *(_QWORD *)&v35 = (char *)v72 - 0x2000000000000;
    }
    if (*((_DWORD *)v73 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0)
      goto LABEL_175;
    if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_174;
  }
  WTF::AtomStringImpl::addLiteral();
  v74 = v110;
  v76 = (WTF *)JSC::JSObject::get(v22, (JSC::JSGlobalObject *)a1, (unint64_t)v110);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v75);
    else
      *(_DWORD *)v74 -= 2;
  }
  if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    goto LABEL_175;
  v37 = 0.0;
  if (v76 != (WTF *)10)
  {
    v110 = v76;
    v77 = a1[7];
    *(_QWORD *)v112 = v77;
    if ((unint64_t)v76 >= 0xFFFE000000000000)
    {
      v37 = (double)(int)v76;
    }
    else if ((unint64_t)v76 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v99 = v77;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v110, (JSC::JSGlobalObject *)a1);
      v77 = v99;
      v37 = v100;
    }
    else
    {
      *(_QWORD *)&v37 = (char *)v76 - 0x2000000000000;
    }
    if (*((_DWORD *)v77 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) != 0)
      goto LABEL_175;
    if ((*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_174;
  }
  WTF::AtomStringImpl::addLiteral();
  v78 = v110;
  v80 = (WTF *)JSC::JSObject::get(v22, (JSC::JSGlobalObject *)a1, (unint64_t)v110);
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v79);
    else
      *(_DWORD *)v78 -= 2;
  }
  if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    goto LABEL_175;
  v36 = 1.0;
  if (v80 == (WTF *)10)
  {
    v34 = (WTF *)v108;
    v19 = v109;
    goto LABEL_50;
  }
  v110 = v80;
  v81 = a1[7];
  *(_QWORD *)v112 = v81;
  v19 = v109;
  if ((unint64_t)v80 >= 0xFFFE000000000000)
  {
    v82 = (double)(int)v80;
  }
  else if ((unint64_t)v80 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v110, (JSC::JSGlobalObject *)a1);
  }
  else
  {
    *(_QWORD *)&v82 = (char *)v80 - 0x2000000000000;
  }
  if (*((_DWORD *)v81 + 20))
  {
    v107 = v82;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v81);
    v82 = v107;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      goto LABEL_175;
  }
  if ((*(_QWORD *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v34 = (WTF *)v108, v82 < -3.40282347e38)
    || v82 > 3.40282347e38)
  {
LABEL_174:
    JSC::throwTypeError();
    goto LABEL_175;
  }
  v36 = v82;
LABEL_50:
  *(float *)v116 = v27;
  v116[4] = v33;
  *(_WORD *)&v116[5] = v119;
  v116[7] = v120;
  *(double *)&v116[8] = v35;
  *(double *)&v116[16] = v37;
  *(float *)&v116[24] = v36;
  v117 = 0;
  v115 = 0;
  v110 = v34;
  v111[0] = *(_OWORD *)v116;
  *(_OWORD *)((char *)v111 + 12) = *(_OWORD *)&v116[12];
  WebCore::AudioBufferSourceNode::create((WebCore::BaseAudioContext *)(v19 - 32), (uint64_t)&v110, (uint64_t)v112);
  if (v110)
    WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v110, v38);
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
  {
    v10 = 0;
    v40 = v114;
    goto LABEL_72;
  }
  v40 = v114;
  if (!v114)
  {
    v41 = *(JSC::VM **)(v5 + 40);
    v42 = *(WTF **)v112;
    *(_QWORD *)v112 = 0;
    v110 = v42;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v42 != off_1E3367F88)
    {
      __break(0xC471u);
      JUMPOUT(0x194844D14);
    }
    v10 = (JSCell *)WebCore::createWrapper<WebCore::AudioBufferSourceNode,WebCore::AudioBufferSourceNode>(v41, (uint64_t *)&v110, v39);
    v43 = v110;
    v110 = 0;
    if (v43)
      WebCore::AudioNode::deref(v43);
    goto LABEL_57;
  }
  if (v114 == 1)
  {
    v90 = (WTF::StringImpl *)LOBYTE(v112[0]);
    LOBYTE(v110) = v112[0];
    v91 = v113;
    v113 = 0;
    *(_QWORD *)&v111[0] = v91;
    if (!*((_QWORD *)v4 + 2))
    {
      v92.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v112[0]), (JSC::JSGlobalObject *)v111);
      JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v92);
      v91 = *(WTF::StringImpl **)&v111[0];
    }
    *(_QWORD *)&v111[0] = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v90);
      else
        *(_DWORD *)v91 -= 2;
    }
    v10 = 0;
LABEL_57:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
      v10 = 0;
      goto LABEL_73;
    }
    v44 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v44 & 0xFFFE000000000002) != 0)
      goto LABEL_71;
    v45 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v44);
    if (!v45)
      goto LABEL_71;
    v47 = v45;
    if (v45 == *(JSC::JSGlobalObject **)(a2 + 24))
      goto LABEL_71;
    v48 = a1[7];
    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v45, v46);
    if (*((_DWORD *)v48 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) != 0)
        goto LABEL_71;
    }
    v52 = *((_QWORD *)FunctionRealm + 412);
    if (v52)
    {
      v53 = *(_DWORD *)(v52 - 8);
      v54 = ((unint64_t)&WebCore::JSAudioBufferSourceNode::s_info
           + ~((_QWORD)&WebCore::JSAudioBufferSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioBufferSourceNode::s_info
                                                                           + ~((_QWORD)&WebCore::JSAudioBufferSourceNode::s_info << 32)) >> 22);
      v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
      v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
      v57 = v53 & ((v56 >> 31) ^ v56);
      v58 = *(char ***)(v52 + 16 * v57);
      if (v58 == &WebCore::JSAudioBufferSourceNode::s_info)
      {
LABEL_67:
        v49 = *(JSC::JSObject **)(v52 + 16 * v57 + 8);
        if (v49)
        {
LABEL_69:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v47, v49, v50);
          if (!*((_DWORD *)v48 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) == 0)
            JSC::JSObject::setStructure(v10, v48, SubclassStructure);
LABEL_71:
          if (*((_DWORD *)v4 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
              v10 = 0;
          }
LABEL_72:
          if (v40 == -1)
          {
LABEL_74:
            v66 = 0;
LABEL_75:
            ((void (*)(WTF **, JSC::VM **))off_1E3223A88[v66])(&v110, &v115);
            return (uint64_t)v10;
          }
LABEL_73:
          ((void (*)(WTF **, int *))off_1E3223A78[v40])(&v110, v112);
          goto LABEL_74;
        }
      }
      else
      {
        v59 = 1;
        while (v58)
        {
          v57 = ((_DWORD)v57 + v59) & v53;
          v58 = *(char ***)(v52 + 16 * v57);
          ++v59;
          if (v58 == &WebCore::JSAudioBufferSourceNode::s_info)
            goto LABEL_67;
        }
      }
    }
    v60 = (JSC::JSCell *)WebCore::JSAudioScheduledSourceNode::prototype(v48, FunctionRealm, v49);
    Structure = WebCore::JSAudioBufferSourceNodePrototype::createStructure((uint64_t *)v48, (uint64_t)FunctionRealm, v60);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v63 = (JSC::JSCell *)WebCore::JSAudioBufferSourceNodePrototype::create(v48, FunctionRealm, Structure, v62);
    v64 = WebCore::JSAudioBufferSourceNode::createStructure((uint64_t *)v48, (uint64_t)FunctionRealm, v63);
    v49 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v64, (uint64_t)&WebCore::JSAudioBufferSourceNode::s_info);
    goto LABEL_69;
  }
  v106 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSAudioBufferSourceNode::analyzeHeap(v106);
}

uint64_t WebCore::JSAudioBufferSourceNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioScheduledSourceNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioScheduledSourceNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioScheduledSourceNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioBufferSourceNode::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  return WebCore::JSAudioBufferSourceNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAudioBufferSourceNode::visitChildren(WebCore::JSAudioBufferSourceNode *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    result = WebCore::JSAudioBufferSourceNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSAudioBufferSourceNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioScheduledSourceNode::prototype(WebCore::JSAudioScheduledSourceNode *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAudioScheduledSourceNode::s_info
      + ~((_QWORD)&WebCore::JSAudioScheduledSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioScheduledSourceNode::s_info
                                                                         + ~((_QWORD)&WebCore::JSAudioScheduledSourceNode::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAudioScheduledSourceNode::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAudioScheduledSourceNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(this, a2, a3);
    Structure = WebCore::JSAudioScheduledSourceNodePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSAudioScheduledSourceNodePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSAudioScheduledSourceNode::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSAudioScheduledSourceNode::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

unint64_t WebCore::JSAudioBufferSourceNodePrototype::create(WebCore::JSAudioBufferSourceNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSAudioBufferSourceNode::s_info, (uint64_t)&WebCore::JSAudioBufferSourceNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioBufferSourceNode>,(WebCore::DOMConstructorID)233>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1864);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioScheduledSourceNode>,(WebCore::DOMConstructorID)241>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSAudioBufferSourceNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAudioBufferSourceNode::s_info
         + ~((_QWORD)&WebCore::JSAudioBufferSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioBufferSourceNode::s_info
                                                                         + ~((_QWORD)&WebCore::JSAudioBufferSourceNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAudioBufferSourceNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAudioBufferSourceNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioScheduledSourceNode::prototype((WebCore::JSAudioScheduledSourceNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAudioBufferSourceNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAudioBufferSourceNodePrototype::create((WebCore::JSAudioBufferSourceNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAudioBufferSourceNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAudioBufferSourceNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1864) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioBufferSourceNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioBufferSourceNodePrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioBufferSourceNode>,(WebCore::DOMConstructorID)233>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioBufferSourceNode_buffer(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::AudioBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 216);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

BOOL WebCore::setJSAudioBufferSourceNode_buffer(JSC *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  void *v18;
  WTF **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  int v26[2];
  WTF::StringImpl *v27;
  char v28;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioBufferSourceNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioBufferSourceNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)v26 = v4;
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_25;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSAudioBuffer::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSAudioBuffer::s_info && v14 != 0);
    }
    if (!v13 || (v11 = *(WTF **)(a3 + 24)) == 0)
    {
LABEL_25:
      WebCore::throwAttributeTypeError((int)a1, (int)v26, "AudioBufferSourceNode", 22, "buffer", 7, "AudioBuffer", 12);
      return 0;
    }
    ++*(_DWORD *)v11;
  }
  v24 = v11;
  WebCore::AudioBufferSourceNode::setBufferForBindings(v10, (uint64_t *)&v24, (uint64_t)v26);
  v19 = (WTF **)v24;
  v24 = 0;
  if (v19)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v19, v18);
  if (v28)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v26[0]);
    LOBYTE(v24) = v26[0];
    v21 = v27;
    v27 = 0;
    v25 = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v26[0]), (JSC::JSGlobalObject *)&v25);
      JSC::VM::throwException(v4, a1, v22);
      v21 = v25;
    }
    v25 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v28)
    {
      v23 = v27;
      v27 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
  }
  return 1;
}

unint64_t WebCore::jsAudioBufferSourceNode_playbackRate(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsAudioBufferSourceNode_detune(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

uint64_t WebCore::jsAudioBufferSourceNode_loop(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 256))
    return 7;
  else
    return 6;
}

BOOL WebCore::setJSAudioBufferSourceNode_loop(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  BOOL v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioBufferSourceNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioBufferSourceNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v17 = (_DWORD)a3 == 0;
    goto LABEL_46;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v18 = *(unsigned __int8 *)(a3 + 5);
    if (v18 == 3)
    {
      v21 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v18 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v17 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_46;
      }
      v19 = *(_QWORD *)(a3 + 8);
      if ((v19 & 1) != 0)
        v20 = (int *)(a3 + 16);
      else
        v20 = (int *)(v19 + 4);
      v21 = *v20;
    }
    v17 = v21 == 0;
LABEL_46:
    v11 = !v17;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  v13 = (unsigned __int8 *)(v12 + 320);
  if (__ldaxr((unsigned __int8 *)(v12 + 320)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v12 + 320);
LABEL_21:
  *(_BYTE *)(v12 + 256) = v11;
  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
      return 1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 320));
  return 1;
}

unint64_t WebCore::jsAudioBufferSourceNode_loopStart(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 264);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSAudioBufferSourceNode_loopStart(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  unsigned __int8 *v12;
  int v14;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioBufferSourceNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioBufferSourceNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      return 0;
    }
    v12 = (unsigned __int8 *)(v10 + 320);
    if (__ldaxr((unsigned __int8 *)(v10 + 320)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v10 + 320);
LABEL_21:
    *(double *)(v10 + 264) = v11;
    v14 = __ldxr(v12);
    if (v14 == 1)
    {
      if (!__stlxr(0, v12))
        return 1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 320));
    return 1;
  }
  return 0;
}

unint64_t WebCore::jsAudioBufferSourceNode_loopEnd(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 272);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSAudioBufferSourceNode_loopEnd(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  unsigned __int8 *v12;
  int v14;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioBufferSourceNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioBufferSourceNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      return 0;
    }
    v12 = (unsigned __int8 *)(v10 + 320);
    if (__ldaxr((unsigned __int8 *)(v10 + 320)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v10 + 320);
LABEL_21:
    *(double *)(v10 + 272) = v11;
    v14 = __ldxr(v12);
    if (v14 == 1)
    {
      if (!__stlxr(0, v12))
        return 1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 320));
    return 1;
  }
  return 0;
}

uint64_t WebCore::JSAudioBufferSourceNode::subspaceForImpl(WebCore::JSAudioBufferSourceNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1888);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1888);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1888);
    *(_QWORD *)(v8 + 1888) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1888);
  *(_QWORD *)(v3 + 1888) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAudioScheduledSourceNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioBufferSourceNodeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[20];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[21] || (result = (*(uint64_t (**)(_QWORD *))(v5[19] + 64))(v5 + 19), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

WTF::Thread *WebCore::JSAudioBufferSourceNodeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::AudioNode *v4;
  WTF::Thread *result;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *(WebCore::AudioNode **)(*(_QWORD *)a2 + 24);
  result = WebCore::AudioNode::ref(v4);
  v6 = (char *)v4 + 8;
  if (!v4)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v7 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v7 - 8);
      v11 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::AudioNode **)(v7 + 16 * v14);
      if (v15 != v4)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::AudioNode **)(v7 + 16 * v14);
          ++v16;
          if (v15 == v4)
            goto LABEL_14;
        }
        v14 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v14 != *(_DWORD *)(v7 - 4))
      {
        v17 = (_QWORD *)(v7 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v21 = *v8;
        if (*v8)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v8;
        if (*v8)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            result = (WTF::Thread *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (v4)
    return WebCore::AudioNode::deref(v4);
  return result;
}

uint64_t WebCore::createWrapper<WebCore::AudioBufferSourceNode,WebCore::AudioBufferSourceNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioScheduledSourceNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSAudioBufferSourceNode::s_info
      + ~((_QWORD)&WebCore::JSAudioBufferSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioBufferSourceNode::s_info
                                                                      + ~((_QWORD)&WebCore::JSAudioBufferSourceNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSAudioBufferSourceNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSAudioBufferSourceNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioScheduledSourceNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioScheduledSourceNode::prototype(v15, a1, a3);
    Structure = WebCore::JSAudioBufferSourceNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSAudioBufferSourceNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSAudioBufferSourceNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSAudioBufferSourceNode::s_info);
  }
  v21 = WebCore::JSAudioBufferSourceNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AudioBufferSourceNode,WebCore::JSAudioBufferSourceNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::AudioBufferSourceNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E3367F88)
  {
    v7 = WebCore::createWrapper<WebCore::AudioBufferSourceNode,WebCore::AudioBufferSourceNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 499;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::AudioConfiguration>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  JSC::VM *v12;
  double v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;
  uint64_t result;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  char v33;
  unsigned __int8 v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  __int16 v39;
  JSC::VM *v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  double v54;
  WTF::StringImpl *v55;
  int v56;
  __int16 v57;
  char v58;
  _BYTE v59[7];
  JSC::VM *v60;
  WTF::StringImpl *v61;
  uint64_t v62;

  v60 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    goto LABEL_47;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_101;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v8);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (*((_DWORD *)v60 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v60);
    if ((_DWORD)result)
      goto LABEL_101;
  }
  if (v9 == 10)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_25;
  }
  v55 = (WTF::StringImpl *)v9;
  if (v9 < 0xFFFE000000000000 || (v9 & 0x80000000) != 0)
  {
    v12 = a2[7];
    if (v9 >= 0xFFFE000000000000)
    {
      v13 = (double)(int)v9;
    }
    else if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v55, (JSC::JSGlobalObject *)a2);
    }
    else
    {
      *(_QWORD *)&v13 = v9 - 0x2000000000000;
    }
    if (!*((_DWORD *)v12 + 20)
      || (v54 = v13, result = JSC::VM::hasExceptionsAfterHandlingTraps(v12), v13 = v54, (result & 1) == 0))
    {
      if (fabs(v13) == INFINITY)
      {
        v11 = 0;
      }
      else
      {
        v14 = fmod(trunc(v13), 1.84467441e19);
        if (v14 >= 0.0)
          v11 = (unint64_t)v14;
        else
          v11 = -(uint64_t)(unint64_t)-v14;
      }
      goto LABEL_24;
    }
LABEL_101:
    *(_DWORD *)(a3 + 48) = 1;
    return result;
  }
  v11 = v9;
LABEL_24:
  v10 = 1;
LABEL_25:
  WTF::AtomStringImpl::addLiteral();
  v15 = v55;
  v17 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_DWORD *)v60 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v60);
    if ((_DWORD)result)
      goto LABEL_101;
  }
  if (v17 == 10)
  {
    v5 = 0;
    goto LABEL_42;
  }
  v62 = v17;
  v18 = a2[7];
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 2)
  {
    v19 = *(WTF::StringImpl **)(v17 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, (JSC::JSGlobalObject *)a2);
      if (!v19)
        goto LABEL_36;
    }
    else if (!v19)
    {
LABEL_36:
      v61 = v19;
      goto LABEL_37;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_36;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, (JSC::JSGlobalObject *)a2);
LABEL_37:
  if (!*((_DWORD *)v18 + 20))
  {
    v5 = v61;
LABEL_39:
    v56 = 0;
LABEL_40:
    v20 = 0;
    v55 = 0;
    v21 = 1;
    goto LABEL_41;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
  v5 = v61;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_39;
  v20 = 1;
  v56 = 1;
  v61 = 0;
  if (!v5)
    goto LABEL_113;
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
LABEL_113:
    v5 = 0;
    v21 = 0;
    *(_DWORD *)(a3 + 48) = 1;
    goto LABEL_41;
  }
  result = WTF::StringImpl::destroy(v5, v45);
  v20 = v56;
  if (!v56)
  {
    v5 = v55;
    goto LABEL_40;
  }
  *(_DWORD *)(a3 + 48) = 1;
  if (v20 == -1)
    return result;
  v5 = 0;
  v21 = 0;
LABEL_41:
  result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3223358[v20])(&v62, &v55);
  if ((v21 & 1) == 0)
  {
    v27 = 0;
    goto LABEL_80;
  }
LABEL_42:
  WTF::AtomStringImpl::addLiteral();
  v24 = v55;
  v26 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*((_DWORD *)v60 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v60);
    if ((_DWORD)result)
      goto LABEL_48;
  }
  if (v26 == 10)
  {
LABEL_47:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v60, "contentType", 12, "AudioConfiguration", 19, "DOMString", 10);
LABEL_48:
    v27 = 0;
    *(_DWORD *)(a3 + 48) = 1;
    goto LABEL_80;
  }
  v62 = v26;
  v28 = a2[7];
  if ((v26 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v26 + 5) == 2)
  {
    v29 = *(WTF::StringImpl **)(v26 + 8);
    if ((v29 & 1) != 0)
    {
      v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, (JSC::JSGlobalObject *)a2);
      if (!v29)
        goto LABEL_54;
    }
    else if (!v29)
    {
LABEL_54:
      v61 = v29;
      goto LABEL_55;
    }
    *(_DWORD *)v29 += 2;
    goto LABEL_54;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, (JSC::JSGlobalObject *)a2);
LABEL_55:
  if (*((_DWORD *)v28 + 20))
  {
    v46 = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    v27 = v61;
    if (v46)
    {
      v43 = 1;
      v56 = 1;
      v61 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v47);
        else
          *(_DWORD *)v27 -= 2;
      }
      v27 = 0;
      *(_DWORD *)(a3 + 48) = 1;
      goto LABEL_79;
    }
  }
  else
  {
    v27 = v61;
  }
  v56 = 0;
  v55 = 0;
  WTF::AtomStringImpl::addLiteral();
  v30 = (WTF::StringImpl *)v62;
  v32 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, v62);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60))
    goto LABEL_126;
  v53 = v11;
  if (v32 == 10)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a2, v32, &v62);
    if (HIDWORD(v62))
      goto LABEL_126;
    v34 = v62;
    v35 = v62 & 0xFFFFFF00;
    v33 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v36 = (WTF::StringImpl *)v62;
  v38 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, v62);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v37);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60))
    goto LABEL_126;
  if (v38 != 10)
  {
    v40 = a2[7];
    if (v38 >= 0xFFFE000000000000)
    {
      v48 = (_DWORD)v38 == 0;
      goto LABEL_143;
    }
    *(_QWORD *)&v41 = v38 - 0x2000000000000;
    if (v38 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v41 <= 0.0)
      {
        v42 = v41 < 0.0;
        goto LABEL_76;
      }
    }
    else
    {
      if ((v38 & 0xFFFE000000000002) != 0)
      {
        v42 = v38 == 7;
        goto LABEL_76;
      }
      v49 = *(unsigned __int8 *)(v38 + 5);
      if (v49 == 3)
      {
        v52 = *(_DWORD *)(v38 + 8);
LABEL_142:
        v48 = v52 == 0;
        goto LABEL_143;
      }
      if (v49 == 2)
      {
        v50 = *(_QWORD *)(v38 + 8);
        if ((v50 & 1) != 0)
          v51 = (int *)(v38 + 16);
        else
          v51 = (int *)(v50 + 4);
        v52 = *v51;
        goto LABEL_142;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v48 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_143:
        v42 = !v48;
LABEL_76:
        if (!*((_DWORD *)v40 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v40))
        {
          v39 = v42 | 0x100;
          goto LABEL_78;
        }
LABEL_126:
        v43 = 0;
        *(_DWORD *)(a3 + 48) = 1;
        goto LABEL_79;
      }
    }
    v42 = 1;
    goto LABEL_76;
  }
  v39 = 0;
LABEL_78:
  v43 = 0;
  *(_QWORD *)a3 = v27;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v53;
  *(_BYTE *)(a3 + 24) = v10;
  *(_DWORD *)(a3 + 25) = *(_DWORD *)v59;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a3 + 32) = v35 | v34;
  *(_BYTE *)(a3 + 36) = v33;
  *(_WORD *)(a3 + 37) = v57;
  *(_BYTE *)(a3 + 39) = v58;
  *(_WORD *)(a3 + 40) = v39;
  *(_DWORD *)(a3 + 48) = 0;
  v5 = 0;
  v27 = 0;
LABEL_79:
  result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3223358[v43])(&v62, &v55);
LABEL_80:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = WTF::StringImpl::destroy(v5, v23);
      if (!v27)
        return result;
      goto LABEL_84;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v27)
    return result;
LABEL_84:
  if (*(_DWORD *)v27 == 2)
    return WTF::StringImpl::destroy(v27, v23);
  *(_DWORD *)v27 -= 2;
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 24))
  {
    v10 = a3[2];
    v11 = HIDWORD(v10);
    v12 = (double)v10;
    if ((v10 & 0x80000000) != 0)
      v13 = COERCE__INT64((double)v10) + 0x2000000000000;
    else
      v13 = v10 | 0xFFFE000000000000;
    if (v11)
      v14 = *(_QWORD *)&v12 + 0x2000000000000;
    else
      v14 = v13;
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v15 = v43;
    v43 = 0;
    v44 = v8;
    v45 = -1;
    v46 = 0x1000000;
    v47 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v15, v14, 0, (uint64_t)&v43);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = a3[1];
  if (!v17)
    goto LABEL_24;
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_DWORD *)(v17 + 4);
  if (v19)
  {
    if (v19 != 1)
    {
LABEL_17:
      v20 = *(_QWORD *)(v18 + 64760);
      if (!v20 || v17 != *(_QWORD *)(v20 + 8))
        v20 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_20;
    }
    v39 = *(unsigned __int8 **)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      v40 = *v39;
    }
    else
    {
      v42 = *(unsigned __int16 *)v39;
      if (v42 > 0xFF)
        goto LABEL_17;
      v40 = v42;
    }
    v20 = *(_QWORD *)(v18 + 8 * v40 + 42216);
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 41968);
  }
LABEL_20:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v43;
  v43 = 0;
  v44 = v8;
  v45 = -1;
  v46 = 0x1000000;
  v47 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v43);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_24:
  v23 = *(_QWORD *)(a1 + 56);
  v24 = *a3;
  if (!*a3 || (v25 = *(_DWORD *)(v24 + 4)) == 0)
  {
    v26 = *(_QWORD *)(v23 + 41968);
    goto LABEL_30;
  }
  if (v25 == 1)
  {
    v37 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v38 = *v37;
    }
    else
    {
      v41 = *(unsigned __int16 *)v37;
      if (v41 > 0xFF)
        goto LABEL_27;
      v38 = v41;
    }
    v26 = *(_QWORD *)(v23 + 8 * v38 + 42216);
    goto LABEL_30;
  }
LABEL_27:
  v26 = *(_QWORD *)(v23 + 64760);
  if (!v26 || v24 != *(_QWORD *)(v26 + 8))
    v26 = JSC::jsStringWithCacheSlowCase();
LABEL_30:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v27 = v43;
  v43 = 0;
  v44 = v8;
  v45 = -1;
  v46 = 0x1000000;
  v47 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v27, v26, 0, (uint64_t)&v43);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*((_BYTE *)a3 + 36))
  {
    v29 = *((unsigned int *)a3 + 8);
    if ((int)v29 < 0)
      v30 = COERCE__INT64((double)v29) + 0x2000000000000;
    else
      v30 = v29 | 0xFFFE000000000000;
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v31 = v43;
    v43 = 0;
    v44 = v8;
    v45 = -1;
    v46 = 0x1000000;
    v47 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v31, v30, 0, (uint64_t)&v43);
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v32);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 41))
  {
    if (*((_BYTE *)a3 + 40))
      v33 = 7;
    else
      v33 = 6;
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v34 = v43;
    v43 = 0;
    v44 = v8;
    v45 = -1;
    v46 = 0x1000000;
    v47 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v34, v33, 0, (uint64_t)&v43);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[2];
  int v21;
  int v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *a3;
  if (!*a3 || (v12 = *(_DWORD *)(v11 + 4)) == 0)
  {
    v13 = *(_QWORD *)(v10 + 41968);
    goto LABEL_9;
  }
  if (v12 == 1)
  {
    v17 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v19 = *(unsigned __int16 *)v17;
      if (v19 > 0xFF)
        goto LABEL_6;
      v18 = v19;
    }
    v13 = *(_QWORD *)(v10 + 8 * v18 + 42216);
    goto LABEL_9;
  }
LABEL_6:
  v13 = *(_QWORD *)(v10 + 64760);
  if (!v13 || v11 != *(_QWORD *)(v13 + 8))
    v13 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = (WTF::StringImpl *)v20[0];
  v20[0] = 0;
  v20[1] = v8;
  v21 = -1;
  v22 = 0x1000000;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)v20);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *a3;
  if (!*a3)
    goto LABEL_13;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(v10 + 4);
  if (v12)
  {
    if (v12 != 1)
    {
LABEL_6:
      v13 = *(_QWORD *)(v11 + 64760);
      if (!v13 || v10 != *(_QWORD *)(v13 + 8))
        v13 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v24 = *(unsigned __int8 **)(v10 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    {
      v25 = *v24;
    }
    else
    {
      v26 = *(unsigned __int16 *)v24;
      if (v26 > 0xFF)
        goto LABEL_6;
      v25 = v26;
    }
    v13 = *(_QWORD *)(v11 + 8 * v25 + 42216);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v27;
  v27 = 0;
  v28 = v8;
  v29 = -1;
  v30 = 0x1000000;
  v31 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)&v27);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_13:
  v16 = a3[1];
  v17 = HIDWORD(v16);
  v18 = (double)v16;
  if ((v16 & 0x80000000) != 0)
    v19 = COERCE__INT64((double)v16) + 0x2000000000000;
  else
    v19 = v16 | 0xFFFE000000000000;
  if (v17)
    v20 = *(_QWORD *)&v18 + 0x2000000000000;
  else
    v20 = v19;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v27;
  v27 = 0;
  v28 = v8;
  v29 = -1;
  v30 = 0x1000000;
  v31 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v27);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *a3;
  if (!*a3)
    goto LABEL_13;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(v10 + 4);
  if (v12)
  {
    if (v12 != 1)
    {
LABEL_6:
      v13 = *(_QWORD *)(v11 + 64760);
      if (!v13 || v10 != *(_QWORD *)(v13 + 8))
        v13 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v20 = *(unsigned __int8 **)(v10 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    {
      v21 = *v20;
    }
    else
    {
      v22 = *(unsigned __int16 *)v20;
      if (v22 > 0xFF)
        goto LABEL_6;
      v21 = v22;
    }
    v13 = *(_QWORD *)(v11 + 8 * v21 + 42216);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v23;
  v23 = 0;
  v24 = v8;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)&v23);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_13:
  if (*((_BYTE *)a3 + 9))
  {
    if (*((_BYTE *)a3 + 8))
      v16 = 7;
    else
      v16 = 6;
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v17 = v23;
    v23 = 0;
    v24 = v8;
    v25 = -1;
    v26 = 0x1000000;
    v27 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v17, v16, 0, (uint64_t)&v23);
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v18);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = a3[1];
  if (!v11 || (v12 = *(_DWORD *)(v11 + 4)) == 0)
  {
    v13 = *(_QWORD *)(v10 + 41968);
    goto LABEL_9;
  }
  if (v12 == 1)
  {
    v29 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v30 = *v29;
    }
    else
    {
      v35 = *(unsigned __int16 *)v29;
      if (v35 > 0xFF)
        goto LABEL_6;
      v30 = v35;
    }
    v13 = *(_QWORD *)(v10 + 8 * v30 + 42216);
    goto LABEL_9;
  }
LABEL_6:
  v13 = *(_QWORD *)(v10 + 64760);
  if (!v13 || v11 != *(_QWORD *)(v13 + 8))
    v13 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 41968));
  v14 = v38;
  v38 = 0;
  v39 = v8;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)&v38);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *a3;
  if (!*a3 || (v18 = *(_DWORD *)(v17 + 4)) == 0)
  {
    v19 = *(_QWORD *)(v16 + 41968);
    goto LABEL_19;
  }
  if (v18 == 1)
  {
    v31 = *(unsigned __int8 **)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      v32 = *v31;
    }
    else
    {
      v36 = *(unsigned __int16 *)v31;
      if (v36 > 0xFF)
        goto LABEL_16;
      v32 = v36;
    }
    v19 = *(_QWORD *)(v16 + 8 * v32 + 42216);
    goto LABEL_19;
  }
LABEL_16:
  v19 = *(_QWORD *)(v16 + 64760);
  if (!v19 || v17 != *(_QWORD *)(v19 + 8))
    v19 = JSC::jsStringWithCacheSlowCase();
LABEL_19:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 41968));
  v20 = v38;
  v38 = 0;
  v39 = v8;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v20, v19, 0, (uint64_t)&v38);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = a3[2];
  if (!v23 || (v24 = *(_DWORD *)(v23 + 4)) == 0)
  {
    v25 = *(_QWORD *)(v22 + 41968);
    goto LABEL_29;
  }
  if (v24 == 1)
  {
    v33 = *(unsigned __int8 **)(v23 + 8);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      v34 = *v33;
    }
    else
    {
      v37 = *(unsigned __int16 *)v33;
      if (v37 > 0xFF)
        goto LABEL_26;
      v34 = v37;
    }
    v25 = *(_QWORD *)(v22 + 8 * v34 + 42216);
    goto LABEL_29;
  }
LABEL_26:
  v25 = *(_QWORD *)(v22 + 64760);
  if (!v25 || v23 != *(_QWORD *)(v25 + 8))
    v25 = JSC::jsStringWithCacheSlowCase();
LABEL_29:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 41968));
  v26 = v38;
  v38 = 0;
  v39 = v8;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v26, v25, 0, (uint64_t)&v38);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  return v8;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[2];
  int v21;
  int v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_DWORD *)(v10 + 4);
    if (v12)
    {
      if (v12 != 1)
      {
LABEL_6:
        v13 = *(_QWORD *)(v11 + 64760);
        if (!v13 || v10 != *(_QWORD *)(v13 + 8))
          v13 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_9;
      }
      v17 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        v18 = *v17;
      }
      else
      {
        v19 = *(unsigned __int16 *)v17;
        if (v19 > 0xFF)
          goto LABEL_6;
        v18 = v19;
      }
      v13 = *(_QWORD *)(v11 + 8 * v18 + 42216);
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 41968);
    }
LABEL_9:
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
      v14 = (WTF::StringImpl *)v20[0];
      v20[0] = 0;
      v20[1] = v8;
      v21 = -1;
      v22 = 0x1000000;
      v23 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)v20);
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v15);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  return v8;
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = a3[2];
  if (!v12 || (v13 = *(_DWORD *)(v12 + 4)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
    goto LABEL_9;
  }
  if (v13 == 1)
  {
    v44 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v45 = *v44;
    }
    else
    {
      v52 = *(unsigned __int16 *)v44;
      if (v52 > 0xFF)
        goto LABEL_6;
      v45 = v52;
    }
    v14 = *(_QWORD *)(v11 + 8 * v45 + 42216);
    goto LABEL_9;
  }
LABEL_6:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v12 != *(_QWORD *)(v14 + 8))
    v14 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = (WTF::StringImpl *)v56;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = v9;
  v57 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v56);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_BYTE *)a3 + 96))
  {
    v17 = *((_OWORD *)a3 + 3);
    v56 = *((_OWORD *)a3 + 2);
    v57 = v17;
    v18 = *((_OWORD *)a3 + 5);
    v58 = *((_OWORD *)a3 + 4);
    v59 = v18;
    v19 = WebCore::convertDictionaryToJS(a1, a2, (unsigned int *)&v56);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v20 = (WTF::StringImpl *)v56;
    *(_QWORD *)&v56 = 0;
    *((_QWORD *)&v56 + 1) = v9;
    v57 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v20, v19, 0, (uint64_t)&v56);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = a3[1];
  if (!v23 || (v24 = *(_DWORD *)(v23 + 4)) == 0)
  {
    v25 = *(_QWORD *)(v22 + 41968);
    goto LABEL_24;
  }
  if (v24 == 1)
  {
    v46 = *(unsigned __int8 **)(v23 + 8);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      v47 = *v46;
    }
    else
    {
      v53 = *(unsigned __int16 *)v46;
      if (v53 > 0xFF)
        goto LABEL_21;
      v47 = v53;
    }
    v25 = *(_QWORD *)(v22 + 8 * v47 + 42216);
    goto LABEL_24;
  }
LABEL_21:
  v25 = *(_QWORD *)(v22 + 64760);
  if (!v25 || v23 != *(_QWORD *)(v25 + 8))
    v25 = JSC::jsStringWithCacheSlowCase();
LABEL_24:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v26 = (WTF::StringImpl *)v56;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = v9;
  v57 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v26, v25, 0, (uint64_t)&v56);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  v28 = *(_QWORD *)(a1 + 56);
  v29 = a3[3];
  if (!v29 || (v30 = *(_DWORD *)(v29 + 4)) == 0)
  {
    v31 = *(_QWORD *)(v28 + 41968);
    goto LABEL_34;
  }
  if (v30 == 1)
  {
    v48 = *(unsigned __int8 **)(v29 + 8);
    if ((*(_BYTE *)(v29 + 16) & 4) != 0)
    {
      v49 = *v48;
    }
    else
    {
      v54 = *(unsigned __int16 *)v48;
      if (v54 > 0xFF)
        goto LABEL_31;
      v49 = v54;
    }
    v31 = *(_QWORD *)(v28 + 8 * v49 + 42216);
    goto LABEL_34;
  }
LABEL_31:
  v31 = *(_QWORD *)(v28 + 64760);
  if (!v31 || v29 != *(_QWORD *)(v31 + 8))
    v31 = JSC::jsStringWithCacheSlowCase();
LABEL_34:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v32 = (WTF::StringImpl *)v56;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = v9;
  v57 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v32, v31, 0, (uint64_t)&v56);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *a3;
  if (!*a3 || (v36 = *(_DWORD *)(v35 + 4)) == 0)
  {
    v37 = *(_QWORD *)(v34 + 41968);
    goto LABEL_44;
  }
  if (v36 != 1)
    goto LABEL_41;
  v50 = *(unsigned __int8 **)(v35 + 8);
  if ((*(_BYTE *)(v35 + 16) & 4) != 0)
  {
    v51 = *v50;
LABEL_77:
    v37 = *(_QWORD *)(v34 + 8 * v51 + 42216);
    goto LABEL_44;
  }
  v55 = *(unsigned __int16 *)v50;
  if (v55 <= 0xFF)
  {
    v51 = v55;
    goto LABEL_77;
  }
LABEL_41:
  v37 = *(_QWORD *)(v34 + 64760);
  if (!v37 || v35 != *(_QWORD *)(v37 + 8))
    v37 = JSC::jsStringWithCacheSlowCase();
LABEL_44:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v38 = (WTF::StringImpl *)v56;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = v9;
  v57 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v38, v37, 0, (uint64_t)&v56);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  v40 = *((_BYTE *)a3 + 100) ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v41 = (WTF::StringImpl *)v56;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = v9;
  v57 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v41, v40, 0, (uint64_t)&v56);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
  return v9;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSAudioContext>::construct(JSC::VM **a1, uint64_t a2)
{
  JSC::Structure *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::VM *v8;
  JSC::JSCell *v9;
  JSC::VM *v10;
  uint64_t Object;
  WTF::StringImpl *v12;
  unint64_t v13;
  unsigned int i;
  uint64_t v15;
  unint64_t v16;
  char v17;
  float v18;
  WebCore::JSDOMGlobalObject *v19;
  JSC::VM *v20;
  uint64_t (***v21)(WebCore::ContextDestructionObserver *__hidden);
  JSCell *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  JSC::JSCell *v27;
  JSC::JSGlobalObject *v28;
  JSC::JSObject *v29;
  JSC::JSGlobalObject *v30;
  JSC::VM *v31;
  WebCore::JSDOMGlobalObject *v32;
  JSC::Structure *v33;
  JSC::VM *FunctionRealm;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  int v42;
  JSC::JSCell *v43;
  unint64_t Structure;
  JSC::Structure *v45;
  JSC::JSCell *v46;
  uint64_t v47;
  unint64_t SubclassStructure;
  uint64_t v50;
  const char *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  char **v57;
  const char *v58;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  JSValue v62;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  JSC::VM *v66;
  double v67;
  uint16x8_t v68;
  uint16x8_t v69;
  char hasExceptionsAfterHandlingTraps;
  double v71;
  unsigned int *v72;
  WTF::StringImpl *v73;
  float v74;
  char v75;
  __int16 v76;
  char v77;
  int v78[2];
  WTF::StringImpl *v79;
  int v80;
  JSC::VM *v81;
  __int16 v82;
  char v83;
  JSC::VM *v84;
  JSC::VM *v85;

  v81 = a1[7];
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError((JSC *)a1, &v81, (uint64_t)"AudioContext", 13);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194847C00);
  }
  v8 = (JSC::VM *)0xFFFE000000000002;
  if (*(_DWORD *)(a2 + 32) == 1
    || (v9 = *(JSC::JSCell **)(a2 + 48), v10 = a1[7], v84 = v10, ((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v15 = 0;
    i = 0;
    v17 = 0;
    v18 = 0.0;
    LODWORD(v16) = 1;
    goto LABEL_14;
  }
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
  {
    JSC::throwTypeError();
    return 0;
  }
  v2 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get(v2, (JSC::JSGlobalObject *)a1, *(unint64_t *)v78);
  if (*(_QWORD *)v78)
  {
    if (**(_DWORD **)v78 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v78, v12);
    else
      **(_DWORD **)v78 -= 2;
  }
  if (!*((_DWORD *)v10 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) == 0)
  {
    if (v13 == 10)
    {
      i = 0;
      v15 = 0;
      LODWORD(v16) = 1;
      goto LABEL_121;
    }
    if (v13 >> 49)
    {
      WebCore::Converter<WebCore::IDLDouble>::convert((JSC::JSGlobalObject *)a1, v13, (uint64_t)v78);
      if ((_DWORD)v79)
        return 0;
      LODWORD(v16) = v78[0];
      v15 = v78[1];
      for (i = 1; ; i = 0)
      {
LABEL_121:
        WTF::AtomStringImpl::addLiteral();
        v64 = *(WTF::StringImpl **)v78;
        v2 = (JSC::Structure *)JSC::JSObject::get(v2, (JSC::JSGlobalObject *)a1, *(unint64_t *)v78);
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v65);
          else
            *(_DWORD *)v64 -= 2;
        }
        if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          return 0;
        if (v2 == (JSC::Structure *)10)
        {
          v17 = 0;
          v18 = 0.0;
          v8 = (JSC::VM *)0xFFFE000000000002;
        }
        else
        {
          *(_QWORD *)v78 = v2;
          v66 = a1[7];
          v72 = (unsigned int *)v66;
          v8 = (JSC::VM *)0xFFFE000000000002;
          if ((unint64_t)v2 >= 0xFFFE000000000000)
          {
            v67 = (double)(int)v2;
          }
          else if ((unint64_t)v2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, (JSC::JSGlobalObject *)a1);
          }
          else
          {
            *(_QWORD *)&v67 = (char *)v2 - 0x2000000000000;
          }
          if (*((_DWORD *)v66 + 20))
          {
            v71 = v67;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v66);
            v67 = v71;
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              return 0;
          }
          if ((*(_QWORD *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || v67 < -3.40282347e38
            || v67 > 3.40282347e38)
          {
            JSC::throwTypeError();
            return 0;
          }
          v18 = v67;
          v17 = 1;
        }
LABEL_14:
        v76 = v82;
        v77 = v83;
        v72 = (unsigned int *)(v16 | (unint64_t)(v15 << 32));
        v73 = (WTF::StringImpl *)i;
        v74 = v18;
        v75 = v17;
        WebCore::AudioContext::create((WebCore::Document *)(v7 - 192), (uint64_t)&v72, (uint64_t)v78);
        v10 = v81;
        if (*((_DWORD *)v81 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v81) & 1) != 0)
        {
          v22 = 0;
          goto LABEL_38;
        }
        if (!v80)
        {
          v20 = *(JSC::VM **)(v5 + 40);
          v21 = *(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden))v78;
          *(_QWORD *)v78 = 0;
          v72 = (unsigned int *)v21;
          if (*v21 != &off_1E3368158)
          {
            __break(0xC471u);
            JUMPOUT(0x194847CB0);
          }
          v22 = (JSCell *)WebCore::createWrapper<WebCore::AudioContext,WebCore::AudioContext>(v20, (uint64_t *)&v72, v19);
          v23 = v72;
          v72 = 0;
          if (v23)
          {
            v24 = v23 + 6;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v23 + 6);
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            }
          }
          v10 = v81;
          goto LABEL_23;
        }
        if (v80 == 1)
        {
          v60 = (WTF::StringImpl *)LOBYTE(v78[0]);
          LOBYTE(v72) = v78[0];
          v61 = v79;
          v79 = 0;
          v73 = v61;
          if (!*((_QWORD *)v10 + 2))
          {
            v62.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v78[0]), (JSC::JSGlobalObject *)&v73);
            JSC::VM::throwException(v10, (JSC::JSGlobalObject *)a1, v62);
            v61 = v73;
          }
          v73 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, v60);
            else
              *(_DWORD *)v61 -= 2;
          }
          v22 = 0;
LABEL_23:
          if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          {
LABEL_105:
            v22 = 0;
            goto LABEL_38;
          }
          v27 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v27 & 0xFFFE000000000002) != 0
            || (v28 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v27)) == 0
            || (v30 = v28, v28 == *(JSC::JSGlobalObject **)(a2 + 24))
            || (v31 = a1[7], FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v28, v29),
                             *((_DWORD *)v31 + 20))
            && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
          {
LABEL_37:
            if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
              goto LABEL_105;
LABEL_38:
            if (v80 != -1)
              ((void (*)(unsigned int **, int *))off_1E3223BD8[v80])(&v72, v78);
            return v22;
          }
          v35 = *((_QWORD *)FunctionRealm + 412);
          if (v35)
          {
            v36 = *(_DWORD *)(v35 - 8);
            v37 = ((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) >> 22);
            v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
            v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
            v40 = v36 & ((v39 >> 31) ^ v39);
            v41 = *(char ***)(v35 + 16 * v40);
            if (v41 != &WebCore::JSAudioContext::s_info)
            {
              v42 = 1;
              while (v41)
              {
                v40 = ((_DWORD)v40 + v42) & v36;
                v41 = *(char ***)(v35 + 16 * v40);
                ++v42;
                if (v41 == &WebCore::JSAudioContext::s_info)
                  goto LABEL_33;
              }
              goto LABEL_34;
            }
LABEL_33:
            v32 = *(WebCore::JSDOMGlobalObject **)(v35 + 16 * v40 + 8);
            if (!v32)
              goto LABEL_34;
          }
          else
          {
LABEL_34:
            v43 = (JSC::JSCell *)WebCore::JSBaseAudioContext::prototype(v31, FunctionRealm, v32);
            Structure = WebCore::JSAudioContextPrototype::createStructure((uint64_t *)v31, (uint64_t)FunctionRealm, v43);
            *(_DWORD *)(Structure + 16) |= 0x80000u;
            v46 = (JSC::JSCell *)WebCore::JSAudioContextPrototype::create(v31, FunctionRealm, Structure, v45);
            v47 = WebCore::JSAudioContext::createStructure((uint64_t *)v31, (uint64_t)FunctionRealm, v46);
            v32 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v47, (uint64_t)&WebCore::JSAudioContext::s_info);
          }
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v30, v32, v33);
          if (!*((_DWORD *)v31 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) == 0)
            JSC::JSObject::setStructure(v22, v31, SubclassStructure);
          goto LABEL_37;
        }
        v50 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_161:
        v56 = v52;
        if (v51 == v58 && v52 == 11)
          break;
LABEL_58:
        if (v51 == "playback" || v55)
        {
          if (v52 == 8 && v51 == "playback")
          {
LABEL_83:
            v57 = &off_1E3220120;
            goto LABEL_84;
          }
        }
        else
        {
          if (!v56)
            goto LABEL_83;
          if (v54)
          {
            if (*v51 == 112 && *(_DWORD *)(v51 + 1) == 1652121964 && *((_DWORD *)v51 + 1) == 1801675106)
              goto LABEL_83;
          }
          else if (*(_WORD *)v51 == 112
                 && *((_QWORD *)v51 + 1) == 0x6B006300610062
                 && *(_QWORD *)(v51 + 2) == 0x6200790061006CLL)
          {
            goto LABEL_83;
          }
        }
        v16 = 0;
LABEL_116:
        v72 = 0;
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v50, v12);
        else
          *(_DWORD *)v50 -= 2;
LABEL_118:
        if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
          return 0;
        if (!HIDWORD(v16))
        {
          JSC::throwTypeError();
          return 0;
        }
        v15 = 0;
      }
LABEL_77:
      v57 = &off_1E3220108;
LABEL_84:
      v16 = *((unsigned int *)v57 + 4) | 0x100000000;
      goto LABEL_116;
    }
    v8 = a1[7];
    v85 = v8;
    *(_QWORD *)v78 = v13;
    if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v78, (JSC::JSGlobalObject *)a1);
      v50 = (uint64_t)v72;
      if (v72)
        goto LABEL_50;
      goto LABEL_88;
    }
    v50 = *(_QWORD *)(v13 + 8);
    if ((v50 & 1) != 0)
    {
      v50 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, (JSC::JSGlobalObject *)a1);
      if (!v50)
      {
LABEL_49:
        v72 = (unsigned int *)v50;
        if (v50)
        {
LABEL_50:
          v51 = *(const char **)(v50 + 8);
          v52 = *(_DWORD *)(v50 + 4);
          v53 = ((unint64_t)*(unsigned int *)(v50 + 16) >> 2) & 1;
          v54 = v53 << 32;
          v55 = v52 != 8;
          if (v51 == "balanced" || v52 != 8)
          {
            if (v51 == "balanced" && v52 == 8)
              goto LABEL_70;
            v58 = "interactive";
            if (v51 == "interactive" || v52 != 11)
              goto LABEL_161;
            if ((_DWORD)v53)
            {
              if (*v51 == 105
                && *(_QWORD *)(v51 + 1) == 0x697463617265746ELL
                && *(_QWORD *)(v51 + 3) == 0x6576697463617265)
              {
                goto LABEL_77;
              }
LABEL_57:
              v56 = 11;
              v54 = 0x100000000;
              goto LABEL_58;
            }
            if (*(_WORD *)v51 == 105)
            {
              v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v51 + 2), (int16x8_t)xmmword_1968BCA50);
              v68.i16[0] = vminvq_u16(v68);
              if (v68.i32[0])
              {
                v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v51 + 6), (int16x8_t)xmmword_1968BCA60);
                v69.i16[0] = vminvq_u16(v69);
                if (v69.i32[0])
                  goto LABEL_77;
              }
            }
          }
          else
          {
            if ((_DWORD)v53)
            {
              if (*v51 != 98 || *(_DWORD *)(v51 + 1) != 1851878497 || *((_DWORD *)v51 + 1) != 1684366190)
              {
                v55 = 0;
                goto LABEL_57;
              }
LABEL_70:
              v57 = &WebCore::parseEnumerationFromString<WebCore::AudioContextLatencyCategory>(WTF::String const&)::mappings;
              goto LABEL_84;
            }
            if (*(_WORD *)v51 == 98)
            {
              v55 = 0;
              v56 = 11;
              if (*(_QWORD *)(v51 + 2) != 0x6E0061006C0061 || *((_QWORD *)v51 + 1) != 0x6400650063006ELL)
                goto LABEL_58;
              goto LABEL_70;
            }
            v55 = 0;
          }
          v56 = 11;
          goto LABEL_58;
        }
LABEL_88:
        v16 = 0;
        goto LABEL_118;
      }
    }
    else if (!v50)
    {
      goto LABEL_49;
    }
    *(_DWORD *)v50 += 2;
    goto LABEL_49;
  }
  return 0;
}

uint64_t WebCore::JSAudioContext::prototype(WebCore::JSAudioContext *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAudioContext::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAudioContext::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSBaseAudioContext::prototype(this, a2, a3);
    Structure = WebCore::JSAudioContextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSAudioContextPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSAudioContext::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSAudioContext::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSAudioContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSBaseAudioContext::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSBaseAudioContext::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSBaseAudioContext::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioContext::JSAudioContext(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSAudioContext::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(_QWORD *)(this + 24);
  v3 = v2 - 32;
  v4 = (unsigned int *)(v2 - 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a2 = v3;
  return this;
}

unint64_t WebCore::JSAudioContext::createPrototype(WebCore::JSAudioContext *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSBaseAudioContext::prototype(this, a2, a3);
  Structure = WebCore::JSAudioContextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSAudioContextPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSAudioContextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioContextPrototype::create(WebCore::JSAudioContextPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSAudioContext::s_info, (uint64_t)&WebCore::JSAudioContextPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioContext>,(WebCore::DOMConstructorID)234>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1872);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBaseAudioContext>,(WebCore::DOMConstructorID)246>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSAudioContext>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSAudioContext::prototype((WebCore::JSAudioContext *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1872) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioContextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioContextPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioContext>,(WebCore::DOMConstructorID)234>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioContext_baseLatency(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 348) && !*(_BYTE *)(v2 + 347) && *(_BYTE *)(v2 + 344) != 3 && !*(_BYTE *)(v2 + 349))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 32) + 80))(v2 - 32);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
    *(_BYTE *)(v2 + 348) = 1;
    if (*(_BYTE *)(v2 + 344) != 1)
      WebCore::AudioContext::startRendering(v2 - 32);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 400) + 176);
  if (v4)
    v5 = (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  else
    v5 = 0.0;
  v6 = v5 / *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 32) + 88))(v2 - 32) + 160);
  if (COERCE__INT64(fabs(v6)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v7 = (int)v6, v6 == (double)(int)v7)
    && ((_DWORD)v7 || (*(_QWORD *)&v6 & 0x8000000000000000) == 0))
  {
    return v7 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v6 + 0x2000000000000;
  }
}

uint64_t WebCore::JSAudioContext::subspaceForImpl(WebCore::JSAudioContext *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1896);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1896);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1896);
    *(_QWORD *)(v8 + 1896) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1896);
  *(_QWORD *)(v3 + 1896) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAudioContextOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSAudioContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v30;
  uint64_t v31;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 32;
  v5 = (unsigned int *)(v3 - 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*(_DWORD *)(a3 + 48))
  {
    v12 = *(_QWORD *)(a3 + 32);
    v10 = (uint64_t *)(a3 + 32);
    v11 = v12;
    if (v12)
    {
      v13 = *(_DWORD *)(v11 - 8);
      v14 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(v11 + 16 * v17);
      if (v18 != result)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v11 + 16 * v17);
          ++v19;
          if (v18 == result)
            goto LABEL_14;
        }
        v17 = *(unsigned int *)(v11 - 4);
      }
LABEL_14:
      if (v17 != *(_DWORD *)(v11 - 4))
      {
        v20 = (_QWORD *)(v11 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*v10 - 16);
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
          {
            v30 = v5;
            v31 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v10, v28 >> 1, 0);
            v5 = v30;
            result = v31;
          }
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 8);
    if (v7)
    {
      *(_QWORD *)(v7 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t WebCore::createWrapper<WebCore::AudioContext,WebCore::AudioContext>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSBaseAudioContext *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioContext::s_info + ~((_QWORD)&WebCore::JSAudioContext::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSAudioContext::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSAudioContext::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSBaseAudioContext *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSBaseAudioContext::prototype(v15, a1, a3);
    Structure = WebCore::JSAudioContextPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSAudioContextPrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSAudioContext::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSAudioContext::s_info);
  }
  v21 = WebCore::JSAudioContext::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AudioContext,WebCore::JSAudioContext>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::AudioContext *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::JSDOMGlobalObject *v20;
  int v21;
  WebCore::JSDOMGlobalObject *v22;

  v4 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v4 + 48))
  {
    v14 = *(_QWORD *)(v4 + 32);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v16 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = *(WebCore::JSDOMGlobalObject **)(v14 + 16 * v19);
      if (v20 == a3)
      {
LABEL_19:
        v5 = *(_QWORD *)(v14 + 16 * v19 + 8);
        if (v5)
          goto LABEL_3;
      }
      else
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v15;
          v20 = *(WebCore::JSDOMGlobalObject **)(v14 + 16 * v19);
          ++v21;
          if (v20 == a3)
            goto LABEL_19;
        }
      }
    }
  }
  else
  {
    v5 = *((_QWORD *)a3 + 5);
    if (v5)
    {
LABEL_3:
      if ((*(_BYTE *)(v5 + 8) & 3) == 0)
      {
        v6 = *(_QWORD *)v5;
        if (*(_QWORD *)v5)
          return v6;
      }
    }
  }
  v7 = (unsigned int *)((char *)a3 + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v22 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3368158)
  {
    __break(0xC471u);
    JUMPOUT(0x19484911CLL);
  }
  v6 = WebCore::createWrapper<WebCore::AudioContext,WebCore::AudioContext>(a2, (uint64_t *)&v22, a3);
  v9 = (unsigned int *)v22;
  v22 = 0;
  if (v9)
  {
    v10 = v9 + 6;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  return v6;
}

uint64_t WebCore::JSAudioContext::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSAudioContext::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSAudioContext::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 32;
  else
    return 0;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::AudioContextState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioContextState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_0::operator() const(void)::impl;
    unk_1EE2F4300 = &WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_1::operator() const(void)::impl;
    qword_1EE2F4308 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_2::operator() const(void)::impl;
    unk_1EE2F4310 = &WebCore::convertEnumerationToString(WebCore::AudioContextState)::$_3::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::AudioContextState)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::JSAudioDestinationNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioDestinationNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioDestinationNodePrototype::create(WebCore::JSAudioDestinationNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSAudioDestinationNode::s_info, (uint64_t)&WebCore::JSAudioDestinationNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioDestinationNode>,(WebCore::DOMConstructorID)235>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1880);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioDestinationNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAudioDestinationNode::s_info
         + ~((_QWORD)&WebCore::JSAudioDestinationNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioDestinationNode::s_info
                                                                        + ~((_QWORD)&WebCore::JSAudioDestinationNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAudioDestinationNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAudioDestinationNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAudioDestinationNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAudioDestinationNodePrototype::create((WebCore::JSAudioDestinationNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAudioDestinationNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAudioDestinationNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1880) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioDestinationNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioDestinationNodePrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioDestinationNode>,(WebCore::DOMConstructorID)235>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioDestinationNode_maxChannelCount(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 280))(*(_QWORD *)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSAudioDestinationNode::subspaceForImpl(WebCore::JSAudioDestinationNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1904);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1904);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1904);
    *(_QWORD *)(v8 + 1904) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1904);
  *(_QWORD *)(v3 + 1904) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF **WebCore::wrap<WebCore::AudioDestinationNode>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::JSDOMGlobalObject *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  int v19;
  unint64_t v20;
  WebCore::JSAudioNode *v21;
  JSC::JSCell *v22;
  unint64_t Structure;
  JSC::Structure *v24;
  JSC::JSCell *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WebCore::JSAudioListener *v42;
  JSC::JSCell *v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v34 = *(_QWORD *)(v5 + 32);
    if (!v34)
      goto LABEL_5;
    v35 = *(_DWORD *)(v34 - 8);
    v36 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    v39 = v35 & ((v38 >> 31) ^ v38);
    v40 = *(_QWORD *)(v34 + 16 * v39);
    if (v40 != a3)
    {
      v41 = 1;
      while (v40)
      {
        v39 = ((_DWORD)v39 + v41) & v35;
        v40 = *(_QWORD *)(v34 + 16 * v39);
        ++v41;
        if (v40 == a3)
          goto LABEL_27;
      }
      goto LABEL_5;
    }
LABEL_27:
    v6 = *(_QWORD *)(v34 + 16 * v39 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return (WTF **)v7;
  }
LABEL_5:
  v8 = *(unsigned int *)(a3 + 48);
  if ((_DWORD)v8 == -1)
    goto LABEL_29;
  v46 = &v44;
  v10 = (unsigned int *)(((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v46, a3 + 40)+ 24);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v44 = a3;
  v12 = *((_QWORD *)a2 + 412);
  if (!v12)
    goto LABEL_14;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = ((unint64_t)&WebCore::JSAudioDestinationNode::s_info
       + ~((_QWORD)&WebCore::JSAudioDestinationNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioDestinationNode::s_info
                                                                      + ~((_QWORD)&WebCore::JSAudioDestinationNode::s_info << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(char ***)(v12 + 16 * v17);
  if (v18 != &WebCore::JSAudioDestinationNode::s_info)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(char ***)(v12 + 16 * v17);
      ++v19;
      if (v18 == &WebCore::JSAudioDestinationNode::s_info)
        goto LABEL_13;
    }
    goto LABEL_14;
  }
LABEL_13:
  v20 = *(_QWORD *)(v12 + 16 * v17 + 8);
  if (!v20)
  {
LABEL_14:
    v21 = (WebCore::JSAudioNode *)*((_QWORD *)a2 + 7);
    v22 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v21, a2, v9);
    Structure = WebCore::JSAudioDestinationNodePrototype::createStructure((uint64_t *)v21, (uint64_t)a2, v22);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v25 = (JSC::JSCell *)WebCore::JSAudioDestinationNodePrototype::create(v21, a2, Structure, v24);
    v26 = WebCore::JSAudioDestinationNode::createStructure((uint64_t *)v21, (uint64_t)a2, v25);
    v20 = WebCore::cacheDOMStructure((JSCell *)a2, v26, (uint64_t)&WebCore::JSAudioDestinationNode::s_info);
  }
  v7 = WebCore::JSAudioDestinationNode::create(v20, a2, &v44);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a2 + 415), a3, v7);
  v27 = v44;
  v44 = 0;
  if (!v27)
    return (WTF **)v7;
  v28 = *(unsigned int *)(v27 + 48);
  if ((_DWORD)v28 != -1)
  {
    v46 = (uint64_t *)&v45;
    v29 = (unsigned int *)((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9AudioNode7contextEvE3__0JZNKS9_7contextEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v28])(&v46, v27 + 40);
    v30 = v29 + 6;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v29 + 6);
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
    }
    return (WTF **)v7;
  }
LABEL_29:
  v42 = (WebCore::JSAudioListener *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSAudioListener::destroy(v42, v43);
}

WTF **WebCore::JSAudioListener::destroy(WebCore::JSAudioListener *this, JSC::JSCell *a2)
{
  WTF **result;
  WTF *v4;
  void *v5;

  result = (WTF **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::AudioListener::~AudioListener(result, a2);
      return (WTF **)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSAudioListener::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioListenerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioListenerPrototype::create(WebCore::JSAudioListenerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSAudioListener::s_info, (uint64_t)&WebCore::JSAudioListenerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioListener>,(WebCore::DOMConstructorID)236>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1888);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioListener>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioListener::s_info + ~((_QWORD)&WebCore::JSAudioListener::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioListener::s_info + ~((_QWORD)&WebCore::JSAudioListener::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioListener::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioListener::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioListenerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioListenerPrototype::create((WebCore::JSAudioListenerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioListener::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioListener::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1888) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioListenerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioListenerPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioListener>,(WebCore::DOMConstructorID)236>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioListener_positionX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 8));
}

unint64_t WebCore::jsAudioListener_positionY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 16));
}

unint64_t WebCore::jsAudioListener_positionZ(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsAudioListener_forwardX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 32));
}

unint64_t WebCore::jsAudioListener_forwardY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

unint64_t WebCore::jsAudioListener_forwardZ(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 48));
}

unint64_t WebCore::jsAudioListener_upX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 56));
}

unint64_t WebCore::jsAudioListener_upY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 64));
}

unint64_t WebCore::jsAudioListener_upZ(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::JSAudioListenerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSAudioListenerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF **v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WTF ***)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF ***)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF ***)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::AudioListener::~AudioListener(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::AudioListener>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSAudioListener::s_info + ~((_QWORD)&WebCore::JSAudioListener::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioListener::s_info + ~((_QWORD)&WebCore::JSAudioListener::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSAudioListener::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSAudioListener::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSAudioListenerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioListenerPrototype::create((WebCore::JSAudioListenerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSAudioListener::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioListener::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1912);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1912))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1912);
    *(_QWORD *)(v36 + 1912) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1912);
  *(_QWORD *)(v32 + 1912) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE334B90 & 1) == 0)
  {
    qword_1EE334B88 = (uint64_t)&off_1E3222E90;
    byte_1EE334B90 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334B88;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSAudioNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioNodePrototype::create(WebCore::JSAudioNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSAudioNode::s_info, (uint64_t)&WebCore::JSAudioNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1896);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1896) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioNodePrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioNode_context(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::jsAudioNode_numberOfInputs(v8, v9);
  }
  else
  {
    v5 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v11 = &v10;
    v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore9AudioNode7contextEvE3__0JZNS9_7contextEvE3__1EEEEEJRNS0_6__implIJNS6_3RefINS8_16BaseAudioContextENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_7WeakPtrISG_NS8_30WeakPtrImplWithEventTargetDataENSH_ISN_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v11, v2 + 40);
    return WebCore::wrap<WebCore::BaseAudioContext>(a1, v5, v6);
  }
}

unint64_t WebCore::jsAudioNode_numberOfInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 68);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsAudioNode_numberOfOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 84);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsAudioNode_channelCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 136);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

BOOL WebCore::setJSAudioNode_channelCount(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  _BOOL8 v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  char v23;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v17);
  v11 = v18 == 0;
  if (!v18)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v10 + 200))(&v21, v10, v17);
    if (v23)
    {
      v13 = (WTF::StringImpl *)v21;
      v19 = v21;
      v14 = v22;
      v22 = 0;
      v20 = v14;
      if (!*((_QWORD *)v4 + 2))
      {
        v15.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v21, (JSC::JSGlobalObject *)&v20);
        JSC::VM::throwException(v4, a1, v15);
        v14 = v20;
      }
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (v23)
      {
        v16 = v22;
        v22 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  return v11;
}

uint64_t WebCore::jsAudioNode_channelCountMode(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::ChannelCountMode>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 140));
}

BOOL WebCore::setJSAudioNode_channelCountMode(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = WebCore::parseEnumeration<WebCore::ChannelCountMode>(a1, (unint64_t)this);
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !BYTE4(v11))
      return result;
  }
  else if (!BYTE4(v11))
  {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 208))(&v19, v10, v11);
  if (v21)
  {
    v14 = (WTF::StringImpl *)v19;
    v15 = v20;
    v20 = 0;
    v18 = v15;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException((JSC::VM *)v4, a1, v16);
      v15 = v18;
    }
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v21)
    {
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::jsAudioNode_channelInterpretation(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::ChannelInterpretation>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 144));
}

BOOL WebCore::setJSAudioNode_channelInterpretation(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioNode::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioNode::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>(a1, (unint64_t)this);
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !BYTE4(v11))
      return result;
  }
  else if (!BYTE4(v11))
  {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(&v19, v10, v11);
  if (v21)
  {
    v14 = (WTF::StringImpl *)v19;
    v15 = v20;
    v20 = 0;
    v18 = v15;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException((JSC::VM *)v4, a1, v16);
      v15 = v18;
    }
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v21)
    {
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::convertDictionary<WebCore::AudioNodeOptions>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  JSC::VM *v6;
  char v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  JSC::JSGlobalObject *v14;
  uint64_t Object;
  JSC::Structure *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  __int16 v29;
  char v30;
  __int16 v31;
  char v32;
  __int16 v33;
  char v34;
  WTF::StringImpl *v35;

  v6 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v14 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v16 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v18 = JSC::JSObject::get(v16, v14, (unint64_t)v35);
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v17);
          else
            *(_DWORD *)v35 -= 2;
        }
        if (*((_DWORD *)v6 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
          if ((_DWORD)result)
            goto LABEL_37;
        }
        if (v18 == 10)
        {
          v7 = 0;
          v8 = 0;
        }
        else
        {
          result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v14, v18, &v35);
          if (HIDWORD(v35))
            goto LABEL_37;
          v8 = v35;
          v28 = v35 >> 8;
          v7 = 1;
        }
        WTF::AtomStringImpl::addLiteral();
        v19 = v35;
        v21 = JSC::JSObject::get(v16, v14, (unint64_t)v35);
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v20);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (*((_DWORD *)v6 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
          if ((_DWORD)result)
            goto LABEL_37;
        }
        if (v21 == 10)
        {
          v9 = 0;
          LOBYTE(v10) = 0;
        }
        else
        {
          v35 = (WTF::StringImpl *)*((_QWORD *)v14 + 7);
          v22 = v35;
          v10 = WebCore::parseEnumeration<WebCore::ChannelCountMode>(v14, v21);
          if (*((_DWORD *)v22 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v22);
            if ((result & 1) != 0)
              goto LABEL_37;
          }
          if ((v10 & 0xFF00000000) == 0)
            goto LABEL_36;
          v4 = v10 >> 8;
          v9 = 1;
        }
        WTF::AtomStringImpl::addLiteral();
        v23 = v35;
        result = JSC::JSObject::get(v16, v14, (unint64_t)v35);
        v25 = result;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            result = WTF::StringImpl::destroy(v23, v24);
          else
            *(_DWORD *)v23 -= 2;
        }
        if (*((_DWORD *)v6 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
          if ((_DWORD)result)
            goto LABEL_37;
        }
        if (v25 == 10)
        {
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v3 = v28;
          goto LABEL_31;
        }
        v35 = (WTF::StringImpl *)*((_QWORD *)v14 + 7);
        v26 = v35;
        result = WebCore::parseEnumeration<WebCore::ChannelInterpretation>(v14, v25);
        v27 = result;
        if (*((_DWORD *)v26 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
          if ((result & 1) != 0)
          {
LABEL_37:
            *(_DWORD *)(a3 + 28) = 1;
            return result;
          }
        }
        v3 = v28;
        if ((v27 & 0xFF00000000) != 0)
        {
          v13 = v27 & 0xFFFFFF00;
          v12 = v27;
          v11 = 1;
          goto LABEL_31;
        }
      }
    }
LABEL_36:
    result = JSC::throwTypeError();
    goto LABEL_37;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  LOBYTE(v10) = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_31:
  *(_DWORD *)(a3 + 4) = v8 | (v3 << 8);
  *(_BYTE *)(a3 + 8) = v7;
  *(_WORD *)(a3 + 9) = v33;
  *(_BYTE *)(a3 + 11) = v34;
  *(_DWORD *)(a3 + 12) = v10 | (v4 << 8);
  *(_BYTE *)(a3 + 16) = v9;
  *(_WORD *)(a3 + 17) = v31;
  *(_BYTE *)(a3 + 19) = v32;
  *(_DWORD *)(a3 + 20) = v13 | v12;
  *(_BYTE *)(a3 + 24) = v11;
  *(_BYTE *)(a3 + 27) = v30;
  *(_WORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

JSC::VM *JSC::reifyStaticProperties<13u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 520; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

WebCore::AudioParam *WebCore::JSAudioParam::destroy(WebCore::JSAudioParam *this, JSC::JSCell *a2)
{
  WebCore::AudioParam *result;
  WTF *v4;
  void *v5;

  result = (WebCore::AudioParam *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 16) == 1)
    {
      WebCore::AudioParam::~AudioParam(result, a2);
      return (WebCore::AudioParam *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 16);
    }
  }
  return result;
}

uint64_t WebCore::JSAudioParam::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioParamPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioParamPrototype::create(WebCore::JSAudioParamPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSAudioParam::s_info, (uint64_t)&WebCore::JSAudioParamPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioParam>,(WebCore::DOMConstructorID)238>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1904);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioParam>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioParam::s_info + ~((_QWORD)&WebCore::JSAudioParam::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioParam::s_info + ~((_QWORD)&WebCore::JSAudioParam::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioParam::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioParam::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioParamPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioParamPrototype::create((WebCore::JSAudioParamPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioParam::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioParam::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1904) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioParamConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioParamPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioParam>,(WebCore::DOMConstructorID)238>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioParam_value(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 88);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSAudioParam_value(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  double v17;
  WTF::StringImpl *v18;
  int v19[2];
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioParam::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioParam::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v19, a1);
    v11 = v17;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < -3.40282347e38 || v11 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v12 = v11;
  WebCore::AudioParam::setValueForBindings(v10, v12, v19);
  if (v21)
  {
    v14 = (WTF::StringImpl *)LOBYTE(v19[0]);
    v15 = v20;
    v18 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v19[0]), (JSC::JSGlobalObject *)&v18);
      JSC::VM::throwException((JSC::VM *)v4, a1, v16);
      v15 = v18;
    }
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::jsAudioParam_automationRate(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 104);
  if ((byte_1EE334B42 & 1) == 0)
  {
    unk_1EE334C18 = &dword_1ECE76BF0;
    dword_1ECE76BF0 += 2;
    dword_1ECE76C10 += 2;
    unk_1EE334C20 = &dword_1ECE76C10;
    byte_1EE334B42 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_579[8 * v4 + 216];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSAudioParam_automationRate(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioParam::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioParam::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = WebCore::parseEnumeration<WebCore::AutomationRate>(a1, (unint64_t)this);
  v12 = v11;
  v13 = HIBYTE(v11);
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !v13)
      return result;
  }
  else if (!HIBYTE(v11))
  {
    return 0;
  }
  if (*(_BYTE *)(v10 + 105))
  {
    *(_BYTE *)(v10 + 104) = v12 != 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = 8;
    v23 = 1;
    v15 = v22;
    v22 = 0;
    v20 = v15;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, a1, v16);
      v15 = v20;
    }
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v23)
    {
      v17 = v22;
      v22 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  return 1;
}

unint64_t WebCore::jsAudioParam_defaultValue(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 92);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAudioParam_minValue(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 96);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAudioParam_maxValue(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 100);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

uint64_t WebCore::JSAudioParamOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSAudioParamOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::AudioParam *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::AudioParam *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::AudioParam **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 16);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::AudioParam **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::AudioParam **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 16) == 1)
  {
    WebCore::AudioParam::~AudioParam(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 16);
  }
}

unint64_t WebCore::wrap<WebCore::AudioParam>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 16);
  if (*(void (***)(WebCore::AudioParam *__hidden))a3 != off_1E3368C98)
  {
    __break(0xC471u);
    JUMPOUT(0x19484D58CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSAudioParam::s_info + ~((_QWORD)&WebCore::JSAudioParam::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioParam::s_info + ~((_QWORD)&WebCore::JSAudioParam::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSAudioParam::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSAudioParam::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSAudioParamPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioParamPrototype::create((WebCore::JSAudioParamPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSAudioParam::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioParam::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1928);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1928))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1928);
    *(_QWORD *)(v36 + 1928) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1928);
  *(_QWORD *)(v32 + 1928) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE334BA0 & 1) == 0)
  {
    qword_1EE334B98 = (uint64_t)&off_1E3222EC0;
    byte_1EE334BA0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334B98;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::AudioParamDescriptor>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  BOOL v9;
  unsigned __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  float v13;
  JSC::VM *v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  float v19;
  JSC::VM *v20;
  double v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  float v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t result;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  double v39;
  WTF::StringImpl *v40;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v42;
  JSC::VM *v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  int v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;

  v47 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_59:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v47, "name", 5, "AudioParamDescriptor", 21, "DOMString", 10);
LABEL_60:
    *(_DWORD *)(a3 + 24) = 1;
    return result;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_82;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_82;
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v7);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_60;
  }
  if (v8 == 10)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v45 = a2[7];
  v10 = WebCore::parseEnumeration<WebCore::AutomationRate>((JSC::JSGlobalObject *)a2, v8);
  if (*((_DWORD *)v45 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
    if ((result & 1) != 0)
      goto LABEL_60;
  }
  if (v10 <= 0xFFu)
  {
LABEL_82:
    result = JSC::throwTypeError();
    goto LABEL_60;
  }
  v9 = v10 != 0;
LABEL_13:
  WTF::AtomStringImpl::addLiteral();
  v12 = (WTF::StringImpl *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v11);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_60;
  }
  v13 = 0.0;
  if (v12 != (WTF::StringImpl *)10)
  {
    v45 = v12;
    v14 = a2[7];
    v49 = v14;
    if ((unint64_t)v12 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v12;
    }
    else if ((unint64_t)v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v42 = v14;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, (JSC::JSGlobalObject *)a2);
      v14 = v42;
    }
    else
    {
      *(_QWORD *)&v15 = (char *)v12 - 0x2000000000000;
    }
    if (*((_DWORD *)v14 + 20))
    {
      v37 = v15;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
      v15 = v37;
      if ((result & 1) != 0)
        goto LABEL_60;
    }
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 < -3.40282347e38 || v15 > 3.40282347e38)
      goto LABEL_83;
    v13 = v15;
  }
  WTF::AtomStringImpl::addLiteral();
  v16 = v45;
  v18 = (WTF::StringImpl *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_60;
  }
  if (v18 == (WTF::StringImpl *)10)
  {
    v19 = 3.4028e38;
  }
  else
  {
    v45 = v18;
    v20 = a2[7];
    v49 = v20;
    if ((unint64_t)v18 >= 0xFFFE000000000000)
    {
      v21 = (double)(int)v18;
    }
    else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v43 = v20;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, (JSC::JSGlobalObject *)a2);
      v20 = v43;
    }
    else
    {
      *(_QWORD *)&v21 = (char *)v18 - 0x2000000000000;
    }
    if (*((_DWORD *)v20 + 20))
    {
      v38 = v21;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
      v21 = v38;
      if ((result & 1) != 0)
        goto LABEL_60;
    }
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v21 < -3.40282347e38 || v21 > 3.40282347e38)
      goto LABEL_83;
    v19 = v21;
  }
  WTF::AtomStringImpl::addLiteral();
  v22 = v45;
  v24 = (WTF::StringImpl *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_60;
  }
  if (v24 == (WTF::StringImpl *)10)
  {
    v25 = -3.4028e38;
    goto LABEL_54;
  }
  v45 = v24;
  v26 = a2[7];
  v49 = v26;
  if ((unint64_t)v24 >= 0xFFFE000000000000)
  {
    v27 = (double)(int)v24;
  }
  else if ((unint64_t)v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v44 = v26;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, (JSC::JSGlobalObject *)a2);
    v26 = v44;
  }
  else
  {
    *(_QWORD *)&v27 = (char *)v24 - 0x2000000000000;
  }
  if (*((_DWORD *)v26 + 20))
  {
    v39 = v27;
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
    v27 = v39;
    if ((result & 1) != 0)
      goto LABEL_60;
  }
  if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v27 < -3.40282347e38 || v27 > 3.40282347e38)
  {
LABEL_83:
    result = JSC::throwTypeError();
    goto LABEL_60;
  }
  v25 = v27;
LABEL_54:
  WTF::AtomStringImpl::addLiteral();
  v28 = v45;
  v30 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*((_DWORD *)v47 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v47);
    if ((_DWORD)result)
      goto LABEL_60;
  }
  if (v30 == 10)
    goto LABEL_59;
  v49 = (JSC::VM *)v30;
  v32 = a2[7];
  if ((v30 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v30 + 5) == 2)
  {
    v33 = *(WTF::StringImpl **)(v30 + 8);
    if ((v33 & 1) != 0)
    {
      v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, (JSC::JSGlobalObject *)a2);
      if (!v33)
        goto LABEL_66;
    }
    else if (!v33)
    {
LABEL_66:
      v48 = v33;
      goto LABEL_67;
    }
    *(_DWORD *)v33 += 2;
    goto LABEL_66;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v49, (JSC::JSGlobalObject *)a2);
LABEL_67:
  if (*((_DWORD *)v32 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
    v34 = v48;
    if (hasExceptionsAfterHandlingTraps)
    {
      v46 = 1;
      v48 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v40);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = 1;
      v36 = 1;
      goto LABEL_70;
    }
  }
  else
  {
    v34 = v48;
  }
  v35 = 0;
  v36 = 0;
  v46 = 0;
  v45 = 0;
  *(_QWORD *)a3 = v34;
  *(float *)(a3 + 8) = v13;
  *(float *)(a3 + 12) = v25;
  *(float *)(a3 + 16) = v19;
  *(_BYTE *)(a3 + 20) = v9;
LABEL_70:
  *(_DWORD *)(a3 + 24) = v36;
  return ((uint64_t (*)(JSC::VM **, WTF::StringImpl **))off_1E3223358[v35])(&v49, &v45);
}

uint64_t WebCore::JSAudioParamMap::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF::StringImpl ***v2;
  void *v3;

  v2 = *(WTF::StringImpl ****)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(v2 + 1, a2);
      return WTF::fastFree((WTF *)v2, v3);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSAudioParamMap::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioParamMapPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioParamMapPrototype::create(WebCore::JSAudioParamMapPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSAudioParamMap::s_info, (uint64_t)&WebCore::JSAudioParamMapPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioParamMap>,(WebCore::DOMConstructorID)239>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1912);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioParamMap>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioParamMap::s_info + ~((_QWORD)&WebCore::JSAudioParamMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioParamMap::s_info + ~((_QWORD)&WebCore::JSAudioParamMap::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioParamMap::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioParamMap::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioParamMapPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioParamMapPrototype::create((WebCore::JSAudioParamMapPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioParamMap::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioParamMap::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1912) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioParamMapConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioParamMapPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioParamMap>,(WebCore::DOMConstructorID)239>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAudioParamMap_size(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char BackingMap;
  JSC::Structure *v11;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD v24[2];

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioParamMap::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioParamMap::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
  BackingMap = WebCore::getBackingMap((unint64_t)this, a2, a3);
  v12 = v11;
  if (BackingMap)
  {
    v24[0] = this;
    v24[1] = v11;
    v13 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    if (v13)
    {
      v14 = *(unsigned int *)(v13 - 4);
      v15 = v13 + 16 * v14;
      if (*(_DWORD *)(v13 - 12))
      {
        v16 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
        if ((_DWORD)v14)
        {
          v17 = 16 * v14;
          v16 = v13;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 16;
            v17 -= 16;
            if (!v17)
            {
              v16 = v15;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v16 = v13 + 16 * v14;
    }
    else
    {
      v16 = 0;
      v14 = 0;
    }
    v15 = v13 + 16 * v14;
    if (!v13)
    {
      v18 = 0;
LABEL_25:
      while (v16 != v18)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v24, (uint64_t *)v16, *(WTF **)(v16 + 8));
        v19 = v16 + 16;
        v16 = v15;
        if (v19 != v15)
        {
          v16 = v19;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 16;
            if (v16 == v15)
            {
              v16 = v15;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v18 = v13 + 16 * *(unsigned int *)(v13 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v20 = (_DWORD *)MEMORY[0x1E0CBEBC8];
  *MEMORY[0x1E0CBEBC8] += 2;
  v22 = JSC::JSObject::get(v12, this, (unint64_t)v20);
  if (*v20 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC8], v21);
  else
    *v20 -= 2;
  return v22;
}

uint64_t WebCore::JSAudioParamMapOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSAudioParamMapOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF::StringImpl ***v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl ***v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  void *v24;
  _QWORD *result;

  v3 = *(WTF::StringImpl ****)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF::StringImpl ****)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF::StringImpl ****)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioParam,WTF::RawPtrTraits<WebCore::AudioParam>,WTF::DefaultRefDerefTraits<WebCore::AudioParam>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(v3 + 1, a2);
    return (_QWORD *)WTF::fastFree((WTF *)v3, v24);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSAudioProcessingEvent>::construct(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  JSCell *v9;
  int v10;
  JSC::JSCell *v11;
  WTF::StringImpl *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  BOOL v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  BOOL v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  JSC::VM *v29;
  double v30;
  BOOL v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BOOL4 v46;
  char **v47;
  BOOL v48;
  WTF **v50;
  WTF::StringImpl *v51;
  void *v52;
  JSC::Structure *v53;
  double v54;
  WTF::StringImpl *v55;
  void *v56;
  WebCore::JSDOMGlobalObject *v57;
  WTF **v58;
  WTF **v59;
  WTF::StringImpl *v60;
  JSC::VM *v61;
  JSC::VM *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  unint64_t v71;
  WebCore::JSEvent *v72;
  JSC::JSCell *v73;
  unint64_t Structure;
  JSC::Structure *v75;
  JSC::JSCell *v76;
  uint64_t v77;
  JSC::JSCell *v78;
  JSC::JSGlobalObject *v79;
  JSC::JSObject *v80;
  JSC::JSGlobalObject *v81;
  JSC::VM *v82;
  WebCore::JSDOMGlobalObject *v83;
  JSC::Structure *v84;
  JSC::VM *FunctionRealm;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char **v92;
  int v93;
  JSC::JSCell *v94;
  unint64_t v95;
  JSC::Structure *v96;
  JSC::JSCell *v97;
  uint64_t v98;
  unint64_t SubclassStructure;
  JSC::VM *v100;
  JSValue v101;
  char hasExceptionsAfterHandlingTraps;
  BOOL v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v107;
  BOOL v108;
  int v109;
  uint64_t v110;
  int *v111;
  int v112;
  BOOL v113;
  int v114;
  uint64_t v115;
  int *v116;
  int v117;
  double v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  _QWORD v122[2];
  WTF *v123;
  WTF *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126[4];
  int v127;
  WTF::StringImpl *v128;
  int v129;
  JSC::VM *v130;
  JSC::VM *v131[2];

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v130 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19484F394);
  }
  v8 = v6 - 192;
  if (!v6)
    v8 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v8 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v101.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, v7);
    return JSC::VM::throwException(v4, a1, v101);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v128);
  v10 = v129;
  if (!v129)
  {
    v11 = *(JSC::JSCell **)(a2 + 56);
    v131[0] = *((JSC::VM **)a1 + 7);
    if (((unint64_t)v11 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_50:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)v131, "inputBuffer", 12, "AudioProcessingEventInit", 25, "AudioBuffer", 12);
    }
    else
    {
      v12 = (WTF::StringImpl *)0xFFFE000000000002;
      if (((unint64_t)v11 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject(v11);
        if (Object)
        {
          v14 = (JSC::Structure *)Object;
          WTF::AtomStringImpl::addLiteral();
          v16 = JSC::JSObject::get(v14, a1, (unint64_t)v126[0]);
          if (v126[0])
          {
            if (*(_DWORD *)v126[0] == 2)
              WTF::StringImpl::destroy(v126[0], v15);
            else
              *(_DWORD *)v126[0] -= 2;
          }
          if (*((_DWORD *)v131[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v131[0]))
            goto LABEL_51;
          if (v16 != 10)
          {
            v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v16 >= 0xFFFE000000000000)
            {
              v103 = (_DWORD)v16 == 0;
              goto LABEL_218;
            }
            *(_QWORD *)&v18 = v16 - 0x2000000000000;
            if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v18 <= 0.0)
              {
                v19 = v18 < 0.0;
                goto LABEL_22;
              }
            }
            else
            {
              if ((v16 & 0xFFFE000000000002) != 0)
              {
                v19 = v16 == 7;
                goto LABEL_22;
              }
              v104 = *(unsigned __int8 *)(v16 + 5);
              if (v104 == 3)
                goto LABEL_205;
              if (v104 == 2)
              {
                v105 = *(_QWORD *)(v16 + 8);
                if ((v105 & 1) != 0)
                  v106 = (int *)(v16 + 16);
                else
                  v106 = (int *)(v105 + 4);
                v107 = *v106;
                goto LABEL_206;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v103 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_218;
              }
            }
            v19 = 1;
            goto LABEL_22;
          }
          v121 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v20 = v126[0];
            v22 = JSC::JSObject::get(v14, a1, (unint64_t)v126[0]);
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v21);
              else
                *(_DWORD *)v20 -= 2;
            }
            if (*((_DWORD *)v131[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v131[0]))
              goto LABEL_51;
            if (v22 == 10)
            {
              v120 = 0;
              goto LABEL_34;
            }
            v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v22 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v24 = v22 - 0x2000000000000;
            if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v22 & (unint64_t)v12) != 0)
              {
                v25 = v22 == 7;
                goto LABEL_33;
              }
              v109 = *(unsigned __int8 *)(v22 + 5);
              if (v109 == 3)
              {
                v112 = *(_DWORD *)(v22 + 8);
                goto LABEL_210;
              }
              if (v109 == 2)
              {
                v110 = *(_QWORD *)(v22 + 8);
                if ((v110 & 1) != 0)
                  v111 = (int *)(v22 + 16);
                else
                  v111 = (int *)(v110 + 4);
                v112 = *v111;
LABEL_210:
                v108 = v112 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_212:
                  v25 = 1;
                  goto LABEL_33;
                }
                v108 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_222:
              v25 = !v108;
              goto LABEL_33;
            }
            if (v24 > 0.0)
              goto LABEL_212;
            v25 = v24 < 0.0;
LABEL_33:
            v120 = v25;
            if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
              goto LABEL_51;
LABEL_34:
            WTF::AtomStringImpl::addLiteral();
            v26 = v126[0];
            v28 = JSC::JSObject::get(v14, a1, (unint64_t)v126[0]);
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v27);
              else
                *(_DWORD *)v26 -= 2;
            }
            if (*((_DWORD *)v131[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v131[0]))
              goto LABEL_51;
            if (v28 == 10)
            {
              v119 = 0;
              goto LABEL_45;
            }
            v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v28 >= 0xFFFE000000000000)
            {
              v113 = (_DWORD)v28 == 0;
              goto LABEL_226;
            }
            *(_QWORD *)&v30 = v28 - 0x2000000000000;
            if (v28 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v28 & (unint64_t)v12) != 0)
              {
                v31 = v28 == 7;
                goto LABEL_44;
              }
              v114 = *(unsigned __int8 *)(v28 + 5);
              if (v114 == 3)
              {
                v117 = *(_DWORD *)(v28 + 8);
              }
              else
              {
                if (v114 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_216:
                    v31 = 1;
                    goto LABEL_44;
                  }
                  v113 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_226;
                }
                v115 = *(_QWORD *)(v28 + 8);
                if ((v115 & 1) != 0)
                  v116 = (int *)(v28 + 16);
                else
                  v116 = (int *)(v115 + 4);
                v117 = *v116;
              }
              v113 = v117 == 0;
LABEL_226:
              v31 = !v113;
              goto LABEL_44;
            }
            if (v30 > 0.0)
              goto LABEL_216;
            v31 = v30 < 0.0;
LABEL_44:
            v119 = v31;
            if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29))
              goto LABEL_51;
LABEL_45:
            WTF::AtomStringImpl::addLiteral();
            v32 = v126[0];
            v34 = JSC::JSObject::get(v14, a1, (unint64_t)v126[0]);
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v33);
              else
                *(_DWORD *)v32 -= 2;
            }
            if (*((_DWORD *)v131[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v131[0]))
              goto LABEL_51;
            if (v34 == 10)
              goto LABEL_50;
            v126[0] = *((WTF::StringImpl **)a1 + 7);
            if ((v34 & (unint64_t)v12) != 0)
              goto LABEL_66;
            v37 = *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C);
            v38 = *(_DWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v37)
            {
              v39 = 16 * v37;
              if ((char **)v39 != &WebCore::JSAudioBuffer::s_info)
              {
                do
                {
                  v39 = *(_QWORD *)(v39 + 16);
                  v38 = v39 != 0;
                }
                while ((char **)v39 != &WebCore::JSAudioBuffer::s_info && v39 != 0);
              }
            }
            if (!v38)
              goto LABEL_66;
            v16 = *(_QWORD *)(v34 + 24);
            if (!v16)
              goto LABEL_66;
            ++*(_DWORD *)v16;
            WTF::AtomStringImpl::addLiteral();
            v41 = v126[0];
            v43 = JSC::JSObject::get(v14, a1, (unint64_t)v126[0]);
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v42);
              else
                *(_DWORD *)v41 -= 2;
            }
            if (*((_DWORD *)v131[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v131[0]))
              goto LABEL_86;
            if (v43 == 10)
            {
              WebCore::throwRequiredMemberTypeError((int)a1, (int)v131, "outputBuffer", 13, "AudioProcessingEventInit", 25, "AudioBuffer", 12);
              goto LABEL_86;
            }
            v126[0] = *((WTF::StringImpl **)a1 + 7);
            if ((v43 & 0xFFFE000000000002) != 0)
              goto LABEL_85;
            v45 = *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C);
            v46 = *(_DWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C) != 0;
            v47 = (char **)(16 * v45);
            if ((_DWORD)v45)
              v48 = v47 == &WebCore::JSAudioBuffer::s_info;
            else
              v48 = 1;
            if (!v48)
            {
              do
              {
                v47 = (char **)v47[2];
                v46 = v47 != 0;
              }
              while (v47 != &WebCore::JSAudioBuffer::s_info && v47 != 0);
            }
            if (!v46 || (v50 = *(WTF ***)(v43 + 24)) == 0)
            {
LABEL_85:
              JSC::throwTypeError();
LABEL_86:
              v127 = 1;
LABEL_87:
              WTF::RefCounted<WebCore::AudioBuffer>::deref((WTF **)v16, v44);
              goto LABEL_52;
            }
            ++*(_DWORD *)v50;
            WTF::AtomStringImpl::addLiteral();
            v12 = v126[0];
            v14 = (JSC::Structure *)JSC::JSObject::get(v14, a1, (unint64_t)v126[0]);
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, v51);
              else
                *(_DWORD *)v12 -= 2;
            }
            if (*((_DWORD *)v131[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v131[0]) & 1) != 0)
              goto LABEL_99;
            if (v14 == (JSC::Structure *)10)
            {
              WebCore::throwRequiredMemberTypeError((int)a1, (int)v131, "playbackTime", 13, "AudioProcessingEventInit", 25, "double", 7);
LABEL_99:
              v127 = 1;
              WTF::RefCounted<WebCore::AudioBuffer>::deref(v50, v52);
              goto LABEL_87;
            }
            v126[0] = v14;
            v53 = (JSC::Structure *)*((_QWORD *)a1 + 7);
            v122[0] = v53;
            if ((unint64_t)v14 >= 0xFFFE000000000000)
            {
              v54 = (double)(int)v14;
            }
            else if ((unint64_t)v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              v14 = v53;
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, a1);
              v53 = v14;
            }
            else
            {
              *(_QWORD *)&v54 = (char *)v14 - 0x2000000000000;
            }
            if (*((_DWORD *)v53 + 20))
            {
              v118 = v54;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v53);
              v54 = v118;
              if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                goto LABEL_99;
            }
            if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              JSC::throwTypeError();
              goto LABEL_99;
            }
            LOBYTE(v126[0]) = v121;
            BYTE1(v126[0]) = v120;
            BYTE2(v126[0]) = v119;
            v126[1] = *(WTF::StringImpl **)&v54;
            v127 = 0;
            if (!v129)
            {
              v55 = v128;
              v128 = 0;
              v124 = (WTF *)v50;
              v125 = v55;
              LOWORD(v122[0]) = v126[0];
              BYTE2(v122[0]) = BYTE2(v126[0]);
              *(double *)&v122[1] = v54;
              v126[2] = 0;
              v126[3] = 0;
              v123 = (WTF *)v16;
              WebCore::AudioProcessingEvent::create(&v125, (unsigned __int8 *)v122, (uint64_t *)v131);
              v58 = (WTF **)v124;
              v124 = 0;
              if (v58)
                WTF::RefCounted<WebCore::AudioBuffer>::deref(v58, v56);
              v59 = (WTF **)v123;
              v123 = 0;
              if (v59)
                WTF::RefCounted<WebCore::AudioBuffer>::deref(v59, v56);
              v60 = v125;
              v125 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v56);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v131[0];
              if (*(void (***)(WebCore::AudioProcessingEvent *__hidden))v131[0] != off_1E3368D28)
              {
                __break(0xC471u);
                JUMPOUT(0x19484F490);
              }
              v62 = *(JSC::VM **)(v5 + 40);
              v63 = *((_QWORD *)v62 + 412);
              if (!v63)
                goto LABEL_120;
              v64 = *(_DWORD *)(v63 - 8);
              v65 = ((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
                   + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
                                                                                  + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) >> 22);
              v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
              v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
              v68 = v64 & ((v67 >> 31) ^ v67);
              v69 = *(char ***)(v63 + 16 * v68);
              if (v69 == &WebCore::JSAudioProcessingEvent::s_info)
              {
LABEL_119:
                v71 = *(_QWORD *)(v63 + 16 * v68 + 8);
                if (!v71)
                  goto LABEL_120;
              }
              else
              {
                v70 = 1;
                while (v69)
                {
                  v68 = ((_DWORD)v68 + v70) & v64;
                  v69 = *(char ***)(v63 + 16 * v68);
                  ++v70;
                  if (v69 == &WebCore::JSAudioProcessingEvent::s_info)
                    goto LABEL_119;
                }
LABEL_120:
                v72 = (WebCore::JSEvent *)*((_QWORD *)v62 + 7);
                v73 = (JSC::JSCell *)WebCore::JSEvent::prototype(v72, *(JSC::VM **)(v5 + 40), v57);
                Structure = WebCore::JSAudioProcessingEventPrototype::createStructure((uint64_t *)v72, (uint64_t)v62, v73);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v76 = (JSC::JSCell *)WebCore::JSAudioProcessingEventPrototype::create(v72, v62, Structure, v75);
                v77 = WebCore::JSAudioProcessingEvent::createStructure((uint64_t *)v72, (uint64_t)v62, v76);
                v71 = WebCore::cacheDOMStructure((JSCell *)v62, v77, (uint64_t)&WebCore::JSAudioProcessingEvent::s_info);
              }
              v9 = (JSCell *)WebCore::JSAudioProcessingEvent::create(v71, v62, (uint64_t *)v131);
              WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v62 + 415), (uint64_t)v61, (uint64_t)v9);
              v78 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v78 & 0xFFFE000000000002) != 0
                || (v79 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v78)) == 0
                || (v81 = v79, v79 == *(JSC::JSGlobalObject **)(a2 + 24))
                || (v82 = (JSC::VM *)*((_QWORD *)a1 + 7),
                    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v79, v80),
                    *((_DWORD *)v82 + 20))
                && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
              {
LABEL_134:
                if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
                  v9 = 0;
                v100 = v131[0];
                v131[0] = 0;
                if (v100)
                {
                  if (*((_DWORD *)v100 + 4) == 1)
                    (*(void (**)(JSC::VM *))(*(_QWORD *)v100 + 8))(v100);
                  else
                    --*((_DWORD *)v100 + 4);
                }
                v35 = 0;
                goto LABEL_53;
              }
              v86 = *((_QWORD *)FunctionRealm + 412);
              if (v86)
              {
                v87 = *(_DWORD *)(v86 - 8);
                v88 = ((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
                     + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
                                                                                    + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) >> 22);
                v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
                v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
                v91 = v87 & ((v90 >> 31) ^ v90);
                v92 = *(char ***)(v86 + 16 * v91);
                if (v92 != &WebCore::JSAudioProcessingEvent::s_info)
                {
                  v93 = 1;
                  while (v92)
                  {
                    v91 = ((_DWORD)v91 + v93) & v87;
                    v92 = *(char ***)(v86 + 16 * v91);
                    ++v93;
                    if (v92 == &WebCore::JSAudioProcessingEvent::s_info)
                      goto LABEL_130;
                  }
                  goto LABEL_131;
                }
LABEL_130:
                v83 = *(WebCore::JSDOMGlobalObject **)(v86 + 16 * v91 + 8);
                if (!v83)
                  goto LABEL_131;
              }
              else
              {
LABEL_131:
                v94 = (JSC::JSCell *)WebCore::JSEvent::prototype(v82, FunctionRealm, v83);
                v95 = WebCore::JSAudioProcessingEventPrototype::createStructure((uint64_t *)v82, (uint64_t)FunctionRealm, v94);
                *(_DWORD *)(v95 + 16) |= 0x80000u;
                v97 = (JSC::JSCell *)WebCore::JSAudioProcessingEventPrototype::create(v82, FunctionRealm, v95, v96);
                v98 = WebCore::JSAudioProcessingEvent::createStructure((uint64_t *)v82, (uint64_t)FunctionRealm, v97);
                v83 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v98, (uint64_t)&WebCore::JSAudioProcessingEvent::s_info);
              }
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v81, v83, v84);
              if (!*((_DWORD *)v82 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) == 0)
                JSC::JSObject::setStructure(v9, v82, SubclassStructure);
              goto LABEL_134;
            }
            v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_205:
            v107 = *(_DWORD *)(v16 + 8);
LABEL_206:
            v103 = v107 == 0;
LABEL_218:
            v19 = !v103;
LABEL_22:
            v121 = v19;
            if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
              goto LABEL_51;
          }
          v108 = (_DWORD)v22 == 0;
          goto LABEL_222;
        }
      }
LABEL_66:
      JSC::throwTypeError();
    }
LABEL_51:
    v127 = 1;
LABEL_52:
    v9 = 0;
    v35 = 1;
LABEL_53:
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3224480[v35])(v122, v126);
    v10 = v129;
    goto LABEL_54;
  }
  v9 = 0;
LABEL_54:
  if (v10 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32236D8[v10])(v126, &v128);
  return (uint64_t)v9;
}

uint64_t WebCore::JSAudioProcessingEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioProcessingEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioProcessingEventPrototype::create(WebCore::JSAudioProcessingEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSAudioProcessingEvent::s_info, &WebCore::JSAudioProcessingEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioProcessingEvent>,(WebCore::DOMConstructorID)240>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1920);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSAudioProcessingEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
         + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioProcessingEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSAudioProcessingEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAudioProcessingEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAudioProcessingEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAudioProcessingEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAudioProcessingEventPrototype::create((WebCore::JSAudioProcessingEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAudioProcessingEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAudioProcessingEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1920) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioProcessingEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioProcessingEventPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioProcessingEvent>,(WebCore::DOMConstructorID)240>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioProcessingEvent_playbackTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 88);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAudioProcessingEvent_inputBuffer(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::AudioBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 72);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

unint64_t WebCore::jsAudioProcessingEvent_outputBuffer(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::AudioBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 80);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSAudioProcessingEvent::subspaceForImpl(WebCore::JSAudioProcessingEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1944);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1944))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1944);
    *(_QWORD *)(v8 + 1944) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1944);
  *(_QWORD *)(v3 + 1944) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::AudioSampleFormat>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4328 = &WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_1::operator() const(void)::impl;
    qword_1EE2F4330 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_2::operator() const(void)::impl;
    unk_1EE2F4338 = &WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_3::operator() const(void)::impl;
    qword_1EE2F4340 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_4::operator() const(void)::impl;
    unk_1EE2F4348 = &WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F4350 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_6::operator() const(void)::impl;
    unk_1EE2F4358 = &WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::$_7::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::AudioSampleFormat)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::AudioSampleFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  char v13;
  char **v14;
  uint64_t v16;
  uint16x8_t v19;
  uint16x8_t v20;
  char v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  int v26;
  uint16x8_t v27;
  uint64_t v29;
  unint64_t v30;

  v3 = a1;
  v30 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v30, a1);
    v4 = v29;
    if (v29)
      goto LABEL_7;
    return 0;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 3;
  if (v5 == "f32" || v6 != 3)
  {
    if (v5 == "f32" && v6 == 3)
      goto LABEL_61;
    v9 = v6 == 10;
    v10 = v6 != 10;
    if (v5 != "f32-planar" && v6 == 10)
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 102 && *(_QWORD *)(v5 + 1) == 0x616E616C702D3233 && *(_QWORD *)(v5 + 2) == 0x72616E616C702D32)
          goto LABEL_39;
      }
      else if (*(_WORD *)v5 == 102)
      {
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCA70);
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
        {
          v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968BCA80);
          v23.i16[0] = vminvq_u16(v23);
          if (v23.i32[0])
            goto LABEL_39;
        }
      }
      v10 = 0;
      v11 = 10;
      goto LABEL_13;
    }
    if (v5 != "f32-planar")
    {
      v11 = *(_DWORD *)(v4 + 4);
      goto LABEL_13;
    }
    v11 = *(_DWORD *)(v4 + 4);
    if (v6 != 10)
      goto LABEL_13;
LABEL_39:
    v14 = &off_1E3221058;
    goto LABEL_62;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 != 102 || *(_DWORD *)(v5 + 2) != 3276851)
      goto LABEL_12;
LABEL_61:
    v14 = &WebCore::parseEnumerationFromString<WebCore::AudioSampleFormat>(WTF::String const&)::mappings;
    goto LABEL_62;
  }
  if (*v5 == 102 && *(_WORD *)(v5 + 1) == 12851)
    goto LABEL_61;
LABEL_12:
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 3;
LABEL_13:
  v12 = v7 << 32;
  if (v5 == "s16" || v8)
  {
    if (v5 != "s16" || v6 != 3)
      goto LABEL_19;
    goto LABEL_42;
  }
  if (!v11)
    goto LABEL_42;
  if ((_DWORD)v7)
  {
    if (*v5 != 115 || *(_WORD *)(v5 + 1) != 13873)
      goto LABEL_19;
LABEL_42:
    v14 = &off_1E3221070;
    goto LABEL_62;
  }
  if (*(_WORD *)v5 == 115 && *(_DWORD *)(v5 + 2) == 3538993)
    goto LABEL_42;
  v12 = 0;
LABEL_19:
  v13 = v5 == "s16-planar" || v10;
  if ((v13 & 1) != 0)
  {
    if (v5 == "s16-planar" && v9)
      goto LABEL_28;
  }
  else
  {
    if (!v11)
    {
LABEL_28:
      v14 = &off_1E3221088;
LABEL_62:
      v16 = *((unsigned int *)v14 + 4) | 0x100000000;
      goto LABEL_63;
    }
    if (v12)
    {
      if (*v5 == 115 && *(_QWORD *)(v5 + 1) == 0x616E616C702D3631 && *(_QWORD *)(v5 + 2) == 0x72616E616C702D36)
        goto LABEL_28;
    }
    else
    {
      if (*(_WORD *)v5 == 115)
      {
        v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCA90);
        v19.i16[0] = vminvq_u16(v19);
        if (v19.i32[0])
        {
          v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968BCAA0);
          v20.i16[0] = vminvq_u16(v20);
          if (v20.i32[0])
            goto LABEL_28;
        }
      }
      v12 = 0;
    }
  }
  if (v5 == "s32")
    v8 = 1;
  if (v8)
  {
    if (v5 == "s32" && v6 == 3)
      goto LABEL_58;
  }
  else
  {
    if (!v11)
    {
LABEL_58:
      v14 = &off_1E32210A0;
      goto LABEL_62;
    }
    if (v12)
    {
      if (*v5 == 115 && *(_WORD *)(v5 + 1) == 12851)
        goto LABEL_58;
    }
    else
    {
      if (*(_WORD *)v5 == 115 && *(_DWORD *)(v5 + 2) == 3276851)
        goto LABEL_58;
      v12 = 0;
    }
  }
  v21 = v5 == "s32-planar" || v10;
  if ((v21 & 1) != 0)
  {
    if (v5 != "s32-planar")
      v9 = 0;
    if (v9)
      goto LABEL_86;
  }
  else
  {
    if (!v11)
    {
LABEL_86:
      v14 = &off_1E32210B8;
      goto LABEL_62;
    }
    if (v12)
    {
      if (*v5 == 115 && *(_QWORD *)(v5 + 1) == 0x616E616C702D3233 && *(_QWORD *)(v5 + 2) == 0x72616E616C702D32)
        goto LABEL_86;
    }
    else
    {
      if (*(_WORD *)v5 == 115)
      {
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCA70);
        v24.i16[0] = vminvq_u16(v24);
        if (v24.i32[0])
        {
          v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968BCA80);
          v25.i16[0] = vminvq_u16(v25);
          if (v25.i32[0])
            goto LABEL_86;
        }
      }
      v12 = 0;
    }
  }
  if (v5 == "u8" || v11 != 2)
  {
    if (v5 == "u8" && v11 == 2)
      goto LABEL_101;
    if (v5 == "u8-planar" || v11 != 9)
    {
      if (v11 != 9 || v5 != "u8-planar")
        goto LABEL_126;
    }
    else if (v12)
    {
      if (*v5 != 117 || *(_DWORD *)(v5 + 1) != 1819290936 || *(_DWORD *)(v5 + 5) != 1918987873)
        goto LABEL_126;
    }
    else
    {
      if (*(_WORD *)v5 != 117)
        goto LABEL_126;
      v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCAB0);
      v27.i16[0] = vminvq_u16(v27);
      if (!v27.i32[0])
        goto LABEL_126;
    }
    v14 = &off_1E32210E8;
    goto LABEL_62;
  }
  if (v12)
  {
    if (*v5 != 117)
      goto LABEL_126;
    v26 = *((unsigned __int8 *)v5 + 1);
  }
  else
  {
    if (*(_WORD *)v5 != 117)
      goto LABEL_126;
    v26 = *((unsigned __int16 *)v5 + 1);
  }
  if (v26 == 56)
  {
LABEL_101:
    v14 = &off_1E32210D0;
    goto LABEL_62;
  }
LABEL_126:
  v16 = 0;
LABEL_63:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v16;
}

uint64_t WebCore::JSAudioScheduledSourceNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioScheduledSourceNodePrototype::create(WebCore::JSAudioScheduledSourceNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSAudioScheduledSourceNode::s_info, &WebCore::JSAudioScheduledSourceNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioScheduledSourceNode>,(WebCore::DOMConstructorID)241>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1928);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioScheduledSourceNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSAudioScheduledSourceNode::prototype((WebCore::JSAudioScheduledSourceNode *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1928) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioScheduledSourceNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioScheduledSourceNodePrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioScheduledSourceNode>,(WebCore::DOMConstructorID)241>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAudioScheduledSourceNode_onended(uint64_t a1, uint64_t a2)
{
  WebCore::AudioNode *v3;
  WebCore *v4;
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(WebCore::AudioNode **)(a2 + 24);
  v4 = WebCore::AudioNode::ref(v3);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(v4);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v3, (WebCore::EventTarget *)(v8 + 752), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), v5);
  WebCore::AudioNode::deref(v3);
  return v9;
}

uint64_t WebCore::setJSAudioScheduledSourceNode_onended(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::AudioNode *v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioScheduledSourceNode::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioScheduledSourceNode::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::AudioNode **)(a2 + 24);
  v12 = WebCore::AudioNode::ref(v11);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(v12);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 752), a3, (_DWORD *)a2);
  if (v11)
    WebCore::AudioNode::deref(v11);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSAudioTrack::prototype(WebCore::JSAudioTrack *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAudioTrack::s_info + ~((_QWORD)&WebCore::JSAudioTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrack::s_info + ~((_QWORD)&WebCore::JSAudioTrack::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAudioTrack::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAudioTrack::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSAudioTrackPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSAudioTrackPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSAudioTrack::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSAudioTrack::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSAudioTrack::destroy(WebCore::JSAudioTrack *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSAudioTrack::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioTrack::JSAudioTrack(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSAudioTrack::createPrototype(WebCore::JSAudioTrack *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSAudioTrackPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSAudioTrackPrototype::create(this, Structure, v5, v6);
}

uint64_t WebCore::JSAudioTrackPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioTrackPrototype::create(WebCore::JSAudioTrackPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  JSC::Structure *v33;
  int v34;
  unint64_t v36;
  WTF::StringImpl *v37[6];
  int v38;
  int v39;
  JSC::Structure *v40;
  int v41;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v36);
    *((_QWORD *)this + 4865) = SlowCase + (int)v36;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSAudioTrack::s_info, (uint64_t)&WebCore::JSAudioTrackPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19485194CLL);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 696);
  if ((v12 & 0x40000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v13 = v37[0];
    v14 = *v10;
    *v10 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v16 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSDOMWindowBase::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSDOMWindowBase::s_info && v19 != 0);
  }
  if (!v18)
    goto LABEL_33;
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19485197CLL);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 688) & 0x400) != 0)
    goto LABEL_36;
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v24 && *(_BYTE *)(v24 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19485199CLL);
  }
  v25 = v24 - 192;
  if (!v24)
    v25 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v25 + 680) + 712) & 0x2000) != 0)
  {
LABEL_36:
    if ((v12 & 0x40000000000000) != 0)
      goto LABEL_39;
  }
  else
  {
LABEL_33:
    WTF::AtomStringImpl::addLiteral();
    v26 = v37[0];
    v27 = *v10;
    *v10 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v27;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v28);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_39:
  v29 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v31 = JSC::JSString::create((uint64_t)this, v37);
  v32 = v37[0];
  v37[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v41 = *(_DWORD *)SlowCase;
  v40 = v33;
  v34 = JSC::Structure::outOfLineCapacity(v33);
  v38 = 0;
  v39 = v34;
  v37[0] = (WTF::StringImpl *)&v39;
  v37[1] = (WTF::StringImpl *)SlowCase;
  v37[2] = this;
  v37[3] = (WTF::StringImpl *)&v41;
  v37[4] = (WTF::StringImpl *)&v40;
  v37[5] = (WTF::StringImpl *)&v38;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v33, this, v29, 6, (uint64_t)v37);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v38, v31);
  *((_DWORD *)v33 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrack>,(WebCore::DOMConstructorID)683>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5464);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrack>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioTrack::s_info + ~((_QWORD)&WebCore::JSAudioTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrack::s_info + ~((_QWORD)&WebCore::JSAudioTrack::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioTrack::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioTrack::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioTrackPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioTrackPrototype::create((WebCore::JSAudioTrackPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioTrack::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioTrack::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5464) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioTrackConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioTrackPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrack>,(WebCore::DOMConstructorID)683>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAudioTrack_id(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 48);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsAudioTrack_kind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsAudioTrack_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsAudioTrack_language(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 24) + 72);
  if (!v2)
    return WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(a1 + 56), 0);
  *(_DWORD *)v2 += 2;
  v4 = WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(a1 + 56), (uint64_t)v2);
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, v3);
  else
    *(_DWORD *)v2 -= 2;
  return v4;
}

uint64_t WebCore::jsAudioTrack_enabled(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 176))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSAudioTrack_enabled(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  _QWORD *v21;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioTrack::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v16 = (_DWORD)a3 == 0;
    goto LABEL_40;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v17 = *(unsigned __int8 *)(a3 + 5);
    if (v17 == 3)
    {
      v20 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v17 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_40;
      }
      v18 = *(_QWORD *)(a3 + 8);
      if ((v18 & 1) != 0)
        v19 = (int *)(a3 + 16);
      else
        v19 = (int *)(v18 + 4);
      v20 = *v19;
    }
    v16 = v20 == 0;
LABEL_40:
    v11 = !v16;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v12 + 176) != v11)
  {
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v12 + 168) + 120))(*(_QWORD *)(v12 + 168), v11);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E33E9F78;
    v13[1] = v12;
    v21 = v13;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v12 + 152), &v21);
    v14 = v21;
    v21 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  return 1;
}

unint64_t WebCore::jsAudioTrack_configuration(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 184);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)v2;
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSAudioTrackConfiguration::s_info
         + ~((_QWORD)&WebCore::JSAudioTrackConfiguration::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrackConfiguration::s_info
                                                                           + ~((_QWORD)&WebCore::JSAudioTrackConfiguration::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSAudioTrackConfiguration::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSAudioTrackConfiguration::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSAudioTrackConfigurationPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSAudioTrackConfigurationPrototype::create((WebCore::JSAudioTrackConfigurationPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSAudioTrackConfiguration::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSAudioTrackConfiguration::s_info);
LABEL_16:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 5552);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 5552))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 5552);
    *(_QWORD *)(v35 + 5552) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 5552);
  *(_QWORD *)(v31 + 5552) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE334BD0 & 1) == 0)
  {
    qword_1EE334BC8 = (uint64_t)&off_1E3222F50;
    byte_1EE334BD0 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334BC8;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

unint64_t WebCore::jsAudioTrack_sourceBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v2)
    return WebCore::wrap<WebCore::SourceBuffer>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSAudioTrack::subspaceForImpl(WebCore::JSAudioTrack *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5544);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 5544))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 5544);
    *(_QWORD *)(v8 + 5544) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 5544);
  *(_QWORD *)(v3 + 5544) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAudioTrackOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsAudioTrack";
    a5[1] = 28;
  }
  v7 = *(_QWORD *)(v6 + 104);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 80);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        v6 = v8;
        if (v10)
          v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 16))(*(_QWORD *)(v10 + 8), v8);
      }
      else
      {
        v6 = v8;
      }
    }
  }
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, (void *)v6);
    v6 = v21;
    if ((_DWORD)result)
    {
LABEL_18:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v13 = v12[1];
    v14 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = v17;
    while (1)
    {
      v19 = *(_QWORD *)&v12[2 * v18 + 4];
      if (!v19)
        return 0;
      if (v6 == v19)
        goto LABEL_18;
      v18 = (v18 + 1) & v13;
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1948529A4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSAudioTrackOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::AudioTrack,WebCore::AudioTrack>(uint64_t a1, JSC::VM *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  WebCore::JSAudioTrack *v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSAudioTrack::s_info + ~((_QWORD)&WebCore::JSAudioTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrack::s_info + ~((_QWORD)&WebCore::JSAudioTrack::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSAudioTrack::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSAudioTrack::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSAudioTrackPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSAudioTrackPrototype::create((WebCore::JSAudioTrackPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSAudioTrack::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSAudioTrack::s_info);
LABEL_8:
  v20 = *(WebCore::JSAudioTrack **)(a1 + 56);
  v21 = (_QWORD *)WebCore::JSAudioTrack::subspaceForImpl(v20, a2);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
  {
LABEL_9:
    v21[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v29);
    v21[5] = SlowCase + (int)v29;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v23 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v23;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v24 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE334BC0 & 1) == 0)
  {
    qword_1EE334BB8 = (uint64_t)&off_1E3222F20;
    byte_1EE334BC0 = 1;
  }
  v31 = v4;
  if ((SlowCase & 8) != 0)
    v25 = (SlowCase - 112) | 1;
  else
    v25 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = v25 + 47;
  else
    v26 = *(_QWORD *)v25 + 32;
  Allocator = *(_QWORD **)(v26 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334BB8;
  Allocator[2] = v24;
  v30 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v24 + 32), &v31, (uint64_t *)&v30);
  if (v30)
    v30[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::AudioTrack>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_DWORD **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_DWORD **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++a3[4];
  v14 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E33E7790)
  {
    v12 = WebCore::createWrapper<WebCore::AudioTrack,WebCore::AudioTrack>(a2, (JSC::VM *)&v14);
    if (v14)
    {
      if (v14[4] == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --v14[4];
    }
    return v12;
  }
  result = 389;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioTrack::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSAudioTrack::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSAudioTrack::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::JSAudioTrackConfiguration::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSAudioTrackConfiguration::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioTrackConfigurationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioTrackConfigurationPrototype::create(WebCore::JSAudioTrackConfigurationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSAudioTrackConfiguration::s_info, &WebCore::JSAudioTrackConfigurationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrackConfiguration>,(WebCore::DOMConstructorID)684>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5472);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrackConfiguration>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioTrackConfiguration::s_info
         + ~((_QWORD)&WebCore::JSAudioTrackConfiguration::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrackConfiguration::s_info
                                                                           + ~((_QWORD)&WebCore::JSAudioTrackConfiguration::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioTrackConfiguration::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioTrackConfiguration::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioTrackConfigurationPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioTrackConfigurationPrototype::create((WebCore::JSAudioTrackConfigurationPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioTrackConfiguration::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioTrackConfiguration::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5472) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioTrackConfigurationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioTrackConfigurationPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrackConfiguration>,(WebCore::DOMConstructorID)684>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAudioTrackConfiguration_codec(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

unint64_t WebCore::jsAudioTrackConfiguration_sampleRate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 16);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsAudioTrackConfiguration_numberOfChannels(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsAudioTrackConfiguration_bitrate(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

uint64_t WebCore::JSAudioTrackConfigurationOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSAudioTrackConfigurationOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSAudioTrackList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSAudioTrackList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194853EC4);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSAudioTrackList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSAudioTrackList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 68) <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 68) <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSAudioTrackList::deletePropertyByIndex(WebCore::JSAudioTrackList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 68) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 68) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 68) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 68) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 68) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 68) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 68) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSAudioTrackList::getOwnPropertySlotByIndex(WebCore::JSAudioTrackList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  _DWORD *v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t result;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v13;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 68) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(_DWORD **)(*(_QWORD *)(v7 + 56) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  if (v8[10] != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1948544ACLL);
  }
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::AudioTrack>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20))
  {
    v13 = v10;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v10 = v13;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSAudioTrackList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 68);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSAudioTrackList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSAudioTrackList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioTrackList::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  JSC::JSObject::visitChildren();
  result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 80);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8));
      v5 = result;
    }
  }
  if (v5)
    v8 = *(_BYTE *)(a2 + 130) == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = *(_QWORD *)(a2 + 120);
    v9 = *(_QWORD *)(result + 48);
    v10 = *(_DWORD *)(v9 + 4);
    v11 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v15 + 16);
      if (!v16)
        break;
      if (v5 == v16)
        return result;
      v15 = (v15 + 1) & v10;
      if (v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x194854BD4);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
  return result;
}

uint64_t WebCore::JSAudioTrackList::visitChildren(WebCore::JSAudioTrackList *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;

  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v19 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194854D7CLL);
  }
  *((_QWORD *)a2 + 11) = v18;
  result = WebCore::JSEventTarget::visitChildren(this, a2, a3);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8));
      v7 = result;
    }
  }
  if (v7 && !*((_BYTE *)a2 + 130))
  {
    result = *((_QWORD *)a2 + 15);
    v10 = *(_QWORD *)(result + 48);
    v11 = *(_DWORD *)(v10 + 4);
    v12 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
      if (!v17)
        break;
      if (v7 == v17)
        goto LABEL_17;
      v16 = (v16 + 1) & v11;
      if (v16 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x194854D20);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_17:
  *(_QWORD *)(v18[0] + 88) = v19;
  return result;
}

uint64_t WebCore::JSAudioTrackListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioTrackListPrototype::create(WebCore::JSAudioTrackListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::Structure *v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  JSC::Structure **v30;
  int *v31;
  int v32;
  int v33;
  JSC::Structure *v34;
  int v35;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v23 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v23);
    *((_QWORD *)this + 4865) = SlowCase + (int)v23;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSAudioTrackList::s_info, &WebCore::JSAudioTrackListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), this)) != 0&& (v26 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v26), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v24 = *(_QWORD *)(v10 + 8) - 8;
      v25 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v24 = v10 + 16;
      v25 = v13 << 32;
    }
    v14 = *(_QWORD *)(v24 + (v25 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v14, 4, (uint64_t)&v26);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v15);
  else
    *(_DWORD *)v11 -= 2;
  v16 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = JSC::JSString::create((uint64_t)this, &v26);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v35 = *(_DWORD *)SlowCase;
  v34 = v20;
  v21 = JSC::Structure::outOfLineCapacity(v20);
  v32 = 0;
  v33 = v21;
  v26 = (WTF::StringImpl *)&v33;
  v27 = SlowCase;
  v28 = (uint64_t)this;
  v29 = &v35;
  v30 = &v34;
  v31 = &v32;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v20, this, v16, 6, (uint64_t)&v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v32, v18);
  *((_DWORD *)v20 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrackList>,(WebCore::DOMConstructorID)685>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5480);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrackList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAudioTrackList::s_info + ~((_QWORD)&WebCore::JSAudioTrackList::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrackList::s_info + ~((_QWORD)&WebCore::JSAudioTrackList::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAudioTrackList::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAudioTrackList::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAudioTrackListPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSAudioTrackListPrototype::create((WebCore::JSAudioTrackListPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSAudioTrackList::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSAudioTrackList::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5480) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

uint64_t WebCore::JSAudioTrackList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) != 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v38 = v10 - 1;
      v39 = v9 + 1;
      while (v38)
      {
        if (v11 <= 0x19999999)
        {
          v40 = *v39 - 48;
          if (v40 <= 9)
          {
            v24 = __CFADD__(v40, 10 * v11);
            v11 = v40 + 10 * v11;
            --v38;
            ++v39;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *(unsigned __int16 *)v9 - 48;
      if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
        goto LABEL_8;
      v21 = (unsigned __int16 *)(v9 + 2);
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v11 != -1)
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v41 + 68) > v11)
      {
        v42 = *(_DWORD **)(*(_QWORD *)(v41 + 56) + 8 * v11);
        if (v42)
        {
          if (v42[10] != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x194855990);
          }
          v43 = WebCore::wrap<WebCore::AudioTrack>(a2, *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v42);
          if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
          {
            *(_QWORD *)a4 = v43;
            *(_DWORD *)(a4 + 16) = 2;
            *(_QWORD *)(a4 + 32) = a1;
            result = 1;
            *(_BYTE *)(a4 + 49) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v49 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v49), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v44 = *v16 - 48;
        if (v44 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_82:
          v45 = 0;
        }
        else
        {
          v46 = v16 + 1;
          v47 = v17 - 1;
          while (v47)
          {
            if (v44 > 0x19999999)
              goto LABEL_82;
            v48 = *v46 - 48;
            if (v48 > 9)
              goto LABEL_82;
            v45 = 0;
            v24 = __CFADD__(v48, 10 * v44);
            v44 = v48 + 10 * v44;
            ++v46;
            --v47;
            if (v24)
              goto LABEL_83;
          }
          v45 = 0x100000000;
          if (v44 == -1)
            v45 = 0;
        }
      }
      else
      {
        v45 = 0;
      }
LABEL_83:
      if ((v45 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsAudioTrackListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioTrackListPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioTrackList>,(WebCore::DOMConstructorID)685>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioTrackList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 68);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsAudioTrackList_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSAudioTrackList_onchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSAudioTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSAudioTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 368), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsAudioTrackList_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSAudioTrackList_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSAudioTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSAudioTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 104), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsAudioTrackList_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1680), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSAudioTrackList_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSAudioTrackList::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSAudioTrackList::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1680), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSAudioTrackListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ConcurrentPtrHashSet *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0 || *(_BYTE *)(v10 + 180))
  {
    if (!a5)
      goto LABEL_5;
LABEL_20:
    *a5 = "Reachable from jsAudioTrackList";
    a5[1] = 32;
    goto LABEL_5;
  }
  if (*(_QWORD *)(v8 + 48) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 32) + 64))(v8 + 32) & 1) != 0)
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  v8 = *(_QWORD *)(v7 + 24);
  if (a5)
    goto LABEL_20;
LABEL_5:
  v11 = *(_QWORD *)(v8 + 80);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8));
  }
  v13 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v14 = (_DWORD *)*((_QWORD *)v13 + 6);
  if ((_DWORD *)((char *)v13 + 56) == v14)
  {
    v23 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v13, (void *)v8);
    v8 = v23;
    if (!(_DWORD)result)
      return result;
LABEL_22:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v15 = v14[1];
  v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = v19;
  while (1)
  {
    v21 = *(_QWORD *)&v14[2 * v20 + 4];
    if (!v21)
      return 0;
    if (v8 == v21)
      goto LABEL_22;
    v20 = (v20 + 1) & v15;
    if (v20 == v19)
    {
      __break(0xC471u);
      JUMPOUT(0x194856284);
    }
  }
}

uint64_t WebCore::JSAudioTrackListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::AudioTrackList>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::AudioTrackList *__hidden))a3 != off_1E33EA040)
  {
    __break(0xC471u);
    JUMPOUT(0x194856980);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSAudioTrackList::s_info + ~((_QWORD)&WebCore::JSAudioTrackList::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioTrackList::s_info + ~((_QWORD)&WebCore::JSAudioTrackList::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSAudioTrackList::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSAudioTrackList::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSAudioTrackListPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSAudioTrackListPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSAudioTrackList::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSAudioTrackList::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 5560);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 5560);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 5560);
    *(_QWORD *)(v30 + 5560) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 5560);
  *(_QWORD *)(v26 + 5560) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE334BE0 & 1) == 0)
  {
    qword_1EE334BD8 = (uint64_t)&off_1E3222F80;
    byte_1EE334BE0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE334BD8;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE334BD8;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSAudioWorklet::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSWorklet::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSWorklet::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSWorklet::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioWorkletPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioWorkletPrototype::create(WebCore::JSAudioWorkletPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSAudioWorklet::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSAudioWorkletPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorklet>,(WebCore::DOMConstructorID)242>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1936);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWorklet>,(WebCore::DOMConstructorID)918>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorklet>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAudioWorklet::s_info + ~((_QWORD)&WebCore::JSAudioWorklet::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorklet::s_info + ~((_QWORD)&WebCore::JSAudioWorklet::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAudioWorklet::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAudioWorklet::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSWorklet::prototype((WebCore::JSWorklet *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAudioWorkletPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSAudioWorkletPrototype::create((WebCore::JSAudioWorkletPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSAudioWorklet::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSAudioWorklet::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1936) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioWorkletConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioWorkletPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorklet>,(WebCore::DOMConstructorID)242>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSAudioWorkletOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSAudioWorkletOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 32;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::AudioWorklet>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSWorklet *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  _QWORD *v59;
  WTF *v60;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v50 = *(_QWORD *)(v5 + 32);
    if (!v50)
      goto LABEL_5;
    v51 = *(_DWORD *)(v50 - 8);
    v52 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
    v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
    v55 = v51 & ((v54 >> 31) ^ v54);
    v56 = *(_QWORD *)(v50 + 16 * v55);
    if (v56 != a3)
    {
      v57 = 1;
      while (v56)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(_QWORD *)(v50 + 16 * v55);
        ++v57;
        if (v56 == a3)
          goto LABEL_63;
      }
      goto LABEL_5;
    }
LABEL_63:
    v6 = *(_QWORD *)(v50 + 16 * v55 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 32);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3369550)
  {
    __break(0xC471u);
    JUMPOUT(0x1948579D0);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSAudioWorklet::s_info + ~((_QWORD)&WebCore::JSAudioWorklet::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorklet::s_info + ~((_QWORD)&WebCore::JSAudioWorklet::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSAudioWorklet::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSAudioWorklet::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSWorklet *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSWorklet::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSAudioWorkletPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSAudioWorkletPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSAudioWorklet::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSAudioWorklet::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1960);
  if (v27)
    goto LABEL_33;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 1960))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v60, "IsoSpace T");
    v59 = 0;
    MEMORY[0x19AEA3204](v31, &v60, v24 + 192, v24 + 1872, 32, 8, &v59);
    v33 = (uint64_t)v59;
    v59 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v60;
    v60 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 1960);
    *(_QWORD *)(v30 + 1960) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v26 + 1960);
  *(_QWORD *)(v26 + 1960) = v27;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528](v37, v36);
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v28);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_33:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_34:
    v27[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v58 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v58);
    v27[5] = SlowCase + (int)v58;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v41 = *((_QWORD *)a2 + 415);
  if ((byte_1EE334BF0 & 1) == 0)
  {
    qword_1EE334BE8 = (uint64_t)&off_1E3222FB0;
    byte_1EE334BF0 = 1;
  }
  if (!*(_DWORD *)(v41 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE334BE8;
    Allocator[2] = v41;
    v45 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = Allocator;
    if (!v45)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v60 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &qword_1EE334BE8;
  v49[2] = v41;
  v59 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v41 + 32), (uint64_t *)&v60, (uint64_t *)&v59);
  v45 = (uint64_t)v59;
  if (v59)
    goto LABEL_57;
  return SlowCase;
}

uint64_t WebCore::JSAudioWorkletGlobalScope::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 11);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return (uint64_t)WebCore::AudioWorkletGlobalScope::visitProcessors(*(uint64_t **)(a1 + 3400), a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::JSAudioWorkletGlobalScope::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  return WebCore::AudioWorkletGlobalScope::visitProcessors(*(uint64_t **)(a1 + 3400), a2);
}

uint64_t WebCore::JSAudioWorkletGlobalScopePrototype::finishCreation(WebCore::JSAudioWorkletGlobalScopePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSC::Structure *v8;
  int v9;
  uint64_t result;
  WTF::StringImpl *v11[6];
  int v12;
  int v13;
  JSC::Structure *v14;
  int v15;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = JSC::JSString::create((uint64_t)a2, v11);
  v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v15 = *(_DWORD *)this;
  v14 = (JSC::Structure *)(16 * (v15 & 0xFFFFFFFE));
  v9 = JSC::Structure::outOfLineCapacity(v14);
  v12 = 0;
  v13 = v9;
  v11[0] = (WTF::StringImpl *)&v13;
  v11[1] = this;
  v11[2] = a2;
  v11[3] = (WTF::StringImpl *)&v15;
  v11[4] = (WTF::StringImpl *)&v14;
  v11[5] = (WTF::StringImpl *)&v12;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v8, a2, v4, 6, (uint64_t)v11);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  result = JSC::JSObject::putDirectOffset((uint64_t)this, (uint64_t)a2, v12, v6);
  *((_DWORD *)v8 + 4) |= 0x10u;
  return result;
}

uint64_t WebCore::JSAudioWorkletGlobalScope::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 3400));
  v4 = *(_QWORD *)(a1 + 3400);
  if (!v4)
    return WebCore::JSWorkletGlobalScope::analyzeHeap(a1, a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSWorkletGlobalScope::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSWorkletGlobalScope::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::JSAudioWorkletGlobalScope::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  WebCore::JSWorkletGlobalScopeBase::visitChildren(a1, (uint64_t)a2);
  return WebCore::AudioWorkletGlobalScope::visitProcessors(*(uint64_t **)(a1 + 3400), a2);
}

uint64_t WebCore::JSAudioWorkletGlobalScope::visitChildren(uint64_t **this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    WebCore::JSDOMGlobalObject::visitChildren((WebCore::JSDOMGlobalObject *)this, a2, a3);
    (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 24))(a2, this[417]);
    *(_QWORD *)(v10[0] + 88) = v11;
    result = (uint64_t)WebCore::AudioWorkletGlobalScope::visitProcessors(this[425], a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSAudioWorkletGlobalScope::finishCreation(WebCore::JSAudioWorkletGlobalScope *this, JSC::VM *a2, JSC::JSGlobalProxy *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t SlowCase;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;

  v5 = (uint64_t *)((char *)a2 + 37936);
  *((_QWORD *)this + 417) = a3;
  if (this && a3 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)this);
    a3 = (JSC::JSGlobalProxy *)*((_QWORD *)this + 417);
  }
  WebCore::JSDOMGlobalObject::finishCreation(this, a2, a3);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6) + 432) & 0x80000000000000) != 0)
  {
    SlowCase = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      SlowCase = v5[2];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_6;
      }
      v75 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
      v5[1] = SlowCase + HIDWORD(v75);
      v5[2] = SlowCase + (int)v75;
    }
    *v5 = SlowCase + 32;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v8 = v5[450];
    v9 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)SlowCase = v8 >> 4;
    *(_DWORD *)(SlowCase + 4) = v9;
    *(_QWORD *)(SlowCase + 8) = WebCore::jsAudioWorkletGlobalScope_CompressionStreamConstructor;
    *(_QWORD *)(SlowCase + 16) = 0;
    if (*((_BYTE *)a2 + 755))
      __dmb(0xAu);
    JSC::JSObject::putDirectCustomAccessor();
  }
  v10 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10) + 432) & 0x80000000000000) == 0)
    goto LABEL_15;
  v11 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v11 = v5[2];
    if ((v11 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v11 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v76 = *(_QWORD *)(v11 + 8) ^ v5[3];
    v5[1] = v11 + HIDWORD(v76);
    v5[2] = v11 + (int)v76;
  }
  *v5 = v11 + 32;
LABEL_12:
  *(_DWORD *)v11 = 0;
  v12 = v5[450];
  v13 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v11 = v12 >> 4;
  *(_DWORD *)(v11 + 4) = v13;
  *(_QWORD *)(v11 + 8) = WebCore::jsAudioWorkletGlobalScope_CompressionStreamEncoderConstructor;
  *(_QWORD *)(v11 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_15:
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136))(v14) + 432) & 0x80000000000000) == 0)
    goto LABEL_21;
  v15 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v15 = v5[2];
    if ((v15 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v15 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v77 = *(_QWORD *)(v15 + 8) ^ v5[3];
    v5[1] = v15 + HIDWORD(v77);
    v5[2] = v15 + (int)v77;
  }
  *v5 = v15 + 32;
LABEL_18:
  *(_DWORD *)v15 = 0;
  v16 = v5[450];
  v17 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)v15 = v16 >> 4;
  *(_DWORD *)(v15 + 4) = v17;
  *(_QWORD *)(v15 + 8) = WebCore::jsAudioWorkletGlobalScope_DecompressionStreamConstructor;
  *(_QWORD *)(v15 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_21:
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 136))(v18) + 432) & 0x80000000000000) == 0)
    goto LABEL_27;
  v19 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v19 = v5[2];
    if ((v19 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v19 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_24;
    }
    v78 = *(_QWORD *)(v19 + 8) ^ v5[3];
    v5[1] = v19 + HIDWORD(v78);
    v5[2] = v19 + (int)v78;
  }
  *v5 = v19 + 32;
LABEL_24:
  *(_DWORD *)v19 = 0;
  v20 = v5[450];
  v21 = *(_DWORD *)(v20 + 8);
  *(_DWORD *)v19 = v20 >> 4;
  *(_DWORD *)(v19 + 4) = v21;
  *(_QWORD *)(v19 + 8) = WebCore::jsAudioWorkletGlobalScope_DecompressionStreamDecoderConstructor;
  *(_QWORD *)(v19 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_27:
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if ((*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 136))(v22) + 488) & 0x20) == 0)
    goto LABEL_33;
  v23 = *v5;
  if (*v5 >= (unint64_t)v5[1])
  {
    v23 = v5[2];
    if ((v23 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v23 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_30;
    }
    v79 = *(_QWORD *)(v23 + 8) ^ v5[3];
    v5[1] = v23 + HIDWORD(v79);
    v5[2] = v23 + (int)v79;
  }
  *v5 = v23 + 32;
LABEL_30:
  *(_DWORD *)v23 = 0;
  v24 = v5[450];
  v25 = *(_DWORD *)(v24 + 8);
  *(_DWORD *)v23 = v24 >> 4;
  *(_DWORD *)(v23 + 4) = v25;
  *(_QWORD *)(v23 + 8) = WebCore::jsAudioWorkletGlobalScope_AudioWorkletProcessorConstructor;
  *(_QWORD *)(v23 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
LABEL_33:
  v26 = *v5;
  if (*v5 < (unint64_t)v5[1])
  {
LABEL_34:
    *v5 = v26 + 32;
    goto LABEL_35;
  }
  v26 = v5[2];
  if ((v26 & 1) == 0)
  {
    v63 = *(_QWORD *)(v26 + 8) ^ v5[3];
    v5[1] = v26 + HIDWORD(v63);
    v5[2] = v26 + (int)v63;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  v26 = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)v26 = 0;
  v27 = v5[450];
  v28 = *(_DWORD *)(v27 + 8);
  *(_DWORD *)v26 = v27 >> 4;
  *(_DWORD *)(v26 + 4) = v28;
  *(_QWORD *)(v26 + 8) = WebCore::jsAudioWorkletGlobalScope_ReadableByteStreamControllerConstructor;
  *(_QWORD *)(v26 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v29 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_38;
  v29 = v5[2];
  if ((v29 & 1) == 0)
  {
    v64 = *(_QWORD *)(v29 + 8) ^ v5[3];
    v5[1] = v29 + HIDWORD(v64);
    v5[2] = v29 + (int)v64;
LABEL_38:
    *v5 = v29 + 32;
    goto LABEL_39;
  }
  JSC::sanitizeStackForVM();
  v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_39:
  *(_DWORD *)v29 = 0;
  v30 = v5[450];
  v31 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)v29 = v30 >> 4;
  *(_DWORD *)(v29 + 4) = v31;
  *(_QWORD *)(v29 + 8) = WebCore::jsAudioWorkletGlobalScope_ReadableStreamConstructor;
  *(_QWORD *)(v29 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v32 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_42;
  v32 = v5[2];
  if ((v32 & 1) == 0)
  {
    v65 = *(_QWORD *)(v32 + 8) ^ v5[3];
    v5[1] = v32 + HIDWORD(v65);
    v5[2] = v32 + (int)v65;
LABEL_42:
    *v5 = v32 + 32;
    goto LABEL_43;
  }
  JSC::sanitizeStackForVM();
  v32 = JSC::LocalAllocator::allocateSlowCase();
LABEL_43:
  *(_DWORD *)v32 = 0;
  v33 = v5[450];
  v34 = *(_DWORD *)(v33 + 8);
  *(_DWORD *)v32 = v33 >> 4;
  *(_DWORD *)(v32 + 4) = v34;
  *(_QWORD *)(v32 + 8) = WebCore::jsAudioWorkletGlobalScope_ReadableStreamBYOBReaderConstructor;
  *(_QWORD *)(v32 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v35 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_46;
  v35 = v5[2];
  if ((v35 & 1) == 0)
  {
    v66 = *(_QWORD *)(v35 + 8) ^ v5[3];
    v5[1] = v35 + HIDWORD(v66);
    v5[2] = v35 + (int)v66;
LABEL_46:
    *v5 = v35 + 32;
    goto LABEL_47;
  }
  JSC::sanitizeStackForVM();
  v35 = JSC::LocalAllocator::allocateSlowCase();
LABEL_47:
  *(_DWORD *)v35 = 0;
  v36 = v5[450];
  v37 = *(_DWORD *)(v36 + 8);
  *(_DWORD *)v35 = v36 >> 4;
  *(_DWORD *)(v35 + 4) = v37;
  *(_QWORD *)(v35 + 8) = WebCore::jsAudioWorkletGlobalScope_ReadableStreamBYOBRequestConstructor;
  *(_QWORD *)(v35 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v38 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_50;
  v38 = v5[2];
  if ((v38 & 1) == 0)
  {
    v67 = *(_QWORD *)(v38 + 8) ^ v5[3];
    v5[1] = v38 + HIDWORD(v67);
    v5[2] = v38 + (int)v67;
LABEL_50:
    *v5 = v38 + 32;
    goto LABEL_51;
  }
  JSC::sanitizeStackForVM();
  v38 = JSC::LocalAllocator::allocateSlowCase();
LABEL_51:
  *(_DWORD *)v38 = 0;
  v39 = v5[450];
  v40 = *(_DWORD *)(v39 + 8);
  *(_DWORD *)v38 = v39 >> 4;
  *(_DWORD *)(v38 + 4) = v40;
  *(_QWORD *)(v38 + 8) = WebCore::jsAudioWorkletGlobalScope_ReadableStreamDefaultControllerConstructor;
  *(_QWORD *)(v38 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v41 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_54;
  v41 = v5[2];
  if ((v41 & 1) == 0)
  {
    v68 = *(_QWORD *)(v41 + 8) ^ v5[3];
    v5[1] = v41 + HIDWORD(v68);
    v5[2] = v41 + (int)v68;
LABEL_54:
    *v5 = v41 + 32;
    goto LABEL_55;
  }
  JSC::sanitizeStackForVM();
  v41 = JSC::LocalAllocator::allocateSlowCase();
LABEL_55:
  *(_DWORD *)v41 = 0;
  v42 = v5[450];
  v43 = *(_DWORD *)(v42 + 8);
  *(_DWORD *)v41 = v42 >> 4;
  *(_DWORD *)(v41 + 4) = v43;
  *(_QWORD *)(v41 + 8) = WebCore::jsAudioWorkletGlobalScope_ReadableStreamDefaultReaderConstructor;
  *(_QWORD *)(v41 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v44 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_58;
  v44 = v5[2];
  if ((v44 & 1) == 0)
  {
    v69 = *(_QWORD *)(v44 + 8) ^ v5[3];
    v5[1] = v44 + HIDWORD(v69);
    v5[2] = v44 + (int)v69;
LABEL_58:
    *v5 = v44 + 32;
    goto LABEL_59;
  }
  JSC::sanitizeStackForVM();
  v44 = JSC::LocalAllocator::allocateSlowCase();
LABEL_59:
  *(_DWORD *)v44 = 0;
  v45 = v5[450];
  v46 = *(_DWORD *)(v45 + 8);
  *(_DWORD *)v44 = v45 >> 4;
  *(_DWORD *)(v44 + 4) = v46;
  *(_QWORD *)(v44 + 8) = WebCore::jsAudioWorkletGlobalScope_TransformStreamConstructor;
  *(_QWORD *)(v44 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v47 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_62;
  v47 = v5[2];
  if ((v47 & 1) == 0)
  {
    v70 = *(_QWORD *)(v47 + 8) ^ v5[3];
    v5[1] = v47 + HIDWORD(v70);
    v5[2] = v47 + (int)v70;
LABEL_62:
    *v5 = v47 + 32;
    goto LABEL_63;
  }
  JSC::sanitizeStackForVM();
  v47 = JSC::LocalAllocator::allocateSlowCase();
LABEL_63:
  *(_DWORD *)v47 = 0;
  v48 = v5[450];
  v49 = *(_DWORD *)(v48 + 8);
  *(_DWORD *)v47 = v48 >> 4;
  *(_DWORD *)(v47 + 4) = v49;
  *(_QWORD *)(v47 + 8) = WebCore::jsAudioWorkletGlobalScope_TransformStreamDefaultControllerConstructor;
  *(_QWORD *)(v47 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v50 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_66;
  v50 = v5[2];
  if ((v50 & 1) == 0)
  {
    v71 = *(_QWORD *)(v50 + 8) ^ v5[3];
    v5[1] = v50 + HIDWORD(v71);
    v5[2] = v50 + (int)v71;
LABEL_66:
    *v5 = v50 + 32;
    goto LABEL_67;
  }
  JSC::sanitizeStackForVM();
  v50 = JSC::LocalAllocator::allocateSlowCase();
LABEL_67:
  *(_DWORD *)v50 = 0;
  v51 = v5[450];
  v52 = *(_DWORD *)(v51 + 8);
  *(_DWORD *)v50 = v51 >> 4;
  *(_DWORD *)(v50 + 4) = v52;
  *(_QWORD *)(v50 + 8) = WebCore::jsAudioWorkletGlobalScope_WritableStreamConstructor;
  *(_QWORD *)(v50 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v53 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_70;
  v53 = v5[2];
  if ((v53 & 1) == 0)
  {
    v72 = *(_QWORD *)(v53 + 8) ^ v5[3];
    v5[1] = v53 + HIDWORD(v72);
    v5[2] = v53 + (int)v72;
LABEL_70:
    *v5 = v53 + 32;
    goto LABEL_71;
  }
  JSC::sanitizeStackForVM();
  v53 = JSC::LocalAllocator::allocateSlowCase();
LABEL_71:
  *(_DWORD *)v53 = 0;
  v54 = v5[450];
  v55 = *(_DWORD *)(v54 + 8);
  *(_DWORD *)v53 = v54 >> 4;
  *(_DWORD *)(v53 + 4) = v55;
  *(_QWORD *)(v53 + 8) = WebCore::jsAudioWorkletGlobalScope_WritableStreamDefaultControllerConstructor;
  *(_QWORD *)(v53 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v56 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_74;
  v56 = v5[2];
  if ((v56 & 1) == 0)
  {
    v73 = *(_QWORD *)(v56 + 8) ^ v5[3];
    v5[1] = v56 + HIDWORD(v73);
    v5[2] = v56 + (int)v73;
LABEL_74:
    *v5 = v56 + 32;
    goto LABEL_75;
  }
  JSC::sanitizeStackForVM();
  v56 = JSC::LocalAllocator::allocateSlowCase();
LABEL_75:
  *(_DWORD *)v56 = 0;
  v57 = v5[450];
  v58 = *(_DWORD *)(v57 + 8);
  *(_DWORD *)v56 = v57 >> 4;
  *(_DWORD *)(v56 + 4) = v58;
  *(_QWORD *)(v56 + 8) = WebCore::jsAudioWorkletGlobalScope_WritableStreamDefaultWriterConstructor;
  *(_QWORD *)(v56 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectCustomAccessor();
  v59 = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_78;
  v59 = v5[2];
  if ((v59 & 1) == 0)
  {
    v74 = *(_QWORD *)(v59 + 8) ^ v5[3];
    v5[1] = v59 + HIDWORD(v74);
    v5[2] = v59 + (int)v74;
LABEL_78:
    *v5 = v59 + 32;
    goto LABEL_79;
  }
  JSC::sanitizeStackForVM();
  v59 = JSC::LocalAllocator::allocateSlowCase();
LABEL_79:
  *(_DWORD *)v59 = 0;
  v60 = v5[450];
  v61 = *(_DWORD *)(v60 + 8);
  *(_DWORD *)v59 = v60 >> 4;
  *(_DWORD *)(v59 + 4) = v61;
  *(_QWORD *)(v59 + 8) = WebCore::jsAudioWorkletGlobalScope_AbortSignalConstructor;
  *(_QWORD *)(v59 + 16) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return JSC::JSObject::putDirectCustomAccessor();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_CompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 512) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_CompressionStreamEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSCompressionStreamEncoder>,(WebCore::DOMConstructorID)65>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_DecompressionStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSDecompressionStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 528) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_DecompressionStreamDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDecompressionStreamDecoder>,(WebCore::DOMConstructorID)67>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_AudioWorkletProcessorConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioWorkletProcessor>,(WebCore::DOMConstructorID)245>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioWorkletProcessor>,(WebCore::DOMConstructorID)245>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ReadableByteStreamControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1720) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ReadableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ReadableStreamBYOBReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1736) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ReadableStreamBYOBRequestConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1744) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ReadableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1752) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ReadableStreamDefaultReaderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1760) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_TransformStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTransformStream>,(WebCore::DOMConstructorID)223>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_TransformStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTransformStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1792) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_WritableStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWritableStream>,(WebCore::DOMConstructorID)225>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_WritableStreamDefaultControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultController>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1808) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_WritableStreamDefaultWriterConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSWritableStreamDefaultWriter>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1816) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_AbortSignalConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbortSignal>,(WebCore::DOMConstructorID)412>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorkletGlobalScope>,(WebCore::DOMConstructorID)243>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1944);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWorkletGlobalScope>,(WebCore::DOMConstructorID)919>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorkletGlobalScope>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!v17)
    v17 = *(_QWORD *)(a2 + 16);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1944) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioWorkletGlobalScopeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioWorkletGlobalScopePrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorkletGlobalScope>,(WebCore::DOMConstructorID)243>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioWorkletGlobalScope_currentFrame(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  double v15;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v10 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSAudioWorkletGlobalScope::s_info && v12 != 0);
    }
    if (v11)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  Object = *(_QWORD *)(Object + 16);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSAudioWorkletGlobalScope::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v8 = *(_QWORD *)(*(_QWORD *)(Object + 3400) + 1048);
  if (HIDWORD(v8))
  {
    v15 = (double)v8;
  }
  else
  {
    if ((v8 & 0x80000000) == 0)
      return v8 | 0xFFFE000000000000;
    v15 = (double)v8;
  }
  return *(_QWORD *)&v15 + 0x2000000000000;
}

unint64_t WebCore::jsAudioWorkletGlobalScope_currentTime(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  float v9;
  double v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  Object = *(_QWORD *)(Object + 16);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSAudioWorkletGlobalScope::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v8 = *(_QWORD *)(Object + 3400);
  v9 = *(float *)(v8 + 1056);
  v10 = 0.0;
  if (v9 > 0.0)
    v10 = (double)*(unint64_t *)(v8 + 1048) / v9;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v11 = (int)v10, v10 == (double)(int)v11)
    && ((_DWORD)v11 || (*(_QWORD *)&v10 & 0x8000000000000000) == 0))
  {
    return v11 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v10 + 0x2000000000000;
  }
}

unint64_t WebCore::jsAudioWorkletGlobalScope_sampleRate(JSC::JSCell *a1, JSC::JSCell *a2)
{
  uint64_t Object;
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  float v8;
  double v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;

  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v12 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSAudioWorkletGlobalScope::s_info && v14 != 0);
    }
    if (v13)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  Object = *(_QWORD *)(Object + 16);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSAudioWorkletGlobalScope::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v8 = *(float *)(*(_QWORD *)(Object + 3400) + 1056);
  v9 = v8;
  if (COERCE__INT64(fabs(v8)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v8, (double)(int)v10 == v9)
    && ((_DWORD)v10 || (LODWORD(v8) & 0x80000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v9 + 0x2000000000000;
  }
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ByteLengthQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSByteLengthQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1704) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_CountQueuingStrategyConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSCountQueuingStrategy>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 1712) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_AudioWorkletGlobalScopeConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorkletGlobalScope>,(WebCore::DOMConstructorID)243>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioWorkletGlobalScope>,(WebCore::DOMConstructorID)243>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_AbortControllerConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAbortController>,(WebCore::DOMConstructorID)411>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_CustomEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Structure;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSAudioWorkletGlobalScope::s_info && v16 != 0);
    }
    if (v15)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    v12 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(v11, v4);
    Structure = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::createStructure((uint64_t *)v11, v4, v12);
    v10 = WebCore::JSDOMConstructor<WebCore::JSCustomEvent>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3392) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_ErrorEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSErrorEvent>,(WebCore::DOMConstructorID)447>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_EventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_EventTargetConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_MessageEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMessageEvent>,(WebCore::DOMConstructorID)459>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMessageEvent>,(WebCore::DOMConstructorID)459>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_MessagePortConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMessagePort>,(WebCore::DOMConstructorID)460>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMessagePort>,(WebCore::DOMConstructorID)460>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PromiseRejectionEventConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>,(WebCore::DOMConstructorID)476>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_TextDecoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextDecoder>,(WebCore::DOMConstructorID)482>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_TextDecoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextDecoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_TextEncoderConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTextEncoder>,(WebCore::DOMConstructorID)485>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_TextEncoderStreamConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMBuiltinConstructor<WebCore::JSTextEncoderStream>::create(v11, Structure, v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 3888) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_URLConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMURL>,(WebCore::DOMConstructorID)507>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_URLSearchParamsConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSURLSearchParams>,(WebCore::DOMConstructorID)598>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformance>,(WebCore::DOMConstructorID)727>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceEntryConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceEntry>,(WebCore::DOMConstructorID)728>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceMarkConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPerformanceMark>,(WebCore::DOMConstructorID)729>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceMeasureConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceMeasure>,(WebCore::DOMConstructorID)730>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceObserverConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  Object = JSC::JSCell::getObject(a1);
  if (!Object)
    return JSC::throwDOMAttributeGetterTypeError();
  v4 = Object;
  if (*(_BYTE *)(Object + 5) != 32)
  {
    v13 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSAudioWorkletGlobalScope::s_info && v15 != 0);
    }
    if (v14)
      goto LABEL_16;
    return JSC::throwDOMAttributeGetterTypeError();
  }
  v4 = *(_QWORD *)(Object + 16);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864);
  if (!v10)
  {
    v11 = *((_QWORD *)v2 + 7);
    Structure = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::createStructure((uint64_t *)v11, v4, *(JSC::JSCell **)(v4 + 664));
    v10 = WebCore::JSDOMConstructor<WebCore::JSPerformanceObserver>::create(v11, Structure, (JSC::VM *)v4);
    *(_QWORD *)(*(_QWORD *)(v4 + 3312) + 5864) = v10;
    if (v10)
    {
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v4 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)v4);
    }
  }
  return v10;
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceObserverEntryListConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceObserverEntryList>,(WebCore::DOMConstructorID)734>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceResourceTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceResourceTiming>,(WebCore::DOMConstructorID)736>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::jsAudioWorkletGlobalScope_PerformanceServerTimingConstructor(JSC::JSCell *a1, JSC::JSCell *a2)
{
  JSC::JSCell *v2;
  uint64_t Object;
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;

  v2 = a1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2)
    a1 = a2;
  if (((unint64_t)a1 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(a1);
    if (Object)
    {
      v4 = (_DWORD *)Object;
      if (*(_BYTE *)(Object + 5) == 32)
      {
        v4 = *(_DWORD **)(Object + 16);
        v5 = *(unsigned int *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C);
        v6 = *(_DWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x4C) != 0;
        v7 = (char **)(16 * v5);
        if ((_DWORD)v5)
          v8 = v7 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v8 = 1;
        if (!v8)
        {
          do
          {
            v7 = (char **)v7[2];
            v6 = v7 != 0;
          }
          while (v7 != &WebCore::JSAudioWorkletGlobalScope::s_info && v7 != 0);
        }
        if (v6)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
      else
      {
        v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
        v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
        v13 = (char **)(16 * v11);
        if ((_DWORD)v11)
          v14 = v13 == &WebCore::JSAudioWorkletGlobalScope::s_info;
        else
          v14 = 1;
        if (!v14)
        {
          do
          {
            v13 = (char **)v13[2];
            v12 = v13 != 0;
          }
          while (v13 != &WebCore::JSAudioWorkletGlobalScope::s_info && v13 != 0);
        }
        if (v12)
          return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPerformanceServerTiming>,(WebCore::DOMConstructorID)737>(*((_QWORD *)v2 + 7), (uint64_t)v4);
      }
    }
  }
  return JSC::throwDOMAttributeGetterTypeError();
}

uint64_t WebCore::JSAudioWorkletGlobalScope::subspaceForImpl(WebCore::JSAudioWorkletGlobalScope *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1968);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1968);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, v6 + 296, 3408, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1968);
    *(_QWORD *)(v8 + 1968) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1968);
  *(_QWORD *)(v3 + 1968) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSAudioWorkletNode>::construct(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSC::JSCell *v26;
  JSC::VM *v27;
  uint64_t Object;
  JSC::Structure *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  char v32;
  unsigned __int8 v33;
  char v34;
  unsigned __int8 v35;
  char v36;
  unsigned __int8 v37;
  int v38;
  WTF *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  JSC::HandleSet *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  JSC::JSGlobalObject *v61;
  WTF::StringImpl *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  WTF::StringImpl *v72;
  WebCore::JSDOMGlobalObject *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF *v81;
  WTF *v82;
  WTF::StringImpl *v83;
  JSC::VM *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char **v92;
  int v93;
  unint64_t v94;
  WebCore::JSAudioNode *v95;
  JSC::JSCell *v96;
  unint64_t Structure;
  JSC::Structure *v98;
  JSC::JSCell *v99;
  uint64_t v100;
  WebCore::AudioNode *v101;
  JSC::JSCell *v102;
  JSC::JSGlobalObject *v103;
  JSC::JSObject *v104;
  JSC::JSGlobalObject *v105;
  JSC::VM *v106;
  JSC::JSObject *v107;
  JSC::Structure *v108;
  JSC::VM *FunctionRealm;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char **v116;
  int v117;
  JSC::JSCell *v118;
  unint64_t v119;
  JSC::Structure *v120;
  JSC::JSCell *v121;
  uint64_t v122;
  unint64_t SubclassStructure;
  uint64_t v124;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  unsigned int v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  uint64_t v143;
  JSC::Structure *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  unsigned int v148;
  WTF::StringImpl *v149;
  unsigned int v150;
  WTF::StringImpl *v151;
  int v152;
  int v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  unsigned __int8 *v159;
  JSC::VM *v160;
  JSC::VM *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  int v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  char *v169;
  JSC::VM *v170;
  double v171;
  int v172;
  uint64_t *v173;
  _QWORD *v174;
  uint64_t v175;
  double *v176;
  WTF::StringImpl *v177;
  int v178;
  uint64_t v179;
  char v180;
  int v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF *v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  JSC::HandleSet *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl **v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  WTF *v206;
  JSValue v208;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  JSValue v212;
  _QWORD *v213;
  uint64_t v214;
  int v215;
  int v216;
  JSC::VM *v217;
  uint64_t v218;
  char v219;
  JSC::VM *v220;
  uint64_t v221;
  char v222;
  int v223;
  void *v224;
  WTF::StringImpl *v225;
  int v226;
  unsigned int v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  double v231;
  JSC::VM *v232;
  JSC::VM *v233;
  int v234;
  unsigned int v235;
  int v236;
  char v237;
  char v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 v241;
  unsigned __int8 v242;
  uint64_t v243;
  unsigned int v244;
  JSC::Structure *v245;
  int v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  WTF *v249;
  WTF *v250;
  JSC::VM *v251;
  WTF::StringImpl *v252;
  int v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  __int16 v259;
  char v260;
  __int16 v261;
  char v262;
  __int16 v263;
  char v264;
  JSC::VM *v265;
  WTF::StringImpl *v266[2];
  WTF::StringImpl *v267[2];
  unint64_t v268;
  unsigned __int8 *v269;
  WTF *v270;
  WTF::StringImpl *v271;
  __int16 v272;
  __int16 v273;
  char v274;
  WTF *v275;
  unint64_t v276;
  char v277;
  _QWORD *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  JSC::VM *v281;
  __int16 v282;
  WTF::StringImpl *v283;
  uint64_t v284;
  JSC::VM *v285;
  JSC::VM *v286;
  uint64_t v287;
  __int128 v288;
  unint64_t v289;
  uint64_t v290;
  WTF *v291;
  WTF::StringImpl *v292;
  char v293;
  WTF *v294;
  unint64_t v295;
  char v296;
  uint64_t *v297;
  int v298;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v208.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v12, a1, v208);
  }
  v13 = a2;
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 48);
  v287 = *((_QWORD *)a1 + 7);
  if ((v15 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSBaseAudioContext::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSBaseAudioContext::s_info && v18 != 0);
  }
  if (!v17)
  {
LABEL_13:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v287, 0, "context", 8, "AudioWorkletNode", 17, a8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v22 = *(_QWORD *)(v15 + 24);
  v23 = *(_QWORD *)(a2 + 56);
  v287 = v23;
  if ((v23 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v23 + 5) == 2)
  {
    v24 = *(WTF::StringImpl **)(v23 + 8);
    if ((v24 & 1) != 0)
    {
      v24 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, a1);
      if (!v24)
        goto LABEL_19;
    }
    else if (!v24)
    {
LABEL_19:
      v267[0] = v24;
      goto LABEL_20;
    }
    *(_DWORD *)v24 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v287, a1);
LABEL_20:
  if (*((_DWORD *)v12 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v25 = v267[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v253 = 1;
      v267[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      v21 = 0;
      v124 = 1;
      goto LABEL_130;
    }
  }
  else
  {
    v25 = v267[0];
  }
  v248 = v25;
  v252 = v25;
  v253 = 0;
  v251 = v12;
  v247 = v22;
  if ((unint64_t)(*(int *)(v13 + 32) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v265 = (JSC::VM *)*((_QWORD *)a1 + 7);
    goto LABEL_33;
  }
  v26 = *(JSC::JSCell **)(v13 + 64);
  v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v265 = v27;
  if (((unint64_t)v26 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_33:
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = &qword_196881000;
    v257 = 1;
    v258 = 1;
    v44 = 0x100000001;
    goto LABEL_34;
  }
  if (((unint64_t)v26 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v26)) == 0)
  {
    JSC::throwTypeError();
    v21 = 0;
    v59 = 1;
    v298 = 1;
    goto LABEL_128;
  }
  v29 = (JSC::Structure *)Object;
  v243 = v14;
  WTF::AtomStringImpl::addLiteral();
  v31 = JSC::JSObject::get(v29, a1, (unint64_t)v267[0]);
  if (v267[0])
  {
    if (*(_DWORD *)v267[0] == 2)
      WTF::StringImpl::destroy(v267[0], v30);
    else
      *(_DWORD *)v267[0] -= 2;
  }
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
  {
LABEL_365:
    v298 = 1;
    v14 = v243;
    goto LABEL_64;
  }
  if (v31 == 10)
  {
    v239 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v31, v267);
    if (HIDWORD(v267[0]))
      goto LABEL_365;
    BYTE4(v239) = v267[0];
    v234 = LODWORD(v267[0]) >> 8;
    LOBYTE(v239) = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v126 = v267[0];
  v128 = JSC::JSObject::get(v29, a1, (unint64_t)v267[0]);
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, v127);
    else
      *(_DWORD *)v126 -= 2;
  }
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
    goto LABEL_365;
  if (v128 == 10)
  {
    v238 = 0;
    v242 = 0;
  }
  else
  {
    v267[0] = *((WTF::StringImpl **)a1 + 7);
    v129 = v267[0];
    v130 = WebCore::parseEnumeration<WebCore::ChannelCountMode>(a1, v128);
    if (*((_DWORD *)v129 + 20))
    {
      v217 = v129;
      v218 = v130;
      v219 = JSC::VM::hasExceptionsAfterHandlingTraps(v217);
      v130 = v218;
      if ((v219 & 1) != 0)
        goto LABEL_365;
    }
    if ((v130 & 0xFF00000000) == 0)
      goto LABEL_349;
    v242 = v130;
    v235 = v130 >> 8;
    v238 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v131 = v267[0];
  v133 = JSC::JSObject::get(v29, a1, (unint64_t)v267[0]);
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, v132);
    else
      *(_DWORD *)v131 -= 2;
  }
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
    goto LABEL_365;
  if (v133 == 10)
  {
    v237 = 0;
    v241 = 0;
    goto LABEL_152;
  }
  v267[0] = *((WTF::StringImpl **)a1 + 7);
  v134 = v267[0];
  v135 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>(a1, v133);
  if (*((_DWORD *)v134 + 20))
  {
    v220 = v134;
    v221 = v135;
    v222 = JSC::VM::hasExceptionsAfterHandlingTraps(v220);
    v135 = v221;
    if ((v222 & 1) != 0)
      goto LABEL_365;
  }
  if ((v135 & 0xFF00000000) == 0)
  {
LABEL_349:
    JSC::throwTypeError();
    goto LABEL_365;
  }
  v241 = v135;
  v244 = v135 >> 8;
  v237 = 1;
LABEL_152:
  WTF::AtomStringImpl::addLiteral();
  v136 = v267[0];
  v138 = JSC::JSObject::get(v29, a1, (unint64_t)v267[0]);
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, v137);
    else
      *(_DWORD *)v136 -= 2;
  }
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
    goto LABEL_365;
  v245 = v29;
  if (v138 == 10)
  {
    v258 = 1;
    v139 = 1;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v138, &v258);
    if (HIDWORD(v258))
      goto LABEL_365;
    v139 = v258;
  }
  WTF::AtomStringImpl::addLiteral();
  v140 = v267[0];
  v142 = JSC::JSObject::get(v245, a1, (unint64_t)v267[0]);
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, v141);
    else
      *(_DWORD *)v140 -= 2;
  }
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    goto LABEL_365;
  v143 = v139;
  if (v142 == 10)
  {
    v257 = 1;
    v240 = v139 | 0x100000000;
    v144 = v245;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v142, &v257);
    v144 = v245;
    if (HIDWORD(v257))
    {
LABEL_355:
      v156 = 0;
      v40 = 0;
      v41 = 0;
      v249 = 0;
      v298 = 1;
LABEL_356:
      v14 = v243;
      goto LABEL_251;
    }
    v240 = v143 | ((unint64_t)v257 << 32);
  }
  WTF::AtomStringImpl::addLiteral();
  v145 = v267[0];
  v147 = JSC::JSObject::get(v144, a1, (unint64_t)v267[0]);
  v148 = v244;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::destroy(v145, v146);
      v148 = v244;
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  if (*((_DWORD *)v27 + 20))
  {
    v215 = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
    v148 = v244;
    if (v215)
      goto LABEL_355;
  }
  if (v147 == 10)
  {
    v236 = 0;
    v249 = 0;
    v14 = v243;
    goto LABEL_188;
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v283 = v149;
  if ((v147 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v147 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v150 = v244;
    v155 = v279;
    v279 = 0;
    v14 = v243;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2)
      {
        WTF::StringImpl::destroy(v155, v154);
        v150 = v244;
      }
      else
      {
        *(_DWORD *)v155 -= 2;
      }
    }
    v9 = v26;
    v152 = 1;
    LODWORD(v268) = 1;
    goto LABEL_185;
  }
  v150 = v148;
  v279 = 0;
  v280 = 0;
  v254 = (WTF::StringImpl *)&v279;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, v147, (uint64_t *)&v254);
  if (*((_DWORD *)v149 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v149) & 1) != 0)
  {
    v225 = v279;
    v152 = 1;
    LODWORD(v268) = 1;
    if (v279)
    {
      v279 = 0;
      LODWORD(v280) = 0;
      WTF::fastFree(v225, v224);
      v152 = v268;
      if ((_DWORD)v268)
      {
        v298 = 1;
        if ((_DWORD)v268 == -1)
        {
          v156 = 0;
          v40 = 0;
          v41 = 0;
          v249 = 0;
          goto LABEL_356;
        }
        v249 = 0;
        v153 = 0;
        v9 = v26;
        v14 = v243;
        goto LABEL_186;
      }
      v151 = v267[0];
      v10 = v267[1];
      v9 = v26;
      goto LABEL_178;
    }
    v9 = v26;
    v14 = v243;
LABEL_185:
    v249 = 0;
    v153 = 0;
    v298 = 1;
    goto LABEL_186;
  }
  v9 = v26;
  v151 = v279;
  v10 = v280;
  LODWORD(v268) = 0;
LABEL_178:
  v14 = v243;
  v249 = v151;
  v152 = 0;
  v267[0] = 0;
  v267[1] = 0;
  v153 = 1;
LABEL_186:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3225000[v152])(&v279, v267);
  v156 = v153;
  if (!v153)
  {
    v40 = 0;
    v41 = 0;
    goto LABEL_251;
  }
  v236 = v153;
  v244 = v150;
  v144 = v245;
LABEL_188:
  WTF::AtomStringImpl::addLiteral();
  v157 = v267[0];
  v159 = (unsigned __int8 *)JSC::JSObject::get(v144, a1, (unint64_t)v267[0]);
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, v158);
    else
      *(_DWORD *)v157 -= 2;
  }
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
  {
    v40 = 0;
    v41 = 0;
    v298 = 1;
    goto LABEL_250;
  }
  if (v159 == (unsigned __int8 *)10)
  {
    v160 = v27;
    v40 = 0;
    v41 = 0;
    goto LABEL_279;
  }
  v161 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v285 = v161;
  if (((unint64_t)v159 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v160 = v27;
    LODWORD(v12) = 0;
    v9 = 0;
    v41 = 0;
    goto LABEL_278;
  }
  if (((unint64_t)v159 & 0xFFFE000000000002) != 0 || v159[5] <= 0x16u)
  {
    JSC::throwTypeError();
    v181 = 1;
    v256 = 1;
    v298 = 1;
LABEL_248:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3225010[v181])(v267, &v254);
LABEL_249:
    v40 = 0;
    v41 = 0;
    goto LABEL_250;
  }
  v283 = 0;
  v284 = 0;
  v162 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v162 = 1;
  *((_QWORD *)v162 + 1) = (char *)v162 + 24;
  *((_QWORD *)v162 + 2) = 20;
  v279 = v162;
  v280 = 0;
  v281 = v161;
  v282 = 259;
  (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, WTF::StringImpl **, _QWORD))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x78))(v159, a1, &v279, 0);
  if (*((_DWORD *)v161 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v161))
  {
    v256 = 1;
    goto LABEL_260;
  }
  v163 = *((unsigned int *)v279 + 5);
  if (!(_DWORD)v163)
  {
LABEL_259:
    v254 = v283;
    v182 = v284;
    v283 = 0;
    v284 = 0;
    v255 = v182;
    v256 = 0;
    goto LABEL_260;
  }
  v12 = (JSC::VM *)*((_QWORD *)v279 + 1);
  v164 = &v277;
  v165 = 8 * v163;
  v232 = v161;
  v233 = v27;
  while (1)
  {
    v268 = 0xFFFFFFFF00000000;
    v269 = v159;
    v270 = 0;
    v271 = 0;
    v272 = 0;
    v273 = 2;
    v274 = 0;
    LOBYTE(v275) = 0;
    LOBYTE(v276) = 0;
    *(_QWORD *)v164 = 0;
    *((_QWORD *)v164 + 1) = 0;
    v166 = (*(uint64_t (**)(unsigned __int8 *, JSC::JSGlobalObject *, _QWORD, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x4C) + 0x68))(v159, a1, *(_QWORD *)v12, v267);
    if (*((_DWORD *)v161 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v161))
    {
      v227 = v244;
      v256 = 1;
      goto LABEL_370;
    }
    if (v166 && (v268 & 4) == 0)
      break;
LABEL_225:
    if ((_BYTE)v276)
    {
      v178 = *((_DWORD *)v275 + 1);
      if (!v178)
      {
        __break(0xC471u);
        JUMPOUT(0x19485E438);
      }
      *((_DWORD *)v275 + 1) = v178 - 1;
    }
    v12 = (JSC::VM *)((char *)v12 + 8);
    v165 -= 8;
    if (!v165)
      goto LABEL_259;
  }
  v167 = *(WTF::StringImpl **)v12;
  if (*(_QWORD *)v12)
  {
    if ((*((_BYTE *)v167 + 16) & 0x20) != 0)
    {
      v266[0] = *((WTF::StringImpl **)a1 + 7);
      JSC::throwTypeError();
      v167 = 0;
    }
    else
    {
      *(_DWORD *)v167 += 2;
    }
  }
  if (*((_DWORD *)v161 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v161) & 1) != 0)
    goto LABEL_367;
  if (v274)
  {
    v179 = JSC::JSObject::get((JSC::Structure *)v159, a1, *(_QWORD *)v12);
  }
  else
  {
    if (HIBYTE(v272) == 1)
    {
      v168 = v267[0];
      goto LABEL_213;
    }
    if (HIBYTE(v272) == 2)
      v179 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v267, a1);
    else
      v179 = JSC::PropertySlot::customGetter();
  }
  v168 = (WTF::StringImpl *)v179;
LABEL_213:
  if (*((_DWORD *)v161 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v161) & 1) != 0)
    goto LABEL_367;
  v169 = v164;
  v266[0] = v168;
  v170 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v286 = v170;
  if ((unint64_t)v168 >= 0xFFFE000000000000)
  {
    v171 = (double)(int)v168;
  }
  else if ((unint64_t)v168 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v266, a1);
  }
  else
  {
    *(_QWORD *)&v171 = (char *)v168 - 0x2000000000000;
  }
  if (*((_DWORD *)v170 + 20))
  {
    v231 = v171;
    v180 = JSC::VM::hasExceptionsAfterHandlingTraps(v170);
    v171 = v231;
    if ((v180 & 1) != 0)
      goto LABEL_367;
  }
  if ((*(_QWORD *)&v171 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v266[0] = v167;
    v266[1] = *(WTF::StringImpl **)&v171;
    v172 = HIDWORD(v284);
    v164 = v169;
    if (HIDWORD(v284) == (_DWORD)v284)
    {
      v173 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v283, HIDWORD(v284) + 1, (unint64_t)v266);
      v172 = HIDWORD(v284);
      v174 = (_QWORD *)((char *)v283 + 16 * HIDWORD(v284));
      v175 = *v173;
      *v173 = 0;
      *v174 = v175;
      v174[1] = v173[1];
    }
    else
    {
      v266[0] = 0;
      v176 = (double *)((char *)v283 + 16 * HIDWORD(v284));
      *(_QWORD *)v176 = v167;
      v176[1] = v171;
    }
    v161 = v232;
    v27 = v233;
    HIDWORD(v284) = v172 + 1;
    v177 = v266[0];
    v266[0] = 0;
    if (v177)
    {
      if (*(_DWORD *)v177 == 2)
        WTF::StringImpl::destroy(v177, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v177 -= 2;
    }
    goto LABEL_225;
  }
  JSC::throwTypeError();
LABEL_367:
  v227 = v244;
  v256 = 1;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v167 -= 2;
  }
LABEL_370:
  if ((_BYTE)v276)
  {
    v223 = *((_DWORD *)v275 + 1);
    if (!v223)
    {
      __break(0xC471u);
      JUMPOUT(0x19485E6E0);
    }
    *((_DWORD *)v275 + 1) = v223 - 1;
  }
  v244 = v227;
  v27 = v233;
LABEL_260:
  if (v280)
    WTF::fastFree((WTF::StringImpl *)((char *)v280 - 16), (void *)a2);
  v183 = v279;
  v279 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 1)
    {
      v202 = *((unsigned int *)v183 + 5);
      if ((_DWORD)v202)
      {
        v203 = (WTF::StringImpl **)*((_QWORD *)v183 + 1);
        v204 = 8 * v202;
        do
        {
          v205 = *v203;
          *v203 = 0;
          if (v205)
          {
            if (*(_DWORD *)v205 == 2)
              WTF::StringImpl::destroy(v205, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v205 -= 2;
          }
          ++v203;
          v204 -= 8;
        }
        while (v204);
      }
      v206 = (WTF *)*((_QWORD *)v183 + 1);
      if ((WTF::StringImpl *)((char *)v183 + 24) != v206 && v206 != 0)
      {
        *((_QWORD *)v183 + 1) = 0;
        *((_DWORD *)v183 + 4) = 0;
        WTF::fastFree(v206, (void *)a2);
      }
      WTF::fastFree(v183, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v183;
    }
  }
  v184 = v283;
  if (HIDWORD(v284))
  {
    v185 = 16 * HIDWORD(v284);
    do
    {
      v186 = *(WTF::StringImpl **)v184;
      *(_QWORD *)v184 = 0;
      if (v186)
      {
        if (*(_DWORD *)v186 == 2)
          WTF::StringImpl::destroy(v186, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v186 -= 2;
      }
      v184 = (WTF *)((char *)v184 + 16);
      v185 -= 16;
    }
    while (v185);
    v184 = v283;
  }
  if (v184)
  {
    v283 = 0;
    LODWORD(v284) = 0;
    WTF::fastFree(v184, (void *)a2);
  }
  v181 = v256;
  if (v256)
  {
    v298 = 1;
    v14 = v243;
    if (v256 == -1)
      goto LABEL_249;
    goto LABEL_248;
  }
  v160 = v27;
  v41 = v254;
  v9 = v255;
  LODWORD(v12) = HIDWORD(v255);
LABEL_278:
  v40 = 1;
LABEL_279:
  WTF::AtomStringImpl::addLiteral();
  v187 = v267[0];
  v189 = JSC::JSObject::get(v245, a1, (unint64_t)v267[0]);
  v37 = v241;
  v35 = v242;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::destroy(v187, v188);
      v37 = v241;
      v35 = v242;
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  if (!*((_DWORD *)v160 + 20) || (v216 = JSC::VM::hasExceptionsAfterHandlingTraps(v160), v37 = v241, v35 = v242, !v216))
  {
    v44 = v240;
    if (v189 == 10)
    {
      v42 = 0;
      v14 = v243;
      v32 = v239;
      v33 = BYTE4(v239);
      LODWORD(v43) = v234;
      v8 = v235;
      v36 = v237;
      v34 = v238;
      v39 = v249;
      v38 = v236;
      a2 = v244;
      goto LABEL_34;
    }
    WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, v189, (uint64_t)v267);
    v246 = (int)v267[1];
    if (LODWORD(v267[1]))
    {
      v42 = 0;
      v298 = 1;
      LODWORD(v190) = v267[1];
      v35 = v242;
      v14 = v243;
      v32 = v239;
      v33 = BYTE4(v239);
      v36 = v237;
      v34 = v238;
      v8 = v235;
      v38 = v236;
      v37 = v241;
      v39 = v249;
      goto LABEL_298;
    }
    v190 = v267[0];
    if (!v267[0])
    {
      v42 = 0;
      v14 = v243;
      v44 = v240;
LABEL_299:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3225020[v190])(&v279, v267);
      v38 = v236;
      v36 = v237;
      v39 = v249;
      v37 = v241;
      v35 = v242;
      v8 = v235;
      v34 = v238;
      v32 = v239;
      v33 = BYTE4(v239);
LABEL_300:
      LODWORD(v43) = v234;
      a2 = v244;
      if (v246)
      {
LABEL_45:
        v249 = v39;
        if (v42)
        {
          v51 = v42 - 2;
          v52 = *(_QWORD *)(((unint64_t)(v42 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v53 = (uint64_t *)*(v42 - 1);
          if (v53)
          {
            v54 = *v51;
            *v53 = *v51;
            *(_QWORD *)(v54 + 8) = v53;
            *v51 = 0;
            *(v42 - 1) = 0;
          }
          v55 = v38;
          *v51 = *(_QWORD *)(v52 + 40);
          *(_QWORD *)(v52 + 40) = v51;
        }
        else
        {
          v55 = v38;
        }
        goto LABEL_49;
      }
LABEL_34:
      LODWORD(v288) = v33 | ((_DWORD)v43 << 8);
      BYTE4(v288) = v32;
      *(_WORD *)((char *)&v288 + 5) = v263;
      BYTE7(v288) = v264;
      DWORD2(v288) = v35 | (v8 << 8);
      BYTE12(v288) = v34;
      *(_WORD *)((char *)&v288 + 13) = v261;
      HIBYTE(v288) = v262;
      LODWORD(v289) = v37 | ((_DWORD)a2 << 8);
      BYTE4(v289) = v36;
      HIBYTE(v289) = v260;
      *(_WORD *)((char *)&v289 + 5) = v259;
      v290 = v44;
      LOBYTE(v291) = 0;
      v293 = 0;
      if (v38)
      {
        v291 = v39;
        v292 = v10;
        v293 = 1;
        v39 = 0;
      }
      LOBYTE(v294) = 0;
      v296 = 0;
      if (v40)
      {
        v294 = v41;
        v295 = __PAIR64__(v12, v9);
        v296 = 1;
        LODWORD(v12) = 0;
        v41 = 0;
      }
      v297 = 0;
      if (v42)
      {
        v45 = *(JSC::HandleSet **)(((unint64_t)(v42 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v46 = (_QWORD *)*((_QWORD *)v45 + 5);
        if (!v46)
        {
          v250 = v39;
          v226 = v38;
          JSC::HandleSet::grow(v45);
          v38 = v226;
          v39 = v250;
          v46 = (_QWORD *)*((_QWORD *)v45 + 5);
        }
        *((_QWORD *)v45 + 5) = *v46;
        v46[2] = 0;
        v47 = v46 + 2;
        *v46 = 0;
        v46[1] = 0;
        v297 = v46 + 2;
        v48 = *v42;
        if (*v42)
        {
          v49 = *(_QWORD **)(((unint64_t)(v47 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v50 = v49[3];
          v49 += 3;
          *(v47 - 2) = v50;
          *(v47 - 1) = v49;
          *v49 = v47 - 2;
          *(_QWORD *)(v50 + 8) = v47 - 2;
        }
        *v47 = v48;
      }
      v298 = 0;
      goto LABEL_45;
    }
    v191 = *(JSC::HandleSet **)((((unint64_t)v267[0] - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v192 = (_QWORD *)*((_QWORD *)v191 + 5);
    v32 = v239;
    v33 = BYTE4(v239);
    v36 = v237;
    v34 = v238;
    v8 = v235;
    v38 = v236;
    v37 = v241;
    v39 = v249;
    if (v192)
    {
      *((_QWORD *)v191 + 5) = *v192;
      v192[2] = 0;
      v193 = v192 + 2;
      *v192 = 0;
      v192[1] = 0;
    }
    else
    {
      JSC::HandleSet::grow(v191);
      v230 = (_QWORD *)*((_QWORD *)v191 + 5);
      v190 = v267[0];
      *((_QWORD *)v191 + 5) = *v230;
      *v230 = 0;
      v230[1] = 0;
      v230[2] = 0;
      v193 = v230 + 2;
      if (!v190)
      {
        v194 = 0;
        v32 = v239;
        v33 = BYTE4(v239);
        v36 = v237;
        v34 = v238;
        v8 = v235;
        v38 = v236;
        v37 = v241;
        v39 = v249;
LABEL_291:
        *v193 = v194;
        v195 = (unint64_t)(v193 - 2);
        v196 = **(_QWORD **)((v195 & 0xFFFFFFFFFFFFF000) + 0x10);
        v197 = *(_QWORD *)(v196 + 712);
        if (!v197)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v196 + 672));
          v38 = v236;
          v36 = v237;
          v39 = v249;
          v37 = v241;
          v8 = v235;
          v34 = v238;
          v32 = v239;
          v33 = BYTE4(v239);
          v197 = *(_QWORD *)(v196 + 712);
        }
        *(_QWORD *)(v196 + 712) = *(_QWORD *)v197;
        *(_QWORD *)(v197 + 16) = 0;
        v42 = (uint64_t *)(v197 + 16);
        *(_QWORD *)v197 = 0;
        *(_QWORD *)(v197 + 8) = 0;
        if (v194)
        {
          v198 = *(unint64_t **)((v197 & 0xFFFFFFFFFFFFF000) + 0x10);
          v199 = v198[3];
          v198 += 3;
          *(_QWORD *)v197 = v199;
          *(_QWORD *)(v197 + 8) = v198;
          *v198 = v197;
          *(_QWORD *)(v199 + 8) = v197;
        }
        *v42 = v194;
        v190 = *(WTF::StringImpl **)((v195 & 0xFFFFFFFFFFFFF000) + 0x10);
        v200 = *(_QWORD **)(v195 + 8);
        if (v200)
        {
          v201 = *(_QWORD *)v195;
          *v200 = *(_QWORD *)v195;
          *(_QWORD *)(v201 + 8) = v200;
          *(_QWORD *)v195 = 0;
          *(_QWORD *)(v195 + 8) = 0;
        }
        *(_QWORD *)v195 = *((_QWORD *)v190 + 5);
        *((_QWORD *)v190 + 5) = v195;
        LODWORD(v190) = v267[1];
        v35 = v242;
        v14 = v243;
LABEL_298:
        v44 = v240;
        if ((_DWORD)v190 == -1)
          goto LABEL_300;
        goto LABEL_299;
      }
      v32 = v239;
      v33 = BYTE4(v239);
      v36 = v237;
      v34 = v238;
      v8 = v235;
      v38 = v236;
      v37 = v241;
      v39 = v249;
    }
    v194 = *(_QWORD *)v190;
    if (*(_QWORD *)v190)
    {
      v213 = *(_QWORD **)(((unint64_t)(v193 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v214 = v213[3];
      v213 += 3;
      *(v193 - 2) = v214;
      *(v193 - 1) = v213;
      *v213 = v193 - 2;
      *(_QWORD *)(v214 + 8) = v193 - 2;
    }
    goto LABEL_291;
  }
  v298 = 1;
  v14 = v243;
LABEL_250:
  v156 = v236;
LABEL_251:
  v55 = v156;
LABEL_49:
  if (v40)
  {
    if ((_DWORD)v12)
    {
      v56 = 16 * v12;
      v57 = (WTF::StringImpl **)v41;
      do
      {
        v58 = *v57;
        *v57 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v58 -= 2;
        }
        v57 += 2;
        v56 -= 16;
      }
      while (v56);
    }
    if (v41)
      WTF::fastFree(v41, (void *)a2);
  }
  if (v55)
  {
    v12 = v251;
    v22 = v247;
    if (v249)
      WTF::fastFree(v249, (void *)a2);
  }
  else
  {
    v12 = v251;
    v22 = v247;
  }
LABEL_64:
  v59 = v298;
  if (v298)
  {
LABEL_390:
    v21 = 0;
    goto LABEL_127;
  }
  v60 = v14;
  v61 = *(JSC::JSGlobalObject **)(v14 + 40);
  v252 = 0;
  v254 = v248;
  *(_OWORD *)v267 = v288;
  v268 = v289;
  v269 = (unsigned __int8 *)v290;
  LOBYTE(v270) = 0;
  LOBYTE(v272) = 0;
  if (v293)
  {
    v270 = v291;
    v62 = v292;
    v291 = 0;
    v292 = 0;
    v271 = v62;
    LOBYTE(v272) = 1;
  }
  v63 = (_QWORD *)(v22 - 32);
  LOBYTE(v275) = 0;
  v277 = 0;
  if (v296)
  {
    v275 = v294;
    v64 = v295;
    v294 = 0;
    v295 = 0;
    v276 = v64;
    v277 = 1;
  }
  v278 = 0;
  v65 = v297;
  if (v297)
  {
    v66 = *(_QWORD *)(((unint64_t)(v297 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v67 = *(_QWORD *)(v66 + 40);
    if (!v67)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v297 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
      v67 = *(_QWORD *)(v66 + 40);
    }
    *(_QWORD *)(v66 + 40) = *(_QWORD *)v67;
    *(_QWORD *)(v67 + 16) = 0;
    v68 = (_QWORD *)(v67 + 16);
    *(_QWORD *)v67 = 0;
    *(_QWORD *)(v67 + 8) = 0;
    v278 = (_QWORD *)(v67 + 16);
    v69 = *v65;
    if ((*v65 != 0) != (*(_QWORD *)(v67 + 16) != 0))
    {
      if (v69)
      {
        v70 = *(unint64_t **)((v67 & 0xFFFFFFFFFFFFF000) + 0x10);
        v71 = v70[3];
        v70 += 3;
        *(_QWORD *)v67 = v71;
        *(_QWORD *)(v67 + 8) = v70;
        *v70 = v67;
        *(_QWORD *)(v71 + 8) = v67;
      }
      else
      {
        v229 = *(_QWORD *)v67;
        v228 = *(_QWORD **)(v67 + 8);
        *v228 = *(_QWORD *)v67;
        *(_QWORD *)(v229 + 8) = v228;
        *(_QWORD *)v67 = 0;
        *(_QWORD *)(v67 + 8) = 0;
        v68 = v278;
      }
    }
    *v68 = v69;
  }
  WebCore::AudioWorkletNode::create(v61, v63, &v254, (uint64_t)v267, (uint64_t)&v279);
  if (v278)
  {
    v74 = v278 - 2;
    v75 = *(_QWORD *)(((unint64_t)(v278 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v76 = (uint64_t *)*(v278 - 1);
    if (v76)
    {
      v77 = *v74;
      *v76 = *v74;
      *(_QWORD *)(v77 + 8) = v76;
      *v74 = 0;
      v74[1] = 0;
    }
    *v74 = *(_QWORD *)(v75 + 40);
    *(_QWORD *)(v75 + 40) = v74;
    v278 = 0;
  }
  if (v277)
  {
    if (HIDWORD(v276))
    {
      v78 = v275;
      v79 = 16 * HIDWORD(v276);
      do
      {
        v80 = *(WTF::StringImpl **)v78;
        *(_QWORD *)v78 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v72);
          else
            *(_DWORD *)v80 -= 2;
        }
        v78 = (WTF *)((char *)v78 + 16);
        v79 -= 16;
      }
      while (v79);
    }
    v81 = v275;
    if (v275)
    {
      v275 = 0;
      LODWORD(v276) = 0;
      WTF::fastFree(v81, v72);
    }
  }
  if ((_BYTE)v272)
  {
    v82 = v270;
    if (v270)
    {
      v270 = 0;
      LODWORD(v271) = 0;
      WTF::fastFree(v82, v72);
    }
  }
  v83 = v254;
  v254 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v72);
    else
      *(_DWORD *)v83 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
  {
LABEL_338:
    v21 = 0;
    goto LABEL_125;
  }
  if ((_DWORD)v281)
  {
    if ((_DWORD)v281 == 1)
    {
      v210 = (WTF::StringImpl *)v279;
      LOBYTE(v267[0]) = (_BYTE)v279;
      v211 = v280;
      v280 = 0;
      v267[1] = v211;
      if (!*((_QWORD *)v12 + 2))
      {
        v212.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v279, (JSC::JSGlobalObject *)&v267[1]);
        JSC::VM::throwException(v12, a1, v212);
        v211 = v267[1];
      }
      v267[1] = 0;
      if (v211)
      {
        if (*(_DWORD *)v211 == 2)
          WTF::StringImpl::destroy(v211, v210);
        else
          *(_DWORD *)v211 -= 2;
      }
      v21 = 0;
      goto LABEL_110;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_390;
  }
  v84 = *(JSC::VM **)(v60 + 40);
  v85 = v279;
  v279 = 0;
  v267[0] = v85;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v85 != off_1E33695B8)
  {
    __break(0xC471u);
    JUMPOUT(0x19485E334);
  }
  v86 = *((_QWORD *)v84 + 412);
  if (!v86)
    goto LABEL_106;
  v87 = *(_DWORD *)(v86 - 8);
  v88 = ((unint64_t)&WebCore::JSAudioWorkletNode::s_info + ~((_QWORD)&WebCore::JSAudioWorkletNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorkletNode::s_info + ~((_QWORD)&WebCore::JSAudioWorkletNode::s_info << 32)) >> 22);
  v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
  v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
  v91 = v87 & ((v90 >> 31) ^ v90);
  v92 = *(char ***)(v86 + 16 * v91);
  if (v92 == &WebCore::JSAudioWorkletNode::s_info)
  {
LABEL_105:
    v94 = *(_QWORD *)(v86 + 16 * v91 + 8);
    if (!v94)
      goto LABEL_106;
  }
  else
  {
    v93 = 1;
    while (v92)
    {
      v91 = ((_DWORD)v91 + v93) & v87;
      v92 = *(char ***)(v86 + 16 * v91);
      ++v93;
      if (v92 == &WebCore::JSAudioWorkletNode::s_info)
        goto LABEL_105;
    }
LABEL_106:
    v95 = (WebCore::JSAudioNode *)*((_QWORD *)v84 + 7);
    v96 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v95, v84, v73);
    Structure = WebCore::JSAudioWorkletNodePrototype::createStructure((uint64_t *)v95, (uint64_t)v84, v96);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v99 = (JSC::JSCell *)WebCore::JSAudioWorkletNodePrototype::create(v95, v84, Structure, v98);
    v100 = WebCore::JSAudioWorkletNode::createStructure((uint64_t *)v95, (uint64_t)v84, v99);
    v94 = WebCore::cacheDOMStructure((JSCell *)v84, v100, (uint64_t)&WebCore::JSAudioWorkletNode::s_info);
  }
  v21 = (JSCell *)WebCore::JSAudioWorkletNode::create(v94, v84, (uint64_t *)v267);
  WebCore::cacheWrapper<WebCore::AudioWorkletNode,WebCore::JSAudioWorkletNode>(*((_QWORD *)v84 + 415), (uint64_t)v85, (uint64_t)v21);
  v101 = v267[0];
  v267[0] = 0;
  if (v101)
    WebCore::AudioNode::deref(v101);
  v12 = v251;
LABEL_110:
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    goto LABEL_338;
  v102 = *(JSC::JSCell **)(v13 + 40);
  if (((unint64_t)v102 & 0xFFFE000000000002) == 0)
  {
    v103 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v102);
    if (v103)
    {
      v105 = v103;
      if (v103 != *(JSC::JSGlobalObject **)(v13 + 24))
      {
        v106 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v103, v104);
        if (!*((_DWORD *)v106 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) == 0)
        {
          v110 = *((_QWORD *)FunctionRealm + 412);
          if (v110)
          {
            v111 = *(_DWORD *)(v110 - 8);
            v112 = ((unint64_t)&WebCore::JSAudioWorkletNode::s_info
                  + ~((_QWORD)&WebCore::JSAudioWorkletNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorkletNode::s_info
                                                                             + ~((_QWORD)&WebCore::JSAudioWorkletNode::s_info << 32)) >> 22);
            v113 = 9 * ((v112 + ~(v112 << 13)) ^ ((v112 + ~(v112 << 13)) >> 8));
            v114 = (v113 ^ (v113 >> 15)) + ~((v113 ^ (v113 >> 15)) << 27);
            v115 = v111 & ((v114 >> 31) ^ v114);
            v116 = *(char ***)(v110 + 16 * v115);
            if (v116 == &WebCore::JSAudioWorkletNode::s_info)
            {
LABEL_120:
              v107 = *(JSC::JSObject **)(v110 + 16 * v115 + 8);
              if (v107)
              {
LABEL_122:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v105, v107, v108);
                if (!*((_DWORD *)v106 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) == 0)
                  JSC::JSObject::setStructure(v21, v106, SubclassStructure);
                goto LABEL_124;
              }
            }
            else
            {
              v117 = 1;
              while (v116)
              {
                v115 = ((_DWORD)v115 + v117) & v111;
                v116 = *(char ***)(v110 + 16 * v115);
                ++v117;
                if (v116 == &WebCore::JSAudioWorkletNode::s_info)
                  goto LABEL_120;
              }
            }
          }
          v118 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v106, FunctionRealm, v107);
          v119 = WebCore::JSAudioWorkletNodePrototype::createStructure((uint64_t *)v106, (uint64_t)FunctionRealm, v118);
          *(_DWORD *)(v119 + 16) |= 0x80000u;
          v121 = (JSC::JSCell *)WebCore::JSAudioWorkletNodePrototype::create(v106, FunctionRealm, v119, v120);
          v122 = WebCore::JSAudioWorkletNode::createStructure((uint64_t *)v106, (uint64_t)FunctionRealm, v121);
          v107 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v122, (uint64_t)&WebCore::JSAudioWorkletNode::s_info);
          goto LABEL_122;
        }
      }
    }
  }
LABEL_124:
  if (*((_DWORD *)v251 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v251) & 1) != 0)
    goto LABEL_338;
LABEL_125:
  if ((_DWORD)v281 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3224F40[v281])(v267, &v279);
LABEL_127:
  if (v59 != -1)
LABEL_128:
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E3224F50[v59])(v267, &v288);
  v124 = 0;
LABEL_130:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3223358[v124])(&v287, &v252);
  return v21;
}

uint64_t WebCore::JSAudioWorkletNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioWorkletNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioWorkletNodePrototype::create(WebCore::JSAudioWorkletNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSAudioWorkletNode::s_info, &WebCore::JSAudioWorkletNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioWorkletNode>,(WebCore::DOMConstructorID)244>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1952);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSAudioWorkletNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAudioWorkletNode::s_info + ~((_QWORD)&WebCore::JSAudioWorkletNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorkletNode::s_info + ~((_QWORD)&WebCore::JSAudioWorkletNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAudioWorkletNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAudioWorkletNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAudioWorkletNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSAudioWorkletNodePrototype::create((WebCore::JSAudioWorkletNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSAudioWorkletNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSAudioWorkletNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1952) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioWorkletNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioWorkletNodePrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioWorkletNode>,(WebCore::DOMConstructorID)244>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioWorkletNode_parameters(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 184);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)v2;
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSAudioParamMap::s_info + ~((_QWORD)&WebCore::JSAudioParamMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioParamMap::s_info + ~((_QWORD)&WebCore::JSAudioParamMap::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSAudioParamMap::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSAudioParamMap::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSAudioParamMapPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSAudioParamMapPrototype::create((WebCore::JSAudioParamMapPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSAudioParamMap::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSAudioParamMap::s_info);
LABEL_16:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 1936);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 1936))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 1936);
    *(_QWORD *)(v35 + 1936) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 1936);
  *(_QWORD *)(v31 + 1936) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE334BB0 & 1) == 0)
  {
    qword_1EE334BA8 = (uint64_t)&off_1E3222EF0;
    byte_1EE334BB0 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334BA8;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

unint64_t WebCore::jsAudioWorkletNode_port(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MessagePort>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 192));
}

uint64_t WebCore::jsAudioWorkletNode_onprocessorerror(uint64_t a1, uint64_t a2)
{
  WebCore::AudioNode *v3;
  WebCore *v4;
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(WebCore::AudioNode **)(a2 + 24);
  v4 = WebCore::AudioNode::ref(v3);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(v4);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v3, (WebCore::EventTarget *)(v8 + 1576), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), v5);
  WebCore::AudioNode::deref(v3);
  return v9;
}

uint64_t WebCore::setJSAudioWorkletNode_onprocessorerror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::AudioNode *v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioWorkletNode::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioWorkletNode::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::AudioNode **)(a2 + 24);
  v12 = WebCore::AudioNode::ref(v11);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(v12);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 1576), a3, (_DWORD *)a2);
  if (v11)
    WebCore::AudioNode::deref(v11);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSAudioWorkletNode::subspaceForImpl(WebCore::JSAudioWorkletNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1976);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1976);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1976);
    *(_QWORD *)(v8 + 1976) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1976);
  *(_QWORD *)(v3 + 1976) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAudioWorkletNodeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[20];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[21] || (result = (*(uint64_t (**)(_QWORD *))(v5[19] + 64))(v5 + 19), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

WTF::Thread *WebCore::JSAudioWorkletNodeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::AudioNode *v4;
  WTF::Thread *result;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *(WebCore::AudioNode **)(*(_QWORD *)a2 + 24);
  result = WebCore::AudioNode::ref(v4);
  v6 = (char *)v4 + 8;
  if (!v4)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v7 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v7 - 8);
      v11 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::AudioNode **)(v7 + 16 * v14);
      if (v15 != v4)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::AudioNode **)(v7 + 16 * v14);
          ++v16;
          if (v15 == v4)
            goto LABEL_14;
        }
        v14 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v14 != *(_DWORD *)(v7 - 4))
      {
        v17 = (_QWORD *)(v7 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v21 = *v8;
        if (*v8)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v8;
        if (*v8)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            result = (WTF::Thread *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (v4)
    return WebCore::AudioNode::deref(v4);
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF *v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 4))
  {
    v11 = *a3;
    if ((int)v11 < 0)
      v12 = COERCE__INT64((double)v11) + 0x2000000000000;
    else
      v12 = v11 | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v55;
    v55 = 0;
    v56 = v9;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v13, v12, 0, (uint64_t)&v55);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 12))
  {
    v15 = WebCore::convertEnumerationToJS<WebCore::ChannelCountMode>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)a3[2]);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v16 = v55;
    v55 = 0;
    v56 = v9;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v16, v15, 0, (uint64_t)&v55);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 20))
  {
    v18 = WebCore::convertEnumerationToJS<WebCore::ChannelInterpretation>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)a3[4]);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v19 = v55;
    v55 = 0;
    v56 = v9;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v19, v18, 0, (uint64_t)&v55);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v21 = a3[6];
  if ((int)v21 < 0)
    v22 = COERCE__INT64((double)v21) + 0x2000000000000;
  else
    v22 = v21 | 0xFFFE000000000000;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v23 = v55;
  v55 = 0;
  v56 = v9;
  v57 = -1;
  v58 = 0x1000000;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v23, v22, 0, (uint64_t)&v55);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  v25 = a3[7];
  v26 = (int)v25 < 0 ? COERCE__INT64((double)v25) + 0x2000000000000 : v25 | 0xFFFE000000000000;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v27 = v55;
  v55 = 0;
  v56 = v9;
  v57 = -1;
  v58 = 0x1000000;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v27, v26, 0, (uint64_t)&v55);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*((_BYTE *)a3 + 48))
  {
    v29 = a3[11];
    v55 = 0;
    LODWORD(v56) = 0;
    HIDWORD(v56) = v29;
    if ((_DWORD)v29)
    {
      if (v29 >> 30)
        goto LABEL_98;
      v30 = (WTF *)WTF::fastMalloc((WTF *)(4 * v29));
      LODWORD(v56) = v29;
      v55 = v30;
      memcpy(v30, *((const void **)a3 + 4), 4 * a3[11]);
    }
    v32 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert<unsigned int,0ul>(a1, a2, (unsigned int **)&v55);
    v33 = v55;
    if (v55)
    {
      v55 = 0;
      LODWORD(v56) = 0;
      WTF::fastFree(v33, v31);
    }
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v34 = v55;
    v55 = 0;
    v56 = v9;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v34, v32, 0, (uint64_t)&v55);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (!*((_BYTE *)a3 + 72))
    goto LABEL_67;
  v36 = a3[17];
  v55 = 0;
  LODWORD(v56) = 0;
  HIDWORD(v56) = v36;
  if ((_DWORD)v36)
  {
    if (!(v36 >> 28))
    {
      v37 = (WTF *)WTF::fastMalloc((WTF *)(16 * v36));
      LODWORD(v56) = v36;
      v55 = v37;
      v38 = a3[17];
      if ((_DWORD)v38)
      {
        v39 = *((_QWORD *)a3 + 7);
        v40 = v39 + 16 * v38;
        do
        {
          v41 = *(_DWORD **)v39;
          if (*(_QWORD *)v39)
            *v41 += 2;
          *(_QWORD *)v37 = v41;
          *((_QWORD *)v37 + 1) = *(_QWORD *)(v39 + 8);
          v39 += 16;
          v37 = (WTF *)((char *)v37 + 16);
        }
        while (v39 != v40);
      }
      goto LABEL_53;
    }
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x194860148);
  }
LABEL_53:
  v43 = WebCore::JSConverter<WebCore::IDLRecord<WebCore::IDLDOMString,WebCore::IDLDouble>>::convert<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (unsigned int *)&v55);
  if (HIDWORD(v56))
  {
    v44 = v55;
    v45 = 16 * HIDWORD(v56);
    do
    {
      v46 = *(WTF::StringImpl **)v44;
      *(_QWORD *)v44 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v42);
        else
          *(_DWORD *)v46 -= 2;
      }
      v44 = (WTF *)((char *)v44 + 16);
      v45 -= 16;
    }
    while (v45);
  }
  v47 = v55;
  if (v55)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    WTF::fastFree(v47, v42);
  }
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v48 = v55;
  v55 = 0;
  v56 = v9;
  v57 = -1;
  v58 = 0x1000000;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v48, v43, 0, (uint64_t)&v55);
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v49);
    else
      *(_DWORD *)v48 -= 2;
  }
LABEL_67:
  v50 = (uint64_t *)*((_QWORD *)a3 + 10);
  if (v50)
  {
    v51 = *v50;
    if (*v50)
    {
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v52 = v55;
      v55 = 0;
      v56 = v9;
      v57 = -1;
      v58 = 0x1000000;
      v59 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v52, v51, 0, (uint64_t)&v55);
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v53);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
  }
  return v9;
}

{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 4))
  {
    v9 = *a3;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    v10 = v9 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v11 = v18;
    v18 = 0;
    v19 = v7;
    v20 = -1;
    v21 = 0x1000000;
    v22 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v11, v10, 0, (uint64_t)&v18);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 12))
  {
    v13 = a3[2];
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    v14 = v13 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v15 = v18;
    v18 = 0;
    v19 = v7;
    v20 = -1;
    v21 = 0x1000000;
    v22 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v15, v14, 0, (uint64_t)&v18);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return v7;
}

{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 4))
  {
    v9 = *a3;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    v10 = v9 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v11 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v11, v10, 0, (uint64_t)&v26);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 12))
  {
    v13 = a3[2];
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    v14 = v13 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v15 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v15, v14, 0, (uint64_t)&v26);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 20))
  {
    v17 = a3[4];
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    v18 = v17 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v19 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v19, v18, 0, (uint64_t)&v26);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 28))
  {
    v21 = a3[6];
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    v22 = v21 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v23 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v23, v22, 0, (uint64_t)&v26);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  return v7;
}

{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *((_QWORD *)a3 + 1);
  if (!v11 || (v12 = *(_DWORD *)(v11 + 4)) == 0)
  {
    v13 = *(_QWORD *)(v10 + 41968);
    goto LABEL_9;
  }
  if (v12 != 1)
    goto LABEL_6;
  v20 = *(unsigned __int8 **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
    v21 = *v20;
LABEL_23:
    v13 = *(_QWORD *)(v10 + 8 * v21 + 42216);
    goto LABEL_9;
  }
  v22 = *(unsigned __int16 *)v20;
  if (v22 <= 0xFF)
  {
    v21 = v22;
    goto LABEL_23;
  }
LABEL_6:
  v13 = *(_QWORD *)(v10 + 64760);
  if (!v13 || v11 != *(_QWORD *)(v13 + 8))
    v13 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v23;
  v23 = 0;
  v24 = v8;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v14, v13, 0, (uint64_t)&v23);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v16 = WebCore::convertEnumerationToJS<WebCore::RTCSdpType>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*a3);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v23;
  v23 = 0;
  v24 = v8;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v17, v16, 0, (uint64_t)&v23);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  return v8;
}

{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 20))
  {
    v9 = a3[4];
    if ((int)v9 < 0)
      v10 = COERCE__INT64((double)v9) + 0x2000000000000;
    else
      v10 = v9 | 0xFFFE000000000000;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v11 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v11, v10, 0, (uint64_t)&v26);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 28))
  {
    v13 = a3[6];
    if ((int)v13 < 0)
      v14 = COERCE__INT64((double)v13) + 0x2000000000000;
    else
      v14 = v13 | 0xFFFE000000000000;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v15 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v15, v14, 0, (uint64_t)&v26);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 12))
  {
    v17 = a3[2];
    if ((int)v17 < 0)
      v18 = COERCE__INT64((double)v17) + 0x2000000000000;
    else
      v18 = v17 | 0xFFFE000000000000;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v19 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v19, v18, 0, (uint64_t)&v26);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 4))
  {
    v21 = *a3;
    if ((int)v21 < 0)
      v22 = COERCE__INT64((double)v21) + 0x2000000000000;
    else
      v22 = v21 | 0xFFFE000000000000;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v23 = v26;
    v26 = 0;
    v27 = v7;
    v28 = -1;
    v29 = 0x1000000;
    v30 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v23, v22, 0, (uint64_t)&v26);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  return v7;
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = WebCore::convertDictionaryToJS(a1, a2, a3 + 8);
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = v18;
  v18 = 0;
  v19 = v9;
  v20 = -1;
  v21 = 0x1000000;
  v22 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v12, v11, 0, (uint64_t)&v18);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  v14 = WebCore::convertDictionaryToJS(a1, a2, a3);
  if (*(_DWORD *)(v6 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v15 = v18;
  v18 = 0;
  v19 = v9;
  v20 = -1;
  v21 = 0x1000000;
  v22 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v18);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v9;
}

uint64_t WebCore::JSAudioWorkletProcessor::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v3 = a2[11];
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD **)(a1 + 24);
    v5 = (uint64_t *)v4[6];
    if (!v5 || (v5[1] & 3) != 0)
      v6 = 0;
    else
      v6 = *v5;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v6);
    v7 = (uint64_t *)v4[8];
    if (!v7 || (v7[1] & 3) != 0)
      v8 = 0;
    else
      v8 = *v7;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v8);
    v9 = (uint64_t *)v4[10];
    if (!v9 || (v9[1] & 3) != 0)
      v10 = 0;
    else
      v10 = *v9;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v10);
  }
  return result;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSAudioWorkletProcessor>::construct(JSC *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::AudioWorkletProcessor *v6;
  WebCore::ScriptExecutionContext *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v21;
  JSC::Structure *v22;
  JSC::JSCell *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  int v42;
  unint64_t SlowCase;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  JSC::VM *v49;
  JSC::JSCell *v50;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v52;
  JSC::JSGlobalObject *v53;
  JSC::VM *v54;
  JSC::Structure *v55;
  uint64_t FunctionRealm;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  int v64;
  JSC::JSObject *v65;
  unint64_t v66;
  WebCore::JSDOMGlobalObject *v67;
  JSC::Structure *v68;
  JSC::JSCell *v69;
  uint64_t v70;
  unint64_t SubclassStructure;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  JSValue v78;
  unint64_t v79;
  WebCore::JSAudioWorkletProcessor *v80;
  JSC::JSCell *v81;
  int v82[2];
  WTF::StringImpl *v83;
  int v84;
  JSC::VM *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  _QWORD *v89;

  v4 = *((_QWORD *)a1 + 7);
  v85 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (WebCore::AudioWorkletProcessor *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v85, (uint64_t)"AudioWorkletProcessor", 22);
  WebCore::AudioWorkletProcessor::create(v6, v7, (uint64_t)v82);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_92;
  if (!v84)
  {
    v8 = *(_QWORD *)(v5 + 40);
    v9 = *(WTF **)v82;
    *(_QWORD *)v82 = 0;
    v10 = *(_QWORD *)(v8 + 3296);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = ((unint64_t)&WebCore::JSAudioWorkletProcessor::s_info
           + ~((_QWORD)&WebCore::JSAudioWorkletProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorkletProcessor::s_info
                                                                           + ~((_QWORD)&WebCore::JSAudioWorkletProcessor::s_info << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(char ***)(v10 + 16 * v15);
      if (v16 == &WebCore::JSAudioWorkletProcessor::s_info)
      {
LABEL_9:
        v18 = *(_QWORD *)(v10 + 16 * v15 + 8);
        if (v18)
          goto LABEL_11;
      }
      else
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(char ***)(v10 + 16 * v15);
          ++v17;
          if (v16 == &WebCore::JSAudioWorkletProcessor::s_info)
            goto LABEL_9;
        }
      }
    }
    v19 = *(uint64_t **)(v8 + 56);
    Structure = WebCore::JSAudioWorkletProcessorPrototype::createStructure(v19, v8, *(JSC::JSCell **)(v8 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v23 = (JSC::JSCell *)WebCore::JSAudioWorkletProcessorPrototype::create((WebCore::JSAudioWorkletProcessorPrototype *)v19, Structure, v21, v22);
    v24 = WebCore::JSAudioWorkletProcessor::createStructure(v19, v8, v23);
    v18 = WebCore::cacheDOMStructure((JSCell *)v8, v24, (uint64_t)&WebCore::JSAudioWorkletProcessor::s_info);
LABEL_11:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = *(_QWORD *)(v25 + 41456);
    v27 = *(_QWORD *)(v26 + 23536);
    v28 = *(_QWORD **)(v27 + 1984);
    if (v28)
      goto LABEL_34;
    v29 = *(_QWORD *)(v26 + 22648);
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v29);
LABEL_16:
    v31 = *(_QWORD *)(v29 + 2824);
    v88 = *(_QWORD *)(v31 + 1984);
    if (!v88)
    {
      v32 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v86, "IsoSpace T");
      v89 = 0;
      MEMORY[0x19AEA3204](v32, &v86, v25 + 192, v25 + 1872, 32, 8, &v89);
      v34 = (uint64_t)v89;
      v89 = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v35 = v86;
      v86 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
          WTF::fastFree(v35, v33);
        else
          --*(_DWORD *)v35;
      }
      v88 = v32;
      v36 = *(_QWORD *)(v31 + 1984);
      *(_QWORD *)(v31 + 1984) = v32;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v37 = *(unsigned int *)(v29 + 2844);
      if ((_DWORD)v37 == *(_DWORD *)(v29 + 2840))
      {
        v38 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 2832, v37 + 1, (unint64_t)&v88);
        v37 = *(unsigned int *)(v29 + 2844);
        *(_QWORD *)(*(_QWORD *)(v29 + 2832) + 8 * v37) = *v38;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v29 + 2832) + 8 * v37) = v32;
      }
      *(_DWORD *)(v29 + 2844) = v37 + 1;
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v39 = *(_QWORD *)(v27 + 1984);
    *(_QWORD *)(v27 + 1984) = v28;
    if (v39)
    {
      v40 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v40, v41);
    }
    v42 = __ldxr((unsigned __int8 *)v29);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
      {
LABEL_34:
        SlowCase = v28[3];
        if (SlowCase >= v28[4])
        {
          SlowCase = v28[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_36;
          }
          v79 = *(_QWORD *)(SlowCase + 8) ^ v28[6];
          v28[4] = SlowCase + HIDWORD(v79);
          v28[5] = SlowCase + (int)v79;
        }
        v28[3] = SlowCase + 32;
LABEL_36:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v18);
        *(_QWORD *)(SlowCase + 24) = v9;
        if (*(_BYTE *)(v25 + 755))
          __dmb(0xAu);
        v44 = *(_QWORD *)(v8 + 3320);
        if ((byte_1EE334C00 & 1) == 0)
        {
          qword_1EE334BF8 = (uint64_t)&off_1E3222FE0;
          byte_1EE334C00 = 1;
        }
        if (!*(_DWORD *)(v44 + 48))
        {
          if ((SlowCase & 8) != 0)
            v45 = (SlowCase - 112) | 1;
          else
            v45 = SlowCase & 0xFFFFFFFFFFFFC000;
          if ((v45 & 1) != 0)
            v46 = v45 + 47;
          else
            v46 = *(_QWORD *)v45 + 32;
          Allocator = *(_QWORD **)(v46 + 16);
          if (!Allocator)
            Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
          *(_QWORD *)(v46 + 16) = *Allocator;
          *Allocator = SlowCase;
          Allocator[1] = &qword_1EE334BF8;
          Allocator[2] = v44;
          v48 = *(_QWORD *)v9;
          *(_QWORD *)v9 = Allocator;
          if (!v48)
            goto LABEL_49;
LABEL_75:
          *(_QWORD *)(v48 + 8) = 3;
          goto LABEL_49;
        }
        v86 = v9;
        if ((SlowCase & 8) != 0)
          v73 = (SlowCase - 112) | 1;
        else
          v73 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v73 & 1) != 0)
          v74 = v73 + 47;
        else
          v74 = *(_QWORD *)v73 + 32;
        v75 = *(_QWORD **)(v74 + 16);
        if (!v75)
          v75 = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v74 + 16) = *v75;
        *v75 = SlowCase;
        v75[1] = &qword_1EE334BF8;
        v75[2] = v44;
        v89 = v75;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)&v86, (uint64_t *)&v89);
        v48 = (uint64_t)v89;
        if (v89)
          goto LABEL_75;
LABEL_49:
        v49 = v85;
        if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
        {
LABEL_92:
          SlowCase = 0;
LABEL_64:
          if (v84 != -1)
            ((void (*)(WTF **, int *))off_1E3225030[v84])(&v86, v82);
          return (_QWORD *)SlowCase;
        }
        v50 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v50 & 0xFFFE000000000002) != 0
          || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v50)) == 0
          || (v53 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v54 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = JSC::getFunctionRealm(a1, Object, v52),
              *((_DWORD *)v54 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v54) & 1) != 0)
        {
LABEL_63:
          if (!*((_DWORD *)v49 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) == 0)
            goto LABEL_64;
          goto LABEL_92;
        }
        v57 = *(_QWORD *)(FunctionRealm + 3296);
        if (v57)
        {
          v58 = *(_DWORD *)(v57 - 8);
          v59 = ((unint64_t)&WebCore::JSAudioWorkletProcessor::s_info
               + ~((_QWORD)&WebCore::JSAudioWorkletProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorkletProcessor::s_info
                                                                               + ~((_QWORD)&WebCore::JSAudioWorkletProcessor::s_info << 32)) >> 22);
          v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
          v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
          v62 = v58 & ((v61 >> 31) ^ v61);
          v63 = *(char ***)(v57 + 16 * v62);
          if (v63 == &WebCore::JSAudioWorkletProcessor::s_info)
          {
LABEL_59:
            v65 = *(JSC::JSObject **)(v57 + 16 * v62 + 8);
            if (v65)
            {
LABEL_61:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v53, v65, v55);
              if (!*((_DWORD *)v54 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v54) & 1) == 0)
                JSC::JSObject::setStructure((JSCell *)SlowCase, v54, SubclassStructure);
              goto LABEL_63;
            }
          }
          else
          {
            v64 = 1;
            while (v63)
            {
              v62 = ((_DWORD)v62 + v64) & v58;
              v63 = *(char ***)(v57 + 16 * v62);
              ++v64;
              if (v63 == &WebCore::JSAudioWorkletProcessor::s_info)
                goto LABEL_59;
            }
          }
        }
        v66 = WebCore::JSAudioWorkletProcessorPrototype::createStructure((uint64_t *)v54, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
        *(_DWORD *)(v66 + 16) |= 0x80000u;
        v69 = (JSC::JSCell *)WebCore::JSAudioWorkletProcessorPrototype::create(v54, v66, v67, v68);
        v70 = WebCore::JSAudioWorkletProcessor::createStructure((uint64_t *)v54, FunctionRealm, v69);
        v65 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v70, (uint64_t)&WebCore::JSAudioWorkletProcessor::s_info);
        goto LABEL_61;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    goto LABEL_34;
  }
  if (v84 == 1)
  {
    v76 = (WTF::StringImpl *)LOBYTE(v82[0]);
    LOBYTE(v86) = v82[0];
    v77 = v83;
    v83 = 0;
    v87 = v77;
    if (!*(_QWORD *)(v4 + 16))
    {
      v78.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v82[0]), (JSC::JSGlobalObject *)&v87);
      JSC::VM::throwException((JSC::VM *)v4, a1, v78);
      v77 = v87;
    }
    v87 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v76);
      else
        *(_DWORD *)v77 -= 2;
    }
    SlowCase = 0;
    goto LABEL_49;
  }
  v80 = (WebCore::JSAudioWorkletProcessor *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::JSAudioWorkletProcessor::destroy(v80, v81);
}

uint64_t *WebCore::JSAudioWorkletProcessor::destroy(WebCore::JSAudioWorkletProcessor *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::AudioWorkletProcessor,WTF::RawPtrTraits<WebCore::AudioWorkletProcessor>,WTF::DefaultRefDerefTraits<WebCore::AudioWorkletProcessor>>::~Ref((uint64_t *)this + 3, a2);
}

uint64_t WebCore::JSAudioWorkletProcessor::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSAudioWorkletProcessor::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSAudioWorkletProcessor::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSAudioWorkletProcessor::visitChildren(WebCore::JSAudioWorkletProcessor *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;
  char v16;

  v14[0] = a2;
  v14[1] = this;
  v16 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v15 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v14;
    JSC::JSObject::visitChildren();
    v6 = (_QWORD *)*((_QWORD *)this + 3);
    v7 = (uint64_t *)v6[6];
    if (!v7 || (v7[1] & 3) != 0)
      v8 = 0;
    else
      v8 = *v7;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v8);
    v9 = (uint64_t *)v6[8];
    if (!v9 || (v9[1] & 3) != 0)
      v10 = 0;
    else
      v10 = *v9;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v10);
    v11 = (uint64_t *)v6[10];
    if (!v11 || (v11[1] & 3) != 0)
      v12 = 0;
    else
      v12 = *v11;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v12);
    *(_QWORD *)(v14[0] + 88) = v15;
  }
  return result;
}

uint64_t WebCore::JSAudioWorkletProcessorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAudioWorkletProcessorPrototype::create(WebCore::JSAudioWorkletProcessorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSAudioWorkletProcessor::s_info, (uint64_t)&WebCore::JSAudioWorkletProcessorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioWorkletProcessor>,(WebCore::DOMConstructorID)245>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1960);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSAudioWorkletProcessor>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAudioWorkletProcessor::s_info
         + ~((_QWORD)&WebCore::JSAudioWorkletProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSAudioWorkletProcessor::s_info
                                                                         + ~((_QWORD)&WebCore::JSAudioWorkletProcessor::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAudioWorkletProcessor::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAudioWorkletProcessor::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAudioWorkletProcessorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSAudioWorkletProcessorPrototype::create((WebCore::JSAudioWorkletProcessorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSAudioWorkletProcessor::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSAudioWorkletProcessor::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1960) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAudioWorkletProcessorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAudioWorkletProcessorPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSAudioWorkletProcessor>,(WebCore::DOMConstructorID)245>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsAudioWorkletProcessor_port(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MessagePort>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32));
}

uint64_t WebCore::JSAudioWorkletProcessorOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from AudioWorkletProcessor";
    a5[1] = 37;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19486141CLL);
      }
    }
  }
  return result;
}

void WebCore::JSAudioWorkletProcessorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v40;

  v4 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v5 = v4[1];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    v22 = *(_QWORD *)(a3 + 32);
    v21 = (uint64_t *)(a3 + 32);
    v20 = v22;
    if (v22)
    {
      v23 = *(_DWORD *)(v20 - 8);
      v24 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(_QWORD **)(v20 + 16 * v27);
      if (v28 != v4)
      {
        v29 = 1;
        while (v28)
        {
          v27 = ((_DWORD)v27 + v29) & v23;
          v28 = *(_QWORD **)(v20 + 16 * v27);
          ++v29;
          if (v28 == v4)
            goto LABEL_47;
        }
        v27 = *(unsigned int *)(v20 - 4);
      }
LABEL_47:
      if (v27 != *(_DWORD *)(v20 - 4))
      {
        v30 = (_QWORD *)(v20 + 16 * v27);
        *v30 = -1;
        v33 = v30[1];
        v32 = v30 + 1;
        v31 = v33;
        if (v33)
        {
          *(_QWORD *)(v31 + 8) = 3;
          *v32 = 0;
        }
        ++*(_DWORD *)(*v21 - 16);
        v34 = *v21;
        if (*v21)
          v35 = *(_DWORD *)(v34 - 12) - 1;
        else
          v35 = -1;
        *(_DWORD *)(v34 - 12) = v35;
        v36 = *v21;
        if (*v21)
        {
          v37 = 6 * *(_DWORD *)(v36 - 12);
          v38 = *(_DWORD *)(v36 - 4);
          if (v37 < v38 && v38 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v21, v38 >> 1, 0);
        }
      }
    }
  }
  else if (*v4)
  {
    *(_QWORD *)(*v4 + 8) = 3;
    *v4 = 0;
  }
  v8 = v4[1];
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_17:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v40 = *(_QWORD *)(v8 + 16);
    v12 = *(bmalloc::api **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v40 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_24;
  if (v11)
    return;
LABEL_25:
  if (v12)
  {
    v15 = *((_QWORD *)v12 + 10);
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      *((_QWORD *)v12 + 10) = 0;
    }
    v16 = *((_QWORD *)v12 + 8);
    if (v16)
    {
      *(_QWORD *)(v16 + 8) = 3;
      *((_QWORD *)v12 + 8) = 0;
    }
    v17 = *((_QWORD *)v12 + 6);
    if (v17)
    {
      *(_QWORD *)(v17 + 8) = 3;
      *((_QWORD *)v12 + 6) = 0;
    }
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)v12 + 4, a2);
    v19 = (WTF::StringImpl *)*((_QWORD *)v12 + 3);
    *((_QWORD *)v12 + 3) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*(_QWORD *)v12)
    {
      *(_QWORD *)(*(_QWORD *)v12 + 8) = 3;
      *(_QWORD *)v12 = 0;
    }
    bmalloc::api::isoDeallocate(v12, v18);
  }
  if (!v13)
    WTF::fastFree((WTF *)v8, a2);
}

void WebCore::JSAudioWorkletProcessorConstructor::~JSAudioWorkletProcessorConstructor(WebCore::JSAudioWorkletProcessorConstructor *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSAudioWorkletProcessorConstructor::handleEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Structure *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t *v24;
  int v25;
  _QWORD *v26;
  void *v27;
  _BYTE v28[8];
  uint64_t v29;
  WTF *v30;
  _OWORD v31[4];
  uint64_t v32;
  _BYTE v33[8];
  uint64_t *v34;

  result = WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2);
  if ((result & 1) == 0)
  {
    *a3 = 2;
    a3[2] = 1;
    return result;
  }
  ++*(_DWORD *)(a1 + 16);
  v7 = **(uint64_t ***)(a1 + 24);
  if (!v7 || (v7[1] & 3) != 0)
    v8 = 0;
  else
    v8 = *v7;
  MEMORY[0x19AEA3294](v33, *(_QWORD *)(v8 + 56));
  v28[0] = 0;
  v29 = 0x800000000;
  v30 = (WTF *)((char *)v31 + 8);
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v10 = (_QWORD *)*a2;
  if (*a2)
    v10 = (_QWORD *)*v10;
  *((_QWORD *)&v31[0] + 1) = v10;
  LODWORD(v29) = 1;
  v27 = 0;
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *v11;
  if (!*v11 || (*(_BYTE *)(v12 + 8) & 3) != 0 || !*(_QWORD *)v12)
  {
    v15 = 0;
    v34 = *(uint64_t **)(v8 + 56);
    goto LABEL_17;
  }
  v13 = v11[2];
  if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
    v14 = 0;
  else
    v14 = *(JSC::Structure **)v13;
  v15 = WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v12, v14, 10, (uint64_t)v28, 0, 0, (uint64_t *)&v27);
  v9 = v27;
  if (!v27)
  {
    v34 = *(uint64_t **)(v8 + 56);
    if ((v15 & 0xFFFE000000000002) != 0)
    {
LABEL_29:
      JSC::throwTypeError();
      goto LABEL_30;
    }
LABEL_17:
    v16 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
    v17 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      if ((char **)v18 != &WebCore::JSAudioWorkletProcessor::s_info)
      {
        do
        {
          v18 = *(_QWORD *)(v18 + 16);
          v17 = v18 != 0;
        }
        while ((char **)v18 != &WebCore::JSAudioWorkletProcessor::s_info && v18 != 0);
      }
    }
    if (!v17)
      goto LABEL_29;
    v20 = *(_QWORD *)(v15 + 24);
    if (!v20)
      goto LABEL_29;
    v21 = *(_QWORD *)(v20 + 8);
    if (__ldaxr((unsigned __int8 *)v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v21))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v21);
LABEL_40:
    ++*(_QWORD *)(v21 + 8);
    v25 = __ldxr((unsigned __int8 *)v21);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
        goto LABEL_45;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_45:
    v23 = 0;
    *(_QWORD *)a3 = v20;
    goto LABEL_31;
  }
  WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v27, 0, 0, 0);
LABEL_30:
  v23 = 1;
  *a3 = 1;
LABEL_31:
  a3[2] = v23;
  v24 = *(uint64_t **)&v31[0];
  if (*(_QWORD *)&v31[0])
  {
    v34 = &v29;
    v26 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v31[0], (uint64_t *)&v34);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v24, v26);
  }
  if (v30 != (WTF *)((char *)v31 + 8) && v30)
    WTF::fastFree(v30, v9);
  result = MEMORY[0x19AEA32A0](v33);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    else
      --*(_DWORD *)(a1 + 16);
  }
  return result;
}

void WebCore::convertDictionary<WebCore::AuthenticationExtensionsClientInputs>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  BOOL v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  JSC::Structure *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  JSC::VM *v31;
  double v32;
  __int16 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  JSC::VM *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  JSC::JSArrayBufferView *v41;
  JSC::ArrayBufferView *v42;
  int v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  int v49;
  int v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  char v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  JSC::VM *v58;
  uint64_t v59;
  JSC::Structure *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  JSC::JSCell *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  WTF::StringImpl *v71;
  JSC::VM *v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  JSC::JSCell *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  char *v90;
  char *v91;
  unsigned int v92;
  WTF *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  char *v98;
  _DWORD *v99;
  uint64_t v100;
  WTF *v101;
  char *v102;
  _BYTE *v103;
  char *v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF *v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  int v123;
  uint64_t v124;
  int v125;
  WTF *v126;
  uint64_t v127;
  int v128;
  WTF *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl **v132;
  WTF::StringImpl *v133;
  WTF *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF *v148;
  int v149;
  int v150;
  int v151;
  WTF *v152;
  unint64_t v153;
  WTF *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  WTF *v166;
  unint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  WTF *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  int v178;
  int v179;
  uint64_t v180;
  WTF::StringImpl **v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF *v184;
  char hasExceptionsAfterHandlingTraps;
  int v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  int *v191;
  int v192;
  uint64_t v193;
  BOOL v194;
  int v195;
  uint64_t v196;
  int *v197;
  int v198;
  JSC::VM *v199;
  WTF *v200;
  WTF *v201;
  unsigned int v202;
  WTF::StringImpl *v203;
  BOOL v204;
  WTF::StringImpl *v205;
  __int16 v206;
  char v207[8];
  int v208;
  char v209;
  char v210;
  char v211[8];
  int v212;
  char v213[8];
  int v214;
  char v215;
  char v216;
  _QWORD v217[2];
  char v218;
  char v219;
  uint64_t v220;
  WTF *v221;
  uint64_t v222;
  int v223;
  JSC::VM *v224;
  uint64_t v225;
  unsigned int v226;
  char v227[8];
  int v228;
  unsigned __int8 v229;
  WTF::StringImpl *v230;
  int v231;
  int v232;
  int v233;
  int v234;
  char v235;
  WTF::StringImpl *v236;
  WTF *v237;
  uint64_t v238;
  JSC::VM *v239;
  __int16 v240;
  WTF::StringImpl **v241;
  WTF *v242;
  uint64_t v243;
  JSC::VM *v244;
  char v245;
  WTF::StringImpl *v246;
  int v247;
  int v248;
  int v249;
  int v250;
  char v251;
  unsigned __int8 v252;
  WTF *v253;
  unint64_t v254;
  unsigned __int8 v255;
  int v256;
  WTF::StringImpl *v257;
  JSC::ArrayBufferView *v258;
  int v259;
  int v260;
  char v261;
  char v262;
  WTF *v263;
  unint64_t v264;
  unsigned __int8 v265;
  WTF::StringImpl *v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  unsigned __int8 v271;
  unsigned int v272;
  JSC::ArrayBufferView *v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF *v279;
  unint64_t v280;
  unsigned __int8 v281;
  _QWORD v282[4];

  v282[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 7);
  v220 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v203 = 0;
    LOBYTE(v205) = 0;
    v210 = 0;
    v211[0] = 0;
    v219 = 0;
    goto LABEL_439;
  }
  v6 = 0xFFFE000000000002;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    *(_DWORD *)(a3 + 144) = 1;
    return;
  }
  v8 = (JSC::Structure *)Object;
  v203 = 0;
  LOBYTE(v205) = 0;
  v210 = 0;
  v211[0] = 0;
  v219 = 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, a2, (unint64_t)v273);
  if (v273)
  {
    if (*(_DWORD *)v273 == 2)
      WTF::StringImpl::destroy(v273, v9);
    else
      *(_DWORD *)v273 -= 2;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_471;
  if (v10 != 10)
  {
    WebCore::valueToUSVString(a2, v10, (uint64_t)&v273);
    v12 = v274;
    if (v274)
    {
      *(_DWORD *)(a3 + 144) = 1;
      v15 = v12;
    }
    else
    {
      v13 = v273;
      v273 = 0;
      v14 = v203;
      v203 = v13;
      if (!v14)
      {
        v15 = 0;
        goto LABEL_14;
      }
      if (*(_DWORD *)v14 != 2)
      {
        v15 = 0;
        *(_DWORD *)v14 -= 2;
        goto LABEL_14;
      }
      WTF::StringImpl::destroy(v14, v11);
      v15 = v274;
    }
    if (v15 == -1)
    {
LABEL_15:
      if (v12)
        goto LABEL_441;
      goto LABEL_16;
    }
LABEL_14:
    ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E3223358[v15])(&v246, &v273);
    goto LABEL_15;
  }
LABEL_16:
  WTF::AtomStringImpl::addLiteral();
  v16 = v273;
  v18 = JSC::JSObject::get(v8, a2, (unint64_t)v273);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_471;
  if (v18 != 10)
  {
    v19 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (v18 >= 0xFFFE000000000000)
    {
      v188 = (_DWORD)v18 == 0;
      goto LABEL_522;
    }
    *(_QWORD *)&v20 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v20 <= 0.0)
      {
        v21 = v20 < 0.0;
        goto LABEL_25;
      }
    }
    else
    {
      if ((v18 & 0xFFFE000000000002) != 0)
      {
        v21 = v18 == 7;
        goto LABEL_25;
      }
      v189 = *(unsigned __int8 *)(v18 + 5);
      if (v189 == 3)
      {
        v192 = *(_DWORD *)(v18 + 8);
LABEL_508:
        v188 = v192 == 0;
        goto LABEL_522;
      }
      if (v189 == 2)
      {
        v190 = *(_QWORD *)(v18 + 8);
        if ((v190 & 1) != 0)
          v191 = (int *)(v18 + 16);
        else
          v191 = (int *)(v190 + 4);
        v192 = *v191;
        goto LABEL_508;
      }
      v193 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v193 + 0xA) & 1) != 0)
        goto LABEL_521;
    }
    v21 = 1;
    goto LABEL_25;
  }
  while (2)
  {
    WTF::AtomStringImpl::addLiteral();
    v22 = v273;
    v24 = JSC::JSObject::get(v8, a2, (unint64_t)v273);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      break;
    if (v24 == 10)
      goto LABEL_118;
    v25 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    v230 = v25;
    if ((v24 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if ((v24 & v6) != 0 || (v26 = JSC::JSCell::getObject((JSC::JSCell *)v24)) == 0)
      {
        JSC::throwTypeError();
        v47 = 1;
        LODWORD(v278) = 1;
LABEL_443:
        v54 = 0;
        *(_DWORD *)(a3 + 144) = 1;
        goto LABEL_115;
      }
      v27 = (JSC::Structure *)v26;
      v246 = 0;
      LOWORD(v247) = 0;
      LOBYTE(v248) = 0;
      LOBYTE(v250) = 0;
      WTF::AtomStringImpl::addLiteral();
      v28 = v273;
      v30 = JSC::JSObject::get(v27, a2, (unint64_t)v273);
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v29);
        else
          *(_DWORD *)v28 -= 2;
      }
      if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
        goto LABEL_483;
      if (v30 == 10)
        goto LABEL_47;
      v31 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if (v30 >= 0xFFFE000000000000)
      {
        v194 = (_DWORD)v30 == 0;
        goto LABEL_527;
      }
      *(_QWORD *)&v32 = v30 - 0x2000000000000;
      if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v32 <= 0.0)
        {
          v33 = v32 < 0.0;
          goto LABEL_45;
        }
      }
      else
      {
        if ((v30 & v6) != 0)
        {
          v33 = v30 == 7;
          goto LABEL_45;
        }
        v195 = *(unsigned __int8 *)(v30 + 5);
        if (v195 == 3)
        {
          v198 = *(_DWORD *)(v30 + 8);
LABEL_526:
          v194 = v198 == 0;
          goto LABEL_527;
        }
        if (v195 == 2)
        {
          v196 = *(_QWORD *)(v30 + 8);
          if ((v196 & 1) != 0)
            v197 = (int *)(v30 + 16);
          else
            v197 = (int *)(v196 + 4);
          v198 = *v197;
          goto LABEL_526;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v194 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_527:
          v33 = !v194;
          goto LABEL_45;
        }
      }
      v33 = 1;
LABEL_45:
      if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
        goto LABEL_483;
      LOWORD(v247) = v33 | 0x100;
LABEL_47:
      WTF::AtomStringImpl::addLiteral();
      v34 = v273;
      v35 = JSC::JSObject::get(v27, a2, (unint64_t)v273);
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v23);
        else
          *(_DWORD *)v34 -= 2;
      }
      if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
        goto LABEL_483;
      if (v35 == 10)
        goto LABEL_64;
      v273 = (JSC::ArrayBufferView *)v35;
      v36 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v35 & v6) != 0 || *(_BYTE *)(v35 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v273, a2);
LABEL_58:
        if (!*((_DWORD *)v36 + 20))
        {
          v38 = v266;
LABEL_60:
          LODWORD(v258) = 0;
          goto LABEL_61;
        }
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
        v38 = v266;
        if ((hasExceptionsAfterHandlingTraps & 1) == 0)
          goto LABEL_60;
        v187 = 1;
        LODWORD(v258) = 1;
        v266 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::destroy(v38, v23);
            v187 = (int)v258;
            if (!(_DWORD)v258)
            {
              v38 = v257;
LABEL_61:
              v257 = 0;
              v39 = v246;
              v246 = v38;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::destroy(v39, v23);
                  if ((_DWORD)v258 != -1)
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3223358[v258])(&v266, &v257);
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
LABEL_64:
              WTF::AtomStringImpl::addLiteral();
              v40 = v273;
              v41 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v27, a2, (unint64_t)v273);
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v23);
                else
                  *(_DWORD *)v40 -= 2;
              }
              if (!*((_DWORD *)v25 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v25))
              {
                if (v41 != (JSC::JSArrayBufferView *)10)
                {
                  v266 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
                  v42 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v266, (uint64_t)v41);
                  if (v42)
                  {
                    *(_DWORD *)v42 += 2;
                    v43 = 1;
                    v274 = 1;
                    v273 = 0;
                    v258 = v42;
                    v259 = 1;
                    v260 = 0;
                    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v225);
                  }
                  else
                  {
                    JSC::JSArrayBufferView::toWrapped(v41, &v273);
                    if (!v273)
                    {
                      JSC::throwTypeError();
                      LODWORD(v278) = 1;
                      goto LABEL_88;
                    }
                    v43 = 0;
                    v258 = v273;
                    v259 = 0;
                    v260 = 0;
                  }
                  LOBYTE(v273) = 0;
                  v274 = -1;
                  ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32233A0[v43])(&v266, &v273, &v258);
                  v274 = v43;
                  std::optional<WebCore::BufferSource>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,void>((uint64_t)&v248, (uint64_t)&v273);
                  if (v274 != -1)
                    ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E3223390[v274])(&v266, &v273);
                  if (v260 != -1)
                    ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32233C0[v260])(&v273, &v258);
                }
                goto LABEL_83;
              }
LABEL_483:
              LODWORD(v278) = 1;
              goto LABEL_88;
            }
            LODWORD(v278) = 1;
            if ((_DWORD)v258 == -1)
              goto LABEL_88;
LABEL_489:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3223358[v187])(&v266, &v257);
            goto LABEL_88;
          }
          *(_DWORD *)v38 -= 2;
        }
        LODWORD(v278) = 1;
        goto LABEL_489;
      }
      v37 = *(_QWORD *)(v35 + 8);
      if ((v37 & 1) != 0)
      {
        v37 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v35, a2);
        if (!v37)
          goto LABEL_57;
      }
      else if (!v37)
      {
LABEL_57:
        v266 = (WTF::StringImpl *)v37;
        goto LABEL_58;
      }
      *(_DWORD *)v37 += 2;
      goto LABEL_57;
    }
    v246 = 0;
    LOWORD(v247) = 0;
    LOBYTE(v248) = 0;
    LOBYTE(v250) = 0;
LABEL_83:
    v44 = v246;
    v246 = 0;
    v273 = v44;
    LOWORD(v274) = v247;
    LOBYTE(v275) = 0;
    LOBYTE(v277) = 0;
    if ((_BYTE)v250)
    {
      LODWORD(v276) = -1;
      v45 = v249;
      if (v249 != -1)
      {
        ((void (*)(WTF::StringImpl **, unint64_t *, int *))off_1E32233A0[v249])(&v257, &v275, &v248);
        LODWORD(v276) = v45;
      }
      LOBYTE(v277) = 1;
    }
    LODWORD(v278) = 0;
LABEL_88:
    if ((_BYTE)v250)
    {
      if (v249 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E3223390[v249])(&v257, &v248);
      v249 = -1;
    }
    v46 = v246;
    v246 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v23);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v278;
    if ((_DWORD)v278)
      goto LABEL_443;
    v48 = v273;
    v273 = 0;
    v246 = v48;
    LOWORD(v247) = v274;
    LOBYTE(v248) = 0;
    LOBYTE(v250) = 0;
    v49 = v277;
    if ((_BYTE)v277)
    {
      v249 = -1;
      v50 = v276;
      if ((_DWORD)v276 != -1)
      {
        ((void (*)(WTF::StringImpl **, int *, unint64_t *))off_1E32233A0[v276])(&v257, &v248, &v275);
        v249 = v50;
      }
      LOBYTE(v250) = 1;
    }
    if (v210)
    {
      WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=((uint64_t)&v205, (WTF::StringImpl *)&v246);
    }
    else
    {
      v51 = v246;
      v246 = 0;
      v205 = v51;
      v206 = v247;
      v207[0] = 0;
      v209 = 0;
      if (v49)
      {
        v208 = -1;
        v52 = v249;
        if (v249 != -1)
        {
          ((void (*)(WTF::StringImpl **, char *, int *))off_1E32233A0[v249])(&v257, v207, &v248);
          v208 = v52;
        }
        v209 = 1;
      }
      v210 = 1;
    }
    if ((_BYTE)v250)
    {
      if (v249 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E3223390[v249])(&v257, &v248);
      v249 = -1;
    }
    v53 = v246;
    v246 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v23);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = 1;
    v47 = v278;
LABEL_115:
    if (v47 != -1)
      ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E3225090[v47])(&v246, &v273);
    if ((v54 & 1) == 0)
      goto LABEL_441;
LABEL_118:
    WTF::AtomStringImpl::addLiteral();
    v55 = v273;
    v57 = JSC::JSObject::get(v8, a2, (unint64_t)v273);
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v56);
      else
        *(_DWORD *)v55 -= 2;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      break;
    if (v57 == 10)
      goto LABEL_439;
    v58 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v224 = v58;
    if ((v57 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      LOBYTE(v257) = 0;
      v262 = 0;
      LOBYTE(v263) = 0;
      v265 = 0;
      goto LABEL_352;
    }
    if ((v57 & v6) != 0 || (v59 = JSC::JSCell::getObject((JSC::JSCell *)v57)) == 0)
    {
      JSC::throwTypeError();
      v161 = 1;
      v256 = 1;
      goto LABEL_459;
    }
    v60 = (JSC::Structure *)v59;
    LOBYTE(v257) = 0;
    v262 = 0;
    LOBYTE(v263) = 0;
    v265 = 0;
    WTF::AtomStringImpl::addLiteral();
    v61 = v273;
    v63 = (JSC::JSCell *)JSC::JSObject::get(v60, a2, (unint64_t)v273);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v62);
      else
        *(_DWORD *)v61 -= 2;
    }
    if (*((_DWORD *)v58 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) != 0)
    {
LABEL_481:
      v151 = 1;
      goto LABEL_362;
    }
    if (v63 != (JSC::JSCell *)10)
    {
      WebCore::convertDictionary<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)&v273, (JSC::VM **)a2, v63);
      v64 = (int)v279;
      if ((_DWORD)v279)
      {
        v256 = 1;
        v70 = (int)v279;
      }
      else
      {
        LOBYTE(v246) = 0;
        v247 = -1;
        v65 = v275;
        if ((_DWORD)v275 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **, int *))off_1E32233A0[v275])(&v266, &v246, &v274);
          v247 = v65;
        }
        LOBYTE(v248) = 0;
        LOBYTE(v250) = 0;
        v66 = v278;
        if ((_BYTE)v278)
        {
          v249 = -1;
          v67 = v277;
          if ((_DWORD)v277 != -1)
          {
            ((void (*)(WTF::StringImpl **, int *, uint64_t *))off_1E32233A0[v277])(&v266, &v248, &v276);
            v249 = v67;
          }
          v66 = 1;
          LOBYTE(v250) = 1;
        }
        if (v262)
        {
          WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=((uint64_t)&v257, (uint64_t)&v246);
        }
        else
        {
          LOBYTE(v257) = 0;
          LODWORD(v258) = -1;
          v68 = v247;
          if (v247 != -1)
          {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))off_1E32233A0[v247])(&v266, &v257, &v246);
            LODWORD(v258) = v68;
            v66 = v250;
          }
          LOBYTE(v259) = 0;
          v261 = 0;
          if (v66)
          {
            v260 = -1;
            v69 = v249;
            if (v249 != -1)
            {
              ((void (*)(WTF::StringImpl **, int *, int *))off_1E32233A0[v249])(&v266, &v259, &v248);
              v260 = v69;
            }
            v261 = 1;
          }
          v262 = 1;
        }
        if ((_BYTE)v250)
        {
          if (v249 != -1)
            ((void (*)(WTF::StringImpl **, int *))off_1E3223390[v249])(&v266, &v248);
          v249 = -1;
        }
        if (v247 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3223390[v247])(&v266, &v246);
        v70 = (int)v279;
      }
      if (v70 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E32250B0[v70])(&v266, &v274);
      if (v64)
        goto LABEL_363;
    }
    WTF::AtomStringImpl::addLiteral();
    v71 = v273;
    v4 = JSC::JSObject::get(v60, a2, (unint64_t)v273);
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v56);
      else
        *(_DWORD *)v71 -= 2;
    }
    if (*((_DWORD *)v58 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) != 0)
      goto LABEL_481;
    if (v4 == 10)
      goto LABEL_352;
    v72 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v244 = v72;
    if ((v4 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v223 = 0;
LABEL_332:
      v221 = 0;
      v222 = 0;
      if (v265)
      {
        if (HIDWORD(v264))
        {
          v141 = 0;
          v142 = v263;
          v143 = 48 * HIDWORD(v264);
          do
          {
            v144 = (char *)v142 + v141;
            if (*((_BYTE *)v142 + v141 + 40))
            {
              v145 = *((unsigned int *)v144 + 8);
              if ((_DWORD)v145 != -1)
                ((void (*)(JSC::ArrayBufferView **, char *))off_1E3223390[v145])(&v273, v144 + 24);
              *((_DWORD *)v144 + 8) = -1;
            }
            v146 = *((unsigned int *)v144 + 4);
            if ((_DWORD)v146 != -1)
              ((void (*)(JSC::ArrayBufferView **, char *))off_1E3223390[v146])(&v273, v144 + 8);
            *((_DWORD *)v144 + 4) = -1;
            v147 = *(WTF::StringImpl **)v144;
            *(_QWORD *)v144 = 0;
            if (v147)
            {
              if (*(_DWORD *)v147 == 2)
                WTF::StringImpl::destroy(v147, v56);
              else
                *(_DWORD *)v147 -= 2;
            }
            v141 += 48;
          }
          while (v143 != v141);
        }
        v148 = v263;
        if (v263)
        {
          v263 = 0;
          LODWORD(v264) = 0;
          WTF::fastFree(v148, v56);
        }
        v263 = v75;
        v264 = __PAIR64__(v73, v74);
        if (v223 != -1)
          ((void (*)(JSC::ArrayBufferView **, WTF **))off_1E32250C0[v223])(&v273, &v221);
      }
      else
      {
        v263 = v75;
        v264 = __PAIR64__(v73, v74);
        v265 = 1;
      }
LABEL_352:
      LOBYTE(v247) = 0;
      v252 = 0;
      if (v262)
      {
        v248 = -1;
        v149 = (int)v258;
        if ((_DWORD)v258 != -1)
        {
          ((void (*)(JSC::ArrayBufferView **, int *, WTF::StringImpl **))off_1E32233A0[v258])(&v273, &v247, &v257);
          v248 = v149;
        }
        LOBYTE(v249) = 0;
        v251 = 0;
        if (v261)
        {
          v250 = -1;
          v150 = v260;
          if (v260 != -1)
          {
            ((void (*)(JSC::ArrayBufferView **, int *, int *))off_1E32233A0[v260])(&v273, &v249, &v259);
            v250 = v150;
          }
          v251 = 1;
        }
        v252 = 1;
      }
      LOBYTE(v253) = 0;
      v255 = 0;
      v151 = v265;
      if (v265)
      {
        v151 = 0;
        v152 = v263;
        v263 = 0;
        v253 = v152;
        v153 = v264;
        v264 = 0;
        v254 = v153;
        v255 = 1;
      }
LABEL_362:
      v256 = v151;
      goto LABEL_363;
    }
    if ((v4 & v6) != 0 || *(unsigned __int8 *)(v4 + 5) <= 0x16u)
    {
      JSC::throwTypeError();
      v125 = 1;
      v223 = 1;
      v256 = 1;
LABEL_283:
      ((void (*)(JSC::ArrayBufferView **, WTF **))off_1E32250C0[v125])(&v273, &v221);
      goto LABEL_363;
    }
    v242 = 0;
    v243 = 0;
    v241 = 0;
    v76 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v76 = 1;
    *((_QWORD *)v76 + 1) = (char *)v76 + 24;
    *((_QWORD *)v76 + 2) = 20;
    v237 = v76;
    v238 = 0;
    v239 = v72;
    v240 = 259;
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF **, _QWORD))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v4 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x78))(v4, a2, &v237, 0);
    if (*((_DWORD *)v72 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
    {
      v128 = 1;
      goto LABEL_297;
    }
    v77 = *((unsigned int *)v237 + 5);
    if (!(_DWORD)v77)
    {
      v126 = 0;
      v127 = 0;
LABEL_296:
      v128 = 0;
      v242 = 0;
      v243 = 0;
      v221 = v126;
      v222 = v127;
LABEL_297:
      v223 = v128;
LABEL_298:
      if (v238)
        WTF::fastFree((WTF *)(v238 - 16), v56);
      v129 = v237;
      v237 = 0;
      if (v129)
      {
        if (*(_DWORD *)v129 == 1)
        {
          v180 = *((unsigned int *)v129 + 5);
          if ((_DWORD)v180)
          {
            v181 = (WTF::StringImpl **)*((_QWORD *)v129 + 1);
            v182 = 8 * v180;
            do
            {
              v183 = *v181;
              *v181 = 0;
              if (v183)
              {
                if (*(_DWORD *)v183 == 2)
                  WTF::StringImpl::destroy(v183, v56);
                else
                  *(_DWORD *)v183 -= 2;
              }
              ++v181;
              v182 -= 8;
            }
            while (v182);
          }
          v184 = (WTF *)*((_QWORD *)v129 + 1);
          if ((WTF *)((char *)v129 + 24) != v184 && v184 != 0)
          {
            *((_QWORD *)v129 + 1) = 0;
            *((_DWORD *)v129 + 4) = 0;
            WTF::fastFree(v184, v56);
          }
          WTF::fastFree(v129, v56);
        }
        else
        {
          --*(_DWORD *)v129;
        }
      }
      v130 = (uint64_t)v241;
      if (v241)
      {
        v131 = *((unsigned int *)v241 - 1);
        if ((_DWORD)v131)
        {
          v132 = v241;
          do
          {
            v133 = *v132;
            if (*v132 != (WTF::StringImpl *)-1)
            {
              *v132 = 0;
              if (v133)
              {
                if (*(_DWORD *)v133 == 2)
                  WTF::StringImpl::destroy(v133, v56);
                else
                  *(_DWORD *)v133 -= 2;
              }
            }
            v132 += 2;
            --v131;
          }
          while (v131);
        }
        WTF::fastFree((WTF *)(v130 - 16), v56);
      }
      v134 = v242;
      if (HIDWORD(v243))
      {
        v135 = 0;
        v136 = 48 * HIDWORD(v243);
        do
        {
          v137 = (char *)v134 + v135;
          if (*((_BYTE *)v134 + v135 + 40))
          {
            v138 = *((unsigned int *)v137 + 8);
            if ((_DWORD)v138 != -1)
              ((void (*)(JSC::ArrayBufferView **, char *))off_1E3223390[v138])(&v273, v137 + 24);
            *((_DWORD *)v137 + 8) = -1;
          }
          v139 = *((unsigned int *)v137 + 4);
          if ((_DWORD)v139 != -1)
            ((void (*)(JSC::ArrayBufferView **, char *))off_1E3223390[v139])(&v273, v137 + 8);
          *((_DWORD *)v137 + 4) = -1;
          v140 = *(WTF::StringImpl **)v137;
          *(_QWORD *)v137 = 0;
          if (v140)
          {
            if (*(_DWORD *)v140 == 2)
              WTF::StringImpl::destroy(v140, v56);
            else
              *(_DWORD *)v140 -= 2;
          }
          v135 += 48;
        }
        while (v136 != v135);
        v134 = v242;
      }
      if (v134)
        WTF::fastFree(v134, v56);
      v125 = v223;
      if (!v223)
      {
        v75 = v221;
        v74 = v222;
        v73 = HIDWORD(v222);
        goto LABEL_332;
      }
      v256 = 1;
      if (v223 != -1)
        goto LABEL_283;
LABEL_363:
      if (v265)
      {
        v154 = v263;
        if (HIDWORD(v264))
        {
          v155 = 0;
          v156 = 48 * HIDWORD(v264);
          do
          {
            v157 = (char *)v154 + v155;
            if (*((_BYTE *)v154 + v155 + 40))
            {
              v158 = *((unsigned int *)v157 + 8);
              if ((_DWORD)v158 != -1)
                ((void (*)(JSC::ArrayBufferView **, char *))off_1E3223390[v158])(&v273, v157 + 24);
              *((_DWORD *)v157 + 8) = -1;
            }
            v159 = *((unsigned int *)v157 + 4);
            if ((_DWORD)v159 != -1)
              ((void (*)(JSC::ArrayBufferView **, char *))off_1E3223390[v159])(&v273, v157 + 8);
            *((_DWORD *)v157 + 4) = -1;
            v160 = *(WTF::StringImpl **)v157;
            *(_QWORD *)v157 = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
                WTF::StringImpl::destroy(v160, v56);
              else
                *(_DWORD *)v160 -= 2;
            }
            v155 += 48;
          }
          while (v156 != v155);
          v154 = v263;
        }
        if (v154)
        {
          v263 = 0;
          LODWORD(v264) = 0;
          WTF::fastFree(v154, v56);
        }
      }
      if (v262)
      {
        if (v261)
        {
          if (v260 != -1)
            ((void (*)(JSC::ArrayBufferView **, int *))off_1E3223390[v260])(&v273, &v259);
          v260 = -1;
        }
        if ((_DWORD)v258 != -1)
          ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **))off_1E3223390[v258])(&v273, &v257);
      }
      v161 = v256;
      if (v256)
      {
LABEL_459:
        v178 = 0;
        *(_DWORD *)(a3 + 144) = 1;
      }
      else
      {
        LOBYTE(v273) = 0;
        LOBYTE(v278) = 0;
        v162 = v252;
        if (v252)
        {
          v274 = -1;
          v163 = v248;
          if (v248 != -1)
          {
            ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **, int *))off_1E32233A0[v248])(&v257, &v273, &v247);
            v274 = v163;
          }
          LOBYTE(v275) = 0;
          LOBYTE(v277) = 0;
          if (v251)
          {
            LODWORD(v276) = -1;
            v164 = v250;
            if (v250 != -1)
            {
              ((void (*)(WTF::StringImpl **, unint64_t *, int *))off_1E32233A0[v250])(&v257, &v275, &v249);
              LODWORD(v276) = v164;
            }
            LOBYTE(v277) = 1;
          }
          LOBYTE(v278) = 1;
        }
        LOBYTE(v279) = 0;
        v281 = 0;
        v165 = v255;
        if (v255)
        {
          v166 = v253;
          v253 = 0;
          v279 = v166;
          v167 = v254;
          v254 = 0;
          v280 = v167;
          v165 = 1;
          v281 = 1;
        }
        if (v219)
        {
          std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>((uint64_t)v211, (uint64_t)&v273);
          std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)v217, (WTF::StringImpl *)&v279);
          if (!v281)
            goto LABEL_428;
LABEL_412:
          v171 = v279;
          if (HIDWORD(v280))
          {
            v172 = 0;
            v173 = 48 * HIDWORD(v280);
            do
            {
              v174 = (char *)v171 + v172;
              if (*((_BYTE *)v171 + v172 + 40))
              {
                v175 = *((unsigned int *)v174 + 8);
                if ((_DWORD)v175 != -1)
                  ((void (*)(WTF::StringImpl **, char *))off_1E3223390[v175])(&v257, v174 + 24);
                *((_DWORD *)v174 + 8) = -1;
              }
              v176 = *((unsigned int *)v174 + 4);
              if ((_DWORD)v176 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E3223390[v176])(&v257, v174 + 8);
              *((_DWORD *)v174 + 4) = -1;
              v177 = *(WTF::StringImpl **)v174;
              *(_QWORD *)v174 = 0;
              if (v177)
              {
                if (*(_DWORD *)v177 == 2)
                  WTF::StringImpl::destroy(v177, v56);
                else
                  *(_DWORD *)v177 -= 2;
              }
              v172 += 48;
            }
            while (v173 != v172);
            v171 = v279;
          }
          if (v171)
          {
            v279 = 0;
            LODWORD(v280) = 0;
            WTF::fastFree(v171, v56);
          }
        }
        else
        {
          v211[0] = 0;
          v216 = 0;
          if (v162)
          {
            v212 = -1;
            v168 = v274;
            if (v274 != -1)
            {
              ((void (*)(WTF::StringImpl **, char *, JSC::ArrayBufferView **))off_1E32233A0[v274])(&v257, v211, &v273);
              v212 = v168;
            }
            v213[0] = 0;
            v215 = 0;
            if ((_BYTE)v277)
            {
              v214 = -1;
              v169 = v276;
              if ((_DWORD)v276 != -1)
              {
                ((void (*)(WTF::StringImpl **, char *, unint64_t *))off_1E32233A0[v276])(&v257, v213, &v275);
                v214 = v169;
              }
              v215 = 1;
            }
            v216 = 1;
            v165 = v281;
          }
          LOBYTE(v217[0]) = 0;
          v218 = 0;
          if (v165)
          {
            v217[0] = v279;
            v170 = v280;
            v279 = 0;
            v280 = 0;
            v217[1] = v170;
            v218 = 1;
          }
          v219 = 1;
          if (v165)
            goto LABEL_412;
        }
LABEL_428:
        if ((_BYTE)v278)
        {
          if ((_BYTE)v277)
          {
            if ((_DWORD)v276 != -1)
              ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3223390[v276])(&v257, &v275);
            LODWORD(v276) = -1;
          }
          if (v274 != -1)
            ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E3223390[v274])(&v257, &v273);
        }
        v178 = 1;
        v161 = v256;
      }
      if (v161 != -1)
        ((void (*)(JSC::ArrayBufferView **, int *))off_1E32250A0[v161])(&v273, &v247);
      if (!v178)
        goto LABEL_441;
LABEL_439:
      WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(a3, (uint64_t)&v203);
      v179 = 0;
      goto LABEL_440;
    }
    v201 = 0;
    v202 = 0;
    v6 = *((_QWORD *)v237 + 1);
    v8 = (JSC::Structure *)v282;
    v199 = v72;
    v200 = 0;
    v78 = 8 * v77;
    while (1)
    {
      v275 = 0xFFFFFFFF00000000;
      v276 = v4;
      v277 = 0;
      v278 = 0;
      LODWORD(v279) = 0x20000;
      BYTE4(v279) = 0;
      LOBYTE(v280) = 0;
      v281 = 0;
      v282[0] = 0;
      v282[1] = 0;
      v79 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, _QWORD, JSC::ArrayBufferView **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) + 0x68))(v4, a2, *(_QWORD *)v6, &v273);
      if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
      {
        v120 = 1;
        v223 = 1;
        goto LABEL_258;
      }
      if (!v79 || (v275 & 4) != 0)
        goto LABEL_257;
      v80 = *(WTF::StringImpl **)v6;
      if (!*(_QWORD *)v6)
        goto LABEL_179;
      if ((*((_BYTE *)v80 + 16) & 0x20) == 0)
      {
        *(_DWORD *)v80 += 2;
LABEL_179:
        v230 = v80;
        goto LABEL_180;
      }
      v266 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
      JSC::throwTypeError();
      v230 = 0;
LABEL_180:
      WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
      v82 = v230;
      v230 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v81);
        else
          *(_DWORD *)v82 -= 2;
      }
      if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72)
        || (BYTE4(v279)
          ? (v83 = (JSC::JSCell *)JSC::JSObject::get((JSC::Structure *)v4, a2, *(_QWORD *)v6))
          : BYTE1(v279) != 1
          ? (BYTE1(v279) != 2
           ? (v124 = JSC::PropertySlot::customGetter())
           : (v124 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v273, a2)),
             v83 = (JSC::JSCell *)v124,
             v72 = v199,
             v8 = (JSC::Structure *)v282)
          : (v83 = v273),
            *((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72)))
      {
        v120 = 1;
        v223 = 1;
        goto LABEL_253;
      }
      WebCore::convertDictionary<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)&v266, (JSC::VM **)a2, v83);
      v84 = v272;
      if (!v272)
        break;
      v120 = 1;
      v223 = 1;
LABEL_251:
      if (v84 != 0xFFFFFFFFLL)
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32250B0[v84])(&v230, &v267);
LABEL_253:
      v122 = v236;
      v236 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
        {
          WTF::StringImpl::destroy(v122, v56);
          if (v120)
            goto LABEL_258;
LABEL_257:
          v120 = 0;
          goto LABEL_258;
        }
        *(_DWORD *)v122 -= 2;
      }
      if (!v120)
        goto LABEL_257;
LABEL_258:
      if (v281)
      {
        v123 = *(_DWORD *)(v280 + 4);
        if (!v123)
        {
          __break(0xC471u);
          JUMPOUT(0x1948638D0);
        }
        *(_DWORD *)(v280 + 4) = v123 - 1;
      }
      if (v120 != 5 && v120)
        goto LABEL_298;
      v6 += 8;
      v78 -= 8;
      if (!v78)
      {
        v126 = v242;
        v127 = v243;
        goto LABEL_296;
      }
    }
    if (!v236 || (*((_BYTE *)v236 + 16) & 4) != 0)
      goto LABEL_193;
    v230 = (WTF::StringImpl *)v202;
    WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>((uint64_t *)&v241, &v236, (const WTF::StringImpl *)&v230, (uint64_t)&v225);
    if (v227[0])
    {
      if (v272)
        goto LABEL_520;
LABEL_193:
      LOBYTE(v225) = 0;
      v226 = -1;
      v85 = v268;
      if (v268 != -1)
      {
        ((void (*)(char *, uint64_t *, uint64_t *))off_1E32233A0[v268])(&v245, &v225, &v267);
        v226 = v85;
      }
      v227[0] = 0;
      v229 = 0;
      v86 = v271;
      if (v271)
      {
        v228 = -1;
        v87 = v270;
        if (v270 != -1)
        {
          ((void (*)(char *, char *, uint64_t *))off_1E32233A0[v270])(&v245, v227, &v269);
          v228 = v87;
          v85 = v226;
        }
        v86 = 1;
        v229 = 1;
      }
      v88 = v236;
      v236 = 0;
      v230 = v88;
      LOBYTE(v231) = 0;
      v232 = -1;
      if (v85 != 0xFFFFFFFFLL)
      {
        ((void (*)(char *, int *, uint64_t *))off_1E32233A0[v85])(&v245, &v231, &v225);
        v232 = v85;
        v86 = v229;
      }
      LOBYTE(v233) = 0;
      v235 = 0;
      if (v86)
      {
        v234 = -1;
        v89 = v228;
        if (v228 != -1)
        {
          ((void (*)(char *, int *, char *))off_1E32233A0[v228])(&v245, &v233, v227);
          v234 = v89;
        }
        v235 = 1;
      }
      if (v202 == (_DWORD)v243)
      {
        v90 = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v242, v202 + 1, (unint64_t)&v230);
        v91 = v90;
        v92 = HIDWORD(v243);
        v93 = v242;
        v94 = (char *)v242 + 48 * HIDWORD(v243);
        v95 = 48 * HIDWORD(v243);
        v96 = *(_QWORD *)v90;
        *(_QWORD *)v90 = 0;
        *(_QWORD *)((char *)v93 + v95) = v96;
        v97 = v93;
        v94[8] = 0;
        v98 = v94 + 8;
        *((_DWORD *)v94 + 4) = -1;
        v99 = v94 + 16;
        v100 = *((unsigned int *)v90 + 4);
        if ((_DWORD)v100 != -1)
        {
          v101 = v93;
          ((void (*)(char *, char *, char *))off_1E32233A0[v100])(&v245, v98, v90 + 8);
          v97 = v101;
          *v99 = v100;
        }
        v102 = (char *)v97 + 48 * v92;
        v102[40] = 0;
        v103 = v102 + 40;
        *(v103 - 16) = 0;
        v56 = (WTF::StringImpl *)(v103 - 16);
        v201 = v97;
        if (v91[40])
        {
          v104 = (char *)v97 + 48 * v92;
          *((_DWORD *)v104 + 8) = -1;
          v105 = v104 + 32;
          v106 = *((unsigned int *)v91 + 8);
          if ((_DWORD)v106 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, char *))off_1E32233A0[v106])(&v245, v56, v91 + 24);
            *v105 = v106;
          }
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v107 = (uint64_t)v201 + 48 * v202;
      v108 = v230;
      v230 = 0;
      *(_QWORD *)v107 = v108;
      v109 = v201;
      *(_BYTE *)(v107 + 8) = 0;
      v110 = v107 + 8;
      *(_DWORD *)(v107 + 16) = -1;
      v111 = (int *)(v107 + 16);
      v112 = v232;
      if (v232 != -1)
      {
        ((void (*)(char *, uint64_t, int *))off_1E32233A0[v232])(&v245, v110, &v231);
        v109 = v201;
        *v111 = v112;
      }
      v113 = (uint64_t)v109 + 48 * v202;
      *(_BYTE *)(v113 + 40) = 0;
      v103 = (_BYTE *)(v113 + 40);
      *(v103 - 16) = 0;
      v56 = (WTF::StringImpl *)(v103 - 16);
      if (v235)
      {
        v114 = (uint64_t)v109 + 48 * v202;
        *(_DWORD *)(v114 + 32) = -1;
        v115 = (int *)(v114 + 32);
        v116 = v234;
        if (v234 != -1)
        {
          ((void (*)(char *, WTF::StringImpl *, int *))off_1E32233A0[v234])(&v245, v56, &v233);
          *v115 = v116;
        }
LABEL_216:
        *v103 = 1;
        v92 = HIDWORD(v243);
LABEL_217:
        v8 = (JSC::Structure *)v282;
        v202 = v92 + 1;
        HIDWORD(v243) = v92 + 1;
        if (v235)
        {
          v72 = v199;
          if (v234 != -1)
            ((void (*)(char *, int *))off_1E3223390[v234])(&v245, &v233);
          v234 = -1;
        }
        else
        {
          v72 = v199;
        }
      }
      else
      {
        v202 = ++HIDWORD(v243);
        v8 = (JSC::Structure *)v282;
      }
      if (v232 != -1)
        ((void (*)(char *, int *))off_1E3223390[v232])(&v245, &v231);
      v232 = -1;
      v121 = v230;
      v230 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
          WTF::StringImpl::destroy(v121, v56);
        else
          *(_DWORD *)v121 -= 2;
      }
      if (v229)
      {
        if (v228 != -1)
          ((void (*)(char *, char *))off_1E3223390[v228])(&v245, v227);
        v228 = -1;
      }
      if (v226 != -1)
        ((void (*)(char *, uint64_t *))off_1E3223390[v226])(&v245, &v225);
      v120 = 0;
      v200 = v201;
LABEL_250:
      v84 = v272;
      goto LABEL_251;
    }
    if (!v272)
    {
      LOBYTE(v230) = 0;
      v231 = -1;
      v117 = v268;
      if (v268 != -1)
      {
        ((void (*)(char *, WTF::StringImpl **, uint64_t *))off_1E32233A0[v268])(&v245, &v230, &v267);
        v231 = v117;
      }
      LOBYTE(v232) = 0;
      LOBYTE(v234) = 0;
      if (v271)
      {
        v233 = -1;
        v118 = v270;
        if (v270 != -1)
        {
          ((void (*)(char *, int *, uint64_t *))off_1E32233A0[v270])(&v245, &v232, &v269);
          v233 = v118;
        }
        LOBYTE(v234) = 1;
      }
      v119 = *(_QWORD *)(v225 + 8);
      if (v119 >= v202)
      {
        __break(0xC471u);
        JUMPOUT(0x194863A74);
      }
      WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=((uint64_t)v200 + 48 * v119 + 8, (uint64_t)&v230);
      v8 = (JSC::Structure *)v282;
      if ((_BYTE)v234)
      {
        if (v233 != -1)
          ((void (*)(char *, int *))off_1E3223390[v233])(&v245, &v232);
        v233 = -1;
      }
      if (v231 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3223390[v231])(&v245, &v230);
      v120 = 5;
      goto LABEL_250;
    }
LABEL_520:
    v19 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_521:
    v188 = *(_QWORD *)(v193 + 40) == (_QWORD)a2;
LABEL_522:
    v21 = !v188;
LABEL_25:
    if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
    {
      v204 = v21;
      continue;
    }
    break;
  }
LABEL_471:
  v179 = 1;
LABEL_440:
  *(_DWORD *)(a3 + 144) = v179;
LABEL_441:
  WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs((WebCore::AuthenticationExtensionsClientInputs *)&v203);
}

uint64_t std::optional<WebCore::BufferSource>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  int v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v7[0] = 0;
    v8 = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 == -1)
    {
      v5 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3223390[v5])(&v9, a1, a2);
        *(_DWORD *)(a1 + 8) = -1;
      }
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E32233A0[v3])(&v9, v7, a2);
      v8 = v3;
      v9 = a1;
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E32233B0[v3])(&v9, a1, v7);
    }
    if (v8 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E3223390[v8])(&v9, v7);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E32233A0[v4])(v7, a1, a2);
      *(_DWORD *)(a1 + 8) = v4;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebCore::convertDictionary<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  JSC::JSArrayBufferView *v8;
  uint64_t result;
  JSC::ArrayBufferView *v10;
  int v11;
  int v12;
  uint64_t (*v13)();
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::JSArrayBufferView *v16;
  JSC::ArrayBufferView *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  JSC::VM *v26;
  JSC::ArrayBufferView *v27;
  int v28;
  JSC::VM *v29;
  char v30;
  JSC::ArrayBufferView *v31;
  JSC::ArrayBufferView *v32;
  int v33;
  int v34;
  WTF::StringImpl *v35;
  JSC::ArrayBufferView *v36;
  int v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v26 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v21 = 0;
    v22 = 0;
    v23[0] = 0;
    v25 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(a1 + 48) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v21 = 0;
  v22 = 0;
  v23[0] = 0;
  v25 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v35);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v7);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v26 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v8 != (JSC::JSArrayBufferView *)10)
  {
    v27 = a2[7];
    v10 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v27, (uint64_t)v8);
    if (v10)
    {
      *(_DWORD *)v10 += 2;
      LODWORD(v32) = 1;
      v31 = 0;
      v36 = v10;
      v37 = 1;
      v38 = 0;
      result = (uint64_t)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v29);
      v11 = v38;
      if (!v38)
      {
        v12 = v37;
        LOBYTE(v27) = 0;
        v28 = -1;
        if (v37 == -1)
        {
          LOBYTE(v31) = 0;
          LODWORD(v32) = -1;
          if (v22 == -1)
            goto LABEL_29;
          ((void (*)(JSC::VM **, uint64_t *))off_1E3223390[v22])(&v29, &v21);
          v22 = -1;
LABEL_27:
          if ((_DWORD)v32 != -1)
            ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E3223390[v32])(&v29, &v31);
LABEL_29:
          LODWORD(v32) = -1;
          if (v28 != -1)
            ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E3223390[v28])(&v29, &v27);
          WTF::AtomStringImpl::addLiteral();
          v14 = v31;
          v16 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v31);
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v15);
            else
              *(_DWORD *)v14 -= 2;
          }
          result = (uint64_t)v26;
          if (*((_DWORD *)v26 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
            if ((_DWORD)result)
              goto LABEL_64;
          }
          if (v16 != (JSC::JSArrayBufferView *)10)
          {
            v29 = a2[7];
            v17 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v29, (uint64_t)v16);
            if (v17)
            {
              *(_DWORD *)v17 += 2;
              v18 = 1;
              v28 = 1;
              v27 = 0;
              v32 = v17;
              v33 = 1;
              v34 = 0;
              _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v30);
            }
            else
            {
              JSC::JSArrayBufferView::toWrapped(v16, &v27);
              if (!v27)
              {
                result = JSC::throwTypeError();
LABEL_64:
                *(_DWORD *)(a1 + 48) = 1;
LABEL_51:
                v11 = v38;
                goto LABEL_52;
              }
              v18 = 0;
              v32 = v27;
              v33 = 0;
              v34 = 0;
            }
            LOBYTE(v27) = 0;
            v28 = -1;
            ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32233A0[v18])(&v29, &v27, &v32);
            v28 = v18;
            result = std::optional<WebCore::BufferSource>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,void>((uint64_t)v23, (uint64_t)&v27);
            if (v28 != -1)
              result = ((uint64_t (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E3223390[v28])(&v29, &v27);
            if (v34 != -1)
              result = ((uint64_t (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32233C0[v34])(&v27, &v32);
          }
          *(_BYTE *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 16) = -1;
          v19 = v22;
          if (v22 != -1)
          {
            result = ((uint64_t (*)(JSC::ArrayBufferView **))off_1E32233A0[v22])(&v31);
            *(_DWORD *)(a1 + 16) = v19;
          }
          *(_BYTE *)(a1 + 24) = 0;
          *(_BYTE *)(a1 + 40) = 0;
          if (v25)
          {
            *(_DWORD *)(a1 + 32) = -1;
            v20 = v24;
            if (v24 != -1)
            {
              result = ((uint64_t (*)(JSC::ArrayBufferView **))off_1E32233A0[v24])(&v31);
              *(_DWORD *)(a1 + 32) = v20;
            }
            *(_BYTE *)(a1 + 40) = 1;
          }
          *(_DWORD *)(a1 + 48) = 0;
          goto LABEL_51;
        }
LABEL_26:
        v13 = off_1E32233A0[v12];
        ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v13)(&v29, &v27, &v36);
        v28 = v12;
        LOBYTE(v31) = 0;
        LODWORD(v32) = -1;
        ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v13)(&v29, &v31, &v27);
        LODWORD(v32) = v12;
        v29 = (JSC::VM *)&v21;
        ((void (*)(JSC::VM **, uint64_t *, JSC::ArrayBufferView **))off_1E32233B0[v12])(&v29, &v21, &v31);
        goto LABEL_27;
      }
    }
    else
    {
      JSC::JSArrayBufferView::toWrapped(v8, &v31);
      if (v31)
      {
        v12 = 0;
        v36 = v31;
        v37 = 0;
        v38 = 0;
        LOBYTE(v27) = 0;
        v28 = -1;
        goto LABEL_26;
      }
      result = JSC::throwTypeError();
      v11 = 1;
      v38 = 1;
    }
    *(_DWORD *)(a1 + 48) = 1;
LABEL_52:
    if (v11 != -1)
      result = ((uint64_t (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32233C0[v11])(&v31, &v36);
    goto LABEL_12;
  }
LABEL_10:
  result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v26, "first", 6, "AuthenticationExtensionsPRFValues", 34, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_11:
  *(_DWORD *)(a1 + 48) = 1;
LABEL_12:
  if (v25)
  {
    if (v24 != -1)
      result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E3223390[v24])(&v35, v23);
    v24 = -1;
  }
  if (v22 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3223390[v22])(&v35, &v21);
  return result;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  WebCore::JSDOMGlobalObject *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  int v30;
  JSC::ArrayBuffer *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::DeferrableRefCountedBase *v43;
  WTF::DeferrableRefCountedBase *v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned int v49;
  WTF::StringImpl *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = *((_QWORD *)a1 + 7);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(a3 + 1))
  {
    if (*(_BYTE *)a3)
      v10 = 7;
    else
      v10 = 6;
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v11 = v51;
    v51 = 0;
    v52 = v8;
    v53 = 0x1000000FFFFFFFFLL;
    v54 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v11, v10, 0, (uint64_t)&v51);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 3))
  {
    v13 = *(unsigned __int8 *)(a3 + 2);
    v14 = *((_QWORD *)a1 + 7);
    v15 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v16 = 8 * *(unsigned __int8 *)(v15 + 14);
    v17 = JSC::allocateCell<JSC::JSFinalObject>(v14, v16 + 16);
    v18 = *(_DWORD *)(v15 + 8);
    *(_DWORD *)v17 = v15 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0;
    bzero((void *)(v17 + 16), v16);
    if (*(_BYTE *)(v14 + 755))
      __dmb(0xAu);
    if (v13)
      v19 = 7;
    else
      v19 = 6;
    if (*(_DWORD *)(v14 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) != 0)
    {
      v17 = 0;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
      v20 = v51;
      v51 = 0;
      v52 = v17;
      v53 = 0x1000000FFFFFFFFLL;
      v54 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v17, (JSC::VM *)v14, (unint64_t)v20, v19, 0, (uint64_t)&v51);
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v22 = v51;
    v51 = 0;
    v52 = v8;
    v53 = 0x1000000FFFFFFFFLL;
    v54 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v22, v17, 0, (uint64_t)&v51);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (!*(_BYTE *)(a3 + 32))
    goto LABEL_56;
  v24 = *(unsigned __int16 *)(a3 + 8);
  v25 = *(WebCore::JSDOMGlobalObject **)(a3 + 16);
  if (v25)
    *(_DWORD *)v25 += 2;
  v49 = *(unsigned __int16 *)(a3 + 24);
  v26 = *((_QWORD *)a1 + 7);
  v27 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v28 = 8 * *(unsigned __int8 *)(v27 + 14);
  v29 = JSC::allocateCell<JSC::JSFinalObject>(v26, v28 + 16);
  v30 = *(_DWORD *)(v27 + 8);
  *(_DWORD *)v29 = v27 >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  bzero((void *)(v29 + 16), v28);
  if (*(_BYTE *)(v26 + 755))
  {
    __dmb(0xAu);
    if (!v25)
      goto LABEL_34;
  }
  else if (!v25)
  {
    goto LABEL_34;
  }
  v32 = WebCore::toJS(a1, (uint64_t)a2, v25, v31);
  if (!*(_DWORD *)(v26 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v33 = v51;
    v51 = 0;
    v52 = v29;
    v53 = 0x1000000FFFFFFFFLL;
    v54 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v29, (JSC::VM *)v26, (unint64_t)v33, v32, 0, (uint64_t)&v51);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v34);
      else
        *(_DWORD *)v33 -= 2;
    }
LABEL_34:
    if (v24 >= 0x100)
    {
      if ((_BYTE)v24)
        v35 = 7;
      else
        v35 = 6;
      if (*(_DWORD *)(v26 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26) & 1) != 0)
        goto LABEL_96;
      WTF::AtomStringImpl::addLiteral();
      v36 = v51;
      v51 = 0;
      v52 = v29;
      v53 = 0x1000000FFFFFFFFLL;
      v54 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v29, (JSC::VM *)v26, (unint64_t)v36, v35, 0, (uint64_t)&v51);
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v37);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    if (v49 < 0x100)
      goto LABEL_50;
    if ((_BYTE)v49)
      v38 = 7;
    else
      v38 = 6;
    if (!*(_DWORD *)(v26 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v39 = v51;
      v51 = 0;
      v52 = v29;
      v53 = 0x1000000FFFFFFFFLL;
      v54 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v29, (JSC::VM *)v26, (unint64_t)v39, v38, 0, (uint64_t)&v51);
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v40);
        else
          *(_DWORD *)v39 -= 2;
      }
LABEL_50:
      if (!v25)
        goto LABEL_52;
      goto LABEL_51;
    }
LABEL_96:
    v29 = 0;
    goto LABEL_50;
  }
  v29 = 0;
LABEL_51:
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v25);
LABEL_52:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v41 = v51;
  v51 = 0;
  v52 = v8;
  v53 = 0x1000000FFFFFFFFLL;
  v54 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v41, v29, 0, (uint64_t)&v51);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
LABEL_56:
  if (!*(_BYTE *)(a3 + 72))
    return v8;
  LOWORD(v51) = *(_WORD *)(a3 + 40);
  LOBYTE(v52) = 0;
  LOBYTE(v54) = 0;
  if (*(_BYTE *)(a3 + 64))
  {
    v43 = *(WTF::DeferrableRefCountedBase **)(a3 + 48);
    if (v43)
      *(_DWORD *)v43 += 2;
    v52 = (unint64_t)v43;
    v44 = *(WTF::DeferrableRefCountedBase **)(a3 + 56);
    if (v44)
    {
      *(_DWORD *)v44 += 2;
      v53 = (uint64_t)v44;
      LOBYTE(v54) = 1;
      v45 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t)&v51);
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v44);
      if (!v43)
        goto LABEL_64;
      goto LABEL_62;
    }
    v53 = 0;
    LOBYTE(v54) = 1;
    v45 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t)&v51);
    if (v43)
LABEL_62:
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v43);
  }
  else
  {
    v45 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t)&v51);
  }
LABEL_64:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v51;
  v51 = 0;
  v52 = v8;
  v53 = 0x1000000FFFFFFFFLL;
  v54 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v46, v45, 0, (uint64_t)&v51);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  return v8;
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  const WebCore::AuthenticationExtensionsClientOutputs::PRFValues *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::JSDOMGlobalObject *v15;
  WTF::DeferrableRefCountedBase *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::JSDOMGlobalObject *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v6 = *((_QWORD *)a1 + 7);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(a3 + 1))
  {
    if (*(_BYTE *)a3)
      v12 = 7;
    else
      v12 = 6;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v21;
    v21 = 0;
    v22 = v9;
    v23 = -1;
    v24 = 0x1000000;
    v25 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v13, v12, 0, (uint64_t)&v21);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (*(_BYTE *)(a3 + 24))
  {
    v15 = *(WebCore::JSDOMGlobalObject **)(a3 + 8);
    if (v15)
      *(_DWORD *)v15 += 2;
    v21 = v15;
    v16 = *(WTF::DeferrableRefCountedBase **)(a3 + 16);
    if (v16)
    {
      *(_DWORD *)v16 += 2;
      v22 = (unint64_t)v16;
      v17 = WebCore::convertDictionaryToJS(a1, a2, &v21, v11);
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v16);
      if (!v15)
        goto LABEL_17;
    }
    else
    {
      v22 = 0;
      v17 = WebCore::convertDictionaryToJS(a1, a2, &v21, v11);
      if (!v15)
      {
LABEL_17:
        if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
          return 0;
        WTF::AtomStringImpl::addLiteral();
        v18 = v21;
        v21 = 0;
        v22 = v9;
        v23 = -1;
        v24 = 0x1000000;
        v25 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v18, v17, 0, (uint64_t)&v21);
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v19);
          else
            *(_DWORD *)v18 -= 2;
        }
        return v9;
      }
    }
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v15);
    goto LABEL_17;
  }
  return v9;
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  const WebCore::ApplePayPaymentContact *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WebCore::ApplePayPaymentContact *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;

  v6 = *((_QWORD *)a1 + 7);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(a3 + 392))
  {
    WebCore::ApplePayPaymentContact::ApplePayPaymentContact((uint64_t)&v55, (const WebCore::ApplePayPaymentContact *)(a3 + 248));
    WebCore::convertDictionaryToJS(a1, a2, (WebCore::JSDOMGlobalObject *)&v55, v11);
    v13 = v12;
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v55, v14);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v15 = v55;
    v55 = 0;
    v56 = v9;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v13, 0, (uint64_t)&v55);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = *(_QWORD *)(a3 + 552);
  if (!v17)
    goto LABEL_18;
  v18 = *((_QWORD *)a1 + 7);
  v19 = *(_DWORD *)(v17 + 4);
  if (v19)
  {
    if (v19 != 1)
    {
LABEL_11:
      v20 = *(_QWORD *)(v18 + 64760);
      if (!v20 || v17 != *(_QWORD *)(v20 + 8))
        v20 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_14;
    }
    v49 = *(unsigned __int8 **)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      v50 = *v49;
    }
    else
    {
      v53 = *(unsigned __int16 *)v49;
      if (v53 > 0xFF)
        goto LABEL_11;
      v50 = v53;
    }
    v20 = *(_QWORD *)(v18 + 8 * v50 + 42216);
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 41968);
  }
LABEL_14:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v55;
  v55 = 0;
  v56 = v9;
  v57 = -1;
  v58 = 0x1000000;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v21, v20, 0, (uint64_t)&v55);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_18:
  if (*(_BYTE *)(a3 + 544))
  {
    WebCore::ApplePayPaymentContact::ApplePayPaymentContact((uint64_t)&v55, (const WebCore::ApplePayPaymentContact *)(a3 + 400));
    WebCore::convertDictionaryToJS(a1, a2, (WebCore::JSDOMGlobalObject *)&v55, v23);
    v25 = v24;
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v55, v26);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v27 = v55;
    v55 = 0;
    v56 = v9;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v27, v25, 0, (uint64_t)&v55);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v28);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v29 = *((_QWORD *)a1 + 7);
  v30 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v31 = 8 * *(unsigned __int8 *)(v30 + 14);
  v32 = JSC::allocateCell<JSC::JSFinalObject>(v29, v31 + 16);
  v33 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)v32 = v30 >> 4;
  *(_DWORD *)(v32 + 4) = v33;
  *(_QWORD *)(v32 + 8) = 0;
  bzero((void *)(v32 + 16), v31);
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  if (*(_QWORD *)(a3 + 240))
  {
    v34 = JSC::JSONParse();
    if (*(_DWORD *)(v29 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29) & 1) != 0)
      goto LABEL_81;
    WTF::AtomStringImpl::addLiteral();
    v35 = v55;
    v55 = 0;
    v56 = v32;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)v29, (unint64_t)v35, v34, 0, (uint64_t)&v55);
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v36);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  v37 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t *)a3);
  if (*(_DWORD *)(v29 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29) & 1) != 0)
  {
LABEL_81:
    v32 = 0;
    goto LABEL_44;
  }
  WTF::AtomStringImpl::addLiteral();
  v38 = v55;
  v55 = 0;
  v56 = v32;
  v57 = -1;
  v58 = 0x1000000;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)v29, (unint64_t)v38, v37, 0, (uint64_t)&v55);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  v40 = *(_QWORD *)(a3 + 232);
  if (v40)
  {
    v41 = *((_QWORD *)a1 + 7);
    v42 = *(_DWORD *)(v40 + 4);
    if (v42)
    {
      if (v42 != 1)
      {
LABEL_37:
        v43 = *(_QWORD *)(v41 + 64760);
        if (!v43 || v40 != *(_QWORD *)(v43 + 8))
          v43 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_40;
      }
      v51 = *(unsigned __int8 **)(v40 + 8);
      if ((*(_BYTE *)(v40 + 16) & 4) != 0)
      {
        v52 = *v51;
      }
      else
      {
        v54 = *(unsigned __int16 *)v51;
        if (v54 > 0xFF)
          goto LABEL_37;
        v52 = v54;
      }
      v43 = *(_QWORD *)(v41 + 8 * v52 + 42216);
    }
    else
    {
      v43 = *(_QWORD *)(v41 + 41968);
    }
LABEL_40:
    if (*(_DWORD *)(v29 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29) & 1) != 0)
      goto LABEL_81;
    WTF::AtomStringImpl::addLiteral();
    v44 = v55;
    v55 = 0;
    v56 = v32;
    v57 = -1;
    v58 = 0x1000000;
    v59 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v32, (JSC::VM *)v29, (unint64_t)v44, v43, 0, (uint64_t)&v55);
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v45);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
LABEL_44:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v55;
  v55 = 0;
  v56 = v9;
  v57 = -1;
  v58 = 0x1000000;
  v59 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v46, v32, 0, (uint64_t)&v55);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  return v9;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject **a3, const WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  JSC::ArrayBuffer *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::ArrayBuffer *v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  if (*a3)
    v13 = WebCore::toJS(this, (uint64_t)a2, *a3, v12);
  else
    v13 = 2;
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v22;
  v22 = 0;
  v23 = v10;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v14, v13, 0, (uint64_t)&v22);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = a3[1];
  if (v17)
  {
    v18 = WebCore::toJS(this, (uint64_t)a2, v17, v16);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v19 = v22;
    v22 = 0;
    v23 = v10;
    v24 = -1;
    v25 = 0x1000000;
    v26 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v19, v18, 0, (uint64_t)&v22);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  return v10;
}

_DWORD *WebCore::JSAuthenticatorResponse::destroy(WebCore::JSAuthenticatorResponse *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSAuthenticatorAssertionResponse::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAuthenticatorResponse::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAuthenticatorResponse::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAuthenticatorResponse::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSAuthenticatorAssertionResponse::createPrototype(WebCore::JSAuthenticatorAssertionResponse *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
      + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
                                                                      + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAuthenticatorResponse::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAuthenticatorResponse::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSAuthenticatorResponsePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSAuthenticatorResponsePrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSAuthenticatorResponse::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSAuthenticatorResponse::s_info);
  }
  v18 = WebCore::JSAuthenticatorAssertionResponsePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSAuthenticatorAssertionResponsePrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSAuthenticatorAssertionResponsePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAuthenticatorAssertionResponsePrototype::create(WebCore::JSAuthenticatorAssertionResponsePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info, &WebCore::JSAuthenticatorAssertionResponsePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorAssertionResponse>,(WebCore::DOMConstructorID)267>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2136);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorResponse>,(WebCore::DOMConstructorID)269>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorAssertionResponse>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info
         + ~((_QWORD)&WebCore::JSAuthenticatorAssertionResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info
                                                                                  + ~((_QWORD)&WebCore::JSAuthenticatorAssertionResponse::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAuthenticatorAssertionResponse::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAuthenticatorAssertionResponse::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSAuthenticatorAssertionResponse::createPrototype((WebCore::JSAuthenticatorAssertionResponse *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAuthenticatorAssertionResponse::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSAuthenticatorAssertionResponse::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2136) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAuthenticatorAssertionResponseConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAuthenticatorAssertionResponsePrototype::s_info != (char **)(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorAssertionResponse>,(WebCore::DOMConstructorID)267>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAuthenticatorAssertionResponse_authenticatorData(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 120);
  if (v4)
    return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsAuthenticatorAssertionResponse_signature(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 128);
  if (v4)
    return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsAuthenticatorAssertionResponse_userHandle(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 136);
  if (v4)
    return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSAuthenticatorAssertionResponse::subspaceForImpl(WebCore::JSAuthenticatorAssertionResponse *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2160);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2160))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2160);
    *(_QWORD *)(v8 + 2160) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2160);
  *(_QWORD *)(v3 + 2160) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAuthenticatorResponse::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::AuthenticatorAttachment>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::AuthenticatorAttachment)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AuthenticatorAttachment)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AuthenticatorAttachment)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AuthenticatorAttachment)::$_0::operator() const(void)::impl;
    unk_1EE2F4370 = &WebCore::convertEnumerationToString(WebCore::AuthenticatorAttachment)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::AuthenticatorAttachment)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::AuthenticatorAttachment>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "cross-platform" && v7 == 14)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_QWORD *)(v6 + 1) != 0x616C702D73736F72 || *(_QWORD *)(v6 + 6) != 0x6D726F6674616C70)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 99)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BCAC0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 12), (int16x8_t)xmmword_1968BCAD0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::AuthenticatorAttachment>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 == "cross-platform" && v7 == 14)
    goto LABEL_38;
  if (v6 == "platform" || v7 != 8)
  {
    if (v7 != 8 || v6 != "platform")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 112)
      goto LABEL_16;
    if (*((_QWORD *)v6 + 1) != 0x6D0072006F0066 || *(_QWORD *)(v6 + 2) != 0x6600740061006CLL)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 112 || *(_DWORD *)(v6 + 1) != 1718903148 || *((_DWORD *)v6 + 1) != 1836216166)
  {
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
LABEL_30:
  v13 = &off_1E32226C8;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::JSAuthenticatorAttestationResponse::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAuthenticatorResponse::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAuthenticatorResponse::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAuthenticatorResponse::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSAuthenticatorAttestationResponse::createPrototype(WebCore::JSAuthenticatorAttestationResponse *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
      + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
                                                                      + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSAuthenticatorResponse::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSAuthenticatorResponse::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSAuthenticatorResponsePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSAuthenticatorResponsePrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSAuthenticatorResponse::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSAuthenticatorResponse::s_info);
  }
  v18 = WebCore::JSAuthenticatorAttestationResponsePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSAuthenticatorAttestationResponsePrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSAuthenticatorAttestationResponsePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAuthenticatorAttestationResponsePrototype::create(WebCore::JSAuthenticatorAttestationResponsePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info, &WebCore::JSAuthenticatorAttestationResponsePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorAttestationResponse>,(WebCore::DOMConstructorID)268>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2144);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorResponse>,(WebCore::DOMConstructorID)269>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorAttestationResponse>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info
         + ~((_QWORD)&WebCore::JSAuthenticatorAttestationResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info
                                                                                    + ~((_QWORD)&WebCore::JSAuthenticatorAttestationResponse::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSAuthenticatorAttestationResponse::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSAuthenticatorAttestationResponse::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSAuthenticatorAttestationResponse::createPrototype((WebCore::JSAuthenticatorAttestationResponse *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSAuthenticatorAttestationResponse::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSAuthenticatorAttestationResponse::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2144) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAuthenticatorAttestationResponseConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAuthenticatorAttestationResponsePrototype::s_info != (char **)(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorAttestationResponse>,(WebCore::DOMConstructorID)268>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAuthenticatorAttestationResponse_attestationObject(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 120);
  if (v4)
    return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSAuthenticatorAttestationResponse::subspaceForImpl(WebCore::JSAuthenticatorAttestationResponse *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2168);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2168))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2168);
    *(_QWORD *)(v8 + 2168) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2168);
  *(_QWORD *)(v3 + 2168) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAuthenticatorResponsePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSAuthenticatorResponsePrototype::create(WebCore::JSAuthenticatorResponsePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSAuthenticatorResponse::s_info, (uint64_t)&WebCore::JSAuthenticatorResponsePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorResponse>,(WebCore::DOMConstructorID)269>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2152);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorResponse>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
         + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSAuthenticatorResponse::s_info
                                                                         + ~((_QWORD)&WebCore::JSAuthenticatorResponse::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSAuthenticatorResponse::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSAuthenticatorResponse::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSAuthenticatorResponsePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSAuthenticatorResponsePrototype::create((WebCore::JSAuthenticatorResponsePrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSAuthenticatorResponse::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSAuthenticatorResponse::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2152) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsAuthenticatorResponseConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSAuthenticatorResponsePrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAuthenticatorResponse>,(WebCore::DOMConstructorID)269>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsAuthenticatorResponse_clientDataJSON(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 104);
  if (v4)
    return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSAuthenticatorResponse::subspaceForImpl(WebCore::JSAuthenticatorResponse *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2176);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 2176))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 2176);
    *(_QWORD *)(v8 + 2176) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 2176);
  *(_QWORD *)(v3 + 2176) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSAuthenticatorResponseOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSAuthenticatorResponseOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::AuthenticatorTransport>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  char **v11;
  BOOL v12;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  int v17;
  uint16x8_t v19;
  uint16x8_t v20;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
    v4 = v21;
    if (v21)
      goto LABEL_7;
LABEL_67:
    v16 = 0;
    v17 = 0;
    return v16 | (v17 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_67;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 3;
  if (v5 != "ble" && v6 == 3)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 98 || *(_WORD *)(v5 + 1) != 25964)
      {
LABEL_12:
        v8 = 0;
        v9 = 3;
        goto LABEL_13;
      }
    }
    else if (*(_WORD *)v5 != 98 || *(_DWORD *)(v5 + 2) != 6619244)
    {
      goto LABEL_12;
    }
LABEL_73:
    v11 = &WebCore::parseEnumerationFromString<WebCore::AuthenticatorTransport>(WTF::String const&)::mappings;
    goto LABEL_74;
  }
  v12 = v5 == "ble" && v6 == 3;
  if (v12)
    goto LABEL_73;
  if (v5 != "cable" && v6 == 5)
  {
    if ((_DWORD)v7)
    {
      if (*v5 == 99 && *(_WORD *)(v5 + 1) == 25185 && *(_WORD *)(v5 + 3) == 25964)
        goto LABEL_39;
    }
    else if (*(_WORD *)v5 == 99 && *(_QWORD *)(v5 + 2) == 0x65006C00620061)
    {
      goto LABEL_39;
    }
    v9 = 5;
    goto LABEL_13;
  }
  if (v5 == "cable" && v6 == 5)
  {
LABEL_39:
    v11 = &off_1E3222AF8;
    goto LABEL_74;
  }
  if (v5 == "hybrid" || v6 != 6)
  {
    if (v5 == "hybrid" && v6 == 6)
      goto LABEL_100;
    if (v5 == "internal" || v6 != 8)
    {
      if (v5 != "internal")
      {
        v9 = *(_DWORD *)(v4 + 4);
        goto LABEL_13;
      }
      v9 = *(_DWORD *)(v4 + 4);
      if (v6 != 8)
        goto LABEL_13;
    }
    else if ((_DWORD)v7)
    {
      if (*v5 != 105 || *(_DWORD *)(v5 + 1) != 1919251566 || *((_DWORD *)v5 + 1) != 1818324594)
        goto LABEL_123;
    }
    else
    {
      if (*(_WORD *)v5 != 105)
      {
LABEL_123:
        v9 = 8;
        goto LABEL_13;
      }
      v9 = 8;
      if (*(_QWORD *)(v5 + 2) != 0x7200650074006ELL || *((_QWORD *)v5 + 1) != 0x6C0061006E0072)
        goto LABEL_13;
    }
    v11 = &off_1E3222B28;
    goto LABEL_74;
  }
  if ((_DWORD)v7)
  {
    if (*v5 == 104 && *(_DWORD *)(v5 + 1) == 1769103993 && *(_DWORD *)(v5 + 2) == 1684632162)
    {
LABEL_100:
      v11 = &off_1E3222B10;
      goto LABEL_74;
    }
LABEL_105:
    v9 = 6;
    goto LABEL_13;
  }
  if (*(_WORD *)v5 != 104)
    goto LABEL_105;
  v9 = 6;
  if (*(_QWORD *)(v5 + 2) == 0x69007200620079 && *(_QWORD *)(v5 + 4) == 0x64006900720062)
    goto LABEL_100;
LABEL_13:
  v10 = v7 << 32;
  if (v5 != "nfc" && !v8)
  {
    if (v9)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 110 || *(_WORD *)(v5 + 1) != 25446)
          goto LABEL_19;
      }
      else if (*(_WORD *)v5 != 110 || *(_DWORD *)(v5 + 2) != 6488166)
      {
        v10 = 0;
        goto LABEL_19;
      }
    }
LABEL_42:
    v11 = &off_1E3222B40;
    goto LABEL_74;
  }
  if (v5 == "nfc" && v6 == 3)
    goto LABEL_42;
LABEL_19:
  if (v5 == "smart-card" || v9 != 10)
  {
    if (v5 == "smart-card" && v9 == 10)
      goto LABEL_25;
    goto LABEL_55;
  }
  if (!v10)
  {
    if (*(_WORD *)v5 == 115)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCAE0);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968BCAF0);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
          goto LABEL_25;
      }
    }
    v10 = 0;
    v9 = 10;
LABEL_55:
    if (v5 == "usb")
      v8 = 1;
    v15 = v6 == 3 && v5 == "usb";
    if (!v8)
    {
      if (v9)
      {
        if (v10)
        {
          if (*v5 != 117 || *(_WORD *)(v5 + 1) != 25203)
            goto LABEL_91;
        }
        else if (*(_WORD *)v5 != 117 || *(_DWORD *)(v5 + 2) != 6422643)
        {
          goto LABEL_91;
        }
      }
      goto LABEL_65;
    }
LABEL_52:
    if (!v15)
      goto LABEL_91;
LABEL_65:
    v11 = &off_1E3222B70;
    goto LABEL_74;
  }
  if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x7261632D7472616DLL)
  {
    v9 = 10;
    v10 = 1;
    goto LABEL_55;
  }
  if (*(_QWORD *)(v5 + 2) == 0x647261632D747261)
  {
LABEL_25:
    v11 = &off_1E3222B58;
LABEL_74:
    v16 = *((unsigned __int8 *)v11 + 16);
    v17 = 1;
    goto LABEL_75;
  }
  v12 = v5 == "usb";
  v14 = v5 == "usb";
  if (v12)
    v8 = 1;
  v15 = v6 == 3 && v14;
  if (v8)
    goto LABEL_52;
LABEL_91:
  v16 = 0;
  v17 = 0;
LABEL_75:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v16 | (v17 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::AutomationRate>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v12;
  int v13;
  int v14;
  uint64_t v18;
  unint64_t v19;

  v3 = a1;
  v19 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v19, a1);
    v4 = v18;
    if (v18)
      goto LABEL_7;
LABEL_36:
    v13 = 0;
    v14 = 0;
    return v13 | (v14 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_36;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 6;
  if (v6 != "a-rate" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_DWORD *)(v6 + 1) != 1952543277 || *(_DWORD *)(v6 + 2) != 1702125938)
      {
LABEL_13:
        v9 = 6;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 97)
        goto LABEL_13;
      if (*(_QWORD *)(v6 + 2) != 0x7400610072002DLL || *(_QWORD *)(v6 + 4) != 0x65007400610072)
        goto LABEL_13;
    }
LABEL_43:
    v12 = &WebCore::parseEnumerationFromString<WebCore::AutomationRate>(WTF::String const&)::mappings;
    goto LABEL_44;
  }
  v10 = v6 == "a-rate" && v7 == 6;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_43;
LABEL_18:
  if (v6 == "k-rate")
    v8 = 1;
  if (v8)
  {
    if (v7 != 6 || v6 != "k-rate")
      goto LABEL_50;
    goto LABEL_32;
  }
  if (!v9)
    goto LABEL_32;
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 107)
      goto LABEL_50;
    if (*(_QWORD *)(v6 + 4) != 0x65007400610072 || *(_QWORD *)(v6 + 2) != 0x7400610072002DLL)
      goto LABEL_50;
    goto LABEL_32;
  }
  if (*v6 == 107 && *(_DWORD *)(v6 + 1) == 1952543277 && *(_DWORD *)(v6 + 2) == 1702125938)
  {
LABEL_32:
    v12 = &off_1E3222BA0;
LABEL_44:
    v13 = *((unsigned __int8 *)v12 + 16);
    v14 = 1;
    goto LABEL_51;
  }
LABEL_50:
  v14 = 0;
  v13 = 0;
LABEL_51:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v13 | (v14 << 8);
}

uint64_t WebCore::convertDictionary<WebCore::AvcEncoderConfig>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, _DWORD *a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::VM *v11;
  int v12;
  WTF::StringImpl *v13;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v5 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v7 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        result = JSC::JSObject::get(v7, v5, (unint64_t)v13);
        v9 = result;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            result = WTF::StringImpl::destroy(v13, v8);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_16;
        }
        if (v9 == 10)
          goto LABEL_9;
        v11 = (JSC::VM *)*((_QWORD *)v5 + 7);
        result = WebCore::parseEnumeration<WebCore::AvcBitstreamFormat>(v5, v9);
        v10 = result;
        if (*((_DWORD *)v11 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          if ((result & 1) != 0)
          {
LABEL_16:
            v12 = 1;
            goto LABEL_13;
          }
        }
        if ((v10 & 0xFF00000000) != 0)
          goto LABEL_12;
      }
    }
    result = JSC::throwTypeError();
    goto LABEL_16;
  }
LABEL_9:
  LODWORD(v10) = 1;
LABEL_12:
  v12 = 0;
  *a3 = v10;
LABEL_13:
  a3[1] = v12;
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[2];
  int v25;
  int v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = (uint64_t *)(v12 + 41968);
  if ((byte_1EE334B43 & 1) == 0)
  {
    unk_1EE334C28 = &dword_1ECE76C30;
    dword_1ECE76C30 += 2;
    dword_1ECE76C50 += 2;
    unk_1EE334C30 = &dword_1ECE76C50;
    byte_1EE334B43 = 1;
  }
  v14 = *(_QWORD *)&_MergedGlobals_579[8 * v11 + 232];
  if (!v14)
  {
    v17 = *v13;
    goto LABEL_13;
  }
  v15 = *(_DWORD *)v14;
  v16 = *(_DWORD *)(v14 + 4);
  *(_DWORD *)v14 += 2;
  if (v16)
  {
    if (v16 != 1)
    {
LABEL_8:
      v17 = *(_QWORD *)(v12 + 64760);
      if (!v17 || v14 != *(_QWORD *)(v17 + 8))
      {
        v17 = JSC::jsStringWithCacheSlowCase();
        v15 = *(_DWORD *)v14 - 2;
      }
      goto LABEL_11;
    }
    v21 = *(unsigned __int8 **)(v14 + 8);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      v22 = *v21;
    }
    else
    {
      v23 = *(unsigned __int16 *)v21;
      if (v23 > 0xFF)
        goto LABEL_8;
      v22 = v23;
    }
    v17 = *(_QWORD *)(v12 + 8 * v22 + 42216);
  }
  else
  {
    v17 = *v13;
  }
LABEL_11:
  if (v15)
    *(_DWORD *)v14 = v15;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v14, v10);
LABEL_13:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = (WTF::StringImpl *)v24[0];
  v24[0] = 0;
  v24[1] = v8;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v18, v17, 0, (uint64_t)v24);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v8;
}

uint64_t WebCore::parseEnumeration<WebCore::AvcBitstreamFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v18;
  unint64_t v19;

  v3 = a1;
  v19 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v19, a1);
  v4 = v18;
  if (!v18)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "annexb" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_DWORD *)(v6 + 1) != 2019913326 || *(_DWORD *)(v6 + 2) != 1652057454)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 97)
        goto LABEL_16;
      v13 = *(_QWORD *)(v6 + 2);
      v14 = *(_QWORD *)(v6 + 4);
      if (v13 != 0x780065006E006ELL || v14 != 0x6200780065006ELL)
        goto LABEL_16;
    }
LABEL_40:
    v12 = &WebCore::parseEnumerationFromString<WebCore::AvcBitstreamFormat>(WTF::String const&)::mappings;
    goto LABEL_41;
  }
  if (v6 == "annexb" && v7 == 6)
    goto LABEL_40;
  if (v6 == "avc" || v7 != 3)
  {
    if (v7 != 3 || v6 != "avc")
      goto LABEL_16;
    goto LABEL_29;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 == 97 && *(_DWORD *)(v6 + 2) == 6488182)
      goto LABEL_29;
LABEL_16:
    v9 = 0;
    goto LABEL_42;
  }
  if (*v6 != 97 || *(_WORD *)(v6 + 1) != 25462)
    goto LABEL_16;
LABEL_29:
  v12 = &off_1E3222BD0;
LABEL_41:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_42:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  int v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  int v36;
  uint64_t v37;
  JSC::JSCell *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::Structure *v41;
  JSC::JSCell *v42;
  uint64_t v43;
  JSCell *v44;
  JSC::JSCell *v45;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v47;
  JSC::JSGlobalObject *v48;
  JSC::VM *v49;
  JSC::JSObject *v50;
  JSC::Structure *v51;
  JSC::VM *FunctionRealm;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  int v66;
  uint64_t v67;
  JSC::JSCell *Prototype;
  uint64_t v69;
  unint64_t Structure;
  JSC::Structure *v71;
  JSC::JSCell *v72;
  uint64_t v73;
  unint64_t SubclassStructure;
  void (***v75)(WebCore::BackgroundFetchEvent *__hidden);
  JSCell *v76;
  WTF::StringImpl *v78;
  void *v79;
  bmalloc::api *v80;
  void *v81;
  JSValue v82;
  WebCore::JSBackgroundFetchEvent *v83;
  JSC::VM *v84;
  WebCore::JSDOMGlobalObject *v85;
  JSC::VM *v86;
  void (***v87)(WebCore::BackgroundFetchEvent *__hidden);
  _BYTE v88[8];
  uint64_t v89;
  unsigned int v90;
  WTF::StringImpl *v91;
  int v92;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v82);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v91);
  v6 = v92;
  if (v92)
  {
    v76 = 0;
LABEL_57:
    if (v6 != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E32236D8[v6])(v88, &v91);
    return v76;
  }
  WebCore::convertDictionary<WebCore::BackgroundFetchEventInit>(*(JSC::JSCell **)(a2 + 56), (JSC::VM **)a1, (uint64_t)v88);
  v7 = v90;
  if (v90)
  {
    v44 = 0;
    v76 = 0;
    if (v90 == -1)
      goto LABEL_56;
    goto LABEL_55;
  }
  if (!v92)
  {
    v86 = v3;
    v8 = v91;
    v91 = 0;
    v9 = v88[0];
    v10 = v88[1];
    v11 = v88[2];
    v12 = v89;
    v89 = 0;
    if (v12)
      ++*(_DWORD *)(v12 + 24);
    v13 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    *(_QWORD *)(v13 + 8) = 0;
    if (v9)
      v17 = 1572866;
    else
      v17 = 1572864;
    v18 = v17 | (v8 != 0) | (4 * (v10 != 0)) | (8 * (v11 != 0)) | *(_DWORD *)(v13 + 20) & 0xFFC00000;
    *(_DWORD *)(v13 + 16) = 1;
    *(_DWORD *)(v13 + 20) = v18;
    if (v8)
    {
      *(_DWORD *)v8 += 2;
      v18 = *(_DWORD *)(v13 + 20);
    }
    *(_QWORD *)(v13 + 24) = v8;
    *(_QWORD *)(v13 + 32) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_QWORD *)(v13 + 56) = v16;
    *(_DWORD *)(v13 + 20) = v18 | 0x4000;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_DWORD *)(v13 + 80) = 0;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_QWORD *)v13 = off_1E347FA10;
    *(_QWORD *)(v13 + 104) = v12;
    v87 = (void (***)(WebCore::BackgroundFetchEvent *__hidden))v13;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 1)
      {
        v78 = *(WTF::StringImpl **)(v12 + 64);
        *(_QWORD *)(v12 + 64) = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v14);
          else
            *(_DWORD *)v78 -= 2;
        }
        WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v12 + 32), v14);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v12, v79);
        bmalloc::api::isoDeallocate(v80, v81);
        if (!v8)
        {
LABEL_18:
          v19 = (uint64_t)v87;
          if (*v87 != off_1E347FA10)
          {
            __break(0xC471u);
            JUMPOUT(0x194868794);
          }
          v20 = *(JSC::VM **)(v5 + 40);
          v21 = *((_QWORD *)v20 + 412);
          if (v21)
          {
            v22 = *(_DWORD *)(v21 - 8);
            v23 = ((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
                 + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) >> 22);
            v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
            v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
            v26 = v22 & ((v25 >> 31) ^ v25);
            v27 = *(char ***)(v21 + 16 * v26);
            if (v27 == &WebCore::JSBackgroundFetchEvent::s_info)
            {
LABEL_24:
              v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
              if (v29)
              {
LABEL_32:
                v44 = (JSCell *)WebCore::JSBackgroundFetchEvent::create(v29, v20, (uint64_t *)&v87);
                WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v20 + 415), v19, (uint64_t)v44);
                v45 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v45 & 0xFFFE000000000002) != 0
                  || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v45)) == 0
                  || (v48 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v49 = (JSC::VM *)*((_QWORD *)a1 + 7),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v47),
                      *((_DWORD *)v49 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
                {
LABEL_51:
                  if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
                    v44 = 0;
                  v75 = v87;
                  v87 = 0;
                  if (v75)
                  {
                    if (*((_DWORD *)v75 + 4) == 1)
                      (*v75)[1]((WebCore::BackgroundFetchEvent *)v75);
                    else
                      --*((_DWORD *)v75 + 4);
                  }
LABEL_55:
                  ((void (*)(void (****)(WebCore::BackgroundFetchEvent *__hidden), _BYTE *))off_1E32252B0[v7])(&v87, v88);
                  v76 = v44;
LABEL_56:
                  v6 = v92;
                  goto LABEL_57;
                }
                v53 = *((_QWORD *)FunctionRealm + 412);
                if (v53)
                {
                  v54 = *(_DWORD *)(v53 - 8);
                  v55 = ((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
                       + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
                                                                                      + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) >> 22);
                  v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
                  v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
                  v58 = v54 & ((v57 >> 31) ^ v57);
                  v59 = *(char ***)(v53 + 16 * v58);
                  if (v59 == &WebCore::JSBackgroundFetchEvent::s_info)
                  {
LABEL_41:
                    v50 = *(JSC::JSObject **)(v53 + 16 * v58 + 8);
                    if (v50)
                    {
LABEL_49:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v48, v50, v51);
                      if (!*((_DWORD *)v49 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) == 0)
                        JSC::JSObject::setStructure(v44, v49, SubclassStructure);
                      goto LABEL_51;
                    }
                  }
                  else
                  {
                    v60 = 1;
                    while (v59)
                    {
                      v58 = ((_DWORD)v58 + v60) & v54;
                      v59 = *(char ***)(v53 + 16 * v58);
                      ++v60;
                      if (v59 == &WebCore::JSBackgroundFetchEvent::s_info)
                        goto LABEL_41;
                    }
                  }
                  v61 = ((unint64_t)&WebCore::JSExtendableEvent::s_info
                       + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
                  v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
                  v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
                  v64 = v54 & ((v63 >> 31) ^ v63);
                  v65 = *(char ***)(v53 + 16 * v64);
                  if (v65 == &WebCore::JSExtendableEvent::s_info)
                  {
LABEL_46:
                    v67 = *(_QWORD *)(v53 + 16 * v64 + 8);
                    if (v67)
                    {
LABEL_48:
                      Structure = WebCore::JSBackgroundFetchEventPrototype::createStructure((uint64_t *)v49, (uint64_t)FunctionRealm, *(JSC::JSCell **)(v67 + 48));
                      *(_DWORD *)(Structure + 16) |= 0x80000u;
                      v72 = (JSC::JSCell *)WebCore::JSBackgroundFetchEventPrototype::create(v49, FunctionRealm, Structure, v71);
                      v73 = WebCore::JSBackgroundFetchEvent::createStructure((uint64_t *)v49, (uint64_t)FunctionRealm, v72);
                      v50 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v73, (uint64_t)&WebCore::JSBackgroundFetchEvent::s_info);
                      goto LABEL_49;
                    }
                  }
                  else
                  {
                    v66 = 1;
                    while (v65)
                    {
                      v64 = ((_DWORD)v64 + v66) & v54;
                      v65 = *(char ***)(v53 + 16 * v64);
                      ++v66;
                      if (v65 == &WebCore::JSExtendableEvent::s_info)
                        goto LABEL_46;
                    }
                  }
                }
                Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(v49, FunctionRealm, v50);
                v69 = WebCore::JSExtendableEvent::createStructure((uint64_t *)v49, (uint64_t)FunctionRealm, Prototype);
                v67 = WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v69, (uint64_t)&WebCore::JSExtendableEvent::s_info);
                goto LABEL_48;
              }
            }
            else
            {
              v28 = 1;
              while (v27)
              {
                v26 = ((_DWORD)v26 + v28) & v22;
                v27 = *(char ***)(v21 + 16 * v26);
                ++v28;
                if (v27 == &WebCore::JSBackgroundFetchEvent::s_info)
                  goto LABEL_24;
              }
            }
            v30 = (uint64_t *)*((_QWORD *)v20 + 7);
            v31 = ((unint64_t)&WebCore::JSExtendableEvent::s_info
                 + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
            v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
            v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
            v34 = v22 & ((v33 >> 31) ^ v33);
            v35 = *(char ***)(v21 + 16 * v34);
            if (v35 == &WebCore::JSExtendableEvent::s_info)
            {
LABEL_29:
              v37 = *(_QWORD *)(v21 + 16 * v34 + 8);
              if (v37)
              {
LABEL_31:
                v40 = WebCore::JSBackgroundFetchEventPrototype::createStructure(v30, (uint64_t)v20, *(JSC::JSCell **)(v37 + 48));
                *(_DWORD *)(v40 + 16) |= 0x80000u;
                v42 = (JSC::JSCell *)WebCore::JSBackgroundFetchEventPrototype::create((WebCore::JSBackgroundFetchEventPrototype *)v30, v20, v40, v41);
                v43 = WebCore::JSBackgroundFetchEvent::createStructure(v30, (uint64_t)v20, v42);
                v29 = WebCore::cacheDOMStructure((JSCell *)v20, v43, (uint64_t)&WebCore::JSBackgroundFetchEvent::s_info);
                goto LABEL_32;
              }
            }
            else
            {
              v36 = 1;
              while (v35)
              {
                v34 = ((_DWORD)v34 + v36) & v22;
                v35 = *(char ***)(v21 + 16 * v34);
                ++v36;
                if (v35 == &WebCore::JSExtendableEvent::s_info)
                  goto LABEL_29;
              }
            }
          }
          else
          {
            v30 = (uint64_t *)*((_QWORD *)v20 + 7);
          }
          v38 = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype((WebCore::JSExtendableEvent *)v30, v20, v15);
          v39 = WebCore::JSExtendableEvent::createStructure(v30, (uint64_t)v20, v38);
          v37 = WebCore::cacheDOMStructure((JSCell *)v20, v39, (uint64_t)&WebCore::JSExtendableEvent::s_info);
          goto LABEL_31;
        }
LABEL_16:
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v14);
        else
          *(_DWORD *)v8 -= 2;
        goto LABEL_18;
      }
      --*(_DWORD *)(v12 + 24);
    }
    if (!v8)
      goto LABEL_18;
    goto LABEL_16;
  }
  v83 = (WebCore::JSBackgroundFetchEvent *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSBackgroundFetchEvent::prototype(v83, v84, v85);
}

uint64_t WebCore::JSBackgroundFetchEvent::prototype(WebCore::JSBackgroundFetchEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  int v19;
  uint64_t v20;
  JSC::JSCell *Prototype;
  uint64_t v22;
  unint64_t Structure;
  JSC::Structure *v24;
  JSC::JSCell *v25;
  uint64_t v26;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
      + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchEvent::s_info
                                                                     + ~((_QWORD)&WebCore::JSBackgroundFetchEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSBackgroundFetchEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSBackgroundFetchEvent::s_info)
        goto LABEL_6;
    }
LABEL_7:
    v14 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v6 & ((v16 >> 31) ^ v16);
    v18 = *(char ***)(v5 + 16 * v17);
    if (v18 == &WebCore::JSExtendableEvent::s_info)
    {
LABEL_11:
      v20 = *(_QWORD *)(v5 + 16 * v17 + 8);
      if (v20)
      {
LABEL_13:
        Structure = WebCore::JSBackgroundFetchEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v20 + 48));
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v25 = (JSC::JSCell *)WebCore::JSBackgroundFetchEventPrototype::create(this, a2, Structure, v24);
        v26 = WebCore::JSBackgroundFetchEvent::createStructure((uint64_t *)this, (uint64_t)a2, v25);
        v13 = WebCore::cacheDOMStructure((JSCell *)a2, v26, (uint64_t)&WebCore::JSBackgroundFetchEvent::s_info);
        return *(_QWORD *)(v13 + 48);
      }
    }
    else
    {
      v19 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v19) & v6;
        v18 = *(char ***)(v5 + 16 * v17);
        ++v19;
        if (v18 == &WebCore::JSExtendableEvent::s_info)
          goto LABEL_11;
      }
    }
LABEL_12:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    v22 = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v20 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSExtendableEvent::s_info);
    goto LABEL_13;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
    goto LABEL_7;
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSBackgroundFetchEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSBackgroundFetchEvent::createPrototype(WebCore::JSBackgroundFetchEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v16;
  JSC::Structure *v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSExtendableEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
  }
  v16 = WebCore::JSBackgroundFetchEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  return WebCore::JSBackgroundFetchEventPrototype::create(this, a2, v16, v17);
}

uint64_t WebCore::JSBackgroundFetchEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBackgroundFetchEventPrototype::create(WebCore::JSBackgroundFetchEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSBackgroundFetchEvent::s_info, (uint64_t)&WebCore::JSBackgroundFetchEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>,(WebCore::DOMConstructorID)910>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7280);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSBackgroundFetchEvent::prototype((WebCore::JSBackgroundFetchEvent *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7280) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBackgroundFetchEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBackgroundFetchEventPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>,(WebCore::DOMConstructorID)910>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBackgroundFetchEvent_registration(int a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 2;
  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*(_DWORD *)(v2 + 24);
  v5 = WebCore::wrap<WebCore::BackgroundFetchRegistration>(a1, v3, v2);
  if (*(_DWORD *)(v2 + 24) == 1)
  {
    v7 = *(WTF::StringImpl **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 + 32), v4);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v2, v8);
    bmalloc::api::isoDeallocate(v9, v10);
  }
  else
  {
    --*(_DWORD *)(v2 + 24);
  }
  return v5;
}

uint64_t WebCore::JSBackgroundFetchEvent::subspaceForImpl(WebCore::JSBackgroundFetchEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7360);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 7360))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 7360);
    *(_QWORD *)(v8 + 7360) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7360);
  *(_QWORD *)(v3 + 7360) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertDictionary<WebCore::BackgroundFetchEventInit>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  BOOL v9;
  JSC::VM *v10;
  double v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  BOOL v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  BOOL v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int *v43;
  int v44;
  JSC::VM *v45;
  WTF::StringImpl *v46;

  v45 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_54;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_54;
    v6 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v7);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v45 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
      if ((result & 1) != 0)
        goto LABEL_43;
    }
    if (v8 == 10)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v10 = a2[7];
    if (v8 >= 0xFFFE000000000000)
    {
      v30 = (_DWORD)v8 == 0;
    }
    else
    {
      *(_QWORD *)&v11 = v8 - 0x2000000000000;
      if (v8 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v9 = v11 > 0.0 || v11 < 0.0;
LABEL_14:
        if (*((_DWORD *)v10 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
          if ((result & 1) != 0)
            goto LABEL_43;
        }
LABEL_15:
        WTF::AtomStringImpl::addLiteral();
        v13 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v12);
          else
            *(_DWORD *)v46 -= 2;
        }
        if (*((_DWORD *)v45 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
          if ((result & 1) != 0)
            goto LABEL_43;
        }
        if (v13 == 10)
        {
          v14 = 0;
          goto LABEL_26;
        }
        v15 = a2[7];
        if (v13 >= 0xFFFE000000000000)
        {
          v35 = (_DWORD)v13 == 0;
        }
        else
        {
          if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v14 = COERCE_DOUBLE(v13 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v13 - 0x2000000000000) < 0.0;
LABEL_25:
            if (*((_DWORD *)v15 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
              if ((result & 1) != 0)
                goto LABEL_43;
            }
LABEL_26:
            WTF::AtomStringImpl::addLiteral();
            v17 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, v16);
              else
                *(_DWORD *)v46 -= 2;
            }
            if (*((_DWORD *)v45 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
              if ((result & 1) != 0)
                goto LABEL_43;
            }
            if (v17 == 10)
            {
              v18 = 0;
LABEL_37:
              WTF::AtomStringImpl::addLiteral();
              v22 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v21);
                else
                  *(_DWORD *)v46 -= 2;
              }
              result = (uint64_t)v45;
              if (*((_DWORD *)v45 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
                if ((result & 1) != 0)
                  goto LABEL_43;
              }
              if (v22 == 10)
                goto LABEL_42;
              v46 = a2[7];
              if ((v22 & 0xFFFE000000000002) == 0)
              {
                v25 = *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C);
                v26 = *(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) != 0;
                if ((_DWORD)v25)
                {
                  v27 = 16 * v25;
                  if ((char **)v27 != &WebCore::JSBackgroundFetchRegistration::s_info)
                  {
                    do
                    {
                      v27 = *(_QWORD *)(v27 + 16);
                      v26 = v27 != 0;
                    }
                    while ((char **)v27 != &WebCore::JSBackgroundFetchRegistration::s_info && v27 != 0);
                  }
                }
                if (v26)
                {
                  v29 = *(_QWORD *)(v22 + 24);
                  if (v29)
                  {
                    v24 = 0;
                    ++*(_DWORD *)(v29 + 24);
                    *(_BYTE *)a3 = v9;
                    *(_BYTE *)(a3 + 1) = v14;
                    *(_BYTE *)(a3 + 2) = v18;
                    *(_QWORD *)(a3 + 8) = v29;
                    goto LABEL_44;
                  }
                }
              }
LABEL_54:
              result = JSC::throwTypeError();
              goto LABEL_43;
            }
            v19 = a2[7];
            if (v17 >= 0xFFFE000000000000)
            {
              v40 = (_DWORD)v17 == 0;
              goto LABEL_115;
            }
            *(_QWORD *)&v20 = v17 - 0x2000000000000;
            if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v20 <= 0.0)
              {
                v18 = v20 < 0.0;
                goto LABEL_36;
              }
            }
            else
            {
              if ((v17 & 0xFFFE000000000002) != 0)
              {
                v18 = v17 == 7;
                goto LABEL_36;
              }
              v41 = *(unsigned __int8 *)(v17 + 5);
              if (v41 == 3)
              {
                v44 = *(_DWORD *)(v17 + 8);
LABEL_114:
                v40 = v44 == 0;
                goto LABEL_115;
              }
              if (v41 == 2)
              {
                v42 = *(_QWORD *)(v17 + 8);
                if ((v42 & 1) != 0)
                  v43 = (int *)(v17 + 16);
                else
                  v43 = (int *)(v42 + 4);
                v44 = *v43;
                goto LABEL_114;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v40 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_115:
                v18 = !v40;
LABEL_36:
                if (*((_DWORD *)v19 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
                  if ((result & 1) != 0)
                    goto LABEL_43;
                }
                goto LABEL_37;
              }
            }
            v18 = 1;
            goto LABEL_36;
          }
          if ((v13 & 0xFFFE000000000002) != 0)
          {
            v14 = v13 == 7;
            goto LABEL_25;
          }
          v36 = *(unsigned __int8 *)(v13 + 5);
          if (v36 == 3)
          {
            v39 = *(_DWORD *)(v13 + 8);
          }
          else
          {
            if (v36 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
                v14 = 1;
                goto LABEL_25;
              }
              v35 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
              goto LABEL_125;
            }
            v37 = *(_QWORD *)(v13 + 8);
            if ((v37 & 1) != 0)
              v38 = (int *)(v13 + 16);
            else
              v38 = (int *)(v37 + 4);
            v39 = *v38;
          }
          v35 = v39 == 0;
        }
LABEL_125:
        v14 = !v35;
        goto LABEL_25;
      }
      if ((v8 & 0xFFFE000000000002) != 0)
      {
        v9 = v8 == 7;
        goto LABEL_14;
      }
      v31 = *(unsigned __int8 *)(v8 + 5);
      if (v31 == 3)
      {
        v34 = *(_DWORD *)(v8 + 8);
      }
      else
      {
        if (v31 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v9 = 1;
            goto LABEL_14;
          }
          v30 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
          goto LABEL_121;
        }
        v32 = *(_QWORD *)(v8 + 8);
        if ((v32 & 1) != 0)
          v33 = (int *)(v8 + 16);
        else
          v33 = (int *)(v32 + 4);
        v34 = *v33;
      }
      v30 = v34 == 0;
    }
LABEL_121:
    v9 = !v30;
    goto LABEL_14;
  }
LABEL_42:
  result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v45, "registration", 13, "BackgroundFetchEventInit", 25, "BackgroundFetchRegistration", 28);
LABEL_43:
  v24 = 1;
LABEL_44:
  *(_DWORD *)(a3 + 16) = v24;
  return result;
}

void WebCore::JSANGLEInstancedArraysOwner::~JSANGLEInstancedArraysOwner(WebCore::JSANGLEInstancedArraysOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSAbortAlgorithm::hasCallback(WebCore::JSAbortAlgorithm *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSAbortControllerOwner::~JSAbortControllerOwner(WebCore::JSAbortControllerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAbstractRangeOwner::~JSAbstractRangeOwner(WebCore::JSAbstractRangeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAnimationEffectOwner::~JSAnimationEffectOwner(WebCore::JSAnimationEffectOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAnimationTimelineOwner::~JSAnimationTimelineOwner(WebCore::JSAnimationTimelineOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioBufferOwner::~JSAudioBufferOwner(WebCore::JSAudioBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSAudioBufferCallback::hasCallback(WebCore::JSAudioBufferCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSAudioBufferSourceNodeOwner::~JSAudioBufferSourceNodeOwner(WebCore::JSAudioBufferSourceNodeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioContextOwner::~JSAudioContextOwner(WebCore::JSAudioContextOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioListenerOwner::~JSAudioListenerOwner(WebCore::JSAudioListenerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioParamOwner::~JSAudioParamOwner(WebCore::JSAudioParamOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioParamMapOwner::~JSAudioParamMapOwner(WebCore::JSAudioParamMapOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioTrackOwner::~JSAudioTrackOwner(WebCore::JSAudioTrackOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioTrackConfigurationOwner::~JSAudioTrackConfigurationOwner(WebCore::JSAudioTrackConfigurationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioTrackListOwner::~JSAudioTrackListOwner(WebCore::JSAudioTrackListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioWorkletOwner::~JSAudioWorkletOwner(WebCore::JSAudioWorkletOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioWorkletNodeOwner::~JSAudioWorkletNodeOwner(WebCore::JSAudioWorkletNodeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSAudioWorkletProcessorOwner::~JSAudioWorkletProcessorOwner(WebCore::JSAudioWorkletProcessorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSAudioWorkletProcessorConstructor::hasCallback(WebCore::JSAudioWorkletProcessorConstructor *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSAuthenticatorResponseOwner::~JSAuthenticatorResponseOwner(WebCore::JSAuthenticatorResponseOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::jsANGLEInstancedArraysPrototypeFunction_drawArraysInstancedANGLE(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  JSValue v41;
  JSC::VM *v42;
  JSC::VM *v43;
  unsigned int v44[2];
  unint64_t v45;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "ANGLEInstancedArrays", "drawArraysInstancedANGLE");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSANGLEInstancedArrays::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSANGLEInstancedArrays::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "ANGLEInstancedArrays", "drawArraysInstancedANGLE");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v41);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v44);
    if (v44[1])
    {
      return 0;
    }
    else
    {
      v17 = *((_QWORD *)a2 + 7);
      v45 = v17;
      v18 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v17 < 0xFFFE000000000000)
      {
        v27 = v17 - 0x2000000000000;
        if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, this);
          v27 = v13.n128_u64[0];
        }
        v28 = (v27 >> 52) & 0x7FF;
        v29 = v28 - 1023;
        v30 = v27 >> (51 - (v27 >> 52));
        if (v28 > 0x433)
          LODWORD(v30) = v27 << ((v27 >> 52) - 51);
        if (v28 >= 0x41F)
          v31 = v30;
        else
          v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
        if ((v27 & 0x8000000000000000) == 0)
          v32 = v31;
        else
          v32 = -v31;
        if (v29 <= 0x53)
          v19 = v32;
        else
          v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
      {
        return 0;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 8);
        v45 = v20;
        v21 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v20 < 0xFFFE000000000000)
        {
          v33 = v20 - 0x2000000000000;
          if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v42 = (JSC::VM *)*((_QWORD *)this + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, this);
            v21 = v42;
            v33 = v13.n128_u64[0];
          }
          v34 = (v33 >> 52) & 0x7FF;
          if ((v34 - 1023) <= 0x53)
          {
            v37 = v33 >> (51 - (v33 >> 52));
            if (v34 > 0x433)
              LODWORD(v37) = v33 << ((v33 >> 52) - 51);
            if (v34 >= 0x41F)
              v38 = v37;
            else
              v38 = (((1 << ((v33 >> 52) + 1)) - 1) & v37) + (1 << ((v33 >> 52) + 1));
            if ((v33 & 0x8000000000000000) == 0)
              v22 = v38;
            else
              v22 = -v38;
          }
          else
          {
            v22 = 0;
          }
        }
        else
        {
          v22 = v20;
        }
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
          return 0;
        }
        else
        {
          v23 = *((_QWORD *)a2 + 9);
          v45 = v23;
          v24 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v23 < 0xFFFE000000000000)
          {
            v35 = v23 - 0x2000000000000;
            if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, this);
              v35 = v13.n128_u64[0];
            }
            v36 = (v35 >> 52) & 0x7FF;
            if ((v36 - 1023) <= 0x53)
            {
              v39 = v35 >> (51 - (v35 >> 52));
              if (v36 > 0x433)
                LODWORD(v39) = v35 << ((v35 >> 52) - 51);
              if (v36 >= 0x41F)
                v40 = v39;
              else
                v40 = (((1 << ((v35 >> 52) + 1)) - 1) & v39) + (1 << ((v35 >> 52) + 1));
              if ((v35 & 0x8000000000000000) == 0)
                v25 = v40;
              else
                v25 = -v40;
            }
            else
            {
              v25 = 0;
            }
          }
          else
          {
            v25 = v23;
          }
          if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
          {
            return 0;
          }
          else
          {
            if (*(_QWORD *)(v12 + 16))
              WebCore::WebGLRenderingContextBase::drawArraysInstanced(*(_QWORD *)(v12 + 16), v44[0], v19, v22, v25, v13, v14, v15, v16);
            return 10;
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsANGLEInstancedArraysPrototypeFunction_drawElementsInstancedANGLE(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  JSValue v38;
  unint64_t v39;
  JSC::VM *v40;
  unsigned int v41[2];
  unsigned int v42[2];
  unint64_t v43;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v40, "ANGLEInstancedArrays", "drawElementsInstancedANGLE");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSANGLEInstancedArrays::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSANGLEInstancedArrays::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v40, "ANGLEInstancedArrays", "drawElementsInstancedANGLE");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v38);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
  if (v42[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v43 = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v24 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, this);
      v24 = v39;
    }
    v25 = (v24 >> 52) & 0x7FF;
    v26 = v25 - 1023;
    v27 = v24 >> (51 - (v24 >> 52));
    if (v25 > 0x433)
      LODWORD(v27) = v24 << ((v24 >> 52) - 51);
    if (v25 >= 0x41F)
      v28 = v27;
    else
      v28 = (((1 << ((v24 >> 52) + 1)) - 1) & v27) + (1 << ((v24 >> 52) + 1));
    if ((v24 & 0x8000000000000000) == 0)
      v29 = v28;
    else
      v29 = -v28;
    if (v26 <= 0x53)
      v15 = v29;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v41);
  if (v41[1])
    return 0;
  v20 = *((_QWORD *)a2 + 9);
  v43 = v20;
  if (v20 < 0xFFFE000000000000)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, this);
      v23 = v16.n128_f64[0];
    }
    else
    {
      *(_QWORD *)&v23 = v20 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    v16.n128_f64[0] = fabs(v23);
    v17.n128_u64[0] = 0x7FF0000000000000;
    if (v16.n128_f64[0] == INFINITY)
    {
      v21 = 0;
    }
    else
    {
      v16.n128_f64[0] = fmod(trunc(v23), 1.84467441e19);
      if (v16.n128_f64[0] >= 0.0)
      {
        v21 = (unint64_t)v16.n128_f64[0];
      }
      else
      {
        v16.n128_f64[0] = -v16.n128_f64[0];
        v21 = -(uint64_t)(unint64_t)v16.n128_f64[0];
      }
    }
  }
  else
  {
    v21 = (int)v20;
  }
  v30 = *((_QWORD *)a2 + 10);
  v43 = v30;
  v31 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v30 < 0xFFFE000000000000)
  {
    v34 = v30 - 0x2000000000000;
    if (v30 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, this);
      v34 = v16.n128_u64[0];
    }
    v35 = (v34 >> 52) & 0x7FF;
    if ((v35 - 1023) <= 0x53)
    {
      v36 = v34 >> (51 - (v34 >> 52));
      if (v35 > 0x433)
        LODWORD(v36) = v34 << ((v34 >> 52) - 51);
      if (v35 >= 0x41F)
        v37 = v36;
      else
        v37 = (((1 << ((v34 >> 52) + 1)) - 1) & v36) + (1 << ((v34 >> 52) + 1));
      if ((v34 & 0x8000000000000000) == 0)
        v32 = v37;
      else
        v32 = -v37;
    }
    else
    {
      v32 = 0;
    }
  }
  else
  {
    v32 = v30;
  }
  if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
    return 0;
  if (*(_QWORD *)(v12 + 16))
    WebCore::WebGLRenderingContextBase::drawElementsInstanced(*(_QWORD *)(v12 + 16), v42[0], v15, v41[0], v21, v32, v16, v17, v18, v19);
  return 10;
}

uint64_t WebCore::jsANGLEInstancedArraysPrototypeFunction_vertexAttribDivisorANGLE(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  JSValue v15;
  JSC::VM *v16;
  _DWORD v17[2];
  _DWORD v18[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "ANGLEInstancedArrays", "vertexAttribDivisorANGLE");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSANGLEInstancedArrays::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSANGLEInstancedArrays::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "ANGLEInstancedArrays", "vertexAttribDivisorANGLE");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v18);
    if (v18[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v17);
      if (v17[1])
      {
        return 0;
      }
      else
      {
        if (!*(_QWORD *)(v12 + 16))
          return 10;
        result = *(_QWORD *)(v12 + 16);
        if (*(_BYTE *)(result + 364))
          return 10;
        if (*(_DWORD *)(result + 164) <= v18[0])
        {
          WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)result, 1281, (uint64_t)"vertexAttribDivisor", 20, (uint64_t)"index out of range", 19);
          return 10;
        }
        v14 = *(_QWORD *)(result + 144);
        if (*(_DWORD *)(v14 + 68) > v18[0])
        {
          *(_DWORD *)(*(_QWORD *)(v14 + 56) + 56 * v18[0] + 48) = v17[0];
          (*(void (**)(_QWORD))(**(_QWORD **)(result + 88) + 1200))(*(_QWORD *)(result + 88));
          return 10;
        }
        __break(0xC471u);
      }
    }
  }
  return result;
}

unint64_t JSC::JSArrayBufferView::length(JSC::JSArrayBufferView *this)
{
  unint64_t result;
  char v2;
  _BYTE v3[16];

  if ((*((_BYTE *)this + 40) & 7u) <= 2)
    return *((_QWORD *)this + 3);
  v3[0] = 0;
  v3[8] = 0;
  result = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)this, (WTF *)v3);
  if (!v2)
    return 0;
  return result;
}

unint64_t JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(uint64_t a1, WTF *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  JSC::InlineWatchpointSet *v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  if ((JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, a2) & 1) != 0)
    goto LABEL_16;
  v4 = *(unsigned __int8 *)(a1 + 40);
  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = v5 >> 8;
    return v5 | (v6 << 8);
  }
  v8 = v4 - 88;
  if ((v4 - 88) <= 0x35)
  {
    if (((1 << v8) & 0x3D) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      goto LABEL_13;
    }
    if (((1 << v8) & 0x3D000000000000) != 0)
    {
      v9 = *(_QWORD *)(a1 + 48);
      goto LABEL_13;
    }
  }
  if (v4 != 16 && v4 != 48)
    goto LABEL_16;
  v9 = JSC::JSArrayBufferView::slowDownAndWasteMemory((JSC::JSArrayBufferView *)a1);
LABEL_13:
  if (!v9)
  {
LABEL_16:
    LOBYTE(v5) = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  *(_DWORD *)v9 += 2;
  if (*((_BYTE *)a2 + 8))
  {
    v10 = *(_QWORD *)a2;
  }
  else
  {
    if (*(_BYTE *)(v9 + 64) && (v20 = *(_QWORD *)(v9 + 32)) != 0)
      v10 = atomic_load((unint64_t *)(v20 + 32));
    else
      v10 = *(_QWORD *)(v9 + 48);
    *(_QWORD *)a2 = v10;
    *((_BYTE *)a2 + 8) = 1;
  }
  v11 = v10 - *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
    LOBYTE(v12) = 0;
  else
    v12 = qword_1968BCD30[(char)(*(_BYTE *)(a1 + 5) - 42)];
  v5 = v11 >> v12;
  v6 = v5 >> 8;
  v13 = *(_DWORD *)v9 == 2;
  *(_DWORD *)v9 -= 2;
  if (v13)
  {
    v21 = v5 >> 8;
    v22 = v5;
    v14 = v9;
    v15 = *(_QWORD *)(v9 + 80);
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      *(_QWORD *)(v9 + 80) = 0;
    }
    v16 = (JSC::InlineWatchpointSet *)(v9 + 72);
    if ((*(_BYTE *)(v14 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat(v16);
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v14 + 16));
    v18 = *(WTF **)(v14 + 8);
    if ((v18 & 1) == 0 && v18)
    {
      v19 = *(WTF **)v18;
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)v18 = 0;
        *((_DWORD *)v18 + 2) = 0;
        WTF::fastFree(v19, v17);
      }
      WTF::fastFree(v18, v17);
    }
    WTF::fastFree((WTF *)v14, v17);
    v6 = v21;
    LOBYTE(v5) = v22;
  }
  return v5 | (v6 << 8);
}

uint64_t JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(uint64_t a1, WTF *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  WTF *v21;
  WTF *v22;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if ((v2 & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3)
      return 1;
    v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v4 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v3 & 0x3FFFFFFFFLL) + v4))
      return 1;
  }
  if ((v2 & 6) == 0)
    return 0;
  v6 = v2 - 88;
  if ((v2 - 88) <= 0x35)
  {
    if (((1 << v6) & 0x3D) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      goto LABEL_16;
    }
    if (((1 << v6) & 0x3D000000000000) != 0)
    {
      v7 = *(_QWORD *)(a1 + 48);
      goto LABEL_16;
    }
  }
  v21 = a2;
  if (v2 != 16 && v2 != 48)
    return 1;
  v8 = a1;
  v7 = JSC::JSArrayBufferView::slowDownAndWasteMemory((JSC::JSArrayBufferView *)a1);
  a1 = v8;
  a2 = v21;
LABEL_16:
  if (!v7)
    return 1;
  *(_DWORD *)v7 += 2;
  if (*((_BYTE *)a2 + 8))
  {
    v9 = *(_QWORD *)a2;
  }
  else
  {
    if (*(_BYTE *)(v7 + 64) && (v19 = *(_QWORD *)(v7 + 32)) != 0)
      v9 = atomic_load((unint64_t *)(v19 + 32));
    else
      v9 = *(_QWORD *)(v7 + 48);
    *(_QWORD *)a2 = v9;
    *((_BYTE *)a2 + 8) = 1;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v9;
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 5) - 42) > 7u)
      LOBYTE(v12) = 0;
    else
      v12 = qword_1968BCD30[(char)(*(_BYTE *)(a1 + 5) - 42)];
    v11 = (*(_QWORD *)(a1 + 24) << v12) + v10;
  }
  result = v10 > v9 || v11 > v9;
  v14 = *(_DWORD *)v7 == 2;
  *(_DWORD *)v7 -= 2;
  if (v14)
  {
    v20 = result;
    v22 = (WTF *)v7;
    v15 = *(_QWORD *)(v7 + 80);
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 3;
      *((_QWORD *)v22 + 10) = 0;
    }
    if ((*((_BYTE *)v22 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v22 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v22 + 16));
    v17 = (WTF *)*((_QWORD *)v22 + 1);
    if ((v17 & 1) == 0 && v17)
    {
      v18 = *(WTF **)v17;
      if (*(_QWORD *)v17)
      {
        *(_QWORD *)v17 = 0;
        *((_DWORD *)v17 + 2) = 0;
        WTF::fastFree(v18, v16);
      }
      WTF::fastFree(v17, v16);
    }
    WTF::fastFree(v22, v16);
    return v20;
  }
  return result;
}

void WebCore::JSCallbackData::WeakOwner::~WeakOwner(WebCore::JSCallbackData::WeakOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::JSCallbackData::WeakOwner::isReachableFromOpaqueRoots(int a1, int a2, void *a3, uint64_t a4, _QWORD *a5)
{
  WTF::ConcurrentPtrHashSet *v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  void *v16;

  if (a5)
  {
    *a5 = "Callback owner is an opaque root";
    a5[1] = 33;
  }
  v5 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v6 = (_DWORD *)*((_QWORD *)v5 + 6);
  if ((_DWORD *)((char *)v5 + 56) == v6)
  {
    v15 = a4;
    v16 = a3;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v5, a3);
    a4 = v15;
    a3 = v16;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, a3);
      return 1;
    }
  }
  else
  {
    v7 = v6[1];
    v8 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(void **)&v6[2 * v12 + 4];
      if (!v13)
        return 0;
      if (v13 == a3)
        goto LABEL_12;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19486AB68);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::jsAbortControllerPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unint64_t v9;
  uint64_t v11;

  v11 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "AbortController", "abort");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSAbortController::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSAbortController::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "AbortController", "abort");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  WebCore::AbortController::abort(*(_QWORD *)(v3 + 24), (uint64_t)this, v9);
  return 10;
}

unint64_t WebCore::jsAbortSignalConstructorFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::ScriptExecutionContext *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  void *v8;
  unint64_t v9;
  WebCore::AbortSignal *v10;
  unint64_t result;
  bmalloc::api *v12;
  void *v13;
  WebCore::AbortSignal *v14;

  v5 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  if (*((_DWORD *)a2 + 8) == 1)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 6);
  WebCore::AbortSignal::abort((uint64_t)this, v5, v6, (uint64_t *)&v14);
  if (*(uint64_t (***)(WebCore::AbortSignal *__hidden))v14 == off_1E33A0468)
  {
    v9 = WebCore::createWrapper<WebCore::AbortSignal,WebCore::AbortSignal>(this, &v14, v7);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v10, v8);
        bmalloc::api::isoDeallocate(v12, v13);
      }
      else
      {
        --*((_DWORD *)v10 + 6);
      }
    }
    return v9;
  }
  result = 413;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::jsAbortSignalConstructorFunction_timeout(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  WebCore::AbortSignal *v6;
  WebCore::JSDOMGlobalObject *v7;
  void *v8;
  unint64_t v9;
  unint64_t result;
  bmalloc::api *v11;
  void *v12;
  JSC::VM *v13;
  JSValue v14;
  WebCore::AbortSignal *v15;
  WebCore::ScriptExecutionContext *v16;
  int v17;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = (JSC::VM *)*((_QWORD *)this + 7);
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v13, this, v14);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v6 = (WebCore::AbortSignal *)v5;
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 6), (uint64_t)&v16);
  if (v17)
    return 0;
  WebCore::AbortSignal::timeout(v6, v16, (uint64_t *)&v15);
  if (*(uint64_t (***)(WebCore::AbortSignal *__hidden))v15 == off_1E33A0468)
  {
    v9 = WebCore::createWrapper<WebCore::AbortSignal,WebCore::AbortSignal>(this, &v15, v7);
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v15, v8);
        bmalloc::api::isoDeallocate(v11, v12);
      }
      else
      {
        --*((_DWORD *)v15 + 6);
      }
    }
    return v9;
  }
  result = 413;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::jsAbortSignalConstructorFunction_any(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  JSValue v9;
  int i;
  unsigned int v11;
  uint64_t IndexQuickly;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  WebCore::JSDOMGlobalObject *v26;
  void *v27;
  uint64_t v28;
  WTF *v29;
  WebCore::AbortSignal *v30;
  bmalloc::api *v31;
  void *v32;
  bmalloc::api *v33;
  void *v34;
  JSC::VM *v36;
  JSValue v37;
  int v38;
  void *v39;
  uint64_t v40;
  WTF *v41;
  WebCore::AbortSignal *v42;
  bmalloc::api *v43;
  void *v44;
  WTF::StringImpl *v45[2];
  int v46;
  WebCore::AbortSignal *v47;
  WTF *v48;
  uint64_t v49;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v36, this, v37);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v6 = *((_QWORD *)a2 + 6);
  v7 = *((_QWORD *)this + 7);
  v47 = (WebCore::AbortSignal *)v7;
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v14 = v45[0];
    v45[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = 0;
    v16 = 1;
    v46 = 1;
    goto LABEL_55;
  }
  v8 = (WebCore::ScriptExecutionContext *)v5;
  v48 = 0;
  v49 = 0;
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v11 = (*(_BYTE *)(v6 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v6 + 8) - 8) : 0;
      if (i - 1 >= v11)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v6, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v6, this, (i - 1));
      if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::AbortSignal>>::convert(this, IndexQuickly, (uint64_t)&v48);
      if (*(_QWORD *)(v7 + 16))
      {
        v22 = JSC::JSArrayIterator::create();
        v23 = i | 0xFFFE000000000000;
        if (i < 0)
          v23 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v22 + 16) = v23;
        goto LABEL_36;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v6, v9);
    if (!*(_DWORD *)(v7 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) == 0)
    {
      while (1)
      {
        v17 = JSC::iteratorStep();
        if (*(_QWORD *)(v7 + 16) || v17 == 6)
          break;
        v19 = JSC::iteratorValue();
        if (*(_DWORD *)(v7 + 80))
        {
          v20 = v19;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7);
          v19 = v20;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::AbortSignal>>::convert(this, v19, (uint64_t)&v48);
        if (*(_QWORD *)(v7 + 16))
        {
LABEL_36:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v7 + 80))
  {
    v38 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7);
    v24 = v48;
    if (v38)
    {
      v46 = 1;
      if (HIDWORD(v49))
      {
        v40 = 8 * HIDWORD(v49);
        v41 = v48;
        do
        {
          v42 = *(WebCore::AbortSignal **)v41;
          *(_QWORD *)v41 = 0;
          if (v42)
          {
            if (*((_DWORD *)v42 + 6) == 1)
            {
              WebCore::AbortSignal::~AbortSignal(v42, v39);
              bmalloc::api::isoDeallocate(v43, v44);
            }
            else
            {
              --*((_DWORD *)v42 + 6);
            }
          }
          v41 = (WTF *)((char *)v41 + 8);
          v40 -= 8;
        }
        while (v40);
      }
      if (v24)
        WTF::fastFree(v24, v39);
      v15 = 0;
      v16 = 1;
      goto LABEL_55;
    }
  }
  else
  {
    v24 = v48;
  }
  v25 = HIDWORD(v49);
  v46 = 0;
  v45[0] = 0;
  v45[1] = 0;
  v48 = v24;
  WebCore::AbortSignal::any(v8, (uint64_t)&v48, (uint64_t *)&v47);
  if (*(uint64_t (***)(WebCore::AbortSignal *__hidden))v47 != off_1E33A0468)
  {
    __break(0xC471u);
    JUMPOUT(0x19486B3FCLL);
  }
  v15 = WebCore::createWrapper<WebCore::AbortSignal,WebCore::AbortSignal>(this, &v47, v26);
  if (!v47)
  {
LABEL_43:
    if ((_DWORD)v25)
      goto LABEL_44;
    goto LABEL_52;
  }
  if (*((_DWORD *)v47 + 6) != 1)
  {
    --*((_DWORD *)v47 + 6);
    goto LABEL_43;
  }
  WebCore::AbortSignal::~AbortSignal(v47, v27);
  bmalloc::api::isoDeallocate(v33, v34);
  if ((_DWORD)v25)
  {
LABEL_44:
    v28 = 8 * v25;
    v29 = v24;
    do
    {
      v30 = *(WebCore::AbortSignal **)v29;
      *(_QWORD *)v29 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v30, v27);
          bmalloc::api::isoDeallocate(v31, v32);
        }
        else
        {
          --*((_DWORD *)v30 + 6);
        }
      }
      v29 = (WTF *)((char *)v29 + 8);
      v28 -= 8;
    }
    while (v28);
  }
LABEL_52:
  if (v24)
    WTF::fastFree(v24, v27);
  v16 = 0;
LABEL_55:
  ((void (*)(WTF **, WTF::StringImpl **))off_1E3223190[v16])(&v48, v45);
  return v15;
}

unint64_t JSC::JSObject::tryGetIndexQuickly(JSC::JSObject *this, unsigned int a2, uint64_t a3)
{
  int v3;
  unint64_t result;
  uint64_t v6;
  JSC::JSObject *v7;

  v3 = *((_BYTE *)this + 4) & 0xF;
  result = 0;
  v6 = *((_QWORD *)this + 1);
  switch(v3)
  {
    case 0:
    case 1:
      v7 = this;
      if (!JSC::JSObject::canGetIndexQuicklyForTypedArray(this, a2))
        goto LABEL_11;
      result = JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)v7, a2, a3);
      break;
    case 3:
      return result;
    case 4:
    case 5:
    case 8:
    case 9:
      if (*(_DWORD *)(v6 - 8) <= a2)
        goto LABEL_11;
      result = *(_QWORD *)(v6 + 8 * a2);
      break;
    case 6:
    case 7:
      if (*(_DWORD *)(v6 - 8) <= a2)
        goto LABEL_11;
      result = *(_QWORD *)(v6 + 8 * a2) + 0x2000000000000;
      break;
    case 10:
    case 11:
    case 12:
    case 13:
      if (*(_DWORD *)(v6 - 4) <= a2)
LABEL_11:
        result = 0;
      else
        result = *(_QWORD *)(v6 + 8 * a2 + 16);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19486B51CLL);
  }
  return result;
}

BOOL JSC::JSObject::canGetIndexQuicklyForTypedArray(JSC::JSObject *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  switch(*((_BYTE *)this + 5))
  {
    case '\'':
    case '(':
    case ')':
      v2 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
        goto LABEL_23;
      v3 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v3 + 64) && (v21 = *(_QWORD *)(v3 + 32)) != 0)
        v4 = *(_QWORD *)(v21 + 32);
      else
        v4 = *(_QWORD *)(v3 + 48);
      v6 = *((_QWORD *)this + 3);
      v5 = *((_QWORD *)this + 4);
      if (v6 + v5 > v4)
        return 0;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        return v6 > v2;
      v7 = v4 - v5;
      return v7 > v2;
    case '*':
    case '+':
      v2 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
        goto LABEL_23;
      v12 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v12 + 64) && (v23 = *(_QWORD *)(v12 + 32)) != 0)
        v13 = *(_QWORD *)(v23 + 32);
      else
        v13 = *(_QWORD *)(v12 + 48);
      v6 = *((_QWORD *)this + 3);
      v14 = *((_QWORD *)this + 4);
      if (v14 + 2 * v6 > v13)
        return 0;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        return v6 > v2;
      v11 = a2 >= (v13 - v14) >> 1;
      return !v11;
    case ',':
    case '-':
    case '.':
      v2 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
        goto LABEL_23;
      v8 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v8 + 64) && (v22 = *(_QWORD *)(v8 + 32)) != 0)
        v9 = *(_QWORD *)(v22 + 32);
      else
        v9 = *(_QWORD *)(v8 + 48);
      v6 = *((_QWORD *)this + 3);
      v10 = *((_QWORD *)this + 4);
      if (v10 + 4 * v6 > v9)
        return 0;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        return v6 > v2;
      v11 = a2 >= (v9 - v10) >> 2;
      return !v11;
    case '/':
      v2 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
      {
LABEL_23:
        v7 = *((_QWORD *)this + 3);
        return v7 > v2;
      }
      v18 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v18 + 64) && (v24 = *(_QWORD *)(v18 + 32)) != 0)
        v19 = *(_QWORD *)(v24 + 32);
      else
        v19 = *(_QWORD *)(v18 + 48);
      v6 = *((_QWORD *)this + 3);
      v20 = *((_QWORD *)this + 4);
      if (v20 + 8 * v6 > v19)
        return 0;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        return v6 > v2;
      v11 = a2 >= (v19 - v20) >> 3;
      return !v11;
    case '0':
    case '1':
      if ((*((_BYTE *)this + 40) & 7u) < 3)
        return 0;
      v17 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (!*(_BYTE *)(v17 + 64) || !*(_QWORD *)(v17 + 32))
        return 0;
      return 0;
    default:
      return 0;
  }
}

unint64_t JSC::JSObject::getIndexQuicklyForTypedArray(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if ((a2 & 0x80000000) != 0 && a3)
    *(_DWORD *)(a3 + 4) |= 4u;
  switch(*(_BYTE *)(a1 + 5))
  {
    case '\'':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v42 + 64) && (v66 = *(_QWORD *)(v42 + 32)) != 0)
          v43 = *(_QWORD *)(v66 + 32);
        else
          v43 = *(_QWORD *)(v42 + 48);
        v45 = *(_QWORD *)(a1 + 24);
        v44 = *(_QWORD *)(a1 + 32);
        if (v45 + v44 > v43)
          goto LABEL_91;
        if ((*(_BYTE *)(a1 + 40) & 1) == 0)
        {
          if (v45 > a2)
          {
LABEL_8:
            v4 = *(_QWORD *)(a1 + 16);
            v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v4 = (v4 & 0x3FFFFFFFFLL) + v5;
            v6 = *(char *)(v4 + a2);
            return v6 | 0xFFFE000000000000;
          }
LABEL_91:
          __break(0xC471u);
          JUMPOUT(0x19486BB44);
        }
        v3 = v43 - v44;
      }
      else
      {
        v3 = *(_QWORD *)(a1 + 24);
      }
      if (v3 > a2)
        goto LABEL_8;
      goto LABEL_91;
    case '(':
      if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
      {
        v17 = *(_QWORD *)(a1 + 24);
        goto LABEL_37;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v46 + 64) && (v67 = *(_QWORD *)(v46 + 32)) != 0)
        v47 = *(_QWORD *)(v67 + 32);
      else
        v47 = *(_QWORD *)(v46 + 48);
      v49 = *(_QWORD *)(a1 + 24);
      v48 = *(_QWORD *)(a1 + 32);
      if (v49 + v48 > v47)
        goto LABEL_97;
      if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      {
        v17 = v47 - v48;
LABEL_37:
        if (v17 > a2)
          goto LABEL_38;
LABEL_97:
        __break(0xC471u);
        JUMPOUT(0x19486BB94);
      }
      if (v49 <= a2)
        goto LABEL_97;
      goto LABEL_38;
    case ')':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v30 + 64) && (v63 = *(_QWORD *)(v30 + 32)) != 0)
          v31 = *(_QWORD *)(v63 + 32);
        else
          v31 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(a1 + 24);
        v32 = *(_QWORD *)(a1 + 32);
        if (v33 + v32 > v31)
          goto LABEL_21;
        if ((*(_BYTE *)(a1 + 40) & 1) == 0)
        {
          if (v33 > a2)
          {
LABEL_38:
            v18 = *(_QWORD *)(a1 + 16);
            v19 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v19 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v18 = (v18 & 0x3FFFFFFFFLL) + v19;
            v9 = *(unsigned __int8 *)(v18 + a2);
            return v9 | 0xFFFE000000000000;
          }
LABEL_21:
          __break(0xC471u);
          JUMPOUT(0x19486B83CLL);
        }
        v10 = v31 - v32;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 24);
      }
      if (v10 > a2)
        goto LABEL_38;
      goto LABEL_21;
    case '*':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v34 + 64) && (v64 = *(_QWORD *)(v34 + 32)) != 0)
          v35 = *(_QWORD *)(v64 + 32);
        else
          v35 = *(_QWORD *)(v34 + 48);
        v37 = *(_QWORD *)(a1 + 24);
        v36 = *(_QWORD *)(a1 + 32);
        if (v36 + 2 * v37 <= v35)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v35 - v36) >> 1)
              goto LABEL_120;
          }
          else if (v37 <= a2)
          {
            goto LABEL_120;
          }
LABEL_24:
          v11 = *(_QWORD *)(a1 + 16);
          v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v12 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v11 = (v11 & 0x3FFFFFFFFLL) + v12;
          v6 = *(__int16 *)(v11 + 2 * a2);
          return v6 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_24;
      }
LABEL_120:
      __break(0xC471u);
      JUMPOUT(0x19486BC90);
    case '+':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v26 + 64) && (v62 = *(_QWORD *)(v26 + 32)) != 0)
          v27 = *(_QWORD *)(v62 + 32);
        else
          v27 = *(_QWORD *)(v26 + 48);
        v29 = *(_QWORD *)(a1 + 24);
        v28 = *(_QWORD *)(a1 + 32);
        if (v28 + 2 * v29 <= v27)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v27 - v28) >> 1)
              goto LABEL_117;
          }
          else if (v29 <= a2)
          {
            goto LABEL_117;
          }
LABEL_14:
          v7 = *(_QWORD *)(a1 + 16);
          v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v8 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v7 = (v7 & 0x3FFFFFFFFLL) + v8;
          v9 = *(unsigned __int16 *)(v7 + 2 * a2);
          return v9 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_14;
      }
LABEL_117:
      __break(0xC471u);
      JUMPOUT(0x19486BC5CLL);
    case ',':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v50 + 64) && (v68 = *(_QWORD *)(v50 + 32)) != 0)
          v51 = *(_QWORD *)(v68 + 32);
        else
          v51 = *(_QWORD *)(v50 + 48);
        v53 = *(_QWORD *)(a1 + 24);
        v52 = *(_QWORD *)(a1 + 32);
        if (v52 + 4 * v53 <= v51)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v51 - v52) >> 2)
              goto LABEL_126;
          }
          else if (v53 <= a2)
          {
            goto LABEL_126;
          }
LABEL_44:
          v20 = *(_QWORD *)(a1 + 16);
          v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v21 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v20 = (v20 & 0x3FFFFFFFFLL) + v21;
          v9 = *(unsigned int *)(v20 + 4 * a2);
          return v9 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_44;
      }
LABEL_126:
      __break(0xC471u);
      JUMPOUT(0x19486BCF8);
    case '-':
      if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
          goto LABEL_50;
LABEL_128:
        __break(0xC471u);
        JUMPOUT(0x19486BD24);
      }
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v54 + 64) && (v69 = *(_QWORD *)(v54 + 32)) != 0)
        v55 = *(_QWORD *)(v69 + 32);
      else
        v55 = *(_QWORD *)(v54 + 48);
      v57 = *(_QWORD *)(a1 + 24);
      v56 = *(_QWORD *)(a1 + 32);
      if (v56 + 4 * v57 > v55)
        goto LABEL_128;
      if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      {
        if (a2 >= (v55 - v56) >> 2)
          goto LABEL_128;
      }
      else if (v57 <= a2)
      {
        goto LABEL_128;
      }
LABEL_50:
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v23 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v22 = (v22 & 0x3FFFFFFFFLL) + v23;
      v9 = *(unsigned int *)(v22 + 4 * a2);
      if ((v9 & 0x80000000) == 0)
        return v9 | 0xFFFE000000000000;
      v16 = (double)v9;
      return *(_QWORD *)&v16 + 0x2000000000000;
    case '.':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v38 + 64) && (v65 = *(_QWORD *)(v38 + 32)) != 0)
          v39 = *(_QWORD *)(v65 + 32);
        else
          v39 = *(_QWORD *)(v38 + 48);
        v41 = *(_QWORD *)(a1 + 24);
        v40 = *(_QWORD *)(a1 + 32);
        if (v40 + 4 * v41 <= v39)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v39 - v40) >> 2)
              goto LABEL_122;
          }
          else if (v41 <= a2)
          {
            goto LABEL_122;
          }
LABEL_31:
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v15 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v14 = (v14 & 0x3FFFFFFFFLL) + v15;
          v16 = *(float *)(v14 + 4 * a2);
          return *(_QWORD *)&v16 + 0x2000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_31;
      }
LABEL_122:
      __break(0xC471u);
      JUMPOUT(0x19486BCBCLL);
    case '/':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v58 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v58 + 64) && (v70 = *(_QWORD *)(v58 + 32)) != 0)
          v59 = *(_QWORD *)(v70 + 32);
        else
          v59 = *(_QWORD *)(v58 + 48);
        v61 = *(_QWORD *)(a1 + 24);
        v60 = *(_QWORD *)(a1 + 32);
        if (v60 + 8 * v61 <= v59)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v59 - v60) >> 3)
              goto LABEL_130;
          }
          else if (v61 <= a2)
          {
            goto LABEL_130;
          }
LABEL_57:
          v24 = *(_QWORD *)(a1 + 16);
          v25 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v25 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v24 = (v24 & 0x3FFFFFFFFLL) + v25;
          v16 = *(double *)(v24 + 8 * a2);
          return *(_QWORD *)&v16 + 0x2000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_57;
      }
LABEL_130:
      __break(0xC471u);
      JUMPOUT(0x19486BD50);
    case '0':
      __break(0xC471u);
      JUMPOUT(0x19486BDE4);
    case '1':
      __break(0xC471u);
      JUMPOUT(0x19486BDB4);
    default:
      __break(0xC471u);
      JUMPOUT(0x19486BD84);
  }
}

uint64_t JSC::JSObject::get(JSC::JSObject *this, JSC::JSGlobalObject *a2, uint64_t a3)
{
  JSC::JSObject *v5;
  JSC::VM *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  char v25;
  int v26;
  _QWORD v27[7];
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  char v33;

  v5 = this;
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v27[2] = 0xFFFFFFFF00000000;
  LOBYTE(v28) = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v7 = a3;
  memset(&v27[4], 0, 21);
  v27[3] = this;
  while (1)
  {
    v8 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
    v9 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, _QWORD *))(16
                                                                                              * *(unsigned int *)(v8 + 0x4C)
                                                                                              + 0x70))(v5, a2, a3, v27);
    v10 = v9;
    if (*((_DWORD *)v6 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
      if (((hasExceptionsAfterHandlingTraps | v10) & 1) != 0)
      {
        v26 = hasExceptionsAfterHandlingTraps ^ 1;
        goto LABEL_36;
      }
    }
    else if ((v9 & 1) != 0)
    {
      if (!*((_DWORD *)v6 + 20))
        goto LABEL_38;
      v26 = 1;
      goto LABEL_52;
    }
    v11 = BYTE2(v27[6]);
    if (BYTE2(v27[6]) == 3)
    {
      if (BYTE4(v27[6]))
        goto LABEL_35;
      v12 = *((unsigned __int8 *)v5 + 5);
      if (v12 == 61)
        goto LABEL_18;
    }
    else
    {
      v12 = *((unsigned __int8 *)v5 + 5);
      if (v12 == 61)
      {
        if (BYTE2(v27[6]) == 1)
          goto LABEL_35;
        goto LABEL_16;
      }
    }
    if ((v12 - 39) <= 0xA)
    {
      if ((*((_BYTE *)v5 + 40) & 7u) > 2)
      {
        LOBYTE(v32) = 0;
        v33 = 0;
        v18 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v5, (WTF *)&v32);
        if (v19)
          v13 = v18;
        else
          v13 = 0;
      }
      else
      {
        v13 = *((_QWORD *)v5 + 3);
      }
      if (v13 <= v7)
        goto LABEL_35;
      v11 = BYTE2(v27[6]);
    }
LABEL_16:
    if ((*(_WORD *)(v8 + 12) & 0x800) != 0 && v11 != 3)
      break;
LABEL_18:
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
    if (!v14)
      v14 = *((_QWORD *)v5 + 2);
LABEL_20:
    if ((v14 & 0xFFFE000000000002) == 0)
    {
      v5 = (JSC::JSObject *)v14;
      if (*(unsigned __int8 *)(v14 + 5) > 0x16u)
        continue;
    }
    goto LABEL_35;
  }
  if ((*(_WORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v14 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v5, a2);
  }
  else
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
    if (!v14)
      v14 = *((_QWORD *)v5 + 2);
  }
  if (!*((_DWORD *)v6 + 20))
    goto LABEL_20;
  v16 = v14;
  v17 = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
  v14 = v16;
  if ((v17 & 1) == 0)
    goto LABEL_20;
LABEL_35:
  v26 = 0;
LABEL_36:
  if (!*((_DWORD *)v6 + 20))
  {
    if (!v26)
    {
      v20 = 10;
      goto LABEL_46;
    }
    goto LABEL_38;
  }
LABEL_52:
  v25 = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
  v20 = 10;
  if ((v25 & 1) != 0 || !v26)
    goto LABEL_46;
LABEL_38:
  if (BYTE1(v27[6]) == 2)
  {
    v20 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v27, a2);
  }
  else if (BYTE1(v27[6]) == 1)
  {
    v20 = v27[0];
  }
  else
  {
    JSC::Identifier::from();
    v20 = JSC::PropertySlot::customGetter();
    v22 = v32;
    v32 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
LABEL_46:
  if (v29)
  {
    v23 = *(_DWORD *)(v28 + 4);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x19486C270);
    }
    *(_DWORD *)(v28 + 4) = v23 - 1;
  }
  return v20;
}

WebCore::AbortSignal *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::AbortSignal>>::convert(WebCore::AbortSignal *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WebCore::AbortSignal *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  bmalloc::api *v16;
  void *v17;
  WebCore::AbortSignal *v18;

  v18 = (WebCore::AbortSignal *)*((_QWORD *)result + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return (WebCore::AbortSignal *)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSAbortSignal::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSAbortSignal::s_info && v6 != 0);
  }
  if (!v5)
    return (WebCore::AbortSignal *)JSC::throwTypeError();
  v9 = *(WebCore::AbortSignal **)(a2 + 24);
  if (!v9)
    return (WebCore::AbortSignal *)JSC::throwTypeError();
  ++*((_DWORD *)v9 + 6);
  v18 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v18);
    v13 = *(unsigned int *)(a3 + 12);
    v14 = *(char **)a3;
    v15 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v14[8 * v13] = v15;
    result = v18;
    *(_DWORD *)(a3 + 12) = v13 + 1;
    v18 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(result, v12);
        return (WebCore::AbortSignal *)bmalloc::api::isoDeallocate(v16, v17);
      }
      else
      {
        --*((_DWORD *)result + 6);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore11AbortSignalENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WebCore::AbortSignal **v4;
  uint64_t v5;
  WebCore::AbortSignal *v6;
  bmalloc::api *v7;
  void *v8;
  WTF *result;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::AbortSignal ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 1)
        {
          WebCore::AbortSignal::~AbortSignal(v6, a2);
          bmalloc::api::isoDeallocate(v7, v8);
        }
        else
        {
          --*((_DWORD *)v6 + 6);
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::jsAbortSignalPrototypeFunction_throwIfAborted(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  unsigned int v11;
  JSValue v12;
  uint64_t v13;
  unsigned int v14;
  WTF *v16;
  void *v17;
  unsigned int *v18;

  v3 = *((_QWORD *)a2 + 5);
  v4 = (unsigned int *)*((_QWORD *)this + 7);
  v18 = v4;
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "AbortSignal", "throwIfAborted");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAbortSignal::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAbortSignal::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "AbortSignal", "throwIfAborted");
  v10 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v10 + 156))
  {
    do
      v11 = __ldaxr(v4);
    while (__stlxr(v11 + 1, v4));
    v12.super.isa = *(Class *)(v10 + 136);
    if (!v12.super.isa)
    {
      v13 = *(_QWORD *)(v10 + 144);
      if (v13 && *(_QWORD *)v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) != 0)
          v12.super.isa = (Class)10;
        else
          v12.super.isa = *(Class *)v13;
      }
      else
      {
        v12.super.isa = (Class)10;
      }
    }
    JSC::VM::throwException((JSC::VM *)v4, this, v12);
    if (v4)
    {
      do
        v14 = __ldaxr(v4);
      while (__stlxr(v14 - 1, v4));
      if (v14 == 1)
      {
        atomic_store(1u, v4);
        v16 = (WTF *)MEMORY[0x19AEA3AF8](v4);
        WTF::fastFree(v16, v17);
      }
    }
  }
  return 10;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::AddressErrors::~AddressErrors(WebCore::AddressErrors *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
}

uint64_t WebCore::CryptoAlgorithmAesCbcCfbParams::parametersClass(WebCore::CryptoAlgorithmAesCbcCfbParams *this)
{
  return 1;
}

void WebCore::CryptoAlgorithmParameters::~CryptoAlgorithmParameters(WebCore::CryptoAlgorithmParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CryptoAlgorithmParameters::parametersClass(WebCore::CryptoAlgorithmParameters *this)
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11ArrayBufferENSD_ISI_EENSF_ISI_EEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::CryptoAlgorithmAesCtrParams::parametersClass(WebCore::CryptoAlgorithmAesCtrParams *this)
{
  return 2;
}

uint64_t WebCore::CryptoAlgorithmAesGcmParams::parametersClass(WebCore::CryptoAlgorithmAesGcmParams *this)
{
  return 3;
}

uint64_t WebCore::CryptoAlgorithmAesKeyParams::parametersClass(WebCore::CryptoAlgorithmAesKeyParams *this)
{
  return 4;
}

WebCore::AudioNode *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12AnalyserNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::AudioNode **a2)
{
  WebCore::AudioNode *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WebCore::AudioNode::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12AnalyserNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsAnalyserNodePrototypeFunction_getFloatFrequencyData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  JSC::VM *v31;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getFloatFrequencyData");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSAnalyserNode::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSAnalyserNode::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getFloatFrequencyData");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v27);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v31 = v9;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 46)
  {
    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v17, &v29);
    v18 = (_DWORD *)v29;
    if (v29)
    {
      v19 = *(_QWORD *)(v29 + 32);
      if (v19
        && (v20 = *(_QWORD *)(v19 + 16)) != 0
        && ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v20 & 0x3FFFFFFFFLL) + v21)
        && (*(_QWORD *)(v19 + 32)
          ? (v22 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v22 = 0),
            v22))
      {
        v29 = 0;
      }
      else if ((*(_BYTE *)(v29 + 6) & 3) == 0)
      {
        v30 = 0;
        v29 = 0;
        WebCore::RealtimeAnalyser::getFloatFrequencyData(v16 + 152, (uint64_t)v18);
        if (*v18 == 1)
        {
          JSC::ArrayBufferView::operator delete();
          v24 = 0;
        }
        else
        {
          v24 = 0;
          --*v18;
        }
        v23 = 10;
        goto LABEL_30;
      }
      if (*v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v18;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 0, "array", 6, "AnalyserNode", 13, a8, "getFloatFrequencyData", 22, "Float32Array", 13);
  v23 = 0;
  v24 = 1;
  v30 = 1;
LABEL_30:
  ((void (*)(JSC::VM **, uint64_t *))off_1E32235E8[v24])(&v31, &v29);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsAnalyserNodePrototypeFunction_getByteFrequencyData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  JSC::VM *v31;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getByteFrequencyData");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSAnalyserNode::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSAnalyserNode::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getByteFrequencyData");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v27);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v31 = v9;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 40)
  {
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl(v17, &v29);
    v18 = (_DWORD *)v29;
    if (v29)
    {
      v19 = *(_QWORD *)(v29 + 32);
      if (v19
        && (v20 = *(_QWORD *)(v19 + 16)) != 0
        && ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v20 & 0x3FFFFFFFFLL) + v21)
        && (*(_QWORD *)(v19 + 32)
          ? (v22 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v22 = 0),
            v22))
      {
        v29 = 0;
      }
      else if ((*(_BYTE *)(v29 + 6) & 3) == 0)
      {
        v30 = 0;
        v29 = 0;
        WebCore::RealtimeAnalyser::getByteFrequencyData(v16 + 152, (uint64_t)v18);
        if (*v18 == 1)
        {
          JSC::ArrayBufferView::operator delete();
          v24 = 0;
        }
        else
        {
          v24 = 0;
          --*v18;
        }
        v23 = 10;
        goto LABEL_30;
      }
      if (*v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v18;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 0, "array", 6, "AnalyserNode", 13, a8, "getByteFrequencyData", 21, "Uint8Array", 11);
  v23 = 0;
  v24 = 1;
  v30 = 1;
LABEL_30:
  ((void (*)(JSC::VM **, uint64_t *))off_1E32235F8[v24])(&v31, &v29);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsAnalyserNodePrototypeFunction_getFloatTimeDomainData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  JSC::VM *v31;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getFloatTimeDomainData");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSAnalyserNode::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSAnalyserNode::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getFloatTimeDomainData");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v27);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v31 = v9;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 46)
  {
    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v17, &v29);
    v18 = (_DWORD *)v29;
    if (v29)
    {
      v19 = *(_QWORD *)(v29 + 32);
      if (v19
        && (v20 = *(_QWORD *)(v19 + 16)) != 0
        && ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v20 & 0x3FFFFFFFFLL) + v21)
        && (*(_QWORD *)(v19 + 32)
          ? (v22 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v22 = 0),
            v22))
      {
        v29 = 0;
      }
      else if ((*(_BYTE *)(v29 + 6) & 3) == 0)
      {
        v30 = 0;
        v29 = 0;
        WebCore::RealtimeAnalyser::getFloatTimeDomainData(v16 + 152, (uint64_t)v18);
        if (*v18 == 1)
        {
          JSC::ArrayBufferView::operator delete();
          v24 = 0;
        }
        else
        {
          v24 = 0;
          --*v18;
        }
        v23 = 10;
        goto LABEL_30;
      }
      if (*v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v18;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 0, "array", 6, "AnalyserNode", 13, a8, "getFloatTimeDomainData", 23, "Float32Array", 13);
  v23 = 0;
  v24 = 1;
  v30 = 1;
LABEL_30:
  ((void (*)(JSC::VM **, uint64_t *))off_1E32235E8[v24])(&v31, &v29);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsAnalyserNodePrototypeFunction_getByteTimeDomainData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  JSC::VM *v28;
  uint64_t v29;
  int v30;
  JSC::VM *v31;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getByteTimeDomainData");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSAnalyserNode::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSAnalyserNode::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnalyserNode", "getByteTimeDomainData");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v27);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v31 = v9;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 40)
  {
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl(v17, &v29);
    v18 = (_DWORD *)v29;
    if (v29)
    {
      v19 = *(_QWORD *)(v29 + 32);
      if (v19
        && (v20 = *(_QWORD *)(v19 + 16)) != 0
        && ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v20 & 0x3FFFFFFFFLL) + v21)
        && (*(_QWORD *)(v19 + 32)
          ? (v22 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v22 = 0),
            v22))
      {
        v29 = 0;
      }
      else if ((*(_BYTE *)(v29 + 6) & 3) == 0)
      {
        v30 = 0;
        v29 = 0;
        WebCore::RealtimeAnalyser::getByteTimeDomainData(v16 + 152, (uint64_t)v18);
        if (*v18 == 1)
        {
          JSC::ArrayBufferView::operator delete();
          v24 = 0;
        }
        else
        {
          v24 = 0;
          --*v18;
        }
        v23 = 10;
        goto LABEL_30;
      }
      if (*v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v18;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 0, "array", 6, "AnalyserNode", 13, a8, "getByteTimeDomainData", 22, "Uint8Array", 11);
  v23 = 0;
  v24 = 1;
  v30 = 1;
LABEL_30:
  ((void (*)(JSC::VM **, uint64_t *))off_1E32235F8[v24])(&v31, &v29);
  return (_BYTE *)v23;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;

  v2 = this;
  v4 = *(unsigned __int8 *)(this + 40);
  v5 = v4 - 88;
  if ((v4 - 88) <= 0x35)
  {
    if (((1 << v5) & 0x3D) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
      if (!v6)
        goto LABEL_29;
      goto LABEL_11;
    }
    if (((1 << v5) & 0x3D000000000000) != 0)
    {
      v6 = *(_QWORD *)(this + 48);
      if (!v6)
        goto LABEL_29;
LABEL_11:
      v7 = 0;
      *(_DWORD *)v6 += 2;
      goto LABEL_12;
    }
  }
  if (v4 == 16 || v4 == 48)
  {
    this = JSC::JSArrayBufferView::slowDownAndWasteMemory((JSC::JSArrayBufferView *)this);
    v6 = this;
    if (this)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
  }
LABEL_29:
  v7 = 1;
LABEL_12:
  v8 = *(unsigned __int8 *)(v2 + 40);
  if ((v8 & 1) != 0)
  {
    v9 = 0;
    if ((v7 & 1) == 0)
      goto LABEL_14;
LABEL_22:
    this = 0;
LABEL_23:
    *a2 = this;
    if (!v6)
      return this;
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(v2 + 24);
  if ((v7 & 1) != 0)
    goto LABEL_22;
LABEL_14:
  v10 = *(_QWORD *)(v2 + 32);
  if (*(_BYTE *)(v6 + 64) && (v20 = *(_QWORD *)(v6 + 32)) != 0)
    v11 = *(_QWORD *)(v20 + 32);
  else
    v11 = *(_QWORD *)(v6 + 48);
  v12 = v11 >= v10;
  v13 = v11 - v10;
  if (v12)
  {
    v14 = v9 <= v13 >> 2;
    if ((v10 & 3) == 0 && ((v8 | v14) & 1) != 0)
    {
      WTF::fastMalloc((WTF *)0x28);
      this = JSC::ArrayBufferView::ArrayBufferView();
      goto LABEL_23;
    }
  }
  *a2 = 0;
LABEL_26:
  v15 = *(_DWORD *)v6 == 2;
  *(_DWORD *)v6 -= 2;
  if (v15)
  {
    v16 = *(_QWORD *)(v6 + 80);
    if (v16)
    {
      *(_QWORD *)(v16 + 8) = 3;
      *(_QWORD *)(v6 + 80) = 0;
    }
    if ((*(_BYTE *)(v6 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v6 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v6 + 16));
    v18 = *(WTF **)(v6 + 8);
    if ((v18 & 1) == 0 && v18)
    {
      v19 = *(WTF **)v18;
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)v18 = 0;
        *((_DWORD *)v18 + 2) = 0;
        WTF::fastFree(v19, v17);
      }
      WTF::fastFree(v18, v17);
    }
    return WTF::fastFree((WTF *)v6, v17);
  }
  return this;
}

BOOL JSC::ArrayBufferView::isDetached(JSC::ArrayBufferView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  return v3 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && (v2 & 0x3FFFFFFFFLL) + v3 == 0;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_14Float32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;

  v2 = this;
  v4 = *(unsigned __int8 *)(this + 40);
  v5 = v4 - 88;
  if ((v4 - 88) <= 0x35)
  {
    if (((1 << v5) & 0x3D) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(this + 8) - 8);
      if (!v6)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (((1 << v5) & 0x3D000000000000) != 0)
    {
      v6 = *(_QWORD *)(this + 48);
      if (!v6)
        goto LABEL_28;
LABEL_11:
      v7 = 0;
      *(_DWORD *)v6 += 2;
      goto LABEL_12;
    }
  }
  if (v4 == 16 || v4 == 48)
  {
    this = JSC::JSArrayBufferView::slowDownAndWasteMemory((JSC::JSArrayBufferView *)this);
    v6 = this;
    if (this)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
  }
LABEL_28:
  v7 = 1;
LABEL_12:
  v8 = *(_BYTE *)(v2 + 40);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v2 + 24);
  if ((v7 & 1) != 0)
  {
    this = 0;
    goto LABEL_22;
  }
  v10 = *(_QWORD *)(v2 + 32);
  if (*(_BYTE *)(v6 + 64) && (v17 = *(_QWORD *)(v6 + 32)) != 0)
    v11 = *(_QWORD *)(v17 + 32);
  else
    v11 = *(_QWORD *)(v6 + 48);
  if (v11 >= v10 && v8 & 1 | (v9 <= v11 - v10))
  {
    WTF::fastMalloc((WTF *)0x28);
    this = JSC::ArrayBufferView::ArrayBufferView();
LABEL_22:
    *a2 = this;
    if (!v6)
      return this;
    goto LABEL_25;
  }
  *a2 = 0;
LABEL_25:
  v12 = *(_DWORD *)v6 == 2;
  *(_DWORD *)v6 -= 2;
  if (v12)
  {
    v13 = *(_QWORD *)(v6 + 80);
    if (v13)
    {
      *(_QWORD *)(v13 + 8) = 3;
      *(_QWORD *)(v6 + 80) = 0;
    }
    if ((*(_BYTE *)(v6 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v6 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v6 + 16));
    v15 = *(WTF **)(v6 + 8);
    if ((v15 & 1) == 0 && v15)
    {
      v16 = *(WTF **)v15;
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)v15 = 0;
        *((_DWORD *)v15 + 2) = 0;
        WTF::fastFree(v16, v14);
      }
      WTF::fastFree(v15, v14);
    }
    return WTF::fastFree((WTF *)v6, v14);
  }
  return this;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_BYTE *WebCore::jsAnimationEffectPrototypeFunction_getTiming(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  WTF::StringImpl *v18;
  char v19;

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "AnimationEffect", "getTiming");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAnimationEffect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAnimationEffect::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "AnimationEffect", "getTiming");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::AnimationEffect::getBindingsTiming(*(WebCore::AnimationEffect **)(v4 + 24), (uint64_t)v16);
  v12 = WebCore::convertDictionaryToJS((uint64_t)this, v10, (uint64_t)v16);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v17 != -1)
    ((void (*)(char *, _BYTE *))off_1E32236A8[v17])(&v19, v16);
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsAnimationEffectPrototypeFunction_getComputedTiming(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  _QWORD *v13;
  const WebCore::ComputedEffectTiming *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  int v23;
  WTF::StringImpl *v24;
  char v25;

  v4 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "AnimationEffect", "getComputedTiming");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAnimationEffect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAnimationEffect::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "AnimationEffect", "getComputedTiming");
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(v10 + 96);
  if (v12)
  {
    v13 = *(_QWORD **)(v12 + 8);
    if (v13)
    {
      if ((*(unsigned int (**)(_QWORD *))(*v13 + 104))(v13))
      {
        v19 = (_QWORD *)v13[7];
        if (v19)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v19 + 24))(v19))
          {
            v20 = v19[33];
            if (v20)
              WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v20 + 40) + 8));
          }
        }
      }
    }
  }
  WebCore::AnimationEffect::getComputedTiming(v10, (uint64_t)v22);
  v16 = WebCore::convertDictionaryToJS(this, v11, (WebCore::JSDOMGlobalObject *)v22, v14);
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v23 != -1)
    ((void (*)(char *, _BYTE *))off_1E32236A8[v23])(&v25, v22);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsAnimationEffectPrototypeFunction_updateTiming(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  __int16 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  char v32[8];
  int v33;
  char v34;
  __n128 v35;
  __int128 v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  __int16 v39;
  char v40[8];
  WTF::StringImpl *v41;
  char v42;
  __n128 v43;
  __int128 v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  __int16 v47;
  char v48;
  char v49;
  char v50[8];
  uint64_t v51;
  int v52;
  unsigned __int8 v53;
  __n128 v54;
  __int128 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnimationEffect", "updateTiming");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAnimationEffect::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAnimationEffect::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AnimationEffect", "updateTiming");
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v13 = *(_QWORD *)(v6 + 24);
  WebCore::convertDictionary<WebCore::OptionalEffectTiming>((JSC::JSCell *)v12, this, (uint64_t)v50);
  v15 = v59;
  if (!v59)
  {
    v32[0] = 0;
    v34 = 0;
    v16 = v53;
    if (v53)
    {
      v33 = -1;
      v3 = v52;
      if (v52 != -1)
      {
        ((void (*)(char *, char *, uint64_t *))off_1E32236B8[v52])(v40, v32, &v51);
        v33 = v3;
      }
      v34 = 1;
    }
    v35 = v54;
    v36 = v55;
    v17 = v57;
    v57 = 0;
    v37 = v56;
    v38 = v17;
    v18 = v58;
    v39 = v58;
    v40[0] = 0;
    v42 = 0;
    if (v16)
    {
      LODWORD(v41) = -1;
      if (v3 != -1)
      {
        ((void (*)(int *, char *, char *))off_1E32236B8[v3])(&v29, v40, v32);
        LODWORD(v41) = v3;
        v17 = v38;
        v18 = v39;
      }
      v42 = 1;
    }
    v43 = v35;
    v44 = v36;
    v38 = 0;
    v45 = v37;
    v46 = v17;
    v47 = v18;
    v48 = 1;
    WebCore::AnimationEffect::bindingsUpdateTiming(v13, (uint64_t)v40, v14, (uint64_t)&v29, v35);
    if (v48)
    {
      v20 = v46;
      v46 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (v42)
      {
        if ((_DWORD)v41 != -1)
          ((void (*)(char *, char *))off_1E32236A8[v41])(&v49, v40);
        LODWORD(v41) = -1;
      }
    }
    v21 = v38;
    v38 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v34 && v33 != -1)
      ((void (*)(char *, char *))off_1E32236A8[v33])(&v49, v32);
    if (!v31)
    {
      v22 = 10;
LABEL_40:
      v15 = v59;
      goto LABEL_41;
    }
    v24 = (WTF::StringImpl *)v29;
    v40[0] = v29;
    v25 = v30;
    v30 = 0;
    v41 = v25;
    if (!*((_QWORD *)v5 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v29, (JSC::JSGlobalObject *)&v41);
      JSC::VM::throwException(v5, this, v26);
      v25 = v41;
    }
    v41 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v31)
    {
      v27 = v30;
      v30 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v22 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_40;
        }
        WTF::StringImpl::destroy(v27, v24);
      }
    }
    v22 = 0;
    goto LABEL_40;
  }
  v22 = 0;
LABEL_41:
  if (v15 != -1)
    ((void (*)(char *, uint64_t *))off_1E32236C8[v15])(v40, &v51);
  return (_BYTE *)v22;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJdS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20OptionalEffectTimingENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  char v5;

  result = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32236A8[v4])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF ***a2)
{
  WTF **result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::AudioBuffer>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11AudioBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsAudioBufferPrototypeFunction_getChannelData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::AudioBuffer *v11;
  int v12;
  uint64_t v13;
  _BYTE *result;
  JSValue v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v18;
  WebCore *v19;
  JSC::JSGlobalObject *v20;
  JSC::CallFrame *v21;
  JSC::VM *v22;
  int v23[2];
  WTF::StringImpl *v24;
  int v25;
  unsigned int v26[2];
  _BYTE v27[8];
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "AudioBuffer", "getChannelData");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioBuffer::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioBuffer::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "AudioBuffer", "getChannelData");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    v11 = *(WebCore::AudioBuffer **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v26);
    if (v26[1])
    {
      return 0;
    }
    else
    {
      WebCore::AudioBuffer::getChannelData(v11, (unint64_t)this, v26[0], (uint64_t)v23);
      v12 = v25;
      if (!v25)
      {
        v13 = *(_QWORD *)v23;
LABEL_16:
        ((void (*)(_BYTE *, int *))off_1E3223A68[v12])(v27, v23);
        return (_BYTE *)v13;
      }
      if (v25 == 1)
      {
        v16 = (WTF::StringImpl *)LOBYTE(v23[0]);
        v27[0] = v23[0];
        v17 = v24;
        v24 = 0;
        v28 = v17;
        if (!*((_QWORD *)v4 + 2))
        {
          v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v23[0]), (JSC::JSGlobalObject *)&v28);
          JSC::VM::throwException(v4, this, v18);
          v17 = v28;
        }
        v28 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v13 = 0;
        result = 0;
        v12 = v25;
        if (v25 != -1)
          goto LABEL_16;
      }
      else
      {
        v19 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsAudioBufferPrototypeFunction_copyFromChannel(v19, v20, v21);
      }
    }
  }
  return result;
}

_BYTE *WebCore::jsAudioBufferPrototypeFunction_copyFromChannel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  WebCore::AudioBuffer *v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  JSC::VM *v28;
  JSValue v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  unsigned int v36[2];
  unsigned int v37[2];
  uint64_t v38;
  int v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "AudioBuffer", "copyFromChannel");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSAudioBuffer::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSAudioBuffer::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "AudioBuffer", "copyFromChannel");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v30);
  }
  v17 = *(WebCore::AudioBuffer **)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v40 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_29;
  if (*(_BYTE *)(v18 + 5) != 46)
    goto LABEL_29;
  JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v18, &v42);
  v19 = (JSC::VM *)v42;
  if (!v42)
    goto LABEL_29;
  v20 = *(_QWORD *)(v42 + 32);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      if ((v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v21 & 0x3FFFFFFFFLL) + v22)
      {
        if (*(_QWORD *)(v20 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          v42 = 0;
          goto LABEL_27;
        }
      }
    }
  }
  if ((*(_BYTE *)(v42 + 6) & 3) == 0)
  {
    v38 = v42;
    v39 = 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v37);
    if (!v37[1])
    {
      if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
        v27 = 10;
      else
        v27 = *((_QWORD *)a2 + 8);
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v27, v36);
      if (!v36[1])
      {
        v38 = 0;
        v40 = v19;
        WebCore::AudioBuffer::copyFromChannel(v17, (uint64_t *)&v40, v37[0], v36[0], (uint64_t)&v42);
        v28 = v40;
        v40 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*(_DWORD *)v28;
        }
        if (!v44)
        {
          v24 = 10;
LABEL_42:
          v25 = 0;
          goto LABEL_30;
        }
        v31 = (WTF::StringImpl *)v42;
        LOBYTE(v40) = v42;
        v32 = v43;
        v43 = 0;
        v41 = v32;
        if (!*((_QWORD *)v9 + 2))
        {
          v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v42, (JSC::JSGlobalObject *)&v41);
          JSC::VM::throwException(v9, this, v33);
          v32 = v41;
        }
        v41 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (v44)
        {
          v34 = v43;
          v43 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 != 2)
            {
              v24 = 0;
              *(_DWORD *)v34 -= 2;
              goto LABEL_42;
            }
            WTF::StringImpl::destroy(v34, v31);
          }
        }
      }
      v24 = 0;
      goto LABEL_42;
    }
    v24 = 0;
    goto LABEL_42;
  }
LABEL_27:
  if (*(_DWORD *)v19 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v19;
LABEL_29:
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v40, 0, "destination", 12, "AudioBuffer", 12, a8, "copyFromChannel", 16, "Float32Array", 13);
  v24 = 0;
  v25 = 1;
  v39 = 1;
LABEL_30:
  ((void (*)(uint64_t *, uint64_t *))off_1E32235E8[v25])(&v42, &v38);
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsAudioBufferPrototypeFunction_copyToChannel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  JSC::VM *v28;
  JSValue v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  unsigned int v36[2];
  unsigned int v37[2];
  uint64_t v38;
  int v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  char v44;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "AudioBuffer", "copyToChannel");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSAudioBuffer::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSAudioBuffer::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "AudioBuffer", "copyToChannel");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v30);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v40 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_29;
  if (*(_BYTE *)(v18 + 5) != 46)
    goto LABEL_29;
  JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(v18, &v42);
  v19 = (JSC::VM *)v42;
  if (!v42)
    goto LABEL_29;
  v20 = *(_QWORD *)(v42 + 32);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      if ((v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v21 & 0x3FFFFFFFFLL) + v22)
      {
        if (*(_QWORD *)(v20 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          v42 = 0;
          goto LABEL_27;
        }
      }
    }
  }
  if ((*(_BYTE *)(v42 + 6) & 3) == 0)
  {
    v38 = v42;
    v39 = 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v37);
    if (!v37[1])
    {
      if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
        v27 = 10;
      else
        v27 = *((_QWORD *)a2 + 8);
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v27, v36);
      if (!v36[1])
      {
        v38 = 0;
        v40 = v19;
        WebCore::AudioBuffer::copyToChannel(v17, (uint64_t *)&v40, v37[0], v36[0], (uint64_t)&v42);
        v28 = v40;
        v40 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*(_DWORD *)v28;
        }
        if (!v44)
        {
          v24 = 10;
LABEL_42:
          v25 = 0;
          goto LABEL_30;
        }
        v31 = (WTF::StringImpl *)v42;
        LOBYTE(v40) = v42;
        v32 = v43;
        v43 = 0;
        v41 = v32;
        if (!*((_QWORD *)v9 + 2))
        {
          v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v42, (JSC::JSGlobalObject *)&v41);
          JSC::VM::throwException(v9, this, v33);
          v32 = v41;
        }
        v41 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (v44)
        {
          v34 = v43;
          v43 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 != 2)
            {
              v24 = 0;
              *(_DWORD *)v34 -= 2;
              goto LABEL_42;
            }
            WTF::StringImpl::destroy(v34, v31);
          }
        }
      }
      v24 = 0;
      goto LABEL_42;
    }
    v24 = 0;
    goto LABEL_42;
  }
LABEL_27:
  if (*(_DWORD *)v19 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v19;
LABEL_29:
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v40, 0, "source", 7, "AudioBuffer", 12, a8, "copyToChannel", 14, "Float32Array", 13);
  v24 = 0;
  v25 = 1;
  v39 = 1;
LABEL_30:
  ((void (*)(uint64_t *, uint64_t *))off_1E32235E8[v25])(&v42, &v38);
  return (_BYTE *)v24;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF **WTF::RefCounted<WebCore::AudioBuffer>::deref(WTF **this, void *a2)
{
  WTF *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      v4 = *(unsigned int *)v3;
      if ((_DWORD)v4)
      {
        v5 = 16 * v4;
        v6 = (char *)v3 + 16;
        do
        {
          if (*(_QWORD *)v6)
          {
            *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
            *(_QWORD *)v6 = 0;
          }
          v6 += 16;
          v5 -= 16;
        }
        while (v5);
      }
      WTF::fastFree(v3, a2);
    }
    v7 = (WTF *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v7)
    {
      v9 = (_DWORD **)((char *)v7 + 8);
      v8 = *(unsigned int *)v7;
      if ((_DWORD)v8)
      {
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*v11 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*v11;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      WTF::fastFree(v7, a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WebCore::AudioNode *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AudioBufferSourceNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::AudioNode **a2)
{
  WebCore::AudioNode *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WebCore::AudioNode::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AudioBufferSourceNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24AudioBufferSourceOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF ***a2)
{
  WTF **result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::AudioBuffer>::deref(result, a2);
  return result;
}

uint64_t WebCore::jsAudioBufferSourceNodePrototypeFunction_start(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  unint64_t v19;
  unsigned __int8 v20;
  JSC::VM *v21;
  uint64_t result;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WTF::StringImpl *v26;
  char hasExceptionsAfterHandlingTraps;
  double v28;
  JSC::VM *v29;
  double v30;
  double v31;
  uint64_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  int v35[2];
  WTF::StringImpl *v36;
  char v37;

  v4 = *((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "AudioBufferSourceNode", "start");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioBufferSourceNode::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioBufferSourceNode::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "AudioBufferSourceNode", "start");
  v12 = *(_QWORD *)(v5 + 24);
  LODWORD(v5) = *((_DWORD *)a2 + 8);
  if ((_DWORD)v5 == 1)
  {
    v20 = 0;
    v14 = 0.0;
    v15 = 0.0;
    v18 = 0.0;
    goto LABEL_38;
  }
  v13 = *((_QWORD *)a2 + 6);
  v14 = 0.0;
  v15 = 0.0;
  if (v13 != 10)
  {
    *(_QWORD *)v35 = *((_QWORD *)a2 + 6);
    v33 = (JSC::VM *)v4;
    if (v13 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v13;
    }
    else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v35, this);
      v15 = v28;
    }
    else
    {
      *(_QWORD *)&v15 = v13 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      return 0;
    }
    LODWORD(v5) = *((_DWORD *)a2 + 8);
  }
  v5 = (int)v5;
  if ((unint64_t)((int)v5 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = *((_QWORD *)a2 + 7);
    if (v16 != 10)
    {
      *(_QWORD *)v35 = *((_QWORD *)a2 + 7);
      v17 = (JSC::VM *)*((_QWORD *)this + 7);
      v33 = v17;
      if (v16 >= 0xFFFE000000000000)
      {
        v14 = (double)(int)v16;
      }
      else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v29 = v17;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v35, this);
        v17 = v29;
        v14 = v30;
      }
      else
      {
        *(_QWORD *)&v14 = v16 - 0x2000000000000;
      }
      if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
        return 0;
      if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        JSC::throwTypeError();
        return 0;
      }
      v5 = *((int *)a2 + 8);
    }
  }
  v18 = 0.0;
  if ((unint64_t)(v5 - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v20 = 0;
    goto LABEL_38;
  }
  v19 = *((_QWORD *)a2 + 8);
  if (v19 == 10)
  {
    v20 = 0;
    goto LABEL_38;
  }
  *(_QWORD *)v35 = *((_QWORD *)a2 + 8);
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v21;
  if (v19 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v19;
  }
  else if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v35, this);
  }
  else
  {
    *(_QWORD *)&v18 = v19 - 0x2000000000000;
  }
  if (!*((_DWORD *)v21 + 20)
    || (v31 = v18,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        v18 = v31,
        (hasExceptionsAfterHandlingTraps & 1) == 0))
  {
    if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      return 0;
    }
    v20 = 1;
LABEL_38:
    WebCore::AudioBufferSourceNode::startPlaying(v12, v18, v20, (uint64_t)v35, *(uint64_t *)&v15, v14);
    if (!v37)
      return 10;
    v23 = (WTF::StringImpl *)LOBYTE(v35[0]);
    LOBYTE(v33) = v35[0];
    v24 = v36;
    v36 = 0;
    v34 = v24;
    if (!*(_QWORD *)(v4 + 16))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v35[0]), (JSC::JSGlobalObject *)&v34);
      JSC::VM::throwException((JSC::VM *)v4, this, v25);
      v24 = v34;
    }
    v34 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v37)
    {
      v26 = v36;
      v36 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 != 2)
        {
          result = 0;
          *(_DWORD *)v26 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v26, v23);
      }
    }
  }
  return 0;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12AudioContextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 6;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 6);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12AudioContextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsAudioContextPrototypeFunction_getOutputTimestamp(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v4 = *((_QWORD *)a2 + 5);
  v28 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AudioContext", "getOutputTimestamp");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAudioContext::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAudioContext::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "AudioContext", "getOutputTimestamp");
  WebCore::AudioContext::getOutputTimestamp((WebCore::AudioContext *)(*(_QWORD *)(v4 + 24) - 32));
  v11 = v10;
  v13 = v12;
  v14 = *((_QWORD *)this + 7);
  v15 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v16 = 8 * *(unsigned __int8 *)(v15 + 14);
  v17 = JSC::allocateCell<JSC::JSFinalObject>(v14, v16 + 16);
  v18 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)v17 = v15 >> 4;
  *(_DWORD *)(v17 + 4) = v18;
  *(_QWORD *)(v17 + 8) = 0;
  bzero((void *)(v17 + 16), v16);
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v19 = (int)v11, v11 == (double)(int)v19)
    && ((_DWORD)v19 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
  {
    v20 = v19 | 0xFFFE000000000000;
  }
  else
  {
    v20 = *(_QWORD *)&v11 + 0x2000000000000;
  }
  if (*(_DWORD *)(v14 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v29;
  v29 = 0;
  v30 = v17;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v17, (JSC::VM *)v14, (unint64_t)v21, v20, 0, (uint64_t)&v29);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v23 = (int)v13, v13 == (double)(int)v23)
    && ((_DWORD)v23 || (*(_QWORD *)&v13 & 0x8000000000000000) == 0))
  {
    v24 = v23 | 0xFFFE000000000000;
  }
  else
  {
    v24 = *(_QWORD *)&v13 + 0x2000000000000;
  }
  if (*(_DWORD *)(v14 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v25 = v29;
  v29 = 0;
  v30 = v17;
  v31 = -1;
  v32 = 0x1000000;
  v33 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v17, (JSC::VM *)v14, (unint64_t)v25, v24, 0, (uint64_t)&v29);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v17;
}

unint64_t WebCore::jsAudioContextPrototypeFunction_suspend(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t *v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19486F3F0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSAudioContext::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSAudioContext::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"AudioContext", "suspend", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = (uint64_t *)(*(_QWORD *)(v17 + 24) - 32);
  v30 = v14;
  WebCore::AudioContext::suspendRendering(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsAudioContextPrototypeFunction_resume(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t *v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19486F654);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSAudioContext::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSAudioContext::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"AudioContext", "resume", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = (uint64_t *)(*(_QWORD *)(v17 + 24) - 32);
  v30 = v14;
  WebCore::AudioContext::resumeRendering(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsAudioContextPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  WTF::StringImpl *v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19486F8B8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSAudioContext::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSAudioContext::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"AudioContext", "close", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = (WTF::StringImpl *)(*(_QWORD *)(v17 + 24) - 32);
  v30 = v14;
  WebCore::AudioContext::close(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsAudioContextPrototypeFunction_createMediaElementSource(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WebCore::AudioNode *v31;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSValue v37;
  WebCore *v38;
  JSC::JSGlobalObject *v39;
  JSC::CallFrame *v40;
  JSC::VM *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WebCore::AudioNode *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "AudioContext", "createMediaElementSource");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSAudioContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSAudioContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "AudioContext", "createMediaElementSource");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v34);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v44 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSHTMLMediaElement::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSHTMLMediaElement::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v44, 0, "mediaElement", 13, "AudioContext", 13, a8, "createMediaElementSource", 25, "HTMLMediaElement", 17);
    return 0;
  }
  v26 = (unsigned int *)(v17 - 32);
  v27 = *(JSC::VM **)(v11 + 40);
  v28 = *(_QWORD *)(v17 + 32);
  v29 = *(_QWORD *)(v17 + 40);
  v44 = (WebCore::AudioNode *)"BaseAudioContext";
  v45 = 17;
  v46 = "createMediaElementSource";
  v47 = v29;
  if (*(_BYTE *)(v28 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v44);
  *(_DWORD *)(v25 + 24) += 2;
  v42 = v25;
  WebCore::MediaElementAudioSourceNode::create(v26, &v42, (uint64_t)&v44);
  if (*(_DWORD *)(v25 + 24) == 2)
  {
    if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v25, v30);
  }
  else
  {
    *(_DWORD *)(v25 + 24) -= 2;
  }
  if (!(_DWORD)v46)
  {
    v31 = v44;
    v44 = 0;
    v24 = WebCore::wrap<WebCore::MediaElementAudioSourceNode>((int)this, v27, v31);
    WebCore::AudioNode::deref(v31);
LABEL_32:
    if ((_DWORD)v46 != -1)
      ((void (*)(uint64_t *, WebCore::AudioNode **))off_1E3223D50[v46])(&v42, &v44);
    return (_BYTE *)v24;
  }
  if ((_DWORD)v46 == 1)
  {
    v35 = (WTF::StringImpl *)v44;
    LOBYTE(v42) = (_BYTE)v44;
    v36 = (WTF::StringImpl *)v45;
    v45 = 0;
    v43 = v36;
    if (!*((_QWORD *)v9 + 2))
    {
      v37.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v44, (JSC::JSGlobalObject *)&v43);
      JSC::VM::throwException(v9, this, v37);
      v36 = v43;
    }
    v43 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    v24 = 0;
    goto LABEL_32;
  }
  v38 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioContextPrototypeFunction_createMediaStreamSource(v38, v39, v40);
}

_BYTE *WebCore::jsAudioContextPrototypeFunction_createMediaStreamSource(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  WebCore::MediaStream *v25;
  unsigned int *v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::MediaStream *v30;
  WebCore::AudioNode *v31;
  bmalloc::api *v33;
  void *v34;
  JSValue v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  JSValue v39;
  WebCore *v40;
  JSC::JSGlobalObject *v41;
  JSC::CallFrame *v42;
  JSC::VM *v43;
  WebCore::MediaStream *v44;
  WTF::StringImpl *v45;
  WebCore::AudioNode *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "AudioContext", "createMediaStreamSource");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSAudioContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSAudioContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "AudioContext", "createMediaStreamSource");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v36);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v46 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaStream::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaStream::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(WebCore::MediaStream **)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v46, 0, "mediaStream", 12, "AudioContext", 13, a8, "createMediaStreamSource", 24, "MediaStream", 12);
    return 0;
  }
  v26 = (unsigned int *)(v17 - 32);
  v27 = *(JSC::VM **)(v11 + 40);
  v28 = *(_QWORD *)(v17 + 32);
  v29 = *(_QWORD *)(v17 + 40);
  v46 = (WebCore::AudioNode *)"BaseAudioContext";
  v47 = 17;
  v48 = "createMediaStreamSource";
  v49 = v29;
  if (*(_BYTE *)(v28 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v46);
  ++*((_DWORD *)v25 + 22);
  v44 = v25;
  WebCore::MediaStreamAudioSourceNode::create(v26, (char **)&v44, (uint64_t)&v46);
  v30 = v44;
  v44 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v30);
      bmalloc::api::isoDeallocate(v33, v34);
    }
    else
    {
      --*((_DWORD *)v30 + 22);
    }
  }
  if (!(_DWORD)v48)
  {
    v31 = v46;
    v46 = 0;
    v24 = WebCore::wrap<WebCore::MediaStreamAudioSourceNode>((int)this, v27, v31);
    WebCore::AudioNode::deref(v31);
LABEL_33:
    if ((_DWORD)v48 != -1)
      ((void (*)(WebCore::MediaStream **, WebCore::AudioNode **))off_1E3223D60[v48])(&v44, &v46);
    return (_BYTE *)v24;
  }
  if ((_DWORD)v48 == 1)
  {
    v37 = (WTF::StringImpl *)v46;
    LOBYTE(v44) = (_BYTE)v46;
    v38 = (WTF::StringImpl *)v47;
    v47 = 0;
    v45 = v38;
    if (!*((_QWORD *)v9 + 2))
    {
      v39.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v46, (JSC::JSGlobalObject *)&v45);
      JSC::VM::throwException(v9, this, v39);
      v38 = v45;
    }
    v45 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    v24 = 0;
    goto LABEL_33;
  }
  v40 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioContextPrototypeFunction_createMediaStreamDestination(v40, v41, v42);
}

void WebCore::jsAudioContextPrototypeFunction_createMediaStreamDestination(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::VM *v12;
  WebCore::AudioNode *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WebCore::DeferredPromise *v17;
  JSC::VM *v18;
  WebCore::AudioNode *v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int v22;
  char v23;
  WTF::StringImpl *v24;
  char v25;
  char v26;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    goto LABEL_17;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioContext::s_info && v8 != 0);
  }
  if (!v7)
  {
LABEL_17:
    WebCore::throwThisTypeError((int)this, (int)&v18, "AudioContext", "createMediaStreamDestination");
    return;
  }
  v11 = *(_QWORD *)(v4 + 24) - 32;
  v12 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v22) = 0;
  v23 = 0;
  LOBYTE(v24) = 0;
  BYTE4(v24) = 0;
  v25 = 0;
  v26 = 0;
  WebCore::MediaStreamAudioDestinationNode::create(v11, &v22, (uint64_t)&v19);
  if (v21)
  {
    if (v21 != 1)
    {
      v17 = (WebCore::DeferredPromise *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::DeferredPromise::~DeferredPromise(v17);
      return;
    }
    v14 = (WTF::StringImpl *)v19;
    LOBYTE(v22) = (_BYTE)v19;
    v15 = v20;
    v20 = 0;
    v24 = v15;
    if (!*((_QWORD *)v5 + 2))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v24);
      JSC::VM::throwException(v5, this, v16);
      v15 = v24;
    }
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    v13 = v19;
    v19 = 0;
    WebCore::wrap<WebCore::MediaStreamAudioDestinationNode>((int)this, v12, v13);
    WebCore::AudioNode::deref(v13);
  }
  if (v21 != -1)
    ((void (*)(unsigned int *, WebCore::AudioNode **))off_1E3223D70[v21])(&v22, &v19);
}

WebCore::AudioNode *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27MediaElementAudioSourceNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::AudioNode **a2)
{
  WebCore::AudioNode *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WebCore::AudioNode::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27MediaElementAudioSourceNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::AudioNode *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26MediaStreamAudioSourceNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::AudioNode **a2)
{
  WebCore::AudioNode *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WebCore::AudioNode::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26MediaStreamAudioSourceNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::AudioNode *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore31MediaStreamAudioDestinationNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::AudioNode **a2)
{
  WebCore::AudioNode *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WebCore::AudioNode::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore31MediaStreamAudioDestinationNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsAudioListenerPrototypeFunction_setPosition(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF *v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  float v21;
  float v22;
  float v23;
  uint64_t result;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  double v30;
  JSC::VM *v31;
  double v32;
  double v33;
  uint64_t v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  int v37[2];
  WTF::StringImpl *v38;
  char v39;

  v4 = *((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "AudioListener", "setPosition");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioListener::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioListener::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "AudioListener", "setPosition");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v25);
  }
  v12 = *(WTF **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v37 = v13;
  v35 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v14 = v30;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v37 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v31 = v16;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v16 = v31;
    v17 = v32;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < -3.40282347e38 || v17 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = *((_QWORD *)a2 + 8);
  *(_QWORD *)v37 = v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v19;
  if (v18 >= 0xFFFE000000000000)
  {
    v20 = (double)(int)v18;
  }
  else if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v20 = v33;
  }
  else
  {
    *(_QWORD *)&v20 = v18 - 0x2000000000000;
  }
  if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v20 < -3.40282347e38 || v20 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v21 = v14;
  v22 = v17;
  v23 = v20;
  WebCore::AudioListener::setPosition(v12, v21, v22, v23, v37);
  if (!v39)
    return 10;
  v26 = (WTF::StringImpl *)LOBYTE(v37[0]);
  LOBYTE(v35) = v37[0];
  v27 = v38;
  v38 = 0;
  v36 = v27;
  if (!*(_QWORD *)(v4 + 16))
  {
    v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v37[0]), (JSC::JSGlobalObject *)&v36);
    JSC::VM::throwException((JSC::VM *)v4, this, v28);
    v27 = v36;
  }
  v36 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v39)
    return 0;
  v29 = v38;
  v38 = 0;
  if (!v29)
    return 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v26);
    return 0;
  }
  result = 0;
  *(_DWORD *)v29 -= 2;
  return result;
}

uint64_t WebCore::jsAudioListenerPrototypeFunction_setOrientation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF **v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  unint64_t v24;
  JSC::VM *v25;
  double v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t result;
  JSValue v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  JSValue v40;
  WTF::StringImpl *v41;
  double v42;
  JSC::VM *v43;
  double v44;
  JSC::VM *v45;
  double v46;
  JSC::VM *v47;
  double v48;
  JSC::VM *v49;
  double v50;
  double v51;
  uint64_t v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  int v55[2];
  WTF::StringImpl *v56;
  char v57;

  v4 = *((_QWORD *)this + 7);
  v52 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v52, "AudioListener", "setOrientation");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioListener::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioListener::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v52, "AudioListener", "setOrientation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 5)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v37);
  }
  v12 = *(WTF ***)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v55 = v13;
  v53 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v14 = v42;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v55 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v53 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v43 = v16;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v16 = v43;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < -3.40282347e38 || v17 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = *((_QWORD *)a2 + 8);
  *(_QWORD *)v55 = v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  v53 = v19;
  if (v18 >= 0xFFFE000000000000)
  {
    v20 = (double)(int)v18;
  }
  else if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v45 = v19;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v19 = v45;
    v20 = v46;
  }
  else
  {
    *(_QWORD *)&v20 = v18 - 0x2000000000000;
  }
  if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v20 < -3.40282347e38 || v20 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v21 = *((_QWORD *)a2 + 9);
  *(_QWORD *)v55 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  v53 = v22;
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
  }
  else if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v47 = v22;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v22 = v47;
    v23 = v48;
  }
  else
  {
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
  }
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v23 < -3.40282347e38 || v23 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v24 = *((_QWORD *)a2 + 10);
  *(_QWORD *)v55 = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  v53 = v25;
  if (v24 >= 0xFFFE000000000000)
  {
    v26 = (double)(int)v24;
  }
  else if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v49 = v25;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v25 = v49;
    v26 = v50;
  }
  else
  {
    *(_QWORD *)&v26 = v24 - 0x2000000000000;
  }
  if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v26 < -3.40282347e38 || v26 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v27 = *((_QWORD *)a2 + 11);
  *(_QWORD *)v55 = v27;
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  v53 = v28;
  if (v27 >= 0xFFFE000000000000)
  {
    v29 = (double)(int)v27;
  }
  else if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v55, this);
    v29 = v51;
  }
  else
  {
    *(_QWORD *)&v29 = v27 - 0x2000000000000;
  }
  if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v29 < -3.40282347e38 || v29 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v30 = v14;
  v31 = v17;
  v32 = v20;
  v33 = v23;
  v34 = v26;
  v35 = v29;
  WebCore::AudioListener::setOrientation(v12, v30, v31, v32, v33, v34, v35, v55);
  if (!v57)
    return 10;
  v38 = (WTF::StringImpl *)LOBYTE(v55[0]);
  LOBYTE(v53) = v55[0];
  v39 = v56;
  v56 = 0;
  v54 = v39;
  if (!*(_QWORD *)(v4 + 16))
  {
    v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v55[0]), (JSC::JSGlobalObject *)&v54);
    JSC::VM::throwException((JSC::VM *)v4, this, v40);
    v39 = v54;
  }
  v54 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (!v57)
    return 0;
  v41 = v56;
  v56 = 0;
  if (!v41)
    return 0;
  if (*(_DWORD *)v41 == 2)
  {
    WTF::StringImpl::destroy(v41, v38);
    return 0;
  }
  result = 0;
  *(_DWORD *)v41 -= 2;
  return result;
}

_BYTE *WebCore::jsAudioNodePrototypeFunction_connect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unint64_t v10;
  _QWORD v12[2];

  v3 = *((_QWORD *)this + 7);
  v12[0] = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSAudioNode::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSAudioNode::s_info && v7 != 0);
    }
    if (v6)
    {
      v12[1] = v3;
      v10 = *((int *)a2 + 8) - 1;
      if (v10 >= 3)
        v10 = 3;
      __asm { BR              X13 }
    }
  }
  return WebCore::throwThisTypeError((int)this, (int)v12, "AudioNode", "connect");
}

_BYTE *WebCore::jsAudioNodePrototypeFunction_disconnect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  _QWORD v12[2];

  v3 = *((_QWORD *)this + 7);
  v12[0] = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSAudioNode::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSAudioNode::s_info && v7 != 0);
    }
    if (v6)
    {
      v12[1] = v3;
      v10 = 3;
      if ((unint64_t)(*((int *)a2 + 8) - 1) < 3)
        v10 = *((int *)a2 + 8) - 1;
      __asm { BR              X14 }
    }
  }
  return WebCore::throwThisTypeError((int)this, (int)v12, "AudioNode", "disconnect");
}

uint64_t WebCore::jsAudioNodePrototypeFunction_connect1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSAudioNode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  WebCore::AudioNode *v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  unsigned int v26[2];
  unsigned int v27[2];
  char v28;
  WTF::StringImpl *v29;
  int v30[2];
  WTF::StringImpl *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v30 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_12;
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSAudioNode::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSAudioNode::s_info && v15 != 0);
  }
  if (v14 && (v19 = *(WebCore::AudioNode **)(v10 + 24)) != 0)
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v20 = 10;
    else
      v20 = *((_QWORD *)a2 + 7);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v27);
    if (v27[1])
    {
      return 0;
    }
    else
    {
      if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
        v21 = 10;
      else
        v21 = *((_QWORD *)a2 + 8);
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v21, v26);
      if (v26[1])
      {
        return 0;
      }
      else
      {
        WebCore::AudioNode::connect(a3, v19, v27[0], (WTF::String *)v26[0], (uint64_t)v30);
        if (v32)
        {
          v22 = (WTF::StringImpl *)LOBYTE(v30[0]);
          v28 = v30[0];
          v23 = v31;
          v31 = 0;
          v29 = v23;
          if (!*((_QWORD *)v9 + 2))
          {
            v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v29);
            JSC::VM::throwException(v9, this, v24);
            v23 = v29;
          }
          v29 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v32)
          {
            v25 = v31;
            v31 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v22);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
        }
        return v10;
      }
    }
  }
  else
  {
LABEL_12:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v30, 0, "destination", 12, "AudioNode", 10, a8, "connect", 8, "AudioNode", 10);
    return 0;
  }
}

uint64_t WebCore::jsAudioNodePrototypeFunction_connect2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSAudioNode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  unsigned int v24[2];
  char v25;
  WTF::StringImpl *v26;
  int v27[2];
  WTF::StringImpl *v28;
  char v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v27 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_12;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSAudioParam::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSAudioParam::s_info && v14 != 0);
  }
  if (!v13 || (v18 = *(_QWORD *)(v10 + 24)) == 0)
  {
LABEL_12:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v27, 0, "destination", 12, "AudioNode", 10, a8, "connect", 8, "AudioParam", 11);
    return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v19 = 10;
  else
    v19 = *((_QWORD *)a2 + 7);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v19, v24);
  if (!v24[1])
  {
    WebCore::AudioNode::connect(a3, v18, (WTF::String *)v24[0], (uint64_t)v27);
    if (!v29)
      return 10;
    v20 = (WTF::StringImpl *)LOBYTE(v27[0]);
    v25 = v27[0];
    v21 = v28;
    v28 = 0;
    v26 = v21;
    if (!*((_QWORD *)v9 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException(v9, this, v22);
      v21 = v26;
    }
    v26 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v29)
    {
      v23 = v28;
      v28 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 != 2)
        {
          result = 0;
          *(_DWORD *)v23 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v23, v20);
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsAudioNodePrototypeFunction_disconnect2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSAudioNode *a4)
{
  JSC::VM *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  JSValue v10;
  WTF::StringImpl *v11;
  unsigned int v12[2];
  char v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, (unint64_t)a2, v12);
  if (!v12[1])
  {
    WebCore::AudioNode::disconnect(a3, v12[0], (uint64_t)&v15);
    if (!v17)
      return 10;
    v8 = (WTF::StringImpl *)v15;
    v13 = v15;
    v9 = v16;
    v16 = 0;
    v14 = v9;
    if (!*((_QWORD *)v6 + 2))
    {
      v10.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v14);
      JSC::VM::throwException(v6, this, v10);
      v9 = v14;
    }
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v17)
    {
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 != 2)
        {
          result = 0;
          *(_DWORD *)v11 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v11, v8);
      }
    }
  }
  return 0;
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_setValueAtTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF *v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  double v27;
  double v28;
  WebCore *v29;
  JSC::JSGlobalObject *v30;
  JSC::CallFrame *v31;
  uint64_t v32;
  int v33[2];
  WTF::StringImpl *v34;
  int v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;

  v4 = *((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "AudioParam", "setValueAtTime");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParam::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParam::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "AudioParam", "setValueAtTime");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v23);
  }
  v12 = *(WTF **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v33 = v13;
  v36 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v33, this);
    v14 = v27;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v33 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v33, this);
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = v14;
  v19 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::AudioParam::setValueAtTime(v12, v18, v17, (uint64_t)v33);
  if (!v35)
  {
    v20 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v19, *(WTF **)v33);
LABEL_27:
    if (v35 != -1)
      ((void (*)(JSC::VM **, int *))off_1E3224320[v35])(&v36, v33);
    return (_BYTE *)v20;
  }
  if (v35 == 1)
  {
    v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v36) = v33[0];
    v25 = v34;
    v34 = 0;
    v37 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v37;
    }
    v37 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    v20 = 0;
    goto LABEL_27;
  }
  v29 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioParamPrototypeFunction_linearRampToValueAtTime(v29, v30, v31);
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_linearRampToValueAtTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  double v27;
  double v28;
  WebCore *v29;
  JSC::JSGlobalObject *v30;
  JSC::CallFrame *v31;
  uint64_t v32;
  int v33[2];
  WTF::StringImpl *v34;
  int v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;

  v4 = *((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "AudioParam", "linearRampToValueAtTime");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParam::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParam::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "AudioParam", "linearRampToValueAtTime");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v23);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v33 = v13;
  v36 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v33, this);
    v14 = v27;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v33 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v33, this);
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = v14;
  v19 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::AudioParam::linearRampToValueAtTime(v12, v18, v17, (uint64_t)v33);
  if (!v35)
  {
    v20 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v19, *(WTF **)v33);
LABEL_27:
    if (v35 != -1)
      ((void (*)(JSC::VM **, int *))off_1E3224320[v35])(&v36, v33);
    return (_BYTE *)v20;
  }
  if (v35 == 1)
  {
    v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v36) = v33[0];
    v25 = v34;
    v34 = 0;
    v37 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v37;
    }
    v37 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    v20 = 0;
    goto LABEL_27;
  }
  v29 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioParamPrototypeFunction_exponentialRampToValueAtTime(v29, v30, v31);
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_exponentialRampToValueAtTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  double v27;
  double v28;
  WebCore *v29;
  JSC::JSGlobalObject *v30;
  JSC::CallFrame *v31;
  uint64_t v32;
  int v33[2];
  WTF::StringImpl *v34;
  int v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;

  v4 = *((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "AudioParam", "exponentialRampToValueAtTime");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParam::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParam::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "AudioParam", "exponentialRampToValueAtTime");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v23);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v33 = v13;
  v36 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v33, this);
    v14 = v27;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v33 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v33, this);
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = v14;
  v19 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::AudioParam::exponentialRampToValueAtTime(v12, v18, v17, (uint64_t)v33);
  if (!v35)
  {
    v20 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v19, *(WTF **)v33);
LABEL_27:
    if (v35 != -1)
      ((void (*)(JSC::VM **, int *))off_1E3224320[v35])(&v36, v33);
    return (_BYTE *)v20;
  }
  if (v35 == 1)
  {
    v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v36) = v33[0];
    v25 = v34;
    v34 = 0;
    v37 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v37;
    }
    v37 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    v20 = 0;
    goto LABEL_27;
  }
  v29 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioParamPrototypeFunction_setTargetAtTime(v29, v30, v31);
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_setTargetAtTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  float v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  JSValue v30;
  double v31;
  JSC::VM *v32;
  double v33;
  double v34;
  WebCore *v35;
  JSC::JSGlobalObject *v36;
  JSC::CallFrame *v37;
  uint64_t v38;
  int v39[2];
  WTF::StringImpl *v40;
  int v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;

  v4 = *((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "AudioParam", "setTargetAtTime");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParam::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParam::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "AudioParam", "setTargetAtTime");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v39 = v13;
  v42 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v39, this);
    v14 = v31;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < -3.40282347e38 || v14 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v39 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v32 = v16;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v39, this);
    v16 = v32;
    v17 = v33;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v18 = *((_QWORD *)a2 + 8);
  *(_QWORD *)v39 = v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v19;
  if (v18 >= 0xFFFE000000000000)
  {
    v20 = (double)(int)v18;
  }
  else if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v39, this);
    v20 = v34;
  }
  else
  {
    *(_QWORD *)&v20 = v18 - 0x2000000000000;
  }
  if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v20 < -3.40282347e38 || v20 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v21 = v14;
  v22 = v20;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::AudioParam::setTargetAtTime(v12, v21, v17, v22, (uint64_t)v39);
  if (!v41)
  {
    v24 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v23, *(WTF **)v39);
LABEL_34:
    if (v41 != -1)
      ((void (*)(JSC::VM **, int *))off_1E3224320[v41])(&v42, v39);
    return (_BYTE *)v24;
  }
  if (v41 == 1)
  {
    v28 = (WTF::StringImpl *)LOBYTE(v39[0]);
    LOBYTE(v42) = v39[0];
    v29 = v40;
    v40 = 0;
    v43 = v29;
    if (!*(_QWORD *)(v4 + 16))
    {
      v30.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v39[0]), (JSC::JSGlobalObject *)&v43);
      JSC::VM::throwException((JSC::VM *)v4, this, v30);
      v29 = v43;
    }
    v43 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v24 = 0;
    goto LABEL_34;
  }
  v35 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioParamPrototypeFunction_setValueCurveAtTime(v35, v36, v37);
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_setValueCurveAtTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  JSC::VM *v15;
  double v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  unint64_t v23;
  JSValue v26;
  WTF::StringImpl *v27;
  JSValue v28;
  JSC::VM *v29;
  double v30;
  double v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  JSC::VM *v35;
  WTF *v36[2];
  int v37[2];
  WTF::StringImpl *v38;
  int v39;
  WTF *v40;
  WTF *v41;
  int v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "AudioParam", "setValueCurveAtTime");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParam::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParam::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "AudioParam", "setValueCurveAtTime");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLFloat>>::convert(*((_QWORD *)a2 + 6), this, (uint64_t)&v40);
  v13 = v42;
  if (v42)
  {
    v23 = 0;
LABEL_32:
    if (v13 != -1)
      ((void (*)(int *, WTF **))off_1E3224330[v13])(v37, &v40);
    return (_BYTE *)v23;
  }
  v14 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v37 = v14;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v15;
  if (v14 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v14;
  }
  else if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v29 = v15;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v15 = v29;
    v16 = v30;
  }
  else
  {
    *(_QWORD *)&v16 = v14 - 0x2000000000000;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    goto LABEL_44;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
LABEL_44:
    v23 = 0;
LABEL_31:
    v13 = v42;
    goto LABEL_32;
  }
  v17 = *((_QWORD *)a2 + 8);
  *(_QWORD *)v37 = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v18;
  if (v17 >= 0xFFFE000000000000)
  {
    v19 = (double)(int)v17;
  }
  else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v19 = v31;
  }
  else
  {
    *(_QWORD *)&v19 = v17 - 0x2000000000000;
  }
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
  {
LABEL_48:
    v23 = 0;
    goto LABEL_31;
  }
  if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    goto LABEL_48;
  }
  if (!v42)
  {
    v20 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v36[0] = v40;
    v21 = v41;
    v40 = 0;
    v41 = 0;
    v36[1] = v21;
    WebCore::AudioParam::setValueCurveAtTime(v12, (uint64_t)v36, (uint64_t)v37, v16, *(WTF **)&v19);
    if (!v39)
    {
      v23 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v20, *(WTF **)v37);
LABEL_27:
      if (v39 != -1)
        ((void (*)(JSC::VM **, int *))off_1E3224320[v39])(&v43, v37);
      v39 = -1;
      if (v36[0])
        WTF::fastFree(v36[0], v22);
      goto LABEL_31;
    }
    if (v39 == 1)
    {
      v22 = (void *)LOBYTE(v37[0]);
      LOBYTE(v43) = v37[0];
      v27 = v38;
      v38 = 0;
      v44 = v27;
      if (!*((_QWORD *)v4 + 2))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v37[0]), (JSC::JSGlobalObject *)&v44);
        JSC::VM::throwException(v4, this, v28);
        v27 = v44;
      }
      v44 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)v27 -= 2;
      }
      v23 = 0;
      goto LABEL_27;
    }
  }
  v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsAudioParamPrototypeFunction_cancelScheduledValues(v32, v33, v34);
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_cancelScheduledValues(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  unint64_t v12;
  double v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  unint64_t v17;
  uint64_t v18;
  JSValue v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v4 = *((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "AudioParam", "cancelScheduledValues");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioParam::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioParam::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "AudioParam", "cancelScheduledValues");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v24 = v12;
  v27 = v4;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v24, this);
    v13 = v22;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v13 >= 0.0)
  {
    v18 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    WebCore::AudioParamTimeline::cancelScheduledValues((WTF *)(v11 + 112), a2, v13);
    v24 = v11;
    v26 = 0;
    v17 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v18, (WTF *)v11);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v24) = 32;
    v26 = 1;
    LOBYTE(v27) = 32;
    v15 = v25;
    v25 = 0;
    v28 = v15;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0x20, (JSC::JSGlobalObject *)&v28);
      JSC::VM::throwException((JSC::VM *)v4, this, v16);
      v15 = v28;
    }
    v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v17 = 0;
  }
  if (v26 != -1)
    ((void (*)(uint64_t *, unint64_t *))off_1E3224320[v26])(&v27, &v24);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsAudioParamPrototypeFunction_cancelAndHoldAtTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned __int8 *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSValue v17;
  unint64_t v18;
  JSValue v21;
  double v22;
  uint64_t v23;
  unsigned __int8 *v24;
  WTF::StringImpl *v25;
  int v26;
  int v27[2];
  WTF::StringImpl *v28;
  char v29;

  v4 = *((_QWORD *)this + 7);
  v23 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "AudioParam", "cancelAndHoldAtTime");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioParam::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioParam::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "AudioParam", "cancelAndHoldAtTime");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v11 = *(unsigned __int8 **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v27 = v12;
  v24 = (unsigned __int8 *)v4;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v27, this);
    v13 = v22;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (v13 < 0.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 32;
    LOBYTE(v24) = 32;
LABEL_22:
    v26 = 1;
    LOBYTE(v27[0]) = v14;
    v16 = v25;
    v25 = 0;
    v28 = v16;
    if (!*(_QWORD *)(v4 + 16))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v14, (JSC::JSGlobalObject *)&v28);
      JSC::VM::throwException((JSC::VM *)v4, this, v17);
      v16 = v28;
    }
    v28 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v18 = 0;
    goto LABEL_28;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::AudioParamTimeline::cancelAndHoldAtTime(v11 + 112, a2, v27, v13);
  if (v29)
  {
    v14 = LOBYTE(v27[0]);
    LOBYTE(v24) = v27[0];
    v25 = v28;
    goto LABEL_22;
  }
  v24 = v11;
  v26 = 0;
  v18 = WebCore::wrap<WebCore::AudioParam>((uint64_t)this, v15, (WTF *)v11);
LABEL_28:
  if (v26 != -1)
    ((void (*)(int *, unsigned __int8 **))off_1E3224320[v26])(v27, &v24);
  return (_BYTE *)v18;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore10AudioParamENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLFloat>>::convert@<X0>(uint64_t this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unsigned int v7;
  char v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  JSC::VM *v13;
  int v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl **v19;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((this & 0xFFFE000000000002) != 0 || (v7 = *(unsigned __int8 *)(this + 5), v7 <= 0x16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    result = (uint64_t)v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    if (v7 == 36)
    {
      if ((JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this) & 1) != 0)
      {
        v8 = *(_BYTE *)(this + 4);
        if ((v8 & 0xE) != 0)
        {
          v9 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
          v17 = 0;
          v18 = 0;
          if ((_DWORD)v9)
          {
            if (v9 >> 30 || (WTF::tryFastMalloc((WTF *)(4 * v9)), !v19))
            {
              JSC::throwTypeError();
              goto LABEL_30;
            }
            LODWORD(v18) = v9;
            v17 = (WTF::StringImpl *)v19;
            v8 = *(_BYTE *)(this + 4);
          }
        }
        else
        {
          LODWORD(v9) = 0;
          v17 = 0;
          v18 = 0;
        }
        if ((v8 & 0xC) == 4)
        {
          WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLFloat>>::convertArray(this, v9, v8 & 0xE, (uint64_t)&v17, a3);
          goto LABEL_24;
        }
        v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v19 = &v17;
        JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLFloat>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, this, (uint64_t *)&v19);
        if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
        {
          v14 = 0;
          *(_QWORD *)a3 = v17;
          v15 = v18;
          v16 = HIDWORD(v18);
          v17 = 0;
          v18 = 0;
          *(_DWORD *)(a3 + 8) = v15;
          *(_DWORD *)(a3 + 12) = v16;
LABEL_23:
          *(_DWORD *)(a3 + 16) = v14;
LABEL_24:
          result = (uint64_t)v17;
          if (!v17)
            return result;
LABEL_28:
          v17 = 0;
          LODWORD(v18) = 0;
          return WTF::fastFree((WTF *)result, v10);
        }
LABEL_30:
        v14 = 1;
        goto LABEL_23;
      }
      v17 = 0;
      v18 = 0;
      v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v19 = &v17;
    result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLFloat>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, this, (uint64_t *)&v19);
    if (!*((_DWORD *)v5 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v5), (result & 1) == 0))
    {
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      *(_DWORD *)(a3 + 16) = 0;
      return result;
    }
    result = (uint64_t)v17;
    *(_DWORD *)(a3 + 16) = 1;
    if (result)
      goto LABEL_28;
  }
  return result;
}

uint64_t WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLFloat>>::convertArray@<X0>(uint64_t a1@<X2>, unsigned int a2@<W3>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  float v28;

  if (a3 == 4)
  {
    if (a2)
    {
      v8 = 0;
      v9 = 8 * a2;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v8);
        if (v10)
        {
          v11 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(a4 + 8))
          {
            v12 = v11 + (v11 >> 2);
            if (v12 >= 0x10)
              v13 = v12 + 1;
            else
              v13 = 16;
            if (v13 <= v11 + 1)
              v14 = v11 + 1;
            else
              v14 = v13;
            result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a4, v14);
            v11 = *(unsigned int *)(a4 + 12);
          }
          *(float *)(*(_QWORD *)a4 + 4 * v11) = (float)(int)v10;
        }
        else
        {
          v11 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(a4 + 8))
          {
            v16 = v11 + (v11 >> 2);
            if (v16 >= 0x10)
              v17 = v16 + 1;
            else
              v17 = 16;
            if (v17 <= v11 + 1)
              v18 = v11 + 1;
            else
              v18 = v17;
            result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a4, v18);
            v11 = *(unsigned int *)(a4 + 12);
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v11) = 0;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v11) = 0;
          }
        }
        v19 = v11 + 1;
        *(_DWORD *)(a4 + 12) = v11 + 1;
        v8 += 8;
      }
      while (v9 != v8);
    }
    else
    {
      v19 = *(_DWORD *)(a4 + 12);
    }
    v25 = 0;
    *(_QWORD *)a5 = *(_QWORD *)a4;
    v27 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a5 + 8) = v27;
    *(_DWORD *)(a5 + 12) = v19;
  }
  else if (a2)
  {
    v20 = 0;
    v21 = 8 * a2;
    while (1)
    {
      v22 = *(double *)(*(_QWORD *)(a1 + 8) + v20);
      if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v23 = v22;
      v28 = v23;
      v24 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v24 == *(_DWORD *)(a4 + 8))
      {
        result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(a4, (unint64_t)&v28);
      }
      else
      {
        *(float *)(*(_QWORD *)a4 + 4 * v24) = v23;
        *(_DWORD *)(a4 + 12) = v24 + 1;
      }
      v20 += 8;
      if (v21 == v20)
        goto LABEL_32;
    }
    result = JSC::throwTypeError();
    v25 = 1;
  }
  else
  {
LABEL_32:
    v25 = 0;
    *(_QWORD *)a5 = *(_QWORD *)a4;
    v26 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a5 + 8) = v26;
  }
  *(_DWORD *)(a5 + 16) = v25;
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLFloat>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLFloat>::convert((int)&v16, a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLFloat>::convert((int)&v16, a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLFloat>::convert(int a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  double v6;
  float v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;

  result = *((_QWORD *)a2 + 7);
  v11 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v6 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v10 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v11, a2);
    result = v10;
    v6 = v9;
  }
  else
  {
    *(_QWORD *)&v6 = a3 - 0x2000000000000;
  }
  if (!*(_DWORD *)(result + 80)
    || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) == 0))
  {
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v6 < -3.40282347e38 || v6 > 3.40282347e38)
    {
      return JSC::throwTypeError();
    }
    else
    {
      v7 = v6;
      *(float *)&v11 = v7;
      v8 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(a4 + 8))
      {
        return WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(a4, (unint64_t)&v11);
      }
      else
      {
        *(float *)(*(_QWORD *)a4 + 4 * v8) = v7;
        *(_DWORD *)(a4 + 12) = v8 + 1;
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIfLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_BYTE *WebCore::jsAudioParamMapPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char BackingMap;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSValue v33;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "AudioParamMap", "get");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParamMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParamMap::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "AudioParamMap", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v12 = *((_QWORD *)a2 + 6);
  v40[0] = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v39 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v40, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v39;
    if (hasExceptionsAfterHandlingTraps)
    {
      v38 = 1;
      v39 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v35);
        else
          *(_DWORD *)v14 -= 2;
      }
      v28 = 0;
      v30 = 1;
      goto LABEL_47;
    }
  }
  else
  {
    v14 = v39;
  }
  v38 = 0;
  v37 = 0;
  BackingMap = WebCore::getBackingMap((unint64_t)this, v5, a3);
  v18 = v16;
  if (BackingMap)
  {
    v40[0] = this;
    v40[1] = v16;
    v19 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = v19 + 16 * v20;
      if (*(_DWORD *)(v19 - 12))
      {
        v22 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = v19;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_29;
            }
          }
        }
        goto LABEL_29;
      }
      v22 = v19 + 16 * v20;
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = v19 + 16 * v20;
    if (!v19)
    {
      v24 = 0;
LABEL_34:
      while (v22 != v24)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v40, (uint64_t *)v22, *(WTF **)(v22 + 8));
        v25 = v22 + 16;
        v22 = v21;
        if (v25 != v21)
        {
          v22 = v25;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            if (v22 == v21)
            {
              v22 = v21;
              break;
            }
          }
        }
      }
      goto LABEL_41;
    }
LABEL_29:
    v24 = v19 + 16 * *(unsigned int *)(v19 - 4);
    goto LABEL_34;
  }
LABEL_41:
  v26 = (WTF::StringImpl *)MEMORY[0x1E0CBEBA8];
  *MEMORY[0x1E0CBEBA8] += 2;
  v40[0] = v26;
  v28 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v40, v17);
  v29 = v40[0];
  v40[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v27);
      if (!v14)
        goto LABEL_54;
      goto LABEL_45;
    }
    *(_DWORD *)v29 -= 2;
  }
  if (!v14)
  {
LABEL_54:
    v30 = 0;
    goto LABEL_47;
  }
LABEL_45:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v27);
    goto LABEL_54;
  }
  v30 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_47:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223358[v30])(v40, &v37);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsAudioParamMapPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char BackingMap;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSValue v33;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "AudioParamMap", "has");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParamMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParamMap::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "AudioParamMap", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v12 = *((_QWORD *)a2 + 6);
  v40[0] = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v39 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v40, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v39;
    if (hasExceptionsAfterHandlingTraps)
    {
      v38 = 1;
      v39 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v35);
        else
          *(_DWORD *)v14 -= 2;
      }
      v28 = 0;
      v30 = 1;
      goto LABEL_47;
    }
  }
  else
  {
    v14 = v39;
  }
  v38 = 0;
  v37 = 0;
  BackingMap = WebCore::getBackingMap((unint64_t)this, v5, a3);
  v18 = v16;
  if (BackingMap)
  {
    v40[0] = this;
    v40[1] = v16;
    v19 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = v19 + 16 * v20;
      if (*(_DWORD *)(v19 - 12))
      {
        v22 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = v19;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_29;
            }
          }
        }
        goto LABEL_29;
      }
      v22 = v19 + 16 * v20;
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = v19 + 16 * v20;
    if (!v19)
    {
      v24 = 0;
LABEL_34:
      while (v22 != v24)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v40, (uint64_t *)v22, *(WTF **)(v22 + 8));
        v25 = v22 + 16;
        v22 = v21;
        if (v25 != v21)
        {
          v22 = v25;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            if (v22 == v21)
            {
              v22 = v21;
              break;
            }
          }
        }
      }
      goto LABEL_41;
    }
LABEL_29:
    v24 = v19 + 16 * *(unsigned int *)(v19 - 4);
    goto LABEL_34;
  }
LABEL_41:
  v26 = (WTF::StringImpl *)MEMORY[0x1E0CBEBB0];
  *MEMORY[0x1E0CBEBB0] += 2;
  v40[0] = v26;
  v28 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v40, v17);
  v29 = v40[0];
  v40[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v27);
      if (!v14)
        goto LABEL_54;
      goto LABEL_45;
    }
    *(_DWORD *)v29 -= 2;
  }
  if (!v14)
  {
LABEL_54:
    v30 = 0;
    goto LABEL_47;
  }
LABEL_45:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v27);
    goto LABEL_54;
  }
  v30 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_47:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3223358[v30])(v40, &v37);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsAudioParamMapPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "AudioParamMap", "entries");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioParamMap::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioParamMap::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "AudioParamMap", "entries");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v28[0] = this;
    v28[1] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v15 - 12))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v16)
        {
          v19 = 16 * v16;
          v18 = v15;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19)
            {
              v18 = v17;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v18 = v15 + 16 * v16;
    }
    else
    {
      v18 = 0;
      v16 = 0;
    }
    v17 = v15 + 16 * v16;
    if (!v15)
    {
      v20 = 0;
LABEL_25:
      while (v18 != v20)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v28, (uint64_t *)v18, *(WTF **)(v18 + 8));
        v21 = v18 + 16;
        v18 = v17;
        if (v21 != v17)
        {
          v18 = v21;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF8];
  *MEMORY[0x1E0CBEBF8] += 2;
  v28[0] = v22;
  v24 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v28, v13);
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsAudioParamMapPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "AudioParamMap", "keys");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioParamMap::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioParamMap::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "AudioParamMap", "keys");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v28[0] = this;
    v28[1] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v15 - 12))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v16)
        {
          v19 = 16 * v16;
          v18 = v15;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19)
            {
              v18 = v17;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v18 = v15 + 16 * v16;
    }
    else
    {
      v18 = 0;
      v16 = 0;
    }
    v17 = v15 + 16 * v16;
    if (!v15)
    {
      v20 = 0;
LABEL_25:
      while (v18 != v20)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v28, (uint64_t *)v18, *(WTF **)(v18 + 8));
        v21 = v18 + 16;
        v18 = v17;
        if (v21 != v17)
        {
          v18 = v21;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBC0];
  *MEMORY[0x1E0CBEBC0] += 2;
  v28[0] = v22;
  v24 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v28, v13);
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsAudioParamMapPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v27 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "AudioParamMap", "values");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioParamMap::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioParamMap::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "AudioParamMap", "values");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v28[0] = this;
    v28[1] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v15 - 12))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
        if ((_DWORD)v16)
        {
          v19 = 16 * v16;
          v18 = v15;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19)
            {
              v18 = v17;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v18 = v15 + 16 * v16;
    }
    else
    {
      v18 = 0;
      v16 = 0;
    }
    v17 = v15 + 16 * v16;
    if (!v15)
    {
      v20 = 0;
LABEL_25:
      while (v18 != v20)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v28, (uint64_t *)v18, *(WTF **)(v18 + 8));
        v21 = v18 + 16;
        v18 = v17;
        if (v21 != v17)
        {
          v18 = v21;
          while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
          {
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      goto LABEL_32;
    }
LABEL_20:
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
    goto LABEL_25;
  }
LABEL_32:
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  v28[0] = v22;
  v24 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v28, v13);
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsAudioParamMapPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::CallFrame *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  JSC::VM *v23;
  _QWORD v24[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v4;
  v5 = (JSC::CallFrame *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "AudioParamMap", "forEach");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSAudioParamMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSAudioParamMap::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "AudioParamMap", "forEach");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    if (!WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3))
      return (_BYTE *)WebCore::forwardForEachCallToBackingMap(this, a2, v5, v13);
    v24[0] = this;
    v24[1] = v12;
    v14 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v14)
    {
      v15 = *(unsigned int *)(v14 - 4);
      v16 = v14 + 16 * v15;
      if (*(_DWORD *)(v14 - 12))
      {
        v17 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
        if ((_DWORD)v15)
        {
          v18 = 16 * v15;
          v17 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            v18 -= 16;
            if (!v18)
            {
              v17 = v16;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
      v17 = v14 + 16 * v15;
    }
    else
    {
      v17 = 0;
      v15 = 0;
    }
    v16 = v14 + 16 * v15;
    if (!v14)
    {
      v19 = 0;
LABEL_26:
      while (v17 != v19)
      {
        WebCore::DOMMapAdapter::set<WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::AudioParam>>((uint64_t)v24, (uint64_t *)v17, *(WTF **)(v17 + 8));
        v20 = v17 + 16;
        v17 = v16;
        if (v20 != v16)
        {
          v17 = v20;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            if (v17 == v16)
            {
              v17 = v16;
              break;
            }
          }
        }
      }
      return (_BYTE *)WebCore::forwardForEachCallToBackingMap(this, a2, v5, v13);
    }
LABEL_21:
    v19 = v14 + 16 * *(unsigned int *)(v14 - 4);
    goto LABEL_26;
  }
  v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return (_BYTE *)JSC::VM::throwException(v4, this, v22);
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24AudioProcessingEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF **v3;
  WTF **result;

  v3 = (WTF **)a2[3];
  a2[3] = 0;
  if (v3)
    WTF::RefCounted<WebCore::AudioBuffer>::deref(v3, a2);
  result = (WTF **)a2[2];
  a2[2] = 0;
  if (result)
    return WTF::RefCounted<WebCore::AudioBuffer>::deref(result, a2);
  return result;
}

uint64_t WebCore::jsAudioScheduledSourceNodePrototypeFunction_start(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::AudioScheduledSourceNode *v11;
  double v12;
  unint64_t v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  char hasExceptionsAfterHandlingTraps;
  double v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24[2];
  WTF::StringImpl *v25;
  char v26;

  v4 = *((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "AudioScheduledSourceNode", "start");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioScheduledSourceNode::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioScheduledSourceNode::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "AudioScheduledSourceNode", "start");
  v11 = *(WebCore::AudioScheduledSourceNode **)(v5 + 24);
  v12 = 0.0;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_20;
  v13 = *((_QWORD *)a2 + 6);
  if (v13 == 10)
    goto LABEL_20;
  *(_QWORD *)v24 = *((_QWORD *)a2 + 6);
  v22 = v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v24, this);
  }
  else
  {
    *(_QWORD *)&v12 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80))
  {
    v20 = v12;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v20;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
LABEL_20:
    WebCore::AudioScheduledSourceNode::startLater(v11, v12, (uint64_t)v24);
    if (!v26)
      return 10;
    v15 = (WTF::StringImpl *)LOBYTE(v24[0]);
    LOBYTE(v22) = v24[0];
    v16 = v25;
    v25 = 0;
    v23 = v16;
    if (!*(_QWORD *)(v4 + 16))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v24[0]), (JSC::JSGlobalObject *)&v23);
      JSC::VM::throwException((JSC::VM *)v4, this, v17);
      v16 = v23;
    }
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v26)
    {
      v18 = v25;
      v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 != 2)
        {
          result = 0;
          *(_DWORD *)v18 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v18, v15);
      }
    }
  }
  else
  {
    JSC::throwTypeError();
  }
  return 0;
}

uint64_t WebCore::jsAudioScheduledSourceNodePrototypeFunction_stop(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  char hasExceptionsAfterHandlingTraps;
  double v24;
  double v25;
  double v26;
  WTF::StringImpl *v27;
  const char *v28;
  WTF::StringImpl *v29;
  const char *v30;
  uint64_t v31;

  v4 = *((double *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "AudioScheduledSourceNode", "stop");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioScheduledSourceNode::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioScheduledSourceNode::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "AudioScheduledSourceNode", "stop");
  v11 = *(_QWORD *)(v5 + 24);
  v12 = 0.0;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_20;
  v13 = *((_QWORD *)a2 + 6);
  if (v13 == 10)
    goto LABEL_20;
  v28 = (const char *)*((_QWORD *)a2 + 6);
  v26 = v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v28, this);
  }
  else
  {
    *(_QWORD *)&v12 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(*(_QWORD *)&v4 + 80))
  {
    v24 = v12;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(*(JSC::VM **)&v4);
    v12 = v24;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
LABEL_20:
    v26 = v12;
    v14 = *(_QWORD *)(v11 + 120);
    v15 = *(_QWORD *)(v11 + 128);
    v28 = "AudioNode";
    v29 = (WTF::StringImpl *)10;
    v30 = "stopLater";
    v31 = v15;
    if (*(_BYTE *)(v14 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v28, &v26);
    if (atomic_load((unsigned int *)(v11 + 176)))
    {
      v17 = 32;
      if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v26 >= 0.0)
      {
        *(double *)(v11 + 192) = v26;
        *(_BYTE *)(v11 + 200) = 1;
        return 10;
      }
    }
    else
    {
      v17 = 8;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v28) = v17;
    LOBYTE(v30) = 1;
    LOBYTE(v26) = v17;
    v20 = v29;
    v29 = 0;
    v27 = v20;
    if (!*(_QWORD *)(*(_QWORD *)&v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v27);
      JSC::VM::throwException(*(JSC::VM **)&v4, this, v21);
      v20 = v27;
    }
    v27 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    if ((_BYTE)v30)
    {
      v22 = v29;
      v29 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 != 2)
        {
          result = 0;
          *(_DWORD *)v22 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v22, v19);
      }
    }
  }
  else
  {
    JSC::throwTypeError();
  }
  return 0;
}

uint64_t WebCore::jsAudioTrackListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  _DWORD *v12;
  uint64_t result;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AudioTrackList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioTrackList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioTrackList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AudioTrackList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 68) > v16[0] && (v12 = *(_DWORD **)(*(_QWORD *)(v11 + 56) + 8 * v16[0])) != 0)
    {
      if (v12[10] == 2)
      {
        return WebCore::wrap<WebCore::AudioTrack>((uint64_t)this, *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
      }
      else
      {
        result = 105;
        __break(0xC471u);
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

_BYTE *WebCore::jsAudioTrackListPrototypeFunction_getTrackById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  JSValue v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "AudioTrackList", "getTrackById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAudioTrackList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAudioTrackList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "AudioTrackList", "getTrackById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v28);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v30);
  v13 = v31;
  if (v31)
  {
    v19 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v15 = v30;
    v30 = 0;
    v16 = *(unsigned int *)(v11 + 68);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(v11 + 56);
      if (v15)
      {
        v18 = 8 * v16;
        v19 = 2;
        while (1)
        {
          v20 = *v17;
          if (*(_DWORD *)(*v17 + 40) != 2)
            break;
          v21 = *(WTF::StringImpl **)(v20 + 48);
          if (v21)
          {
            v22 = *(_DWORD *)v21;
            *(_DWORD *)v21 += 2;
            if (v22)
              *(_DWORD *)v21 = v22;
            else
              WTF::StringImpl::destroy(v21, v12);
            if (v21 == v15)
              goto LABEL_34;
          }
          ++v17;
          v18 -= 8;
          if (!v18)
            goto LABEL_35;
        }
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x1948752ACLL);
      }
      v23 = 8 * v16;
      v19 = 2;
      while (1)
      {
        v20 = *v17;
        if (*(_DWORD *)(*v17 + 40) != 2)
          goto LABEL_43;
        v24 = *(WTF::StringImpl **)(v20 + 48);
        if (!v24)
          break;
        v25 = *(_DWORD *)v24;
        *(_DWORD *)v24 += 2;
        if (v25)
          *(_DWORD *)v24 = v25;
        else
          WTF::StringImpl::destroy(v24, v12);
        ++v17;
        v23 -= 8;
        if (!v23)
          goto LABEL_35;
      }
LABEL_34:
      v19 = WebCore::wrap<WebCore::AudioTrack>((uint64_t)this, v14, (_DWORD *)v20);
    }
    else
    {
      v19 = 2;
    }
LABEL_35:
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v13 = v31;
  }
  if (v13 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E32236D8[v13])(&v32, &v30);
  return (_BYTE *)v19;
}

_QWORD *WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (uint64_t *)(v6 + 8 * v11);
    v14 = *v13;
    if ((unint64_t)(*v13 + 1) >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = 1;
      do
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 8 * v20);
        v20 = (v20 + v21++) & v16;
      }
      while (v23);
      v24 = (_QWORD *)(v15 + 8 * v22);
      *v24 = v14;
      if (v13 == a3)
        v12 = v24;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_28;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_29:
    result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v4, v25, v14);
    v14 = result;
    v21 = *v4;
    if (*v4)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_33:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

uint64_t WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x15)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 20;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x194875798);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x15)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 20;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

_BYTE *WebCore::jsAudioWorkletGlobalScopeInstanceFunction_registerProcessor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WTF::StringImpl **v4;
  unint64_t v5;
  uint64_t Object;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::ScriptExecutionContext *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *Allocator;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char **v39;
  BOOL v40;
  JSC::VM *v44;
  JSValue v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSValue v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59[2];
  WTF::StringImpl *v60;
  char v61;
  _DWORD *v62;

  v4 = (WTF::StringImpl **)this;
  v52 = *(_QWORD *)(this + 56);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v5 + 5) - 51 < 6)
    v5 = 10;
  if ((v5 & 0xFFFFFFFFFFFFFFF7) != 2)
    this = v5;
  if ((this & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)v4, (int)&v52, "AudioWorkletGlobalScope", "registerProcessor");
  Object = JSC::JSCell::getObject((JSC::JSCell *)this);
  if (!Object)
    return WebCore::throwThisTypeError((int)v4, (int)&v52, "AudioWorkletGlobalScope", "registerProcessor");
  v9 = Object;
  if (*(_BYTE *)(Object + 5) == 32)
  {
    v9 = *(_QWORD *)(Object + 16);
    v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSAudioWorkletGlobalScope::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSAudioWorkletGlobalScope::s_info && v12 != 0);
    }
    if (v11)
      goto LABEL_19;
    return WebCore::throwThisTypeError((int)v4, (int)&v52, "AudioWorkletGlobalScope", "registerProcessor");
  }
  v37 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
  v38 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
  v39 = (char **)(16 * v37);
  if ((_DWORD)v37)
    v40 = v39 == &WebCore::JSAudioWorkletGlobalScope::s_info;
  else
    v40 = 1;
  if (!v40)
  {
    do
    {
      v39 = (char **)v39[2];
      v38 = v39 != 0;
    }
    while (v39 != &WebCore::JSAudioWorkletGlobalScope::s_info && v39 != 0);
  }
  if (!v38)
    return WebCore::throwThisTypeError((int)v4, (int)&v52, "AudioWorkletGlobalScope", "registerProcessor");
LABEL_19:
  v15 = v4[7];
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v44 = v4[7];
    v45.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)v4, v7);
    return (_BYTE *)JSC::VM::throwException(v44, (JSC::JSGlobalObject *)v4, v45);
  }
  v16 = *(_QWORD *)(v9 + 3400);
  v17 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v59 = v17;
  v51 = v15;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v17 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, (JSC::JSGlobalObject *)v4);
      v15 = v51;
      if (!v18)
        goto LABEL_25;
    }
    else if (!v18)
    {
LABEL_25:
      v57 = v18;
      goto LABEL_26;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_25;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v59, (JSC::JSGlobalObject *)v4);
  v15 = v51;
LABEL_26:
  if (*((_DWORD *)v15 + 20))
  {
    v19 = v57;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v15))
    {
      v56 = 1;
      v57 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v46);
        else
          *(_DWORD *)v19 -= 2;
      }
      v34 = 0;
      v36 = 1;
      goto LABEL_52;
    }
  }
  else
  {
    v19 = v57;
  }
  v55 = v19;
  v56 = 0;
  v20 = *((_QWORD *)a2 + 7);
  v57 = v4[7];
  if ((v20 & 0xFFFE000000000002) != 0
    || (v21 = *(unsigned __int8 *)(v20 + 5), v21 < 0x17)
    || (v21 & 0xFE) != 0x1A
    && ((*(_BYTE *)(v20 + 6) & 4) == 0
     || ((*(void (**)(int *__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(v59, v20), !LOBYTE(v59[0]))))
  {
    v35 = 1;
    WebCore::throwArgumentMustBeFunctionError((uint64_t)v4, (uint64_t)&v57, 1, "processorCtor", 14, "AudioWorkletGlobalScope", 24, v8, "registerProcessor", 18);
    v34 = 0;
    v54 = 1;
    goto LABEL_51;
  }
  v22 = WTF::fastMalloc((WTF *)0x20);
  v23 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v9);
  *(_DWORD *)(v22 + 16) = 1;
  *(_QWORD *)v22 = &off_1E33A18C0;
  *(_QWORD *)(v22 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v22, v23);
  *(_QWORD *)v22 = &off_1E3222470;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v9);
  if ((v9 & 8) != 0)
    v26 = ((v9 - 112) | 1) + 47;
  else
    v26 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFC000) + 32;
  Allocator = *(_QWORD **)(v26 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *Allocator;
  Allocator[1] = 0;
  Allocator[2] = 0;
  *Allocator = v9;
  v24[1] = &off_1E32268A0;
  *v24 = Allocator;
  if ((v20 & 8) != 0)
    v28 = (v20 - 112) | 1;
  else
    v28 = v20 & 0xFFFFFFFFFFFFC000;
  if ((v28 & 1) != 0)
    v29 = v28 + 47;
  else
    v29 = *(_QWORD *)v28 + 32;
  v30 = *(_QWORD **)(v29 + 16);
  if (!v30)
    v30 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v29 + 16) = *v30;
  *v30 = v20;
  v30[1] = v24 + 1;
  v30[2] = v25;
  v24[2] = v30;
  *(_QWORD *)(v22 + 24) = v24;
  v54 = 0;
  v55 = 0;
  v57 = v19;
  v53 = 0;
  v62 = (_DWORD *)v22;
  WebCore::AudioWorkletGlobalScope::registerProcessor(v16, &v57, (const WTF::StringImpl *)&v62, (uint64_t)v59);
  v32 = v62;
  v62 = 0;
  if (v32)
  {
    if (v32[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
    else
      --v32[4];
  }
  v33 = v57;
  v57 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (v61)
  {
    v47 = (WTF::StringImpl *)LOBYTE(v59[0]);
    LOBYTE(v57) = v59[0];
    v48 = v60;
    v60 = 0;
    v58 = v48;
    if (!*((_QWORD *)v51 + 2))
    {
      v49.super.isa = (Class)WebCore::createDOMException((JSC *)v4, (JSC::JSGlobalObject *)LOBYTE(v59[0]), (JSC::JSGlobalObject *)&v58);
      JSC::VM::throwException(v51, (JSC::JSGlobalObject *)v4, v49);
      v48 = v58;
    }
    v58 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
    if (v61)
    {
      v50 = v60;
      v60 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 != 2)
        {
          v34 = 0;
          *(_DWORD *)v50 -= 2;
          goto LABEL_50;
        }
        WTF::StringImpl::destroy(v50, v47);
      }
    }
    v34 = 0;
    goto LABEL_50;
  }
  v34 = 10;
LABEL_50:
  v35 = 0;
LABEL_51:
  ((void (*)(int *, uint64_t *))off_1E3224F30[v35])(v59, &v53);
  v36 = 0;
LABEL_52:
  ((void (*)(int *, WTF::StringImpl **))off_1E3223358[v36])(v59, &v55);
  return (_BYTE *)v34;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore34JSAudioWorkletProcessorConstructorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::AudioNode *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16AudioWorkletNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::AudioNode **a2)
{
  WebCore::AudioNode *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WebCore::AudioNode::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16AudioWorkletNodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23AudioWorkletNodeOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;

  v3 = *(_QWORD *)(a2 + 80);
  if (v3)
  {
    v4 = (uint64_t *)(v3 - 16);
    v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = *(uint64_t **)(v3 - 8);
    if (v6)
    {
      v7 = *v4;
      *v6 = *v4;
      *(_QWORD *)(v7 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
    }
    *v4 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
    *(_QWORD *)(a2 + 80) = 0;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v8)
    {
      v9 = *(WTF::StringImpl ***)(a2 + 56);
      v10 = 16 * v8;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        v9 += 2;
        v10 -= 16;
      }
      while (v10);
    }
    v12 = *(WTF **)(a2 + 56);
    if (v12)
    {
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = 0;
      WTF::fastFree(v12, (void *)a2);
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v13 = *(WTF **)(a2 + 32);
    if (v13)
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      WTF::fastFree(v13, (void *)a2);
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringEdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = (uint64_t *)(v2 - 16);
    v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = *(uint64_t **)(v2 - 8);
    if (v5)
    {
      v6 = *v3;
      *v5 = *v3;
      *(_QWORD *)(v6 + 8) = v5;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    *a2 = 0;
  }
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AudioWorkletProcessorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::AudioWorkletProcessor,WTF::RawPtrTraits<WebCore::AudioWorkletProcessor>,WTF::DefaultRefDerefTraits<WebCore::AudioWorkletProcessor>>::~Ref(a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AudioWorkletProcessorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  v6 = a1 + 16;
  v7 = (uint64_t *)((char *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v8 = *(unsigned int *)(a1 + 24);
      v9 = *((unsigned int *)a2 + 6);
      if ((_DWORD)v8 == -1)
      {
        if ((_DWORD)v9 == -1)
          return a1;
      }
      else if ((_DWORD)v9 == -1)
      {
        ((void (*)(char *, uint64_t, uint64_t *))off_1E3223390[v8])(&v14, v6, v7);
        *(_DWORD *)(a1 + 24) = -1;
        return a1;
      }
      v13 = a1 + 16;
      ((void (*)(uint64_t *))off_1E32233B0[v9])(&v13);
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t, uint64_t *))off_1E3223390[v10])(&v15, v6, v7);
    *(_DWORD *)(a1 + 24) = -1;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    v11 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_1E32233A0[v11])(&v16, v6, v7);
      *(_DWORD *)(a1 + 24) = v11;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore36AuthenticationExtensionsClientInputs15LargeBlobInputsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  if (*(_BYTE *)(a2 + 32))
  {
    v3 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E3223390[v3])(&v5, a2 + 16);
    *(_DWORD *)(a2 + 24) = -1;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v3 = result;
  if (*(unsigned __int8 *)(result + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(result + 40))
      return WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=(result, a2);
  }
  else if (*(_BYTE *)(result + 40))
  {
    if (*(_BYTE *)(result + 32))
    {
      v4 = *(unsigned int *)(result + 24);
      if ((_DWORD)v4 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v4])(&v8, result + 16);
      *(_DWORD *)(v3 + 24) = -1;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v5])(&v9, v3);
    *(_DWORD *)(v3 + 8) = -1;
    *(_BYTE *)(v3 + 40) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    v6 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E32233A0[v6])(&v10, result, a2);
      *(_DWORD *)(v3 + 8) = v6;
    }
    *(_BYTE *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      *(_DWORD *)(v3 + 24) = -1;
      v7 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v7 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E32233A0[v7])(&v11);
        *(_DWORD *)(v3 + 24) = v7;
      }
      *(_BYTE *)(v3 + 32) = 1;
    }
    *(_BYTE *)(v3 + 40) = 1;
  }
  return result;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E3223390[v4])(&v13, a1);
    *(_DWORD *)(a1 + 8) = -1;
    goto LABEL_6;
  }
  v13 = a1;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32233B0[v5])(&v13, a1, a2);
LABEL_6:
  v6 = a1 + 16;
  v7 = a2 + 16;
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v8 = *(unsigned int *)(a1 + 24);
      v9 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v8 == -1)
      {
        if ((_DWORD)v9 == -1)
          return a1;
      }
      else if ((_DWORD)v9 == -1)
      {
        ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3223390[v8])(&v13, v6, v7);
        *(_DWORD *)(a1 + 24) = -1;
        return a1;
      }
      v13 = a1 + 16;
      ((void (*)(uint64_t *))off_1E32233B0[v9])(&v13);
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 != -1)
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3223390[v10])(&v13, v6, v7);
    *(_DWORD *)(a1 + 24) = -1;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    v11 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32233A0[v11])(&v13, v6, v7);
      *(_DWORD *)(a1 + 24) = v11;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E336C408[v4])(&v13, a1);
    *(_DWORD *)(a1 + 8) = -1;
    goto LABEL_6;
  }
  v13 = a1;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E336C428[v5])(&v13, a1, a2);
LABEL_6:
  v6 = a1 + 16;
  v7 = a2 + 16;
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v8 = *(unsigned int *)(a1 + 24);
      v9 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v8 == -1)
      {
        if ((_DWORD)v9 == -1)
          return a1;
      }
      else if ((_DWORD)v9 == -1)
      {
        ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E336C408[v8])(&v13, v6, v7);
        *(_DWORD *)(a1 + 24) = -1;
        return a1;
      }
      v13 = a1 + 16;
      ((void (*)(uint64_t *))off_1E336C428[v9])(&v13);
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 != -1)
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E336C408[v10])(&v13, v6, v7);
    *(_DWORD *)(a1 + 24) = -1;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    v11 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E336C418[v11])(&v13, v6, v7);
      *(_DWORD *)(a1 + 24) = v11;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(unsigned int *)(result + 12);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = *(_QWORD *)result;
        v7 = 48 * v4;
        do
        {
          v8 = v6 + v5;
          if (*(_BYTE *)(v6 + v5 + 40))
          {
            v9 = *(unsigned int *)(v8 + 32);
            if ((_DWORD)v9 != -1)
              ((void (*)(char *, uint64_t))off_1E3223390[v9])(&v14, v8 + 24);
            *(_DWORD *)(v8 + 32) = -1;
          }
          v10 = *(unsigned int *)(v8 + 16);
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, uint64_t))off_1E3223390[v10])(&v15, v8 + 8);
          *(_DWORD *)(v8 + 16) = -1;
          v11 = *(WTF::StringImpl **)v8;
          *(_QWORD *)v8 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          v5 += 48;
        }
        while (v7 != v5);
      }
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v12;
      LODWORD(v12) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v12;
      LODWORD(v12) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v12;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result);
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v13;
    LODWORD(v13) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v13;
    LODWORD(v13) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v13;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore36AuthenticationExtensionsClientInputs9PRFInputsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*(_BYTE *)(a2 + 64))
    result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 48);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v4 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v4 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v4])(&v6, a2 + 16);
      *(_DWORD *)(a2 + 24) = -1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v5])(&v7, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  if (*(_BYTE *)(a2 + 32))
  {
    v3 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v3])(&v6, a2 + 16);
    *(_DWORD *)(a2 + 24) = -1;
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3223390[v5])(&v7, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringEN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2);
}

_BYTE *WebCore::jsAuthenticatorAttestationResponsePrototypeFunction_getTransports(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  objc_class **v18;
  uint64_t v19;
  int v20;
  int v21;
  objc_class *v22;
  int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  JSValue v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v32;
  uint64_t v33;
  JSC::VM *v34;
  WTF *v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  WTF *v39;
  _OWORD v40[4];
  uint64_t v41;
  JSC::VM *v42;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "AuthenticatorAttestationResponse", "getTransports");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSAuthenticatorAttestationResponse::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSAuthenticatorAttestationResponse::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "AuthenticatorAttestationResponse", "getTransports");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v42 = v5;
  v37 = 0;
  v33 = v12;
  v38 = 0x800000000;
  v39 = (WTF *)((char *)v40 + 8);
  memset(v40, 0, sizeof(v40));
  v41 = 0;
  v13 = (WTF::StringImpl *)*(unsigned int *)(v11 + 140);
  if (v13 >= 9)
  {
    v37 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v38) == 1;
    v13 = (WTF::StringImpl *)*(unsigned int *)(v11 + 140);
    if ((_DWORD)v13)
      goto LABEL_14;
  }
  else if ((_DWORD)v13)
  {
LABEL_14:
    v14 = v13;
    v15 = *(unsigned __int8 **)(v11 + 128);
    while (1)
    {
      v16 = *v15;
      v17 = *((_QWORD *)this + 7);
      if ((byte_1EE334B41 & 1) == 0)
      {
        dword_1ECE76B10 += 2;
        dword_1ECE76B30 += 2;
        unk_1EE334C40 = &dword_1ECE76B30;
        dword_1ECE76B50 += 2;
        dword_1ECE76B70 += 2;
        qword_1EE334C48 = (uint64_t)&dword_1ECE76B50;
        unk_1EE334C50 = &dword_1ECE76B70;
        dword_1ECE76B90 += 2;
        dword_1ECE76BB0 += 2;
        unk_1EE334C38 = &dword_1ECE76B10;
        qword_1EE334C58 = (uint64_t)&dword_1ECE76B90;
        unk_1EE334C60 = &dword_1ECE76BB0;
        dword_1ECE76BD0 += 2;
        qword_1EE334C68 = (uint64_t)&dword_1ECE76BD0;
        byte_1EE334B41 = 1;
      }
      v18 = (objc_class **)(v17 + 41968);
      v19 = *(_QWORD *)&_MergedGlobals_579[8 * v16 + 248];
      if (v19)
        break;
      v22 = *v18;
LABEL_25:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_57;
      v23 = v38;
      if ((_DWORD)v38 == HIDWORD(v38) || v39 != (WTF *)((char *)v40 + 8) && v39)
      {
        v27.super.isa = v22;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v38, v27) == 1)
          v37 = 1;
      }
      else
      {
        *((_QWORD *)v39 + v38) = v22;
        LODWORD(v38) = v23 + 1;
      }
      ++v15;
      if (!--v14)
        goto LABEL_45;
    }
    v20 = *(_DWORD *)v19;
    v21 = *(_DWORD *)(v19 + 4);
    *(_DWORD *)v19 += 2;
    if (v21)
    {
      if (v21 != 1)
      {
LABEL_20:
        v22 = *(objc_class **)(v17 + 64760);
        if (!v22 || v19 != *((_QWORD *)v22 + 1))
        {
          v22 = (objc_class *)JSC::jsStringWithCacheSlowCase();
          v20 = *(_DWORD *)v19 - 2;
        }
        goto LABEL_23;
      }
      v24 = *(unsigned __int8 **)(v19 + 8);
      if ((*(_BYTE *)(v19 + 16) & 4) != 0)
      {
        v25 = *v24;
      }
      else
      {
        v26 = *(unsigned __int16 *)v24;
        if (v26 > 0xFF)
          goto LABEL_20;
        v25 = v26;
      }
      v22 = *(objc_class **)(v17 + 8 * v25 + 42216);
    }
    else
    {
      v22 = *v18;
    }
LABEL_23:
    if (v20)
      *(_DWORD *)v19 = v20;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v19, v13);
    goto LABEL_25;
  }
LABEL_45:
  if (v37)
  {
    JSC::throwOutOfMemoryError();
LABEL_57:
    v29 = 0;
    goto LABEL_48;
  }
  v35 = v39;
  v36 = v38;
  v28 = *(JSC::VM **)(v33 + 56);
  if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
    goto LABEL_57;
  v29 = JSC::constructArray();
LABEL_48:
  v30 = *(uint64_t **)&v40[0];
  if (*(_QWORD *)&v40[0])
  {
    v35 = (WTF *)&v38;
    v32 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v40[0], (uint64_t *)&v35);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v30, v32);
  }
  if (v39 != (WTF *)((char *)v40 + 8) && v39)
    WTF::fastFree(v39, v13);
  return (_BYTE *)v29;
}

uint64_t WebCore::jsAuthenticatorAttestationResponsePrototypeFunction_getAuthenticatorData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::ArrayBuffer *v11;
  uint64_t v12;
  WTF::DeferrableRefCountedBase *v13;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AuthenticatorAttestationResponse", "getAuthenticatorData");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAuthenticatorAttestationResponse::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAuthenticatorAttestationResponse::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AuthenticatorAttestationResponse", "getAuthenticatorData");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::AuthenticatorAttestationResponse::getAuthenticatorData(*(_QWORD *)(v4 + 24), &v16);
  if (!v16)
    return 2;
  v12 = WebCore::toJS(this, v10, v16, v11);
  v13 = v16;
  v16 = 0;
  if (v13)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return v12;
}

uint64_t WebCore::jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::ArrayBuffer *v11;
  uint64_t v12;
  WTF::DeferrableRefCountedBase *v13;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AuthenticatorAttestationResponse", "getPublicKey");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSAuthenticatorAttestationResponse::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSAuthenticatorAttestationResponse::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AuthenticatorAttestationResponse", "getPublicKey");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::AuthenticatorAttestationResponse::getPublicKey(*(WebCore::AuthenticatorAttestationResponse **)(v4 + 24), &v16);
  if (!v16)
    return 2;
  v12 = WebCore::toJS(this, v10, v16, v11);
  v13 = v16;
  v16 = 0;
  if (v13)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
  return v12;
}

_BYTE *WebCore::jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyAlgorithm(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "AuthenticatorAttestationResponse", "getPublicKeyAlgorithm");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSAuthenticatorAttestationResponse::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSAuthenticatorAttestationResponse::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "AuthenticatorAttestationResponse", "getPublicKeyAlgorithm");
  else
    return (_BYTE *)(WebCore::AuthenticatorAttestationResponse::getPublicKeyAlgorithm(*(WebCore::AuthenticatorAttestationResponse **)(v3 + 24)) | 0xFFFE000000000000);
}

uint64_t WebCore::toJS(WebCore *this, uint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::ArrayBuffer *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::JSDOMGlobalObject *v15;
  int v16;
  uint64_t (*v17)();
  uint64_t v18;
  JSC::ArrayBuffer *v19;
  BOOL v20;
  WTF *v21;
  void *v22;
  void (*v23)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v24;
  JSC::ArrayBuffer *v25[3];

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::JSDOMGlobalObject **)(v9 + 16 * v14);
      if (v15 == a3)
      {
LABEL_11:
        v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
        if (v6)
          goto LABEL_3;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::JSDOMGlobalObject **)(v9 + 16 * v14);
          ++v16;
          if (v15 == a3)
            goto LABEL_11;
        }
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)a3 + 10);
    if (v6)
    {
LABEL_3:
      if ((*(_BYTE *)(v6 + 8) & 3) == 0)
      {
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          return v7;
      }
    }
  }
  if (*((_QWORD *)a3 + 4))
    v17 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v17 = 0;
  if (v17)
  {
    JSC::LazyClassStructure::get((uint64_t *)(a2 + 1144), a2);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 1600);
    if ((v18 & 1) != 0)
    {
      v23 = *(void (**)(JSC::ArrayBuffer **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::ArrayBuffer **)(a2 - 16);
      if ((a2 & 8) == 0)
        v24 = (JSC::ArrayBuffer **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v25[0] = *v24;
      v25[1] = (JSC::ArrayBuffer *)a2;
      v25[2] = (JSC::ArrayBuffer *)(a2 + 1600);
      v23(v25);
    }
  }
  *(_DWORD *)a3 += 2;
  v25[0] = a3;
  v7 = JSC::JSArrayBuffer::create();
  v19 = v25[0];
  v25[0] = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 == 2;
    *(_DWORD *)v19 -= 2;
    if (v20)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v19);
      WTF::fastFree(v21, v22);
    }
  }
  return v7;
}

uint64_t JSC::LazyClassStructure::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[3];

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (a2)
    {
      v5 = (uint64_t *)(a2 - 16);
      if ((a2 & 8) == 0)
        v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v6 = *v5;
    }
    else
    {
      v6 = -192;
    }
    v7[0] = v6;
    v7[1] = a2;
    v7[2] = a1;
    return v4(v7);
  }
  return v2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24BackgroundFetchEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v2 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 1)
    {
      v3 = *(WTF::StringImpl **)(v2 + 64);
      *(_QWORD *)(v2 + 64) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 + 32), a2);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v2, v4);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v2 + 24);
    }
  }
}

uint64_t JSC::LazyClassStructure::constructor(_QWORD *a1, uint64_t a2)
{
  void (*v4)(_QWORD *);
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[3];

  if ((*a1 & 1) != 0)
  {
    v4 = *(void (**)(_QWORD *))(*a1 & 0xFFFFFFFFFFFFFFFCLL);
    if (a2)
    {
      v5 = (uint64_t *)(a2 - 16);
      if ((a2 & 8) == 0)
        v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v6 = *v5;
    }
    else
    {
      v6 = -192;
    }
    v7[0] = v6;
    v7[1] = a2;
    v7[2] = a1;
    v4(v7);
  }
  return a1[1];
}

uint64_t WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 8 * v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DeleteCallbackDataTask::DeleteCallbackDataTask<WebCore::JSCallbackData>(WebCore::JSCallbackData *)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  WTF *v2;
  uint64_t v3;
  void *v4;

  v2 = (WTF *)a1[1];
  *a1 = &off_1E3226900;
  a1[1] = 0;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 2);
    if (v3)
    {
      *(_QWORD *)(v3 + 8) = 3;
      *((_QWORD *)v2 + 2) = 0;
    }
    JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v2 + 8));
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
      *(_QWORD *)v2 = 0;
    }
    WTF::fastFree(v2, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeleteCallbackDataTask::DeleteCallbackDataTask<WebCore::JSCallbackData>(WebCore::JSCallbackData *)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3226900;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 2);
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = 3;
      *((_QWORD *)v3 + 2) = 0;
    }
    JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v3 + 8));
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, v5);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::JSAbortController::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAbortSignal::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSAbstractRange>(WebCore::JSAbstractRange *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSAbstractRange::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSAbstractRange::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSAbstractRange::s_info);
  }
  return result;
}

uint64_t JSC::JSCell::toBoolean(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int *v4;
  int v5;
  BOOL v6;

  v2 = *(unsigned __int8 *)(a1 + 5);
  if (v2 == 3)
  {
    v5 = *(_DWORD *)(a1 + 8);
LABEL_8:
    v6 = v5 == 0;
    return !v6;
  }
  if (v2 == 2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if ((v3 & 1) != 0)
      v4 = (int *)(a1 + 16);
    else
      v4 = (int *)(v3 + 4);
    v5 = *v4;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xA) & 1) == 0)
    return 1;
  v6 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) == a2;
  return !v6;
}

uint64_t JSC::JSArrayBuffer::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)();

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(a2 + 5) != 38)
    return 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  result = 0;
  if (*(_QWORD *)(v2 + 32))
    v4 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v4 = 0;
  if (!v4)
  {
    if (*(_BYTE *)(v2 + 64))
      return 0;
    else
      return *(_QWORD *)(a2 + 16);
  }
  return result;
}

void JSC::JSArrayBufferView::toWrapped(JSC::JSArrayBufferView *a1@<X1>, JSC::ArrayBufferView **a2@<X8>)
{
  if (((unint64_t)a1 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)a1 + 5) - 39 > 0xB
    || JSC::JSArrayBufferView::isShared(a1)
    || (*((_BYTE *)a1 + 40) & 6) != 0)
  {
    *a2 = 0;
  }
  else
  {
    JSC::JSArrayBufferView::unsharedImpl(a1, a2);
  }
}

BOOL JSC::JSArrayBufferView::isShared(JSC::JSArrayBufferView *this)
{
  _BOOL8 result;
  unsigned int v3;
  uint64_t v4;
  uint64_t (*v5)();

  result = 0;
  v3 = *((unsigned __int8 *)this + 40) - 88;
  if (v3 <= 0x35)
  {
    if (((1 << v3) & 0x3D) != 0)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
    }
    else
    {
      if (((1 << v3) & 0x3D000000000000) == 0)
        return result;
      v4 = *((_QWORD *)this + 6);
    }
    if (*(_QWORD *)(v4 + 32))
      v5 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    return v5 != 0;
  }
  return result;
}

uint64_t JSC::JSArrayBufferView::unsharedImpl@<X0>(JSC::JSArrayBufferView *this@<X0>, JSC::ArrayBufferView **a2@<X8>)
{
  uint64_t result;
  JSC::ArrayBufferView *v4;
  uint64_t (*v5)();

  result = JSC::JSArrayBufferView::possiblySharedImpl(this);
  v4 = *a2;
  if (v4)
  {
    result = JSC::ArrayBufferView::isDetached(v4);
    if ((result & 1) == 0)
    {
      if (*(_QWORD *)(*((_QWORD *)v4 + 4) + 32))
        v5 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
      else
        v5 = 0;
      if (v5)
      {
        result = 90;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSAnalyserNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_DWORD *WebCore::Converter<WebCore::IDLDouble>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  double v6;
  double v7;
  _DWORD *v8;
  unint64_t v9;

  result = (_DWORD *)*((_QWORD *)a1 + 7);
  v9 = a2;
  if (a2 >= 0xFFFE000000000000)
  {
    v6 = (double)(int)a2;
  }
  else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v8 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v9, a1);
    result = v8;
    v6 = v7;
  }
  else
  {
    *(_QWORD *)&v6 = a2 - 0x2000000000000;
  }
  if (!result[20] || (result = (_DWORD *)JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), !(_DWORD)result))
  {
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      *(double *)a3 = v6;
      *(_DWORD *)(a3 + 8) = 0;
      return result;
    }
    result = (_DWORD *)JSC::throwTypeError();
  }
  *(_DWORD *)(a3 + 8) = 1;
  return result;
}

uint64_t WebCore::JSAnalyserNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAnalyserNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAnalyserNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAnalyserNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner = (uint64_t)&off_1E3276300;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSAnimationEffect::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAnimationTimeline::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *WebCore::Attr::name@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = *((_QWORD *)this + 11);
  v3 = *(WTF::StringImpl **)(v2 + 16);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v9 = v3;
    v5 = *(WTF::StringImpl **)(v2 + 24);
    if (v5)
      *(_DWORD *)v5 += 2;
    v8 = v5;
    WTF::makeString<WTF::String,char,WTF::String>((uint64_t)&v9, 58, (uint64_t *)&v8, a2);
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    this = v9;
    v9 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v4 = *(_DWORD **)(v2 + 24);
    if (v4)
      *v4 += 2;
    *a2 = v4;
  }
  return this;
}

uint64_t WTF::makeString<WTF::String,char,WTF::String>@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)result;
  v7 = *a3;
  if (*(_QWORD *)result)
  {
    v8 = *(_DWORD *)(v6 + 4);
    if (v7)
      goto LABEL_3;
LABEL_17:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = 0;
  if (!v7)
    goto LABEL_17;
LABEL_3:
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 < 0)
  {
LABEL_20:
    *a4 = 0;
    goto LABEL_21;
  }
LABEL_4:
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  v12 = v10;
  if (v8 < 0)
    goto LABEL_20;
  if ((v12 & 1) != 0)
    goto LABEL_20;
  result = (v8 + v11);
  if (__OFADD__(v8, v11))
    goto LABEL_20;
  if (v6)
  {
    v13 = *(_DWORD *)(v6 + 16);
    v14 = (v13 >> 2) & 1;
    if (v7 && (v13 & 4) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v7)
    {
LABEL_13:
      v14 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
      goto LABEL_14;
    }
    v14 = 1;
  }
LABEL_14:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v6, a2, v7, a4);
  if (!*a4)
LABEL_21:
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _WORD *v12;
  int8x16_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  _WORD *v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v40;
        if (v40)
        {
          *(_DWORD *)v40 = 2;
          *(_DWORD *)(v40 + 4) = v9;
          *(_QWORD *)(v40 + 8) = v40 + 20;
          *(_DWORD *)(v40 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v40 + 20), a3, a4, a5);
        }
        goto LABEL_34;
      }
LABEL_38:
      v11 = 0;
      goto LABEL_34;
    }
LABEL_37:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_34;
  }
  if (!(_DWORD)result)
    goto LABEL_37;
  if (result > 0x7FFFFFEF)
    goto LABEL_38;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v40;
  if (v40)
  {
    v12 = (_WORD *)(v40 + 20);
    *(_DWORD *)v40 = 2;
    *(_DWORD *)(v40 + 4) = v9;
    *(_QWORD *)(v40 + 8) = v40 + 20;
    *(_DWORD *)(v40 + 16) = 0;
    if (a3)
    {
      v13 = *(int8x16_t **)(a3 + 8);
      v14 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v15 = (char *)&v12[v14];
        if (v14 >= 0x40)
        {
          v16 = (char *)&v12[v14 & 0xFFFFFFC0];
          v18 = 0uLL;
          v19 = (char *)(v40 + 20);
          do
          {
            v41.val[0] = *v13;
            v20 = v13[1];
            v43.val[0] = v13[2];
            v21 = v13[3];
            v13 += 4;
            v22 = v21;
            v43.val[1] = 0uLL;
            v45.val[0] = v20;
            v41.val[1] = 0uLL;
            v23 = v19;
            vst2q_s8(v23, v41);
            v23 += 32;
            v45.val[1] = 0uLL;
            vst2q_s8(v23, v45);
            v24 = v19 + 64;
            vst2q_s8(v24, v43);
            v25 = v19 + 96;
            vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
            v19 += 128;
          }
          while (v19 != v16);
        }
        else
        {
          v16 = (char *)(v40 + 20);
        }
        while (v16 != v15)
        {
          v26 = v13->u8[0];
          v13 = (int8x16_t *)((char *)v13 + 1);
          *(_WORD *)v16 = v26;
          v16 += 2;
        }
      }
      else if ((_DWORD)v14 == 1)
      {
        *v12 = v13->i16[0];
      }
      else if ((_DWORD)v14)
      {
        memcpy((void *)(v40 + 20), v13, 2 * v14);
      }
      v17 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v17 = 0;
    }
    v27 = &v12[v17];
    *v27 = a4;
    result = (uint64_t)(v27 + 1);
    if (a5)
    {
      v28 = *(int8x16_t **)(a5 + 8);
      v29 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v30 = result + 2 * v29;
        if (v29 >= 0x40)
        {
          v31 = result + 2 * (v29 & 0xFFFFFFC0);
          v32 = 0uLL;
          do
          {
            v42.val[0] = *v28;
            v33 = v28[1];
            v44.val[0] = v28[2];
            v34 = v28[3];
            v28 += 4;
            v35 = v34;
            v44.val[1] = 0uLL;
            v46.val[0] = v33;
            v42.val[1] = 0uLL;
            v36 = (char *)result;
            vst2q_s8(v36, v42);
            v36 += 32;
            v46.val[1] = 0uLL;
            vst2q_s8(v36, v46);
            v37 = (char *)(result + 64);
            vst2q_s8(v37, v44);
            v38 = (char *)(result + 96);
            vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
            result += 128;
          }
          while (result != v31);
          result = v31;
        }
        while (result != v30)
        {
          v39 = v28->u8[0];
          v28 = (int8x16_t *)((char *)v28 + 1);
          *(_WORD *)result = v39;
          result += 2;
        }
      }
      else if ((_DWORD)v29 == 1)
      {
        *(_WORD *)result = v28->i16[0];
      }
      else if ((_DWORD)v29)
      {
        result = (uint64_t)memcpy((void *)result, v28, 2 * v29);
      }
    }
  }
LABEL_34:
  *a6 = v11;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v9, __dst);
  v7 = v9;
  if (v9)
    v7 = *(unsigned int *)(v9 + 4);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&__dst[v7], a3, a4);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *a1, char a2, uint64_t a3)
{
  _BYTE *result;
  _BYTE *v5;
  size_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned __int128 v9;
  char v10;

  *a1 = a2;
  result = a1 + 1;
  if (a3)
  {
    v5 = *(_BYTE **)(a3 + 8);
    v6 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v6)
      {
        if ((_DWORD)v6 == 1)
          *result = *v5;
        else
          return memcpy(result, v5, v6);
      }
    }
    else
    {
      v7 = &result[v6];
      if (v6 >= 0x10)
      {
        v8 = &result[v6 & 0xFFFFFFF0];
        do
        {
          v9 = (unsigned __int128)vld2q_s8(v5);
          v5 += 32;
          *(_OWORD *)result = v9;
          result += 16;
        }
        while (result != v8);
        result = v8;
      }
      while (result != v7)
      {
        v10 = *v5;
        v5 += 2;
        *result++ = v10;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSAttr::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAttr *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAttr *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAttr::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioBuffer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::AudioParam::~AudioParam(WebCore::AudioParam *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  char *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  unsigned int *v16;

  v3 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v16 = v7;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v10 = *((_DWORD *)this + 31);
  v11 = (WTF *)*((_QWORD *)this + 14);
  if (v10)
  {
    v12 = 88 * v10;
    v13 = (char *)v11 + 32;
    do
    {
      v14 = *(WTF **)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *((_DWORD *)v13 + 2) = 0;
        WTF::fastFree(v14, a2);
      }
      v13 += 88;
      v12 -= 88;
    }
    while (v12);
    v11 = (WTF *)*((_QWORD *)this + 14);
  }
  if (v11)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v11, a2);
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::AudioSummingJunction::~AudioSummingJunction(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioParam::~AudioParam(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t *result, void *a2)
{
  uint64_t v2;
  WTF **v3;
  void *v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  WTF *v8;
  WTF **v9;
  void *v10;
  WTF *v11;

  v2 = *result;
  if (*result)
  {
    v3 = *(WTF ***)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v3)
    {
      WTF::fastAlignedFree(*v3, a2);
      WTF::fastFree((WTF *)v3, v4);
    }
    v5 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v5)
    {
      v6 = *(WTF ***)(v2 + 16);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          v9 = (WTF **)*((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          if (v9)
          {
            WTF::fastAlignedFree(*v9, a2);
            WTF::fastFree((WTF *)v9, v10);
          }
          WTF::fastFree(v8, a2);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v11 = *(WTF **)(v2 + 16);
    if (v11)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v11, a2);
    }
    return (uint64_t *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WebCore::JSAudioBufferSourceNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioBufferSourceNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAudioBufferSourceNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAudioBufferSourceNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAudioBufferSourceNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::AudioBufferSourceNode,WebCore::JSAudioBufferSourceNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioBufferSourceNode *)::owner = (uint64_t)&off_1E3225750;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioBufferSourceNode *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioBufferSourceNode *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSAudioContext::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioContext::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAudioContext *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;

  v5 = (WebCore::JSAudioContext *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAudioContext::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v11 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v11);
    v6[5] = SlowCase + (int)v11;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = v8 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v9;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::AudioContext,WebCore::JSAudioContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioContext *)::owner = (uint64_t)&off_1E3225DE0;
  }
  v3 = (_QWORD *)(a2 + 40);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioContext *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioContext *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSAudioDestinationNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioDestinationNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAudioDestinationNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAudioDestinationNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAudioDestinationNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioListener::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioParam::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioParamMap::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioScheduledSourceNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioTrack::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioTrackConfiguration::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioTrackList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioWorklet::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WTF::Ref<WebCore::AudioWorkletProcessor,WTF::RawPtrTraits<WebCore::AudioWorkletProcessor>,WTF::DefaultRefDerefTraits<WebCore::AudioWorkletProcessor>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  bmalloc::api *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v17;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v17 = *(_QWORD *)(v4 + 16);
    v8 = *(bmalloc::api **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v17 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
  {
    v11 = *((_QWORD *)v8 + 10);
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 3;
      *((_QWORD *)v8 + 10) = 0;
    }
    v12 = *((_QWORD *)v8 + 8);
    if (v12)
    {
      *(_QWORD *)(v12 + 8) = 3;
      *((_QWORD *)v8 + 8) = 0;
    }
    v13 = *((_QWORD *)v8 + 6);
    if (v13)
    {
      *(_QWORD *)(v13 + 8) = 3;
      *((_QWORD *)v8 + 6) = 0;
    }
    WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)v8 + 4, a2);
    v15 = (WTF::StringImpl *)*((_QWORD *)v8 + 3);
    *((_QWORD *)v8 + 3) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
      *(_QWORD *)v8 = 0;
    }
    bmalloc::api::isoDeallocate(v8, v14);
  }
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WebCore::JSAudioWorkletNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAudioWorkletNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSAudioWorkletNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSAudioWorkletNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSAudioWorkletNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::AudioWorkletNode,WebCore::JSAudioWorkletNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioWorkletNode *)::owner = (uint64_t)&off_1E3225980;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioWorkletNode *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AudioWorkletNode *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, IndexQuickly, &v21);
      if (!v22)
      {
        v20 = v21;
        v13 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v20);
          *(_DWORD *)(*(_QWORD *)v12 + 4 * *(unsigned int *)(v12 + 12)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v12 + 4 * v13) = v21;
        }
        ++*(_DWORD *)(v12 + 12);
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v18 = JSC::JSArrayIterator::create();
        v19 = i | 0xFFFE000000000000;
        if (i < 0)
          v19 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v18 + 16) = v19;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v15 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = *a3;
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v15, &v21);
        if (!v22)
        {
          v20 = v21;
          v17 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v17 == *(_DWORD *)(v16 + 8))
            *(_DWORD *)(*(_QWORD *)v16 + 4 * *(unsigned int *)(v16 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v17 + 1, (unint64_t)&v20);
          else
            *(_DWORD *)(*(_QWORD *)v16 + 4 * v17) = v21;
          ++*(_DWORD *)(v16 + 12);
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 4 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 30))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 4 * v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (_QWORD *)v9;
      v12 = (WTF::StringImpl **)((char *)v7 + 16 * v8);
      v13 = (WTF::StringImpl **)v7;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *v11 = v14;
        v11[1] = v13[1];
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v10);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 += 2;
        v11 += 2;
      }
      while (v13 != v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  JSC::HandleSet *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  JSC::HandleSet *v23;

  v4 = *(_QWORD *)(result + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(a3 + 8) = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 712);
    if (!v5)
    {
      v20 = *(_QWORD *)(result + 56);
      v22 = a2;
      result = JSC::HandleSet::grow((JSC::HandleSet *)(v4 + 672));
      v4 = v20;
      a2 = v22;
      v5 = *(_QWORD *)(v20 + 712);
    }
    *(_QWORD *)(v4 + 712) = *(_QWORD *)v5;
    *(_QWORD *)(v5 + 16) = 0;
    v6 = (uint64_t *)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v7 = v5 & 0xFFFFFFFFFFFFF000;
    if (a2)
    {
      v8 = *(unint64_t **)((v5 & 0xFFFFFFFFFFFFF000) + 0x10);
      v9 = v8[3];
      v8 += 3;
      *(_QWORD *)v5 = v9;
      *(_QWORD *)(v5 + 8) = v8;
      *v8 = v5;
      *(_QWORD *)(v9 + 8) = v5;
    }
    *v6 = a2;
    v10 = *(JSC::HandleSet **)((v5 & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = *((_QWORD *)v10 + 5);
    if (!v11)
    {
      v21 = (uint64_t *)(v5 + 16);
      v23 = *(JSC::HandleSet **)((v5 & 0xFFFFFFFFFFFFF000) + 0x10);
      v18 = v5 & 0xFFFFFFFFFFFFF000;
      v19 = (_QWORD *)v5;
      result = JSC::HandleSet::grow(v10);
      v5 = (unint64_t)v19;
      v6 = v21;
      v7 = v18;
      v10 = v23;
      v11 = *((_QWORD *)v23 + 5);
    }
    *((_QWORD *)v10 + 5) = *(_QWORD *)v11;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)a3 = v11 + 16;
    v12 = *v6;
    if (v12)
    {
      v13 = *(unint64_t **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
      v14 = v13[3];
      v13 += 3;
      *(_QWORD *)v11 = v14;
      *(_QWORD *)(v11 + 8) = v13;
      *v13 = v11;
      *(_QWORD *)(v14 + 8) = v11;
    }
    *(_QWORD *)(v11 + 16) = v12;
    *(_DWORD *)(a3 + 8) = 0;
    v15 = *(_QWORD *)(v7 + 16);
    v16 = *(_QWORD **)(v5 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)v5;
      *v16 = *(_QWORD *)v5;
      *(_QWORD *)(v17 + 8) = v16;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    *(_QWORD *)v5 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v5;
  }
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert<unsigned int,0ul>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  JSC::VM *v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  JSC::VM *v27;

  v5 = *(JSC::VM **)(a1 + 56);
  v27 = v5;
  v22 = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v6 = *((_DWORD *)a3 + 3);
  if (v6 >= 9)
  {
    v22 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v23) == 1;
    v6 = *((_DWORD *)a3 + 3);
    if (v6)
    {
LABEL_3:
      v7 = *a3;
      v8 = 4 * v6;
      do
      {
        v9 = *v7;
        v10 = (objc_class *)((v9 & 0x80000000) != 0
                           ? COERCE__INT64((double)v9) + 0x2000000000000
                           : v9 | 0xFFFE000000000000);
        if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
          goto LABEL_33;
        v11 = v23;
        if ((_DWORD)v23 != HIDWORD(v23) && (v24 != (WTF *)((char *)v25 + 8) ? (v12 = v24 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v24 + v23) = v10;
          LODWORD(v23) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v13) == 1)
            v22 = 1;
        }
        ++v7;
        v8 -= 4;
      }
      while (v8);
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  if (v22)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v20 = v24;
    v21 = v23;
    v15 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v16 = JSC::constructArray();
      goto LABEL_25;
    }
  }
LABEL_33:
  v16 = 0;
LABEL_25:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = (WTF *)&v23;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v14);
  return v16;
}

unint64_t WebCore::JSConverter<WebCore::IDLRecord<WebCore::IDLDOMString,WebCore::IDLDouble>>::convert<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  _QWORD v19[2];
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(JSC::VM **)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*((_BYTE *)v4 + 755))
    __dmb(0xAu);
  v10 = a3[3];
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = (double *)(*(_QWORD *)a3 + 8);
    do
    {
      v13 = *v12;
      if ((*(_QWORD *)v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v14 = (int)v13, v13 == (double)(int)v14)
        && ((_DWORD)v14 || (*(_QWORD *)&v13 & 0x8000000000000000) == 0))
      {
        v15 = v14 | 0xFFFE000000000000;
      }
      else
      {
        v15 = *(_QWORD *)&v13 + 0x2000000000000;
      }
      v16 = (WTF::StringImpl *)*((_QWORD *)v12 - 1);
      if (v16)
      {
        if ((*((_BYTE *)v16 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v16 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase();
          v16 = (WTF::StringImpl *)v19[0];
        }
      }
      v17 = *(_DWORD *)v16;
      *(_DWORD *)v16 += 2;
      if (v17)
        *(_DWORD *)v16 = v17;
      else
        WTF::StringImpl::destroy(v16, v9);
      v19[0] = 0;
      v19[1] = v7;
      v20 = -1;
      v21 = 0x1000000;
      v22 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, v4, (unint64_t)v16, v15, 0, (uint64_t)v19);
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v9);
      else
        *(_DWORD *)v16 -= 2;
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return v7;
}

uint64_t WebCore::JSAudioWorkletProcessor::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  int i;
  unsigned int v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF *)(v8 + 16 * (v11 & v9));
    result = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (WTF *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!result)
  {
    if (v12)
    {
      result = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 1) = *(_QWORD *)a3;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_29;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_34:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26, (WTF::StringImpl **)v15);
        v15 = result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_38;
      }
LABEL_29:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_34;
    }
LABEL_38:
    v28 = v22 + 16 * v25;
    v27 = 1;
    goto LABEL_39;
  }
  result = (WTF *)WTF::equal(result, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v27 = 0;
  v28 = v20 + 16 * v21;
LABEL_39:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v14);
          else
            v18 = v17 >> 8;
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = (WTF::StringImpl **)(v15 + 16 * v20);
          v22 = *(WTF::StringImpl **)(v6 + 16 * v11 + 8);
          *v21 = 0;
          v23 = *v13;
          *v13 = 0;
          *v21 = v23;
          v21[1] = v22;
          v24 = *v13;
          *v13 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v10);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

char *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *(WTF::StringImpl **)a1;
        return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (v9 < 0x5555556)
      {
        v10 = 48 * v9;
        v11 = WTF::fastMalloc((WTF *)(48 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(v5, v6, v11);
        v13 = *(WTF::StringImpl **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v13 = *(WTF::StringImpl **)a1;
        }
        return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19487AD5CLL);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0x5555556)
      goto LABEL_28;
    v17 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
    v18 = 48 * v16;
    v19 = WTF::fastMalloc((WTF *)(48 * v16));
    *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(v5, v17, v19);
    if (v5)
    {
      if (*(WTF::StringImpl **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  char v18;
  char v19;

  if (result != a2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      v6 = a3 + v5;
      v7 = (char *)v4 + v5;
      v8 = *(_QWORD *)((char *)v4 + v5);
      *(_QWORD *)((char *)v4 + v5) = 0;
      *(_QWORD *)v6 = v8;
      *(_BYTE *)(a3 + v5 + 8) = 0;
      *(_DWORD *)(v6 + 16) = -1;
      v9 = *(unsigned int *)((char *)v4 + v5 + 16);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char *, uint64_t, char *))off_1E32233A0[v9])(&v16, a3 + v5 + 8, v7 + 8);
        *(_DWORD *)(v6 + 16) = v9;
      }
      *(_BYTE *)(v6 + 24) = 0;
      v10 = (WTF::StringImpl *)(v6 + 24);
      *(_BYTE *)(v6 + 40) = 0;
      if (v7[40])
      {
        *(_DWORD *)(a3 + v5 + 32) = -1;
        v11 = (char *)v4 + v5;
        v12 = *(unsigned int *)((char *)v4 + v5 + 32);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, WTF::StringImpl *, char *))off_1E32233A0[v12])(&v17, v10, v7 + 24);
          *(_DWORD *)(a3 + v5 + 32) = v12;
        }
        *(_BYTE *)(v6 + 40) = 1;
        if (v7[40])
        {
          v13 = *((unsigned int *)v11 + 8);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, char *))off_1E3223390[v13])(&v18, v7 + 24);
          *((_DWORD *)v11 + 8) = -1;
        }
      }
      v14 = *((unsigned int *)v7 + 4);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, char *))off_1E3223390[v14])(&v19, (char *)v4 + v5 + 8);
      *((_DWORD *)v7 + 4) = -1;
      result = *(WTF::StringImpl **)((char *)v4 + v5);
      *(_QWORD *)((char *)v4 + v5) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 48;
    }
    while ((WTF::StringImpl *)((char *)v4 + v5) != a2);
  }
  return result;
}

uint64_t WebCore::JSAuthenticatorAssertionResponse::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAuthenticatorAttestationResponse::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSAuthenticatorResponse::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::NotificationData::fromDictionary@<X0>(WebCore::NotificationData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unint64_t result;
  unint64_t v19;
  _BYTE *v20;
  char v21;
  void *v22;
  WTF::StringImpl *v23;
  __int16 v24;
  __int16 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  WTF::StringImpl *v37;
  char v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE *v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationDefaultActionURLKey"));
  v6 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationTitleKey"));
  v7 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationBodyKey"));
  v8 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationIconURLKey"));
  v9 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationTagKey"));
  v10 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationLanguageKey"));
  v44 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationOriginKey"));
  v43 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationServiceWorkerRegistrationURLKey"));
  v42 = (void *)-[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationSessionIDKey"));
  v11 = -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationDataKey"));
  MEMORY[0x19AEA5508](&v47, -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationUUIDStringKey")));
  WTF::UUID::parseVersion4();
  if (v70)
  {
    MEMORY[0x19AEA5508](&v46, -[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationContextUUIDStringKey")));
    WTF::UUID::parseVersion4();
    if (v68)
    {
      v13 = v67;
      v41 = v66;
      v14 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v14 != -1)
      {
        v49 = &v45;
        v48 = (WTF::StringImpl *)&v49;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      if ((WebCore::Process::globalIdentifier & 1) == 0)
        goto LABEL_38;
      v40 = (void *)v11;
      v15 = v10;
      v39 = WebCore::Process::globalIdentifier;
      v16 = (void *)-[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationDirectionKey"));
      if (objc_msgSend(v16, "unsignedLongValue") < 3u)
      {
        v38 = objc_msgSend(v16, "unsignedLongValue");
        MEMORY[0x19AEA5508](&v48, v5);
        MEMORY[0x19AEA52D4](&v49, &v48, 0);
        MEMORY[0x19AEA5508](&v52, v6);
        MEMORY[0x19AEA5508]((char *)&v52 + 8, v7);
        MEMORY[0x19AEA5508](&v53, v8);
        MEMORY[0x19AEA5508]((char *)&v53 + 8, v9);
        MEMORY[0x19AEA5508](&v54, v15);
        v55 = v38;
        MEMORY[0x19AEA5508](&v56, v44);
        MEMORY[0x19AEA5508](&v45, v43);
        MEMORY[0x19AEA52D4]((char *)&v56 + 8, &v45, 0);
        if (v70)
        {
          v59 = v69;
          *(_QWORD *)&v60 = v41;
          *((_QWORD *)&v60 + 1) = v13;
          *(_QWORD *)&v61 = v39;
          v62 = (unint64_t)objc_msgSend(v42, "unsignedLongLongValue");
          if (v40)
          {
            v17 = (char *)objc_msgSend(v40, "bytes");
            result = objc_msgSend(v40, "length");
            v19 = result;
            v63 = 0;
            LODWORD(v64) = 0;
            HIDWORD(v64) = result;
            if (result)
            {
              if (HIDWORD(result))
              {
                __break(0xC471u);
                return result;
              }
              v20 = (_BYTE *)WTF::fastMalloc((WTF *)result);
              LODWORD(v64) = v19;
              v63 = v20;
              do
              {
                v21 = *v17++;
                *v20++ = v21;
                --v19;
              }
              while (v19);
            }
          }
          else
          {
            v63 = 0;
            v64 = 0;
          }
          v22 = (void *)-[WebCore::NotificationData objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebNotificationSilentKey"));
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v24 = objc_msgSend(v22, "BOOLValue");
            v25 = 1;
          }
          else
          {
            v24 = 0;
            v25 = 0;
          }
          v65 = v24 | (v25 << 8);
          v26 = v45;
          v45 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v23);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v48;
          v48 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v23);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v49;
          v49 = 0;
          *(_QWORD *)a2 = v28;
          v29 = v50;
          *(_OWORD *)(a2 + 8) = v50;
          *(_OWORD *)(a2 + 24) = v51;
          LODWORD(v50) = v29 & 0xFFFFFFFE;
          v30 = v52;
          v52 = 0u;
          *(_OWORD *)(a2 + 40) = v30;
          v31 = v53;
          v53 = 0u;
          *(_OWORD *)(a2 + 56) = v31;
          v32 = v54;
          v54 = 0;
          *(_QWORD *)(a2 + 72) = v32;
          *(_BYTE *)(a2 + 80) = v55;
          v33 = v56;
          v56 = 0u;
          *(_OWORD *)(a2 + 88) = v33;
          LODWORD(v33) = v57;
          *(_OWORD *)(a2 + 104) = v57;
          *(_OWORD *)(a2 + 120) = v58;
          LODWORD(v57) = v33 & 0xFFFFFFFE;
          v34 = v59;
          v35 = v60;
          v36 = v62;
          *(_OWORD *)(a2 + 176) = v61;
          *(_OWORD *)(a2 + 192) = v36;
          *(_OWORD *)(a2 + 144) = v34;
          *(_OWORD *)(a2 + 160) = v35;
          *(_QWORD *)(a2 + 208) = v63;
          *(_QWORD *)&v34 = v64;
          v63 = 0;
          v64 = 0;
          *(_QWORD *)(a2 + 216) = v34;
          *(_WORD *)(a2 + 224) = v65;
          *(_BYTE *)(a2 + 240) = 1;
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v49, v23);
          goto LABEL_27;
        }
LABEL_38:
        __break(1u);
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 240) = 0;
LABEL_27:
    v37 = v46;
    v46 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v12);
      else
        *(_DWORD *)v37 -= 2;
    }
    goto LABEL_30;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 240) = 0;
LABEL_30:
  result = (unint64_t)v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19487B794(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32,WTF::StringImpl *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,WTF *a47,int a48)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a29)
  {
    if (*(_DWORD *)a29 == 2)
      WTF::StringImpl::destroy(a29, a2);
    else
      *(_DWORD *)a29 -= 2;
  }
  if (a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::NotificationData::dictionaryRepresentation(WebCore::NotificationData *this)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD v17[13];
  _QWORD v18[14];

  v18[13] = *MEMORY[0x1E0C80C00];
  v17[0] = CFSTR("WebNotificationDefaultActionURLKey");
  if (*(_QWORD *)this)
    v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E3487BC0;
  v18[0] = v2;
  v17[1] = CFSTR("WebNotificationTitleKey");
  if (*((_QWORD *)this + 5))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v18[1] = v3;
  v17[2] = CFSTR("WebNotificationBodyKey");
  if (*((_QWORD *)this + 6))
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E3487BC0;
  v18[2] = v4;
  v17[3] = CFSTR("WebNotificationIconURLKey");
  if (*((_QWORD *)this + 7))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  v18[3] = v5;
  v17[4] = CFSTR("WebNotificationTagKey");
  if (*((_QWORD *)this + 8))
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E3487BC0;
  v18[4] = v6;
  v17[5] = CFSTR("WebNotificationLanguageKey");
  if (*((_QWORD *)this + 9))
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  v18[5] = v7;
  v17[6] = CFSTR("WebNotificationOriginKey");
  if (*((_QWORD *)this + 11))
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E3487BC0;
  v18[6] = v8;
  v17[7] = CFSTR("WebNotificationDirectionKey");
  v18[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((unsigned __int8 *)this + 80));
  v17[8] = CFSTR("WebNotificationServiceWorkerRegistrationURLKey");
  if (*((_QWORD *)this + 12))
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E3487BC0;
  v18[8] = v9;
  v17[9] = CFSTR("WebNotificationUUIDStringKey");
  WTF::UUID::toString((WebCore::NotificationData *)((char *)this + 144));
  if (v16)
    v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E3487BC0;
  v18[9] = v10;
  v17[10] = CFSTR("WebNotificationContextUUIDStringKey");
  WTF::UUID::toString((WebCore::NotificationData *)((char *)this + 160));
  if (v15)
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E3487BC0;
  v18[10] = v11;
  v17[11] = CFSTR("WebNotificationSessionIDKey");
  v18[11] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)this + 24));
  v17[12] = CFSTR("WebNotificationDataKey");
  v18[12] = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *((_QWORD *)this + 26), *((unsigned int *)this + 55)));
  v13 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 13), "mutableCopy");
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_BYTE *)this + 225))
    objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)this + 224)), CFSTR("WebNotificationSilentKey"));
  return v13;
}

void sub_19487BCE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NotificationOptionsPayload::fromDictionary@<X0>(WebCore::NotificationOptionsPayload *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int16 v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v6 = (void *)-[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebDirKey"));
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) != 0)
    {
      result = objc_msgSend(v6, "unsignedCharValue");
      if (result < 3)
      {
        v7 = result;
        v8 = -[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebLangKey"));
        v9 = -[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebBodyKey"));
        v10 = -[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebTagKey"));
        v11 = -[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebIconKey"));
        v12 = -[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebDataJSONKey"));
        result = -[WebCore::NotificationOptionsPayload objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("WebSilentKey"));
        if (result)
        {
          v13 = (void *)result;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v14 = 0;
            v15 = 0;
LABEL_9:
            MEMORY[0x19AEA5508](&v16, v8);
            MEMORY[0x19AEA5508]((char *)&v16 + 8, v9);
            MEMORY[0x19AEA5508](&v17, v10);
            MEMORY[0x19AEA5508]((char *)&v17 + 8, v11);
            result = MEMORY[0x19AEA5508](&v18, v12);
            *(_BYTE *)a2 = v7;
            *(_OWORD *)(a2 + 8) = v16;
            *(_OWORD *)(a2 + 24) = v17;
            *(_QWORD *)(a2 + 40) = v18;
            *(_WORD *)(a2 + 48) = v14 | (v15 << 8);
            *(_BYTE *)(a2 + 56) = 1;
            return result;
          }
          objc_opt_class();
          result = objc_opt_isKindOfClass();
          if ((result & 1) != 0)
          {
            v14 = objc_msgSend(v13, "BOOLValue");
            v15 = 1;
            goto LABEL_9;
          }
        }
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

void sub_19487BF50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NotificationOptionsPayload::dictionaryRepresentation(WebCore::NotificationOptionsPayload *this)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  _QWORD v9[7];
  _QWORD v10[8];

  v10[7] = *MEMORY[0x1E0C80C00];
  v9[0] = CFSTR("WebDirKey");
  v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", *(unsigned __int8 *)this);
  v9[1] = CFSTR("WebLangKey");
  if (*((_QWORD *)this + 1))
    v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E3487BC0;
  v10[1] = v2;
  v9[2] = CFSTR("WebBodyKey");
  if (*((_QWORD *)this + 2))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  v10[2] = v3;
  v9[3] = CFSTR("WebTagKey");
  if (*((_QWORD *)this + 3))
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E3487BC0;
  v10[3] = v4;
  v9[4] = CFSTR("WebIconKey");
  if (*((_QWORD *)this + 4))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  v10[4] = v5;
  v9[5] = CFSTR("WebDataJSONKey");
  if (*((_QWORD *)this + 5))
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E3487BC0;
  v10[5] = v6;
  v9[6] = CFSTR("WebSilentKey");
  if (*((_BYTE *)this + 49))
    v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)this + 48));
  else
    v7 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v10[6] = v7;
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 7);
}

void WebCore::NotificationData::~NotificationData(WebCore::NotificationData *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = (WTF *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t WebCore::convertEnumerationToJS<WebCore::BackgroundFetchFailureReason>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  v2 = (uint64_t *)(a1 + 41968);
  if ((_MergedGlobals_770[0] & 1) == 0)
  {
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 2;
    _MergedGlobals_10 += 2;
    dword_1ECE76CA0 += 2;
    dword_1ECE76CC0 += 2;
    qword_1EE334CF0 = (uint64_t)v11;
    unk_1EE334CF8 = &_MergedGlobals_10;
    qword_1EE334D00 = (uint64_t)&dword_1ECE76CA0;
    unk_1EE334D08 = &dword_1ECE76CC0;
    dword_1ECE76CE0 += 2;
    dword_1ECE76D00 += 2;
    qword_1EE334D10 = (uint64_t)&dword_1ECE76CE0;
    unk_1EE334D18 = &dword_1ECE76D00;
    _MergedGlobals_770[0] = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_770[8 * a2 + 128];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_5:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_8;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_5;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_8:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::BackgroundFetchFailureReason>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  char **v5;

  v1 = *a1;
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 4);
    if (v2)
    {
      v5 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::BackgroundFetchFailureReason> [5]>::tryGet<WTF::String>(v1);
      if (!v5)
      {
        v2 = 0;
        v3 = 0;
        return v2 | (v3 << 8);
      }
      v2 = *(unsigned __int8 *)v5;
    }
  }
  else
  {
    v2 = 0;
  }
  v3 = 1;
  return v2 | (v3 << 8);
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::BackgroundFetchFailureReason> [5]>::tryGet<WTF::String>(uint64_t a1)
{
  int v1;
  const char *v2;
  int v3;
  char **v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint16x8_t v10;
  uint16x8_t v11;
  BOOL v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint8x16_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v23;
  uint16x8_t v24;

  if (!a1)
  {
    v2 = 0;
    goto LABEL_24;
  }
  v1 = *(_DWORD *)(a1 + 16);
  v2 = *(const char **)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 4);
  if (v2 != "aborted" && v3 == 7)
  {
    if ((v1 & 4) != 0)
    {
      if (*v2 != 97 || *(_DWORD *)(v2 + 1) != 1953656674 || *(_DWORD *)(v2 + 3) != 1684370546)
        goto LABEL_24;
    }
    else
    {
      if (*(_WORD *)v2 != 97)
        goto LABEL_24;
      if (*(_QWORD *)(v2 + 2) != 0x740072006F0062 || *(_QWORD *)(v2 + 6) != 0x64006500740072)
        goto LABEL_24;
    }
LABEL_33:
    v6 = &WebCore::parseEnumerationFromString<WebCore::BackgroundFetchFailureReason>(WTF::String const&)::mappings;
    goto LABEL_76;
  }
  if (v2 == "aborted" && v3 == 7)
    goto LABEL_33;
  if (v2 == "bad-status" || v3 != 10)
  {
    if (v2 == "bad-status" && v3 == 10)
      goto LABEL_22;
    v12 = v3 == 23;
    v13 = v2 == "download-total-exceeded";
    if (v2 == "download-total-exceeded" || v3 != 23)
      goto LABEL_38;
    if ((v1 & 4) == 0)
    {
      if (*(_WORD *)v2 != 100)
        goto LABEL_24;
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968BCDB0);
      v19.i16[0] = vminvq_u16(v19);
      if (!v19.i32[0])
        goto LABEL_24;
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 14), (int16x8_t)xmmword_1968BCDC0);
      v20.i16[0] = vminvq_u16(v20);
      if (v20.i32[0])
      {
        v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 30), (int16x8_t)xmmword_1968BCDD0);
        v21.i16[0] = vminvq_u16(v21);
        if (v21.i32[0])
          goto LABEL_40;
      }
      v14 = 0;
      v15 = v2 == "fetch-error";
      goto LABEL_66;
    }
    if (*v2 == 100)
    {
      v18 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v2 + 7), (int8x16_t)xmmword_1968BCDA0), vceqq_s8(*(int8x16_t *)(v2 + 1), (int8x16_t)xmmword_1968BCD90));
      v18.i8[0] = vminvq_u8(v18);
      if (v18.i32[0])
        goto LABEL_40;
    }
LABEL_24:
    v7 = 0;
    v8 = v2 == "quota-exceeded";
    goto LABEL_25;
  }
  if ((v1 & 4) != 0)
  {
    if (*v2 == 98 && *(_QWORD *)(v2 + 1) == 0x75746174732D6461 && *(_QWORD *)(v2 + 2) == 0x7375746174732D64)
      goto LABEL_22;
    goto LABEL_24;
  }
  if (*(_WORD *)v2 != 98)
    goto LABEL_24;
  v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968BCD70);
  v10.i16[0] = vminvq_u16(v10);
  if (!v10.i32[0])
    goto LABEL_24;
  v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968BCD80);
  v11.i16[0] = vminvq_u16(v11);
  v12 = v11.i8[0];
  if (v11.i32[0])
  {
LABEL_22:
    v6 = &off_1E3226A38;
    goto LABEL_76;
  }
  v13 = v2 == "download-total-exceeded";
LABEL_38:
  if (v13 && v12)
  {
LABEL_40:
    v6 = &off_1E3226A50;
    goto LABEL_76;
  }
  v14 = v3 == 11;
  v15 = v2 == "fetch-error";
  if (v2 == "fetch-error" || v3 != 11)
  {
LABEL_66:
    if (v15 && v14)
      goto LABEL_68;
    v7 = v3 == 14;
    v8 = v2 == "quota-exceeded";
    if (v2 == "quota-exceeded" || v3 != 14)
    {
LABEL_25:
      if (v8 && v7)
      {
LABEL_26:
        v6 = &off_1E3226A80;
        goto LABEL_76;
      }
      goto LABEL_75;
    }
    if ((v1 & 4) != 0)
    {
      if (*v2 == 113 && *(_QWORD *)(v2 + 1) == 0x6378652D61746F75 && *(_QWORD *)(v2 + 6) == 0x6465646565637865)
        goto LABEL_26;
    }
    else if (*(_WORD *)v2 == 113)
    {
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968BCE00);
      v23.i16[0] = vminvq_u16(v23);
      if (v23.i32[0])
      {
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 12), (int16x8_t)xmmword_1968BCDD0);
        v24.i16[0] = vminvq_u16(v24);
        if (v24.i32[0])
          goto LABEL_26;
      }
    }
    goto LABEL_75;
  }
  if ((v1 & 4) != 0)
  {
    if (*v2 == 102 && *(_QWORD *)(v2 + 1) == 0x7272652D68637465)
    {
      if (*(_QWORD *)(v2 + 3) == 0x726F7272652D6863)
        v6 = &off_1E3226A68;
      else
        v6 = (char **)&unk_1E3226A98;
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (*(_WORD *)v2 == 102)
  {
    v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968BCDE0);
    v16.i16[0] = vminvq_u16(v16);
    if (v16.i32[0])
    {
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 6), (int16x8_t)xmmword_1968BCDF0);
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        goto LABEL_24;
LABEL_68:
      v6 = &off_1E3226A68;
      goto LABEL_76;
    }
  }
LABEL_75:
  v6 = (char **)&unk_1E3226A98;
LABEL_76:
  if (v6 == (char **)&unk_1E3226A98)
    return 0;
  else
    return v6 + 2;
}

uint64_t WebCore::parseEnumeration<WebCore::BackgroundFetchFailureReason>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char **v7;
  int v8;
  uint64_t v10;
  unint64_t v11;

  v3 = a1;
  v11 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v11, a1);
    v4 = v10;
    if (!v10)
      return 256;
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 256;
LABEL_11:
  v6 = *(_DWORD *)(v4 + 4);
  if (!v6)
  {
LABEL_14:
    v8 = 1;
    goto LABEL_15;
  }
  v7 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::BackgroundFetchFailureReason> [5]>::tryGet<WTF::String>(v4);
  if (v7)
  {
    v6 = *(unsigned __int8 *)v7;
    goto LABEL_14;
  }
  v6 = 0;
  v8 = 0;
LABEL_15:
  v5 = v6 | (v8 << 8);
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v5;
}

const char *WebCore::expectedEnumerationValues<WebCore::BackgroundFetchFailureReason>()
{
  return "\"\", \"aborted\", \"bad-status\", \"fetch-error\", \"quota-exceeded\", \"download-total-exceeded\"";
}

uint64_t WebCore::JSBackgroundFetchManager::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 3);
      if (v3)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSBackgroundFetchManager::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBackgroundFetchManagerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBackgroundFetchManagerPrototype::create(WebCore::JSBackgroundFetchManagerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSBackgroundFetchManager::s_info, &WebCore::JSBackgroundFetchManagerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchManager>,(WebCore::DOMConstructorID)911>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7288);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchManager>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSBackgroundFetchManager::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchManager::s_info
                                                                          + ~((_QWORD)&WebCore::JSBackgroundFetchManager::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSBackgroundFetchManager::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSBackgroundFetchManager::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSBackgroundFetchManagerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSBackgroundFetchManagerPrototype::create((WebCore::JSBackgroundFetchManagerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSBackgroundFetchManager::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSBackgroundFetchManager::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7288) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBackgroundFetchManagerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBackgroundFetchManagerPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchManager>,(WebCore::DOMConstructorID)911>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSBackgroundFetchManagerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSBackgroundFetchManagerOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 3);
    if (v24)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::BackgroundFetchRegistration,WTF::RawPtrTraits<WebCore::BackgroundFetchRegistration>,WTF::DefaultRefDerefTraits<WebCore::BackgroundFetchRegistration>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v24, a2);
    v25 = *((_QWORD *)v3 + 1);
    if (v25)
    {
      *(_QWORD *)(v25 + 8) = 0;
      v26 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::BackgroundFetchManager>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSBackgroundFetchManager::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchManager::s_info
                                                                          + ~((_QWORD)&WebCore::JSBackgroundFetchManager::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSBackgroundFetchManager::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSBackgroundFetchManager::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSBackgroundFetchManagerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSBackgroundFetchManagerPrototype::create((WebCore::JSBackgroundFetchManagerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSBackgroundFetchManager::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSBackgroundFetchManager::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 7368);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 7368))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 7368);
    *(_QWORD *)(v36 + 7368) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 7368);
  *(_QWORD *)(v32 + 7368) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE334C80 & 1) == 0)
  {
    qword_1EE334C78 = (uint64_t)&off_1E322DE70;
    byte_1EE334C80 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334C78;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSBackgroundFetchRecord::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t *v2;
  _DWORD *v3;
  void *v4;

  v2 = *(uint64_t **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)v2[2];
      v2[2] = 0;
      if (v3)
      {
        if (v3[6] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 16))(v3, a2);
        else
          --v3[6];
      }
      std::unique_ptr<WebCore::DOMPromiseProxy<WebCore::IDLInterface<WebCore::FetchResponse>>>::~unique_ptr[abi:sn180100](v2 + 1, a2);
      return WTF::fastFree((WTF *)v2, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSBackgroundFetchRecord::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBackgroundFetchRecordPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBackgroundFetchRecordPrototype::create(WebCore::JSBackgroundFetchRecordPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSBackgroundFetchRecord::s_info, &WebCore::JSBackgroundFetchRecordPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchRecord>,(WebCore::DOMConstructorID)912>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7296);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchRecord>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSBackgroundFetchRecord::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchRecord::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchRecord::s_info
                                                                         + ~((_QWORD)&WebCore::JSBackgroundFetchRecord::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSBackgroundFetchRecord::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSBackgroundFetchRecord::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSBackgroundFetchRecordPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSBackgroundFetchRecordPrototype::create((WebCore::JSBackgroundFetchRecordPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSBackgroundFetchRecord::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSBackgroundFetchRecord::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7296) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBackgroundFetchRecordConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBackgroundFetchRecordPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchRecord>,(WebCore::DOMConstructorID)912>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBackgroundFetchRecord_request(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_DWORD **)(v2 + 16);
  ++v4[6];
  v5 = WebCore::wrap<WebCore::FetchRequest>(a1, v3, v4);
  if (v4[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[6];
  return v5;
}

uint64_t WebCore::jsBackgroundFetchRecord_responseReady(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::DOMGuardedObject *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  unsigned __int8 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v40[8];
  WTF::StringImpl *v41;
  objc_class *v42;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &WebCore::JSBackgroundFetchRecord::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &WebCore::JSBackgroundFetchRecord::s_info && v5 != 0);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E32307D8;
      v11[1] = v9;
      v12 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v9 + 32);
        v14 = 8 * v12;
        while (1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)v13 + 32);
          if (v15)
          {
            if ((*(_BYTE *)(v15 + 8) & 3) == 0 && *(_QWORD *)v15 == v8)
              break;
          }
          v13 += 8;
          v14 -= 8;
          if (!v14)
            goto LABEL_18;
        }
        v28 = *(_QWORD *)(*(_QWORD *)v13 + 24);
        if (v28 && (v29 = *(_QWORD *)v28) != 0 && (*(_BYTE *)(v28 + 8) & 3) == 0)
        {
          if ((v29 & 0xFFFE000000000002) != 0)
          {
            v30 = 0;
          }
          else if (*(_BYTE *)(v29 + 5) == 68)
          {
            v30 = *(_QWORD *)v28;
          }
          else
          {
            v30 = 0;
          }
        }
        else
        {
          v30 = 10;
        }
        goto LABEL_61;
      }
LABEL_18:
      v16 = *(_DWORD *)(v8 + 1164);
      if (v16)
        v17 = (JSC::VM *)(16 * (v16 & 0xFFFFFFFE));
      else
        v17 = 0;
      v18 = JSC::JSPromise::create(*(JSC::JSPromise **)(v8 + 56), v17, v10);
      v19 = WTF::fastMalloc((WTF *)0x30);
      v20 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v19, v8, v18);
      *(_QWORD *)v20 = &off_1E3226868;
      *((_DWORD *)v20 + 10) = 1;
      *((_BYTE *)v20 + 44) = 0;
      v21 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v21 == *(_DWORD *)(v9 + 40))
      {
        v22 = v21 + (v21 >> 2);
        if (v22 >= 0x10)
          v23 = v22 + 1;
        else
          v23 = 16;
        if (v23 <= v21 + 1)
          v24 = v21 + 1;
        else
          v24 = v23;
        v25 = *(void **)(v9 + 32);
        if (v24 < 2)
        {
          v26 = (void *)(v9 + 48);
          *(_QWORD *)(v9 + 32) = v9 + 48;
          *(_DWORD *)(v9 + 40) = 1;
        }
        else
        {
          if (v24 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19487E724);
          }
          v26 = (void *)WTF::fastMalloc((WTF *)(8 * v24));
          *(_DWORD *)(v9 + 40) = v24;
          *(_QWORD *)(v9 + 32) = v26;
        }
        memcpy(v26, v25, 8 * v21);
        if ((void *)(v9 + 48) != v25 && v25)
        {
          if (*(void **)(v9 + 32) == v25)
          {
            *(_QWORD *)(v9 + 32) = 0;
            *(_DWORD *)(v9 + 40) = 0;
          }
          WTF::fastFree((WTF *)v25, v31);
        }
        v21 = *(unsigned int *)(v9 + 44);
        v27 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8 * v21);
      }
      else
      {
        v27 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8 * v21);
      }
      ++*(_DWORD *)(v19 + 16);
      *v27 = v19;
      *(_DWORD *)(v9 + 44) = v21 + 1;
      if (!*(_BYTE *)(v9 + 24))
        goto LABEL_51;
      v32 = *(_DWORD *)(v9 + 16);
      if (!v32)
      {
        (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v19);
        goto LABEL_51;
      }
      if (v32 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_76;
      }
      v33 = *(_BYTE *)v9;
      v34 = *(WTF::StringImpl **)(v9 + 8);
      if (v34)
        *(_DWORD *)v34 += 4;
      v41 = v34;
      v42 = 0;
      v40[0] = v33;
      WebCore::DeferredPromise::reject(v19, v40, 0, &v42);
      v36 = v41;
      v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v35);
          if (v34)
          {
LABEL_48:
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v35);
            else
              *(_DWORD *)v34 -= 2;
          }
LABEL_51:
          v37 = *(_QWORD *)(v19 + 24);
          if (!v37 || (v38 = *(_QWORD *)v37) == 0 || (*(_BYTE *)(v37 + 8) & 3) != 0)
          {
            v30 = 10;
            goto LABEL_59;
          }
          if ((v38 & 0xFFFE000000000002) == 0)
          {
            if (*(_BYTE *)(v38 + 5) == 68)
              v30 = *(_QWORD *)v37;
            else
              v30 = 0;
            goto LABEL_59;
          }
LABEL_76:
          v30 = 0;
LABEL_59:
          if (*(_DWORD *)(v19 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
          else
            --*(_DWORD *)(v19 + 16);
LABEL_61:
          (*(void (**)(_QWORD *))(*v11 + 8))(v11);
          return v30;
        }
        *(_DWORD *)v36 -= 2;
      }
      if (v34)
        goto LABEL_48;
      goto LABEL_51;
    }
  }
  return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSBackgroundFetchRecord::s_info, a3);
}

uint64_t WebCore::JSBackgroundFetchRecordOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSBackgroundFetchRecordOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;
  void *v25;

  v3 = *(uint64_t **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(uint64_t **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(uint64_t **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)v3[2];
    v3[2] = 0;
    if (v24)
    {
      if (v24[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
      else
        --v24[6];
    }
    std::unique_ptr<WebCore::DOMPromiseProxy<WebCore::IDLInterface<WebCore::FetchResponse>>>::~unique_ptr[abi:sn180100](v3 + 1, a2);
    WTF::fastFree((WTF *)v3, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::BackgroundFetchRecord>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSBackgroundFetchRecord::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchRecord::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchRecord::s_info
                                                                         + ~((_QWORD)&WebCore::JSBackgroundFetchRecord::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSBackgroundFetchRecord::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSBackgroundFetchRecord::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSBackgroundFetchRecordPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSBackgroundFetchRecordPrototype::create((WebCore::JSBackgroundFetchRecordPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSBackgroundFetchRecord::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSBackgroundFetchRecord::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 7376);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 7376))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 7376);
    *(_QWORD *)(v36 + 7376) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 7376);
  *(_QWORD *)(v32 + 7376) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE334C90 & 1) == 0)
  {
    qword_1EE334C88 = (uint64_t)&off_1E322DEA0;
    byte_1EE334C90 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE334C88;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSBackgroundFetchRegistration::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBackgroundFetchRegistrationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBackgroundFetchRegistrationPrototype::create(WebCore::JSBackgroundFetchRegistrationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSBackgroundFetchRegistration::s_info, (uint64_t)&WebCore::JSBackgroundFetchRegistrationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchRegistration>,(WebCore::DOMConstructorID)913>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7304);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchRegistration>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSBackgroundFetchRegistration::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchRegistration::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchRegistration::s_info
                                                                               + ~((_QWORD)&WebCore::JSBackgroundFetchRegistration::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSBackgroundFetchRegistration::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSBackgroundFetchRegistration::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSBackgroundFetchRegistrationPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSBackgroundFetchRegistrationPrototype::create((WebCore::JSBackgroundFetchRegistrationPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSBackgroundFetchRegistration::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSBackgroundFetchRegistration::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7304) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBackgroundFetchRegistrationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBackgroundFetchRegistrationPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBackgroundFetchRegistration>,(WebCore::DOMConstructorID)913>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBackgroundFetchRegistration_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsBackgroundFetchRegistration_uploadTotal(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsBackgroundFetchRegistration_uploaded(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsBackgroundFetchRegistration_downloadTotal(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsBackgroundFetchRegistration_downloaded(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

uint64_t WebCore::jsBackgroundFetchRegistration_result(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::BackgroundFetchResult>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 104));
}

uint64_t WebCore::jsBackgroundFetchRegistration_failureReason(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::BackgroundFetchFailureReason>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 105));
}

uint64_t WebCore::jsBackgroundFetchRegistration_recordsAvailable(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 106))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsBackgroundFetchRegistration_onprogress(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;

  v5 = *(_QWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 1)
  {
    v12 = *(WTF::StringImpl **)(v5 + 64);
    *(_QWORD *)(v5 + 64) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v5 + 32), v9);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v5, v13);
    bmalloc::api::isoDeallocate(v14, v15);
  }
  else
  {
    --*(_DWORD *)(v5 + 24);
  }
  return v10;
}

BOOL WebCore::setJSBackgroundFetchRegistration_onprogress(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  void *v18;
  bmalloc::api *v19;
  void *v20;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSBackgroundFetchRegistration::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSBackgroundFetchRegistration::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(_QWORD *)(a2 + 24);
      ++*(_DWORD *)(v11 + 24);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1584), a3, (_DWORD *)a2);
      if (*(_DWORD *)(v11 + 24) == 1)
      {
        v17 = *(WTF::StringImpl **)(v11 + 64);
        *(_QWORD *)(v11 + 64) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
        WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v11 + 32), v15);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v11, v18);
        bmalloc::api::isoDeallocate(v19, v20);
        if (!a3)
          return 1;
      }
      else
      {
        --*(_DWORD *)(v11 + 24);
        if (!a3)
          return 1;
      }
      if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSBackgroundFetchRegistrationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSBackgroundFetchRegistrationOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 1;
  v5 = v3 + 8;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v12 = *(_QWORD *)(a3 + 32);
    v10 = (uint64_t *)(a3 + 32);
    v11 = v12;
    if (v12)
    {
      v13 = *(_DWORD *)(v11 - 8);
      v14 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(v11 + 16 * v17);
      if (v18 != v3)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v11 + 16 * v17);
          ++v19;
          if (v18 == v3)
            goto LABEL_17;
        }
        v17 = *(unsigned int *)(v11 - 4);
      }
LABEL_17:
      if (v17 != *(_DWORD *)(v11 - 4))
      {
        v20 = (_QWORD *)(v11 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*v10 - 16);
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v10, v28 >> 1, 0);
        }
      }
    }
    v4 = *(_DWORD *)(v3 + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else
  {
    v6 = *(WTF::StringImpl **)(v3 + 64);
    *(_QWORD *)(v3 + 64) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v3 + 32), a2);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v3, v7);
    bmalloc::api::isoDeallocate(v8, v9);
  }
}

unint64_t WebCore::wrap<WebCore::BackgroundFetchRegistration>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::BackgroundFetchRegistration *__hidden))a3 != off_1E3480EC0)
  {
    __break(0xC471u);
    JUMPOUT(0x194880120);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSBackgroundFetchRegistration::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchRegistration::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchRegistration::s_info
                                                                               + ~((_QWORD)&WebCore::JSBackgroundFetchRegistration::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSBackgroundFetchRegistration::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSBackgroundFetchRegistration::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSBackgroundFetchRegistrationPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSBackgroundFetchRegistrationPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSBackgroundFetchRegistration::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSBackgroundFetchRegistration::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 7384);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 7384);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 7384);
    *(_QWORD *)(v30 + 7384) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 7384);
  *(_QWORD *)(v26 + 7384) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE334CA0 & 1) == 0)
  {
    qword_1EE334C98 = (uint64_t)&off_1E322DED0;
    byte_1EE334CA0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE334C98;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE334C98;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::BackgroundFetchResult>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE334C71 & 1) == 0)
  {
    v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v11 += 2;
    unk_1EE334CD8 = v11;
    unk_1EE334CE0 = &dword_1ECE76D20;
    dword_1ECE76D20 += 2;
    dword_1ECE76D40 += 2;
    unk_1EE334CE8 = &dword_1ECE76D40;
    byte_1EE334C71 = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_770[8 * a2 + 104];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_5:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_8;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_5;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_8:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::BackgroundFetchResult>(char ***a1)
{
  char **v1;
  int v2;
  int v4;
  int v5;
  const char *v6;
  BOOL v7;

  v1 = *a1;
  if (!*a1)
    goto LABEL_2;
  v4 = *((_DWORD *)v1 + 1);
  if (v4)
  {
    v5 = *((_DWORD *)v1 + 4);
    v6 = v1[1];
    v7 = v4 != 7;
    if (v6 == "failure" || v4 != 7)
    {
      if (v4 == 7 && v6 == "failure")
        goto LABEL_37;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 102 && *(_DWORD *)(v6 + 1) == 1970039137 && *(_DWORD *)(v6 + 3) == 1701999980)
      {
LABEL_37:
        v1 = &WebCore::parseEnumerationFromString<WebCore::BackgroundFetchResult>(WTF::String const&)::mappings;
        goto LABEL_38;
      }
    }
    else if (*(_WORD *)v6 == 102
           && *(_QWORD *)(v6 + 2) == 0x75006C00690061
           && *(_QWORD *)(v6 + 6) == 0x6500720075006CLL)
    {
      goto LABEL_37;
    }
    if (v6 == "success")
      v7 = 1;
    if (v7)
    {
      if (v6 != "success" || v4 != 7)
        goto LABEL_44;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 != 115 || *(_DWORD *)(v6 + 1) != 1701012341 || *(_DWORD *)(v6 + 3) != 1936942435)
      {
LABEL_44:
        LODWORD(v1) = 0;
        v2 = 0;
        return v1 | (v2 << 8);
      }
    }
    else
    {
      if (*(_WORD *)v6 != 115)
        goto LABEL_44;
      if (*(_QWORD *)(v6 + 6) != 0x73007300650063 || *(_QWORD *)(v6 + 2) != 0x65006300630075)
        goto LABEL_44;
    }
    v1 = &off_1E32273B8;
LABEL_38:
    LODWORD(v1) = *((unsigned __int8 *)v1 + 16);
    goto LABEL_2;
  }
  LODWORD(v1) = 0;
LABEL_2:
  v2 = 1;
  return v1 | (v2 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::BackgroundFetchResult>(JSC::JSGlobalObject *a1, unint64_t this)
{
  char **v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  char **v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(char ***)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(char ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::BackgroundFetchResult>(&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::BackgroundFetchResult>()
{
  return "\"\", \"success\", \"failure\"";
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchUpdateUIEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  JSC::VM *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  int v27;
  unint64_t v28;
  WebCore::JSBackgroundFetchEvent *v29;
  JSC::JSCell *v30;
  unint64_t v31;
  JSC::Structure *v32;
  JSC::JSCell *v33;
  uint64_t v34;
  JSCell *v35;
  JSC::JSCell *v36;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v38;
  JSC::JSGlobalObject *v39;
  JSC::VM *v40;
  JSC::JSObject *v41;
  JSC::Structure *v42;
  JSC::VM *FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSCell *v52;
  unint64_t Structure;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  unint64_t SubclassStructure;
  _DWORD *v58;
  WTF::StringImpl *v60;
  void *v61;
  bmalloc::api *v62;
  void *v63;
  JSValue v64;
  uint64_t v65;
  JSC::VM *v66;
  _DWORD *v67;
  _BYTE v68[8];
  uint64_t v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v64.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v64);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v71);
  v6 = v72;
  if (v72)
  {
    v35 = 0;
LABEL_47:
    if (v6 != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E322E3B0[v6])(v68, &v71);
    return v35;
  }
  WebCore::convertDictionary<WebCore::BackgroundFetchEventInit>(*(JSC::JSCell **)(a2 + 56), (JSC::VM **)a1, (uint64_t)v68);
  v7 = v70;
  if (v70)
  {
    v35 = 0;
LABEL_44:
    if (v7 != -1)
      ((void (*)(_DWORD **, _BYTE *))off_1E322E3A0[v7])(&v67, v68);
    v6 = v72;
    goto LABEL_47;
  }
  if (!v72)
  {
    v66 = v3;
    v8 = v71;
    v71 = 0;
    v9 = v68[0];
    v10 = v68[1];
    v11 = v68[2];
    v12 = v69;
    v69 = 0;
    if (v12)
      ++*(_DWORD *)(v12 + 24);
    v13 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    *(_QWORD *)(v13 + 8) = 0;
    if (v9)
      v17 = 1605634;
    else
      v17 = 1605632;
    v18 = v17 | (v8 != 0) | (4 * (v10 != 0)) | (8 * (v11 != 0)) | *(_DWORD *)(v13 + 20) & 0xFFC00000;
    *(_DWORD *)(v13 + 16) = 1;
    *(_DWORD *)(v13 + 20) = v18;
    if (v8)
    {
      *(_DWORD *)v8 += 2;
      v18 = *(_DWORD *)(v13 + 20);
    }
    *(_QWORD *)(v13 + 24) = v8;
    *(_QWORD *)(v13 + 32) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_QWORD *)(v13 + 56) = v16;
    *(_DWORD *)(v13 + 20) = v18 | 0x4000;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_DWORD *)(v13 + 80) = 0;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_QWORD *)(v13 + 104) = v12;
    *(_QWORD *)v13 = off_1E3480FB0;
    v67 = (_DWORD *)v13;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 1)
      {
        v60 = *(WTF::StringImpl **)(v12 + 64);
        *(_QWORD *)(v12 + 64) = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v14);
          else
            *(_DWORD *)v60 -= 2;
        }
        WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v12 + 32), v14);
        WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v12, v61);
        bmalloc::api::isoDeallocate(v62, v63);
        if (!v8)
        {
LABEL_18:
          if (*(void (***)(WebCore::BackgroundFetchUpdateUIEvent *__hidden))v13 != off_1E3480FB0)
          {
            __break(0xC471u);
            JUMPOUT(0x194880B38);
          }
          v19 = *(JSC::VM **)(v5 + 40);
          v20 = *((_QWORD *)v19 + 412);
          if (v20)
          {
            v21 = *(_DWORD *)(v20 - 8);
            v22 = ((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
                 + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
                                                                                        + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) >> 22);
            v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
            v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
            v25 = v21 & ((v24 >> 31) ^ v24);
            v26 = *(char ***)(v20 + 16 * v25);
            if (v26 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
            {
LABEL_24:
              v28 = *(_QWORD *)(v20 + 16 * v25 + 8);
              if (v28)
              {
LABEL_26:
                v35 = (JSCell *)WebCore::JSBackgroundFetchUpdateUIEvent::create(v28, v19, (uint64_t *)&v67);
                WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v19 + 415), v13, (uint64_t)v35);
                v36 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v36 & 0xFFFE000000000002) != 0
                  || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v36)) == 0
                  || (v39 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v40 = (JSC::VM *)*((_QWORD *)a1 + 7),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v38),
                      *((_DWORD *)v40 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
                {
LABEL_39:
                  if (*((_DWORD *)v66 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) != 0)
                    v35 = 0;
                  v58 = v67;
                  v67 = 0;
                  if (v58)
                  {
                    if (v58[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
                    else
                      --v58[4];
                  }
                  v7 = v70;
                  goto LABEL_44;
                }
                v44 = *((_QWORD *)FunctionRealm + 412);
                if (v44)
                {
                  v45 = *(_DWORD *)(v44 - 8);
                  v46 = ((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
                       + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
                                                                                              + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) >> 22);
                  v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
                  v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
                  v49 = v45 & ((v48 >> 31) ^ v48);
                  v50 = *(char ***)(v44 + 16 * v49);
                  if (v50 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
                  {
LABEL_35:
                    v41 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
                    if (v41)
                    {
LABEL_37:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v39, v41, v42);
                      if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
                        JSC::JSObject::setStructure(v35, v40, SubclassStructure);
                      goto LABEL_39;
                    }
                  }
                  else
                  {
                    v51 = 1;
                    while (v50)
                    {
                      v49 = ((_DWORD)v49 + v51) & v45;
                      v50 = *(char ***)(v44 + 16 * v49);
                      ++v51;
                      if (v50 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
                        goto LABEL_35;
                    }
                  }
                }
                v52 = (JSC::JSCell *)WebCore::JSBackgroundFetchEvent::prototype(v40, FunctionRealm, v41);
                Structure = WebCore::JSBackgroundFetchUpdateUIEventPrototype::createStructure((uint64_t *)v40, (uint64_t)FunctionRealm, v52);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v55 = (JSC::JSCell *)WebCore::JSBackgroundFetchUpdateUIEventPrototype::create(v40, FunctionRealm, Structure, v54);
                v56 = WebCore::JSBackgroundFetchUpdateUIEvent::createStructure((uint64_t *)v40, (uint64_t)FunctionRealm, v55);
                v41 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v56, (uint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info);
                goto LABEL_37;
              }
            }
            else
            {
              v27 = 1;
              while (v26)
              {
                v25 = ((_DWORD)v25 + v27) & v21;
                v26 = *(char ***)(v20 + 16 * v25);
                ++v27;
                if (v26 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
                  goto LABEL_24;
              }
            }
          }
          v29 = (WebCore::JSBackgroundFetchEvent *)*((_QWORD *)v19 + 7);
          v30 = (JSC::JSCell *)WebCore::JSBackgroundFetchEvent::prototype(v29, v19, v15);
          v31 = WebCore::JSBackgroundFetchUpdateUIEventPrototype::createStructure((uint64_t *)v29, (uint64_t)v19, v30);
          *(_DWORD *)(v31 + 16) |= 0x80000u;
          v33 = (JSC::JSCell *)WebCore::JSBackgroundFetchUpdateUIEventPrototype::create(v29, v19, v31, v32);
          v34 = WebCore::JSBackgroundFetchUpdateUIEvent::createStructure((uint64_t *)v29, (uint64_t)v19, v33);
          v28 = WebCore::cacheDOMStructure((JSCell *)v19, v34, (uint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info);
          goto LABEL_26;
        }
LABEL_16:
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v14);
        else
          *(_DWORD *)v8 -= 2;
        goto LABEL_18;
      }
      --*(_DWORD *)(v12 + 24);
    }
    if (!v8)
      goto LABEL_18;
    goto LABEL_16;
  }
  v65 = std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSBackgroundFetchUpdateUIEvent::analyzeHeap(v65);
}

uint64_t WebCore::JSBackgroundFetchUpdateUIEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSBackgroundFetchEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSBackgroundFetchEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSBackgroundFetchEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBackgroundFetchUpdateUIEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBackgroundFetchUpdateUIEventPrototype::create(WebCore::JSBackgroundFetchUpdateUIEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info, (uint64_t)&WebCore::JSBackgroundFetchUpdateUIEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchUpdateUIEvent>,(WebCore::DOMConstructorID)914>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7312);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchEvent>,(WebCore::DOMConstructorID)910>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchUpdateUIEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
         + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSBackgroundFetchUpdateUIEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSBackgroundFetchEvent::prototype((WebCore::JSBackgroundFetchEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSBackgroundFetchUpdateUIEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSBackgroundFetchUpdateUIEventPrototype::create((WebCore::JSBackgroundFetchUpdateUIEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSBackgroundFetchUpdateUIEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSBackgroundFetchUpdateUIEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7312) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBackgroundFetchUpdateUIEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBackgroundFetchUpdateUIEventPrototype::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBackgroundFetchUpdateUIEvent>,(WebCore::DOMConstructorID)914>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSBackgroundFetchUpdateUIEvent::subspaceForImpl(WebCore::JSBackgroundFetchUpdateUIEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7392);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 7392))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 7392);
    *(_QWORD *)(v8 + 7392) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7392);
  *(_QWORD *)(v3 + 7392) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_DWORD **WebCore::JSBarProp::destroy(WebCore::JSBarProp *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref((_DWORD **)this + 3, a2);
}

uint64_t WebCore::JSBarProp::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBarPropPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBarPropPrototype::create(WebCore::JSBarPropPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSBarProp::s_info, (uint64_t)&WebCore::JSBarPropPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBarProp>,(WebCore::DOMConstructorID)709>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5672);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBarProp>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSBarProp::s_info + ~((_QWORD)&WebCore::JSBarProp::s_info << 32)) ^ (((unint64_t)&WebCore::JSBarProp::s_info + ~((_QWORD)&WebCore::JSBarProp::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSBarProp::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSBarProp::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSBarPropPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSBarPropPrototype::create((WebCore::JSBarPropPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSBarProp::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSBarProp::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5672) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBarPropConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBarPropPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBarProp>,(WebCore::DOMConstructorID)709>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBarProp_visible(uint64_t a1, uint64_t a2)
{
  if (WebCore::BarProp::visible(*(WebCore::BarProp **)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSBarPropOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194881F5CLL);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

_DWORD **WebCore::JSBarPropOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v25;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v25 = v3;
  if (*(_DWORD *)(a3 + 48))
  {
    v7 = *(_QWORD *)(a3 + 32);
    v5 = (uint64_t *)(a3 + 32);
    v6 = v7;
    if (v7)
    {
      v8 = *(_DWORD *)(v6 - 8);
      v9 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_DWORD **)(v6 + 16 * v12);
      if (v13 != v3)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_DWORD **)(v6 + 16 * v12);
          ++v14;
          if (v13 == v3)
            goto LABEL_10;
        }
        v12 = *(unsigned int *)(v6 - 4);
      }
LABEL_10:
      if (v12 != *(_DWORD *)(v6 - 4))
      {
        v15 = (_QWORD *)(v6 + 16 * v12);
        *v15 = -1;
        v18 = v15[1];
        v16 = v15 + 1;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v16 = 0;
        }
        ++*(_DWORD *)(*v5 - 16);
        v19 = *v5;
        if (*v5)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v5;
        if (*v5)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v23 >> 1, 0);
        }
      }
    }
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  return WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v25, a2);
}

unint64_t WebCore::wrap<WebCore::BarProp>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *Allocator;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  _DWORD *v58;
  _QWORD *v59;
  WTF *v60;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_DWORD **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_DWORD **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_63;
      }
LABEL_5:
      ++a3[2];
      v58 = a3;
      v8 = *(_QWORD *)(a2 + 3296);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = ((unint64_t)&WebCore::JSBarProp::s_info + ~((_QWORD)&WebCore::JSBarProp::s_info << 32)) ^ (((unint64_t)&WebCore::JSBarProp::s_info + ~((_QWORD)&WebCore::JSBarProp::s_info << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(char ***)(v8 + 16 * v13);
        if (v14 == &WebCore::JSBarProp::s_info)
        {
LABEL_10:
          v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
          if (v16)
            goto LABEL_12;
        }
        else
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(char ***)(v8 + 16 * v13);
            ++v15;
            if (v14 == &WebCore::JSBarProp::s_info)
              goto LABEL_10;
          }
        }
      }
      v17 = *(uint64_t **)(a2 + 56);
      Structure = WebCore::JSBarPropPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v21 = (JSC::JSCell *)WebCore::JSBarPropPrototype::create((WebCore::JSBarPropPrototype *)v17, Structure, v19, v20);
      v22 = WebCore::JSBarProp::createStructure(v17, a2, v21);
      v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSBarProp::s_info);
LABEL_12:
      v23 = *(_QWORD *)(a2 + 56);
      v24 = *(_QWORD *)(v23 + 41456);
      v25 = *(_QWORD *)(v24 + 23536);
      v26 = *(_QWORD **)(v25 + 5752);
      if (v26)
        goto LABEL_32;
      v27 = *(_QWORD *)(v24 + 22648);
      if (__ldaxr((unsigned __int8 *)v27))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v27))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v27);
LABEL_17:
      v29 = *(_QWORD *)(v27 + 2824);
      if (!*(_QWORD *)(v29 + 5752))
      {
        v30 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v60, "IsoSpace T");
        v59 = 0;
        MEMORY[0x19AEA3204](v30, &v60, v23 + 192, v23 + 1872, 32, 8, &v59);
        v32 = (uint64_t)v59;
        v59 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v33 = v60;
        v60 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree(v33, v31);
          else
            --*(_DWORD *)v33;
        }
        v34 = *(_QWORD *)(v29 + 5752);
        *(_QWORD *)(v29 + 5752) = v30;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v35 = *(_QWORD *)(v25 + 5752);
      *(_QWORD *)(v25 + 5752) = v26;
      if (v35)
      {
        v36 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v36, v37);
      }
      v38 = __ldxr((unsigned __int8 *)v27);
      if (v38 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
        {
LABEL_32:
          SlowCase = v26[3];
          if (SlowCase >= v26[4])
          {
            SlowCase = v26[5];
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM();
              SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
              *(_DWORD *)SlowCase = 0;
              WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
              v39 = v58;
              v58 = 0;
              *(_QWORD *)(SlowCase + 24) = v39;
              if (*(_BYTE *)(v23 + 755))
                __dmb(0xAu);
              v40 = *(_QWORD *)(a2 + 3320);
              if ((byte_1EE334CB0 & 1) == 0)
              {
                qword_1EE334CA8 = (uint64_t)&off_1E322DF00;
                byte_1EE334CB0 = 1;
              }
              if (*(_DWORD *)(v40 + 48))
              {
                v60 = (WTF *)a3;
                if ((SlowCase & 8) != 0)
                  v46 = (SlowCase - 112) | 1;
                else
                  v46 = SlowCase & 0xFFFFFFFFFFFFC000;
                if ((v46 & 1) != 0)
                  v47 = v46 + 47;
                else
                  v47 = *(_QWORD *)v46 + 32;
                Allocator = *(_QWORD **)(v47 + 16);
                if (!Allocator)
                  Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
                *(_QWORD *)(v47 + 16) = *Allocator;
                *Allocator = SlowCase;
                Allocator[1] = &qword_1EE334CA8;
                Allocator[2] = v40;
                v59 = Allocator;
                JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v60, (uint64_t *)&v59);
                v44 = (uint64_t)v59;
                if (!v59)
                  goto LABEL_47;
              }
              else
              {
                if ((SlowCase & 8) != 0)
                  v41 = (SlowCase - 112) | 1;
                else
                  v41 = SlowCase & 0xFFFFFFFFFFFFC000;
                if ((v41 & 1) != 0)
                  v42 = v41 + 47;
                else
                  v42 = *(_QWORD *)v41 + 32;
                v43 = *(_QWORD **)(v42 + 16);
                if (!v43)
                  v43 = (_QWORD *)JSC::WeakSet::findAllocator();
                *(_QWORD *)(v42 + 16) = *v43;
                *v43 = SlowCase;
                v43[1] = &qword_1EE334CA8;
                v43[2] = v40;
                v44 = *(_QWORD *)a3;
                *(_QWORD *)a3 = v43;
                if (!v44)
                  goto LABEL_47;
              }
              *(_QWORD *)(v44 + 8) = 3;
LABEL_47:
              WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v58, (void *)v41);
              return SlowCase;
            }
            v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
            v26[4] = SlowCase + HIDWORD(v57);
            v26[5] = SlowCase + (int)v57;
          }
          v26[3] = SlowCase + 32;
          goto LABEL_34;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      goto LABEL_32;
    }
LABEL_63:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    goto LABEL_5;
  SlowCase = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_5;
  return SlowCase;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSBarcodeDetector>::construct(JSC::VM **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  JSC::JSCell *v7;
  JSC::VM *v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF *v18;
  JSC::VM *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v33;
  JSC::Structure *v34;
  JSC::JSCell *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  JSValue v44;
  int i;
  unsigned int v46;
  unint64_t IndexQuickly;
  WTF::StringImpl *v48;
  unsigned __int16 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  void *v59;
  int v60;
  unint64_t SlowCase;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *Allocator;
  JSC::JSCell *v66;
  JSC::JSGlobalObject *v67;
  JSC::JSObject *v68;
  JSC::JSGlobalObject *v69;
  JSC::VM *v70;
  JSC::Structure *v71;
  uint64_t FunctionRealm;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char **v79;
  int v80;
  JSC::JSObject *v81;
  unint64_t v82;
  WebCore::JSDOMGlobalObject *v83;
  JSC::Structure *v84;
  JSC::JSCell *v85;
  uint64_t v86;
  unint64_t SubclassStructure;
  int v88;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  unsigned __int16 v102;
  char *v103;
  void *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  JSValue v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  WebCore::JSBarcodeDetector *v112;
  JSC::JSCell *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  WTF *v117;
  unint64_t v118;
  int v119;
  JSC::VM *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  int v123;
  JSC::VM *v124;
  WTF *v125;
  WTF::StringImpl *v126;
  _QWORD *v127;

  v2 = a2;
  v120 = a1[7];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v4 + 40));
  if (!v5)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError((JSC *)a1, &v120, (uint64_t)"BarcodeDetector", 16);
  v6 = (_QWORD *)v5;
  v115 = v2;
  v116 = a1;
  if (*(_DWORD *)(v2 + 32) == 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_13;
  }
  v7 = *(JSC::JSCell **)(v2 + 48);
  v8 = a1[7];
  v124 = v8;
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_11;
  if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
  {
    JSC::throwTypeError();
LABEL_143:
    v119 = 1;
    goto LABEL_144;
  }
  v10 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a1, (unint64_t)v121);
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v11);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
    goto LABEL_143;
  if (v12 == 10)
  {
LABEL_11:
    v13 = 0;
    v14 = 0;
    v15 = 0;
LABEL_13:
    v117 = v15;
    v118 = __PAIR64__(v14, v13);
    v119 = 0;
    goto LABEL_14;
  }
  v43 = (uint64_t)a1[7];
  v127 = (_QWORD *)v43;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v91 = v121;
    v121 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v90);
      else
        *(_DWORD *)v91 -= 2;
    }
    v123 = 1;
    goto LABEL_109;
  }
  v125 = 0;
  v126 = 0;
  if (JSC::getIterationMode() != 2)
  {
    v94 = JSC::iteratorForIterable((JSC *)a1, (JSC::JSGlobalObject *)v12, v44);
    v96 = v95;
    if (*(_DWORD *)(v43 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43) & 1) != 0)
    {
      v15 = 0;
      v14 = 0;
      goto LABEL_131;
    }
    v15 = 0;
    v14 = 0;
    while (1)
    {
      v97 = JSC::iteratorStep();
      if (*(_QWORD *)(v43 + 16))
        v98 = 1;
      else
        v98 = v97 == 6;
      if (v98)
        goto LABEL_131;
      v114 = v96;
      v99 = v94;
      v100 = JSC::iteratorValue();
      if (*(_DWORD *)(v43 + 80))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43) & 1) != 0)
          goto LABEL_131;
      }
      v121 = v116[7];
      v101 = v121;
      v102 = WebCore::parseEnumeration<WebCore::BarcodeFormat>((JSC::JSGlobalObject *)v116, v100);
      if (!*((_DWORD *)v101 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) == 0)
      {
        if (v102 > 0xFFu)
        {
          LOBYTE(v121) = v102;
          v94 = v99;
          if (v14 == (_DWORD)v126)
          {
            v103 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v125, (WTF *)(v14 + 1), (unint64_t)&v121);
            v14 = HIDWORD(v126);
            v15 = v125;
            *((_BYTE *)v125 + HIDWORD(v126)) = *v103;
          }
          else
          {
            *((_BYTE *)v15 + v14) = v102;
          }
          v96 = v114;
          HIDWORD(v126) = ++v14;
          goto LABEL_123;
        }
        JSC::throwTypeError();
      }
      v94 = v99;
      v96 = v114;
LABEL_123:
      if (*(_QWORD *)(v43 + 16))
      {
LABEL_164:
        JSC::iteratorClose();
        goto LABEL_131;
      }
    }
  }
  v15 = 0;
  v14 = 0;
  for (i = 1; ; ++i)
  {
    v46 = (*(_BYTE *)(v12 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8) : 0;
    if (i - 1 >= v46)
      break;
    IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v12, i - 1, 0);
    if (!IndexQuickly)
      IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v12, (JSC::JSGlobalObject *)v116, (i - 1));
    if (*(_DWORD *)(v43 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43) & 1) != 0)
      break;
    v121 = v116[7];
    v48 = v121;
    v49 = WebCore::parseEnumeration<WebCore::BarcodeFormat>((JSC::JSGlobalObject *)v116, IndexQuickly);
    if (!*((_DWORD *)v48 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) == 0)
    {
      if (v49 <= 0xFFu)
      {
        JSC::throwTypeError();
      }
      else
      {
        LOBYTE(v121) = v49;
        if (v14 == (_DWORD)v126)
        {
          v50 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v125, (WTF *)(v14 + 1), (unint64_t)&v121);
          v14 = HIDWORD(v126);
          v15 = v125;
          *((_BYTE *)v125 + HIDWORD(v126)) = *v50;
        }
        else
        {
          *((_BYTE *)v15 + v14) = v49;
        }
        HIDWORD(v126) = ++v14;
      }
    }
    if (*(_QWORD *)(v43 + 16))
    {
      v109 = JSC::JSArrayIterator::create();
      v110 = i | 0xFFFE000000000000;
      if (i < 0)
        v110 = COERCE__INT64((double)i) + 0x2000000000000;
      *(_QWORD *)(v109 + 16) = v110;
      goto LABEL_164;
    }
  }
LABEL_131:
  if (*(_DWORD *)(v43 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43))
  {
    v123 = 1;
    if (v15)
    {
      v125 = 0;
      LODWORD(v126) = 0;
      WTF::fastFree(v15, v111);
    }
LABEL_109:
    v92 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v93 = 1;
    v119 = 1;
    goto LABEL_133;
  }
  v93 = 0;
  v13 = v126;
  v123 = 0;
  v92 = 1;
  v121 = 0;
  v122 = 0;
LABEL_133:
  ((void (*)(WTF **, WTF::StringImpl **))off_1E322E5B8[v93])(&v125, &v121);
  if (v92)
  {
    v2 = v115;
    goto LABEL_13;
  }
  if (!v15)
  {
LABEL_144:
    SlowCase = 0;
    v88 = 1;
LABEL_103:
    ((void (*)(WTF::StringImpl **, WTF **))off_1E322E480[v88])(&v121, &v117);
    return (_QWORD *)SlowCase;
  }
  WTF::fastFree(v15, v104);
  v88 = v119;
  if (v119)
  {
    SlowCase = 0;
    if (v119 == -1)
      return (_QWORD *)SlowCase;
    goto LABEL_103;
  }
  v2 = v115;
LABEL_14:
  v125 = v117;
  v16 = (WTF::StringImpl *)v118;
  v117 = 0;
  v118 = 0;
  v126 = v16;
  WebCore::BarcodeDetector::create(v6, (unsigned __int8 **)&v125, (uint64_t)&v121);
  v18 = v125;
  if (v125)
  {
    v125 = 0;
    LODWORD(v126) = 0;
    WTF::fastFree(v18, v17);
  }
  v19 = v120;
  if (*((_DWORD *)v120 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v120) & 1) != 0)
    goto LABEL_158;
  if (!v123)
  {
    v20 = *(_QWORD *)(v4 + 40);
    v21 = v121;
    v121 = 0;
    v22 = *(_QWORD *)(v20 + 3296);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 - 8);
      v24 = ((unint64_t)&WebCore::JSBarcodeDetector::s_info + ~((_QWORD)&WebCore::JSBarcodeDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSBarcodeDetector::s_info + ~((_QWORD)&WebCore::JSBarcodeDetector::s_info << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(char ***)(v22 + 16 * v27);
      if (v28 == &WebCore::JSBarcodeDetector::s_info)
      {
LABEL_23:
        v30 = *(_QWORD *)(v22 + 16 * v27 + 8);
        if (v30)
          goto LABEL_25;
      }
      else
      {
        v29 = 1;
        while (v28)
        {
          v27 = ((_DWORD)v27 + v29) & v23;
          v28 = *(char ***)(v22 + 16 * v27);
          ++v29;
          if (v28 == &WebCore::JSBarcodeDetector::s_info)
            goto LABEL_23;
        }
      }
    }
    v31 = *(uint64_t **)(v20 + 56);
    Structure = WebCore::JSBarcodeDetectorPrototype::createStructure(v31, v20, *(JSC::JSCell **)(v20 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v35 = (JSC::JSCell *)WebCore::JSBarcodeDetectorPrototype::create((WebCore::JSBarcodeDetectorPrototype *)v31, Structure, v33, v34);
    v36 = WebCore::JSBarcodeDetector::createStructure(v31, v20, v35);
    v30 = WebCore::cacheDOMStructure((JSCell *)v20, v36, (uint64_t)&WebCore::JSBarcodeDetector::s_info);
LABEL_25:
    v37 = *(_QWORD *)(v20 + 56);
    v38 = *(_QWORD *)(v37 + 41456);
    v39 = *(_QWORD *)(v38 + 23536);
    v40 = *(_QWORD **)(v39 + 40);
    if (v40)
      goto LABEL_69;
    v41 = *(_QWORD *)(v38 + 22648);
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v41))
    {
      goto LABEL_54;
    }
    MEMORY[0x19AEA534C](v41);
LABEL_54:
    v51 = *(_QWORD *)(v41 + 2824);
    if (!*(_QWORD *)(v51 + 40))
    {
      v52 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v125, "IsoSpace T");
      v127 = 0;
      MEMORY[0x19AEA3204](v52, &v125, v37 + 192, v37 + 1872, 32, 8, &v127);
      v54 = (uint64_t)v127;
      v127 = 0;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      v55 = v125;
      v125 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
          WTF::fastFree(v55, v53);
        else
          --*(_DWORD *)v55;
      }
      v56 = *(_QWORD *)(v51 + 40);
      *(_QWORD *)(v51 + 40) = v52;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    }
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v57 = *(_QWORD *)(v39 + 40);
    *(_QWORD *)(v39 + 40) = v40;
    if (v57)
    {
      v58 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v58, v59);
    }
    v60 = __ldxr((unsigned __int8 *)v41);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
LABEL_69:
        SlowCase = v40[3];
        if (SlowCase >= v40[4])
        {
          SlowCase = v40[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_71;
          }
          v108 = *(_QWORD *)(SlowCase + 8) ^ v40[6];
          v40[4] = SlowCase + HIDWORD(v108);
          v40[5] = SlowCase + (int)v108;
        }
        v40[3] = SlowCase + 32;
LABEL_71:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v30);
        *(_QWORD *)(SlowCase + 24) = v21;
        if (*(_BYTE *)(v37 + 755))
          __dmb(0xAu);
        v62 = *(_QWORD *)(v20 + 3320);
        if ((byte_1EE334CC0 & 1) == 0)
        {
          qword_1EE334CB8 = (uint64_t)&off_1E322DF30;
          byte_1EE334CC0 = 1;
        }
        v125 = v21;
        if ((SlowCase & 8) != 0)
          v63 = (SlowCase - 112) | 1;
        else
          v63 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v63 & 1) != 0)
          v64 = v63 + 47;
        else
          v64 = *(_QWORD *)v63 + 32;
        v2 = v115;
        Allocator = *(_QWORD **)(v64 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v64 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE334CB8;
        Allocator[2] = v62;
        v127 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v62 + 32), (uint64_t *)&v125, (uint64_t *)&v127);
        if (v127)
          v127[1] = 3;
        v19 = v120;
        goto LABEL_85;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    goto LABEL_69;
  }
  if (v123 == 1)
  {
    v105 = (WTF::StringImpl *)v121;
    LOBYTE(v125) = (_BYTE)v121;
    v106 = v122;
    v122 = 0;
    v126 = v106;
    if (!*((_QWORD *)v120 + 2))
    {
      v107.super.isa = (Class)WebCore::createDOMException((JSC *)v116, (JSC::JSGlobalObject *)v121, (JSC::JSGlobalObject *)&v126);
      JSC::VM::throwException(v120, (JSC::JSGlobalObject *)v116, v107);
      v106 = v126;
    }
    v126 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, v105);
      else
        *(_DWORD *)v106 -= 2;
    }
    SlowCase = 0;
LABEL_85:
    if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
      goto LABEL_158;
    v66 = *(JSC::JSCell **)(v2 + 40);
    if (((unint64_t)v66 & 0xFFFE000000000002) != 0
      || (v67 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v66)) == 0
      || (v69 = v67, v67 == *(JSC::JSGlobalObject **)(v2 + 24))
      || (v70 = v116[7], FunctionRealm = JSC::getFunctionRealm((JSC *)v116, v67, v68), *((_DWORD *)v70 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
    {
LABEL_99:
      if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
      {
LABEL_100:
        if (v123 != -1)
          ((void (*)(WTF **, WTF::StringImpl **))off_1E322E470[v123])(&v125, &v121);
        v88 = 0;
        goto LABEL_103;
      }
LABEL_158:
      SlowCase = 0;
      goto LABEL_100;
    }
    v73 = *(_QWORD *)(FunctionRealm + 3296);
    if (v73)
    {
      v74 = *(_DWORD *)(v73 - 8);
      v75 = ((unint64_t)&WebCore::JSBarcodeDetector::s_info + ~((_QWORD)&WebCore::JSBarcodeDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSBarcodeDetector::s_info + ~((_QWORD)&WebCore::JSBarcodeDetector::s_info << 32)) >> 22);
      v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
      v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
      v78 = v74 & ((v77 >> 31) ^ v77);
      v79 = *(char ***)(v73 + 16 * v78);
      if (v79 == &WebCore::JSBarcodeDetector::s_info)
      {
LABEL_95:
        v81 = *(JSC::JSObject **)(v73 + 16 * v78 + 8);
        if (v81)
        {
LABEL_97:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)v116, v69, v81, v71);
          if (!*((_DWORD *)v70 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, v70, SubclassStructure);
          goto LABEL_99;
        }
      }
      else
      {
        v80 = 1;
        while (v79)
        {
          v78 = ((_DWORD)v78 + v80) & v74;
          v79 = *(char ***)(v73 + 16 * v78);
          ++v80;
          if (v79 == &WebCore::JSBarcodeDetector::s_info)
            goto LABEL_95;
        }
      }
    }
    v82 = WebCore::JSBarcodeDetectorPrototype::createStructure((uint64_t *)v70, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v82 + 16) |= 0x80000u;
    v85 = (JSC::JSCell *)WebCore::JSBarcodeDetectorPrototype::create(v70, v82, v83, v84);
    v86 = WebCore::JSBarcodeDetector::createStructure((uint64_t *)v70, FunctionRealm, v85);
    v81 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v86, (uint64_t)&WebCore::JSBarcodeDetector::s_info);
    goto LABEL_97;
  }
  v112 = (WebCore::JSBarcodeDetector *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::JSBarcodeDetector::destroy(v112, v113);
}

uint64_t WebCore::JSBarcodeDetector::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSBarcodeDetector::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBarcodeDetectorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBarcodeDetectorPrototype::create(WebCore::JSBarcodeDetectorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSBarcodeDetector::s_info, (uint64_t)&WebCore::JSBarcodeDetectorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBarcodeDetector>,(WebCore::DOMConstructorID)5>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 40);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v36) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v36, &WebCore::JSDOMConstructor<WebCore::JSBarcodeDetector>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v35 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v35);
    v9[2848] = v2 + (int)v35;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v36);
  v13 = v36;
  v36 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v36);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSBarcodeDetector::s_info + ~((_QWORD)&WebCore::JSBarcodeDetector::s_info << 32)) ^ (((unint64_t)&WebCore::JSBarcodeDetector::s_info + ~((_QWORD)&WebCore::JSBarcodeDetector::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSBarcodeDetector::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSBarcodeDetector::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSBarcodeDetectorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSBarcodeDetectorPrototype::create((WebCore::JSBarcodeDetectorPrototype *)a1, Structure, v26, v27);
    v29 = WebCore::JSBarcodeDetector::createStructure((uint64_t *)a1, a2, v28);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSBarcodeDetector::s_info);
  }
  v30 = *(_QWORD *)(v24 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v36);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v31 = v36;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSBarcodeDetector::s_info, (unint64_t *)&v36, (uint64_t)&WebCore::JSBarcodeDetectorConstructorTableValues, (unsigned __int8 *)v2);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 40) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBarcodeDetectorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBarcodeDetectorPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBarcodeDetector>,(WebCore::DOMConstructorID)5>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSBarcodeDetectorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSBarcodeDetectorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::parseEnumeration<WebCore::BarcodeFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  int v12;
  BOOL v13;
  BOOL v14;
  char **v15;
  int v17;
  int v18;
  char v20;
  char v21;
  char v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v27;
  unint64_t v28;

  v3 = (uint64_t)a1;
  v28 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, a1);
    v4 = v27;
    if (v27)
      goto LABEL_7;
LABEL_44:
    v17 = 0;
    v18 = 0;
    return v17 | (v18 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, (JSC::JSGlobalObject *)v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_44;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v7 << 32;
  v9 = v6 != 5;
  if (v5 != "aztec" && v6 == 5)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 97 || *(_WORD *)(v5 + 1) != 29818 || *(_WORD *)(v5 + 3) != 25445)
      {
LABEL_13:
        v10 = 0;
        v9 = 0;
        v11 = 0;
        v12 = 5;
        v13 = 1;
        v14 = 1;
        goto LABEL_14;
      }
    }
    else if (*(_WORD *)v5 != 97 || *(_QWORD *)(v5 + 2) != 0x6300650074007ALL)
    {
      goto LABEL_13;
    }
LABEL_50:
    v15 = &WebCore::parseEnumerationFromString<WebCore::BarcodeFormat>(WTF::String const&)::mappings;
    goto LABEL_51;
  }
  if (v5 == "aztec" && v6 == 5)
    goto LABEL_50;
  v10 = v6 == 7;
  v13 = v6 != 7;
  if (v5 == "codabar" || v6 != 7)
  {
    if (v5 == "codabar" && v6 == 7)
      goto LABEL_37;
    if (v5 == "code_128" || v6 != 8)
    {
      if (v5 != "code_128")
      {
        v12 = *(_DWORD *)(v4 + 4);
        goto LABEL_90;
      }
      v12 = *(_DWORD *)(v4 + 4);
      if (v6 != 8)
        goto LABEL_90;
    }
    else
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 99 && *(_DWORD *)(v5 + 1) == 1600480367 && *((_DWORD *)v5 + 1) == 942813535)
          goto LABEL_180;
LABEL_221:
        v12 = 8;
        goto LABEL_90;
      }
      if (*(_WORD *)v5 != 99)
        goto LABEL_221;
      v12 = 8;
      if (*(_QWORD *)(v5 + 2) != 0x5F00650064006FLL || *((_QWORD *)v5 + 1) != 0x3800320031005FLL)
        goto LABEL_90;
    }
LABEL_180:
    v15 = &off_1E3227C00;
    goto LABEL_51;
  }
  if ((_DWORD)v7)
  {
    if (*v5 == 99 && *(_DWORD *)(v5 + 1) == 1650549871 && *(_DWORD *)(v5 + 3) == 1918984801)
    {
LABEL_37:
      v15 = &off_1E3227BE8;
      goto LABEL_51;
    }
    goto LABEL_89;
  }
  if (*(_WORD *)v5 != 99)
  {
LABEL_89:
    v13 = 0;
    v12 = 7;
    goto LABEL_90;
  }
  v13 = 0;
  v12 = 7;
  if (*(_QWORD *)(v5 + 2) == 0x6200610064006FLL && *(_QWORD *)(v5 + 6) == 0x72006100620061)
    goto LABEL_37;
LABEL_90:
  if (v5 == "code_39" || v13)
  {
    if (v5 == "code_39" && v6 == 7)
      goto LABEL_97;
  }
  else
  {
    if (!v12)
    {
LABEL_97:
      v15 = &off_1E3227C18;
      goto LABEL_51;
    }
    if ((_DWORD)v7)
    {
      if (*v5 == 99 && *(_DWORD *)(v5 + 1) == 1600480367 && *(_DWORD *)(v5 + 3) == 959668069)
        goto LABEL_97;
    }
    else if (*(_WORD *)v5 == 99)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x5F00650064006FLL && *(_QWORD *)(v5 + 6) == 0x390033005F0065)
        goto LABEL_97;
    }
    else
    {
      v8 = 0;
    }
  }
  v21 = v5 == "code_93" || v13;
  if ((v21 & 1) != 0)
  {
    if (v5 == "code_93" && v6 == 7)
      goto LABEL_122;
  }
  else
  {
    if (!v12)
    {
LABEL_122:
      v15 = &off_1E3227C30;
      goto LABEL_51;
    }
    if (v8)
    {
      if (*v5 == 99 && *(_DWORD *)(v5 + 1) == 1600480367 && *(_DWORD *)(v5 + 3) == 859397989)
        goto LABEL_122;
    }
    else if (*(_WORD *)v5 == 99)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x5F00650064006FLL && *(_QWORD *)(v5 + 6) == 0x330039005F0065)
        goto LABEL_122;
    }
    else
    {
      v8 = 0;
    }
  }
  if (v5 != "data_matrix" && v12 == 11)
  {
    if (v8)
    {
      if (*v5 == 100 && *(_QWORD *)(v5 + 1) == 0x7274616D5F617461 && *(_QWORD *)(v5 + 3) == 0x78697274616D5F61)
      {
LABEL_155:
        v15 = &off_1E3227C48;
        goto LABEL_51;
      }
    }
    else
    {
      if (*(_WORD *)v5 == 100)
      {
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCE10);
        v23.i16[0] = vminvq_u16(v23);
        if (v23.i32[0])
        {
          v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968BCE20);
          v24.i16[0] = vminvq_u16(v24);
          if (v24.i32[0])
            goto LABEL_155;
        }
      }
      v8 = 0;
    }
    v11 = 0;
    v14 = 1;
    v12 = 11;
    goto LABEL_14;
  }
  if (v5 == "data_matrix" && v12 == 11)
    goto LABEL_155;
  v11 = v12 == 6;
  v14 = v12 != 6;
  if (v5 == "ean_13" || v12 != 6)
  {
    if (v5 == "ean_13" && v12 == 6)
      goto LABEL_201;
  }
  else
  {
    if (v8)
    {
      if (*v5 == 101 && *(_DWORD *)(v5 + 1) == 828337761 && *(_DWORD *)(v5 + 2) == 858873710)
      {
LABEL_201:
        v15 = &off_1E3227C60;
        goto LABEL_51;
      }
LABEL_227:
      v14 = 0;
      v12 = 6;
      goto LABEL_14;
    }
    if (*(_WORD *)v5 != 101)
    {
      v8 = 0;
      goto LABEL_227;
    }
    v14 = 0;
    v8 = 0;
    v12 = 6;
    v3 = 0x31005F006E0061;
    if (*(_QWORD *)(v5 + 2) == 0x31005F006E0061)
    {
      v3 = 0x330031005F006ELL;
      if (*(_QWORD *)(v5 + 4) == 0x330031005F006ELL)
        goto LABEL_201;
    }
  }
LABEL_14:
  if (v5 != "ean_8" && !v9)
  {
    if (v12)
    {
      if (v8)
      {
        if (*v5 != 101)
          goto LABEL_21;
        v3 = 28257;
        if (*(_WORD *)(v5 + 1) != 28257)
          goto LABEL_21;
        v3 = 14431;
        if (*(_WORD *)(v5 + 3) != 14431)
          goto LABEL_21;
      }
      else if (*(_WORD *)v5 != 101 || *(_QWORD *)(v5 + 2) != 0x38005F006E0061)
      {
        v8 = 0;
        goto LABEL_21;
      }
    }
LABEL_42:
    v15 = &off_1E3227C78;
    goto LABEL_51;
  }
  if (v5 == "ean_8" && v6 == 5)
    goto LABEL_42;
LABEL_21:
  if (v5 == "itf" || v12 != 3)
  {
    if (v5 == "itf" && v12 == 3)
      goto LABEL_26;
  }
  else
  {
    if (v8)
    {
      if (*v5 == 105 && *(_WORD *)(v5 + 1) == 26228)
      {
LABEL_26:
        v15 = &off_1E3227C90;
LABEL_51:
        v17 = *((unsigned __int8 *)v15 + 16);
        v18 = 1;
        goto LABEL_52;
      }
    }
    else
    {
      if (*(_WORD *)v5 == 105 && *(_DWORD *)(v5 + 2) == 6684788)
        goto LABEL_26;
      v8 = 0;
    }
    v12 = 3;
  }
  if (v5 == "pdf417")
    v14 = 1;
  if (v14)
  {
    if (v5 != "pdf417")
      v11 = 0;
    if (v11)
      goto LABEL_71;
  }
  else
  {
    if (!v12)
    {
LABEL_71:
      v15 = &off_1E3227CA8;
      goto LABEL_51;
    }
    if (v8)
    {
      if (*v5 == 112 && *(_DWORD *)(v5 + 1) == 825517668 && *(_DWORD *)(v5 + 2) == 925971558)
        goto LABEL_71;
    }
    else if (*(_WORD *)v5 == 112)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x31003400660064 && *(_QWORD *)(v5 + 4) == 0x37003100340066)
        goto LABEL_71;
    }
    else
    {
      v8 = 0;
    }
  }
  v20 = v5 == "qr_code" || v13;
  if ((v20 & 1) != 0)
  {
    if (v5 == "qr_code" && v10)
      goto LABEL_84;
  }
  else
  {
    if (!v12)
    {
LABEL_84:
      v15 = &off_1E3227CC0;
      goto LABEL_51;
    }
    if (v8)
    {
      if (*v5 == 113 && *(_DWORD *)(v5 + 1) == 1868783474 && *(_DWORD *)(v5 + 3) == 1701080931)
        goto LABEL_84;
    }
    else if (*(_WORD *)v5 == 113)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x6F0063005F0072 && *(_QWORD *)(v5 + 6) == 0x650064006F0063)
        goto LABEL_84;
    }
    else
    {
      v8 = 0;
    }
  }
  if (v5 == "unknown")
    v13 = 1;
  if (v13)
  {
    if (v5 != "unknown")
      v10 = 0;
    if (v10)
      goto LABEL_109;
  }
  else
  {
    if (!v12)
    {
LABEL_109:
      v15 = &off_1E3227CD8;
      goto LABEL_51;
    }
    if (v8)
    {
      if (*v5 == 117 && *(_DWORD *)(v5 + 1) == 1869507438 && *(_DWORD *)(v5 + 3) == 1853321070)
        goto LABEL_109;
    }
    else if (*(_WORD *)v5 == 117)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x6F006E006B006ELL && *(_QWORD *)(v5 + 6) == 0x6E0077006F006ELL)
        goto LABEL_109;
    }
    else
    {
      v8 = 0;
    }
  }
  v22 = v5 == "upc_a" || v9;
  if ((v22 & 1) != 0)
  {
    if (v5 == "upc_a" && v6 == 5)
      goto LABEL_135;
  }
  else
  {
    if (!v12)
    {
LABEL_135:
      v15 = &off_1E3227CF0;
      goto LABEL_51;
    }
    if (v8)
    {
      if (*v5 == 117 && *(_WORD *)(v5 + 1) == 25456 && *(_WORD *)(v5 + 3) == 24927)
        goto LABEL_135;
      v8 = 1;
    }
    else
    {
      if (*(_WORD *)v5 == 117 && *(_QWORD *)(v5 + 2) == 0x61005F00630070)
        goto LABEL_135;
      v8 = 0;
    }
  }
  if (v5 == "upc_e")
    v9 = 1;
  if (v9)
  {
    if (v6 == 5 && v5 == "upc_e")
      goto LABEL_145;
  }
  else
  {
    if (!v12)
    {
LABEL_145:
      v15 = &off_1E3227D08;
      goto LABEL_51;
    }
    if (v8)
    {
      if (*v5 == 117 && *(_WORD *)(v5 + 1) == 25456 && *(_WORD *)(v5 + 3) == 25951)
        goto LABEL_145;
    }
    else if (*(_WORD *)v5 == 117 && *(_QWORD *)(v5 + 2) == 0x65005F00630070)
    {
      goto LABEL_145;
    }
  }
  v18 = 0;
  v17 = 0;
LABEL_52:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v3);
  else
    *(_DWORD *)v4 -= 2;
  return v17 | (v18 << 8);
}

uint64_t WebCore::JSBaseAudioContext::prototype(WebCore::JSBaseAudioContext *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSBaseAudioContext::s_info + ~((_QWORD)&WebCore::JSBaseAudioContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSBaseAudioContext::s_info + ~((_QWORD)&WebCore::JSBaseAudioContext::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSBaseAudioContext::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSBaseAudioContext::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSBaseAudioContextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSBaseAudioContextPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSBaseAudioContext::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSBaseAudioContext::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

JSC::VM *JSC::reifyStaticProperties<27u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 1080; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSBaseAudioContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBaseAudioContext::JSBaseAudioContext(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSBaseAudioContext::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(_QWORD *)(this + 24);
  v3 = v2 - 32;
  v4 = (unsigned int *)(v2 - 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a2 = v3;
  return this;
}

unint64_t WebCore::JSBaseAudioContext::createPrototype(WebCore::JSBaseAudioContext *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSBaseAudioContextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSBaseAudioContextPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSBaseAudioContextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBaseAudioContextPrototype::create(WebCore::JSBaseAudioContextPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<27u>(this, (uint64_t)&WebCore::JSBaseAudioContext::s_info, (uint64_t)&WebCore::JSBaseAudioContextPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBaseAudioContext>,(WebCore::DOMConstructorID)246>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1968);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBaseAudioContext>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSBaseAudioContext::prototype((WebCore::JSBaseAudioContext *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1968) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBaseAudioContextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBaseAudioContextPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBaseAudioContext>,(WebCore::DOMConstructorID)246>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

WTF **WebCore::jsBaseAudioContext_destination(uint64_t a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 32) + 80))(*(_QWORD *)(a2 + 24) - 32);
  return WebCore::wrap<WebCore::AudioDestinationNode>(a1, v3, v4);
}

unint64_t WebCore::jsBaseAudioContext_currentTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 32) + 88))(*(_QWORD *)(a2 + 24) - 32);
  v3 = atomic_load((unint64_t *)(v2 + 152));
  v4 = (double)v3 / *(float *)(v2 + 160);
  if (COERCE__INT64(fabs(v4)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v5 = (int)v4, v4 == (double)(int)v5)
    && ((_DWORD)v5 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v5 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

unint64_t WebCore::jsBaseAudioContext_sampleRate(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 32) + 88))(*(_QWORD *)(a2 + 24) - 32)
                + 160);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsBaseAudioContext_listener(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioListener>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsBaseAudioContext_audioWorklet(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioWorklet>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::jsBaseAudioContext_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::AudioContextState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 344));
}

uint64_t WebCore::jsBaseAudioContext_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  v7 = (unsigned int *)((char *)v5 - 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v12 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 1984), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  do
  {
    v13 = __ldaxr(v7);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v7));
  if (!v14)
  {
    atomic_store(1u, v7);
    (*(void (**)(char *))(*(_QWORD *)v6 + 16))(v6);
  }
  return v12;
}

BOOL WebCore::setJSBaseAudioContext_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSBaseAudioContext::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSBaseAudioContext::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (unsigned int *)((char *)v11 - 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
        v15 = WebCore::threadGlobalDataSlow(a1);
      v16 = *(_QWORD *)(v15 + 40);
      if (!v16)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
        v16 = *(_QWORD *)(v15 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v16 + 1984), a3, (_DWORD *)a2);
      do
      {
        v17 = __ldaxr(v12);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v12));
      if (v18)
      {
        if (a3)
          goto LABEL_23;
      }
      else
      {
        atomic_store(1u, v12);
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_23:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSBaseAudioContext::subspaceForImpl(WebCore::JSBaseAudioContext *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1992);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1992);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1992);
    *(_QWORD *)(v8 + 1992) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1992);
  *(_QWORD *)(v3 + 1992) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSBaseAudioContextOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSBaseAudioContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v30;
  uint64_t v31;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 32;
  v5 = (unsigned int *)(v3 - 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*(_DWORD *)(a3 + 48))
  {
    v12 = *(_QWORD *)(a3 + 32);
    v10 = (uint64_t *)(a3 + 32);
    v11 = v12;
    if (v12)
    {
      v13 = *(_DWORD *)(v11 - 8);
      v14 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(v11 + 16 * v17);
      if (v18 != result)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v11 + 16 * v17);
          ++v19;
          if (v18 == result)
            goto LABEL_14;
        }
        v17 = *(unsigned int *)(v11 - 4);
      }
LABEL_14:
      if (v17 != *(_DWORD *)(v11 - 4))
      {
        v20 = (_QWORD *)(v11 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*v10 - 16);
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
          {
            v30 = v5;
            v31 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v10, v28 >> 1, 0);
            v5 = v30;
            result = v31;
          }
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 8);
    if (v7)
    {
      *(_QWORD *)(v7 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t WebCore::JSBaseAudioContext::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSBaseAudioContext::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSBaseAudioContext::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 32;
  else
    return 0;
}

uint64_t WebCore::JSBasicCredential::prototype(WebCore::JSBasicCredential *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSBasicCredential::s_info + ~((_QWORD)&WebCore::JSBasicCredential::s_info << 32)) ^ (((unint64_t)&WebCore::JSBasicCredential::s_info + ~((_QWORD)&WebCore::JSBasicCredential::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSBasicCredential::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSBasicCredential::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSBasicCredentialPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSBasicCredentialPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSBasicCredential::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSBasicCredential::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSBasicCredential::destroy(WebCore::JSBasicCredential *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSBasicCredential::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBasicCredentialPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBasicCredentialPrototype::create(WebCore::JSBasicCredentialPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSBasicCredential::s_info, &WebCore::JSBasicCredentialPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBasicCredential>,(WebCore::DOMConstructorID)73>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 584);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v35) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v35, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBasicCredential>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v34 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v34);
    v9[2848] = v2 + (int)v34;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v35);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v35);
  v13 = v35;
  v35 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v35);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSBasicCredential::s_info + ~((_QWORD)&WebCore::JSBasicCredential::s_info << 32)) ^ (((unint64_t)&WebCore::JSBasicCredential::s_info + ~((_QWORD)&WebCore::JSBasicCredential::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSBasicCredential::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSBasicCredential::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSBasicCredentialPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v27 = (JSC::JSCell *)WebCore::JSBasicCredentialPrototype::create((WebCore::JSBasicCredentialPrototype *)a1, (JSC::VM *)a2, Structure, v26);
    v28 = WebCore::JSBasicCredential::createStructure((uint64_t *)a1, a2, v27);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSBasicCredential::s_info);
  }
  v29 = *(_QWORD *)(v24 + 48);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v30 = v35;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSBasicCredential::s_info, (unint64_t *)&v35, (uint64_t)&WebCore::JSBasicCredentialConstructorTableValues, (unsigned __int8 *)v2);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 584) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBasicCredentialConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBasicCredentialPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBasicCredential>,(WebCore::DOMConstructorID)73>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBasicCredential_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsBasicCredential_type(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 24) > 1u)
  {
    v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v3 += 2;
    v11 = v3;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v11;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (!v3 || (v5 = *((_DWORD *)v3 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v4 + 41968);
LABEL_12:
    if (!v3)
      return v6;
    goto LABEL_20;
  }
  if (v5 != 1)
    goto LABEL_9;
  v7 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  if ((*((_BYTE *)v3 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_19:
    v6 = *(_QWORD *)(v4 + 8 * v8 + 42216);
    goto LABEL_20;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_19;
  }
LABEL_9:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v3 = v11;
    goto LABEL_12;
  }
LABEL_20:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v6;
}

uint64_t WebCore::JSBasicCredential::subspaceForImpl(WebCore::JSBasicCredential *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 584);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 584))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 584);
    *(_QWORD *)(v8 + 584) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 584);
  *(_QWORD *)(v3 + 584) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSBasicCredentialOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSBasicCredentialOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

WTF::StringImpl *WebCore::JSBeforeUnloadEventPrototype::finishCreation(WebCore::JSBeforeUnloadEventPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(a2, (uint64_t)&WebCore::JSBeforeUnloadEvent::s_info, (uint64_t)&WebCore::JSBeforeUnloadEventPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSBeforeUnloadEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBeforeUnloadEvent::JSBeforeUnloadEvent(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

unint64_t WebCore::JSBeforeUnloadEvent::createPrototype(WebCore::JSBeforeUnloadEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSBeforeUnloadEventPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSBeforeUnloadEventPrototype::create(WebCore::JSBeforeUnloadEventPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSBeforeUnloadEventPrototype::finishCreation((WebCore::JSBeforeUnloadEventPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBeforeUnloadEvent>,(WebCore::DOMConstructorID)415>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3320);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSBeforeUnloadEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSBeforeUnloadEvent>((WebCore::JSBeforeUnloadEvent *)a1, (JSC::VM *)a2)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3320) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBeforeUnloadEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBeforeUnloadEventPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSBeforeUnloadEvent>,(WebCore::DOMConstructorID)415>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBeforeUnloadEvent_returnValue(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

BOOL WebCore::setJSBeforeUnloadEvent_returnValue(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSBeforeUnloadEvent::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSBeforeUnloadEvent::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v19 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v19;
    if (hasExceptionsAfterHandlingTraps)
    {
      v18 = 1;
      v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v11 = v19;
  }
  v18 = 0;
  v17 = 0;
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = *(WTF::StringImpl **)(v9 + 72);
  *(_QWORD *)(v9 + 72) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      if (!v11)
        goto LABEL_36;
      goto LABEL_26;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (!v11)
  {
LABEL_36:
    v13 = 0;
    goto LABEL_28;
  }
LABEL_26:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    goto LABEL_36;
  }
  v13 = 0;
  *(_DWORD *)v11 -= 2;
LABEL_28:
  v14 = 1;
LABEL_29:
  ((void (*)(unint64_t *, uint64_t *))off_1E322E100[v13])(&v20, &v17);
  return v14;
}

uint64_t WebCore::JSBeforeUnloadEvent::subspaceForImpl(WebCore::JSBeforeUnloadEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3400);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3400))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 3400);
    *(_QWORD *)(v9 + 3400) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSBeforeUnloadEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSBiquadFilterNode>::construct(WebCore::AudioNode **a1, uint64_t a2)
{
  WebCore::AudioNode *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  JSCell *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v21;
  JSC::JSCell *v22;
  uint64_t Object;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned __int8 v33;
  char v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  char v43;
  WebCore::AudioNode *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  WebCore::AudioNode *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::AudioNode *v51;
  JSC::VM *v52;
  double v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::AudioNode *v56;
  JSC::VM *v57;
  double v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WebCore::AudioNode *v61;
  JSC::VM *v62;
  double v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WebCore::AudioNode *v66;
  JSC::VM *v67;
  double v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  WebCore::AudioNode *v73;
  WebCore::JSDOMGlobalObject *v74;
  JSC::VM *v75;
  WebCore::AudioNode *v76;
  WebCore::AudioNode *v77;
  JSC::JSCell *v78;
  JSC::JSGlobalObject *v79;
  JSC::JSObject *v80;
  JSC::JSGlobalObject *v81;
  JSC::VM *v82;
  JSC::JSObject *v83;
  JSC::Structure *v84;
  JSC::VM *FunctionRealm;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char **v92;
  int v93;
  JSC::JSCell *v94;
  unint64_t Structure;
  JSC::Structure *v96;
  JSC::JSCell *v97;
  uint64_t v98;
  unint64_t SubclassStructure;
  JSValue v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  JSValue v104;
  char v105;
  double v106;
  char hasExceptionsAfterHandlingTraps;
  double v108;
  char v109;
  double v110;
  char v111;
  double v112;
  char v113;
  JSC::VM *v114;
  JSC::VM *v115;
  JSC::VM *v116;
  JSC::VM *v117;
  uint64_t v118;
  unsigned int v119;
  char v120;
  unsigned __int8 v121;
  char v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  char v126;
  uint64_t v127;
  WebCore::AudioNode *v128;
  WTF::StringImpl *v129;
  int v130;
  char v131;
  __int16 v132;
  char v133;
  int v134;
  float v135;
  float v136;
  float v137;
  float v138;
  int v139[2];
  WTF::StringImpl *v140;
  int v141;
  WebCore::AudioNode *v142;
  __int16 v143;
  char v144;
  __int16 v145;
  char v146;
  __int16 v147;
  char v148;
  WebCore::AudioNode *v149;

  v4 = a1[7];
  v142 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194888120);
  }
  v11 = v6 - 192;
  if (!v6)
    v11 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v11 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v13 = *(int *)(a2 + 32);
  if ((_DWORD)v13 == 1)
  {
    v101.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, v7);
    return JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v101);
  }
  v14 = *(_QWORD *)(a2 + 48);
  v15 = a1[7];
  v128 = v15;
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSBaseAudioContext::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSBaseAudioContext::s_info && v18 != 0);
  }
  if (!v17)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v128, 0, "context", 8, "BiquadFilterNode", 17, v8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v21 = *(_QWORD *)(v14 + 24);
  v127 = v5;
  if ((unint64_t)(v13 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v22 = *(JSC::JSCell **)(a2 + 56);
    v149 = v15;
    if (((unint64_t)v22 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v123 = v21;
      if (((unint64_t)v22 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v22)) == 0)
      {
        JSC::throwTypeError();
        return 0;
      }
      v24 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v26 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
          WTF::StringImpl::destroy(v128, v25);
        else
          *(_DWORD *)v128 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      if (v26 == 10)
      {
        v27 = 0;
        v121 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v26, &v128);
        if (HIDWORD(v128))
          return 0;
        v121 = v128;
        v119 = v128 >> 8;
        v27 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v40 = v128;
      v42 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v41);
        else
          *(_DWORD *)v40 -= 2;
      }
      v120 = v27;
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      if (v42 == 10)
      {
        v43 = 0;
        LOBYTE(v31) = 0;
      }
      else
      {
        v128 = a1[7];
        v44 = v128;
        v31 = WebCore::parseEnumeration<WebCore::ChannelCountMode>((JSC::JSGlobalObject *)a1, v42);
        if (*((_DWORD *)v44 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) != 0)
          return 0;
        if ((v31 & 0xFF00000000) == 0)
          goto LABEL_170;
        v125 = v31 >> 8;
        v43 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v45 = v128;
      v47 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v46);
        else
          *(_DWORD *)v45 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      v122 = v43;
      if (v47 == 10)
      {
        v126 = 0;
        LOBYTE(v29) = 0;
      }
      else
      {
        v128 = a1[7];
        v48 = v128;
        v29 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>((JSC::JSGlobalObject *)a1, v47);
        if (*((_DWORD *)v48 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) != 0)
          return 0;
        if ((v29 & 0xFF00000000) == 0)
          goto LABEL_170;
        v124 = v29 >> 8;
        v126 = 1;
      }
      JSC::SmallStrings::singleCharacterStringRep((WebCore::AudioNode *)((char *)v15 + 41968));
      v49 = v128;
      v51 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v50);
        else
          *(_DWORD *)v49 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      v36 = 1.0;
      if (v51 != (WebCore::AudioNode *)10)
      {
        v128 = v51;
        v52 = a1[7];
        *(_QWORD *)v139 = v52;
        if ((unint64_t)v51 >= 0xFFFE000000000000)
        {
          v53 = (double)(int)v51;
        }
        else if ((unint64_t)v51 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v114 = v52;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v128, (JSC::JSGlobalObject *)a1);
          v52 = v114;
        }
        else
        {
          *(_QWORD *)&v53 = (char *)v51 - 0x2000000000000;
        }
        if (*((_DWORD *)v52 + 20))
        {
          v106 = v53;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
          v53 = v106;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            return 0;
        }
        if ((*(_QWORD *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v53 < -3.40282347e38
          || v53 > 3.40282347e38)
        {
          goto LABEL_165;
        }
        v36 = v53;
      }
      WTF::AtomStringImpl::addLiteral();
      v54 = v128;
      v56 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v55);
        else
          *(_DWORD *)v54 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      v35 = 0.0;
      if (v56 != (WebCore::AudioNode *)10)
      {
        v128 = v56;
        v57 = a1[7];
        *(_QWORD *)v139 = v57;
        if ((unint64_t)v56 >= 0xFFFE000000000000)
        {
          v58 = (double)(int)v56;
        }
        else if ((unint64_t)v56 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v115 = v57;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v128, (JSC::JSGlobalObject *)a1);
          v57 = v115;
        }
        else
        {
          *(_QWORD *)&v58 = (char *)v56 - 0x2000000000000;
        }
        if (*((_DWORD *)v57 + 20))
        {
          v108 = v58;
          v109 = JSC::VM::hasExceptionsAfterHandlingTraps(v57);
          v58 = v108;
          if ((v109 & 1) != 0)
            return 0;
        }
        if ((*(_QWORD *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v58 < -3.40282347e38
          || v58 > 3.40282347e38)
        {
          goto LABEL_165;
        }
        v35 = v58;
      }
      WTF::AtomStringImpl::addLiteral();
      v59 = v128;
      v61 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v60);
        else
          *(_DWORD *)v59 -= 2;
      }
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      if (v61 == (WebCore::AudioNode *)10)
      {
        v38 = 350.0;
      }
      else
      {
        v128 = v61;
        v62 = a1[7];
        *(_QWORD *)v139 = v62;
        if ((unint64_t)v61 >= 0xFFFE000000000000)
        {
          v63 = (double)(int)v61;
        }
        else if ((unint64_t)v61 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v116 = v62;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v128, (JSC::JSGlobalObject *)a1);
          v62 = v116;
        }
        else
        {
          *(_QWORD *)&v63 = (char *)v61 - 0x2000000000000;
        }
        if (*((_DWORD *)v62 + 20))
        {
          v110 = v63;
          v111 = JSC::VM::hasExceptionsAfterHandlingTraps(v62);
          v63 = v110;
          if ((v111 & 1) != 0)
            return 0;
        }
        if ((*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v63 < -3.40282347e38
          || v63 > 3.40282347e38)
        {
          goto LABEL_165;
        }
        v38 = v63;
      }
      WTF::AtomStringImpl::addLiteral();
      v64 = v128;
      v66 = (WebCore::AudioNode *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v65);
        else
          *(_DWORD *)v64 -= 2;
      }
      v32 = v122;
      if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
        return 0;
      v39 = 0.0;
      if (v66 == (WebCore::AudioNode *)10)
        goto LABEL_104;
      v128 = v66;
      v67 = a1[7];
      *(_QWORD *)v139 = v67;
      if ((unint64_t)v66 >= 0xFFFE000000000000)
      {
        v68 = (double)(int)v66;
      }
      else if ((unint64_t)v66 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v117 = v67;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v128, (JSC::JSGlobalObject *)a1);
        v67 = v117;
      }
      else
      {
        *(_QWORD *)&v68 = (char *)v66 - 0x2000000000000;
      }
      if (*((_DWORD *)v67 + 20))
      {
        v112 = v68;
        v113 = JSC::VM::hasExceptionsAfterHandlingTraps(v67);
        v68 = v112;
        if ((v113 & 1) != 0)
          return 0;
      }
      if ((*(_QWORD *)&v68 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && v68 >= -3.40282347e38
        && v68 <= 3.40282347e38)
      {
        v39 = v68;
LABEL_104:
        WTF::AtomStringImpl::addLiteral();
        v69 = v128;
        v70 = JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a1, (unint64_t)v128);
        v10 = v124;
        v9 = v125;
        v30 = v126;
        v72 = v70;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
          {
            WTF::StringImpl::destroy(v69, v71);
            v10 = v124;
            v9 = v125;
            v30 = v126;
          }
          else
          {
            *(_DWORD *)v69 -= 2;
          }
        }
        if (*((_DWORD *)v15 + 20))
        {
          v105 = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
          v10 = v124;
          v9 = v125;
          v30 = v126;
          if ((v105 & 1) != 0)
            return 0;
        }
        if (v72 == 10)
        {
          LODWORD(v28) = 0;
          v21 = v123;
          v33 = v121;
LABEL_112:
          v37 = v119;
          v34 = v120;
          goto LABEL_113;
        }
        v128 = a1[7];
        v73 = v128;
        v28 = WebCore::parseEnumeration<WebCore::BiquadFilterType>((JSC::JSGlobalObject *)a1, v72);
        if (*((_DWORD *)v73 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0)
          return 0;
        v21 = v123;
        v33 = v121;
        v9 = v125;
        v30 = v126;
        v10 = v124;
        if (HIDWORD(v28))
          goto LABEL_112;
LABEL_170:
        JSC::throwTypeError();
        return 0;
      }
LABEL_165:
      JSC::throwTypeError();
      return 0;
    }
  }
  LODWORD(v28) = 0;
  LOBYTE(v29) = 0;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0.0;
  v36 = 1.0;
  v37 = 1135542272;
  v38 = 350.0;
  v39 = 0.0;
LABEL_113:
  *(_WORD *)((char *)&v128 + 5) = v147;
  HIBYTE(v128) = v148;
  *(_WORD *)((char *)&v129 + 5) = v145;
  HIBYTE(v129) = v146;
  v132 = v143;
  v133 = v144;
  LODWORD(v128) = v33 | (v37 << 8);
  BYTE4(v128) = v34;
  LODWORD(v129) = v31 | (v9 << 8);
  BYTE4(v129) = v32;
  v130 = v29 | (v10 << 8);
  v131 = v30;
  v134 = v28;
  v135 = v36;
  v136 = v35;
  v137 = v38;
  v138 = v39;
  WebCore::BiquadFilterNode::create((unsigned int *)(v21 - 32), (uint64_t)&v128, (uint64_t)v139);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_164;
  if (!v141)
  {
    v75 = *(JSC::VM **)(v127 + 40);
    v76 = *(WebCore::AudioNode **)v139;
    *(_QWORD *)v139 = 0;
    v128 = v76;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v76 != off_1E3369900)
    {
      __break(0xC471u);
      JUMPOUT(0x1948881FCLL);
    }
    v12 = (JSCell *)WebCore::createWrapper<WebCore::BiquadFilterNode,WebCore::BiquadFilterNode>(v75, (uint64_t *)&v128, v74);
    v77 = v128;
    v128 = 0;
    if (v77)
      WebCore::AudioNode::deref(v77);
    goto LABEL_118;
  }
  if (v141 == 1)
  {
    v102 = (WTF::StringImpl *)LOBYTE(v139[0]);
    LOBYTE(v128) = v139[0];
    v103 = v140;
    v140 = 0;
    v129 = v103;
    if (!*((_QWORD *)v4 + 2))
    {
      v104.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v139[0]), (JSC::JSGlobalObject *)&v129);
      JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v104);
      v103 = v129;
    }
    v129 = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, v102);
      else
        *(_DWORD *)v103 -= 2;
    }
    v12 = 0;
LABEL_118:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
LABEL_164:
      v12 = 0;
LABEL_133:
      if (v141 != -1)
        ((void (*)(WebCore::AudioNode **, int *))off_1E322EC50[v141])(&v128, v139);
      return (uint64_t)v12;
    }
    v78 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v78 & 0xFFFE000000000002) != 0
      || (v79 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v78)) == 0
      || (v81 = v79, v79 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v82 = a1[7], FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v79, v80), *((_DWORD *)v82 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
    {
LABEL_132:
      if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
        goto LABEL_133;
      goto LABEL_164;
    }
    v86 = *((_QWORD *)FunctionRealm + 412);
    if (v86)
    {
      v87 = *(_DWORD *)(v86 - 8);
      v88 = ((unint64_t)&WebCore::JSBiquadFilterNode::s_info
           + ~((_QWORD)&WebCore::JSBiquadFilterNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSBiquadFilterNode::s_info
                                                                      + ~((_QWORD)&WebCore::JSBiquadFilterNode::s_info << 32)) >> 22);
      v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
      v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
      v91 = v87 & ((v90 >> 31) ^ v90);
      v92 = *(char ***)(v86 + 16 * v91);
      if (v92 == &WebCore::JSBiquadFilterNode::s_info)
      {
LABEL_128:
        v83 = *(JSC::JSObject **)(v86 + 16 * v91 + 8);
        if (v83)
        {
LABEL_130:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v81, v83, v84);
          if (!*((_DWORD *)v82 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) == 0)
            JSC::JSObject::setStructure(v12, v82, SubclassStructure);
          goto LABEL_132;
        }
      }
      else
      {
        v93 = 1;
        while (v92)
        {
          v91 = ((_DWORD)v91 + v93) & v87;
          v92 = *(char ***)(v86 + 16 * v91);
          ++v93;
          if (v92 == &WebCore::JSBiquadFilterNode::s_info)
            goto LABEL_128;
        }
      }
    }
    v94 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v82, FunctionRealm, v83);
    Structure = WebCore::JSBiquadFilterNodePrototype::createStructure((uint64_t *)v82, (uint64_t)FunctionRealm, v94);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v97 = (JSC::JSCell *)WebCore::JSBiquadFilterNodePrototype::create(v82, FunctionRealm, Structure, v96);
    v98 = WebCore::JSBiquadFilterNode::createStructure((uint64_t *)v82, (uint64_t)FunctionRealm, v97);
    v83 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v98, (uint64_t)&WebCore::JSBiquadFilterNode::s_info);
    goto LABEL_130;
  }
  v118 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSBiquadFilterNode::analyzeHeap(v118);
}

uint64_t WebCore::JSBiquadFilterNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBiquadFilterNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSBiquadFilterNodePrototype::create(WebCore::JSBiquadFilterNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSBiquadFilterNode::s_info, &WebCore::JSBiquadFilterNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBiquadFilterNode>,(WebCore::DOMConstructorID)247>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1976);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSBiquadFilterNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSBiquadFilterNode::s_info + ~((_QWORD)&WebCore::JSBiquadFilterNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSBiquadFilterNode::s_info + ~((_QWORD)&WebCore::JSBiquadFilterNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSBiquadFilterNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSBiquadFilterNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSBiquadFilterNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSBiquadFilterNodePrototype::create((WebCore::JSBiquadFilterNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSBiquadFilterNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSBiquadFilterNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1976) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsBiquadFilterNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBiquadFilterNodePrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBiquadFilterNode>,(WebCore::DOMConstructorID)247>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsBiquadFilterNode_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(int *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 152) + 44);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE334C73 & 1) == 0)
  {
    dword_1ECE76F20 += 2;
    unk_1EE334D58 = &dword_1ECE76F20;
    dword_1ECE76F40 += 2;
    unk_1EE334D60 = &dword_1ECE76F40;
    dword_1ECE76F60 += 2;
    unk_1EE334D68 = &dword_1ECE76F60;
    dword_1ECE76F80 += 2;
    unk_1EE334D70 = &dword_1ECE76F80;
    dword_1ECE76FA0 += 2;
    dword_1ECE76FC0 += 2;
    qword_1EE334D78 = (uint64_t)&dword_1ECE76FA0;
    unk_1EE334D80 = &dword_1ECE76FC0;
    dword_1ECE76FE0 += 2;
    dword_1ECE77000 += 2;
    qword_1EE334D88 = (uint64_t)&dword_1ECE76FE0;
    unk_1EE334D90 = &dword_1ECE77000;
    byte_1EE334C73 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_770[8 * v2 + 232];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSBiquadFilterNode_type(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _BOOL8 result;
  unint64_t v15;
  uint64_t v16;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSBiquadFilterNode::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSBiquadFilterNode::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::BiquadFilterType>(a1, (unint64_t)this);
  v11 = v10;
  v12 = BYTE4(v10);
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !v12)
      return result;
  }
  else if (!BYTE4(v10))
  {
    return 0;
  }
  v13 = *(_QWORD *)(v9 + 152);
  if (*(_DWORD *)(v13 + 44) == v11)
    return 1;
  *(_DWORD *)(v13 + 44) = v11;
  result = 1;
  if (*(_BYTE *)(v13 + 8))
  {
    *(_BYTE *)(v13 + 40) = 1;
    if (*(_DWORD *)(v13 + 36))
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
        ++v15;
      }
      while (v15 < *(unsigned int *)(v13 + 36));
      return 1;
    }
  }
  return result;
}

unint64_t WebCore::jsBiquadFilterNode_frequency(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 152) + 48));
}

unint64_t WebCore::jsBiquadFilterNode_detune(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 152) + 72));
}

unint64_t WebCore::jsBiquadFilterNode_Q(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 152) + 56));
}

unint64_t WebCore::jsBiquadFilterNode_gain(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 152) + 64));
}

uint64_t WebCore::JSBiquadFilterNode::subspaceForImpl(WebCore::JSBiquadFilterNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2000);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2000);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2000);
    *(_QWORD *)(v8 + 2000) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2000);
  *(_QWORD *)(v3 + 2000) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::BiquadFilterNode,WebCore::BiquadFilterNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSBiquadFilterNode::s_info + ~((_QWORD)&WebCore::JSBiquadFilterNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSBiquadFilterNode::s_info + ~((_QWORD)&WebCore::JSBiquadFilterNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSBiquadFilterNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSBiquadFilterNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSBiquadFilterNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSBiquadFilterNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSBiquadFilterNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSBiquadFilterNode::s_info);
  }
  v21 = WebCore::JSBiquadFilterNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::parseEnumeration<WebCore::BiquadFilterType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  int v12;
  char **v13;
  uint64_t v15;
  char v17;
  uint16x8_t v20;
  uint64_t v23;
  unint64_t v24;

  v3 = (uint64_t)a1;
  v24 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v24, a1);
    v4 = v23;
    if (v23)
      goto LABEL_7;
    return 0;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, (JSC::JSGlobalObject *)v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v7 << 32;
  v9 = v6 != 7;
  if (v5 != "allpass" && v6 == 7)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 97 || *(_DWORD *)(v5 + 1) != 1634757740 || *(_DWORD *)(v5 + 3) != 1936941424)
      {
LABEL_13:
        v9 = 0;
        v10 = 0;
        v11 = 1;
        v12 = 7;
        goto LABEL_14;
      }
    }
    else
    {
      if (*(_WORD *)v5 != 97)
        goto LABEL_13;
      if (*(_QWORD *)(v5 + 2) != 0x610070006C006CLL || *(_QWORD *)(v5 + 6) != 0x73007300610070)
        goto LABEL_13;
    }
LABEL_43:
    v13 = &WebCore::parseEnumerationFromString<WebCore::BiquadFilterType>(WTF::String const&)::mappings;
    goto LABEL_109;
  }
  if (v5 == "allpass" && v6 == 7)
    goto LABEL_43;
  v10 = v6 == 8;
  v11 = v6 != 8;
  if (v5 == "bandpass" || v6 != 8)
  {
    if (v5 == "bandpass")
    {
      v12 = *(_DWORD *)(v4 + 4);
      if (v6 == 8)
      {
LABEL_32:
        v13 = &off_1E3228538;
        goto LABEL_109;
      }
    }
    else
    {
      v12 = *(_DWORD *)(v4 + 4);
    }
  }
  else
  {
    if ((_DWORD)v7)
    {
      if (*v5 == 98 && *(_DWORD *)(v5 + 1) == 1885630049 && *((_DWORD *)v5 + 1) == 1936941424)
        goto LABEL_32;
      goto LABEL_84;
    }
    if (*(_WORD *)v5 != 98)
    {
LABEL_84:
      v11 = 0;
      v12 = 8;
      goto LABEL_85;
    }
    v11 = 0;
    v12 = 8;
    v3 = 0x700064006E0061;
    if (*(_QWORD *)(v5 + 2) == 0x700064006E0061)
    {
      v3 = 0x73007300610070;
      if (*((_QWORD *)v5 + 1) == 0x73007300610070)
        goto LABEL_32;
    }
  }
LABEL_85:
  if (v5 == "highpass" || v11)
  {
    if (v5 == "highpass" && v6 == 8)
      goto LABEL_92;
  }
  else
  {
    if (!v12)
    {
LABEL_92:
      v13 = &off_1E3228550;
      goto LABEL_109;
    }
    if ((_DWORD)v7)
    {
      if (*v5 == 104 && *(_DWORD *)(v5 + 1) == 1885890409 && *((_DWORD *)v5 + 1) == 1936941424)
        goto LABEL_92;
    }
    else if (*(_WORD *)v5 == 104)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x70006800670069 && *((_QWORD *)v5 + 1) == 0x73007300610070)
        goto LABEL_92;
    }
    else
    {
      v8 = 0;
    }
  }
  if (v5 != "highshelf" && v12 == 9)
  {
    if (v8)
    {
      if (*v5 == 104 && *(_DWORD *)(v5 + 1) == 1936222057 && *(_DWORD *)(v5 + 5) == 1718379880)
      {
LABEL_108:
        v13 = &off_1E3228568;
        goto LABEL_109;
      }
    }
    else
    {
      if (*(_WORD *)v5 == 104)
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BCE30);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
          goto LABEL_108;
      }
      v8 = 0;
    }
    v12 = 9;
    goto LABEL_14;
  }
  if (v5 == "highshelf" && v12 == 9)
    goto LABEL_108;
LABEL_14:
  if (v5 == "lowpass" || v9)
  {
    if (v5 == "lowpass" && v6 == 7)
      goto LABEL_21;
    goto LABEL_47;
  }
  if (v12)
  {
    if (v8)
    {
      if (*v5 == 108 && *(_DWORD *)(v5 + 1) == 1634760559 && *(_DWORD *)(v5 + 3) == 1936941424)
        goto LABEL_21;
    }
    else if (*(_WORD *)v5 == 108)
    {
      v8 = 0;
      if (*(_QWORD *)(v5 + 2) == 0x6100700077006FLL && *(_QWORD *)(v5 + 6) == 0x73007300610070)
        goto LABEL_21;
    }
    else
    {
      v8 = 0;
    }
LABEL_47:
    v17 = v5 == "lowshelf" || v11;
    if ((v17 & 1) != 0)
    {
      if (v5 == "lowshelf" && v10)
        goto LABEL_56;
    }
    else
    {
      if (!v12)
      {
LABEL_56:
        v13 = &off_1E3228598;
        goto LABEL_109;
      }
      if (v8)
      {
        if (*v5 == 108 && *(_DWORD *)(v5 + 1) == 1752397679 && *((_DWORD *)v5 + 1) == 1718379880)
          goto LABEL_56;
      }
      else if (*(_WORD *)v5 == 108)
      {
        v8 = 0;
        if (*(_QWORD *)(v5 + 2) == 0x6800730077006FLL && *((_QWORD *)v5 + 1) == 0x66006C00650068)
          goto LABEL_56;
      }
      else
      {
        v8 = 0;
      }
    }
    if (v5 == "notch" || v12 != 5)
    {
      if (v5 == "notch" && v12 == 5)
        goto LABEL_66;
    }
    else if (v8)
    {
      if (*v5 == 110 && *(_WORD *)(v5 + 1) == 29807 && *(_WORD *)(v5 + 3) == 26723)
      {
LABEL_66:
        v13 = &off_1E32285B0;
        goto LABEL_109;
      }
      v12 = 5;
      v8 = 1;
    }
    else
    {
      if (*(_WORD *)v5 == 110 && *(_QWORD *)(v5 + 2) == 0x6800630074006FLL)
        goto LABEL_66;
      v8 = 0;
      v12 = 5;
    }
    if (v5 == "peaking")
      v9 = 1;
    if (v9)
    {
      if (v6 == 7 && v5 == "peaking")
        goto LABEL_76;
    }
    else
    {
      if (!v12)
      {
LABEL_76:
        v13 = &off_1E32285C8;
        goto LABEL_109;
      }
      if (v8)
      {
        if (*v5 == 112 && *(_DWORD *)(v5 + 1) == 1768644965 && *(_DWORD *)(v5 + 3) == 1735289195)
          goto LABEL_76;
      }
      else if (*(_WORD *)v5 == 112
             && *(_QWORD *)(v5 + 6) == 0x67006E0069006BLL
             && *(_QWORD *)(v5 + 2) == 0x69006B00610065)
      {
        goto LABEL_76;
      }
    }
    v15 = 0;
    goto LABEL_110;
  }
LABEL_21:
  v13 = &off_1E3228580;
LABEL_109:
  v15 = *((unsigned int *)v13 + 4) | 0x100000000;
LABEL_110:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v3);
  else
    *(_DWORD *)v4 -= 2;
  return v15;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::BitrateMode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::BitrateMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::BitrateMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::BitrateMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::BitrateMode)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4388 = &WebCore::convertEnumerationToString(WebCore::BitrateMode)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::BitrateMode)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::BitrateMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v12;
  uint64_t v13;
  uint64_t v17;
  unint64_t v18;

  v3 = a1;
  v18 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    if (v17)
      goto LABEL_7;
    return 0;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 8;
  if (v6 != "constant" && v7 == 8)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_DWORD *)(v6 + 1) != 1953721967 || *((_DWORD *)v6 + 1) != 1953390964)
      {
LABEL_13:
        v9 = 8;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 99)
        goto LABEL_13;
      if (*(_QWORD *)(v6 + 2) != 0x740073006E006FLL || *((_QWORD *)v6 + 1) != 0x74006E00610074)
        goto LABEL_13;
    }
LABEL_43:
    v12 = &WebCore::parseEnumerationFromString<WebCore::BitrateMode>(WTF::String const&)::mappings;
    goto LABEL_44;
  }
  v10 = v6 == "constant" && v7 == 8;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_43;
LABEL_18:
  if (v6 == "variable")
    v8 = 1;
  if (v8)
  {
    if (v7 != 8 || v6 != "variable")
      goto LABEL_50;
    goto LABEL_32;
  }
  if (!v9)
    goto LABEL_32;
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 118)
      goto LABEL_50;
    if (*((_QWORD *)v6 + 1) != 0x65006C00620061 || *(_QWORD *)(v6 + 2) != 0x61006900720061)
      goto LABEL_50;
    goto LABEL_32;
  }
  if (*v6 == 118 && *(_DWORD *)(v6 + 1) == 1634300513 && *((_DWORD *)v6 + 1) == 1701601889)
  {
LABEL_32:
    v12 = &off_1E32285F8;
LABEL_44:
    v13 = *((unsigned int *)v12 + 4) | 0x100000000;
    goto LABEL_51;
  }
LABEL_50:
  v13 = 0;
LABEL_51:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v13;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSBlob>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSCell *v16;
  _DWORD *v17;
  JSCell *v18;
  uint64_t v20;
  JSC::JSGlobalObject *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  _QWORD v25[2];
  _DWORD *v26;
  WTF::StringImpl *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::VM *v33;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v33 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v33, (uint64_t)"Blob", 5);
  v7 = v6;
  if (*(_DWORD *)(a2 + 32) == 1)
    v8 = 10;
  else
    v8 = *(_QWORD *)(a2 + 48);
  WebCore::convertOptionalWithDefault<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLUSVString>>,WebCore::JSDOMConstructor<WebCore::JSBlob>::construct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>((uint64_t)&v30, a1, v8);
  v9 = v32;
  if (v32)
  {
    v18 = 0;
LABEL_18:
    if (v9 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E322ED98[v9])(&v27, &v30);
    return v18;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v10 = 10;
  else
    v10 = *(_QWORD *)(a2 + 56);
  WebCore::convertDictionary<WebCore::BlobPropertyBag>((uint64_t)&v27, a1, (JSC::JSCell *)v10);
  v11 = v29;
  if (v29)
  {
    v16 = 0;
    v18 = 0;
    if (v29 == -1)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (!v32)
  {
    v25[0] = v30;
    v12 = v31;
    v30 = 0;
    v31 = 0;
    v25[1] = v12;
    v13 = v27;
    v27 = 0;
    v23 = v13;
    v24 = v28;
    WebCore::Blob::create((uint64_t *)&v26, v7, (uint64_t)v25, (uint64_t)&v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v14);
    v16 = (JSCell *)WebCore::toJSNewlyCreated((uint64_t)a1, *(WebCore::JSBlob ***)(v5 + 40), (uint64_t *)&v26);
    WebCore::setSubclassStructureIfNeeded<WebCore::Blob>(a1, a2, v16);
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      v16 = 0;
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (v17[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      else
        --v17[4];
    }
LABEL_16:
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E322ED88[v11])(v25, &v27);
    v18 = v16;
LABEL_17:
    v9 = v32;
    goto LABEL_18;
  }
  v20 = std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::convertOptionalWithDefault<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLUSVString>>,WebCore::JSDOMConstructor<WebCore::JSBlob>::construct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(v20, v21, v22);
}

uint64_t WebCore::convertOptionalWithDefault<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLUSVString>>,WebCore::JSDOMConstructor<WebCore::JSBlob>::construct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  if (a3 != 10)
    return WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLUSVString>>>::convert(a2, a3, a1);
  v6[2] = v3;
  v6[3] = v4;
  v6[0] = 0;
  *(_QWORD *)a1 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, a2);
}

_QWORD *WebCore::Blob::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = WebCore::Blob::operator new(128);
  v9 = WebCore::Blob::Blob(v8, a2, a3, a4);
  *a1 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v9 + 24));
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::Blob>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  WebCore::JSBlob *v10;
  uint64_t FunctionRealm;
  WebCore::JSDOMGlobalObject *v12;
  JSC::VM *v13;
  JSC::JSObject *v14;
  JSC::Structure *v15;
  unint64_t SubclassStructure;
  JSC::VM *v17;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (WebCore::JSBlob *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v13 = (JSC::VM *)FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (v17 = (JSC::VM *)FunctionRealm,
            result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10),
            v13 = v17,
            (result & 1) == 0))
      {
        v14 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSBlob>(v10, v13, v12);
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v14, v15);
        if (!*((_DWORD *)v10 + 20))
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
        result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
        if ((result & 1) == 0)
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
      }
    }
  }
  return result;
}

_DWORD *WebCore::JSBlob::destroy(WebCore::JSBlob *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSBlob::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSBlob::estimatedSize(WebCore::JSBlob *this, JSC::JSCell *a2, JSC::VM *a3)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 72) + JSC::JSObject::estimatedSize(this, a2, a3);
}

uint64_t WebCore::JSBlob::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = JSC::JSObject::visitChildren();
  if (*(_BYTE *)(a2 + 184))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72);
    *(_QWORD *)(a2 + 144) += v5;
    v6 = *(_QWORD *)(a2 + 160);
    v7 = __CFADD__(v6, v5);
    v8 = v6 + v5;
    if (v7)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v8;
  }
  return result;
}

uint64_t WebCore::JSBlob::visitChildren(WebCore::JSBlob *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 96))(a2, *(_QWORD *)(*((_QWORD *)this + 3) + 72));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSBlob::finishCreation(uint64_t this, JSC::VM *a2)
{
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  if (*(_QWORD *)(*(_QWORD *)(this + 24) + 72) >= 0x101uLL)
    return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return this;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBlob>,(WebCore::DOMConstructorID)500>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4000);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructor<WebCore::JSBlob>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructor<WebCore::JSBlob>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4000) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsBlobConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSBlobPrototype::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSBlob>,(WebCore::DOMConstructorID)500>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsBlob_size(uint64_t a1, const WTF::URL *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;

  v2 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(v2 + 64))
  {
    v3 = *(_QWORD *)(v2 + 56);
  }
  else
  {
    v4 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v2 + 80), a2);
    v3 = v4 & ~(v4 >> 63);
    *(_QWORD *)(v2 + 56) = v3;
    *(_BYTE *)(v2 + 64) = 1;
  }
  v5 = HIDWORD(v3);
  v6 = (double)v3;
  if ((v3 & 0x80000000) != 0)
    v7 = COERCE__INT64((double)v3) + 0x2000000000000;
  else
    v7 = v3 | 0xFFFE000000000000;
  if (v5)
    return *(_QWORD *)&v6 + 0x2000000000000;
  else
    return v7;
}

uint64_t WebCore::jsBlob_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSBlob::subspaceForImpl(WebCore::JSBlob *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4080);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 4080))
  {
    v15 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v15, JSC::JSCell::numberOfLowerTierCells, &v16);
    v14 = *(_QWORD *)(v9 + 4080);
    *(_QWORD *)(v9 + 4080) = v16;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4080);
  *(_QWORD *)(v3 + 4080) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSBlobOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ConcurrentPtrHashSet *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[4];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (v8[5] || ((*(uint64_t (**)(_QWORD *))(v8[3] + 64))(v8 + 3) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD **)(v7 + 24);
      }
    }
  }
  if (a5)
  {
    *a5 = "Reachable from Blob";
    a5[1] = 20;
  }
  v11 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v12 = (_DWORD *)*((_QWORD *)v11 + 6);
  if ((_DWORD *)((char *)v11 + 56) == v12)
  {
    v21 = v8;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v11, v8);
    v8 = v21;
    if (!(_DWORD)result)
      return result;
LABEL_20:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 152))(a4, v8);
    return 1;
  }
  v13 = v12[1];
  v14 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = v17;
  while (1)
  {
    v19 = *(_QWORD **)&v12[2 * v18 + 4];
    if (!v19)
      return 0;
    if (v8 == v19)
      goto LABEL_20;
    v18 = (v18 + 1) & v13;
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x19488A77CLL);
    }
  }
}

uint64_t *WebCore::JSBlobOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  v4 = v3[4];
  v3[4] = v4 + 1;
  v5 = v3 + 2;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    result = JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v3);
    v4 = v3[4] - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v3[4] = v4;
  return result;
}

uint64_t WebCore::JSBlob::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSBlob::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSBlob::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

unint64_t JSC::jsDynamicCast<WebCore::JSBlob *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSBlob::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSBlob::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

WebCore::JSBlobCallback *WebCore::JSBlobCallback::JSBlobCallback(WebCore::JSBlobCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3228820;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSBlobCallback::~JSBlobCallback(WebCore::JSBlobCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSBlobCallback::handleEvent(uint64_t **this, WebCore::Blob *a2)
{
  uint64_t v4;
  uint64_t v5;
  JSValue v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t *v13;
  _QWORD *v15;
  BOOL v16[8];
  uint64_t v17;
  WTF *v18;
  _OWORD v19[4];
  uint64_t v20;
  _BYTE v21[8];
  objc_class *v22;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v21, *(_QWORD *)(v5 + 56));
  v16[0] = 0;
  v17 = 0x800000000;
  v18 = (WTF *)((char *)v19 + 8);
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  if (!a2)
  {
    v7 = 0;
    v6.super.isa = (Class)2;
    goto LABEL_10;
  }
  v6.super.isa = (Class)WebCore::wrap<WebCore::Blob>(v5, v5, (uint64_t)a2);
  v7 = v17;
  if (v18 == (WTF *)((char *)v19 + 8))
  {
LABEL_10:
    *((JSValue *)v19 + v7 + 1) = v6;
    LODWORD(v17) = v7 + 1;
    goto LABEL_11;
  }
  v16[0] = JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v17, v6) == 1;
LABEL_11:
  v22 = 0;
  v9 = this[3];
  v10 = *v9;
  if (*v9
    && (*(_BYTE *)(v10 + 8) & 3) == 0
    && *(_QWORD *)v10
    && ((v11 = v9[2]) == 0 || (*(_BYTE *)(v11 + 8) & 3) != 0 ? (v12 = 0) : (v12 = *(JSC::Structure **)v11),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v10, v12, 10, (uint64_t)v16, 0, 0, (uint64_t *)&v22), (v6.super.isa = v22) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v22, 0, 0, 0);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v13 = *(uint64_t **)&v19[0];
  if (*(_QWORD *)&v19[0])
  {
    v22 = (objc_class *)&v17;
    v15 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v19[0], (uint64_t *)&v22);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v13, v15);
  }
  if (v18 != (WTF *)((char *)v19 + 8) && v18)
    WTF::fastFree(v18, v6.super.isa);
  MEMORY[0x19AEA32A0](v21);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v8;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSBlobEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  double v2;
  JSC::VM *v4;
  uint64_t v6;
  int v7;
  JSC::JSCell *v8;
  unint64_t v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  _BOOL4 v14;
  JSC::VM *v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  _BOOL4 v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSCell *v31;
  uint64_t v32;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WebCore::JSDOMGlobalObject *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  JSC::VM *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  int v58;
  unint64_t v59;
  WebCore::JSEvent *v60;
  JSC::JSCell *v61;
  unint64_t Structure;
  JSC::Structure *v63;
  JSC::JSCell *v64;
  uint64_t v65;
  JSC::JSCell *v66;
  JSC::JSGlobalObject *v67;
  JSC::JSObject *v68;
  JSC::JSGlobalObject *v69;
  JSC::VM *v70;
  WebCore::JSDOMGlobalObject *v71;
  JSC::Structure *v72;
  JSC::VM *FunctionRealm;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char **v80;
  int v81;
  JSC::JSCell *v82;
  unint64_t v83;
  JSC::Structure *v84;
  JSC::JSCell *v85;
  uint64_t v86;
  unint64_t SubclassStructure;
  _DWORD *v88;
  JSValue v89;
  double v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  int *v99;
  int v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  int *v104;
  int v105;
  _BOOL4 v106;
  uint64_t v107;
  JSC::VM *v108;
  WTF::StringImpl *v109[3];
  int v110;
  WTF::StringImpl *v111;
  int v112;
  JSC::VM *v113;
  _DWORD *v114;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v89.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v89);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v111);
  v7 = v112;
  if (!v112)
  {
    v107 = v6;
    v108 = v4;
    v8 = *(JSC::JSCell **)(a2 + 56);
    v113 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v113, "data", 5, "BlobEventInit", 14, "Blob", 5);
    }
    else
    {
      v9 = 0xFFFE000000000002;
      if (((unint64_t)v8 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject(v8);
        if (Object)
        {
          v11 = (JSC::Structure *)Object;
          WTF::AtomStringImpl::addLiteral();
          v13 = JSC::JSObject::get(v11, a1, (unint64_t)v109[0]);
          if (v109[0])
          {
            if (*(_DWORD *)v109[0] == 2)
              WTF::StringImpl::destroy(v109[0], v12);
            else
              *(_DWORD *)v109[0] -= 2;
          }
          if (*((_DWORD *)v113 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v113))
            goto LABEL_45;
          if (v13 != 10)
          {
            v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v13 >= 0xFFFE000000000000)
              goto LABEL_154;
            *(_QWORD *)&v16 = v13 - 0x2000000000000;
            if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              v14 = v16 > 0.0 || v16 < 0.0;
              goto LABEL_16;
            }
            if ((v13 & 0xFFFE000000000002) != 0)
            {
              v14 = v13 == 7;
              goto LABEL_16;
            }
            v92 = *(unsigned __int8 *)(v13 + 5);
            if (v92 == 3)
            {
              v95 = *(_DWORD *)(v13 + 8);
            }
            else
            {
              if (v92 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                {
                  v91 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_198;
                }
                v14 = 1;
                goto LABEL_16;
              }
              v93 = *(_QWORD *)(v13 + 8);
              if ((v93 & 1) != 0)
                v94 = (int *)(v13 + 16);
              else
                v94 = (int *)(v93 + 4);
              v95 = *v94;
            }
            v91 = v95 == 0;
            goto LABEL_198;
          }
          v14 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v17 = v109[0];
            v19 = JSC::JSObject::get(v11, a1, (unint64_t)v109[0]);
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v18);
              else
                *(_DWORD *)v17 -= 2;
            }
            if (*((_DWORD *)v113 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v113))
              goto LABEL_45;
            v106 = v14;
            if (v19 == 10)
            {
              v20 = 0;
              goto LABEL_28;
            }
            v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v19 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v22 = v19 - 0x2000000000000;
            if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v19 & v9) != 0)
              {
                v20 = v19 == 7;
                goto LABEL_27;
              }
              v97 = *(unsigned __int8 *)(v19 + 5);
              if (v97 == 3)
              {
                v100 = *(_DWORD *)(v19 + 8);
                goto LABEL_187;
              }
              if (v97 == 2)
              {
                v98 = *(_QWORD *)(v19 + 8);
                if ((v98 & 1) != 0)
                  v99 = (int *)(v19 + 16);
                else
                  v99 = (int *)(v98 + 4);
                v100 = *v99;
LABEL_187:
                v96 = v100 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_189:
                  v20 = 1;
                  goto LABEL_27;
                }
                v96 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_202:
              v20 = !v96;
              goto LABEL_27;
            }
            if (v22 > 0.0)
              goto LABEL_189;
            v20 = v22 < 0.0;
LABEL_27:
            if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
              goto LABEL_45;
LABEL_28:
            WTF::AtomStringImpl::addLiteral();
            v23 = v109[0];
            v25 = JSC::JSObject::get(v11, a1, (unint64_t)v109[0]);
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v24);
              else
                *(_DWORD *)v23 -= 2;
            }
            if (*((_DWORD *)v113 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v113))
              goto LABEL_45;
            if (v25 == 10)
            {
              v9 = 0;
              goto LABEL_39;
            }
            v26 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v25 >= 0xFFFE000000000000)
            {
              v101 = (_DWORD)v25 == 0;
              goto LABEL_192;
            }
            *(_QWORD *)&v27 = v25 - 0x2000000000000;
            if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v25 & v9) != 0)
              {
                v9 = v25 == 7;
                goto LABEL_38;
              }
              v102 = *(unsigned __int8 *)(v25 + 5);
              if (v102 == 3)
              {
                v105 = *(_DWORD *)(v25 + 8);
              }
              else
              {
                if (v102 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_196:
                    v9 = 1;
                    goto LABEL_38;
                  }
                  v101 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_192;
                }
                v103 = *(_QWORD *)(v25 + 8);
                if ((v103 & 1) != 0)
                  v104 = (int *)(v25 + 16);
                else
                  v104 = (int *)(v103 + 4);
                v105 = *v104;
              }
              v101 = v105 == 0;
LABEL_192:
              v9 = !v101;
              goto LABEL_38;
            }
            if (v27 > 0.0)
              goto LABEL_196;
            v9 = v27 < 0.0;
LABEL_38:
            if (*((_DWORD *)v26 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v26))
              goto LABEL_45;
LABEL_39:
            WTF::AtomStringImpl::addLiteral();
            v28 = v109[0];
            v30 = JSC::JSObject::get(v11, a1, (unint64_t)v109[0]);
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v29);
              else
                *(_DWORD *)v28 -= 2;
            }
            if (*((_DWORD *)v113 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v113))
              goto LABEL_45;
            if (v30 == 10)
              goto LABEL_44;
            v109[0] = *((WTF::StringImpl **)a1 + 7);
            if ((v30 & 0xFFFE000000000002) != 0)
              goto LABEL_60;
            v34 = *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C);
            v35 = *(_DWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v34)
            {
              v36 = 16 * v34;
              if ((char **)v36 != &WebCore::JSBlob::s_info)
              {
                do
                {
                  v36 = *(_QWORD *)(v36 + 16);
                  v35 = v36 != 0;
                }
                while ((char **)v36 != &WebCore::JSBlob::s_info && v36 != 0);
              }
            }
            if (!v35)
              goto LABEL_60;
            v13 = *(_QWORD *)(v30 + 24);
            if (!v13)
              goto LABEL_60;
            ++*(_DWORD *)(v13 + 16);
            WTF::AtomStringImpl::addLiteral();
            v38 = v109[0];
            v11 = (JSC::Structure *)JSC::JSObject::get(v11, a1, (unint64_t)v109[0]);
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v39);
              else
                *(_DWORD *)v38 -= 2;
            }
            if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
              goto LABEL_145;
            if (v11 != (JSC::Structure *)10)
            {
              v109[0] = v11;
              v40 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v114 = v40;
              if ((unint64_t)v11 >= 0xFFFE000000000000)
              {
                v2 = (double)(int)v11;
              }
              else if ((unint64_t)v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v109, a1);
                v2 = v90;
              }
              else
              {
                *(_QWORD *)&v2 = (char *)v11 - 0x2000000000000;
              }
              if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
                goto LABEL_145;
              if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                JSC::throwTypeError();
LABEL_145:
                v110 = 1;
                if (*(_DWORD *)(v13 + 16) == 1)
                  (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
                else
                  --*(_DWORD *)(v13 + 16);
                goto LABEL_46;
              }
            }
            LOBYTE(v109[0]) = v106;
            BYTE1(v109[0]) = v20;
            BYTE2(v109[0]) = v9;
            v109[2] = *(WTF::StringImpl **)&v2;
            v110 = 0;
            if (!v112)
            {
              v41 = v111;
              v111 = 0;
              v109[1] = 0;
              v42 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v42);
              *(_QWORD *)(v42 + 8) = 0;
              if (v20)
                v46 = 4;
              else
                v46 = 0;
              if ((_DWORD)v9)
                v47 = 8;
              else
                v47 = 0;
              if (v106)
                v48 = 557058;
              else
                v48 = 557056;
              v49 = v48 | v46 | v47 | (v41 != 0) | *(_DWORD *)(v42 + 20) & 0xFFC00000;
              *(_DWORD *)(v42 + 16) = 1;
              *(_DWORD *)(v42 + 20) = v49;
              if (v41)
              {
                *(_DWORD *)v41 += 2;
                v49 = *(_DWORD *)(v42 + 20);
              }
              *(_QWORD *)(v42 + 24) = v41;
              *(_QWORD *)(v42 + 32) = 0;
              *(_QWORD *)(v42 + 40) = 0;
              *(_QWORD *)(v42 + 48) = 0;
              *(_QWORD *)(v42 + 56) = v45;
              *(_DWORD *)(v42 + 20) = v49 | 0x4000;
              *(_QWORD *)v42 = off_1E335C538;
              *(_QWORD *)(v42 + 64) = 0;
              *(_QWORD *)(v42 + 72) = v13;
              *(double *)(v42 + 80) = v2;
              v114 = (_DWORD *)v42;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                {
                  WTF::StringImpl::destroy(v41, v43);
                  if (*(void (***)(WebCore::BlobEvent *__hidden))v42 != off_1E335C538)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19488B598);
                  }
                }
                else
                {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v50 = *(JSC::VM **)(v107 + 40);
              v51 = *((_QWORD *)v50 + 412);
              if (!v51)
                goto LABEL_93;
              v52 = *(_DWORD *)(v51 - 8);
              v53 = ((unint64_t)&WebCore::JSBlobEvent::s_info + ~((_QWORD)&WebCore::JSBlobEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBlobEvent::s_info + ~((_QWORD)&WebCore::JSBlobEvent::s_info << 32)) >> 22);
              v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
              v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
              v56 = v52 & ((v55 >> 31) ^ v55);
              v57 = *(char ***)(v51 + 16 * v56);
              if (v57 == &WebCore::JSBlobEvent::s_info)
              {
LABEL_92:
                v59 = *(_QWORD *)(v51 + 16 * v56 + 8);
                if (!v59)
                  goto LABEL_93;
              }
              else
              {
                v58 = 1;
                while (v57)
                {
                  v56 = ((_DWORD)v56 + v58) & v52;
                  v57 = *(char ***)(v51 + 16 * v56);
                  ++v58;
                  if (v57 == &WebCore::JSBlobEvent::s_info)
                    goto LABEL_92;
                }
LABEL_93:
                v60 = (WebCore::JSEvent *)*((_QWORD *)v50 + 7);
                v61 = (JSC::JSCell *)WebCore::JSEvent::prototype(v60, *(JSC::VM **)(v107 + 40), v44);
                Structure = WebCore::JSBlobEventPrototype::createStructure((uint64_t *)v60, (uint64_t)v50, v61);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v64 = (JSC::JSCell *)WebCore::JSBlobEventPrototype::create(v60, v50, Structure, v63);
                v65 = WebCore::JSBlobEvent::createStructure((uint64_t *)v60, (uint64_t)v50, v64);
                v59 = WebCore::cacheDOMStructure((JSCell *)v50, v65, (uint64_t)&WebCore::JSBlobEvent::s_info);
              }
              v31 = (JSCell *)WebCore::JSBlobEvent::create(v59, v50, (uint64_t *)&v114);
              WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v50 + 415), v42, (uint64_t)v31);
              v66 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v66 & 0xFFFE000000000002) != 0
                || (v67 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v66)) == 0
                || (v69 = v67, v67 == *(JSC::JSGlobalObject **)(a2 + 24))
                || (v70 = (JSC::VM *)*((_QWORD *)a1 + 7),
                    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v67, v68),
                    *((_DWORD *)v70 + 20))
                && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
              {
LABEL_107:
                if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
                  v31 = 0;
                v88 = v114;
                v114 = 0;
                if (v88)
                {
                  if (v88[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 8))(v88);
                  else
                    --v88[4];
                }
                v32 = 0;
                goto LABEL_47;
              }
              v74 = *((_QWORD *)FunctionRealm + 412);
              if (v74)
              {
                v75 = *(_DWORD *)(v74 - 8);
                v76 = ((unint64_t)&WebCore::JSBlobEvent::s_info + ~((_QWORD)&WebCore::JSBlobEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSBlobEvent::s_info + ~((_QWORD)&WebCore::JSBlobEvent::s_info << 32)) >> 22);
                v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
                v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
                v79 = v75 & ((v78 >> 31) ^ v78);
                v80 = *(char ***)(v74 + 16 * v79);
                if (v80 != &WebCore::JSBlobEvent::s_info)
                {
                  v81 = 1;
                  while (v80)
                  {
                    v79 = ((_DWORD)v79 + v81) & v75;
                    v80 = *(char ***)(v74 + 16 * v79);
                    ++v81;
                    if (v80 == &WebCore::JSBlobEvent::s_info)
                      goto LABEL_103;
                  }
                  goto LABEL_104;
                }
LABEL_103:
                v71 = *(WebCore::JSDOMGlobalObject **)(v74 + 16 * v79 + 8);
                if (!v71)
                  goto LABEL_104;
              }
              else
              {
LABEL_104:
                v82 = (JSC::JSCell *)WebCore::JSEvent::prototype(v70, FunctionRealm, v71);
                v83 = WebCore::JSBlobEventPrototype::createStructure((uint64_t *)v70, (uint64_t)FunctionRealm, v82);
                *(_DWORD *)(v83 + 16) |= 0x80000u;
                v85 = (JSC::JSCell *)WebCore::JSBlobEventPrototype::create(v70, FunctionRealm, v83, v84);
                v86 = WebCore::JSBlobEvent::createStructure((uint64_t *)v70, (uint64_t)FunctionRealm, v85);
                v71 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v86, (uint64_t)&WebCore::JSBlobEvent::s_info);
              }
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v69, v71, v72);
              if (!*((_DWORD *)v70 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) == 0)
                JSC::JSObject::setStructure(v31, v70, SubclassStructure);
              goto LABEL_107;
            }
            v15 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_154:
            v91 = (_DWORD)v13 == 0;
LABEL_198:
            v14 = !v91;
LABEL_16:
            if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
              goto LABEL_45;
          }
          v96 = (_DWORD)v19 == 0;
          goto LABEL_202;
        }
      }
LABEL_60:
      JSC::throwTypeError();
    }
LABEL_45:
    v110 = 1;
LABEL_46:
    v31 = 0;
    v32 = 1;
LABEL_47:
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E322EEF8[v32])(&v114, v109);
    v7 = v112;
    goto LABEL_48;
  }
  v31 = 0;
LABEL_48:
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E322E3B0[v7])(v109, &v111);
  return v31;
}

