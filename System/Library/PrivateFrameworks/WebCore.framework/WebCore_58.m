unint64_t WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 152 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x1AF286C)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 152 * a2;
    v6 = WTF::fastMalloc((WTF *)(152 * a2));
    *(_DWORD *)(v2 + 8) = v5 / 0x98;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = 152 * v4;
      v10 = (uint64_t)v3;
      do
      {
        std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100](v8, v10);
        v11 = *(WTF::StringImpl **)(v10 + 112);
        *(_QWORD *)(v10 + 112) = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v7);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = *(unsigned int *)(v10 + 104);
        if ((_DWORD)v12 != -1)
          ((void (*)(char *, uint64_t))off_1E33954F8[v12])(&v13, v10 + 8);
        *(_DWORD *)(v10 + 104) = -1;
        v8 += 152;
        v10 += 152;
        v9 -= 152;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(_BYTE ***result)
{
  ***result = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 8) + 2) = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_0,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_1,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_2,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_3,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_4,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_5,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_6,WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WTF::URL const&,WTF::URL const&,WTF::URL const&)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ContentExtensions::BlockLoadAction,WebCore::ContentExtensions::BlockCookiesAction,WebCore::ContentExtensions::CSSDisplayNoneSelectorAction,WebCore::ContentExtensions::NotifyAction,WebCore::ContentExtensions::IgnorePreviousRulesAction,WebCore::ContentExtensions::MakeHTTPSAction,WebCore::ContentExtensions::ModifyHeadersAction,WebCore::ContentExtensions::RedirectAction> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  if ((WTF::URL::protocolIs() & 1) != 0 || (result = WTF::URL::protocolIs(), (_DWORD)result))
  {
    result = WTF::URL::port(*(WTF::URL **)(v1 + 16));
    if ((result & 0xFF0000) == 0)
      goto LABEL_6;
    if ((WTF::URL::port(*(WTF::URL **)(v1 + 16)) & 0xFF0000) == 0)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      JUMPOUT(0x1957397D0);
    }
    WTF::URL::protocol(*(WTF::URL **)(v1 + 16));
    result = WTF::isDefaultPortForProtocol();
    if ((_DWORD)result)
LABEL_6:
      *(_BYTE *)(*(_QWORD *)(v1 + 24) + 1) = 1;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  unint64_t v45;
  unsigned int v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unsigned int v74;
  char *v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  BOOL v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;
  int64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  unsigned int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  unsigned int *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  _DWORD *v235;
  _DWORD *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int **v239;
  uint64_t v240;
  unsigned int *v241;
  uint64_t v242;
  unsigned int *v243;
  _DWORD *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  int v251;
  uint64_t v252;
  int v253;
  unsigned int *v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  int v258;
  char *v259;
  int v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int **v266;
  uint64_t v267;
  char v268;
  char v269;
  char *v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  _DWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char v284;

  v5 = a2;
  v6 = result;
LABEL_2:
  v257 = (uint64_t)(v5 - 48);
  v7 = (char *)v6;
  while (2)
  {
    v6 = (uint64_t)v7;
    v8 = v5 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((_DWORD *)v5 - 2) > *(_DWORD *)(v6 + 40))
          goto LABEL_145;
        return result;
      case 3:
        v10 = v6 + 48;
        v87 = *(_DWORD *)(v6 + 88);
        v88 = *((_DWORD *)v5 - 2);
        if (v87 > *(_DWORD *)(v6 + 40))
        {
          if (v88 <= v87)
            goto LABEL_379;
LABEL_145:
          v89 = v6;
          goto LABEL_146;
        }
        if (v88 > v87)
        {
          v91 = v6 + 48;
          v92 = (uint64_t)(v5 - 48);
          goto LABEL_333;
        }
        return result;
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>(v6, v6 + 48, v6 + 96, v257);
      case 5:
        v10 = v6 + 48;
        result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>(v6, v6 + 48, v6 + 96, v6 + 144);
        if (*((_DWORD *)v5 - 2) > *(_DWORD *)(v6 + 184))
        {
          result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v6 + 144, v257);
          if (*(_DWORD *)(v6 + 184) > *(_DWORD *)(v6 + 136))
          {
            result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v6 + 96, v6 + 144);
            if (*(_DWORD *)(v6 + 136) > *(_DWORD *)(v6 + 88))
            {
              v91 = v6 + 48;
              v92 = v6 + 96;
LABEL_333:
              result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v91, v92);
              if (*(_DWORD *)(v6 + 88) > *(_DWORD *)(v6 + 40))
              {
                v89 = v6;
                v90 = v10;
                return std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v89, v90);
              }
            }
          }
        }
        return result;
      default:
        if (v8 <= 1151)
        {
          v93 = (char *)(v6 + 48);
          v95 = (char *)v6 == v5 || v93 == v5;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = v6;
              do
              {
                v97 = v93;
                v98 = *(_DWORD *)(v96 + 88);
                if (v98 > *(_DWORD *)(v96 + 40))
                {
                  v268 = *v93;
                  v99 = *(_QWORD *)(v96 + 56);
                  *(_QWORD *)(v96 + 56) = 0;
                  v100 = *(_QWORD *)(v96 + 64);
                  *(_QWORD *)(v96 + 64) = 0;
                  v274 = v99;
                  v280 = *(_QWORD *)(v96 + 72);
                  *(_QWORD *)(v96 + 72) = 0;
                  v101 = *(_QWORD *)(v96 + 80);
                  v102 = v93;
                  *(_QWORD *)(v96 + 80) = 0;
                  while (1)
                  {
                    v103 = v96;
                    *v102 = *(_BYTE *)v96;
                    v104 = *((unsigned int *)v102 + 5);
                    v105 = (unsigned int *)*((_QWORD *)v102 + 1);
                    if ((_DWORD)v104)
                    {
                      v106 = 24 * v104;
                      do
                      {
                        v107 = v105[4];
                        if ((_DWORD)v107 != -1)
                          result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v107])(&v284, v105);
                        v105[4] = -1;
                        v105 += 6;
                        v106 -= 24;
                      }
                      while (v106);
                      v105 = (unsigned int *)*((_QWORD *)v102 + 1);
                    }
                    if (v105)
                    {
                      *((_QWORD *)v102 + 1) = 0;
                      *((_DWORD *)v102 + 4) = 0;
                      result = WTF::fastFree((WTF *)v105, a2);
                    }
                    v108 = *(_QWORD *)(v103 + 8);
                    *(_QWORD *)(v103 + 8) = 0;
                    *((_QWORD *)v102 + 1) = v108;
                    *((_DWORD *)v102 + 4) = *(_DWORD *)(v103 + 16);
                    LODWORD(v108) = *(_DWORD *)(v103 + 20);
                    *(_QWORD *)(v103 + 16) = 0;
                    *((_DWORD *)v102 + 5) = v108;
                    v109 = *((unsigned int *)v102 + 9);
                    v110 = (unsigned int *)*((_QWORD *)v102 + 3);
                    if ((_DWORD)v109)
                    {
                      v111 = 24 * v109;
                      do
                      {
                        v112 = v110[4];
                        if ((_DWORD)v112 != -1)
                          result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v112])(&v284, v110);
                        v110[4] = -1;
                        v110 += 6;
                        v111 -= 24;
                      }
                      while (v111);
                      v110 = (unsigned int *)*((_QWORD *)v102 + 3);
                    }
                    if (v110)
                    {
                      *((_QWORD *)v102 + 3) = 0;
                      *((_DWORD *)v102 + 8) = 0;
                      result = WTF::fastFree((WTF *)v110, a2);
                    }
                    v113 = *(_QWORD *)(v103 + 24);
                    *(_QWORD *)(v103 + 24) = 0;
                    *((_QWORD *)v102 + 3) = v113;
                    *((_DWORD *)v102 + 8) = *(_DWORD *)(v103 + 32);
                    v114 = *(_QWORD *)(v103 + 36);
                    *(_QWORD *)(v103 + 32) = 0;
                    *(_QWORD *)(v102 + 36) = v114;
                    if (v103 == v6)
                      break;
                    v96 = v103 - 48;
                    v102 = (char *)v103;
                    if (v98 <= *(_DWORD *)(v103 - 8))
                    {
                      v115 = v103;
                      goto LABEL_184;
                    }
                  }
                  v115 = v6;
LABEL_184:
                  *(_BYTE *)v115 = v268;
                  v116 = *(unsigned int *)(v115 + 20);
                  v117 = *(unsigned int **)(v103 + 8);
                  if ((_DWORD)v116)
                  {
                    v118 = 24 * v116;
                    do
                    {
                      v119 = v117[4];
                      if ((_DWORD)v119 != -1)
                        result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v119])(&v284, v117);
                      v117[4] = -1;
                      v117 += 6;
                      v118 -= 24;
                    }
                    while (v118);
                    v117 = *(unsigned int **)(v103 + 8);
                  }
                  if (v117)
                  {
                    *(_QWORD *)(v103 + 8) = 0;
                    *(_DWORD *)(v115 + 16) = 0;
                    result = WTF::fastFree((WTF *)v117, a2);
                  }
                  *(_QWORD *)(v103 + 8) = v274;
                  *(_QWORD *)(v115 + 16) = v100;
                  v120 = *(unsigned int *)(v115 + 36);
                  v121 = *(unsigned int **)(v115 + 24);
                  if ((_DWORD)v120)
                  {
                    v122 = 24 * v120;
                    do
                    {
                      v123 = v121[4];
                      if ((_DWORD)v123 != -1)
                        result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v123])(&v284, v121);
                      v121[4] = -1;
                      v121 += 6;
                      v122 -= 24;
                    }
                    while (v122);
                    v121 = *(unsigned int **)(v115 + 24);
                  }
                  if (v121)
                  {
                    *(_QWORD *)(v115 + 24) = 0;
                    *(_DWORD *)(v115 + 32) = 0;
                    result = WTF::fastFree((WTF *)v121, a2);
                  }
                  *(_QWORD *)(v115 + 24) = v280;
                  *(_QWORD *)(v115 + 32) = v101;
                  *(_DWORD *)(v115 + 40) = v98;
                }
                v93 = v97 + 48;
                v96 = (uint64_t)v97;
              }
              while (v97 + 48 != v5);
            }
            return result;
          }
          if (v95)
            return result;
          v212 = 0;
          v213 = 1;
          v214 = v6;
          while (1)
          {
            v215 = v213;
            v272 = *(_DWORD *)(v214 + 88);
            if (v272 > *(_DWORD *)(v214 + 40))
              break;
LABEL_374:
            v214 = v6 + 48 * v215;
            v213 = v215 + 1;
            v93 = (char *)(v214 + 48);
            v212 = v215;
            if ((char *)(v214 + 48) == v5)
              return result;
          }
          v256 = *v93;
          v257 = *(_QWORD *)(v214 + 56);
          v262 = v213;
          *(_QWORD *)(v214 + 56) = 0;
          v216 = *(_QWORD *)(v214 + 64);
          *(_QWORD *)(v214 + 64) = 0;
          v254 = *(unsigned int **)(v214 + 72);
          *(_QWORD *)(v214 + 72) = 0;
          v217 = *(_QWORD *)(v214 + 80);
          *(_QWORD *)(v214 + 80) = 0;
          do
          {
            v218 = v212;
            v283 = (char *)(v6 + 48 * v212);
            v219 = (uint64_t *)(v283 + 8);
            *v93 = *v283;
            v220 = *((unsigned int *)v93 + 5);
            v221 = (unsigned int *)*((_QWORD *)v93 + 1);
            if ((_DWORD)v220)
            {
              v222 = 24 * v220;
              do
              {
                v223 = v221[4];
                if ((_DWORD)v223 != -1)
                  result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v223])(&v284, v221);
                v221[4] = -1;
                v221 += 6;
                v222 -= 24;
              }
              while (v222);
              v221 = (unsigned int *)*((_QWORD *)v93 + 1);
            }
            if (v221)
            {
              *((_QWORD *)v93 + 1) = 0;
              *((_DWORD *)v93 + 4) = 0;
              result = WTF::fastFree((WTF *)v221, a2);
            }
            v224 = *v219;
            *v219 = 0;
            *((_QWORD *)v93 + 1) = v224;
            v225 = v6 + 48 * v218;
            v226 = *(_DWORD *)(v225 + 16);
            v277 = (_DWORD *)(v225 + 16);
            *(_DWORD *)(v225 + 16) = 0;
            *((_DWORD *)v93 + 4) = v226;
            v227 = *(_DWORD *)(v225 + 20);
            v10 = v225 + 20;
            *(_DWORD *)v10 = 0;
            *((_DWORD *)v93 + 5) = v227;
            v228 = *((unsigned int *)v93 + 9);
            v229 = (unsigned int *)*((_QWORD *)v93 + 3);
            if ((_DWORD)v228)
            {
              v230 = 24 * v228;
              do
              {
                v231 = v229[4];
                if ((_DWORD)v231 != -1)
                  result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v231])(&v284, v229);
                v229[4] = -1;
                v229 += 6;
                v230 -= 24;
              }
              while (v230);
              v229 = (unsigned int *)*((_QWORD *)v93 + 3);
            }
            v266 = (unsigned int **)(v283 + 8);
            if (v229)
            {
              *((_QWORD *)v93 + 3) = 0;
              *((_DWORD *)v93 + 8) = 0;
              result = WTF::fastFree((WTF *)v229, a2);
            }
            v232 = v218;
            v233 = v6 + 48 * v218;
            v235 = (_DWORD *)(v233 + 32);
            v234 = *(_DWORD *)(v233 + 32);
            *(_DWORD *)(v233 + 32) = 0;
            *((_DWORD *)v93 + 8) = v234;
            v237 = *(_QWORD *)(v233 + 36);
            v236 = (_DWORD *)(v233 + 36);
            v239 = (unsigned int **)(v236 - 3);
            v238 = *(_QWORD *)(v236 - 3);
            *(_QWORD *)(v236 - 3) = 0;
            *((_QWORD *)v93 + 3) = v238;
            *v236 = 0;
            *(_QWORD *)(v93 + 36) = v237;
            if (v232 == -1)
              goto LABEL_378;
            v212 = v232 - 1;
            v93 = v283;
          }
          while (v272 > *(_DWORD *)(v6 + 48 * (v232 - 1) + 40));
          v252 = v232;
          *v283 = v256;
          v240 = *(unsigned int *)v10;
          v241 = *v266;
          if ((_DWORD)v240)
          {
            v242 = 24 * v240;
            v243 = v254;
            v244 = v277;
            do
            {
              v245 = v241[4];
              if ((_DWORD)v245 != -1)
              {
                result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v245])(&v284, v241);
                v244 = v277;
              }
              v241[4] = -1;
              v241 += 6;
              v242 -= 24;
            }
            while (v242);
            v241 = *v266;
          }
          else
          {
            v243 = v254;
            v244 = v277;
          }
          if (v241)
          {
            *v266 = 0;
            *v244 = 0;
            result = WTF::fastFree((WTF *)v241, a2);
            v244 = v277;
          }
          *v266 = (unsigned int *)v257;
          *(_QWORD *)v244 = v216;
          v246 = *v236;
          v247 = *v239;
          if ((_DWORD)v246)
          {
            v248 = 24 * v246;
            do
            {
              v249 = v247[4];
              if ((_DWORD)v249 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v249])(&v284, v247);
              v247[4] = -1;
              v247 += 6;
              v248 -= 24;
            }
            while (v248);
            v247 = *v239;
            if (!*v239)
              goto LABEL_373;
          }
          else if (!v247)
          {
            goto LABEL_373;
          }
          *v239 = 0;
          *v235 = 0;
          result = WTF::fastFree((WTF *)v247, a2);
LABEL_373:
          *v239 = v243;
          *(_QWORD *)v235 = v217;
          *(_DWORD *)(v6 + 48 * v252 + 40) = v272;
          v215 = v262;
          goto LABEL_374;
        }
        if (!a3)
        {
          if ((char *)v6 == v5)
            return result;
          v124 = (unint64_t)(v9 - 2) >> 1;
          v125 = v124;
          do
          {
            v126 = v125;
            if (v124 >= v125)
            {
              v127 = (2 * v125) | 1;
              v128 = v6 + 48 * v127;
              if (2 * v126 + 2 < v9)
              {
                v129 = *(_DWORD *)(v128 + 40);
                v130 = *(_DWORD *)(v128 + 88);
                v128 += 48 * (v129 > v130);
                if (v129 > v130)
                  v127 = 2 * v126 + 2;
              }
              v131 = v6 + 48 * v126;
              v132 = *(_DWORD *)(v131 + 40);
              if (*(_DWORD *)(v128 + 40) <= v132)
              {
                v269 = *(_BYTE *)v131;
                v133 = (_QWORD *)(v6 + 48 * v126);
                v134 = v133[1];
                v133[1] = 0;
                v135 = v133[2];
                v133[2] = 0;
                v275 = v134;
                v281 = v133[3];
                v133[3] = 0;
                v136 = v133[4];
                v133[4] = 0;
                do
                {
                  v137 = v131;
                  v131 = v128;
                  result = WebCore::ContentExtensions::ModifyHeadersAction::operator=(v137, (_BYTE *)v128);
                  if (v124 < v127)
                    break;
                  v138 = (2 * v127) | 1;
                  v128 = v6 + 48 * v138;
                  if (2 * v127 + 2 < v9)
                  {
                    v139 = *(_DWORD *)(v128 + 40);
                    v140 = *(_DWORD *)(v128 + 88);
                    v128 += 48 * (v139 > v140);
                    if (v139 > v140)
                      v138 = 2 * v127 + 2;
                  }
                  v127 = v138;
                }
                while (*(_DWORD *)(v128 + 40) <= v132);
                *(_BYTE *)v131 = v269;
                v141 = *(unsigned int *)(v131 + 20);
                v142 = *(unsigned int **)(v131 + 8);
                if ((_DWORD)v141)
                {
                  v143 = 24 * v141;
                  do
                  {
                    v144 = v142[4];
                    if ((_DWORD)v144 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v144])(&v284, v142);
                    v142[4] = -1;
                    v142 += 6;
                    v143 -= 24;
                  }
                  while (v143);
                  v142 = *(unsigned int **)(v131 + 8);
                  v124 = (unint64_t)(v9 - 2) >> 1;
                }
                if (v142)
                {
                  *(_QWORD *)(v131 + 8) = 0;
                  *(_DWORD *)(v131 + 16) = 0;
                  result = WTF::fastFree((WTF *)v142, a2);
                }
                *(_QWORD *)(v131 + 8) = v275;
                *(_QWORD *)(v131 + 16) = v135;
                v145 = *(unsigned int *)(v131 + 36);
                v146 = *(unsigned int **)(v131 + 24);
                if ((_DWORD)v145)
                {
                  v147 = 24 * v145;
                  do
                  {
                    v148 = v146[4];
                    if ((_DWORD)v148 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v148])(&v284, v146);
                    v146[4] = -1;
                    v146 += 6;
                    v147 -= 24;
                  }
                  while (v147);
                  v146 = *(unsigned int **)(v131 + 24);
                  v124 = (unint64_t)(v9 - 2) >> 1;
                }
                if (v146)
                {
                  *(_QWORD *)(v131 + 24) = 0;
                  *(_DWORD *)(v131 + 32) = 0;
                  result = WTF::fastFree((WTF *)v146, a2);
                }
                *(_QWORD *)(v131 + 24) = v281;
                *(_QWORD *)(v131 + 32) = v136;
                *(_DWORD *)(v131 + 40) = v132;
              }
            }
            v125 = v126 - 1;
          }
          while (v126);
          v149 = v8 / 0x30uLL;
          while (1)
          {
            v150 = 0;
            v151 = *(_BYTE *)v6;
            v255 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            v253 = *(_DWORD *)(v6 + 16);
            v250 = v151;
            v251 = *(_DWORD *)(v6 + 20);
            *(_QWORD *)(v6 + 16) = 0;
            v264 = *(_QWORD *)(v6 + 24);
            v270 = v5;
            *(_QWORD *)(v6 + 24) = 0;
            v260 = *(_DWORD *)(v6 + 32);
            v258 = *(_DWORD *)(v6 + 36);
            *(_QWORD *)(v6 + 32) = 0;
            v282 = v149;
            v152 = (v149 - 2) >> 1;
            v153 = v6;
            v276 = *(_DWORD *)(v6 + 40);
            do
            {
              v154 = v153 + 48 * v150 + 48;
              v155 = 2 * v150;
              v150 = (2 * v150) | 1;
              v156 = v155 + 2;
              if (v155 + 2 < v282)
              {
                v157 = *(_DWORD *)(v154 + 40);
                v158 = *(_DWORD *)(v154 + 88);
                v154 += 48 * (v157 > v158);
                if (v157 > v158)
                  v150 = v156;
              }
              *(_BYTE *)v153 = *(_BYTE *)v154;
              v159 = *(unsigned int *)(v153 + 20);
              v160 = *(unsigned int **)(v153 + 8);
              if ((_DWORD)v159)
              {
                v161 = 24 * v159;
                do
                {
                  v162 = v160[4];
                  if ((_DWORD)v162 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v162])(&v284, v160);
                  v160[4] = -1;
                  v160 += 6;
                  v161 -= 24;
                }
                while (v161);
                v160 = *(unsigned int **)(v153 + 8);
              }
              if (v160)
              {
                *(_QWORD *)(v153 + 8) = 0;
                *(_DWORD *)(v153 + 16) = 0;
                result = WTF::fastFree((WTF *)v160, a2);
              }
              v163 = *(_QWORD *)(v154 + 8);
              *(_QWORD *)(v154 + 8) = 0;
              *(_QWORD *)(v153 + 8) = v163;
              LODWORD(v163) = *(_DWORD *)(v154 + 16);
              *(_DWORD *)(v154 + 16) = 0;
              *(_DWORD *)(v153 + 16) = v163;
              LODWORD(v163) = *(_DWORD *)(v154 + 20);
              *(_DWORD *)(v154 + 20) = 0;
              *(_DWORD *)(v153 + 20) = v163;
              v164 = *(unsigned int *)(v153 + 36);
              v165 = *(unsigned int **)(v153 + 24);
              if ((_DWORD)v164)
              {
                v166 = 24 * v164;
                do
                {
                  v167 = v165[4];
                  if ((_DWORD)v167 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v167])(&v284, v165);
                  v165[4] = -1;
                  v165 += 6;
                  v166 -= 24;
                }
                while (v166);
                v165 = *(unsigned int **)(v153 + 24);
              }
              if (v165)
              {
                *(_QWORD *)(v153 + 24) = 0;
                *(_DWORD *)(v153 + 32) = 0;
                result = WTF::fastFree((WTF *)v165, a2);
              }
              v168 = *(_QWORD *)(v154 + 24);
              *(_QWORD *)(v154 + 24) = 0;
              *(_QWORD *)(v153 + 24) = v168;
              LODWORD(v168) = *(_DWORD *)(v154 + 32);
              *(_DWORD *)(v154 + 32) = 0;
              *(_DWORD *)(v153 + 32) = v168;
              v169 = *(_QWORD *)(v154 + 36);
              *(_DWORD *)(v154 + 36) = 0;
              *(_QWORD *)(v153 + 36) = v169;
              v153 = v154;
            }
            while (v150 <= v152);
            v5 = v270 - 48;
            if ((char *)v154 == v270 - 48)
            {
              *(_BYTE *)v154 = v250;
              v204 = *(unsigned int *)(v154 + 20);
              v205 = *(unsigned int **)(v154 + 8);
              if ((_DWORD)v204)
              {
                v206 = 24 * v204;
                do
                {
                  v207 = v205[4];
                  if ((_DWORD)v207 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v207])(&v284, v205);
                  v205[4] = -1;
                  v205 += 6;
                  v206 -= 24;
                }
                while (v206);
                v205 = *(unsigned int **)(v154 + 8);
              }
              if (v205)
              {
                *(_QWORD *)(v154 + 8) = 0;
                *(_DWORD *)(v154 + 16) = 0;
                result = WTF::fastFree((WTF *)v205, a2);
              }
              *(_QWORD *)(v154 + 8) = v255;
              *(_DWORD *)(v154 + 16) = v253;
              *(_DWORD *)(v154 + 20) = v251;
              v208 = *(unsigned int *)(v154 + 36);
              v209 = *(unsigned int **)(v154 + 24);
              if ((_DWORD)v208)
              {
                v210 = 24 * v208;
                do
                {
                  v211 = v209[4];
                  if ((_DWORD)v211 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v211])(&v284, v209);
                  v209[4] = -1;
                  v209 += 6;
                  v210 -= 24;
                }
                while (v210);
                v209 = *(unsigned int **)(v154 + 24);
              }
              if (v209)
              {
                *(_QWORD *)(v154 + 24) = 0;
                *(_DWORD *)(v154 + 32) = 0;
                result = WTF::fastFree((WTF *)v209, a2);
              }
              *(_QWORD *)(v154 + 24) = v264;
              *(_DWORD *)(v154 + 32) = v260;
              *(_DWORD *)(v154 + 36) = v258;
            }
            else
            {
              result = WebCore::ContentExtensions::ModifyHeadersAction::operator=(v154, v270 - 48);
              *(v270 - 48) = v250;
              v170 = *((unsigned int *)v270 - 7);
              v171 = (unsigned int *)*((_QWORD *)v270 - 5);
              if ((_DWORD)v170)
              {
                v172 = 24 * v170;
                do
                {
                  v173 = v171[4];
                  if ((_DWORD)v173 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v173])(&v284, v171);
                  v171[4] = -1;
                  v171 += 6;
                  v172 -= 24;
                }
                while (v172);
                v171 = (unsigned int *)*((_QWORD *)v270 - 5);
              }
              if (v171)
              {
                *((_QWORD *)v270 - 5) = 0;
                *((_DWORD *)v270 - 8) = 0;
                result = WTF::fastFree((WTF *)v171, a2);
              }
              *((_QWORD *)v270 - 5) = v255;
              *((_DWORD *)v270 - 8) = v253;
              *((_DWORD *)v270 - 7) = v251;
              v174 = *((unsigned int *)v270 - 3);
              v175 = (unsigned int *)*((_QWORD *)v270 - 3);
              if ((_DWORD)v174)
              {
                v176 = 24 * v174;
                do
                {
                  v177 = v175[4];
                  if ((_DWORD)v177 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v177])(&v284, v175);
                  v175[4] = -1;
                  v175 += 6;
                  v176 -= 24;
                }
                while (v176);
                v175 = (unsigned int *)*((_QWORD *)v270 - 3);
              }
              if (v175)
              {
                *((_QWORD *)v270 - 3) = 0;
                *((_DWORD *)v270 - 4) = 0;
                result = WTF::fastFree((WTF *)v175, a2);
              }
              *((_QWORD *)v270 - 3) = v264;
              *((_DWORD *)v270 - 4) = v260;
              *((_DWORD *)v270 - 3) = v258;
              *((_DWORD *)v270 - 2) = v276;
              v178 = v154 + 48 - v6;
              if (v178 < 49)
                goto LABEL_329;
              v179 = (v178 / 0x30uLL - 2) >> 1;
              v180 = v6 + 48 * v179;
              v276 = *(_DWORD *)(v154 + 40);
              if (*(_DWORD *)(v180 + 40) <= v276)
                goto LABEL_329;
              v261 = *(_BYTE *)v154;
              v181 = *(_QWORD *)(v154 + 8);
              *(_QWORD *)(v154 + 8) = 0;
              v182 = *(_QWORD *)(v154 + 16);
              *(_QWORD *)(v154 + 16) = 0;
              v265 = v181;
              v271 = *(_QWORD *)(v154 + 24);
              *(_QWORD *)(v154 + 24) = 0;
              v183 = *(_QWORD *)(v154 + 32);
              v184 = v154;
              *(_QWORD *)(v154 + 32) = 0;
              do
              {
                v154 = v180;
                *(_BYTE *)v184 = *(_BYTE *)v180;
                v185 = *(unsigned int *)(v184 + 20);
                v186 = *(unsigned int **)(v184 + 8);
                if ((_DWORD)v185)
                {
                  v187 = 24 * v185;
                  do
                  {
                    v188 = v186[4];
                    if ((_DWORD)v188 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v188])(&v284, v186);
                    v186[4] = -1;
                    v186 += 6;
                    v187 -= 24;
                  }
                  while (v187);
                  v186 = *(unsigned int **)(v184 + 8);
                }
                if (v186)
                {
                  *(_QWORD *)(v184 + 8) = 0;
                  *(_DWORD *)(v184 + 16) = 0;
                  result = WTF::fastFree((WTF *)v186, a2);
                }
                v189 = *(_QWORD *)(v154 + 8);
                *(_QWORD *)(v154 + 8) = 0;
                *(_QWORD *)(v184 + 8) = v189;
                LODWORD(v189) = *(_DWORD *)(v154 + 16);
                *(_DWORD *)(v154 + 16) = 0;
                *(_DWORD *)(v184 + 16) = v189;
                LODWORD(v189) = *(_DWORD *)(v154 + 20);
                *(_DWORD *)(v154 + 20) = 0;
                *(_DWORD *)(v184 + 20) = v189;
                v190 = *(unsigned int *)(v184 + 36);
                v191 = *(unsigned int **)(v184 + 24);
                if ((_DWORD)v190)
                {
                  v192 = 24 * v190;
                  do
                  {
                    v193 = v191[4];
                    if ((_DWORD)v193 != -1)
                      result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v193])(&v284, v191);
                    v191[4] = -1;
                    v191 += 6;
                    v192 -= 24;
                  }
                  while (v192);
                  v191 = *(unsigned int **)(v184 + 24);
                }
                if (v191)
                {
                  *(_QWORD *)(v184 + 24) = 0;
                  *(_DWORD *)(v184 + 32) = 0;
                  result = WTF::fastFree((WTF *)v191, a2);
                }
                v194 = *(_QWORD *)(v154 + 24);
                *(_QWORD *)(v154 + 24) = 0;
                *(_QWORD *)(v184 + 24) = v194;
                LODWORD(v194) = *(_DWORD *)(v154 + 32);
                *(_DWORD *)(v154 + 32) = 0;
                *(_DWORD *)(v184 + 32) = v194;
                v195 = *(_QWORD *)(v154 + 36);
                *(_DWORD *)(v154 + 36) = 0;
                *(_QWORD *)(v184 + 36) = v195;
                if (!v179)
                  break;
                v179 = (v179 - 1) >> 1;
                v180 = v6 + 48 * v179;
                v184 = v154;
              }
              while (*(_DWORD *)(v180 + 40) > v276);
              *(_BYTE *)v154 = v261;
              v196 = *(unsigned int *)(v154 + 20);
              v197 = *(unsigned int **)(v154 + 8);
              if ((_DWORD)v196)
              {
                v198 = 24 * v196;
                do
                {
                  v199 = v197[4];
                  if ((_DWORD)v199 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v199])(&v284, v197);
                  v197[4] = -1;
                  v197 += 6;
                  v198 -= 24;
                }
                while (v198);
                v197 = *(unsigned int **)(v154 + 8);
              }
              if (v197)
              {
                *(_QWORD *)(v154 + 8) = 0;
                *(_DWORD *)(v154 + 16) = 0;
                result = WTF::fastFree((WTF *)v197, a2);
              }
              *(_QWORD *)(v154 + 8) = v265;
              *(_QWORD *)(v154 + 16) = v182;
              v200 = *(unsigned int *)(v154 + 36);
              v201 = *(unsigned int **)(v154 + 24);
              if ((_DWORD)v200)
              {
                v202 = 24 * v200;
                do
                {
                  v203 = v201[4];
                  if ((_DWORD)v203 != -1)
                    result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v203])(&v284, v201);
                  v201[4] = -1;
                  v201 += 6;
                  v202 -= 24;
                }
                while (v202);
                v201 = *(unsigned int **)(v154 + 24);
              }
              if (v201)
              {
                *(_QWORD *)(v154 + 24) = 0;
                *(_DWORD *)(v154 + 32) = 0;
                result = WTF::fastFree((WTF *)v201, a2);
              }
              *(_QWORD *)(v154 + 24) = v271;
              *(_QWORD *)(v154 + 32) = v183;
            }
            *(_DWORD *)(v154 + 40) = v276;
LABEL_329:
            v149 = v282 - 1;
            if (v282 <= 2)
              return result;
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v6 + 48 * ((unint64_t)v9 >> 1);
        v12 = *((_DWORD *)v5 - 2);
        if ((unint64_t)v8 >= 0x1801)
        {
          v13 = *(_DWORD *)(v11 + 40);
          if (v13 <= *(_DWORD *)(v6 + 40))
          {
            if (v12 <= v13
              || (std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v11, v257),
                  *(_DWORD *)(v11 + 40) <= *(_DWORD *)(v6 + 40)))
            {
LABEL_21:
              v19 = v6 + 48 * v10;
              v20 = v19 - 48;
              v21 = *(_DWORD *)(v19 - 8);
              v22 = *((_DWORD *)v5 - 14);
              if (v21 <= *(_DWORD *)(v6 + 88))
              {
                if (v22 <= v21
                  || (std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v20, (uint64_t)(v5 - 96)),
                      *(_DWORD *)(v20 + 40) <= *(_DWORD *)(v6 + 88)))
                {
LABEL_33:
                  v25 = v6 + 48 * v10;
                  v26 = v25 + 48;
                  v27 = *(_DWORD *)(v25 + 88);
                  v28 = *((_DWORD *)v5 - 26);
                  if (v27 <= *(_DWORD *)(v6 + 136))
                  {
                    if (v28 <= v27
                      || (std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v26, (uint64_t)(v5 - 144)), *(_DWORD *)(v26 + 40) <= *(_DWORD *)(v6 + 136)))
                    {
LABEL_42:
                      v31 = *(_DWORD *)(v11 + 40);
                      v32 = *(_DWORD *)(v26 + 40);
                      if (v31 <= *(_DWORD *)(v20 + 40))
                      {
                        if (v32 <= v31)
                          goto LABEL_51;
                        std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v11, v26);
                        if (*(_DWORD *)(v11 + 40) <= *(_DWORD *)(v20 + 40))
                          goto LABEL_51;
                        v33 = v20;
                        v34 = v11;
                      }
                      else
                      {
                        v33 = v20;
                        if (v32 <= v31)
                        {
                          std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v20, v11);
                          if (*(_DWORD *)(v26 + 40) <= *(_DWORD *)(v11 + 40))
                          {
LABEL_51:
                            v17 = v6;
                            v18 = v11;
                            goto LABEL_52;
                          }
                          v33 = v11;
                        }
                        v34 = v26;
                      }
                      std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v33, v34);
                      goto LABEL_51;
                    }
                    v29 = v6 + 96;
                    v30 = v26;
                  }
                  else
                  {
                    v29 = v6 + 96;
                    if (v28 <= v27)
                    {
                      std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v29, v26);
                      if (*((_DWORD *)v5 - 26) <= *(_DWORD *)(v26 + 40))
                        goto LABEL_42;
                      v29 = v26;
                    }
                    v30 = (uint64_t)(v5 - 144);
                  }
                  std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v29, v30);
                  goto LABEL_42;
                }
                v23 = v6 + 48;
                v24 = v20;
              }
              else
              {
                v23 = v6 + 48;
                if (v22 <= v21)
                {
                  std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v23, v20);
                  if (*((_DWORD *)v5 - 14) <= *(_DWORD *)(v20 + 40))
                    goto LABEL_33;
                  v23 = v20;
                }
                v24 = (uint64_t)(v5 - 96);
              }
              std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v23, v24);
              goto LABEL_33;
            }
            v14 = v6;
            v15 = v11;
          }
          else
          {
            v14 = v6;
            if (v12 <= v13)
            {
              std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v6, v11);
              if (*((_DWORD *)v5 - 2) <= *(_DWORD *)(v11 + 40))
                goto LABEL_21;
              v14 = v11;
            }
            v15 = (uint64_t)(v5 - 48);
          }
          std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v14, v15);
          goto LABEL_21;
        }
        v16 = *(_DWORD *)(v6 + 40);
        if (v16 > *(_DWORD *)(v11 + 40))
        {
          v17 = v11;
          if (v12 <= v16)
          {
            result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v11, v6);
            if (*((_DWORD *)v5 - 2) <= *(_DWORD *)(v6 + 40))
              goto LABEL_53;
            v17 = v6;
          }
          v18 = (uint64_t)(v5 - 48);
          goto LABEL_52;
        }
        if (v12 > v16)
        {
          result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v6, v257);
          if (*(_DWORD *)(v6 + 40) > *(_DWORD *)(v11 + 40))
          {
            v17 = v11;
            v18 = v6;
LABEL_52:
            result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v17, v18);
          }
        }
LABEL_53:
        v35 = a3 - 1;
        if ((a4 & 1) != 0)
        {
          v36 = *(_DWORD *)(v6 + 40);
LABEL_56:
          v37 = 0;
          v38 = *(_BYTE *)v6;
          v39 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          v40 = *(_QWORD *)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          v41 = *(_QWORD *)(v6 + 24);
          *(_QWORD *)(v6 + 24) = 0;
          v42 = *(_QWORD *)(v6 + 32);
          *(_QWORD *)(v6 + 32) = 0;
          do
          {
            if ((char *)(v6 + v37 + 48) == v5)
              goto LABEL_378;
            v43 = *(_DWORD *)(v6 + v37 + 88);
            v37 += 48;
          }
          while (v43 > v36);
          v278 = v35;
          v10 = v6 + v37;
          v44 = v5;
          if (v37 != 48)
          {
            while (v44 != (char *)v6)
            {
              v45 = (unint64_t)(v44 - 48);
              v46 = *((_DWORD *)v44 - 2);
              v44 -= 48;
              if (v46 > v36)
                goto LABEL_68;
            }
            goto LABEL_378;
          }
          v47 = v5;
          while (v10 < (unint64_t)v47)
          {
            v45 = (unint64_t)(v47 - 48);
            v48 = *((_DWORD *)v47 - 2);
            v47 -= 48;
            if (v48 > v36)
              goto LABEL_68;
          }
          v45 = (unint64_t)v47;
LABEL_68:
          v263 = v39;
          v267 = v41;
          v7 = (char *)v10;
          if (v10 < v45)
          {
            v49 = v45;
            do
            {
              std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)v7, v49);
              v50 = v7 + 48;
              do
              {
                if (v50 == v5)
                  goto LABEL_378;
                v51 = *((_DWORD *)v50 + 10);
                v50 += 48;
              }
              while (v51 > v36);
              v7 = v50 - 48;
              do
              {
                if (v49 == v6)
                  goto LABEL_378;
                v52 = v49 - 48;
                v53 = *(_DWORD *)(v49 - 8);
                v49 -= 48;
              }
              while (v53 <= v36);
              v49 = v52;
            }
            while ((unint64_t)v7 < v52);
            v39 = v263;
          }
          if (v7 - 48 != (char *)v6)
            WebCore::ContentExtensions::ModifyHeadersAction::operator=(v6, v7 - 48);
          v259 = v7 - 48;
          *(v7 - 48) = v38;
          v54 = *((unsigned int *)v7 - 7);
          v55 = (unsigned int *)*((_QWORD *)v7 - 5);
          if ((_DWORD)v54)
          {
            v56 = 24 * v54;
            do
            {
              v57 = v55[4];
              if ((_DWORD)v57 != -1)
                ((void (*)(char *, unsigned int *))off_1E33954E0[v57])(&v284, v55);
              v55[4] = -1;
              v55 += 6;
              v56 -= 24;
            }
            while (v56);
            v55 = (unsigned int *)*((_QWORD *)v7 - 5);
            v39 = v263;
          }
          if (v55)
          {
            *((_QWORD *)v7 - 5) = 0;
            *((_DWORD *)v7 - 8) = 0;
            WTF::fastFree((WTF *)v55, a2);
          }
          *((_QWORD *)v7 - 5) = v39;
          *((_QWORD *)v7 - 4) = v40;
          v58 = *((unsigned int *)v7 - 3);
          v59 = (unsigned int *)*((_QWORD *)v7 - 3);
          if ((_DWORD)v58)
          {
            v60 = 24 * v58;
            do
            {
              v61 = v59[4];
              if ((_DWORD)v61 != -1)
                ((void (*)(char *, unsigned int *))off_1E33954E0[v61])(&v284, v59);
              v59[4] = -1;
              v59 += 6;
              v60 -= 24;
            }
            while (v60);
            v59 = (unsigned int *)*((_QWORD *)v7 - 3);
          }
          if (v59)
          {
            *((_QWORD *)v7 - 3) = 0;
            *((_DWORD *)v7 - 4) = 0;
            WTF::fastFree((WTF *)v59, a2);
          }
          *((_QWORD *)v7 - 3) = v267;
          *((_QWORD *)v7 - 2) = v42;
          *((_DWORD *)v7 - 2) = v36;
          v62 = v10 >= v45;
          a3 = v278;
          if (!v62)
            goto LABEL_100;
          v63 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>((_DWORD *)v6, v259);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>(v7, v5);
          if (!(_DWORD)result)
          {
            if (v63)
              continue;
LABEL_100:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *,false>(v6, v259, v278, a4 & 1);
            a4 = 0;
            continue;
          }
          v5 = v7 - 48;
          if (v63)
            return result;
          goto LABEL_2;
        }
        v36 = *(_DWORD *)(v6 + 40);
        if (*(_DWORD *)(v6 - 8) > v36)
          goto LABEL_56;
        v64 = *(_BYTE *)v6;
        v10 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v6 + 8) = 0;
        v65 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        v66 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v67 = *(_QWORD *)(v6 + 32);
        *(_QWORD *)(v6 + 32) = 0;
        v279 = v66;
        v68 = (char *)(v6 + 48);
        if (v36 <= *((_DWORD *)v5 - 2))
        {
          do
          {
            v7 = v68;
            if (v68 >= v5)
              break;
            v70 = *((_DWORD *)v68 + 10);
            v68 += 48;
          }
          while (v36 <= v70);
        }
        else
        {
          do
          {
            if (v68 == v5)
              goto LABEL_378;
            v69 = *((_DWORD *)v68 + 10);
            v68 += 48;
          }
          while (v36 <= v69);
          v7 = v68 - 48;
        }
        v71 = v35;
        v72 = (unint64_t)v5;
        if (v7 >= v5)
        {
LABEL_111:
          if ((unint64_t)v7 < v72)
          {
            do
            {
              result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)v7, v72);
              v75 = v7 + 48;
              do
              {
                if (v75 == v5)
                  goto LABEL_378;
                v76 = *((_DWORD *)v75 + 10);
                v75 += 48;
              }
              while (v36 <= v76);
              v7 = v75 - 48;
              do
              {
                if (v72 == v6)
                  goto LABEL_378;
                v77 = v72 - 48;
                v78 = *(_DWORD *)(v72 - 8);
                v72 -= 48;
              }
              while (v36 > v78);
              v72 = v77;
            }
            while ((unint64_t)v7 < v77);
          }
          a2 = v7 - 48;
          a3 = v71;
          if (v7 - 48 != (char *)v6)
            result = WebCore::ContentExtensions::ModifyHeadersAction::operator=(v6, a2);
          *(v7 - 48) = v64;
          v79 = *((unsigned int *)v7 - 7);
          v80 = (unsigned int *)*((_QWORD *)v7 - 5);
          if ((_DWORD)v79)
          {
            v81 = 24 * v79;
            do
            {
              v82 = v80[4];
              if ((_DWORD)v82 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v82])(&v284, v80);
              v80[4] = -1;
              v80 += 6;
              v81 -= 24;
            }
            while (v81);
            v80 = (unsigned int *)*((_QWORD *)v7 - 5);
            a3 = v71;
          }
          if (v80)
          {
            *((_QWORD *)v7 - 5) = 0;
            *((_DWORD *)v7 - 8) = 0;
            result = WTF::fastFree((WTF *)v80, a2);
          }
          *((_QWORD *)v7 - 5) = v10;
          *((_QWORD *)v7 - 4) = v65;
          v83 = *((unsigned int *)v7 - 3);
          v84 = (unsigned int *)*((_QWORD *)v7 - 3);
          if ((_DWORD)v83)
          {
            v85 = 24 * v83;
            do
            {
              v86 = v84[4];
              if ((_DWORD)v86 != -1)
                result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v86])(&v284, v84);
              v84[4] = -1;
              v84 += 6;
              v85 -= 24;
            }
            while (v85);
            v84 = (unsigned int *)*((_QWORD *)v7 - 3);
          }
          if (v84)
          {
            *((_QWORD *)v7 - 3) = 0;
            *((_DWORD *)v7 - 4) = 0;
            result = WTF::fastFree((WTF *)v84, a2);
          }
          a4 = 0;
          *((_QWORD *)v7 - 3) = v279;
          *((_QWORD *)v7 - 2) = v67;
          *((_DWORD *)v7 - 2) = v36;
          continue;
        }
        v73 = v5;
        while (v73 != (char *)v6)
        {
          v72 = (unint64_t)(v73 - 48);
          v74 = *((_DWORD *)v73 - 2);
          v73 -= 48;
          if (v36 <= v74)
            goto LABEL_111;
        }
LABEL_378:
        __break(1u);
LABEL_379:
        result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v6, v10);
        if (*((_DWORD *)v5 - 2) > *(_DWORD *)(v6 + 88))
        {
          v89 = v10;
LABEL_146:
          v90 = v257;
          return std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v89, v90);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 2) > a1[10])
      {
        v6 = (uint64_t)(a2 - 12);
        v7 = (uint64_t)a1;
        goto LABEL_54;
      }
      return result;
    case 3uLL:
      v8 = (uint64_t)(a1 + 12);
      v9 = (uint64_t)(a2 - 12);
      v10 = a1[22];
      v11 = *(a2 - 2);
      if (v10 > a1[10])
      {
        if (v11 <= v10)
        {
          std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)a1, (uint64_t)(a1 + 12));
          if (*(v2 - 2) <= a1[22])
            return 1;
          v7 = (uint64_t)(a1 + 12);
        }
        else
        {
          v7 = (uint64_t)a1;
        }
        v6 = (uint64_t)(v2 - 12);
        goto LABEL_54;
      }
      if (v11 > v10)
        goto LABEL_18;
      return result;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>((uint64_t)a1, (uint64_t)(a1 + 12), (uint64_t)(a1 + 24), (uint64_t)(a2 - 12));
      return 1;
    case 5uLL:
      v8 = (uint64_t)(a1 + 12);
      v9 = (uint64_t)(a1 + 24);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>((uint64_t)a1, (uint64_t)(a1 + 12), (uint64_t)(a1 + 24), (uint64_t)(a1 + 36));
      if (*(v2 - 2) > a1[46])
      {
        std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)(a1 + 36), (uint64_t)(v2 - 12));
        if (a1[46] > a1[34])
        {
          std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)(a1 + 24), (uint64_t)(a1 + 36));
          if (a1[34] > a1[22])
          {
LABEL_18:
            std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v8, v9);
            if (a1[22] > a1[10])
            {
              v7 = (uint64_t)a1;
              v6 = v8;
LABEL_54:
              std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 24;
      v13 = a1[22];
      v14 = a1[34];
      if (v13 > a1[10])
      {
        v15 = (uint64_t)a1;
        if (v14 <= v13)
        {
          std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)a1, (uint64_t)(a1 + 12));
          if (a1[34] <= a1[22])
            goto LABEL_24;
          v15 = (uint64_t)(a1 + 12);
        }
        v16 = (uint64_t)(a1 + 24);
        goto LABEL_23;
      }
      if (v14 > v13)
      {
        std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>((uint64_t)(a1 + 12), (uint64_t)(a1 + 24));
        if (a1[22] > a1[10])
        {
          v15 = (uint64_t)a1;
          v16 = (uint64_t)(a1 + 12);
LABEL_23:
          std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v15, v16);
        }
      }
LABEL_24:
      v17 = a1 + 36;
      if (a1 + 36 == v2)
        return 1;
      v18 = 0;
      v19 = 0;
      v37 = v2;
      while (1)
      {
        v20 = v17[10];
        if (v20 > v12[10])
        {
          v21 = *(_BYTE *)v17;
          v22 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = 0;
          v23 = *((_QWORD *)v17 + 2);
          *((_QWORD *)v17 + 2) = 0;
          v38 = v22;
          v39 = *((_QWORD *)v17 + 3);
          *((_QWORD *)v17 + 3) = 0;
          v24 = *((_QWORD *)v17 + 4);
          v25 = v18;
          *((_QWORD *)v17 + 4) = 0;
          while (1)
          {
            WebCore::ContentExtensions::ModifyHeadersAction::operator=((uint64_t)a1 + v25 + 144, (_BYTE *)a1 + v25 + 96);
            if (v25 == -96)
              break;
            v27 = *(_DWORD *)((char *)a1 + v25 + 88);
            v25 -= 48;
            if (v20 <= v27)
            {
              v28 = (uint64_t)a1 + v25 + 144;
              goto LABEL_32;
            }
          }
          v28 = (uint64_t)a1;
LABEL_32:
          *(_BYTE *)v28 = v21;
          v29 = *(unsigned int *)(v28 + 20);
          v30 = *(unsigned int **)(v28 + 8);
          if ((_DWORD)v29)
          {
            v31 = 24 * v29;
            do
            {
              v32 = v30[4];
              if ((_DWORD)v32 != -1)
                ((void (*)(char *, unsigned int *))off_1E33954E0[v32])(&v40, v30);
              v30[4] = -1;
              v30 += 6;
              v31 -= 24;
            }
            while (v31);
            v30 = *(unsigned int **)(v28 + 8);
          }
          if (v30)
          {
            *(_QWORD *)(v28 + 8) = 0;
            *(_DWORD *)(v28 + 16) = 0;
            WTF::fastFree((WTF *)v30, v26);
          }
          *(_QWORD *)(v28 + 8) = v38;
          *(_QWORD *)(v28 + 16) = v23;
          v33 = *(unsigned int *)(v28 + 36);
          v34 = *(unsigned int **)(v28 + 24);
          if ((_DWORD)v33)
          {
            v35 = 24 * v33;
            do
            {
              v36 = v34[4];
              if ((_DWORD)v36 != -1)
                ((void (*)(char *, unsigned int *))off_1E33954E0[v36])(&v41, v34);
              v34[4] = -1;
              v34 += 6;
              v35 -= 24;
            }
            while (v35);
            v34 = *(unsigned int **)(v28 + 24);
          }
          if (v34)
          {
            *(_QWORD *)(v28 + 24) = 0;
            *(_DWORD *)(v28 + 32) = 0;
            WTF::fastFree((WTF *)v34, v26);
          }
          *(_QWORD *)(v28 + 24) = v39;
          *(_QWORD *)(v28 + 32) = v24;
          *(_DWORD *)(v28 + 40) = v20;
          ++v19;
          v2 = v37;
          if (v19 == 8)
            return v17 + 12 == v37;
        }
        v12 = v17;
        v18 += 48;
        v17 += 12;
        if (v17 == v2)
          return 1;
      }
  }
}

uint64_t std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = *(_BYTE *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v8 = *(_DWORD *)(a1 + 40);
  result = WebCore::ContentExtensions::ModifyHeadersAction::operator=(a1, (_BYTE *)a2);
  *(_BYTE *)a2 = v3;
  v11 = *(unsigned int *)(a2 + 20);
  v12 = *(unsigned int **)(a2 + 8);
  if ((_DWORD)v11)
  {
    v13 = 24 * v11;
    do
    {
      v14 = v12[4];
      if ((_DWORD)v14 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v14])(&v19, v12);
      v12[4] = -1;
      v12 += 6;
      v13 -= 24;
    }
    while (v13);
    v12 = *(unsigned int **)(a2 + 8);
  }
  if (v12)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    result = WTF::fastFree((WTF *)v12, v10);
  }
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *(unsigned int *)(a2 + 36);
  v16 = *(unsigned int **)(a2 + 24);
  if ((_DWORD)v15)
  {
    v17 = 24 * v15;
    do
    {
      v18 = v16[4];
      if ((_DWORD)v18 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E33954E0[v18])(&v20, v16);
      v16[4] = -1;
      v16 += 6;
      v17 -= 24;
    }
    while (v17);
    v16 = *(unsigned int **)(a2 + 24);
  }
  if (v16)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    result = WTF::fastFree((WTF *)v16, v10);
  }
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 40) = v8;
  return result;
}

uint64_t WebCore::ContentExtensions::ModifyHeadersAction::operator=(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;

  *(_BYTE *)a1 = *a2;
  v4 = *(unsigned int *)(a1 + 20);
  v5 = *(unsigned int **)(a1 + 8);
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    do
    {
      v7 = v5[4];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E33954E0[v7])(&v16, v5);
      v5[4] = -1;
      v5 += 6;
      v6 -= 24;
    }
    while (v6);
    v5 = *(unsigned int **)(a1 + 8);
  }
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v8;
  v9 = *(unsigned int *)(a1 + 36);
  v10 = *(unsigned int **)(a1 + 24);
  if ((_DWORD)v9)
  {
    v11 = 24 * v9;
    do
    {
      v12 = v10[4];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))off_1E33954E0[v12])(&v17, v10);
      v10[4] = -1;
      v10 += 6;
      v11 -= 24;
    }
    while (v11);
    v10 = *(unsigned int **)(a1 + 24);
  }
  if (v10)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree((WTF *)v10, a2);
  }
  v13 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 24) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v13;
  v14 = *(_QWORD *)(a2 + 36);
  *((_DWORD *)a2 + 9) = 0;
  *(_QWORD *)(a1 + 36) = v14;
  return a1;
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ContentExtensions::applyResultsToRequest(WebCore::ContentRuleListResults &&,WebCore::Page *,WebCore::ResourceRequest &)::$_0 &,WebCore::ContentExtensions::ModifyHeadersAction *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 40);
  v9 = *(_DWORD *)(a3 + 40);
  if (v8 <= *(_DWORD *)(result + 40))
  {
    if (v9 > v8)
    {
      result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(a2, a3);
      if (*(_DWORD *)(a2 + 40) > *(_DWORD *)(v7 + 40))
      {
        result = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 > v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(result, v10);
      goto LABEL_10;
    }
    result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(result, a2);
    if (*(_DWORD *)(a3 + 40) > *(_DWORD *)(a2 + 40))
    {
      result = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a4 + 40) > *(_DWORD *)(a3 + 40))
  {
    result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(a3, a4);
    if (*(_DWORD *)(a3 + 40) > *(_DWORD *)(a2 + 40))
    {
      result = std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(a2, a3);
      if (*(_DWORD *)(a2 + 40) > *(_DWORD *)(v7 + 40))
        return std::swap[abi:sn180100]<WebCore::ContentExtensions::ModifyHeadersAction>(v7, a2);
    }
  }
  return result;
}

uint64_t WebCore::ContentExtensions::DFAMerger::getOrCreateCombinedNode(WebCore::ContentExtensions::DFAMerger *this, void *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _OWORD *v11;
  void *v12;
  _OWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  unint64_t v56;

  v2 = (unint64_t)a2;
  v56 = (unint64_t)a2;
  v5 = (uint64_t *)((char *)this + 96);
  v4 = *((_QWORD *)this + 12);
  if (v4
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,unsigned int>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,unsigned int,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)this + 12, 8u, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(v2 << 32) + v2) ^ ((~(v2 << 32) + v2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_OWORD *)(v4 + 16 * v10);
  v12 = *(void **)v11;
  if (*(_QWORD *)v11 != -1)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == (void *)v2)
        return *((unsigned int *)v11 + 2);
      if (v12 == (void *)-2)
        v13 = v11;
      v10 = (v10 + v14) & v6;
      v11 = (_OWORD *)(v4 + 16 * v10);
      v12 = *(void **)v11;
      ++v14;
    }
    while (*(_QWORD *)v11 != -1);
    if (v13)
    {
      *(_QWORD *)v13 = -1;
      *((_DWORD *)v13 + 2) = 0;
      --*(_DWORD *)(*v5 - 16);
      v2 = v56;
      v11 = v13;
    }
  }
  *(_QWORD *)v11 = v2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)this;
  v15 = *((_QWORD *)this + 12);
  if (v15)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v18 = *v5;
  if (*v5)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 <= 0x400)
  {
    if (3 * v21 > 4 * v20)
      goto LABEL_26;
    if (!(_DWORD)v21)
    {
      v22 = 8;
      goto LABEL_25;
    }
LABEL_22:
    v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
LABEL_25:
    v11 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,unsigned int>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,unsigned int,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v5, v22, v11);
    goto LABEL_26;
  }
  if (v21 <= 2 * v20)
    goto LABEL_22;
LABEL_26:
  v23 = (_QWORD *)((char *)this + 24);
  v54 = 0;
  v53 = 0;
  v24 = *((unsigned int *)this + 9);
  if ((_DWORD)v24 == *((_DWORD *)this + 8))
  {
    v25 = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v53);
    v26 = *((_QWORD *)this + 3) + 12 * *((unsigned int *)this + 9);
    v27 = *(_QWORD *)v25;
    *(_DWORD *)(v26 + 8) = *((_DWORD *)v25 + 2);
    *(_QWORD *)v26 = v27;
  }
  else
  {
    v28 = *v23 + 12 * v24;
    *(_DWORD *)(v28 + 8) = 0;
    *(_QWORD *)v28 = 0;
  }
  v17 = *((unsigned int *)this + 9);
  *((_DWORD *)this + 9) = v17 + 1;
  *((_DWORD *)v11 + 2) = v17;
  v29 = (char **)((char *)this + 104);
  v30 = *((unsigned int *)this + 29);
  if ((_DWORD)v30 == *((_DWORD *)this + 28))
  {
    v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v56);
    v30 = *((unsigned int *)this + 29);
    *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v30) = *(_QWORD *)v31;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v56;
  }
  *((_DWORD *)this + 29) = v30 + 1;
  v32 = v56;
  v33 = (unsigned int *)HIDWORD(v56);
  v55 = 0;
  if (*(_DWORD *)this != HIDWORD(v56))
  {
    v33 = (unsigned int *)(**((_QWORD **)this + 1) + 12 * HIDWORD(v56));
    v34 = *v33;
    v35 = *((unsigned __int16 *)v33 + 4);
    LODWORD(v33) = *(_DWORD *)this;
    if (v34 < (int)v34 + v35)
    {
      v36 = 8 * v34;
      do
      {
        WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add((uint64_t *)&v55, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + v36), (uint64_t)&v53);
        v36 += 8;
        --v35;
      }
      while (v35);
      LODWORD(v33) = *(_DWORD *)this;
    }
  }
  if ((_DWORD)v33 != v32)
  {
    v37 = (unsigned int *)(**((_QWORD **)this + 2) + 12 * v32);
    v38 = *v37;
    v39 = *((unsigned __int16 *)v37 + 4);
    if (v38 < (int)v38 + v39)
    {
      v40 = 8 * v38;
      do
      {
        WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add((uint64_t *)&v55, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + v40), (uint64_t)&v53);
        v40 += 8;
        --v39;
      }
      while (v39);
    }
  }
  if (v55)
  {
    v42 = *((unsigned int *)v55 - 1);
    v43 = &v55[v42];
    if (*((_DWORD *)v55 - 3))
    {
      v41 = v55;
      if ((_DWORD)v42)
      {
        v52 = 8 * v42;
        v41 = v55;
        while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v41;
          v52 -= 8;
          if (!v52)
          {
            v41 = v43;
            goto LABEL_44;
          }
        }
      }
      goto LABEL_44;
    }
    v41 = &v55[v42];
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v43 = &v55[v42];
LABEL_44:
  v44 = *((_DWORD *)this + 13);
  if (v55)
    v45 = &v55[*((unsigned int *)v55 - 1)];
  else
    v45 = 0;
  LODWORD(v46) = *((_DWORD *)this + 13);
  if (v45 != v41)
  {
    LODWORD(v46) = *((_DWORD *)this + 13);
    do
    {
      v53 = 0;
      v47 = *v41;
      v53 = *v41;
      if ((_DWORD)v46 == *((_DWORD *)this + 12))
      {
        v48 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 5, v46 + 1, (unint64_t)&v53);
        v46 = *((unsigned int *)this + 13);
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v46) = *(_QWORD *)v48;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v46) = v47;
      }
      LODWORD(v46) = v46 + 1;
      *((_DWORD *)this + 13) = v46;
      v49 = v41 + 1;
      v41 = v43;
      if (v49 != v43)
      {
        v41 = v49;
        while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v41 == v43)
          {
            v41 = v43;
            break;
          }
        }
      }
    }
    while (v41 != v45);
  }
  v50 = *((_QWORD *)this + 3) + 12 * *((unsigned int *)this + 9);
  *(_DWORD *)(v50 - 12) = v44;
  *(_WORD *)(v50 - 4) = v46 - v44;
  if (v55)
    WTF::fastFree((WTF *)(v55 - 2), a2);
  return v17;
}

WebCore::ContentExtensions::DFA *WebCore::ContentExtensions::DFA::DFA(WebCore::ContentExtensions::DFA *this, const void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0x15555556)
      goto LABEL_19;
    v5 = 12 * v4;
    v6 = WTF::fastMalloc((WTF *)(12 * v4));
    *((_DWORD *)this + 2) = (v5 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)this = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      v9 = 12 * v7;
      do
      {
        v10 = *(_QWORD *)v8;
        *(_DWORD *)(v6 + 8) = v8[2];
        *(_QWORD *)v6 = v10;
        v6 += 12;
        v8 += 3;
        v9 -= 12;
      }
      while (v9);
    }
  }
  v11 = *((unsigned int *)a2 + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19573BBC4);
    }
    v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)this + 6) = v11;
    *((_QWORD *)this + 2) = v12;
    memcpy(v12, a2[2], 8 * *((unsigned int *)a2 + 7));
  }
  v13 = *((unsigned int *)a2 + 11);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 11) = v13;
  if ((_DWORD)v13)
  {
    if ((v13 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19573BBCCLL);
    }
    v14 = (void *)WTF::fastMalloc((WTF *)(2 * v13));
    *((_DWORD *)this + 10) = v13;
    *((_QWORD *)this + 4) = v14;
    memcpy(v14, a2[4], 2 * *((unsigned int *)a2 + 11));
  }
  v15 = *((unsigned int *)a2 + 15);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 15) = v15;
  if ((_DWORD)v15)
  {
    if (!(v15 >> 30))
    {
      v16 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *((_DWORD *)this + 14) = v15;
      *((_QWORD *)this + 6) = v16;
      memcpy(v16, a2[6], 4 * *((unsigned int *)a2 + 15));
      goto LABEL_15;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19573BBBCLL);
  }
LABEL_15:
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  return this;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,unsigned int>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,unsigned int,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = -1;
      *v12 = 0;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (*v15 + ~(*v15 << 32)) ^ ((*v15 + ~(*v15 << 32)) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24 != -1);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebCore::ContentExtensions::MutableRangeList<signed char,unsigned long long,128u>::insertBetween(uint64_t result, _DWORD *a2, _DWORD *a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;

  v10 = result;
  v11 = *a3;
  v12 = *(unsigned int *)(result + 12);
  if (*a3)
  {
    v13 = *a6;
    v25 = *a6;
    v26 = v11;
    v27 = a4;
    v28 = a5;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v12 + 1), (unint64_t)&v25);
      v14 = *(unsigned int *)(v10 + 12);
      v15 = *(_QWORD *)v10;
      v16 = *(_QWORD *)v10 + 16 * v14;
      *(_QWORD *)v16 = *(_QWORD *)result;
      *(_DWORD *)(v16 + 8) = *(_DWORD *)(result + 8);
      *(_WORD *)(v16 + 12) = *(_WORD *)(result + 12);
    }
    else
    {
      v15 = *(_QWORD *)result;
      v23 = *(_QWORD *)result + 16 * v12;
      *(_QWORD *)v23 = v13;
      *(_DWORD *)(v23 + 8) = v11;
      *(_BYTE *)(v23 + 12) = a4;
      *(_BYTE *)(v23 + 13) = a5;
      LODWORD(v14) = v12;
    }
    *(_DWORD *)(v10 + 12) = v14 + 1;
    *(_DWORD *)(v15 + 16 * *a2 + 8) = v12;
    v17 = a2;
  }
  else
  {
    v17 = a3;
    v18 = *(_QWORD *)result;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v12 + 1), v18);
      v18 = result;
      v19 = *(unsigned int *)(v10 + 12);
      v20 = *(_QWORD *)v10;
      v21 = *(_QWORD *)v10 + 16 * v19;
      *(_QWORD *)v21 = *(_QWORD *)result;
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(result + 8);
      *(_BYTE *)(v21 + 12) = *(_BYTE *)(result + 12);
      v22 = (_BYTE *)(v21 + 13);
    }
    else
    {
      v24 = v18 + 16 * v12;
      *(_QWORD *)v24 = *(_QWORD *)v18;
      *(_DWORD *)(v24 + 8) = *(_DWORD *)(v18 + 8);
      *(_BYTE *)(v24 + 12) = *(_BYTE *)(v18 + 12);
      v22 = (_BYTE *)(v24 + 13);
      v20 = v18;
      LODWORD(v19) = v12;
    }
    *v22 = *(_BYTE *)(v18 + 13);
    *(_DWORD *)(v10 + 12) = v19 + 1;
    *(_QWORD *)v20 = *a6;
    *(_DWORD *)(v20 + 8) = v12;
    *(_BYTE *)(v20 + 12) = a4;
    *(_BYTE *)(v20 + 13) = a5;
    *a2 = 0;
  }
  *v17 = v12;
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,unsigned long long>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (char *)v5 + 16 * *(unsigned int *)(a1 + 12);
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (v10 < 0x81)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 128;
        goto LABEL_34;
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v20 = 0;
        do
        {
          v21 = v11 + v20;
          v22 = (char *)v5 + v20;
          *(_QWORD *)v21 = *(_QWORD *)((char *)v5 + v20);
          *(_DWORD *)(v21 + 8) = *(_DWORD *)((char *)v5 + v20 + 8);
          *(_WORD *)(v21 + 12) = *(_WORD *)((char *)v5 + v20 + 12);
          v20 += 16;
        }
        while (v22 + 16 != v6);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x19573C0BCLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x81)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 128;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_43;
      v17 = WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = v17;
    v19 = v5;
    do
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_DWORD *)(v18 + 8) = *((_DWORD *)v19 + 2);
      *(_WORD *)(v18 + 12) = *((_WORD *)v19 + 6);
      v19 = (WTF *)((char *)v19 + 16);
      v18 += 16;
    }
    while (v19 != (WTF *)((char *)v5 + 16 * v16));
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if ((WTF *)v17 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

void WebCore::ContentExtensions::ContentExtension::~ContentExtension(WebCore::ContentExtensions::ContentExtension *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::StyleSheetContents *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;

  v3 = (WTF *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 20);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 14);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v8, a2);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
}

WebCore::ContentExtensions::ContentExtension **WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl **v12;
  int i;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WebCore::ContentExtensions::ContentExtension **result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebCore::ContentExtensions::ContentExtension *v29;
  WebCore::ContentExtensions::ContentExtension *v30;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (!*v15)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v12;
      }
      result = WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::String const&,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>(v15, (WTF::StringImpl *)a3, a4);
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_16;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_16:
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v20 + 16 * v23;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
      v15 = result;
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_16;
    }
    if (v16 == (WTF *)-1)
    {
      v12 = (WTF::StringImpl **)(v8 + 16 * v14);
      goto LABEL_26;
    }
    if (WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_26:
    v11 = i + v14;
  }
  v25 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v25 + 16 * v26;
  *(_BYTE *)(a1 + 16) = 0;
  v27 = v8 + 16 * v14;
  v28 = *a4;
  *a4 = 0;
  v29 = *(WebCore::ContentExtensions::ContentExtension **)(v27 + 8);
  *(_QWORD *)(v27 + 8) = v28;
  v30 = v29;
  return WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>::~Ref(&v30, v24);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WebCore::ContentExtensions::ContentExtension **WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::String const&,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  WebCore::ContentExtensions::ContentExtension *v6;
  void *v7;
  WebCore::ContentExtensions::ContentExtension *v9;

  WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>(a1, a2);
  v5 = *a3;
  *a3 = 0;
  v6 = a1[1];
  a1[1] = v5;
  v9 = v6;
  return WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>::~Ref(&v9, v7);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>::~KeyValuePair(v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>::~KeyValuePair(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>::~KeyValuePair(WTF::StringImpl **a1, void *a2)
{
  WebCore::ContentExtensions::ContentExtension *v3;
  WTF::StringImpl *v4;
  WTF *v6;
  void *v7;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ContentExtensions::ContentExtension::~ContentExtension(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WebCore::ContentExtensions::ContentExtension *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = *((_DWORD *)*a2 + 4);
  if (v5 < 0x100)
    v6 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v6 = v5 >> 8;
  v7 = 0;
  do
  {
    v8 = v6 & v4;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (WTF::StringImpl **)(a1 + 16 * v8);
  v10 = v9[1];
  v9[1] = 0;
  if (!v10)
    goto LABEL_9;
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
LABEL_9:
    *v9 = 0;
    goto LABEL_10;
  }
  WebCore::ContentExtensions::ContentExtension::~ContentExtension(v10, a2);
  WTF::fastFree(v14, v15);
  v17 = *v9;
  *v9 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_10:
  v11 = *a2;
  *a2 = 0;
  *v9 = v11;
  v12 = a2[1];
  a2[1] = 0;
  v9[1] = v12;
  return v9;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::DeserializedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 7) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContentExtensions::DeserializedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContentExtensions::DeserializedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::DeserializedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 25)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(a2 << 7));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = v5 << 7;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 112) = -1;
          v10 = *((unsigned int *)v9 + 28);
          if ((_DWORD)v10 == -1)
          {
            *(_DWORD *)(v7 + 120) = *((_DWORD *)v9 + 30);
          }
          else
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS7_18BlockCookiesActionENS7_28CSSDisplayNoneSelectorActionENS7_12NotifyActionENS7_25IgnorePreviousRulesActionENS7_15MakeHTTPSActionENS7_19ModifyHeadersActionENS7_14RedirectActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 112) = v10;
            v11 = *((unsigned int *)v9 + 28);
            *(_DWORD *)(v7 + 120) = *((_DWORD *)v9 + 30);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))off_1E33954A0[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 28) = -1;
          v7 += 128;
          v9 = (WTF *)((char *)v9 + 128);
          v8 -= 128;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

char *WTF::Vector<WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19573C9E4);
      }
      v18 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19573C9ECLL);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ContentExtensions::ContentExtensionsBackend::ActionsFromContentRuleList>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  if (result != a2)
  {
    v15 = v3;
    v16 = v4;
    v7 = result;
    do
    {
      v8 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)a3 = v8;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v7 + 8);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v9 = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 7);
      *((_DWORD *)v7 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v9;
      v10 = *((unsigned int *)v7 + 7);
      v11 = (unsigned int *)*((_QWORD *)v7 + 2);
      if ((_DWORD)v10)
      {
        v12 = v10 << 7;
        do
        {
          v13 = v11[28];
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, unsigned int *))off_1E33954A0[v13])(&v14, v11);
          v11[28] = -1;
          v11 += 32;
          v12 -= 128;
        }
        while (v12);
        v11 = (unsigned int *)*((_QWORD *)v7 + 2);
      }
      if (v11)
      {
        *((_QWORD *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = 0;
        WTF::fastFree((WTF *)v11, a2);
      }
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 32;
      v7 = (WTF::StringImpl *)((char *)v7 + 32);
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _OWORD *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int8x16_t v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  size_t v40;
  uint64_t v41;
  unsigned __int128 v42;
  char v43;
  uint64_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v44;
        if (v44)
        {
          v14 = (_BYTE *)(v44 + 20);
          *(_DWORD *)v44 = 2;
          *(_DWORD *)(v44 + 4) = v11;
          *(_QWORD *)(v44 + 8) = v44 + 20;
          *(_DWORD *)(v44 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v14 = *(_BYTE *)a3;
            else
              memcpy((void *)(v44 + 20), a3, a4);
          }
          v15 = &v14[a4];
          *v15 = a5;
          result = (uint64_t)(v15 + 1);
          if (a6)
          {
            v16 = *(_OWORD **)(a6 + 8);
            v17 = *(unsigned int *)(a6 + 4);
            if ((*(_BYTE *)(a6 + 16) & 4) != 0)
            {
              if ((_DWORD)v17)
              {
                if ((_DWORD)v17 == 1)
                {
                  *(_BYTE *)result = *(_BYTE *)v16;
                  goto LABEL_32;
                }
LABEL_12:
                result = (uint64_t)memcpy((void *)result, v16, v17);
                goto LABEL_32;
              }
            }
            else
            {
              v40 = result + v17;
              if (v17 >= 0x10)
              {
                v41 = result + (v17 & 0xFFFFFFF0);
                do
                {
                  v42 = (unsigned __int128)vld2q_s8((const char *)v16);
                  v16 += 2;
                  *(_OWORD *)result = v42;
                  result += 16;
                }
                while (result != v41);
                result = v41;
              }
              while (result != v40)
              {
                v43 = *(_BYTE *)v16;
                v16 = (_OWORD *)((char *)v16 + 2);
                *(_BYTE *)result++ = v43;
              }
            }
          }
        }
        goto LABEL_32;
      }
LABEL_38:
      v13 = 0;
      goto LABEL_32;
    }
LABEL_37:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_32;
  }
  if (!(_DWORD)result)
    goto LABEL_37;
  if (result > 0x7FFFFFEF)
    goto LABEL_38;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v44;
  if (v44)
  {
    v18 = (char *)(v44 + 20);
    *(_DWORD *)v44 = 2;
    *(_DWORD *)(v44 + 4) = v11;
    *(_QWORD *)(v44 + 8) = v44 + 20;
    *(_DWORD *)(v44 + 16) = 0;
    v19 = (char *)(v44 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v20 = &v18[2 * (a4 & 0xFFFFFFC0)];
      v21 = 0uLL;
      do
      {
        v45.val[0] = (int8x16_t)*a3;
        v22 = *((int8x16_t *)a3 + 1);
        v47.val[0] = (int8x16_t)a3[2];
        v23 = a3[3];
        a3 += 4;
        v24 = v23;
        v47.val[1] = 0uLL;
        v49.val[0] = v22;
        v45.val[1] = 0uLL;
        v25 = v18;
        vst2q_s8(v25, v45);
        v25 += 32;
        v49.val[1] = 0uLL;
        vst2q_s8(v25, v49);
        v26 = v18 + 64;
        vst2q_s8(v26, v47);
        v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    while (v18 != v19)
    {
      v28 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v18 = v28;
      v18 += 2;
    }
    *(_WORD *)v19 = a5;
    result = (uint64_t)(v19 + 2);
    if (a6)
    {
      v16 = *(_OWORD **)(a6 + 8);
      v29 = *(unsigned int *)(a6 + 4);
      if ((*(_BYTE *)(a6 + 16) & 4) == 0)
      {
        if ((_DWORD)v29 == 1)
        {
          *(_WORD *)result = *(_WORD *)v16;
          goto LABEL_32;
        }
        if (!(_DWORD)v29)
          goto LABEL_32;
        v17 = 2 * v29;
        goto LABEL_12;
      }
      v30 = result + 2 * v29;
      if (v29 >= 0x40)
      {
        v31 = result + 2 * (v29 & 0xFFFFFFC0);
        v32 = 0uLL;
        do
        {
          v46.val[0] = (int8x16_t)*v16;
          v33 = *((int8x16_t *)v16 + 1);
          v48.val[0] = (int8x16_t)v16[2];
          v34 = v16[3];
          v16 += 4;
          v35 = v34;
          v48.val[1] = 0uLL;
          v50.val[0] = v33;
          v46.val[1] = 0uLL;
          v36 = (char *)result;
          vst2q_s8(v36, v46);
          v36 += 32;
          v50.val[1] = 0uLL;
          vst2q_s8(v36, v50);
          v37 = (char *)(result + 64);
          vst2q_s8(v37, v48);
          v38 = (char *)(result + 96);
          vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
          result += 128;
        }
        while (result != v31);
        result = v31;
      }
      while (result != v30)
      {
        v39 = *(unsigned __int8 *)v16;
        v16 = (_OWORD *)((char *)v16 + 1);
        *(_WORD *)result = v39;
        result += 2;
      }
    }
  }
LABEL_32:
  *a7 = v13;
  return result;
}

char *WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  LOBYTE(v5) = result[12];
  *(_DWORD *)(v4 + 8) = *((_DWORD *)result + 2);
  *(_BYTE *)(v4 + 12) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)result + 7);
  *((_DWORD *)result + 7) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19573CF94);
      }
      v18 = (WTF::StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19573CF9CLL);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *(_BYTE *)(a3 + 12) = *((_BYTE *)v5 + 12);
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      v8 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v8)
      {
        v10 = (WTF::StringImpl **)*((_QWORD *)v5 + 2);
        v11 = 8 * v8;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v9 = (WTF *)*((_QWORD *)v5 + 2);
      if (v9)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 32;
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK7WebCore17ContentExtensions24ContentExtensionsBackend22actionsForResourceLoadERKNS3_16ResourceLoadInfoERKNS_8FunctionIFNS4_18ShouldSkipRuleListERKNS_6StringEEEEEd_UlSC_E_S9_JSC_EE4callESC_()
{
  return 0;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (char *)(a3 + a2 - result);
    do
    {
      v7 = (WTF::StringImpl *)((char *)v3 - 32);
      v6 = *((_QWORD *)v3 - 4);
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v5 - 4) = v6;
      v5 -= 32;
      LODWORD(v6) = *((_DWORD *)v3 - 6);
      v5[12] = *((_BYTE *)v3 - 20);
      *((_DWORD *)v5 + 2) = v6;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v8 = *((_QWORD *)v3 - 2);
      *((_QWORD *)v7 + 2) = 0;
      *((_QWORD *)v5 + 2) = v8;
      LODWORD(v8) = *((_DWORD *)v3 - 2);
      *((_DWORD *)v7 + 6) = 0;
      *((_DWORD *)v5 + 6) = v8;
      LODWORD(v8) = *((_DWORD *)v3 - 1);
      *((_DWORD *)v7 + 7) = 0;
      *((_DWORD *)v5 + 7) = v8;
      v9 = *((unsigned int *)v3 - 1);
      if ((_DWORD)v9)
      {
        v11 = (WTF::StringImpl **)*((_QWORD *)v3 - 2);
        v12 = 8 * v9;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v10 = (WTF *)*((_QWORD *)v3 - 2);
      if (v10)
      {
        *((_QWORD *)v3 - 2) = 0;
        *((_DWORD *)v3 - 2) = 0;
        WTF::fastFree(v10, a2);
      }
      v3 = (WTF::StringImpl *)((char *)v3 - 32);
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    while (v7 != v4);
  }
  return result;
}

char *WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 12 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v9 < 0x15555556)
      {
        v10 = 12 * v9;
        v11 = WTF::fastMalloc((WTF *)(12 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_QWORD *)((char *)v5 + v13);
          *(_DWORD *)(v14 + 8) = *(_DWORD *)((char *)v5 + v13 + 8);
          *(_QWORD *)v14 = v15;
          v13 += 12;
        }
        while (12 * v6 != v13);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x19573D3E0);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v19 = a2;
  if (v19 > v17)
  {
    if (v19 >= 0x15555556)
      goto LABEL_33;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = 12 * v19;
    v22 = WTF::fastMalloc((WTF *)(12 * v19));
    *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v20)
    {
      v24 = 12 * v20;
      v25 = v5;
      do
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)(v22 + 8) = *((_DWORD *)v25 + 2);
        *(_QWORD *)v22 = v26;
        v22 += 12;
        v25 = (WTF *)((char *)v25 + 12);
        v24 -= 12;
      }
      while (v24);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::LinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[20 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *a1;
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v9 < 0xCCCCCCD)
      {
        v10 = 20 * v9;
        v11 = (char *)WTF::fastMalloc((WTF *)(20 * v9));
        *((_DWORD *)a1 + 2) = (v10 & 0xFFFFFFFC) / 0x14;
        *a1 = v11;
        memcpy(v11, v5, 20 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19573D594);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0xCCCCCCD)
      goto LABEL_28;
    v17 = *((unsigned int *)a1 + 3);
    v18 = 20 * v16;
    v19 = (char *)WTF::fastMalloc((WTF *)(20 * v16));
    *((_DWORD *)a1 + 2) = (v18 & 0xFFFFFFFC) / 0x14;
    *a1 = v19;
    memcpy(v19, v5, 20 * v17);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ContentExtensions::DFABytecodeCompiler::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  void *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x19573D76CLL);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = result[3];
    v5 = 24 * a2;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
    v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = result;
    if ((_DWORD)v4)
    {
      v7 = (unsigned int *)((char *)v3 + 20);
      v8 = result + 4;
      v9 = 24 * v4;
      do
      {
        v10 = *((_WORD *)v7 - 10);
        *((_BYTE *)v8 - 14) = *((_BYTE *)v7 - 18);
        *((_WORD *)v8 - 8) = v10;
        v11 = *v7;
        *((_QWORD *)v8 - 1) = 0;
        *(_QWORD *)v8 = 0;
        v8[1] = v11;
        if ((_DWORD)v11)
        {
          if (v11 >> 30)
            goto LABEL_16;
          v12 = (void *)WTF::fastMalloc((WTF *)(4 * v11));
          *v8 = v11;
          *((_QWORD *)v8 - 1) = v12;
          memcpy(v12, *(const void **)(v7 - 3), 4 * *v7);
        }
        result = *(unsigned int **)(v7 - 3);
        if (result)
        {
          *(_QWORD *)(v7 - 3) = 0;
          *(v7 - 1) = 0;
          result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
        }
        v7 += 6;
        v8 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v3, v6);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14 != -1)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v25;
        goto LABEL_28;
      }
      if (v15 == -2)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14 != -1);
    if (v16)
    {
      *v16 = -1;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_19;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_25:
      result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, v24, v14);
      v14 = result;
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_25;
  }
LABEL_27:
  v27 = v20 + 8 * v23;
  v26 = 1;
LABEL_28:
  *v5 = (uint64_t)v14;
  v5[1] = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

unsigned int *WTF::Vector<WebCore::ContentExtensions::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(unsigned int *result, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  _QWORD *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  WTF *v15;

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = v2 - 1;
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)result + 72 * (v2 - 1);
    v7 = *(WTF **)(v6 + 48);
    if (v7)
    {
      *(_QWORD *)(v6 + 48) = 0;
      *(_DWORD *)(v5 + 72 * v4 + 56) = 0;
      WTF::fastFree(v7, a2);
    }
    v8 = v5 + 72 * v4;
    v11 = *(WTF **)(v8 + 32);
    v10 = (_QWORD *)(v8 + 32);
    v9 = v11;
    if (v11)
    {
      *v10 = 0;
      *(_DWORD *)(v5 + 72 * v4 + 40) = 0;
      WTF::fastFree(v9, a2);
    }
    v12 = v5 + 72 * v4;
    v15 = *(WTF **)(v12 + 16);
    v14 = (_QWORD *)(v12 + 16);
    v13 = v15;
    if (v15)
    {
      *v14 = 0;
      *(_DWORD *)(v5 + 72 * v4 + 24) = 0;
      WTF::fastFree(v13, a2);
    }
    result = *(unsigned int **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
    v3[3] = v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF *WebCore::ContentExtensions::DFAMinimizer::minimize(WebCore::ContentExtensions::DFAMinimizer *this, WebCore::ContentExtensions::DFA *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  char *v23;
  char *v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  int v34;
  unsigned int v35;
  WTF *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  int v43;
  _BYTE *v44;
  int v45;
  char v46;
  char v47;
  char v48;
  char v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  char *v56;
  char v57;
  char v58;
  uint64_t v59;
  WTF *v60;
  char *v61;
  char *v62;
  char v63;
  _BYTE *v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  char *v70;
  char *v71;
  unsigned int v72;
  unsigned int i;
  unsigned int v74;
  char *v75;
  char v76;
  char v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  char *v81;
  unsigned int v82;
  unint64_t v83;
  WTF *v84;
  unsigned int v85;
  _DWORD *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  WTF *v96;
  void *v97;
  uint64_t v98;
  WTF *v99;
  unsigned int v100;
  unint64_t v101;
  WTF *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  WTF *v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  WTF *v123;
  WTF *v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  WTF *v130;
  WTF *v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  WTF *v137;
  WTF *v138;
  void *v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  WTF *v145;
  void *v146;
  unint64_t v147;
  unint64_t v148;
  WTF *v149;
  void *v150;
  uint64_t v151;
  WTF *v152;
  void *v153;
  char *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  WTF *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  WTF *v172;
  WTF *v173;
  WTF *v174;
  uint64_t v175;
  int v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  WTF *v183;
  unsigned int v184;
  unsigned int j;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned __int16 *v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  WTF *v199;
  int v200;
  _OWORD *v201;
  int v202;
  uint64_t v203;
  int k;
  unsigned int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  char *v211;
  WTF *v212;
  WTF *v213;
  int v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int *v221;
  WTF *v222;
  uint64_t v223;
  WTF *v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  unsigned int *v228;
  uint64_t v229;
  uint64_t v230;
  WTF *v231;
  unsigned int v232;
  WTF *v233;
  char *v234;
  uint64_t v235;
  int *v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  char *v241;
  unsigned int m;
  unsigned int *v243;
  unint64_t v244;
  uint64_t v245;
  unsigned int v246;
  char *v247;
  WTF *v248;
  WTF *v249;
  uint64_t v250;
  int *v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  int v255;
  char *v256;
  unint64_t v257;
  uint64_t v258;
  void *v259;
  WTF *v260;
  uint64_t n;
  unint64_t v262;
  unint64_t ii;
  uint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  unint64_t v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  void *v281;
  uint64_t v282;
  _DWORD *v283;
  WTF *v284;
  WTF *v285;
  WTF *v286;
  WTF *v287;
  WTF *v288;
  WTF *v289;
  WTF *v290;
  WTF *v291;
  WTF *v292;
  WTF *v293;
  WTF *v294;
  WTF *v295;
  WTF *v296;
  WTF *result;
  char v298;
  WTF *v299[2];
  WTF *v300[2];
  WTF *v301[2];
  WTF *v302[2];
  WTF *v303[2];
  WTF *v304[2];
  WTF *v305[2];
  WTF *v306;
  uint64_t v307;
  _BYTE v308[512];
  WTF *v309[2];
  WTF *v310[2];
  WTF *v311[2];
  WTF *v312[2];
  WTF *v313;
  uint64_t v314;
  _BYTE v315[512];
  unsigned int v316;
  WTF *v317;
  WTF *v318;
  _BYTE v319[1536];
  unint64_t v320;
  unint64_t v321;
  int v322;

  *(_OWORD *)v304 = 0u;
  *(_OWORD *)v305 = 0u;
  *(_OWORD *)v302 = 0u;
  *(_OWORD *)v303 = 0u;
  *(_OWORD *)v300 = 0u;
  *(_OWORD *)v301 = 0u;
  *(_OWORD *)v299 = 0u;
  v306 = (WTF *)v308;
  v307 = 128;
  *(_OWORD *)v309 = 0u;
  *(_OWORD *)v310 = 0u;
  *(_OWORD *)v311 = 0u;
  *(_OWORD *)v312 = 0u;
  v313 = (WTF *)v315;
  v314 = 128;
  v316 = 0;
  v3 = *((unsigned int *)this + 3);
  if (!(_DWORD)v3)
  {
    v317 = (WTF *)v319;
    v318 = (WTF *)128;
    goto LABEL_103;
  }
  if (v3 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x19573F070);
  }
  LODWORD(v302[1]) = 12 * (int)v3 / 0xCu;
  v302[0] = (WTF *)WTF::fastMalloc((WTF *)(12 * v3));
  if (HIDWORD(v303[1]) < v3 && LODWORD(v303[1]) < v3)
  {
    v4 = LODWORD(v303[1]) + ((unint64_t)LODWORD(v303[1]) >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 <= v3)
      v6 = v3;
    else
      v6 = v5;
    if (v6 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19573F098);
    }
    v7 = v303[0];
    LODWORD(v303[1]) = v6;
    v303[0] = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
    memcpy(v303[0], v7, 4 * HIDWORD(v303[1]));
    if (v7)
    {
      if (v303[0] == v7)
      {
        v303[0] = 0;
        LODWORD(v303[1]) = 0;
      }
      WTF::fastFree(v7, v8);
    }
  }
  HIDWORD(v303[1]) = v3;
  if (HIDWORD(v304[1]) < v3 && LODWORD(v304[1]) < v3)
  {
    v9 = LODWORD(v304[1]) + ((unint64_t)LODWORD(v304[1]) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v3)
      v11 = v3;
    else
      v11 = v10;
    if (v11 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19573F0A0);
    }
    v12 = v304[0];
    LODWORD(v304[1]) = v11;
    v304[0] = (WTF *)WTF::fastMalloc((WTF *)(4 * v11));
    memcpy(v304[0], v12, 4 * HIDWORD(v304[1]));
    if (v12)
    {
      if (v304[0] == v12)
      {
        v304[0] = 0;
        LODWORD(v304[1]) = 0;
      }
      WTF::fastFree(v12, v13);
    }
  }
  HIDWORD(v304[1]) = v3;
  if (HIDWORD(v305[1]) < v3 && LODWORD(v305[1]) < v3)
  {
    v14 = LODWORD(v305[1]) + ((unint64_t)LODWORD(v305[1]) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v3)
      v16 = v3;
    else
      v16 = v15;
    if (v16 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19573F0A8);
    }
    v17 = v305[0];
    LODWORD(v305[1]) = v16;
    v305[0] = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
    memcpy(v305[0], v17, 4 * HIDWORD(v305[1]));
    if (v17)
    {
      if (v305[0] == v17)
      {
        v305[0] = 0;
        LODWORD(v305[1]) = 0;
      }
      WTF::fastFree(v17, v18);
    }
  }
  v19 = 0;
  HIDWORD(v305[1]) = v3;
  v20 = v303[0];
  v21 = v304[0];
  v22 = v305[0];
  do
  {
    *((_DWORD *)v20 + v19) = v19;
    *((_DWORD *)v21 + v19) = v19;
    *((_DWORD *)v22 + v19++) = 0;
  }
  while (v3 != v19);
  LODWORD(v317) = 0;
  HIDWORD(v317) = v3;
  LODWORD(v318) = 0;
  if (HIDWORD(v302[1]) == LODWORD(v302[1]))
  {
    v23 = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v302, HIDWORD(v302[1]) + 1, (unint64_t)&v317);
    v24 = (char *)v302[0] + 12 * HIDWORD(v302[1]);
    v25 = *(WTF **)v23;
    v26 = *((_DWORD *)v23 + 2);
  }
  else
  {
    v24 = (char *)v302[0] + 12 * HIDWORD(v302[1]);
    v25 = v317;
    v26 = (int)v318;
  }
  *((_DWORD *)v24 + 2) = v26;
  *(_QWORD *)v24 = v25;
  ++HIDWORD(v302[1]);
  v27 = *((_DWORD *)this + 3);
  v317 = (WTF *)v319;
  v318 = (WTF *)128;
  if (v27)
  {
    v28 = *(_QWORD *)this;
    v29 = *(_QWORD *)this + 12 * v27;
    while (1)
    {
      if ((*(_BYTE *)(v28 + 11) & 1) != 0)
        goto LABEL_93;
      v30 = *(unsigned __int8 *)(v28 + 10);
      if (!*(_BYTE *)(v28 + 10))
        goto LABEL_93;
      v31 = *(_DWORD *)(v28 + 4);
      v32 = HIDWORD(v318);
      if (!HIDWORD(v318))
      {
        v54 = 0;
        do
        {
          v55 = v31 + v54++;
          v56 = (char *)(*((_QWORD *)this + 4) + 2 * v55);
          v57 = *v56;
          v58 = v56[1];
          LODWORD(v321) = 1;
          HIDWORD(v321) = v54;
          LOBYTE(v322) = v57;
          BYTE1(v322) = v58;
          if (v32 == (_DWORD)v318)
          {
            v59 = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,unsigned int>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v317, (void *)(v32 + 1), (unint64_t)&v321);
            v32 = HIDWORD(v318);
            v60 = v317;
            v61 = (char *)v317 + 12 * HIDWORD(v318);
            *(_QWORD *)v61 = *(_QWORD *)v59;
            *((_WORD *)v61 + 4) = *(_WORD *)(v59 + 8);
          }
          else
          {
            v60 = v317;
            v62 = (char *)v317 + 12 * v32;
            *(_DWORD *)v62 = 1;
            *((_DWORD *)v62 + 1) = v54;
            v62[8] = v57;
            v62[9] = v58;
          }
          HIDWORD(v318) = ++v32;
        }
        while (v30 != v54);
        if (v32)
          *((_DWORD *)v60 + 3 * v32 - 2) = 0;
        goto LABEL_93;
      }
      v33 = 0;
      v34 = v31 + v30;
      v320 = 0;
      while (1)
      {
        v35 = v320;
        v36 = v317;
        v37 = (char *)v317 + 12 * v320;
        v38 = *((_QWORD *)this + 4);
        v39 = *(char *)(v38 + 2 * v31);
        v40 = v39 + v33;
        if (v40 > v37[9])
          break;
        v41 = *(char *)(v38 + 2 * v31 + 1);
        v42 = (char *)v317 + 12 * v320;
        v45 = v42[8];
        v44 = v42 + 8;
        v43 = v45;
        if (v41 < v45)
        {
          LODWORD(v321) = 1;
          v46 = v39 + v33;
LABEL_59:
          WebCore::ContentExtensions::MutableRangeList<char,unsigned int,128u>::insertBetween((uint64_t)&v317, (_DWORD *)&v320 + 1, &v320, v46, v41, (int *)&v321);
          v33 = 0;
          ++v31;
          goto LABEL_71;
        }
        if (v40 <= v43)
        {
          if (v40 >= v43)
            goto LABEL_65;
          v48 = v39 + v33;
          v49 = v43 - 1;
          LODWORD(v321) = 1;
          LOBYTE(v43) = v48;
          v47 = v49;
        }
        else
        {
          LODWORD(v321) = *(_DWORD *)v37;
          *v44 = v39 + v33;
          v47 = v39 + v33 - 1;
        }
        WebCore::ContentExtensions::MutableRangeList<char,unsigned int,128u>::insertBetween((uint64_t)&v317, (_DWORD *)&v320 + 1, &v320, v43, v47, (int *)&v321);
        v35 = v320;
        v36 = v317;
        v37 = (char *)v317 + 12 * v320;
LABEL_65:
        v50 = v37[9];
        v38 = *((_QWORD *)this + 4);
        v51 = *(unsigned __int8 *)(v38 + 2 * v31 + 1);
        if (v50 == v51)
        {
          v33 = 0;
          v63 = 0;
          v52 = *((_DWORD *)v37 + 1);
          ++*(_DWORD *)v37;
          v320 = __PAIR64__(v35, v52);
          ++v31;
          if (!v52)
            goto LABEL_80;
        }
        else
        {
          LOBYTE(v41) = *(_BYTE *)(v38 + 2 * v31 + 1);
          if ((char)v50 > (char)v51)
          {
            v46 = v37[8];
            v37[8] = v51 + 1;
            LODWORD(v321) = *(_DWORD *)v37 + 1;
            goto LABEL_59;
          }
          v53 = *((_DWORD *)v37 + 1);
          ++*(_DWORD *)v37;
          v33 = v50 - *(_BYTE *)(v38 + 2 * v31) + 1;
          v320 = __PAIR64__(v35, v53);
          v63 = v33;
          if (!v53)
            goto LABEL_80;
        }
LABEL_71:
        if (v31 == v34)
          goto LABEL_93;
      }
      LODWORD(v320) = *((_DWORD *)v317 + 3 * v320 + 1);
      HIDWORD(v320) = v35;
      if ((_DWORD)v320)
        goto LABEL_71;
      v63 = v33;
LABEL_80:
      if (v31 != v34)
      {
        v64 = (_BYTE *)(v38 + 2 * v31);
        v65 = *v64 + v63;
        v66 = v64[1];
        v321 = 1;
        LOBYTE(v322) = v65;
        BYTE1(v322) = v66;
        v67 = HIDWORD(v318);
        if (HIDWORD(v318) == (_DWORD)v318)
        {
          v68 = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,unsigned int>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v317, (void *)(HIDWORD(v318) + 1), (unint64_t)&v321);
          v69 = HIDWORD(v318);
          v36 = v317;
          v70 = (char *)v317 + 12 * HIDWORD(v318);
          *(_QWORD *)v70 = *(_QWORD *)v68;
          *((_WORD *)v70 + 4) = *(_WORD *)(v68 + 8);
        }
        else
        {
          v71 = (char *)v36 + 12 * HIDWORD(v318);
          *(_QWORD *)v71 = 1;
          v71[8] = v65;
          v71[9] = v66;
          v69 = v67;
        }
        v72 = v69 + 1;
        HIDWORD(v318) = v72;
        if (v67)
          *((_DWORD *)v36 + 3 * v35 + 1) = v67;
        for (i = v31 + 1; v34 != i; v67 = v74)
        {
          v74 = v72;
          v75 = (char *)(*((_QWORD *)this + 4) + 2 * i);
          v76 = *v75;
          v77 = v75[1];
          v321 = 1;
          LOBYTE(v322) = v76;
          BYTE1(v322) = v77;
          if (v74 == (_DWORD)v318)
          {
            v78 = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,unsigned int>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v317, (void *)(v74 + 1), (unint64_t)&v321);
            v79 = HIDWORD(v318);
            v36 = v317;
            v80 = (char *)v317 + 12 * HIDWORD(v318);
            *(_QWORD *)v80 = *(_QWORD *)v78;
            *((_WORD *)v80 + 4) = *(_WORD *)(v78 + 8);
          }
          else
          {
            v81 = (char *)v36 + 12 * v74;
            *(_QWORD *)v81 = 1;
            v81[8] = v76;
            v81[9] = v77;
            v79 = v74;
          }
          v72 = v79 + 1;
          HIDWORD(v318) = v72;
          if (v74)
            *((_DWORD *)v36 + 3 * v67 + 1) = v74;
          ++i;
        }
      }
LABEL_93:
      v28 += 12;
      if (v28 == v29)
      {
        if (HIDWORD(v318))
        {
          v82 = 0;
          v83 = 0;
          v84 = v317;
          v85 = HIDWORD(v309[1]);
          do
          {
            v86 = (_DWORD *)((char *)v84 + 12 * v83);
            v321 = __PAIR64__(*v86, v82);
            v322 = 0;
            if (v85 == LODWORD(v309[1]))
            {
              v87 = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v309, v85 + 1, (unint64_t)&v321);
              v88 = (char *)v309[0] + 12 * HIDWORD(v309[1]);
              v89 = *(_QWORD *)v87;
              v90 = *((_DWORD *)v87 + 2);
            }
            else
            {
              v88 = (char *)v309[0] + 12 * v85;
              v89 = v321;
              v90 = v322;
            }
            *((_DWORD *)v88 + 2) = v90;
            *(_QWORD *)v88 = v89;
            v85 = ++HIDWORD(v309[1]);
            v82 += *v86;
            v84 = v317;
            v91 = *((unsigned int *)v317 + 3 * v83 + 1);
            if ((_DWORD)v91)
              v83 = v83 & 0xFFFFFFFF00000000 | v91;
            else
              v83 = v83 & 0xFFFFFF0000000000 | v91 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
          }
          while ((v83 & 0xFF00000000) != 0x100000000);
        }
        break;
      }
    }
  }
LABEL_103:
  v92 = *((unsigned int *)this + 3);
  if (HIDWORD(v299[1]) < v92 && LODWORD(v299[1]) < v92)
  {
    v93 = LODWORD(v299[1]) + ((unint64_t)LODWORD(v299[1]) >> 2);
    if (v93 >= 0x10)
      v94 = v93 + 1;
    else
      v94 = 16;
    if (v94 <= v92)
      v95 = *((unsigned int *)this + 3);
    else
      v95 = v94;
    if (v95 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19573F080);
    }
    v96 = v299[0];
    LODWORD(v299[1]) = v95;
    v299[0] = (WTF *)WTF::fastMalloc((WTF *)(4 * v95));
    memcpy(v299[0], v96, 4 * HIDWORD(v299[1]));
    if (v96)
    {
      if (v299[0] == v96)
      {
        v299[0] = 0;
        LODWORD(v299[1]) = 0;
      }
      WTF::fastFree(v96, v97);
    }
  }
  HIDWORD(v299[1]) = v92;
  bzero(v299[0], 4 * v92);
  if (HIDWORD(v318))
  {
    v98 = WTF::fastMalloc((WTF *)HIDWORD(v318));
    v99 = (WTF *)v98;
    if (HIDWORD(v318))
    {
      v100 = 0;
      v101 = 0;
      v102 = v317;
      do
      {
        *(_BYTE *)(v98 + v100++) = *((_BYTE *)v102 + 12 * v101 + 8);
        v102 = v317;
        v103 = *((unsigned int *)v317 + 3 * v101 + 1);
        v101 = v101 & 0xFFFFFFFF00000000 | v103;
        if (!(_DWORD)v103)
          v101 = v101 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
      }
      while ((v101 & 0xFF00000000) != 0x100000000);
    }
    else
    {
      v100 = 0;
    }
  }
  else
  {
    v100 = 0;
    v99 = 0;
  }
  v104 = *((_DWORD *)this + 3);
  if (v104)
  {
    v105 = *(_QWORD *)this;
    v106 = *(_QWORD *)this + 12 * v104;
    v107 = *((_QWORD *)this + 4);
    v108 = *((_QWORD *)this + 6);
    v109 = v299[0];
    do
    {
      if ((*(_BYTE *)(v105 + 11) & 1) == 0 && *(_BYTE *)(v105 + 10))
      {
        LODWORD(v110) = 0;
        v111 = *(unsigned int *)(v105 + 4);
        v112 = v111 + *(unsigned __int8 *)(v105 + 10);
        do
        {
          if (v110 < v100)
          {
            v110 = v110;
            while (*((unsigned __int8 *)v99 + v110) != *(unsigned __int8 *)(v107 + 2 * v111))
            {
              if (v100 == ++v110)
              {
                LODWORD(v110) = v100;
                break;
              }
            }
          }
          ++*((_DWORD *)v109 + *(unsigned int *)(v108 + 4 * v111));
          v110 = (v110 + 1);
          if (v110 < v100)
          {
            v113 = *(char *)(v107 + 2 * v111 + 1);
            while (*((char *)v99 + v110) <= v113)
            {
              ++*((_DWORD *)v109 + *(unsigned int *)(v108 + 4 * v111));
              if (v100 == ++v110)
              {
                LODWORD(v110) = v100;
                break;
              }
            }
          }
          v114 = v111 + 1;
          v111 = (v111 + 1);
        }
        while (v112 != v114);
      }
      v105 += 12;
    }
    while (v105 != v106);
  }
  if (HIDWORD(v299[1]))
  {
    v115 = 0;
    LODWORD(v116) = 0;
    v117 = v299[0];
    do
    {
      v118 = *((_DWORD *)v117 + v115);
      *((_DWORD *)v117 + v115) = v116;
      v116 = (v118 + v116);
      ++v115;
    }
    while (v115 < HIDWORD(v299[1]));
    v119 = HIDWORD(v310[1]);
    if (HIDWORD(v310[1]) < v116 && LODWORD(v310[1]) < v116)
    {
      v120 = LODWORD(v310[1]) + ((unint64_t)LODWORD(v310[1]) >> 2);
      if (v120 >= 0x10)
        v121 = v120 + 1;
      else
        v121 = 16;
      if (v121 <= v116)
        v122 = v116;
      else
        v122 = v121;
      if (v122 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19573F0B0);
      }
      v123 = v310[0];
      v124 = (WTF *)WTF::fastMalloc((WTF *)(4 * v122));
      LODWORD(v310[1]) = v122;
      v310[0] = v124;
      memcpy(v124, v123, 4 * v119);
      if (v123)
      {
        if (v310[0] == v123)
        {
          v310[0] = 0;
          LODWORD(v310[1]) = 0;
        }
        WTF::fastFree(v123, v125);
      }
    }
    HIDWORD(v310[1]) = v116;
    v126 = HIDWORD(v311[1]);
    if (HIDWORD(v311[1]) < v116 && LODWORD(v311[1]) < v116)
    {
      v127 = LODWORD(v311[1]) + ((unint64_t)LODWORD(v311[1]) >> 2);
      if (v127 >= 0x10)
        v128 = v127 + 1;
      else
        v128 = 16;
      if (v128 <= v116)
        v129 = v116;
      else
        v129 = v128;
      if (v129 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19573F0B8);
      }
      v130 = v311[0];
      v131 = (WTF *)WTF::fastMalloc((WTF *)(4 * v129));
      LODWORD(v311[1]) = v129;
      v311[0] = v131;
      memcpy(v131, v130, 4 * v126);
      if (v130)
      {
        if (v311[0] == v130)
        {
          v311[0] = 0;
          LODWORD(v311[1]) = 0;
        }
        WTF::fastFree(v130, v132);
      }
    }
    HIDWORD(v311[1]) = v116;
    v133 = HIDWORD(v312[1]);
    if (HIDWORD(v312[1]) < v116 && LODWORD(v312[1]) < v116)
    {
      v134 = LODWORD(v312[1]) + ((unint64_t)LODWORD(v312[1]) >> 2);
      if (v134 >= 0x10)
        v135 = v134 + 1;
      else
        v135 = 16;
      if (v135 <= v116)
        v136 = v116;
      else
        v136 = v135;
      if (v136 >> 30)
      {
LABEL_403:
        __break(0xC471u);
        JUMPOUT(0x19573F040);
      }
      v137 = v312[0];
      v138 = (WTF *)WTF::fastMalloc((WTF *)(4 * v136));
      LODWORD(v312[1]) = v136;
      v312[0] = v138;
      memcpy(v138, v137, 4 * v133);
      if (v137)
      {
        if (v312[0] == v137)
        {
          v312[0] = 0;
          LODWORD(v312[1]) = 0;
        }
        WTF::fastFree(v137, v139);
      }
    }
    v140 = v116;
  }
  else
  {
    v116 = 0;
    v140 = 0;
    HIDWORD(v310[1]) = 0;
    HIDWORD(v311[1]) = 0;
  }
  HIDWORD(v312[1]) = v140;
  v141 = *((unsigned int *)this + 3);
  if (HIDWORD(v300[1]) < v141)
  {
    if (LODWORD(v300[1]) < v141)
    {
      v142 = LODWORD(v300[1]) + ((unint64_t)LODWORD(v300[1]) >> 2);
      if (v142 >= 0x10)
        v143 = v142 + 1;
      else
        v143 = 16;
      if (v143 <= v141)
        v144 = *((unsigned int *)this + 3);
      else
        v144 = v143;
      if (v144 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19573F088);
      }
      v145 = v300[0];
      LODWORD(v300[1]) = v144;
      v300[0] = (WTF *)WTF::fastMalloc((WTF *)(4 * v144));
      memcpy(v300[0], v145, 4 * HIDWORD(v300[1]));
      if (v145)
      {
        if (v300[0] == v145)
        {
          v300[0] = 0;
          LODWORD(v300[1]) = 0;
        }
        WTF::fastFree(v145, v146);
      }
    }
    HIDWORD(v300[1]) = v141;
    goto LABEL_201;
  }
  HIDWORD(v300[1]) = *((_DWORD *)this + 3);
  if ((_DWORD)v141)
LABEL_201:
    bzero(v300[0], 4 * v141);
  if (HIDWORD(v301[1]) < v140 && LODWORD(v301[1]) < v140)
  {
    v147 = LODWORD(v301[1]) + ((unint64_t)LODWORD(v301[1]) >> 2);
    if (v147 >= 0x10)
      v148 = v147 + 1;
    else
      v148 = 16;
    if (v148 > v116)
      v116 = v148;
    if (v116 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19573F090);
    }
    v149 = v301[0];
    LODWORD(v301[1]) = v116;
    v301[0] = (WTF *)WTF::fastMalloc((WTF *)(4 * v116));
    memcpy(v301[0], v149, 4 * HIDWORD(v301[1]));
    if (v149)
    {
      if (v301[0] == v149)
      {
        v301[0] = 0;
        LODWORD(v301[1]) = 0;
      }
      WTF::fastFree(v149, v150);
    }
  }
  HIDWORD(v301[1]) = v140;
  v151 = HIDWORD(v309[1]);
  if (HIDWORD(v309[1]))
  {
    if (HIDWORD(v309[1]) >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19573F078);
    }
    v152 = (WTF *)(4 * HIDWORD(v309[1]));
    v153 = (void *)WTF::fastMalloc(v152);
  }
  else
  {
    v152 = 0;
    v153 = 0;
  }
  bzero(v153, (size_t)v152);
  v155 = *((unsigned int *)this + 3);
  if ((_DWORD)v155)
  {
    v156 = 0;
    v157 = *(_QWORD *)this;
    v158 = *((_QWORD *)this + 4);
    v159 = *((_QWORD *)this + 6);
    v160 = v299[0];
    v161 = v300[0];
    v162 = v301[0];
    do
    {
      if ((*(_BYTE *)(v157 + 12 * v156 + 11) & 1) == 0)
      {
        v163 = v157 + 12 * v156;
        if (*(_BYTE *)(v163 + 10))
        {
          LODWORD(v164) = 0;
          v165 = *(unsigned int *)(v163 + 4);
          v166 = v165 + *(unsigned __int8 *)(v163 + 10);
          v167 = v309[0];
          v154 = (char *)v309[0] + 12;
          do
          {
            if (v164 < v100)
            {
              v164 = v164;
              while (*((unsigned __int8 *)v99 + v164) != *(unsigned __int8 *)(v158 + 2 * v165))
              {
                if (v100 == ++v164)
                {
                  LODWORD(v164) = v100;
                  break;
                }
              }
            }
            v168 = *(unsigned int *)(v159 + 4 * v165);
            v169 = (*((_DWORD *)v161 + v168) + *((_DWORD *)v160 + v168));
            *((_DWORD *)v162 + v169) = v156;
            if (v151 <= v164)
            {
              __break(0xC471u);
              JUMPOUT(0x19573F048);
            }
            v170 = *((_DWORD *)v153 + v164);
            v171 = v170 + *((_DWORD *)v167 + 3 * v164);
            *((_DWORD *)v153 + v164) = v170 + 1;
            v172 = v310[0];
            *((_DWORD *)v310[0] + v171) = v169;
            v173 = v311[0];
            *((_DWORD *)v311[0] + v169) = v171;
            v174 = v312[0];
            *((_DWORD *)v312[0] + v169) = v164;
            ++*((_DWORD *)v161 + v168);
            LODWORD(v168) = v164 + 1;
            if ((int)v164 + 1 < v100)
            {
              v175 = v164;
              v176 = *(char *)(v158 + 2 * v165 + 1);
              v168 = v175 + 1;
              v177 = &v154[12 * v175];
              while (*((char *)v99 + v168) <= v176)
              {
                v178 = *(unsigned int *)(v159 + 4 * v165);
                v179 = (*((_DWORD *)v161 + v178) + *((_DWORD *)v160 + v178));
                *((_DWORD *)v162 + v179) = v156;
                if (v151 == v168)
                  goto LABEL_403;
                v180 = *(_DWORD *)v177;
                v177 += 12;
                v181 = *((_DWORD *)v153 + v168);
                *((_DWORD *)v153 + v168) = v181 + 1;
                *((_DWORD *)v172 + (v181 + v180)) = v179;
                *((_DWORD *)v173 + v179) = v181 + v180;
                *((_DWORD *)v174 + v179) = v168;
                ++*((_DWORD *)v161 + v178);
                if (++v168 >= (unint64_t)v100)
                {
                  LODWORD(v168) = v100;
                  break;
                }
              }
            }
            v182 = v165 + 1;
            v165 = (v165 + 1);
            LODWORD(v164) = v168;
          }
          while (v166 != v182);
          v155 = *((unsigned int *)this + 3);
        }
      }
      ++v156;
    }
    while (v156 < v155);
  }
  if (v153)
    WTF::fastFree((WTF *)v153, v154);
  if (v99)
    WTF::fastFree(v99, v154);
  v183 = v317;
  if (v319 != (_BYTE *)v317 && v317)
  {
    v317 = 0;
    LODWORD(v318) = 0;
    WTF::fastFree(v183, v154);
  }
  v317 = 0;
  LODWORD(v321) = 0;
  v184 = *((_DWORD *)this + 3);
  if (!v184)
  {
    v222 = 0;
    goto LABEL_298;
  }
  for (j = 0; j < v184; LODWORD(v321) = j)
  {
    v186 = *(_QWORD *)this + 12 * j;
    v187 = *(unsigned __int16 *)(v186 + 8);
    if (!*(_WORD *)(v186 + 8))
      goto LABEL_285;
    v188 = *(unsigned int *)(*(_QWORD *)this + 12 * j);
    v189 = (unsigned __int16 *)(*((_QWORD *)this + 2) + 8 * v188);
    v190 = -2 * v187;
    v191 = -1640531527;
    do
    {
      v192 = v191 + *v189;
      v193 = (v189[1] << 11) ^ (v192 << 16);
      v191 = (v193 ^ v192) + ((v193 ^ v192) >> 11);
      v189 += 2;
    }
    while (!__CFADD__(v190++, 1));
    v195 = (v191 ^ (8 * v191)) + ((v191 ^ (8 * v191)) >> 5);
    v196 = (v195 ^ (4 * v195)) + ((v195 ^ (4 * v195)) >> 15);
    v197 = v196 ^ (v196 << 10);
    if (v197)
      v198 = v197;
    else
      v198 = 0x800000;
    v199 = v317;
    if (v317
    {
      v200 = *((_DWORD *)v199 - 2);
    }
    else
    {
      v200 = 0;
    }
    v201 = 0;
    v202 = 0;
    v203 = *((_QWORD *)this + 2);
    for (k = v198; ; k = v205 + v202)
    {
      v205 = k & v200;
      v206 = (uint64_t)v199 + 48 * v205;
      v207 = *(_DWORD *)(v206 + 24);
      if (v207 == 1)
        break;
      if (v207 == 2)
      {
        v201 = (_OWORD *)((char *)v199 + 48 * v205);
      }
      else if (!v207)
      {
        if (v201)
        {
          v201[1] = 0u;
          v201[2] = 0u;
          *v201 = 0u;
          --*((_DWORD *)v199 - 4);
          v206 = (uint64_t)v201;
        }
        *(_DWORD *)v206 = v198;
        *(_QWORD *)(v206 + 8) = this;
        *(_DWORD *)(v206 + 16) = v188;
        *(_WORD *)(v206 + 20) = v187;
        *(_DWORD *)(v206 + 24) = 1;
        v212 = *(WTF **)(v206 + 32);
        if (v212)
        {
          *(_QWORD *)(v206 + 32) = 0;
          *(_DWORD *)(v206 + 40) = 0;
          WTF::fastFree(v212, v154);
        }
        *(_QWORD *)(v206 + 32) = 0;
        *(_QWORD *)(v206 + 40) = 0;
        v213 = v317;
        if (v317)
          v214 = *((_DWORD *)v317 - 3) + 1;
        else
          v214 = 1;
        *((_DWORD *)v317 - 3) = v214;
        v215 = (*((_DWORD *)v213 - 4) + v214);
        v216 = *((unsigned int *)v213 - 1);
        if (v216 > 0x400)
        {
          if (v216 > 2 * v215)
            goto LABEL_281;
        }
        else if (3 * v216 > 4 * v215)
        {
          goto LABEL_281;
        }
        goto LABEL_281;
      }
LABEL_270:
      ++v202;
    }
    if (*(WebCore::ContentExtensions::DFAMinimizer **)(v206 + 8) != this)
      goto LABEL_270;
    if (*(unsigned __int16 *)(v206 + 20) != (_DWORD)v187)
      goto LABEL_270;
    v208 = *(unsigned int *)(v206 + 16);
    if (*(_QWORD *)(v203 + 8 * v208) != *(_QWORD *)(v203 + 8 * v188))
      goto LABEL_270;
    v209 = 0;
    v210 = v208 + 1;
    while (v187 - 1 != v209)
    {
      v211 = *(char **)(v203 + 8 * (v210 + v209));
      v154 = *(char **)(v203 + 8 * (v188 + 1 + v209++));
      if (v211 != v154)
      {
        if (v209 >= v187)
          break;
        goto LABEL_270;
      }
    }
LABEL_281:
    v217 = (uint64_t *)(v206 + 32);
    v218 = *(unsigned int *)(v206 + 44);
    if ((_DWORD)v218 == *(_DWORD *)(v206 + 40))
    {
      v221 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v217, v218 + 1, (unint64_t)&v321);
      v218 = *(unsigned int *)(v206 + 44);
      v219 = *(_QWORD *)(v206 + 32);
      v220 = *v221;
    }
    else
    {
      v219 = *v217;
      v220 = v321;
    }
    *(_DWORD *)(v219 + 4 * v218) = v220;
    ++*(_DWORD *)(v206 + 44);
    j = v321;
    v184 = *((_DWORD *)this + 3);
LABEL_285:
    ++j;
  }
  v222 = v317;
  if (!v317)
  {
LABEL_298:
    v298 = 1;
    goto LABEL_313;
  }
  if (*((_DWORD *)v317 - 3))
  {
    v223 = *((unsigned int *)v317 - 1);
    v224 = v317;
    if ((_DWORD)v223)
    {
      v225 = 0;
      while (1)
      {
        v224 = (WTF *)((char *)v317 + v225);
        if ((*(_DWORD *)((_BYTE *)v317 + v225 + 24) & 0xFFFFFFFD) != 0)
          break;
        v225 += 48;
        if (48 * v223 == v225)
          goto LABEL_312;
      }
    }
    v226 = (WTF *)((char *)v317 + 48 * v223);
    if (v226 != v224)
    {
LABEL_300:
      v227 = *((unsigned int *)v224 + 11);
      if ((_DWORD)v227)
      {
        v228 = (unsigned int *)*((_QWORD *)v224 + 4);
        v229 = 4 * v227;
        do
        {
          v230 = *v228;
          v231 = v304[0];
          v232 = *((_DWORD *)v305[0] + v230);
          LODWORD(v321) = v232;
          v233 = v303[0];
          v234 = (char *)v302[0] + 12 * v232;
          v235 = *((unsigned int *)v304[0] + v230);
          v237 = *((_DWORD *)v234 + 2);
          v236 = (int *)(v234 + 8);
          v238 = v237 + *((_DWORD *)v302[0] + 3 * v232);
          v239 = *((unsigned int *)v303[0] + v238);
          *((_DWORD *)v303[0] + v238) = v230;
          *((_DWORD *)v233 + v235) = v239;
          *((_DWORD *)v231 + v230) = v238;
          *((_DWORD *)v231 + v239) = v235;
          v240 = *v236;
          if (!*v236)
          {
            if (HIDWORD(v307) == (_DWORD)v307)
            {
              v241 = WTF::Vector<unsigned int,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v306, HIDWORD(v307) + 1, (unint64_t)&v321);
              *((_DWORD *)v306 + HIDWORD(v307)) = *(_DWORD *)v241;
            }
            else
            {
              *((_DWORD *)v306 + HIDWORD(v307)) = v232;
            }
            ++HIDWORD(v307);
            v240 = *v236;
          }
          *v236 = v240 + 1;
          ++v228;
          v229 -= 4;
        }
        while (v229);
      }
      while (1)
      {
        v224 = (WTF *)((char *)v224 + 48);
        if (v224 == v226)
          break;
        if ((*((_DWORD *)v224 + 6) & 0xFFFFFFFD) != 0)
        {
          if (v224 != v226)
            goto LABEL_300;
          break;
        }
      }
    }
  }
LABEL_312:
  v298 = 0;
LABEL_313:
  for (m = v316; m < HIDWORD(v309[1]); v316 = m)
  {
    v243 = (unsigned int *)((char *)v309[0] + 12 * m);
    v244 = *v243;
    if (v244 < v243[1] + v244)
    {
      do
      {
        v245 = *((unsigned int *)v301[0] + *((unsigned int *)v310[0] + v244));
        v246 = *((_DWORD *)v305[0] + v245);
        LODWORD(v321) = v246;
        v247 = (char *)v302[0] + 12 * v246;
        v248 = v304[0];
        v249 = v303[0];
        v250 = *((unsigned int *)v304[0] + v245);
        v252 = *((_DWORD *)v247 + 2);
        v251 = (int *)(v247 + 8);
        v253 = v252 + *((_DWORD *)v302[0] + 3 * v246);
        v254 = *((unsigned int *)v303[0] + v253);
        *((_DWORD *)v303[0] + v253) = v245;
        *((_DWORD *)v249 + v250) = v254;
        *((_DWORD *)v248 + v245) = v253;
        *((_DWORD *)v248 + v254) = v250;
        v255 = *v251;
        if (!*v251)
        {
          if (HIDWORD(v307) == (_DWORD)v307)
          {
            v256 = WTF::Vector<unsigned int,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v306, HIDWORD(v307) + 1, (unint64_t)&v321);
            *((_DWORD *)v306 + HIDWORD(v307)) = *(_DWORD *)v256;
          }
          else
          {
            *((_DWORD *)v306 + HIDWORD(v307)) = v246;
          }
          ++HIDWORD(v307);
          v255 = *v251;
        }
        *v251 = v255 + 1;
        ++v244;
      }
      while (v244 < v243[1] + *v243);
    }
    m = v316 + 1;
  }
  v257 = *((unsigned int *)this + 3);
  if (!(_DWORD)v257)
    goto LABEL_391;
  if (v257 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x19573F068);
  }
  v258 = WTF::fastMalloc((WTF *)(4 * v257));
  v260 = (WTF *)v258;
  for (n = 0; n != v257; ++n)
    *(_DWORD *)(v258 + 4 * n) = n;
  v262 = *((unsigned int *)this + 3);
  if ((_DWORD)v262)
  {
    for (ii = 0; ii < v262; ++ii)
    {
      v264 = *((unsigned int *)v303[0] + *((unsigned int *)v302[0] + 3 * *((unsigned int *)v305[0] + ii)));
      if (ii != v264)
      {
        if (ii >= v257)
        {
          __break(0xC471u);
          JUMPOUT(0x19573F058);
        }
        *((_DWORD *)v260 + ii) = v264;
        v265 = *(_QWORD *)this;
        v266 = (unsigned int *)(*(_QWORD *)this + 12 * ii);
        v268 = v266[1];
        v267 = v268;
        *((_BYTE *)v266 + 11) = 1;
        if (v268 < v268 + *((unsigned __int8 *)v266 + 10))
        {
          v269 = 2 * v267;
          do
          {
            *(_WORD *)(*((_QWORD *)this + 4) + v269) = -1;
            *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v267++) = -1;
            v269 += 2;
          }
          while (v267 < v266[1] + *((unsigned __int8 *)v266 + 10));
        }
        v270 = *v266;
        v271 = *(unsigned __int16 *)(v265 + 12 * ii + 8);
        if (v270 < (int)v270 + v271)
          memset((void *)(*((_QWORD *)this + 2) + 8 * v270), 255, 8 * (v271 - 1) + 8);
        *(unsigned int *)((char *)v266 + 7) = 0;
        *(_QWORD *)v266 = 0;
        v262 = *((unsigned int *)this + 3);
      }
    }
  }
  else
  {
    v262 = 0;
  }
  v272 = *((unsigned int *)this + 16);
  if (v257 <= v272)
  {
LABEL_391:
    __break(0xC471u);
    JUMPOUT(0x19573F060);
  }
  *((_DWORD *)this + 16) = *((_DWORD *)v260 + v272);
  if (v262)
  {
    v273 = *(_QWORD *)this;
    v274 = *(_QWORD *)this + 12 * v262;
    v275 = *((_QWORD *)this + 6);
    do
    {
      if ((*(_BYTE *)(v273 + 11) & 1) == 0 && *(_BYTE *)(v273 + 10))
      {
        v276 = *(unsigned int *)(v273 + 4);
        v277 = v276 + *(unsigned __int8 *)(v273 + 10);
        do
        {
          v278 = *(unsigned int *)(v275 + 4 * v276);
          if (v257 <= v278)
          {
            __break(0xC471u);
            JUMPOUT(0x19573F050);
          }
          v279 = *((_DWORD *)v260 + v278);
          if ((_DWORD)v278 != v279)
            *(_DWORD *)(v275 + 4 * v276) = v279;
          v280 = v276 + 1;
          v276 = (v276 + 1);
        }
        while (v277 != v280);
      }
      v273 += 12;
    }
    while (v273 != v274);
  }
  WTF::fastFree(v260, v259);
  if ((v298 & 1) == 0)
  {
    v282 = *((unsigned int *)v222 - 1);
    if ((_DWORD)v282)
    {
      v283 = (_DWORD *)((char *)v222 + 40);
      do
      {
        if (*(v283 - 4) != 2)
        {
          v284 = (WTF *)*((_QWORD *)v283 - 1);
          if (v284)
          {
            *((_QWORD *)v283 - 1) = 0;
            *v283 = 0;
            WTF::fastFree(v284, v281);
          }
        }
        v283 += 12;
        --v282;
      }
      while (v282);
    }
    WTF::fastFree((WTF *)((char *)v222 - 16), v281);
  }
  v285 = v313;
  if (v315 != (_BYTE *)v313 && v313)
  {
    v313 = 0;
    LODWORD(v314) = 0;
    WTF::fastFree(v285, v281);
  }
  v286 = v312[0];
  if (v312[0])
  {
    v312[0] = 0;
    LODWORD(v312[1]) = 0;
    WTF::fastFree(v286, v281);
  }
  v287 = v311[0];
  if (v311[0])
  {
    v311[0] = 0;
    LODWORD(v311[1]) = 0;
    WTF::fastFree(v287, v281);
  }
  v288 = v310[0];
  if (v310[0])
  {
    v310[0] = 0;
    LODWORD(v310[1]) = 0;
    WTF::fastFree(v288, v281);
  }
  v289 = v309[0];
  if (v309[0])
  {
    v309[0] = 0;
    LODWORD(v309[1]) = 0;
    WTF::fastFree(v289, v281);
  }
  v290 = v306;
  if (v308 != (_BYTE *)v306 && v306)
  {
    v306 = 0;
    LODWORD(v307) = 0;
    WTF::fastFree(v290, v281);
  }
  v291 = v305[0];
  if (v305[0])
  {
    v305[0] = 0;
    LODWORD(v305[1]) = 0;
    WTF::fastFree(v291, v281);
  }
  v292 = v304[0];
  if (v304[0])
  {
    v304[0] = 0;
    LODWORD(v304[1]) = 0;
    WTF::fastFree(v292, v281);
  }
  v293 = v303[0];
  if (v303[0])
  {
    v303[0] = 0;
    LODWORD(v303[1]) = 0;
    WTF::fastFree(v293, v281);
  }
  v294 = v302[0];
  if (v302[0])
  {
    v302[0] = 0;
    LODWORD(v302[1]) = 0;
    WTF::fastFree(v294, v281);
  }
  v295 = v301[0];
  if (v301[0])
  {
    v301[0] = 0;
    LODWORD(v301[1]) = 0;
    WTF::fastFree(v295, v281);
  }
  v296 = v300[0];
  if (v300[0])
  {
    v300[0] = 0;
    LODWORD(v300[1]) = 0;
    WTF::fastFree(v296, v281);
  }
  result = v299[0];
  if (v299[0])
  {
    v299[0] = 0;
    LODWORD(v299[1]) = 0;
    return (WTF *)WTF::fastFree(result, v281);
  }
  return result;
}

char *WebCore::ContentExtensions::`anonymous namespace'::FullGraphPartition::refinePartitions(char *this, void *a2)
{
  char *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  char **v6;
  uint64_t *v7;
  char **v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v57;
  char **v58;
  unsigned int *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;

  v2 = this;
  v3 = *((unsigned int *)this + 31);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)*((_QWORD *)this + 14);
    v5 = &v4[v3];
    v6 = (char **)(this + 48);
    v7 = (uint64_t *)(this + 640);
    v8 = (char **)(this + 704);
    v57 = this + 720;
    v58 = (char **)(this + 48);
    v59 = v5;
    do
    {
      v9 = *v6;
      v10 = &(*v6)[12 * *v4];
      v11 = v10 + 8;
      v12 = *((_DWORD *)v10 + 2);
      v13 = *((_DWORD *)v10 + 1);
      if (v13 == v12)
      {
        *v11 = 0;
      }
      else
      {
        if (v13 >= 2 * v12)
        {
          LODWORD(v60) = *(_DWORD *)v10;
          HIDWORD(v60) = v12;
          v61 = 0;
          *(_DWORD *)v10 += *v11;
        }
        else
        {
          LODWORD(v60) = *(_DWORD *)v10 + v12;
          HIDWORD(v60) = v13 - v12;
          v61 = 0;
          v12 = v13 - v12;
        }
        *((_DWORD *)v10 + 1) -= v12;
        *v11 = 0;
        v14 = *((unsigned int *)v2 + 15);
        if ((_DWORD)v14 == *((_DWORD *)v2 + 14))
        {
          this = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v14 + 1, (unint64_t)&v60);
          v15 = *((_QWORD *)v2 + 6) + 12 * *((unsigned int *)v2 + 15);
          v16 = *(_QWORD *)this;
          v17 = *((_DWORD *)this + 2);
        }
        else
        {
          v16 = v60;
          v17 = v61;
          v15 = (uint64_t)&v9[12 * v14];
        }
        *(_DWORD *)(v15 + 8) = v17;
        *(_QWORD *)v15 = v16;
        ++*((_DWORD *)v2 + 15);
        v18 = v60;
        if (v60 < HIDWORD(v60) + (int)v60)
        {
          v19 = *((_QWORD *)v2 + 8);
          v20 = *((_QWORD *)v2 + 12);
          do
            *(_DWORD *)(v20 + 4 * *(unsigned int *)(v19 + 4 * v18++)) = v14;
          while (v18 < (HIDWORD(v60) + v60));
        }
        v21 = &(*v6)[12 * v14];
        v22 = *(_DWORD *)v21;
        v23 = *((_DWORD *)v21 + 1);
        if (*(_DWORD *)v21 < v23 + *(_DWORD *)v21)
        {
          v24 = *(unsigned int *)v21;
          do
          {
            v25 = *(unsigned int *)(*((_QWORD *)v2 + 8) + 4 * v24);
            v26 = *(unsigned int *)(*((_QWORD *)v2 + 2) + 4 * v25);
            if ((_DWORD)v26)
            {
              v27 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v25);
              do
              {
                LODWORD(v62) = 0;
                LODWORD(v62) = *(_DWORD *)(*((_QWORD *)v2 + 86) + 4 * v27);
                v28 = *((_QWORD *)v2 + 80);
                v29 = v28 + 12 * v62;
                v30 = *((_QWORD *)v2 + 84);
                v31 = *(unsigned int *)(v30 + 4 * v27);
                v33 = *(_DWORD *)(v29 + 8);
                v32 = (int *)(v29 + 8);
                v34 = v33 + *(_DWORD *)(v28 + 12 * v62);
                v35 = *((_QWORD *)v2 + 82);
                v36 = *(unsigned int *)(v35 + 4 * v34);
                *(_DWORD *)(v35 + 4 * v34) = v27;
                *(_DWORD *)(v35 + 4 * v31) = v36;
                *(_DWORD *)(v30 + 4 * v27) = v34;
                *(_DWORD *)(v30 + 4 * v36) = v31;
                v37 = *v32;
                if (!*v32)
                {
                  v38 = *((unsigned int *)v2 + 179);
                  if ((_DWORD)v38 == *((_DWORD *)v2 + 178))
                  {
                    this = WTF::Vector<unsigned int,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v2 + 88, v38 + 1, (unint64_t)&v62);
                    v38 = *((unsigned int *)v2 + 179);
                    v39 = (char *)*((_QWORD *)v2 + 88);
                    v40 = *(_DWORD *)this;
                  }
                  else
                  {
                    v39 = *v8;
                    v40 = v62;
                  }
                  *(_DWORD *)&v39[4 * v38] = v40;
                  ++*((_DWORD *)v2 + 179);
                  v37 = *v32;
                }
                *v32 = v37 + 1;
                ++v27;
                --v26;
              }
              while (v26);
              v22 = *(_DWORD *)v21;
              v23 = *((_DWORD *)v21 + 1);
            }
            ++v24;
          }
          while (v24 < v22 + v23);
        }
        v41 = *((unsigned int *)v2 + 179);
        if ((_DWORD)v41)
        {
          v42 = (unsigned int *)*((_QWORD *)v2 + 88);
          v43 = &v42[v41];
          do
          {
            v44 = *v7;
            v45 = (_DWORD *)(*v7 + 12 * *v42);
            v46 = v45 + 2;
            v47 = v45[2];
            v48 = v45[1];
            if (v48 == v47)
            {
              *v46 = 0;
            }
            else
            {
              if (v48 >= 2 * v47)
              {
                LODWORD(v62) = *v45;
                HIDWORD(v62) = v47;
                v63 = 0;
                *v45 += *v46;
              }
              else
              {
                LODWORD(v62) = *v45 + v47;
                HIDWORD(v62) = v48 - v47;
                v63 = 0;
                v47 = v48 - v47;
              }
              v45[1] -= v47;
              *v46 = 0;
              v49 = *((unsigned int *)v2 + 163);
              if ((_DWORD)v49 == *((_DWORD *)v2 + 162))
              {
                this = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v2 + 80, v49 + 1, (unint64_t)&v62);
                v50 = *((_QWORD *)v2 + 80) + 12 * *((unsigned int *)v2 + 163);
                v51 = *(_QWORD *)this;
                v52 = *((_DWORD *)this + 2);
              }
              else
              {
                v51 = v62;
                v52 = v63;
                v50 = v44 + 12 * v49;
              }
              *(_DWORD *)(v50 + 8) = v52;
              *(_QWORD *)v50 = v51;
              ++*((_DWORD *)v2 + 163);
              v53 = v62;
              if (v62 < HIDWORD(v62) + (int)v62)
              {
                v54 = *((_QWORD *)v2 + 82);
                v55 = *((_QWORD *)v2 + 86);
                do
                  *(_DWORD *)(v55 + 4 * *(unsigned int *)(v54 + 4 * v53++)) = v49;
                while (v53 < (HIDWORD(v62) + v62));
              }
            }
            ++v42;
          }
          while (v42 != v43);
        }
        if (*((_DWORD *)v2 + 178))
        {
          if (*((_DWORD *)v2 + 179))
            *((_DWORD *)v2 + 179) = 0;
          this = *v8;
          if (v57 != *v8 && this)
          {
            *((_QWORD *)v2 + 88) = 0;
            *((_DWORD *)v2 + 178) = 0;
            WTF::fastFree((WTF *)this, a2);
            this = (char *)*((_QWORD *)v2 + 88);
          }
          if (!this)
          {
            *((_QWORD *)v2 + 88) = v57;
            *((_DWORD *)v2 + 178) = 128;
          }
        }
        v6 = v58;
        v5 = v59;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  if (*((_DWORD *)v2 + 30))
  {
    if (*((_DWORD *)v2 + 31))
      *((_DWORD *)v2 + 31) = 0;
    this = (char *)*((_QWORD *)v2 + 14);
    if (v2 + 128 == this || this == 0)
    {
      if (this)
        return this;
      goto LABEL_59;
    }
    *((_QWORD *)v2 + 14) = 0;
    *((_DWORD *)v2 + 30) = 0;
    WTF::fastFree((WTF *)this, a2);
    this = (char *)*((_QWORD *)v2 + 14);
    if (!this)
    {
LABEL_59:
      *((_QWORD *)v2 + 14) = v2 + 128;
      *((_DWORD *)v2 + 30) = 128;
    }
  }
  return this;
}

uint64_t WebCore::ContentExtensions::DFANode::bestFallbackTarget(WebCore::ContentExtensions::DFANode *this, const WebCore::ContentExtensions::DFA *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  void *v12;
  unsigned int i;
  char *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  _QWORD v22[2];
  char v23;
  unsigned int v24;
  int v25;
  uint64_t v26;

  v26 = 0;
  v3 = *((unsigned int *)this + 1);
  v4 = v3 + *((unsigned __int8 *)this + 10);
  v5 = *((_QWORD *)a2 + 4);
  LOBYTE(v6) = *(_BYTE *)(v5 + 2 * v3);
  if (!(_BYTE)v6)
  {
    v10 = *(_BYTE *)(v5 + 2 * v3 + 1);
    if (v10)
    {
      v11 = *((_QWORD *)a2 + 6);
      v8 = *(unsigned int *)(v11 + 4 * v3);
      v25 = *(_DWORD *)(v11 + 4 * v3);
    }
    else
    {
      v3 = (v3 + 1);
      v6 = *(unsigned __int8 *)(v5 + 2 * v3);
      v19 = *((_QWORD *)a2 + 6);
      v8 = *(unsigned int *)(v19 + 4 * v3);
      v25 = *(_DWORD *)(v19 + 4 * v3);
      if (v6)
        goto LABEL_3;
      v10 = *(_BYTE *)(v5 + 2 * v3 + 1);
    }
    v9 = v10;
    goto LABEL_7;
  }
  v7 = *((_QWORD *)a2 + 6);
  v8 = *(unsigned int *)(v7 + 4 * v3);
  v25 = *(_DWORD *)(v7 + 4 * v3);
LABEL_3:
  v9 = *(char *)(v5 + 2 * v3 + 1) - (char)v6 + 1;
LABEL_7:
  v24 = v9;
  WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(v22, &v26, &v25, &v24);
  for (i = v3 + 1; v4 != i; ++i)
  {
    v14 = (char *)(*((_QWORD *)a2 + 4) + 2 * i);
    v15 = v14[1] - *v14 + 1;
    v16 = *(_DWORD *)(*((_QWORD *)a2 + 6) + 4 * i);
    v20 = v16;
    v21 = v15;
    WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(v22, &v26, (int *)&v20, &v21);
    v17 = *(_DWORD *)(v22[0] + 4);
    if (!v23)
    {
      v17 += v15;
      *(_DWORD *)(v22[0] + 4) = v17;
    }
    if (v17 <= v9)
      v8 = v8;
    else
      v8 = v16;
    if (v17 > v9)
      v9 = v17;
  }
  if (v26)
    WTF::fastFree((WTF *)(v26 - 16), v12);
  return v8;
}

_QWORD *WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 8 * v21;
        goto LABEL_33;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_DWORD *)(v8 + 8 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15 != -1);
    if (v17)
    {
      *v17 = 0xFFFFFFFFLL;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  v15[1] = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_28;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_29:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v26, v15);
    v15 = result;
    v22 = *a2;
    if (*a2)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
  }
  v28 = v22 + 8 * v25;
  v27 = 1;
LABEL_33:
  *v7 = v15;
  v7[1] = v28;
  *((_BYTE *)v7 + 16) = v27;
  return result;
}

void WebCore::ContentExtensions::NFAToDFA::convert(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  int *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  WTF *v56;
  int v57;
  uint64_t v58;
  char *v59;
  WTF *v60;
  int v61;
  int *v62;
  int v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int v74;
  int v75;
  int *v76;
  unsigned int v77;
  void *v78;
  unsigned int v79;
  WTF *v80;
  uint64_t v82;
  unint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  uint64_t *v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void *v104;
  WTF *v105;
  uint64_t *v106;
  char v107;
  void *v108;
  uint64_t v109;
  int v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  double v145;
  double v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  int *v152;
  int *v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  int *v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  char *v167;
  uint64_t v168;
  char v169;
  WTF *v170;
  int *v171;
  uint64_t v172;
  int *v173;
  int *v174;
  uint64_t v175;
  int i;
  int v177;
  int *v178;
  unsigned int v179;
  uint64_t v180;
  int *v181;
  unsigned int v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF *v202;
  uint64_t v203;
  WTF::StringImpl *v205;
  uint64_t v207;
  uint64_t v208;
  WTF **v209;
  WTF *v210;
  WTF *v211;
  WTF *v212;
  WTF *v213;
  WTF *v214;
  uint64_t v215;
  WTF *v216;
  char v217;
  int *v218;
  const WTF::String *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  WTF *v226;
  WTF *v227;
  WTF *v228;
  WTF *v229;
  WTF *v230;
  uint64_t v231;
  unsigned int v232;
  char v233;
  unsigned int *v235;
  uint64_t v236;
  uint64_t v237;
  WTF *v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  WTF::StringImpl *v245;
  int v246;
  unsigned int v247;
  _QWORD v248[128];
  _QWORD *v249;
  _QWORD v250[3];
  unsigned int v251;
  WTF **v252;
  int *v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  int v258;
  WTF *v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  char v269;
  int **v270;
  uint64_t v271;
  char v272;
  uint64_t *v273;
  uint64_t *v274;
  int **v275;
  unsigned int v276;
  unsigned int v277;
  WTF **v278;
  uint64_t v279;
  int *v280[3];

  v3 = (uint64_t)&v254;
  WTF::FileSystemImpl::openTemporaryFile();
  if (v246 != -1)
  {
    v5 = (unint64_t)&v246;
    v6 = *(WTF **)a1;
    v7 = 24 * *(unsigned int *)(a1 + 12);
    v8 = *(_QWORD *)a1 + v7;
    while ((unint64_t)v6 < v8)
    {
      v9 = WTF::FileSystemImpl::writeToFile();
      v6 = (WTF *)((char *)v6 + v9);
      v7 -= v9;
      if (v9 == -1)
        goto LABEL_21;
    }
    v11 = *(_QWORD *)(a1 + 16);
    v12 = 12 * *(unsigned int *)(a1 + 28);
    v13 = v11 + v12;
    while (v11 < v13)
    {
      v14 = WTF::FileSystemImpl::writeToFile();
      v11 += v14;
      v12 -= v14;
      if (v14 == -1)
        goto LABEL_21;
    }
    v15 = *(_QWORD *)(a1 + 32);
    v16 = 4 * *(unsigned int *)(a1 + 44);
    v17 = v15 + v16;
    while (v15 < v17)
    {
      v18 = WTF::FileSystemImpl::writeToFile();
      v15 += v18;
      v16 -= v18;
      if (v18 == -1)
        goto LABEL_21;
    }
    v19 = *(_QWORD *)(a1 + 48);
    v20 = 4 * *(unsigned int *)(a1 + 60);
    v21 = v19 + v20;
    while (v19 < v21)
    {
      v22 = WTF::FileSystemImpl::writeToFile();
      v19 += v22;
      v20 -= v22;
      if (v22 == -1)
        goto LABEL_21;
    }
    v23 = *(_QWORD *)(a1 + 64);
    v24 = 8 * *(unsigned int *)(a1 + 76);
    v25 = v23 + v24;
    do
    {
      if (v23 >= v25)
        goto LABEL_351;
      v26 = WTF::FileSystemImpl::writeToFile();
      v23 += v26;
      v24 -= v26;
    }
    while (v26 != -1);
LABEL_21:
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v246, v10);
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v245, v27);
  }
  LOBYTE(v262) = 0;
  v269 = 0;
LABEL_23:
  v28 = v245;
  v245 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v4);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (!v269)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    return;
  }
  v29 = *((_QWORD *)&v266 + 1);
  v5 = v263;
  if (*((_QWORD *)&v266 + 1) > (unint64_t)v263)
    goto LABEL_350;
  v30 = v264;
  v260 = 0;
  v259 = 0;
  v261 = v264;
  v31 = v264;
  if (!(_DWORD)v264)
    goto LABEL_85;
  if ((unint64_t)v264 >> 28)
  {
LABEL_392:
    __break(0xC471u);
    JUMPOUT(0x19573FE7CLL);
  }
  v32 = (WTF *)WTF::fastMalloc((WTF *)(16 * v264));
  v260 = v30;
  v259 = v32;
  if (v30)
  {
    a1 = (uint64_t)v32;
    v237 = v31;
    bzero(v32, 16 * v30);
    v33 = 0;
    v3 = 24;
    do
    {
      v5 = a1 + 16 * v33;
      LODWORD(v254) = v33;
      v245 = 0;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v245, (int *)&v254, (uint64_t)&v238);
      v238 = (WTF *)&v240;
      LODWORD(v240) = v33;
      v35 = 1;
      v239 = 0x100000040;
      do
      {
        v36 = *((unsigned int *)v238 + --v35);
        HIDWORD(v239) = v35;
        if (*((_QWORD *)&v266 + 1) > (unint64_t)v263)
          goto LABEL_350;
        if ((unint64_t)v264 <= v36)
        {
          __break(0xC471u);
          JUMPOUT(0x19574111CLL);
        }
        v37 = v262 + *((_QWORD *)&v266 + 1) + 24 * v36;
        v39 = *(_DWORD *)(v37 + 12);
        v38 = (unsigned int *)(v37 + 12);
        v40 = *(v38 - 1);
        if (v40 < v39)
        {
          while (1)
          {
            LODWORD(v254) = 0;
            if ((unint64_t)v268 > v263)
              goto LABEL_350;
            if (*((_QWORD *)&v265 + 1) <= v40)
              goto LABEL_392;
            LODWORD(v254) = *(_DWORD *)(v262 + v268 + 4 * v40);
            v41 = v245;
            if (v245)
              goto LABEL_43;
            v42 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)&v43 = -1;
            *((_QWORD *)&v43 + 1) = -1;
            *(_OWORD *)(v42 + 16) = v43;
            *(_OWORD *)(v42 + 32) = v43;
            v245 = (WTF::StringImpl *)(v42 + 16);
            *(_DWORD *)(v42 + 12) = 8;
            *((_DWORD *)v245 - 2) = 7;
            *((_DWORD *)v245 - 4) = 0;
            *((_DWORD *)v245 - 3) = 0;
            v41 = v245;
            if (v245)
LABEL_43:
              v44 = *((_DWORD *)v41 - 2);
            else
              v44 = 0;
            v45 = v254;
            v46 = 9 * ((v254 + ~((_DWORD)v254 << 15)) ^ ((v254 + ~((_DWORD)v254 << 15)) >> 10));
            v47 = (v46 ^ (v46 >> 6)) + ~((v46 ^ (v46 >> 6)) << 11);
            v48 = (v47 ^ HIWORD(v47)) & v44;
            v34 = (int *)((char *)v41 + 4 * v48);
            v49 = *v34;
            if (*v34 != -1)
            {
              v62 = 0;
              v63 = 1;
              while (v49 != (_DWORD)v254)
              {
                if (v49 == -2)
                  v62 = v34;
                v48 = (v48 + v63) & v44;
                v34 = (int *)((char *)v41 + 4 * v48);
                v49 = *v34;
                ++v63;
                if (*v34 == -1)
                {
                  if (v62)
                  {
                    *v62 = -1;
                    --*((_DWORD *)v245 - 4);
                    v45 = v254;
                    v34 = v62;
                  }
                  goto LABEL_45;
                }
              }
              goto LABEL_60;
            }
LABEL_45:
            *v34 = v45;
            if (v245)
              v50 = *((_DWORD *)v245 - 3) + 1;
            else
              v50 = 1;
            *((_DWORD *)v245 - 3) = v50;
            if (v245)
              v51 = *((_DWORD *)v245 - 3);
            else
              v51 = 0;
            v52 = (*((_DWORD *)v245 - 4) + v51);
            v53 = *((unsigned int *)v245 - 1);
            if (v53 > 0x400)
            {
              if (v53 <= 2 * v52)
LABEL_63:
                WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)&v245, v34);
            }
            else if (3 * v53 <= 4 * v52)
            {
              goto LABEL_63;
            }
            v54 = HIDWORD(v239);
            if (HIDWORD(v239) == (_DWORD)v239)
            {
              v55 = WTF::Vector<unsigned int,64ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v238, HIDWORD(v239) + 1, (unint64_t)&v254);
              v54 = HIDWORD(v239);
              v56 = v238;
              v57 = *(_DWORD *)v55;
            }
            else
            {
              v56 = v238;
              v57 = v254;
            }
            *((_DWORD *)v56 + v54) = v57;
            ++HIDWORD(v239);
            v58 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v58 == *(_DWORD *)(v5 + 8))
            {
              v59 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 16 * v33), v58 + 1, (unint64_t)&v254);
              v58 = *(unsigned int *)(v5 + 12);
              v60 = *(WTF **)v5;
              v61 = *(_DWORD *)v59;
            }
            else
            {
              v60 = *(WTF **)v5;
              v61 = v254;
            }
            *((_DWORD *)v60 + v58) = v61;
            ++*(_DWORD *)(v5 + 12);
LABEL_60:
            if (++v40 >= *v38)
            {
              v35 = HIDWORD(v239);
              break;
            }
          }
        }
      }
      while (v35);
      v64 = *(unsigned int *)(v5 + 12);
      if (*(_DWORD *)(v5 + 8) > v64)
      {
        v65 = *(WTF **)v5;
        if ((_DWORD)v64)
        {
          *(_DWORD *)(v5 + 8) = v64;
          *(_QWORD *)v5 = WTF::fastRealloc(v65, (void *)(4 * v64));
        }
        else if (v65)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
          WTF::fastFree(v65, v34);
        }
      }
      v66 = v238;
      if (&v240 != (__int128 *)v238 && v238)
      {
        v238 = 0;
        LODWORD(v239) = 0;
        WTF::fastFree(v66, v34);
      }
      if (v245)
        WTF::fastFree((WTF::StringImpl *)((char *)v245 - 16), v34);
      ++v33;
    }
    while (v33 != v237);
    v258 = 0;
    v256 = 0u;
    v257 = 0u;
    v254 = 0u;
    v255 = 0u;
    if (!v269)
      goto LABEL_350;
    v29 = *((_QWORD *)&v266 + 1);
    v5 = v263;
  }
  else
  {
LABEL_85:
    v258 = 0;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }
  if (v29 > v5)
    goto LABEL_350;
  if (!(_QWORD)v264)
  {
    __break(0xC471u);
    JUMPOUT(0x195741294);
  }
  LODWORD(v245) = 0;
  v253 = 0;
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v253, (int *)&v245, (uint64_t)&v238);
  if (!v269 || *((_QWORD *)&v266 + 1) > (unint64_t)v263)
    goto LABEL_350;
  if (!(_QWORD)v264)
  {
    __break(0xC471u);
    JUMPOUT(0x1957412B4);
  }
  v67 = *((unsigned int *)v259 + 3);
  if ((_DWORD)v67)
  {
    a1 = *(_QWORD *)v259;
    v68 = 4 * v67;
    do
    {
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v253, (int *)a1, (uint64_t)&v238);
      a1 += 4;
      v68 -= 4;
    }
    while (v68);
    v252 = 0;
    if (!v269)
      goto LABEL_350;
  }
  else
  {
    v252 = 0;
  }
  v250[0] = &v254;
  v250[1] = &v262;
  v250[2] = &v253;
  v69 = (uint64_t)v253;
  if (v253)
  {
    v70 = *(v253 - 1);
    v71 = &v253[v70];
    if (*(v253 - 3))
    {
      v72 = v253;
      if ((_DWORD)v70)
      {
        v73 = 4 * v70;
        v72 = v253;
        while (*v72 >= 0xFFFFFFFE)
        {
          ++v72;
          v73 -= 4;
          if (!v73)
          {
            v72 = v71;
            goto LABEL_109;
          }
        }
      }
      goto LABEL_109;
    }
    v72 = &v253[v70];
  }
  else
  {
    v72 = 0;
    v70 = 0;
  }
  v71 = &v253[v70];
LABEL_109:
  if (v253)
    v69 = (uint64_t)&v253[*(v253 - 1)];
  v74 = -87522141;
  if ((int *)v69 != v72)
  {
    do
    {
      v76 = v72 + 1;
      v75 = *v72;
      v72 = v71;
      if (v76 != v71)
      {
        v72 = v76;
        while (*v72 >= 0xFFFFFFFE)
        {
          if (++v72 == v71)
          {
            v72 = v71;
            break;
          }
        }
      }
      v74 += v75;
    }
    while (v72 != (int *)v69);
  }
  v77 = 9 * ((v74 + ~(v74 << 15)) ^ ((v74 + ~(v74 << 15)) >> 10));
  v251 = ((v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11)) ^ (((v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11)) >> 16);
  WTF::HashTable<WebCore::ContentExtensions::UniqueNodeIdSet,WebCore::ContentExtensions::UniqueNodeIdSet,WTF::IdentityExtractor,WebCore::ContentExtensions::UniqueNodeIdSetHash,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetTranslator>,WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetSource const&,WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetSource const&>((uint64_t)&v249, (uint64_t *)&v252, v250);
  v245 = (WTF::StringImpl *)v248;
  v246 = 128;
  v248[0] = *v249;
  v239 = 128;
  v3 = (uint64_t)&v254;
  v238 = (WTF *)&v240;
  v79 = 1;
  do
  {
    v235 = (unsigned int *)*((_QWORD *)v245 + v79 - 1);
    v247 = v79 - 1;
    if (!v269)
      goto LABEL_350;
    if ((_DWORD)v239)
    {
      v80 = v238;
      if (HIDWORD(v239))
      {
        a1 = 16 * HIDWORD(v239);
        do
        {
          if (*(_QWORD *)v80)
            WTF::fastFree((WTF *)(*(_QWORD *)v80 - 16), v78);
          v80 = (WTF *)((char *)v80 + 16);
          a1 -= 16;
        }
        while (a1);
        HIDWORD(v239) = 0;
        v80 = v238;
      }
      if (&v240 != (__int128 *)v80 && v80 != 0)
      {
        v238 = 0;
        LODWORD(v239) = 0;
        WTF::fastFree(v80, v78);
        v80 = v238;
      }
      if (!v80)
      {
        v238 = (WTF *)&v240;
        LODWORD(v239) = 128;
      }
    }
    if (*v235)
    {
      v82 = 0;
      do
      {
        if (*((_QWORD *)&v266 + 1) > (unint64_t)v263)
          goto LABEL_350;
        v83 = v235[v82 + 3];
        if ((unint64_t)v264 <= v83)
        {
          __break(0xC471u);
          JUMPOUT(0x195741194);
        }
        v236 = v82;
        v84 = (unsigned int *)(v262 + *((_QWORD *)&v266 + 1) + 24 * v83);
        v85 = *v84;
        v5 = v84[1];
        v278 = &v259;
        a1 = (v5 - v85);
        if ((_DWORD)v5 != (_DWORD)v85)
        {
          if (HIDWORD(v239))
          {
            LODWORD(v279) = 0;
            v277 = 0;
            if ((unint64_t)v267 > v263)
              goto LABEL_350;
            if (*((_QWORD *)&v264 + 1) <= v85)
            {
              __break(0xC471u);
              JUMPOUT(0x195741264);
            }
            v86 = 0;
            while (2)
            {
              v87 = v267;
              v88 = v263;
              if ((unint64_t)v267 > v263)
                goto LABEL_350;
              if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
              {
                __break(0xC471u);
                JUMPOUT(0x195740F14);
              }
              a1 = v277;
              v89 = (uint64_t *)((char *)v238 + 16 * v277);
              v3 = v85;
              v90 = v262 + v267;
              v91 = *(char *)(v262 + v267 + 12 * v85 + 8) + (char)v86;
              if (v91 > *((char *)v89 + 13))
              {
                LODWORD(v279) = v277;
                v92 = *((_DWORD *)v238 + 4 * v277 + 2);
                goto LABEL_147;
              }
              v93 = *(unsigned __int8 *)(v262 + v267 + 12 * v85 + 8);
              v94 = *(char *)(v90 + 12 * v85 + 9);
              v95 = (char *)v238 + 16 * v277;
              v98 = v95[12];
              v97 = v95 + 12;
              v96 = v98;
              if (v94 < v98)
              {
                v99 = *(uint64_t **)(v90 + 12 * v85);
                a1 = (v93 + v86);
                v273 = &v262;
                v274 = v99;
                WebCore::ContentExtensions::DataConverterWithEpsilonClosure::convert<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)&v270, &v278, (uint64_t *)&v273);
                v100 = a1;
                v101 = v94;
                goto LABEL_151;
              }
              if (v91 <= v96)
              {
                if (v91 < v96)
                {
                  v106 = *(uint64_t **)(v90 + 12 * v85);
                  a1 = (v96 - 1);
                  v107 = v93 + v86;
                  v273 = &v262;
                  v274 = v106;
                  WebCore::ContentExtensions::DataConverterWithEpsilonClosure::convert<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)&v270, &v278, (uint64_t *)&v273);
                  WebCore::ContentExtensions::MutableRangeList<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,128u>::insertBetween((uint64_t)&v238, &v279, &v277, v107, a1, (uint64_t *)&v270);
                  if (v270)
                    WTF::fastFree((WTF *)(v270 - 2), v108);
                  v87 = v267;
                  v88 = v263;
                  if ((unint64_t)v267 > v263)
                    goto LABEL_350;
                  if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1957411D4);
                  }
                  a1 = v277;
                  v89 = (uint64_t *)((char *)v238 + 16 * v277);
                }
              }
              else
              {
                WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)&v273, (int **)v238 + 2 * v277);
                if ((unint64_t)v267 > v263)
                  goto LABEL_350;
                if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1957411B4);
                }
                v102 = *v97;
                v103 = *(_BYTE *)(v262 + v267 + 12 * v85 + 8) + v86;
                *v97 = v103;
                WebCore::ContentExtensions::MutableRangeList<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,128u>::insertBetween((uint64_t)&v238, &v279, &v277, v102, v103 - 1, (uint64_t *)&v273);
                a1 = v277;
                v105 = v238;
                if (v273)
                  WTF::fastFree((WTF *)(v273 - 2), v104);
                v89 = (uint64_t *)((char *)v105 + 16 * a1);
                v87 = v267;
                v88 = v263;
              }
              if (v87 > v88)
                goto LABEL_350;
              if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
              {
                __break(0xC471u);
                JUMPOUT(0x195741154);
              }
              v109 = v262 + v87;
              v110 = *(unsigned __int8 *)(v109 + 12 * v85 + 9);
              if (v110 != *((unsigned __int8 *)v89 + 13))
              {
                if (*((char *)v89 + 13) <= (char)v110)
                {
                  v113 = *(uint64_t **)(v109 + 12 * v85);
                  v273 = &v262;
                  v274 = v113;
                  WebCore::ContentExtensions::DataConverterWithEpsilonClosure::extend<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)&v278, v89, (uint64_t *)&v273);
                  if ((unint64_t)v267 > v263)
                    goto LABEL_350;
                  if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195741214);
                  }
                  v86 = *((unsigned __int8 *)v89 + 13)
                      - *(unsigned __int8 *)(v262 + v267 + 12 * v85 + 8)
                      + 1;
                  LODWORD(v279) = a1;
                  v92 = *((_DWORD *)v89 + 2);
LABEL_147:
                  v277 = v92;
                  if (!v92)
                    goto LABEL_196;
                }
                else
                {
                  a1 = *((unsigned __int8 *)v89 + 12);
                  *((_BYTE *)v89 + 12) = v110 + 1;
                  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)&v270, (int **)v89);
                  if ((unint64_t)v267 > v263)
                    goto LABEL_350;
                  if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1957411F4);
                  }
                  v112 = *(uint64_t **)(v262 + v267 + 12 * v85);
                  v273 = &v262;
                  v274 = v112;
                  WebCore::ContentExtensions::DataConverterWithEpsilonClosure::extend<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)&v278, (uint64_t *)&v270, (uint64_t *)&v273);
                  if ((unint64_t)v267 > v263)
                    goto LABEL_350;
                  if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195741234);
                  }
                  v101 = *(_BYTE *)(v262 + v267 + 12 * v85 + 9);
                  v100 = a1;
LABEL_151:
                  WebCore::ContentExtensions::MutableRangeList<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,128u>::insertBetween((uint64_t)&v238, &v279, &v277, v100, v101, (uint64_t *)&v270);
                  if (v270)
                    WTF::fastFree((WTF *)(v270 - 2), v78);
                  v86 = 0;
                  LODWORD(v85) = v85 + 1;
                }
LABEL_170:
                if ((_DWORD)v85 == (_DWORD)v5)
                  goto LABEL_197;
                continue;
              }
              break;
            }
            v111 = *(uint64_t **)(v109 + 12 * v85);
            v273 = &v262;
            v274 = v111;
            WebCore::ContentExtensions::DataConverterWithEpsilonClosure::extend<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)&v278, v89, (uint64_t *)&v273);
            v86 = 0;
            LODWORD(v279) = a1;
            v277 = *((_DWORD *)v89 + 2);
            LODWORD(v85) = v85 + 1;
            if (v277)
              goto LABEL_170;
LABEL_196:
            if ((_DWORD)v85 == (_DWORD)v5)
            {
LABEL_197:
              v3 = (uint64_t)&v254;
              goto LABEL_198;
            }
            if ((unint64_t)v267 <= v263)
            {
              if (*((_QWORD *)&v264 + 1) <= (unint64_t)v85)
              {
LABEL_382:
                __break(0xC471u);
                JUMPOUT(0x195741174);
              }
              v125 = v262 + v267 + 12 * v85;
              v126 = *(_BYTE *)(v125 + 9);
              v127 = *(_BYTE *)(v125 + 8) + v86;
              v128 = *(_QWORD *)v125;
              v270 = (int **)&v262;
              v271 = v128;
              WebCore::ContentExtensions::DataConverterWithEpsilonClosure::convert<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)v280, &v278, (uint64_t *)&v270);
              v129 = HIDWORD(v239);
              WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)&v273, v280);
              LODWORD(v274) = 0;
              BYTE4(v274) = v127;
              BYTE5(v274) = v126;
              if (HIDWORD(v239) == (_DWORD)v239)
              {
                v130 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v238, HIDWORD(v239) + 1, (unint64_t)&v273);
                v131 = (char *)v238 + 16 * HIDWORD(v239);
                *(_QWORD *)v131 = 0;
                v132 = *(_QWORD *)v130;
                *(_QWORD *)v130 = 0;
                *(_QWORD *)v131 = v132;
                *((_DWORD *)v131 + 2) = *(_DWORD *)(v130 + 8);
                v131[12] = *(_BYTE *)(v130 + 12);
                v133 = v131 + 13;
                v134 = (_BYTE *)(v130 + 13);
              }
              else
              {
                v135 = (char *)v238 + 16 * HIDWORD(v239);
                *(_QWORD *)v135 = 0;
                v136 = (uint64_t)v273;
                v273 = 0;
                *(_QWORD *)v135 = v136;
                *((_DWORD *)v135 + 2) = (_DWORD)v274;
                v135[12] = BYTE4(v274);
                v133 = v135 + 13;
                v134 = (char *)&v274 + 5;
              }
              *v133 = *v134;
              ++HIDWORD(v239);
              if (v273)
                WTF::fastFree((WTF *)(v273 - 2), v78);
              if (v129)
                *((_DWORD *)v238 + 4 * a1 + 2) = v129;
              if (v280[0])
                WTF::fastFree((WTF *)(v280[0] - 4), v78);
              v3 = (v85 + 1);
              while (2)
              {
                if ((_DWORD)v3 == (_DWORD)v5)
                  goto LABEL_197;
                if ((unint64_t)v267 > v263)
                  goto LABEL_350;
                if (*((_QWORD *)&v264 + 1) <= (unint64_t)v3)
                  goto LABEL_382;
                v137 = v262 + v267 + 12 * v3;
                v138 = *(_BYTE *)(v137 + 8);
                v139 = *(_BYTE *)(v137 + 9);
                v140 = *(_QWORD *)v137;
                v270 = (int **)&v262;
                v271 = v140;
                WebCore::ContentExtensions::DataConverterWithEpsilonClosure::convert<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)v280, &v278, (uint64_t *)&v270);
                a1 = HIDWORD(v239);
                v273 = 0;
                if (!v280[0])
                  goto LABEL_253;
                v141 = *((unsigned int *)v280[0] - 3);
                if (!(_DWORD)v141)
                  goto LABEL_253;
                v142 = (v141 - 1) | ((v141 - 1) >> 1) | ((((_DWORD)v141 - 1) | ((v141 - 1) >> 1)) >> 2);
                v143 = v142 | (v142 >> 4) | ((v142 | (v142 >> 4)) >> 8);
                v144 = (v143 | HIWORD(v143)) + 1;
                if (v144 > 0x400)
                {
                  if (v144 <= 2 * v141)
                  {
LABEL_219:
                    LODWORD(v144) = 2 * v144;
                    if (v144 <= 0x400)
                      goto LABEL_220;
                  }
                  v145 = (double)v141;
                  v146 = (double)v144 * 0.416666667;
                }
                else
                {
                  if (3 * v144 <= 4 * v141)
                    goto LABEL_219;
LABEL_220:
                  v145 = (double)v141;
                  v146 = (double)v144 * 0.604166667;
                }
                v147 = v139;
                if (v146 <= v145)
                  LODWORD(v144) = 2 * v144;
                if (v144 <= 8)
                  v148 = 8;
                else
                  v148 = v144;
                v149 = WTF::fastMalloc((WTF *)(4 * v148 + 16));
                memset((void *)(v149 + 16), 255, 4 * v148);
                v273 = (uint64_t *)(v149 + 16);
                *(_DWORD *)(v149 + 12) = v148;
                *((_DWORD *)v273 - 2) = v148 - 1;
                *((_DWORD *)v273 - 3) = v141;
                *((_DWORD *)v273 - 4) = 0;
                v150 = v280[0];
                if (v280[0])
                {
                  v151 = *((unsigned int *)v280[0] - 1);
                  v152 = &v280[0][v151];
                  if (*(v280[0] - 3))
                  {
                    v153 = v280[0];
                    v139 = v147;
                    if ((_DWORD)v151)
                    {
                      v154 = 4 * v151;
                      v153 = v280[0];
                      while (*v153 >= 0xFFFFFFFE)
                      {
                        ++v153;
                        v154 -= 4;
                        if (!v154)
                        {
                          v153 = v152;
                          break;
                        }
                      }
                    }
LABEL_238:
                    if (v280[0])
                      v150 = &v280[0][*((unsigned int *)v280[0] - 1)];
                    while (v153 != v150)
                    {
                      if (v273)
                        v155 = *((_DWORD *)v273 - 2);
                      else
                        v155 = 0;
                      v156 = 0;
                      v157 = *v153;
                      v158 = 9 * ((v157 + ~(v157 << 15)) ^ ((v157 + ~(v157 << 15)) >> 10));
                      v159 = ((v158 ^ (v158 >> 6)) + ~((v158 ^ (v158 >> 6)) << 11)) ^ (((v158 ^ (v158 >> 6))
                                                                                      + ~((v158 ^ (v158 >> 6)) << 11)) >> 16);
                      do
                      {
                        v160 = v159 & v155;
                        v159 = ++v156 + v160;
                      }
                      while (*((_DWORD *)v273 + v160) != -1);
                      *((_DWORD *)v273 + v160) = v157;
                      v161 = v153 + 1;
                      v153 = v152;
                      if (v161 != v152)
                      {
                        v153 = v161;
                        while (*v153 >= 0xFFFFFFFE)
                        {
                          if (++v153 == v152)
                          {
                            v153 = v152;
                            break;
                          }
                        }
                      }
                    }
LABEL_253:
                    LODWORD(v274) = 0;
                    BYTE4(v274) = v138;
                    BYTE5(v274) = v139;
                    if (HIDWORD(v239) == (_DWORD)v239)
                    {
                      v162 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v238, HIDWORD(v239) + 1, (unint64_t)&v273);
                      v163 = (char *)v238 + 16 * HIDWORD(v239);
                      *(_QWORD *)v163 = 0;
                      v164 = *(_QWORD *)v162;
                      *(_QWORD *)v162 = 0;
                      *(_QWORD *)v163 = v164;
                      *((_DWORD *)v163 + 2) = *(_DWORD *)(v162 + 8);
                      v163[12] = *(_BYTE *)(v162 + 12);
                      v165 = v163 + 13;
                      v166 = (_BYTE *)(v162 + 13);
                    }
                    else
                    {
                      v167 = (char *)v238 + 16 * HIDWORD(v239);
                      *(_QWORD *)v167 = 0;
                      v168 = (uint64_t)v273;
                      v273 = 0;
                      *(_QWORD *)v167 = v168;
                      *((_DWORD *)v167 + 2) = (_DWORD)v274;
                      v167[12] = BYTE4(v274);
                      v165 = v167 + 13;
                      v166 = (char *)&v274 + 5;
                    }
                    *v165 = *v166;
                    ++HIDWORD(v239);
                    if (v273)
                      WTF::fastFree((WTF *)(v273 - 2), v78);
                    if (a1)
                      *((_DWORD *)v238 + 4 * v129 + 2) = a1;
                    if (v280[0])
                      WTF::fastFree((WTF *)(v280[0] - 4), v78);
                    v3 = (v3 + 1);
                    v129 = a1;
                    continue;
                  }
                  v153 = &v280[0][v151];
                }
                else
                {
                  v153 = 0;
                  v151 = 0;
                }
                break;
              }
              v139 = v147;
              v152 = &v280[0][v151];
              goto LABEL_238;
            }
LABEL_350:
            __break(1u);
LABEL_351:
            *(_QWORD *)&v254 = 0;
            DWORD2(v254) = 0;
            v217 = WTF::FileSystemImpl::MappedFileData::mapFileHandle();
            WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)v5, v218);
            WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v245, v219);
            if ((v217 & 1) != 0)
            {
              v221 = *(unsigned int *)(a1 + 28);
              v222 = *(unsigned int *)(a1 + 44);
              v223 = *(unsigned int *)(a1 + 60);
              v224 = *(unsigned int *)(a1 + 76);
              v225 = *(unsigned int *)(a1 + 12);
              if (*(_DWORD *)(a1 + 8))
              {
                if ((_DWORD)v225)
                  *(_DWORD *)(a1 + 12) = 0;
                v226 = *(WTF **)a1;
                if (*(_QWORD *)a1)
                {
                  *(_QWORD *)a1 = 0;
                  *(_DWORD *)(a1 + 8) = 0;
                  WTF::fastFree(v226, v220);
                }
              }
              if (*(_DWORD *)(a1 + 24))
              {
                if (*(_DWORD *)(a1 + 28))
                  *(_DWORD *)(a1 + 28) = 0;
                v227 = *(WTF **)(a1 + 16);
                if (v227)
                {
                  *(_QWORD *)(a1 + 16) = 0;
                  *(_DWORD *)(a1 + 24) = 0;
                  WTF::fastFree(v227, v220);
                }
              }
              if (*(_DWORD *)(a1 + 40))
              {
                if (*(_DWORD *)(a1 + 44))
                  *(_DWORD *)(a1 + 44) = 0;
                v228 = *(WTF **)(a1 + 32);
                if (v228)
                {
                  *(_QWORD *)(a1 + 32) = 0;
                  *(_DWORD *)(a1 + 40) = 0;
                  WTF::fastFree(v228, v220);
                }
              }
              if (*(_DWORD *)(a1 + 56))
              {
                if (*(_DWORD *)(a1 + 60))
                  *(_DWORD *)(a1 + 60) = 0;
                v229 = *(WTF **)(a1 + 48);
                if (v229)
                {
                  *(_QWORD *)(a1 + 48) = 0;
                  *(_DWORD *)(a1 + 56) = 0;
                  WTF::fastFree(v229, v220);
                }
              }
              if (*(_DWORD *)(a1 + 72))
              {
                if (*(_DWORD *)(a1 + 76))
                  *(_DWORD *)(a1 + 76) = 0;
                v230 = *(WTF **)(a1 + 64);
                if (v230)
                {
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_DWORD *)(a1 + 72) = 0;
                  WTF::fastFree(v230, v220);
                }
              }
              v231 = v254;
              *(_QWORD *)&v254 = 0;
              v232 = DWORD2(v254);
              DWORD2(v254) = 0;
              *(_QWORD *)&v240 = v225;
              *((_QWORD *)&v240 + 1) = v221;
              *(_QWORD *)&v241 = v222;
              *((_QWORD *)&v241 + 1) = v223;
              v242 = v224;
              *(_QWORD *)&v243 = 24 * v225;
              *((_QWORD *)&v243 + 1) = 24 * v225 + 12 * v221;
              *(_QWORD *)&v244 = *((_QWORD *)&v243 + 1) + 4 * v222;
              *((_QWORD *)&v244 + 1) = v244 + 4 * v223;
              v238 = 0;
              v262 = v231;
              LODWORD(v239) = 0;
              v263 = v232;
              v3 = (uint64_t)&v254;
              v267 = v243;
              v268 = v244;
              v265 = v241;
              v266 = v224;
              v264 = v240;
              WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v238);
              v233 = 1;
            }
            else
            {
              v233 = 0;
              LOBYTE(v262) = 0;
            }
            v269 = v233;
            WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v254);
            goto LABEL_23;
          }
          v5 = 0;
          v280[0] = (int *)&v259;
          do
          {
            if ((unint64_t)v267 > v263)
              goto LABEL_350;
            v114 = (v85 + v5);
            if (*((_QWORD *)&v264 + 1) <= (unint64_t)v114)
            {
              __break(0xC471u);
              JUMPOUT(0x195740F34);
            }
            v115 = *(_QWORD *)(v262 + v267 + 12 * v114);
            v270 = (int **)&v262;
            v271 = v115;
            WebCore::ContentExtensions::DataConverterWithEpsilonClosure::convert<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>((uint64_t)&v279, (_QWORD **)v280, (uint64_t *)&v270);
            if ((unint64_t)v267 > v263)
              goto LABEL_350;
            if (*((_QWORD *)&v264 + 1) <= v114)
            {
              __break(0xC471u);
              JUMPOUT(0x195740F54);
            }
            v5 = (v5 + 1);
            v116 = *(_WORD *)(v262 + v267 + 12 * v114 + 8);
            v117 = v279;
            v279 = 0;
            v273 = (uint64_t *)v117;
            LODWORD(v274) = v5;
            WORD2(v274) = v116;
            if (HIDWORD(v239) == (_DWORD)v239)
            {
              v118 = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v238, HIDWORD(v239) + 1, (unint64_t)&v273);
              v119 = (char *)v238 + 16 * HIDWORD(v239);
              *(_QWORD *)v119 = 0;
              v120 = *(_QWORD *)v118;
              *(_QWORD *)v118 = 0;
              *(_QWORD *)v119 = v120;
              *((_DWORD *)v119 + 2) = *(_DWORD *)(v118 + 8);
              v119[12] = *(_BYTE *)(v118 + 12);
              v121 = v119 + 13;
              v122 = (_BYTE *)(v118 + 13);
            }
            else
            {
              v123 = (char *)v238 + 16 * HIDWORD(v239);
              *(_QWORD *)v123 = 0;
              v124 = (uint64_t)v273;
              v273 = 0;
              *(_QWORD *)v123 = v124;
              *((_DWORD *)v123 + 2) = (_DWORD)v274;
              v123[12] = BYTE4(v274);
              v121 = v123 + 13;
              v122 = (char *)&v274 + 5;
            }
            *v121 = *v122;
            ++HIDWORD(v239);
            if (v273)
              WTF::fastFree((WTF *)(v273 - 2), v78);
            if (v279)
              WTF::fastFree((WTF *)(v279 - 16), v78);
          }
          while ((_DWORD)a1 != (_DWORD)v5);
          if (HIDWORD(v239))
            *((_DWORD *)v238 + 4 * HIDWORD(v239) - 2) = 0;
        }
LABEL_198:
        v82 = v236 + 1;
      }
      while (v236 + 1 < (unint64_t)*v235);
    }
    a1 = HIDWORD(v256);
    v169 = BYTE12(v256);
    if (!HIDWORD(v239))
      goto LABEL_301;
    v5 = 0;
    v170 = v238;
    do
    {
      LODWORD(v279) = 0;
      if (!v269)
        goto LABEL_350;
      v273 = (uint64_t *)&v254;
      v274 = &v262;
      v275 = (int **)((char *)v170 + 16 * v5);
      v171 = *v275;
      if (!*v275)
      {
        v174 = 0;
        v172 = 0;
LABEL_275:
        v173 = &v171[v172];
        goto LABEL_276;
      }
      v172 = *(v171 - 1);
      v173 = &v171[v172];
      if (!*(v171 - 3))
      {
        v174 = &v171[v172];
        goto LABEL_275;
      }
      v174 = (int *)*((_QWORD *)v170 + 2 * v5);
      if ((_DWORD)v172)
      {
        v175 = 4 * v172;
        v174 = (int *)*((_QWORD *)v170 + 2 * v5);
        while (*v174 >= 0xFFFFFFFE)
        {
          ++v174;
          v175 -= 4;
          if (!v175)
          {
            v174 = v173;
            break;
          }
        }
      }
LABEL_276:
      if (v171)
        v171 += *(v171 - 1);
      for (i = -87522141; v174 != v171; i += v177)
      {
        v178 = v174 + 1;
        v177 = *v174;
        v174 = v173;
        if (v178 != v173)
        {
          v174 = v178;
          while (*v174 >= 0xFFFFFFFE)
          {
            if (++v174 == v173)
            {
              v174 = v173;
              break;
            }
          }
        }
      }
      v179 = 9 * ((i + ~(i << 15)) ^ ((i + ~(i << 15)) >> 10));
      v276 = ((v179 ^ (v179 >> 6)) + ~((v179 ^ (v179 >> 6)) << 11)) ^ (((v179 ^ (v179 >> 6))
                                                                      + ~((v179 ^ (v179 >> 6)) << 11)) >> 16);
      WTF::HashTable<WebCore::ContentExtensions::UniqueNodeIdSet,WebCore::ContentExtensions::UniqueNodeIdSet,WTF::IdentityExtractor,WebCore::ContentExtensions::UniqueNodeIdSetHash,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetTranslator>,WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetSource const&,WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetSource const&>((uint64_t)&v270, (uint64_t *)&v252, &v273);
      v180 = (uint64_t)v270;
      if (v272)
      {
        v181 = *v270;
        v280[0] = *v270;
        v182 = v247;
        if (v247 == v246)
        {
          v183 = WTF::Vector<WebCore::ContentExtensions::ReverseSuffixTreeVertex *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v245, v247 + 1, (unint64_t)v280);
          v182 = v247;
          *((_QWORD *)v245 + v247) = *(_QWORD *)v183;
        }
        else
        {
          *((_QWORD *)v245 + v247) = v181;
        }
        v247 = v182 + 1;
      }
      LODWORD(v279) = *(_DWORD *)(*(_QWORD *)v180 + 8);
      LOWORD(v273) = *((_WORD *)v170 + 8 * v5 + 6);
      v184 = HIDWORD(v256);
      if (HIDWORD(v256) == DWORD2(v256))
      {
        v185 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v256, HIDWORD(v256) + 1, (unint64_t)&v273);
        v184 = HIDWORD(v256);
        v186 = v256;
        v187 = *(_WORD *)v185;
      }
      else
      {
        v186 = v256;
        v187 = (__int16)v273;
      }
      *(_WORD *)(v186 + 2 * v184) = v187;
      ++HIDWORD(v256);
      v188 = HIDWORD(v257);
      if (HIDWORD(v257) == DWORD2(v257))
      {
        v189 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v257, HIDWORD(v257) + 1, (unint64_t)&v279);
        v188 = HIDWORD(v257);
        v190 = v257;
        v191 = *(_DWORD *)v189;
      }
      else
      {
        v190 = v257;
        v191 = v279;
      }
      *(_DWORD *)(v190 + 4 * v188) = v191;
      ++HIDWORD(v257);
      v170 = v238;
      v192 = *((unsigned int *)v238 + 4 * v5 + 2);
      if ((_DWORD)v192)
        v5 = v5 & 0xFFFFFFFF00000000 | v192;
      else
        v5 = v5 & 0xFFFFFF0000000000 | v192 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
    }
    while ((v5 & 0xFF00000000) != 0x100000000);
    v169 = BYTE12(v256);
LABEL_301:
    v193 = v254;
    v194 = v254 + 12 * v235[2];
    *(_DWORD *)(v194 + 4) = a1;
    *(_BYTE *)(v194 + 10) = v169 - a1;
    v79 = v247;
  }
  while (v247);
  *(_QWORD *)&v254 = 0;
  *(_QWORD *)a2 = v193;
  v195 = *((_QWORD *)&v254 + 1);
  *((_QWORD *)&v254 + 1) = 0;
  *(_QWORD *)(a2 + 8) = v195;
  v196 = v255;
  *(_QWORD *)&v255 = 0;
  *(_QWORD *)(a2 + 16) = v196;
  v197 = *((_QWORD *)&v255 + 1);
  *((_QWORD *)&v255 + 1) = 0;
  *(_QWORD *)(a2 + 24) = v197;
  v198 = v256;
  *(_QWORD *)&v256 = 0;
  *(_QWORD *)(a2 + 32) = v198;
  v199 = *((_QWORD *)&v256 + 1);
  *((_QWORD *)&v256 + 1) = 0;
  *(_QWORD *)(a2 + 40) = v199;
  v200 = v257;
  *(_QWORD *)&v257 = 0;
  *(_QWORD *)(a2 + 48) = v200;
  v201 = *((_QWORD *)&v257 + 1);
  *((_QWORD *)&v257 + 1) = 0;
  *(_QWORD *)(a2 + 56) = v201;
  *(_DWORD *)(a2 + 64) = v258;
  *(_BYTE *)(a2 + 72) = 1;
  v202 = v238;
  if (HIDWORD(v239))
  {
    v203 = 16 * HIDWORD(v239);
    do
    {
      if (*(_QWORD *)v202)
        WTF::fastFree((WTF *)(*(_QWORD *)v202 - 16), v78);
      v202 = (WTF *)((char *)v202 + 16);
      v203 -= 16;
    }
    while (v203);
    v202 = v238;
  }
  if (&v240 != (__int128 *)v202 && v202 != 0)
  {
    v238 = 0;
    LODWORD(v239) = 0;
    WTF::fastFree(v202, v78);
  }
  v205 = v245;
  if (v248 != (_QWORD *)v245 && v245 != 0)
  {
    v245 = 0;
    v246 = 0;
    WTF::fastFree(v205, v78);
  }
  v207 = (uint64_t)v252;
  if (v252)
  {
    v208 = *((unsigned int *)v252 - 1);
    if ((_DWORD)v208)
    {
      v209 = v252;
      do
      {
        if (*v209 != (WTF *)-1)
          WTF::fastFree(*v209, v78);
        ++v209;
        --v208;
      }
      while (v208);
    }
    WTF::fastFree((WTF *)(v207 - 16), v78);
  }
  if (v253)
    WTF::fastFree((WTF *)(v253 - 4), v78);
  v210 = (WTF *)v257;
  if ((_QWORD)v257)
  {
    *(_QWORD *)&v257 = 0;
    DWORD2(v257) = 0;
    WTF::fastFree(v210, v78);
  }
  v211 = (WTF *)v256;
  if ((_QWORD)v256)
  {
    *(_QWORD *)&v256 = 0;
    DWORD2(v256) = 0;
    WTF::fastFree(v211, v78);
  }
  v212 = (WTF *)v255;
  if ((_QWORD)v255)
  {
    *(_QWORD *)&v255 = 0;
    DWORD2(v255) = 0;
    WTF::fastFree(v212, v78);
  }
  v213 = (WTF *)v254;
  if ((_QWORD)v254)
  {
    *(_QWORD *)&v254 = 0;
    DWORD2(v254) = 0;
    WTF::fastFree(v213, v78);
  }
  v214 = v259;
  if (v261)
  {
    v215 = 16 * v261;
    do
    {
      v216 = *(WTF **)v214;
      if (*(_QWORD *)v214)
      {
        *(_QWORD *)v214 = 0;
        *((_DWORD *)v214 + 2) = 0;
        WTF::fastFree(v216, v78);
      }
      v214 = (WTF *)((char *)v214 + 16);
      v215 -= 16;
    }
    while (v215);
    v214 = v259;
  }
  if (v214)
  {
    v259 = 0;
    v260 = 0;
    WTF::fastFree(v214, v78);
  }
  if (v269)
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v262);
}

_QWORD *WebCore::ContentExtensions::URLFilterParser::URLFilterParser(_QWORD *this, WebCore::ContentExtensions::CombinedURLFilters *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t WebCore::ContentExtensions::URLFilterParser::addPattern(char **a1, WTF::StringImpl *a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  WTF *v27;
  unsigned int v28;
  WTF::StringImpl ***v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl ***v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  WTF *v44;
  char *v45;
  unsigned int v46;
  unsigned int i;
  unint64_t v48;
  BOOL v49;
  WebCore::ContentExtensions::Term *v50;
  char *v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  WebCore::ContentExtensions::Term *v56;
  WebCore::ContentExtensions::Term *v57;
  _BOOL4 isKnownToMatchAnyString;
  int v59;
  char *v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  WebCore::ContentExtensions::Term *v64;
  char **v65;
  uint64_t v66;
  char *v67;
  int v68;
  _QWORD *v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  WebCore::ContentExtensions::Term *v76;
  int8x16_t *v77;
  uint64_t v78;
  WTF **v79;
  int v80;
  int8x16_t *v81;
  uint64_t v82;
  WebCore::ContentExtensions::Term *v83;
  WebCore::ContentExtensions::Term *v84;
  WebCore::ContentExtensions::Term *v85;
  uint64_t v86;
  WTF *v87;
  WTF **v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF **v92;
  uint64_t v93;
  WTF **v94;
  uint64_t v95;
  WTF **v96;
  uint64_t v97;
  const WTF::StringImpl *v98;
  WTF::StringImpl **v99;
  WTF::StringImpl **v100;
  WTF::StringImpl *v101;
  WTF::StringImpl **v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  const WTF::StringImpl *v108;
  WTF::StringImpl **v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  WTF::StringImpl **v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  WTF::StringImpl **v122;
  WTF::StringImpl **v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl **v126;
  WTF::StringImpl **v127;
  char v128[8];
  __int128 v129;
  WTF *v130[2];
  WebCore::ContentExtensions::Term *v131[2];
  __int16 v132;
  WTF *v133;
  __int16 v134;
  unsigned int v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  unsigned __int8 v139;
  _DWORD v140[5];
  WTF *v141;
  uint64_t v142;
  _BYTE v143[16];
  WTF::StringImpl **v144;
  WTF *v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151[2];

  v7 = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v8 = (unsigned __int8 *)a2 + a3;
    if ((a2 & 7) != 0)
    {
      v9 = (unsigned __int8 *)a2;
      if ((_DWORD)a3)
      {
        v7 = 0;
        v10 = a3 - 1;
        v11 = (_BYTE)a2 + 1;
        v9 = (unsigned __int8 *)a2;
        do
        {
          v12 = *v9++;
          v7 |= v12;
          if ((v11 & 7) == 0)
            break;
          v13 = v10--;
          ++v11;
        }
        while (v13);
      }
    }
    else
    {
      v9 = (unsigned __int8 *)a2;
    }
    while ((unint64_t)v9 < ((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8))
    {
      v14 = *(_QWORD *)v9;
      v9 += 8;
      v7 |= v14;
    }
    while (v9 != v8)
    {
      v15 = *v9++;
      v7 |= v15;
    }
    if ((v7 & 0x8080808080808080) != 0)
      return 2;
  }
  else
  {
    v18 = (unsigned __int16 *)((char *)a2 + 2 * a3);
    if ((a2 & 7) != 0)
    {
      v19 = (unsigned __int16 *)a2;
      if ((_DWORD)a3)
      {
        v7 = 0;
        v20 = 2 * a3 - 2;
        v21 = (_BYTE)a2 + 2;
        v19 = (unsigned __int16 *)a2;
        do
        {
          v22 = *v19++;
          v7 |= v22;
          if ((v21 & 7) == 0)
            break;
          v23 = v20;
          v20 -= 2;
          v21 += 2;
        }
        while (v23);
      }
    }
    else
    {
      v19 = (unsigned __int16 *)a2;
    }
    while ((unint64_t)v19 < ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8))
    {
      v24 = *(_QWORD *)v19;
      v19 += 4;
      v7 |= v24;
    }
    while (v19 != v18)
    {
      v25 = *v19++;
      v7 |= v25;
    }
    if ((v7 & 0xFF80FF80FF80FF80) != 0)
      return 2;
  }
  if (!(_DWORD)a3)
    return 12;
  v128[0] = a4;
  LOBYTE(v133) = 0;
  v134 = 0;
  v135 = 0;
  v129 = 0u;
  *(_OWORD *)v130 = 0u;
  *(_OWORD *)v131 = 0u;
  v132 = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v136 = v128;
    LOBYTE(v137) = 0;
    *((_QWORD *)&v137 + 1) = a2;
    v138 = a3;
    v139 = 0;
    memset(v140, 0, 14);
    v141 = (WTF *)v143;
    v142 = 16;
    v144 = 0;
    v145 = (WTF *)&v147;
    v147 = 0;
    v148 = (WTF *)&v150;
    v146 = 0x100000001;
    v150 = 0;
    v151[0] = 0;
    v149 = 0x100000001;
    if (a3 > 0x100000)
    {
      v26 = 1;
      v27 = (WTF *)&v150;
      v28 = 1;
      goto LABEL_67;
    }
    v31 = ((uint64_t (*)(char **))JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::parseTokens)(&v136);
    v26 = v137;
    if ((_BYTE)v137)
    {
LABEL_64:
      if (v151[0])
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v151[0], a2);
      v28 = HIDWORD(v149);
      v27 = v148;
      if (!HIDWORD(v149))
      {
LABEL_72:
        if (&v150 != (uint64_t *)v27 && v27 != 0)
        {
          v148 = 0;
          LODWORD(v149) = 0;
          WTF::fastFree(v27, a2);
        }
        v38 = (WTF::StringImpl ***)v145;
        if (HIDWORD(v146))
        {
          v39 = 8 * HIDWORD(v146);
          do
          {
            if (*v38)
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v38, a2);
            ++v38;
            v39 -= 8;
          }
          while (v39);
LABEL_110:
          v38 = (WTF::StringImpl ***)v145;
          goto LABEL_111;
        }
        goto LABEL_111;
      }
LABEL_67:
      v36 = 8 * v28;
      do
      {
        if (*(_QWORD *)v27)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v27, a2);
        v27 = (WTF *)((char *)v27 + 8);
        v36 -= 8;
      }
      while (v36);
      v27 = v148;
      goto LABEL_72;
    }
    v32 = v140[1];
    v33 = v140[2];
    if (v140[2] > v140[1])
    {
      if (v139 - 1 < 2)
      {
        v26 = 20;
LABEL_63:
        LOBYTE(v137) = v26;
        goto LABEL_64;
      }
      v140[0] = v140[1];
    }
    if (BYTE1(v140[3]) && v144 && *((_DWORD *)v144 - 3))
    {
LABEL_62:
      v26 = 21;
      goto LABEL_63;
    }
    if (v151[0] && *((_DWORD *)v151[0] - 3))
    {
      if (!v144 || !*((_DWORD *)v144 - 3))
      {
LABEL_51:
        if (v139 - 1 < 2)
          goto LABEL_62;
        if (v144 && *((_DWORD *)v144 - 3))
        {
          v26 = 21;
          goto LABEL_63;
        }
        goto LABEL_87;
      }
      v31 = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v151);
      v99 = (WTF::StringImpl **)v31;
      if (v151[0])
        v100 = (WTF::StringImpl **)&v151[0][*((unsigned int *)v151[0] - 1)];
      else
        v100 = 0;
      if (v100 != (WTF::StringImpl **)v31)
      {
        v122 = v100;
        v124 = a2;
        do
        {
          v101 = *v99;
          if (*v99)
            *(_DWORD *)v101 += 2;
          v102 = v144;
          if (v144)
          {
            v103 = *((_DWORD *)v144 - 2);
            v104 = *((_DWORD *)v101 + 4);
            v126 = v144;
            if (v104 < 0x100)
            {
              v105 = WTF::StringImpl::hashSlowCase(v101);
              v102 = v126;
            }
            else
            {
              v105 = v104 >> 8;
            }
            v118 = v103;
            v120 = 0;
            while (1)
            {
              v106 = v105 & v103;
              v31 = (uint64_t)v102[v106];
              if (!v31)
                break;
              if (v31 != -1)
              {
                v31 = WTF::equal((WTF *)v31, v101, v98);
                if ((v31 & 1) != 0)
                {
                  v107 = 1;
                  if (!v101)
                    goto LABEL_251;
                  goto LABEL_249;
                }
              }
              v105 = ++v120 + v106;
              v102 = v126;
              v103 = v118;
            }
          }
          v107 = 0;
          if (v101)
          {
LABEL_249:
            if (*(_DWORD *)v101 == 2)
              v31 = WTF::StringImpl::destroy(v101, a2);
            else
              *(_DWORD *)v101 -= 2;
          }
LABEL_251:
          if (!v107)
            goto LABEL_51;
          ++v99;
          a2 = v124;
          if (v99 == (WTF::StringImpl **)v124)
          {
LABEL_255:
            v99 = (WTF::StringImpl **)v124;
          }
          else
          {
            while ((unint64_t)*v99 + 1 <= 1)
            {
              if (++v99 == (WTF::StringImpl **)v124)
                goto LABEL_255;
            }
          }
        }
        while (v99 != v122);
      }
    }
    if (v33 <= v32)
    {
      v26 = v137;
      goto LABEL_64;
    }
LABEL_88:
    WebCore::ContentExtensions::PatternParser::resetForReparsing((WebCore::ContentExtensions::PatternParser *)v31);
  }
  v136 = v128;
  LOBYTE(v137) = 0;
  *((_QWORD *)&v137 + 1) = a2;
  v138 = a3;
  v139 = 0;
  memset(v140, 0, 14);
  v141 = (WTF *)v143;
  v142 = 16;
  v144 = 0;
  v145 = (WTF *)&v147;
  v147 = 0;
  v148 = (WTF *)&v150;
  v146 = 0x100000001;
  v150 = 0;
  v151[0] = 0;
  v149 = 0x100000001;
  if (a3 > 0x100000)
  {
    v26 = 1;
    v29 = (WTF::StringImpl ***)&v150;
    v30 = 1;
LABEL_95:
    v40 = 8 * v30;
    do
    {
      if (*v29)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v29, a2);
      ++v29;
      v40 -= 8;
    }
    while (v40);
    v29 = (WTF::StringImpl ***)v148;
    goto LABEL_100;
  }
  v31 = ((uint64_t (*)(char **))JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::parseTokens)(&v136);
  v26 = v137;
  if (!(_BYTE)v137)
  {
    v34 = v140[1];
    v35 = v140[2];
    if (v140[2] > v140[1])
    {
      if (v139 - 1 < 2)
      {
        v26 = 20;
LABEL_91:
        LOBYTE(v137) = v26;
        goto LABEL_92;
      }
      v140[0] = v140[1];
    }
    if (BYTE1(v140[3]) && v144 && *((_DWORD *)v144 - 3))
    {
LABEL_90:
      v26 = 21;
      goto LABEL_91;
    }
    if (v151[0] && *((_DWORD *)v151[0] - 3))
    {
      if (!v144 || !*((_DWORD *)v144 - 3))
        goto LABEL_85;
      v31 = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v151);
      v109 = (WTF::StringImpl **)v31;
      if (v151[0])
        v110 = (WTF::StringImpl **)&v151[0][*((unsigned int *)v151[0] - 1)];
      else
        v110 = 0;
      if (v110 != (WTF::StringImpl **)v31)
      {
        v123 = v110;
        v125 = a2;
        while (1)
        {
          v111 = *v109;
          if (*v109)
            *(_DWORD *)v111 += 2;
          v112 = v144;
          if (v144)
          {
            v113 = *((_DWORD *)v144 - 2);
            v114 = *((_DWORD *)v111 + 4);
            v127 = v144;
            if (v114 < 0x100)
            {
              v115 = WTF::StringImpl::hashSlowCase(v111);
              v112 = v127;
            }
            else
            {
              v115 = v114 >> 8;
            }
            v119 = v113;
            v121 = 0;
            while (1)
            {
              v116 = v115 & v113;
              v31 = (uint64_t)v112[v116];
              if (!v31)
                break;
              if (v31 != -1)
              {
                v31 = WTF::equal((WTF *)v31, v111, v108);
                if ((v31 & 1) != 0)
                {
                  v117 = 1;
                  if (!v111)
                    goto LABEL_280;
                  goto LABEL_278;
                }
              }
              v115 = ++v121 + v116;
              v112 = v127;
              v113 = v119;
            }
          }
          v117 = 0;
          if (v111)
          {
LABEL_278:
            if (*(_DWORD *)v111 == 2)
              v31 = WTF::StringImpl::destroy(v111, a2);
            else
              *(_DWORD *)v111 -= 2;
          }
LABEL_280:
          if (!v117)
            break;
          ++v109;
          a2 = v125;
          if (v109 == (WTF::StringImpl **)v125)
          {
LABEL_284:
            v109 = (WTF::StringImpl **)v125;
          }
          else
          {
            while ((unint64_t)*v109 + 1 <= 1)
            {
              if (++v109 == (WTF::StringImpl **)v125)
                goto LABEL_284;
            }
          }
          if (v109 == v123)
            goto LABEL_59;
        }
LABEL_85:
        if (v139 - 1 >= 2)
        {
          if (!v144 || !*((_DWORD *)v144 - 3))
          {
LABEL_87:
            LOBYTE(v140[3]) = 0;
            goto LABEL_88;
          }
          v26 = 21;
          goto LABEL_91;
        }
        goto LABEL_90;
      }
    }
LABEL_59:
    if (v35 > v34)
      goto LABEL_88;
    v26 = v137;
  }
LABEL_92:
  if (v151[0])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v151[0], a2);
  v30 = HIDWORD(v149);
  v29 = (WTF::StringImpl ***)v148;
  if (HIDWORD(v149))
    goto LABEL_95;
LABEL_100:
  if (&v150 != (uint64_t *)v29 && v29 != 0)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree((WTF *)v29, a2);
  }
  v38 = (WTF::StringImpl ***)v145;
  if (HIDWORD(v146))
  {
    v42 = 8 * HIDWORD(v146);
    do
    {
      if (*v38)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v38, a2);
      ++v38;
      v42 -= 8;
    }
    while (v42);
    goto LABEL_110;
  }
LABEL_111:
  if (&v147 != (uint64_t *)v38 && v38 != 0)
  {
    v145 = 0;
    LODWORD(v146) = 0;
    WTF::fastFree((WTF *)v38, a2);
  }
  if (v144)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v144, a2);
  v44 = v141;
  if (v143 != (_BYTE *)v141 && v141)
  {
    v141 = 0;
    LODWORD(v142) = 0;
    WTF::fastFree(v44, a2);
  }
  if (v26)
  {
    v16 = 13;
    goto LABEL_201;
  }
  v16 = v135;
  if (!v135)
  {
    v45 = *a1;
    WebCore::ContentExtensions::PatternParser::sinkFloatingTermIfNecessary((WebCore::ContentExtensions::PatternParser *)v128, a2);
    v46 = HIDWORD(v131[1]);
    if (!HIDWORD(v131[1]))
      goto LABEL_198;
    LOBYTE(v136) = 1;
    v138 = 0;
    v137 = 0uLL;
    for (i = 1; i != 128; ++i)
      *((_QWORD *)&v137 + (i >> 6) + 1) |= 1 << i;
    v48 = 0;
    v49 = 0;
    BYTE1(v136) = 2;
    do
    {
      if (v49)
      {
        while (1)
        {
          v50 = v131[0];
          v51 = (char *)v131[0] + 32 * v48;
          if (!WebCore::ContentExtensions::Term::isKnownToMatchAnyString((WebCore::ContentExtensions::Term *)v51))
            break;
          if (*v51 == 2)
          {
            WebCore::ContentExtensions::Term::Group::~Group((WTF **)v50 + 4 * v48 + 1, a2);
            v50 = v131[0];
            v46 = HIDWORD(v131[1]);
          }
          *v51 = 0;
          v52 = (char *)v50 + 32 * v46;
          if (v51 + 32 != v52)
          {
            do
            {
              v53 = v51[32];
              *v51 = v53;
              v51[1] = v51[33];
              v51[8] = 0;
              if (v53 == 2)
              {
                *((_QWORD *)v51 + 1) = *((_QWORD *)v51 + 5);
                *((_QWORD *)v51 + 2) = 0;
                v54 = *((_DWORD *)v51 + 12);
                v55 = *((_DWORD *)v51 + 13);
                *((_QWORD *)v51 + 5) = 0;
                *((_QWORD *)v51 + 6) = 0;
                *((_DWORD *)v51 + 4) = v54;
                *((_DWORD *)v51 + 5) = v55;
              }
              else if (v53 == 1)
              {
                *(_OWORD *)(v51 + 8) = *(_OWORD *)(v51 + 40);
                *((_QWORD *)v51 + 3) = *((_QWORD *)v51 + 7);
              }
              if (v51[32] == 2)
                WebCore::ContentExtensions::Term::Group::~Group((WTF **)v51 + 5, a2);
              v51[32] = 0;
              v51 += 32;
            }
            while (v51 + 32 != v52);
            v46 = HIDWORD(v131[1]);
          }
          HIDWORD(v131[1]) = --v46;
          if (v46 <= v48)
            goto LABEL_152;
        }
      }
      if (v48 >= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x195742088);
      }
      v56 = v131[0];
      v57 = (WebCore::ContentExtensions::Term *)((char *)v131[0] + 32 * v48);
      isKnownToMatchAnyString = WebCore::ContentExtensions::Term::isKnownToMatchAnyString(v57);
      v49 = isKnownToMatchAnyString;
      if (isKnownToMatchAnyString)
      {
        if (*(_BYTE *)v57 == 2)
          WebCore::ContentExtensions::Term::Group::~Group((WTF **)v56 + 4 * v48 + 1, a2);
        *(_BYTE *)v57 = 0;
        v59 = v136;
        *(_BYTE *)v57 = (_BYTE)v136;
        v60 = (char *)v56 + 32 * v48;
        v61 = BYTE1(v136);
        v60[8] = 0;
        v62 = (uint64_t)(v60 + 8);
        *(_BYTE *)(v62 - 7) = v61;
        if (v59 == 2)
        {
          WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v62, (uint64_t)&v137);
        }
        else if (v59 == 1)
        {
          v63 = v137;
          *(_QWORD *)(v62 + 16) = v138;
          *(_OWORD *)v62 = v63;
        }
      }
      ++v48;
      v46 = HIDWORD(v131[1]);
    }
    while (v48 < HIDWORD(v131[1]));
LABEL_152:
    if ((_BYTE)v134)
      goto LABEL_172;
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x195742098);
    }
    v64 = v131[0];
    if (WebCore::ContentExtensions::Term::isKnownToMatchAnyString(v131[0]))
    {
LABEL_172:
      if (v46 >= 3)
      {
        v75 = v46 - 1;
        v76 = v131[0];
        if (*((_BYTE *)v131[0] + 32 * v75) != 1)
          goto LABEL_187;
        v77 = (int8x16_t *)((char *)v131[0] + 32 * v75);
        if ((v77[1].i64[0] & 1) == 0 || vaddlvq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v77[1]))) != 1)
          goto LABEL_185;
        v78 = v46 - 2;
        v79 = (WTF **)((char *)v131[0] + 32 * v78);
        if (!WebCore::ContentExtensions::Term::isKnownToMatchAnyString((WebCore::ContentExtensions::Term *)v79))
        {
LABEL_184:
          if (*((_BYTE *)v76 + 32 * v75) != 1)
            goto LABEL_187;
LABEL_185:
          v81 = (int8x16_t *)((char *)v76 + 32 * v75);
          if ((v81[1].i64[0] & 1) == 0 || vaddlvq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v81[1]))) != 1)
          {
LABEL_187:
            while (1)
            {
              v82 = v46 - 1;
              v83 = v131[0];
              v84 = (WebCore::ContentExtensions::Term *)((char *)v131[0] + 32 * v82);
              if ((WebCore::ContentExtensions::Term::matchesAtLeastOneCharacter(v84) & 1) != 0)
                break;
              if (*(_BYTE *)v84 == 2)
                WebCore::ContentExtensions::Term::Group::~Group((WTF **)v83 + 4 * v82 + 1, a2);
              *(_BYTE *)v84 = 0;
              HIDWORD(v131[1]) = --v46;
              if (!(_DWORD)v82)
              {
                v46 = 0;
                break;
              }
            }
          }
          if (v136 == 2)
          {
            WebCore::ContentExtensions::Term::Group::~Group((WTF **)&v137, a2);
            v46 = HIDWORD(v131[1]);
          }
          if (v46)
          {
            v85 = v131[0];
            v86 = 32 * v46;
            while ((WebCore::ContentExtensions::Term::matchesAtLeastOneCharacter(v85) & 1) == 0)
            {
              v85 = (WebCore::ContentExtensions::Term *)((char *)v85 + 32);
              v86 -= 32;
              if (!v86)
                goto LABEL_198;
            }
            WebCore::ContentExtensions::CombinedURLFilters::addPattern(v45, a5, (unsigned __int8 **)v131);
            v16 = v135;
            goto LABEL_201;
          }
LABEL_198:
          v16 = v135;
          if (!v135)
          {
            v16 = 1;
            v135 = 1;
          }
          goto LABEL_201;
        }
        if (*(_BYTE *)v79 == 2)
        {
          WebCore::ContentExtensions::Term::Group::~Group((WTF **)v76 + 4 * v78 + 1, a2);
          v80 = *((unsigned __int8 *)v79 + 32);
          *(_BYTE *)v79 = 0;
          if (v80 == 2)
            WebCore::ContentExtensions::Term::Group::~Group(v79 + 5, a2);
        }
        else
        {
          *(_BYTE *)v79 = 0;
        }
        *((_BYTE *)v79 + 32) = 0;
        HIDWORD(v131[1]) = v78;
        v46 = v78;
      }
      if (!v46)
      {
        __break(0xC471u);
        JUMPOUT(0x195742090);
      }
      v76 = v131[0];
      v75 = v46 - 1;
      goto LABEL_184;
    }
    if (v46 == LODWORD(v131[1]))
    {
      v65 = (char **)WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v131, v46 + 1, (unint64_t)&v136);
      v46 = HIDWORD(v131[1]);
      v64 = v131[0];
      if (!HIDWORD(v131[1]))
      {
LABEL_167:
        v72 = *(unsigned __int8 *)v65;
        *(_BYTE *)v64 = v72;
        *((_BYTE *)v64 + 1) = *((_BYTE *)v65 + 1);
        *((_BYTE *)v64 + 8) = 0;
        v73 = (uint64_t)v64 + 8;
        if (v72 == 2)
        {
          WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v73, (uint64_t)(v65 + 1));
        }
        else if (v72 == 1)
        {
          v74 = *(_OWORD *)(v65 + 1);
          *(_QWORD *)(v73 + 16) = v65[3];
          *(_OWORD *)v73 = v74;
        }
        v46 = ++HIDWORD(v131[1]);
        goto LABEL_172;
      }
    }
    else
    {
      v65 = &v136;
    }
    v66 = 32 * v46;
    do
    {
      v67 = (char *)v64 + v66;
      v68 = *((unsigned __int8 *)v64 + v66 - 32);
      *v67 = v68;
      v67[1] = *((_BYTE *)v64 + v66 - 31);
      *((_BYTE *)v64 + v66 + 8) = 0;
      v69 = (_QWORD *)((char *)v64 + v66 + 8);
      if (v68 == 2)
      {
        *((_QWORD *)v67 + 2) = 0;
        *v69 = *((_QWORD *)v67 - 3);
        v70 = *((_DWORD *)v67 - 4);
        v71 = *((_DWORD *)v67 - 3);
        *((_QWORD *)v67 - 3) = 0;
        *((_QWORD *)v67 - 2) = 0;
        *((_DWORD *)v67 + 4) = v70;
        *((_DWORD *)v67 + 5) = v71;
      }
      else if (v68 == 1)
      {
        *(_OWORD *)v69 = *(_OWORD *)((char *)v64 + v66 - 24);
        *(_QWORD *)((char *)v64 + v66 + 24) = *(_QWORD *)((char *)v64 + v66 - 8);
      }
      if (*(v67 - 32) == 2)
        WebCore::ContentExtensions::Term::Group::~Group((WTF **)((char *)v64 + v66 - 24), a2);
      *(v67 - 32) = 0;
      v66 -= 32;
    }
    while (v66);
    goto LABEL_167;
  }
LABEL_201:
  if (v132 == 2)
    WebCore::ContentExtensions::Term::Group::~Group(&v133, a2);
  LOBYTE(v132) = 0;
  v87 = v131[0];
  if (HIDWORD(v131[1]))
  {
    v88 = (WTF **)((char *)v131[0] + 8);
    v89 = 32 * HIDWORD(v131[1]);
    do
    {
      if (*((_BYTE *)v88 - 8) == 2)
        WebCore::ContentExtensions::Term::Group::~Group(v88, a2);
      *((_BYTE *)v88 - 8) = 0;
      v88 += 4;
      v89 -= 32;
    }
    while (v89);
    v87 = v131[0];
  }
  if (v87)
  {
    v131[0] = 0;
    LODWORD(v131[1]) = 0;
    WTF::fastFree(v87, a2);
  }
  v90 = v129;
  v91 = v130[0];
  if ((unint64_t)v129 <= *((_QWORD *)&v129 + 1))
  {
    if ((_QWORD)v129 == *((_QWORD *)&v129 + 1))
      goto LABEL_230;
    v96 = (WTF **)((char *)v130[0] + 32 * v129 + 8);
    v97 = 32 * *((_QWORD *)&v129 + 1) - 32 * v129;
    do
    {
      if (*((_BYTE *)v96 - 8) == 2)
        WebCore::ContentExtensions::Term::Group::~Group(v96, a2);
      *((_BYTE *)v96 - 8) = 0;
      v96 += 4;
      v97 -= 32;
    }
    while (v97);
  }
  else
  {
    if (*((_QWORD *)&v129 + 1))
    {
      v92 = (WTF **)((char *)v130[0] + 8);
      v93 = 32 * *((_QWORD *)&v129 + 1);
      do
      {
        if (*((_BYTE *)v92 - 8) == 2)
          WebCore::ContentExtensions::Term::Group::~Group(v92, a2);
        *((_BYTE *)v92 - 8) = 0;
        v92 += 4;
        v93 -= 32;
      }
      while (v93);
      v91 = v130[0];
      v90 = v129;
    }
    if (v90 != LODWORD(v130[1]))
    {
      v94 = (WTF **)((char *)v91 + 32 * v90 + 8);
      v95 = 32 * LODWORD(v130[1]) - 32 * v90;
      do
      {
        if (*((_BYTE *)v94 - 8) == 2)
          WebCore::ContentExtensions::Term::Group::~Group(v94, a2);
        *((_BYTE *)v94 - 8) = 0;
        v94 += 4;
        v95 -= 32;
      }
      while (v95);
    }
  }
  v91 = v130[0];
LABEL_230:
  if (v91)
  {
    v130[0] = 0;
    LODWORD(v130[1]) = 0;
    WTF::fastFree(v91, a2);
  }
  return v16;
}

const char *WebCore::ContentExtensions::URLFilterParser::statusString()
{
  const char *result;

  result = "Ok";
  switch("Ok")
  {
    case 0u:
      return result;
    case 1u:
      result = "Matches everything.";
      break;
    case 2u:
      result = "Only ASCII characters are supported in pattern.";
      break;
    case 3u:
      result = "Character class is not supported.";
      break;
    case 4u:
      result = "Patterns cannot contain backreferences.";
      break;
    case 5u:
      result = "Patterns cannot contain forward references.";
      break;
    case 6u:
      result = "Start of line assertion can only appear as the first term in a filter.";
      break;
    case 7u:
      result = "Word boundaries assertions are not supported yet.";
      break;
    case 8u:
      result = "Builtins character class atoms are not supported yet.";
      break;
    case 9u:
      result = "Groups are not supported yet.";
      break;
    case 0xAu:
      result = "Disjunctions are not supported yet.";
      break;
    case 0xBu:
      result = "The end of line assertion must be the last term in an expression.";
      break;
    case 0xCu:
      result = "Empty pattern.";
      break;
    case 0xDu:
      result = "Internal error in YARR.";
      break;
    case 0xEu:
      result = "Arbitrary atom repetitions are not supported.";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957421CCLL);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::MutableRangeList<char,unsigned int,128u>::insertBetween(uint64_t result, _DWORD *a2, _DWORD *a3, char a4, char a5, int *a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD v25[2];
  char v26;
  char v27;

  v10 = result;
  v11 = *a3;
  v12 = *(unsigned int *)(result + 12);
  if (*a3)
  {
    v13 = *a6;
    v25[0] = *a6;
    v25[1] = v11;
    v26 = a4;
    v27 = a5;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,unsigned int>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v12 + 1), (unint64_t)v25);
      v14 = *(_DWORD *)(v10 + 12);
      v15 = *(_QWORD *)v10;
      v16 = *(_QWORD *)v10 + 12 * v14;
      *(_QWORD *)v16 = *(_QWORD *)result;
      *(_WORD *)(v16 + 8) = *(_WORD *)(result + 8);
    }
    else
    {
      v15 = *(_QWORD *)result;
      v23 = *(_QWORD *)result + 12 * v12;
      *(_DWORD *)v23 = v13;
      *(_DWORD *)(v23 + 4) = v11;
      *(_BYTE *)(v23 + 8) = a4;
      *(_BYTE *)(v23 + 9) = a5;
      v14 = v12;
    }
    *(_DWORD *)(v10 + 12) = v14 + 1;
    *(_DWORD *)(v15 + 12 * *a2 + 4) = v12;
    v17 = a2;
  }
  else
  {
    v17 = a3;
    v18 = *(_QWORD *)result;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<char,unsigned int>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v12 + 1), v18);
      v18 = result;
      v19 = *(_DWORD *)(v10 + 12);
      v20 = *(_QWORD *)v10;
      v21 = *(_QWORD *)v10 + 12 * v19;
      *(_QWORD *)v21 = *(_QWORD *)result;
      *(_BYTE *)(v21 + 8) = *(_BYTE *)(result + 8);
      v22 = (_BYTE *)(v21 + 9);
    }
    else
    {
      v24 = v18 + 12 * v12;
      *(_QWORD *)v24 = *(_QWORD *)v18;
      *(_BYTE *)(v24 + 8) = *(_BYTE *)(v18 + 8);
      v22 = (_BYTE *)(v24 + 9);
      v20 = v18;
      v19 = v12;
    }
    *v22 = *(_BYTE *)(v18 + 9);
    *(_DWORD *)(v10 + 12) = v19 + 1;
    *(_DWORD *)v20 = *a6;
    *(_DWORD *)(v20 + 4) = v12;
    *(_BYTE *)(v20 + 8) = a4;
    *(_BYTE *)(v20 + 9) = a5;
    *a2 = 0;
  }
  *v17 = v12;
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::MutableRange<char,unsigned int>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (char *)v5 + 12 * *(unsigned int *)(a1 + 12);
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v9 = (unint64_t)a2;
      if (v9 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v9 < 0x81)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 128;
        goto LABEL_32;
      }
      if (v9 < 0x15555556)
      {
        v10 = 12 * v9;
        v11 = WTF::fastMalloc((WTF *)(12 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)a1 = v11;
LABEL_32:
        v20 = 0;
        do
        {
          v21 = v11 + v20;
          v22 = (char *)v5 + v20;
          *(_QWORD *)v21 = *(_QWORD *)((char *)v5 + v20);
          *(_WORD *)(v21 + 8) = *(_WORD *)((char *)v5 + v20 + 8);
          v20 += 12;
        }
        while (v22 + 12 != v6);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x1957425BCLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  if (v14 > v12)
  {
    v15 = *(_DWORD *)(a1 + 12);
    if (v14 < 0x81)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 128;
      if (!v15)
        goto LABEL_25;
    }
    else
    {
      if (v14 >= 0x15555556)
        goto LABEL_41;
      v16 = 12 * v14;
      v17 = WTF::fastMalloc((WTF *)(12 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v17;
      if (!v15)
        goto LABEL_25;
    }
    v18 = v17;
    v19 = v5;
    do
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_WORD *)(v18 + 8) = *((_WORD *)v19 + 4);
      v19 = (WTF *)((char *)v19 + 12);
      v18 += 12;
    }
    while (v19 != (WTF *)((char *)v5 + 12 * v15));
LABEL_25:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if ((WTF *)v17 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

char *WTF::Vector<unsigned int,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v10 < 0x81)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 128;
        goto LABEL_31;
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 4 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19574275CLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x81)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 128;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(4 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<unsigned int,64ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v10 < 0x41)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 64;
        goto LABEL_13;
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_13:
        memcpy(v11, v5, 4 * v6);
        v13 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1957428FCLL);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    v18 = *((unsigned int *)a1 + 3);
    if (v17 < 0x41)
    {
      v19 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 64;
    }
    else
    {
      if (v17 >> 30)
        goto LABEL_38;
      v19 = (char *)WTF::fastMalloc((WTF *)(4 * v17));
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
    }
    memcpy(v19, v5, 4 * v18);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::ContentExtensions::MutableRangeList<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,128u>::insertBetween(uint64_t result, _DWORD *a2, _DWORD *a3, char a4, char a5, uint64_t *a6)
{
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;

  v9 = a2;
  v10 = result;
  v11 = *a3;
  v12 = *(unsigned int *)(result + 12);
  if (*a3)
  {
    v13 = *a6;
    *a6 = 0;
    v28 = v13;
    v29 = v11;
    v30 = a4;
    v31 = a5;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v12 + 1, (unint64_t)&v28);
      v15 = *(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 12);
      *(_QWORD *)v15 = 0;
      v16 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(result + 8);
      *(_BYTE *)(v15 + 12) = *(_BYTE *)(result + 12);
      *(_BYTE *)(v15 + 13) = *(_BYTE *)(result + 13);
      v17 = v28;
      ++*(_DWORD *)(v10 + 12);
      if (v17)
        result = WTF::fastFree((WTF *)(v17 - 16), v14);
    }
    else
    {
      v23 = *(_QWORD *)result + 16 * v12;
      *(_QWORD *)v23 = v13;
      *(_DWORD *)(v23 + 8) = v11;
      *(_BYTE *)(v23 + 12) = a4;
      *(_BYTE *)(v23 + 13) = a5;
      ++*(_DWORD *)(result + 12);
    }
    *(_DWORD *)(*(_QWORD *)v10 + 16 * *v9 + 8) = v12;
  }
  else
  {
    v19 = *(_QWORD *)result;
    if ((_DWORD)v12 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v12 + 1, v19);
      v19 = result;
      v20 = *(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 12);
      *(_QWORD *)v20 = 0;
      v21 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v20 = v21;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(result + 8);
      v22 = *(_BYTE *)(result + 12);
    }
    else
    {
      v20 = v19 + 16 * v12;
      *(_QWORD *)v20 = 0;
      v24 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)v20 = v24;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 12);
    }
    *(_BYTE *)(v20 + 12) = v22;
    *(_BYTE *)(v20 + 13) = *(_BYTE *)(v19 + 13);
    ++*(_DWORD *)(v10 + 12);
    v25 = *a6;
    *a6 = 0;
    v26 = *(uint64_t **)v10;
    v27 = *v26;
    *v26 = v25;
    if (v27)
      result = WTF::fastFree((WTF *)(v27 - 16), a2);
    *((_DWORD *)v26 + 2) = v12;
    *((_BYTE *)v26 + 12) = a4;
    *((_BYTE *)v26 + 13) = a5;
    *v9 = 0;
    v9 = a3;
  }
  *v9 = v12;
  return result;
}

uint64_t WebCore::ContentExtensions::DataConverterWithEpsilonClosure::convert<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>(uint64_t result, _QWORD **a2, uint64_t *a3)
{
  unint64_t v3;
  int v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;

  *(_QWORD *)result = 0;
  v3 = *((unsigned int *)a3 + 2);
  v4 = *((_DWORD *)a3 + 3);
  if (v4 != (_DWORD)v3)
  {
    v6 = (uint64_t *)result;
    v7 = *a3;
    while (1)
    {
      v32 = 0;
      v8 = *(_QWORD *)(v7 + 72);
      if (v8 > *(unsigned int *)(v7 + 8))
        break;
      if (*(_QWORD *)(v7 + 32) <= v3)
        goto LABEL_34;
      v32 = *(_DWORD *)(*(_QWORD *)v7 + v8 + 4 * v3);
      result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(v6, (int *)&v32, (uint64_t)&v31);
      v9 = **a2 + 16 * v32;
      v10 = *(unsigned int *)(v9 + 12);
      if ((_DWORD)v10)
      {
        v11 = *(int **)v9;
        v12 = *(_QWORD *)v9 + 4 * v10;
        v13 = *v6;
        do
        {
          if (v13)
            goto LABEL_9;
          v14 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)&v15 = -1;
          *((_QWORD *)&v15 + 1) = -1;
          *(_OWORD *)(v14 + 16) = v15;
          *(_OWORD *)(v14 + 32) = v15;
          result = v14 + 16;
          *v6 = result;
          *(_DWORD *)(result - 4) = 8;
          *(_DWORD *)(*v6 - 8) = 7;
          *(_DWORD *)(*v6 - 16) = 0;
          *(_DWORD *)(*v6 - 12) = 0;
          v13 = *v6;
          if (*v6)
LABEL_9:
            v16 = *(_DWORD *)(v13 - 8);
          else
            v16 = 0;
          v17 = *v11;
          v18 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
          v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
          v20 = (v19 ^ HIWORD(v19)) & v16;
          v21 = (int *)(v13 + 4 * v20);
          v22 = *v21;
          if (*v21 != -1)
          {
            v28 = 0;
            v29 = 1;
            while (v22 != v17)
            {
              if (v22 == -2)
                v28 = v21;
              v20 = (v20 + v29) & v16;
              v21 = (int *)(v13 + 4 * v20);
              v22 = *v21;
              ++v29;
              if (*v21 == -1)
              {
                if (v28)
                {
                  *v28 = -1;
                  --*(_DWORD *)(*v6 - 16);
                  v17 = *v11;
                  v21 = v28;
                }
                goto LABEL_11;
              }
            }
            goto LABEL_19;
          }
LABEL_11:
          *v21 = v17;
          v23 = *v6;
          if (*v6)
            v24 = *(_DWORD *)(v23 - 12) + 1;
          else
            v24 = 1;
          *(_DWORD *)(v23 - 12) = v24;
          v13 = *v6;
          if (*v6)
            v25 = *(_DWORD *)(v13 - 12);
          else
            v25 = 0;
          v26 = (*(_DWORD *)(v13 - 16) + v25);
          v27 = *(unsigned int *)(v13 - 4);
          if (v27 > 0x400)
          {
            if (v27 <= 2 * v26)
            {
LABEL_22:
              result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(v6, v21);
              v13 = *v6;
            }
          }
          else if (3 * v27 <= 4 * v26)
          {
            goto LABEL_22;
          }
LABEL_19:
          ++v11;
        }
        while (v11 != (int *)v12);
      }
      v30 = v3 + 1;
      v3 = (v3 + 1);
      if (v4 == v30)
        return result;
    }
    __break(1u);
LABEL_34:
    result = 59;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ContentExtensions::DataConverterWithEpsilonClosure::extend<WebCore::ContentExtensions::SerializedNFA::IterableConstTargets>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  int v4;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  int v30;
  int v31;
  _BYTE v32[28];
  unsigned int v33;

  v3 = *((unsigned int *)a3 + 2);
  v4 = *((_DWORD *)a3 + 3);
  if (v4 != (_DWORD)v3)
  {
    v6 = (_QWORD **)result;
    v7 = *a3;
    while (1)
    {
      v33 = 0;
      v8 = *(_QWORD *)(v7 + 72);
      if (v8 > *(unsigned int *)(v7 + 8))
        break;
      if (*(_QWORD *)(v7 + 32) <= v3)
        goto LABEL_35;
      v33 = *(_DWORD *)(*(_QWORD *)v7 + v8 + 4 * v3);
      result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(a2, (int *)&v33, (uint64_t)v32);
      if (v32[16])
      {
        v9 = **v6 + 16 * v33;
        v10 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v10)
        {
          v11 = *(int **)v9;
          v12 = *(_QWORD *)v9 + 4 * v10;
          do
          {
            v13 = *a2;
            if (*a2)
              goto LABEL_10;
            v14 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)&v15 = -1;
            *((_QWORD *)&v15 + 1) = -1;
            *(_OWORD *)(v14 + 16) = v15;
            *(_OWORD *)(v14 + 32) = v15;
            result = v14 + 16;
            *a2 = result;
            *(_DWORD *)(result - 4) = 8;
            *(_DWORD *)(*a2 - 8) = 7;
            *(_DWORD *)(*a2 - 16) = 0;
            *(_DWORD *)(*a2 - 12) = 0;
            v13 = *a2;
            if (*a2)
LABEL_10:
              v16 = *(_DWORD *)(v13 - 8);
            else
              v16 = 0;
            v17 = *v11;
            v18 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
            v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
            v20 = (v19 ^ HIWORD(v19)) & v16;
            v21 = (int *)(v13 + 4 * v20);
            v22 = *v21;
            if (*v21 != -1)
            {
              v29 = 0;
              v30 = 1;
              while (v22 != v17)
              {
                if (v22 == -2)
                  v29 = v21;
                v20 = (v20 + v30) & v16;
                v21 = (int *)(v13 + 4 * v20);
                v22 = *v21;
                ++v30;
                if (*v21 == -1)
                {
                  if (v29)
                  {
                    *v29 = -1;
                    --*(_DWORD *)(*a2 - 16);
                    v17 = *v11;
                    v21 = v29;
                  }
                  goto LABEL_12;
                }
              }
              goto LABEL_20;
            }
LABEL_12:
            *v21 = v17;
            v23 = *a2;
            if (*a2)
              v24 = *(_DWORD *)(v23 - 12) + 1;
            else
              v24 = 1;
            *(_DWORD *)(v23 - 12) = v24;
            v25 = *a2;
            if (*a2)
              v26 = *(_DWORD *)(v25 - 12);
            else
              v26 = 0;
            v27 = (*(_DWORD *)(v25 - 16) + v26);
            v28 = *(unsigned int *)(v25 - 4);
            if (v28 > 0x400)
            {
              if (v28 <= 2 * v27)
LABEL_23:
                result = (uint64_t)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, v21);
            }
            else if (3 * v28 <= 4 * v27)
            {
              goto LABEL_23;
            }
LABEL_20:
            ++v11;
          }
          while (v11 != (int *)v12);
        }
      }
      v31 = v3 + 1;
      v3 = (v3 + 1);
      if (v4 == v31)
        return result;
    }
    __break(1u);
LABEL_35:
    result = 59;
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::MutableRange<signed char,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,128ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;

  if (*(unsigned int *)(result + 8) >= a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 >= 0x81)
  {
    if (a2 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(16 * a2));
    v6 = result;
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_11;
    goto LABEL_7;
  }
  v6 = result + 16;
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 128;
  if ((_DWORD)v5)
  {
LABEL_7:
    v7 = (WTF *)((char *)v4 + 16 * v5);
    v8 = v4;
    do
    {
      *(_QWORD *)v6 = 0;
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)v6 = v9;
      *(_DWORD *)(v6 + 8) = *((_DWORD *)v8 + 2);
      *(_WORD *)(v6 + 12) = *((_WORD *)v8 + 6);
      if (*(_QWORD *)v8)
        result = WTF::fastFree((WTF *)(*(_QWORD *)v8 - 16), (void *)a2);
      v8 = (WTF *)((char *)v8 + 16);
      v6 += 16;
    }
    while (v8 != v7);
  }
LABEL_11:
  if ((WTF *)(v3 + 16) != v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    return WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

void WebCore::ContentExtensions::PatternParser::sinkFloatingTermIfNecessary(WebCore::ContentExtensions::PatternParser *this, void *a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  int v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  int v17;
  _BYTE *v18;
  __int128 v19;
  _BYTE *v20;
  uint64_t v21;
  __int128 v22;
  _BYTE *v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;

  v3 = (unsigned __int8 *)this + 56;
  v2 = *((unsigned __int8 *)this + 56);
  if (!*((_BYTE *)this + 56))
    return;
  if (*((_BYTE *)this + 89))
  {
    if (!*((_DWORD *)this + 23))
      *((_DWORD *)this + 23) = 11;
    goto LABEL_35;
  }
  if (v2 == 1
    && (*((_QWORD *)this + 9) & 1) != 0
    && vaddlvq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)this + 72)))) == 1)
  {
    *((_BYTE *)this + 89) = 1;
  }
  v5 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1) != v5)
  {
    if (!v5)
      v5 = *((unsigned int *)this + 8);
    v12 = *((_QWORD *)this + 3) + 32 * (v5 - 1);
    if (*(_BYTE *)v12 != 2)
      goto LABEL_35;
    v13 = (_QWORD *)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 20);
    if ((_DWORD)v14 == *(_DWORD *)(v12 + 16))
    {
      v15 = (unsigned __int8 *)WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 8, v14 + 1, (unint64_t)v3);
      v16 = (_BYTE *)(*v13 + 32 * *(unsigned int *)(v12 + 20));
      v17 = *v15;
      *v16 = v17;
      v16[1] = v15[1];
      v16[8] = 0;
      v18 = v16 + 8;
      if (v17 != 2)
      {
        if (v17 == 1)
        {
          v19 = *(_OWORD *)(v15 + 8);
          *((_QWORD *)v18 + 2) = *((_QWORD *)v15 + 3);
          *(_OWORD *)v18 = v19;
        }
        goto LABEL_34;
      }
      v27 = (char *)(v15 + 8);
      v24 = (uint64_t)v18;
    }
    else
    {
      v23 = (_BYTE *)(*v13 + 32 * v14);
      *v23 = v2;
      v23[1] = *((_BYTE *)this + 57);
      v23[8] = 0;
      v24 = (uint64_t)(v23 + 8);
      if (v2 != 2)
      {
        if (v2 == 1)
        {
          v25 = *((_OWORD *)this + 4);
          *(_QWORD *)(v24 + 16) = *((_QWORD *)this + 10);
          *(_OWORD *)v24 = v25;
        }
        goto LABEL_34;
      }
      v27 = (char *)this + 64;
    }
    WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v24, (uint64_t)v27);
LABEL_34:
    ++*(_DWORD *)(v12 + 20);
    v2 = *v3;
    goto LABEL_35;
  }
  v6 = *((unsigned int *)this + 13);
  if ((_DWORD)v6 == *((_DWORD *)this + 12))
  {
    v7 = (unsigned __int8 *)WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 40, v6 + 1, (unint64_t)v3);
    v8 = (_BYTE *)(*((_QWORD *)this + 5) + 32 * *((unsigned int *)this + 13));
    v9 = *v7;
    *v8 = v9;
    v8[1] = v7[1];
    v8[8] = 0;
    v10 = v8 + 8;
    if (v9 != 2)
    {
      if (v9 == 1)
      {
        v11 = *(_OWORD *)(v7 + 8);
        *((_QWORD *)v10 + 2) = *((_QWORD *)v7 + 3);
        *(_OWORD *)v10 = v11;
      }
      goto LABEL_30;
    }
    v26 = (char *)(v7 + 8);
    v21 = (uint64_t)v10;
  }
  else
  {
    v20 = (_BYTE *)(*((_QWORD *)this + 5) + 32 * v6);
    *v20 = v2;
    v20[1] = *((_BYTE *)this + 57);
    v20[8] = 0;
    v21 = (uint64_t)(v20 + 8);
    if (v2 != 2)
    {
      if (v2 == 1)
      {
        v22 = *((_OWORD *)this + 4);
        *(_QWORD *)(v21 + 16) = *((_QWORD *)this + 10);
        *(_OWORD *)v21 = v22;
      }
      goto LABEL_30;
    }
    v26 = (char *)this + 64;
  }
  WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v21, (uint64_t)v26);
LABEL_30:
  ++*((_DWORD *)this + 13);
  v2 = *((unsigned __int8 *)this + 56);
LABEL_35:
  if (v2 == 2)
    WebCore::ContentExtensions::Term::Group::~Group((WTF **)this + 8, a2);
  *((_WORD *)this + 28) = 0;
  *((_BYTE *)this + 64) = 0;
}

uint64_t WebCore::ContentExtensions::Term::matchesAtLeastOneCharacter(WebCore::ContentExtensions::Term *this)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  WebCore::ContentExtensions::Term *v6;
  uint64_t v7;
  uint64_t v8;

  if (*((unsigned __int8 *)this + 1) - 1 < 2)
    return 0;
  v2 = *(unsigned __int8 *)this;
  if (v2 == 2)
  {
    v5 = *((unsigned int *)this + 5);
    if (!(_DWORD)v5)
      return 0;
    v6 = (WebCore::ContentExtensions::Term *)*((_QWORD *)this + 1);
    v7 = 32 * v5 - 32;
    do
    {
      result = WebCore::ContentExtensions::Term::matchesAtLeastOneCharacter(v6);
      if ((result & 1) != 0)
        break;
      v6 = (WebCore::ContentExtensions::Term *)((char *)v6 + 32);
      v8 = v7;
      v7 -= 32;
    }
    while (v8);
  }
  else if (v2 == 1
         && (v3 = *((_QWORD *)this + 2),
             v4.i64[0] = v3,
             v4.i64[1] = *((_QWORD *)this + 3),
             vaddlvq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v4))) == 1))
  {
    return (v3 & 1) == 0;
  }
  else
  {
    return 1;
  }
  return result;
}

void WebCore::ContentExtensions::Term::Group::~Group(WTF **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::ContentExtensions::Term::Group *v6;

  v3 = *((unsigned int *)this + 3);
  v4 = *this;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (WTF *)((char *)v4 + 8);
    do
    {
      if (*((_BYTE *)v6 - 8) == 2)
        WebCore::ContentExtensions::Term::Group::~Group(v6);
      *((_BYTE *)v6 - 8) = 0;
      v6 = (WebCore::ContentExtensions::Term::Group *)((char *)v6 + 32);
      v5 -= 32;
    }
    while (v5);
    v4 = *this;
  }
  if (v4)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

unint64_t WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::ContentExtensions::Term,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(WTF **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v8 = v6;
        v9 = 0;
        v10 = (char *)v4 + 32 * v5;
        do
        {
          v11 = (char *)v4 + v9;
          v12 = v8 + v9;
          v13 = *((unsigned __int8 *)v4 + v9);
          *(_BYTE *)v12 = v13;
          *(_BYTE *)(v12 + 1) = *((_BYTE *)v4 + v9 + 1);
          *(_BYTE *)(v8 + v9 + 8) = 0;
          v14 = (_QWORD *)(v8 + v9 + 8);
          if (v13 == 2)
          {
            *v14 = 0;
            *(_QWORD *)(v8 + v9 + 16) = 0;
            v16 = *((_QWORD *)v11 + 1);
            *((_QWORD *)v11 + 1) = 0;
            *v14 = v16;
            v17 = *((_DWORD *)v11 + 4);
            *((_DWORD *)v11 + 4) = 0;
            *(_DWORD *)(v12 + 16) = v17;
            v18 = *((_DWORD *)v11 + 5);
            *((_DWORD *)v11 + 5) = 0;
            *(_DWORD *)(v12 + 20) = v18;
          }
          else if (v13 == 1)
          {
            v15 = *(_OWORD *)((char *)v4 + v9 + 8);
            *(_QWORD *)(v8 + v9 + 24) = *(_QWORD *)((char *)v4 + v9 + 24);
            *(_OWORD *)v14 = v15;
          }
          if (*v11 == 2)
            WebCore::ContentExtensions::Term::Group::~Group((WTF **)((char *)v4 + v9 + 8), v7);
          *v11 = 0;
          v9 += 32;
        }
        while (v11 + 32 != v10);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

BOOL WebCore::ContentExtensions::Term::isKnownToMatchAnyString(WebCore::ContentExtensions::Term *this)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  __int32 v5;
  uint8x8_t v6;
  __int32 v7;
  uint8x8_t v8;
  __int32 v9;
  uint8x8_t v10;
  __int32 v11;
  WebCore::ContentExtensions::Term *v12;
  uint64_t v14;
  WebCore::ContentExtensions::Term *i;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  __int32 v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  __int32 v28;
  uint64_t v29;
  int v31;

  v2 = *(unsigned __int8 *)this;
  if (v2 == 2)
  {
    if (*((_DWORD *)this + 5) == 1)
    {
      v12 = (WebCore::ContentExtensions::Term *)*((_QWORD *)this + 1);
      if ((WebCore::ContentExtensions::Term::isKnownToMatchAnyString(v12) & 1) == 0)
      {
        for (i = v12; ; i = (WebCore::ContentExtensions::Term *)*((_QWORD *)i + 1))
        {
          v17 = *(unsigned __int8 *)i;
          if (v17 != 2)
            break;
          if (*((_DWORD *)i + 5) != 1)
            return 0;
        }
        if (v17 != 1)
          return 0;
        v18 = *((unsigned __int8 *)i + 8);
        v20 = *((_QWORD *)i + 2);
        v19 = *((_QWORD *)i + 3);
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
        v21.i16[0] = vaddlv_u8(v21);
        v22 = v21.i32[0];
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
        v23.i16[0] = vaddlv_u8(v23);
        v24 = v23.i32[0];
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v25.i16[0] = vaddlv_u8(v25);
        v26 = v25.i32[0];
        v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v19));
        v27.i16[0] = vaddlv_u8(v27);
        v28 = v24 + v22 + v26;
        if (v18)
        {
          if (v28 + v27.i32[0])
            return 0;
        }
        else
        {
          v29 = v20 & 1;
          if (v28 + v27.i32[0] != 127 || v29 != 0)
            return 0;
        }
        v31 = *((unsigned __int8 *)this + 1);
        if (v31 != 2)
        {
          if (v31 == 1)
          {
            if (*((_BYTE *)v12 + 1) != 3)
              return 0;
          }
          else if (v31 != 3 || *((_BYTE *)v12 + 1) != 1)
          {
            return 0;
          }
        }
      }
      return 1;
    }
  }
  else if (v2 == 1)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.i32[0];
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v3));
    v6.i16[0] = vaddlv_u8(v6);
    v7 = v6.i32[0];
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)*((_QWORD *)this + 3));
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.i32[0];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*((_QWORD *)this + 3)));
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v7 + v5 + v9;
    if (*((_BYTE *)this + 8))
    {
      if (v11 + v10.i32[0])
        return 0;
    }
    else
    {
      v14 = v3 & 1;
      if (v11 + v10.i32[0] != 127 || v14 != 0)
        return 0;
    }
    return *((_BYTE *)this + 1) == 2;
  }
  return 0;
}

uint64_t WTF::HashTable<WebCore::ContentExtensions::`anonymous namespace'::ActionKey,WTF::KeyValuePair<WebCore::ContentExtensions::`anonymous namespace'::ActionKey,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContentExtensions::`anonymous namespace'::ActionKey,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WebCore::ContentExtensions::`anonymous namespace'::ActionKeyHash,WTF::HashMap<WebCore::ContentExtensions::`anonymous namespace'::ActionKey,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ContentExtensions::`anonymous namespace'::ActionKeyHash,WebCore::ContentExtensions::`anonymous namespace'::ActionKeyHashTraits,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::ContentExtensions::`anonymous namespace'::ActionKeyHashTraits>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  WTF *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  uint64_t result;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastZeroedMalloc((WTF *)(48 * v5 + 16));
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v2 + 48 * v8;
      v11 = *(_DWORD *)(v10 + 24);
      if (v11 != 2)
      {
        if (v11)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = v17 & *(_DWORD *)v10;
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = v16 + 48 * v18;
            v18 = (v18 + v19++) & v17;
          }
          while (*(_DWORD *)(v21 + 24));
          v22 = v20;
          v23 = v16 + 48 * v20;
          v26 = *(WTF **)(v23 + 32);
          v25 = (_QWORD *)(v23 + 32);
          v24 = v26;
          if (v26)
          {
            *v25 = 0;
            *(_DWORD *)(v16 + 48 * v20 + 40) = 0;
            WTF::fastFree(v24, v7);
          }
          v27 = *(_OWORD *)(v10 + 16);
          *(_OWORD *)v21 = *(_OWORD *)v10;
          *(_OWORD *)(v21 + 16) = v27;
          v28 = v2 + 48 * v8;
          *v25 = 0;
          v25[1] = 0;
          v30 = *(_QWORD *)(v28 + 32);
          v29 = v28 + 32;
          *(_QWORD *)v29 = 0;
          *v25 = v30;
          v31 = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          v32 = v16 + 48 * v22;
          *(_DWORD *)(v32 + 40) = v31;
          v33 = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v32 + 44) = v33;
          v34 = *(WTF **)v29;
          if (*(_QWORD *)v29)
          {
            *(_QWORD *)v29 = 0;
            *(_DWORD *)(v29 + 8) = 0;
            WTF::fastFree(v34, v7);
          }
          if (v10 == a2)
            v9 = v21;
        }
        else
        {
          v12 = v2 + 48 * v8;
          v15 = *(WTF **)(v12 + 32);
          v14 = (_QWORD *)(v12 + 32);
          v13 = v15;
          if (v15)
          {
            *v14 = 0;
            *(_DWORD *)(v2 + 48 * v8 + 40) = 0;
            WTF::fastFree(v13, v7);
          }
        }
      }
      ++v8;
    }
    while (v8 != v3);
  }
  else
  {
    v9 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

uint64_t WTF::HashTable<WebCore::ContentExtensions::UniqueNodeIdSet,WebCore::ContentExtensions::UniqueNodeIdSet,WTF::IdentityExtractor,WebCore::ContentExtensions::UniqueNodeIdSetHash,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetTranslator>,WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetSource const&,WebCore::ContentExtensions::NodeIdSetToUniqueNodeIdSetSource const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  _QWORD *v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  _DWORD *v17;
  uint64_t result;
  uint64_t v19;
  unsigned int *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  _DWORD *v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  int v82;
  char v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  int v92;
  void *v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char **v114;
  uint64_t v115;
  char *v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  _DWORD *v121;
  _DWORD *v122;
  _QWORD *v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ContentExtensions::UniqueNodeIdSet,WebCore::ContentExtensions::UniqueNodeIdSet,WTF::IdentityExtractor,WebCore::ContentExtensions::UniqueNodeIdSetHash,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits>::rehash(a2, 0x80u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = 0;
  v11 = *((_DWORD *)a3 + 6);
  v12 = (_QWORD *)a3[2];
  for (i = v11; ; i = v9 + v14)
  {
    v14 = i & v8;
    v15 = (uint64_t *)(v6 + 8 * v14);
    v16 = (unsigned int *)*v15;
    if (*v15 == -1)
    {
      v10 = (uint64_t *)(v6 + 8 * v14);
      goto LABEL_18;
    }
    if (!v16)
    {
      if (v10)
        v15 = v10;
      if (*v15 == -1)
      {
        *v15 = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = (_QWORD *)a3[2];
      }
      v127 = 0;
      v126 = 0;
      v32 = (_DWORD *)*v12;
      v120 = v15;
      if (*v12)
      {
        v33 = *(v32 - 1);
        v34 = &v32[v33];
        if (*(v32 - 3))
        {
          v35 = (_DWORD *)*v12;
          if ((_DWORD)v33)
          {
            v36 = 4 * v33;
            v35 = (_DWORD *)*v12;
            while (*v35 >= 0xFFFFFFFE)
            {
              ++v35;
              v36 -= 4;
              if (!v36)
              {
                v35 = v34;
                goto LABEL_46;
              }
            }
          }
          goto LABEL_46;
        }
        v35 = &v32[v33];
      }
      else
      {
        v35 = 0;
        v33 = 0;
      }
      v34 = &v32[v33];
LABEL_46:
      if (v32)
        v37 = &v32[*(v32 - 1)];
      else
        v37 = 0;
      v117 = v11;
      v118 = a2;
      v119 = a1;
      if (v37 == v35)
      {
        v38 = 0;
        v81 = *a3;
        v82 = *(_DWORD *)(*a3 + 28);
        v83 = 1;
        v84 = v82;
        goto LABEL_102;
      }
      v38 = 0;
      v122 = v34;
      v123 = a3;
      v121 = v37;
      while (1)
      {
        v39 = a3[1];
        v40 = *(_QWORD *)(v39 + 56);
        if (v40 > *(unsigned int *)(v39 + 8))
          break;
        v41 = *v35;
        if (*(_QWORD *)(v39 + 16) <= v41)
        {
          __break(0xC471u);
          JUMPOUT(0x1957442D4);
        }
        v42 = *(_QWORD *)v39 + v40 + 24 * v41;
        v44 = *(_DWORD *)(v42 + 20);
        v43 = (unsigned int *)(v42 + 20);
        v45 = *(v43 - 1);
        v124 = v43;
        if (v45 < v44)
        {
          while (1)
          {
            v46 = a3[1];
            v47 = *(_QWORD *)(v46 + 88);
            if (v47 > *(unsigned int *)(v46 + 8))
              goto LABEL_145;
            if (*(_QWORD *)(v46 + 48) <= v45)
              goto LABEL_146;
            v48 = *(_QWORD *)(*(_QWORD *)v46 + v47 + 8 * v45);
            if (v38)
              goto LABEL_58;
            v49 = (_OWORD *)WTF::fastMalloc((WTF *)0x50);
            *(_QWORD *)&v50 = -1;
            *((_QWORD *)&v50 + 1) = -1;
            v49[2] = v50;
            v49[3] = v50;
            v49[4] = v50;
            *v49 = xmmword_1968A5190;
            v49[1] = v50;
            v38 = v49 + 1;
            if (v49 == (_OWORD *)-16)
              v51 = 0;
            else
LABEL_58:
              v51 = *((_DWORD *)v38 - 2);
            v52 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = &v38[v55];
            v57 = *v56;
            if (*v56 != -1)
            {
              v58 = 0;
              v59 = 1;
              while (v57 != v48)
              {
                if (v57 == -2)
                  v58 = v56;
                v55 = (v55 + v59) & v51;
                v56 = &v38[v55];
                v57 = *v56;
                ++v59;
                if (*v56 == -1)
                {
                  if (!v58)
                    goto LABEL_67;
                  v60 = *((_DWORD *)v38 - 4) - 1;
                  *((_DWORD *)v38 - 4) = v60;
                  *v58 = v48;
                  v61 = *((_DWORD *)v38 - 3);
                  goto LABEL_68;
                }
              }
              goto LABEL_88;
            }
LABEL_67:
            *v56 = v48;
            v60 = *((_DWORD *)v38 - 4);
            v61 = *((_DWORD *)v38 - 3);
LABEL_68:
            v62 = v61 + 1;
            *((_DWORD *)v38 - 3) = v61 + 1;
            v63 = (v61 + 1 + v60);
            v64 = *((unsigned int *)v38 - 1);
            if (v64 > 0x400)
              break;
            if (3 * v64 > 4 * v63)
              goto LABEL_70;
            if ((_DWORD)v64)
              goto LABEL_73;
            v66 = 8;
LABEL_76:
            v67 = WTF::fastMalloc((WTF *)(8 * v66 + 16));
            v69 = (_DWORD *)v67;
            v65 = v67 + 16;
            if (v66)
              memset((void *)(v67 + 16), 255, 8 * v66);
            v70 = v66 - 1;
            v69[2] = v66 - 1;
            v69[3] = v66;
            *v69 = 0;
            v69[1] = v62;
            a3 = v123;
            v43 = v124;
            if ((_DWORD)v64)
            {
              v71 = 0;
              if (!v65)
                v70 = 0;
              do
              {
                v72 = v38[v71];
                if (v72 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v73 = (v72 + ~(v72 << 32)) ^ ((v72 + ~(v72 << 32)) >> 22);
                  v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
                  v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
                  v76 = v70 & ((v75 >> 31) ^ v75);
                  v77 = 1;
                  do
                  {
                    v78 = v76;
                    v79 = *(_QWORD *)(v65 + 8 * v76);
                    v76 = (v76 + v77++) & v70;
                  }
                  while (v79 != -1);
                  *(_QWORD *)(v65 + 8 * v78) = v72;
                }
                ++v71;
              }
              while (v71 != v64);
            }
            WTF::fastFree((WTF *)(v38 - 2), v68);
            if (!v65)
            {
              v38 = 0;
              goto LABEL_88;
            }
LABEL_71:
            v38 = (_QWORD *)v65;
LABEL_88:
            if (++v45 >= *v43)
              goto LABEL_92;
          }
          if (v64 > 2 * v63)
          {
LABEL_70:
            v65 = (uint64_t)v38;
            goto LABEL_71;
          }
LABEL_73:
          v66 = (_DWORD)v64 << (6 * v62 >= (2 * v64));
          goto LABEL_76;
        }
LABEL_92:
        v80 = v35 + 1;
        v35 = v122;
        if (v80 != v122)
        {
          v35 = v80;
          while (*v35 >= 0xFFFFFFFE)
          {
            if (++v35 == v122)
            {
              v35 = v122;
              break;
            }
          }
        }
        if (v35 == v121)
        {
          v81 = *a3;
          v82 = *(_DWORD *)(*a3 + 28);
          v15 = v120;
          if (!v38)
          {
            v83 = 1;
            goto LABEL_100;
          }
          if (!*((_DWORD *)v38 - 3))
            goto LABEL_165;
          v108 = *((unsigned int *)v38 - 1);
          v109 = v38;
          if ((_DWORD)v108)
          {
            v110 = 0;
            while (v38[v110] >= 0xFFFFFFFFFFFFFFFELL)
            {
              if (v108 == ++v110)
                goto LABEL_165;
            }
            v109 = &v38[v110];
          }
          v111 = &v38[v108];
          if (v111 == v109)
          {
LABEL_165:
            v83 = 0;
LABEL_100:
            v84 = *(_DWORD *)(*a3 + 28);
          }
          else
          {
LABEL_157:
            v125 = 0;
            v112 = *v109;
            v125 = *v109;
            v113 = *a3;
            v114 = (char **)(*a3 + 16);
            v115 = *(unsigned int *)(*a3 + 28);
            if ((_DWORD)v115 == *(_DWORD *)(*a3 + 24))
            {
              v116 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v114, v115 + 1, (unint64_t)&v125);
              v115 = *(unsigned int *)(v113 + 28);
              *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8 * v115) = *(_QWORD *)v116;
            }
            else
            {
              *(_QWORD *)&(*v114)[8 * v115] = v112;
            }
            *(_DWORD *)(v113 + 28) = v115 + 1;
            while (++v109 != v111)
            {
              if ((unint64_t)*v109 < 0xFFFFFFFFFFFFFFFELL)
              {
                if (v109 != v111)
                  goto LABEL_157;
                break;
              }
            }
            v83 = 0;
            v81 = *a3;
            v84 = *(_DWORD *)(*a3 + 28);
          }
LABEL_102:
          v85 = v84 - v82;
          if (!HIWORD(v85))
          {
            LODWORD(v126) = v82;
            LOWORD(v127) = v85;
            v86 = *(unsigned int *)(v81 + 12);
            if ((_DWORD)v86 == *(_DWORD *)(v81 + 8))
            {
              v87 = WTF::Vector<WebCore::ContentExtensions::DFANode,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v81, v86 + 1, (unint64_t)&v126);
              v88 = *(_QWORD *)v81 + 12 * *(unsigned int *)(v81 + 12);
              v89 = *(_QWORD *)v87;
              v90 = *((_DWORD *)v87 + 2);
            }
            else
            {
              v88 = *(_QWORD *)v81 + 12 * v86;
              v89 = v126;
              v90 = v127;
            }
            *(_DWORD *)(v88 + 8) = v90;
            *(_QWORD *)v88 = v89;
            ++*(_DWORD *)(v81 + 12);
            v91 = (_QWORD *)a3[2];
            *v15 = 0;
            if (*v91)
              v92 = *(_DWORD *)(*v91 - 12);
            else
              v92 = 0;
            result = WTF::fastMalloc((WTF *)(4 * (v92 - 1) + 16));
            *v15 = result;
            *(_DWORD *)result = v92;
            *(_DWORD *)(result + 4) = v117;
            *(_DWORD *)(result + 8) = v86;
            v94 = (_DWORD *)*v91;
            if (*v91)
            {
              v95 = *(v94 - 1);
              v96 = &v94[v95];
              if (*(v94 - 3))
              {
                v97 = (_DWORD *)*v91;
                if ((_DWORD)v95)
                {
                  v98 = 4 * v95;
                  v97 = (_DWORD *)*v91;
                  while (*v97 >= 0xFFFFFFFE)
                  {
                    ++v97;
                    v98 -= 4;
                    if (!v98)
                    {
                      v97 = v96;
                      break;
                    }
                  }
                }
LABEL_119:
                if (v94)
                  v94 += *(v94 - 1);
                if (v94 != v97)
                {
                  v99 = (_DWORD *)(result + 12);
                  do
                  {
                    v100 = v97 + 1;
                    *v99++ = *v97;
                    v97 = v96;
                    if (v100 != v96)
                    {
                      v97 = v100;
                      while (*v97 >= 0xFFFFFFFE)
                      {
                        if (++v97 == v96)
                        {
                          v97 = v96;
                          break;
                        }
                      }
                    }
                  }
                  while (v97 != v94);
                }
                if ((v83 & 1) == 0)
                  result = WTF::fastFree((WTF *)(v38 - 2), v93);
                v101 = *v118;
                if (*v118)
                  v102 = *(_DWORD *)(v101 - 12) + 1;
                else
                  v102 = 1;
                a1 = v119;
                *(_DWORD *)(v101 - 12) = v102;
                v103 = *v118;
                if (*v118)
                  v104 = *(_DWORD *)(v103 - 12);
                else
                  v104 = 0;
                v105 = (*(_DWORD *)(v103 - 16) + v104);
                v106 = *(unsigned int *)(v103 - 4);
                if (v106 > 0x400)
                {
                  if (v106 <= 2 * v105)
                  {
LABEL_140:
                    v107 = (_DWORD)v106 << (6 * *(_DWORD *)(v103 - 12) >= (2 * v106));
                    goto LABEL_142;
                  }
                }
                else if (3 * v106 <= 4 * v105)
                {
                  if ((_DWORD)v106)
                    goto LABEL_140;
                  v107 = 128;
LABEL_142:
                  result = (uint64_t)WTF::HashTable<WebCore::ContentExtensions::UniqueNodeIdSet,WebCore::ContentExtensions::UniqueNodeIdSet,WTF::IdentityExtractor,WebCore::ContentExtensions::UniqueNodeIdSetHash,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits>::rehash(v118, v107, v15);
                  v15 = (uint64_t *)result;
                  v103 = *v118;
                  if (*v118)
                    v106 = *(unsigned int *)(v103 - 4);
                  else
                    v106 = 0;
                }
                v31 = v103 + 8 * v106;
                v30 = 1;
                goto LABEL_30;
              }
              v97 = &v94[v95];
            }
            else
            {
              v97 = 0;
              v95 = 0;
            }
            v96 = &v94[v95];
            goto LABEL_119;
          }
          __break(0xC471u);
LABEL_168:
          JUMPOUT(0x1957441D0);
        }
      }
LABEL_145:
      __break(1u);
LABEL_146:
      __break(0xC471u);
      goto LABEL_168;
    }
    v17 = (_DWORD *)*v12;
    if (*v12)
      result = *(v17 - 3);
    else
      result = 0;
    v19 = *v16;
    if ((_DWORD)v19 != (_DWORD)result)
      goto LABEL_18;
    if (!(_DWORD)v19 || v17 == 0)
      break;
    result = 0;
    v21 = v16 + 3;
    v22 = *(v17 - 2);
    while (1)
    {
      v23 = v21[result];
      v24 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
      v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
      v26 = (v25 ^ HIWORD(v25)) & v22;
      v27 = v17[v26];
      if (v27 != v23)
        break;
LABEL_20:
      if (++result == v19)
        goto LABEL_26;
    }
    v28 = 1;
    while (v27 != -1)
    {
      v26 = (v26 + v28) & v22;
      v27 = v17[v26];
      ++v28;
      if (v27 == v23)
        goto LABEL_20;
    }
LABEL_18:
    ++v9;
  }
  if ((_DWORD)v19)
    goto LABEL_18;
LABEL_26:
  if ((v7 & 1) != 0)
    v29 = 0;
  else
    v29 = *(unsigned int *)(v6 - 4);
  v30 = 0;
  v31 = v6 + 8 * v29;
LABEL_30:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v31;
  *(_BYTE *)(a1 + 16) = v30;
  return result;
}

uint64_t *WTF::HashTable<WebCore::ContentExtensions::UniqueNodeIdSet,WebCore::ContentExtensions::UniqueNodeIdSet,WTF::IdentityExtractor,WebCore::ContentExtensions::UniqueNodeIdSetHash,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits,WebCore::ContentExtensions::UniqueNodeIdSetHashHashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = *(_DWORD *)(v14 + 4);
          do
          {
            v19 = v18 & v16;
            v18 = ++v17 + v19;
          }
          while (*(_QWORD *)(v15 + 8 * v19));
          v20 = (uint64_t *)(v15 + 8 * v19);
          WTF::fastFree(0, v10);
          *v20 = *v13;
          *v13 = 0;
          WTF::fastFree(0, v21);
          if (v13 == a3)
            v12 = v20;
        }
        else
        {
          WTF::fastFree(0, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF::StringImpl *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return result;
  v6 = result;
  v7 = *(WTF **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 >= 2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v5));
    v9 = (_QWORD *)result;
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = result;
    if (!(_DWORD)v8)
      goto LABEL_17;
    goto LABEL_13;
  }
  v9 = (_QWORD *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 1;
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = 8 * v8;
    v11 = (uint64_t *)v7;
    do
    {
      *v9 = 0;
      v12 = *v11;
      *v11 = 0;
      *v9 = v12;
      result = *v11;
      if (*v11)
        result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
      ++v9;
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
LABEL_17:
  if ((WTF *)(v6 + 16) != v7 && v7)
  {
    if (*(WTF **)v6 == v7)
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::tryConsumeGroupName(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _BYTE *v8;
  WTF::StringImpl *v9;
  _WORD *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v18;
  int v19;
  _BYTE *v21;
  _WORD *v22;
  __int16 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int16 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;

  v2 = (_BYTE *)result;
  v3 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v3 == *(_DWORD *)(a2 + 24))
    goto LABEL_26;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(v5 + v3);
  *(_DWORD *)(a2 + 28) = v3 + 1;
  if (v6 == 92)
    v7 = JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::UnicodeParseContext)1>(a2);
  else
    v7 = *(unsigned __int8 *)(v5 + v3);
  if (v7 <= 0x7F && ((v7 | 0x20) - 97 < 0x1A || v7 == 36 || v7 == 95))
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 1;
LABEL_10:
    v8 = (_BYTE *)MEMORY[0x19AEA4824](&v27);
    if (v8)
      *v8 = v7;
    goto LABEL_18;
  }
  result = u_charType(v7);
  if (((1 << result) & 0x3E) == 0)
  {
LABEL_25:
    *(_DWORD *)(a2 + 28) = v3;
LABEL_26:
    *v2 = 0;
    v2[8] = 0;
    return result;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  if (v7 <= 0xFF)
    goto LABEL_10;
  v10 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v27);
  if (v10)
  {
    if (HIWORD(v7))
    {
      v26 = v7 & 0x3FF | 0xDC00;
      v7 = (v7 >> 10) - 10304;
      v10[1] = v26;
    }
    *v10 = v7;
  }
LABEL_18:
  v11 = *(_DWORD *)(a2 + 28);
  if (v11 == *(_DWORD *)(a2 + 24))
  {
LABEL_19:
    v12 = v28;
    v28 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_25;
  }
  while (1)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(unsigned __int8 *)(v13 + v11);
    *(_DWORD *)(a2 + 28) = v11 + 1;
    v15 = v14 == 92
        ? JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::UnicodeParseContext)1>(a2)
        : *(unsigned __int8 *)(v13 + v11);
    if (v15 == 62)
      break;
    if (v15 > 0x7F || (v15 | 0x20) - 97 >= 0x1A && v15 != 36 && v15 != 95)
    {
      v16 = (1 << u_charType(v15)) & 0x40037E;
      if (v15 >> 1 != 4102 && v16 == 0)
        goto LABEL_19;
    }
    v18 = v28;
    if (v28 || (v18 = v27) != 0)
    {
      v19 = *((_DWORD *)v18 + 4) & 4;
      if (v15 > 0xFF || v19 == 0)
      {
LABEL_49:
        v22 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v27);
        if (v22)
        {
          if (HIWORD(v15))
          {
            v23 = v15 & 0x3FF | 0xDC00;
            v15 = (v15 >> 10) - 10304;
            v22[1] = v23;
          }
          *v22 = v15;
        }
        goto LABEL_53;
      }
    }
    else if (v15 > 0xFF)
    {
      goto LABEL_49;
    }
    v21 = (_BYTE *)MEMORY[0x19AEA4824](&v27);
    if (v21)
      *v21 = v15;
LABEL_53:
    v11 = *(_DWORD *)(a2 + 28);
    if (v11 == *(_DWORD *)(a2 + 24))
      goto LABEL_19;
  }
  v24 = v27;
  if (v27
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v27),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v27),
        (v24 = v27) != 0))
  {
    *(_DWORD *)v24 += 2;
  }
  *(_QWORD *)v2 = v24;
  v2[8] = 1;
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v9);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::Deque<WebCore::ContentExtensions::Term,0ul>::append(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  WTF *v37;
  char *v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  WTF **v48;
  __int128 v49;
  WTF *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v4 = a1[1];
  if (*a1)
  {
    if (v4 + 1 != *a1)
      goto LABEL_47;
    LODWORD(v5) = *((_DWORD *)a1 + 6);
  }
  else
  {
    v5 = *((unsigned int *)a1 + 6);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_47;
    }
    else if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_47;
    }
  }
  v6 = v5;
  v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x7FFFFFF)
  {
    __break(0xC471u);
    return;
  }
  v8 = (WTF *)a1[2];
  v9 = v7 + 1;
  v10 = WTF::fastMalloc((WTF *)(32 * (v7 + 1)));
  *((_DWORD *)a1 + 6) = v9;
  a1[2] = v10;
  v11 = *a1;
  v12 = a1[1];
  v13 = (char *)v8 + 32 * v12;
  if (*a1 <= v12)
  {
    if (*a1 != v12)
    {
      v36 = 32 * v11;
      v37 = v8;
      do
      {
        v38 = (char *)v37 + v36;
        v39 = v10 + v36;
        v40 = *((unsigned __int8 *)v37 + v36);
        *(_BYTE *)v39 = v40;
        *(_BYTE *)(v39 + 1) = *((_BYTE *)v37 + v36 + 1);
        *(_BYTE *)(v10 + v36 + 8) = 0;
        v41 = (_QWORD *)(v10 + v36 + 8);
        if (v40 == 2)
        {
          *v41 = 0;
          *(_QWORD *)(v10 + v36 + 16) = 0;
          v43 = *((_QWORD *)v38 + 1);
          *((_QWORD *)v38 + 1) = 0;
          *v41 = v43;
          v44 = *((_DWORD *)v38 + 4);
          *((_DWORD *)v38 + 4) = 0;
          *(_DWORD *)(v39 + 16) = v44;
          v45 = *((_DWORD *)v38 + 5);
          *((_DWORD *)v38 + 5) = 0;
          *(_DWORD *)(v39 + 20) = v45;
        }
        else if (v40 == 1)
        {
          v42 = *(_OWORD *)((char *)v37 + v36 + 8);
          *(_QWORD *)(v10 + v36 + 24) = *(_QWORD *)((char *)v37 + v36 + 24);
          *(_OWORD *)v41 = v42;
        }
        if (*v38 == 2)
          WebCore::ContentExtensions::Term::Group::~Group((WTF **)((char *)v37 + v36 + 8), a2);
        *v38 = 0;
        v37 = (WTF *)((char *)v37 + 32);
        v10 += 32;
      }
      while (v38 + 32 != v13);
    }
  }
  else
  {
    if (v12)
    {
      v14 = 0;
      do
      {
        v15 = (char *)v8 + v14;
        v16 = v10 + v14;
        v17 = *((unsigned __int8 *)v8 + v14);
        *(_BYTE *)v16 = v17;
        *(_BYTE *)(v16 + 1) = *((_BYTE *)v8 + v14 + 1);
        *(_BYTE *)(v10 + v14 + 8) = 0;
        v18 = (_QWORD *)(v10 + v14 + 8);
        if (v17 == 2)
        {
          *v18 = 0;
          *(_QWORD *)(v10 + v14 + 16) = 0;
          v20 = *((_QWORD *)v15 + 1);
          *((_QWORD *)v15 + 1) = 0;
          *v18 = v20;
          v21 = *((_DWORD *)v15 + 4);
          *((_DWORD *)v15 + 4) = 0;
          *(_DWORD *)(v16 + 16) = v21;
          v22 = *((_DWORD *)v15 + 5);
          *((_DWORD *)v15 + 5) = 0;
          *(_DWORD *)(v16 + 20) = v22;
        }
        else if (v17 == 1)
        {
          v19 = *(_OWORD *)((char *)v8 + v14 + 8);
          *(_QWORD *)(v10 + v14 + 24) = *(_QWORD *)((char *)v8 + v14 + 24);
          *(_OWORD *)v18 = v19;
        }
        if (*v15 == 2)
          WebCore::ContentExtensions::Term::Group::~Group((WTF **)((char *)v8 + v14 + 8), a2);
        *v15 = 0;
        v14 += 32;
      }
      while (v15 + 32 != v13);
      v9 = *((_DWORD *)a1 + 6);
      v11 = *a1;
      v10 = a1[2];
    }
    v23 = v11 - v6 + v9;
    if (v11 != v6)
    {
      v24 = 0;
      v25 = (char *)v8 + 32 * v6;
      v26 = v10 + 32 * v23;
      v27 = (char *)v8 + 32 * v11;
      do
      {
        v28 = &v27[v24];
        v29 = v26 + v24;
        v30 = v27[v24];
        *(_BYTE *)v29 = v30;
        *(_BYTE *)(v29 + 1) = v27[v24 + 1];
        *(_BYTE *)(v26 + v24 + 8) = 0;
        v31 = (_QWORD *)(v26 + v24 + 8);
        if (v30 == 2)
        {
          *v31 = 0;
          *(_QWORD *)(v26 + v24 + 16) = 0;
          v33 = *((_QWORD *)v28 + 1);
          *((_QWORD *)v28 + 1) = 0;
          *v31 = v33;
          v34 = *((_DWORD *)v28 + 4);
          *((_DWORD *)v28 + 4) = 0;
          *(_DWORD *)(v29 + 16) = v34;
          v35 = *((_DWORD *)v28 + 5);
          *((_DWORD *)v28 + 5) = 0;
          *(_DWORD *)(v29 + 20) = v35;
        }
        else if (v30 == 1)
        {
          v32 = *(_OWORD *)&v27[v24 + 8];
          *(_QWORD *)(v26 + v24 + 24) = *(_QWORD *)&v27[v24 + 24];
          *(_OWORD *)v31 = v32;
        }
        if (*v28 == 2)
          WebCore::ContentExtensions::Term::Group::~Group((WTF **)&v27[v24 + 8], a2);
        *v28 = 0;
        v24 += 32;
      }
      while (v28 + 32 != v25);
    }
    *a1 = v23;
  }
  if (v8)
  {
    if ((WTF *)a1[2] == v8)
    {
      a1[2] = 0;
      *((_DWORD *)a1 + 6) = 0;
    }
    WTF::fastFree(v8, a2);
  }
  v4 = a1[1];
LABEL_47:
  v46 = a1[2] + 32 * v4;
  v47 = *(unsigned __int8 *)a2;
  *(_BYTE *)v46 = v47;
  *(_BYTE *)(v46 + 1) = *((_BYTE *)a2 + 1);
  *(_BYTE *)(v46 + 8) = 0;
  v48 = (WTF **)(v46 + 8);
  if (v47 == 2)
  {
    *v48 = 0;
    *(_QWORD *)(v46 + 16) = 0;
    v50 = a2[1];
    a2[1] = 0;
    *v48 = v50;
    v51 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(v46 + 16) = v51;
    v52 = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(v46 + 20) = v52;
  }
  else if (v47 == 1)
  {
    v49 = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(v46 + 24) = a2[3];
    *(_OWORD *)v48 = v49;
  }
  if (*(_BYTE *)a2 == 2)
    WebCore::ContentExtensions::Term::Group::~Group(a2 + 1, a2);
  *(_BYTE *)a2 = 0;
  v53 = a1[1];
  if (v53 == *((unsigned int *)a1 + 6) - 1)
    v54 = 0;
  else
    v54 = v53 + 1;
  a1[1] = v54;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::UnicodeParseContext)1>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned __int8 v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  unsigned int v28;
  unsigned __int8 v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int8 v33;
  int v34;
  char v35;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  int v54;
  unsigned int v55;
  unsigned __int8 v56;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    goto LABEL_43;
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v3 + v1) != 117)
    goto LABEL_43;
  v4 = (v1 + 1);
  *(_DWORD *)(a1 + 28) = v4;
  if ((_DWORD)v4 == v2)
    goto LABEL_43;
  v5 = *(unsigned __int8 *)(v3 + v4);
  if (v5 == 123)
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 28) = v1 + 2;
    v7 = v1 + 3;
    v8 = -v2;
    while (v8 + v7 != 1)
    {
      v9 = v7 - 1;
      v10 = *(unsigned __int8 *)(v3 + v9);
      v11 = v10 - 48;
      v12 = (v10 | 0x20) - 97;
      if (v11 >= 0xA && v12 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v7;
      v14 = *(unsigned __int8 *)(v3 + v9);
      v15 = v14 >= 0x41 ? (v14 + 9) & 0xF : v14 - 48;
      v6 = v15 | (16 * v6);
      if (v6 >= 0x110000 || !(v8 + v7))
        break;
      v16 = *(unsigned __int8 *)(v3 + v7++);
      if (v16 == 125)
      {
        *(_DWORD *)(a1 + 28) = v7;
        return v6;
      }
    }
    v35 = 19;
    goto LABEL_44;
  }
  v17 = v5 - 48;
  v18 = (v5 | 0x20) - 97;
  if (v17 >= 0xA && v18 > 5)
    goto LABEL_42;
  v20 = (v1 + 2);
  *(_DWORD *)(a1 + 28) = v20;
  v21 = *(unsigned __int8 *)(v3 + v4);
  v22 = v21 >= 0x41 ? (v21 + 9) & 0xF : v21 - 48;
  if ((_DWORD)v20 == v2)
    goto LABEL_42;
  v23 = *(unsigned __int8 *)(v3 + v20);
  v24 = v23 - 48;
  v25 = (v23 | 0x20) - 97;
  if (v24 >= 0xA && v25 > 5)
    goto LABEL_42;
  v27 = (v1 + 3);
  *(_DWORD *)(a1 + 28) = v27;
  v28 = *(unsigned __int8 *)(v3 + v20);
  v29 = v28 >= 0x41 ? (v28 + 9) & 0xF : v28 - 48;
  if ((_DWORD)v27 == v2
    || (v30 = *(unsigned __int8 *)(v3 + v27), (v30 - 48) >= 0xA) && (v30 | 0x20u) - 97 > 5
    || ((v31 = (v1 + 4), *(_DWORD *)(a1 + 28) = v31, v32 = *(unsigned __int8 *)(v3 + v27), v32 >= 0x41)
      ? (v33 = (v32 + 9) & 0xF)
      : (v33 = v32 - 48),
        (_DWORD)v31 == v2
     || (v34 = *(unsigned __int8 *)(v3 + v31), (v34 - 48) >= 0xA) && (v34 | 0x20u) - 97 >= 6))
  {
LABEL_42:
    *(_DWORD *)(a1 + 28) = v4;
LABEL_43:
    v35 = 18;
LABEL_44:
    *(_BYTE *)(a1 + 8) = v35;
    return 0xFFFFFFFFLL;
  }
  v37 = (16 * v29) | (v22 << 8) | v33;
  v38 = v1 + 5;
  *(_DWORD *)(a1 + 28) = v1 + 5;
  v39 = *(unsigned __int8 *)(v3 + v31);
  if (v39 >= 0x41)
    v40 = (v39 + 9) & 0xF;
  else
    v40 = v39 - 48;
  v6 = v40 | (16 * v37);
  if (v2 - v38 >= 6 && (v37 & 0xFFC0) == 0xD80 && *(_BYTE *)(v3 + v38) == 92)
  {
    *(_DWORD *)(a1 + 28) = v1 + 6;
    if ((_DWORD)v1 + 6 == v2)
      goto LABEL_81;
    if (*(_BYTE *)(v3 + (v1 + 6)) != 117)
      goto LABEL_81;
    v41 = (v1 + 7);
    *(_DWORD *)(a1 + 28) = v41;
    if ((_DWORD)v41 == v2)
      goto LABEL_81;
    v42 = *(unsigned __int8 *)(v3 + v41);
    if ((v42 - 48) >= 0xA && (v42 | 0x20u) - 97 > 5)
      goto LABEL_81;
    v43 = (v1 + 8);
    *(_DWORD *)(a1 + 28) = v43;
    v44 = *(unsigned __int8 *)(v3 + v41);
    v45 = v44 >= 0x41 ? (v44 + 9) & 0xF : v44 - 48;
    if ((_DWORD)v43 == v2)
      goto LABEL_81;
    v46 = *(unsigned __int8 *)(v3 + v43);
    if ((v46 - 48) >= 0xA && (v46 | 0x20u) - 97 > 5)
      goto LABEL_81;
    v47 = (v1 + 9);
    *(_DWORD *)(a1 + 28) = v47;
    v48 = *(unsigned __int8 *)(v3 + v43);
    v49 = v48 >= 0x41 ? (v48 + 9) & 0xF : v48 - 48;
    if ((_DWORD)v47 == v2)
      goto LABEL_81;
    v50 = *(unsigned __int8 *)(v3 + v47);
    if ((v50 - 48) >= 0xA && (v50 | 0x20u) - 97 > 5)
      goto LABEL_81;
    v51 = (v1 + 10);
    *(_DWORD *)(a1 + 28) = v51;
    v52 = *(unsigned __int8 *)(v3 + v47);
    v53 = v52 >= 0x41 ? (v52 + 9) & 0xF : v52 - 48;
    if ((_DWORD)v51 == v2
      || (v54 = *(unsigned __int8 *)(v3 + v51), (v54 - 48) >= 0xA) && (v54 | 0x20u) - 97 > 5
      || ((*(_DWORD *)(a1 + 28) = v1 + 11, v55 = *(unsigned __int8 *)(v3 + v51), v55 >= 0x41)
        ? (v56 = (v55 + 9) & 0xF)
        : (v56 = v55 - 48),
          ((16 * v49) & 0xFFC0 | (unsigned __int16)(v45 << 8) | v53 & 0xC0) != 0xDC0))
    {
LABEL_81:
      *(_DWORD *)(a1 + 28) = v38;
    }
    else
    {
      return (v56 | (16 * ((16 * v49) | (v45 << 8) | v53))) + ((_DWORD)v6 << 10) - 56613888;
    }
  }
  return v6;
}

char *WTF::Vector<JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::ParenthesesType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[v3 - (_QWORD)v5];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[v3 - (_QWORD)v5];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195749814);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)v15);
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

unint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF::StringImpl *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

double WebCore::ContentExtensions::PatternParser::atomParenthesesEnd(WTF **this, void *a2)
{
  void *v3;
  __int128 v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  char *v8;
  WTF *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  __int128 v20;
  WTF *v21;

  if (!*((_DWORD *)this + 23))
  {
    WebCore::ContentExtensions::PatternParser::sinkFloatingTermIfNecessary((WebCore::ContentExtensions::PatternParser *)this, a2);
    v6 = this[1];
    v5 = this[2];
    if (v6 == v5)
      goto LABEL_21;
    v7 = this[2];
    if (!v5)
      v7 = (WTF *)*((unsigned int *)this + 8);
    v8 = (char *)v7 - 1;
    v9 = this[3];
    v10 = (unsigned __int8 *)v9 + 32 * (_QWORD)v8;
    v11 = *v10;
    v12 = v10[1];
    LOBYTE(v20) = 0;
    if (v11 == 2)
    {
      v14 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)&v20 = v14;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)&v20 + 1) = v15;
      WebCore::ContentExtensions::Term::Group::~Group((WTF **)v10 + 1, v3);
      v6 = this[1];
      v5 = this[2];
    }
    else if (v11 == 1)
    {
      v13 = (char *)v9 + 32 * (_QWORD)v8;
      v4 = *(_OWORD *)(v13 + 8);
      v21 = (WTF *)*((_QWORD *)v13 + 3);
      v20 = v4;
    }
    *v10 = 0;
    if (v6 == v5)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x195749A0CLL);
    }
    if (!v5)
      v5 = (WTF *)*((unsigned int *)this + 8);
    v16 = (WTF *)((char *)v5 - 1);
    this[2] = v16;
    v17 = (uint64_t)this[3] + 32 * (_QWORD)v16;
    if (*(_BYTE *)v17 == 2)
      WebCore::ContentExtensions::Term::Group::~Group((WTF **)(v17 + 8), v3);
    *(_BYTE *)v17 = 0;
    if (*((_BYTE *)this + 56) == 2)
      WebCore::ContentExtensions::Term::Group::~Group(this + 8, v3);
    *((_BYTE *)this + 64) = 0;
    *((_BYTE *)this + 56) = v11;
    *((_BYTE *)this + 57) = v12;
    if (v11 == 2)
    {
      this[8] = (WTF *)v20;
      v18 = (WTF *)*((_QWORD *)&v20 + 1);
      v20 = 0uLL;
      this[9] = v18;
      WebCore::ContentExtensions::Term::Group::~Group((WTF **)&v20, v3);
    }
    else if (v11 == 1)
    {
      *(_QWORD *)&v4 = v20;
      *((_OWORD *)this + 4) = v20;
      this[10] = v21;
    }
  }
  return *(double *)&v4;
}

uint64_t WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(uint64_t result, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (!*(_DWORD *)(result + 92) && *(_BYTE *)(result + 56) == 1)
  {
    if (*(_BYTE *)result || (a2 | 0x20) - 97 >= 0x1A)
    {
      if (a2 >= 0x80)
      {
        __break(0xC471u);
        JUMPOUT(0x195749B18);
      }
    }
    else
    {
      if (a2 - 97 >= 0x1A)
        v2 = 0xFFFF;
      else
        v2 = 65503;
      v3 = v2 & a2;
      if (v3 >= 0x80
        || (*(_QWORD *)(result + 8 * (v3 >> 6) + 72) |= 1 << v3, a2 |= 32 * (a2 - 65 < 0x1A), a2 >= 0x80))
      {
        __break(0xC471u);
        JUMPOUT(0x195749AD0);
      }
    }
    *(_QWORD *)(result + 8 * (a2 >> 6) + 72) |= 1 << a2;
  }
  return result;
}

char *WTF::Vector<JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::ClassSetParserDelegate::NestingState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  __int16 v26;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 3 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + v3 - (_QWORD)v5;
      }
      if (v9 < 0x55555556)
      {
        v10 = 3 * v9;
        v11 = WTF::fastMalloc((WTF *)(3 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10 / 3;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_WORD *)((char *)v5 + v13);
          *(_BYTE *)(v14 + 2) = *((_BYTE *)v5 + v13 + 2);
          *(_WORD *)v14 = v15;
          v13 += 3;
        }
        while (3 * v6 != v13);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + v3 - (_QWORD)v5;
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x195749D0CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v19 = a2;
  if (v19 > v17)
  {
    if (v19 >= 0x55555556)
      goto LABEL_33;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = 3 * v19;
    v22 = WTF::fastMalloc((WTF *)(3 * v19));
    *(_DWORD *)(a1 + 8) = v21 / 3;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v20)
    {
      v24 = 3 * v20;
      v25 = v5;
      do
      {
        v26 = *(_WORD *)v25;
        *(_BYTE *)(v22 + 2) = *((_BYTE *)v25 + 2);
        *(_WORD *)v22 = v26;
        v22 += 3;
        v25 = (WTF *)((char *)v25 + 3);
        v24 -= 3;
      }
      while (v24);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::ClassSetParserDelegate::atomPatternCharacter(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(result + 20);
  v3 = *(unsigned __int8 *)(result + 23);
  *(_BYTE *)(result + 23) = 0;
  v5 = result;
  switch(*(_DWORD *)(result + 16))
  {
    case 0:
    case 7:
      goto LABEL_15;
    case 1:
      if (v2 >= 2)
        goto LABEL_22;
      if (a2 != 45)
        goto LABEL_24;
      v6 = 2;
      goto LABEL_27;
    case 2:
      if (*(_DWORD *)(result + 24) > a2)
      {
        v7 = *(char **)(result + 8);
        v8 = 14;
        goto LABEL_23;
      }
      result = WebCore::ContentExtensions::PatternParser::atomCharacterClassRange(*(_QWORD *)result, (unsigned __int16)*(_DWORD *)(result + 24), (unsigned __int16)a2);
      if (!*(_BYTE *)(v5 + 20))
        *(_BYTE *)(v5 + 20) = 1;
      v6 = 5;
      goto LABEL_27;
    case 3:
      if (a2 != 45 || v2 > 1)
        goto LABEL_13;
      v9 = *(_QWORD *)result;
      if (!*(_DWORD *)(*(_QWORD *)result + 92) && *(_BYTE *)(v9 + 56) == 1)
        *(_QWORD *)(v9 + 72) |= 0x200000000000uLL;
      v6 = 4;
      goto LABEL_27;
    case 4:
      v7 = *(char **)(result + 8);
      v8 = 15;
      goto LABEL_23;
    case 5:
LABEL_13:
      if (!v2)
        *(_BYTE *)(result + 20) = 1;
LABEL_15:
      if (a2 != 45 || v3)
        goto LABEL_26;
      v7 = *(char **)(result + 8);
      v8 = 31;
      goto LABEL_23;
    case 6:
      if (v2 >= 2)
        **(_BYTE **)(result + 8) = 29;
      if (a2 == 45)
      {
LABEL_22:
        v7 = *(char **)(result + 8);
        v8 = 29;
LABEL_23:
        *v7 = v8;
      }
      else
      {
LABEL_24:
        result = WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(*(_QWORD *)result, *(unsigned __int16 *)(result + 24));
        if (!*(_BYTE *)(v5 + 20))
          *(_BYTE *)(v5 + 20) = 1;
LABEL_26:
        *(_DWORD *)(v5 + 24) = a2;
        v6 = 1;
LABEL_27:
        *(_DWORD *)(v5 + 16) = v6;
      }
      return result;
    default:
      return result;
  }
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::ClassSetParserDelegate::atomBuiltInCharacterClass(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  char *v4;
  char v5;
  unsigned int v6;
  char v7;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 20);
  switch(*(_DWORD *)(result + 16))
  {
    case 0:
    case 3:
    case 7:
      goto LABEL_13;
    case 1:
      if (v2 < 2)
      {
        WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(*(_QWORD *)result, *(unsigned __int16 *)(result + 24));
        v2 = *(unsigned __int8 *)(v1 + 20);
LABEL_4:
        if (!v2)
          *(_BYTE *)(v1 + 20) = 1;
LABEL_13:
        result = JSC::Yarr::characterClassMayContainStrings();
        v6 = *(unsigned __int8 *)(v1 + 20);
        if (v6 >= 2)
        {
          if (v6 != 2)
          {
LABEL_20:
            if (!*(_DWORD *)(*(_QWORD *)v1 + 92))
              *(_DWORD *)(*(_QWORD *)v1 + 92) = 8;
            *(_DWORD *)(v1 + 16) = 3;
            return result;
          }
          if (*(_BYTE *)(v1 + 21))
            v7 = result;
          else
            v7 = 0;
        }
        else
        {
          v7 = *(_BYTE *)(v1 + 21) | result;
        }
        *(_BYTE *)(v1 + 21) = v7;
        goto LABEL_20;
      }
      v4 = *(char **)(result + 8);
      v5 = 29;
LABEL_10:
      *v4 = v5;
      return result;
    case 2:
      result = WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(*(_QWORD *)result, *(unsigned __int16 *)(result + 24));
      v3 = *(_QWORD *)v1;
      if (!*(_DWORD *)(*(_QWORD *)v1 + 92) && *(_BYTE *)(v3 + 56) == 1)
        *(_QWORD *)(v3 + 72) |= 0x200000000000uLL;
      goto LABEL_9;
    case 4:
LABEL_9:
      v4 = *(char **)(v1 + 8);
      v5 = 15;
      goto LABEL_10;
    case 5:
      goto LABEL_4;
    case 6:
      if (v2 >= 2)
        **(_BYTE **)(result + 8) = 29;
      goto LABEL_13;
    default:
      return result;
  }
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::tryConsumeUnicodePropertyExpression(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t matched;
  unint64_t v10;
  char v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v19;
  char v20;
  int v21;
  uint64_t v24;
  WTF::StringImpl *v25;
  _BYTE *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _WORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;

  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == *(_DWORD *)(a1 + 24)
    || (v3 = *(_QWORD *)(a1 + 16), v4 = *(unsigned __int8 *)(v3 + v2), v4 != 61)
    && (v4 != 95 ? (v5 = (v4 - 48) >= 0xA) : (v5 = 0), v5 ? (v6 = (v4 | 0x20u) - 97 >= 0x1A) : (v6 = 0), v6))
  {
    v7 = 0;
    v8 = 0;
    LOBYTE(matched) = 0;
    LODWORD(v10) = 0;
    *(_BYTE *)(a1 + 8) = 25;
    return ((_DWORD)v10 << 8) | v8 & 0xFF00000000 | (v7 << 40) | matched;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 1;
  *(_DWORD *)(a1 + 28) = v2 + 1;
  v11 = *(_BYTE *)(v3 + v2);
  v12 = (_BYTE *)MEMORY[0x19AEA4824](&v36, 1);
  if (v12)
    *v12 = v11;
  v14 = *(_DWORD *)(a1 + 28);
  if (v14 == *(_DWORD *)(a1 + 24))
  {
    v15 = 0;
LABEL_16:
    v7 = 0;
    LOBYTE(matched) = 0;
    LODWORD(v10) = 0;
    goto LABEL_17;
  }
  v19 = 0;
  v20 = 0;
  v15 = 0;
  while (1)
  {
    v21 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v14);
    *(_DWORD *)(a1 + 28) = v14 + 1;
    if (v21 == 61)
    {
      if ((v20 & 1) != 0)
      {
        ++v19;
        v20 = 1;
      }
      else
      {
        v27 = v36;
        if (v36
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v36),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v36),
              (v27 = v36) != 0))
        {
          *(_DWORD *)v27 += 2;
        }
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
        v28 = v36;
        v36 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v13);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v37;
        v37 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v13);
          else
            *(_DWORD *)v29 -= 2;
        }
        v38 = 0;
        v20 = 1;
        v15 = v27;
      }
      goto LABEL_64;
    }
    if (v21 == 125)
      break;
    if (v21 != 95 && (v21 - 48) >= 0xA && (v21 | 0x20u) - 97 >= 0x1A)
    {
      ++v19;
    }
    else
    {
      if (v38 == -1)
        v24 = 0xFFFFFFFFLL;
      else
        v24 = (v38 + 1);
      v25 = v37;
      if ((v37 || (v25 = v36) != 0) && (*((_BYTE *)v25 + 16) & 4) == 0)
      {
        v30 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v36);
        if (v30)
          *v30 = v21;
      }
      else
      {
        v26 = (_BYTE *)MEMORY[0x19AEA4824](&v36, v24);
        if (v26)
          *v26 = v21;
      }
    }
LABEL_64:
    v14 = *(_DWORD *)(a1 + 28);
    if (v14 == *(_DWORD *)(a1 + 24))
      goto LABEL_16;
  }
  if (v19)
    goto LABEL_16;
  if ((v20 & 1) != 0)
  {
    if (v15)
      *(_DWORD *)v15 += 2;
    v31 = v36;
    if (v36
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v36),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v36),
          (v31 = v36) != 0))
    {
      *(_DWORD *)v31 += 2;
    }
    v35 = v31;
    matched = JSC::Yarr::unicodeMatchPropertyValue();
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v13);
      else
        *(_DWORD *)v35 -= 2;
    }
    v10 = matched >> 8;
    v8 = matched & 0xFFFFFFFF00000000;
    v7 = matched >> 40;
    v32 = v15;
    if (!v15)
      goto LABEL_90;
LABEL_88:
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v13);
    else
      *(_DWORD *)v32 -= 2;
    goto LABEL_90;
  }
  v33 = v36;
  if (v36
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v36),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v36),
        (v33 = v36) != 0))
  {
    *(_DWORD *)v33 += 2;
  }
  v34 = v33;
  matched = JSC::Yarr::unicodeMatchProperty();
  v10 = matched >> 8;
  v8 = matched & 0xFFFFFFFF00000000;
  v7 = matched >> 40;
  v32 = v34;
  if (v34)
    goto LABEL_88;
LABEL_90:
  if ((matched & 0xFF00000000) == 0)
  {
LABEL_17:
    v8 = 0;
    *(_BYTE *)(a1 + 8) = 25;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v37;
  v37 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v36;
  v36 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  return ((_DWORD)v10 << 8) | v8 & 0xFF00000000 | (v7 << 40) | matched;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::UnicodeParseContext)0>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 v34;
  int v35;
  char v36;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 v54;
  int v55;
  unsigned int v56;
  unsigned __int8 v57;

  v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == v3)
    goto LABEL_44;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + v2) != 117)
    goto LABEL_44;
  v5 = (v2 + 1);
  *(_DWORD *)(a1 + 28) = v5;
  if ((_DWORD)v5 == v3)
    goto LABEL_44;
  v6 = *(unsigned __int8 *)(v4 + v5);
  if (v1 <= 1 && v6 == 123)
  {
    LODWORD(v7) = 0;
    *(_DWORD *)(a1 + 28) = v2 + 2;
    v8 = v2 + 3;
    v9 = -v3;
    while (v9 + v8 != 1)
    {
      v10 = v8 - 1;
      v11 = *(unsigned __int8 *)(v4 + v10);
      v12 = v11 - 48;
      v13 = (v11 | 0x20) - 97;
      if (v12 >= 0xA && v13 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v8;
      v15 = *(unsigned __int8 *)(v4 + v10);
      v16 = v15 >= 0x41 ? (v15 + 9) & 0xF : v15 - 48;
      v7 = v16 | (16 * v7);
      if (v7 >= 0x110000 || !(v9 + v8))
        break;
      v17 = *(unsigned __int8 *)(v4 + v8++);
      if (v17 == 125)
      {
        *(_DWORD *)(a1 + 28) = v8;
        return v7;
      }
    }
    v36 = 19;
    goto LABEL_46;
  }
  v18 = v6 - 48;
  v19 = (v6 | 0x20) - 97;
  if (v18 >= 0xA && v19 > 5)
    goto LABEL_43;
  v21 = (v2 + 2);
  *(_DWORD *)(a1 + 28) = v21;
  v22 = *(unsigned __int8 *)(v4 + v5);
  v23 = v22 >= 0x41 ? (v22 + 9) & 0xF : v22 - 48;
  if ((_DWORD)v21 == v3)
    goto LABEL_43;
  v24 = *(unsigned __int8 *)(v4 + v21);
  v25 = v24 - 48;
  v26 = (v24 | 0x20) - 97;
  if (v25 >= 0xA && v26 > 5)
    goto LABEL_43;
  v28 = (v2 + 3);
  *(_DWORD *)(a1 + 28) = v28;
  v29 = *(unsigned __int8 *)(v4 + v21);
  v30 = v29 >= 0x41 ? (v29 + 9) & 0xF : v29 - 48;
  if ((_DWORD)v28 == v3
    || (v31 = *(unsigned __int8 *)(v4 + v28), (v31 - 48) >= 0xA) && (v31 | 0x20u) - 97 > 5
    || ((v32 = (v2 + 4), *(_DWORD *)(a1 + 28) = v32, v33 = *(unsigned __int8 *)(v4 + v28), v33 >= 0x41)
      ? (v34 = (v33 + 9) & 0xF)
      : (v34 = v33 - 48),
        (_DWORD)v32 == v3
     || (v35 = *(unsigned __int8 *)(v4 + v32), (v35 - 48) >= 0xA) && (v35 | 0x20u) - 97 >= 6))
  {
LABEL_43:
    *(_DWORD *)(a1 + 28) = v5;
LABEL_44:
    if (v1 > 1)
      return 0xFFFFFFFFLL;
    v36 = 18;
LABEL_46:
    *(_BYTE *)(a1 + 8) = v36;
    return 0xFFFFFFFFLL;
  }
  v38 = (16 * v30) | (v23 << 8) | v34;
  v39 = v2 + 5;
  *(_DWORD *)(a1 + 28) = v2 + 5;
  v40 = *(unsigned __int8 *)(v4 + v32);
  if (v40 >= 0x41)
    v41 = (v40 + 9) & 0xF;
  else
    v41 = v40 - 48;
  v7 = v41 | (16 * v38);
  if (v3 - v39 >= 6 && (v38 & 0xFFC0) == 0xD80 && v1 <= 1 && *(_BYTE *)(v4 + v39) == 92)
  {
    *(_DWORD *)(a1 + 28) = v2 + 6;
    if ((_DWORD)v2 + 6 == v3)
      goto LABEL_85;
    if (*(_BYTE *)(v4 + (v2 + 6)) != 117)
      goto LABEL_85;
    v42 = (v2 + 7);
    *(_DWORD *)(a1 + 28) = v42;
    if ((_DWORD)v42 == v3)
      goto LABEL_85;
    v43 = *(unsigned __int8 *)(v4 + v42);
    if ((v43 - 48) >= 0xA && (v43 | 0x20u) - 97 > 5)
      goto LABEL_85;
    v44 = (v2 + 8);
    *(_DWORD *)(a1 + 28) = v44;
    v45 = *(unsigned __int8 *)(v4 + v42);
    v46 = v45 >= 0x41 ? (v45 + 9) & 0xF : v45 - 48;
    if ((_DWORD)v44 == v3)
      goto LABEL_85;
    v47 = *(unsigned __int8 *)(v4 + v44);
    if ((v47 - 48) >= 0xA && (v47 | 0x20u) - 97 > 5)
      goto LABEL_85;
    v48 = (v2 + 9);
    *(_DWORD *)(a1 + 28) = v48;
    v49 = *(unsigned __int8 *)(v4 + v44);
    v50 = v49 >= 0x41 ? (v49 + 9) & 0xF : v49 - 48;
    if ((_DWORD)v48 == v3)
      goto LABEL_85;
    v51 = *(unsigned __int8 *)(v4 + v48);
    if ((v51 - 48) >= 0xA && (v51 | 0x20u) - 97 > 5)
      goto LABEL_85;
    v52 = (v2 + 10);
    *(_DWORD *)(a1 + 28) = v52;
    v53 = *(unsigned __int8 *)(v4 + v48);
    v54 = v53 >= 0x41 ? (v53 + 9) & 0xF : v53 - 48;
    if ((_DWORD)v52 == v3
      || (v55 = *(unsigned __int8 *)(v4 + v52), (v55 - 48) >= 0xA) && (v55 | 0x20u) - 97 > 5
      || ((*(_DWORD *)(a1 + 28) = v2 + 11, v56 = *(unsigned __int8 *)(v4 + v52), v56 >= 0x41)
        ? (v57 = (v56 + 9) & 0xF)
        : (v57 = v56 - 48),
          ((16 * v50) & 0xFFC0 | (unsigned __int16)(v46 << 8) | v54 & 0xC0) != 0xDC0))
    {
LABEL_85:
      *(_DWORD *)(a1 + 28) = v39;
    }
    else
    {
      return (v57 | (16 * ((16 * v50) | (v46 << 8) | v54))) + ((_DWORD)v7 << 10) - 56613888;
    }
  }
  return v7;
}

uint64_t WebCore::ContentExtensions::PatternParser::atomCharacterClassRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;
  unsigned int v7;

  if (*(_DWORD *)(result + 92))
    v3 = 1;
  else
    v3 = a2 > a3;
  if (!v3 && *(_BYTE *)(result + 56) == 1)
  {
    v4 = result + 72;
    if (*(_BYTE *)result)
    {
      while ((a2 & 0xFF80) == 0)
      {
        *(_QWORD *)(v4 + 8 * ((unsigned __int16)a2 >> 6)) |= 1 << a2;
        if (a3 + 1 == ++a2)
          return result;
      }
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x19574A868);
    }
    do
    {
      v5 = (unsigned __int16)a2;
      if (((unsigned __int16)a2 | 0x20u) - 97 >= 0x1A)
      {
        if ((unsigned __int16)a2 > 0x7Fu)
          goto LABEL_18;
      }
      else
      {
        if ((unsigned __int16)a2 - 97 >= 0x1A)
          v6 = -1;
        else
          v6 = -33;
        v7 = (unsigned __int16)(v6 & a2);
        if (v7 > 0x7F)
        {
          __break(0xC471u);
          JUMPOUT(0x19574A888);
        }
        *(_QWORD *)(v4 + 8 * (v7 >> 6)) |= 1 << v7;
        v5 = (unsigned __int16)a2 | (32 * ((unsigned __int16)a2 - 65 < 0x1A));
        if (v5 > 0x7F)
          goto LABEL_18;
      }
      *(_QWORD *)(v4 + 8 * (v5 >> 6)) |= 1 << v5;
      ++a2;
    }
    while (a3 + 1 != a2);
  }
  return result;
}

unsigned int *JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,unsigned char>::ClassStringDisjunctionParserDelegate::newAlternative(unsigned int *result, void *a2)
{
  unsigned int *v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  const void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result;
  v3 = (const void **)(result + 6);
  v4 = result[13];
  if ((_DWORD)v4 != result[12])
  {
    v6 = result + 9;
    v10 = result[9];
    v11 = *((_QWORD *)result + 5) + 16 * v4;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 12) = v10;
    if (!(_DWORD)v10)
      goto LABEL_9;
    if (!(v10 >> 30))
    {
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
      *(_DWORD *)(v11 + 8) = v10;
      *(_QWORD *)v11 = v9;
      v8 = v3;
      goto LABEL_8;
    }
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x19574A9C8);
  }
  result = (unsigned int *)WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 10, v4 + 1, (unint64_t)v3);
  v5 = *((_QWORD *)v2 + 5) + 16 * v2[13];
  v6 = result + 3;
  v7 = result[3];
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 12) = v7;
  if (!(_DWORD)v7)
    goto LABEL_9;
  if (v7 >> 30)
    goto LABEL_15;
  v8 = (const void **)result;
  v9 = (void *)WTF::fastMalloc((WTF *)(4 * v7));
  *(_DWORD *)(v5 + 8) = v7;
  *(_QWORD *)v5 = v9;
LABEL_8:
  result = (unsigned int *)memcpy(v9, *v8, 4 * *v6);
LABEL_9:
  ++v2[13];
  if (v2[8])
  {
    if (v2[9])
      v2[9] = 0;
    result = (unsigned int *)*v3;
    if (*v3)
    {
      *((_QWORD *)v2 + 3) = 0;
      v2[8] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Vector<char32_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WebCore::ContentExtensions::PatternParser::resetForReparsing(WebCore::ContentExtensions::PatternParser *this)
{
  __break(0xC471u);
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::tryConsumeGroupName(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v10;
  WTF::StringImpl *v11;
  int v12;
  _WORD *v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  WTF::StringImpl *v23;
  int v24;
  _BYTE *v26;
  _WORD *v27;
  __int16 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int16 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;

  v2 = (_BYTE *)result;
  v3 = *(_DWORD *)(a2 + 24);
  v4 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v4 == v3)
    goto LABEL_32;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int16 *)(v6 + 2 * v4);
  v8 = v4 + 1;
  *(_DWORD *)(a2 + 28) = v4 + 1;
  if (v7 == 92)
  {
    v7 = JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::UnicodeParseContext)1>(a2);
  }
  else if (v8 != v3 && (v7 & 0xFC00) == 55296)
  {
    *(_DWORD *)(a2 + 28) = v4 + 2;
    v12 = *(unsigned __int16 *)(v6 + 2 * v8);
    if ((v12 & 0xFC00) == 0xDC00)
      v7 = v12 + (v7 << 10) - 56613888;
    else
      *(_DWORD *)(a2 + 28) = v8;
    goto LABEL_18;
  }
  if (v7 <= 0x7F && ((v7 | 0x20) - 97 < 0x1A || v7 == 36 || v7 == 95))
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 1;
LABEL_13:
    v10 = (_BYTE *)MEMORY[0x19AEA4824](&v32);
    if (v10)
      *v10 = v7;
    goto LABEL_24;
  }
LABEL_18:
  result = u_charType(v7);
  if (((1 << result) & 0x3E) == 0)
  {
LABEL_31:
    *(_DWORD *)(a2 + 28) = v4;
LABEL_32:
    *v2 = 0;
    v2[8] = 0;
    return result;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  if (v7 <= 0xFF)
    goto LABEL_13;
  v13 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v32);
  if (v13)
  {
    if (HIWORD(v7))
    {
      v31 = v7 & 0x3FF | 0xDC00;
      v7 = (v7 >> 10) - 10304;
      v13[1] = v31;
    }
    *v13 = v7;
  }
LABEL_24:
  v15 = *(_DWORD *)(a2 + 24);
  v14 = *(_DWORD *)(a2 + 28);
  if (v14 == v15)
  {
LABEL_25:
    v16 = v33;
    v33 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = (uint64_t)v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_31;
  }
  while (1)
  {
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(unsigned __int16 *)(v17 + 2 * v14);
    v19 = v14 + 1;
    *(_DWORD *)(a2 + 28) = v14 + 1;
    if (v18 == 92)
      break;
    if (v19 == v15 || (v18 & 0xFC00) != 0xD800)
      goto LABEL_36;
    *(_DWORD *)(a2 + 28) = v14 + 2;
    v20 = *(unsigned __int16 *)(v17 + 2 * v19);
    if ((v20 & 0xFC00) == 0xDC00)
      v18 = (v18 << 10) - 56613888 + v20;
    else
      *(_DWORD *)(a2 + 28) = v19;
LABEL_47:
    v21 = (1 << u_charType(v18)) & 0x40037E;
    if (v18 >> 1 != 4102 && v21 == 0)
      goto LABEL_25;
LABEL_51:
    v23 = v33;
    if (v33 || (v23 = v32) != 0)
    {
      v24 = *((_DWORD *)v23 + 4) & 4;
      if (v18 > 0xFF || v24 == 0)
      {
LABEL_60:
        v27 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v32);
        if (v27)
        {
          if (HIWORD(v18))
          {
            v28 = v18 & 0x3FF | 0xDC00;
            v18 = (v18 >> 10) - 10304;
            v27[1] = v28;
          }
          *v27 = v18;
        }
        goto LABEL_64;
      }
    }
    else if (v18 > 0xFF)
    {
      goto LABEL_60;
    }
    v26 = (_BYTE *)MEMORY[0x19AEA4824](&v32);
    if (v26)
      *v26 = v18;
LABEL_64:
    v15 = *(_DWORD *)(a2 + 24);
    v14 = *(_DWORD *)(a2 + 28);
    if (v14 == v15)
      goto LABEL_25;
  }
  v18 = JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::UnicodeParseContext)1>(a2);
LABEL_36:
  if (v18 != 62)
  {
    if (v18 <= 0x7F && ((v18 | 0x20) - 97 < 0x1A || v18 == 36 || v18 == 95))
      goto LABEL_51;
    goto LABEL_47;
  }
  v29 = v32;
  if (v32
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v32),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v32),
        (v29 = v32) != 0))
  {
    *(_DWORD *)v29 += 2;
  }
  *(_QWORD *)v2 = v29;
  v2[8] = 1;
  v30 = v33;
  v33 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v11);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = (uint64_t)v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::UnicodeParseContext)1>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned __int8 v12;
  int v13;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1 == v2)
    goto LABEL_4;
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)(v3 + 2 * v1) != 117)
    goto LABEL_4;
  *(_DWORD *)(a1 + 28) = v1 + 1;
  if ((_DWORD)v1 + 1 == v2)
    goto LABEL_4;
  v7 = *(unsigned __int16 *)(v3 + 2 * (v1 + 1));
  if (v7 == 123)
  {
    LODWORD(v5) = 0;
    *(_DWORD *)(a1 + 28) = v1 + 2;
    v8 = v1 + 3;
    v9 = -v2;
    while (v9 + v8 != 1)
    {
      v10 = *(unsigned __int16 *)(v3 + 2 * (v8 - 1));
      if (v10 - 48 >= 0xA && (v10 | 0x20) - 97 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v8;
      v12 = v10 >= 0x41 ? (v10 + 9) & 0xF : v10 - 48;
      v5 = v12 | (16 * v5);
      if (v5 >= 0x110000 || !(v9 + v8))
        break;
      v13 = *(unsigned __int16 *)(v3 + 2 * v8++);
      if (v13 == 125)
      {
        *(_DWORD *)(a1 + 28) = v8;
        return v5;
      }
    }
    v4 = 19;
    goto LABEL_5;
  }
  if (v7 - 48 >= 0xA && (v7 | 0x20) - 97 > 5)
    goto LABEL_4;
  v15 = v1 + 2;
  v16 = v7 >= 0x41 ? ((_BYTE)v7 + 9) & 0xF : v7 + 208;
  if (v15 == v2)
    goto LABEL_4;
  v17 = *(unsigned __int16 *)(v3 + 2 * v15);
  if (v17 - 48 >= 0xA && (v17 | 0x20) - 97 > 5)
    goto LABEL_4;
  v19 = v1 + 3;
  v20 = v17 >= 0x41 ? (v17 + 9) & 0xF : v17 - 48;
  if (v19 == v2)
    goto LABEL_4;
  v21 = *(unsigned __int16 *)(v3 + 2 * v19);
  if (v21 - 48 >= 0xA && (v21 | 0x20) - 97 > 5)
    goto LABEL_4;
  v22 = v1 + 4;
  v23 = v21 - 48;
  if (v21 >= 0x41)
    v23 = (v21 + 9) & 0xF;
  if (v22 == v2 || (v24 = *(unsigned __int16 *)(v3 + 2 * v22), v24 - 48 >= 0xA) && (v24 | 0x20) - 97 >= 6)
  {
LABEL_4:
    v4 = 18;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v4;
    return 0xFFFFFFFFLL;
  }
  v25 = (unsigned __int16)((16 * v20) | (v16 << 8) | v23);
  v26 = v1 + 5;
  *(_DWORD *)(a1 + 28) = v1 + 5;
  v27 = v24 - 48;
  if (v24 >= 0x41)
    v27 = (v24 + 9) & 0xF;
  v5 = v27 | (16 * v25);
  if (v2 - v26 >= 6 && (v25 & 0xFFC0) == 0xD80 && *(_WORD *)(v3 + 2 * v26) == 92)
  {
    if ((_DWORD)v1 + 6 == v2)
      goto LABEL_78;
    if (*(_WORD *)(v3 + 2 * (v1 + 6)) != 117)
      goto LABEL_78;
    if ((_DWORD)v1 + 7 == v2)
      goto LABEL_78;
    v28 = *(unsigned __int16 *)(v3 + 2 * (v1 + 7));
    if (v28 - 48 >= 0xA && (v28 | 0x20) - 97 > 5)
      goto LABEL_78;
    v29 = v1 + 8;
    v30 = v28 >= 0x41 ? ((_BYTE)v28 + 9) & 0xF : v28 + 208;
    if (v29 == v2)
      goto LABEL_78;
    v31 = *(unsigned __int16 *)(v3 + 2 * v29);
    if (v31 - 48 >= 0xA && (v31 | 0x20) - 97 > 5)
      goto LABEL_78;
    v32 = v1 + 9;
    v33 = v31 >= 0x41 ? (v31 + 9) & 0xF : v31 - 48;
    if (v32 == v2
      || (v34 = *(unsigned __int16 *)(v3 + 2 * v32), v34 - 48 >= 0xA) && (v34 | 0x20) - 97 > 5
      || ((v35 = v1 + 10, v34 >= 0x41) ? (v36 = (v34 + 9) & 0xF) : (v36 = v34 - 48),
          v35 == v2
       || (v37 = *(unsigned __int16 *)(v3 + 2 * v35), v37 - 48 >= 0xA) && (v37 | 0x20) - 97 > 5
       || ((*(_DWORD *)(a1 + 28) = v1 + 11, v37 >= 0x41) ? (v38 = (v37 + 9) & 0xF) : (v38 = v37 - 48),
           ((16 * v33) & 0xFFC0 | (unsigned __int16)(v30 << 8) | v36 & 0xC0) != 0xDC0)))
    {
LABEL_78:
      *(_DWORD *)(a1 + 28) = v26;
    }
    else
    {
      return (v38 | (16 * (unsigned __int16)((16 * v33) | (v30 << 8) | v36)))
           + ((_DWORD)v5 << 10)
           - 56613888;
    }
  }
  return v5;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::ClassSetParserDelegate::atomPatternCharacter(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(result + 20);
  v3 = *(unsigned __int8 *)(result + 23);
  *(_BYTE *)(result + 23) = 0;
  v5 = result;
  switch(*(_DWORD *)(result + 16))
  {
    case 0:
    case 7:
      goto LABEL_15;
    case 1:
      if (v2 >= 2)
        goto LABEL_22;
      if (a2 != 45)
        goto LABEL_24;
      v6 = 2;
      goto LABEL_27;
    case 2:
      if (*(_DWORD *)(result + 24) > a2)
      {
        v7 = *(char **)(result + 8);
        v8 = 14;
        goto LABEL_23;
      }
      result = WebCore::ContentExtensions::PatternParser::atomCharacterClassRange(*(_QWORD *)result, (unsigned __int16)*(_DWORD *)(result + 24), (unsigned __int16)a2);
      if (!*(_BYTE *)(v5 + 20))
        *(_BYTE *)(v5 + 20) = 1;
      v6 = 5;
      goto LABEL_27;
    case 3:
      if (a2 != 45 || v2 > 1)
        goto LABEL_13;
      v9 = *(_QWORD *)result;
      if (!*(_DWORD *)(*(_QWORD *)result + 92) && *(_BYTE *)(v9 + 56) == 1)
        *(_QWORD *)(v9 + 72) |= 0x200000000000uLL;
      v6 = 4;
      goto LABEL_27;
    case 4:
      v7 = *(char **)(result + 8);
      v8 = 15;
      goto LABEL_23;
    case 5:
LABEL_13:
      if (!v2)
        *(_BYTE *)(result + 20) = 1;
LABEL_15:
      if (a2 != 45 || v3)
        goto LABEL_26;
      v7 = *(char **)(result + 8);
      v8 = 31;
      goto LABEL_23;
    case 6:
      if (v2 >= 2)
        **(_BYTE **)(result + 8) = 29;
      if (a2 == 45)
      {
LABEL_22:
        v7 = *(char **)(result + 8);
        v8 = 29;
LABEL_23:
        *v7 = v8;
      }
      else
      {
LABEL_24:
        result = WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(*(_QWORD *)result, *(unsigned __int16 *)(result + 24));
        if (!*(_BYTE *)(v5 + 20))
          *(_BYTE *)(v5 + 20) = 1;
LABEL_26:
        *(_DWORD *)(v5 + 24) = a2;
        v6 = 1;
LABEL_27:
        *(_DWORD *)(v5 + 16) = v6;
      }
      return result;
    default:
      return result;
  }
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::ClassSetParserDelegate::atomBuiltInCharacterClass(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  char *v4;
  char v5;
  unsigned int v6;
  char v7;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 20);
  switch(*(_DWORD *)(result + 16))
  {
    case 0:
    case 3:
    case 7:
      goto LABEL_13;
    case 1:
      if (v2 < 2)
      {
        WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(*(_QWORD *)result, *(unsigned __int16 *)(result + 24));
        v2 = *(unsigned __int8 *)(v1 + 20);
LABEL_4:
        if (!v2)
          *(_BYTE *)(v1 + 20) = 1;
LABEL_13:
        result = JSC::Yarr::characterClassMayContainStrings();
        v6 = *(unsigned __int8 *)(v1 + 20);
        if (v6 >= 2)
        {
          if (v6 != 2)
          {
LABEL_20:
            if (!*(_DWORD *)(*(_QWORD *)v1 + 92))
              *(_DWORD *)(*(_QWORD *)v1 + 92) = 8;
            *(_DWORD *)(v1 + 16) = 3;
            return result;
          }
          if (*(_BYTE *)(v1 + 21))
            v7 = result;
          else
            v7 = 0;
        }
        else
        {
          v7 = *(_BYTE *)(v1 + 21) | result;
        }
        *(_BYTE *)(v1 + 21) = v7;
        goto LABEL_20;
      }
      v4 = *(char **)(result + 8);
      v5 = 29;
LABEL_10:
      *v4 = v5;
      return result;
    case 2:
      result = WebCore::ContentExtensions::PatternParser::atomCharacterClassAtom(*(_QWORD *)result, *(unsigned __int16 *)(result + 24));
      v3 = *(_QWORD *)v1;
      if (!*(_DWORD *)(*(_QWORD *)v1 + 92) && *(_BYTE *)(v3 + 56) == 1)
        *(_QWORD *)(v3 + 72) |= 0x200000000000uLL;
      goto LABEL_9;
    case 4:
LABEL_9:
      v4 = *(char **)(v1 + 8);
      v5 = 15;
      goto LABEL_10;
    case 5:
      goto LABEL_4;
    case 6:
      if (v2 >= 2)
        **(_BYTE **)(result + 8) = 29;
      goto LABEL_13;
    default:
      return result;
  }
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::tryConsumeUnicodePropertyExpression(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t matched;
  unint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  _WORD *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  unsigned int v19;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  _BYTE *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _WORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;

  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == *(_DWORD *)(a1 + 24)
    || (v3 = *(_QWORD *)(a1 + 16), v4 = *(unsigned __int16 *)(v3 + 2 * v2), v4 != 61)
    && (v4 != 95 ? (v5 = (v4 - 48) >= 0xA) : (v5 = 0), v5 ? (v6 = (v4 | 0x20u) - 97 >= 0x1A) : (v6 = 0), v6))
  {
    v7 = 0;
    v8 = 0;
    LOBYTE(matched) = 0;
    LODWORD(v10) = 0;
    *(_BYTE *)(a1 + 8) = 25;
    return ((_DWORD)v10 << 8) | v8 & 0xFF00000000 | (v7 << 40) | matched;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 1;
  *(_DWORD *)(a1 + 28) = v2 + 1;
  v11 = *(unsigned __int16 *)(v3 + 2 * v2);
  if (v11 > 0xFF)
  {
    v14 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v39);
    if (v14)
      *v14 = v11;
  }
  else
  {
    v12 = (_BYTE *)MEMORY[0x19AEA4824](&v39, 1);
    if (v12)
      *v12 = v11;
  }
  v15 = *(_DWORD *)(a1 + 28);
  if (v15 == *(_DWORD *)(a1 + 24))
  {
    v16 = 0;
    goto LABEL_65;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  while (1)
  {
    v19 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * v15);
    *(_DWORD *)(a1 + 28) = v15 + 1;
    if (v19 == 61)
    {
      if ((v18 & 1) != 0)
      {
        ++v17;
        v18 = 1;
      }
      else
      {
        v27 = v39;
        if (v39
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v39),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v39),
              (v27 = v39) != 0))
        {
          *(_DWORD *)v27 += 2;
        }
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
        v28 = v39;
        v39 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v13);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v40;
        v40 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v13);
          else
            *(_DWORD *)v29 -= 2;
        }
        v41 = 0;
        v18 = 1;
        v16 = v27;
      }
      goto LABEL_62;
    }
    if (v19 == 125)
      break;
    if (v19 != 95 && v19 - 48 >= 0xA && (v19 | 0x20) - 97 >= 0x1A)
    {
      ++v17;
    }
    else
    {
      if (v41 == -1)
        v22 = 0xFFFFFFFFLL;
      else
        v22 = (v41 + 1);
      v23 = v40;
      if (v40 || (v23 = v39) != 0)
      {
        v24 = *((_DWORD *)v23 + 4) & 4;
        if (v19 > 0xFF || v24 == 0)
        {
LABEL_60:
          v30 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v39);
          if (v30)
            *v30 = v19;
          goto LABEL_62;
        }
      }
      else if (v19 > 0xFF)
      {
        goto LABEL_60;
      }
      v26 = (_BYTE *)MEMORY[0x19AEA4824](&v39, v22);
      if (v26)
        *v26 = v19;
    }
LABEL_62:
    v15 = *(_DWORD *)(a1 + 28);
    if (v15 == *(_DWORD *)(a1 + 24))
      goto LABEL_65;
  }
  if (v17)
  {
LABEL_65:
    v7 = 0;
    LOBYTE(matched) = 0;
    LODWORD(v10) = 0;
    goto LABEL_66;
  }
  if ((v18 & 1) != 0)
  {
    if (v16)
      *(_DWORD *)v16 += 2;
    v34 = v39;
    if (v39
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v39),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v39),
          (v34 = v39) != 0))
    {
      *(_DWORD *)v34 += 2;
    }
    v38 = v34;
    matched = JSC::Yarr::unicodeMatchPropertyValue();
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v13);
      else
        *(_DWORD *)v38 -= 2;
    }
    v10 = matched >> 8;
    v8 = matched & 0xFFFFFFFF00000000;
    v7 = matched >> 40;
    v35 = v16;
    if (!v16)
      goto LABEL_97;
LABEL_95:
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v13);
    else
      *(_DWORD *)v35 -= 2;
    goto LABEL_97;
  }
  v36 = v39;
  if (v39
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v39),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v39),
        (v36 = v39) != 0))
  {
    *(_DWORD *)v36 += 2;
  }
  v37 = v36;
  matched = JSC::Yarr::unicodeMatchProperty();
  v10 = matched >> 8;
  v8 = matched & 0xFFFFFFFF00000000;
  v7 = matched >> 40;
  v35 = v37;
  if (v37)
    goto LABEL_95;
LABEL_97:
  if ((matched & 0xFF00000000) == 0)
  {
LABEL_66:
    v8 = 0;
    *(_BYTE *)(a1 + 8) = 25;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v31 = v40;
  v40 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v13);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v39;
  v39 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v13);
    else
      *(_DWORD *)v32 -= 2;
  }
  return ((_DWORD)v10 << 8) | v8 & 0xFF00000000 | (v7 << 40) | matched;
}

uint64_t JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::tryConsumeUnicodeEscape<(JSC::Yarr::Parser<WebCore::ContentExtensions::PatternParser,char16_t>::UnicodeParseContext)0>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned __int8 v13;
  int v14;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v20;
  unsigned __int8 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned __int8 v39;

  v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == v3)
    goto LABEL_4;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)(v4 + 2 * v2) != 117)
    goto LABEL_4;
  *(_DWORD *)(a1 + 28) = v2 + 1;
  if ((_DWORD)v2 + 1 == v3)
    goto LABEL_4;
  v8 = *(unsigned __int16 *)(v4 + 2 * (v2 + 1));
  if (v1 <= 1 && v8 == 123)
  {
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 28) = v2 + 2;
    v9 = v2 + 3;
    v10 = -v3;
    while (v10 + v9 != 1)
    {
      v11 = *(unsigned __int16 *)(v4 + 2 * (v9 - 1));
      if (v11 - 48 >= 0xA && (v11 | 0x20) - 97 >= 6)
        break;
      *(_DWORD *)(a1 + 28) = v9;
      v13 = v11 >= 0x41 ? (v11 + 9) & 0xF : v11 - 48;
      v6 = v13 | (16 * v6);
      if (v6 >= 0x110000 || !(v10 + v9))
        break;
      v14 = *(unsigned __int16 *)(v4 + 2 * v9++);
      if (v14 == 125)
      {
        *(_DWORD *)(a1 + 28) = v9;
        return v6;
      }
    }
    v5 = 19;
    goto LABEL_6;
  }
  if (v8 - 48 >= 0xA && (v8 | 0x20) - 97 > 5)
    goto LABEL_4;
  v16 = v2 + 2;
  v17 = v8 >= 0x41 ? ((_BYTE)v8 + 9) & 0xF : v8 + 208;
  if (v16 == v3)
    goto LABEL_4;
  v18 = *(unsigned __int16 *)(v4 + 2 * v16);
  if (v18 - 48 >= 0xA && (v18 | 0x20) - 97 > 5)
    goto LABEL_4;
  v20 = v2 + 3;
  v21 = v18 >= 0x41 ? (v18 + 9) & 0xF : v18 - 48;
  if (v20 == v3)
    goto LABEL_4;
  v22 = *(unsigned __int16 *)(v4 + 2 * v20);
  if (v22 - 48 >= 0xA && (v22 | 0x20) - 97 > 5)
    goto LABEL_4;
  v23 = v2 + 4;
  v24 = v22 - 48;
  if (v22 >= 0x41)
    v24 = (v22 + 9) & 0xF;
  if (v23 == v3 || (v25 = *(unsigned __int16 *)(v4 + 2 * v23), v25 - 48 >= 0xA) && (v25 | 0x20) - 97 >= 6)
  {
LABEL_4:
    if (v1 > 1)
      return 0xFFFFFFFFLL;
    v5 = 18;
LABEL_6:
    *(_BYTE *)(a1 + 8) = v5;
    return 0xFFFFFFFFLL;
  }
  v26 = (unsigned __int16)((16 * v21) | (v17 << 8) | v24);
  v27 = v2 + 5;
  *(_DWORD *)(a1 + 28) = v2 + 5;
  v28 = v25 - 48;
  if (v25 >= 0x41)
    v28 = (v25 + 9) & 0xF;
  v6 = v28 | (16 * v26);
  if (v3 - v27 >= 6 && (v26 & 0xFFC0) == 0xD80 && v1 <= 1 && *(_WORD *)(v4 + 2 * v27) == 92)
  {
    if ((_DWORD)v2 + 6 == v3)
      goto LABEL_82;
    if (*(_WORD *)(v4 + 2 * (v2 + 6)) != 117)
      goto LABEL_82;
    if ((_DWORD)v2 + 7 == v3)
      goto LABEL_82;
    v29 = *(unsigned __int16 *)(v4 + 2 * (v2 + 7));
    if (v29 - 48 >= 0xA && (v29 | 0x20) - 97 > 5)
      goto LABEL_82;
    v30 = v2 + 8;
    v31 = v29 >= 0x41 ? ((_BYTE)v29 + 9) & 0xF : v29 + 208;
    if (v30 == v3)
      goto LABEL_82;
    v32 = *(unsigned __int16 *)(v4 + 2 * v30);
    if (v32 - 48 >= 0xA && (v32 | 0x20) - 97 > 5)
      goto LABEL_82;
    v33 = v2 + 9;
    v34 = v32 >= 0x41 ? (v32 + 9) & 0xF : v32 - 48;
    if (v33 == v3
      || (v35 = *(unsigned __int16 *)(v4 + 2 * v33), v35 - 48 >= 0xA) && (v35 | 0x20) - 97 > 5
      || ((v36 = v2 + 10, v35 >= 0x41) ? (v37 = (v35 + 9) & 0xF) : (v37 = v35 - 48),
          v36 == v3
       || (v38 = *(unsigned __int16 *)(v4 + 2 * v36), v38 - 48 >= 0xA) && (v38 | 0x20) - 97 > 5
       || ((*(_DWORD *)(a1 + 28) = v2 + 11, v38 >= 0x41) ? (v39 = (v38 + 9) & 0xF) : (v39 = v38 - 48),
           ((16 * v34) & 0xFFC0 | (unsigned __int16)(v31 << 8) | v37 & 0xC0) != 0xDC0)))
    {
LABEL_82:
      *(_DWORD *)(a1 + 28) = v27;
    }
    else
    {
      return (v39 | (16 * (unsigned __int16)((16 * v34) | (v31 << 8) | v37)))
           + ((_DWORD)v6 << 10)
           - 56613888;
    }
  }
  return v6;
}

uint64_t WebCore::CryptoAlgorithm::encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 6);
}

uint64_t WebCore::CryptoAlgorithm::decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 6);
}

uint64_t WebCore::CryptoAlgorithm::sign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 6);
}

uint64_t WebCore::CryptoAlgorithm::verify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, 6);
}

uint64_t WebCore::CryptoAlgorithm::digest(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, 6);
}

uint64_t WebCore::CryptoAlgorithm::generateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 6);
}

uint64_t WebCore::CryptoAlgorithm::deriveBits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 6);
}

uint64_t WebCore::CryptoAlgorithm::importKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 6);
}

uint64_t WebCore::CryptoAlgorithm::exportKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
}

uint64_t WebCore::CryptoAlgorithm::wrapKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
}

uint64_t WebCore::CryptoAlgorithm::unwrapKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
}

void WebCore::CryptoAlgorithm::getKeyLength(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
}

unsigned __int8 *WebCore::CryptoAlgorithmRegistry::name@<X0>(unsigned __int8 *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  int v13;
  int v14;
  int v15;

  v4 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_4:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](result);
    goto LABEL_5;
  }
  if (__stxr(1u, result))
    goto LABEL_4;
LABEL_5:
  v7 = *((_QWORD *)v4 + 2);
  if (!v7)
    goto LABEL_14;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v8 & (v10 ^ HIWORD(v10));
  v12 = (int *)(v7 + 24 * v11);
  v13 = *v12;
  if (*v12 != a2)
  {
    v14 = 1;
    while (v13)
    {
      v11 = (v11 + v14) & v8;
      v12 = (int *)(v7 + 24 * v11);
      v13 = *v12;
      ++v14;
      if (*v12 == a2)
        goto LABEL_12;
    }
    v12 = (int *)(v7 + 24 * *(unsigned int *)(v7 - 4));
  }
LABEL_12:
  if (v12 == (int *)(v7 + 24 * *(unsigned int *)(v7 - 4)))
LABEL_14:
    *a3 = 0;
  else
    result = (unsigned __int8 *)WTF::String::isolatedCopy();
  v15 = __ldxr(v4);
  if (v15 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *WebCore::CryptoAlgorithmRegistry::create(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  v3 = result;
  if (__ldaxr((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry))
  {
    goto LABEL_5;
  }
  result = (uint64_t *)MEMORY[0x19AEA534C](&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
LABEL_5:
  v5 = qword_1EE2F5660;
  if (qword_1EE2F5660)
  {
    v6 = *(_DWORD *)(qword_1EE2F5660 - 8);
    v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
    v9 = v6 & (v8 ^ HIWORD(v8));
    v10 = qword_1EE2F5660 + 24 * v9;
    v11 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v9 = (v9 + v12) & v6;
        v10 = qword_1EE2F5660 + 24 * v9;
        v11 = *(_DWORD *)v10;
        ++v12;
        if (*(_DWORD *)v10 == a2)
          goto LABEL_12;
      }
      v10 = qword_1EE2F5660 + 24 * *(unsigned int *)(qword_1EE2F5660 - 4);
    }
LABEL_12:
    if (v10 == qword_1EE2F5660 + 24 * *(unsigned int *)(qword_1EE2F5660 - 4))
    {
      v5 = 0;
    }
    else
    {
      result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v10 + 16))(&v14);
      v5 = v14;
    }
  }
  *v3 = v5;
  v13 = __ldxr((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
  if (v13 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
  }
  if (__stlxr(0, (unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
  return result;
}

WTF::StringImpl *WebCore::CryptoAlgorithmRegistry::registerAlgorithm(uint64_t a1, WTF::ASCIICaseInsensitiveHash *this, unsigned __int8 a3, WTF::StringImpl *a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  int v11;
  WTF::StringImpl *v12[2];
  int v13;
  _BYTE v14[31];
  unsigned __int8 v15;

  v15 = a3;
  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a1))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1);
LABEL_5:
  WTF::HashMap<WTF::String,WebCore::CryptoAlgorithmIdentifier,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CryptoAlgorithmIdentifier>,WTF::HashTableTraits>::add<WebCore::CryptoAlgorithmIdentifier&>(this, (uint64_t *)(a1 + 8), &v15, (uint64_t)v14);
  v13 = v15;
  v8 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v8 += 2;
  v12[0] = v8;
  v12[1] = a4;
  WTF::HashMap<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::HashTableTraits>::add<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>((uint64_t *)(a1 + 16), (WTF::StringImpl *)&v13, (uint64_t *)v12, (uint64_t)v14);
  result = v12[0];
  v12[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  v11 = __ldxr((unsigned __int8 *)a1);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a1))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)a1);
}

uint64_t WTF::HashMap<WTF::String,WebCore::CryptoAlgorithmIdentifier,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CryptoAlgorithmIdentifier>,WTF::HashTableTraits>::add<WebCore::CryptoAlgorithmIdentifier&>@<X0>(WTF::ASCIICaseInsensitiveHash *this@<X1>, uint64_t *a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  char v46;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CryptoAlgorithmIdentifier>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CryptoAlgorithmIdentifier>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::CryptoAlgorithmIdentifier,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CryptoAlgorithmIdentifier>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)this;
  while (1)
  {
    v14 = v10 & v9;
    v15 = v8 + 16 * (v10 & v9);
    result = *(_QWORD *)v15;
    if (*(_QWORD *)v15 == -1)
    {
      v11 = v8 + 16 * v14;
      goto LABEL_17;
    }
    if (!result)
    {
      if (v11)
      {
        result = 0;
        *(_QWORD *)v11 = 0;
        *(_BYTE *)(v11 + 8) = 0;
        --*(_DWORD *)(*a2 - 16);
        v13 = *(_QWORD *)this;
        v15 = v11;
      }
      if (v13)
        *(_DWORD *)v13 += 2;
      *(_QWORD *)v15 = v13;
      *(_BYTE *)(v15 + 8) = *a3;
      v38 = *a2;
      if (*a2)
        v39 = *(_DWORD *)(v38 - 12) + 1;
      else
        v39 = 1;
      *(_DWORD *)(v38 - 12) = v39;
      v40 = *a2;
      if (*a2)
        v41 = *(_DWORD *)(v40 - 12);
      else
        v41 = 0;
      v42 = (*(_DWORD *)(v40 - 16) + v41);
      v43 = *(unsigned int *)(v40 - 4);
      if (v43 > 0x400)
      {
        if (v43 <= 2 * v42)
          goto LABEL_52;
      }
      else if (3 * v43 <= 4 * v42)
      {
        if (!(_DWORD)v43)
        {
          v44 = 8;
LABEL_54:
          result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CryptoAlgorithmIdentifier>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CryptoAlgorithmIdentifier>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::CryptoAlgorithmIdentifier,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CryptoAlgorithmIdentifier>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v44, (WTF::StringImpl **)v15);
          v15 = result;
          v40 = *a2;
          if (*a2)
            v43 = *(unsigned int *)(v40 - 4);
          else
            v43 = 0;
          goto LABEL_59;
        }
LABEL_52:
        v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
        goto LABEL_54;
      }
LABEL_59:
      v45 = v40 + 16 * v43;
      v46 = 1;
      goto LABEL_60;
    }
    v17 = *(unsigned int *)(result + 4);
    if ((_DWORD)v17 != *(_DWORD *)(v13 + 4))
      goto LABEL_17;
    v18 = *(_DWORD *)(v13 + 16);
    v19 = *(unsigned __int8 **)(result + 8);
    v20 = *(unsigned __int8 **)(v13 + 8);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      if ((v18 & 4) != 0)
      {
        if (!(_DWORD)v17)
          goto LABEL_37;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
        {
          v22 = 0;
          v33 = v20 + 1;
          v34 = v19 + 1;
          while (v17 - 1 != v22)
          {
            result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v34[v22]);
            v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v33[v22++]);
            if ((_DWORD)result != v35)
            {
LABEL_36:
              if (v22 < v17)
                goto LABEL_17;
              goto LABEL_37;
            }
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!(_DWORD)v17)
          goto LABEL_37;
        v26 = *(unsigned __int16 *)v20;
        result = (v26 - 65) < 0x1A;
        if ((v26 | (32 * (_DWORD)result)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19))
        {
          v22 = 0;
          v27 = v20 + 2;
          v28 = v19 + 1;
          while (v17 - 1 != v22)
          {
            result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v28[v22]);
            v29 = *(unsigned __int16 *)&v27[2 * v22] | (32
                                                      * (*(unsigned __int16 *)&v27[2 * v22] - 65 < 0x1A));
            ++v22;
            if (v29 != (_DWORD)result)
              goto LABEL_36;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_17;
    }
    if ((v18 & 4) == 0)
      break;
    if (!(_DWORD)v17)
      goto LABEL_37;
    if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
    {
      v22 = 0;
      v30 = v20 + 1;
      v31 = v19 + 2;
      while (v17 - 1 != v22)
      {
        result = *(unsigned __int16 *)&v31[2 * v22] | (32
                                                     * (*(unsigned __int16 *)&v31[2 * v22]
                                                                    - 65 < 0x1A));
        v32 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[v22++]);
        if ((_DWORD)result != v32)
          goto LABEL_36;
      }
      goto LABEL_37;
    }
LABEL_17:
    ++v12;
    v10 = v14 + v12;
  }
  if (!(_DWORD)v17)
    goto LABEL_37;
  v21 = *(unsigned __int16 *)v20;
  result = (v21 - 65) < 0x1A;
  if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) != (v21 | (32 * (_DWORD)result)))
    goto LABEL_17;
  v22 = 0;
  v23 = v20 + 2;
  v24 = v19 + 2;
  while (v17 - 1 != v22)
  {
    result = *(unsigned __int16 *)&v24[2 * v22] | (32
                                                 * (*(unsigned __int16 *)&v24[2 * v22] - 65 < 0x1A));
    v25 = *(unsigned __int16 *)&v23[2 * v22] | (32 * (*(unsigned __int16 *)&v23[2 * v22] - 65 < 0x1A));
    ++v22;
    if ((_DWORD)result != v25)
      goto LABEL_36;
  }
LABEL_37:
  v36 = *a2;
  if (*a2)
    v37 = *(unsigned int *)(v36 - 4);
  else
    v37 = 0;
  v46 = 0;
  v45 = v36 + 16 * v37;
LABEL_60:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v45;
  *(_BYTE *)(a4 + 16) = v46;
  return result;
}

uint64_t *WTF::HashMap<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::HashTableTraits>::add<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_DWORD *)a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 24 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 24 * v22;
        goto LABEL_36;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 24 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *(_DWORD *)a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  v19 = *a3;
  *a3 = 0;
  result = (uint64_t *)v15[1];
  v15[1] = v19;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v15[2] = a3[1];
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_26;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_31:
      result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v6, v27, (int *)v15);
      v15 = result;
      v23 = *v6;
      if (*v6)
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      else
        LODWORD(v26) = 0;
      goto LABEL_35;
    }
LABEL_26:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
LABEL_35:
  v29 = v23 + 24 * v26;
  v28 = 1;
LABEL_36:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

char *WebCore::CryptoKey::usages@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  int v4;
  char *v5;
  uint64_t v6;
  int v7;

  v2 = this;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *((_DWORD *)this + 4);
  if ((v4 & 2) != 0)
  {
    v7 = 1;
    this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, 1uLL, (unint64_t)&v7);
    v6 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    v4 = *((_DWORD *)v2 + 4);
    LODWORD(v6) = v6 + 1;
    *(_DWORD *)(a2 + 12) = v6;
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
  }
  else
  {
    v5 = 0;
    LODWORD(v6) = 0;
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
  }
  v7 = 5;
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
    v6 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    v4 = *((_DWORD *)v2 + 4);
  }
  else
  {
    *(_DWORD *)&v5[4 * v6] = 5;
  }
  LODWORD(v6) = v6 + 1;
  *(_DWORD *)(a2 + 12) = v6;
LABEL_9:
  if ((v4 & 0x10) != 0)
  {
    v7 = 4;
    if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
    {
      this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
      v6 = *(unsigned int *)(a2 + 12);
      v5 = *(char **)a2;
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
      v4 = *((_DWORD *)v2 + 4);
    }
    else
    {
      *(_DWORD *)&v5[4 * v6] = 4;
    }
    LODWORD(v6) = v6 + 1;
    *(_DWORD *)(a2 + 12) = v6;
    if ((v4 & 1) == 0)
    {
LABEL_11:
      if ((v4 & 4) == 0)
        goto LABEL_12;
      goto LABEL_24;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_11;
  }
  v7 = 0;
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
    v6 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    v4 = *((_DWORD *)v2 + 4);
  }
  else
  {
    *(_DWORD *)&v5[4 * v6] = 0;
  }
  LODWORD(v6) = v6 + 1;
  *(_DWORD *)(a2 + 12) = v6;
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_24:
  v7 = 2;
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
    v6 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    v4 = *((_DWORD *)v2 + 4);
  }
  else
  {
    *(_DWORD *)&v5[4 * v6] = 2;
  }
  LODWORD(v6) = v6 + 1;
  *(_DWORD *)(a2 + 12) = v6;
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_28:
  v7 = 7;
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
    v6 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    v4 = *((_DWORD *)v2 + 4);
  }
  else
  {
    *(_DWORD *)&v5[4 * v6] = 7;
  }
  LODWORD(v6) = v6 + 1;
  *(_DWORD *)(a2 + 12) = v6;
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      return this;
    goto LABEL_36;
  }
LABEL_32:
  v7 = 3;
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
    v6 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    v4 = *((_DWORD *)v2 + 4);
  }
  else
  {
    *(_DWORD *)&v5[4 * v6] = 3;
  }
  LODWORD(v6) = v6 + 1;
  *(_DWORD *)(a2 + 12) = v6;
  if ((v4 & 0x40) != 0)
  {
LABEL_36:
    v7 = 6;
    if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
    {
      this = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v6 + 1, (unint64_t)&v7);
      v6 = *(unsigned int *)(a2 + 12);
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = *(_DWORD *)this;
    }
    else
    {
      *(_DWORD *)&v5[4 * v6] = 6;
    }
    *(_DWORD *)(a2 + 12) = v6 + 1;
  }
  return this;
}

WebCore::SubtleCrypto *WebCore::SubtleCrypto::SubtleCrypto(WebCore::SubtleCrypto *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ContextDestructionObserver *v3;

  v3 = WebCore::ContextDestructionObserver::ContextDestructionObserver(this, a2);
  *((_DWORD *)v3 + 4) = 1;
  *((_QWORD *)v3 + 3) = 0;
  *(_QWORD *)v3 = &off_1E33956D0;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 5) = 0;
  return this;
}

void WebCore::SubtleCrypto::~SubtleCrypto(WebCore::SubtleCrypto *this, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E33956D0;
  WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::~HashMap((uint64_t *)this + 5, a2);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v3);
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v5);
}

{
  WTF *v2;
  void *v3;

  WebCore::SubtleCrypto::~SubtleCrypto(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = (_DWORD **)(v3 + 8);
      do
      {
        if (*(v6 - 1) != (_DWORD *)-1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (v7[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
            else
              --v7[4];
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WTF::StringImpl *WebCore::SubtleCrypto::encrypt(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  unsigned __int8 *v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  objc_class *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  WTF::StringImpl **v48;
  unsigned int *v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  _QWORD *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  objc_class *v72;
  int v73;
  int v74;
  JSC::JSCell **v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl **v80;

  if (a4[12] - 7 > 1)
    goto LABEL_14;
  v12 = a1[1];
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    v14 = v13 - 96;
    if (v13)
      v15 = v13 - 96;
    else
      v15 = 0;
    if (*(_BYTE *)(v15 + 280))
      goto LABEL_14;
  }
  else
  {
    if (MEMORY[0x118])
      goto LABEL_14;
    v14 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v14 + 248))(v14, 8, 1, &v77, 0);
  v17 = v77;
  v77 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(_QWORD *)(a1[1] + 8);
  if (v18)
    v19 = v18 - 96;
  else
    v19 = 0;
  *(_BYTE *)(v19 + 280) = 1;
LABEL_14:
  LOBYTE(v75) = 0;
  v76 = -1;
  v20 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E33959D0[v20])(&v77, &v75, a3);
    v76 = v20;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v77, a2, &v75, 0);
  if (v76 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v76])(&v69, &v75);
  v76 = -1;
  if (!v79)
  {
    v25 = (unsigned __int8 *)v77;
    v77 = 0;
    v26 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v26 == -1)
      goto LABEL_95;
    v69 = (WTF::StringImpl *)&v72;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33959E0[v26])(&v69, a5);
    v28 = v27;
    v29 = 0;
    v72 = 0;
    v73 = 0;
    v74 = (int)v27;
    if (v27)
    {
      if ((unint64_t)v27 >> 32)
      {
LABEL_96:
        __break(0xC471u);
        return result;
      }
      v30 = result;
      v31 = (objc_class *)WTF::fastMalloc(v27);
      v29 = v31;
      v32 = 0;
      v73 = (int)v28;
      v72 = v31;
      do
      {
        *((_BYTE *)v32 + (_QWORD)v31) = *((_BYTE *)v32 + (_QWORD)v30);
        v32 = (WTF *)((char *)v32 + 1);
      }
      while (v28 != v32);
    }
    if (v25[16] != a4[12])
    {
      v33 = *a6;
LABEL_37:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v33, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v69, 0);
      v35 = v69;
      v69 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::destroy(v35, v34);
          if (!v29)
            goto LABEL_80;
          goto LABEL_79;
        }
        *(_DWORD *)v35 -= 2;
        if (v29)
        {
LABEL_79:
          v72 = 0;
          v73 = 0;
          WTF::fastFree(v29, v34);
        }
LABEL_80:
        result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v25 + 8))(v25);
        goto LABEL_81;
      }
LABEL_78:
      if (v29)
        goto LABEL_79;
      goto LABEL_80;
    }
    if ((a4[16] & 1) == 0)
    {
      v33 = *a6;
      goto LABEL_37;
    }
    v36 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v36 != -1)
    {
      v69 = (WTF::StringImpl *)&v71;
      v80 = &v69;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v80, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v80, a4[12]);
    v71 = *a6;
    WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v69, a1 + 5, &v71, a6);
    v37 = a1[3];
    if (v37)
      goto LABEL_99;
    v37 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = a1;
    v39 = (unsigned int *)a1[3];
    a1[3] = v37;
    if (!v39)
      goto LABEL_99;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v38);
    }
    v37 = a1[3];
    if (v37)
    {
LABEL_99:
      do
        v42 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v42 + 1, (unsigned int *)v37));
      v43 = v71;
      do
        v44 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v44 + 1, (unsigned int *)v37));
      v45 = v71;
      do
        v46 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v46 + 1, (unsigned int *)v37));
      v47 = 0;
    }
    else
    {
      v47 = 1;
      v45 = v71;
      v43 = v71;
    }
    v48 = v80;
    v49 = (unsigned int *)(a4 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v69 = (WTF::StringImpl *)a4;
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v51 = &off_1E3395C00;
    v51[1] = v43;
    v51[2] = v37;
    v68 = v51;
    v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v52 = &off_1E3395C28;
    v52[1] = v45;
    v52[2] = v37;
    v67 = v52;
    v53 = *(_QWORD *)(a1[1] + 8);
    if (v53)
      v54 = v53 - 96;
    else
      v54 = 0;
    (*((void (**)(WTF::StringImpl **, unsigned __int8 *, WTF::StringImpl **, objc_class **, _QWORD **, _QWORD **, uint64_t, _QWORD))*v48
     + 3))(v48, v25, &v69, &v72, &v68, &v67, v54, a1[4]);
    v55 = v67;
    v67 = 0;
    if (v55)
      (*(void (**)(_QWORD *))(*v55 + 8))(v55);
    v56 = v68;
    v68 = 0;
    if (v56)
      (*(void (**)(_QWORD *))(*v56 + 8))(v56);
    v57 = (unsigned int *)v69;
    v69 = 0;
    if (!v57)
      goto LABEL_68;
    v58 = v57 + 2;
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v57 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
      if ((v47 & 1) == 0)
      {
        do
        {
LABEL_69:
          v61 = __ldaxr((unsigned int *)v37);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, (unsigned int *)v37));
        if (!v62)
        {
          atomic_store(1u, (unsigned int *)v37);
          WTF::fastFree((WTF *)v37, v34);
        }
      }
    }
    else
    {
LABEL_68:
      if ((v47 & 1) == 0)
        goto LABEL_69;
    }
    v63 = (unsigned int *)v80;
    v80 = 0;
    if (v63)
    {
      v64 = v63 + 2;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v63 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
      }
    }
    v29 = v72;
    goto LABEL_78;
  }
  if (v79 != 1)
  {
LABEL_95:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_96;
  }
  v21 = *a6;
  v22 = v78;
  v78 = 0;
  v72 = 0;
  LOBYTE(v69) = (_BYTE)v77;
  if (v22)
    *(_DWORD *)v22 += 2;
  v70 = v22;
  WebCore::DeferredPromise::reject(v21, (unsigned __int8 *)&v69, 0, &v72);
  result = v70;
  v70 = 0;
  if (!result)
  {
LABEL_25:
    if (v22)
      goto LABEL_26;
    goto LABEL_81;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
  if (v22)
  {
LABEL_26:
    if (*(_DWORD *)v22 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_81:
  if (v79 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33959F0[v79])(&v69, &v77);
  return result;
}

void WebCore::normalizeCryptoAlgorithmParameters(uint64_t a1, uint64_t a2, JSC::JSCell ***a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t (**v7)();
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  JSC::JSCell **v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  JSC::JSCell *v35;
  unint64_t v36;
  char v37;
  _BOOL8 v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::JSCell *v74;
  unsigned int v75;
  JSC::JSCell *v76;
  unsigned int v77;
  int v78;
  uint64_t (*v79)();
  uint64_t v80;
  JSC::JSCell *v81;
  unsigned int v82;
  int v83;
  uint64_t (*v84)();
  JSC::JSCell *v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  char v88;
  __int16 v89;
  WTF::StringImpl *v90;
  int v91;
  uint64_t v92;
  uint64_t (**v93)();
  JSC::JSCell *v94;
  int v95;
  int v96;
  uint64_t (*v97)();
  unsigned int v98;
  JSC::JSCell *v99;
  WTF::StringImpl *v100;
  char v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  JSC::Structure *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  JSC::Structure *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t (*v113)();
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  int v126;
  JSC::JSCell *v127;
  int v128;
  int v129;
  uint64_t (*v130)();
  JSC::JSCell *v131;
  WTF::StringImpl *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  void *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  WTF::StringImpl *v142;
  unsigned int v143;
  uint64_t (**v144)();
  uint64_t v145;
  JSC::JSCell *v146;
  WTF::StringImpl *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  void *v152;
  int v153;
  uint64_t v154;
  WTF *v155;
  WTF::StringImpl *v156;
  JSC::JSCell *v157;
  WTF::StringImpl *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  void *v163;
  int v164;
  uint64_t v165;
  WTF *v166;
  WTF::StringImpl *v167;
  JSC::JSCell *v168;
  int v169;
  WTF::StringImpl *v170;
  int v171;
  int v172;
  WTF *v173;
  WTF *v174;
  WTF *v175;
  WTF *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  int v179;
  void *v180;
  int v181;
  WTF *v182;
  WTF *v183;
  WTF *v184;
  WTF *v185;
  WTF::StringImpl *v186;
  int v187;
  JSC::JSCell *v188;
  WTF::StringImpl *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  int v194;
  JSC::Structure *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  JSC::Structure *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  uint64_t (*v203)();
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  int v216;
  JSC::JSCell *v217;
  int v218;
  uint64_t (*v219)();
  uint64_t v220;
  uint64_t v221;
  char v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  int v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  int v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  int v232;
  _QWORD *v233;
  JSC::JSCell *v234;
  unsigned int v235;
  int v236;
  uint64_t (*v237)();
  uint64_t v238;
  char v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  __int128 v242;
  unsigned int v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  int v255;
  int v256;
  int v257;
  WTF *v258;
  WTF *v259;
  WTF *v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  int v264;
  char v265;
  int v266;
  void *v267;
  int v268;
  WTF *v269;
  WTF *v270;
  WTF *v271;
  WTF *v272;
  WTF::StringImpl *v273;
  int v274;
  uint64_t (**v275)();
  uint64_t v276;
  char v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  int v280;
  int v281;
  WTF *v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  int v285;
  uint64_t v286;
  void *v287;
  int v288;
  WTF *v289;
  WTF *v290;
  WTF::StringImpl *v291;
  WTF *v292;
  _DWORD *v293;
  WTF::StringImpl *v294;
  int v295;
  uint64_t (**v296)();
  uint64_t v297;
  JSC::JSCell *v298;
  WTF::StringImpl *v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  JSC::JSCell *v305;
  int v306;
  uint64_t (*v307)();
  unint64_t v308;
  uint64_t v309;
  char v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  int v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  int v317;
  uint64_t v318;
  WTF::StringImpl *v319;
  int v320;
  uint64_t (**v321)();
  JSC::JSCell *v322;
  int v323;
  uint64_t (*v324)();
  uint64_t v325;
  WTF::StringImpl *v326;
  char v327;
  WTF::StringImpl *v328;
  int v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  char v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  int v335;
  uint64_t v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  int v339;
  uint64_t v340;
  char v341;
  __int128 v342;
  WTF::StringImpl *v343;
  int v344;
  uint64_t v345;
  char v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  int v349;
  uint64_t v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  int v353;
  uint64_t v354;
  char v355;
  __int128 v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  char v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  int v362;
  uint64_t v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  int v366;
  uint64_t v367;
  char v368;
  __int128 v369;
  WTF::StringImpl *v370;
  char v371;
  char v372;
  __int16 v373;
  char v374;
  uint64_t v375;
  WTF::StringImpl *v376;
  unint64_t v377;
  unint64_t v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  uint64_t SlowCase;
  WTF::StringImpl *v386;
  uint64_t v387;
  uint64_t Slow;
  _QWORD *v389;
  _QWORD *v390;
  __int128 v391;
  char v392[8];
  int v393;
  char v394[8];
  int v395;
  char v396[8];
  int v397;
  char v398[8];
  int v399;
  void (**v400)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden);
  WTF::StringImpl *v401;
  unsigned int v402;
  uint64_t v403;
  _BYTE v404[24];
  uint64_t v405;
  unsigned int v406;
  WTF *v407;
  WTF *v408;
  WTF *v409;
  WTF *v410;
  uint64_t v411;
  char v412[8];
  int v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  int v416;
  int v417;
  uint64_t v418;
  _BYTE v419[24];
  uint64_t v420;
  unsigned int v421;
  WTF *v422;
  WTF *v423;
  WTF *v424;
  WTF *v425;
  uint64_t v426;
  int v427;
  char v428[8];
  int v429;
  char v430[8];
  int v431;
  char v432[8];
  int v433;
  char v434[8];
  WTF::StringImpl *v435;
  unsigned int v436;
  char v437[8];
  WTF::StringImpl *v438;
  char v439;
  int v440;
  _QWORD *v441;
  int v442;
  char v443[8];
  int v444;
  _BYTE v445[9];

  v7 = (uint64_t (**)())a2;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *((_DWORD *)a3 + 2);
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = *(_QWORD *)(v9 + 15056);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 + 60);
        v13 = *(_QWORD *)(v11 + 24);
        if (v13 < *(_QWORD *)(v11 + 32))
        {
LABEL_5:
          *(_QWORD *)(v11 + 24) = v13 + v12;
          goto LABEL_6;
        }
        v13 = *(_QWORD *)(v11 + 40);
        if ((v13 & 1) == 0)
        {
          v308 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(v11 + 48);
          *(_QWORD *)(v11 + 32) = v13 + HIDWORD(v308);
          *(_QWORD *)(v11 + 40) = v13 + (int)v308;
          goto LABEL_5;
        }
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        SlowCase = JSC::CompleteSubspace::allocateSlow();
      }
      v13 = SlowCase;
LABEL_6:
      *(_DWORD *)v13 = 0;
      *(_DWORD *)v13 = *((_DWORD *)v7 + 212);
      *(_DWORD *)(v13 + 4) = 16783360;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_QWORD *)(v13 + 56) = 0;
      if (*(_BYTE *)(v9 + 755))
        __dmb(0xAu);
      v4 = *(_QWORD *)(v9 + 712);
      if (!v4)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 672));
        v4 = *(_QWORD *)(v9 + 712);
      }
      *(_QWORD *)(v9 + 712) = *(_QWORD *)v4;
      *(_QWORD *)(v4 + 16) = 0;
      v14 = (uint64_t *)(v4 + 16);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      v15 = *(unint64_t **)((v4 & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = v15[3];
      v15 += 3;
      *(_QWORD *)v4 = v16;
      *(_QWORD *)(v4 + 8) = v15;
      *v15 = v4;
      *(_QWORD *)(v16 + 8) = v4;
      *(_QWORD *)(v4 + 16) = v13;
      WTF::AtomStringImpl::addLiteral();
      if (*((_DWORD *)a3 + 2) == 1)
      {
        v17 = v414;
        v18 = *a3;
        if (*a3)
        {
          v19 = *((_DWORD *)v18 + 1);
          if (v19 == 1)
          {
            v74 = v18[1];
            if (((_BYTE)v18[2] & 4) != 0)
            {
              v75 = *(unsigned __int8 *)v74;
            }
            else
            {
              v98 = *(unsigned __int16 *)v74;
              if (v98 > 0xFF)
              {
LABEL_14:
                *(_DWORD *)v18 += 2;
                v414 = (WTF::StringImpl *)v18;
                v21 = JSC::JSString::create(v9, &v414);
                v22 = v414;
                v414 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v20);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                goto LABEL_15;
              }
              v75 = v98;
            }
            v21 = *(_QWORD *)(v9 + 8 * v75 + 42216);
LABEL_15:
            v414 = 0;
            v415 = (WTF::StringImpl *)v13;
            v416 = -1;
            v417 = 0x1000000;
            v418 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v9, (unint64_t)v17, v21, 0, (uint64_t)&v414);
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v23);
              else
                *(_DWORD *)v17 -= 2;
            }
            v24 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF000) + 0x10);
            v25 = *(_QWORD *)(v24 + 40);
            if (!v25)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)((v4 & 0xFFFFFFFFFFFFF000) + 0x10));
              v25 = *(_QWORD *)(v24 + 40);
            }
            *(_QWORD *)(v24 + 40) = *(_QWORD *)v25;
            *(_QWORD *)(v25 + 16) = 0;
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            v441 = (_QWORD *)(v25 + 16);
            v26 = *v14;
            if (*v14)
            {
              v27 = *(unint64_t **)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
              v28 = v27[3];
              v27 += 3;
              *(_QWORD *)v25 = v28;
              *(_QWORD *)(v25 + 8) = v27;
              *v27 = v25;
              *(_QWORD *)(v28 + 8) = v25;
            }
            *(_QWORD *)(v25 + 16) = v26;
            v442 = 0;
            WebCore::normalizeCryptoAlgorithmParameters(a1, v7, &v441, a4);
            v29 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
            v30 = *(_QWORD **)(v25 + 8);
            if (v30)
            {
              v31 = *(_QWORD *)v25;
              *v30 = *(_QWORD *)v25;
              *(_QWORD *)(v31 + 8) = v30;
              *(_QWORD *)v25 = 0;
              *(_QWORD *)(v25 + 8) = 0;
            }
            *(_QWORD *)v25 = *(_QWORD *)(v29 + 40);
            *(_QWORD *)(v29 + 40) = v25;
            v32 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF000) + 0x10);
            v33 = *(_QWORD **)(v4 + 8);
            if (v33)
            {
              v34 = *(_QWORD *)v4;
              *v33 = *(_QWORD *)v4;
              *(_QWORD *)(v34 + 8) = v33;
              *(_QWORD *)v4 = 0;
              *(_QWORD *)(v4 + 8) = 0;
            }
            *(_QWORD *)v4 = *(_QWORD *)(v32 + 40);
            *(_QWORD *)(v32 + 40) = v4;
            return;
          }
          if (v19)
            goto LABEL_14;
        }
        v21 = *(_QWORD *)(v9 + 41968);
        goto LABEL_15;
      }
    }
LABEL_750:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_751:
    v85 = 0;
LABEL_142:
    WebCore::convertDictionary<WebCore::CryptoAlgorithmAesKeyParams>(v85, (JSC::VM **)v7, (uint64_t)&v414);
    v86 = v418;
    if ((_DWORD)v418)
    {
      v80 = 0;
      *(_BYTE *)a1 = 37;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      v87 = v415;
      if (v415)
      {
        *(_DWORD *)v415 += 2;
        v88 = v416;
        v89 = HIWORD(v416);
        v80 = WTF::fastMalloc((WTF *)0x18);
        v91 = *(_DWORD *)v87;
        *(_DWORD *)v87 += 2;
        *(_BYTE *)(v80 + 16) = v88;
        *(_QWORD *)v80 = off_1E3223430;
        *(_QWORD *)(v80 + 8) = v87;
        *(_WORD *)(v80 + 18) = v89;
        if (v91)
          *(_DWORD *)v87 = v91;
        else
          WTF::StringImpl::destroy(v87, v90);
      }
      else
      {
        v372 = v416;
        v373 = HIWORD(v416);
        v80 = WTF::fastMalloc((WTF *)0x18);
        *(_BYTE *)(v80 + 16) = v372;
        *(_QWORD *)v80 = off_1E3223430;
        *(_QWORD *)(v80 + 8) = 0;
        *(_WORD *)(v80 + 18) = v373;
      }
    }
    v92 = v418;
    if ((_DWORD)v418 != -1)
    {
      v93 = off_1E3395930;
LABEL_354:
      ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))v93[v92])(&v400, &v414);
    }
    goto LABEL_355;
  }
  if (*a3)
    v35 = **a3;
  else
    v35 = 0;
  WebCore::convertDictionary<WebCore::CryptoAlgorithmParameters>(v35, (JSC::VM **)v7, (uint64_t)v437);
  if (v440)
  {
    v37 = 37;
    goto LABEL_35;
  }
  v36 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v36 != -1)
  {
    v414 = (WTF::StringImpl *)v434;
    v400 = (void (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden))&v414;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v400, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  if (v440)
    goto LABEL_750;
  if (!v438 || !*((_DWORD *)v438 + 1))
    goto LABEL_34;
  if (__ldaxr((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry))
  {
    __clrex();
LABEL_45:
    MEMORY[0x19AEA534C](&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
    goto LABEL_46;
  }
  if (__stxr(1u, (unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry))
    goto LABEL_45;
LABEL_46:
  WTF::String::isolatedCopy();
  v40 = qword_1EE2F5658;
  if (!qword_1EE2F5658)
  {
    v68 = 0;
    v44 = v414;
    goto LABEL_86;
  }
  v41 = *(_DWORD *)(qword_1EE2F5658 - 8);
  v42 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v414, (const WTF::String *)v39);
  v43 = 0;
  v44 = v414;
  while (1)
  {
    v45 = v42 & v41;
    v46 = *(_QWORD *)(v40 + 16 * v45);
    if (v46 == -1)
      goto LABEL_51;
    if (!v46)
      break;
    v47 = *(unsigned int *)(v46 + 4);
    if ((_DWORD)v47 == *((_DWORD *)v414 + 1))
    {
      v48 = *((_DWORD *)v414 + 4);
      v49 = *(unsigned __int8 **)(v46 + 8);
      v50 = (unsigned __int8 *)*((_QWORD *)v414 + 1);
      if ((*(_BYTE *)(v46 + 16) & 4) != 0)
      {
        if ((v48 & 4) != 0)
        {
          if (!(_DWORD)v47)
          {
LABEL_646:
            v68 = v40 + 16 * v45;
            v414 = 0;
            goto LABEL_87;
          }
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v49) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v50))
          {
            v51 = 0;
            v64 = v50 + 1;
            v65 = v49 + 1;
            while (v47 - 1 != v51)
            {
              v66 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v65[v51]);
              v67 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v64[v51++]);
              if (v66 != v67)
              {
LABEL_78:
                if (v51 < v47)
                  goto LABEL_51;
                goto LABEL_79;
              }
            }
            goto LABEL_79;
          }
        }
        else
        {
          if (!(_DWORD)v47)
            goto LABEL_646;
          if ((*(unsigned __int16 *)v50 | (32 * (*(unsigned __int16 *)v50 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v49))
          {
            v51 = 0;
            v56 = v50 + 2;
            v57 = v49 + 1;
            while (v47 - 1 != v51)
            {
              v58 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v57[v51]);
              v59 = *(unsigned __int16 *)&v56[2 * v51];
              v39 = (v59 - 65) < 0x1A;
              ++v51;
              if ((v59 | (32 * v39)) != v58)
                goto LABEL_78;
            }
            goto LABEL_79;
          }
        }
      }
      else if ((v48 & 4) != 0)
      {
        if (!(_DWORD)v47)
          goto LABEL_646;
        if ((*(unsigned __int16 *)v49 | (32 * (*(unsigned __int16 *)v49 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v50))
        {
          v51 = 0;
          v60 = v50 + 1;
          v61 = v49 + 2;
          while (v47 - 1 != v51)
          {
            v62 = *(unsigned __int16 *)&v61[2 * v51] | (32
                                                      * (*(unsigned __int16 *)&v61[2 * v51] - 65 < 0x1A));
            v63 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[v51++]);
            if (v62 != v63)
              goto LABEL_78;
          }
          goto LABEL_79;
        }
      }
      else
      {
        if (!(_DWORD)v47)
          goto LABEL_646;
        if ((*(unsigned __int16 *)v49 | (32 * (*(unsigned __int16 *)v49 - 65 < 0x1A))) == (*(unsigned __int16 *)v50 | (32 * (*(unsigned __int16 *)v50 - 65 < 0x1A))))
        {
          v51 = 0;
          v52 = v50 + 2;
          v53 = v49 + 2;
          while (v47 - 1 != v51)
          {
            v54 = *(unsigned __int16 *)&v53[2 * v51] | (32
                                                      * (*(unsigned __int16 *)&v53[2 * v51] - 65 < 0x1A));
            v55 = *(unsigned __int16 *)&v52[2 * v51];
            v39 = (v55 - 65) < 0x1A;
            ++v51;
            if (v54 != (v55 | (32 * v39)))
              goto LABEL_78;
          }
LABEL_79:
          v68 = v40 + 16 * v45;
          goto LABEL_86;
        }
      }
    }
LABEL_51:
    v42 = ++v43 + v45;
  }
  if (qword_1EE2F5658)
    v68 = qword_1EE2F5658 + 16 * *(unsigned int *)(qword_1EE2F5658 - 4);
  else
    v68 = 0;
LABEL_86:
  v414 = 0;
  if (v44)
  {
LABEL_87:
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v39);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (qword_1EE2F5658)
    v69 = qword_1EE2F5658 + 16 * *(unsigned int *)(qword_1EE2F5658 - 4);
  else
    v69 = 0;
  if (v69 == v68)
    LODWORD(v4) = 0;
  else
    LODWORD(v4) = *(unsigned __int8 *)(v68 + 8);
  v70 = __ldxr((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
  if (v70 != 1)
  {
    __clrex();
    goto LABEL_99;
  }
  if (__stlxr(0, (unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry))
LABEL_99:
    WTF::Lock::unlockSlow((WTF::Lock *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
  if (v69 == v68)
    goto LABEL_34;
  if ((_DWORD)v4 == 21)
  {
    v72 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
    if (!v72 || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 136))(v72) + 472) & 0x80000) == 0)
      goto LABEL_34;
LABEL_108:
    switch((int)a4)
    {
      case 0:
      case 1:
        switch((int)v4)
        {
          case 1:
            goto LABEL_110;
          case 4:
            if (*a3)
              v157 = **a3;
            else
              v157 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaOaepParams>(v157, (JSC::VM **)v7, (uint64_t)&v414);
            v86 = v421;
            if (v421)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
              v143 = v86;
            }
            else
            {
              v158 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              LOBYTE(v402) = v416;
              v400 = off_1E32DCCE8;
              v401 = v158;
              LOBYTE(v403) = 0;
              v404[8] = 0;
              if (v419[8])
              {
                *(_DWORD *)v404 = -1;
                v159 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E3395890[*(unsigned int *)v419])(v434, &v403, &v418);
                  *(_DWORD *)v404 = v159;
                }
                v404[8] = 1;
              }
              *(_QWORD *)&v404[16] = *(_QWORD *)&v419[16];
              v160 = v420;
              *(_QWORD *)&v419[16] = 0;
              v420 = 0;
              v405 = v160;
              v161 = WTF::fastMalloc((WTF *)0x40);
              v80 = v161;
              v162 = v401;
              if (v401)
                *(_DWORD *)v401 += 2;
              *(_QWORD *)(v161 + 8) = v162;
              *(_BYTE *)(v161 + 16) = v402;
              *(_QWORD *)v161 = off_1E32DCCE8;
              *(_BYTE *)(v161 + 24) = 0;
              v163 = (void *)(v161 + 24);
              *(_BYTE *)(v161 + 40) = 0;
              if (v404[8])
              {
                *(_DWORD *)(v161 + 32) = -1;
                v164 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 != -1)
                {
                  ((void (*)(char *, void *, uint64_t *))off_1E3395890[*(unsigned int *)v404])(v434, v163, &v403);
                  *(_DWORD *)(v80 + 32) = v164;
                }
                *(_BYTE *)(v80 + 40) = 1;
              }
              *(_QWORD *)(v80 + 48) = 0;
              *(_QWORD *)(v80 + 56) = 0;
              v165 = *(_QWORD *)&v404[16];
              *(_QWORD *)&v404[16] = 0;
              *(_QWORD *)(v80 + 48) = v165;
              LODWORD(v165) = v405;
              LODWORD(v405) = 0;
              *(_DWORD *)(v80 + 56) = v165;
              LODWORD(v165) = HIDWORD(v405);
              HIDWORD(v405) = 0;
              *(_DWORD *)(v80 + 60) = v165;
              v166 = *(WTF **)&v404[16];
              if (*(_QWORD *)&v404[16])
              {
                *(_QWORD *)&v404[16] = 0;
                LODWORD(v405) = 0;
                WTF::fastFree(v166, v163);
              }
              if (v404[8])
              {
                if (*(_DWORD *)v404 != -1)
                  ((void (*)(char *, uint64_t *))off_1E3395880[*(unsigned int *)v404])(v434, &v403);
                *(_DWORD *)v404 = -1;
              }
              v167 = v401;
              v400 = off_1E3226840;
              v401 = 0;
              if (v167)
              {
                if (*(_DWORD *)v167 == 2)
                  WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v163);
                else
                  *(_DWORD *)v167 -= 2;
              }
              v143 = v421;
            }
            if (v143 == -1)
              goto LABEL_355;
            v144 = off_1E33958A0;
            goto LABEL_277;
          case 7:
            if (*a3)
              v131 = **a3;
            else
              v131 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmAesCtrParams>(v131, (JSC::VM **)v7, (uint64_t)&v414);
            v86 = v421;
            if (v421)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
              v143 = v86;
            }
            else
            {
              v132 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              LOBYTE(v402) = v416;
              v400 = off_1E32233E0;
              v401 = v132;
              LOBYTE(v403) = 0;
              *(_DWORD *)v404 = -1;
              v133 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 != -1)
              {
                ((void (*)(char *, uint64_t *, uint64_t *))off_1E3395890[*(unsigned int *)v419])(v434, &v403, &v418);
                *(_DWORD *)v404 = v133;
              }
              *(_QWORD *)&v404[8] = *(_QWORD *)&v419[8];
              *(_QWORD *)&v404[16] = *(_QWORD *)&v419[16];
              v134 = v420;
              *(_QWORD *)&v419[16] = 0;
              v420 = 0;
              v405 = v134;
              v135 = WTF::fastMalloc((WTF *)0x40);
              v80 = v135;
              v136 = v401;
              if (v401)
                *(_DWORD *)v401 += 2;
              *(_QWORD *)(v135 + 8) = v136;
              *(_BYTE *)(v135 + 16) = v402;
              *(_QWORD *)v135 = off_1E32233E0;
              *(_BYTE *)(v135 + 24) = 0;
              v137 = (void *)(v135 + 24);
              *(_DWORD *)(v135 + 32) = -1;
              v138 = *(_DWORD *)v404;
              if (*(_DWORD *)v404 != -1)
              {
                ((void (*)(char *, void *, uint64_t *))off_1E3395890[*(unsigned int *)v404])(v434, v137, &v403);
                *(_DWORD *)(v80 + 32) = v138;
              }
              v139 = *(_QWORD *)&v404[8];
              *(_QWORD *)(v80 + 48) = 0;
              *(_QWORD *)(v80 + 56) = 0;
              *(_QWORD *)(v80 + 40) = v139;
              v140 = *(_QWORD *)&v404[16];
              *(_QWORD *)&v404[16] = 0;
              *(_QWORD *)(v80 + 48) = v140;
              LODWORD(v140) = v405;
              LODWORD(v405) = 0;
              *(_DWORD *)(v80 + 56) = v140;
              LODWORD(v140) = HIDWORD(v405);
              HIDWORD(v405) = 0;
              *(_DWORD *)(v80 + 60) = v140;
              v141 = *(WTF **)&v404[16];
              if (*(_QWORD *)&v404[16])
              {
                *(_QWORD *)&v404[16] = 0;
                LODWORD(v405) = 0;
                WTF::fastFree(v141, v137);
              }
              if (*(_DWORD *)v404 != -1)
                ((void (*)(char *, uint64_t *))off_1E3395880[*(unsigned int *)v404])(v434, &v403);
              *(_DWORD *)v404 = -1;
              v142 = v401;
              v400 = off_1E3226840;
              v401 = 0;
              if (v142)
              {
                if (*(_DWORD *)v142 == 2)
                  WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v137);
                else
                  *(_DWORD *)v142 -= 2;
              }
              v143 = v421;
            }
            if (v143 == -1)
              goto LABEL_355;
            v144 = off_1E33958C0;
            goto LABEL_277;
          case 8:
            goto LABEL_229;
          case 9:
            if (*a3)
              v168 = **a3;
            else
              v168 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmAesGcmParams>(v168, (JSC::VM **)v7, (uint64_t)&v414);
            v169 = v426;
            if ((_DWORD)v426)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
              v187 = v169;
            }
            else
            {
              v170 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              LOBYTE(v402) = v416;
              v400 = off_1E3223408;
              v401 = v170;
              LOBYTE(v403) = 0;
              *(_DWORD *)v404 = -1;
              v171 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 != -1)
              {
                ((void (*)(char *, uint64_t *, uint64_t *))off_1E3395890[*(unsigned int *)v419])(v434, &v403, &v418);
                *(_DWORD *)v404 = v171;
              }
              v404[8] = 0;
              LOBYTE(v405) = 0;
              if ((_BYTE)v420)
              {
                *(_DWORD *)&v404[16] = -1;
                v172 = *(_DWORD *)&v419[16];
                if (*(_DWORD *)&v419[16] != -1)
                {
                  ((void (*)(char *, _BYTE *, _BYTE *))off_1E3395890[*(unsigned int *)&v419[16]])(v434, &v404[8], &v419[8]);
                  *(_DWORD *)&v404[16] = v172;
                }
                LOBYTE(v405) = 1;
              }
              LOWORD(v406) = v421;
              v173 = v422;
              v422 = 0;
              v407 = v173;
              v174 = v423;
              v423 = 0;
              v408 = v174;
              v175 = v424;
              v424 = 0;
              v409 = v175;
              v176 = v425;
              v425 = 0;
              v410 = v176;
              v177 = WTF::fastMalloc((WTF *)0x68);
              v80 = v177;
              v178 = v401;
              if (v401)
                *(_DWORD *)v401 += 2;
              *(_QWORD *)(v177 + 8) = v178;
              *(_BYTE *)(v177 + 16) = v402;
              *(_QWORD *)v177 = off_1E3223408;
              *(_BYTE *)(v177 + 24) = 0;
              *(_DWORD *)(v177 + 32) = -1;
              v179 = *(_DWORD *)v404;
              if (*(_DWORD *)v404 != -1)
              {
                ((void (*)(char *, uint64_t, uint64_t *))off_1E3395890[*(unsigned int *)v404])(v434, v177 + 24, &v403);
                *(_DWORD *)(v80 + 32) = v179;
              }
              *(_BYTE *)(v80 + 40) = 0;
              v180 = (void *)(v80 + 40);
              *(_BYTE *)(v80 + 56) = 0;
              if ((_BYTE)v405)
              {
                *(_DWORD *)(v80 + 48) = -1;
                v181 = *(_DWORD *)&v404[16];
                if (*(_DWORD *)&v404[16] != -1)
                {
                  ((void (*)(char *))off_1E3395890[*(unsigned int *)&v404[16]])(v434);
                  *(_DWORD *)(v80 + 48) = v181;
                }
                *(_BYTE *)(v80 + 56) = 1;
              }
              *(_WORD *)(v80 + 64) = v406;
              *(_QWORD *)(v80 + 72) = 0;
              *(_QWORD *)(v80 + 80) = 0;
              v182 = v407;
              v407 = 0;
              *(_QWORD *)(v80 + 72) = v182;
              LODWORD(v182) = (_DWORD)v408;
              LODWORD(v408) = 0;
              *(_DWORD *)(v80 + 80) = (_DWORD)v182;
              LODWORD(v182) = HIDWORD(v408);
              HIDWORD(v408) = 0;
              *(_DWORD *)(v80 + 84) = (_DWORD)v182;
              *(_QWORD *)(v80 + 88) = 0;
              *(_QWORD *)(v80 + 96) = 0;
              v183 = v409;
              v409 = 0;
              *(_QWORD *)(v80 + 88) = v183;
              LODWORD(v183) = (_DWORD)v410;
              LODWORD(v410) = 0;
              *(_DWORD *)(v80 + 96) = (_DWORD)v183;
              LODWORD(v183) = HIDWORD(v410);
              HIDWORD(v410) = 0;
              *(_DWORD *)(v80 + 100) = (_DWORD)v183;
              v184 = v409;
              if (v409)
              {
                v409 = 0;
                LODWORD(v410) = 0;
                WTF::fastFree(v184, v180);
              }
              v185 = v407;
              if (v407)
              {
                v407 = 0;
                LODWORD(v408) = 0;
                WTF::fastFree(v185, v180);
              }
              if ((_BYTE)v405)
              {
                if (*(_DWORD *)&v404[16] != -1)
                  ((void (*)(char *, _BYTE *))off_1E3395880[*(unsigned int *)&v404[16]])(v434, &v404[8]);
                *(_DWORD *)&v404[16] = -1;
              }
              if (*(_DWORD *)v404 != -1)
                ((void (*)(char *, uint64_t *))off_1E3395880[*(unsigned int *)v404])(v434, &v403);
              *(_DWORD *)v404 = -1;
              v186 = v401;
              v400 = off_1E3226840;
              v401 = 0;
              if (v186)
              {
                if (*(_DWORD *)v186 == 2)
                  WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v180);
                else
                  *(_DWORD *)v186 -= 2;
              }
              v187 = v426;
            }
            if (v187 != -1)
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))off_1E33958D0[v187])(&v400, &v414);
            if (!v169)
              goto LABEL_580;
            goto LABEL_356;
          case 10:
            v145 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
            if (v145
              && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 136))(v145) + 440) & 0x40000000000) != 0)
            {
              goto LABEL_583;
            }
LABEL_229:
            if (*a3)
              v146 = **a3;
            else
              v146 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmAesCbcCfbParams>(v146, (JSC::VM **)v7, (uint64_t)&v414);
            v86 = v420;
            if ((_DWORD)v420)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
              v143 = v86;
            }
            else
            {
              v147 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              LOBYTE(v402) = v416;
              v400 = off_1E3223378;
              v401 = v147;
              LOBYTE(v403) = 0;
              *(_DWORD *)v404 = -1;
              v148 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 != -1)
              {
                ((void (*)(char *, uint64_t *, uint64_t *))off_1E3395890[*(unsigned int *)v419])(v434, &v403, &v418);
                *(_DWORD *)v404 = v148;
              }
              *(_QWORD *)&v404[8] = *(_QWORD *)&v419[8];
              v149 = *(_QWORD *)&v419[16];
              *(_QWORD *)&v419[8] = 0;
              *(_QWORD *)&v419[16] = 0;
              *(_QWORD *)&v404[16] = v149;
              v150 = WTF::fastMalloc((WTF *)0x38);
              v80 = v150;
              v151 = v401;
              if (v401)
                *(_DWORD *)v401 += 2;
              *(_QWORD *)(v150 + 8) = v151;
              *(_BYTE *)(v150 + 16) = v402;
              *(_QWORD *)v150 = off_1E3223378;
              *(_BYTE *)(v150 + 24) = 0;
              v152 = (void *)(v150 + 24);
              *(_DWORD *)(v150 + 32) = -1;
              v153 = *(_DWORD *)v404;
              if (*(_DWORD *)v404 != -1)
              {
                ((void (*)(char *, void *, uint64_t *))off_1E3395890[*(unsigned int *)v404])(v434, v152, &v403);
                *(_DWORD *)(v80 + 32) = v153;
              }
              *(_QWORD *)(v80 + 40) = 0;
              *(_QWORD *)(v80 + 48) = 0;
              v154 = *(_QWORD *)&v404[8];
              *(_QWORD *)&v404[8] = 0;
              *(_QWORD *)(v80 + 40) = v154;
              LODWORD(v154) = *(_DWORD *)&v404[16];
              *(_DWORD *)&v404[16] = 0;
              *(_DWORD *)(v80 + 48) = v154;
              LODWORD(v154) = *(_DWORD *)&v404[20];
              *(_DWORD *)&v404[20] = 0;
              *(_DWORD *)(v80 + 52) = v154;
              v155 = *(WTF **)&v404[8];
              if (*(_QWORD *)&v404[8])
              {
                *(_QWORD *)&v404[8] = 0;
                *(_DWORD *)&v404[16] = 0;
                WTF::fastFree(v155, v152);
              }
              if (*(_DWORD *)v404 != -1)
                ((void (*)(char *, uint64_t *))off_1E3395880[*(unsigned int *)v404])(v434, &v403);
              *(_DWORD *)v404 = -1;
              v156 = v401;
              v400 = off_1E3226840;
              v401 = 0;
              if (v156)
              {
                if (*(_DWORD *)v156 == 2)
                  WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v152);
                else
                  *(_DWORD *)v156 -= 2;
              }
              v143 = v420;
            }
            if (v143 != -1)
            {
              v144 = off_1E33958B0;
LABEL_277:
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))v144[v143])(&v400, &v414);
            }
            break;
          default:
            goto LABEL_34;
        }
        goto LABEL_355;
      case 2:
      case 3:
        if ((int)v4 <= 4)
        {
          if ((_DWORD)v4 != 2)
          {
            if ((_DWORD)v4 != 3)
              goto LABEL_34;
            if (*a3)
              v99 = **a3;
            else
              v99 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaPssParams>(v99, (JSC::VM **)v7, (uint64_t)&v414);
            v86 = *(_DWORD *)v419;
            if (*(_DWORD *)v419)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v100 = v415;
              if (v415)
              {
                *(_DWORD *)v415 += 2;
                v101 = v416;
                v102 = v418;
                v80 = WTF::fastMalloc((WTF *)0x20);
                v104 = *(_DWORD *)v100;
                *(_DWORD *)v100 += 2;
                *(_BYTE *)(v80 + 16) = v101;
                *(_QWORD *)v80 = off_1E32DCD50;
                *(_QWORD *)(v80 + 8) = v100;
                *(_QWORD *)(v80 + 24) = v102;
                if (v104)
                  *(_DWORD *)v100 = v104;
                else
                  WTF::StringImpl::destroy(v100, v103);
              }
              else
              {
                v374 = v416;
                v375 = v418;
                v80 = WTF::fastMalloc((WTF *)0x20);
                *(_BYTE *)(v80 + 16) = v374;
                *(_QWORD *)v80 = off_1E32DCD50;
                *(_QWORD *)(v80 + 8) = 0;
                *(_QWORD *)(v80 + 24) = v375;
              }
            }
            v92 = *(unsigned int *)v419;
            if (*(_DWORD *)v419 != -1)
            {
              v93 = off_1E3395900;
              goto LABEL_354;
            }
            goto LABEL_355;
          }
        }
        else
        {
          if ((_DWORD)v4 == 5)
          {
            if (*a3)
              v127 = **a3;
            else
              v127 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmEcdsaParams>(v127, (JSC::VM **)v7, (uint64_t)&v414);
            v128 = *(_DWORD *)&v419[16];
            if (*(_DWORD *)&v419[16])
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v232 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v432[0] = 0;
              v433 = -1;
              v129 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v130 = off_1E3395A00[*(unsigned int *)v419];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v130)(&v400, v432, &v418);
                v433 = v129;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v130)(v434, v443, v432);
                v444 = v129;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v221 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v222 = (char)v400;
                v223 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v223;
              }
              else
              {
                v222 = *((_BYTE *)v400 + 16);
                v434[0] = v222;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v433 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v433])(&v400, v432);
              v433 = -1;
              if ((_DWORD)v221)
              {
                if ((_DWORD)v221 != 1)
                  goto LABEL_750;
                v80 = 0;
                v376 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v222;
                *(_QWORD *)(a1 + 8) = v376;
                v232 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if (*(_DWORD *)&v419[16])
                  goto LABEL_750;
                v224 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v400 = off_1E3272180;
                v401 = v224;
                LOBYTE(v403) = 0;
                *(_DWORD *)v404 = -1;
                v225 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[*(unsigned int *)v419])(v443, &v403, &v418);
                  *(_DWORD *)v404 = v225;
                }
                v404[8] = v222;
                v226 = WTF::fastMalloc((WTF *)0x30);
                v80 = v226;
                v227 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v226 + 8) = v227;
                *(_BYTE *)(v226 + 16) = v402;
                *(_QWORD *)v226 = off_1E3272180;
                *(_BYTE *)(v226 + 24) = 0;
                v228 = (WTF::StringImpl *)(v226 + 24);
                *(_DWORD *)(v226 + 32) = -1;
                v229 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 == -1)
                {
                  *(_BYTE *)(v226 + 40) = v404[8];
                }
                else
                {
                  ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33959D0[*(unsigned int *)v404])(v443, v228, &v403);
                  *(_DWORD *)(v80 + 32) = v229;
                  v230 = *(unsigned int *)v404;
                  *(_BYTE *)(v80 + 40) = v404[8];
                  if ((_DWORD)v230 != -1)
                    ((void (*)(char *, uint64_t *))off_1E33959C0[v230])(v443, &v403);
                }
                *(_DWORD *)v404 = -1;
                v231 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v231)
                {
                  if (*(_DWORD *)v231 == 2)
                    WTF::StringImpl::destroy(v231, v228);
                  else
                    *(_DWORD *)v231 -= 2;
                }
                v232 = 4;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v221])(&v400, v434);
              v128 = *(_DWORD *)&v419[16];
            }
            if (v128 != -1)
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))off_1E33958F0[v128])(&v400, &v414);
            if (v232 != 4)
              goto LABEL_356;
            goto LABEL_580;
          }
          if ((_DWORD)v4 != 20 && (_DWORD)v4 != 12)
            goto LABEL_34;
        }
LABEL_576:
        if (v440)
          goto LABEL_750;
        v326 = v438;
        if (v438)
        {
          *(_DWORD *)v438 += 2;
          v327 = v439;
          v80 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v80 = off_1E3226840;
          v329 = *(_DWORD *)v326;
          *(_DWORD *)v326 += 2;
          *(_QWORD *)(v80 + 8) = v326;
          *(_BYTE *)(v80 + 16) = v327;
          if (v329)
            *(_DWORD *)v326 = v329;
          else
            WTF::StringImpl::destroy(v326, v328);
        }
        else
        {
          v371 = v439;
          v80 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v80 = off_1E3226840;
          *(_QWORD *)(v80 + 8) = 0;
          *(_BYTE *)(v80 + 16) = v371;
        }
        goto LABEL_580;
      case 4:
        if ((v4 - 13) <= 4)
          goto LABEL_576;
        goto LABEL_34;
      case 5:
        switch((int)v4)
        {
          case 1:
            v297 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
            if (v297
              && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v297 + 136))(v297) + 440) & 0x80000000000) != 0)
            {
              goto LABEL_583;
            }
            if (*a3)
              v298 = **a3;
            else
              v298 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaKeyGenParams>(v298, (JSC::VM **)v7, (uint64_t)&v414);
            v86 = v420;
            if ((_DWORD)v420)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v299 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              v300 = v416;
              v301 = v418;
              v391 = *(_OWORD *)v419;
              memset(v419, 0, sizeof(v419));
              v302 = *(_QWORD *)&v419[16];
              v303 = WTF::fastMalloc((WTF *)0x38);
              v80 = v303;
              if (v299)
                *(_DWORD *)v299 += 2;
              *(_BYTE *)(v303 + 16) = v300;
              *(_QWORD *)v303 = off_1E32DCCB0;
              *(_QWORD *)(v303 + 8) = v299;
              *(_QWORD *)(v303 + 24) = v301;
              *(_OWORD *)(v303 + 32) = v391;
              *(_QWORD *)(v303 + 48) = v302;
              if (v299)
              {
                if (*(_DWORD *)v299 == 2)
                  WTF::StringImpl::destroy(v299, v304);
                else
                  *(_DWORD *)v299 -= 2;
              }
            }
            v92 = v420;
            if ((_DWORD)v420 == -1)
              goto LABEL_355;
            v93 = off_1E3395910;
            goto LABEL_354;
          case 2:
          case 3:
          case 4:
            if (*a3)
              v81 = **a3;
            else
              v81 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaHashedKeyGenParams>(v81, (JSC::VM **)v7, (uint64_t)&v414);
            v82 = v423;
            if ((_DWORD)v423)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v295 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v430[0] = 0;
              v431 = -1;
              v83 = v421;
              if (v421 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v84 = off_1E3395A00[v421];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v84)(&v400, v430, &v420);
                v431 = v83;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v84)(v434, v443, v430);
                v444 = v83;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v238 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v239 = (char)v400;
                v240 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v240;
              }
              else
              {
                v239 = *((_BYTE *)v400 + 16);
                v434[0] = v239;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v431 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v431])(&v400, v430);
              v431 = -1;
              if ((_DWORD)v238)
              {
                if ((_DWORD)v238 != 1)
                  goto LABEL_750;
                v80 = 0;
                v379 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v239;
                *(_QWORD *)(a1 + 8) = v379;
                v295 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if ((_DWORD)v423)
                  goto LABEL_750;
                v241 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v403 = v418;
                v242 = *(_OWORD *)v419;
                memset(v419, 0, sizeof(v419));
                *(_OWORD *)v404 = v242;
                *(_QWORD *)&v404[16] = *(_QWORD *)&v419[16];
                v400 = off_1E32DCC88;
                v401 = v241;
                LOBYTE(v405) = 0;
                v406 = -1;
                v243 = v421;
                if (v421 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[v421])(v443, &v405, &v420);
                  v406 = v243;
                }
                LOBYTE(v407) = v239;
                v244 = WTF::fastMalloc((WTF *)0x50);
                v80 = v244;
                v245 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v244 + 8) = v245;
                *(_BYTE *)(v244 + 16) = v402;
                *(_QWORD *)(v244 + 24) = v403;
                v246 = *(_QWORD *)v404;
                *(_QWORD *)v404 = 0;
                *(_QWORD *)(v244 + 40) = 0;
                *(_QWORD *)(v244 + 48) = 0;
                *(_QWORD *)(v244 + 32) = v246;
                v247 = *(_QWORD *)&v404[8];
                *(_QWORD *)&v404[8] = 0;
                *(_QWORD *)(v244 + 40) = v247;
                LODWORD(v247) = *(_DWORD *)&v404[16];
                *(_DWORD *)&v404[16] = 0;
                *(_DWORD *)(v244 + 48) = v247;
                LODWORD(v247) = *(_DWORD *)&v404[20];
                *(_DWORD *)&v404[20] = 0;
                *(_DWORD *)(v244 + 52) = v247;
                *(_QWORD *)v244 = off_1E32DCC88;
                *(_BYTE *)(v244 + 56) = 0;
                v248 = (void *)(v244 + 56);
                *(_DWORD *)(v244 + 64) = -1;
                v249 = v406;
                if (v406 == -1)
                {
                  *(_BYTE *)(v244 + 72) = (_BYTE)v407;
                }
                else
                {
                  ((void (*)(char *, void *, uint64_t *))off_1E33959D0[v406])(v443, v248, &v405);
                  *(_DWORD *)(v80 + 64) = v249;
                  v250 = v406;
                  *(_BYTE *)(v80 + 72) = (_BYTE)v407;
                  if ((_DWORD)v250 != -1)
                    ((void (*)(char *, uint64_t *))off_1E33959C0[v250])(v443, &v405);
                }
                v406 = -1;
                v400 = off_1E32DCCB0;
                v292 = *(WTF **)&v404[8];
                if (*(_QWORD *)&v404[8])
                {
                  *(_QWORD *)&v404[8] = 0;
                  *(_DWORD *)&v404[16] = 0;
                  WTF::fastFree(v292, v248);
                }
                v293 = *(_DWORD **)v404;
                *(_QWORD *)v404 = 0;
                if (v293)
                {
                  if (*v293 == 1)
                    JSC::ArrayBufferView::operator delete();
                  else
                    --*v293;
                }
                v294 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v294)
                {
                  if (*(_DWORD *)v294 == 2)
                    WTF::StringImpl::destroy(v294, (WTF::StringImpl *)v248);
                  else
                    *(_DWORD *)v294 -= 2;
                }
                v295 = 6;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v238])(&v400, v434);
              v82 = v423;
            }
            if (v82 == -1)
              goto LABEL_644;
            v296 = off_1E3395920;
            goto LABEL_643;
          case 5:
          case 6:
            goto LABEL_315;
          case 7:
          case 8:
          case 9:
          case 11:
            goto LABEL_140;
          case 10:
            goto LABEL_363;
          case 12:
            if (*a3)
              v305 = **a3;
            else
              v305 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmHmacKeyParams>(v305, (JSC::VM **)v7, (uint64_t)&v414);
            v82 = v421;
            if (v421)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v295 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v428[0] = 0;
              v429 = -1;
              v306 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v307 = off_1E3395A00[*(unsigned int *)v419];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v307)(&v400, v428, &v418);
                v429 = v306;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v307)(v434, v443, v428);
                v444 = v306;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v345 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v346 = (char)v400;
                v347 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v347;
              }
              else
              {
                v346 = *((_BYTE *)v400 + 16);
                v434[0] = v346;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v429 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v429])(&v400, v428);
              v429 = -1;
              if ((_DWORD)v345)
              {
                if ((_DWORD)v345 != 1)
                  goto LABEL_750;
                v80 = 0;
                v384 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v346;
                *(_QWORD *)(a1 + 8) = v384;
                v295 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if (v421)
                  goto LABEL_750;
                v348 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v400 = off_1E32A9760;
                v401 = v348;
                LOBYTE(v403) = 0;
                *(_DWORD *)v404 = -1;
                v349 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[*(unsigned int *)v419])(v443, &v403, &v418);
                  *(_DWORD *)v404 = v349;
                }
                *(_OWORD *)&v404[8] = *(_OWORD *)&v419[8];
                LOBYTE(v405) = v420;
                v404[8] = v346;
                v350 = WTF::fastMalloc((WTF *)0x40);
                v80 = v350;
                v351 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v350 + 8) = v351;
                *(_BYTE *)(v350 + 16) = v402;
                *(_QWORD *)v350 = off_1E32A9760;
                *(_BYTE *)(v350 + 24) = 0;
                v352 = (WTF::StringImpl *)(v350 + 24);
                *(_DWORD *)(v350 + 32) = -1;
                v353 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 == -1)
                {
                  v356 = *(_OWORD *)&v404[8];
                  *(_BYTE *)(v350 + 56) = v405;
                  *(_OWORD *)(v350 + 40) = v356;
                }
                else
                {
                  ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33959D0[*(unsigned int *)v404])(v443, v352, &v403);
                  *(_DWORD *)(v80 + 32) = v353;
                  v354 = *(unsigned int *)v404;
                  v355 = v405;
                  *(_OWORD *)(v80 + 40) = *(_OWORD *)&v404[8];
                  *(_BYTE *)(v80 + 56) = v355;
                  if ((_DWORD)v354 != -1)
                    ((void (*)(char *, uint64_t *))off_1E33959C0[v354])(v443, &v403);
                }
                *(_DWORD *)v404 = -1;
                v357 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v357)
                {
                  if (*(_DWORD *)v357 == 2)
                    WTF::StringImpl::destroy(v357, v352);
                  else
                    *(_DWORD *)v357 -= 2;
                }
                v295 = 6;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v345])(&v400, v434);
              v82 = v421;
            }
            if (v82 != -1)
            {
              v296 = off_1E3395940;
LABEL_643:
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))v296[v82])(&v400, &v414);
            }
LABEL_644:
            if (v295 == 6)
              goto LABEL_580;
            goto LABEL_356;
          case 20:
            goto LABEL_576;
          case 21:
            goto LABEL_396;
          default:
            goto LABEL_34;
        }
      case 6:
        if ((int)v4 <= 18)
        {
          if ((_DWORD)v4 != 6)
          {
            if ((_DWORD)v4 != 18)
              goto LABEL_34;
            if (*a3)
              v94 = **a3;
            else
              v94 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmHkdfParams>(v94, (JSC::VM **)v7, (uint64_t)&v414);
            v95 = v427;
            if (v427)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v274 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v412[0] = 0;
              v413 = -1;
              v96 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v97 = off_1E3395A00[*(unsigned int *)v419];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v97)(&v400, v412, &v418);
                v413 = v96;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v97)(v434, v443, v412);
                v444 = v96;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v251 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v252 = (char)v400;
                v253 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v253;
              }
              else
              {
                v252 = *((_BYTE *)v400 + 16);
                v434[0] = v252;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v413 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v413])(&v400, v412);
              v413 = -1;
              if ((_DWORD)v251)
              {
                if ((_DWORD)v251 != 1)
                  goto LABEL_750;
                v80 = 0;
                v380 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v252;
                *(_QWORD *)(a1 + 8) = v380;
                v274 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if (v427)
                  goto LABEL_750;
                v254 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v400 = off_1E32A96B8;
                v401 = v254;
                LOBYTE(v403) = 0;
                *(_DWORD *)v404 = -1;
                v255 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[*(unsigned int *)v419])(v443, &v403, &v418);
                  *(_DWORD *)v404 = v255;
                }
                v404[8] = v419[8];
                v404[16] = 0;
                LODWORD(v405) = -1;
                v256 = v420;
                if ((_DWORD)v420 != -1)
                {
                  ((void (*)(char *, _BYTE *, _BYTE *))off_1E3395890[v420])(v443, &v404[16], &v419[16]);
                  LODWORD(v405) = v256;
                }
                LOBYTE(v406) = 0;
                LODWORD(v407) = -1;
                v257 = (int)v422;
                if ((_DWORD)v422 != -1)
                {
                  ((void (*)(char *, unsigned int *, unsigned int *))off_1E3395890[v422])(v443, &v406, &v421);
                  LODWORD(v407) = v257;
                }
                v258 = v423;
                v423 = 0;
                v408 = v258;
                v259 = v424;
                v424 = 0;
                v409 = v259;
                v260 = v425;
                v425 = 0;
                v410 = v260;
                v261 = v426;
                v426 = 0;
                v411 = v261;
                v404[8] = v252;
                v262 = WTF::fastMalloc((WTF *)0x70);
                v80 = v262;
                v263 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v262 + 8) = v263;
                *(_BYTE *)(v262 + 16) = v402;
                *(_QWORD *)v262 = off_1E32A96B8;
                *(_BYTE *)(v262 + 24) = 0;
                *(_DWORD *)(v262 + 32) = -1;
                v264 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 != -1)
                {
                  ((void (*)(char *, uint64_t, uint64_t *))off_1E33959D0[*(unsigned int *)v404])(v443, v262 + 24, &v403);
                  *(_DWORD *)(v80 + 32) = v264;
                }
                v265 = v404[8];
                *(_BYTE *)(v80 + 48) = 0;
                *(_BYTE *)(v80 + 40) = v265;
                *(_DWORD *)(v80 + 56) = -1;
                v266 = v405;
                if ((_DWORD)v405 != -1)
                {
                  ((void (*)(char *))off_1E3395890[v405])(v443);
                  *(_DWORD *)(v80 + 56) = v266;
                }
                *(_BYTE *)(v80 + 64) = 0;
                v267 = (void *)(v80 + 64);
                *(_DWORD *)(v80 + 72) = -1;
                v268 = (int)v407;
                if ((_DWORD)v407 != -1)
                {
                  ((void (*)(char *))off_1E3395890[v407])(v443);
                  *(_DWORD *)(v80 + 72) = v268;
                }
                *(_QWORD *)(v80 + 80) = 0;
                *(_QWORD *)(v80 + 88) = 0;
                v269 = v408;
                v408 = 0;
                *(_QWORD *)(v80 + 80) = v269;
                LODWORD(v269) = (_DWORD)v409;
                LODWORD(v409) = 0;
                *(_DWORD *)(v80 + 88) = (_DWORD)v269;
                LODWORD(v269) = HIDWORD(v409);
                HIDWORD(v409) = 0;
                *(_DWORD *)(v80 + 92) = (_DWORD)v269;
                *(_QWORD *)(v80 + 96) = 0;
                *(_QWORD *)(v80 + 104) = 0;
                v270 = v410;
                v410 = 0;
                *(_QWORD *)(v80 + 96) = v270;
                LODWORD(v270) = v411;
                LODWORD(v411) = 0;
                *(_DWORD *)(v80 + 104) = (_DWORD)v270;
                LODWORD(v270) = HIDWORD(v411);
                HIDWORD(v411) = 0;
                *(_DWORD *)(v80 + 108) = (_DWORD)v270;
                v271 = v410;
                if (v410)
                {
                  v410 = 0;
                  LODWORD(v411) = 0;
                  WTF::fastFree(v271, v267);
                }
                v272 = v408;
                if (v408)
                {
                  v408 = 0;
                  LODWORD(v409) = 0;
                  WTF::fastFree(v272, v267);
                }
                if ((_DWORD)v407 != -1)
                  ((void (*)(char *, unsigned int *))off_1E3395880[v407])(v443, &v406);
                LODWORD(v407) = -1;
                if ((_DWORD)v405 != -1)
                  ((void (*)(char *, _BYTE *))off_1E3395880[v405])(v443, &v404[16]);
                LODWORD(v405) = -1;
                if (*(_DWORD *)v404 != -1)
                  ((void (*)(char *, uint64_t *))off_1E33959C0[*(unsigned int *)v404])(v443, &v403);
                *(_DWORD *)v404 = -1;
                v273 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v273)
                {
                  if (*(_DWORD *)v273 == 2)
                    WTF::StringImpl::destroy(v273, (WTF::StringImpl *)v267);
                  else
                    *(_DWORD *)v273 -= 2;
                }
                v274 = 7;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v251])(&v400, v434);
              v95 = v427;
            }
            if (v95 == -1)
              goto LABEL_503;
            v275 = off_1E3395980;
LABEL_502:
            ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))v275[v95])(&v400, &v414);
LABEL_503:
            if (v274 != 7)
              goto LABEL_356;
            goto LABEL_580;
          }
          if (*a3)
            v195 = **a3;
          else
            v195 = 0;
          WTF::AtomStringImpl::addLiteral();
          v196 = v414;
          v198 = JSC::JSObject::get(v195, (JSC::JSGlobalObject *)v7, (unint64_t)v414);
          if (v196)
          {
            if (*(_DWORD *)v196 == 2)
              WTF::StringImpl::destroy(v196, v197);
            else
              *(_DWORD *)v196 -= 2;
          }
          if (*a3)
            v199 = **a3;
          else
            v199 = 0;
          WTF::AtomStringImpl::addLiteral();
          v200 = v414;
          v202 = JSC::JSObject::get(v199, (JSC::JSGlobalObject *)v7, (unint64_t)v414);
          if (v200)
          {
            if (*(_DWORD *)v200 == 2)
              WTF::StringImpl::destroy(v200, v201);
            else
              *(_DWORD *)v200 -= 2;
          }
          v203 = v7[7];
          v204 = *((_QWORD *)v203 + 1882);
          if (v204)
          {
            v205 = *(unsigned int *)(v204 + 60);
            v206 = *(_QWORD *)(v204 + 24);
            if (v206 < *(_QWORD *)(v204 + 32))
            {
              *(_QWORD *)(v204 + 24) = v206 + v205;
              goto LABEL_338;
            }
            v390 = (_QWORD *)*((_QWORD *)v203 + 1882);
            v206 = *(_QWORD *)(v204 + 40);
            if ((v206 & 1) == 0)
            {
              v378 = *(_QWORD *)(v206 + 8) ^ v390[6];
              v390[4] = v206 + HIDWORD(v378);
              v390[5] = v206 + (int)v378;
              v390[3] = v206 + v205;
              goto LABEL_338;
            }
            JSC::sanitizeStackForVM();
            Slow = JSC::LocalAllocator::allocateSlowCase();
          }
          else
          {
            Slow = JSC::CompleteSubspace::allocateSlow();
          }
          v206 = Slow;
LABEL_338:
          *(_DWORD *)v206 = 0;
          *(_DWORD *)v206 = *((_DWORD *)v7 + 212);
          *(_DWORD *)(v206 + 4) = 16783360;
          *(_OWORD *)(v206 + 8) = 0u;
          *(_OWORD *)(v206 + 24) = 0u;
          *(_OWORD *)(v206 + 40) = 0u;
          *(_QWORD *)(v206 + 56) = 0;
          if (*((_BYTE *)v203 + 755))
            __dmb(0xAu);
          WTF::AtomStringImpl::addLiteral();
          v207 = v414;
          v414 = 0;
          v415 = (WTF::StringImpl *)v206;
          v416 = -1;
          v417 = 0x1000000;
          v418 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v206, (JSC::VM *)v9, (unint64_t)v207, v198, 0, (uint64_t)&v414);
          if (v207)
          {
            if (*(_DWORD *)v207 == 2)
              WTF::StringImpl::destroy(v207, v208);
            else
              *(_DWORD *)v207 -= 2;
          }
          WTF::AtomStringImpl::addLiteral();
          v209 = v414;
          v414 = 0;
          v415 = (WTF::StringImpl *)v206;
          v416 = -1;
          v417 = 0x1000000;
          v418 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v206, (JSC::VM *)v9, (unint64_t)v209, v202, 0, (uint64_t)&v414);
          if (v209)
          {
            if (*(_DWORD *)v209 == 2)
              WTF::StringImpl::destroy(v209, v210);
            else
              *(_DWORD *)v209 -= 2;
          }
          WebCore::convertDictionary<WebCore::CryptoAlgorithmEcdhKeyDeriveParams>((JSC::JSCell *)v206, (JSC::VM **)v7, (uint64_t)&v414);
          v86 = *(_DWORD *)v419;
          if (*(_DWORD *)v419)
          {
            v80 = 0;
            *(_BYTE *)a1 = 37;
            *(_QWORD *)(a1 + 8) = 0;
            *(_DWORD *)(a1 + 16) = 1;
          }
          else
          {
            v211 = v415;
            if (v415)
              *(_DWORD *)v415 += 2;
            v212 = v416;
            v213 = v418;
            v418 = 0;
            v214 = WTF::fastMalloc((WTF *)0x20);
            v80 = v214;
            if (v211)
            {
              v216 = *(_DWORD *)v211;
              *(_DWORD *)v211 += 2;
              *(_BYTE *)(v214 + 16) = v212;
              *(_QWORD *)v214 = off_1E3272158;
              *(_QWORD *)(v214 + 8) = v211;
              *(_QWORD *)(v214 + 24) = v213;
              if (v216)
                *(_DWORD *)v211 = v216;
              else
                WTF::StringImpl::destroy(v211, v215);
            }
            else
            {
              *(_BYTE *)(v214 + 16) = v212;
              *(_QWORD *)v214 = off_1E3272158;
              *(_QWORD *)(v214 + 8) = 0;
              *(_QWORD *)(v214 + 24) = v213;
            }
          }
          v92 = *(unsigned int *)v419;
          if (*(_DWORD *)v419 != -1)
          {
            v93 = off_1E3395960;
            goto LABEL_354;
          }
LABEL_355:
          if (v86)
          {
LABEL_356:
            if (v80)
              (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
            goto LABEL_37;
          }
LABEL_580:
          *(_BYTE *)(v80 + 16) = v4;
          *(_QWORD *)a1 = v80;
LABEL_581:
          *(_DWORD *)(a1 + 16) = 0;
          goto LABEL_37;
        }
        if ((_DWORD)v4 == 19)
        {
          if (*a3)
            v217 = **a3;
          else
            v217 = 0;
          WebCore::convertDictionary<WebCore::CryptoAlgorithmPbkdf2Params>(v217, (JSC::VM **)v7, (uint64_t)&v414);
          v95 = (int)v424;
          if ((_DWORD)v424)
          {
            v80 = 0;
            *(_BYTE *)a1 = 37;
            *(_QWORD *)(a1 + 8) = 0;
            v274 = 1;
            *(_DWORD *)(a1 + 16) = 1;
          }
          else
          {
            v398[0] = 0;
            v399 = -1;
            v218 = v420;
            if ((_DWORD)v420 == -1)
            {
              v443[0] = 0;
              v444 = -1;
            }
            else
            {
              v219 = off_1E3395A00[v420];
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, _BYTE *))v219)(&v400, v398, &v419[16]);
              v399 = v218;
              v443[0] = 0;
              v444 = -1;
              ((void (*)(char *, char *, char *))v219)(v434, v443, v398);
              v444 = v218;
            }
            WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
            if (v444 != -1)
              ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
            v444 = -1;
            v276 = v402;
            if (v402)
            {
              if (v402 != 1)
                goto LABEL_750;
              v277 = (char)v400;
              v278 = v401;
              v401 = 0;
              v434[0] = (char)v400;
              v435 = v278;
            }
            else
            {
              v277 = *((_BYTE *)v400 + 16);
              v434[0] = v277;
            }
            v436 = v402;
            ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
            if (v399 != -1)
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v399])(&v400, v398);
            v399 = -1;
            if ((_DWORD)v276)
            {
              if ((_DWORD)v276 != 1)
                goto LABEL_750;
              v80 = 0;
              v381 = v435;
              v435 = 0;
              *(_BYTE *)a1 = v277;
              *(_QWORD *)(a1 + 8) = v381;
              v274 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              if ((_DWORD)v424)
                goto LABEL_750;
              v279 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              LOBYTE(v402) = v416;
              v400 = off_1E32CB620;
              v401 = v279;
              LOBYTE(v403) = 0;
              *(_DWORD *)v404 = -1;
              v280 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 != -1)
              {
                ((void (*)(char *, uint64_t *, uint64_t *))off_1E3395890[*(unsigned int *)v419])(v443, &v403, &v418);
                *(_DWORD *)v404 = v280;
              }
              *(_QWORD *)&v404[8] = *(_QWORD *)&v419[8];
              v404[16] = 0;
              LODWORD(v405) = -1;
              v281 = v420;
              if ((_DWORD)v420 != -1)
              {
                ((void (*)(char *, _BYTE *, _BYTE *))off_1E33959D0[v420])(v443, &v404[16], &v419[16]);
                LODWORD(v405) = v281;
              }
              v407 = v422;
              v282 = v423;
              v422 = 0;
              v423 = 0;
              v408 = v282;
              LOBYTE(v406) = v277;
              v283 = WTF::fastMalloc((WTF *)0x58);
              v80 = v283;
              v284 = v401;
              if (v401)
                *(_DWORD *)v401 += 2;
              *(_QWORD *)(v283 + 8) = v284;
              *(_BYTE *)(v283 + 16) = v402;
              *(_QWORD *)v283 = off_1E32CB620;
              *(_BYTE *)(v283 + 24) = 0;
              *(_DWORD *)(v283 + 32) = -1;
              v285 = *(_DWORD *)v404;
              if (*(_DWORD *)v404 != -1)
              {
                ((void (*)(char *, uint64_t, uint64_t *))off_1E3395890[*(unsigned int *)v404])(v443, v283 + 24, &v403);
                *(_DWORD *)(v80 + 32) = v285;
              }
              v286 = *(_QWORD *)&v404[8];
              *(_BYTE *)(v80 + 48) = 0;
              v287 = (void *)(v80 + 48);
              *(_QWORD *)(v80 + 40) = v286;
              *(_DWORD *)(v80 + 56) = -1;
              v288 = v405;
              if ((_DWORD)v405 != -1)
              {
                ((void (*)(char *))off_1E33959D0[v405])(v443);
                *(_DWORD *)(v80 + 56) = v288;
              }
              *(_BYTE *)(v80 + 64) = v406;
              *(_QWORD *)(v80 + 72) = 0;
              *(_QWORD *)(v80 + 80) = 0;
              v289 = v407;
              v407 = 0;
              *(_QWORD *)(v80 + 72) = v289;
              LODWORD(v289) = (_DWORD)v408;
              LODWORD(v408) = 0;
              *(_DWORD *)(v80 + 80) = (_DWORD)v289;
              LODWORD(v289) = HIDWORD(v408);
              HIDWORD(v408) = 0;
              *(_DWORD *)(v80 + 84) = (_DWORD)v289;
              v290 = v407;
              if (v407)
              {
                v407 = 0;
                LODWORD(v408) = 0;
                WTF::fastFree(v290, v287);
              }
              if ((_DWORD)v405 != -1)
                ((void (*)(char *, _BYTE *))off_1E33959C0[v405])(v443, &v404[16]);
              LODWORD(v405) = -1;
              if (*(_DWORD *)v404 != -1)
                ((void (*)(char *, uint64_t *))off_1E3395880[*(unsigned int *)v404])(v443, &v403);
              *(_DWORD *)v404 = -1;
              v291 = v401;
              v400 = off_1E3226840;
              v401 = 0;
              if (v291)
              {
                if (*(_DWORD *)v291 == 2)
                  WTF::StringImpl::destroy(v291, (WTF::StringImpl *)v287);
                else
                  *(_DWORD *)v291 -= 2;
              }
              v274 = 7;
            }
            ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v276])(&v400, v434);
            v95 = (int)v424;
          }
          if (v95 == -1)
            goto LABEL_503;
          v275 = off_1E3395990;
          goto LABEL_502;
        }
        if ((_DWORD)v4 != 21)
          goto LABEL_34;
        if (*a3)
          v105 = **a3;
        else
          v105 = 0;
        WTF::AtomStringImpl::addLiteral();
        v106 = v414;
        v108 = JSC::JSObject::get(v105, (JSC::JSGlobalObject *)v7, (unint64_t)v414);
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, v107);
          else
            *(_DWORD *)v106 -= 2;
        }
        if (*a3)
          v109 = **a3;
        else
          v109 = 0;
        WTF::AtomStringImpl::addLiteral();
        v110 = v414;
        v112 = JSC::JSObject::get(v109, (JSC::JSGlobalObject *)v7, (unint64_t)v414);
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
            WTF::StringImpl::destroy(v110, v111);
          else
            *(_DWORD *)v110 -= 2;
        }
        v113 = v7[7];
        v114 = *((_QWORD *)v113 + 1882);
        if (v114)
        {
          v115 = *(unsigned int *)(v114 + 60);
          v116 = *(_QWORD *)(v114 + 24);
          if (v116 < *(_QWORD *)(v114 + 32))
          {
            *(_QWORD *)(v114 + 24) = v116 + v115;
            goto LABEL_185;
          }
          v389 = (_QWORD *)*((_QWORD *)v113 + 1882);
          v116 = *(_QWORD *)(v114 + 40);
          if ((v116 & 1) == 0)
          {
            v377 = *(_QWORD *)(v116 + 8) ^ v389[6];
            v389[4] = v116 + HIDWORD(v377);
            v389[5] = v116 + (int)v377;
            v389[3] = v116 + v115;
            goto LABEL_185;
          }
          JSC::sanitizeStackForVM();
          v387 = JSC::LocalAllocator::allocateSlowCase();
        }
        else
        {
          v387 = JSC::CompleteSubspace::allocateSlow();
        }
        v116 = v387;
LABEL_185:
        *(_DWORD *)v116 = 0;
        *(_DWORD *)v116 = *((_DWORD *)v7 + 212);
        *(_DWORD *)(v116 + 4) = 16783360;
        *(_OWORD *)(v116 + 8) = 0u;
        *(_OWORD *)(v116 + 24) = 0u;
        *(_OWORD *)(v116 + 40) = 0u;
        *(_QWORD *)(v116 + 56) = 0;
        if (*((_BYTE *)v113 + 755))
          __dmb(0xAu);
        WTF::AtomStringImpl::addLiteral();
        v117 = v414;
        v414 = 0;
        v415 = (WTF::StringImpl *)v116;
        v416 = -1;
        v417 = 0x1000000;
        v418 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v116, (JSC::VM *)v9, (unint64_t)v117, v108, 0, (uint64_t)&v414);
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
            WTF::StringImpl::destroy(v117, v118);
          else
            *(_DWORD *)v117 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v119 = v414;
        v414 = 0;
        v415 = (WTF::StringImpl *)v116;
        v416 = -1;
        v417 = 0x1000000;
        v418 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v116, (JSC::VM *)v9, (unint64_t)v119, v112, 0, (uint64_t)&v414);
        if (v119)
        {
          if (*(_DWORD *)v119 == 2)
            WTF::StringImpl::destroy(v119, v120);
          else
            *(_DWORD *)v119 -= 2;
        }
        WebCore::convertDictionary<WebCore::CryptoAlgorithmX25519Params>((JSC::JSCell *)v116, (JSC::VM **)v7, (uint64_t)&v414);
        v86 = *(_DWORD *)v419;
        if (*(_DWORD *)v419)
        {
          v80 = 0;
          *(_BYTE *)a1 = 37;
          *(_QWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 16) = 1;
        }
        else
        {
          v121 = v415;
          if (v415)
            *(_DWORD *)v415 += 2;
          v122 = v416;
          v123 = v418;
          v418 = 0;
          v124 = WTF::fastMalloc((WTF *)0x20);
          v80 = v124;
          if (v121)
          {
            v126 = *(_DWORD *)v121;
            *(_DWORD *)v121 += 2;
            *(_BYTE *)(v124 + 16) = v122;
            *(_QWORD *)v124 = off_1E3345B48;
            *(_QWORD *)(v124 + 8) = v121;
            *(_QWORD *)(v124 + 24) = v123;
            if (v126)
              *(_DWORD *)v121 = v126;
            else
              WTF::StringImpl::destroy(v121, v125);
          }
          else
          {
            *(_BYTE *)(v124 + 16) = v122;
            *(_QWORD *)v124 = off_1E3345B48;
            *(_QWORD *)(v124 + 8) = 0;
            *(_QWORD *)(v124 + 24) = v123;
          }
        }
        v92 = *(unsigned int *)v419;
        if (*(_DWORD *)v419 != -1)
        {
          v93 = off_1E3395970;
          goto LABEL_354;
        }
        goto LABEL_355;
      case 7:
        switch((int)v4)
        {
          case 1:
LABEL_110:
            v73 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
            if (v73
              && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 136))(v73) + 440) & 0x80000000000) != 0)
            {
              goto LABEL_583;
            }
            goto LABEL_576;
          case 2:
          case 3:
          case 4:
            if (*a3)
              v76 = **a3;
            else
              v76 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaHashedImportParams>(v76, (JSC::VM **)v7, (uint64_t)&v414);
            v77 = *(_DWORD *)&v419[16];
            if (*(_DWORD *)&v419[16])
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v320 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v396[0] = 0;
              v397 = -1;
              v78 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v79 = off_1E3395A00[*(unsigned int *)v419];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v79)(&v400, v396, &v418);
                v397 = v78;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v79)(v434, v443, v396);
                v444 = v78;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v309 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v310 = (char)v400;
                v311 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v311;
              }
              else
              {
                v310 = *((_BYTE *)v400 + 16);
                v434[0] = v310;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v397 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v397])(&v400, v396);
              v397 = -1;
              if ((_DWORD)v309)
              {
                if ((_DWORD)v309 != 1)
                  goto LABEL_750;
                v80 = 0;
                v382 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v310;
                *(_QWORD *)(a1 + 8) = v382;
                v320 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if (*(_DWORD *)&v419[16])
                  goto LABEL_750;
                v312 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v400 = off_1E32DCC20;
                v401 = v312;
                LOBYTE(v403) = 0;
                *(_DWORD *)v404 = -1;
                v313 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[*(unsigned int *)v419])(v443, &v403, &v418);
                  *(_DWORD *)v404 = v313;
                }
                v404[8] = v310;
                v314 = WTF::fastMalloc((WTF *)0x30);
                v80 = v314;
                v315 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v314 + 8) = v315;
                *(_BYTE *)(v314 + 16) = v402;
                *(_QWORD *)v314 = off_1E32DCC20;
                *(_BYTE *)(v314 + 24) = 0;
                v316 = (WTF::StringImpl *)(v314 + 24);
                *(_DWORD *)(v314 + 32) = -1;
                v317 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 == -1)
                {
                  *(_BYTE *)(v314 + 40) = v404[8];
                }
                else
                {
                  ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33959D0[*(unsigned int *)v404])(v443, v316, &v403);
                  *(_DWORD *)(v80 + 32) = v317;
                  v318 = *(unsigned int *)v404;
                  *(_BYTE *)(v80 + 40) = v404[8];
                  if ((_DWORD)v318 != -1)
                    ((void (*)(char *, uint64_t *))off_1E33959C0[v318])(v443, &v403);
                }
                *(_DWORD *)v404 = -1;
                v319 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v319)
                {
                  if (*(_DWORD *)v319 == 2)
                    WTF::StringImpl::destroy(v319, v316);
                  else
                    *(_DWORD *)v319 -= 2;
                }
                v320 = 8;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v309])(&v400, v434);
              v77 = *(_DWORD *)&v419[16];
            }
            if (v77 == -1)
              goto LABEL_682;
            v321 = off_1E33959A0;
            goto LABEL_681;
          case 5:
          case 6:
LABEL_315:
            if (*a3)
              v188 = **a3;
            else
              v188 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmEcKeyParams>(v188, (JSC::VM **)v7, (uint64_t)&v414);
            v86 = *(_DWORD *)v419;
            if (*(_DWORD *)v419)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v189 = v415;
              if (v415)
                *(_DWORD *)v415 += 2;
              v190 = v416;
              v191 = v418;
              v418 = 0;
              v192 = WTF::fastMalloc((WTF *)0x20);
              v80 = v192;
              if (v189)
              {
                v194 = *(_DWORD *)v189;
                *(_DWORD *)v189 += 2;
                *(_BYTE *)(v192 + 16) = v190;
                *(_QWORD *)v192 = off_1E3272120;
                *(_QWORD *)(v192 + 8) = v189;
                *(_QWORD *)(v192 + 24) = v191;
                if (v194)
                  *(_DWORD *)v189 = v194;
                else
                  WTF::StringImpl::destroy(v189, v193);
              }
              else
              {
                *(_BYTE *)(v192 + 16) = v190;
                *(_QWORD *)v192 = off_1E3272120;
                *(_QWORD *)(v192 + 8) = 0;
                *(_QWORD *)(v192 + 24) = v191;
              }
            }
            v92 = *(unsigned int *)v419;
            if (*(_DWORD *)v419 == -1)
              goto LABEL_355;
            v93 = off_1E3395950;
            goto LABEL_354;
          case 7:
          case 8:
          case 9:
          case 11:
          case 18:
          case 19:
          case 20:
            goto LABEL_576;
          case 10:
            v325 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
            if (!v325
              || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v325 + 136))(v325) + 440) & 0x40000000000) == 0)
            {
              goto LABEL_576;
            }
            goto LABEL_583;
          case 12:
            if (*a3)
              v322 = **a3;
            else
              v322 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmHmacKeyParams>(v322, (JSC::VM **)v7, (uint64_t)&v414);
            v77 = v421;
            if (v421)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v320 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v394[0] = 0;
              v395 = -1;
              v323 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v324 = off_1E3395A00[*(unsigned int *)v419];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v324)(&v400, v394, &v418);
                v395 = v323;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v324)(v434, v443, v394);
                v444 = v323;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v358 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v359 = (char)v400;
                v360 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v360;
              }
              else
              {
                v359 = *((_BYTE *)v400 + 16);
                v434[0] = v359;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v395 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v395])(&v400, v394);
              v395 = -1;
              if ((_DWORD)v358)
              {
                if ((_DWORD)v358 != 1)
                  goto LABEL_750;
                v80 = 0;
                v386 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v359;
                *(_QWORD *)(a1 + 8) = v386;
                v320 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if (v421)
                  goto LABEL_750;
                v361 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v400 = off_1E32A9760;
                v401 = v361;
                LOBYTE(v403) = 0;
                *(_DWORD *)v404 = -1;
                v362 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[*(unsigned int *)v419])(v443, &v403, &v418);
                  *(_DWORD *)v404 = v362;
                }
                *(_OWORD *)&v404[8] = *(_OWORD *)&v419[8];
                LOBYTE(v405) = v420;
                v404[8] = v359;
                v363 = WTF::fastMalloc((WTF *)0x40);
                v80 = v363;
                v364 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v363 + 8) = v364;
                *(_BYTE *)(v363 + 16) = v402;
                *(_QWORD *)v363 = off_1E32A9760;
                *(_BYTE *)(v363 + 24) = 0;
                v365 = (WTF::StringImpl *)(v363 + 24);
                *(_DWORD *)(v363 + 32) = -1;
                v366 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 == -1)
                {
                  v369 = *(_OWORD *)&v404[8];
                  *(_BYTE *)(v363 + 56) = v405;
                  *(_OWORD *)(v363 + 40) = v369;
                }
                else
                {
                  ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33959D0[*(unsigned int *)v404])(v443, v365, &v403);
                  *(_DWORD *)(v80 + 32) = v366;
                  v367 = *(unsigned int *)v404;
                  v368 = v405;
                  *(_OWORD *)(v80 + 40) = *(_OWORD *)&v404[8];
                  *(_BYTE *)(v80 + 56) = v368;
                  if ((_DWORD)v367 != -1)
                    ((void (*)(char *, uint64_t *))off_1E33959C0[v367])(v443, &v403);
                }
                *(_DWORD *)v404 = -1;
                v370 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v370)
                {
                  if (*(_DWORD *)v370 == 2)
                    WTF::StringImpl::destroy(v370, v365);
                  else
                    *(_DWORD *)v370 -= 2;
                }
                v320 = 8;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v358])(&v400, v434);
              v77 = v421;
            }
            if (v77 != -1)
            {
              v321 = off_1E3395940;
LABEL_681:
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))v321[v77])(&v400, &v414);
            }
LABEL_682:
            if (v320 == 8)
              goto LABEL_580;
            goto LABEL_356;
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
            goto LABEL_34;
          case 21:
LABEL_396:
            v233 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            v233[1] = 0;
            v233[2] = 21;
            *v233 = off_1E3226840;
            *(_QWORD *)a1 = v233;
            goto LABEL_581;
          default:
            goto LABEL_132;
        }
      case 8:
      case 9:
        if ((_DWORD)v4 == 11)
          goto LABEL_576;
        goto LABEL_34;
      case 10:
        switch((int)v4)
        {
          case 7:
          case 8:
          case 9:
          case 11:
            goto LABEL_140;
          case 10:
LABEL_363:
            v220 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
            if (v220
              && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 136))(v220) + 440) & 0x40000000000) != 0)
            {
LABEL_583:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v330 = v414;
              *(_BYTE *)a1 = 6;
              *(_QWORD *)(a1 + 8) = v330;
              goto LABEL_36;
            }
LABEL_140:
            if (!*a3)
              goto LABEL_751;
            v85 = **a3;
            goto LABEL_142;
          case 12:
            if (*a3)
              v234 = **a3;
            else
              v234 = 0;
            WebCore::convertDictionary<WebCore::CryptoAlgorithmHmacKeyParams>(v234, (JSC::VM **)v7, (uint64_t)&v414);
            v235 = v421;
            if (v421)
            {
              v80 = 0;
              *(_BYTE *)a1 = 37;
              *(_QWORD *)(a1 + 8) = 0;
              v344 = 1;
              *(_DWORD *)(a1 + 16) = 1;
            }
            else
            {
              v392[0] = 0;
              v393 = -1;
              v236 = *(_DWORD *)v419;
              if (*(_DWORD *)v419 == -1)
              {
                v443[0] = 0;
                v444 = -1;
              }
              else
              {
                v237 = off_1E3395A00[*(unsigned int *)v419];
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *, uint64_t *))v237)(&v400, v392, &v418);
                v393 = v236;
                v443[0] = 0;
                v444 = -1;
                ((void (*)(char *, char *, char *))v237)(v434, v443, v392);
                v444 = v236;
              }
              WebCore::normalizeCryptoAlgorithmParameters(&v400, v7, v443, 4);
              v7 = off_1E33959C0;
              if (v444 != -1)
                ((void (*)(char *, char *))off_1E33959C0[v444])(v434, v443);
              v444 = -1;
              v331 = v402;
              if (v402)
              {
                if (v402 != 1)
                  goto LABEL_750;
                v332 = (char)v400;
                v333 = v401;
                v401 = 0;
                v434[0] = (char)v400;
                v435 = v333;
              }
              else
              {
                v332 = *((_BYTE *)v400 + 16);
                v434[0] = v332;
              }
              v436 = v402;
              ((void (*)(_BYTE *, void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden)))off_1E33959F0[v402])(v445, &v400);
              if (v393 != -1)
                ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33959C0[v393])(&v400, v392);
              v393 = -1;
              if ((_DWORD)v331)
              {
                if ((_DWORD)v331 != 1)
                  goto LABEL_750;
                v80 = 0;
                v383 = v435;
                v435 = 0;
                *(_BYTE *)a1 = v332;
                *(_QWORD *)(a1 + 8) = v383;
                v344 = 1;
                *(_DWORD *)(a1 + 16) = 1;
              }
              else
              {
                if (v421)
                  goto LABEL_750;
                v334 = v415;
                if (v415)
                  *(_DWORD *)v415 += 2;
                LOBYTE(v402) = v416;
                v400 = off_1E32A9760;
                v401 = v334;
                LOBYTE(v403) = 0;
                *(_DWORD *)v404 = -1;
                v335 = *(_DWORD *)v419;
                if (*(_DWORD *)v419 != -1)
                {
                  ((void (*)(char *, uint64_t *, uint64_t *))off_1E33959D0[*(unsigned int *)v419])(v443, &v403, &v418);
                  *(_DWORD *)v404 = v335;
                }
                *(_OWORD *)&v404[8] = *(_OWORD *)&v419[8];
                LOBYTE(v405) = v420;
                v404[8] = v332;
                v336 = WTF::fastMalloc((WTF *)0x40);
                v80 = v336;
                v337 = v401;
                if (v401)
                  *(_DWORD *)v401 += 2;
                *(_QWORD *)(v336 + 8) = v337;
                *(_BYTE *)(v336 + 16) = v402;
                *(_QWORD *)v336 = off_1E32A9760;
                *(_BYTE *)(v336 + 24) = 0;
                v338 = (WTF::StringImpl *)(v336 + 24);
                *(_DWORD *)(v336 + 32) = -1;
                v339 = *(_DWORD *)v404;
                if (*(_DWORD *)v404 == -1)
                {
                  v342 = *(_OWORD *)&v404[8];
                  *(_BYTE *)(v336 + 56) = v405;
                  *(_OWORD *)(v336 + 40) = v342;
                }
                else
                {
                  ((void (*)(char *, WTF::StringImpl *, uint64_t *))off_1E33959D0[*(unsigned int *)v404])(v443, v338, &v403);
                  *(_DWORD *)(v80 + 32) = v339;
                  v340 = *(unsigned int *)v404;
                  v341 = v405;
                  *(_OWORD *)(v80 + 40) = *(_OWORD *)&v404[8];
                  *(_BYTE *)(v80 + 56) = v341;
                  if ((_DWORD)v340 != -1)
                    ((void (*)(char *, uint64_t *))off_1E33959C0[v340])(v443, &v403);
                }
                *(_DWORD *)v404 = -1;
                v343 = v401;
                v400 = off_1E3226840;
                v401 = 0;
                if (v343)
                {
                  if (*(_DWORD *)v343 == 2)
                    WTF::StringImpl::destroy(v343, v338);
                  else
                    *(_DWORD *)v343 -= 2;
                }
                v344 = 10;
              }
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), char *))off_1E33958E0[v331])(&v400, v434);
              v235 = v421;
            }
            if (v235 != -1)
              ((void (*)(void (***)(WebCore::CryptoAlgorithmAesCbcCfbParams *__hidden), WTF::StringImpl **))off_1E3395940[v235])(&v400, &v414);
            if (v344 == 10)
              goto LABEL_580;
            goto LABEL_356;
          case 18:
          case 19:
            goto LABEL_576;
          default:
            goto LABEL_34;
        }
      default:
LABEL_132:
        v80 = 0;
        goto LABEL_580;
    }
  }
  if ((_DWORD)v4 != 20)
    goto LABEL_108;
  v71 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
  if (v71)
  {
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 136))(v71) + 472) & 0x40000) != 0)
      goto LABEL_108;
  }
LABEL_34:
  v37 = 6;
LABEL_35:
  *(_BYTE *)a1 = v37;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_36:
  *(_DWORD *)(a1 + 16) = 1;
LABEL_37:
  if (v440 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E33959B0[v440])(&v414, v437);
}

uint64_t *WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::DeferredPromise *,WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::DeferredPromise *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_36;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_26;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_31:
      result = WTF::HashTable<WebCore::DeferredPromise *,WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::DeferredPromise *>>::rehash(a2, v28, v16);
      v16 = result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_31;
  }
LABEL_35:
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_36:
  *v7 = (uint64_t)v16;
  v7[1] = v30;
  *((_BYTE *)v7 + 16) = v29;
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::decrypt(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  unsigned __int8 *v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  objc_class *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  WTF::StringImpl **v48;
  unsigned int *v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  _QWORD *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  objc_class *v72;
  int v73;
  int v74;
  JSC::JSCell **v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl **v80;

  if (a4[12] - 7 > 1)
    goto LABEL_14;
  v12 = a1[1];
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    v14 = v13 - 96;
    if (v13)
      v15 = v13 - 96;
    else
      v15 = 0;
    if (*(_BYTE *)(v15 + 280))
      goto LABEL_14;
  }
  else
  {
    if (MEMORY[0x118])
      goto LABEL_14;
    v14 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v14 + 248))(v14, 8, 1, &v77, 0);
  v17 = v77;
  v77 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(_QWORD *)(a1[1] + 8);
  if (v18)
    v19 = v18 - 96;
  else
    v19 = 0;
  *(_BYTE *)(v19 + 280) = 1;
LABEL_14:
  LOBYTE(v75) = 0;
  v76 = -1;
  v20 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E33959D0[v20])(&v77, &v75, a3);
    v76 = v20;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v77, a2, &v75, 1);
  if (v76 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v76])(&v69, &v75);
  v76 = -1;
  if (!v79)
  {
    v25 = (unsigned __int8 *)v77;
    v77 = 0;
    v26 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v26 == -1)
      goto LABEL_95;
    v69 = (WTF::StringImpl *)&v72;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33959E0[v26])(&v69, a5);
    v28 = v27;
    v29 = 0;
    v72 = 0;
    v73 = 0;
    v74 = (int)v27;
    if (v27)
    {
      if ((unint64_t)v27 >> 32)
      {
LABEL_96:
        __break(0xC471u);
        return result;
      }
      v30 = result;
      v31 = (objc_class *)WTF::fastMalloc(v27);
      v29 = v31;
      v32 = 0;
      v73 = (int)v28;
      v72 = v31;
      do
      {
        *((_BYTE *)v32 + (_QWORD)v31) = *((_BYTE *)v32 + (_QWORD)v30);
        v32 = (WTF *)((char *)v32 + 1);
      }
      while (v28 != v32);
    }
    if (v25[16] != a4[12])
    {
      v33 = *a6;
LABEL_37:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v33, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v69, 0);
      v35 = v69;
      v69 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::destroy(v35, v34);
          if (!v29)
            goto LABEL_80;
          goto LABEL_79;
        }
        *(_DWORD *)v35 -= 2;
        if (v29)
        {
LABEL_79:
          v72 = 0;
          v73 = 0;
          WTF::fastFree(v29, v34);
        }
LABEL_80:
        result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v25 + 8))(v25);
        goto LABEL_81;
      }
LABEL_78:
      if (v29)
        goto LABEL_79;
      goto LABEL_80;
    }
    if ((a4[16] & 2) == 0)
    {
      v33 = *a6;
      goto LABEL_37;
    }
    v36 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v36 != -1)
    {
      v69 = (WTF::StringImpl *)&v71;
      v80 = &v69;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v80, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v80, a4[12]);
    v71 = *a6;
    WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v69, a1 + 5, &v71, a6);
    v37 = a1[3];
    if (v37)
      goto LABEL_99;
    v37 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = a1;
    v39 = (unsigned int *)a1[3];
    a1[3] = v37;
    if (!v39)
      goto LABEL_99;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v38);
    }
    v37 = a1[3];
    if (v37)
    {
LABEL_99:
      do
        v42 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v42 + 1, (unsigned int *)v37));
      v43 = v71;
      do
        v44 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v44 + 1, (unsigned int *)v37));
      v45 = v71;
      do
        v46 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v46 + 1, (unsigned int *)v37));
      v47 = 0;
    }
    else
    {
      v47 = 1;
      v45 = v71;
      v43 = v71;
    }
    v48 = v80;
    v49 = (unsigned int *)(a4 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v69 = (WTF::StringImpl *)a4;
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v51 = &off_1E3395C50;
    v51[1] = v43;
    v51[2] = v37;
    v68 = v51;
    v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v52 = &off_1E3395C78;
    v52[1] = v45;
    v52[2] = v37;
    v67 = v52;
    v53 = *(_QWORD *)(a1[1] + 8);
    if (v53)
      v54 = v53 - 96;
    else
      v54 = 0;
    (*((void (**)(WTF::StringImpl **, unsigned __int8 *, WTF::StringImpl **, objc_class **, _QWORD **, _QWORD **, uint64_t, _QWORD))*v48
     + 4))(v48, v25, &v69, &v72, &v68, &v67, v54, a1[4]);
    v55 = v67;
    v67 = 0;
    if (v55)
      (*(void (**)(_QWORD *))(*v55 + 8))(v55);
    v56 = v68;
    v68 = 0;
    if (v56)
      (*(void (**)(_QWORD *))(*v56 + 8))(v56);
    v57 = (unsigned int *)v69;
    v69 = 0;
    if (!v57)
      goto LABEL_68;
    v58 = v57 + 2;
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v57 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
      if ((v47 & 1) == 0)
      {
        do
        {
LABEL_69:
          v61 = __ldaxr((unsigned int *)v37);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, (unsigned int *)v37));
        if (!v62)
        {
          atomic_store(1u, (unsigned int *)v37);
          WTF::fastFree((WTF *)v37, v34);
        }
      }
    }
    else
    {
LABEL_68:
      if ((v47 & 1) == 0)
        goto LABEL_69;
    }
    v63 = (unsigned int *)v80;
    v80 = 0;
    if (v63)
    {
      v64 = v63 + 2;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v63 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
      }
    }
    v29 = v72;
    goto LABEL_78;
  }
  if (v79 != 1)
  {
LABEL_95:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_96;
  }
  v21 = *a6;
  v22 = v78;
  v78 = 0;
  v72 = 0;
  LOBYTE(v69) = (_BYTE)v77;
  if (v22)
    *(_DWORD *)v22 += 2;
  v70 = v22;
  WebCore::DeferredPromise::reject(v21, (unsigned __int8 *)&v69, 0, &v72);
  result = v70;
  v70 = 0;
  if (!result)
  {
LABEL_25:
    if (v22)
      goto LABEL_26;
    goto LABEL_81;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
  if (v22)
  {
LABEL_26:
    if (*(_DWORD *)v22 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_81:
  if (v79 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33959F0[v79])(&v69, &v77);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::sign(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  unsigned __int8 *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  objc_class *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  WTF::StringImpl **v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  objc_class *v63;
  int v64;
  int v65;
  JSC::JSCell **v66;
  int v67;
  unsigned __int8 *v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl **v71;

  LOBYTE(v66) = 0;
  v67 = -1;
  v11 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(unsigned __int8 **, JSC::JSCell ***))off_1E33959D0[v11])(&v68, &v66);
    v67 = v11;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v68, a2, &v66, 2);
  if (v67 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v67])(&v60, &v66);
  v67 = -1;
  if (!v70)
  {
    v16 = v68;
    v68 = 0;
    v17 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v17 == -1)
      goto LABEL_79;
    v60 = (WTF::StringImpl *)&v63;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33959E0[v17])(&v60, a5);
    v19 = v18;
    v20 = 0;
    v63 = 0;
    v64 = 0;
    v65 = (int)v18;
    if (v18)
    {
      if ((unint64_t)v18 >> 32)
      {
LABEL_80:
        __break(0xC471u);
        return result;
      }
      v21 = result;
      v22 = (objc_class *)WTF::fastMalloc(v18);
      v20 = v22;
      v23 = 0;
      v64 = (int)v19;
      v63 = v22;
      do
      {
        *((_BYTE *)v23 + (_QWORD)v22) = *((_BYTE *)v23 + (_QWORD)v21);
        v23 = (WTF *)((char *)v23 + 1);
      }
      while (v19 != v23);
    }
    if (v16[16] != a4[12])
    {
      v24 = *a6;
LABEL_24:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v24, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v60, 0);
      v26 = v60;
      v60 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v25);
          if (!v20)
            goto LABEL_67;
          goto LABEL_66;
        }
        *(_DWORD *)v26 -= 2;
        if (v20)
        {
LABEL_66:
          v63 = 0;
          v64 = 0;
          WTF::fastFree(v20, v25);
        }
LABEL_67:
        result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 8))(v16);
        goto LABEL_68;
      }
LABEL_65:
      if (v20)
        goto LABEL_66;
      goto LABEL_67;
    }
    if ((a4[16] & 4) == 0)
    {
      v24 = *a6;
      goto LABEL_24;
    }
    v27 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v27 != -1)
    {
      v60 = (WTF::StringImpl *)&v62;
      v71 = &v60;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v71, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v71, a4[12]);
    v62 = *a6;
    WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v60, a1 + 5, &v62, a6);
    v28 = a1[3];
    if (v28)
      goto LABEL_83;
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = a1;
    v30 = (unsigned int *)a1[3];
    a1[3] = v28;
    if (!v30)
      goto LABEL_83;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v29);
    }
    v28 = a1[3];
    if (v28)
    {
LABEL_83:
      do
        v33 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v33 + 1, (unsigned int *)v28));
      v34 = v62;
      do
        v35 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v35 + 1, (unsigned int *)v28));
      v36 = v62;
      do
        v37 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v37 + 1, (unsigned int *)v28));
      v38 = 0;
    }
    else
    {
      v38 = 1;
      v36 = v62;
      v34 = v62;
    }
    v39 = v71;
    v40 = (unsigned int *)(a4 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    v60 = (WTF::StringImpl *)a4;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v42 = &off_1E3395CA0;
    v42[1] = v34;
    v42[2] = v28;
    v59 = v42;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v43 = &off_1E3395CC8;
    v43[1] = v36;
    v43[2] = v28;
    v58 = v43;
    v44 = *(_QWORD *)(a1[1] + 8);
    if (v44)
      v45 = v44 - 96;
    else
      v45 = 0;
    (*((void (**)(WTF::StringImpl **, unsigned __int8 *, WTF::StringImpl **, objc_class **, _QWORD **, _QWORD **, uint64_t, _QWORD))*v39
     + 5))(v39, v16, &v60, &v63, &v59, &v58, v45, a1[4]);
    v46 = v58;
    v58 = 0;
    if (v46)
      (*(void (**)(_QWORD *))(*v46 + 8))(v46);
    v47 = v59;
    v59 = 0;
    if (v47)
      (*(void (**)(_QWORD *))(*v47 + 8))(v47);
    v48 = (unsigned int *)v60;
    v60 = 0;
    if (!v48)
      goto LABEL_55;
    v49 = v48 + 2;
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
      if ((v38 & 1) == 0)
      {
        do
        {
LABEL_56:
          v52 = __ldaxr((unsigned int *)v28);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, (unsigned int *)v28));
        if (!v53)
        {
          atomic_store(1u, (unsigned int *)v28);
          WTF::fastFree((WTF *)v28, v25);
        }
      }
    }
    else
    {
LABEL_55:
      if ((v38 & 1) == 0)
        goto LABEL_56;
    }
    v54 = (unsigned int *)v71;
    v71 = 0;
    if (v54)
    {
      v55 = v54 + 2;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v54 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
      }
    }
    v20 = v63;
    goto LABEL_65;
  }
  if (v70 != 1)
  {
LABEL_79:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_80;
  }
  v12 = *a6;
  v13 = v69;
  v69 = 0;
  v63 = 0;
  LOBYTE(v60) = (_BYTE)v68;
  if (v13)
    *(_DWORD *)v13 += 2;
  v61 = v13;
  WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v60, 0, &v63);
  result = v61;
  v61 = 0;
  if (!result)
  {
LABEL_12:
    if (v13)
      goto LABEL_13;
    goto LABEL_68;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  if (v13)
  {
LABEL_13:
    if (*(_DWORD *)v13 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_68:
  if (v70 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned __int8 **))off_1E33959F0[v70])(&v60, &v68);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::verify(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  char *v23;
  WTF *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  WTF::StringImpl **v49;
  unsigned int *v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  _QWORD *v69;
  _QWORD *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  int v76;
  WTF *v77;
  int v78;
  int v79;
  JSC::JSCell **v80;
  int v81;
  unsigned __int8 *v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl **v85;

  LOBYTE(v80) = 0;
  v81 = -1;
  v13 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(unsigned __int8 **, JSC::JSCell ***))off_1E33959D0[v13])(&v82, &v80);
    v81 = v13;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v82, a2, &v80, 3);
  if (v81 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v81])(&v71, &v80);
  v81 = -1;
  if (!v84)
  {
    v18 = v82;
    v82 = 0;
    v19 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v19 == -1)
      goto LABEL_86;
    v71 = (WTF::StringImpl *)&v77;
    v20 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33959E0[v19])(&v71, a5);
    v22 = v21;
    v77 = 0;
    v78 = 0;
    v79 = (int)v21;
    if (v21)
    {
      if ((unint64_t)v21 >> 32)
        goto LABEL_87;
      v23 = (char *)v20;
      v24 = (WTF *)WTF::fastMalloc(v21);
      v78 = (int)v22;
      v77 = v24;
      do
      {
        v25 = *v23++;
        *(_BYTE *)v24 = v25;
        v24 = (WTF *)((char *)v24 + 1);
        v22 = (WTF *)((char *)v22 - 1);
      }
      while (v22);
    }
    v26 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v26 == -1)
      goto LABEL_86;
    v71 = (WTF::StringImpl *)&v74;
    v27 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33959E0[v26])(&v71, a6);
    v29 = v28;
    v30 = 0;
    v74 = 0;
    v75 = 0;
    v76 = (int)v28;
    if (!v28)
    {
LABEL_25:
      if (v18[16] != a4[12])
      {
        v34 = *a7;
LABEL_29:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::DeferredPromise::reject(v34, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v71, 0);
        v36 = v71;
        v71 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::destroy(v36, v35);
            if (!v30)
              goto LABEL_72;
            goto LABEL_71;
          }
          *(_DWORD *)v36 -= 2;
          if (v30)
          {
LABEL_71:
            v74 = 0;
            v75 = 0;
            WTF::fastFree(v30, v35);
          }
LABEL_72:
          v68 = v77;
          if (v77)
          {
            v77 = 0;
            v78 = 0;
            WTF::fastFree(v68, v35);
          }
          result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v18 + 8))(v18);
          goto LABEL_75;
        }
LABEL_70:
        if (v30)
          goto LABEL_71;
        goto LABEL_72;
      }
      if ((a4[16] & 8) == 0)
      {
        v34 = *a7;
        goto LABEL_29;
      }
      v37 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
      if (v37 != -1)
      {
        v71 = (WTF::StringImpl *)&v73;
        v85 = &v71;
        std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
      }
      WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v85, a4[12]);
      v73 = *a7;
      WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v71, a1 + 5, &v73, a7);
      v38 = a1[3];
      if (v38)
        goto LABEL_91;
      v38 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = a1;
      v40 = (unsigned int *)a1[3];
      a1[3] = v38;
      if (!v40)
        goto LABEL_91;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, v39);
      }
      v38 = a1[3];
      if (v38)
      {
LABEL_91:
        do
          v43 = __ldaxr((unsigned int *)v38);
        while (__stlxr(v43 + 1, (unsigned int *)v38));
        v44 = v73;
        do
          v45 = __ldaxr((unsigned int *)v38);
        while (__stlxr(v45 + 1, (unsigned int *)v38));
        v46 = v73;
        do
          v47 = __ldaxr((unsigned int *)v38);
        while (__stlxr(v47 + 1, (unsigned int *)v38));
        v48 = 0;
      }
      else
      {
        v48 = 1;
        v46 = v73;
        v44 = v73;
      }
      v49 = v85;
      v50 = (unsigned int *)(a4 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
      v71 = (WTF::StringImpl *)a4;
      v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v52 = &off_1E3395CF0;
      v52[1] = v44;
      v52[2] = v38;
      v70 = v52;
      v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v53 = &off_1E3395D18;
      v53[1] = v46;
      v53[2] = v38;
      v69 = v53;
      v54 = *(_QWORD *)(a1[1] + 8);
      if (v54)
        v55 = v54 - 96;
      else
        v55 = 0;
      (*((void (**)(WTF::StringImpl **, unsigned __int8 *, WTF::StringImpl **, WTF **, WTF **, _QWORD **, _QWORD **, uint64_t, _QWORD))*v49
       + 6))(v49, v18, &v71, &v77, &v74, &v70, &v69, v55, a1[4]);
      v56 = v69;
      v69 = 0;
      if (v56)
        (*(void (**)(_QWORD *))(*v56 + 8))(v56);
      v57 = v70;
      v70 = 0;
      if (v57)
        (*(void (**)(_QWORD *))(*v57 + 8))(v57);
      v58 = (unsigned int *)v71;
      v71 = 0;
      if (!v58)
        goto LABEL_60;
      v59 = v58 + 2;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        atomic_store(1u, v58 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
        if ((v48 & 1) == 0)
        {
          do
          {
LABEL_61:
            v62 = __ldaxr((unsigned int *)v38);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, (unsigned int *)v38));
          if (!v63)
          {
            atomic_store(1u, (unsigned int *)v38);
            WTF::fastFree((WTF *)v38, v35);
          }
        }
      }
      else
      {
LABEL_60:
        if ((v48 & 1) == 0)
          goto LABEL_61;
      }
      v64 = (unsigned int *)v85;
      v85 = 0;
      if (v64)
      {
        v65 = v64 + 2;
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          atomic_store(1u, v64 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
        }
      }
      v30 = v74;
      goto LABEL_70;
    }
    if (!((unint64_t)v28 >> 32))
    {
      v31 = v27;
      v32 = WTF::fastMalloc(v28);
      v30 = (WTF *)v32;
      v33 = 0;
      v75 = (int)v29;
      v74 = (WTF *)v32;
      do
      {
        *((_BYTE *)v33 + v32) = *((_BYTE *)v33 + v31);
        v33 = (WTF *)((char *)v33 + 1);
      }
      while (v29 != v33);
      goto LABEL_25;
    }
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x195756568);
  }
  if (v84 != 1)
  {
LABEL_86:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_87;
  }
  v14 = *a7;
  v15 = v83;
  v83 = 0;
  v77 = 0;
  LOBYTE(v71) = (_BYTE)v82;
  if (v15)
    *(_DWORD *)v15 += 2;
  v72 = v15;
  WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v71, 0, &v77);
  result = v72;
  v72 = 0;
  if (!result)
  {
LABEL_12:
    if (v15)
      goto LABEL_13;
    goto LABEL_75;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
  if (v15)
  {
LABEL_13:
    if (*(_DWORD *)v15 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_75:
  if (v84 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned __int8 **))off_1E33959F0[v84])(&v71, &v82);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::digest(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  unsigned __int8 *v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  WTF **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  WTF *v47;
  _QWORD *v48;
  WTF **v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  int v54;
  JSC::JSCell **v55;
  int v56;
  unsigned __int8 *v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t *v60;

  LOBYTE(v55) = 0;
  v56 = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(unsigned __int8 **, JSC::JSCell ***))off_1E33959D0[v9])(&v57, &v55);
    v56 = v9;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v57, a2, &v55, 4);
  if (v56 != -1)
    ((void (*)(WTF ***, JSC::JSCell ***))off_1E33959C0[v56])(&v49, &v55);
  v56 = -1;
  if (!v59)
  {
    v14 = v57;
    v57 = 0;
    v15 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v15 != -1)
    {
      v49 = &v52;
      result = (WTF::StringImpl *)((uint64_t (*)(WTF ***, uint64_t))off_1E33959E0[v15])(&v49, a4);
      v17 = v16;
      v52 = 0;
      v53 = 0;
      v54 = (int)v16;
      if (v16)
      {
        if ((unint64_t)v16 >> 32)
        {
LABEL_61:
          __break(0xC471u);
          return result;
        }
        v18 = result;
        v19 = (WTF *)WTF::fastMalloc(v16);
        v53 = (int)v17;
        v52 = v19;
        do
        {
          v20 = *(_BYTE *)v18;
          v18 = (WTF::StringImpl *)((char *)v18 + 1);
          *(_BYTE *)v19 = v20;
          v19 = (WTF *)((char *)v19 + 1);
          v17 = (WTF *)((char *)v17 - 1);
        }
        while (v17);
      }
      v21 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
      if (v21 != -1)
      {
        v49 = (WTF **)&v51;
        v60 = (uint64_t *)&v49;
        std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
      }
      WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v60, v14[16]);
      v51 = *a5;
      WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v49, a1 + 5, &v51, a5);
      v22 = a1[3];
      if (v22)
        goto LABEL_64;
      v22 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = a1;
      v24 = (unsigned int *)a1[3];
      a1[3] = v22;
      if (!v24)
        goto LABEL_64;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v23);
      }
      v22 = a1[3];
      if (v22)
      {
LABEL_64:
        do
          v27 = __ldaxr((unsigned int *)v22);
        while (__stlxr(v27 + 1, (unsigned int *)v22));
        v28 = v51;
        do
          v29 = __ldaxr((unsigned int *)v22);
        while (__stlxr(v29 + 1, (unsigned int *)v22));
        v30 = v51;
        do
          v31 = __ldaxr((unsigned int *)v22);
        while (__stlxr(v31 + 1, (unsigned int *)v22));
        v32 = 0;
      }
      else
      {
        v32 = 1;
        v30 = v51;
        v28 = v51;
      }
      v33 = (uint64_t)v60;
      v34 = (WTF **)WTF::fastMalloc((WTF *)0x18);
      *v34 = (WTF *)&off_1E3395D40;
      v34[1] = (WTF *)v28;
      v34[2] = (WTF *)v22;
      v49 = v34;
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v35 = &off_1E3395D68;
      v35[1] = v30;
      v35[2] = v22;
      v48 = v35;
      v36 = *(_QWORD *)(a1[1] + 8);
      if (v36)
        v37 = v36 - 96;
      else
        v37 = 0;
      (*(void (**)(uint64_t, WTF **, WTF ***, _QWORD **, uint64_t, _QWORD))(*(_QWORD *)v33 + 56))(v33, &v52, &v49, &v48, v37, a1[4]);
      v39 = v48;
      v48 = 0;
      if (v39)
        (*(void (**)(_QWORD *))(*v39 + 8))(v39);
      v40 = (uint64_t)v49;
      v49 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      if ((v32 & 1) == 0)
      {
        do
        {
          v41 = __ldaxr((unsigned int *)v22);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, (unsigned int *)v22));
        if (!v42)
        {
          atomic_store(1u, (unsigned int *)v22);
          WTF::fastFree((WTF *)v22, v38);
        }
      }
      v43 = (unsigned int *)v60;
      v60 = 0;
      if (v43)
      {
        v44 = v43 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v43 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
        }
      }
      v47 = v52;
      if (v52)
      {
        v52 = 0;
        v53 = 0;
        WTF::fastFree(v47, v38);
      }
      result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 8))(v14);
      goto LABEL_53;
    }
LABEL_60:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_61;
  }
  if (v59 != 1)
    goto LABEL_60;
  v10 = *a5;
  v11 = v58;
  v58 = 0;
  v52 = 0;
  LOBYTE(v49) = (_BYTE)v57;
  if (v11)
    *(_DWORD *)v11 += 2;
  v50 = v11;
  WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v49, 0, &v52);
  result = v50;
  v50 = 0;
  if (!result)
  {
LABEL_12:
    if (v11)
      goto LABEL_13;
    goto LABEL_53;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
  if (v11)
  {
LABEL_13:
    if (*(_DWORD *)v11 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_53:
  if (v59 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF ***, unsigned __int8 **))off_1E33959F0[v59])(&v49, &v57);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::generateKey(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int **a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  objc_class *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  JSC::JSCell **v53;
  int v54;
  unsigned __int8 *v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t **v58;

  LOBYTE(v53) = 0;
  v54 = -1;
  v11 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(unsigned __int8 **, JSC::JSCell ***))off_1E33959D0[v11])(&v55, &v53);
    v54 = v11;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v55, a2, &v53, 5);
  if (v54 != -1)
    ((void (*)(uint64_t **, JSC::JSCell ***))off_1E33959C0[v54])(&v50, &v53);
  v54 = -1;
  if (!v57)
  {
    v16 = v55;
    v55 = 0;
    v17 = *((unsigned int *)a5 + 3);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = 0;
      v19 = *a5;
      v20 = 4 * v17;
      do
      {
        v21 = *v19;
        if (v21 >= 8)
        {
          __break(0xC471u);
          JUMPOUT(0x195756DB4);
        }
        v18 = dword_1969ED148[v21] | v18;
        ++v19;
        v20 -= 4;
      }
      while (v20);
    }
    else
    {
      v18 = 0;
    }
    v22 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v22 != -1)
    {
      v50 = &v52;
      v58 = &v50;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v58, v16[16]);
    v52 = *a6;
    WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v50, a1 + 5, &v52, a6);
    v23 = a1[3];
    if (v23)
      goto LABEL_64;
    v23 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = a1;
    v25 = (unsigned int *)a1[3];
    a1[3] = v23;
    if (!v25)
      goto LABEL_64;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v24);
    }
    v23 = a1[3];
    if (v23)
    {
LABEL_64:
      do
        v28 = __ldaxr((unsigned int *)v23);
      while (__stlxr(v28 + 1, (unsigned int *)v23));
      v29 = v52;
      do
        v30 = __ldaxr((unsigned int *)v23);
      while (__stlxr(v30 + 1, (unsigned int *)v23));
      v31 = v52;
      do
        v32 = __ldaxr((unsigned int *)v23);
      while (__stlxr(v32 + 1, (unsigned int *)v23));
      v33 = 0;
    }
    else
    {
      v33 = 1;
      v31 = v52;
      v29 = v52;
    }
    v34 = (objc_class *)v58;
    v35 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
    *v35 = (uint64_t)&off_1E3395D90;
    v35[1] = v29;
    v35[2] = v23;
    v50 = v35;
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v36 = &off_1E3395DC8;
    v36[1] = v31;
    v36[2] = v23;
    v49 = v36;
    v37 = *(_QWORD *)(a1[1] + 8);
    if (v37)
      v38 = v37 - 96;
    else
      v38 = 0;
    (*(void (**)(objc_class *, unsigned __int8 *, uint64_t, uint64_t, uint64_t **, _QWORD **, uint64_t))(*(_QWORD *)v34 + 64))(v34, v16, a4, v18, &v50, &v49, v38);
    v40 = v49;
    v49 = 0;
    if (v40)
      (*(void (**)(_QWORD *))(*v40 + 8))(v40);
    v41 = (uint64_t)v50;
    v50 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if ((v33 & 1) == 0)
    {
      do
      {
        v42 = __ldaxr((unsigned int *)v23);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v23));
      if (!v43)
      {
        atomic_store(1u, (unsigned int *)v23);
        WTF::fastFree((WTF *)v23, v39);
      }
    }
    v44 = (unsigned int *)v58;
    v58 = 0;
    if (v44)
    {
      v45 = v44 + 2;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v44 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
      }
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_52;
  }
  if (v57 != 1)
  {
    v48 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::SubtleCrypto::deriveKey(v48);
  }
  v12 = *a6;
  v13 = v56;
  v56 = 0;
  v58 = 0;
  LOBYTE(v50) = (_BYTE)v55;
  if (v13)
    *(_DWORD *)v13 += 2;
  v51 = v13;
  WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v50, 0, (objc_class **)&v58);
  result = v51;
  v51 = 0;
  if (!result)
  {
LABEL_12:
    if (v13)
      goto LABEL_13;
    goto LABEL_52;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  if (v13)
  {
LABEL_13:
    if (*(_DWORD *)v13 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_52:
  if (v57 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t **, unsigned __int8 **))off_1E33959F0[v57])(&v50, &v55);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::deriveKey(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int **a7, uint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WebCore::CryptoAlgorithmParameters *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  uint64_t v39;
  JSC::JSGlobalObject *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  WebCore *v95;
  const WebCore::CryptoAlgorithmParameters *v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl **v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned int *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  WTF::StringImpl *v108;
  unsigned int *v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  int v112;
  unsigned int *v113;
  JSC::JSCell **v114;
  int v115;
  objc_class *v116;
  WTF::StringImpl *v117;
  int v118;
  JSC::JSCell **v119;
  int v120;
  objc_class *v121;
  WTF::StringImpl *v122;
  int v123;
  JSC::JSCell **v124;
  int v125;
  unsigned __int8 *v126;
  WTF::StringImpl *v127;
  int v128;
  uint64_t v129[2];

  LOBYTE(v124) = 0;
  v125 = -1;
  v15 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959D0[v15])(&v103, &v124);
    v125 = v15;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v126, a2, &v124, 6);
  if (v125 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v125])(&v103, &v124);
  v125 = -1;
  if (!v128)
  {
    v20 = v126;
    v126 = 0;
    LOBYTE(v119) = 0;
    v120 = -1;
    v21 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E3395A00[v21])(&v103, &v119, a5);
      v120 = v21;
    }
    WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v121, a2, &v119, 7);
    if (v120 != -1)
      ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v120])(&v103, &v119);
    v120 = -1;
    if (v123)
    {
      if (v123 != 1)
        goto LABEL_161;
      v22 = *a8;
      v23 = v122;
      v122 = 0;
      v116 = 0;
      LOBYTE(v103) = (_BYTE)v121;
      if (v23)
        *(_DWORD *)v23 += 2;
      v104 = v23;
      WebCore::DeferredPromise::reject(v22, (unsigned __int8 *)&v103, 0, &v116);
      result = v104;
      v104 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
          if (v23)
          {
LABEL_27:
            if (*(_DWORD *)v23 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
LABEL_143:
          if (v123 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, objc_class **))off_1E33959F0[v123])(&v103, &v121);
          if (v20)
            result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v20 + 8))(v20);
          goto LABEL_147;
        }
        *(_DWORD *)result -= 2;
      }
      if (v23)
        goto LABEL_27;
      goto LABEL_143;
    }
    v25 = v121;
    v121 = 0;
    LOBYTE(v114) = 0;
    v115 = -1;
    v26 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v26 != -1)
    {
      ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E3395A00[v26])(&v103, &v114, a5);
      v115 = v26;
    }
    WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v116, a2, &v114, 10);
    if (v115 != -1)
      ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v115])(&v103, &v114);
    v115 = -1;
    if (v118)
    {
      if (v118 != 1)
        goto LABEL_161;
      v27 = *a8;
      v28 = v117;
      v117 = 0;
      v110 = 0;
      LOBYTE(v103) = (_BYTE)v116;
      if (v28)
        *(_DWORD *)v28 += 2;
      v104 = v28;
      WebCore::DeferredPromise::reject(v27, (unsigned __int8 *)&v103, 0, (objc_class **)&v110);
      result = v104;
      v104 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
          if (v28)
          {
LABEL_41:
            if (*(_DWORD *)v28 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v29);
            else
              *(_DWORD *)v28 -= 2;
          }
LABEL_139:
          if (v118 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, objc_class **))off_1E33959F0[v118])(&v103, &v116);
          if (v25)
            result = (WTF::StringImpl *)(*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)v25 + 8))(v25);
          goto LABEL_143;
        }
        *(_DWORD *)result -= 2;
      }
      if (v28)
        goto LABEL_41;
      goto LABEL_139;
    }
    v30 = (unsigned __int8 *)v116;
    v116 = 0;
    v31 = *((unsigned int *)a7 + 3);
    if ((_DWORD)v31)
    {
      v32 = 0;
      v33 = *a7;
      v34 = 4 * v31;
      do
      {
        v35 = *v33;
        if (v35 >= 8)
        {
          __break(0xC471u);
          JUMPOUT(0x195757854);
        }
        v32 |= dword_1969ED148[v35];
        ++v33;
        v34 -= 4;
      }
      while (v34);
    }
    else
    {
      v32 = 0;
    }
    if (v20[16] != *(unsigned __int8 *)(a4 + 12))
    {
      v36 = *a8;
LABEL_56:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v36, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v103, 0);
      result = v103;
      v103 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
        else
          *(_DWORD *)result -= 2;
      }
      if (!v30)
        goto LABEL_139;
      goto LABEL_138;
    }
    if ((*(_BYTE *)(a4 + 16) & 0x10) == 0)
    {
      v36 = *a8;
      goto LABEL_56;
    }
    v38 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v38 != -1)
    {
      v103 = (WTF::StringImpl *)v129;
      v110 = &v103;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v110, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v113, v30[16]);
    (*(void (**)(WTF::StringImpl ***__return_ptr, unsigned int *, unsigned __int8 *))(*(_QWORD *)v113 + 112))(&v110, v113, v30);
    if (v112)
    {
      if (v112 != 1)
        goto LABEL_161;
      v39 = *a8;
      v40 = (JSC::JSGlobalObject *)v110;
      v41 = v111;
      v111 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v39, v40, (JSC::JSGlobalObject *)&v103, 0);
      v43 = v103;
      v103 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::destroy(v43, v42);
          if (v41)
          {
LABEL_72:
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v42);
            else
              *(_DWORD *)v41 -= 2;
          }
LABEL_131:
          if (v112 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl ***))off_1E3395A10[v112])(&v103, &v110);
          v91 = v113;
          v113 = 0;
          if (v91)
          {
            v92 = v91 + 2;
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
            {
              atomic_store(1u, v91 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
            }
          }
LABEL_138:
          result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v30 + 8))(v30);
          goto LABEL_139;
        }
        *(_DWORD *)v43 -= 2;
      }
      if (v41)
        goto LABEL_72;
      goto LABEL_131;
    }
    v99 = v110;
    v44 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v44 != -1)
    {
      v103 = (WTF::StringImpl *)&v109;
      v129[0] = (uint64_t)&v103;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, v129, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v109, *((unsigned __int8 *)v25 + 16));
    v45 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v45 != -1)
    {
      v103 = (WTF::StringImpl *)&v108;
      v129[0] = (uint64_t)&v103;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, v129, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create(v129, v20[16]);
    v108 = (WTF::StringImpl *)*a8;
    WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v103, a1 + 5, (uint64_t *)&v108, a8);
    v46 = *(_QWORD *)(a1[1] + 8);
    if (v46)
      v47 = v46 - 96;
    else
      v47 = 0;
    v98 = (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 136))(v47) + 440) >> 3) & 1;
    v48 = a1[3];
    if (v48)
      goto LABEL_165;
    v48 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v48 = 1;
    *(_QWORD *)(v48 + 8) = a1;
    v50 = (unsigned int *)a1[3];
    a1[3] = v48;
    if (!v50)
      goto LABEL_165;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v49);
    }
    v48 = a1[3];
    if (v48)
    {
LABEL_165:
      do
        v53 = __ldaxr((unsigned int *)v48);
      while (__stlxr(v53 + 1, (unsigned int *)v48));
      v103 = v108;
      do
        v54 = __ldaxr((unsigned int *)v48);
      while (__stlxr(v54 + 1, (unsigned int *)v48));
      v55 = 0;
      v97 = v108;
    }
    else
    {
      v97 = v108;
      v103 = v108;
      v55 = 1;
    }
    v56 = (uint64_t)v109;
    v109 = 0;
    v104 = (WTF::StringImpl *)v48;
    *(_QWORD *)&v105 = v56;
    WebCore::crossThreadCopyImportParams((WebCore *)((char *)&v105 + 8), v25);
    LOBYTE(v106) = a6;
    HIDWORD(v106) = v32;
    v107 = v98;
    if ((v55 & 1) == 0)
    {
      do
        v57 = __ldaxr((unsigned int *)v48);
      while (__stlxr(v57 + 1, (unsigned int *)v48));
    }
    v58 = v129[0];
    v59 = (unsigned int *)(a4 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
    v102 = (unsigned int *)a4;
    v61 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v61 = &off_1E3395DF0;
    *(_QWORD *)(v61 + 8) = v103;
    *(_QWORD *)(v61 + 16) = v104;
    v62 = v105;
    v104 = 0;
    v105 = 0uLL;
    *(_OWORD *)(v61 + 24) = v62;
    *(_QWORD *)(v61 + 40) = v106;
    *(_BYTE *)(v61 + 48) = v107;
    v101 = v61;
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v63 = &off_1E3395E68;
    v63[1] = v97;
    v63[2] = v48;
    v100 = v63;
    v64 = *(_QWORD *)(a1[1] + 8);
    if (v64)
      v65 = v64 - 96;
    else
      v65 = 0;
    (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, WTF::StringImpl **, uint64_t *, _QWORD **, uint64_t, _QWORD))(*(_QWORD *)v58 + 72))(v58, v20, &v102, v99, &v101, &v100, v65, a1[4]);
    v67 = v100;
    v100 = 0;
    if (v67)
      (*(void (**)(_QWORD *))(*v67 + 8))(v67);
    v68 = v101;
    v101 = 0;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    v69 = v102;
    v102 = 0;
    if (v69)
    {
      v70 = v69 + 2;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        atomic_store(1u, v69 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
      }
    }
    v73 = *((_QWORD *)&v105 + 1);
    *((_QWORD *)&v105 + 1) = 0;
    if (v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
    v74 = (unsigned int *)v105;
    *(_QWORD *)&v105 = 0;
    if (v74)
    {
      v75 = v74 + 2;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v74 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
      }
    }
    v78 = (unsigned int *)v104;
    v104 = 0;
    if (!v78)
      goto LABEL_117;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v78);
      WTF::fastFree((WTF *)v78, v66);
      if ((v55 & 1) == 0)
      {
        do
        {
LABEL_118:
          v81 = __ldaxr((unsigned int *)v48);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, (unsigned int *)v48));
        if (!v82)
        {
          atomic_store(1u, (unsigned int *)v48);
          WTF::fastFree((WTF *)v48, v66);
        }
      }
    }
    else
    {
LABEL_117:
      if ((v55 & 1) == 0)
        goto LABEL_118;
    }
    v83 = (unsigned int *)v129[0];
    v129[0] = 0;
    if (v83)
    {
      v84 = v83 + 2;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v83 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
      }
    }
    v87 = v109;
    v109 = 0;
    if (v87)
    {
      v88 = v87 + 2;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        atomic_store(1u, v87 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 8))(v87);
      }
    }
    goto LABEL_131;
  }
  if (v128 != 1)
  {
LABEL_161:
    v95 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::crossThreadCopyImportParams(v95, v96);
  }
  v16 = *a8;
  v17 = v127;
  v127 = 0;
  v121 = 0;
  LOBYTE(v103) = (_BYTE)v126;
  if (v17)
    *(_DWORD *)v17 += 2;
  v104 = v17;
  WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v103, 0, &v121);
  result = v104;
  v104 = 0;
  if (!result)
  {
LABEL_12:
    if (v17)
      goto LABEL_13;
    goto LABEL_147;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
  if (v17)
  {
LABEL_13:
    if (*(_DWORD *)v17 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_147:
  if (v128 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned __int8 **))off_1E33959F0[v128])(&v103, &v126);
  return result;
}

uint64_t WebCore::crossThreadCopyImportParams(WebCore *this, const WebCore::CryptoAlgorithmParameters *a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  WTF::StringImpl *v10[2];
  char v11;
  WTF::StringImpl *v12;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a2 + 16))(a2);
  if ((int)result > 8)
  {
    if ((_DWORD)result == 9)
    {
      if ((*(unsigned int (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a2 + 16))(a2) != 9)
      {
        __break(0xC471u);
        JUMPOUT(0x195757AE8);
      }
      v8 = *((_BYTE *)a2 + 16);
      v9 = *((_BYTE *)a2 + 40);
      *(WTF::StringImpl **)((char *)v10 + 7) = *((WTF::StringImpl **)a2 + 6);
      HIBYTE(v10[1]) = *((_BYTE *)a2 + 56);
      result = WTF::fastMalloc((WTF *)0x40);
      *(_BYTE *)(result + 16) = v8;
      *(_QWORD *)result = off_1E32A9760;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 40) = v9;
      *(_OWORD *)(result + 41) = *(_OWORD *)v10;
    }
    else
    {
      if ((_DWORD)result != 12)
      {
LABEL_14:
        *(_QWORD *)this = 0;
        return result;
      }
      if ((*(unsigned int (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a2 + 16))(a2) != 12)
      {
        __break(0xC471u);
        JUMPOUT(0x195757AC8);
      }
      v6 = *((_BYTE *)a2 + 16);
      v7 = *((_BYTE *)a2 + 40);
      result = WTF::fastMalloc((WTF *)0x30);
      *(_BYTE *)(result + 16) = v6;
      *(_QWORD *)result = off_1E32DCC20;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 40) = v7;
    }
    *(_QWORD *)this = result;
    return result;
  }
  if (!(_DWORD)result)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = off_1E3226840;
    *(_QWORD *)this = result;
    *(_BYTE *)(result + 16) = *((_BYTE *)a2 + 16);
    return result;
  }
  if ((_DWORD)result != 5)
    goto LABEL_14;
  if ((*(unsigned int (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a2 + 16))(a2) != 5)
  {
    __break(0xC471u);
    JUMPOUT(0x195757AA8);
  }
  v11 = *((_BYTE *)a2 + 16);
  WTF::String::isolatedCopy();
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = v11;
  *(_QWORD *)v5 = off_1E3272120;
  *(_QWORD *)(v5 + 24) = v12;
  *(_QWORD *)this = v5;
  return 0;
}

WTF::StringImpl *WebCore::SubtleCrypto::deriveBits(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  unsigned __int8 *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  WTF::StringImpl **v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  JSC::JSCell **v58;
  int v59;
  unsigned __int8 *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl **v63;

  LOBYTE(v58) = 0;
  v59 = -1;
  v11 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(unsigned __int8 **, JSC::JSCell ***))off_1E33959D0[v11])(&v60, &v58);
    v59 = v11;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v60, a2, &v58, 6);
  if (v59 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v59])(&v55, &v58);
  v59 = -1;
  if (!v62)
  {
    v16 = v60;
    v60 = 0;
    if (v16[16] != a4[12])
    {
      v17 = *a6;
LABEL_19:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v17, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v55, 0);
      v19 = v55;
      v55 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
LABEL_58:
      result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 8))(v16);
      goto LABEL_59;
    }
    if ((a4[16] & 0x20) == 0)
    {
      v17 = *a6;
      goto LABEL_19;
    }
    v20 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v20 != -1)
    {
      v55 = (WTF::StringImpl *)&v57;
      v63 = &v55;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v63, v16[16]);
    v57 = *a6;
    WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v55, a1 + 5, &v57, a6);
    v21 = a1[3];
    if (v21)
      goto LABEL_72;
    v21 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = a1;
    v23 = (unsigned int *)a1[3];
    a1[3] = v21;
    if (!v23)
      goto LABEL_72;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v22);
    }
    v21 = a1[3];
    if (v21)
    {
LABEL_72:
      do
        v26 = __ldaxr((unsigned int *)v21);
      while (__stlxr(v26 + 1, (unsigned int *)v21));
      v27 = v57;
      do
        v28 = __ldaxr((unsigned int *)v21);
      while (__stlxr(v28 + 1, (unsigned int *)v21));
      v29 = v57;
      do
        v30 = __ldaxr((unsigned int *)v21);
      while (__stlxr(v30 + 1, (unsigned int *)v21));
      v31 = 0;
    }
    else
    {
      v31 = 1;
      v29 = v57;
      v27 = v57;
    }
    v32 = v63;
    v33 = (unsigned int *)(a4 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v55 = (WTF::StringImpl *)a4;
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v35 = &off_1E3395E90;
    v35[1] = v27;
    v35[2] = v21;
    v54 = v35;
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v36 = &off_1E3395EB8;
    v36[1] = v29;
    v36[2] = v21;
    v53 = v36;
    v37 = *(_QWORD *)(a1[1] + 8);
    if (v37)
      v38 = v37 - 96;
    else
      v38 = 0;
    (*((void (**)(WTF::StringImpl **, unsigned __int8 *, WTF::StringImpl **, _QWORD, _QWORD **, _QWORD **, uint64_t, _QWORD))*v32
     + 9))(v32, v16, &v55, a5, &v54, &v53, v38, a1[4]);
    v40 = v53;
    v53 = 0;
    if (v40)
      (*(void (**)(_QWORD *))(*v40 + 8))(v40);
    v41 = v54;
    v54 = 0;
    if (v41)
      (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    v42 = (unsigned int *)v55;
    v55 = 0;
    if (!v42)
      goto LABEL_49;
    v43 = v42 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v42 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
      if ((v31 & 1) == 0)
      {
        do
        {
LABEL_50:
          v46 = __ldaxr((unsigned int *)v21);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v21));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v21);
          WTF::fastFree((WTF *)v21, v39);
        }
      }
    }
    else
    {
LABEL_49:
      if ((v31 & 1) == 0)
        goto LABEL_50;
    }
    v48 = (unsigned int *)v63;
    v63 = 0;
    if (v48)
    {
      v49 = v48 + 2;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v48 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
      }
    }
    goto LABEL_58;
  }
  if (v62 != 1)
  {
    v52 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::SubtleCrypto::importKey(v52);
  }
  v12 = *a6;
  v13 = v61;
  v61 = 0;
  v63 = 0;
  LOBYTE(v55) = (_BYTE)v60;
  if (v13)
    *(_DWORD *)v13 += 2;
  v56 = v13;
  WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v55, 0, (objc_class **)&v63);
  result = v56;
  v56 = 0;
  if (!result)
  {
LABEL_12:
    if (v13)
      goto LABEL_13;
    goto LABEL_59;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  if (v13)
  {
LABEL_13:
    if (*(_DWORD *)v13 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_59:
  if (v62 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned __int8 **))off_1E33959F0[v62])(&v55, &v60);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::importKey(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7, uint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t (**v22)();
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57[3];
  uint64_t v58;
  objc_class *v59[23];
  unsigned int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  char v64;
  JSC::JSCell **v65;
  int v66;
  unsigned __int8 *v67;
  WTF::StringImpl *v68;
  int v69;
  uint64_t *v70;

  LOBYTE(v65) = 0;
  v66 = -1;
  v15 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(uint64_t *, JSC::JSCell ***, uint64_t))off_1E33959D0[v15])(&v61, &v65, a5);
    v66 = v15;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v67, a2, &v65, 7);
  if (v66 != -1)
    ((void (*)(uint64_t *, JSC::JSCell ***))off_1E33959C0[v66])(&v61, &v65);
  v66 = -1;
  if (!v69)
  {
    v20 = v67;
    v67 = 0;
    if (a3 >= 3)
    {
      if ((_DWORD)a3 != 3)
      {
LABEL_75:
        __break(0xC471u);
        goto LABEL_76;
      }
      v57[0] = (uint64_t)a8;
      v21 = *(unsigned int *)(a4 + 184);
      if ((_DWORD)v21 == -1)
      {
LABEL_74:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_75;
      }
      v59[0] = (objc_class *)v57;
      v22 = off_1E3395A48;
    }
    else
    {
      v57[0] = (uint64_t)a8;
      v21 = *(unsigned int *)(a4 + 184);
      if ((_DWORD)v21 == -1)
        goto LABEL_74;
      v59[0] = (objc_class *)v57;
      v22 = off_1E3395A20;
    }
    result = (WTF::StringImpl *)((WTF::StringImpl *(*)(uint64_t *__return_ptr, objc_class **, uint64_t))v22[v21])(&v61, v59, a4);
    if (v64)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      v23 = v63;
      if (v63 != -1)
      {
        ((void (*)(uint64_t *, objc_class **, uint64_t *))*(&off_1E3395A60 + v63))(v57, v59, &v61);
        v60 = v23;
      }
      v24 = *((unsigned int *)a7 + 3);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = 0;
        v26 = *a7;
        v27 = 4 * v24;
        while (1)
        {
          v28 = *v26;
          if (v28 >= 8)
            break;
          v25 = dword_1969ED148[v28] | v25;
          ++v26;
          v27 -= 4;
          if (!v27)
            goto LABEL_32;
        }
        __break(0xC471u);
LABEL_76:
        JUMPOUT(0x1957584BCLL);
      }
      v25 = 0;
LABEL_32:
      v29 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
      if (v29 != -1)
      {
        v57[0] = (uint64_t)&v58;
        v70 = v57;
        std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
      }
      WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v70, v20[16]);
      v58 = *a8;
      WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>(v57, a1 + 5, &v58, a8);
      v30 = a1[3];
      if (v30)
        goto LABEL_79;
      v30 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = a1;
      v32 = (unsigned int *)a1[3];
      a1[3] = v30;
      if (!v32)
        goto LABEL_79;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v31);
      }
      v30 = a1[3];
      if (v30)
      {
LABEL_79:
        do
          v35 = __ldaxr((unsigned int *)v30);
        while (__stlxr(v35 + 1, (unsigned int *)v30));
      }
      v36 = *(_QWORD *)(a1[1] + 8);
      if (v36)
        v37 = v36 - 96;
      else
        v37 = 0;
      v38 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 136))(v37) + 440);
      v39 = v58;
      v40 = v58;
      if (v30)
      {
        do
          v41 = __ldaxr((unsigned int *)v30);
        while (__stlxr(v41 + 1, (unsigned int *)v30));
        v40 = v58;
        do
          v42 = __ldaxr((unsigned int *)v30);
        while (__stlxr(v42 + 1, (unsigned int *)v30));
      }
      v43 = (v38 >> 3) & 1;
      v44 = (uint64_t)v70;
      v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v45 = &off_1E3395EE0;
      v45[1] = v39;
      v45[2] = v30;
      v57[0] = (uint64_t)v45;
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v46 = &off_1E3395F08;
      v46[1] = v40;
      v46[2] = v30;
      v56 = v46;
      (*(void (**)(uint64_t, uint64_t, objc_class **, unsigned __int8 *, uint64_t, uint64_t, uint64_t *, _QWORD **, _BYTE))(*(_QWORD *)v44 + 80))(v44, a3, v59, v20, a6, v25, v57, &v56, v43);
      v48 = v56;
      v56 = 0;
      if (v48)
        (*(void (**)(_QWORD *))(*v48 + 8))(v48);
      v49 = v57[0];
      v57[0] = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      if (v30)
      {
        do
        {
          v50 = __ldaxr((unsigned int *)v30);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, (unsigned int *)v30));
        if (!v51)
        {
          atomic_store(1u, (unsigned int *)v30);
          WTF::fastFree((WTF *)v30, v47);
        }
      }
      v52 = (unsigned int *)v70;
      v70 = 0;
      if (v52)
      {
        v53 = v52 + 2;
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
        {
          atomic_store(1u, v52 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
        }
      }
      if (v60 != -1)
        ((void (*)(uint64_t *, objc_class **))*(&off_1E3395A38 + v60))(v57, v59);
      if (v64 && v63 != -1)
        ((void (*)(objc_class **, uint64_t *))*(&off_1E3395A38 + v63))(v59, &v61);
    }
    else if (!v20)
    {
      goto LABEL_67;
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v20 + 8))(v20);
    goto LABEL_67;
  }
  if (v69 != 1)
    goto LABEL_74;
  v16 = *a8;
  v17 = v68;
  v68 = 0;
  v59[0] = 0;
  LOBYTE(v61) = (_BYTE)v67;
  if (v17)
    *(_DWORD *)v17 += 2;
  v62 = v17;
  WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v61, 0, v59);
  result = v62;
  v62 = 0;
  if (!result)
  {
LABEL_12:
    if (v17)
      goto LABEL_13;
    goto LABEL_67;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_12;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
  if (v17)
  {
LABEL_13:
    if (*(_DWORD *)v17 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_67:
  if (v69 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, unsigned __int8 **))off_1E33959F0[v69])(&v61, &v67);
  return result;
}

WTF::StringImpl *WebCore::SubtleCrypto::exportKey(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  WebCore::JSDOMGlobalObject *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  objc_class *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *result;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t **v54;

  v8 = *(_QWORD *)(*a4 + 32);
  if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    v9 = 0;
  else
    v9 = *(WebCore::JSDOMGlobalObject **)v8;
  v10 = *(unsigned __int8 *)(a3 + 12);
  if (v10 > 0x15)
    goto LABEL_51;
  if (((1 << v10) & 0x301BFC) != 0)
    goto LABEL_6;
  if (v10 == 1)
  {
    v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9);
    if (!v47
      || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 136))(v47) + 440) & 0x80000000000) == 0)
    {
      goto LABEL_6;
    }
LABEL_51:
    v48 = *a4;
    v54 = 0;
    LOBYTE(v51) = 6;
    v52 = 0;
    WebCore::DeferredPromise::reject(v48, (unsigned __int8 *)&v51, 0, (objc_class **)&v54);
    result = v52;
    v52 = 0;
    if (!result)
      return result;
    goto LABEL_52;
  }
  if (v10 != 10)
    goto LABEL_51;
  v46 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9);
  if (v46)
  {
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 136))(v46) + 440) & 0x40000000000) != 0)
      goto LABEL_51;
  }
LABEL_6:
  if (!*(_BYTE *)(a3 + 14))
  {
    v44 = *a4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::DeferredPromise::reject(v44, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v51, 0);
    result = (WTF::StringImpl *)v51;
    v51 = 0;
    if (!result)
      return result;
LABEL_52:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
    *(_DWORD *)result -= 2;
    return result;
  }
  v11 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v11 != -1)
  {
    v51 = &v53;
    v54 = &v51;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v54, *(unsigned __int8 *)(a3 + 12));
  v53 = *a4;
  WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v51, a1 + 5, &v53, a4);
  v12 = a1[3];
  if (v12)
    goto LABEL_61;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a1;
  v14 = (unsigned int *)a1[3];
  a1[3] = v12;
  if (!v14)
    goto LABEL_61;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v13);
  }
  v12 = a1[3];
  if (v12)
  {
LABEL_61:
    do
      v17 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v17 + 1, (unsigned int *)v12));
  }
  v18 = *(_QWORD *)(a1[1] + 8);
  if (v18)
    v19 = v18 - 96;
  else
    v19 = 0;
  v20 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19) + 440);
  v21 = v53;
  v22 = v53;
  if (v12)
  {
    do
      v23 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v23 + 1, (unsigned int *)v12));
    v22 = v53;
    do
      v24 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v24 + 1, (unsigned int *)v12));
  }
  v25 = (objc_class *)v54;
  v26 = (unsigned int *)(a3 + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  v28 = (v20 >> 3) & 1;
  v51 = (uint64_t *)a3;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v29 = &off_1E3395F30;
  v29[1] = v21;
  v29[2] = v12;
  v50 = v29;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v30 = &off_1E3395F58;
  v30[1] = v22;
  v30[2] = v12;
  v49 = v30;
  (*(void (**)(objc_class *, uint64_t, uint64_t **, _QWORD **, _QWORD **, uint64_t))(*(_QWORD *)v25 + 88))(v25, a2, &v51, &v50, &v49, v28);
  v32 = v49;
  v49 = 0;
  if (v32)
    (*(void (**)(_QWORD *))(*v32 + 8))(v32);
  v33 = v50;
  v50 = 0;
  if (v33)
    (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  v34 = (unsigned int *)v51;
  v51 = 0;
  if (!v34)
    goto LABEL_33;
  v35 = v34 + 2;
  do
  {
    v36 = __ldaxr(v35);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v35));
  if (!v37)
  {
    atomic_store(1u, v34 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
    if (v12)
    {
      do
      {
LABEL_34:
        v38 = __ldaxr((unsigned int *)v12);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, (unsigned int *)v12));
      if (!v39)
      {
        atomic_store(1u, (unsigned int *)v12);
        WTF::fastFree((WTF *)v12, v31);
      }
    }
  }
  else
  {
LABEL_33:
    if (v12)
      goto LABEL_34;
  }
  result = (WTF::StringImpl *)v54;
  v54 = 0;
  if (result)
  {
    v41 = (unsigned int *)((char *)result + 8);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, (unsigned int *)result + 2);
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::SubtleCrypto::wrapKey(_QWORD *a1, WebCore::JSDOMGlobalObject *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *result;
  unsigned __int8 *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  objc_class *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  JSC::JSCell **v86;
  int v87;
  objc_class *v88[2];
  int v89;
  JSC::JSCell **v90;
  int v91;
  unsigned __int8 *v92;
  WTF::StringImpl *v93;
  int v94;
  uint64_t *v95;
  WTF::StringImpl *v96;
  int v97;

  LOBYTE(v90) = 0;
  v91 = -1;
  v13 = *(unsigned int *)(a6 + 8);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(uint64_t **, JSC::JSCell ***, uint64_t))off_1E3395A00[v13])(&v95, &v90, a6);
    v91 = v13;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v92, (uint64_t)a2, &v90, 8);
  if (v91 != -1)
    ((void (*)(uint64_t **, JSC::JSCell ***))off_1E33959C0[v91])(&v95, &v90);
  v91 = -1;
  v14 = v94;
  if (!v94)
    goto LABEL_26;
  LOBYTE(v86) = 0;
  v87 = -1;
  v15 = *(unsigned int *)(a6 + 8);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(uint64_t **, JSC::JSCell ***, uint64_t))off_1E3395A00[v15])(&v95, &v86, a6);
    v87 = v15;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)v88, (uint64_t)a2, &v86, 0);
  LOBYTE(v95) = 0;
  v97 = -1;
  v16 = v89;
  if (v89 != -1)
  {
    ((void (*)(unsigned int **, uint64_t **, objc_class **))off_1E3395A70[v89])(&v85, &v95, v88);
    v97 = v16;
  }
  std::__variant_detail::__impl<std::unique_ptr<WebCore::CryptoAlgorithmParameters>,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)&v95, (uint64_t)&v92);
  if (v97 != -1)
    ((void (*)(unsigned int **, uint64_t **))off_1E33959F0[v97])(&v85, &v95);
  if (v89 != -1)
    ((void (*)(uint64_t **, objc_class **))off_1E33959F0[v89])(&v95, v88);
  v89 = -1;
  if (v87 != -1)
    ((void (*)(uint64_t **, JSC::JSCell ***))off_1E33959C0[v87])(&v95, &v86);
  v87 = -1;
  if (!v94)
  {
LABEL_26:
    v21 = v92;
    v92 = 0;
    if (v21[16] != *(unsigned __int8 *)(a5 + 12))
    {
      v22 = *a7;
      goto LABEL_30;
    }
    if ((*(_BYTE *)(a5 + 16) & 0x40) == 0)
    {
      v22 = *a7;
      goto LABEL_30;
    }
    v25 = *(unsigned __int8 *)(a4 + 12);
    if (v25 <= 0x15)
    {
      if (((1 << v25) & 0x301BFC) != 0)
      {
LABEL_39:
        if (*(_BYTE *)(a4 + 14))
        {
          v26 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
          if (v26 != -1)
          {
            v95 = (uint64_t *)&v85;
            v88[0] = (objc_class *)&v95;
            std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
          }
          WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v85, *(unsigned __int8 *)(a4 + 12));
          v27 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
          if (v27 != -1)
          {
            v95 = &v84;
            v88[0] = (objc_class *)&v95;
            std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, v88, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
          }
          WebCore::CryptoAlgorithmRegistry::create((uint64_t *)v88, *(unsigned __int8 *)(a5 + 12));
          v28 = a1[1];
          if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
          {
            v15 = v29 - 96;
            v30 = *(unsigned __int8 *)(v29 + 178);
            if (*(_BYTE *)(v29 + 178))
            {
              if (v30 == 1 || v30 == 2)
              {
                v31 = 0;
                ++*(_DWORD *)(v29 + 216);
              }
              else
              {
                v31 = 0;
              }
            }
            else
            {
              v31 = 0;
              *(_DWORD *)(v29 - 264) += 2;
            }
          }
          else
          {
            v15 = 0;
            v31 = 1;
          }
          v84 = *a7;
          WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)&v95, a1 + 5, &v84, a7);
          v32 = a1[3];
          if (v32)
            goto LABEL_134;
          v32 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v32 = 1;
          *(_QWORD *)(v32 + 8) = a1;
          v34 = (unsigned int *)a1[3];
          a1[3] = v32;
          if (!v34)
            goto LABEL_134;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v33);
          }
          v32 = a1[3];
          if (v32)
          {
LABEL_134:
            do
              v37 = __ldaxr((unsigned int *)v32);
            while (__stlxr(v37 + 1, (unsigned int *)v32));
          }
          v38 = *(_QWORD *)(a1[1] + 8);
          if (v38)
            v39 = v38 - 96;
          else
            v39 = 0;
          v40 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 136))(v39) + 440);
          v79 = v84;
          if (v32)
          {
            do
              v41 = __ldaxr((unsigned int *)v32);
            while (__stlxr(v41 + 1, (unsigned int *)v32));
          }
          v78 = (v40 >> 3) & 1;
          v42 = v88[0];
          if (v88[0])
          {
            v43 = (unsigned int *)((char *)v88[0] + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 + 1, v43));
          }
          v45 = v40 & 8;
          v46 = (unsigned int *)(a5 + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
          v77 = v14 != 0;
          if ((v31 & 1) == 0)
          {
            v48 = *(unsigned __int8 *)(v15 + 274);
            if (*(_BYTE *)(v15 + 274))
            {
              if (v48 == 1 || v48 == 2)
                ++*(_DWORD *)(v15 + 312);
            }
            else
            {
              *(_DWORD *)(v15 - 168) += 2;
            }
          }
          v80 = v31;
          v49 = a1[4];
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49);
          v50 = v84;
          if (v32)
          {
            do
              v51 = __ldaxr((unsigned int *)v32);
            while (__stlxr(v51 + 1, (unsigned int *)v32));
          }
          v52 = (uint64_t)v85;
          v53 = (unsigned int *)(a4 + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
          v95 = (uint64_t *)a4;
          v55 = WTF::fastMalloc((WTF *)0x50);
          *(_QWORD *)v55 = &off_1E3395F80;
          *(_QWORD *)(v55 + 8) = v79;
          *(_QWORD *)(v55 + 16) = v32;
          *(_QWORD *)(v55 + 24) = v42;
          *(_QWORD *)(v55 + 32) = a5;
          *(_QWORD *)(v55 + 40) = v21;
          *(_BYTE *)(v55 + 48) = v77;
          *(_QWORD *)(v55 + 56) = v15;
          *(_QWORD *)(v55 + 64) = v49;
          *(_BYTE *)(v55 + 72) = v78;
          v83 = v55;
          v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v56 = &off_1E3395FF8;
          v56[1] = v50;
          v56[2] = v32;
          v82 = v56;
          (*(void (**)(uint64_t, _QWORD, uint64_t **, uint64_t *, _QWORD **, BOOL))(*(_QWORD *)v52 + 88))(v52, a3, &v95, &v83, &v82, v45 != 0);
          v58 = v82;
          v82 = 0;
          if (v58)
            (*(void (**)(_QWORD *))(*v58 + 8))(v58);
          v59 = v83;
          v83 = 0;
          if (v59)
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
          v60 = (unsigned int *)v95;
          v95 = 0;
          if (!v60)
            goto LABEL_83;
          v61 = v60 + 2;
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            atomic_store(1u, v60 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 8))(v60);
            if (!v32)
              goto LABEL_87;
          }
          else
          {
LABEL_83:
            if (!v32)
              goto LABEL_87;
          }
          do
          {
            v64 = __ldaxr((unsigned int *)v32);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, (unsigned int *)v32));
          if (!v65)
          {
            atomic_store(1u, (unsigned int *)v32);
            WTF::fastFree((WTF *)v32, v57);
          }
LABEL_87:
          if ((v80 & 1) == 0)
          {
            v66 = *(unsigned __int8 *)(v15 + 274);
            if (!*(_BYTE *)(v15 + 274))
            {
              if (*(_DWORD *)(v15 - 168) == 2)
              {
                if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), v57);
              }
              else
              {
                *(_DWORD *)(v15 - 168) -= 2;
              }
              goto LABEL_91;
            }
            if (v66 != 1)
              goto LABEL_126;
            if (*(_DWORD *)(v15 + 312) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
            else
              --*(_DWORD *)(v15 + 312);
          }
LABEL_91:
          v67 = (unsigned int *)v88[0];
          v88[0] = 0;
          if (v67)
          {
            v68 = v67 + 2;
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
            {
              atomic_store(1u, v67 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
            }
          }
          result = v85;
          v85 = 0;
          if (result)
          {
            v71 = result + 2;
            do
            {
              v72 = __ldaxr(v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v71));
            if (!v73)
            {
              atomic_store(1u, result + 2);
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
          }
          goto LABEL_34;
        }
        v22 = *a7;
LABEL_30:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::DeferredPromise::reject(v22, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v95, 0);
        v24 = (WTF::StringImpl *)v95;
        v95 = 0;
        if (v24)
          goto LABEL_31;
        goto LABEL_33;
      }
      if (v25 == 1)
      {
        v75 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
        if (!v75
          || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 136))(v75) + 440) & 0x80000000000) == 0)
        {
          goto LABEL_39;
        }
      }
      else if (v25 == 10)
      {
        v74 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
        if (!v74
          || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 136))(v74) + 440) & 0x40000000000) == 0)
        {
          goto LABEL_39;
        }
      }
    }
    v76 = *a7;
    v88[0] = 0;
    LOBYTE(v95) = 6;
    v96 = 0;
    WebCore::DeferredPromise::reject(v76, (unsigned __int8 *)&v95, 0, v88);
    v24 = v96;
    v96 = 0;
    if (v24)
    {
LABEL_31:
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
LABEL_33:
    result = (unsigned int *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_34;
  }
  if (v94 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_126:
    if (v66 == 2)
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
    goto LABEL_91;
  }
  v17 = *a7;
  v18 = v93;
  v93 = 0;
  v88[0] = 0;
  LOBYTE(v95) = (_BYTE)v92;
  if (v18)
    *(_DWORD *)v18 += 2;
  v96 = v18;
  WebCore::DeferredPromise::reject(v17, (unsigned __int8 *)&v95, 0, v88);
  result = (unsigned int *)v96;
  v96 = 0;
  if (!result)
  {
LABEL_23:
    if (v18)
      goto LABEL_24;
    goto LABEL_34;
  }
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_23;
  }
  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
  if (v18)
  {
LABEL_24:
    if (*(_DWORD *)v18 == 2)
      result = (unsigned int *)WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
LABEL_34:
  if (v94 != -1)
    return (unsigned int *)((uint64_t (*)(uint64_t **, unsigned __int8 **))off_1E33959F0[v94])(&v95, &v92);
  return result;
}

WTF *WebCore::SubtleCrypto::unwrapKey(_QWORD *a1, unsigned __int8 *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, int **a9, uint64_t *a10)
{
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  char *v23;
  WTF *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  objc_class *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  void *v58;
  objc_class *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  _BOOL8 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  WTF *result;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int v122;
  char v123;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int *v128;
  WTF::StringImpl *v129[2];
  int v130;
  __int128 v131;
  uint64_t v132;
  BOOL v133;
  unsigned int *v134;
  unsigned int *v135;
  JSC::JSCell **v136;
  int v137;
  JSC::JSCell **v138;
  int v139;
  objc_class *v140;
  WTF::StringImpl *v141;
  int v142;
  JSC::JSCell **v143;
  int v144;
  unsigned __int8 *v145;
  WTF::StringImpl *v146;
  int v147;
  WTF *v148;
  int v149;
  int v150;
  objc_class *v151[2];

  v14 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v14 == -1)
    goto LABEL_181;
  v11 = a2;
  v129[0] = (WTF::StringImpl *)&v145;
  v20 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33959E0[v14])(v129, a4);
  v22 = v21;
  v148 = 0;
  v149 = 0;
  v150 = (int)v21;
  if (v21)
  {
    if ((unint64_t)v21 >> 32)
      goto LABEL_187;
    v23 = (char *)v20;
    v24 = (WTF *)WTF::fastMalloc(v21);
    v149 = (int)v22;
    v148 = v24;
    do
    {
      v25 = *v23++;
      *(_BYTE *)v24 = v25;
      v24 = (WTF *)((char *)v24 + 1);
      v22 = (WTF *)((char *)v22 - 1);
    }
    while (v22);
  }
  v123 = a8;
  v125 = a1;
  LOBYTE(v143) = 0;
  v144 = -1;
  v26 = *(unsigned int *)(a6 + 8);
  if ((_DWORD)v26 != -1)
  {
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E3395A00[v26])(v129, &v143, a6);
    v144 = v26;
  }
  v13 = (uint64_t)a10;
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v145, (uint64_t)v11, &v143, 9);
  if (v144 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v144])(v129, &v143);
  v144 = -1;
  v122 = v147;
  if (v147)
  {
    LOBYTE(v138) = 0;
    v139 = -1;
    v27 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v27 != -1)
    {
      ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E3395A00[v27])(v129, &v138, a6);
      v139 = v27;
    }
    WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v140, (uint64_t)v11, &v138, 1);
    LOBYTE(v129[0]) = 0;
    v130 = -1;
    v28 = v142;
    if (v142 != -1)
    {
      ((void (*)(objc_class **, WTF::StringImpl **, objc_class **))off_1E3395A70[v142])(v151, v129, &v140);
      v130 = v28;
    }
    std::__variant_detail::__impl<std::unique_ptr<WebCore::CryptoAlgorithmParameters>,WebCore::Exception>::__swap[abi:sn180100]((uint64_t)v129, (uint64_t)&v145);
    v12 = off_1E33959F0;
    if (v130 != -1)
      ((void (*)(objc_class **, WTF::StringImpl **))off_1E33959F0[v130])(v151, v129);
    if (v142 != -1)
      ((void (*)(WTF::StringImpl **, objc_class **))off_1E33959F0[v142])(v129, &v140);
    v10 = (unsigned __int8 *)0xFFFFFFFFLL;
    v142 = -1;
    if (v139 != -1)
      ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v139])(v129, &v138);
    v139 = -1;
    if (v147)
    {
      if (v147 == 1)
      {
        v29 = (objc_class *)*a10;
        v30 = v146;
        v146 = 0;
        v140 = 0;
        LOBYTE(v129[0]) = (_BYTE)v145;
        if (v30)
          *(_DWORD *)v30 += 2;
        v129[1] = v30;
        WebCore::DeferredPromise::reject((uint64_t)v29, (unsigned __int8 *)v129, 0, &v140);
        v32 = v129[1];
        v129[1] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::destroy(v32, v31);
            if (!v30)
              goto LABEL_155;
            goto LABEL_29;
          }
          *(_DWORD *)v32 -= 2;
        }
        if (!v30)
          goto LABEL_155;
LABEL_29:
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v31);
        else
          *(_DWORD *)v30 -= 2;
        goto LABEL_155;
      }
      goto LABEL_181;
    }
  }
  v10 = v145;
  v145 = 0;
  LOBYTE(v136) = 0;
  v137 = -1;
  v33 = *(unsigned int *)(a7 + 8);
  if ((_DWORD)v33 != -1)
  {
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***, uint64_t))off_1E3395A00[v33])(v129, &v136, a7);
    v137 = v33;
  }
  WebCore::normalizeCryptoAlgorithmParameters((uint64_t)&v140, (uint64_t)v11, &v136, 7);
  if (v137 != -1)
    ((void (*)(WTF::StringImpl **, JSC::JSCell ***))off_1E33959C0[v137])(v129, &v136);
  v137 = -1;
  v12 = off_1E33959F0;
  if (!v142)
  {
    v11 = (unsigned __int8 *)v140;
    v140 = 0;
    v37 = *((unsigned int *)a9 + 3);
    if (!(_DWORD)v37)
    {
      v38 = 0;
LABEL_51:
      if (v10[16] == *(unsigned __int8 *)(a5 + 12))
      {
        if ((*(_BYTE *)(a5 + 16) & 0x80) != 0)
        {
          v44 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
          if (v44 != -1)
          {
            v129[0] = (WTF::StringImpl *)&v135;
            v151[0] = (objc_class *)v129;
            std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, v151, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
          }
          WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v135, v11[16]);
          if (!v135)
          {
            v116 = *a10;
            v151[0] = 0;
            LOBYTE(v129[0]) = 6;
            v129[1] = 0;
            WebCore::DeferredPromise::reject(v116, (unsigned __int8 *)v129, 0, v151);
            v118 = v129[1];
            v129[1] = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
                WTF::StringImpl::destroy(v118, v117);
              else
                *(_DWORD *)v118 -= 2;
            }
            goto LABEL_150;
          }
          v45 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
          if (v45 != -1)
          {
            v129[0] = (WTF::StringImpl *)&v134;
            v151[0] = (objc_class *)v129;
            std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, v151, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
          }
          WebCore::CryptoAlgorithmRegistry::create((uint64_t *)&v134, *(unsigned __int8 *)(a5 + 12));
          if (!v134)
          {
            v119 = *a10;
            v151[0] = 0;
            LOBYTE(v129[0]) = 6;
            v129[1] = 0;
            WebCore::DeferredPromise::reject(v119, (unsigned __int8 *)v129, 0, v151);
            v121 = v129[1];
            v129[1] = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 2)
                WTF::StringImpl::destroy(v121, v120);
              else
                *(_DWORD *)v121 -= 2;
            }
            goto LABEL_145;
          }
          v151[0] = (objc_class *)*a10;
          WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)v129, v125 + 5, (uint64_t *)v151, a10);
          v13 = v125[3];
          if (v13)
            goto LABEL_191;
          v13 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v13 = 1;
          *(_QWORD *)(v13 + 8) = v125;
          v47 = (unsigned int *)v125[3];
          v125[3] = v13;
          if (!v47)
            goto LABEL_191;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v47);
            WTF::fastFree((WTF *)v47, v46);
          }
          v13 = v125[3];
          if (v13)
          {
LABEL_191:
            do
              v50 = __ldaxr((unsigned int *)v13);
            while (__stlxr(v50 + 1, (unsigned int *)v13));
          }
          v51 = *(_QWORD *)(v125[1] + 8);
          if (v51)
            v52 = v51 - 96;
          else
            v52 = 0;
          v53 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 136))(v52) + 440);
          v129[0] = v151[0];
          if (v13)
          {
            do
              v54 = __ldaxr((unsigned int *)v13);
            while (__stlxr(v54 + 1, (unsigned int *)v13));
          }
          v129[1] = (WTF::StringImpl *)v13;
          LOBYTE(v130) = a3;
          v55 = (uint64_t)v135;
          if (v135)
          {
            v56 = v135 + 2;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 + 1, v56));
          }
          *(_QWORD *)&v131 = v55;
          WebCore::crossThreadCopyImportParams((WebCore *)((char *)&v131 + 8), (const WebCore::CryptoAlgorithmParameters *)v11);
          LOBYTE(v132) = v123;
          HIDWORD(v132) = v38;
          v133 = (v53 & 8) != 0;
          v59 = v151[0];
          if (!v13)
            goto LABEL_85;
          v60 = v53 & 8;
          do
            v61 = __ldaxr((unsigned int *)v13);
          while (__stlxr(v61 + 1, (unsigned int *)v13));
          if (!v122)
          {
            v77 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8);
            if (v77 && (v78 = *(_QWORD *)(v77 + 8)) != 0)
            {
              v12 = (uint64_t (**)())(v78 - 96);
              v79 = *(unsigned __int8 *)(v78 + 178);
              if (*(_BYTE *)(v78 + 178))
              {
                if (v79 == 1 || v79 == 2)
                  ++*(_DWORD *)(v78 + 216);
              }
              else
              {
                *(_DWORD *)(v78 - 264) += 2;
              }
              v80 = (uint64_t)v134;
              v81 = (unsigned int *)(a5 + 8);
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 + 1, v81));
              v83 = v60 != 0;
              v128 = (unsigned int *)a5;
              v84 = WTF::fastMalloc((WTF *)0x40);
              *(_QWORD *)v84 = &off_1E3396020;
              v85 = *(_OWORD *)v129;
              v129[1] = 0;
              *(_OWORD *)(v84 + 8) = v85;
              *(_BYTE *)(v84 + 24) = v130;
              v86 = v131;
              v131 = 0uLL;
              *(_OWORD *)(v84 + 32) = v86;
              *(_QWORD *)(v84 + 48) = v132;
              *(_BYTE *)(v84 + 56) = v133;
              v127 = v84;
              v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v87 = &off_1E33960A8;
              v87[1] = v59;
              v87[2] = v13;
              v126 = v87;
              (*(void (**)(uint64_t, unsigned int **, WTF **, uint64_t *, _QWORD **, _BOOL8))(*(_QWORD *)v80 + 104))(v80, &v128, &v148, &v127, &v126, v83);
              v88 = v126;
              v126 = 0;
              if (v88)
                (*(void (**)(_QWORD *))(*v88 + 8))(v88);
              v89 = v127;
              v127 = 0;
              if (v89)
                (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
              v90 = v128;
              v128 = 0;
              if (v90)
              {
                v91 = v90 + 2;
                do
                {
                  v92 = __ldaxr(v91);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v91));
                if (!v93)
                {
                  atomic_store(1u, v90 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v90 + 8))(v90);
                }
              }
              v94 = *(unsigned __int8 *)(v78 + 178);
              if (*(_BYTE *)(v78 + 178))
              {
                if (v94 == 1)
                {
                  if (*(_DWORD *)(v78 + 216) != 1)
                  {
                    --*(_DWORD *)(v78 + 216);
                    goto LABEL_126;
                  }
                  goto LABEL_182;
                }
                if (v94 == 2)
                  WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v78 + 216));
              }
              else if (*(_DWORD *)(v78 - 264) == 2)
              {
                if ((*(_WORD *)(v78 - 258) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)(v78 - 288), v58);
              }
              else
              {
                *(_DWORD *)(v78 - 264) -= 2;
              }
            }
            else
            {
              do
              {
                v95 = __ldaxr((unsigned int *)v13);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, (unsigned int *)v13));
              if (!v96)
              {
                atomic_store(1u, (unsigned int *)v13);
                WTF::fastFree((WTF *)v13, v58);
              }
            }
          }
          else
          {
LABEL_85:
            v62 = (uint64_t)v134;
            v63 = (unsigned int *)(a5 + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 + 1, v63));
            v128 = (unsigned int *)a5;
            v65 = WTF::fastMalloc((WTF *)0x40);
            *(_QWORD *)v65 = &off_1E3396020;
            v66 = *(_OWORD *)v129;
            v129[1] = 0;
            *(_OWORD *)(v65 + 8) = v66;
            *(_BYTE *)(v65 + 24) = v130;
            v67 = v131;
            v131 = 0uLL;
            *(_OWORD *)(v65 + 32) = v67;
            *(_QWORD *)(v65 + 48) = v132;
            *(_BYTE *)(v65 + 56) = v133;
            v127 = v65;
            v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v68 = &off_1E33960A8;
            v68[1] = v59;
            v68[2] = v13;
            v126 = v68;
            v69 = *(_QWORD *)(v125[1] + 8);
            if (v69)
              v70 = v69 - 96;
            else
              v70 = 0;
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, WTF **, uint64_t *, _QWORD **, uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, v10, &v128, &v148, &v127, &v126, v70, v125[4]);
            v71 = v126;
            v126 = 0;
            if (v71)
              (*(void (**)(_QWORD *))(*v71 + 8))(v71);
            v72 = v127;
            v127 = 0;
            if (v72)
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
            v73 = v128;
            v128 = 0;
            if (v73)
            {
              v74 = v73 + 2;
              do
              {
                v75 = __ldaxr(v74);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, v74));
              if (!v76)
              {
                atomic_store(1u, v73 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
              }
            }
          }
LABEL_126:
          v97 = *((_QWORD *)&v131 + 1);
          *((_QWORD *)&v131 + 1) = 0;
          if (v97)
            (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
          v98 = (unsigned int *)v131;
          *(_QWORD *)&v131 = 0;
          if (v98)
          {
            v99 = v98 + 2;
            do
            {
              v100 = __ldaxr(v99);
              v101 = v100 - 1;
            }
            while (__stlxr(v101, v99));
            if (!v101)
            {
              atomic_store(1u, v98 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 8))(v98);
            }
          }
          v102 = (unsigned int *)v129[1];
          v129[1] = 0;
          if (!v102)
            goto LABEL_136;
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            atomic_store(1u, v102);
            WTF::fastFree((WTF *)v102, v58);
            if (v13)
            {
              do
              {
LABEL_137:
                v105 = __ldaxr((unsigned int *)v13);
                v106 = v105 - 1;
              }
              while (__stlxr(v106, (unsigned int *)v13));
              if (!v106)
              {
                atomic_store(1u, (unsigned int *)v13);
                WTF::fastFree((WTF *)v13, v58);
              }
            }
          }
          else
          {
LABEL_136:
            if (v13)
              goto LABEL_137;
          }
          v107 = v134;
          v134 = 0;
          if (v107)
          {
            v108 = v107 + 2;
            do
            {
              v109 = __ldaxr(v108);
              v110 = v109 - 1;
            }
            while (__stlxr(v110, v108));
            if (!v110)
            {
              atomic_store(1u, v107 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v107 + 8))(v107);
            }
          }
LABEL_145:
          v111 = v135;
          v135 = 0;
          if (v111)
          {
            v112 = v111 + 2;
            do
            {
              v113 = __ldaxr(v112);
              v114 = v113 - 1;
            }
            while (__stlxr(v114, v112));
            if (!v114)
            {
              atomic_store(1u, v111 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v111 + 8))(v111);
            }
          }
LABEL_150:
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v11 + 8))(v11);
          goto LABEL_151;
        }
        v42 = *a10;
      }
      else
      {
        v42 = *a10;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v42, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)v129, 0);
      v43 = v129[0];
      v129[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v31);
        else
          *(_DWORD *)v43 -= 2;
      }
      if (!v11)
        goto LABEL_151;
      goto LABEL_150;
    }
    v38 = 0;
    v39 = *a9;
    v40 = 4 * v37;
    while (1)
    {
      v41 = *v39;
      if (v41 >= 8)
        break;
      v38 |= dword_1969ED148[v41];
      ++v39;
      v40 -= 4;
      if (!v40)
        goto LABEL_51;
    }
LABEL_187:
    __break(0xC471u);
    JUMPOUT(0x195759D0CLL);
  }
  if (v142 != 1)
  {
LABEL_181:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_182:
    (*((void (**)(uint64_t (**)()))*v12 + 5))(v12);
    goto LABEL_126;
  }
  v34 = *a10;
  v35 = v141;
  v141 = 0;
  v151[0] = 0;
  LOBYTE(v129[0]) = (_BYTE)v140;
  if (v35)
    *(_DWORD *)v35 += 2;
  v129[1] = v35;
  WebCore::DeferredPromise::reject(v34, (unsigned __int8 *)v129, 0, v151);
  v36 = v129[1];
  v129[1] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v31);
      if (!v35)
        goto LABEL_151;
LABEL_43:
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v31);
      else
        *(_DWORD *)v35 -= 2;
      goto LABEL_151;
    }
    *(_DWORD *)v36 -= 2;
  }
  if (v35)
    goto LABEL_43;
LABEL_151:
  if (v142 != -1)
    ((void (*)(WTF::StringImpl **, objc_class **))off_1E33959F0[v142])(v129, &v140);
  if (v10)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
LABEL_155:
  if (v147 != -1)
    ((void (*)(WTF::StringImpl **, unsigned __int8 **))off_1E33959F0[v147])(v129, &v145);
  result = v148;
  if (v148)
  {
    v148 = 0;
    v149 = 0;
    return (WTF *)WTF::fastFree(result, v31);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33956F8;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::identifier(WebCore::CryptoAlgorithmAESCBC *this)
{
  return 8;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::encrypt(uint64_t a1, WebCore::CryptoAlgorithmAesCbcCfbParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  int v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  unsigned int *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  size_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  char v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  size_t __len;
  unsigned int *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  char v52[8];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *))(*(_QWORD *)a2 + 16))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19575A1B4);
  }
  if (*((_DWORD *)WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2) + 3) != 16)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __len = 0;
  v43 = *((_BYTE *)a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2);
  if (v15 != (void **)&v46)
  {
    v16 = v15;
    v17 = *((_DWORD *)v15 + 3);
    if (v17)
    {
      v18 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v15 + 3));
      LODWORD(__len) = v17;
      v46 = v18;
      v19 = (char *)*v16;
      if (!HIDWORD(__len))
      {
        v20 = 0;
        goto LABEL_11;
      }
      memmove(v18, v19, HIDWORD(__len));
      v20 = HIDWORD(__len);
      v18 = v46;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v19 = (char *)*v16;
LABEL_11:
    memcpy((char *)v18 + v20, &v19[v20], *((unsigned int *)v16 + 3) - v20);
    HIDWORD(__len) = *((_DWORD *)v16 + 3);
  }
  v22 = *a3;
  *a3 = 0;
  v23 = *(WTF **)a4;
  v48 = v22;
  v49 = v23;
  v24 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v50 = v24;
  v25 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v25 = &off_1E33960D0;
  *(_BYTE *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = v43;
  *(_QWORD *)(v25 + 8) = off_1E3223378;
  *(_DWORD *)(v25 + 40) = -1;
  if (v45 != -1)
  {
    ((void (*)(char *))off_1E3395890[v45])(v52);
    *(_DWORD *)(v25 + 40) = v45;
  }
  v26 = v46;
  v46 = 0;
  *(_QWORD *)(v25 + 48) = v26;
  v27 = __len;
  __len = 0;
  *(_QWORD *)(v25 + 56) = v27;
  *(_QWORD *)(v25 + 64) = v48;
  v28 = v49;
  v48 = 0;
  v49 = 0;
  *(_QWORD *)(v25 + 72) = v28;
  v29 = v50;
  v50 = 0;
  *(_QWORD *)(v25 + 80) = v29;
  v30 = *a5;
  *a5 = 0;
  v31 = *a6;
  *a6 = 0;
  v32 = *(_OWORD *)(a7 + 240);
  v53 = *(_OWORD *)(a7 + 224);
  v54 = v32;
  v33 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v33 = &off_1E3395AD0;
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v33 + 24) = v30;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v54;
  *(_OWORD *)(v33 + 48) = v53;
  *(_OWORD *)(v33 + 64) = v34;
  v51 = v33;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v51);
  v36 = v51;
  v51 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v37, v35);
  }
  v38 = v48;
  v48 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  v42 = v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v42, v35);
  }
  if (v45 != -1)
    ((void (*)(char *, uint64_t *))off_1E3395880[v45])(v52, &v44);
  v45 = -1;
  return 0;
}

void **WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(WebCore::CryptoAlgorithmAesCbcCfbParams *this)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  char *v21;

  v1 = (void **)((char *)this + 40);
  if (!*((_DWORD *)this + 13))
  {
    v3 = *((unsigned int *)this + 8);
    if ((_DWORD)v3 == -1)
      goto LABEL_21;
    v21 = &v20;
    if (!((uint64_t (*)(char **, char *))off_1E3395AA0[v3])(&v21, (char *)this + 24))
      return v1;
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 == -1)
    {
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v21 = &v20;
    v5 = ((uint64_t (*)(char **, char *))off_1E33959E0[v4])(&v21, (char *)this + 24);
    if (v6)
    {
      v7 = (const void *)v5;
      v8 = v6;
      v9 = *((unsigned int *)this + 12);
      v10 = *((unsigned int *)this + 13);
      v11 = v6 + v10;
      if (v6 + v10 > v9)
      {
        v14 = v9 + (v9 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v11)
          v16 = v6 + v10;
        else
          v16 = v15;
        if (HIDWORD(v16))
          goto LABEL_22;
        v17 = *v1;
        v18 = (void *)WTF::fastMalloc((WTF *)v16);
        *((_DWORD *)this + 12) = v16;
        *((_QWORD *)this + 5) = v18;
        memcpy(v18, v17, v10);
        if (v17)
        {
          if (*v1 == v17)
          {
            *((_QWORD *)this + 5) = 0;
            *((_DWORD *)this + 12) = 0;
          }
          WTF::fastFree((WTF *)v17, v19);
        }
      }
      v12 = *((unsigned int *)this + 13);
      if (v11 >= v12)
      {
        memcpy((void *)(*((_QWORD *)this + 5) + v12), v7, v8);
        *((_DWORD *)this + 13) = v11;
        return v1;
      }
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x19575A330);
    }
  }
  return v1;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::decrypt(uint64_t a1, WebCore::CryptoAlgorithmAesCbcCfbParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  int v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  unsigned int *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  size_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  char v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  size_t __len;
  unsigned int *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  char v52[8];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *))(*(_QWORD *)a2 + 16))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19575A6E0);
  }
  if (*((_DWORD *)WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2) + 3) != 16)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __len = 0;
  v43 = *((_BYTE *)a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2);
  if (v15 != (void **)&v46)
  {
    v16 = v15;
    v17 = *((_DWORD *)v15 + 3);
    if (v17)
    {
      v18 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v15 + 3));
      LODWORD(__len) = v17;
      v46 = v18;
      v19 = (char *)*v16;
      if (!HIDWORD(__len))
      {
        v20 = 0;
        goto LABEL_11;
      }
      memmove(v18, v19, HIDWORD(__len));
      v20 = HIDWORD(__len);
      v18 = v46;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v19 = (char *)*v16;
LABEL_11:
    memcpy((char *)v18 + v20, &v19[v20], *((unsigned int *)v16 + 3) - v20);
    HIDWORD(__len) = *((_DWORD *)v16 + 3);
  }
  v22 = *a3;
  *a3 = 0;
  v23 = *(WTF **)a4;
  v48 = v22;
  v49 = v23;
  v24 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v50 = v24;
  v25 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v25 = &off_1E33960F8;
  *(_BYTE *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = v43;
  *(_QWORD *)(v25 + 8) = off_1E3223378;
  *(_DWORD *)(v25 + 40) = -1;
  if (v45 != -1)
  {
    ((void (*)(char *))off_1E3395890[v45])(v52);
    *(_DWORD *)(v25 + 40) = v45;
  }
  v26 = v46;
  v46 = 0;
  *(_QWORD *)(v25 + 48) = v26;
  v27 = __len;
  __len = 0;
  *(_QWORD *)(v25 + 56) = v27;
  *(_QWORD *)(v25 + 64) = v48;
  v28 = v49;
  v48 = 0;
  v49 = 0;
  *(_QWORD *)(v25 + 72) = v28;
  v29 = v50;
  v50 = 0;
  *(_QWORD *)(v25 + 80) = v29;
  v30 = *a5;
  *a5 = 0;
  v31 = *a6;
  *a6 = 0;
  v32 = *(_OWORD *)(a7 + 240);
  v53 = *(_OWORD *)(a7 + 224);
  v54 = v32;
  v33 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v33 = &off_1E3395AD0;
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v33 + 24) = v30;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v54;
  *(_OWORD *)(v33 + 48) = v53;
  *(_OWORD *)(v33 + 64) = v34;
  v51 = v33;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v51);
  v36 = v51;
  v51 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v37, v35);
  }
  v38 = v48;
  v48 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  v42 = v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v42, v35);
  }
  if (v45 != -1)
    ((void (*)(char *, uint64_t *))off_1E3395880[v45])(v52, &v44);
  v45 = -1;
  return 0;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::generateKey(uint64_t a1, unsigned __int16 *a2, char a3, int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  char v19;

  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2) != 4)
    goto LABEL_13;
  if ((a4 & 0x3C) != 0)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v13 = a2[9];
  if ((_DWORD)v13 != 128 && (_DWORD)v13 != 256 && (_DWORD)v13 != 192)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = (WTF *)(v13 >> 3);
  v16 = (void *)WTF::fastMalloc(v15);
  if (CCRandomGenerateBytes(v16, (size_t)v15))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19575A870);
  }
  *(_DWORD *)(v14 + 8) = 1;
  *(_WORD *)(v14 + 12) = 520;
  *(_BYTE *)(v14 + 14) = a3;
  *(_DWORD *)(v14 + 16) = a4;
  *(_QWORD *)v14 = off_1E3397370;
  *(_QWORD *)(v14 + 24) = v16;
  *(_DWORD *)(v14 + 32) = (_DWORD)v15;
  *(_DWORD *)(v14 + 36) = (_DWORD)v15;
  v17[0] = v14;
  v18 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v17);
  if (v18 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3395AB0[v18])(&v19, v17);
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::importKey(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  if ((a6 & 0x3C) != 0)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)(a3 + 184) == 1)
    {
      v19 = *(_BYTE *)(a4 + 16);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3396120;
      v26 = v20;
      WebCore::CryptoKeyAES::importJwk(v19, a3, a5, a6, &v26, &v27);
      v21 = v26;
      v17 = v27;
      v26 = 0;
      v27 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      if (v17)
        goto LABEL_15;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    }
LABEL_22:
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CryptoAlgorithmAESCBC::exportKey(v25);
  }
  if (a2)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (*(_DWORD *)(a3 + 184))
    goto LABEL_22;
  v15 = 8 * *(unsigned int *)(a3 + 12);
  if (v15 != 128 && v15 != 256 && v15 != 192)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  v16 = *(_BYTE *)(a4 + 16);
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v17 + 8) = 1;
  *(_BYTE *)(v17 + 12) = v16;
  *(_BYTE *)(v17 + 13) = 2;
  *(_BYTE *)(v17 + 14) = a5;
  *(_DWORD *)(v17 + 16) = a6;
  *(_QWORD *)v17 = off_1E3397370;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v17 + 24) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v17 + 32) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(v17 + 36) = v18;
LABEL_15:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v17);
  v22 = (unsigned int *)(v17 + 8);
  do
  {
    v23 = __ldaxr(v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v22));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)(v17 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCBC::exportKey(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  WTF::StringImpl *v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  WTF::StringImpl *v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD v54[2];

  v8 = *a3;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v9 = (WTF *)*(unsigned int *)(v8 + 36);
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v37 = 0uLL;
  v53 = 0;
  if ((_DWORD)a2 == 3)
  {
    v28 = 0;
    v29 = 0;
    v35 = 0;
    v23 = 0uLL;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    memset(v34, 0, 25);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::base64EncodeToString();
    v36 = v54[0];
    WebCore::CryptoKey::usages((char *)v8, (uint64_t)v54);
    v24 = v54[0];
    v25 = v54[1];
    v26 = 1;
    v29 = *(unsigned __int8 *)(v8 + 14) | 0x100;
    v12 = 8 * *(unsigned int *)(v8 + 36);
    if (v12 == 256 || v12 == 192 || v12 == 128)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WTF::StringImpl *)v54[0];
    }
    ((void (*)(_QWORD *, __int128 *))*(&off_1E3395A38 + v53))(v54, &v37);
    v14 = v23;
    v23 = 0uLL;
    v37 = v14;
    v38 = v24;
    *(_QWORD *)&v14 = v25;
    v24 = 0;
    v25 = 0;
    v39 = v14;
    v40 = 1;
    v41 = v27;
    v15 = v28;
    v28 = 0;
    v42 = v15;
    v43 = v29;
    v16 = v30;
    v17 = v31;
    v30 = 0u;
    v31 = 0u;
    v44 = v16;
    v45 = v17;
    v18 = v32;
    v19 = v33;
    v32 = 0u;
    v33 = 0u;
    v46 = v18;
    v47 = v19;
    v20 = v34[0];
    memset(v34, 0, 24);
    v48 = v20;
    v49 = *(_QWORD *)&v34[1];
    LOBYTE(v50) = 0;
    v51 = 0;
    v21 = v36;
    v36 = 0;
    v52 = v21;
    v53 = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v23, v22);
LABEL_14:
    result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, a2, &v37);
    v13 = v53;
    if (v53 == -1)
      return result;
    return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E3395A38 + v13))(&v23, &v37);
  }
  if (!(_DWORD)a2)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    memcpy(v10, *(const void **)(v8 + 24), *(unsigned int *)(v8 + 36));
    *(_QWORD *)&v37 = v10;
    DWORD2(v37) = (_DWORD)v9;
    HIDWORD(v37) = (_DWORD)v9;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
  v13 = 0;
  return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E3395A38 + v13))(&v23, &v37);
}

uint64_t WebCore::CryptoAlgorithmAESCBC::getKeyLength@<X0>(const WebCore::CryptoAlgorithmParameters *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 4)
  {
    v6 = *((unsigned __int16 *)a1 + 9);
    if ((_DWORD)v6 == 128 || (_DWORD)v6 == 192 || (_DWORD)v6 == 256)
    {
      v7 = 0;
      *(_QWORD *)a2 = v6;
    }
    else
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3395780;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::identifier(WebCore::CryptoAlgorithmAESCFB *this)
{
  return 10;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::encrypt(uint64_t a1, WebCore::CryptoAlgorithmAesCbcCfbParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  int v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  unsigned int *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  size_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  char v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  size_t __len;
  unsigned int *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  char v52[8];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *))(*(_QWORD *)a2 + 16))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19575B244);
  }
  if (*((_DWORD *)WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2) + 3) != 16)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __len = 0;
  v43 = *((_BYTE *)a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2);
  if (v15 != (void **)&v46)
  {
    v16 = v15;
    v17 = *((_DWORD *)v15 + 3);
    if (v17)
    {
      v18 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v15 + 3));
      LODWORD(__len) = v17;
      v46 = v18;
      v19 = (char *)*v16;
      if (!HIDWORD(__len))
      {
        v20 = 0;
        goto LABEL_11;
      }
      memmove(v18, v19, HIDWORD(__len));
      v20 = HIDWORD(__len);
      v18 = v46;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v19 = (char *)*v16;
LABEL_11:
    memcpy((char *)v18 + v20, &v19[v20], *((unsigned int *)v16 + 3) - v20);
    HIDWORD(__len) = *((_DWORD *)v16 + 3);
  }
  v22 = *a3;
  *a3 = 0;
  v23 = *(WTF **)a4;
  v48 = v22;
  v49 = v23;
  v24 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v50 = v24;
  v25 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v25 = &off_1E3396148;
  *(_BYTE *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = v43;
  *(_QWORD *)(v25 + 8) = off_1E3223378;
  *(_DWORD *)(v25 + 40) = -1;
  if (v45 != -1)
  {
    ((void (*)(char *))off_1E3395890[v45])(v52);
    *(_DWORD *)(v25 + 40) = v45;
  }
  v26 = v46;
  v46 = 0;
  *(_QWORD *)(v25 + 48) = v26;
  v27 = __len;
  __len = 0;
  *(_QWORD *)(v25 + 56) = v27;
  *(_QWORD *)(v25 + 64) = v48;
  v28 = v49;
  v48 = 0;
  v49 = 0;
  *(_QWORD *)(v25 + 72) = v28;
  v29 = v50;
  v50 = 0;
  *(_QWORD *)(v25 + 80) = v29;
  v30 = *a5;
  *a5 = 0;
  v31 = *a6;
  *a6 = 0;
  v32 = *(_OWORD *)(a7 + 240);
  v53 = *(_OWORD *)(a7 + 224);
  v54 = v32;
  v33 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v33 = &off_1E3395AD0;
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v33 + 24) = v30;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v54;
  *(_OWORD *)(v33 + 48) = v53;
  *(_OWORD *)(v33 + 64) = v34;
  v51 = v33;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v51);
  v36 = v51;
  v51 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v37, v35);
  }
  v38 = v48;
  v48 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  v42 = v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v42, v35);
  }
  if (v45 != -1)
    ((void (*)(char *, uint64_t *))off_1E3395880[v45])(v52, &v44);
  v45 = -1;
  return 0;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::decrypt(uint64_t a1, WebCore::CryptoAlgorithmAesCbcCfbParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  int v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  unsigned int *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  size_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  char v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  size_t __len;
  unsigned int *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  char v52[8];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmAesCbcCfbParams *))(*(_QWORD *)a2 + 16))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19575B60CLL);
  }
  if (*((_DWORD *)WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2) + 3) != 16)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __len = 0;
  v43 = *((_BYTE *)a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a2);
  if (v15 != (void **)&v46)
  {
    v16 = v15;
    v17 = *((_DWORD *)v15 + 3);
    if (v17)
    {
      v18 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v15 + 3));
      LODWORD(__len) = v17;
      v46 = v18;
      v19 = (char *)*v16;
      if (!HIDWORD(__len))
      {
        v20 = 0;
        goto LABEL_11;
      }
      memmove(v18, v19, HIDWORD(__len));
      v20 = HIDWORD(__len);
      v18 = v46;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v19 = (char *)*v16;
LABEL_11:
    memcpy((char *)v18 + v20, &v19[v20], *((unsigned int *)v16 + 3) - v20);
    HIDWORD(__len) = *((_DWORD *)v16 + 3);
  }
  v22 = *a3;
  *a3 = 0;
  v23 = *(WTF **)a4;
  v48 = v22;
  v49 = v23;
  v24 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v50 = v24;
  v25 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v25 = &off_1E3396170;
  *(_BYTE *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = v43;
  *(_QWORD *)(v25 + 8) = off_1E3223378;
  *(_DWORD *)(v25 + 40) = -1;
  if (v45 != -1)
  {
    ((void (*)(char *))off_1E3395890[v45])(v52);
    *(_DWORD *)(v25 + 40) = v45;
  }
  v26 = v46;
  v46 = 0;
  *(_QWORD *)(v25 + 48) = v26;
  v27 = __len;
  __len = 0;
  *(_QWORD *)(v25 + 56) = v27;
  *(_QWORD *)(v25 + 64) = v48;
  v28 = v49;
  v48 = 0;
  v49 = 0;
  *(_QWORD *)(v25 + 72) = v28;
  v29 = v50;
  v50 = 0;
  *(_QWORD *)(v25 + 80) = v29;
  v30 = *a5;
  *a5 = 0;
  v31 = *a6;
  *a6 = 0;
  v32 = *(_OWORD *)(a7 + 240);
  v53 = *(_OWORD *)(a7 + 224);
  v54 = v32;
  v33 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v33 = &off_1E3395AD0;
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v33 + 24) = v30;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v54;
  *(_OWORD *)(v33 + 48) = v53;
  *(_OWORD *)(v33 + 64) = v34;
  v51 = v33;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v51);
  v36 = v51;
  v51 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v37, v35);
  }
  v38 = v48;
  v48 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  v42 = v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v42, v35);
  }
  if (v45 != -1)
    ((void (*)(char *, uint64_t *))off_1E3395880[v45])(v52, &v44);
  v45 = -1;
  return 0;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::generateKey(uint64_t a1, unsigned __int16 *a2, char a3, int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  char v19;

  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2) != 4)
    goto LABEL_13;
  if ((a4 & 0x3C) != 0)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v13 = a2[9];
  if ((_DWORD)v13 != 128 && (_DWORD)v13 != 256 && (_DWORD)v13 != 192)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = (WTF *)(v13 >> 3);
  v16 = (void *)WTF::fastMalloc(v15);
  if (CCRandomGenerateBytes(v16, (size_t)v15))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19575B79CLL);
  }
  *(_DWORD *)(v14 + 8) = 1;
  *(_WORD *)(v14 + 12) = 522;
  *(_BYTE *)(v14 + 14) = a3;
  *(_DWORD *)(v14 + 16) = a4;
  *(_QWORD *)v14 = off_1E3397370;
  *(_QWORD *)(v14 + 24) = v16;
  *(_DWORD *)(v14 + 32) = (_DWORD)v15;
  *(_DWORD *)(v14 + 36) = (_DWORD)v15;
  v17[0] = v14;
  v18 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v17);
  if (v18 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3395AB0[v18])(&v19, v17);
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::importKey(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  if ((a6 & 0x3C) != 0)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)(a3 + 184) == 1)
    {
      v19 = *(_BYTE *)(a4 + 16);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3396198;
      v26 = v20;
      WebCore::CryptoKeyAES::importJwk(v19, a3, a5, a6, &v26, &v27);
      v21 = v26;
      v17 = v27;
      v26 = 0;
      v27 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      if (v17)
        goto LABEL_15;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    }
LABEL_22:
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CryptoAlgorithmAESCFB::exportKey(v25);
  }
  if (a2)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (*(_DWORD *)(a3 + 184))
    goto LABEL_22;
  v15 = 8 * *(unsigned int *)(a3 + 12);
  if (v15 != 128 && v15 != 256 && v15 != 192)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  v16 = *(_BYTE *)(a4 + 16);
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v17 + 8) = 1;
  *(_BYTE *)(v17 + 12) = v16;
  *(_BYTE *)(v17 + 13) = 2;
  *(_BYTE *)(v17 + 14) = a5;
  *(_DWORD *)(v17 + 16) = a6;
  *(_QWORD *)v17 = off_1E3397370;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v17 + 24) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v17 + 32) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(v17 + 36) = v18;
LABEL_15:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v17);
  v22 = (unsigned int *)(v17 + 8);
  do
  {
    v23 = __ldaxr(v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v22));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)(v17 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCFB::exportKey(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  WTF::StringImpl *v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  WTF::StringImpl *v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD v54[2];

  v8 = *a3;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v9 = (WTF *)*(unsigned int *)(v8 + 36);
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v37 = 0uLL;
  v53 = 0;
  if ((_DWORD)a2 == 3)
  {
    v28 = 0;
    v29 = 0;
    v35 = 0;
    v23 = 0uLL;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    memset(v34, 0, 25);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::base64EncodeToString();
    v36 = v54[0];
    WebCore::CryptoKey::usages((char *)v8, (uint64_t)v54);
    v24 = v54[0];
    v25 = v54[1];
    v26 = 1;
    v29 = *(unsigned __int8 *)(v8 + 14) | 0x100;
    v12 = 8 * *(unsigned int *)(v8 + 36);
    if (v12 == 256 || v12 == 192 || v12 == 128)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WTF::StringImpl *)v54[0];
    }
    ((void (*)(_QWORD *, __int128 *))*(&off_1E3395A38 + v53))(v54, &v37);
    v14 = v23;
    v23 = 0uLL;
    v37 = v14;
    v38 = v24;
    *(_QWORD *)&v14 = v25;
    v24 = 0;
    v25 = 0;
    v39 = v14;
    v40 = 1;
    v41 = v27;
    v15 = v28;
    v28 = 0;
    v42 = v15;
    v43 = v29;
    v16 = v30;
    v17 = v31;
    v30 = 0u;
    v31 = 0u;
    v44 = v16;
    v45 = v17;
    v18 = v32;
    v19 = v33;
    v32 = 0u;
    v33 = 0u;
    v46 = v18;
    v47 = v19;
    v20 = v34[0];
    memset(v34, 0, 24);
    v48 = v20;
    v49 = *(_QWORD *)&v34[1];
    LOBYTE(v50) = 0;
    v51 = 0;
    v21 = v36;
    v36 = 0;
    v52 = v21;
    v53 = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v23, v22);
LABEL_14:
    result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, a2, &v37);
    v13 = v53;
    if (v53 == -1)
      return result;
    return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E3395A38 + v13))(&v23, &v37);
  }
  if (!(_DWORD)a2)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    memcpy(v10, *(const void **)(v8 + 24), *(unsigned int *)(v8 + 36));
    *(_QWORD *)&v37 = v10;
    DWORD2(v37) = (_DWORD)v9;
    HIDWORD(v37) = (_DWORD)v9;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
  v13 = 0;
  return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E3395A38 + v13))(&v23, &v37);
}

uint64_t WebCore::CryptoAlgorithmAESCFB::getKeyLength@<X0>(const WebCore::CryptoAlgorithmParameters *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 4)
  {
    v6 = *((unsigned __int16 *)a1 + 9);
    if ((_DWORD)v6 == 128 || (_DWORD)v6 == 192 || (_DWORD)v6 == 256)
    {
      v7 = 0;
      *(_QWORD *)a2 = v6;
    }
    else
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3395808;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::identifier(WebCore::CryptoAlgorithmAESCTR *this)
{
  return 7;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::encrypt(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  int v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  size_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  WTF *v48;
  size_t __len;
  unsigned int *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  char v54[8];
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19575C198);
  }
  if (*((_DWORD *)WebCore::CryptoAlgorithmAesCtrParams::counterVector((WebCore::CryptoAlgorithmAesCtrParams *)a2) + 3) != 16
    || (unint64_t)(*(_QWORD *)(a2 + 40) - 1) >= 0x80)
  {
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  }
  v45 = 0;
  v46 = 0;
  v48 = 0;
  __len = 0;
  v44 = *(_BYTE *)(a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesCtrParams::counterVector((WebCore::CryptoAlgorithmAesCtrParams *)a2);
  if (v15 != (void **)&v48)
  {
    v16 = v15;
    v17 = *((_DWORD *)v15 + 3);
    if (v17)
    {
      v18 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v15 + 3));
      LODWORD(__len) = v17;
      v48 = v18;
      v19 = (char *)*v16;
      if (!HIDWORD(__len))
      {
        v20 = 0;
        goto LABEL_12;
      }
      memmove(v18, v19, HIDWORD(__len));
      v20 = HIDWORD(__len);
      v18 = v48;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v19 = (char *)*v16;
LABEL_12:
    memcpy((char *)v18 + v20, &v19[v20], *((unsigned int *)v16 + 3) - v20);
    HIDWORD(__len) = *((_DWORD *)v16 + 3);
  }
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *a3;
  *a3 = 0;
  v47 = v22;
  v24 = *(WTF **)a4;
  v50 = v23;
  v51 = v24;
  v25 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v52 = v25;
  v26 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v26 = &off_1E33961C0;
  *(_BYTE *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_BYTE *)(v26 + 24) = v44;
  *(_QWORD *)(v26 + 8) = off_1E32233E0;
  *(_DWORD *)(v26 + 40) = -1;
  if (v46 != -1)
  {
    ((void (*)(char *))off_1E3395890[v46])(v54);
    *(_DWORD *)(v26 + 40) = v46;
  }
  *(_QWORD *)(v26 + 48) = v47;
  v27 = v48;
  v48 = 0;
  *(_QWORD *)(v26 + 56) = v27;
  v28 = __len;
  __len = 0;
  *(_QWORD *)(v26 + 64) = v28;
  *(_QWORD *)(v26 + 72) = v50;
  v29 = v51;
  v50 = 0;
  v51 = 0;
  *(_QWORD *)(v26 + 80) = v29;
  v30 = v52;
  v52 = 0;
  *(_QWORD *)(v26 + 88) = v30;
  v31 = *a5;
  *a5 = 0;
  v32 = *a6;
  *a6 = 0;
  v33 = *(_OWORD *)(a7 + 240);
  v55 = *(_OWORD *)(a7 + 224);
  v56 = v33;
  v34 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v34 = &off_1E3395AD0;
  *(_QWORD *)(v34 + 16) = v26;
  *(_QWORD *)(v34 + 24) = v31;
  *(_QWORD *)(v34 + 32) = v32;
  v35 = v56;
  *(_OWORD *)(v34 + 48) = v55;
  *(_OWORD *)(v34 + 64) = v35;
  v53 = v34;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v53);
  v37 = v53;
  v53 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v38, v36);
  }
  v39 = v50;
  v50 = 0;
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  v43 = v48;
  if (v48)
  {
    v48 = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v43, v36);
  }
  if (v46 != -1)
    ((void (*)(char *, uint64_t *))off_1E3395880[v46])(v54, &v45);
  v46 = -1;
  return 0;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::decrypt(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  int v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  size_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  WTF *v48;
  size_t __len;
  unsigned int *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  char v54[8];
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19575C588);
  }
  if (*((_DWORD *)WebCore::CryptoAlgorithmAesCtrParams::counterVector((WebCore::CryptoAlgorithmAesCtrParams *)a2) + 3) != 16
    || (unint64_t)(*(_QWORD *)(a2 + 40) - 1) >= 0x80)
  {
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  }
  v45 = 0;
  v46 = 0;
  v48 = 0;
  __len = 0;
  v44 = *(_BYTE *)(a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesCtrParams::counterVector((WebCore::CryptoAlgorithmAesCtrParams *)a2);
  if (v15 != (void **)&v48)
  {
    v16 = v15;
    v17 = *((_DWORD *)v15 + 3);
    if (v17)
    {
      v18 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)v15 + 3));
      LODWORD(__len) = v17;
      v48 = v18;
      v19 = (char *)*v16;
      if (!HIDWORD(__len))
      {
        v20 = 0;
        goto LABEL_12;
      }
      memmove(v18, v19, HIDWORD(__len));
      v20 = HIDWORD(__len);
      v18 = v48;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v19 = (char *)*v16;
LABEL_12:
    memcpy((char *)v18 + v20, &v19[v20], *((unsigned int *)v16 + 3) - v20);
    HIDWORD(__len) = *((_DWORD *)v16 + 3);
  }
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *a3;
  *a3 = 0;
  v47 = v22;
  v24 = *(WTF **)a4;
  v50 = v23;
  v51 = v24;
  v25 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v52 = v25;
  v26 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v26 = &off_1E33961E8;
  *(_BYTE *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_BYTE *)(v26 + 24) = v44;
  *(_QWORD *)(v26 + 8) = off_1E32233E0;
  *(_DWORD *)(v26 + 40) = -1;
  if (v46 != -1)
  {
    ((void (*)(char *))off_1E3395890[v46])(v54);
    *(_DWORD *)(v26 + 40) = v46;
  }
  *(_QWORD *)(v26 + 48) = v47;
  v27 = v48;
  v48 = 0;
  *(_QWORD *)(v26 + 56) = v27;
  v28 = __len;
  __len = 0;
  *(_QWORD *)(v26 + 64) = v28;
  *(_QWORD *)(v26 + 72) = v50;
  v29 = v51;
  v50 = 0;
  v51 = 0;
  *(_QWORD *)(v26 + 80) = v29;
  v30 = v52;
  v52 = 0;
  *(_QWORD *)(v26 + 88) = v30;
  v31 = *a5;
  *a5 = 0;
  v32 = *a6;
  *a6 = 0;
  v33 = *(_OWORD *)(a7 + 240);
  v55 = *(_OWORD *)(a7 + 224);
  v56 = v33;
  v34 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v34 = &off_1E3395AD0;
  *(_QWORD *)(v34 + 16) = v26;
  *(_QWORD *)(v34 + 24) = v31;
  *(_QWORD *)(v34 + 32) = v32;
  v35 = v56;
  *(_OWORD *)(v34 + 48) = v55;
  *(_OWORD *)(v34 + 64) = v35;
  v53 = v34;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v53);
  v37 = v53;
  v53 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v38, v36);
  }
  v39 = v50;
  v50 = 0;
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  v43 = v48;
  if (v48)
  {
    v48 = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v43, v36);
  }
  if (v46 != -1)
    ((void (*)(char *, uint64_t *))off_1E3395880[v46])(v54, &v45);
  v46 = -1;
  return 0;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::generateKey(uint64_t a1, unsigned __int16 *a2, char a3, int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  char v19;

  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2) != 4)
    goto LABEL_13;
  if ((a4 & 0x3C) != 0)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v13 = a2[9];
  if ((_DWORD)v13 != 128 && (_DWORD)v13 != 256 && (_DWORD)v13 != 192)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = (WTF *)(v13 >> 3);
  v16 = (void *)WTF::fastMalloc(v15);
  if (CCRandomGenerateBytes(v16, (size_t)v15))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19575C718);
  }
  *(_DWORD *)(v14 + 8) = 1;
  *(_WORD *)(v14 + 12) = 519;
  *(_BYTE *)(v14 + 14) = a3;
  *(_DWORD *)(v14 + 16) = a4;
  *(_QWORD *)v14 = off_1E3397370;
  *(_QWORD *)(v14 + 24) = v16;
  *(_DWORD *)(v14 + 32) = (_DWORD)v15;
  *(_DWORD *)(v14 + 36) = (_DWORD)v15;
  v17[0] = v14;
  v18 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v17);
  if (v18 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3395AB0[v18])(&v19, v17);
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::importKey(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  if ((a6 & 0x3C) != 0)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)(a3 + 184) == 1)
    {
      v19 = *(_BYTE *)(a4 + 16);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3396210;
      v26 = v20;
      WebCore::CryptoKeyAES::importJwk(v19, a3, a5, a6, &v26, &v27);
      v21 = v26;
      v17 = v27;
      v26 = 0;
      v27 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      if (v17)
        goto LABEL_15;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    }
LABEL_22:
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CryptoAlgorithmAESCTR::exportKey(v25);
  }
  if (a2)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (*(_DWORD *)(a3 + 184))
    goto LABEL_22;
  v15 = 8 * *(unsigned int *)(a3 + 12);
  if (v15 != 128 && v15 != 256 && v15 != 192)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  v16 = *(_BYTE *)(a4 + 16);
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v17 + 8) = 1;
  *(_BYTE *)(v17 + 12) = v16;
  *(_BYTE *)(v17 + 13) = 2;
  *(_BYTE *)(v17 + 14) = a5;
  *(_DWORD *)(v17 + 16) = a6;
  *(_QWORD *)v17 = off_1E3397370;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v17 + 24) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v17 + 32) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(v17 + 36) = v18;
LABEL_15:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v17);
  v22 = (unsigned int *)(v17 + 8);
  do
  {
    v23 = __ldaxr(v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v22));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)(v17 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESCTR::exportKey(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  WTF::StringImpl *v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  WTF::StringImpl *v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD v54[2];

  v8 = *a3;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v9 = (WTF *)*(unsigned int *)(v8 + 36);
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v37 = 0uLL;
  v53 = 0;
  if ((_DWORD)a2 == 3)
  {
    v28 = 0;
    v29 = 0;
    v35 = 0;
    v23 = 0uLL;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    memset(v34, 0, 25);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::base64EncodeToString();
    v36 = v54[0];
    WebCore::CryptoKey::usages((char *)v8, (uint64_t)v54);
    v24 = v54[0];
    v25 = v54[1];
    v26 = 1;
    v29 = *(unsigned __int8 *)(v8 + 14) | 0x100;
    v12 = 8 * *(unsigned int *)(v8 + 36);
    if (v12 == 256 || v12 == 192 || v12 == 128)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WTF::StringImpl *)v54[0];
    }
    ((void (*)(_QWORD *, __int128 *))*(&off_1E3395A38 + v53))(v54, &v37);
    v14 = v23;
    v23 = 0uLL;
    v37 = v14;
    v38 = v24;
    *(_QWORD *)&v14 = v25;
    v24 = 0;
    v25 = 0;
    v39 = v14;
    v40 = 1;
    v41 = v27;
    v15 = v28;
    v28 = 0;
    v42 = v15;
    v43 = v29;
    v16 = v30;
    v17 = v31;
    v30 = 0u;
    v31 = 0u;
    v44 = v16;
    v45 = v17;
    v18 = v32;
    v19 = v33;
    v32 = 0u;
    v33 = 0u;
    v46 = v18;
    v47 = v19;
    v20 = v34[0];
    memset(v34, 0, 24);
    v48 = v20;
    v49 = *(_QWORD *)&v34[1];
    LOBYTE(v50) = 0;
    v51 = 0;
    v21 = v36;
    v36 = 0;
    v52 = v21;
    v53 = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v23, v22);
LABEL_14:
    result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, a2, &v37);
    v13 = v53;
    if (v53 == -1)
      return result;
    return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E3395A38 + v13))(&v23, &v37);
  }
  if (!(_DWORD)a2)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    memcpy(v10, *(const void **)(v8 + 24), *(unsigned int *)(v8 + 36));
    *(_QWORD *)&v37 = v10;
    DWORD2(v37) = (_DWORD)v9;
    HIDWORD(v37) = (_DWORD)v9;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
  v13 = 0;
  return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E3395A38 + v13))(&v23, &v37);
}

uint64_t WebCore::CryptoAlgorithmAESCTR::getKeyLength@<X0>(const WebCore::CryptoAlgorithmParameters *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 4)
  {
    v6 = *((unsigned __int16 *)a1 + 9);
    if ((_DWORD)v6 == 128 || (_DWORD)v6 == 192 || (_DWORD)v6 == 256)
    {
      v7 = 0;
      *(_QWORD *)a2 = v6;
    }
    else
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28CryptoAlgorithmRsaOaepParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  char v6;

  v3 = (WTF *)a2[6];
  if (v3)
  {
    a2[6] = 0;
    *((_DWORD *)a2 + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)a2 + 40))
  {
    v4 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, _QWORD *))off_1E3395880[v4])(&v6, a2 + 3);
    *((_DWORD *)a2 + 8) = -1;
  }
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30CryptoAlgorithmAesCbcCfbParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  char v6;

  v3 = (WTF *)a2[5];
  if (v3)
  {
    a2[5] = 0;
    *((_DWORD *)a2 + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _QWORD *))off_1E3395880[v4])(&v6, a2 + 3);
  *((_DWORD *)a2 + 8) = -1;
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27CryptoAlgorithmAesCtrParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  char v6;

  v3 = (WTF *)a2[6];
  if (v3)
  {
    a2[6] = 0;
    *((_DWORD *)a2 + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _QWORD *))off_1E3395880[v4])(&v6, a2 + 3);
  *((_DWORD *)a2 + 8) = -1;
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27CryptoAlgorithmAesGcmParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *result;
  char v8;
  char v9;

  v3 = (WTF *)a2[11];
  if (v3)
  {
    a2[11] = 0;
    *((_DWORD *)a2 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)a2[9];
  if (v4)
  {
    a2[9] = 0;
    *((_DWORD *)a2 + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_BYTE *)a2 + 56))
  {
    v5 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, _QWORD *))off_1E3395880[v5])(&v8, a2 + 5);
    *((_DWORD *)a2 + 12) = -1;
  }
  v6 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, _QWORD *))off_1E3395880[v6])(&v9, a2 + 3);
  *((_DWORD *)a2 + 8) = -1;
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25CryptoAlgorithmIdentifierENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CryptoAlgorithmEcdsaParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E33959C0[v3])(&v5, a2 + 24);
  *(_DWORD *)(a2 + 32) = -1;
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)a2 = off_1E3226840;
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27CryptoAlgorithmRsaPssParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = off_1E3226840;
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30CryptoAlgorithmRsaKeyGenParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF::StringImpl *result;

  *a2 = off_1E32DCCB0;
  v3 = (WTF *)a2[5];
  if (v3)
  {
    a2[5] = 0;
    *((_DWORD *)a2 + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (_DWORD *)a2[4];
  a2[4] = 0;
  if (v4)
  {
    if (*v4 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v4;
  }
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore36CryptoAlgorithmRsaHashedKeyGenParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *result;
  char v7;

  v3 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _QWORD *))off_1E33959C0[v3])(&v7, a2 + 7);
  *((_DWORD *)a2 + 16) = -1;
  *a2 = off_1E32DCCB0;
  v4 = (WTF *)a2[5];
  if (v4)
  {
    a2[5] = 0;
    *((_DWORD *)a2 + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)a2[4];
  a2[4] = 0;
  if (v5)
  {
    if (*v5 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v5;
  }
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27CryptoAlgorithmAesKeyParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = off_1E3226840;
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28CryptoAlgorithmHmacKeyParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E33959C0[v3])(&v5, a2 + 24);
  *(_DWORD *)(a2 + 32) = -1;
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)a2 = off_1E3226840;
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26CryptoAlgorithmEcKeyParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = off_1E3226840;
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34CryptoAlgorithmEcdhKeyDeriveParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *result;

  v3 = (unsigned int *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = off_1E3226840;
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27CryptoAlgorithmX25519ParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *result;

  v3 = (unsigned int *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = off_1E3226840;
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25CryptoAlgorithmHkdfParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *result;
  char v9;
  char v10;
  char v11;

  v3 = (WTF *)a2[12];
  if (v3)
  {
    a2[12] = 0;
    *((_DWORD *)a2 + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)a2[10];
  if (v4)
  {
    a2[10] = 0;
    *((_DWORD *)a2 + 22) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, _QWORD *))off_1E3395880[v5])(&v9, a2 + 8);
  *((_DWORD *)a2 + 18) = -1;
  v6 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, _QWORD *))off_1E3395880[v6])(&v10, a2 + 6);
  *((_DWORD *)a2 + 14) = -1;
  v7 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, _QWORD *))off_1E33959C0[v7])(&v11, a2 + 3);
  *((_DWORD *)a2 + 8) = -1;
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27CryptoAlgorithmPbkdf2ParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  char v7;
  char v8;

  v3 = (WTF *)a2[9];
  if (v3)
  {
    a2[9] = 0;
    *((_DWORD *)a2 + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _QWORD *))off_1E33959C0[v4])(&v7, a2 + 6);
  *((_DWORD *)a2 + 14) = -1;
  v5 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, _QWORD *))off_1E3395880[v5])(&v8, a2 + 3);
  *((_DWORD *)a2 + 8) = -1;
  result = (WTF::StringImpl *)a2[1];
  *a2 = off_1E3226840;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore36CryptoAlgorithmRsaHashedImportParamsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E33959C0[v3])(&v5, a2 + 24);
  *(_DWORD *)(a2 + 32) = -1;
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)a2 = off_1E3226840;
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25CryptoAlgorithmParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = off_1E3226840;
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteISA_EEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteISA_EEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  JSC::HandleSet *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  JSC::HandleSet *v15;

  *a2 = 0;
  if (*a3)
  {
    v3 = *(JSC::HandleSet **)(((*a3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (!v4)
    {
      v15 = *(JSC::HandleSet **)(((*a3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = a3;
      v14 = a2;
      result = JSC::HandleSet::grow(v3);
      v3 = v15;
      a3 = v13;
      a2 = v14;
      v4 = (_QWORD *)*((_QWORD *)v15 + 5);
    }
    *((_QWORD *)v3 + 5) = *v4;
    v4[2] = 0;
    v5 = v4 + 2;
    *v4 = 0;
    v4[1] = 0;
    *a2 = v4 + 2;
    v6 = (_QWORD *)*a3;
    if (*a3)
      v6 = (_QWORD *)*v6;
    v7 = (unint64_t)(v5 - 2);
    if ((v6 != 0) != (*v5 != 0))
    {
      if (v6)
      {
        v8 = *(unint64_t **)((v7 & 0xFFFFFFFFFFFFF000) + 0x10);
        v9 = v8[3];
        v8 += 3;
        *(_QWORD *)v7 = v9;
        *(v5 - 1) = v8;
        *v8 = v7;
        *(_QWORD *)(v9 + 8) = v7;
      }
      else
      {
        v12 = *(_QWORD *)v7;
        v11 = (_QWORD *)*(v5 - 1);
        *v11 = *(_QWORD *)v7;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v5 = (_QWORD *)*a2;
      }
    }
    *v5 = v6;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC6StrongINS8_8JSObjectELNS8_30ShouldStrongDestructorGrabLockE0EEEN3WTF6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &)::$_0,WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &>@<X0>(JSC::ArrayBufferView **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;

  result = JSC::ArrayBufferView::span(*a1);
  v5 = v4;
  if (!v4)
  {
    result = 0;
LABEL_7:
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = (_DWORD)v5;
    *(_DWORD *)(a2 + 12) = (_DWORD)v5;
    *(_DWORD *)(a2 + 184) = 0;
    *(_BYTE *)(a2 + 192) = 1;
    return result;
  }
  if (!((unint64_t)v4 >> 32))
  {
    v6 = result;
    result = WTF::fastMalloc(v4);
    v7 = 0;
    do
    {
      *((_BYTE *)v7 + result) = *((_BYTE *)v7 + v6);
      v7 = (WTF *)((char *)v7 + 1);
    }
    while (v5 != v7);
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &)::$_0,WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *i;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v5)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v4 = (v4 & 0x3FFFFFFFFLL) + v5;
    }
  }
  if (*(_BYTE *)(v3 + 64) && (v9 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v6 = *(WTF **)(v9 + 32);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(WTF **)(v3 + 48);
    if (!v6)
    {
LABEL_13:
      v7 = 0;
LABEL_14:
      *(_QWORD *)a2 = v7;
      *(_DWORD *)(a2 + 8) = (_DWORD)v6;
      *(_DWORD *)(a2 + 12) = (_DWORD)v6;
      *(_DWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a2 + 192) = 1;
      return;
    }
  }
  if (!((unint64_t)v6 >> 32))
  {
    v7 = WTF::fastMalloc(v6);
    for (i = 0; i != v6; i = (WTF *)((char *)i + 1))
      *((_BYTE *)i + v7) = *((_BYTE *)i + v4);
    goto LABEL_14;
  }
  __break(0xC471u);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &)::$_0,WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &>@<X0>(uint64_t ***a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v3 = ***a1;
  v7 = 0;
  v8 = 0;
  v6[0] = 33;
  WebCore::DeferredPromise::reject(v3, v6, 0, &v8);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  *a2 = 0;
  a2[192] = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore10JsonWebKeyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore10JsonWebKeyEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(int a1, WebCore::JsonWebKey *this)
{
  WebCore::JsonWebKey::~JsonWebKey(this, this);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &)::$_2,WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &>@<X0>(uint64_t ***a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v3 = ***a1;
  v7 = 0;
  v8 = 0;
  v6[0] = 33;
  WebCore::DeferredPromise::reject(v3, v6, 0, &v8);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  *a2 = 0;
  a2[192] = 0;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &)::$_2,WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &>@<X0>(uint64_t ***a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unsigned __int8 v6[8];
  WTF::StringImpl *v7;
  objc_class *v8;

  v3 = ***a1;
  v7 = 0;
  v8 = 0;
  v6[0] = 33;
  WebCore::DeferredPromise::reject(v3, v6, 0, &v8);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  *a2 = 0;
  a2[192] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &)::$_2,WebCore::toKeyData(WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;

  v3 = *(unsigned __int8 *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_8;
  v4 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v4)
  {
    v3 = 0;
LABEL_8:
    *(_DWORD *)(a1 + 40) = v3;
    WebCore::JsonWebKey::JsonWebKey((WebCore::JsonWebKey *)&v20, (const WebCore::JsonWebKey *)a1);
    v37 = 1;
    *(_DWORD *)(a2 + 184) = -1;
    v9 = v20;
    v20 = 0uLL;
    *(_OWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (v23)
    {
      *(_QWORD *)(a2 + 16) = v21;
      v10 = v22;
      v21 = 0;
      v22 = 0;
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = 1;
    }
    *(_DWORD *)(a2 + 40) = v24;
    v11 = v25;
    v25 = 0;
    *(_QWORD *)(a2 + 48) = v11;
    *(_WORD *)(a2 + 56) = v26;
    v12 = v27;
    v13 = v28;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)(a2 + 64) = v12;
    *(_OWORD *)(a2 + 80) = v13;
    v14 = v29;
    v15 = v30;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 112) = v15;
    v16 = v31;
    v31 = 0u;
    *(_OWORD *)(a2 + 128) = v16;
    v17 = v32;
    v32 = 0;
    *(_QWORD *)(a2 + 144) = v17;
    *(_BYTE *)(a2 + 152) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v35)
    {
      *(_QWORD *)(a2 + 152) = v33;
      v18 = v34;
      v33 = 0;
      v34 = 0;
      *(_QWORD *)(a2 + 160) = v18;
      *(_BYTE *)(a2 + 168) = 1;
    }
    v19 = v36;
    v36 = 0;
    *(_QWORD *)(a2 + 176) = v19;
    *(_DWORD *)(a2 + 184) = 1;
    *(_BYTE *)(a2 + 192) = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v20, v8);
    return;
  }
  v3 = 0;
  v5 = *(int **)(a1 + 16);
  v6 = 4 * v4;
  while (1)
  {
    v7 = *v5;
    if (v7 >= 8)
      break;
    v3 |= dword_1969ED148[v7];
    ++v5;
    v6 -= 4;
    if (!v6)
      goto LABEL_8;
  }
  __break(0xC471u);
}

WebCore::JsonWebKey *WebCore::JsonWebKey::JsonWebKey(WebCore::JsonWebKey *this, const WebCore::JsonWebKey *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 1) = v5;
  *((_BYTE *)this + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v6 = *((unsigned int *)a2 + 7);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 7) = v6;
    if ((_DWORD)v6)
    {
      if (v6 >> 30)
        goto LABEL_50;
      v7 = (void *)WTF::fastMalloc((WTF *)(4 * v6));
      *((_DWORD *)this + 6) = v6;
      *((_QWORD *)this + 2) = v7;
      memcpy(v7, *((const void **)a2 + 2), 4 * *((unsigned int *)a2 + 7));
    }
    *((_BYTE *)this + 32) = 1;
  }
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  v8 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 6) = v8;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  v9 = (_DWORD *)*((_QWORD *)a2 + 8);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 8) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 9) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 10);
  if (v11)
    *v11 += 2;
  *((_QWORD *)this + 10) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 11) = v12;
  v13 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (v13)
    *v13 += 2;
  *((_QWORD *)this + 12) = v13;
  v14 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v14)
    *v14 += 2;
  *((_QWORD *)this + 13) = v14;
  v15 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v15)
    *v15 += 2;
  *((_QWORD *)this + 14) = v15;
  v16 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 15) = v16;
  v17 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v17)
    *v17 += 2;
  *((_QWORD *)this + 16) = v17;
  v18 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v18)
    *v18 += 2;
  *((_QWORD *)this + 17) = v18;
  v19 = (_DWORD *)*((_QWORD *)a2 + 18);
  if (v19)
    *v19 += 2;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 18) = v19;
  *((_BYTE *)this + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    v20 = *((unsigned int *)a2 + 41);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 41) = v20;
    if (!(_DWORD)v20)
    {
LABEL_46:
      *((_BYTE *)this + 168) = 1;
      goto LABEL_47;
    }
    if (v20 < 0xAAAAAAB)
    {
      v21 = 24 * v20;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v20));
      *((_DWORD *)this + 40) = (v21 & 0xFFFFFFF8) / 0x18;
      *((_QWORD *)this + 19) = v22;
      v23 = *((_DWORD *)a2 + 41);
      if (v23)
      {
        v24 = *((_QWORD *)a2 + 19);
        v25 = v24 + 24 * v23;
        do
        {
          v26 = *(_DWORD **)v24;
          if (*(_QWORD *)v24)
            *v26 += 2;
          *v22 = v26;
          v27 = *(_DWORD **)(v24 + 8);
          if (v27)
            *v27 += 2;
          v22[1] = v27;
          v28 = *(_DWORD **)(v24 + 16);
          if (v28)
            *v28 += 2;
          v22[2] = v28;
          v24 += 24;
          v22 += 3;
        }
        while (v24 != v25);
      }
      goto LABEL_46;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x19575DEE8);
  }
LABEL_47:
  v29 = (_DWORD *)*((_QWORD *)a2 + 22);
  if (v29)
    *v29 += 2;
  *((_QWORD *)this + 22) = v29;
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore10JsonWebKeyEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  void *v6;

  v3 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v6 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a2 + 8) = (_DWORD)v3;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
}

WebCore::JsonWebKey *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore10JsonWebKeyEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(int a1, WebCore::JsonWebKey *this, WebCore::JsonWebKey *a3)
{
  return WebCore::JsonWebKey::JsonWebKey(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteISA_EEEENS9_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteISA_EEEENS9_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t std::__variant_detail::__impl<std::unique_ptr<WebCore::CryptoAlgorithmParameters>,WebCore::Exception>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  int v17;
  char v18;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = v2 == -1;
    if (v2 == -1)
      v6 = -1;
    else
      v6 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v5 = v6 == v3;
    if (v5)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E3395A80[v6])(v16, result, a2);
    }
    else
    {
      v8 = (v2 - 1) < 0xFFFFFFFE || (v3 + 1) < 2;
      if (v8)
        v9 = result;
      else
        v9 = a2;
      if (v8)
        v10 = a2;
      else
        v10 = result;
      v16[0] = 0;
      v17 = -1;
      v11 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E3395A70[v11])(&v18, v16, v10);
        v17 = v11;
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33959F0[v12])(&v18, v10);
      }
      *(_DWORD *)(v10 + 16) = -1;
      v13 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3395A90[v13])(&v18, v10, v9);
        *(_DWORD *)(v10 + 16) = v13;
        v14 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E33959F0[v14])(&v18, v9);
      }
      *(_DWORD *)(v9 + 16) = -1;
      v15 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E3395A90[v17])(&v18, v9, v16);
        *(_DWORD *)(v9 + 16) = v15;
        if (v17 != -1)
          return ((uint64_t (*)(char *, _BYTE *))off_1E33959F0[v17])(&v18, v16);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteIS9_EEEENS8_9ExceptionEEE6__swapB8sn180100ERSE_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEESP_EEEDcSG_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteIS9_EEEENS8_9ExceptionEEE6__swapB8sn180100ERSE_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEESP_EEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteISA_EEEENS9_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SE_EEEEEvRSG_OT_EUlRSL_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SE_EEEOSU_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN7WebCore25CryptoAlgorithmParametersENS_14default_deleteISA_EEEENS9_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SE_EEEEEvRSG_OT_EUlRSL_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SE_EEEOSU_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9CryptoKeyENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13CryptoKeyPairEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9CryptoKeyENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13CryptoKeyPairEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = a2[1];
  a2[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  result = *a2;
  *a2 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void **WebCore::CryptoAlgorithmAesCtrParams::counterVector(WebCore::CryptoAlgorithmAesCtrParams *this)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  char *v21;

  v1 = (void **)((char *)this + 48);
  if (!*((_DWORD *)this + 15))
  {
    v3 = *((unsigned int *)this + 8);
    if ((_DWORD)v3 == -1)
      goto LABEL_21;
    v21 = &v20;
    if (!((uint64_t (*)(char **, char *))off_1E3395AA0[v3])(&v21, (char *)this + 24))
      return v1;
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 == -1)
    {
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v21 = &v20;
    v5 = ((uint64_t (*)(char **, char *))off_1E33959E0[v4])(&v21, (char *)this + 24);
    if (v6)
    {
      v7 = (const void *)v5;
      v8 = v6;
      v9 = *((unsigned int *)this + 14);
      v10 = *((unsigned int *)this + 15);
      v11 = v6 + v10;
      if (v6 + v10 > v9)
      {
        v14 = v9 + (v9 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v11)
          v16 = v6 + v10;
        else
          v16 = v15;
        if (HIDWORD(v16))
          goto LABEL_22;
        v17 = *v1;
        v18 = (void *)WTF::fastMalloc((WTF *)v16);
        *((_DWORD *)this + 14) = v16;
        *((_QWORD *)this + 6) = v18;
        memcpy(v18, v17, v10);
        if (v17)
        {
          if (*v1 == v17)
          {
            *((_QWORD *)this + 6) = 0;
            *((_DWORD *)this + 14) = 0;
          }
          WTF::fastFree((WTF *)v17, v19);
        }
      }
      v12 = *((unsigned int *)this + 15);
      if (v11 >= v12)
      {
        memcpy((void *)(*((_QWORD *)this + 6) + v12), v7, v8);
        *((_DWORD *)this + 15) = v11;
        return v1;
      }
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x19575E430);
    }
  }
  return v1;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E3395AD0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3395AD0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  __int128 v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  char v26[8];
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(&v23);
  v2 = *(_OWORD *)(a1 + 64);
  v30[0] = *(_OWORD *)(a1 + 48);
  v30[1] = v2;
  if (v25)
  {
    if (v25 != 1)
    {
      v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(v18);
    }
    v3 = v23;
    v26[0] = v23;
    v4 = v24;
    v24 = 0;
    v27 = v4;
    WTF::String::isolatedCopy();
    LOBYTE(v28) = v3;
    LOBYTE(v19) = v3;
    v20 = v29;
    v21 = 1;
    v29 = 0;
    v6 = v27;
    v27 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v19 = v23;
    v8 = v24;
    v23 = 0;
    v24 = 0;
    v20 = v8;
    v21 = 0;
  }
  v9 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = 0u;
  v22 = v9;
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = &off_1E3395AF8;
  *(_BYTE *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 24) = -1;
  ((void (*)(uint64_t *, uint64_t, uint64_t *))off_1E3395B20[v7])(&v28, v10 + 8, &v19);
  *(_DWORD *)(v10 + 24) = v7;
  *(_OWORD *)(v10 + 32) = v22;
  v22 = 0u;
  v28 = v10;
  LOBYTE(v29) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v30);
  if (v12)
  {
    v13 = v12[4];
    if (v13)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 336))(v13, &v28);
  }
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_22:
  v15 = v28;
  v28 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)&v22 + 1);
  *((_QWORD *)&v22 + 1) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  result = v22;
  *(_QWORD *)&v22 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v21 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))off_1E3395B10[v21])(v26, &v19);
  v21 = -1;
  if (v25 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3395B10[v25])(&v28, &v23);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = &off_1E3395AF8;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3395B10[v4])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)this = &off_1E3395AF8;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3395B10[v5])(&v7, (char *)this + 8);
  *((_DWORD *)this + 6) = -1;
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>&)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  int v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;

  v1 = *(_DWORD *)(a1 + 24);
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = *(unsigned __int8 *)(a1 + 8);
      v3 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      result = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v2);
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          return (WTF *)WTF::StringImpl::destroy(v3, v5);
        else
          *(_DWORD *)v3 -= 2;
      }
    }
    else
    {
      v8 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF *)WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(v8);
    }
  }
  else
  {
    v9 = *(WTF **)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v10 = v6;
    (*(void (**)(_QWORD, WTF **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v9);
    result = v9;
    if (v9)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E3395B40;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3395B40;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  __int128 v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18[8];
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  char v25[8];
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(&v22);
  v2 = *(_OWORD *)(a1 + 64);
  v29[0] = *(_OWORD *)(a1 + 48);
  v29[1] = v2;
  if (v24)
  {
    if (v24 != 1)
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(BOOL)>&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(v17);
    }
    v3 = v22;
    v25[0] = v22;
    v4 = v23;
    v23 = 0;
    v26 = v4;
    WTF::String::isolatedCopy();
    LOBYTE(v27) = v3;
    v18[0] = v3;
    v19 = v28;
    v20 = 1;
    v28 = 0;
    v6 = v26;
    v26 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v18[0] = v22;
    v20 = 0;
  }
  v8 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = 0u;
  v21 = v8;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v9 = &off_1E3395B68;
  *(_BYTE *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 24) = -1;
  ((void (*)(uint64_t *, uint64_t, char *))off_1E3395B90[v7])(&v27, v9 + 8, v18);
  *(_DWORD *)(v9 + 24) = v7;
  *(_OWORD *)(v9 + 32) = v21;
  v21 = 0u;
  v27 = v9;
  LOBYTE(v28) = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v29);
  if (v11)
  {
    v12 = v11[4];
    if (v12)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 336))(v12, &v27);
  }
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_22:
  v14 = v27;
  v27 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)&v21 + 1);
  *((_QWORD *)&v21 + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v21;
  *(_QWORD *)&v21 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v20 != -1)
    result = ((uint64_t (*)(char *, char *))off_1E3395B80[v20])(v25, v18);
  v20 = -1;
  if (v24 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3395B80[v24])(&v27, &v22);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(BOOL)>&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)a1 = &off_1E3395B68;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    off_1E3395B80[v4](&v6, a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(BOOL)>&)#1},void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)this = &off_1E3395B68;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5 != -1)
    off_1E3395B80[v5](&v7, (uint64_t)this + 8);
  *((_DWORD *)this + 6) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::dispatchAlgorithmOperation<WTF::Function<void ()(BOOL)>,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)>>(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(BOOL)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Function<WebCore::ExceptionOr<BOOL> ()(void)> &&)::{lambda(void)#1}::operator()(void)::{lambda(WTF::Function<void ()(BOOL)>&)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  int v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;

  v1 = *(_DWORD *)(a1 + 24);
  if (!v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 8));
  if (v1 == 1)
  {
    v2 = *(unsigned __int8 *)(a1 + 8);
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v2);
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, v5);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  else
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithm::dispatchDigest(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,PAL::CryptoDigest::Algorithm)::$_0,void>::~CallableWrapper(v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithm::dispatchDigest(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,PAL::CryptoDigest::Algorithm)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)a1 = &off_1E3395BB0;
  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WTF **)(a1 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithm::dispatchDigest(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,PAL::CryptoDigest::Algorithm)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E3395BB0;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithm::dispatchDigest(WTF::WorkQueue &,WebCore::ScriptExecutionContext &,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,PAL::CryptoDigest::Algorithm)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  int v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  WTF *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  PAL::CryptoDigest::computeHash(*(_DWORD *)(a1 + 92), a1 + 16, (uint64_t)&v17);
  v3 = *(_OWORD *)(a1 + 64);
  v20[0] = *(_OWORD *)(a1 + 48);
  v20[1] = v3;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v5 = v19;
  if (v19)
  {
    v6 = v17;
    v1 = v18;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = &off_1E3395BD8;
  *(_QWORD *)(v8 + 8) = v4;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  if (v5)
  {
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v1;
    *(_BYTE *)(v8 + 32) = 1;
    v6 = 0;
  }
  *(_QWORD *)(v8 + 40) = v7;
  v15 = v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_10:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v20);
  if (v10)
  {
    v12 = v10[4];
    if (v12)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 336))(v12, &v15);
  }
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v15;
  v15 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v5 && v6)
    result = WTF::fastFree(v6, v11);
  if (v19)
  {
    result = (uint64_t)v17;
    if (v17)
      return WTF::fastFree(v17, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore15CryptoAlgorithm14dispatchDigestERNS_9WorkQueueERNS2_22ScriptExecutionContextEONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONS8_IFvNS2_13ExceptionCodeEEEEOSC_N3PAL12CryptoDigest9AlgorithmEEN3__0clEvEUlRT_E_vJS7_EED1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E3395BD8;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(WTF **)(a1 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore15CryptoAlgorithm14dispatchDigestERNS_9WorkQueueERNS2_22ScriptExecutionContextEONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONS8_IFvNS2_13ExceptionCodeEEEEOSC_N3PAL12CryptoDigest9AlgorithmEEN3__0clEvEUlRT_E_vJS7_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3395BD8;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 32))
  {
    v4 = (WTF *)*((_QWORD *)this + 2);
    if (v4)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore15CryptoAlgorithm14dispatchDigestERNS_9WorkQueueERNS2_22ScriptExecutionContextEONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONS8_IFvNS2_13ExceptionCodeEEEEOSC_N3PAL12CryptoDigest9AlgorithmEEN3__0clEvEUlRT_E_vJS7_EE4callES7_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 16);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 30);
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>()
{
  WebCore::CryptoAlgorithmRegistry::singleton(void)::registry = 0;
  qword_1EE2F5658 = 0;
  qword_1EE2F5660 = 0;
  return WebCore::CryptoAlgorithmRegistry::platformRegisterAlgorithms((WebCore::CryptoAlgorithmRegistry *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CryptoAlgorithmIdentifier>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CryptoAlgorithmIdentifier>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::CryptoAlgorithmIdentifier,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CryptoAlgorithmIdentifier>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  const WTF::String *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (WTF::StringImpl **)(v6 + 16 * v13);
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (*v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v6 + 16 * v13), v10);
          v19 = 0;
          do
          {
            v20 = v18 & v17;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v16 + 16 * v20));
          v21 = v16 + 16 * v20;
          *(_QWORD *)v21 = 0;
          v22 = *v15;
          *v15 = 0;
          *(_QWORD *)v21 = v22;
          *(_BYTE *)(v21 + 8) = *(_BYTE *)(v6 + 16 * v13 + 8);
          v23 = *v15;
          *v15 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v15 == a3)
            v14 = v21;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::pair<WTF::String,WTF::Ref<WebCore::CryptoAlgorithm,WTF::RawPtrTraits<WebCore::CryptoAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::CryptoAlgorithm>> (*)(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  __int128 v30;
  WTF::StringImpl *v31;
  int *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = a3;
    do
    {
      v13 = (int *)(v5 + 24 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = 0;
          v20 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
          v22 = v21 ^ HIWORD(v21);
          do
          {
            v23 = v22 & v18;
            v24 = (int *)(v17 + 24 * (v22 & v18));
            v22 = ++v19 + (v22 & v18);
          }
          while (*v24);
          v25 = v17 + 24 * v23;
          v28 = *(WTF::StringImpl **)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::destroy(v26, v9);
              v12 = a3;
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          *v24 = *v13;
          v29 = v5 + 24 * v10;
          v30 = *(_OWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_OWORD *)v27 = v30;
          v31 = *(WTF::StringImpl **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::destroy(v31, v9);
              v12 = a3;
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          if (v13 == v12)
            v11 = v24;
        }
        else
        {
          v15 = v5 + 24 * v10;
          v16 = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
            {
              WTF::StringImpl::destroy(v16, v9);
              v12 = a3;
            }
            else
            {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t *WTF::HashTable<WebCore::DeferredPromise *,WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::DeferredPromise *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
            else
              --v27[4];
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_DWORD **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            else
              --v30[4];
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_DWORD **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
            else
              --v16[4];
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::encrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395C00;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::encrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395C00;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::encrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(WTF::DeferrableRefCountedBase *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  JSC *v10;
  objc_class *OutOfMemoryError;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *((_QWORD *)result + 1);
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(v5 + 40), v3);
    else
      v12 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v2));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v2, a2);
    }
    v8 = v12;
    if (v12)
    {
      JSC::ArrayBuffer::tryCreate();
      if (v13)
      {
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v8, v13);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(JSC **)v9;
        OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v10, 0);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, OutOfMemoryError, 0);
      }
      result = v13;
      v13 = 0;
      if (result)
        result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v3 = *a2;
  if (!*a2)
    goto LABEL_9;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  v11 = *(unsigned int *)(v3 - 4);
  if (v8 == v11)
  {
LABEL_9:
    *result = 0;
    return result;
  }
  v12 = (_QWORD *)(v3 + 16 * v8);
  v13 = v12 + 1;
  v14 = v12[1];
  if (!v14)
  {
    *result = 0;
LABEL_13:
    v3 += 16 * v11;
    if ((_QWORD *)v3 == v12)
      return result;
    goto LABEL_14;
  }
  *v13 = 0;
  v3 = *a2;
  *result = v14;
  if (v3)
  {
    v11 = *(unsigned int *)(v3 - 4);
    goto LABEL_13;
  }
LABEL_14:
  if ((_QWORD *)v3 != v12)
  {
    *v12 = -1;
    *v13 = 0;
    ++*(_DWORD *)(*a2 - 16);
    v15 = *a2;
    if (*a2)
      v16 = *(_DWORD *)(v15 - 12) - 1;
    else
      v16 = -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *a2;
    if (*a2)
    {
      v18 = 6 * *(_DWORD *)(v17 - 12);
      v19 = *(_DWORD *)(v17 - 4);
      if (v18 < v19 && v19 >= 9)
        return WTF::HashTable<WebCore::DeferredPromise *,WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::DeferredPromise *>>::rehash(a2, v19 >> 1, 0);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::encrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395C28;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::encrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395C28;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::encrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::rejectWithException(WTF::StringImpl *result, int a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v2 = result;
  if (a2 > 23)
  {
    switch(a2)
    {
      case 24:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 24;
        break;
      case 26:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 26;
        break;
      case 30:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 30;
        break;
      default:
        return result;
    }
LABEL_13:
    WebCore::DeferredPromise::reject(v3, (JSC::JSGlobalObject *)v4, (JSC::JSGlobalObject *)&v6, 0);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    switch(a2)
    {
      case 6:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 6;
        goto LABEL_13;
      case 8:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 8;
        goto LABEL_13;
      case 9:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 9;
        goto LABEL_13;
      case 12:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = (uint64_t)v2;
        v4 = 12;
        goto LABEL_13;
      default:
        return result;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::decrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395C50;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::decrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395C50;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::decrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(WTF::DeferrableRefCountedBase *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  JSC *v10;
  objc_class *OutOfMemoryError;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *((_QWORD *)result + 1);
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(v5 + 40), v3);
    else
      v12 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v2));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v2, a2);
    }
    v8 = v12;
    if (v12)
    {
      JSC::ArrayBuffer::tryCreate();
      if (v13)
      {
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v8, v13);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(JSC **)v9;
        OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v10, 0);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, OutOfMemoryError, 0);
      }
      result = v13;
      v13 = 0;
      if (result)
        result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::decrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395C78;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::decrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395C78;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::decrypt(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::sign(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395CA0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::sign(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395CA0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::sign(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(WTF::DeferrableRefCountedBase *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  JSC *v10;
  objc_class *OutOfMemoryError;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *((_QWORD *)result + 1);
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(v5 + 40), v3);
    else
      v12 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v2));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v2, a2);
    }
    v8 = v12;
    if (v12)
    {
      JSC::ArrayBuffer::tryCreate();
      if (v13)
      {
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v8, v13);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(JSC **)v9;
        OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v10, 0);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, OutOfMemoryError, 0);
      }
      result = v13;
      v13 = 0;
      if (result)
        result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::sign(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395CC8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::sign(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395CC8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::sign(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::verify(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WebCore::BufferSource,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395CF0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::verify(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WebCore::BufferSource,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395CF0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::verify(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WebCore::BufferSource,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,BOOL>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>((uint64_t)v10, v3);
      if (v9[4] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[4];
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::verify(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WebCore::BufferSource,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395D18;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::verify(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WebCore::BufferSource,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395D18;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::verify(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,WebCore::BufferSource &&,WebCore::BufferSource,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::digest(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395D40;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::digest(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395D40;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::digest(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(WTF::DeferrableRefCountedBase *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  JSC *v10;
  objc_class *OutOfMemoryError;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *((_QWORD *)result + 1);
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(v5 + 40), v3);
    else
      v12 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v2));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v2, a2);
    }
    v8 = v12;
    if (v12)
    {
      JSC::ArrayBuffer::tryCreate();
      if (v13)
      {
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v8, v13);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(JSC **)v9;
        OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v10, 0);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, OutOfMemoryError, 0);
      }
      result = v13;
      v13 = 0;
      if (result)
        result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::digest(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395D68;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::digest(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395D68;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::digest(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::BufferSource &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::BufferSource &&>,WTF::DefaultRefDerefTraits<WebCore::BufferSource &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0,void,std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>,WebCore::CryptoKeyPair> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395D90;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0,void,std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>,WebCore::CryptoKeyPair> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395D90;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0,void,std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>,WebCore::CryptoKeyPair> &&>::call(_QWORD *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[2];
  _QWORD *v13;

  v2 = result[2];
  if (v2)
  {
    v4 = result[1];
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v11, (uint64_t *)(v6 + 40), v4);
    else
      v11 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (_QWORD *)WTF::fastFree((WTF *)v2, a2);
    }
    if (v11)
    {
      v12[0] = &v11;
      v12[1] = &v11;
      v9 = a2[4];
      if ((_DWORD)v9 == -1)
      {
        v10 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_QWORD *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>,WebCore::CryptoKeyPair> &&)::{lambda(WebCore::CryptoKey&)#1},WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>)::WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()(WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>)::{lambda(WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>> &>(v10);
      }
      else
      {
        v13 = v12;
        ((void (*)(_QWORD **, unsigned int *))off_1E3395DA8[v9])(&v13, a2);
        result = v11;
        v11 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          else
            --*((_DWORD *)result + 4);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>,WebCore::CryptoKeyPair> &&)::{lambda(WebCore::CryptoKey&)#1},WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>)::WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()(WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>)::{lambda(WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>> &>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl *result;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = *a2;
  v3 = **a1;
  if (*(unsigned __int8 *)(v2 + 13) - 1 > 1 || *(_DWORD *)(v2 + 16))
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CryptoKey>>(*v3, (WebCore::JSDOMGlobalObject *)v2);
  v5 = (_DWORD *)*v3;
  *v3 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DeferredPromise::reject((uint64_t)v5, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v7, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (!v5)
        return result;
      goto LABEL_8;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v5)
    return result;
LABEL_8:
  if (v5[4] == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  --v5[4];
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>,WebCore::CryptoKeyPair> &&)::{lambda(WebCore::CryptoKey&)#1},WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>)::WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()(WTF::RefPtr<WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>,WTF::RawPtrTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>>)::{lambda(WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CryptoKey,WTF::Ref<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&>> &>(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  WTF::StringImpl *v18;

  v2 = *(uint64_t **)(*(_QWORD *)result + 8);
  v3 = *v2;
  if (!*(_DWORD *)(*(_QWORD *)(a2 + 8) + 16))
  {
    *v2 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::DeferredPromise::reject(v3, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v18, 0);
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        if (!v3)
          return result;
        goto LABEL_15;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v3)
      return result;
LABEL_15:
    if (*(_DWORD *)(v3 + 16) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    --*(_DWORD *)(v3 + 16);
    return result;
  }
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v6 = *(_QWORD *)(v3 + 32);
    if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
      v7 = 0;
    else
      v7 = *(uint64_t **)v6;
    v8 = v7[7];
    MEMORY[0x19AEA3294](&v18, v8);
    v9 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v7, **(JSC::JSGlobalObject ***)(v3 + 32), (WebCore::JSDOMGlobalObject **)a2);
    v10 = *(_QWORD *)(v8 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v3, v7, 0, v9);
      v10 = *(_QWORD *)(v8 + 16);
      if (!v10)
        return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v18);
    }
    v12 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
    if (!(*(unsigned int (**)(_QWORD *))(*v12 + 64))(v12))
    {
LABEL_22:
      WebCore::reportException((JSC::JSGlobalObject *)v7, v10, 0, 0, 0);
      return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v18);
    }
    v13 = v12[43];
    if (*(_QWORD *)(v8 + 24) == v10)
    {
LABEL_36:
      *(_BYTE *)(*(_QWORD *)(v13 + 8) + 93442) = 1;
      *(_BYTE *)(v3 + 44) = 1;
      goto LABEL_22;
    }
    if (!v13)
      goto LABEL_22;
    v14 = (unsigned __int8 *)(v13 + 40);
    if (__ldaxr((unsigned __int8 *)(v13 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_30;
    }
    MEMORY[0x19AEA534C](v13 + 40);
LABEL_30:
    v16 = *(unsigned __int8 *)(v13 + 41);
    v17 = __ldxr(v14);
    if (v17 == 1)
    {
      if (!__stlxr(0, v14))
      {
LABEL_35:
        if (!v16)
          goto LABEL_22;
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 40));
    goto LABEL_35;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CryptoKey>>(uint64_t result, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  WebCore::CryptoKey *v8;
  objc_class *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(WebCore **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](v17, v7);
    v9 = (objc_class *)WebCore::toJS(v6, **(JSC::JSGlobalObject ***)(v4 + 32), a2, v8);
    v10 = *(_QWORD *)(v7 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v9);
      v10 = *(_QWORD *)(v7 + 16);
      if (!v10)
        return MEMORY[0x19AEA32A0](v17);
    }
    v11 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v11 + 64))(v11))
    {
LABEL_12:
      WebCore::reportException(v6, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v17);
    }
    v12 = v11[43];
    if (*(_QWORD *)(v7 + 24) == v10)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v12)
      goto LABEL_12;
    v13 = (unsigned __int8 *)(v12 + 40);
    if (__ldaxr((unsigned __int8 *)(v12 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v12 + 40);
LABEL_20:
    v15 = *(unsigned __int8 *)(v12 + 41);
    v16 = __ldxr(v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_25:
        if (!v15)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395DC8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395DC8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::generateKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0,void,WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E3395DF0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0,void,WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3395DF0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0,void,WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&>::call(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  int v22;
  int v23;
  unsigned int v24;

  v3 = (WTF *)*(unsigned int *)(a2 + 12);
  v21 = 0;
  v22 = 0;
  v23 = (int)v3;
  if ((_DWORD)v3)
  {
    v22 = (int)v3;
    v21 = (void *)WTF::fastMalloc(v3);
    memcpy(v21, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  v24 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int **)(a1 + 16);
  if (v5)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int **)(a1 + 16);
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(unsigned __int8 *)(a1 + 40);
  v14 = *(unsigned int *)(a1 + 44);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = &off_1E3395E18;
  v15[1] = v6;
  v15[2] = v5;
  v20 = v15;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E3395E40;
  v16[1] = v9;
  v16[2] = v8;
  v19 = v16;
  (*(void (**)(uint64_t, _QWORD, void **, uint64_t, uint64_t, uint64_t, _QWORD **, _QWORD **, _BYTE))(*(_QWORD *)v11 + 80))(v11, 0, &v21, v12, v13, v14, &v20, &v19, *(_BYTE *)(a1 + 48));
  v17 = v19;
  v19 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v24 != -1)
    return ((uint64_t (*)(_QWORD **, void **))*(&off_1E3395A38 + v24))(&v20, &v21);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&)::{lambda(WebCore::CryptoKey)#1},void,WebCore::CryptoKey>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395E18;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&)::{lambda(WebCore::CryptoKey)#1},void,WebCore::CryptoKey>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395E18;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&)::{lambda(WebCore::CryptoKey)#1},void,WebCore::CryptoKey>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v4 = *((_QWORD *)result + 1);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v13, (uint64_t *)(v6 + 40), v4);
    else
      v13 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v2, (void *)a2);
    }
    v9 = v13;
    if (v13)
    {
      if (*(unsigned __int8 *)(a2 + 13) - 1 <= 1 && *(_DWORD *)(a2 + 16) == 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::DeferredPromise::reject((uint64_t)v9, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v14, 0);
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          else
            *(_DWORD *)result -= 2;
        }
        v11 = v9[4] - 1;
        if (v9[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      }
      else
      {
        result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CryptoKey>>((uint64_t)v13, (WebCore::JSDOMGlobalObject *)a2);
        v11 = v9[4] - 1;
        if (v9[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      }
      v9[4] = v11;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&)::{lambda(WebCore::ExceptionCode)#1},void,WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395E40;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&)::{lambda(WebCore::ExceptionCode)#1},void,WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395E40;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_0::operator()(WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow> const&)::{lambda(WebCore::ExceptionCode)#1},void,WebCore::CryptoKey &<unsigned char,0ul,WebCore::CryptoKeyUsage,16ul,WTF::CrashOnOverflow>>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395E68;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395E68;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveKey(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveBits(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,unsigned int,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395E90;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveBits(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,unsigned int,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395E90;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveBits(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,unsigned int,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(WTF::DeferrableRefCountedBase *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  JSC *v10;
  objc_class *OutOfMemoryError;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *((_QWORD *)result + 1);
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(v5 + 40), v3);
    else
      v12 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v2));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v2, a2);
    }
    v8 = v12;
    if (v12)
    {
      JSC::ArrayBuffer::tryCreate();
      if (v13)
      {
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v8, v13);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(JSC **)v9;
        OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v10, 0);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, OutOfMemoryError, 0);
      }
      result = v13;
      v13 = 0;
      if (result)
        result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveBits(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,unsigned int,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395EB8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveBits(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,unsigned int,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395EB8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::deriveBits(JSC::JSGlobalObject &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WebCore::CryptoKey &,unsigned int,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::importKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0,void,WebCore::CryptoKey &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395EE0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::importKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0,void,WebCore::CryptoKey &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395EE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::importKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0,void,WebCore::CryptoKey &>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v4 = *((_QWORD *)result + 1);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v13, (uint64_t *)(v6 + 40), v4);
    else
      v13 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v2, (void *)a2);
    }
    v9 = v13;
    if (v13)
    {
      if (*(unsigned __int8 *)(a2 + 13) - 1 <= 1 && *(_DWORD *)(a2 + 16) == 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::DeferredPromise::reject((uint64_t)v9, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v14, 0);
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          else
            *(_DWORD *)result -= 2;
        }
        v11 = v9[4] - 1;
        if (v9[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      }
      else
      {
        result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CryptoKey>>((uint64_t)v13, (WebCore::JSDOMGlobalObject *)a2);
        v11 = v9[4] - 1;
        if (v9[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      }
      v9[4] = v11;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::importKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395F08;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::importKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395F08;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::importKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WebCore::JsonWebKey> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::exportKey(WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395F30;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::exportKey(WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395F30;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::exportKey(WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&>::call(WTF::DeferrableRefCountedBase *result, WebCore *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  WebCore *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WebCore::JsonWebKey *v16;
  objc_class *v17;
  uint64_t v18;
  JSC *v19;
  objc_class *OutOfMemoryError;
  uint64_t v21;
  unsigned __int8 *v22;
  int v24;
  int v25;
  uint64_t v26;
  JSC::JSGlobalObject *v27;

  v5 = *((_QWORD *)result + 2);
  if (v5)
  {
    v7 = a2;
    v8 = *((_QWORD *)result + 1);
    do
      v9 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v9 + 1, (unsigned int *)v5));
    v10 = *(_QWORD *)(v5 + 8);
    if (v10)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v26, (uint64_t *)(v10 + 40), v8);
    else
      v26 = 0;
    do
    {
      v11 = __ldaxr((unsigned int *)v5);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v5));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v5);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v5, a2);
    }
    v13 = v26;
    if (v26)
    {
      if (v7 < 3)
      {
        if (!*((_DWORD *)a3 + 46))
        {
          JSC::ArrayBuffer::tryCreate();
          if (v27)
          {
            WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v13, v27);
          }
          else
          {
            v18 = *(_QWORD *)(v13 + 32);
            if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
              v19 = 0;
            else
              v19 = *(JSC **)v18;
            OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v19, 0);
            WebCore::DeferredPromise::reject<WebCore::IDLAny>(v13, OutOfMemoryError, 0);
          }
          result = v27;
          v27 = 0;
          if (result)
            result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
          goto LABEL_32;
        }
        goto LABEL_41;
      }
      if ((_DWORD)v7 == 3)
      {
        if (*((_DWORD *)a3 + 46) != 1)
        {
LABEL_41:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_42;
        }
        v14 = *(_QWORD *)(v26 + 24);
        if (v14 && *(_QWORD *)v14 && (*(_BYTE *)(v14 + 8) & 3) == 0)
        {
          v15 = *(_QWORD *)(v26 + 32);
          if (!v15 || (*(_BYTE *)(v15 + 8) & 3) != 0)
            v7 = 0;
          else
            v7 = *(WebCore **)v15;
          v3 = *((_QWORD *)v7 + 7);
          MEMORY[0x19AEA3294](&v27, v3);
          v17 = (objc_class *)WebCore::convertDictionaryToJS(v7, **(JSC::JSGlobalObject ***)(v13 + 32), a3, v16);
          a3 = *(WebCore::JSDOMGlobalObject **)(v3 + 16);
          if (a3
            || (WebCore::DeferredPromise::callFunction(v13, (uint64_t *)v7, 0, v17),
                (a3 = *(WebCore::JSDOMGlobalObject **)(v3 + 16)) != 0))
          {
            v4 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v7);
            if (!(*(unsigned int (**)(_QWORD *))(*v4 + 64))(v4))
              goto LABEL_37;
LABEL_42:
            v21 = v4[43];
            if (*(WebCore::JSDOMGlobalObject **)(v3 + 24) == a3)
            {
LABEL_54:
              *(_BYTE *)(*(_QWORD *)(v21 + 8) + 93442) = 1;
              *(_BYTE *)(v13 + 44) = 1;
LABEL_37:
              WebCore::reportException(v7, (uint64_t)a3, 0, 0, 0);
              v13 = v26;
              result = (WTF::DeferrableRefCountedBase *)MEMORY[0x19AEA32A0](&v27);
              if (!v13)
                return result;
              goto LABEL_32;
            }
            if (!v21)
              goto LABEL_37;
            v22 = (unsigned __int8 *)(v21 + 40);
            if (__ldaxr((unsigned __int8 *)(v21 + 40)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v22))
            {
              goto LABEL_48;
            }
            MEMORY[0x19AEA534C](v21 + 40);
LABEL_48:
            v24 = *(unsigned __int8 *)(v21 + 41);
            v25 = __ldxr(v22);
            if (v25 == 1)
            {
              if (!__stlxr(0, v22))
              {
LABEL_53:
                if (!v24)
                  goto LABEL_37;
                goto LABEL_54;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v21 + 40));
            goto LABEL_53;
          }
          result = (WTF::DeferrableRefCountedBase *)MEMORY[0x19AEA32A0](&v27);
        }
      }
LABEL_32:
      if (*(_DWORD *)(v13 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      else
        --*(_DWORD *)(v13 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::exportKey(WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395F58;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::exportKey(WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395F58;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::exportKey(WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *a1 = &off_1E3395F80;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = a1[7];
  a1[7] = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = &off_1E3395F80;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v5 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v5 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&>::call(_QWORD *result, void *a2, WTF **a3, const WebCore::JsonWebKey *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore *v23;
  size_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  WTF *v47;
  _QWORD *v48;
  _QWORD *v49;
  WTF *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  _QWORD *v64;
  WTF *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  size_t __len;

  v4 = result[2];
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
    return result;
  v7 = (unsigned int *)a3;
  v8 = result;
  v9 = *(_DWORD *)(v6 - 8);
  v10 = result[1];
  v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v9 & ((v13 >> 31) ^ v13);
  v15 = *(_QWORD *)(v6 + 16 * v14);
  if (v15 == v10)
  {
LABEL_8:
    v17 = *(_QWORD *)(v6 + 16 * v14 + 8);
    if (!v17)
      return result;
    ++*(_DWORD *)(v17 + 16);
    v67 = 0;
    __len = 0;
    if (a2 < 3)
    {
      if (!*((_DWORD *)a3 + 46))
      {
        if (&v67 == a3)
          goto LABEL_34;
        v18 = *((_DWORD *)a3 + 3);
        if (v18)
        {
          v19 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)a3 + 3));
          LODWORD(__len) = v18;
          v67 = v19;
          v20 = *(char **)v7;
          if (!HIDWORD(__len))
          {
            v21 = 0;
            goto LABEL_33;
          }
          memmove(v19, v20, HIDWORD(__len));
          v21 = HIDWORD(__len);
          v19 = v67;
        }
        else
        {
          v19 = 0;
          v21 = 0;
        }
        v20 = *(char **)v7;
LABEL_33:
        memcpy((char *)v19 + v21, &v20[v21], v7[3] - v21);
        HIDWORD(__len) = v7[3];
        goto LABEL_34;
      }
      goto LABEL_101;
    }
    if ((_DWORD)a2 != 3)
      goto LABEL_34;
    v22 = *(_QWORD *)(v17 + 32);
    if (!v22 || (*(_BYTE *)(v22 + 8) & 3) != 0)
      v23 = 0;
    else
      v23 = *(WebCore **)v22;
    if (*((_DWORD *)a3 + 46) != 1)
    {
LABEL_101:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_102:
      v65 = 0;
LABEL_25:
      if (*v7 == 1)
        WTF::fastFree((WTF *)v7, a2);
      else
        --*v7;
LABEL_27:
      v26 = v66;
      v66 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v26 -= 2;
      }
LABEL_34:
      v28 = v8[1];
      v27 = (unsigned int *)v8[2];
      if (v27)
      {
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 + 1, v27));
        v31 = v8[1];
        v30 = (unsigned int *)v8[2];
        if (v30)
        {
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 + 1, v30));
        }
      }
      else
      {
        v30 = 0;
        v31 = v8[1];
      }
      if (*((_BYTE *)v8 + 48))
      {
        v33 = v8[3];
        v34 = v8[5];
        v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v35 = &off_1E3395FA8;
        *((_QWORD *)v35 + 1) = v28;
        *((_QWORD *)v35 + 2) = v27;
        v66 = v35;
        v36 = (WTF *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v36 = &off_1E3395FD0;
        *((_QWORD *)v36 + 1) = v31;
        *((_QWORD *)v36 + 2) = v30;
        v65 = v36;
        (*(void (**)(uint64_t, uint64_t, _QWORD *, WTF **, WTF::StringImpl **, WTF **, _QWORD, _QWORD))(*(_QWORD *)v33 + 24))(v33, v34, v8 + 4, &v67, &v66, &v65, v8[7], v8[8]);
        v37 = v65;
        v65 = 0;
        if (v37)
          (*(void (**)(WTF *))(*(_QWORD *)v37 + 8))(v37);
        v38 = v66;
        v66 = 0;
        if (!v38)
          goto LABEL_69;
        v39 = *(void (**)(void))(*(_QWORD *)v38 + 8);
      }
      else
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v8[2] + 8) + 8);
        if (!v40 || (v41 = *(_QWORD *)(v40 + 8)) == 0)
        {
          if (!v30)
            goto LABEL_65;
          do
          {
            v56 = __ldaxr(v30);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v30));
          if (!v57)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, a2);
            if (!v27)
              goto LABEL_69;
          }
          else
          {
LABEL_65:
            if (!v27)
              goto LABEL_69;
          }
          do
          {
            v58 = __ldaxr(v27);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v27));
          if (!v59)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, a2);
          }
          goto LABEL_69;
        }
        v42 = *(unsigned __int8 *)(v41 + 178);
        if (*(_BYTE *)(v41 + 178))
        {
          if (v42 == 1 || v42 == 2)
            ++*(_DWORD *)(v41 + 216);
        }
        else
        {
          *(_DWORD *)(v41 - 264) += 2;
        }
        v44 = v8[3];
        v43 = (WTF::StringImpl *)v8[4];
        v45 = (unsigned int *)((char *)v43 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
        v66 = v43;
        v47 = (WTF *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v47 = &off_1E3395FA8;
        *((_QWORD *)v47 + 1) = v28;
        *((_QWORD *)v47 + 2) = v27;
        v65 = v47;
        v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v48 = &off_1E3395FD0;
        v48[1] = v31;
        v48[2] = v30;
        v64 = v48;
        (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, WTF **, _QWORD **, _QWORD))(*(_QWORD *)v44 + 96))(v44, &v66, &v67, &v65, &v64, *((unsigned __int8 *)v8 + 72));
        v49 = v64;
        v64 = 0;
        if (v49)
          (*(void (**)(_QWORD *))(*v49 + 8))(v49);
        v50 = v65;
        v65 = 0;
        if (v50)
          (*(void (**)(WTF *))(*(_QWORD *)v50 + 8))(v50);
        v51 = (unsigned int *)v66;
        v66 = 0;
        if (v51)
        {
          v52 = v51 + 2;
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
          {
            atomic_store(1u, v51 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
          }
        }
        v55 = *(unsigned __int8 *)(v41 + 178);
        if (!*(_BYTE *)(v41 + 178))
        {
          if (*(_DWORD *)(v41 - 264) == 2)
          {
            if ((*(_WORD *)(v41 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v41 - 288), a2);
          }
          else
          {
            *(_DWORD *)(v41 - 264) -= 2;
          }
          goto LABEL_69;
        }
        if (v55 != 1)
        {
          if (v55 == 2)
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v41 + 216));
          goto LABEL_69;
        }
        if (*(_DWORD *)(v41 + 216) != 1)
        {
          --*(_DWORD *)(v41 + 216);
          goto LABEL_69;
        }
        v39 = *(void (**)(void))(*(_QWORD *)(v41 - 96) + 40);
      }
      v39();
LABEL_69:
      result = v67;
      if (v67)
      {
        v67 = 0;
        LODWORD(__len) = 0;
        result = (_QWORD *)WTF::fastFree((WTF *)result, a2);
      }
      if (*(_DWORD *)(v17 + 16) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      --*(_DWORD *)(v17 + 16);
      return result;
    }
    WebCore::convertDictionaryToJS(v23, v23, (WebCore::JSDOMGlobalObject *)a3, a4);
    JSC::JSONStringify();
    WTF::String::utf8();
    v7 = (unsigned int *)v65;
    if (!v65)
      goto LABEL_27;
    v24 = *((_QWORD *)v65 + 1);
    if (!v24)
      goto LABEL_102;
    v25 = v24 + HIDWORD(__len);
    if (v25 > __len)
    {
      v60 = __len + ((unint64_t)__len >> 2);
      if (v60 >= 0x10)
        v61 = v60 + 1;
      else
        v61 = 16;
      if (v61 <= v25)
        v62 = v24 + HIDWORD(__len);
      else
        v62 = v61;
      if (HIDWORD(v62))
        goto LABEL_103;
      v63 = v67;
      LODWORD(__len) = v62;
      v67 = (WTF *)WTF::fastMalloc((WTF *)v62);
      memcpy(v67, v63, HIDWORD(__len));
    }
    if (v25 >= HIDWORD(__len))
    {
      memcpy((char *)v67 + HIDWORD(__len), (char *)v65 + 16, v24);
      HIDWORD(__len) += v24;
      v7 = (unsigned int *)v65;
      v65 = 0;
      goto LABEL_25;
    }
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x195762F8CLL);
  }
  v16 = 1;
  while (v15)
  {
    v14 = ((_DWORD)v14 + v16) & v9;
    v15 = *(_QWORD *)(v6 + 16 * v14);
    ++v16;
    if (v15 == v10)
      goto LABEL_8;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&)::{lambda(WTF::CrashOnOverflow const&)#1},void,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395FA8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&)::{lambda(WTF::CrashOnOverflow const&)#1},void,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395FA8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::DeferrableRefCountedBase *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&)::{lambda(WTF::CrashOnOverflow const&)#1},void,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &>::call(WTF::DeferrableRefCountedBase *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  JSC *v10;
  objc_class *OutOfMemoryError;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *((_QWORD *)result + 1);
    do
      v4 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v4 + 1, (unsigned int *)v2));
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
      result = (WTF::DeferrableRefCountedBase *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take(&v12, (uint64_t *)(v5 + 40), v3);
    else
      v12 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v2));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::DeferrableRefCountedBase *)WTF::fastFree((WTF *)v2, a2);
    }
    v8 = v12;
    if (v12)
    {
      JSC::ArrayBuffer::tryCreate();
      if (v13)
      {
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<JSC::ArrayBuffer>>(v8, v13);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 32);
        if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
          v10 = 0;
        else
          v10 = *(JSC **)v9;
        OutOfMemoryError = (objc_class *)JSC::createOutOfMemoryError(v10, 0);
        WebCore::DeferredPromise::reject<WebCore::IDLAny>(v8, OutOfMemoryError, 0);
      }
      result = v13;
      v13 = 0;
      if (result)
        result = (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      if (*(_DWORD *)(v8 + 16) == 1)
        return (WTF::DeferrableRefCountedBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&)::{lambda(WebCore::ExceptionCode)#1},void,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395FD0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&)::{lambda(WebCore::ExceptionCode)#1},void,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395FD0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&)::{lambda(WebCore::ExceptionCode)#1},void,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey>>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3395FF8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3395FF8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::wrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::CryptoKey &,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0,void,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_1E3396020;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0,void,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3396020;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0,void,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&>::call(WTF::StringImpl *result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::JSGlobalObject *v23;
  uint64_t v24;
  JSC::JSCell *v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  __int16 v37;
  __int128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  int v49;
  WTF::StringImpl *v50;
  int v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  WTF *v58;
  __int16 v59;
  __int16 v60;
  void *v61;
  unsigned int v62;
  WTF *v63;
  __int16 v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  __int16 v70;
  char *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  unsigned int v103;
  __int16 v104;
  __int16 v105;
  WTF *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  _DWORD *v114;
  WTF::StringImpl *v115;
  _DWORD *v116;
  WTF::StringImpl *v117;
  _DWORD *v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  _QWORD *v121;
  uint64_t v122;
  _DWORD *v123;
  _DWORD *v124;
  _DWORD *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  _QWORD *v141;
  uint64_t v142;
  __int16 v143;
  __int16 v144;
  int v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  unsigned int v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  _QWORD v156[2];
  void *__src;
  int v158;
  unsigned int v159;
  char v160;
  int v161;
  WTF::StringImpl *v162;
  __int16 v163;
  __int128 v164;
  unsigned __int128 v165;
  __int128 v166;
  unsigned __int128 v167;
  unsigned __int128 v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  char v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  _DWORD *v176;
  void *v177;
  uint64_t v178;
  char v179;
  int v180;
  WTF::StringImpl *v181;
  __int16 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  WTF::StringImpl *v192;
  unsigned int v193;
  char v194[8];
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  size_t __len;
  void *__dst;
  unsigned int v199;
  unsigned int v200;
  unsigned __int8 v201;
  int v202;
  WTF::StringImpl *v203;
  __int16 v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF *v216;
  unsigned int v217;
  unsigned int v218;
  unsigned __int8 v219;
  WTF::StringImpl *v220;
  unsigned int v221;
  char v222[17];

  v3 = *((_QWORD *)result + 2);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
    return result;
  v7 = result;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_QWORD *)result + 1);
  v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v5 + 16 * v13);
  if (v14 == v9)
  {
LABEL_8:
    v16 = *(_QWORD *)(v5 + 16 * v13 + 8);
    if (!v16)
      return result;
    ++*(_DWORD *)(v16 + 16);
    v196 = 0;
    __len = 0;
    v221 = 0;
    v17 = *((unsigned __int8 *)result + 24);
    if (v17 < 3)
    {
      if (&v196 != (WTF::StringImpl **)a2)
      {
        v18 = *(_DWORD *)(a2 + 12);
        if (v18)
        {
          v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 12));
          LODWORD(__len) = v18;
          v196 = v19;
          v20 = *(WTF::StringImpl **)a2;
          if (!HIDWORD(__len))
          {
            v21 = 0;
            goto LABEL_25;
          }
          memmove(v19, v20, HIDWORD(__len));
          v21 = HIDWORD(__len);
          v19 = v196;
        }
        else
        {
          v19 = 0;
          v21 = 0;
        }
        v20 = *(WTF::StringImpl **)a2;
LABEL_25:
        memcpy((char *)v19 + v21, (char *)v20 + v21, *(unsigned int *)(a2 + 12) - v21);
        HIDWORD(__len) = *(_DWORD *)(a2 + 12);
      }
LABEL_273:
      v155 = v16;
      v129 = *((_QWORD *)v7 + 1);
      v130 = (unsigned int *)*((_QWORD *)v7 + 2);
      if (v130)
      {
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 + 1, v130));
        v132 = *((_QWORD *)v7 + 1);
        v133 = (unsigned int *)*((_QWORD *)v7 + 2);
        if (v133)
        {
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 + 1, v133));
        }
      }
      else
      {
        v133 = 0;
        v132 = *((_QWORD *)v7 + 1);
      }
      v135 = *((unsigned __int8 *)v7 + 24);
      v136 = *((_QWORD *)v7 + 4);
      v137 = *((_QWORD *)v7 + 5);
      v138 = *((unsigned __int8 *)v7 + 48);
      v139 = *((unsigned int *)v7 + 13);
      v140 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v140 = &off_1E3396058;
      *((_QWORD *)v140 + 1) = v129;
      *((_QWORD *)v140 + 2) = v130;
      v175 = v140;
      v141 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v141 = &off_1E3396080;
      v141[1] = v132;
      v141[2] = v133;
      v156[0] = v141;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD *, _BYTE))(*(_QWORD *)v136 + 80))(v136, v135, &v196, v137, v138, v139, &v175, v156, *((_BYTE *)v7 + 56));
      v142 = v156[0];
      v156[0] = 0;
      if (v142)
        (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
      result = v175;
      v175 = 0;
      v16 = v155;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
LABEL_281:
      if (v221 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))*(&off_1E3395A38 + v221))(&v175, &v196);
      if (*(_DWORD *)(v16 + 16) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      --*(_DWORD *)(v16 + 16);
      return result;
    }
    if (v17 != 3)
      goto LABEL_273;
    v22 = *(_QWORD *)(v16 + 32);
    if (!v22 || (*(_BYTE *)(v22 + 8) & 3) != 0)
      v23 = 0;
    else
      v23 = *(JSC::JSGlobalObject **)v22;
    v24 = *((_QWORD *)v23 + 7);
    WTF::String::String();
    MEMORY[0x19AEA3294](v194, v24);
    v25 = (JSC::JSCell *)JSC::JSONParse();
    if (!v25)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::DeferredPromise::reject(v16, (JSC::JSGlobalObject *)0x1A, (JSC::JSGlobalObject *)&v175, 0);
      v34 = v175;
      v175 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v33);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = 1;
LABEL_269:
      MEMORY[0x19AEA32A0](v194);
      result = v195;
      v195 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v128);
        else
          *(_DWORD *)result -= 2;
      }
      if (v35 != 2)
        goto LABEL_281;
      goto LABEL_273;
    }
    WebCore::convertDictionary<WebCore::JsonWebKey>(v25, v23, (uint64_t)&v175);
    v27 = v193;
    if (v193)
    {
      v35 = 1;
LABEL_267:
      if (v27 != -1)
        (*(&off_1E3396038 + v27))((int)v156, (WebCore::JsonWebKey *)&v175);
      goto LABEL_269;
    }
    v28 = v175;
    v29 = v176;
    v175 = 0;
    v176 = 0;
    v156[0] = v28;
    v156[1] = v29;
    LOBYTE(__src) = 0;
    v160 = 0;
    v30 = v7;
    if (v179)
    {
      __src = v177;
      v31 = v178;
      v2 = HIDWORD(v178);
      v177 = 0;
      v178 = 0;
      v158 = v31;
      v159 = v2;
      v32 = 1;
      v160 = 1;
    }
    else
    {
      v32 = 0;
    }
    v161 = v180;
    v36 = v181;
    v162 = v181;
    v37 = v182;
    v163 = v182;
    v38 = v183;
    v164 = v183;
    v39 = (WTF::StringImpl *)*((_QWORD *)&v184 + 1);
    v40 = (WTF::StringImpl *)v184;
    v183 = 0u;
    v184 = 0u;
    v165 = __PAIR128__((unint64_t)v39, (unint64_t)v40);
    v41 = (WTF::StringImpl *)*((_QWORD *)&v185 + 1);
    v42 = (WTF::StringImpl *)v185;
    v166 = v185;
    v43 = (WTF::StringImpl *)*((_QWORD *)&v186 + 1);
    v44 = (WTF::StringImpl *)v186;
    v185 = 0u;
    v186 = 0u;
    v167 = __PAIR128__((unint64_t)v43, (unint64_t)v44);
    v45 = (WTF::StringImpl *)*((_QWORD *)&v187 + 1);
    v46 = (WTF::StringImpl *)v187;
    v187 = 0u;
    v168 = __PAIR128__((unint64_t)v45, (unint64_t)v46);
    v47 = v188;
    v181 = 0;
    v188 = 0;
    v169 = v47;
    LOBYTE(v170) = 0;
    v173 = 0;
    if (v191)
    {
      v170 = v189;
      v48 = v190;
      v26 = HIDWORD(v190);
      v189 = 0;
      v190 = 0;
      v171 = v48;
      v172 = v26;
      v49 = 1;
      v173 = 1;
    }
    else
    {
      v49 = 0;
    }
    v50 = v192;
    v192 = 0;
    v174 = v50;
    if (v179 && v2)
    {
      v51 = 0;
      v52 = (int *)__src;
      v53 = 4 * v2;
      while (1)
      {
        v54 = *v52;
        if (v54 >= 8)
          break;
        v51 |= dword_1969ED148[v54];
        ++v52;
        v53 -= 4;
        if (!v53)
          goto LABEL_41;
      }
LABEL_296:
      __break(0xC471u);
      JUMPOUT(0x1957645C4);
    }
    v51 = 0;
LABEL_41:
    v161 = v51;
    if (v221 != -1)
    {
      if (v221 == 1)
      {
        v145 = v49;
        v148 = v26;
        if (v28)
          *(_DWORD *)v28 += 2;
        v55 = v196;
        v196 = v28;
        v153 = v45;
        v154 = v47;
        v151 = v43;
        v152 = v46;
        v149 = v41;
        v150 = v44;
        v146 = v39;
        v147 = v42;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            v144 = v37;
            WTF::StringImpl::destroy(v55, v43);
            v37 = v144;
            v39 = v146;
            v42 = v147;
            v41 = v149;
            v44 = v150;
            v43 = v151;
            v46 = v152;
            v45 = v153;
            v47 = v154;
            if (!v29)
            {
LABEL_50:
              v56 = (WTF::StringImpl *)__len;
              __len = (size_t)v29;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                {
                  v104 = v37;
                  WTF::StringImpl::destroy(v56, v43);
                  v37 = v104;
                  v39 = v146;
                  v42 = v147;
                  v41 = v149;
                  v44 = v150;
                  v43 = v151;
                  v46 = v152;
                  v45 = v153;
                  v47 = v154;
                }
                else
                {
                  *(_DWORD *)v56 -= 2;
                }
              }
              if (v201 == v32)
              {
                if (v201)
                {
                  if (v200 <= v2)
                  {
                    v62 = v199;
                    if (v2 > v199)
                    {
                      if (v199)
                      {
                        if (v200)
                          v200 = 0;
                        v63 = (WTF *)__dst;
                        if (__dst)
                        {
                          __dst = 0;
                          v199 = 0;
                          v64 = v37;
                          WTF::fastFree(v63, v43);
                          v37 = v64;
                          v62 = v199;
                        }
                      }
                      if (v62 < v2)
                      {
                        v143 = v37;
                        if (v2 >> 30)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1957645DCLL);
                        }
                        v65 = v16;
                        v66 = __dst;
                        v67 = v200;
                        v68 = (void *)WTF::fastMalloc((WTF *)(4 * v2));
                        v199 = v2;
                        __dst = v68;
                        memcpy(v68, v66, 4 * v67);
                        v16 = v65;
                        v37 = v143;
                        if (v66)
                        {
                          if (__dst == v66)
                          {
                            __dst = 0;
                            v199 = 0;
                          }
                          WTF::fastFree((WTF *)v66, v69);
                          v37 = v143;
                        }
                      }
                    }
                    v57 = v200;
                  }
                  else
                  {
                    v200 = v2;
                    v57 = v2;
                  }
                  v70 = v37;
                  v71 = (char *)__dst;
                  if (v57)
                  {
                    memmove(__dst, __src, 4 * v57);
                    v72 = v200;
                    v71 = (char *)__dst;
                  }
                  else
                  {
                    v72 = 0;
                  }
                  memcpy(&v71[4 * v72], (char *)__src + 4 * v72, 4 * v2 - 4 * v72);
                  v200 = v2;
                  v45 = v153;
                  v47 = v154;
                  v43 = v151;
                  v46 = v152;
                  v41 = v149;
                  v44 = v150;
                  v39 = v146;
                  v42 = v147;
                  v37 = v70;
                }
              }
              else if (v201)
              {
                v58 = (WTF *)__dst;
                if (__dst)
                {
                  __dst = 0;
                  v199 = 0;
                  v59 = v37;
                  WTF::fastFree(v58, v43);
                  v37 = v59;
                  v39 = v146;
                  v42 = v147;
                  v41 = v149;
                  v44 = v150;
                  v43 = v151;
                  v46 = v152;
                  v45 = v153;
                  v47 = v154;
                }
                v201 = 0;
              }
              else
              {
                __dst = 0;
                v199 = 0;
                v200 = v2;
                if (v2)
                {
                  if (v2 >> 30)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1957645CCLL);
                  }
                  v60 = v37;
                  v61 = (void *)WTF::fastMalloc((WTF *)(4 * v2));
                  v199 = v2;
                  __dst = v61;
                  memcpy(v61, __src, 4 * v2);
                  v45 = v153;
                  v47 = v154;
                  v43 = v151;
                  v46 = v152;
                  v41 = v149;
                  v44 = v150;
                  v39 = v146;
                  v42 = v147;
                  v37 = v60;
                }
                v201 = 1;
              }
              v202 = v51;
              if (v36)
                *(_DWORD *)v36 += 2;
              v73 = v203;
              v203 = v36;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                {
                  v105 = v37;
                  WTF::StringImpl::destroy(v73, v43);
                  v37 = v105;
                  v39 = v146;
                  v42 = v147;
                  v41 = v149;
                  v44 = v150;
                  v43 = v151;
                  v46 = v152;
                  v45 = v153;
                  v47 = v154;
                }
                else
                {
                  *(_DWORD *)v73 -= 2;
                }
              }
              v204 = v37;
              if ((_QWORD)v38)
                *(_DWORD *)v38 += 2;
              v74 = v205;
              v205 = (WTF::StringImpl *)v38;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::destroy(v74, v43);
                  v39 = v146;
                  v42 = v147;
                  v41 = v149;
                  v44 = v150;
                  v43 = v151;
                  v46 = v152;
                  v45 = v153;
                  v47 = v154;
                  if (!*((_QWORD *)&v38 + 1))
                  {
LABEL_97:
                    v75 = v206;
                    v206 = (WTF::StringImpl *)*((_QWORD *)&v38 + 1);
                    if (v75)
                    {
                      if (*(_DWORD *)v75 == 2)
                      {
                        WTF::StringImpl::destroy(v75, v43);
                        v39 = v146;
                        v42 = v147;
                        v41 = v149;
                        v44 = v150;
                        v43 = v151;
                        v46 = v152;
                        v45 = v153;
                        v47 = v154;
                        if (!v40)
                        {
LABEL_102:
                          v76 = v207;
                          v207 = v40;
                          v7 = v30;
                          if (v76)
                          {
                            if (*(_DWORD *)v76 == 2)
                            {
                              WTF::StringImpl::destroy(v76, v43);
                              v39 = v146;
                              v42 = v147;
                              v41 = v149;
                              v44 = v150;
                              v43 = v151;
                              v46 = v152;
                              v45 = v153;
                              v47 = v154;
                              if (!v146)
                              {
LABEL_107:
                                v77 = v208;
                                v208 = v39;
                                if (v77)
                                {
                                  if (*(_DWORD *)v77 == 2)
                                  {
                                    WTF::StringImpl::destroy(v77, v43);
                                    v42 = v147;
                                    v41 = v149;
                                    v44 = v150;
                                    v43 = v151;
                                    v46 = v152;
                                    v45 = v153;
                                    v47 = v154;
                                    if (!v147)
                                    {
LABEL_112:
                                      v78 = v209;
                                      v209 = v42;
                                      if (v78)
                                      {
                                        if (*(_DWORD *)v78 == 2)
                                        {
                                          WTF::StringImpl::destroy(v78, v43);
                                          v41 = v149;
                                          v44 = v150;
                                          v43 = v151;
                                          v46 = v152;
                                          v45 = v153;
                                          v47 = v154;
                                          if (!v149)
                                          {
LABEL_117:
                                            v79 = v210;
                                            v210 = v41;
                                            if (v79)
                                            {
                                              if (*(_DWORD *)v79 == 2)
                                              {
                                                WTF::StringImpl::destroy(v79, v43);
                                                v44 = v150;
                                                v43 = v151;
                                                v46 = v152;
                                                v45 = v153;
                                                v47 = v154;
                                                if (!v150)
                                                {
LABEL_122:
                                                  v80 = v211;
                                                  v211 = v44;
                                                  if (v80)
                                                  {
                                                    if (*(_DWORD *)v80 == 2)
                                                    {
                                                      WTF::StringImpl::destroy(v80, v43);
                                                      v43 = v151;
                                                      v46 = v152;
                                                      v45 = v153;
                                                      v47 = v154;
                                                      if (!v151)
                                                      {
LABEL_127:
                                                        v81 = v212;
                                                        v212 = v43;
                                                        if (v81)
                                                        {
                                                          if (*(_DWORD *)v81 == 2)
                                                          {
                                                            WTF::StringImpl::destroy(v81, v43);
                                                            v46 = v152;
                                                            v45 = v153;
                                                            v47 = v154;
                                                            if (!v152)
                                                            {
LABEL_132:
                                                              v82 = v213;
                                                              v213 = v46;
                                                              if (v82)
                                                              {
                                                                if (*(_DWORD *)v82 == 2)
                                                                {
                                                                  WTF::StringImpl::destroy(v82, v43);
                                                                  v45 = v153;
                                                                  v47 = v154;
                                                                  if (!v153)
                                                                  {
LABEL_137:
                                                                    v83 = v214;
                                                                    v214 = v45;
                                                                    if (v83)
                                                                    {
                                                                      if (*(_DWORD *)v83 == 2)
                                                                      {
                                                                        WTF::StringImpl::destroy(v83, v43);
                                                                        v47 = v154;
                                                                        if (!v154)
                                                                          goto LABEL_142;
                                                                        goto LABEL_141;
                                                                      }
                                                                      *(_DWORD *)v83 -= 2;
                                                                    }
                                                                    if (!v47)
                                                                    {
LABEL_142:
                                                                      v84 = v215;
                                                                      v215 = v47;
                                                                      if (v84)
                                                                      {
                                                                        if (*(_DWORD *)v84 == 2)
                                                                          WTF::StringImpl::destroy(v84, v43);
                                                                        else
                                                                          *(_DWORD *)v84 -= 2;
                                                                      }
                                                                      if (v219 == v145)
                                                                      {
                                                                        v85 = v148;
                                                                        if (v219)
                                                                        {
                                                                          if (v218 <= v148)
                                                                          {
                                                                            if (v148 > v217)
                                                                            {
                                                                              if (v217)
                                                                              {
                                                                                if (v218)
                                                                                {
                                                                                  v98 = 24 * v218;
                                                                                  v99 = (WTF::StringImpl **)((char *)v216 + 16);
                                                                                  do
                                                                                  {
                                                                                    v100 = *v99;
                                                                                    *v99 = 0;
                                                                                    if (v100)
                                                                                    {
                                                                                      if (*(_DWORD *)v100 == 2)
                                                                                        WTF::StringImpl::destroy(v100, v43);
                                                                                      else
                                                                                        *(_DWORD *)v100 -= 2;
                                                                                    }
                                                                                    v101 = *(v99 - 1);
                                                                                    *(v99 - 1) = 0;
                                                                                    if (v101)
                                                                                    {
                                                                                      if (*(_DWORD *)v101 == 2)
                                                                                        WTF::StringImpl::destroy(v101, v43);
                                                                                      else
                                                                                        *(_DWORD *)v101 -= 2;
                                                                                    }
                                                                                    v102 = *(v99 - 2);
                                                                                    *(v99 - 2) = 0;
                                                                                    if (v102)
                                                                                    {
                                                                                      if (*(_DWORD *)v102 == 2)
                                                                                        WTF::StringImpl::destroy(v102, v43);
                                                                                      else
                                                                                        *(_DWORD *)v102 -= 2;
                                                                                    }
                                                                                    v99 += 3;
                                                                                    v98 -= 24;
                                                                                  }
                                                                                  while (v98);
                                                                                  v218 = 0;
                                                                                }
                                                                                v106 = v216;
                                                                                if (v216)
                                                                                {
                                                                                  v216 = 0;
                                                                                  v217 = 0;
                                                                                  WTF::fastFree(v106, v43);
                                                                                }
                                                                              }
                                                                              v85 = v148;
                                                                              if (v217 < v148)
                                                                              {
                                                                                if (v148 >= 0xAAAAAAB)
                                                                                  goto LABEL_296;
                                                                                v107 = v216;
                                                                                v108 = (WTF *)((char *)v216 + 24 * v218);
                                                                                v109 = (WTF *)WTF::fastMalloc((WTF *)(24 * v148));
                                                                                v217 = 24 * v148 / 0x18;
                                                                                v216 = v109;
                                                                                WTF::VectorMover<false,WebCore::RsaOtherPrimesInfo>::move(v107, v108, (WTF::StringImpl **)v109);
                                                                                v85 = v148;
                                                                                if (v107)
                                                                                {
                                                                                  if (v216 == v107)
                                                                                  {
                                                                                    v216 = 0;
                                                                                    v217 = 0;
                                                                                  }
                                                                                  WTF::fastFree(v107, v43);
                                                                                  v85 = v148;
                                                                                }
                                                                              }
                                                                            }
                                                                            v86 = v218;
                                                                            v103 = v218;
                                                                          }
                                                                          else
                                                                          {
                                                                            v86 = v148;
                                                                            v87 = 24 * v218 - 24 * v148;
                                                                            v88 = (WTF::StringImpl **)((char *)v216 + 24 * v148 + 16);
                                                                            do
                                                                            {
                                                                              v89 = *v88;
                                                                              *v88 = 0;
                                                                              if (v89)
                                                                              {
                                                                                if (*(_DWORD *)v89 == 2)
                                                                                  WTF::StringImpl::destroy(v89, v43);
                                                                                else
                                                                                  *(_DWORD *)v89 -= 2;
                                                                              }
                                                                              v90 = *(v88 - 1);
                                                                              *(v88 - 1) = 0;
                                                                              if (v90)
                                                                              {
                                                                                if (*(_DWORD *)v90 == 2)
                                                                                  WTF::StringImpl::destroy(v90, v43);
                                                                                else
                                                                                  *(_DWORD *)v90 -= 2;
                                                                              }
                                                                              v91 = *(v88 - 2);
                                                                              *(v88 - 2) = 0;
                                                                              if (v91)
                                                                              {
                                                                                if (*(_DWORD *)v91 == 2)
                                                                                  WTF::StringImpl::destroy(v91, v43);
                                                                                else
                                                                                  *(_DWORD *)v91 -= 2;
                                                                              }
                                                                              v88 += 3;
                                                                              v87 -= 24;
                                                                            }
                                                                            while (v87);
                                                                            v85 = v148;
                                                                            v218 = v148;
                                                                            v103 = v148;
                                                                          }
                                                                          v110 = v170;
                                                                          if (v103)
                                                                          {
                                                                            v111 = v170 + 24 * v86;
                                                                            v112 = v216;
                                                                            v113 = v170;
                                                                            do
                                                                            {
                                                                              v114 = *(_DWORD **)v113;
                                                                              if (*(_QWORD *)v113)
                                                                                *v114 += 2;
                                                                              v115 = *(WTF::StringImpl **)v112;
                                                                              *(_QWORD *)v112 = v114;
                                                                              if (v115)
                                                                              {
                                                                                if (*(_DWORD *)v115 == 2)
                                                                                  WTF::StringImpl::destroy(v115, v43);
                                                                                else
                                                                                  *(_DWORD *)v115 -= 2;
                                                                              }
                                                                              v116 = *(_DWORD **)(v113 + 8);
                                                                              if (v116)
                                                                                *v116 += 2;
                                                                              v117 = (WTF::StringImpl *)*((_QWORD *)v112 + 1);
                                                                              *((_QWORD *)v112 + 1) = v116;
                                                                              if (v117)
                                                                              {
                                                                                if (*(_DWORD *)v117 == 2)
                                                                                  WTF::StringImpl::destroy(v117, v43);
                                                                                else
                                                                                  *(_DWORD *)v117 -= 2;
                                                                              }
                                                                              v118 = *(_DWORD **)(v113 + 16);
                                                                              if (v118)
                                                                                *v118 += 2;
                                                                              v119 = (WTF::StringImpl *)*((_QWORD *)v112 + 2);
                                                                              *((_QWORD *)v112 + 2) = v118;
                                                                              if (v119)
                                                                              {
                                                                                if (*(_DWORD *)v119 == 2)
                                                                                  WTF::StringImpl::destroy(v119, v43);
                                                                                else
                                                                                  *(_DWORD *)v119 -= 2;
                                                                              }
                                                                              v113 += 24;
                                                                              v112 = (WTF *)((char *)v112 + 24);
                                                                            }
                                                                            while (v113 != v111);
                                                                            v120 = v218;
                                                                            v7 = v30;
                                                                            v85 = v148;
                                                                          }
                                                                          else
                                                                          {
                                                                            v120 = 0;
                                                                          }
                                                                          if (v120 != v85)
                                                                          {
                                                                            v121 = (_QWORD *)((char *)v216 + 24 * v120);
                                                                            v122 = v110 + 24 * v120;
                                                                            do
                                                                            {
                                                                              v123 = *(_DWORD **)v122;
                                                                              if (*(_QWORD *)v122)
                                                                                *v123 += 2;
                                                                              *v121 = v123;
                                                                              v124 = *(_DWORD **)(v122 + 8);
                                                                              if (v124)
                                                                                *v124 += 2;
                                                                              v121[1] = v124;
                                                                              v125 = *(_DWORD **)(v122 + 16);
                                                                              if (v125)
                                                                                *v125 += 2;
                                                                              v121[2] = v125;
                                                                              v122 += 24;
                                                                              v121 += 3;
                                                                            }
                                                                            while (v122 != v110 + 24 * v85);
                                                                          }
                                                                          v218 = v85;
                                                                        }
                                                                      }
                                                                      else if (v219)
                                                                      {
                                                                        WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v216, v43);
                                                                        v219 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        v216 = 0;
                                                                        v217 = 0;
                                                                        v218 = v148;
                                                                        if (v148)
                                                                        {
                                                                          if (v148 >= 0xAAAAAAB)
                                                                          {
                                                                            __break(0xC471u);
                                                                            JUMPOUT(0x1957645D4);
                                                                          }
                                                                          v92 = (WTF *)WTF::fastMalloc((WTF *)(24 * v148));
                                                                          v217 = 24 * v148 / 0x18;
                                                                          v216 = v92;
                                                                          v93 = v170;
                                                                          v94 = v170 + 24 * v148;
                                                                          do
                                                                          {
                                                                            v95 = *(_DWORD **)v93;
                                                                            if (*(_QWORD *)v93)
                                                                              *v95 += 2;
                                                                            *(_QWORD *)v92 = v95;
                                                                            v96 = *(_DWORD **)(v93 + 8);
                                                                            if (v96)
                                                                              *v96 += 2;
                                                                            *((_QWORD *)v92 + 1) = v96;
                                                                            v97 = *(_DWORD **)(v93 + 16);
                                                                            if (v97)
                                                                              *v97 += 2;
                                                                            *((_QWORD *)v92 + 2) = v97;
                                                                            v93 += 24;
                                                                            v92 = (WTF *)((char *)v92 + 24);
                                                                          }
                                                                          while (v93 != v94);
                                                                        }
                                                                        v219 = 1;
                                                                      }
                                                                      v126 = v174;
                                                                      if (v174)
                                                                        *(_DWORD *)v174 += 2;
                                                                      v127 = v220;
                                                                      v220 = v126;
                                                                      if (v127)
                                                                      {
                                                                        if (*(_DWORD *)v127 == 2)
                                                                          WTF::StringImpl::destroy(v127, v43);
                                                                        else
                                                                          *(_DWORD *)v127 -= 2;
                                                                      }
                                                                      goto LABEL_266;
                                                                    }
LABEL_141:
                                                                    *(_DWORD *)v47 += 2;
                                                                    goto LABEL_142;
                                                                  }
LABEL_136:
                                                                  *(_DWORD *)v45 += 2;
                                                                  goto LABEL_137;
                                                                }
                                                                *(_DWORD *)v82 -= 2;
                                                              }
                                                              if (!v45)
                                                                goto LABEL_137;
                                                              goto LABEL_136;
                                                            }
LABEL_131:
                                                            *(_DWORD *)v46 += 2;
                                                            goto LABEL_132;
                                                          }
                                                          *(_DWORD *)v81 -= 2;
                                                        }
                                                        if (!v46)
                                                          goto LABEL_132;
                                                        goto LABEL_131;
                                                      }
LABEL_126:
                                                      *(_DWORD *)v43 += 2;
                                                      goto LABEL_127;
                                                    }
                                                    *(_DWORD *)v80 -= 2;
                                                  }
                                                  if (!v43)
                                                    goto LABEL_127;
                                                  goto LABEL_126;
                                                }
LABEL_121:
                                                *(_DWORD *)v44 += 2;
                                                goto LABEL_122;
                                              }
                                              *(_DWORD *)v79 -= 2;
                                            }
                                            if (!v44)
                                              goto LABEL_122;
                                            goto LABEL_121;
                                          }
LABEL_116:
                                          *(_DWORD *)v41 += 2;
                                          goto LABEL_117;
                                        }
                                        *(_DWORD *)v78 -= 2;
                                      }
                                      if (!v41)
                                        goto LABEL_117;
                                      goto LABEL_116;
                                    }
LABEL_111:
                                    *(_DWORD *)v42 += 2;
                                    goto LABEL_112;
                                  }
                                  *(_DWORD *)v77 -= 2;
                                }
                                if (!v42)
                                  goto LABEL_112;
                                goto LABEL_111;
                              }
LABEL_106:
                              *(_DWORD *)v39 += 2;
                              goto LABEL_107;
                            }
                            *(_DWORD *)v76 -= 2;
                          }
                          if (!v39)
                            goto LABEL_107;
                          goto LABEL_106;
                        }
LABEL_101:
                        *(_DWORD *)v40 += 2;
                        goto LABEL_102;
                      }
                      *(_DWORD *)v75 -= 2;
                    }
                    if (!v40)
                      goto LABEL_102;
                    goto LABEL_101;
                  }
LABEL_96:
                  **((_DWORD **)&v38 + 1) += 2;
                  goto LABEL_97;
                }
                *(_DWORD *)v74 -= 2;
              }
              if (!*((_QWORD *)&v38 + 1))
                goto LABEL_97;
              goto LABEL_96;
            }
LABEL_49:
            *v29 += 2;
            goto LABEL_50;
          }
          *(_DWORD *)v55 -= 2;
        }
        if (!v29)
          goto LABEL_50;
        goto LABEL_49;
      }
      ((void (*)(char *, WTF::StringImpl **))*(&off_1E3395A38 + v221))(v222, &v196);
    }
    v221 = -1;
    WebCore::JsonWebKey::JsonWebKey((WebCore::JsonWebKey *)&v196, (const WebCore::JsonWebKey *)v156);
    v221 = 1;
    v7 = v30;
LABEL_266:
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v156, v43);
    v35 = 2;
    v27 = v193;
    goto LABEL_267;
  }
  v15 = 1;
  while (v14)
  {
    v13 = ((_DWORD)v13 + v15) & v8;
    v14 = *(_QWORD *)(v5 + 16 * v13);
    ++v15;
    if (v14 == v9)
      goto LABEL_8;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0::operator()(std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&)::{lambda(WebCore::CryptoKey)#1},void,WebCore::CryptoKey>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3396058;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0::operator()(std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&)::{lambda(WebCore::CryptoKey)#1},void,WebCore::CryptoKey>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3396058;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0::operator()(std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&)::{lambda(WebCore::CryptoKey)#1},void,WebCore::CryptoKey>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v4 = *((_QWORD *)result + 1);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v13, (uint64_t *)(v6 + 40), v4);
    else
      v13 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v2, (void *)a2);
    }
    v9 = v13;
    if (v13)
    {
      if (*(unsigned __int8 *)(a2 + 13) - 1 <= 1 && *(_DWORD *)(a2 + 16) == 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::DeferredPromise::reject((uint64_t)v9, (JSC::JSGlobalObject *)9, (JSC::JSGlobalObject *)&v14, 0);
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          else
            *(_DWORD *)result -= 2;
        }
        v11 = v9[4] - 1;
        if (v9[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      }
      else
      {
        result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CryptoKey>>((uint64_t)v13, (WebCore::JSDOMGlobalObject *)a2);
        v11 = v9[4] - 1;
        if (v9[4] == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      }
      v9[4] = v11;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0::operator()(std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&)::{lambda(WebCore::ExceptionCode)#1},void,$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3396080;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0::operator()(std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&)::{lambda(WebCore::ExceptionCode)#1},void,$_0>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3396080;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_0::operator()(std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &<unsigned char,0ul,WTF::Vector,16ul,WebCore::CryptoKeyUsage> const&)::{lambda(WebCore::ExceptionCode)#1},void,$_0>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33960A8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_1,void,WebCore::ExceptionCode>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33960A8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubtleCrypto::unwrapKey(JSC::JSGlobalObject &,WebCore::CryptoKeyFormat,WebCore::BufferSource &&,WebCore::CryptoKey &,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String> &&,std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>,BOOL,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::DefaultRefDerefTraits<WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>> &&)::$_1,void,WebCore::ExceptionCode>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)(result + 8);
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    v6 = *(_QWORD *)(v2 + 8);
    if (v6)
      result = (uint64_t)WTF::HashMap<WebCore::DeferredPromise *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WebCore::DeferredPromise *>,WTF::HashTraits<WebCore::DeferredPromise *>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take((uint64_t *)&v10, (uint64_t *)(v6 + 40), v4);
    else
      v10 = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v2));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v2);
      result = WTF::fastFree((WTF *)v2, a2);
    }
    v9 = v10;
    if (v10)
    {
      result = (uint64_t)WebCore::rejectWithException(v10, v3);
      if (*((_DWORD *)v9 + 4) == 1)
        return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
      else
        --*((_DWORD *)v9 + 4);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E33960D0;
  v3 = *(WTF **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3395880[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E33960D0;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3395880[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

unint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  unint64_t result;

  v4 = *(_QWORD *)(a1 + 64);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = *WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector((WebCore::CryptoAlgorithmAesCbcCfbParams *)(a1 + 8));
    return WebCore::transformAESCBC(a2, 0, v5, *(const void **)(v4 + 24), *(unsigned int *)(v4 + 36), a1 + 72, 1u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E33960F8;
  v3 = *(WTF **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3395880[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E33960F8;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3395880[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 64);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
    return (uint64_t)WebCore::CryptoAlgorithmAESCBC::platformDecrypt((WebCore::CryptoAlgorithmAesCbcCfbParams *)(a1 + 8), v4, a1 + 72, 1, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCBC::importKey(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&,WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(WebCore::CryptoKey &)> &&,WebCore::CryptoAlgorithmParameters const&<void ()(WebCore::ExceptionCode)> &&,WebCore::UseCryptoKit)::$_0,BOOL,unsigned long,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  switch(a2)
  {
    case 256:
      if (v3)
LABEL_11:
        JUMPOUT(0x19AEA53F4);
      return 1;
    case 192:
      if (v3)
        goto LABEL_11;
      return 1;
    case 128:
      if (v3)
        goto LABEL_11;
      return 1;
  }
  return 0;
}

uint64_t WebCore::JsonWebKey::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF **)(a1 + 16);
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v9 = *v8;
      if (*v8)
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
        WTF::fastFree(v9, a2);
      }
      v10 = a2[2];
      a2[2] = 0;
      *(_QWORD *)(a1 + 16) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = 0;
      *(_DWORD *)(a1 + 24) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = 0;
      *(_DWORD *)(a1 + 28) = v10;
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v11 = *v8;
    if (*v8)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v11, a2);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *v8 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v12 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(a1 + 16) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *(_DWORD *)(a1 + 24) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *(_DWORD *)(a1 + 28) = v12;
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  v13 = a2[6];
  a2[6] = 0;
  v14 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  v15 = a2[8];
  a2[8] = 0;
  v16 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = a2[9];
  a2[9] = 0;
  v18 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = a2[10];
  a2[10] = 0;
  v20 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = a2[11];
  a2[11] = 0;
  v22 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = a2[12];
  a2[12] = 0;
  v24 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = a2[13];
  a2[13] = 0;
  v26 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = a2[14];
  a2[14] = 0;
  v28 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = a2[15];
  a2[15] = 0;
  v30 = *(WTF::StringImpl **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = a2[16];
  a2[16] = 0;
  v32 = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = a2[17];
  a2[17] = 0;
  v34 = *(WTF::StringImpl **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = a2[18];
  a2[18] = 0;
  v36 = *(WTF::StringImpl **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v35;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (unsigned int *)(a1 + 152);
  if (*(unsigned __int8 *)(a1 + 168) == *((unsigned __int8 *)a2 + 168))
  {
    if (*(_BYTE *)(a1 + 168))
      WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v37, (WTF::StringImpl *)(a2 + 19));
  }
  else if (*(_BYTE *)(a1 + 168))
  {
    WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v37, (WTF::StringImpl *)a2);
    *(_BYTE *)(a1 + 168) = 0;
  }
  else
  {
    *(_QWORD *)v37 = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v38 = a2[19];
    a2[19] = 0;
    *(_QWORD *)(a1 + 152) = v38;
    LODWORD(v38) = *((_DWORD *)a2 + 40);
    *((_DWORD *)a2 + 40) = 0;
    *(_DWORD *)(a1 + 160) = v38;
    LODWORD(v38) = *((_DWORD *)a2 + 41);
    *((_DWORD *)a2 + 41) = 0;
    *(_DWORD *)(a1 + 164) = v38;
    *(_BYTE *)(a1 + 168) = 1;
  }
  v39 = a2[22];
  a2[22] = 0;
  v40 = *(WTF::StringImpl **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v40 -= 2;
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v5 = 24 * v4;
    v6 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v6 - 2);
      *(v6 - 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v11;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E3396148;
  v3 = *(WTF **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3395880[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E3396148;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3395880[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

unint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  unint64_t result;

  v4 = *(_QWORD *)(a1 + 64);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = *WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector((WebCore::CryptoAlgorithmAesCbcCfbParams *)(a1 + 8));
    return WebCore::transformAESCFB(a2, 0, v5, *(void **)(v4 + 24), *(unsigned int *)(v4 + 36), a1 + 72);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E3396170;
  v3 = *(WTF **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3395880[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E3396170;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3395880[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

unint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  unint64_t result;

  v4 = *(_QWORD *)(a1 + 64);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = *WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector((WebCore::CryptoAlgorithmAesCbcCfbParams *)(a1 + 8));
    return WebCore::transformAESCFB(a2, 1u, v5, *(void **)(v4 + 24), *(unsigned int *)(v4 + 36), a1 + 72);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCFB::importKey(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&,WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(WebCore::CryptoKey &)> &&,WebCore::CryptoAlgorithmParameters const&<void ()(WebCore::ExceptionCode)> &&,WebCore::UseCryptoKit)::$_0,BOOL,unsigned long,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  switch(a2)
  {
    case 256:
      if (v3)
LABEL_11:
        JUMPOUT(0x19AEA53F4);
      return 1;
    case 192:
      if (v3)
        goto LABEL_11;
      return 1;
    case 128:
      if (v3)
        goto LABEL_11;
      return 1;
  }
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E33961C0;
  v3 = *(WTF **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3395880[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E33961C0;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3395880[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 72);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = WebCore::CryptoAlgorithmAesCtrParams::counterVector((WebCore::CryptoAlgorithmAesCtrParams *)(a1 + 8));
    return WebCore::transformAESCTR(0, (unint64_t **)v5, *(_QWORD *)(a1 + 48), v4 + 24, *(char **)(a1 + 80), *(unsigned int *)(a1 + 92), a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E33961E8;
  v3 = *(WTF **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3395880[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E33961E8;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3395880[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 72);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = WebCore::CryptoAlgorithmAesCtrParams::counterVector((WebCore::CryptoAlgorithmAesCtrParams *)(a1 + 8));
    return WebCore::transformAESCTR(1, (unint64_t **)v5, *(_QWORD *)(a1 + 48), v4 + 24, *(char **)(a1 + 80), *(unsigned int *)(a1 + 92), a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESCTR::importKey(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&,WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(WebCore::CryptoKey &)> &&,WebCore::CryptoAlgorithmParameters const&<void ()(WebCore::ExceptionCode)> &&,WebCore::UseCryptoKit)::$_0,BOOL,unsigned long,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  switch(a2)
  {
    case 256:
      if (v3)
LABEL_11:
        JUMPOUT(0x19AEA53F4);
      return 1;
    case 192:
      if (v3)
        goto LABEL_11;
      return 1;
    case 128:
      if (v3)
        goto LABEL_11;
      return 1;
  }
  return 0;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396238;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::identifier(WebCore::CryptoAlgorithmAESGCM *this)
{
  return 9;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::encrypt(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  int v15;
  BOOL v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  int v43;
  int v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56[8];
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 3)
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  WebCore::CryptoAlgorithmAesGcmParams::ivVector((WebCore::CryptoAlgorithmAesGcmParams *)a2);
  WebCore::CryptoAlgorithmAesGcmParams::additionalDataVector((WebCore::CryptoAlgorithmAesGcmParams *)a2);
  if (!*(_BYTE *)(a2 + 65))
  {
    *(_WORD *)(a2 + 64) = 384;
    goto LABEL_13;
  }
  if (*(unsigned __int16 *)(a2 + 64) <= 0xFFu)
LABEL_25:
    __break(1u);
  v15 = *(_WORD *)(a2 + 64);
  v16 = (v15 - 96) > 0x20 || ((1 << (v15 - 96)) & 0x101010101) == 0;
  if (v16 && v15 != 32 && v15 != 64)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
LABEL_13:
  v18 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440) >> 3) & 1;
  WebCore::CryptoAlgorithmAesGcmParams::isolatedCopy((WebCore::CryptoAlgorithmAesGcmParams *)&v40, a2);
  v19 = *a3;
  *a3 = 0;
  v20 = *a4;
  v51 = v19;
  v52 = v20;
  v21 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v53 = v21;
  v54 = v18;
  v22 = WTF::fastMalloc((WTF *)0x90);
  v23 = v22;
  *(_QWORD *)v22 = off_1E3396718;
  v24 = v41;
  if (v41)
    *v41 += 2;
  *(_BYTE *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 16) = v24;
  *(_BYTE *)(v22 + 24) = v42;
  *(_QWORD *)(v22 + 8) = off_1E3223408;
  *(_DWORD *)(v22 + 40) = -1;
  v25 = v43;
  if (v43 != -1)
  {
    ((void (*)(char *))off_1E3396698[v43])(v56);
    *(_DWORD *)(v23 + 40) = v25;
  }
  *(_BYTE *)(v23 + 48) = 0;
  *(_BYTE *)(v23 + 64) = 0;
  if (v45)
  {
    *(_DWORD *)(v23 + 56) = -1;
    v26 = v44;
    if (v44 != -1)
    {
      ((void (*)(char *))off_1E3396698[v44])(v56);
      *(_DWORD *)(v23 + 56) = v26;
    }
    *(_BYTE *)(v23 + 64) = 1;
  }
  *(_WORD *)(v23 + 72) = v46;
  v27 = v47;
  v47 = 0;
  *(_QWORD *)(v23 + 80) = v27;
  v28 = v48;
  v48 = 0;
  *(_QWORD *)(v23 + 88) = v28;
  v29 = v49;
  v49 = 0;
  *(_QWORD *)(v23 + 96) = v29;
  v30 = v50;
  v50 = 0;
  *(_QWORD *)(v23 + 104) = v30;
  *(_QWORD *)(v23 + 112) = v51;
  v31 = v52;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)(v23 + 120) = v31;
  v32 = v53;
  v53 = 0;
  *(_QWORD *)(v23 + 128) = v32;
  *(_BYTE *)(v23 + 136) = v54;
  v33 = *a5;
  *a5 = 0;
  v34 = *a6;
  *a6 = 0;
  v35 = a7[15];
  v57 = a7[14];
  v58 = v35;
  v36 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v36 = &off_1E3395AD0;
  *(_QWORD *)(v36 + 16) = v23;
  *(_QWORD *)(v36 + 24) = v33;
  *(_QWORD *)(v36 + 32) = v34;
  v37 = v58;
  *(_OWORD *)(v36 + 48) = v57;
  *(_OWORD *)(v36 + 64) = v37;
  v55 = v36;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v55);
  v39 = v55;
  v55 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  return WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)&v40, v38);
}

void **WebCore::CryptoAlgorithmAesGcmParams::ivVector(WebCore::CryptoAlgorithmAesGcmParams *this)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  char *v21;

  v1 = (void **)((char *)this + 72);
  if (!*((_DWORD *)this + 21))
  {
    v3 = *((unsigned int *)this + 8);
    if ((_DWORD)v3 == -1)
      goto LABEL_21;
    v21 = &v20;
    if (!((uint64_t (*)(char **, char *))off_1E3396668[v3])(&v21, (char *)this + 24))
      return v1;
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 == -1)
    {
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v21 = &v20;
    v5 = ((uint64_t (*)(char **, char *))off_1E3396678[v4])(&v21, (char *)this + 24);
    if (v6)
    {
      v7 = (const void *)v5;
      v8 = v6;
      v9 = *((unsigned int *)this + 20);
      v10 = *((unsigned int *)this + 21);
      v11 = v6 + v10;
      if (v6 + v10 > v9)
      {
        v14 = v9 + (v9 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v11)
          v16 = v6 + v10;
        else
          v16 = v15;
        if (HIDWORD(v16))
          goto LABEL_22;
        v17 = *v1;
        v18 = (void *)WTF::fastMalloc((WTF *)v16);
        *((_DWORD *)this + 20) = v16;
        *((_QWORD *)this + 9) = v18;
        memcpy(v18, v17, v10);
        if (v17)
        {
          if (*v1 == v17)
          {
            *((_QWORD *)this + 9) = 0;
            *((_DWORD *)this + 20) = 0;
          }
          WTF::fastFree((WTF *)v17, v19);
        }
      }
      v12 = *((unsigned int *)this + 21);
      if (v11 >= v12)
      {
        memcpy((void *)(*((_QWORD *)this + 9) + v12), v7, v8);
        *((_DWORD *)this + 21) = v11;
        return v1;
      }
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x19576646CLL);
    }
  }
  return v1;
}

void **WebCore::CryptoAlgorithmAesGcmParams::additionalDataVector(WebCore::CryptoAlgorithmAesGcmParams *this)
{
  void **v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20[8];
  unsigned int v21;
  char v22;
  char *v23;

  v1 = (void **)((char *)this + 88);
  if (*((_DWORD *)this + 25) || !*((_BYTE *)this + 56))
    return v1;
  v20[0] = 0;
  v21 = -1;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
  {
    *((_DWORD *)this + 12) = -1;
    *((_BYTE *)this + 56) = 0;
    goto LABEL_30;
  }
  ((void (*)(char **, char *, char *))off_1E3396698[v4])(&v23, v20, (char *)this + 40);
  v21 = v4;
  if (*((_BYTE *)this + 56))
  {
    v5 = *((unsigned int *)this + 12);
    if ((_DWORD)v5 == -1)
    {
      *((_DWORD *)this + 12) = -1;
      *((_BYTE *)this + 56) = 0;
    }
    else
    {
      ((void (*)(char **, char *))off_1E3396688[v5])(&v23, (char *)this + 40);
      v4 = v21;
      *((_DWORD *)this + 12) = -1;
      *((_BYTE *)this + 56) = 0;
      if ((_DWORD)v4 == -1)
        goto LABEL_30;
    }
  }
  v23 = &v22;
  if (!((uint64_t (*)(char **, char *))off_1E3396668[v4])(&v23, v20))
    goto LABEL_16;
  if (v21 == -1)
  {
LABEL_30:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_31;
  }
  v23 = &v22;
  v6 = ((uint64_t (*)(char **, char *))off_1E3396678[v21])(&v23, v20);
  if (!v7)
    goto LABEL_16;
  v8 = (const void *)v6;
  v9 = v7;
  v10 = *((unsigned int *)this + 24);
  v11 = *((unsigned int *)this + 25);
  v12 = v7 + v11;
  if (v7 + v11 > v10)
  {
    v14 = v10 + (v10 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v12)
      v16 = v7 + v11;
    else
      v16 = v15;
    if (HIDWORD(v16))
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x195766684);
    }
    v17 = *v1;
    v18 = (void *)WTF::fastMalloc((WTF *)v16);
    *((_DWORD *)this + 24) = v16;
    *((_QWORD *)this + 11) = v18;
    memcpy(v18, v17, v11);
    if (v17)
    {
      if (*v1 == v17)
      {
        *((_QWORD *)this + 11) = 0;
        *((_DWORD *)this + 24) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
  }
  v13 = *((unsigned int *)this + 25);
  if (v12 < v13)
    goto LABEL_31;
  memcpy((void *)(*((_QWORD *)this + 11) + v13), v8, v9);
  *((_DWORD *)this + 25) = v12;
LABEL_16:
  if (v21 != -1)
    ((void (*)(char **, char *))off_1E3396688[v21])(&v23, v20);
  return v1;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v14;
  char v15;

  v3 = *(WTF **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(WTF **)(a1 + 72);
  if (v9)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v9, a2);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v10 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t))off_1E3396688[v10])(&v14, a1 + 40);
    *(_DWORD *)(a1 + 48) = -1;
  }
  v11 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E3396688[v11])(&v15, a1 + 24);
  *(_DWORD *)(a1 + 32) = -1;
  v12 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)a1 = off_1E3226840;
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::decrypt(uint64_t a1, WebCore::CryptoAlgorithmAesGcmParams *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  char v39[8];
  _DWORD *v40;
  char v41;
  int v42;
  int v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[8];
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmAesGcmParams *))(*(_QWORD *)a2 + 16))(a2) != 3)
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  if (!*((_BYTE *)a2 + 65))
  {
    *((_WORD *)a2 + 32) = 384;
    v15 = 128;
    goto LABEL_13;
  }
  if (*((unsigned __int16 *)a2 + 32) <= 0xFFu)
LABEL_27:
    __break(1u);
  v15 = *((_WORD *)a2 + 32);
  v16 = v15 - 96 > 0x20 || ((1 << (v15 - 96)) & 0x101010101) == 0;
  if (v16 && v15 != 32 && v15 != 64)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
LABEL_13:
  if (*((_DWORD *)a4 + 3) < v15 >> 3)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  WebCore::CryptoAlgorithmAesGcmParams::ivVector(a2);
  WebCore::CryptoAlgorithmAesGcmParams::additionalDataVector(a2);
  WebCore::CryptoAlgorithmAesGcmParams::isolatedCopy((WebCore::CryptoAlgorithmAesGcmParams *)v39, (uint64_t)a2);
  v18 = *a3;
  *a3 = 0;
  v19 = *a4;
  v50 = v18;
  v51 = v19;
  v20 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v52 = v20;
  v21 = WTF::fastMalloc((WTF *)0x88);
  v22 = v21;
  *(_QWORD *)v21 = off_1E3396740;
  v23 = v40;
  if (v40)
    *v40 += 2;
  *(_BYTE *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = v23;
  *(_BYTE *)(v21 + 24) = v41;
  *(_QWORD *)(v21 + 8) = off_1E3223408;
  *(_DWORD *)(v21 + 40) = -1;
  v24 = v42;
  if (v42 != -1)
  {
    ((void (*)(char *))off_1E3396698[v42])(v54);
    *(_DWORD *)(v22 + 40) = v24;
  }
  *(_BYTE *)(v22 + 48) = 0;
  *(_BYTE *)(v22 + 64) = 0;
  if (v44)
  {
    *(_DWORD *)(v22 + 56) = -1;
    v25 = v43;
    if (v43 != -1)
    {
      ((void (*)(char *))off_1E3396698[v43])(v54);
      *(_DWORD *)(v22 + 56) = v25;
    }
    *(_BYTE *)(v22 + 64) = 1;
  }
  *(_WORD *)(v22 + 72) = v45;
  v26 = v46;
  v46 = 0;
  *(_QWORD *)(v22 + 80) = v26;
  v27 = v47;
  v47 = 0;
  *(_QWORD *)(v22 + 88) = v27;
  v28 = v48;
  v48 = 0;
  *(_QWORD *)(v22 + 96) = v28;
  v29 = v49;
  v49 = 0;
  *(_QWORD *)(v22 + 104) = v29;
  *(_QWORD *)(v22 + 112) = v50;
  v30 = v51;
  v50 = 0;
  v51 = 0;
  *(_QWORD *)(v22 + 120) = v30;
  v31 = v52;
  v52 = 0;
  *(_QWORD *)(v22 + 128) = v31;
  v32 = *a5;
  *a5 = 0;
  v33 = *a6;
  *a6 = 0;
  v34 = *(_OWORD *)(a7 + 240);
  v55 = *(_OWORD *)(a7 + 224);
  v56 = v34;
  v35 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v35 = &off_1E3395AD0;
  *(_QWORD *)(v35 + 16) = v22;
  *(_QWORD *)(v35 + 24) = v32;
  *(_QWORD *)(v35 + 32) = v33;
  v36 = v56;
  *(_OWORD *)(v35 + 48) = v55;
  *(_OWORD *)(v35 + 64) = v36;
  v53 = v35;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v53);
  v38 = v53;
  v53 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  return WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)v39, v37);
}

uint64_t WebCore::CryptoAlgorithmAESGCM::generateKey(uint64_t a1, unsigned __int16 *a2, char a3, int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  char v19;

  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2) != 4)
    goto LABEL_13;
  if ((a4 & 0x3C) != 0)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v13 = a2[9];
  if ((_DWORD)v13 != 128 && (_DWORD)v13 != 256 && (_DWORD)v13 != 192)
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v11();
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = (WTF *)(v13 >> 3);
  v16 = (void *)WTF::fastMalloc(v15);
  if (CCRandomGenerateBytes(v16, (size_t)v15))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x195766C70);
  }
  *(_DWORD *)(v14 + 8) = 1;
  *(_WORD *)(v14 + 12) = 521;
  *(_BYTE *)(v14 + 14) = a3;
  *(_DWORD *)(v14 + 16) = a4;
  *(_QWORD *)v14 = off_1E3397370;
  *(_QWORD *)(v14 + 24) = v16;
  *(_DWORD *)(v14 + 32) = (_DWORD)v15;
  *(_DWORD *)(v14 + 36) = (_DWORD)v15;
  v17[0] = v14;
  v18 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v17);
  if (v18 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E33966A8[v18])(&v19, v17);
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::importKey(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  if ((a6 & 0x3C) != 0)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)(a3 + 184) == 1)
    {
      v19 = *(_BYTE *)(a4 + 16);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3396768;
      v26 = v20;
      WebCore::CryptoKeyAES::importJwk(v19, a3, a5, a6, &v26, &v27);
      v21 = v26;
      v17 = v27;
      v26 = 0;
      v27 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      if (v17)
        goto LABEL_15;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    }
LABEL_22:
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CryptoAlgorithmAESGCM::exportKey(v25);
  }
  if (a2)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (*(_DWORD *)(a3 + 184))
    goto LABEL_22;
  v15 = 8 * *(unsigned int *)(a3 + 12);
  if (v15 != 128 && v15 != 256 && v15 != 192)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  v16 = *(_BYTE *)(a4 + 16);
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v17 + 8) = 1;
  *(_BYTE *)(v17 + 12) = v16;
  *(_BYTE *)(v17 + 13) = 2;
  *(_BYTE *)(v17 + 14) = a5;
  *(_DWORD *)(v17 + 16) = a6;
  *(_QWORD *)v17 = off_1E3397370;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v17 + 24) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v17 + 32) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(v17 + 36) = v18;
LABEL_15:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v17);
  v22 = (unsigned int *)(v17 + 8);
  do
  {
    v23 = __ldaxr(v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v22));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)(v17 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::exportKey(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  WTF::StringImpl *v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  WTF::StringImpl *v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD v54[2];

  v8 = *a3;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v9 = (WTF *)*(unsigned int *)(v8 + 36);
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v37 = 0uLL;
  v53 = 0;
  if ((_DWORD)a2 == 3)
  {
    v28 = 0;
    v29 = 0;
    v35 = 0;
    v23 = 0uLL;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    memset(v34, 0, 25);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::base64EncodeToString();
    v36 = v54[0];
    WebCore::CryptoKey::usages((char *)v8, (uint64_t)v54);
    v24 = v54[0];
    v25 = v54[1];
    v26 = 1;
    v29 = *(unsigned __int8 *)(v8 + 14) | 0x100;
    v12 = 8 * *(unsigned int *)(v8 + 36);
    if (v12 == 256 || v12 == 192 || v12 == 128)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WTF::StringImpl *)v54[0];
    }
    ((void (*)(_QWORD *, __int128 *))*(&off_1E33966B8 + v53))(v54, &v37);
    v14 = v23;
    v23 = 0uLL;
    v37 = v14;
    v38 = v24;
    *(_QWORD *)&v14 = v25;
    v24 = 0;
    v25 = 0;
    v39 = v14;
    v40 = 1;
    v41 = v27;
    v15 = v28;
    v28 = 0;
    v42 = v15;
    v43 = v29;
    v16 = v30;
    v17 = v31;
    v30 = 0u;
    v31 = 0u;
    v44 = v16;
    v45 = v17;
    v18 = v32;
    v19 = v33;
    v32 = 0u;
    v33 = 0u;
    v46 = v18;
    v47 = v19;
    v20 = v34[0];
    memset(v34, 0, 24);
    v48 = v20;
    v49 = *(_QWORD *)&v34[1];
    LOBYTE(v50) = 0;
    v51 = 0;
    v21 = v36;
    v36 = 0;
    v52 = v21;
    v53 = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v23, v22);
LABEL_14:
    result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, a2, &v37);
    v13 = v53;
    if (v53 == -1)
      return result;
    return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E33966B8 + v13))(&v23, &v37);
  }
  if (!(_DWORD)a2)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    memcpy(v10, *(const void **)(v8 + 24), *(unsigned int *)(v8 + 36));
    *(_QWORD *)&v37 = v10;
    DWORD2(v37) = (_DWORD)v9;
    HIDWORD(v37) = (_DWORD)v9;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
  v13 = 0;
  return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E33966B8 + v13))(&v23, &v37);
}

uint64_t WebCore::CryptoAlgorithmAESGCM::getKeyLength@<X0>(const WebCore::CryptoAlgorithmParameters *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 4)
  {
    v6 = *((unsigned __int16 *)a1 + 9);
    if ((_DWORD)v6 == 128 || (_DWORD)v6 == 192 || (_DWORD)v6 == 256)
    {
      v7 = 0;
      *(_QWORD *)a2 = v6;
    }
    else
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESKW::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33962C0;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESKW::identifier(WebCore::CryptoAlgorithmAESKW *this)
{
  return 11;
}

uint64_t WebCore::CryptoAlgorithmAESKW::generateKey(uint64_t a1, unsigned __int16 *a2, char a3, int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t (*v7)(void);
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  char v19;

  if ((a4 & 0x3F) != 0)
  {
    v7 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v7();
  }
  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2) != 4)
    goto LABEL_13;
  v13 = a2[9];
  if ((_DWORD)v13 != 128 && (_DWORD)v13 != 256 && (_DWORD)v13 != 192)
  {
    v7 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
    return v7();
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = (WTF *)(v13 >> 3);
  v16 = (void *)WTF::fastMalloc(v15);
  if (CCRandomGenerateBytes(v16, (size_t)v15))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19576740CLL);
  }
  *(_DWORD *)(v14 + 8) = 1;
  *(_WORD *)(v14 + 12) = 523;
  *(_BYTE *)(v14 + 14) = a3;
  *(_DWORD *)(v14 + 16) = a4;
  *(_QWORD *)v14 = off_1E3397370;
  *(_QWORD *)(v14 + 24) = v16;
  *(_DWORD *)(v14 + 32) = (_DWORD)v15;
  *(_DWORD *)(v14 + 36) = (_DWORD)v15;
  v17[0] = v14;
  v18 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v17);
  if (v18 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E33966A8[v18])(&v19, v17);
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESKW::importKey(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  if ((a6 & 0x3F) != 0)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)(a3 + 184) == 1)
    {
      v19 = *(_BYTE *)(a4 + 16);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3396790;
      v26 = v20;
      WebCore::CryptoKeyAES::importJwk(v19, a3, a5, a6, &v26, &v27);
      v21 = v26;
      v17 = v27;
      v26 = 0;
      v27 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      if (v17)
        goto LABEL_15;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    }
LABEL_22:
    v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CryptoAlgorithmAESKW::exportKey(v25);
  }
  if (a2)
  {
    v9 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v9();
  }
  if (*(_DWORD *)(a3 + 184))
    goto LABEL_22;
  v15 = 8 * *(unsigned int *)(a3 + 12);
  if (v15 != 128 && v15 != 256 && v15 != 192)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  v16 = *(_BYTE *)(a4 + 16);
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v17 + 8) = 1;
  *(_BYTE *)(v17 + 12) = v16;
  *(_BYTE *)(v17 + 13) = 2;
  *(_BYTE *)(v17 + 14) = a5;
  *(_DWORD *)(v17 + 16) = a6;
  *(_QWORD *)v17 = off_1E3397370;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v17 + 24) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v17 + 32) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(v17 + 36) = v18;
LABEL_15:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v17);
  v22 = (unsigned int *)(v17 + 8);
  do
  {
    v23 = __ldaxr(v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v22));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)(v17 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESKW::exportKey(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  WTF::StringImpl *v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  WTF::StringImpl *v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD v54[2];

  v8 = *a3;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v9 = (WTF *)*(unsigned int *)(v8 + 36);
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v37 = 0uLL;
  v53 = 0;
  if ((_DWORD)a2 == 3)
  {
    v28 = 0;
    v29 = 0;
    v35 = 0;
    v23 = 0uLL;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    memset(v34, 0, 25);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::base64EncodeToString();
    v36 = v54[0];
    WebCore::CryptoKey::usages((char *)v8, (uint64_t)v54);
    v24 = v54[0];
    v25 = v54[1];
    v26 = 1;
    v29 = *(unsigned __int8 *)(v8 + 14) | 0x100;
    v12 = 8 * *(unsigned int *)(v8 + 36);
    if (v12 == 256 || v12 == 192 || v12 == 128)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WTF::StringImpl *)v54[0];
    }
    ((void (*)(_QWORD *, __int128 *))*(&off_1E33966B8 + v53))(v54, &v37);
    v14 = v23;
    v23 = 0uLL;
    v37 = v14;
    v38 = v24;
    *(_QWORD *)&v14 = v25;
    v24 = 0;
    v25 = 0;
    v39 = v14;
    v40 = 1;
    v41 = v27;
    v15 = v28;
    v28 = 0;
    v42 = v15;
    v43 = v29;
    v16 = v30;
    v17 = v31;
    v30 = 0u;
    v31 = 0u;
    v44 = v16;
    v45 = v17;
    v18 = v32;
    v19 = v33;
    v32 = 0u;
    v33 = 0u;
    v46 = v18;
    v47 = v19;
    v20 = v34[0];
    memset(v34, 0, 24);
    v48 = v20;
    v49 = *(_QWORD *)&v34[1];
    LOBYTE(v50) = 0;
    v51 = 0;
    v21 = v36;
    v36 = 0;
    v52 = v21;
    v53 = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v23, v22);
LABEL_14:
    result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, a2, &v37);
    v13 = v53;
    if (v53 == -1)
      return result;
    return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E33966B8 + v13))(&v23, &v37);
  }
  if (!(_DWORD)a2)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    memcpy(v10, *(const void **)(v8 + 24), *(unsigned int *)(v8 + 36));
    *(_QWORD *)&v37 = v10;
    DWORD2(v37) = (_DWORD)v9;
    HIDWORD(v37) = (_DWORD)v9;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
  v13 = 0;
  return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E33966B8 + v13))(&v23, &v37);
}

uint64_t WebCore::CryptoAlgorithmAESKW::wrapKey(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  size_t v10;
  size_t v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  void *v18;
  WTF *v19;
  size_t wrappedKeyLen;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;

  if ((*(_BYTE *)(a3 + 12) & 7) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v9 = *a2;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
    goto LABEL_20;
  v10 = CCSymmetricWrappedSize(1u, *(unsigned int *)(a3 + 12));
  v11 = v10;
  if (!v10)
  {
    v12 = 0;
    goto LABEL_8;
  }
  if (HIDWORD(v10))
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x195767B3CLL);
  }
  v12 = (WTF *)WTF::fastMalloc((WTF *)v10);
LABEL_8:
  wrappedKeyLen = v11;
  if (CCSymmetricKeyWrap(1u, (const uint8_t *)*MEMORY[0x1E0C803C8], *MEMORY[0x1E0C803D0], *(const uint8_t **)(v9 + 24), *(unsigned int *)(v9 + 36), *(const uint8_t **)a3, *(unsigned int *)(a3 + 12), (uint8_t *)v12, &wrappedKeyLen))
  {
    LOBYTE(v23) = 30;
    v24 = 0;
    v25 = 1;
    if (v12)
      WTF::fastFree(v12, v13);
    v14 = v24;
    v24 = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = 1;
  }
  else
  {
    v17 = wrappedKeyLen;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    wrappedKeyLen = (size_t)v12;
    v21 = v11;
    v22 = v17;
    (*(void (**)(_QWORD, size_t *))(*(_QWORD *)*a4 + 16))(*a4, &wrappedKeyLen);
    v19 = (WTF *)wrappedKeyLen;
    if (wrappedKeyLen)
    {
      wrappedKeyLen = 0;
      v21 = 0;
      WTF::fastFree(v19, v18);
    }
    v16 = 0;
  }
  return ((uint64_t (*)(size_t *, uint64_t *))off_1E33966C8[v16])(&wrappedKeyLen, &v23);
}

uint64_t WebCore::CryptoAlgorithmAESKW::unwrapKey(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF *v14;
  const WebCore::CryptoAlgorithmParameters *v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  unsigned int v22;

  v8 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2))
  {
    __break(0xC471u);
    JUMPOUT(0x195767C74);
  }
  WebCore::CryptoAlgorithmAESKW::platformUnwrapKey(v8, a3, (uint64_t)&v20);
  v9 = v22;
  if (!v22)
  {
    v18 = v20;
    v12 = v21;
    v20 = 0;
    v21 = 0;
    v19 = v12;
    (*(void (**)(_QWORD, WTF **))(*(_QWORD *)*a4 + 16))(*a4, &v18);
    v14 = v18;
    if (v18)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree(v14, v13);
    }
    return ((uint64_t (*)(WTF **, WTF **))off_1E33966C8[v9])(&v18, &v20);
  }
  if (v22 == 1)
  {
    v10 = v21;
    v21 = 0;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, v20);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v11);
      else
        *(_DWORD *)v10 -= 2;
    }
    return ((uint64_t (*)(WTF **, WTF **))off_1E33966C8[v9])(&v18, &v20);
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CryptoAlgorithmAESKW::getKeyLength(v16, v17);
}

uint64_t WebCore::CryptoAlgorithmAESKW::getKeyLength@<X0>(const WebCore::CryptoAlgorithmParameters *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 4)
  {
    v6 = *((unsigned __int16 *)a1 + 9);
    if ((_DWORD)v6 == 128 || (_DWORD)v6 == 192 || (_DWORD)v6 == 256)
    {
      v7 = 0;
      *(_QWORD *)a2 = v6;
    }
    else
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v7 = 1;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmECDH::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396348;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmECDH::identifier(WebCore::CryptoAlgorithmECDH *this)
{
  return 6;
}

uint64_t WebCore::CryptoAlgorithmECDH::generateKey(uint64_t a1, _QWORD *a2, char a3, int a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2) != 5)
  {
    __break(0xC471u);
    JUMPOUT(0x195767EF8);
  }
  if ((a4 & 0xCF) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a7 + 136))(a7);
  WebCore::CryptoKeyEC::generatePair(6, a2 + 3, a3, a4, (uint64_t)&v22);
  v14 = v24;
  if (!v24)
  {
    v17 = v22;
    v18 = v23;
    v22 = 0;
    v23 = 0;
    *(_DWORD *)(v17 + 16) = 0;
    *((_DWORD *)v18 + 4) &= 0x30u;
    v20[0] = v17;
    v20[1] = v18;
    v21 = 1;
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v20);
    if (v21 != -1)
      ((void (*)(char *, _QWORD *))off_1E33966A8[v21])(&v25, v20);
    return ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33966D8[v14])(v20, &v22);
  }
  if (v24 == 1)
  {
    v15 = v23;
    v23 = 0;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a6 + 16))(*a6, v22);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    return ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33966D8[v14])(v20, &v22);
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CryptoAlgorithmECDH::deriveBits(v19);
}

uint64_t WebCore::CryptoAlgorithmECDH::deriveBits(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t result;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2) != 6)
  {
    __break(0xC471u);
    JUMPOUT(0x195768128);
  }
  v15 = *a3;
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v16 = a2[3];
  if (*(_BYTE *)(v16 + 13) || *(unsigned __int8 *)(v15 + 12) != *(unsigned __int8 *)(v16 + 12))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15 + 24))(*a3) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195768148);
  }
  v17 = (_DWORD *)a2[3];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 24))(v17) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195768168);
  }
  if (*(_DWORD *)(v15 + 32) != v17[8])
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v18 = *a5;
  *a5 = 0;
  v19 = *a6;
  *a6 = 0;
  v20 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440) >> 3) & 1;
  v21 = *a3;
  *a3 = 0;
  v22 = a2[3];
  if (v22)
  {
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v25 = a7[15];
  v30 = a7[14];
  v31 = v25;
  v26 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v26 = &off_1E33967B8;
  *(_QWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 24) = v22;
  *(_QWORD *)(v26 + 32) = a4;
  *(_QWORD *)(v26 + 40) = v18;
  *(_QWORD *)(v26 + 48) = v19;
  v27 = v31;
  *(_OWORD *)(v26 + 64) = v30;
  *(_OWORD *)(v26 + 80) = v27;
  *(_BYTE *)(v26 + 96) = v20;
  v29 = v26;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v29);
  result = v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::CryptoAlgorithmECDH::exportKey(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WTF *v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  WTF *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  int v72;
  uint64_t v73;
  __int16 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unsigned int v85;
  WTF *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unsigned int v104;
  char v105;

  v8 = *a3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195768AD4);
  }
  if (*(_DWORD *)(v8 + 32) >= 3u)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
    return;
  }
  v86 = 0;
  v87 = 0;
  v104 = 0;
  switch((int)a2)
  {
    case 0:
      if (*(_BYTE *)(v8 + 13))
        goto LABEL_23;
      v9 = *(int *)(v8 + 32);
      v10 = 0.0;
      if (v9 <= 2)
        v10 = dbl_1969ED1A0[v9];
      v11 = vcvtpd_u64_f64(v10);
      if ((v11 >> 31))
        goto LABEL_62;
      v12 = (WTF *)((2 * v11) | 1);
      v13 = (WTF *)WTF::fastMalloc(v12);
      v67 = v12;
      if (CCECCryptorExportKey())
        v15 = 0;
      else
        v15 = v67 == v12;
      if (!v15)
      {
        v48 = v13;
        goto LABEL_41;
      }
      v86 = v13;
      LODWORD(v87) = (_DWORD)v12;
      HIDWORD(v87) = (_DWORD)v12;
      goto LABEL_55;
    case 1:
      if (*(_BYTE *)(v8 + 13))
        goto LABEL_23;
      WebCore::CryptoKeyEC::platformExportSpki(v8, (uint64_t)&v67);
      goto LABEL_33;
    case 2:
      if (*(_BYTE *)(v8 + 13) != 1)
      {
LABEL_23:
        v20 = 12;
LABEL_24:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v20);
        goto LABEL_56;
      }
      WebCore::CryptoKeyEC::platformExportPkcs8(v8, (uint64_t)&v67);
LABEL_33:
      v34 = HIDWORD(v68);
      v35 = v67;
      if (!HIDWORD(v68))
      {
        if (v67)
        {
          v67 = 0;
          LODWORD(v68) = 0;
          v48 = v35;
LABEL_41:
          WTF::fastFree(v48, v14);
        }
        v20 = 30;
        goto LABEL_24;
      }
      v36 = v68;
      if (v104 != -1)
      {
        if (!v104)
        {
          v37 = v86;
          if (v86)
          {
            v86 = 0;
            LODWORD(v87) = 0;
            WTF::fastFree(v37, v14);
          }
          v86 = v35;
          v87 = __PAIR64__(v34, v36);
          goto LABEL_55;
        }
        ((void (*)(WTF **, WTF **))*(&off_1E33966B8 + v104))(&v67, &v86);
      }
      v86 = v35;
      v87 = __PAIR64__(v34, v36);
      v104 = 0;
LABEL_55:
      (*(void (**)(_QWORD, uint64_t, WTF **))(*(_QWORD *)*a4 + 16))(*a4, a2, &v86);
LABEL_56:
      if (v104 != -1)
        ((void (*)(WTF **, WTF **))*(&off_1E33966B8 + v104))(&v67, &v86);
      return;
    case 3:
      WebCore::CryptoKeyEC::exportJwk(v8, (uint64_t)&v67);
      v17 = v85;
      if (v85)
      {
        if (v85 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_62:
          __break(0xC471u);
          JUMPOUT(0x195768AE8);
        }
        v18 = v68;
        v68 = 0;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, v67);
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v19);
          else
            *(_DWORD *)v18 -= 2;
        }
LABEL_52:
        if (v85 != -1)
          (*(&off_1E33966E8 + v85))((int)&v49, (WebCore::JsonWebKey *)&v67);
        if (v17)
          goto LABEL_56;
        goto LABEL_55;
      }
      v21 = v67;
      v22 = (unint64_t)v68;
      v67 = 0;
      v68 = 0;
      v49 = v21;
      v50 = v22;
      LOBYTE(v51) = 0;
      v53 = 0;
      v23 = v71;
      if (v71)
      {
        v51 = v69;
        v24 = v70;
        v69 = 0;
        v70 = 0;
        v52 = v24;
        v23 = 1;
        v53 = 1;
      }
      v54 = v72;
      v25 = v73;
      v73 = 0;
      v55 = v25;
      v56 = v74;
      v26 = v75;
      v27 = v76;
      v75 = 0u;
      v76 = 0u;
      v57 = v26;
      v58 = v27;
      v28 = v77;
      v29 = v78;
      v77 = 0u;
      v78 = 0u;
      v59 = v28;
      v60 = v29;
      v30 = v79;
      v79 = 0u;
      v61 = v30;
      v31 = v80;
      v80 = 0;
      v62 = v31;
      LOBYTE(v63) = 0;
      v65 = 0;
      if (v83)
      {
        v63 = v81;
        v32 = v82;
        v81 = 0;
        v82 = 0;
        v64 = v32;
        v65 = 1;
      }
      v33 = v84;
      v84 = 0;
      v66 = v33;
      if (v104 == -1)
        goto LABEL_46;
      if (v104 == 1)
      {
        WebCore::JsonWebKey::operator=((uint64_t)&v86, (uint64_t *)&v49);
      }
      else
      {
        ((void (*)(char *, WTF **))*(&off_1E33966B8 + v104))(&v105, &v86);
        v21 = v49;
        v22 = v50;
        v23 = v53;
LABEL_46:
        v104 = -1;
        v49 = 0;
        v50 = 0;
        v86 = v21;
        v87 = v22;
        LOBYTE(v88) = 0;
        v90 = 0;
        if (v23)
        {
          v88 = v51;
          v38 = v52;
          v51 = 0;
          v52 = 0;
          v89 = v38;
          v90 = 1;
        }
        v91 = v54;
        v39 = v55;
        v55 = 0;
        v92 = v39;
        v93 = v56;
        v40 = v57;
        v41 = v58;
        v57 = 0u;
        v58 = 0u;
        v94 = v40;
        v95 = v41;
        v42 = v59;
        v43 = v60;
        v59 = 0u;
        v60 = 0u;
        v96 = v42;
        v97 = v43;
        v44 = v61;
        v61 = 0u;
        v98 = v44;
        v45 = v62;
        v62 = 0;
        v99 = v45;
        LOBYTE(v100) = 0;
        v102 = 0;
        if (v65)
        {
          v100 = v63;
          v46 = v64;
          v63 = 0;
          v64 = 0;
          v101 = v46;
          v102 = 1;
        }
        v47 = v66;
        v66 = 0;
        v103 = v47;
        v104 = 1;
      }
      WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v49, v16);
      goto LABEL_52;
    default:
      goto LABEL_55;
  }
}

uint64_t WebCore::CryptoAlgorithmECDSA::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33963D0;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmECDSA::identifier(WebCore::CryptoAlgorithmECDSA *this)
{
  return 5;
}

uint64_t WebCore::CryptoAlgorithmECDSA::sign(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t result;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v15 = *(_QWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2) != 7)
  {
    __break(0xC471u);
    JUMPOUT(0x195768D44);
  }
  v16 = a2[16];
  v17 = a2[40];
  v18 = *a3;
  *a3 = 0;
  v19 = *a4;
  v20 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v21 = WTF::fastMalloc((WTF *)0x58);
  *(_BYTE *)(v21 + 24) = v16;
  *(_QWORD *)(v21 + 8) = off_1E3272180;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)v21 = &off_1E3396808;
  *(_QWORD *)(v21 + 32) = 0;
  *(_DWORD *)(v21 + 40) = 0;
  *(_BYTE *)(v21 + 48) = v17;
  *(_QWORD *)(v21 + 56) = v18;
  *(_QWORD *)(v21 + 64) = v19;
  *(_QWORD *)(v21 + 72) = v20;
  *(_BYTE *)(v21 + 80) = (v15 & 8) != 0;
  v22 = *a5;
  *a5 = 0;
  v23 = *a6;
  *a6 = 0;
  v24 = a7[15];
  v29 = a7[14];
  v30 = v24;
  v25 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v25 = &off_1E3395AD0;
  *(_QWORD *)(v25 + 16) = v21;
  *(_QWORD *)(v25 + 24) = v22;
  *(_QWORD *)(v25 + 32) = v23;
  v26 = v30;
  *(_OWORD *)(v25 + 48) = v29;
  *(_OWORD *)(v25 + 64) = v26;
  v28 = v25;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v28);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmECDSA::verify(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a7 + 16))();
  v17 = *(_QWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a8 + 136))(a8) + 440);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2) != 7)
  {
    __break(0xC471u);
    JUMPOUT(0x195768F7CLL);
  }
  v18 = a2[16];
  v30 = a2[40];
  v31 = (v17 >> 3) & 1;
  v19 = *a3;
  *a3 = 0;
  v20 = *a4;
  *a4 = 0;
  v21 = *a5;
  *a5 = 0;
  v22 = a4[1];
  a4[1] = 0;
  v23 = a5[1];
  a5[1] = 0;
  v24 = WTF::fastMalloc((WTF *)0x68);
  *(_BYTE *)(v24 + 24) = v18;
  *(_QWORD *)v24 = &off_1E3396840;
  *(_QWORD *)(v24 + 8) = off_1E3272180;
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_DWORD *)(v24 + 40) = 0;
  *(_BYTE *)(v24 + 48) = v30;
  *(_QWORD *)(v24 + 56) = v19;
  *(_QWORD *)(v24 + 64) = v20;
  *(_QWORD *)(v24 + 72) = v22;
  *(_QWORD *)(v24 + 80) = v21;
  *(_QWORD *)(v24 + 88) = v23;
  *(_BYTE *)(v24 + 96) = v31;
  v25 = *a6;
  *a6 = 0;
  v26 = *a7;
  *a7 = 0;
  v27 = a8[15];
  v33 = a8[14];
  v34 = v27;
  v28 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v28 = &off_1E3395B40;
  *(_QWORD *)(v28 + 16) = v24;
  *(_QWORD *)(v28 + 24) = v25;
  *(_QWORD *)(v28 + 32) = v26;
  v29 = v34;
  *(_OWORD *)(v28 + 48) = v33;
  *(_OWORD *)(v28 + 64) = v29;
  v32 = v28;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a9 + 32))(a9, &v32);
  result = v32;
  v32 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmECDSA::generateKey(uint64_t a1, _QWORD *a2, char a3, int a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD v19[2];
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char v24;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2) != 5)
  {
    __break(0xC471u);
    JUMPOUT(0x195769130);
  }
  if ((a4 & 0xF3) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a7 + 136))(a7);
  WebCore::CryptoKeyEC::generatePair(5, a2 + 3, a3, a4, (uint64_t)&v21);
  v14 = v23;
  if (v23)
  {
    if (v23 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x195769138);
    }
    v15 = v22;
    v22 = 0;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a6 + 16))(*a6, v21);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    v17 = v21;
    v18 = v22;
    v21 = 0;
    v22 = 0;
    *(_DWORD *)(v17 + 16) &= 8u;
    *((_DWORD *)v18 + 4) &= 4u;
    v19[0] = v17;
    v19[1] = v18;
    v20 = 1;
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v19);
    if (v20 != -1)
      ((void (*)(char *, _QWORD *))off_1E33966A8[v20])(&v24, v19);
  }
  return ((uint64_t (*)(_QWORD *, uint64_t *))off_1E33966D8[v14])(v19, &v21);
}

void WebCore::CryptoAlgorithmECDSA::exportKey(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WTF *v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  WTF *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  int v72;
  uint64_t v73;
  __int16 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unsigned int v85;
  WTF *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unsigned int v104;
  char v105;

  v8 = *a3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195769B74);
  }
  if (*(_DWORD *)(v8 + 32) >= 3u)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
    return;
  }
  v86 = 0;
  v87 = 0;
  v104 = 0;
  switch((int)a2)
  {
    case 0:
      if (*(_BYTE *)(v8 + 13))
        goto LABEL_23;
      v9 = *(int *)(v8 + 32);
      v10 = 0.0;
      if (v9 <= 2)
        v10 = dbl_1969ED1A0[v9];
      v11 = vcvtpd_u64_f64(v10);
      if ((v11 >> 31))
        goto LABEL_62;
      v12 = (WTF *)((2 * v11) | 1);
      v13 = (WTF *)WTF::fastMalloc(v12);
      v67 = v12;
      if (CCECCryptorExportKey())
        v15 = 0;
      else
        v15 = v67 == v12;
      if (!v15)
      {
        v48 = v13;
        goto LABEL_41;
      }
      v86 = v13;
      LODWORD(v87) = (_DWORD)v12;
      HIDWORD(v87) = (_DWORD)v12;
      goto LABEL_55;
    case 1:
      if (*(_BYTE *)(v8 + 13))
        goto LABEL_23;
      WebCore::CryptoKeyEC::platformExportSpki(v8, (uint64_t)&v67);
      goto LABEL_33;
    case 2:
      if (*(_BYTE *)(v8 + 13) != 1)
      {
LABEL_23:
        v20 = 12;
LABEL_24:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v20);
        goto LABEL_56;
      }
      WebCore::CryptoKeyEC::platformExportPkcs8(v8, (uint64_t)&v67);
LABEL_33:
      v34 = HIDWORD(v68);
      v35 = v67;
      if (!HIDWORD(v68))
      {
        if (v67)
        {
          v67 = 0;
          LODWORD(v68) = 0;
          v48 = v35;
LABEL_41:
          WTF::fastFree(v48, v14);
        }
        v20 = 30;
        goto LABEL_24;
      }
      v36 = v68;
      if (v104 != -1)
      {
        if (!v104)
        {
          v37 = v86;
          if (v86)
          {
            v86 = 0;
            LODWORD(v87) = 0;
            WTF::fastFree(v37, v14);
          }
          v86 = v35;
          v87 = __PAIR64__(v34, v36);
          goto LABEL_55;
        }
        ((void (*)(WTF **, WTF **))*(&off_1E33966B8 + v104))(&v67, &v86);
      }
      v86 = v35;
      v87 = __PAIR64__(v34, v36);
      v104 = 0;
LABEL_55:
      (*(void (**)(_QWORD, uint64_t, WTF **))(*(_QWORD *)*a4 + 16))(*a4, a2, &v86);
LABEL_56:
      if (v104 != -1)
        ((void (*)(WTF **, WTF **))*(&off_1E33966B8 + v104))(&v67, &v86);
      return;
    case 3:
      WebCore::CryptoKeyEC::exportJwk(v8, (uint64_t)&v67);
      v17 = v85;
      if (v85)
      {
        if (v85 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_62:
          __break(0xC471u);
          JUMPOUT(0x195769B88);
        }
        v18 = v68;
        v68 = 0;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, v67);
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v19);
          else
            *(_DWORD *)v18 -= 2;
        }
LABEL_52:
        if (v85 != -1)
          (*(&off_1E33966E8 + v85))((int)&v49, (WebCore::JsonWebKey *)&v67);
        if (v17)
          goto LABEL_56;
        goto LABEL_55;
      }
      v21 = v67;
      v22 = (unint64_t)v68;
      v67 = 0;
      v68 = 0;
      v49 = v21;
      v50 = v22;
      LOBYTE(v51) = 0;
      v53 = 0;
      v23 = v71;
      if (v71)
      {
        v51 = v69;
        v24 = v70;
        v69 = 0;
        v70 = 0;
        v52 = v24;
        v23 = 1;
        v53 = 1;
      }
      v54 = v72;
      v25 = v73;
      v73 = 0;
      v55 = v25;
      v56 = v74;
      v26 = v75;
      v27 = v76;
      v75 = 0u;
      v76 = 0u;
      v57 = v26;
      v58 = v27;
      v28 = v77;
      v29 = v78;
      v77 = 0u;
      v78 = 0u;
      v59 = v28;
      v60 = v29;
      v30 = v79;
      v79 = 0u;
      v61 = v30;
      v31 = v80;
      v80 = 0;
      v62 = v31;
      LOBYTE(v63) = 0;
      v65 = 0;
      if (v83)
      {
        v63 = v81;
        v32 = v82;
        v81 = 0;
        v82 = 0;
        v64 = v32;
        v65 = 1;
      }
      v33 = v84;
      v84 = 0;
      v66 = v33;
      if (v104 == -1)
        goto LABEL_46;
      if (v104 == 1)
      {
        WebCore::JsonWebKey::operator=((uint64_t)&v86, (uint64_t *)&v49);
      }
      else
      {
        ((void (*)(char *, WTF **))*(&off_1E33966B8 + v104))(&v105, &v86);
        v21 = v49;
        v22 = v50;
        v23 = v53;
LABEL_46:
        v104 = -1;
        v49 = 0;
        v50 = 0;
        v86 = v21;
        v87 = v22;
        LOBYTE(v88) = 0;
        v90 = 0;
        if (v23)
        {
          v88 = v51;
          v38 = v52;
          v51 = 0;
          v52 = 0;
          v89 = v38;
          v90 = 1;
        }
        v91 = v54;
        v39 = v55;
        v55 = 0;
        v92 = v39;
        v93 = v56;
        v40 = v57;
        v41 = v58;
        v57 = 0u;
        v58 = 0u;
        v94 = v40;
        v95 = v41;
        v42 = v59;
        v43 = v60;
        v59 = 0u;
        v60 = 0u;
        v96 = v42;
        v97 = v43;
        v44 = v61;
        v61 = 0u;
        v98 = v44;
        v45 = v62;
        v62 = 0;
        v99 = v45;
        LOBYTE(v100) = 0;
        v102 = 0;
        if (v65)
        {
          v100 = v63;
          v46 = v64;
          v63 = 0;
          v64 = 0;
          v101 = v46;
          v102 = 1;
        }
        v47 = v66;
        v66 = 0;
        v103 = v47;
        v104 = 1;
      }
      WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v49, v16);
      goto LABEL_52;
    default:
      goto LABEL_55;
  }
}

uint64_t WebCore::CryptoAlgorithmEd25519::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396458;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmEd25519::generateKey(uint64_t a1, uint64_t a2, char a3, char a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((a4 & 0xF3) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
  v9 = 1;
  WebCore::CryptoKeyOKP::platformGeneratePair(20, 1u, a3, a4, (uint64_t)&v16);
  if ((_BYTE)v18)
  {
    v10 = v16;
    v11 = v17;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    *(_DWORD *)(v16 + 16) &= 8u;
    *(_DWORD *)(v11 + 16) &= 4u;
    v16 = v10;
    v17 = v11;
    v18 = 1;
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a5 + 16))(*a5, &v16);
    if (v18 != -1)
      ((void (*)(char *, uint64_t *))off_1E33966A8[v18])(&v15, &v16);
    v9 = 0;
  }
  else
  {
    LOBYTE(v12) = 30;
    v14 = 1;
    v13 = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 30);
  }
  return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33966D8[v9])(&v16, &v12);
}

uint64_t WebCore::CryptoAlgorithmEd25519::sign(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v14 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440) >> 3) & 1;
  v15 = *a3;
  *a3 = 0;
  v16 = *a4;
  v17 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v18 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v18 = &off_1E3396868;
  *(_QWORD *)(v18 + 8) = v15;
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  *(_BYTE *)(v18 + 32) = v14;
  v19 = *a5;
  *a5 = 0;
  v20 = *a6;
  *a6 = 0;
  v21 = a7[15];
  v26 = a7[14];
  v27 = v21;
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v22 = &off_1E3395AD0;
  *(_QWORD *)(v22 + 16) = v18;
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v20;
  v23 = v27;
  *(_OWORD *)(v22 + 48) = v26;
  *(_OWORD *)(v22 + 64) = v23;
  v25 = v22;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v25);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmEd25519::verify(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, uint64_t a9)
{
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a7 + 16))();
  v16 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a8 + 136))(a8) + 440) >> 3) & 1;
  v17 = *a3;
  *a3 = 0;
  v18 = *a4;
  *a4 = 0;
  v19 = *a5;
  *a5 = 0;
  v20 = a4[1];
  a4[1] = 0;
  v21 = a5[1];
  a5[1] = 0;
  v22 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v22 = &off_1E3396890;
  *(_QWORD *)(v22 + 8) = v17;
  *(_QWORD *)(v22 + 16) = v18;
  *(_QWORD *)(v22 + 24) = v20;
  *(_QWORD *)(v22 + 32) = v19;
  *(_QWORD *)(v22 + 40) = v21;
  *(_BYTE *)(v22 + 48) = v16;
  v23 = *a6;
  *a6 = 0;
  v24 = *a7;
  *a7 = 0;
  v25 = a8[15];
  v29 = a8[14];
  v30 = v25;
  v26 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v26 = &off_1E3395B40;
  *(_QWORD *)(v26 + 16) = v22;
  *(_QWORD *)(v26 + 24) = v23;
  *(_QWORD *)(v26 + 32) = v24;
  v27 = v30;
  *(_OWORD *)(v26 + 48) = v29;
  *(_OWORD *)(v26 + 64) = v27;
  v28 = v26;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a9 + 32))(a9, &v28);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::CryptoAlgorithmEd25519::importKey(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5, unsigned int a6, _QWORD *a7, _QWORD *a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  void (*v31)(void);
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  switch(a2)
  {
    case 0:
      if ((a6 | 8) != 8)
        goto LABEL_32;
      if (*((_DWORD *)a3 + 46))
        goto LABEL_36;
      if (*((_DWORD *)a3 + 3) != 32)
        goto LABEL_30;
      v13 = (a6 >> 2) & 1;
      v14 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v14 + 8) = 1;
      *(_BYTE *)(v14 + 12) = 20;
      *(_BYTE *)(v14 + 13) = v13;
      *(_BYTE *)(v14 + 14) = a5;
      *(_QWORD *)v14 = off_1E3397400;
      *(_DWORD *)(v14 + 16) = a6;
      *(_DWORD *)(v14 + 20) = 1;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      v15 = *a3;
      *a3 = 0;
      *(_QWORD *)(v14 + 24) = v15;
      LODWORD(v15) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = 0;
      *(_DWORD *)(v14 + 32) = v15;
      LODWORD(v15) = *((_DWORD *)a3 + 3);
      *((_DWORD *)a3 + 3) = 0;
      *(_DWORD *)(v14 + 36) = v15;
      goto LABEL_13;
    case 1:
      if ((a6 | 8) != 8)
        goto LABEL_32;
      if (*((_DWORD *)a3 + 46))
        goto LABEL_36;
      WebCore::CryptoKeyOKP::importSpki(20, 1u, (unsigned int *)a3, a5, a6, v34);
      goto LABEL_12;
    case 2:
      if ((a6 | 4) != 4)
      {
LABEL_32:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 9);
        return;
      }
      if (*((_DWORD *)a3 + 46))
      {
LABEL_36:
        std::__throw_bad_variant_access[abi:sn180100]();
        JUMPOUT(0x19576A3D0);
      }
      WebCore::CryptoKeyOKP::importPkcs8(20, 1u, (unsigned int *)a3, a5, a6, v34);
LABEL_12:
      v14 = v34[0];
      if (v34[0])
        goto LABEL_13;
      goto LABEL_30;
    case 3:
      if (*((_DWORD *)a3 + 46) != 1)
        goto LABEL_36;
      v20 = *a3;
      v19 = a3[1];
      *a3 = 0;
      a3[1] = 0;
      v34[0] = v20;
      v34[1] = v19;
      LOBYTE(v35) = 0;
      v37 = 0;
      if (*((_BYTE *)a3 + 32))
      {
        v35 = a3[2];
        v21 = a3[3];
        a3[2] = 0;
        a3[3] = 0;
        v36 = v21;
        v37 = 1;
      }
      v38 = *((_DWORD *)a3 + 10);
      v22 = a3[6];
      a3[6] = 0;
      v39 = v22;
      v40 = *((_WORD *)a3 + 28);
      v41 = *((_OWORD *)a3 + 4);
      v42 = a3[10];
      v23 = *(_OWORD *)(a3 + 11);
      *((_OWORD *)a3 + 4) = 0u;
      *((_OWORD *)a3 + 5) = 0u;
      v24 = *(_OWORD *)(a3 + 13);
      v43 = v23;
      v44 = v24;
      v25 = *(_OWORD *)(a3 + 15);
      *((_OWORD *)a3 + 6) = 0u;
      *((_OWORD *)a3 + 7) = 0u;
      v45 = v25;
      v26 = *(_OWORD *)(a3 + 17);
      *((_OWORD *)a3 + 8) = 0u;
      a3[18] = 0;
      v46 = v26;
      LOBYTE(v47) = 0;
      v49 = 0;
      if (*((_BYTE *)a3 + 168))
      {
        v47 = a3[19];
        v27 = a3[20];
        a3[19] = 0;
        a3[20] = 0;
        v48 = v27;
        v49 = 1;
      }
      v28 = a3[22];
      a3[22] = 0;
      v50 = v28;
      if (!a6)
        goto LABEL_29;
      if ((_QWORD)v23)
        v29 = 4;
      else
        v29 = 8;
      if (v29 != a6)
      {
        v31 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_35:
        v31();
        WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v34, v32);
        return;
      }
      if (v19 && (MEMORY[0x19AEA53F4](v19, "sig", 3) & 1) == 0)
      {
        v31 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
        goto LABEL_35;
      }
LABEL_29:
      WebCore::CryptoKeyOKP::importJwk(20, 1u, (uint64_t)v34, a5, a6, &v33);
      v14 = v33;
      WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v34, v30);
      if (v14)
      {
LABEL_13:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v14);
        v16 = (unsigned int *)(v14 + 8);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)(v14 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      else
      {
LABEL_30:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
      }
      return;
    default:
      goto LABEL_30;
  }
}

uint64_t WebCore::CryptoAlgorithmHKDF::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33964E0;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmHKDF::identifier(WebCore::CryptoAlgorithmHKDF *this)
{
  return 18;
}

uint64_t WebCore::CryptoAlgorithmHKDF::deriveBits(uint64_t a1, WebCore::CryptoAlgorithmHkdfParams *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  uint64_t v15;
  void **v16;
  void **v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  unsigned int v22;
  void **v23;
  void *v24;
  void **v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  char v33;
  void *v34;
  void *v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  WTF *v46;
  void (**v47)(WebCore::CryptoAlgorithmHkdfParams *__hidden);
  _DWORD *v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  void *__dst[2];
  WTF *v58[2];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63[8];
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a4 || (a4 & 7) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v15 = *(_QWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440);
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmHkdfParams *))(*(_QWORD *)a2 + 16))(a2) != 8)
  {
    __break(0xC471u);
    JUMPOUT(0x19576AD5CLL);
  }
  v47 = off_1E32A96B8;
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  *(_OWORD *)__dst = 0u;
  *(_OWORD *)v58 = 0u;
  v49 = *((_BYTE *)a2 + 16);
  v16 = WebCore::CryptoAlgorithmHkdfParams::saltVector(a2);
  if (v16 != __dst)
  {
    v17 = v16;
    v18 = (WTF *)*((unsigned int *)v16 + 3);
    if ((_DWORD)v18)
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)__dst, v18);
      v19 = (char *)__dst[0];
      if (HIDWORD(__dst[1]))
      {
        memmove(__dst[0], *v17, HIDWORD(__dst[1]));
        v20 = HIDWORD(__dst[1]);
        v19 = (char *)__dst[0];
LABEL_11:
        memcpy(&v19[v20], (char *)*v17 + v20, (_BYTE *)*v17 + *((unsigned int *)v17 + 3) - ((_BYTE *)*v17 + v20));
        HIDWORD(__dst[1]) = *((_DWORD *)v17 + 3);
        goto LABEL_12;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = 0;
    goto LABEL_11;
  }
LABEL_12:
  v22 = (v15 >> 3) & 1;
  v23 = WebCore::CryptoAlgorithmHkdfParams::infoVector(a2);
  if (v23 != (void **)v58)
  {
    v25 = v23;
    v26 = HIDWORD(v58[1]);
    v27 = *((_DWORD *)v23 + 3);
    if (HIDWORD(v58[1]) <= v27)
    {
      if (v27 > LODWORD(v58[1]))
      {
        if (LODWORD(v58[1]))
        {
          if (HIDWORD(v58[1]))
            HIDWORD(v58[1]) = 0;
          v46 = v58[0];
          if (v58[0])
          {
            v58[0] = 0;
            LODWORD(v58[1]) = 0;
            WTF::fastFree(v46, v24);
          }
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v58, (WTF *)*((unsigned int *)v25 + 3));
        v26 = HIDWORD(v58[1]);
      }
    }
    else
    {
      HIDWORD(v58[1]) = *((_DWORD *)v23 + 3);
      v26 = v27;
    }
    if (v26)
    {
      memmove(v58[0], *v25, v26);
      v28 = HIDWORD(v58[1]);
    }
    else
    {
      v28 = 0;
    }
    memcpy((char *)v58[0] + v28, (char *)*v25 + v28, (_BYTE *)*v25 + *((unsigned int *)v25 + 3) - ((_BYTE *)*v25 + v28));
    HIDWORD(v58[1]) = *((_DWORD *)v25 + 3);
  }
  v52 = *((_BYTE *)a2 + 40);
  v29 = *a3;
  *a3 = 0;
  v59 = v29;
  v60 = a4;
  v61 = v22;
  v30 = WTF::fastMalloc((WTF *)0x90);
  v31 = v30;
  *(_QWORD *)v30 = off_1E33968B8;
  v32 = v48;
  if (v48)
    *v48 += 2;
  *(_BYTE *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 16) = v32;
  *(_BYTE *)(v30 + 24) = v49;
  *(_QWORD *)(v30 + 8) = off_1E32A96B8;
  *(_DWORD *)(v30 + 40) = -1;
  if (v51 != -1)
  {
    ((void (*)(char *))off_1E3396820[v51])(v63);
    *(_DWORD *)(v31 + 40) = v51;
  }
  v33 = v52;
  *(_BYTE *)(v31 + 56) = 0;
  *(_BYTE *)(v31 + 48) = v33;
  *(_DWORD *)(v31 + 64) = -1;
  if (v54 != -1)
  {
    ((void (*)(char *))off_1E3396698[v54])(v63);
    *(_DWORD *)(v31 + 64) = v54;
  }
  *(_BYTE *)(v31 + 72) = 0;
  *(_DWORD *)(v31 + 80) = -1;
  if (v56 != -1)
  {
    ((void (*)(char *))off_1E3396698[v56])(v63);
    *(_DWORD *)(v31 + 80) = v56;
  }
  v34 = __dst[0];
  __dst[0] = 0;
  *(_QWORD *)(v31 + 88) = v34;
  v35 = __dst[1];
  __dst[1] = 0;
  *(_QWORD *)(v31 + 96) = v35;
  v36 = v58[0];
  v58[0] = 0;
  *(_QWORD *)(v31 + 104) = v36;
  v37 = v58[1];
  v58[1] = 0;
  *(_QWORD *)(v31 + 112) = v37;
  v38 = v59;
  v59 = 0;
  *(_QWORD *)(v31 + 120) = v38;
  LOBYTE(v38) = v61;
  *(_QWORD *)(v31 + 128) = v60;
  *(_BYTE *)(v31 + 136) = v38;
  v39 = *a5;
  *a5 = 0;
  v40 = *a6;
  *a6 = 0;
  v41 = a7[15];
  v64 = a7[14];
  v65 = v41;
  v42 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v42 = &off_1E3395AD0;
  *(_QWORD *)(v42 + 16) = v31;
  *(_QWORD *)(v42 + 24) = v39;
  *(_QWORD *)(v42 + 32) = v40;
  v43 = v65;
  *(_OWORD *)(v42 + 48) = v64;
  *(_OWORD *)(v42 + 64) = v43;
  v62 = v42;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v62);
  v45 = v62;
  v62 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  return WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)&v47, v44);
}

uint64_t WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v14;
  char v15;
  char v16;

  v3 = *(unsigned int **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *(WTF **)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF **)(a1 + 80);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3396688[v9])(&v14, a1 + 64);
  *(_DWORD *)(a1 + 72) = -1;
  v10 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E3396688[v10])(&v15, a1 + 48);
  *(_DWORD *)(a1 + 56) = -1;
  v11 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33966F8[v11])(&v16, a1 + 24);
  *(_DWORD *)(a1 + 32) = -1;
  v12 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)a1 = off_1E3226840;
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

void WebCore::CryptoAlgorithmHKDF::importKey(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5, int a6, _QWORD *a7, uint64_t a8)
{
  void (*v8)(void);
  char v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  if (a2)
  {
    v8 = *(void (**)(void))(**(_QWORD **)a8 + 16);
LABEL_6:
    v8();
    return;
  }
  if ((a6 & 0xCF) != 0 || a5)
  {
    v8 = *(void (**)(void))(**(_QWORD **)a8 + 16);
    goto LABEL_6;
  }
  if (*((_DWORD *)a3 + 46))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CryptoAlgorithmHKDF::getKeyLength(v18);
  }
  else
  {
    v12 = *(_BYTE *)(a4 + 16);
    v13 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v13 + 8) = 1;
    v14 = (unsigned int *)(v13 + 8);
    *(_BYTE *)(v13 + 12) = v12;
    *(_WORD *)(v13 + 13) = 2;
    *(_DWORD *)(v13 + 16) = a6;
    *(_QWORD *)v13 = off_1E3397450;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    v15 = *a3;
    *a3 = 0;
    *(_QWORD *)(v13 + 24) = v15;
    LODWORD(v15) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v13 + 32) = v15;
    LODWORD(v15) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v13 + 36) = v15;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v13);
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v14));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)(v13 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void WebCore::CryptoAlgorithmHKDF::getKeyLength(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t WebCore::CryptoAlgorithmHMAC::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396568;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmHMAC::identifier(WebCore::CryptoAlgorithmHMAC *this)
{
  return 12;
}

uint64_t WebCore::CryptoAlgorithmHMAC::sign(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v14 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440) >> 3) & 1;
  v15 = *a3;
  *a3 = 0;
  v16 = *a4;
  v17 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v18 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v18 = &off_1E33968E0;
  *(_QWORD *)(v18 + 8) = v15;
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  *(_BYTE *)(v18 + 32) = v14;
  v19 = *a5;
  *a5 = 0;
  v20 = *a6;
  *a6 = 0;
  v21 = a7[15];
  v26 = a7[14];
  v27 = v21;
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v22 = &off_1E3395AD0;
  *(_QWORD *)(v22 + 16) = v18;
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v20;
  v23 = v27;
  *(_OWORD *)(v22 + 48) = v26;
  *(_OWORD *)(v22 + 64) = v23;
  v25 = v22;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v25);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmHMAC::verify(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, uint64_t a9)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t result;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v15 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a8 + 136))(a8) + 440) >> 3) & 1;
  v16 = *a3;
  *a3 = 0;
  v17 = *a4;
  *a4 = 0;
  v18 = *a5;
  *a5 = 0;
  v19 = a4[1];
  a4[1] = 0;
  v20 = a5[1];
  a5[1] = 0;
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v21 = &off_1E3396908;
  *(_QWORD *)(v21 + 8) = v16;
  *(_QWORD *)(v21 + 16) = v17;
  *(_QWORD *)(v21 + 24) = v19;
  *(_QWORD *)(v21 + 32) = v18;
  *(_QWORD *)(v21 + 40) = v20;
  *(_BYTE *)(v21 + 48) = v15;
  v22 = *a6;
  *a6 = 0;
  v23 = *a7;
  *a7 = 0;
  v24 = a8[15];
  v29 = a8[14];
  v30 = v24;
  v25 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v25 = &off_1E3395B40;
  *(_QWORD *)(v25 + 16) = v21;
  *(_QWORD *)(v25 + 24) = v22;
  *(_QWORD *)(v25 + 32) = v23;
  v26 = v30;
  *(_OWORD *)(v25 + 48) = v29;
  *(_OWORD *)(v25 + 64) = v26;
  v28 = v25;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a9 + 32))(a9, &v28);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmHMAC::generateKey(uint64_t a1, uint64_t a2, char a3, int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  unint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  char v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 9)
  {
    if ((a4 & 0xF3) != 0)
    {
      v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
      return v11();
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v12 = *(_QWORD *)(a2 + 48);
      if (!v12)
        goto LABEL_12;
    }
    else
    {
      v12 = 0;
    }
    WebCore::CryptoKeyHMAC::generate(v12, *(unsigned __int8 *)(a2 + 40), a3, a4, &v16);
    if (!v16)
    {
LABEL_12:
      v11 = *(uint64_t (**)(void))(**(_QWORD **)a6 + 16);
      return v11();
    }
    v14[0] = v16;
    v15 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a5 + 16))(*a5, v14);
    if (v15 != -1)
      return ((uint64_t (*)(char *, _QWORD *))off_1E33966A8[v15])(&v17, v14);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmHMAC::importKey(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t (*v15)(void);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4) != 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19576B674);
  }
  if ((a6 & 0xF3) != 0)
  {
    v15 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v15();
  }
  if (a2 == 3)
  {
    if (*(_BYTE *)(a4 + 56))
      v18 = *(_QWORD *)(a4 + 48);
    else
      v18 = 0;
    if (*(_DWORD *)(a3 + 184) == 1)
    {
      v23 = *(unsigned __int8 *)(a4 + 40);
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E3396930;
      v30 = v24;
      WebCore::CryptoKeyHMAC::importJwk(v18, v23, a3, a5, a6, &v30, &v31);
      v25 = v30;
      v21 = v31;
      v30 = 0;
      v31 = 0;
      if (v25)
        (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      if (v21)
        goto LABEL_23;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    }
LABEL_30:
    v29 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CryptoAlgorithmHMAC::exportKey(v29);
  }
  if (a2)
  {
    v15 = *(uint64_t (**)(void))(*(_QWORD *)*a8 + 16);
    return v15();
  }
  if (*(_BYTE *)(a4 + 56))
    v17 = *(_QWORD *)(a4 + 48);
  else
    v17 = 0;
  if (*(_DWORD *)(a3 + 184))
    goto LABEL_30;
  v19 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v19)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  v20 = *(_BYTE *)(a4 + 40);
  if (v17)
  {
    if (8 * v19 != v17)
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
  }
  v21 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v21 + 8) = 1;
  *(_WORD *)(v21 + 12) = 524;
  *(_BYTE *)(v21 + 14) = a5;
  *(_DWORD *)(v21 + 16) = a6;
  *(_QWORD *)v21 = off_1E33973D0;
  *(_BYTE *)(v21 + 20) = v20;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  v22 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v21 + 24) = v22;
  LODWORD(v22) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v21 + 32) = v22;
  LODWORD(v22) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(v21 + 36) = v22;
LABEL_23:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v21);
  v26 = (unsigned int *)(v21 + 8);
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
  {
    atomic_store(1u, (unsigned int *)(v21 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmHMAC::exportKey(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  unsigned int v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  WTF::StringImpl *v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  char v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  WTF::StringImpl *v41;
  __int16 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD v53[2];

  v8 = *a3;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19576B9F0);
  }
  v9 = (WTF *)*(unsigned int *)(v8 + 36);
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  v36 = 0uLL;
  v52 = 0;
  if ((_DWORD)a2 == 3)
  {
    v27 = 0;
    v28 = 0;
    v34 = 0;
    v22 = 0uLL;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    memset(v33, 0, 25);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::base64EncodeToString();
    v35 = v53[0];
    WebCore::CryptoKey::usages((char *)v8, (uint64_t)v53);
    v23 = v53[0];
    v24 = v53[1];
    v25 = 1;
    v28 = *(unsigned __int8 *)(v8 + 14) | 0x100;
    switch(*(_BYTE *)(v8 + 20))
    {
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v27 = (WTF::StringImpl *)v53[0];
        break;
      default:
        break;
    }
    ((void (*)(_QWORD *, __int128 *))*(&off_1E33966B8 + v52))(v53, &v36);
    v13 = v22;
    v22 = 0uLL;
    v36 = v13;
    v37 = v23;
    *(_QWORD *)&v13 = v24;
    v23 = 0;
    v24 = 0;
    v38 = v13;
    v39 = 1;
    v40 = v26;
    v14 = v27;
    v27 = 0;
    v41 = v14;
    v42 = v28;
    v15 = v29;
    v16 = v30;
    v29 = 0u;
    v30 = 0u;
    v43 = v15;
    v44 = v16;
    v17 = v31;
    v18 = v32;
    v31 = 0u;
    v32 = 0u;
    v45 = v17;
    v46 = v18;
    v19 = v33[0];
    memset(v33, 0, 24);
    v47 = v19;
    v48 = *(_QWORD *)&v33[1];
    LOBYTE(v49) = 0;
    v50 = 0;
    v20 = v35;
    v35 = 0;
    v51 = v20;
    v52 = 1;
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)&v22, v21);
LABEL_11:
    result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, a2, &v36);
    v12 = v52;
    if (v52 == -1)
      return result;
    return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E33966B8 + v12))(&v22, &v36);
  }
  if (!(_DWORD)a2)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    memcpy(v10, *(const void **)(v8 + 24), *(unsigned int *)(v8 + 36));
    *(_QWORD *)&v36 = v10;
    DWORD2(v36) = (_DWORD)v9;
    HIDWORD(v36) = (_DWORD)v9;
    goto LABEL_11;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
  v12 = 0;
  return ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E33966B8 + v12))(&v22, &v36);
}

uint64_t WebCore::CryptoAlgorithmHMAC::getKeyLength@<X0>(const WebCore::CryptoAlgorithmParameters *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  int v8;

  result = (*(uint64_t (**)(const WebCore::CryptoAlgorithmParameters *))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 9)
  {
    if (*((_BYTE *)a1 + 56))
    {
      v6 = *((_QWORD *)a1 + 6);
      if (!v6)
        goto LABEL_8;
    }
    else
    {
      v7 = *((unsigned __int8 *)a1 + 40) - 13;
      if (v7 >= 5)
      {
LABEL_8:
        *(_BYTE *)a2 = 33;
        *(_QWORD *)(a2 + 8) = 0;
        v8 = 1;
        goto LABEL_9;
      }
      v6 = qword_1969ED178[(char)v7];
    }
    v8 = 0;
    *(_QWORD *)a2 = v6;
LABEL_9:
    *(_DWORD *)(a2 + 16) = v8;
    return result;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CryptoAlgorithmPBKDF2::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33965F0;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmPBKDF2::identifier(WebCore::CryptoAlgorithmPBKDF2 *this)
{
  return 19;
}

uint64_t WebCore::CryptoAlgorithmPBKDF2::deriveBits(uint64_t a1, WebCore::CryptoAlgorithmAesGcmParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  WTF *v17;
  char *v18;
  uint64_t v19;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  void *__dst;
  size_t __len;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a4 || (a4 & 7) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmAesGcmParams *))(*(_QWORD *)a2 + 16))(a2) != 10)
  {
    __break(0xC471u);
    JUMPOUT(0x19576BEE0);
  }
  v37 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  __dst = 0;
  __len = 0;
  v36 = *((_BYTE *)a2 + 16);
  v15 = WebCore::CryptoAlgorithmAesGcmParams::ivVector(a2);
  if (v15 != &__dst)
  {
    v16 = v15;
    v17 = (WTF *)*((unsigned int *)v15 + 3);
    if ((_DWORD)v17)
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, v17);
      v18 = (char *)__dst;
      if (HIDWORD(__len))
      {
        memmove(__dst, *v16, HIDWORD(__len));
        v19 = HIDWORD(__len);
        v18 = (char *)__dst;
LABEL_11:
        memcpy(&v18[v19], (char *)*v16 + v19, (_BYTE *)*v16 + *((unsigned int *)v16 + 3) - ((_BYTE *)*v16 + v19));
        HIDWORD(__len) = *((_DWORD *)v16 + 3);
        goto LABEL_12;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    goto LABEL_11;
  }
LABEL_12:
  v39 = *((_QWORD *)a2 + 5);
  v42 = *((_BYTE *)a2 + 64);
  v21 = *a3;
  *a3 = 0;
  v45 = v21;
  v46 = a4;
  v22 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v22 = &off_1E3396958;
  *(_BYTE *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_BYTE *)(v22 + 24) = v36;
  *(_QWORD *)(v22 + 8) = off_1E32CB620;
  *(_DWORD *)(v22 + 40) = -1;
  if (v38 != -1)
  {
    ((void (*)(char *))off_1E3396698[v38])(v48);
    *(_DWORD *)(v22 + 40) = v38;
  }
  v23 = v39;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 48) = v23;
  *(_DWORD *)(v22 + 64) = -1;
  if (v41 != -1)
  {
    ((void (*)(char *))off_1E3396820[v41])(v48);
    *(_DWORD *)(v22 + 64) = v41;
  }
  *(_BYTE *)(v22 + 72) = v42;
  *(_QWORD *)(v22 + 80) = __dst;
  *(_QWORD *)(v22 + 88) = __len;
  *(_QWORD *)(v22 + 96) = v45;
  *(_QWORD *)(v22 + 104) = v46;
  v24 = *a5;
  *a5 = 0;
  v25 = *a6;
  *a6 = 0;
  v26 = *(_OWORD *)(a7 + 240);
  v49 = *(_OWORD *)(a7 + 224);
  __dst = 0;
  __len = 0;
  v45 = 0;
  v50 = v26;
  v27 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v27 = &off_1E3395AD0;
  *(_QWORD *)(v27 + 16) = v22;
  *(_QWORD *)(v27 + 24) = v24;
  *(_QWORD *)(v27 + 32) = v25;
  v28 = v50;
  *(_OWORD *)(v27 + 48) = v49;
  *(_OWORD *)(v27 + 64) = v28;
  v47 = v27;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v47);
  v30 = v47;
  v47 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v45;
  v45 = 0;
  if (v31)
  {
    v32 = v31 + 2;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
  }
  v35 = (WTF *)__dst;
  if (__dst)
  {
    __dst = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v35, v29);
  }
  if (v41 != -1)
    ((void (*)(char *, uint64_t *))off_1E33966F8[v41])(v48, &v40);
  v41 = -1;
  if (v38 != -1)
    ((void (*)(char *, uint64_t *))off_1E3396688[v38])(v48, &v37);
  v38 = -1;
  return 0;
}

void WebCore::CryptoAlgorithmPBKDF2::importKey(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5, int a6, _QWORD *a7, uint64_t a8)
{
  void (*v8)(void);
  char v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  if (a2)
  {
    v8 = *(void (**)(void))(**(_QWORD **)a8 + 16);
LABEL_6:
    v8();
    return;
  }
  if ((a6 & 0xCF) != 0 || a5)
  {
    v8 = *(void (**)(void))(**(_QWORD **)a8 + 16);
    goto LABEL_6;
  }
  if (*((_DWORD *)a3 + 46))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CryptoAlgorithmPBKDF2::getKeyLength(v18);
  }
  else
  {
    v12 = *(_BYTE *)(a4 + 16);
    v13 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v13 + 8) = 1;
    v14 = (unsigned int *)(v13 + 8);
    *(_BYTE *)(v13 + 12) = v12;
    *(_WORD *)(v13 + 13) = 2;
    *(_DWORD *)(v13 + 16) = a6;
    *(_QWORD *)v13 = off_1E3397450;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    v15 = *a3;
    *a3 = 0;
    *(_QWORD *)(v13 + 24) = v15;
    LODWORD(v15) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v13 + 32) = v15;
    LODWORD(v15) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v13 + 36) = v15;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v13);
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v14));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)(v13 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void WebCore::CryptoAlgorithmPBKDF2::getKeyLength(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t WebCore::CryptoAlgorithmEd25519::identifier(WebCore::CryptoAlgorithmEd25519 *this)
{
  return 20;
}

_DWORD *WebCore::CryptoAlgorithmAesGcmParams::isolatedCopy(WebCore::CryptoAlgorithmAesGcmParams *this, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  WTF *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *result;
  void *v12;
  WTF **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;

  *(_QWORD *)this = off_1E3223408;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_WORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  v4 = (void **)((char *)this + 72);
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 16) = *(_BYTE *)(a2 + 16);
  v5 = WebCore::CryptoAlgorithmAesGcmParams::ivVector((WebCore::CryptoAlgorithmAesGcmParams *)a2);
  if (v5 != v4)
  {
    v6 = v5;
    v7 = (WTF *)*((unsigned int *)v5 + 3);
    if ((_DWORD)v7)
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v7);
      v8 = *((unsigned int *)this + 21);
      v9 = (char *)*((_QWORD *)this + 9);
      if ((_DWORD)v8)
      {
        memmove(v9, *v6, v8);
        v10 = *((unsigned int *)this + 21);
        v9 = (char *)*((_QWORD *)this + 9);
LABEL_7:
        memcpy(&v9[v10], (char *)*v6 + v10, (_BYTE *)*v6 + *((unsigned int *)v6 + 3) - ((_BYTE *)*v6 + v10));
        *((_DWORD *)this + 21) = *((_DWORD *)v6 + 3);
        goto LABEL_8;
      }
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    goto LABEL_7;
  }
LABEL_8:
  result = WebCore::CryptoAlgorithmAesGcmParams::additionalDataVector((WebCore::CryptoAlgorithmAesGcmParams *)a2);
  v13 = (WTF **)((char *)this + 88);
  if (result != (_DWORD *)((char *)this + 88))
  {
    v14 = (uint64_t)result;
    v15 = *((_DWORD *)this + 25);
    v16 = result[3];
    if (v15 <= v16)
    {
      v17 = *((_DWORD *)this + 24);
      if (v16 > v17)
      {
        if (v17)
        {
          if (v15)
            *((_DWORD *)this + 25) = 0;
          v19 = *v13;
          if (*v13)
          {
            *((_QWORD *)this + 11) = 0;
            *((_DWORD *)this + 24) = 0;
            WTF::fastFree(v19, v12);
          }
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 88, (WTF *)*(unsigned int *)(v14 + 12));
        v15 = *((_DWORD *)this + 25);
      }
    }
    else
    {
      *((_DWORD *)this + 25) = v16;
      v15 = v16;
    }
    if (v15)
    {
      memmove(*((void **)this + 11), *(const void **)v14, v15);
      v18 = *((unsigned int *)this + 25);
    }
    else
    {
      v18 = 0;
    }
    result = memcpy((void *)(*((_QWORD *)this + 11) + v18), (const void *)(*(_QWORD *)v14 + v18), *(_QWORD *)v14 + *(unsigned int *)(v14 + 12) - (*(_QWORD *)v14 + v18));
    *((_DWORD *)this + 25) = *(_DWORD *)(v14 + 12);
  }
  *((_WORD *)this + 32) = *(_WORD *)(a2 + 64);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10JsonWebKeyENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::JsonWebKey *this)
{
  WebCore::JsonWebKey::~JsonWebKey(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10JsonWebKeyENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void **WebCore::CryptoAlgorithmHkdfParams::saltVector(WebCore::CryptoAlgorithmHkdfParams *this)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  char *v21;

  v1 = (void **)((char *)this + 80);
  if (!*((_DWORD *)this + 23))
  {
    v3 = *((unsigned int *)this + 14);
    if ((_DWORD)v3 == -1)
      goto LABEL_21;
    v21 = &v20;
    if (!((uint64_t (*)(char **, char *))off_1E3396668[v3])(&v21, (char *)this + 48))
      return v1;
    v4 = *((unsigned int *)this + 14);
    if ((_DWORD)v4 == -1)
    {
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v21 = &v20;
    v5 = ((uint64_t (*)(char **, char *))off_1E3396678[v4])(&v21, (char *)this + 48);
    if (v6)
    {
      v7 = (const void *)v5;
      v8 = v6;
      v9 = *((unsigned int *)this + 22);
      v10 = *((unsigned int *)this + 23);
      v11 = v6 + v10;
      if (v6 + v10 > v9)
      {
        v14 = v9 + (v9 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v11)
          v16 = v6 + v10;
        else
          v16 = v15;
        if (HIDWORD(v16))
          goto LABEL_22;
        v17 = *v1;
        v18 = (void *)WTF::fastMalloc((WTF *)v16);
        *((_DWORD *)this + 22) = v16;
        *((_QWORD *)this + 10) = v18;
        memcpy(v18, v17, v10);
        if (v17)
        {
          if (*v1 == v17)
          {
            *((_QWORD *)this + 10) = 0;
            *((_DWORD *)this + 22) = 0;
          }
          WTF::fastFree((WTF *)v17, v19);
        }
      }
      v12 = *((unsigned int *)this + 23);
      if (v11 >= v12)
      {
        memcpy((void *)(*((_QWORD *)this + 10) + v12), v7, v8);
        *((_DWORD *)this + 23) = v11;
        return v1;
      }
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x19576C3B0);
    }
  }
  return v1;
}

void **WebCore::CryptoAlgorithmHkdfParams::infoVector(WebCore::CryptoAlgorithmHkdfParams *this)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  char *v21;

  v1 = (void **)((char *)this + 96);
  if (!*((_DWORD *)this + 27))
  {
    v3 = *((unsigned int *)this + 18);
    if ((_DWORD)v3 == -1)
      goto LABEL_21;
    v21 = &v20;
    if (!((uint64_t (*)(char **, char *))off_1E3396668[v3])(&v21, (char *)this + 64))
      return v1;
    v4 = *((unsigned int *)this + 18);
    if ((_DWORD)v4 == -1)
    {
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v21 = &v20;
    v5 = ((uint64_t (*)(char **, char *))off_1E3396678[v4])(&v21, (char *)this + 64);
    if (v6)
    {
      v7 = (const void *)v5;
      v8 = v6;
      v9 = *((unsigned int *)this + 26);
      v10 = *((unsigned int *)this + 27);
      v11 = v6 + v10;
      if (v6 + v10 > v9)
      {
        v14 = v9 + (v9 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v11)
          v16 = v6 + v10;
        else
          v16 = v15;
        if (HIDWORD(v16))
          goto LABEL_22;
        v17 = *v1;
        v18 = (void *)WTF::fastMalloc((WTF *)v16);
        *((_DWORD *)this + 26) = v16;
        *((_QWORD *)this + 12) = v18;
        memcpy(v18, v17, v10);
        if (v17)
        {
          if (*v1 == v17)
          {
            *((_QWORD *)this + 12) = 0;
            *((_DWORD *)this + 26) = 0;
          }
          WTF::fastFree((WTF *)v17, v19);
        }
      }
      v12 = *((unsigned int *)this + 27);
      if (v11 >= v12)
      {
        memcpy((void *)(*((_QWORD *)this + 12) + v12), v7, v8);
        *((_DWORD *)this + 27) = v11;
        return v1;
      }
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x19576C514);
    }
  }
  return v1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3396718;
  WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3396718;
  WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 24))(*(_QWORD *)(a1 + 112)))
    return WebCore::CryptoAlgorithmAESGCM::platformEncrypt((unsigned __int8 *)(a1 + 8), a1 + 120, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3396740;
  WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3396740;
  WebCore::CryptoAlgorithmAESGCM::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 24))(*(_QWORD *)(a1 + 112)))
    return WebCore::CryptoAlgorithmAESGCM::platformDecrypt((unsigned __int8 *)(a1 + 8), a1 + 120, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESGCM::importKey(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&,WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(WebCore::CryptoKey &)> &&,WebCore::CryptoAlgorithmParameters const&<void ()(WebCore::ExceptionCode)> &&,WebCore::UseCryptoKit)::$_0,BOOL,unsigned long,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  switch(a2)
  {
    case 256:
      if (v3)
LABEL_11:
        JUMPOUT(0x19AEA53F4);
      return 1;
    case 192:
      if (v3)
        goto LABEL_11;
      return 1;
    case 128:
      if (v3)
        goto LABEL_11;
      return 1;
  }
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmAESKW::importKey(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&,WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(WebCore::CryptoKey &)> &&,WebCore::CryptoAlgorithmParameters const&<void ()(WebCore::ExceptionCode)> &&,WebCore::UseCryptoKit)::$_0,BOOL,unsigned long,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  switch(a2)
  {
    case 256:
      if (v3)
LABEL_11:
        JUMPOUT(0x19AEA53F4);
      return 1;
    case 192:
      if (v3)
        goto LABEL_11;
      return 1;
    case 128:
      if (v3)
        goto LABEL_11;
      return 1;
  }
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDH::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = &off_1E33967B8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDH::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E33967B8;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDH::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_1,void>::call(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  double v4;
  unint64_t v5;
  WTF *v6;
  void *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(int **)(a1 + 16);
  if ((*(unsigned int (**)(int *))(*(_QWORD *)v2 + 24))(v2) != 1)
    goto LABEL_37;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19576CBA4);
  }
  v3 = v2[8];
  v4 = 0.0;
  if (v3 <= 2)
    v4 = dbl_1969ED1A0[v3];
  v5 = vcvtpd_u64_f64(v4);
  if (v5)
  {
    if (!HIDWORD(v5))
    {
      v6 = (WTF *)WTF::fastMalloc((WTF *)v5);
      goto LABEL_9;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x19576CB84);
  }
  v6 = 0;
LABEL_9:
  *(_QWORD *)&v21[0] = v5;
  v8 = CCECCryptorComputeSharedSecret();
  if (v8)
  {
    if (v6)
      WTF::fastFree(v6, v7);
    v6 = 0;
  }
  v9 = *(_OWORD *)(a1 + 80);
  v21[0] = *(_OWORD *)(a1 + 64);
  v21[1] = v9;
  v10 = *(_QWORD *)(a1 + 32);
  v18 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v11 = &off_1E33967E0;
  *(_BYTE *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 24) = 0;
  if (!v8)
  {
    *(_QWORD *)(v11 + 8) = v6;
    *(_DWORD *)(v11 + 16) = v5;
    *(_DWORD *)(v11 + 20) = v5;
    *(_BYTE *)(v11 + 24) = 1;
    v6 = 0;
  }
  *(_QWORD *)(v11 + 32) = v10;
  *(_OWORD *)(v11 + 40) = v18;
  v19 = v11;
  v20 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_19:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v21);
  if (v13)
  {
    v15 = v13[4];
    if (v15)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 336))(v15, &v19);
  }
  v16 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v19;
  v19 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (!v8)
  {
    if (v6)
      return WTF::fastFree(v6, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19CryptoAlgorithmECDH10deriveBitsERKNS2_25CryptoAlgorithmParametersEONS_3RefINS2_9CryptoKeyENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEEmONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONSF_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__1clEvEUlRT_E_vJSU_EED1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)a1 = &off_1E33967E0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(WTF **)(a1 + 8);
    if (v5)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19CryptoAlgorithmECDH10deriveBitsERKNS2_25CryptoAlgorithmParametersEONS_3RefINS2_9CryptoKeyENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEEmONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONSF_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__1clEvEUlRT_E_vJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E33967E0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((_BYTE *)this + 24))
  {
    v5 = (WTF *)*((_QWORD *)this + 1);
    if (v5)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19CryptoAlgorithmECDH10deriveBitsERKNS2_25CryptoAlgorithmParametersEONS_3RefINS2_9CryptoKeyENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEEmONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONSF_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__1clEvEUlRT_E_vJSU_EE4callESU_(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  double v3;

  if (!*(_BYTE *)(a1 + 24))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 30);
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = 0.125;
    v3 = ceil((double)v1 * 0.125);
    LODWORD(v2) = *(_DWORD *)(a1 + 20);
    if (v3 > (double)v2)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 30);
    *(_DWORD *)(a1 + 20) = (unint64_t)v3;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDSA::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v11;

  *(_QWORD *)a1 = &off_1E3396808;
  v3 = *(WTF **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E33966F8[v8])(&v11, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v9 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDSA::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v11;

  *(_QWORD *)this = &off_1E3396808;
  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((unsigned int *)this + 10);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E33966F8[v8])(&v11, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDSA::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 56);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 1)
    WebCore::CryptoAlgorithmECDSA::platformSign(a1 + 8, v4, a1 + 64, a2);
  else
    __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDSA::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E3396840;
  v3 = *(WTF **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E33966F8[v9])(&v12, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDSA::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E3396840;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E33966F8[v9])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmECDSA::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;

  v4 = *(int **)(a1 + 56);
  if ((*(unsigned int (**)(int *))(*(_QWORD *)v4 + 24))(v4) == 1)
    WebCore::CryptoAlgorithmECDSA::platformVerify(a1 + 8, v4, (uint64_t *)(a1 + 64), a1 + 80, a2);
  else
    __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmEd25519::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E3396868;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmEd25519::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3396868;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

_OWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmEd25519::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _OWORD *result;
  int v5;

  v3 = *(_DWORD **)(a1 + 8);
  result = (_OWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  if ((_DWORD)result != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19576D3E0);
  }
  if (v3[9] == 32 && (ccsha512_di(), cced25519_make_pub(), result = (_OWORD *)cced25519_sign(), !(_DWORD)result))
  {
    result = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
    v5 = 0;
    result[2] = 0u;
    result[3] = 0u;
    *result = 0u;
    result[1] = 0u;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = 0x4000000040;
  }
  else
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmEd25519::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a1 = &off_1E3396890;
  v3 = *(WTF **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmEd25519::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E3396890;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmEd25519::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t result;
  void *v6;
  void *v7;
  BOOL v8;

  v4 = *(_DWORD **)(a1 + 8);
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
  if ((_DWORD)result == 3)
  {
    if (*(_DWORD *)(a1 + 44))
    {
      v7 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 44));
      result = (uint64_t)memcpy(v7, *(const void **)(a1 + 32), *(unsigned int *)(a1 + 44));
    }
    else
    {
      v7 = 0;
    }
    v8 = 0;
    if (v4[9] == 32 && *(_DWORD *)(a1 + 28) == 64)
    {
      ccsha512_di();
      result = cced25519_verify();
      v8 = (_DWORD)result == 0;
    }
    *(_BYTE *)a2 = v8;
    *(_DWORD *)(a2 + 16) = 0;
    if (v7)
      return WTF::fastFree((WTF *)v7, v6);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33968B8;
  WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33968B8;
  WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHKDF::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120)) == 5)
  {
    v4 = *(_QWORD *)(a1 + 128);
    WebCore::CryptoAlgorithmHkdfParams::saltVector((WebCore::CryptoAlgorithmHkdfParams *)(a1 + 8));
    WebCore::CryptoAlgorithmHkdfParams::infoVector((WebCore::CryptoAlgorithmHkdfParams *)(a1 + 8));
    WebCore::deriveHDKFBits(v4, a2);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E33968E0;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E33968E0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  const void *v6;
  size_t v7;
  CCHmacAlgorithm v8;
  WTF *v9;
  void *v10;
  int v11;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 2)
  {
    v5 = *(unsigned __int8 *)(v4 + 20) - 13;
    if (v5 >= 5)
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v11 = 1;
    }
    else
    {
      v6 = *(const void **)(a1 + 16);
      v7 = *(unsigned int *)(a1 + 28);
      v8 = dword_1969ED1B8[(char)v5];
      v9 = (WTF *)qword_1969ED1D0[(char)v5];
      v10 = (void *)WTF::fastMalloc(v9);
      CCHmac(v8, *(const void **)(v4 + 24), *(unsigned int *)(v4 + 36), v6, v7, v10);
      v11 = 0;
      *(_QWORD *)a2 = v10;
      *(_DWORD *)(a2 + 8) = (_DWORD)v9;
      *(_DWORD *)(a2 + 12) = (_DWORD)v9;
    }
    *(_DWORD *)(a2 + 16) = v11;
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a1 = &off_1E3396908;
  v3 = *(WTF **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E3396908;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 2)
    return WebCore::CryptoAlgorithmHMAC::platformVerify(v4, a1 + 16, a1 + 32, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmHMAC::importKey(WebCore::CryptoKeyFormat,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::JsonWebKey> &&,WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(WebCore::CryptoKey &)> &&,WebCore::CryptoAlgorithmParameters const&<void ()(WebCore::ExceptionCode)> &&,WebCore::UseCryptoKit)::$_0,BOOL,WebCore::CryptoAlgorithmIdentifier,WTF::String const&>::call(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a3;
  switch(a2)
  {
    case 13:
      if (v3)
        goto LABEL_13;
      goto LABEL_12;
    case 14:
      if (v3)
        goto LABEL_13;
      goto LABEL_12;
    case 15:
      if (v3)
        goto LABEL_13;
      goto LABEL_12;
    case 16:
      if (v3)
        goto LABEL_13;
      goto LABEL_12;
    case 17:
      if (v3)
LABEL_13:
        JUMPOUT(0x19AEA53F4);
LABEL_12:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmPBKDF2::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;
  char v13;

  *(_QWORD *)a1 = &off_1E3396958;
  v3 = *(unsigned int **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *(WTF **)(a1 + 80);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E33966F8[v8])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E3396688[v9])(&v13, a1 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmPBKDF2::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E3396958;
  v3 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 16);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E33966F8[v8])(&v12, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E3396688[v9])(&v13, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmPBKDF2::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const WebCore::CryptoAlgorithmPbkdf2Params *v4;
  uint64_t result;

  v4 = *(const WebCore::CryptoAlgorithmPbkdf2Params **)(a1 + 96);
  if ((*(unsigned int (**)(const WebCore::CryptoAlgorithmPbkdf2Params *))(*(_QWORD *)v4 + 24))(v4) == 5)
    return WebCore::CryptoAlgorithmPBKDF2::platformDeriveBits(a1 + 8, v4, *(_QWORD *)(a1 + 104), a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396980;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::identifier(WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5 *this)
{
  return 1;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::encrypt(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  if (*(_BYTE *)(*a3 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  *a3 = 0;
  v14 = *a4;
  v15 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = &off_1E3396E20;
  v16[1] = v9;
  v16[2] = v14;
  v16[3] = v15;
  v17 = *a5;
  *a5 = 0;
  v18 = *a6;
  *a6 = 0;
  v19 = *(_OWORD *)(a7 + 240);
  v23 = *(_OWORD *)(a7 + 224);
  v24 = v19;
  v20 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v20 = &off_1E3395AD0;
  *(_QWORD *)(v20 + 16) = v16;
  *(_QWORD *)(v20 + 24) = v17;
  *(_QWORD *)(v20 + 32) = v18;
  v21 = v24;
  *(_OWORD *)(v20 + 48) = v23;
  *(_OWORD *)(v20 + 64) = v21;
  v22 = v20;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v22);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::decrypt(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  *a3 = 0;
  v13 = *a4;
  v14 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E3396E48;
  v15[1] = v9;
  v15[2] = v13;
  v15[3] = v14;
  v16 = *a5;
  *a5 = 0;
  v17 = *a6;
  *a6 = 0;
  v18 = *(_OWORD *)(a7 + 240);
  v23 = *(_OWORD *)(a7 + 224);
  v24 = v18;
  v19 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v19 = &off_1E3395AD0;
  *(_QWORD *)(v19 + 16) = v15;
  *(_QWORD *)(v19 + 24) = v16;
  *(_QWORD *)(v19 + 32) = v17;
  v20 = v24;
  *(_OWORD *)(v19 + 48) = v23;
  *(_OWORD *)(v19 + 64) = v20;
  v22 = v19;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v22);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(uint64_t a1, WebCore::CryptoAlgorithmRsaKeyGenParams *a2, char a3, int a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmRsaKeyGenParams *))(*(_QWORD *)a2 + 16))(a2) == 13)
  {
    if ((a4 & 0xFC) != 0)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
    }
    else
    {
      v14 = *a5;
      *a5 = 0;
      v15 = *a6;
      *a6 = 0;
      v16 = *((_DWORD *)a2 + 6);
      v17 = WebCore::CryptoAlgorithmRsaKeyGenParams::publicExponentVector(a2);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = &off_1E3396E70;
      v18[1] = v14;
      v22 = v18;
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = &off_1E3396EA8;
      v19[1] = v15;
      v21 = v19;
      WebCore::CryptoKeyRSA::generatePair(1, 13, 0, v16, (uint64_t)v17, a3, a4, (uint64_t *)&v22, (uint64_t *)&v21, a7);
      v20 = (uint64_t)v21;
      v21 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      result = (uint64_t)v22;
      v22 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void **WebCore::CryptoAlgorithmRsaKeyGenParams::publicExponentVector(WebCore::CryptoAlgorithmRsaKeyGenParams *this)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (void **)((char *)this + 40);
  if (!*((_DWORD *)this + 13))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        if ((v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
          || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
          || (v5 & 0x3FFFFFFFFLL) + v6)
        {
          v7 = *(_BYTE *)(v3 + 6);
          if ((v7 & 3) != 0)
          {
            if (*(_BYTE *)(v4 + 64) && (v31 = *(_QWORD *)(v4 + 32)) != 0)
            {
              v24 = atomic_load((unint64_t *)(v31 + 32));
              v7 = *(_BYTE *)(v3 + 6);
            }
            else
            {
              v24 = *(_QWORD *)(v4 + 48);
            }
            v25 = *(_QWORD *)(v3 + 8);
            if ((v7 & 4) != 0)
            {
              v27 = v24 >= v25;
              v28 = v24 - v25;
              if (v27)
                return v1;
              v29 = *(_BYTE *)(v3 + 4) - 4;
              if (v29 > 7u)
                LOBYTE(v30) = 0;
              else
                v30 = qword_1969ED1F8[(char)v29];
              v8 = (-1 << v30) & v28;
            }
            else
            {
              v8 = *(_QWORD *)(v3 + 16);
              if (v24 >= v25 && v8 + v25 <= v24)
                return v1;
            }
          }
          else
          {
            v8 = *(_QWORD *)(v3 + 16);
          }
          if (v8)
          {
            v9 = JSC::ArrayBufferView::span(*((JSC::ArrayBufferView **)this + 4));
            if (v10)
            {
              v11 = (const void *)v9;
              v12 = v10;
              v13 = *((unsigned int *)this + 12);
              v14 = *((unsigned int *)this + 13);
              v15 = v10 + v14;
              if (v10 + v14 > v13)
              {
                v18 = v13 + (v13 >> 2);
                if (v18 >= 0x10)
                  v19 = v18 + 1;
                else
                  v19 = 16;
                if (v19 <= v15)
                  v20 = v10 + v14;
                else
                  v20 = v19;
                if (HIDWORD(v20))
                  goto LABEL_43;
                v21 = *v1;
                v22 = (void *)WTF::fastMalloc((WTF *)v20);
                *((_DWORD *)this + 12) = v20;
                *((_QWORD *)this + 5) = v22;
                memcpy(v22, v21, v14);
                if (v21)
                {
                  if (*v1 == v21)
                  {
                    *((_QWORD *)this + 5) = 0;
                    *((_DWORD *)this + 12) = 0;
                  }
                  WTF::fastFree((WTF *)v21, v23);
                }
              }
              v16 = *((unsigned int *)this + 13);
              if (v15 >= v16)
              {
                memcpy((void *)(*((_QWORD *)this + 5) + v16), v11, v12);
                *((_DWORD *)this + 13) = v15;
                return v1;
              }
LABEL_43:
              __break(0xC471u);
              JUMPOUT(0x19576E464);
            }
          }
        }
      }
    }
  }
  return v1;
}

void WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::importKey(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5, unsigned int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  void (*v42)(void);
  void (*v43)(void);
  WTF::StringImpl *v44;
  unsigned int *v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  if (a2 != 1)
  {
    if (a2 != 2)
    {
      if (a2 == 3)
      {
        if (*((_DWORD *)a3 + 46) == 1)
        {
          v14 = *a3;
          v13 = a3[1];
          *a3 = 0;
          a3[1] = 0;
          v46[0] = v14;
          v46[1] = v13;
          LOBYTE(v47) = 0;
          v49 = 0;
          if (*((_BYTE *)a3 + 32))
          {
            v47 = a3[2];
            v15 = a3[3];
            a3[2] = 0;
            a3[3] = 0;
            v48 = v15;
            v49 = 1;
          }
          v50 = *((_DWORD *)a3 + 10);
          v16 = a3[6];
          a3[6] = 0;
          v51 = v16;
          v52 = *((_WORD *)a3 + 28);
          v53 = *((_OWORD *)a3 + 4);
          v54 = a3[10];
          v17 = *(_OWORD *)(a3 + 11);
          *((_OWORD *)a3 + 4) = 0u;
          *((_OWORD *)a3 + 5) = 0u;
          v18 = *(_OWORD *)(a3 + 13);
          v55 = v17;
          v56 = v18;
          v19 = *(_OWORD *)(a3 + 15);
          *((_OWORD *)a3 + 6) = 0u;
          *((_OWORD *)a3 + 7) = 0u;
          v57 = v19;
          v20 = *(_OWORD *)(a3 + 17);
          *((_OWORD *)a3 + 8) = 0u;
          a3[18] = 0;
          v58 = v20;
          LOBYTE(v59) = 0;
          v61 = 0;
          if (*((_BYTE *)a3 + 168))
          {
            v59 = a3[19];
            v21 = a3[20];
            a3[19] = 0;
            a3[20] = 0;
            v60 = v21;
            v61 = 1;
          }
          v22 = a3[22];
          a3[22] = 0;
          v62 = v22;
          if (!a6)
            goto LABEL_17;
          if ((_QWORD)v17)
            v23 = 2;
          else
            v23 = 1;
          if (v23 != a6)
          {
            v43 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_50:
            v43();
            WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v46, v44);
            return;
          }
          if (!v13 || (MEMORY[0x19AEA53F4](v13, "enc", 3) & 1) != 0)
          {
LABEL_17:
            if (!v16 || (MEMORY[0x19AEA53F4](v16, "RSA1_5", 6) & 1) != 0)
            {
              WebCore::CryptoKeyRSA::importJwk(*(_BYTE *)(a4 + 16), 0, (uint64_t)v46, a5, a6, (uint64_t *)&v45);
              v24 = v45;
              WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v46, v25);
              goto LABEL_39;
            }
          }
          v43 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
          goto LABEL_50;
        }
        goto LABEL_52;
      }
      v42 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_47:
      v42();
      return;
    }
    if ((a6 | 2) == 2)
    {
      if (!*((_DWORD *)a3 + 46))
      {
        v26 = *((unsigned int *)a3 + 3);
        if (v26 < 2)
          goto LABEL_44;
        v27 = *(unsigned __int8 *)(*a3 + 1);
        v28 = (char)v27;
        v29 = v27 - 127;
        if (v28 >= 0)
          v29 = 1;
        if (v29 + 21 > v26)
          goto LABEL_44;
        if (v29 + 20 < v26)
        {
          v30 = *(_BYTE *)(a4 + 16);
          v46[0] = 0;
          v24 = 0;
          if (CCRSACryptorImport())
            goto LABEL_39;
          v31 = WTF::fastMalloc((WTF *)0x28);
          v24 = (unsigned int *)v31;
          v32 = v46[0];
          *(_DWORD *)(v31 + 8) = 1;
          *(_BYTE *)(v31 + 12) = v30;
          *(_BYTE *)(v31 + 13) = 1;
          goto LABEL_38;
        }
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x19576E87CLL);
      }
LABEL_52:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_53;
    }
LABEL_46:
    v42 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
    goto LABEL_47;
  }
  if (a6 >= 2)
    goto LABEL_46;
  if (*((_DWORD *)a3 + 46))
    goto LABEL_52;
  v33 = *((unsigned int *)a3 + 3);
  if (v33 < 2)
    goto LABEL_44;
  v34 = *(unsigned __int8 *)(*a3 + 1);
  v35 = (char)v34;
  v36 = v34 - 127;
  v37 = v35 >= 0 ? 1 : v36;
  if (v37 + 18 > v33)
    goto LABEL_44;
  if (v37 + 17 >= v33)
    goto LABEL_53;
  v38 = *(_BYTE *)(a4 + 16);
  v46[0] = 0;
  v24 = 0;
  if (CCRSACryptorImport())
    goto LABEL_39;
  v31 = WTF::fastMalloc((WTF *)0x28);
  v24 = (unsigned int *)v31;
  v32 = v46[0];
  *(_DWORD *)(v31 + 8) = 1;
  *(_BYTE *)(v31 + 12) = v38;
  *(_BYTE *)(v31 + 13) = 0;
LABEL_38:
  *(_BYTE *)(v31 + 14) = a5;
  *(_DWORD *)(v31 + 16) = a6;
  *(_QWORD *)v31 = off_1E33972B0;
  *(_QWORD *)(v31 + 24) = v32;
  *(_WORD *)(v31 + 32) = 3328;
LABEL_39:
  if (!v24)
  {
LABEL_44:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    return;
  }
  (*(void (**)(_QWORD, unsigned int *))(*(_QWORD *)*a7 + 16))(*a7, v24);
  v39 = v24 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v24 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
  }
}

WTF *WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::exportKey(uint64_t a1, uint64_t a2, WebCore::CryptoKeyRSA **a3, _QWORD *a4, _QWORD *a5)
{
  WebCore::CryptoKeyRSA *v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *result;
  void *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  WTF *v33[2];
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  WTF::StringImpl *v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  WTF *v50[2];
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  WTF::StringImpl *v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned int v67;
  WTF::StringImpl *v68;

  v8 = *a3;
  if ((*(unsigned int (**)(WebCore::CryptoKeyRSA *))(*(_QWORD *)*a3 + 24))(*a3) != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19576EC54);
  }
  v50[0] = 0;
  v50[1] = 0;
  v33[0] = 0;
  v33[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)v8 + 3, (uint64_t)v50, (uint64_t)v33))
  {
    WTFLogAlways();
    v10 = 0;
  }
  else
  {
    v10 = 8 * HIDWORD(v50[1]);
  }
  if (v33[0])
    WTF::fastFree(v33[0], v9);
  if (!v50[0])
  {
    if (v10)
      goto LABEL_9;
    return (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
  }
  WTF::fastFree(v50[0], v9);
  if (!v10)
    return (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 30);
LABEL_9:
  v50[0] = 0;
  v50[1] = 0;
  v67 = 0;
  if ((_DWORD)a2 == 1)
  {
    result = (WTF *)WebCore::CryptoKeyRSA::exportSpki((uint64_t)v8, (uint64_t)v33);
    goto LABEL_22;
  }
  if ((_DWORD)a2 == 2)
  {
    result = (WTF *)WebCore::CryptoKeyRSA::exportPkcs8((uint64_t)v8, (uint64_t)v33);
LABEL_22:
    v15 = v34;
    if ((_DWORD)v34)
    {
      if ((_DWORD)v34 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF *)WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::create(v32);
      }
      v16 = v33[1];
      v33[1] = 0;
      result = (WTF *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, LOBYTE(v33[0]));
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          result = (WTF *)WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
LABEL_42:
      if ((_DWORD)v34 != -1)
        result = (WTF *)((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E3396DB0[v34])(&v68, v33);
      if (v15)
        goto LABEL_46;
      goto LABEL_45;
    }
    v18 = v33[0];
    v20 = v33[1];
    v19 = HIDWORD(v33[1]);
    v33[0] = 0;
    v33[1] = 0;
    if (v67 != -1)
    {
      if (!v67)
      {
        result = v50[0];
        if (v50[0])
        {
          v50[0] = 0;
          LODWORD(v50[1]) = 0;
          result = (WTF *)WTF::fastFree(result, v14);
        }
        v50[0] = v18;
        v50[1] = (WTF *)__PAIR64__(v19, v20);
        goto LABEL_42;
      }
      result = (WTF *)((uint64_t (*)(WTF::StringImpl **, WTF **))*(&off_1E3396DC0 + v67))(&v68, v50);
    }
    v50[0] = v18;
    v50[1] = (WTF *)__PAIR64__(v19, v20);
    v67 = 0;
    goto LABEL_42;
  }
  if ((_DWORD)a2 != 3)
  {
    result = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 6);
    goto LABEL_46;
  }
  WebCore::CryptoKeyRSA::exportJwk(v8, (uint64_t)v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = v38;
  v38 = v68;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v67 == -1)
    goto LABEL_34;
  if (v67 != 1)
  {
    ((void (*)(WTF::StringImpl **, WTF **))*(&off_1E3396DC0 + v67))(&v68, v50);
LABEL_34:
    v67 = -1;
    v21 = *(_OWORD *)v33;
    v33[0] = 0;
    v33[1] = 0;
    *(_OWORD *)v50 = v21;
    LOBYTE(v51) = 0;
    v53 = 0;
    if (v36)
    {
      v51 = v34;
      v22 = v35;
      v34 = 0;
      v35 = 0;
      v52 = v22;
      v53 = 1;
    }
    v54 = v37;
    v23 = v38;
    v38 = 0;
    v55 = v23;
    v56 = v39;
    v24 = v40;
    v25 = v41;
    v40 = 0u;
    v41 = 0u;
    v57 = v24;
    v58 = v25;
    v26 = v42;
    v27 = v43;
    v42 = 0u;
    v43 = 0u;
    v59 = v26;
    v60 = v27;
    v28 = v44;
    v44 = 0u;
    v61 = v28;
    v29 = v45;
    v45 = 0;
    v62 = v29;
    LOBYTE(v63) = 0;
    v65 = 0;
    if (v48)
    {
      v63 = v46;
      v30 = v47;
      v46 = 0;
      v47 = 0;
      v64 = v30;
      v65 = 1;
    }
    v31 = v49;
    v49 = 0;
    v66 = v31;
    v67 = 1;
    goto LABEL_39;
  }
  WebCore::JsonWebKey::operator=((uint64_t)v50, (uint64_t *)v33);
LABEL_39:
  WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v33, v11);
LABEL_45:
  result = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t, WTF **))(*(_QWORD *)*a4 + 16))(*a4, a2, v50);
LABEL_46:
  if (v67 != -1)
    return (WTF *)((uint64_t (*)(WTF **, WTF **))*(&off_1E3396DC0 + v67))(v33, v50);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396A08;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::identifier(WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5 *this)
{
  return 2;
}

uint64_t WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::sign(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  *a3 = 0;
  v13 = *a4;
  v14 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E3396ED0;
  v15[1] = v9;
  v15[2] = v13;
  v15[3] = v14;
  v16 = *a5;
  *a5 = 0;
  v17 = *a6;
  *a6 = 0;
  v18 = *(_OWORD *)(a7 + 240);
  v23 = *(_OWORD *)(a7 + 224);
  v24 = v18;
  v19 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v19 = &off_1E3395AD0;
  *(_QWORD *)(v19 + 16) = v15;
  *(_QWORD *)(v19 + 24) = v16;
  *(_QWORD *)(v19 + 32) = v17;
  v20 = v24;
  *(_OWORD *)(v19 + 48) = v23;
  *(_OWORD *)(v19 + 64) = v20;
  v22 = v19;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v22);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::verify(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  if (*(_BYTE *)(*a3 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a7 + 16))();
  *a3 = 0;
  v14 = *a4;
  *a4 = 0;
  v15 = *a5;
  *a5 = 0;
  v16 = a4[1];
  a4[1] = 0;
  v17 = a5[1];
  a5[1] = 0;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v18 = &off_1E3396EF8;
  v18[1] = v10;
  v18[2] = v14;
  v18[3] = v16;
  v18[4] = v15;
  v18[5] = v17;
  v19 = *a6;
  *a6 = 0;
  v20 = *a7;
  *a7 = 0;
  v21 = *(_OWORD *)(a8 + 240);
  v25 = *(_OWORD *)(a8 + 224);
  v26 = v21;
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v22 = &off_1E3395B40;
  *(_QWORD *)(v22 + 16) = v18;
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v20;
  v23 = v26;
  *(_OWORD *)(v22 + 48) = v25;
  *(_OWORD *)(v22 + 64) = v23;
  v24 = v22;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a9 + 32))(a9, &v24);
  result = v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  void **v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 11)
  {
    if ((a4 & 0xF3) != 0)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
    }
    else
    {
      v14 = *a5;
      *a5 = 0;
      v15 = *a6;
      *a6 = 0;
      v16 = *(_BYTE *)(a2 + 72);
      v17 = *(_DWORD *)(a2 + 24);
      v18 = WebCore::CryptoAlgorithmRsaKeyGenParams::publicExponentVector((WebCore::CryptoAlgorithmRsaKeyGenParams *)a2);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = &off_1E3396F20;
      v19[1] = v14;
      v23 = v19;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = &off_1E3396F48;
      v20[1] = v15;
      v22 = v20;
      WebCore::CryptoKeyRSA::generatePair(2, v16, 1, v17, (uint64_t)v18, a3, a4, (uint64_t *)&v23, (uint64_t *)&v22, a7);
      v21 = (uint64_t)v22;
      v22 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::importKey(uint64_t a1, int a2, uint64_t *a3, char *a4, int a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(void);
  void (*v45)(void);
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if ((*(unsigned int (**)(char *))(*(_QWORD *)a4 + 16))(a4) != 12)
  {
    __break(0xC471u);
    JUMPOUT(0x19576F5E0);
  }
  if (a2 == 1)
  {
    if ((a6 | 8) == 8)
    {
      if (*((_DWORD *)a3 + 46))
        goto LABEL_65;
      v38 = *((unsigned int *)a3 + 3);
      if (v38 < 2)
        goto LABEL_60;
      v39 = *(unsigned __int8 *)(*a3 + 1);
      v40 = (char)v39;
      v41 = v39 - 127;
      v42 = v40 >= 0 ? 1 : v41;
      if (v42 + 18 > v38)
        goto LABEL_60;
      if (v42 + 17 >= v38)
      {
        __break(0xC471u);
        JUMPOUT(0x19576F5F4);
      }
      v33 = a4[40];
      v43 = a4[16];
      v52[0] = 0;
      v35 = 0;
      if (CCRSACryptorImport())
        goto LABEL_55;
      v36 = WTF::fastMalloc((WTF *)0x28);
      v35 = (unsigned int *)v36;
      v37 = v52[0];
      *(_DWORD *)(v36 + 8) = 1;
      *(_BYTE *)(v36 + 12) = v43;
      *(_BYTE *)(v36 + 13) = 0;
      goto LABEL_39;
    }
LABEL_41:
    v44 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
    goto LABEL_42;
  }
  if (a2 == 2)
  {
    if ((a6 | 4) == 4)
    {
      if (*((_DWORD *)a3 + 46))
        goto LABEL_65;
      v29 = *((unsigned int *)a3 + 3);
      if (v29 < 2)
        goto LABEL_60;
      v30 = *(unsigned __int8 *)(*a3 + 1);
      v31 = (char)v30;
      v32 = v30 - 127;
      if (v31 >= 0)
        v32 = 1;
      if (v32 + 21 > v29)
        goto LABEL_60;
      if (v32 + 20 >= v29)
      {
LABEL_66:
        __break(0xC471u);
        JUMPOUT(0x19576F5ECLL);
      }
      v33 = a4[40];
      v34 = a4[16];
      v52[0] = 0;
      v35 = 0;
      if (CCRSACryptorImport())
        goto LABEL_55;
      v36 = WTF::fastMalloc((WTF *)0x28);
      v35 = (unsigned int *)v36;
      v37 = v52[0];
      *(_DWORD *)(v36 + 8) = 1;
      *(_BYTE *)(v36 + 12) = v34;
      *(_BYTE *)(v36 + 13) = 1;
LABEL_39:
      *(_BYTE *)(v36 + 14) = a5;
      *(_DWORD *)(v36 + 16) = a6;
      *(_QWORD *)v36 = off_1E33972B0;
      *(_QWORD *)(v36 + 24) = v37;
      *(_BYTE *)(v36 + 32) = 1;
      *(_BYTE *)(v36 + 33) = v33;
      goto LABEL_55;
    }
    goto LABEL_41;
  }
  if (a2 != 3)
  {
    v44 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_42:
    v44();
    return;
  }
  if (*((_DWORD *)a3 + 46) != 1)
  {
LABEL_65:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_66;
  }
  v16 = *a3;
  v15 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v52[0] = v16;
  v52[1] = v15;
  LOBYTE(v53) = 0;
  v55 = 0;
  if (*((_BYTE *)a3 + 32))
  {
    v53 = a3[2];
    v17 = a3[3];
    a3[2] = 0;
    a3[3] = 0;
    v54 = v17;
    v55 = 1;
  }
  v56 = *((_DWORD *)a3 + 10);
  v18 = a3[6];
  a3[6] = 0;
  v57 = v18;
  v58 = *((_WORD *)a3 + 28);
  v59 = *((_OWORD *)a3 + 4);
  v60 = a3[10];
  v19 = *(_OWORD *)(a3 + 11);
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  v20 = *(_OWORD *)(a3 + 13);
  v61 = v19;
  v62 = v20;
  v21 = *(_OWORD *)(a3 + 15);
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  v63 = v21;
  v22 = *(_OWORD *)(a3 + 17);
  *((_OWORD *)a3 + 8) = 0u;
  a3[18] = 0;
  v64 = v22;
  LOBYTE(v65) = 0;
  v67 = 0;
  if (*((_BYTE *)a3 + 168))
  {
    v65 = a3[19];
    v23 = a3[20];
    a3[19] = 0;
    a3[20] = 0;
    v66 = v23;
    v67 = 1;
  }
  v24 = a3[22];
  a3[22] = 0;
  v68 = v24;
  if (!a6)
    goto LABEL_17;
  if ((_QWORD)v19)
    v25 = 4;
  else
    v25 = 8;
  if (v25 != a6)
  {
    v45 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_62:
    v45();
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v52, v50);
    return;
  }
  if (v15 && (MEMORY[0x19AEA53F4](v15, "sig", 3) & 1) == 0)
  {
LABEL_61:
    v45 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
    goto LABEL_62;
  }
LABEL_17:
  switch(a4[40])
  {
    case 13:
      if (!v18)
        goto LABEL_54;
      v26 = "RS1";
      v27 = v18;
      v28 = 3;
      goto LABEL_53;
    case 14:
      if (!v18)
        goto LABEL_54;
      v26 = "RS224";
      goto LABEL_52;
    case 15:
      if (!v18)
        goto LABEL_54;
      v26 = "RS256";
      goto LABEL_52;
    case 16:
      if (!v18)
        goto LABEL_54;
      v26 = "RS384";
      goto LABEL_52;
    case 17:
      if (!v18)
        goto LABEL_54;
      v26 = "RS512";
LABEL_52:
      v27 = v18;
      v28 = 5;
LABEL_53:
      if ((MEMORY[0x19AEA53F4](v27, v26, v28) & 1) == 0)
        goto LABEL_61;
LABEL_54:
      WebCore::CryptoKeyRSA::importJwk(a4[16], a4[40] | 0x100, (uint64_t)v52, a5, a6, (uint64_t *)&v51);
      v35 = v51;
      WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v52, v46);
      break;
    default:
      goto LABEL_61;
  }
LABEL_55:
  if (!v35)
  {
LABEL_60:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    return;
  }
  (*(void (**)(_QWORD, unsigned int *))(*(_QWORD *)*a7 + 16))(*a7, v35);
  v47 = v35 + 2;
  do
  {
    v48 = __ldaxr(v47);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v47));
  if (!v49)
  {
    atomic_store(1u, v35 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396A90;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::identifier(WebCore::CryptoAlgorithmRSA_OAEP *this)
{
  return 4;
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::encrypt(uint64_t a1, WebCore::CryptoAlgorithmRsaOaepParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v16;
  void **v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  unsigned int *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  char v43;
  char v44[8];
  int v45;
  char v46;
  void *__dst;
  size_t __len;
  unsigned int *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  char v53[8];
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)*a3 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmRsaOaepParams *))(*(_QWORD *)a2 + 16))(a2) != 14)
  {
    __break(0xC471u);
    JUMPOUT(0x19576FE40);
  }
  v44[0] = 0;
  v46 = 0;
  __dst = 0;
  __len = 0;
  v43 = *((_BYTE *)a2 + 16);
  v16 = WebCore::CryptoAlgorithmRsaOaepParams::labelVector(a2);
  if (v16 != &__dst)
  {
    v17 = v16;
    v18 = (WTF *)*((unsigned int *)v16 + 3);
    if ((_DWORD)v18)
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, v18);
      v19 = (char *)__dst;
      if (HIDWORD(__len))
      {
        memmove(__dst, *v17, HIDWORD(__len));
        v20 = HIDWORD(__len);
        v19 = (char *)__dst;
LABEL_10:
        memcpy(&v19[v20], (char *)*v17 + v20, (_BYTE *)*v17 + *((unsigned int *)v17 + 3) - ((_BYTE *)*v17 + v20));
        HIDWORD(__len) = *((_DWORD *)v17 + 3);
        goto LABEL_11;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = 0;
    goto LABEL_10;
  }
LABEL_11:
  v21 = *a3;
  *a3 = 0;
  v22 = *(WTF **)a4;
  v49 = v21;
  v50 = v22;
  v23 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v51 = v23;
  v24 = WTF::fastMalloc((WTF *)0x60);
  v25 = v24;
  *(_QWORD *)v24 = &off_1E3396F70;
  *(_BYTE *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  *(_BYTE *)(v24 + 24) = v43;
  *(_QWORD *)(v24 + 8) = off_1E32DCCE8;
  *(_BYTE *)(v24 + 48) = 0;
  if (v46)
  {
    *(_DWORD *)(v24 + 40) = -1;
    if (v45 != -1)
    {
      ((void (*)(char *))off_1E3396DE0[v45])(v53);
      *(_DWORD *)(v25 + 40) = v45;
    }
    *(_BYTE *)(v25 + 48) = 1;
  }
  v26 = __dst;
  __dst = 0;
  *(_QWORD *)(v25 + 56) = v26;
  v27 = __len;
  __len = 0;
  *(_QWORD *)(v25 + 64) = v27;
  *(_QWORD *)(v25 + 72) = v49;
  v28 = v50;
  v49 = 0;
  v50 = 0;
  *(_QWORD *)(v25 + 80) = v28;
  v29 = v51;
  v51 = 0;
  *(_QWORD *)(v25 + 88) = v29;
  v30 = *a5;
  *a5 = 0;
  v31 = *a6;
  *a6 = 0;
  v32 = *(_OWORD *)(a7 + 240);
  v54 = *(_OWORD *)(a7 + 224);
  v55 = v32;
  v33 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v33 = &off_1E3395AD0;
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v33 + 24) = v30;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v55;
  *(_OWORD *)(v33 + 48) = v54;
  *(_OWORD *)(v33 + 64) = v34;
  v52 = v33;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v52);
  v36 = v52;
  v52 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v50;
  if (v50)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v37, v35);
  }
  v38 = v49;
  v49 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  v42 = (WTF *)__dst;
  if (__dst)
  {
    __dst = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v42, v35);
  }
  if (v46)
  {
    if (v45 != -1)
      ((void (*)(char *, char *))off_1E3396DD0[v45])(v53, v44);
    v45 = -1;
  }
  return 0;
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::decrypt(uint64_t a1, WebCore::CryptoAlgorithmRsaOaepParams *a2, unsigned int **a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void **v15;
  void **v16;
  WTF *v17;
  char *v18;
  uint64_t v19;
  unsigned int *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  char v43;
  char v44[8];
  int v45;
  char v46;
  void *__dst;
  size_t __len;
  unsigned int *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  char v53[8];
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(WebCore::CryptoAlgorithmRsaOaepParams *))(*(_QWORD *)a2 + 16))(a2) != 14)
  {
    __break(0xC471u);
    JUMPOUT(0x195770210);
  }
  v44[0] = 0;
  v46 = 0;
  __dst = 0;
  __len = 0;
  v43 = *((_BYTE *)a2 + 16);
  v15 = WebCore::CryptoAlgorithmRsaOaepParams::labelVector(a2);
  if (v15 != &__dst)
  {
    v16 = v15;
    v17 = (WTF *)*((unsigned int *)v15 + 3);
    if ((_DWORD)v17)
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, v17);
      v18 = (char *)__dst;
      if (HIDWORD(__len))
      {
        memmove(__dst, *v16, HIDWORD(__len));
        v19 = HIDWORD(__len);
        v18 = (char *)__dst;
LABEL_10:
        memcpy(&v18[v19], (char *)*v16 + v19, (_BYTE *)*v16 + *((unsigned int *)v16 + 3) - ((_BYTE *)*v16 + v19));
        HIDWORD(__len) = *((_DWORD *)v16 + 3);
        goto LABEL_11;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    goto LABEL_10;
  }
LABEL_11:
  v21 = *a3;
  *a3 = 0;
  v22 = *(WTF **)a4;
  v49 = v21;
  v50 = v22;
  v23 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v51 = v23;
  v24 = WTF::fastMalloc((WTF *)0x60);
  v25 = v24;
  *(_QWORD *)v24 = &off_1E3396F98;
  *(_BYTE *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  *(_BYTE *)(v24 + 24) = v43;
  *(_QWORD *)(v24 + 8) = off_1E32DCCE8;
  *(_BYTE *)(v24 + 48) = 0;
  if (v46)
  {
    *(_DWORD *)(v24 + 40) = -1;
    if (v45 != -1)
    {
      ((void (*)(char *))off_1E3396DE0[v45])(v53);
      *(_DWORD *)(v25 + 40) = v45;
    }
    *(_BYTE *)(v25 + 48) = 1;
  }
  v26 = __dst;
  __dst = 0;
  *(_QWORD *)(v25 + 56) = v26;
  v27 = __len;
  __len = 0;
  *(_QWORD *)(v25 + 64) = v27;
  *(_QWORD *)(v25 + 72) = v49;
  v28 = v50;
  v49 = 0;
  v50 = 0;
  *(_QWORD *)(v25 + 80) = v28;
  v29 = v51;
  v51 = 0;
  *(_QWORD *)(v25 + 88) = v29;
  v30 = *a5;
  *a5 = 0;
  v31 = *a6;
  *a6 = 0;
  v32 = *(_OWORD *)(a7 + 240);
  v54 = *(_OWORD *)(a7 + 224);
  v55 = v32;
  v33 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v33 = &off_1E3395AD0;
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v33 + 24) = v30;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v55;
  *(_OWORD *)(v33 + 48) = v54;
  *(_OWORD *)(v33 + 64) = v34;
  v52 = v33;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v52);
  v36 = v52;
  v52 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v50;
  if (v50)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v37, v35);
  }
  v38 = v49;
  v49 = 0;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  v42 = (WTF *)__dst;
  if (__dst)
  {
    __dst = 0;
    LODWORD(__len) = 0;
    WTF::fastFree(v42, v35);
  }
  if (v46)
  {
    if (v45 != -1)
      ((void (*)(char *, char *))off_1E3396DD0[v45])(v53, v44);
    v45 = -1;
  }
  return 0;
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::generateKey(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  void **v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 11)
  {
    if ((a4 & 0x3C) != 0)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
    }
    else
    {
      v14 = *a5;
      *a5 = 0;
      v15 = *a6;
      *a6 = 0;
      v16 = *(_BYTE *)(a2 + 72);
      v17 = *(_DWORD *)(a2 + 24);
      v18 = WebCore::CryptoAlgorithmRsaKeyGenParams::publicExponentVector((WebCore::CryptoAlgorithmRsaKeyGenParams *)a2);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = &off_1E3396FC0;
      v19[1] = v14;
      v23 = v19;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = &off_1E3396FE8;
      v20[1] = v15;
      v22 = v20;
      WebCore::CryptoKeyRSA::generatePair(4, v16, 1, v17, (uint64_t)v18, a3, a4, (uint64_t *)&v23, (uint64_t *)&v22, a7);
      v21 = (uint64_t)v22;
      v22 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::CryptoAlgorithmRSA_OAEP::importKey(uint64_t a1, int a2, uint64_t *a3, char *a4, int a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  void (*v28)(void);
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unsigned int *v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  if ((*(unsigned int (**)(char *))(*(_QWORD *)a4 + 16))(a4) != 12)
  {
    __break(0xC471u);
    JUMPOUT(0x1957708ACLL);
  }
  if (a2 == 1)
  {
    if (a6 >= 2 && (a6 - 64) >= 2)
      goto LABEL_61;
    if (*((_DWORD *)a3 + 46))
      goto LABEL_79;
    v29 = *((unsigned int *)a3 + 3);
    if (v29 >= 2)
    {
      v30 = *(unsigned __int8 *)(*a3 + 1);
      v31 = (char)v30;
      v32 = v30 - 127;
      v33 = v31 >= 0 ? 1 : v32;
      if (v33 + 18 <= v29)
      {
        if (v33 + 17 >= v29)
        {
LABEL_80:
          __break(0xC471u);
          JUMPOUT(0x1957708B8);
        }
        v34 = a4[40];
        v35 = a4[16];
        v54[0] = 0;
        v36 = 0;
        if (CCRSACryptorImport())
          goto LABEL_50;
        v37 = WTF::fastMalloc((WTF *)0x28);
        v36 = (unsigned int *)v37;
        v38 = v54[0];
        *(_DWORD *)(v37 + 8) = 1;
        *(_BYTE *)(v37 + 12) = v35;
        *(_BYTE *)(v37 + 13) = 0;
        goto LABEL_49;
      }
    }
LABEL_74:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    return;
  }
  if (a2 == 2)
  {
    if (a6 > 127)
    {
      if (a6 != 128 && a6 != 130)
        goto LABEL_61;
    }
    else if (a6 && a6 != 2)
    {
LABEL_61:
      v39 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
      goto LABEL_62;
    }
    if (*((_DWORD *)a3 + 46))
      goto LABEL_79;
    v40 = *((unsigned int *)a3 + 3);
    if (v40 >= 2)
    {
      v41 = *(unsigned __int8 *)(*a3 + 1);
      v42 = (char)v41;
      v43 = v41 - 127;
      if (v42 >= 0)
        v43 = 1;
      if (v43 + 21 <= v40)
      {
        if (v43 + 20 >= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x1957708C0);
        }
        v34 = a4[40];
        v44 = a4[16];
        v54[0] = 0;
        v36 = 0;
        if (CCRSACryptorImport())
        {
LABEL_50:
          if (v36)
          {
LABEL_51:
            (*(void (**)(_QWORD, unsigned int *))(*(_QWORD *)*a7 + 16))(*a7, v36);
            v45 = v36 + 2;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v36 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
            }
            return;
          }
          goto LABEL_74;
        }
        v37 = WTF::fastMalloc((WTF *)0x28);
        v36 = (unsigned int *)v37;
        v38 = v54[0];
        *(_DWORD *)(v37 + 8) = 1;
        *(_BYTE *)(v37 + 12) = v44;
        *(_BYTE *)(v37 + 13) = 1;
LABEL_49:
        *(_BYTE *)(v37 + 14) = a5;
        *(_DWORD *)(v37 + 16) = a6;
        *(_QWORD *)v37 = off_1E33972B0;
        *(_QWORD *)(v37 + 24) = v38;
        *(_BYTE *)(v37 + 32) = 1;
        *(_BYTE *)(v37 + 33) = v34;
        goto LABEL_50;
      }
    }
    goto LABEL_74;
  }
  if (a2 != 3)
  {
    v39 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_62:
    v39();
    return;
  }
  if (*((_DWORD *)a3 + 46) != 1)
  {
LABEL_79:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_80;
  }
  v16 = *a3;
  v15 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v54[0] = v16;
  v54[1] = v15;
  LOBYTE(v55) = 0;
  v57 = 0;
  if (*((_BYTE *)a3 + 32))
  {
    v55 = a3[2];
    v17 = a3[3];
    a3[2] = 0;
    a3[3] = 0;
    v56 = v17;
    v57 = 1;
  }
  v58 = *((_DWORD *)a3 + 10);
  v18 = a3[6];
  a3[6] = 0;
  v59 = v18;
  v60 = *((_WORD *)a3 + 28);
  v61 = *((_OWORD *)a3 + 4);
  v62 = a3[10];
  v19 = *(_OWORD *)(a3 + 11);
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  v20 = *(_OWORD *)(a3 + 13);
  v63 = v19;
  v64 = v20;
  v21 = *(_OWORD *)(a3 + 15);
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  v65 = v21;
  v22 = *(_OWORD *)(a3 + 17);
  *((_OWORD *)a3 + 8) = 0u;
  a3[18] = 0;
  v66 = v22;
  LOBYTE(v67) = 0;
  v69 = 0;
  if (*((_BYTE *)a3 + 168))
  {
    v67 = a3[19];
    v23 = a3[20];
    a3[19] = 0;
    a3[20] = 0;
    v68 = v23;
    v69 = 1;
  }
  v24 = a3[22];
  a3[22] = 0;
  v70 = v24;
  if ((_QWORD)v19)
    v25 = 128;
  else
    v25 = 64;
  if ((_QWORD)v19)
    v26 = -129;
  else
    v26 = -65;
  if ((_QWORD)v19)
    v27 = 2;
  else
    v27 = 1;
  if (!a6 || v25 == a6 || (v26 & a6) == v27)
  {
    if (!a6 || !v15 || (MEMORY[0x19AEA53F4](v15, "enc", 3) & 1) != 0)
    {
      switch(a4[40])
      {
        case 13:
          if (!v18)
            goto LABEL_73;
          v48 = "RSA-OAEP";
          v49 = v18;
          v50 = 8;
          goto LABEL_72;
        case 14:
          if (!v18)
            goto LABEL_73;
          v48 = "RSA-OAEP-224";
          goto LABEL_71;
        case 15:
          if (!v18)
            goto LABEL_73;
          v48 = "RSA-OAEP-256";
          goto LABEL_71;
        case 16:
          if (!v18)
            goto LABEL_73;
          v48 = "RSA-OAEP-384";
          goto LABEL_71;
        case 17:
          if (!v18)
            goto LABEL_73;
          v48 = "RSA-OAEP-512";
LABEL_71:
          v49 = v18;
          v50 = 12;
LABEL_72:
          if ((MEMORY[0x19AEA53F4](v49, v48, v50) & 1) == 0)
            break;
LABEL_73:
          WebCore::CryptoKeyRSA::importJwk(a4[16], a4[40] | 0x100, (uint64_t)v54, a5, a6, (uint64_t *)&v53);
          v36 = v53;
          WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v54, v51);
          if (!v36)
            goto LABEL_74;
          goto LABEL_51;
        default:
          break;
      }
    }
    v28 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
  }
  else
  {
    v28 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
  }
  v28();
  WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v54, v52);
}

uint64_t WebCore::CryptoAlgorithmRSA_PSS::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396B18;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSA_PSS::identifier(WebCore::CryptoAlgorithmRSA_PSS *this)
{
  return 3;
}

uint64_t WebCore::CryptoAlgorithmRSA_PSS::sign(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t result;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 15)
  {
    __break(0xC471u);
    JUMPOUT(0x195770F44);
  }
  v15 = *(_BYTE *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *a3;
  *a3 = 0;
  v18 = *a4;
  v19 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v20 = WTF::fastMalloc((WTF *)0x40);
  *(_BYTE *)(v20 + 24) = v15;
  *(_QWORD *)v20 = &off_1E3397010;
  *(_QWORD *)(v20 + 8) = off_1E32DCD50;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 32) = v16;
  *(_QWORD *)(v20 + 40) = v17;
  *(_QWORD *)(v20 + 48) = v18;
  *(_QWORD *)(v20 + 56) = v19;
  v21 = *a5;
  *a5 = 0;
  v22 = *a6;
  *a6 = 0;
  v23 = *(_OWORD *)(a7 + 240);
  v28 = *(_OWORD *)(a7 + 224);
  v29 = v23;
  v24 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v24 = &off_1E3395AD0;
  *(_QWORD *)(v24 + 16) = v20;
  *(_QWORD *)(v24 + 24) = v21;
  *(_QWORD *)(v24 + 32) = v22;
  v25 = v29;
  *(_OWORD *)(v24 + 48) = v28;
  *(_OWORD *)(v24 + 64) = v25;
  v27 = v24;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v27);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSA_PSS::verify(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a7 + 16))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 15)
  {
    __break(0xC471u);
    JUMPOUT(0x195771154);
  }
  v17 = *(_BYTE *)(a2 + 16);
  v29 = *(_QWORD *)(a2 + 24);
  v18 = *a3;
  *a3 = 0;
  v19 = *a4;
  *a4 = 0;
  v20 = *a5;
  *a5 = 0;
  v21 = a4[1];
  a4[1] = 0;
  v22 = a5[1];
  a5[1] = 0;
  v23 = WTF::fastMalloc((WTF *)0x50);
  *(_BYTE *)(v23 + 24) = v17;
  *(_QWORD *)v23 = &off_1E3397038;
  *(_QWORD *)(v23 + 8) = off_1E32DCD50;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 32) = v29;
  *(_QWORD *)(v23 + 40) = v18;
  *(_QWORD *)(v23 + 48) = v19;
  *(_QWORD *)(v23 + 56) = v21;
  *(_QWORD *)(v23 + 64) = v20;
  *(_QWORD *)(v23 + 72) = v22;
  v24 = *a6;
  *a6 = 0;
  v25 = *a7;
  *a7 = 0;
  v26 = *(_OWORD *)(a8 + 240);
  v31 = *(_OWORD *)(a8 + 224);
  v32 = v26;
  v27 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v27 = &off_1E3395B40;
  *(_QWORD *)(v27 + 16) = v23;
  *(_QWORD *)(v27 + 24) = v24;
  *(_QWORD *)(v27 + 32) = v25;
  v28 = v32;
  *(_OWORD *)(v27 + 48) = v31;
  *(_OWORD *)(v27 + 64) = v28;
  v30 = v27;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a9 + 32))(a9, &v30);
  result = v30;
  v30 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSA_PSS::generateKey(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  void **v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 11)
  {
    if ((a4 & 0xF3) != 0)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
    }
    else
    {
      v14 = *a5;
      *a5 = 0;
      v15 = *a6;
      *a6 = 0;
      v16 = *(_BYTE *)(a2 + 72);
      v17 = *(_DWORD *)(a2 + 24);
      v18 = WebCore::CryptoAlgorithmRsaKeyGenParams::publicExponentVector((WebCore::CryptoAlgorithmRsaKeyGenParams *)a2);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = &off_1E3397060;
      v19[1] = v14;
      v23 = v19;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = &off_1E3397088;
      v20[1] = v15;
      v22 = v20;
      WebCore::CryptoKeyRSA::generatePair(3, v16, 1, v17, (uint64_t)v18, a3, a4, (uint64_t *)&v23, (uint64_t *)&v22, a7);
      v21 = (uint64_t)v22;
      v22 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::CryptoAlgorithmRSA_PSS::importKey(uint64_t a1, int a2, uint64_t *a3, char *a4, int a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(void);
  void (*v45)(void);
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if ((*(unsigned int (**)(char *))(*(_QWORD *)a4 + 16))(a4) != 12)
  {
    __break(0xC471u);
    JUMPOUT(0x195771790);
  }
  if (a2 == 1)
  {
    if ((a6 | 8) == 8)
    {
      if (*((_DWORD *)a3 + 46))
        goto LABEL_65;
      v38 = *((unsigned int *)a3 + 3);
      if (v38 < 2)
        goto LABEL_60;
      v39 = *(unsigned __int8 *)(*a3 + 1);
      v40 = (char)v39;
      v41 = v39 - 127;
      v42 = v40 >= 0 ? 1 : v41;
      if (v42 + 18 > v38)
        goto LABEL_60;
      if (v42 + 17 >= v38)
      {
        __break(0xC471u);
        JUMPOUT(0x1957717A4);
      }
      v33 = a4[40];
      v43 = a4[16];
      v52[0] = 0;
      v35 = 0;
      if (CCRSACryptorImport())
        goto LABEL_55;
      v36 = WTF::fastMalloc((WTF *)0x28);
      v35 = (unsigned int *)v36;
      v37 = v52[0];
      *(_DWORD *)(v36 + 8) = 1;
      *(_BYTE *)(v36 + 12) = v43;
      *(_BYTE *)(v36 + 13) = 0;
      goto LABEL_39;
    }
LABEL_41:
    v44 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
    goto LABEL_42;
  }
  if (a2 == 2)
  {
    if ((a6 | 4) == 4)
    {
      if (*((_DWORD *)a3 + 46))
        goto LABEL_65;
      v29 = *((unsigned int *)a3 + 3);
      if (v29 < 2)
        goto LABEL_60;
      v30 = *(unsigned __int8 *)(*a3 + 1);
      v31 = (char)v30;
      v32 = v30 - 127;
      if (v31 >= 0)
        v32 = 1;
      if (v32 + 21 > v29)
        goto LABEL_60;
      if (v32 + 20 >= v29)
      {
LABEL_66:
        __break(0xC471u);
        JUMPOUT(0x19577179CLL);
      }
      v33 = a4[40];
      v34 = a4[16];
      v52[0] = 0;
      v35 = 0;
      if (CCRSACryptorImport())
        goto LABEL_55;
      v36 = WTF::fastMalloc((WTF *)0x28);
      v35 = (unsigned int *)v36;
      v37 = v52[0];
      *(_DWORD *)(v36 + 8) = 1;
      *(_BYTE *)(v36 + 12) = v34;
      *(_BYTE *)(v36 + 13) = 1;
LABEL_39:
      *(_BYTE *)(v36 + 14) = a5;
      *(_DWORD *)(v36 + 16) = a6;
      *(_QWORD *)v36 = off_1E33972B0;
      *(_QWORD *)(v36 + 24) = v37;
      *(_BYTE *)(v36 + 32) = 1;
      *(_BYTE *)(v36 + 33) = v33;
      goto LABEL_55;
    }
    goto LABEL_41;
  }
  if (a2 != 3)
  {
    v44 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_42:
    v44();
    return;
  }
  if (*((_DWORD *)a3 + 46) != 1)
  {
LABEL_65:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_66;
  }
  v16 = *a3;
  v15 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v52[0] = v16;
  v52[1] = v15;
  LOBYTE(v53) = 0;
  v55 = 0;
  if (*((_BYTE *)a3 + 32))
  {
    v53 = a3[2];
    v17 = a3[3];
    a3[2] = 0;
    a3[3] = 0;
    v54 = v17;
    v55 = 1;
  }
  v56 = *((_DWORD *)a3 + 10);
  v18 = a3[6];
  a3[6] = 0;
  v57 = v18;
  v58 = *((_WORD *)a3 + 28);
  v59 = *((_OWORD *)a3 + 4);
  v60 = a3[10];
  v19 = *(_OWORD *)(a3 + 11);
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  v20 = *(_OWORD *)(a3 + 13);
  v61 = v19;
  v62 = v20;
  v21 = *(_OWORD *)(a3 + 15);
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  v63 = v21;
  v22 = *(_OWORD *)(a3 + 17);
  *((_OWORD *)a3 + 8) = 0u;
  a3[18] = 0;
  v64 = v22;
  LOBYTE(v65) = 0;
  v67 = 0;
  if (*((_BYTE *)a3 + 168))
  {
    v65 = a3[19];
    v23 = a3[20];
    a3[19] = 0;
    a3[20] = 0;
    v66 = v23;
    v67 = 1;
  }
  v24 = a3[22];
  a3[22] = 0;
  v68 = v24;
  if (!a6)
    goto LABEL_17;
  if ((_QWORD)v19)
    v25 = 4;
  else
    v25 = 8;
  if (v25 != a6)
  {
    v45 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_62:
    v45();
    WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v52, v50);
    return;
  }
  if (v15 && (MEMORY[0x19AEA53F4](v15, "sig", 3) & 1) == 0)
  {
LABEL_61:
    v45 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
    goto LABEL_62;
  }
LABEL_17:
  switch(a4[40])
  {
    case 13:
      if (!v18)
        goto LABEL_54;
      v26 = "PS1";
      v27 = v18;
      v28 = 3;
      goto LABEL_53;
    case 14:
      if (!v18)
        goto LABEL_54;
      v26 = "PS224";
      goto LABEL_52;
    case 15:
      if (!v18)
        goto LABEL_54;
      v26 = "PS256";
      goto LABEL_52;
    case 16:
      if (!v18)
        goto LABEL_54;
      v26 = "PS384";
      goto LABEL_52;
    case 17:
      if (!v18)
        goto LABEL_54;
      v26 = "PS512";
LABEL_52:
      v27 = v18;
      v28 = 5;
LABEL_53:
      if ((MEMORY[0x19AEA53F4](v27, v26, v28) & 1) == 0)
        goto LABEL_61;
LABEL_54:
      WebCore::CryptoKeyRSA::importJwk(a4[16], a4[40] | 0x100, (uint64_t)v52, a5, a6, (uint64_t *)&v51);
      v35 = v51;
      WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v52, v46);
      break;
    default:
      goto LABEL_61;
  }
LABEL_55:
  if (!v35)
  {
LABEL_60:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
    return;
  }
  (*(void (**)(_QWORD, unsigned int *))(*(_QWORD *)*a7 + 16))(*a7, v35);
  v47 = v35 + 2;
  do
  {
    v48 = __ldaxr(v47);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v47));
  if (!v49)
  {
    atomic_store(1u, v35 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
}

uint64_t WebCore::CryptoAlgorithmSHA1::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396BA0;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA1::identifier(WebCore::CryptoAlgorithmSHA1 *this)
{
  return 13;
}

uint64_t WebCore::CryptoAlgorithmSHA1::digest(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v11 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)a5 + 136))(a5);
  v12 = *(_QWORD *)(v11 + 440);
  v13 = *(_QWORD *)(v11 + 448);
  v14 = *a2;
  *a2 = 0;
  v15 = *a3;
  *a3 = 0;
  v16 = a2[1];
  a2[1] = 0;
  v17 = a5[15];
  v24 = a5[14];
  *((_QWORD *)&v18 + 1) = v13;
  *(_QWORD *)&v18 = v12;
  v25 = v17;
  v19 = *a4;
  *a4 = 0;
  v20 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v20 = &off_1E3395BB0;
  *(_QWORD *)(v20 + 16) = v14;
  *(_QWORD *)(v20 + 24) = v16;
  *(_QWORD *)(v20 + 32) = v15;
  v21 = v25;
  *(_OWORD *)(v20 + 48) = v24;
  *(_OWORD *)(v20 + 64) = v21;
  *(_QWORD *)(v20 + 80) = v19;
  *(_QWORD *)(v20 + 88) = (v18 >> 3) & 1;
  v23 = v20;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a6 + 32))(a6, &v23);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA224::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396C28;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA224::identifier(WebCore::CryptoAlgorithmSHA224 *this)
{
  return 14;
}

uint64_t WebCore::CryptoAlgorithmSHA224::digest(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  PAL::CryptoDigest::create(1, &v20);
  v11 = v20;
  if (!v20)
    return (*(uint64_t (**)(void))(**(_QWORD **)a4 + 16))();
  v12 = *a2;
  *a2 = 0;
  v13 = *a3;
  *a3 = 0;
  v14 = a2[1];
  a2[1] = 0;
  v15 = *(_OWORD *)(a5 + 240);
  v21 = *(_OWORD *)(a5 + 224);
  v22 = v15;
  v16 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v16 = &off_1E33970B0;
  *(_QWORD *)(v16 + 16) = v11;
  *(_QWORD *)(v16 + 24) = v12;
  *(_QWORD *)(v16 + 32) = v14;
  *(_QWORD *)(v16 + 40) = v13;
  v17 = v22;
  *(_OWORD *)(v16 + 48) = v21;
  *(_OWORD *)(v16 + 64) = v17;
  v19 = v16;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a6 + 32))(a6, &v19);
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA256::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396CB0;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA256::identifier(WebCore::CryptoAlgorithmSHA256 *this)
{
  return 15;
}

uint64_t WebCore::CryptoAlgorithmSHA256::digest(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _OWORD *a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a5 + 136))(a5) + 440);
  v12 = *a2;
  *a2 = 0;
  v13 = *a3;
  *a3 = 0;
  v14 = a2[1];
  a2[1] = 0;
  v15 = a5[15];
  v21 = a5[14];
  v22 = v15;
  v16 = *a4;
  *a4 = 0;
  v17 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v17 = &off_1E3395BB0;
  *(_QWORD *)(v17 + 16) = v12;
  *(_QWORD *)(v17 + 24) = v14;
  *(_QWORD *)(v17 + 32) = v13;
  v18 = v22;
  *(_OWORD *)(v17 + 48) = v21;
  *(_OWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 80) = v16;
  *(_QWORD *)(v17 + 88) = (v11 >> 3) & 1 | 0x200000000;
  v20 = v17;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a6 + 32))(a6, &v20);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA384::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3396D38;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA384::identifier(WebCore::CryptoAlgorithmSHA384 *this)
{
  return 16;
}

uint64_t WebCore::CryptoAlgorithmSHA384::digest(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _OWORD *a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a5 + 136))(a5) + 440);
  v12 = *a2;
  *a2 = 0;
  v13 = *a3;
  *a3 = 0;
  v14 = a2[1];
  a2[1] = 0;
  v15 = a5[15];
  v21 = a5[14];
  v22 = v15;
  v16 = *a4;
  *a4 = 0;
  v17 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v17 = &off_1E3395BB0;
  *(_QWORD *)(v17 + 16) = v12;
  *(_QWORD *)(v17 + 24) = v14;
  *(_QWORD *)(v17 + 32) = v13;
  v18 = v22;
  *(_OWORD *)(v17 + 48) = v21;
  *(_OWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 80) = v16;
  *(_QWORD *)(v17 + 88) = (v11 >> 3) & 1 | 0x300000000;
  v20 = v17;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a6 + 32))(a6, &v20);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void **WebCore::CryptoAlgorithmRsaOaepParams::labelVector(WebCore::CryptoAlgorithmRsaOaepParams *this)
{
  void **v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20[8];
  unsigned int v21;
  char v22;
  char *v23;

  v1 = (void **)((char *)this + 48);
  if (*((_DWORD *)this + 15) || !*((_BYTE *)this + 40))
    return v1;
  v20[0] = 0;
  v21 = -1;
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 == -1)
  {
    *((_DWORD *)this + 8) = -1;
    *((_BYTE *)this + 40) = 0;
    goto LABEL_30;
  }
  ((void (*)(char **, char *, char *))off_1E3396DE0[v4])(&v23, v20, (char *)this + 24);
  v21 = v4;
  if (*((_BYTE *)this + 40))
  {
    v5 = *((unsigned int *)this + 8);
    if ((_DWORD)v5 == -1)
    {
      *((_DWORD *)this + 8) = -1;
      *((_BYTE *)this + 40) = 0;
    }
    else
    {
      ((void (*)(char **, char *))off_1E3396DD0[v5])(&v23, (char *)this + 24);
      v4 = v21;
      *((_DWORD *)this + 8) = -1;
      *((_BYTE *)this + 40) = 0;
      if ((_DWORD)v4 == -1)
        goto LABEL_30;
    }
  }
  v23 = &v22;
  if (!((uint64_t (*)(char **, char *))off_1E3396DF0[v4])(&v23, v20))
    goto LABEL_16;
  if (v21 == -1)
  {
LABEL_30:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_31;
  }
  v23 = &v22;
  v6 = ((uint64_t (*)(char **, char *))off_1E3396E00[v21])(&v23, v20);
  if (!v7)
    goto LABEL_16;
  v8 = (const void *)v6;
  v9 = v7;
  v10 = *((unsigned int *)this + 14);
  v11 = *((unsigned int *)this + 15);
  v12 = v7 + v11;
  if (v7 + v11 > v10)
  {
    v14 = v10 + (v10 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v12)
      v16 = v7 + v11;
    else
      v16 = v15;
    if (HIDWORD(v16))
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x195772434);
    }
    v17 = *v1;
    v18 = (void *)WTF::fastMalloc((WTF *)v16);
    *((_DWORD *)this + 14) = v16;
    *((_QWORD *)this + 6) = v18;
    memcpy(v18, v17, v11);
    if (v17)
    {
      if (*v1 == v17)
      {
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 14) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
  }
  v13 = *((unsigned int *)this + 15);
  if (v12 < v13)
    goto LABEL_31;
  memcpy((void *)(*((_QWORD *)this + 6) + v13), v8, v9);
  *((_DWORD *)this + 15) = v12;
LABEL_16:
  if (v21 != -1)
    ((void (*)(char **, char *))off_1E3396DD0[v21])(&v23, v20);
  return v1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E3396E20;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3396E20;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3) == 4)
    return WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::platformEncrypt(v3, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E3396E48;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3396E48;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3) == 4)
    return WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::platformDecrypt(v3, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3396E70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3396E70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  v2 = *a2;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(*a2 + 16) & 1;
  v3 = a2[1];
  *(_DWORD *)(v3 + 16) &= 2u;
  *a2 = 0;
  a2[1] = 0;
  v5[0] = v2;
  v5[1] = v3;
  v6 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3396E88[v6])(&v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3396EA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3396EA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 30);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E3396ED0;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3396ED0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 4)
    WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::platformSign(v4, a1 + 16, a2);
  else
    __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a1 = &off_1E3396EF8;
  v3 = *(WTF **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E3396EF8;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 4)
    WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::platformVerify(v4, a1 + 32, a2);
  else
    __break(0xC471u);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3396F20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3396F20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  v2 = *a2;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(*a2 + 16) & 8;
  v3 = a2[1];
  *(_DWORD *)(v3 + 16) &= 4u;
  *a2 = 0;
  a2[1] = 0;
  v5[0] = v2;
  v5[1] = v3;
  v6 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3396E88[v6])(&v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3396F48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3396F48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 30);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E3396F70;
  v3 = *(WTF **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v9 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, uint64_t))off_1E3396DD0[v9])(&v12, a1 + 32);
    *(_DWORD *)(a1 + 40) = -1;
  }
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E3396F70;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*((_BYTE *)this + 48))
  {
    v9 = *((unsigned int *)this + 10);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, char *))off_1E3396DD0[v9])(&v12, (char *)this + 32);
    *((_DWORD *)this + 10) = -1;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::encrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 72);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 4)
    return WebCore::CryptoAlgorithmRSA_OAEP::platformEncrypt((WebCore::CryptoAlgorithmRsaOaepParams *)(a1 + 8), v4, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)a1 = &off_1E3396F98;
  v3 = *(WTF **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF **)(a1 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v9 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, uint64_t))off_1E3396DD0[v9])(&v12, a1 + 32);
    *(_DWORD *)(a1 + 40) = -1;
  }
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v12;

  *(_QWORD *)this = &off_1E3396F98;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*((_BYTE *)this + 48))
  {
    v9 = *((unsigned int *)this + 10);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, char *))off_1E3396DD0[v9])(&v12, (char *)this + 32);
    *((_DWORD *)this + 10) = -1;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::decrypt(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 72);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 4)
    return WebCore::CryptoAlgorithmRSA_OAEP::platformDecrypt((WebCore::CryptoAlgorithmRsaOaepParams *)(a1 + 8), v4, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3396FC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3396FC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  v2 = *a2;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(*a2 + 16) & 0x41;
  v3 = a2[1];
  *(_DWORD *)(v3 + 16) &= 0x82u;
  *a2 = 0;
  a2[1] = 0;
  v5[0] = v2;
  v5[1] = v3;
  v6 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3396E88[v6])(&v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3396FE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3396FE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_OAEP::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 30);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;

  *(_QWORD *)a1 = &off_1E3397010;
  v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = &off_1E3397010;
  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::sign(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::FastMalloc const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<WTF::FastMalloc>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 40);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 4)
    WebCore::CryptoAlgorithmRSA_PSS::platformSign(v4, a1 + 48, a2);
  else
    __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;

  *(_QWORD *)a1 = &off_1E3397038;
  v3 = *(WTF **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = off_1E3226840;
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;

  *(_QWORD *)this = &off_1E3397038;
  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = off_1E3226840;
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::verify(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Function<void ()(BOOL)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,WebCore::ExceptionOr<BOOL>>::call(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 40);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 4)
    WebCore::CryptoAlgorithmRSA_PSS::platformVerify(v4, a1 + 64, a2);
  else
    __break(0xC471u);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3397060;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3397060;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_0,void,WebCore::CryptoKeyPair&&>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  v2 = *a2;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(*a2 + 16) & 8;
  v3 = a2[1];
  *(_DWORD *)(v3 + 16) &= 4u;
  *a2 = 0;
  a2[1] = 0;
  v5[0] = v2;
  v5[1] = v3;
  v6 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E3396E88[v6])(&v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3397088;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3397088;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmRSA_PSS::generateKey(WebCore::CryptoAlgorithmParameters const&,BOOL,int,WTF::Function<void ()(std::variant<WTF::RefPtr<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>>,WebCore::CryptoKeyPair> &&)> &&,WTF::Function<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &)::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 30);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmSHA224::digest(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;
  char v9;

  *(_QWORD *)a1 = &off_1E33970B0;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    v6 = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    if (v6)
    {
      v7 = v6[4];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v9, v6 + 2);
      v6[4] = -1;
      WTF::fastFree((WTF *)v6, a2);
    }
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmSHA224::digest(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;
  char v9;

  *(_QWORD *)this = &off_1E33970B0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    if (v6)
    {
      v7 = v6[4];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v9, v6 + 2);
      v6[4] = -1;
      WTF::fastFree((WTF *)v6, a2);
    }
    WTF::fastFree(v5, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmSHA224::digest(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_0,void>::call(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  WTF *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  WTF *result;
  _QWORD *v14;
  char v15;
  WTF *v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  PAL::CryptoDigest::addBytes(*(_QWORD *)(a1 + 16), *(const void **)(a1 + 24), *(_DWORD *)(a1 + 36));
  PAL::CryptoDigest::computeHash(*(_QWORD *)(a1 + 16), (unsigned __int8 **)&v16);
  v2 = *(_OWORD *)(a1 + 64);
  v18[0] = *(_OWORD *)(a1 + 48);
  v18[1] = v2;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = v16;
  v16 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E33970D8;
  v5[1] = v3;
  v5[2] = v4;
  v6 = v17;
  v17 = 0;
  v5[3] = v6;
  v14 = v5;
  v15 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v18);
  if (v8)
  {
    v10 = v8[4];
    if (v10)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 336))(v10, &v14);
  }
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  result = v16;
  if (v16)
    return (WTF *)WTF::fastFree(v16, v9);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21CryptoAlgorithmSHA2246digestEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_8FunctionIFvRKS7_EEEONS9_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__0clEvEUlRT_E_vJSK_EED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E33970D8;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21CryptoAlgorithmSHA2246digestEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_8FunctionIFvRKS7_EEEONS9_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__0clEvEUlRT_E_vJSK_EED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33970D8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21CryptoAlgorithmSHA2246digestEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_8FunctionIFvRKS7_EEEONS9_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__0clEvEUlRT_E_vJSK_EE4callESK_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 16);
}

uint64_t WebCore::CryptoAlgorithmSHA512::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3397100;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmSHA512::identifier(WebCore::CryptoAlgorithmSHA512 *this)
{
  return 17;
}

uint64_t WebCore::CryptoAlgorithmSHA512::digest(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _OWORD *a5, uint64_t a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a5 + 136))(a5) + 440);
  v12 = *a2;
  *a2 = 0;
  v13 = *a3;
  *a3 = 0;
  v14 = a2[1];
  a2[1] = 0;
  v15 = a5[15];
  v21 = a5[14];
  v22 = v15;
  v16 = *a4;
  *a4 = 0;
  v17 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v17 = &off_1E3395BB0;
  *(_QWORD *)(v17 + 16) = v12;
  *(_QWORD *)(v17 + 24) = v14;
  *(_QWORD *)(v17 + 32) = v13;
  v18 = v22;
  *(_OWORD *)(v17 + 48) = v21;
  *(_OWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 80) = v16;
  *(_QWORD *)(v17 + 88) = (v11 >> 3) & 1 | 0x400000000;
  v20 = v17;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a6 + 32))(a6, &v20);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoAlgorithmX25519::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3397188;
  *a1 = result;
  return result;
}

uint64_t WebCore::CryptoAlgorithmX25519::identifier(WebCore::CryptoAlgorithmX25519 *this)
{
  return 21;
}

uint64_t WebCore::CryptoAlgorithmX25519::generateKey(uint64_t a1, uint64_t a2, char a3, char a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((a4 & 0xCF) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 9);
  WebCore::CryptoKeyOKP::platformGeneratePair(21, 0, a3, a4, (uint64_t)&v16);
  if ((_BYTE)v18)
  {
    v9 = v16;
    v10 = v17;
    v14 = 0;
    v12 = 0;
    v13 = 0;
    *(_DWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v10 + 16) &= 0x30u;
    v16 = v9;
    v17 = v10;
    v18 = 1;
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a5 + 16))(*a5, &v16);
    if (v18 != -1)
      ((void (*)(char *, uint64_t *))off_1E3397200[v18])(&v15, &v16);
    v11 = 0;
  }
  else
  {
    LOBYTE(v12) = 30;
    v11 = 1;
    v14 = 1;
    v13 = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 30);
  }
  return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3397210[v11])(&v16, &v12);
}

uint64_t WebCore::CryptoAlgorithmX25519::deriveBits(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t result;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a3 + 13) != 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2) != 16)
  {
    __break(0xC471u);
    JUMPOUT(0x1957741D0);
  }
  v15 = a2[3];
  if (*(_BYTE *)(v15 + 13))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v16 = (_DWORD *)*a3;
  if (*(unsigned __int8 *)(*a3 + 12) != *(unsigned __int8 *)(v15 + 12))
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16 + 24))(*a3) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1957741F0);
  }
  v17 = (_DWORD *)a2[3];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 24))(v17) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x195774210);
  }
  if (v16[5] != v17[5])
    return (*(uint64_t (**)(void))(*(_QWORD *)*a6 + 16))();
  v18 = *a5;
  *a5 = 0;
  v19 = *a6;
  *a6 = 0;
  v20 = (*(_DWORD *)((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a7 + 136))(a7) + 440) >> 3) & 1;
  v21 = *a3;
  *a3 = 0;
  v22 = a2[3];
  if (v22)
  {
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v25 = a7[15];
  v30 = a7[14];
  v31 = v25;
  v26 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v26 = &off_1E3397260;
  *(_QWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 24) = v22;
  *(_QWORD *)(v26 + 32) = a4;
  *(_QWORD *)(v26 + 40) = v18;
  *(_QWORD *)(v26 + 48) = v19;
  v27 = v31;
  *(_OWORD *)(v26 + 64) = v30;
  *(_OWORD *)(v26 + 80) = v27;
  *(_BYTE *)(v26 + 96) = v20;
  v29 = v26;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a8 + 32))(a8, &v29);
  result = v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::CryptoAlgorithmX25519::importKey(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  void (*v31)(void);
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  switch(a2)
  {
    case 0:
      if (a6)
        goto LABEL_17;
      if (*((_DWORD *)a3 + 46))
        goto LABEL_41;
      if (*((_DWORD *)a3 + 3) != 32)
        goto LABEL_37;
      v13 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v13 + 8) = 1;
      *(_WORD *)(v13 + 12) = 21;
      *(_BYTE *)(v13 + 14) = a5;
      *(_DWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = off_1E3397400;
      *(_QWORD *)(v13 + 28) = 0;
      *(_QWORD *)(v13 + 20) = 0;
      *(_DWORD *)(v13 + 36) = 0;
      v14 = *a3;
      *a3 = 0;
      *(_QWORD *)(v13 + 24) = v14;
      LODWORD(v14) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = 0;
      *(_DWORD *)(v13 + 32) = v14;
      LODWORD(v14) = *((_DWORD *)a3 + 3);
      *((_DWORD *)a3 + 3) = 0;
      *(_DWORD *)(v13 + 36) = v14;
      goto LABEL_13;
    case 1:
      if (a6)
        goto LABEL_17;
      if (*((_DWORD *)a3 + 46))
        goto LABEL_41;
      WebCore::CryptoKeyOKP::importSpki(21, 0, (unsigned int *)a3, a5, 0, v35);
      goto LABEL_12;
    case 2:
      HIDWORD(v15) = a6;
      LODWORD(v15) = a6;
      if ((v15 >> 4) >= 4)
      {
LABEL_17:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 9);
        return;
      }
      if (*((_DWORD *)a3 + 46))
      {
LABEL_41:
        std::__throw_bad_variant_access[abi:sn180100]();
        JUMPOUT(0x195774564);
      }
      WebCore::CryptoKeyOKP::importPkcs8(21, 0, (unsigned int *)a3, a5, a6, v35);
LABEL_12:
      v13 = v35[0];
      if (v35[0])
        goto LABEL_13;
      goto LABEL_37;
    case 3:
      if (*((_DWORD *)a3 + 46) != 1)
        goto LABEL_41;
      v20 = *a3;
      v19 = a3[1];
      *a3 = 0;
      a3[1] = 0;
      v35[0] = v20;
      v35[1] = v19;
      LOBYTE(v36) = 0;
      v38 = 0;
      if (*((_BYTE *)a3 + 32))
      {
        v36 = a3[2];
        v21 = a3[3];
        a3[2] = 0;
        a3[3] = 0;
        v37 = v21;
        v38 = 1;
      }
      v39 = *((_DWORD *)a3 + 10);
      v22 = a3[6];
      a3[6] = 0;
      v40 = v22;
      v41 = *((_WORD *)a3 + 28);
      v42 = *((_OWORD *)a3 + 4);
      v43 = a3[10];
      v23 = *(_OWORD *)(a3 + 11);
      *((_OWORD *)a3 + 4) = 0u;
      *((_OWORD *)a3 + 5) = 0u;
      v24 = *(_OWORD *)(a3 + 13);
      v44 = v23;
      v45 = v24;
      v25 = *(_OWORD *)(a3 + 15);
      *((_OWORD *)a3 + 6) = 0u;
      *((_OWORD *)a3 + 7) = 0u;
      v46 = v25;
      v26 = *(_OWORD *)(a3 + 17);
      *((_OWORD *)a3 + 8) = 0u;
      a3[18] = 0;
      v47 = v26;
      LOBYTE(v48) = 0;
      v50 = 0;
      if (*((_BYTE *)a3 + 168))
      {
        v48 = a3[19];
        v27 = a3[20];
        a3[19] = 0;
        a3[20] = 0;
        v49 = v27;
        v50 = 1;
      }
      v28 = a3[22];
      a3[22] = 0;
      v51 = v28;
      v29 = v23;
      if ((_QWORD)v23)
        v29 = a6 == 32 || (a6 & 0xFFFFFFDF) == 16;
      if (a6 && !v29)
      {
        v31 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
LABEL_39:
        v31();
        WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v35, v33);
        return;
      }
      if (a6 && v19 && (MEMORY[0x19AEA53F4](v19, "enc", 3) & 1) == 0)
      {
        v31 = *(void (**)(void))(*(_QWORD *)*a8 + 16);
        goto LABEL_39;
      }
      WebCore::CryptoKeyOKP::importJwk(21, 0, (uint64_t)v35, a5, a6, &v34);
      v13 = v34;
      WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v35, v32);
      if (v13)
      {
LABEL_13:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, v13);
        v16 = (unsigned int *)(v13 + 8);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)(v13 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
      }
      else
      {
LABEL_37:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a8 + 16))(*a8, 26);
      }
      return;
    default:
      goto LABEL_37;
  }
}

uint64_t WebCore::addEncodedASN1Length(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  size_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  size_t v31;

  v2 = a2;
  v3 = result;
  if (a2 > 0x7F)
  {
    v12 = 2;
    if (a2 >= 0x10000)
      v12 = 3;
    if (a2 < 0x100)
      v13 = 1;
    else
      v13 = v12;
    v14 = *(unsigned int *)(result + 12);
    if ((_DWORD)v14 == *(_DWORD *)(result + 8))
    {
      v15 = v14 + (v14 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v14 + 1)
        v17 = v14 + 1;
      else
        v17 = v16;
      if (HIDWORD(v17))
        goto LABEL_55;
      v18 = *(void **)result;
      v19 = (void *)WTF::fastMalloc((WTF *)v17);
      *(_DWORD *)(v3 + 8) = v17;
      *(_QWORD *)v3 = v19;
      result = (uint64_t)memcpy(v19, v18, v14);
      if (v18)
      {
        if (*(void **)v3 == v18)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v18, v20);
      }
      v21 = (_BYTE *)(*(_QWORD *)v3 + *(unsigned int *)(v3 + 12));
    }
    else
    {
      v21 = (_BYTE *)(*(_QWORD *)result + v14);
    }
    *v21 = v13 | 0x80;
    v22 = *(unsigned int *)(v3 + 8);
    v23 = (*(_DWORD *)(v3 + 12) + 1);
    *(_DWORD *)(v3 + 12) = v23;
    v24 = v13 + v23;
    if (v13 + v23 > v22)
    {
      v25 = v22 + (v22 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v24)
        v27 = v13 + v23;
      else
        v27 = v26;
      if (HIDWORD(v27))
      {
        __break(0xC471u);
        JUMPOUT(0x195774C58);
      }
      v28 = *(void **)v3;
      v29 = (void *)WTF::fastMalloc((WTF *)v27);
      *(_DWORD *)(v3 + 8) = v27;
      *(_QWORD *)v3 = v29;
      result = (uint64_t)memcpy(v29, v28, v23);
      if (v28)
      {
        if (*(void **)v3 == v28)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v28, v30);
      }
    }
    *(_DWORD *)(v3 + 12) = v24;
    v31 = v23 - 1;
    while (v31 + v13 < *(unsigned int *)(v3 + 12))
    {
      *(_BYTE *)(*(_QWORD *)v3 + v31 + v13) = v2;
      v2 >>= 8;
      if (!--v13)
        return result;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x195774C50);
  }
  v4 = *(unsigned int *)(result + 12);
  if ((_DWORD)v4 == *(_DWORD *)(result + 8))
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= v4 + 1)
      v7 = v4 + 1;
    else
      v7 = v6;
    if (HIDWORD(v7))
    {
      __break(0xC471u);
      JUMPOUT(0x195774C60);
    }
    v8 = *(void **)result;
    v9 = (void *)WTF::fastMalloc((WTF *)v7);
    *(_DWORD *)(v3 + 8) = v7;
    *(_QWORD *)v3 = v9;
    result = (uint64_t)memcpy(v9, v8, v4);
    if (v8)
    {
      if (*(void **)v3 == v8)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v8, v10);
    }
    v11 = (_BYTE *)(*(_QWORD *)v3 + *(unsigned int *)(v3 + 12));
  }
  else
  {
    v11 = (_BYTE *)(*(_QWORD *)result + v4);
  }
  *v11 = v2;
  ++*(_DWORD *)(v3 + 12);
  return result;
}

unint64_t WebCore::CryptoAlgorithmAESCBC::platformEncrypt@<X0>(WebCore::CryptoAlgorithmAesCbcCfbParams *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CCOptions a4@<W3>, uint64_t a5@<X8>)
{
  void *v9;

  v9 = *WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a1);
  return WebCore::transformAESCBC(a5, 0, v9, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36), a3, a4);
}

unint64_t WebCore::transformAESCBC(uint64_t a1, CCOperation op, void *iv, const void *a4, size_t keyLength, uint64_t a6, CCOptions options)
{
  unint64_t result;
  size_t v11;
  char *v12;
  void *v13;
  int v14;
  size_t v15;
  CCCryptorRef cryptorRef;

  cryptorRef = 0;
  result = CCCryptorCreate(op, 0, options, a4, keyLength, iv, &cryptorRef);
  if ((_DWORD)result)
  {
    *(_BYTE *)a1 = 30;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
    return result;
  }
  result = CCCryptorGetOutputLength(cryptorRef, *(unsigned int *)(a6 + 12), 1);
  v11 = result;
  if (result)
  {
    if (HIDWORD(result))
    {
      __break(0xC471u);
      return result;
    }
    v12 = (char *)WTF::fastMalloc((WTF *)result);
  }
  else
  {
    v12 = 0;
  }
  v15 = 0;
  result = CCCryptorUpdate(cryptorRef, *(const void **)a6, *(unsigned int *)(a6 + 12), v12, v11, &v15);
  if (!(_DWORD)result)
  {
    v14 = (_DWORD)v12 + v15;
    if (options)
    {
      result = CCCryptorFinal(cryptorRef, &v12[v15], v11 - v15, &v15);
      if ((_DWORD)result)
        goto LABEL_9;
      v14 += v15;
    }
    result = CCCryptorRelease(cryptorRef);
    *(_QWORD *)a1 = v12;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v14 - (_DWORD)v12;
    *(_DWORD *)(a1 + 16) = 0;
    return result;
  }
LABEL_9:
  *(_BYTE *)a1 = 30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  if (v12)
    return WTF::fastFree((WTF *)v12, v13);
  return result;
}

WTF *WebCore::CryptoAlgorithmAESCBC::platformDecrypt@<X0>(WebCore::CryptoAlgorithmAesCbcCfbParams *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *result;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;

  v9 = WebCore::CryptoAlgorithmAesCbcCfbParams::ivVector(a1);
  WebCore::transformAESCBC((uint64_t)&v19, 1u, *v9, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36), a3, 0);
  v11 = v21;
  if (!v21)
  {
    result = v19;
    v14 = v20;
    v15 = HIDWORD(v20);
    v19 = 0;
    v20 = 0;
    if (a4 && (_DWORD)v15)
    {
      v16 = *((unsigned __int8 *)result + v15 - 1);
      if ((v16 - 17) < 0xFFFFFFF0 || v15 < v16)
      {
LABEL_10:
        *(_BYTE *)a5 = 30;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 1;
        WTF::fastFree(result, v10);
        return (WTF *)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v11])(&v22, &v19);
      }
      if (v15 - v16 < v15 - 1)
      {
        v18 = -(uint64_t)v16;
        while (__CFADD__(v15, v18))
        {
          if (*((unsigned __int8 *)result + v15 + v18) != (_DWORD)v16)
            goto LABEL_10;
          if (++v18 == -1)
            goto LABEL_17;
        }
        goto LABEL_21;
      }
LABEL_17:
      LODWORD(v15) = v15 - v16;
    }
    *(_QWORD *)a5 = result;
    *(_DWORD *)(a5 + 8) = v14;
    *(_DWORD *)(a5 + 12) = v15;
    *(_DWORD *)(a5 + 16) = 0;
    return (WTF *)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v11])(&v22, &v19);
  }
  if (v21 == 1)
  {
    v12 = v20;
    v20 = 0;
    *(_BYTE *)a5 = (_BYTE)v19;
    *(_QWORD *)(a5 + 8) = v12;
    *(_DWORD *)(a5 + 16) = 1;
    return (WTF *)((uint64_t (*)(_QWORD, _QWORD))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v11])(&v22, &v19);
  }
  result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::transformAESCFB(uint64_t a1, CCOperation op, void *iv, void *key, size_t keyLength, uint64_t a6)
{
  unint64_t result;
  size_t v9;
  char *v10;
  void *v11;
  int v12;
  int v13;
  size_t dataOutMoved;
  CCCryptorRef cryptorRef;

  cryptorRef = 0;
  result = CCCryptorCreateWithMode(op, 0xAu, 0, 0, iv, key, keyLength, 0, 0, 0, 0, &cryptorRef);
  if ((_DWORD)result)
  {
    *(_BYTE *)a1 = 30;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
    return result;
  }
  result = CCCryptorGetOutputLength(cryptorRef, *(unsigned int *)(a6 + 12), 1);
  v9 = result;
  if (result)
  {
    if (HIDWORD(result))
    {
      __break(0xC471u);
      return result;
    }
    v10 = (char *)WTF::fastMalloc((WTF *)result);
  }
  else
  {
    v10 = 0;
  }
  dataOutMoved = 0;
  result = CCCryptorUpdate(cryptorRef, *(const void **)a6, *(unsigned int *)(a6 + 12), v10, v9, &dataOutMoved);
  if ((_DWORD)result
    || (v12 = (_DWORD)v10 + dataOutMoved,
        result = CCCryptorFinal(cryptorRef, &v10[dataOutMoved], v9 - dataOutMoved, &dataOutMoved),
        (_DWORD)result))
  {
    *(_BYTE *)a1 = 30;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
    if (v10)
      return WTF::fastFree((WTF *)v10, v11);
  }
  else
  {
    v13 = v12 + dataOutMoved - (_DWORD)v10;
    result = CCCryptorRelease(cryptorRef);
    *(_QWORD *)a1 = v10;
    *(_DWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 12) = v13;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::platformEncrypt@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  void *v10;
  void *v11;
  int v12;
  size_t __n;

  WebCore::CryptoAlgorithmAesGcmParams::ivVector((WebCore::CryptoAlgorithmAesGcmParams *)a1);
  result = (uint64_t)WebCore::CryptoAlgorithmAesGcmParams::additionalDataVector((WebCore::CryptoAlgorithmAesGcmParams *)a1);
  if (a1[65])
    v7 = (WTF *)(a1[64] >> 3);
  else
    v7 = 0;
  __n = (size_t)v7;
  v8 = (WTF *)((char *)v7 + *(unsigned int *)(a2 + 12));
  if (v8)
  {
    if ((unint64_t)v8 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (WTF *)WTF::fastMalloc(v8);
    if ((_DWORD)v7)
      goto LABEL_7;
  }
  else
  {
    v9 = 0;
    if ((_DWORD)v7)
    {
LABEL_7:
      v10 = (void *)WTF::fastMalloc(v7);
      goto LABEL_10;
    }
  }
  v10 = 0;
LABEL_10:
  result = CCCryptorGCM();
  if ((_DWORD)result)
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    v12 = 1;
  }
  else
  {
    result = (uint64_t)memcpy((char *)v9 + *(unsigned int *)(a2 + 12), v10, __n);
    v12 = 0;
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = (_DWORD)v8;
    *(_DWORD *)(a3 + 12) = (_DWORD)v8;
    v9 = 0;
  }
  *(_DWORD *)(a3 + 16) = v12;
  if (!v10)
  {
    if (!v9)
      return result;
    return WTF::fastFree(v9, v11);
  }
  result = WTF::fastFree((WTF *)v10, v11);
  if (v9)
    return WTF::fastFree(v9, v11);
  return result;
}

uint64_t WebCore::CryptoAlgorithmAESGCM::platformDecrypt@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  WTF *v6;
  int v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  int v13;
  size_t __len;

  WebCore::CryptoAlgorithmAesGcmParams::ivVector((WebCore::CryptoAlgorithmAesGcmParams *)a1);
  WebCore::CryptoAlgorithmAesGcmParams::additionalDataVector((WebCore::CryptoAlgorithmAesGcmParams *)a1);
  if (a1[65])
    v6 = (WTF *)(a1[64] >> 3);
  else
    v6 = 0;
  __len = (size_t)v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (!v7)
  {
    v8 = 0;
    if (!(_DWORD)v6)
      goto LABEL_6;
LABEL_8:
    v9 = (void *)WTF::fastMalloc(v6);
    goto LABEL_9;
  }
  v8 = (WTF *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 12));
  if ((_DWORD)v6)
    goto LABEL_8;
LABEL_6:
  v9 = 0;
LABEL_9:
  v10 = *(unsigned int *)(a2 + 12) - (_QWORD)v6;
  result = CCCryptorGCM();
  if ((_DWORD)result || (result = timingsafe_bcmp(v9, (const void *)(*(_QWORD *)a2 + v10), __len), (_DWORD)result))
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v10;
    v8 = 0;
  }
  *(_DWORD *)(a3 + 16) = v13;
  if (!v9)
  {
    if (!v8)
      return result;
    return WTF::fastFree(v8, v12);
  }
  result = WTF::fastFree((WTF *)v9, v12);
  if (v8)
    return WTF::fastFree(v8, v12);
  return result;
}

unint64_t WebCore::CryptoAlgorithmAESKW::platformUnwrapKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  size_t v7;
  void *v8;
  WTF *v9;
  unsigned int v10;
  size_t rawKeyLen;

  result = CCSymmetricUnwrappedSize(1u, *(unsigned int *)(a2 + 12));
  v7 = result;
  if (result)
  {
    if (HIDWORD(result))
    {
      __break(0xC471u);
      return result;
    }
    v9 = (WTF *)WTF::fastMalloc((WTF *)result);
    rawKeyLen = v7;
    if ((v7 & 7) != 0)
    {
      *(_BYTE *)a3 = 30;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
      return WTF::fastFree(v9, v8);
    }
  }
  else
  {
    v9 = 0;
    rawKeyLen = 0;
  }
  result = CCSymmetricKeyUnwrap(1u, (const uint8_t *)*MEMORY[0x1E0C803C8], *MEMORY[0x1E0C803D0], *(const uint8_t **)(a1 + 24), *(unsigned int *)(a1 + 36), *(const uint8_t **)a2, *(unsigned int *)(a2 + 12), (uint8_t *)v9, &rawKeyLen);
  if ((_DWORD)result)
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (v9)
      return WTF::fastFree(v9, v8);
  }
  else
  {
    v10 = rawKeyLen;
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 12) = v10;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmX25519::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = &off_1E3397260;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmX25519::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E3397260;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CryptoAlgorithmX25519::deriveBits(WebCore::CryptoAlgorithmParameters const&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&,unsigned long,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::Ref<WebCore::CryptoKey,WTF::RawPtrTraits<WebCore::CryptoKey>,WTF::DefaultRefDerefTraits<WebCore::CryptoKey>> &&<void ()(WebCore::ExceptionCode)> &&,WebCore::ScriptExecutionContext &,WTF::WorkQueue &)::$_1,void>::call(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  WTF *v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD **)(a1 + 16);
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x195775830);
  }
  v3 = *(_DWORD **)(a1 + 24);
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x195775850);
  }
  if (v2[9] == 32 && v3[9] == 32 && (v21 = 0u, v22 = 0u, !cccurve25519()))
  {
    v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    v6 = 0;
    v16 = v22;
    *(_OWORD *)v4 = v21;
    *((_OWORD *)v4 + 1) = v16;
    v17 = *(_OWORD *)(a1 + 80);
    v21 = *(_OWORD *)(a1 + 64);
    v22 = v17;
  }
  else
  {
    v4 = 0;
    v5 = *(_OWORD *)(a1 + 80);
    v21 = *(_OWORD *)(a1 + 64);
    v22 = v5;
    v6 = 1;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v18 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v8 = &off_1E3397288;
  *(_BYTE *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  if ((v6 & 1) == 0)
  {
    *(_QWORD *)(v8 + 8) = v4;
    *(_QWORD *)(v8 + 16) = 0x2000000020;
    *(_BYTE *)(v8 + 24) = 1;
    v4 = 0;
  }
  *(_QWORD *)(v8 + 32) = v7;
  *(_OWORD *)(v8 + 40) = v18;
  v19 = v8;
  v20 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_13:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)&v21);
  if (v10)
  {
    v12 = v10[4];
    if (v12)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 336))(v12, &v19);
  }
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v19;
  v19 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v4)
    v15 = v6;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
    return WTF::fastFree(v4, v11);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21CryptoAlgorithmX2551910deriveBitsERKNS2_25CryptoAlgorithmParametersEONS_3RefINS2_9CryptoKeyENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEEmONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONSF_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__1clEvEUlRT_E_vJSU_EED1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)a1 = &off_1E3397288;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(WTF **)(a1 + 8);
    if (v5)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21CryptoAlgorithmX2551910deriveBitsERKNS2_25CryptoAlgorithmParametersEONS_3RefINS2_9CryptoKeyENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEEmONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONSF_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__1clEvEUlRT_E_vJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E3397288;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((_BYTE *)this + 24))
  {
    v5 = (WTF *)*((_QWORD *)this + 1);
    if (v5)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21CryptoAlgorithmX2551910deriveBitsERKNS2_25CryptoAlgorithmParametersEONS_3RefINS2_9CryptoKeyENS_12RawPtrTraitsIS8_EENS_21DefaultRefDerefTraitsIS8_EEEEmONS_8FunctionIFvRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEONSF_IFvNS2_13ExceptionCodeEEEERNS2_22ScriptExecutionContextERNS_9WorkQueueEEN3__1clEvEUlRT_E_vJSU_EE4callESU_(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  double v3;

  if (!*(_BYTE *)(a1 + 24))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 30);
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = 0.125;
    v3 = ceil((double)v1 * 0.125);
    LODWORD(v2) = *(_DWORD *)(a1 + 20);
    if (v3 > (double)v2)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 30);
    *(_DWORD *)(a1 + 20) = (unint64_t)v3;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a1 + 8);
}

uint64_t WebCore::CryptoAlgorithmECDH::platformDeriveBits@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  unint64_t v5;
  WTF *v6;
  void *v7;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v3 = *(int *)(result + 32);
  v4 = 0.0;
  if (v3 <= 2)
    v4 = dbl_1969ED248[v3];
  v5 = vcvtpd_u64_f64(v4);
  if (v5)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)v5);
  }
  else
  {
    v6 = 0;
  }
  result = CCECCryptorComputeSharedSecret();
  if ((_DWORD)result)
  {
    if (v6)
      return WTF::fastFree(v6, v7);
  }
  else
  {
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 12) = v5;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

void WebCore::CryptoAlgorithmECDSA::platformSign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  double v7;
  WTF *v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  WTF *v14;
  char *v15;
  WTF *v16;
  unsigned int *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  WTF *v58;
  int v59;
  WTF *v60;

  v6 = *(int *)(a2 + 32);
  v7 = 0.0;
  if (v6 <= 2)
    v7 = dbl_1969ED248[v6];
  if (*(unsigned __int8 *)(a1 + 40) - 13 >= 5
    || (PAL::CryptoDigest::create((*(_BYTE *)(a1 + 40) - 13), (uint64_t *)&v60), (v8 = v60) == 0))
  {
    *(_BYTE *)a4 = 30;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return;
  }
  v9 = vcvtpd_u64_f64(v7);
  PAL::CryptoDigest::addBytes((uint64_t)v60, *(const void **)a3, *(_DWORD *)(a3 + 12));
  PAL::CryptoDigest::computeHash((uint64_t)v8, (unsigned __int8 **)&v58);
  v10 = 2 * v9;
  v11 = 2 * v9 + 8;
  if (2 * v9 == -8)
  {
    v12 = 0;
  }
  else
  {
    if (HIDWORD(v11))
    {
      __break(0xC471u);
      goto LABEL_106;
    }
    v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)(2 * v9 + 8));
  }
  v13 = v11 & 0xFFFFFFFE;
  v57 = v13;
  v14 = v58;
  if (!CCECCryptorSignHash())
  {
    v55 = 0;
    v56 = 0;
    if (v10)
    {
      if (HIDWORD(v10))
      {
        __break(0xC471u);
        JUMPOUT(0x195775F0CLL);
      }
      v19 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
      LODWORD(v56) = 2 * v9;
      v55 = (char *)v19;
      if ((v11 & 0xFFFFFFFE) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195775F14);
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = v12[1];
    v21 = (char)v20;
    v22 = v20 - 125;
    if (v21 < 0)
      v23 = v22;
    else
      v23 = 3;
    if (v13 <= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x195775F1CLL);
    }
    v24 = v12[v23];
    v25 = v9 - v24;
    if (v9 <= v24)
    {
      if (v9 < v24)
        v23 = v23 - v9 + v24;
      v32 = v9;
    }
    else
    {
      if (v25 > (2 * v9))
      {
        v26 = (2 * v9) + ((unint64_t)(2 * v9) >> 2);
        if (v26 >= 0x10)
          v27 = v26 + 1;
        else
          v27 = 16;
        if (v27 <= v25)
          v28 = v25;
        else
          v28 = v27;
        if (HIDWORD(v28))
        {
          __break(0xC471u);
          goto LABEL_103;
        }
        v29 = WTF::fastMalloc((WTF *)v28);
        v31 = (WTF *)v29;
        LODWORD(v56) = v28;
        v55 = (char *)v29;
        if (v19)
        {
          if ((WTF *)v29 == v19)
          {
            v31 = 0;
            v55 = 0;
            LODWORD(v56) = 0;
          }
          WTF::fastFree(v19, v30);
        }
        v19 = v31;
      }
      HIDWORD(v56) = v25;
      bzero(v19, v9 - v12[v23]);
      v32 = v12[v23];
    }
    v33 = v23 + 1;
    if (v13 >= v23 + 1 && v13 - (v23 + 1) >= v32)
    {
      if (v32)
      {
        v34 = v32 + HIDWORD(v56);
        v35 = v55;
        if (v34 > v56)
        {
          v44 = v56 + ((unint64_t)v56 >> 2);
          if (v44 >= 0x10)
            v45 = v44 + 1;
          else
            v45 = 16;
          if (v45 <= v34)
            v46 = v32 + HIDWORD(v56);
          else
            v46 = v45;
          if (HIDWORD(v46))
          {
LABEL_104:
            __break(0xC471u);
            JUMPOUT(0x195775F3CLL);
          }
          LODWORD(v56) = v46;
          v47 = (char *)WTF::fastMalloc((WTF *)v46);
          v55 = v47;
          memcpy(v47, v35, HIDWORD(v56));
          if (v35)
          {
            if (v47 == v35)
            {
              v47 = 0;
              v55 = 0;
              LODWORD(v56) = 0;
            }
            WTF::fastFree((WTF *)v35, v48);
          }
          v35 = v47;
        }
        memcpy(&v35[HIDWORD(v56)], &v12[v33], v32);
        HIDWORD(v56) += v32;
      }
      v36 = v32 + v33 + 1;
      if (v13 <= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x195775F24);
      }
      v37 = v12[v36];
      v15 = (char *)(v9 - v37);
      if (v9 <= v37)
      {
        if (v9 >= v37)
          v36 = v32 + v33 + 1;
        else
          v36 = v36 - v9 + v37;
      }
      else
      {
        v38 = HIDWORD(v56);
        v39 = (unint64_t)&v15[HIDWORD(v56)];
        if (v39 > HIDWORD(v56) && v39 > v56)
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, (WTF *)&v15[HIDWORD(v56)]);
          v15 = (char *)(v9 - v12[v36]);
        }
        HIDWORD(v56) = v39;
        bzero(&v55[v38], (size_t)v15);
        v9 = v12[v36];
      }
      v41 = v36 + 1;
      if (v13 >= v36 + 1 && v13 - (v36 + 1) >= v9)
      {
        v42 = HIDWORD(v56);
        if (!v9)
        {
LABEL_69:
          *(_QWORD *)a4 = v55;
          *(_DWORD *)(a4 + 8) = v56;
          *(_DWORD *)(a4 + 12) = v42;
          *(_DWORD *)(a4 + 16) = 0;
          v14 = v58;
          goto LABEL_70;
        }
        v43 = v9 + HIDWORD(v56);
        if (v43 <= v56)
        {
LABEL_67:
          if (v43 < HIDWORD(v56))
          {
            __break(0xC471u);
            JUMPOUT(0x195775F2CLL);
          }
          memcpy(&v55[HIDWORD(v56)], &v12[v41], v9);
          LODWORD(v42) = v9 + v42;
          goto LABEL_69;
        }
        v49 = v56 + ((unint64_t)v56 >> 2);
        if (v49 >= 0x10)
          v50 = v49 + 1;
        else
          v50 = 16;
        if (v50 <= v43)
          v51 = v9 + HIDWORD(v56);
        else
          v51 = v50;
        if (!HIDWORD(v51))
        {
          v52 = v55;
          v53 = (char *)WTF::fastMalloc((WTF *)v51);
          LODWORD(v56) = v51;
          v55 = v53;
          memcpy(v53, v52, v42);
          if (v52)
          {
            if (v55 == v52)
            {
              v55 = 0;
              LODWORD(v56) = 0;
            }
            WTF::fastFree((WTF *)v52, v54);
          }
          goto LABEL_67;
        }
        __break(0xC471u);
LABEL_106:
        JUMPOUT(0x195775F04);
      }
    }
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  *(_BYTE *)a4 = 30;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 1;
  if (!v12)
  {
    if (!v14)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_70:
  WTF::fastFree((WTF *)v12, v15);
  if (v14)
  {
LABEL_14:
    v58 = 0;
    v59 = 0;
    WTF::fastFree(v14, v15);
  }
LABEL_15:
  v16 = v60;
  if (v60)
  {
    v17 = *(unsigned int **)v60;
    *(_QWORD *)v60 = 0;
    if (v17)
    {
      v18 = v17[4];
      if ((_DWORD)v18 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v18])(&v58, v17 + 2);
      v17[4] = -1;
      WTF::fastFree((WTF *)v17, v15);
    }
    WTF::fastFree(v16, v15);
  }
}

void WebCore::CryptoAlgorithmECDSA::platformVerify(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  double v9;
  int v10;
  CC_LONG v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  WTF *v35;
  char v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  size_t v40;
  uint64_t v41;
  size_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  WTF *v48;
  char v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  size_t v53;
  size_t v54;
  unint64_t v55;
  WTF *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  WTF *v65;
  void *v66;
  int v67;
  int v68;
  size_t v69;
  char v70;
  uint64_t v71;
  void *__src;
  WTF *__srca;
  unint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  WTF *v78;
  WTF *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  WTF *v84;

  v8 = a2[8];
  v9 = 0.0;
  if (v8 <= 2)
    v9 = dbl_1969ED248[v8];
  v10 = *(unsigned __int8 *)(a1 + 40);
  v11 = *(_DWORD *)(a4 + 12);
  if (v11)
  {
    v12 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a4 + 12));
    memcpy(v12, *(const void **)a4, *(unsigned int *)(a4 + 12));
  }
  else
  {
    v12 = 0;
  }
  if ((v10 - 13) >= 5
    || (PAL::CryptoDigest::create((v10 - 13), (uint64_t *)&v84), (v13 = v84) == 0))
  {
    *(_BYTE *)a5 = 30;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
    if (v12)
      goto LABEL_16;
    return;
  }
  v14 = vcvtpd_u64_f64(v9);
  PAL::CryptoDigest::addBytes((uint64_t)v84, v12, v11);
  PAL::CryptoDigest::computeHash((uint64_t)v13, (unsigned __int8 **)&v83);
  v16 = *((unsigned int *)a3 + 3);
  v17 = 2 * v14;
  if (2 * v14 != v16)
    goto LABEL_30;
  v18 = 0;
  if (!v14)
  {
    v19 = 0;
    goto LABEL_19;
  }
  v19 = 1;
  do
  {
    if (v16 == v18)
    {
      __break(0xC471u);
      goto LABEL_108;
    }
    if (*(_BYTE *)(*a3 + v18))
      goto LABEL_19;
    v19 = ++v18 < v14;
  }
  while (v14 != v18);
  v18 = v14;
LABEL_19:
  v20 = v16 - v14;
  if (v16 <= v14)
    goto LABEL_30;
  v21 = 0;
  v22 = *a3 + v14;
  while (1)
  {
    v23 = *(unsigned __int8 *)(v22 + v21);
    if (*(_BYTE *)(v22 + v21))
      break;
    if (v20 == ++v21)
      goto LABEL_30;
  }
  if (!v19)
  {
LABEL_30:
    *(_BYTE *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 0;
    goto LABEL_31;
  }
  if (v18 >= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1957765B0);
  }
  v24 = *(unsigned __int8 *)(*a3 + v18);
  v81 = 0;
  v82 = 0;
  v70 = v24;
  __src = (void *)(v24 >> 7);
  v25 = (WTF *)((v24 >> 7) + (v23 >> 7));
  v74 = v17 - v18;
  v77 = v25;
  if ((WTF *)(v18 + v14 + v21) == (WTF *)((char *)v25 + 3 * v14 + 6))
    goto LABEL_39;
  v26 = v17 - v18;
  if (((unint64_t)v25 + v17 - v18 - v21 + 6) >> 32)
  {
    __break(0xC471u);
    goto LABEL_103;
  }
  v68 = v26 + (_DWORD)v25 - v21 + 6;
  v27 = (WTF *)WTF::fastMalloc((WTF *)((char *)v25 + v26 - v21 + 6));
  LODWORD(v82) = v68;
  v81 = v27;
  v29 = v74;
  v28 = v77;
  if (v68)
  {
    *(_BYTE *)v27 = 48;
    goto LABEL_40;
  }
LABEL_39:
  v32 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)1, (unint64_t)&WebCore::SequenceMark);
  v29 = v74;
  v28 = v77;
  *((_BYTE *)v81 + HIDWORD(v82)) = *v32;
LABEL_40:
  ++HIDWORD(v82);
  WebCore::addEncodedASN1Length((uint64_t)&v81, (unint64_t)v28 + v29 - v21 + 4);
  v33 = HIDWORD(v82);
  if (HIDWORD(v82) == (_DWORD)v82)
  {
    v34 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)(HIDWORD(v82) + 1), (unint64_t)&WebCore::IntegerMark);
    v33 = HIDWORD(v82);
    v35 = v81;
    v36 = *v34;
  }
  else
  {
    v35 = v81;
    v36 = 2;
  }
  *((_BYTE *)v35 + v33) = v36;
  ++HIDWORD(v82);
  v78 = (WTF *)(v14 - v18);
  WebCore::addEncodedASN1Length((uint64_t)&v81, (unint64_t)__src + v14 - v18);
  if (v70 < 0)
  {
    if (HIDWORD(v82) == (_DWORD)v82)
    {
      v37 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)(HIDWORD(v82) + 1), (unint64_t)&WebCore::InitialOctet);
      *((_BYTE *)v81 + HIDWORD(v82)) = *v37;
    }
    else
    {
      *((_BYTE *)v81 + HIDWORD(v82)) = 0;
    }
    ++HIDWORD(v82);
  }
  v38 = *((unsigned int *)a3 + 3);
  v39 = v38 >= v18;
  v40 = v38 - v18;
  if (!v39)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  v41 = *a3;
  v42 = v14 - v18;
  if (v78 == (WTF *)-1)
  {
    v42 = v40;
  }
  else if (v40 < (unint64_t)v78)
  {
    goto LABEL_103;
  }
  v43 = HIDWORD(v82);
  if (v42)
  {
    v44 = v42 + HIDWORD(v82);
    v75 = v44;
    if (v44 > v82)
    {
      v69 = HIDWORD(v82);
      v71 = *a3;
      v79 = (WTF *)v42;
      v57 = v82 + ((unint64_t)v82 >> 2);
      if (v57 >= 0x10)
        v58 = v57 + 1;
      else
        v58 = 16;
      if (v58 <= v44)
        v59 = v42 + HIDWORD(v82);
      else
        v59 = v58;
      if (HIDWORD(v59))
      {
        __break(0xC471u);
        JUMPOUT(0x1957765D0);
      }
      __srca = v81;
      v67 = v59;
      v60 = (WTF *)WTF::fastMalloc((WTF *)v59);
      LODWORD(v82) = v67;
      v81 = v60;
      memcpy(v60, __srca, v69);
      v41 = v71;
      v44 = v75;
      v42 = (size_t)v79;
      if (__srca)
      {
        if (v81 == __srca)
        {
          v81 = 0;
          LODWORD(v82) = 0;
        }
        WTF::fastFree(__srca, v61);
        v44 = v75;
        v42 = (size_t)v79;
        v41 = v71;
      }
    }
    if (v44 < HIDWORD(v82))
    {
LABEL_104:
      __break(0xC471u);
      JUMPOUT(0x1957765C0);
    }
    memcpy((char *)v81 + HIDWORD(v82), (const void *)(v41 + v18), v42);
    v43 = v75;
    HIDWORD(v82) = v75;
  }
  v45 = v23 >> 7;
  v46 = v43;
  if (v43 == (_DWORD)v82)
  {
    v47 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)(v43 + 1), (unint64_t)&WebCore::IntegerMark);
    v45 = v23 >> 7;
    v46 = HIDWORD(v82);
    v48 = v81;
    v49 = *v47;
  }
  else
  {
    v48 = v81;
    v49 = 2;
  }
  *((_BYTE *)v48 + v46) = v49;
  ++HIDWORD(v82);
  WebCore::addEncodedASN1Length((uint64_t)&v81, v45 + v20 - v21);
  if ((v23 & 0x80) != 0)
  {
    if (HIDWORD(v82) == (_DWORD)v82)
    {
      v50 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)(HIDWORD(v82) + 1), (unint64_t)&WebCore::InitialOctet);
      *((_BYTE *)v81 + HIDWORD(v82)) = *v50;
    }
    else
    {
      *((_BYTE *)v81 + HIDWORD(v82)) = 0;
    }
    ++HIDWORD(v82);
  }
  v51 = *((unsigned int *)a3 + 3);
  if (v14 + v21 > v51)
    goto LABEL_103;
  v52 = *a3;
  v53 = v51 - v14 - v21;
  if (v20 + 1 != v21)
  {
    v39 = v53 >= v20 - v21;
    v53 = v20 - v21;
    if (!v39)
      goto LABEL_103;
  }
  v54 = HIDWORD(v82);
  if (!v53)
    goto LABEL_74;
  v55 = v53 + HIDWORD(v82);
  if (v55 <= v82)
    goto LABEL_72;
  v62 = v82 + ((unint64_t)v82 >> 2);
  if (v62 >= 0x10)
    v63 = v62 + 1;
  else
    v63 = 16;
  if (v63 <= v55)
    v64 = v53 + HIDWORD(v82);
  else
    v64 = v63;
  if (HIDWORD(v64))
  {
    __break(0xC471u);
LABEL_108:
    JUMPOUT(0x1957765A8);
  }
  v76 = v64;
  v80 = v81;
  v65 = (WTF *)WTF::fastMalloc((WTF *)v64);
  LODWORD(v82) = v76;
  v81 = v65;
  memcpy(v65, v80, v54);
  if (v80)
  {
    if (v81 == v80)
    {
      v81 = 0;
      LODWORD(v82) = 0;
    }
    WTF::fastFree(v80, v66);
  }
LABEL_72:
  if (v55 < HIDWORD(v82))
  {
    __break(0xC471u);
    JUMPOUT(0x1957765C8);
  }
  memcpy((char *)v81 + HIDWORD(v82), (const void *)(v52 + v14 + v21), v53);
  HIDWORD(v82) = v53 + v54;
LABEL_74:
  if (CCECCryptorVerifyHash())
    WTFLogAlways();
  *(_BYTE *)a5 = 0;
  *(_DWORD *)(a5 + 16) = 0;
  v56 = v81;
  if (v81)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree(v56, v15);
  }
LABEL_31:
  if (v83)
    WTF::fastFree(v83, v15);
  v30 = *(unsigned int **)v13;
  *(_QWORD *)v13 = 0;
  if (v30)
  {
    v31 = v30[4];
    if ((_DWORD)v31 != -1)
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v31])(&v83, v30 + 2);
    v30[4] = -1;
    WTF::fastFree((WTF *)v30, v15);
  }
  WTF::fastFree(v13, v15);
  if (v12)
LABEL_16:
    WTF::fastFree((WTF *)v12, a2);
}

uint64_t WebCore::CryptoAlgorithmHMAC::platformVerify@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  const void *v8;
  size_t v9;
  CCHmacAlgorithm v10;
  WTF *v11;
  void *v12;
  void *v13;
  BOOL v14;

  v5 = *(unsigned __int8 *)(result + 20) - 13;
  if (v5 >= 5)
  {
    *(_BYTE *)a4 = 30;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  else
  {
    v7 = result;
    v8 = *(const void **)a3;
    v9 = *(unsigned int *)(a3 + 12);
    v10 = dword_1969ED260[(char)v5];
    v11 = (WTF *)qword_1969ED278[(char)v5];
    v12 = (void *)WTF::fastMalloc(v11);
    CCHmac(v10, *(const void **)(v7 + 24), *(unsigned int *)(v7 + 36), v8, v9, v12);
    v14 = *(_DWORD *)(a2 + 12) == (_DWORD)v11 && timingsafe_bcmp(v12, *(const void **)a2, (size_t)v11) == 0;
    *(_BYTE *)a4 = v14;
    *(_DWORD *)(a4 + 16) = 0;
    return WTF::fastFree((WTF *)v12, v13);
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmPBKDF2::platformDeriveBits@<X0>(uint64_t this@<X0>, const WebCore::CryptoAlgorithmPbkdf2Params *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  size_t derivedKeyLen;
  uint8_t *v8;
  const char *v9;
  size_t v10;
  const uint8_t *v11;
  size_t v12;
  CCPseudoRandomAlgorithm v13;
  void *v14;

  v5 = this;
  derivedKeyLen = a3 >> 3;
  if (a3 < 8)
  {
    v8 = 0;
  }
  else
  {
    if (a3 >> 35)
    {
      __break(0xC471u);
      return this;
    }
    v8 = (uint8_t *)WTF::fastMalloc((WTF *)(a3 >> 3));
  }
  if (*((_QWORD *)a2 + 3))
    v9 = (const char *)*((_QWORD *)a2 + 3);
  else
    v9 = (const char *)&str_62;
  v10 = *((unsigned int *)a2 + 9);
  v11 = (const uint8_t *)*WebCore::CryptoAlgorithmAesGcmParams::ivVector((WebCore::CryptoAlgorithmAesGcmParams *)v5);
  v12 = *((unsigned int *)WebCore::CryptoAlgorithmAesGcmParams::ivVector((WebCore::CryptoAlgorithmAesGcmParams *)v5) + 3);
  if (*(unsigned __int8 *)(v5 + 64) - 13 < 5)
    v13 = (*(_BYTE *)(v5 + 64) - 13) + 1;
  else
    v13 = 0;
  this = CCKeyDerivationPBKDF(2u, v9, v10, v11, v12, v13, *(_DWORD *)(v5 + 40), v8, derivedKeyLen);
  if ((_DWORD)this)
  {
    *(_BYTE *)a4 = 30;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    if (v8)
      return WTF::fastFree((WTF *)v8, v14);
  }
  else
  {
    *(_QWORD *)a4 = v8;
    *(_DWORD *)(a4 + 8) = derivedKeyLen;
    *(_DWORD *)(a4 + 12) = derivedKeyLen;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::platformEncrypt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unint64_t v4;
  WTF *v5;
  uint64_t result;
  void *v7;
  WTF *v8[2];
  WTF *v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8[0] = 0;
  v8[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(a1 + 24), (uint64_t)&v9, (uint64_t)v8))
  {
    WTFLogAlways();
    v4 = 0;
  }
  else
  {
    v4 = 8 * HIDWORD(v10);
  }
  if (v8[0])
    WTF::fastFree(v8[0], v3);
  if (v9)
    WTF::fastFree(v9, v3);
  v5 = (WTF *)(v4 >> 3);
  if (v4)
    v4 = WTF::fastMalloc((WTF *)(v4 >> 3));
  v9 = v5;
  result = CCRSACryptorEncrypt();
  if ((_DWORD)result)
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (v4)
      return WTF::fastFree((WTF *)v4, v7);
  }
  else
  {
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = (_DWORD)v5;
    *(_DWORD *)(a2 + 12) = (_DWORD)v5;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::platformDecrypt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unint64_t v4;
  WTF *v5;
  unsigned int v6;
  uint64_t result;
  void *v8;
  int v9;
  WTF *v10[2];
  WTF *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(a1 + 24), (uint64_t)&v11, (uint64_t)v10))
  {
    WTFLogAlways();
    v4 = 0;
  }
  else
  {
    v4 = 8 * HIDWORD(v12);
  }
  if (v10[0])
    WTF::fastFree(v10[0], v3);
  if (v11)
    WTF::fastFree(v11, v3);
  v5 = (WTF *)(v4 >> 3);
  v11 = 0;
  LODWORD(v12) = 0;
  HIDWORD(v12) = v4 >> 3;
  if (v4)
  {
    v4 = WTF::fastMalloc((WTF *)(v4 >> 3));
    LODWORD(v12) = (_DWORD)v5;
    v11 = (WTF *)v4;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  v10[0] = v5;
  result = CCRSACryptorDecrypt();
  if ((_DWORD)result)
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (v4)
      return WTF::fastFree((WTF *)v4, v8);
  }
  else
  {
    v9 = (int)v10[0];
    if (v10[0] > v5 && v10[0] > (WTF *)v6)
    {
      result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v11, v10[0]);
      v4 = (unint64_t)v11;
      v6 = v12;
    }
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v9;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

void WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::platformSign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  WTF *v9;
  unint64_t v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  WTF *v15[2];
  WTF *v16;
  uint64_t v17;

  v5 = a1 + 24;
  v6 = *(unsigned __int8 *)(v5 + 9);
  v16 = 0;
  v17 = 0;
  v15[0] = 0;
  v15[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)v5, (uint64_t)&v16, (uint64_t)v15))
  {
    WTFLogAlways();
    v8 = 0;
  }
  else
  {
    v8 = 8 * HIDWORD(v17);
  }
  if (v15[0])
    WTF::fastFree(v15[0], v7);
  if (v16)
    WTF::fastFree(v16, v7);
  if ((v6 - 13) >= 5
    || (PAL::CryptoDigest::create((v6 - 13), (uint64_t *)v15), (v9 = v15[0]) == 0))
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  PAL::CryptoDigest::addBytes((uint64_t)v15[0], *(const void **)a2, *(_DWORD *)(a2 + 12));
  PAL::CryptoDigest::computeHash((uint64_t)v9, (unsigned __int8 **)&v16);
  v10 = v8 >> 3;
  if (v8)
    v8 = WTF::fastMalloc((WTF *)(v8 >> 3));
  v11 = v16;
  if (CCRSACryptorSign())
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (v8)
      WTF::fastFree((WTF *)v8, v12);
    if (!v11)
      goto LABEL_17;
  }
  else
  {
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 12) = v10;
    *(_DWORD *)(a3 + 16) = 0;
    if (!v11)
      goto LABEL_17;
  }
  WTF::fastFree(v11, v12);
LABEL_17:
  v13 = *(unsigned int **)v9;
  *(_QWORD *)v9 = 0;
  if (v13)
  {
    v14 = v13[4];
    if ((_DWORD)v14 != -1)
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v14])(&v16, v13 + 2);
    v13[4] = -1;
    WTF::fastFree((WTF *)v13, v12);
  }
  WTF::fastFree(v9, v12);
}

void WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::platformVerify(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  WTF *v5;
  WTF *v6;
  int v7;
  void *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;

  if (*(unsigned __int8 *)(a1 + 33) - 13 < 5
    && (PAL::CryptoDigest::create((*(_BYTE *)(a1 + 33) - 13), (uint64_t *)&v13), (v5 = v13) != 0))
  {
    PAL::CryptoDigest::addBytes((uint64_t)v13, *(const void **)a2, *(_DWORD *)(a2 + 12));
    PAL::CryptoDigest::computeHash((uint64_t)v5, (unsigned __int8 **)&v12);
    v6 = v12;
    v7 = CCRSACryptorVerify();
    if (v7 == -4304)
    {
      v9 = 0;
      *(_BYTE *)a3 = 0;
    }
    else if (v7)
    {
      *(_BYTE *)a3 = 30;
      *(_QWORD *)(a3 + 8) = 0;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)a3 = 1;
    }
    *(_DWORD *)(a3 + 16) = v9;
    if (v6)
      WTF::fastFree(v6, v8);
    v10 = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    if (v10)
    {
      v11 = v10[4];
      if ((_DWORD)v11 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v12, v10 + 2);
      v10[4] = -1;
      WTF::fastFree((WTF *)v10, v8);
    }
    WTF::fastFree(v5, v8);
  }
  else
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::platformEncrypt@<X0>(WebCore::CryptoAlgorithmRsaOaepParams *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  void *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  WTF *v10;
  void *v11;
  WTF *v12[2];
  WTF *v13;
  uint64_t v14;

  v5 = *(unsigned __int8 *)(a2 + 33);
  WebCore::CryptoAlgorithmRsaOaepParams::labelVector(a1);
  v13 = 0;
  v14 = 0;
  v12[0] = 0;
  v12[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(a2 + 24), (uint64_t)&v13, (uint64_t)v12))
  {
    WTFLogAlways();
    v7 = 0;
  }
  else
  {
    v7 = 8 * HIDWORD(v14);
  }
  if (v12[0])
    WTF::fastFree(v12[0], v6);
  result = (uint64_t)v13;
  if (v13)
    result = WTF::fastFree(v13, v6);
  if ((v5 - 13) >= 5)
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    v9 = v7 >> 3;
    if (v7)
      v10 = (WTF *)WTF::fastMalloc((WTF *)(v7 >> 3));
    else
      v10 = 0;
    v13 = (WTF *)(v7 >> 3);
    result = CCRSACryptorEncrypt();
    if ((_DWORD)result)
    {
      *(_BYTE *)a3 = 30;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
      if (v10)
        return WTF::fastFree(v10, v11);
    }
    else
    {
      *(_QWORD *)a3 = v10;
      *(_DWORD *)(a3 + 8) = v9;
      *(_QWORD *)(a3 + 12) = v9;
    }
  }
  return result;
}

uint64_t WebCore::CryptoAlgorithmRSA_OAEP::platformDecrypt@<X0>(WebCore::CryptoAlgorithmRsaOaepParams *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  void *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  WTF *v10;
  void *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  void *v17;
  WTF *v18[2];
  WTF *v19;
  uint64_t v20;

  v5 = *(unsigned __int8 *)(a2 + 33);
  WebCore::CryptoAlgorithmRsaOaepParams::labelVector(a1);
  v19 = 0;
  v20 = 0;
  v18[0] = 0;
  v18[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(a2 + 24), (uint64_t)&v19, (uint64_t)v18))
  {
    WTFLogAlways();
    v7 = 0;
  }
  else
  {
    v7 = 8 * HIDWORD(v20);
  }
  if (v18[0])
    WTF::fastFree(v18[0], v6);
  result = (uint64_t)v19;
  if (v19)
    result = WTF::fastFree(v19, v6);
  if ((v5 - 13) >= 5)
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v9 = v7 >> 3;
  if (v7)
    v10 = (WTF *)WTF::fastMalloc((WTF *)(v7 >> 3));
  else
    v10 = 0;
  v19 = (WTF *)(v7 >> 3);
  result = CCRSACryptorDecrypt();
  if ((_DWORD)result)
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (v10)
      return WTF::fastFree(v10, v11);
  }
  else
  {
    v12 = (int)v19;
    if (v9 >= (unint64_t)v19)
    {
      v15 = v7 >> 3;
      v16 = v10;
    }
    else
    {
      v13 = v9 + (v7 >> 5);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)v19)
        v15 = (unint64_t)v19;
      else
        v15 = v14;
      if (HIDWORD(v15))
      {
        __break(0xC471u);
        return result;
      }
      v16 = (WTF *)WTF::fastMalloc((WTF *)v15);
      result = (uint64_t)memcpy(v16, v10, v7 >> 3);
      if (v10)
      {
        if (v16 == v10)
        {
          LODWORD(v15) = 0;
          v16 = 0;
        }
        result = WTF::fastFree(v10, v17);
      }
    }
    *(_QWORD *)a3 = v16;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v12;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

void WebCore::CryptoAlgorithmRSA_PSS::platformSign(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  void *v6;
  unint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  WTF *v14[3];
  WTF *v15;
  uint64_t v16;

  v5 = *(unsigned __int8 *)(a1 + 33);
  v15 = 0;
  v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(a1 + 24), (uint64_t)&v15, (uint64_t)v14))
  {
    WTFLogAlways();
    v7 = 0;
  }
  else
  {
    v7 = 8 * HIDWORD(v16);
  }
  if (v14[0])
    WTF::fastFree(v14[0], v6);
  if (v15)
    WTF::fastFree(v15, v6);
  if ((v5 - 13) >= 5
    || (PAL::CryptoDigest::create((v5 - 13), (uint64_t *)v14), (v8 = v14[0]) == 0))
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  PAL::CryptoDigest::addBytes((uint64_t)v14[0], *(const void **)a2, *(_DWORD *)(a2 + 12));
  PAL::CryptoDigest::computeHash((uint64_t)v8, (unsigned __int8 **)&v15);
  v9 = (WTF *)(v7 >> 3);
  if (v7)
    v7 = WTF::fastMalloc((WTF *)(v7 >> 3));
  v14[2] = v9;
  v10 = v15;
  if (CCRSACryptorSign())
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (v7)
      WTF::fastFree((WTF *)v7, v11);
    if (!v10)
      goto LABEL_17;
  }
  else
  {
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = (_DWORD)v9;
    *(_DWORD *)(a3 + 12) = (_DWORD)v9;
    *(_DWORD *)(a3 + 16) = 0;
    if (!v10)
      goto LABEL_17;
  }
  WTF::fastFree(v10, v11);
LABEL_17:
  v12 = *(unsigned int **)v8;
  *(_QWORD *)v8 = 0;
  if (v12)
  {
    v13 = v12[4];
    if ((_DWORD)v13 != -1)
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v13])(&v15, v12 + 2);
    v12[4] = -1;
    WTF::fastFree((WTF *)v12, v11);
  }
  WTF::fastFree(v8, v11);
}

void WebCore::CryptoAlgorithmRSA_PSS::platformVerify(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  WTF *v5;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;

  if (*(unsigned __int8 *)(a1 + 33) - 13 < 5
    && (PAL::CryptoDigest::create((*(_BYTE *)(a1 + 33) - 13), (uint64_t *)&v11), (v5 = v11) != 0))
  {
    PAL::CryptoDigest::addBytes((uint64_t)v11, *(const void **)a2, *(_DWORD *)(a2 + 12));
    PAL::CryptoDigest::computeHash((uint64_t)v5, (unsigned __int8 **)&v10);
    v6 = v10;
    *(_BYTE *)a3 = CCRSACryptorVerify() == 0;
    *(_DWORD *)(a3 + 16) = 0;
    if (v6)
      WTF::fastFree(v6, v7);
    v8 = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    if (v8)
    {
      v9 = v8[4];
      if ((_DWORD)v9 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v10, v8 + 2);
      v8[4] = -1;
      WTF::fastFree((WTF *)v8, v7);
    }
    WTF::fastFree(v5, v7);
  }
  else
  {
    *(_BYTE *)a3 = 30;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
}

WTF::StringImpl *WebCore::CryptoAlgorithmRegistry::platformRegisterAlgorithms(WebCore::CryptoAlgorithmRegistry *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *result;
  WTF::StringImpl *v44;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 8u, (WTF::StringImpl *)WebCore::CryptoAlgorithmAESCBC::create);
  v3 = v44;
  v44 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0xAu, (WTF::StringImpl *)WebCore::CryptoAlgorithmAESCFB::create);
  v5 = v44;
  v44 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 7u, (WTF::StringImpl *)WebCore::CryptoAlgorithmAESCTR::create);
  v7 = v44;
  v44 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 9u, (WTF::StringImpl *)WebCore::CryptoAlgorithmAESGCM::create);
  v9 = v44;
  v44 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0xBu, (WTF::StringImpl *)WebCore::CryptoAlgorithmAESKW::create);
  v11 = v44;
  v44 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 6u, (WTF::StringImpl *)WebCore::CryptoAlgorithmECDH::create);
  v13 = v44;
  v44 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 5u, (WTF::StringImpl *)WebCore::CryptoAlgorithmECDSA::create);
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0x14u, (WTF::StringImpl *)WebCore::CryptoAlgorithmEd25519::create);
  v17 = v44;
  v44 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0x12u, (WTF::StringImpl *)WebCore::CryptoAlgorithmHKDF::create);
  v19 = v44;
  v44 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0xCu, (WTF::StringImpl *)WebCore::CryptoAlgorithmHMAC::create);
  v21 = v44;
  v44 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0x13u, (WTF::StringImpl *)WebCore::CryptoAlgorithmPBKDF2::create);
  v23 = v44;
  v44 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 1u, (WTF::StringImpl *)WebCore::CryptoAlgorithmRSAES_PKCS1_v1_5::create);
  v25 = v44;
  v44 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 2u, (WTF::StringImpl *)WebCore::CryptoAlgorithmRSASSA_PKCS1_v1_5::create);
  v27 = v44;
  v44 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 4u, (WTF::StringImpl *)WebCore::CryptoAlgorithmRSA_OAEP::create);
  v29 = v44;
  v44 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 3u, (WTF::StringImpl *)WebCore::CryptoAlgorithmRSA_PSS::create);
  v31 = v44;
  v44 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0xDu, (WTF::StringImpl *)WebCore::CryptoAlgorithmSHA1::create);
  v33 = v44;
  v44 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0xEu, (WTF::StringImpl *)WebCore::CryptoAlgorithmSHA224::create);
  v35 = v44;
  v44 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0xFu, (WTF::StringImpl *)WebCore::CryptoAlgorithmSHA256::create);
  v37 = v44;
  v44 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0x10u, (WTF::StringImpl *)WebCore::CryptoAlgorithmSHA384::create);
  v39 = v44;
  v44 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0x11u, (WTF::StringImpl *)WebCore::CryptoAlgorithmSHA512::create);
  v41 = v44;
  v44 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoAlgorithmRegistry::registerAlgorithm((uint64_t)this, (WTF::ASCIICaseInsensitiveHash *)&v44, 0x15u, (WTF::StringImpl *)WebCore::CryptoAlgorithmX25519::create);
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CryptoKeyEC::platformImportJWKPublic@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  char v11;
  float v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  char *v19;
  size_t v20;
  unint64_t v21;
  const void *v22;
  char *v23;
  void *v24;
  BOOL v25;
  size_t v26;
  size_t v27;
  const void *v28;
  char *v29;
  float v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  int v38;

  v11 = result;
  v13 = 0.0;
  if (a2 <= 2)
    v13 = flt_1969ED2D8[a2];
  v14 = (unint64_t)v13;
  if (v13 > (float)(unint64_t)v13)
    ++v14;
  if (v14 != *(_DWORD *)(a3 + 12))
    goto LABEL_35;
  v15 = 0.0;
  if (a2 <= 2)
    v15 = flt_1969ED2D8[a2];
  v16 = (unint64_t)v15;
  if (v15 > (float)(unint64_t)v15)
    ++v16;
  if (v16 != *(_DWORD *)(a4 + 12))
  {
LABEL_35:
    *a7 = 0;
    return result;
  }
  LODWORD(v17) = 1;
  result = WTF::fastMalloc((WTF *)1);
  v19 = (char *)result;
  *(_BYTE *)result = 4;
  v20 = *(unsigned int *)(a3 + 12);
  v38 = a6;
  if ((_DWORD)v20)
  {
    LODWORD(v17) = v20 + 1;
    if (v20 + 1 > 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (HIDWORD(v21))
      goto LABEL_51;
    v22 = *(const void **)a3;
    v23 = (char *)WTF::fastMalloc((WTF *)v21);
    *v23 = *v19;
    WTF::fastFree((WTF *)v19, v24);
    v25 = v23 == v19;
    if (v23 == v19)
      v19 = 0;
    else
      v19 = v23;
    v26 = (v20 + 1);
    if (v25)
      v21 = 0;
    result = (uint64_t)memcpy(v19 + 1, v22, v20);
  }
  else
  {
    v21 = 1;
    v26 = 1;
  }
  v27 = *(unsigned int *)(a4 + 12);
  if (!(_DWORD)v27)
    goto LABEL_26;
  v28 = *(const void **)a4;
  v17 = v26 + v27;
  if (v26 + v27 > v21)
  {
    v33 = v21 + (v21 >> 2);
    if (v33 >= 0x10)
      v34 = v33 + 1;
    else
      v34 = 16;
    if (v34 <= v17)
      v35 = v26 + v27;
    else
      v35 = v34;
    if (!HIDWORD(v35))
    {
      v29 = (char *)WTF::fastMalloc((WTF *)v35);
      memcpy(v29, v19, v26);
      if (v19)
      {
        if (v29 == v19)
          v29 = 0;
        WTF::fastFree((WTF *)v19, v36);
      }
      goto LABEL_25;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x195777CB8);
  }
  v29 = v19;
LABEL_25:
  result = (uint64_t)memcpy(&v29[v26], v28, v27);
  v19 = v29;
LABEL_26:
  v30 = 0.0;
  if (a2 <= 2)
    v30 = flt_1969ED2D8[a2];
  v31 = (unint64_t)v30;
  if (v30 > (float)(unint64_t)v30)
    ++v31;
  if (((2 * v31) | 1) == v17)
  {
    v32 = CCECCryptorImportKey();
    result = 0;
    if (!v32)
    {
      result = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(result + 8) = 1;
      *(_BYTE *)(result + 12) = v11;
      *(_BYTE *)(result + 13) = 0;
      *(_BYTE *)(result + 14) = a5;
      *(_DWORD *)(result + 16) = v38;
      *(_QWORD *)result = off_1E33973A0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = a2;
    }
    *a7 = result;
    if (v19)
      return WTF::fastFree((WTF *)v19, v18);
  }
  else
  {
    *a7 = 0;
    if (v19)
      return WTF::fastFree((WTF *)v19, v18);
  }
  return result;
}

WTF *WebCore::CryptoKeyEC::platformImportJWKPrivate@<X0>(WTF *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  char v14;
  float v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  char *v22;
  void *v23;
  size_t v24;
  size_t v25;
  unint64_t v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  size_t v30;
  const void *v31;
  unint64_t v32;
  void *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  WTF *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;
  void *v51;
  int v52;
  void *v53;
  WTF *v54;
  WTF *__src;
  size_t __srca;
  size_t __srcb;
  WTF *v58;
  uint64_t v59;

  v14 = (char)result;
  v16 = 0.0;
  if (a2 <= 2)
    v16 = flt_1969ED2D8[a2];
  v17 = (unint64_t)v16;
  if (v16 > (float)(unint64_t)v16)
    ++v17;
  if (v17 != *(_DWORD *)(a3 + 12))
    goto LABEL_32;
  v18 = 0.0;
  if (a2 <= 2)
    v18 = flt_1969ED2D8[a2];
  v19 = (unint64_t)v18;
  if (v18 > (float)(unint64_t)v18)
    ++v19;
  if (v19 != *(_DWORD *)(a4 + 12))
    goto LABEL_32;
  v20 = 0.0;
  if (a2 <= 2)
    v20 = flt_1969ED2D8[a2];
  v21 = (unint64_t)v20;
  if (v20 > (float)(unint64_t)v20)
    ++v21;
  if (v21 != *(_DWORD *)(a5 + 12))
  {
LABEL_32:
    *a8 = 0;
    return result;
  }
  v58 = 0;
  v59 = 0;
  v22 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v58, (WTF *)1, (unint64_t)&WebCore::InitialOctetEC);
  *((_BYTE *)v58 + HIDWORD(v59)) = *v22;
  v23 = *(void **)a3;
  v24 = *(unsigned int *)(a3 + 12);
  v25 = ++HIDWORD(v59);
  if ((_DWORD)v24)
  {
    v26 = v24 + v25;
    if (v26 > v59)
    {
      v53 = v23;
      v36 = v59 + ((unint64_t)v59 >> 2);
      if (v36 >= 0x10)
        v37 = v36 + 1;
      else
        v37 = 16;
      if (v37 <= v26)
        v38 = v24 + v25;
      else
        v38 = v37;
      if (HIDWORD(v38))
      {
        __break(0xC471u);
        JUMPOUT(0x1957780ACLL);
      }
      __src = v58;
      v52 = v38;
      v39 = (WTF *)WTF::fastMalloc((WTF *)v38);
      LODWORD(v59) = v52;
      v58 = v39;
      memcpy(v39, __src, v25);
      v23 = v53;
      if (__src)
      {
        if (v58 == __src)
        {
          v58 = 0;
          LODWORD(v59) = 0;
        }
        WTF::fastFree(__src, v53);
        v23 = v53;
      }
    }
    if (v26 < HIDWORD(v59))
      goto LABEL_72;
    memcpy((char *)v58 + HIDWORD(v59), v23, v24);
    HIDWORD(v59) = v24 + v25;
    LODWORD(v25) = v24 + v25;
  }
  v27 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v27)
  {
    v28 = *(const void **)a4;
    v29 = v27 + v25;
    if (v29 > v59)
    {
      v40 = v59 + ((unint64_t)v59 >> 2);
      if (v40 >= 0x10)
        v41 = v40 + 1;
      else
        v41 = 16;
      if (v41 <= v29)
        v42 = v27 + v25;
      else
        v42 = v41;
      if (HIDWORD(v42))
      {
        __break(0xC471u);
        JUMPOUT(0x1957780B4);
      }
      v54 = v58;
      __srca = v25;
      v43 = v42;
      v44 = (WTF *)WTF::fastMalloc((WTF *)v42);
      LODWORD(v59) = v43;
      v58 = v44;
      memcpy(v44, v54, __srca);
      if (v54)
      {
        if (v58 == v54)
        {
          v58 = 0;
          LODWORD(v59) = 0;
        }
        WTF::fastFree(v54, v45);
      }
    }
    if (v29 < HIDWORD(v59))
    {
      __break(0xC471u);
      JUMPOUT(0x19577809CLL);
    }
    memcpy((char *)v58 + HIDWORD(v59), v28, v27);
    HIDWORD(v59) = v29;
    LODWORD(v25) = v29;
  }
  v30 = *(unsigned int *)(a5 + 12);
  if (!(_DWORD)v30)
    goto LABEL_28;
  v31 = *(const void **)a5;
  v32 = v30 + v25;
  if (v32 > v59)
  {
    v46 = v59 + ((unint64_t)v59 >> 2);
    if (v46 >= 0x10)
      v47 = v46 + 1;
    else
      v47 = 16;
    if (v47 <= v32)
      v48 = v30 + v25;
    else
      v48 = v47;
    if (!HIDWORD(v48))
    {
      __srcb = v25;
      v49 = v58;
      v50 = (WTF *)WTF::fastMalloc((WTF *)v48);
      LODWORD(v59) = v48;
      v58 = v50;
      memcpy(v50, v49, __srcb);
      if (v49)
      {
        if (v58 == v49)
        {
          v58 = 0;
          LODWORD(v59) = 0;
        }
        WTF::fastFree(v49, v51);
      }
      goto LABEL_26;
    }
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x195778094);
  }
LABEL_26:
  if (v32 < HIDWORD(v59))
  {
    __break(0xC471u);
    JUMPOUT(0x1957780A4);
  }
  memcpy((char *)v58 + HIDWORD(v59), v31, v30);
  HIDWORD(v59) = v32;
LABEL_28:
  v34 = CCECCryptorImportKey();
  v35 = 0;
  if (!v34)
  {
    v35 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v35 + 8) = 1;
    *(_BYTE *)(v35 + 12) = v14;
    *(_BYTE *)(v35 + 13) = 1;
    *(_BYTE *)(v35 + 14) = a6;
    *(_DWORD *)(v35 + 16) = a7;
    *(_QWORD *)v35 = off_1E33973A0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_DWORD *)(v35 + 32) = a2;
  }
  *a8 = v35;
  result = v58;
  if (v58)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    return (WTF *)WTF::fastFree(result, v33);
  }
  return result;
}

uint64_t WebCore::CryptoKeyEC::platformAddFieldElements(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;

  v3 = result;
  v4 = *(int *)(result + 32);
  v5 = 0.0;
  if (v4 <= 2)
    v5 = dbl_1969ED2E8[v4];
  v6 = vcvtpd_u64_f64(v5);
  v7 = 3 * v6 + 1;
  if (3 * v6 == -1)
  {
    v8 = 0;
    goto LABEL_7;
  }
  if (!HIDWORD(v7))
  {
    v8 = (WTF *)WTF::fastMalloc((WTF *)(3 * v6 + 1));
LABEL_7:
    v18 = 3 * v6 + 1;
    if (*(_BYTE *)(v3 + 13) != 1 && *(_BYTE *)(v3 + 13)
      || CCECCryptorExportKey()
      || ((v9 = (2 * v6) | 1, v18 != v9) ? (v10 = v18 == v7) : (v10 = 1), !v10))
    {
      v11 = 0;
      if (v8)
        goto LABEL_39;
      return v11;
    }
    if (3 * v6 == -1 || v6 != -1 && 3 * v6 < v6)
      goto LABEL_34;
    WTF::base64EncodeToString();
    v13 = v17;
    v17 = 0;
    v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        v17 = 0;
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    if (v7 < v6 + 1 || v6 != -1 && 2 * v6 < v6)
      goto LABEL_34;
    WTF::base64EncodeToString();
    v17 = 0;
    v15 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, a2);
        v17 = 0;
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v18 <= v9)
    {
LABEL_38:
      v11 = 1;
      if (v8)
LABEL_39:
        WTF::fastFree(v8, a2);
      return v11;
    }
    if (v7 < v9 || v6 != -1 && v7 - v9 < v6)
LABEL_34:
      __break(1u);
    WTF::base64EncodeToString();
    v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, a2);
      else
        *(_DWORD *)v16 -= 2;
    }
    goto LABEL_38;
  }
  __break(0xC471u);
  return result;
}

unint64_t WebCore::CryptoKeyEC::platformImportSpki@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, char a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  char v24;
  const void *v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  uint64_t v40;
  float v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  float v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  size_t v50;

  v7 = a3[3];
  if (v7 <= 1)
    goto LABEL_22;
  v8 = *(_QWORD *)a3;
  v9 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1);
  v10 = (char)v9;
  v11 = v9 - 127;
  v12 = v10 >= 0 ? 1 : v11;
  if (v12 + 3 > v7)
    goto LABEL_22;
  v13 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_59;
  v14 = *(unsigned __int8 *)(v8 + v13);
  v15 = (char)v14;
  v16 = v14 - 127;
  if (v15 >= 0)
    v17 = 1;
  else
    v17 = v16;
  v18 = v17 + v13;
  v19 = v17 + v13 + 9;
  if (v19 > v7)
    goto LABEL_22;
  v20 = *(_QWORD *)(v8 + v18) == 0x23DCE48862A0706 && *(_BYTE *)(v8 + v18 + 8) == 1;
  if (!v20
    || ((v24 = result, a2 > 2) ? (v25 = 0, v26 = 0) : (v25 = *(&off_1E3397348 + (int)a2), v26 = qword_1969ED300[a2]),
        v26 + v19 > v7
     || (v50 = v26, result = memcmp((const void *)(v8 + v19), v25, v26), (_DWORD)result)
     || (v27 = v18 + v50 + 11, v27 > v7)))
  {
LABEL_22:
    *a6 = 0;
    return result;
  }
  v28 = v18 + v50 + 10;
  if (v28 >= v7)
  {
    __break(0xC471u);
    goto LABEL_58;
  }
  v29 = *(unsigned __int8 *)(v8 + v28);
  v30 = (char)v29;
  v31 = v29 - 127;
  if (v30 >= 0)
    v32 = 1;
  else
    v32 = v31;
  v33 = v32 + v27;
  result = v7 - v33;
  v34 = 0.0;
  if (a2 <= 2)
    v34 = flt_1969ED2D8[a2];
  v35 = (unint64_t)v34;
  if (v34 > (float)(unint64_t)v34)
    ++v35;
  if (((2 * v35) | 1) != result)
    goto LABEL_45;
  if (v7 < v33)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v7 != v33)
  {
    v48 = v32;
    if (!HIDWORD(result))
    {
      v36 = v8 + v33;
      v49 = v7 - v33;
      v37 = WTF::fastMalloc((WTF *)result);
      v39 = (WTF *)v37;
      v40 = 0;
      do
      {
        *(_BYTE *)(v37 + v40) = *(_BYTE *)(v36 + v40);
        ++v40;
      }
      while (v7 - v48 - v12 - v17 - v50 - 13 != v40);
      v41 = 0.0;
      if (a2 <= 2)
        v41 = flt_1969ED2D8[a2];
      v42 = (unint64_t)v41;
      if (v41 > (float)(unint64_t)v41)
        ++v42;
      if (((2 * v42) | 1) == v49)
      {
        v43 = CCECCryptorImportKey();
        v44 = 0;
        if (!v43)
        {
          v44 = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(v44 + 8) = 1;
          *(_BYTE *)(v44 + 12) = v24;
          *(_BYTE *)(v44 + 13) = 0;
          *(_BYTE *)(v44 + 14) = a4;
          *(_DWORD *)(v44 + 16) = a5;
          *(_QWORD *)v44 = off_1E33973A0;
          *(_QWORD *)(v44 + 24) = 0;
          *(_DWORD *)(v44 + 32) = a2;
        }
        *a6 = v44;
      }
      else
      {
        *a6 = 0;
      }
      return WTF::fastFree(v39, v38);
    }
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x1957786C8);
  }
  v46 = 0.0;
  if (a2 <= 2)
    v46 = flt_1969ED2D8[a2];
  v47 = (unint64_t)v46;
  if (v46 > (float)(unint64_t)v46)
    ++v47;
  if (((2 * v47) | 1) != result)
    goto LABEL_22;
LABEL_45:
  v45 = CCECCryptorImportKey();
  result = 0;
  if (!v45)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = v24;
    *(_BYTE *)(result + 13) = 0;
    *(_BYTE *)(result + 14) = a4;
    *(_DWORD *)(result + 16) = a5;
    *(_QWORD *)result = off_1E33973A0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = a2;
  }
  *a6 = result;
  return result;
}

uint64_t WebCore::CryptoKeyEC::platformExportSpki@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  unint64_t v6;
  WTF *v7;
  WTF *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  void *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  void *v60;
  void *v61;

  v4 = *(int *)(a1 + 32);
  v5 = 0.0;
  if (v4 <= 2)
    v5 = dbl_1969ED2E8[v4];
  v6 = vcvtpd_u64_f64(v5);
  if ((v6 >> 31))
    goto LABEL_85;
  v7 = (WTF *)((2 * v6) | 1);
  v8 = (WTF *)WTF::fastMalloc(v7);
  if (CCECCryptorExportKey())
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return WTF::fastFree(v8, v9);
  }
  v10 = 2 * v6;
  v11 = *(int *)(a1 + 32);
  if (v11 > 2)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v12 = *(&off_1E3397348 + v11);
    v13 = qword_1969ED300[v11];
  }
  v14 = 7;
  if (v10 >= 0xFFFE)
    v14 = 8;
  if (v10 < 0xFE)
    v14 = 6;
  v15 = v10 >= 0x7E;
  v16 = 5;
  if (v15)
    v16 = v14;
  v17 = (unint64_t)v7 + v13 + v16 + 9;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v18 = 4;
  if (v17 >= 0x10000)
    v18 = 5;
  if (v17 < 0x100)
    v18 = 3;
  if (v17 < 0x80)
    v18 = 2;
  v19 = (WTF *)(v18 + v17);
  if ((v18 + v17) >> 32)
  {
    __break(0xC471u);
    JUMPOUT(0x195778B78);
  }
  v20 = WTF::fastMalloc(v19);
  *(_DWORD *)(a2 + 8) = (_DWORD)v19;
  *(_QWORD *)a2 = v20;
  v21 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v21 == (_DWORD)v19)
    *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v21 + 1), (unint64_t)&WebCore::SequenceMark);
  else
    *(_BYTE *)(v20 + v21) = 48;
  ++*(_DWORD *)(a2 + 12);
  WebCore::addEncodedASN1Length(a2, v17);
  v22 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v22 == *(_DWORD *)(a2 + 8))
  {
    v23 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v22 + 1), (unint64_t)&WebCore::SequenceMark);
    v22 = *(unsigned int *)(a2 + 12);
    v24 = *(char **)a2;
    v25 = *v23;
  }
  else
  {
    v24 = *(char **)a2;
    v25 = 48;
  }
  v24[v22] = v25;
  ++*(_DWORD *)(a2 + 12);
  WebCore::addEncodedASN1Length(a2, v13 + 9);
  v26 = *(unsigned int *)(a2 + 8);
  v27 = *(unsigned int *)(a2 + 12);
  v28 = v27 + 9;
  if (v27 + 9 > v26)
  {
    v29 = v26 + (v26 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v28)
      v31 = v27 + 9;
    else
      v31 = v30;
    if (HIDWORD(v31))
    {
      __break(0xC471u);
      JUMPOUT(0x195778B98);
    }
    v32 = *(char **)a2;
    v33 = (void *)WTF::fastMalloc((WTF *)v31);
    *(_DWORD *)(a2 + 8) = v31;
    *(_QWORD *)a2 = v33;
    memcpy(v33, v32, v27);
    if (v32)
    {
      if (*(char **)a2 == v32)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v32, v34);
    }
  }
  v35 = *(unsigned int *)(a2 + 12);
  if (v28 < v35)
  {
    __break(0xC471u);
    JUMPOUT(0x195778B80);
  }
  v36 = *(_QWORD *)a2 + v35;
  *(_QWORD *)v36 = 0x23DCE48862A0706;
  *(_BYTE *)(v36 + 8) = 1;
  *(_DWORD *)(a2 + 12) = v28;
  if (v13)
  {
    v37 = v13 + v28;
    v38 = *(unsigned int *)(a2 + 8);
    if (v37 <= v38)
    {
LABEL_44:
      v39 = *(unsigned int *)(a2 + 12);
      if (v37 < v39)
      {
        __break(0xC471u);
        JUMPOUT(0x195778B88);
      }
      memcpy((void *)(*(_QWORD *)a2 + v39), v12, v13);
      *(_DWORD *)(a2 + 12) = v37;
      LODWORD(v28) = v13 + v28;
      goto LABEL_46;
    }
    v56 = v38 + (v38 >> 2);
    if (v56 >= 0x10)
      v57 = v56 + 1;
    else
      v57 = 16;
    if (v57 <= v37)
      v58 = v13 + v28;
    else
      v58 = v57;
    if (!HIDWORD(v58))
    {
      v59 = *(char **)a2;
      v60 = (void *)WTF::fastMalloc((WTF *)v58);
      *(_DWORD *)(a2 + 8) = v58;
      *(_QWORD *)a2 = v60;
      memcpy(v60, v59, v28);
      if (v59)
      {
        if (*(char **)a2 == v59)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v59, v61);
      }
      goto LABEL_44;
    }
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x195778B70);
  }
LABEL_46:
  v40 = v28;
  if ((_DWORD)v28 == *(_DWORD *)(a2 + 8))
  {
    v41 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v28 + 1), (unint64_t)&WebCore::BitStringMark);
    v40 = *(unsigned int *)(a2 + 12);
    v42 = *(char **)a2;
    v43 = *v41;
  }
  else
  {
    v42 = *(char **)a2;
    v43 = 3;
  }
  v42[v40] = v43;
  ++*(_DWORD *)(a2 + 12);
  WebCore::addEncodedASN1Length(a2, (unint64_t)v7 + 1);
  v44 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v44 == *(_DWORD *)(a2 + 8))
    *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v44 + 1), (unint64_t)&WebCore::InitialOctet);
  else
    *(_BYTE *)(*(_QWORD *)a2 + v44) = 0;
  v45 = *(unsigned int *)(a2 + 8);
  v46 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v46;
  v47 = (char *)v7 + v46;
  if ((unint64_t)v7 + v46 > v45)
  {
    v50 = v45 + (v45 >> 2);
    if (v50 >= 0x10)
      v51 = v50 + 1;
    else
      v51 = 16;
    if (v51 <= (unint64_t)v47)
      v52 = (unint64_t)v7 + v46;
    else
      v52 = v51;
    if (HIDWORD(v52))
    {
      __break(0xC471u);
      JUMPOUT(0x195778BA0);
    }
    v53 = *(char **)a2;
    v54 = (void *)WTF::fastMalloc((WTF *)v52);
    *(_DWORD *)(a2 + 8) = v52;
    *(_QWORD *)a2 = v54;
    memcpy(v54, v53, v46);
    if (v53)
    {
      if (*(char **)a2 == v53)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v53, v55);
    }
  }
  v48 = *(unsigned int *)(a2 + 12);
  if ((unint64_t)v47 < v48)
  {
    __break(0xC471u);
    JUMPOUT(0x195778B90);
  }
  memcpy((void *)(*(_QWORD *)a2 + v48), v8, (size_t)v7);
  *(_DWORD *)(a2 + 12) = (_DWORD)v47;
  return WTF::fastFree(v8, v9);
}

uint64_t WebCore::CryptoKeyEC::platformImportPkcs8@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v25;
  const void *v26;
  size_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  float v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  char *v72;
  size_t v73;
  size_t v74;
  size_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  _BOOL8 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  size_t __n;
  unint64_t v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;

  v7 = a3[3];
  if (v7 <= 1
    || ((v9 = *(_QWORD *)a3, v10 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1), v11 = (char)v10, v12 = v10 - 127, v11 >= 0)
      ? (v13 = 1)
      : (v13 = v12),
        v13 + 6 > v7))
  {
LABEL_48:
    *a6 = 0;
    return result;
  }
  v14 = v13 + 5;
  if (v13 + 5 >= v7)
    goto LABEL_104;
  v15 = *(unsigned __int8 *)(v9 + v14);
  v16 = (char)v15;
  v17 = v15 - 127;
  if (v16 >= 0)
    v18 = 1;
  else
    v18 = v17;
  v19 = v18 + v14;
  v20 = v18 + v14 + 9;
  if (v20 > v7)
    goto LABEL_48;
  if (*(_QWORD *)(v9 + v19) != 0x23DCE48862A0706 || *(_BYTE *)(v9 + v19 + 8) != 1)
    goto LABEL_48;
  v25 = result;
  if (a2 > 2)
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v26 = *(&off_1E3397348 + (int)a2);
    v27 = qword_1969ED300[a2];
  }
  if (v27 + v20 > v7)
    goto LABEL_48;
  v94 = v18;
  v95 = v27;
  result = memcmp((const void *)(v9 + v20), v26, v27);
  if ((_DWORD)result)
    goto LABEL_48;
  v29 = v19 + v95 + 11;
  if (v29 > v7)
    goto LABEL_48;
  v30 = v19 + v95 + 10;
  if (v30 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195779044);
  }
  v31 = *(unsigned __int8 *)(v9 + v30);
  v32 = (char)v31;
  v33 = v31 - 127;
  v34 = v32 >= 0 ? 1 : v33;
  v35 = v34 + v29;
  if (v35 + 1 > v7)
    goto LABEL_48;
  if (v35 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19577904CLL);
  }
  v36 = *(unsigned __int8 *)(v9 + v35);
  v37 = (char)v36;
  v38 = v36 - 127;
  v39 = v37 >= 0 ? 1 : v38;
  v40 = v35 + v39;
  if (v40 + 5 > v7)
    goto LABEL_48;
  v41 = v40 + 4;
  if (v41 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195779054);
  }
  v42 = *(unsigned __int8 *)(v9 + v41);
  v43 = (char)v42;
  v44 = v42 - 127;
  if (v43 >= 0)
    v45 = 1;
  else
    v45 = v44;
  v46 = v45 + v41;
  v47 = 0.0;
  if (a2 <= 2)
    v47 = flt_1969ED2D8[a2];
  v48 = (float)(unint64_t)v47;
  result = v47 > v48;
  v49 = v47 <= v48 ? (unint64_t)v47 : (unint64_t)v47 + 1;
  if (v49 + v46 > v7)
    goto LABEL_48;
  v50 = v46 + v49 + 2;
  if (v50 > v7)
    goto LABEL_48;
  v51 = v46 + v49 + 1;
  if (v51 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19577905CLL);
  }
  v52 = *(unsigned __int8 *)(v9 + v51);
  v53 = (char)v52;
  v54 = v52 - 127;
  v55 = v53 >= 0 ? 1 : v54;
  v56 = v55 + v50;
  v57 = v55 + v50 + 1;
  if (v57 > v7)
    goto LABEL_48;
  if (v56 >= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195779064);
  }
  v58 = *(unsigned __int8 *)(v9 + v56);
  v59 = (char)v58;
  v60 = v58 - 127;
  if (v59 >= 0)
    v61 = 1;
  else
    v61 = v60;
  v62 = v61 + v57;
  v63 = v7 >= v61 + v57;
  v64 = v7 - (v61 + v57);
  if (v63)
  {
    __n = v49;
    v93 = v46;
    if (v64)
    {
      v85 = v61;
      v86 = v47 > v48;
      v87 = (unint64_t)v47;
      v88 = v45;
      v89 = v39;
      v90 = v34;
      if (HIDWORD(v64))
      {
        __break(0xC471u);
        JUMPOUT(0x19577906CLL);
      }
      v65 = v9 + v62;
      v91 = v64;
      result = WTF::fastMalloc((WTF *)v64);
      v66 = 0;
      do
      {
        *(_BYTE *)(result + v66) = *(_BYTE *)(v65 + v66);
        ++v66;
      }
      while (v7 - v90 - v89 - v88 - v55 - v85 - v13 - v94 - v95 - v87 - v86 - 23 != v66);
      LODWORD(v64) = v91;
    }
    else
    {
      result = 0;
    }
    v67 = v64;
    v68 = 0.0;
    if (a2 <= 2)
      v68 = flt_1969ED2D8[a2];
    v69 = (unint64_t)v68;
    if (v68 > (float)(unint64_t)v68)
      ++v69;
    if (((2 * v69) | 1) != v67)
      goto LABEL_72;
    v70 = a3[3];
    v63 = v70 >= v93;
    v71 = v70 - v93;
    if (v63)
    {
      v72 = (char *)result;
      v96 = *(_QWORD *)a3;
      if (__n == -1)
      {
        v73 = v71;
      }
      else
      {
        v73 = __n;
        if (v71 < __n)
          goto LABEL_71;
      }
      if (!v73)
      {
        v77 = (char *)result;
LABEL_79:
        v78 = (uint64_t)v77;
        v79 = CCECCryptorImportKey();
        v80 = 0;
        if (!v79)
        {
          v80 = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(v80 + 8) = 1;
          *(_BYTE *)(v80 + 12) = v25;
          *(_BYTE *)(v80 + 13) = 1;
          *(_BYTE *)(v80 + 14) = a4;
          *(_DWORD *)(v80 + 16) = a5;
          *(_QWORD *)v80 = off_1E33973A0;
          *(_QWORD *)(v80 + 24) = 0;
          *(_DWORD *)(v80 + 32) = a2;
        }
        *a6 = v80;
        result = v78;
        goto LABEL_82;
      }
      v74 = v73;
      v75 = v73 + v67;
      if (v73 + v67 <= v67)
      {
        v76 = (char *)result;
LABEL_77:
        if (v75 < v67)
        {
          __break(0xC471u);
          JUMPOUT(0x195779074);
        }
        memcpy(&v76[v67], (const void *)(v96 + v93), v74);
        v77 = v76;
        goto LABEL_79;
      }
      v81 = v67 + (v67 >> 2);
      if (v81 >= 0x10)
        v82 = v81 + 1;
      else
        v82 = 16;
      if (v82 <= v75)
        v83 = v73 + v67;
      else
        v83 = v82;
      if (!HIDWORD(v83))
      {
        v76 = (char *)WTF::fastMalloc((WTF *)v83);
        memcpy(v76, v72, v67);
        if (v72)
        {
          if (v76 == v72)
            v76 = 0;
          WTF::fastFree((WTF *)v72, v84);
        }
        goto LABEL_77;
      }
LABEL_104:
      __break(0xC471u);
      JUMPOUT(0x19577903CLL);
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  *a6 = 0;
LABEL_82:
  if (result)
    return WTF::fastFree((WTF *)result, v28);
  return result;
}

uint64_t WebCore::CryptoKeyEC::platformExportPkcs8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  unint64_t v6;
  WTF *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63;
  unint64_t v64;
  size_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  void *v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  size_t v79;
  size_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  size_t v93;
  unint64_t v94;
  size_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  void *v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  void *v107;
  void *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  void *v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  void *__src;
  uint64_t v118;
  unint64_t v119;
  WTF *v120;
  _DWORD *v121;

  v4 = *(int *)(a1 + 32);
  v5 = 0.0;
  if (v4 <= 2)
    v5 = dbl_1969ED2E8[v4];
  v6 = vcvtpd_u64_f64(v5);
  if (3 * v6 == -1)
  {
    v7 = 0;
  }
  else
  {
    if ((3 * v6 + 1) >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x195779964);
    }
    v7 = (WTF *)WTF::fastMalloc((WTF *)(3 * v6 + 1));
  }
  result = CCECCryptorExportKey();
  if (!(_DWORD)result)
  {
    v119 = 3 * v6 + 1;
    v120 = v7;
    v10 = *(int *)(a1 + 32);
    if (v10 > 2)
    {
      __src = 0;
      v11 = 0;
    }
    else
    {
      __src = *(&off_1E3397348 + v10);
      v11 = qword_1969ED300[v10];
    }
    v118 = 2 * v6;
    v12 = 2 * v6 + 2;
    v13 = 3;
    if (v12 < 0x10000)
      v14 = 3;
    else
      v14 = 4;
    if (v12 < 0x100)
      v14 = 2;
    if (v12 < 0x80)
      v14 = 1;
    v15 = v14 + 2 * v6 + 3;
    if (v15 < 0x10000)
      v16 = 3;
    else
      v16 = 4;
    if (v15 < 0x100)
      v16 = 2;
    if (v15 < 0x80)
      v16 = 1;
    v17 = v6 + v12 + v14 + v16 + 7;
    v18 = 4;
    if (v17 < 0x10000)
      v19 = 4;
    else
      v19 = 5;
    if (v17 < 0x100)
      v19 = 3;
    if (v17 < 0x80)
      v19 = 2;
    v20 = v19 + v17;
    if (v19 + v17 < 0x10000)
      v21 = 3;
    else
      v21 = 4;
    if (v20 < 0x100)
      v21 = 2;
    if (v20 < 0x80)
      v21 = 1;
    v22 = v20 + v11 + v21 + 15;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (v22 >= 0x10000)
      v18 = 5;
    if (v22 >= 0x100)
      v13 = v18;
    if (v22 < 0x80)
      v13 = 2;
    v23 = v13 + v22;
    v115 = v15;
    v116 = 2 * v6 + 2;
    if (v13 + v22)
    {
      if (HIDWORD(v23))
        goto LABEL_179;
      v24 = WTF::fastMalloc((WTF *)v23);
      *(_DWORD *)(a2 + 8) = v23;
      v121 = (_DWORD *)(a2 + 8);
      *(_QWORD *)a2 = v24;
      v26 = (_DWORD *)(a2 + 12);
      v25 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v25 != (_DWORD)v23)
      {
        *(_BYTE *)(v24 + v25) = 48;
LABEL_50:
        ++*(_DWORD *)(a2 + 12);
        WebCore::addEncodedASN1Length(a2, v22);
        v27 = *(unsigned int *)(a2 + 8);
        v28 = *(unsigned int *)(a2 + 12);
        v29 = v28 + 3;
        if (v28 + 3 > v27)
        {
          v30 = v27 + (v27 >> 2);
          if (v30 >= 0x10)
            v31 = v30 + 1;
          else
            v31 = 16;
          if (v31 <= v29)
            v32 = v28 + 3;
          else
            v32 = v31;
          if (HIDWORD(v32))
          {
            __break(0xC471u);
            JUMPOUT(0x19577996CLL);
          }
          v33 = *(char **)a2;
          v34 = (void *)WTF::fastMalloc((WTF *)v32);
          *(_DWORD *)(a2 + 8) = v32;
          *(_QWORD *)a2 = v34;
          memcpy(v34, v33, v28);
          if (v33)
          {
            if (*(char **)a2 == v33)
            {
              *(_QWORD *)a2 = 0;
              *(_DWORD *)(a2 + 8) = 0;
            }
            WTF::fastFree((WTF *)v33, v35);
          }
        }
        v36 = *v26;
        if (v29 < v36)
        {
          __break(0xC471u);
          JUMPOUT(0x195779934);
        }
        v37 = *(_QWORD *)a2 + v36;
        *(_BYTE *)(v37 + 2) = 0;
        *(_WORD *)v37 = 258;
        *(_DWORD *)(a2 + 12) = v29;
        v38 = (v28 + 3);
        if (*(_DWORD *)(a2 + 8) == (_DWORD)v29)
        {
          v39 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v38 + 1), (unint64_t)&WebCore::SequenceMark);
          v38 = *(unsigned int *)(a2 + 12);
          v40 = *(char **)a2;
          v41 = *v39;
        }
        else
        {
          v40 = *(char **)a2;
          v41 = 48;
        }
        v40[v38] = v41;
        ++*(_DWORD *)(a2 + 12);
        WebCore::addEncodedASN1Length(a2, v11 + 9);
        v42 = *(unsigned int *)(a2 + 8);
        v43 = *(unsigned int *)(a2 + 12);
        v44 = v43 + 9;
        if (v43 + 9 > v42)
        {
          v45 = v42 + (v42 >> 2);
          if (v45 >= 0x10)
            v46 = v45 + 1;
          else
            v46 = 16;
          if (v46 <= v44)
            v47 = v43 + 9;
          else
            v47 = v46;
          if (HIDWORD(v47))
          {
            __break(0xC471u);
            JUMPOUT(0x195779974);
          }
          v48 = *(char **)a2;
          v49 = (void *)WTF::fastMalloc((WTF *)v47);
          *(_DWORD *)(a2 + 8) = v47;
          *(_QWORD *)a2 = v49;
          memcpy(v49, v48, v43);
          if (v48)
          {
            if (*(char **)a2 == v48)
            {
              *(_QWORD *)a2 = 0;
              *(_DWORD *)(a2 + 8) = 0;
            }
            WTF::fastFree((WTF *)v48, v50);
          }
        }
        v51 = *v26;
        if (v44 < v51)
        {
          __break(0xC471u);
          JUMPOUT(0x19577993CLL);
        }
        v52 = *(_QWORD *)a2 + v51;
        *(_QWORD *)v52 = 0x23DCE48862A0706;
        *(_BYTE *)(v52 + 8) = 1;
        *(_DWORD *)(a2 + 12) = v44;
        if (v11)
        {
          v53 = v11 + v44;
          v54 = *v121;
          if (v53 > v54)
          {
            v97 = v54 + (v54 >> 2);
            if (v97 >= 0x10)
              v98 = v97 + 1;
            else
              v98 = 16;
            if (v98 <= v53)
              v99 = v11 + v44;
            else
              v99 = v98;
            if (HIDWORD(v99))
            {
              __break(0xC471u);
              JUMPOUT(0x195779984);
            }
            v100 = *(char **)a2;
            v101 = (void *)WTF::fastMalloc((WTF *)v99);
            *(_DWORD *)(a2 + 8) = v99;
            *(_QWORD *)a2 = v101;
            memcpy(v101, v100, v44);
            if (v100)
            {
              if (*(char **)a2 == v100)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((WTF *)v100, v102);
            }
          }
          v55 = *v26;
          if (v53 < v55)
          {
            __break(0xC471u);
            JUMPOUT(0x195779944);
          }
          memcpy((void *)(*(_QWORD *)a2 + v55), __src, v11);
          *(_DWORD *)(a2 + 12) = v53;
          LODWORD(v44) = v11 + v44;
        }
        v56 = v44;
        if ((_DWORD)v44 == *v121)
        {
          v57 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v44 + 1), (unint64_t)&WebCore::OctetStringMark);
          v56 = *(unsigned int *)(a2 + 12);
          v58 = *(char **)a2;
          v59 = *v57;
        }
        else
        {
          v58 = *(char **)a2;
          v59 = 4;
        }
        v58[v56] = v59;
        v7 = v120;
        ++*(_DWORD *)(a2 + 12);
        WebCore::addEncodedASN1Length(a2, v20);
        v60 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v60 == *(_DWORD *)(a2 + 8))
        {
          v61 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v60 + 1), (unint64_t)&WebCore::SequenceMark);
          v60 = *(unsigned int *)(a2 + 12);
          v62 = *(char **)a2;
          v63 = *v61;
        }
        else
        {
          v62 = *(char **)a2;
          v63 = 48;
        }
        v62[v60] = v63;
        ++*(_DWORD *)(a2 + 12);
        WebCore::addEncodedASN1Length(a2, v17);
        v64 = *(unsigned int *)(a2 + 8);
        v65 = *(unsigned int *)(a2 + 12);
        v66 = v65 + 3;
        if (v65 + 3 > v64)
        {
          v67 = v64 + (v64 >> 2);
          if (v67 >= 0x10)
            v68 = v67 + 1;
          else
            v68 = 16;
          if (v68 <= v66)
            v69 = v65 + 3;
          else
            v69 = v68;
          if (HIDWORD(v69))
          {
            __break(0xC471u);
            JUMPOUT(0x19577997CLL);
          }
          v70 = *(char **)a2;
          v71 = (void *)WTF::fastMalloc((WTF *)v69);
          *(_DWORD *)(a2 + 8) = v69;
          *(_QWORD *)a2 = v71;
          memcpy(v71, v70, v65);
          if (v70)
          {
            if (*(char **)a2 == v70)
            {
              *(_QWORD *)a2 = 0;
              *(_DWORD *)(a2 + 8) = 0;
            }
            WTF::fastFree((WTF *)v70, v72);
          }
        }
        v73 = *v26;
        if (v66 < v73)
        {
          __break(0xC471u);
          JUMPOUT(0x19577994CLL);
        }
        v74 = *(_QWORD *)a2 + v73;
        *(_BYTE *)(v74 + 2) = 1;
        *(_WORD *)v74 = 258;
        *(_DWORD *)(a2 + 12) = v66;
        v75 = (v65 + 3);
        if (*(_DWORD *)(a2 + 8) == (_DWORD)v66)
        {
          v76 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v75 + 1), (unint64_t)&WebCore::OctetStringMark);
          v75 = *(unsigned int *)(a2 + 12);
          v77 = *(char **)a2;
          v78 = *v76;
        }
        else
        {
          v77 = *(char **)a2;
          v78 = 4;
        }
        v77[v75] = v78;
        ++*(_DWORD *)(a2 + 12);
        WebCore::addEncodedASN1Length(a2, v6);
        v79 = v118 | 1;
        if (v119 >= (v118 | 1uLL))
        {
          if (v6 == -1)
          {
LABEL_109:
            v6 = v119 - (v118 | 1);
            goto LABEL_110;
          }
          if (v119 - (v118 | 1) >= v6)
          {
LABEL_110:
            v80 = *v26;
            if (!v6)
              goto LABEL_114;
            v81 = v6 + v80;
            v82 = *v121;
            if (v6 + v80 <= v82)
            {
LABEL_112:
              v83 = *v26;
              if (v81 < v83)
              {
                __break(0xC471u);
                JUMPOUT(0x195779954);
              }
              memcpy((void *)(*(_QWORD *)a2 + v83), (char *)v120 + v79, v6);
              *(_DWORD *)(a2 + 12) = v81;
              LODWORD(v80) = v6 + v80;
LABEL_114:
              v84 = v80;
              if ((_DWORD)v80 == *v121)
              {
                v85 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v80 + 1), (unint64_t)&WebCore::TaggedType1);
                v84 = *(unsigned int *)(a2 + 12);
                v86 = *(char **)a2;
                v87 = *v85;
              }
              else
              {
                v86 = *(char **)a2;
                v87 = -95;
              }
              v86[v84] = v87;
              ++*(_DWORD *)(a2 + 12);
              WebCore::addEncodedASN1Length(a2, v115);
              v88 = *(unsigned int *)(a2 + 12);
              if ((_DWORD)v88 == *(_DWORD *)(a2 + 8))
              {
                v89 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v88 + 1), (unint64_t)&WebCore::BitStringMark);
                v88 = *(unsigned int *)(a2 + 12);
                v90 = *(char **)a2;
                v91 = *v89;
              }
              else
              {
                v90 = *(char **)a2;
                v91 = 3;
              }
              v90[v88] = v91;
              ++*(_DWORD *)(a2 + 12);
              WebCore::addEncodedASN1Length(a2, v116);
              v92 = *(unsigned int *)(a2 + 12);
              if ((_DWORD)v92 == *(_DWORD *)(a2 + 8))
                *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v92 + 1), (unint64_t)&WebCore::InitialOctet);
              else
                *(_BYTE *)(*(_QWORD *)a2 + v92) = 0;
              v93 = (*v26 + 1);
              *v26 = v93;
              if (v79 == -1)
                v79 = v119;
              v94 = v79 + v93;
              v95 = *v121;
              if (v79 + v93 > v95)
              {
                v103 = v95 + (v95 >> 2);
                if (v103 >= 0x10)
                  v104 = v103 + 1;
                else
                  v104 = 16;
                if (v104 <= v94)
                  v105 = v79 + v93;
                else
                  v105 = v104;
                if (HIDWORD(v105))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19577998CLL);
                }
                v106 = *(char **)a2;
                v107 = (void *)WTF::fastMalloc((WTF *)v105);
                *(_DWORD *)(a2 + 8) = v105;
                *(_QWORD *)a2 = v107;
                memcpy(v107, v106, v93);
                if (v106)
                {
                  if (*(char **)a2 == v106)
                  {
                    *(_QWORD *)a2 = 0;
                    *(_DWORD *)(a2 + 8) = 0;
                  }
                  WTF::fastFree((WTF *)v106, v108);
                }
              }
              v96 = *v26;
              if (v94 < v96)
              {
                __break(0xC471u);
                JUMPOUT(0x19577995CLL);
              }
              result = (uint64_t)memcpy((void *)(*(_QWORD *)a2 + v96), v120, v79);
              *(_DWORD *)(a2 + 12) = v94;
              if (v120)
                return WTF::fastFree(v7, v9);
              return result;
            }
            v109 = v82 + (v82 >> 2);
            if (v109 >= 0x10)
              v110 = v109 + 1;
            else
              v110 = 16;
            if (v110 <= v81)
              v111 = v6 + v80;
            else
              v111 = v110;
            if (!HIDWORD(v111))
            {
              v112 = *(char **)a2;
              v113 = (void *)WTF::fastMalloc((WTF *)v111);
              *(_DWORD *)(a2 + 8) = v111;
              *(_QWORD *)a2 = v113;
              memcpy(v113, v112, v80);
              if (v112)
              {
                if (*(char **)a2 == v112)
                {
                  *(_QWORD *)a2 = 0;
                  *(_DWORD *)(a2 + 8) = 0;
                }
                WTF::fastFree((WTF *)v112, v114);
              }
              goto LABEL_112;
            }
LABEL_179:
            __break(0xC471u);
            JUMPOUT(0x19577992CLL);
          }
        }
        __break(1u);
        goto LABEL_109;
      }
    }
    else
    {
      v25 = 0;
      v26 = (_DWORD *)(a2 + 12);
      v121 = (_DWORD *)(a2 + 8);
    }
    *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v25 + 1), (unint64_t)&WebCore::SequenceMark);
    goto LABEL_50;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v7)
    return WTF::fastFree(v7, v9);
  return result;
}

void WebCore::CryptoKeyOKP::platformGeneratePair(int a1@<W0>, unsigned int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
    goto LABEL_7;
  v9 = a1;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  if (a1 != 21)
  {
    if (a1 == 20)
    {
      ccsha512_di();
      ccrng();
      if (!cced25519_make_key_pair())
        goto LABEL_8;
    }
LABEL_7:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return;
  }
  ccrng();
  if (cccurve25519_make_key_pair())
    goto LABEL_7;
LABEL_8:
  v10 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v11 = v19;
  *v10 = v18;
  v10[1] = v11;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 12) = v9;
  *(_WORD *)(v12 + 13) = 256;
  *(_QWORD *)v12 = off_1E3397400;
  *(_DWORD *)(v12 + 16) = a4;
  *(_DWORD *)(v12 + 20) = a2;
  *(_QWORD *)(v12 + 24) = v10;
  *(_QWORD *)(v12 + 32) = 0x2000000020;
  v13 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
  v14 = v17;
  *v13 = v16;
  v13[1] = v14;
  v15 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v15 + 8) = 1;
  *(_BYTE *)(v15 + 12) = v9;
  *(_BYTE *)(v15 + 13) = 1;
  *(_BYTE *)(v15 + 14) = a3;
  *(_QWORD *)v15 = off_1E3397400;
  *(_DWORD *)(v15 + 16) = a4;
  *(_DWORD *)(v15 + 20) = a2;
  *(_QWORD *)(v15 + 24) = v13;
  *(_QWORD *)(v15 + 32) = 0x2000000020;
  *(_QWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = v15;
  *(_BYTE *)(a5 + 16) = 1;
}

uint64_t WebCore::CryptoKeyOKP::importSpki@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  void *v29;
  char v30;

  if (a2 >= 2)
    goto LABEL_33;
  v6 = a3[3];
  if (v6 <= 1)
    goto LABEL_33;
  v7 = *(_QWORD *)a3;
  v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1);
  v9 = (char)v8;
  v10 = v8 - 127;
  if (v9 >= 0)
    v10 = 1;
  if (v10 + 3 > v6)
    goto LABEL_33;
  v11 = v10 + 2;
  if (v11 >= v6)
    goto LABEL_52;
  v12 = *(unsigned __int8 *)(v7 + v11);
  v13 = (char)v12;
  v14 = v12 - 127;
  if (v13 >= 0)
    v14 = 1;
  v15 = v14 + v11;
  v16 = v15 + 5;
  if (v15 + 5 > v6)
    goto LABEL_33;
  if (v15 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E44);
  }
  if (*(_BYTE *)(v7 + v15) != 6)
    goto LABEL_33;
  if (v15 + 1 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E4CLL);
  }
  if (*(_BYTE *)(v7 + v15 + 1) != 3)
    goto LABEL_33;
  if (v15 + 2 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E54);
  }
  if (*(_BYTE *)(v7 + v15 + 2) != 43)
    goto LABEL_33;
  if (v15 + 3 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E5CLL);
  }
  if (*(_BYTE *)(v7 + v15 + 3) != 101)
    goto LABEL_33;
  v17 = v15 + 4;
  if (a2 == 1)
  {
    if (v17 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195779E6CLL);
    }
    if (*(_BYTE *)(v7 + v17) != 112)
      goto LABEL_33;
  }
  else
  {
    if (v17 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195779E64);
    }
    if (*(_BYTE *)(v7 + v17) != 110)
      goto LABEL_33;
  }
  v18 = v15 + 6;
  if (v18 > v6)
    goto LABEL_33;
  if (v16 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E74);
  }
  if (*(_BYTE *)(v7 + v16) != 3)
    goto LABEL_33;
  if (v18 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E7CLL);
  }
  v19 = *(unsigned __int8 *)(v7 + v18);
  v20 = (char)v19;
  v21 = v19 - 127;
  if (v20 >= 0)
    v21 = 1;
  v22 = v21 + v18;
  v23 = v22 + 1;
  if (v6 < v22 + 1)
    goto LABEL_33;
  if (v22 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195779E84);
  }
  if (*(_BYTE *)(v7 + v22))
  {
LABEL_33:
    *a6 = 0;
    return result;
  }
  v30 = result;
  v24 = v6 - v23;
  if (v6 == v23)
  {
    if ((_DWORD)v24 != 32)
      goto LABEL_33;
    LODWORD(v24) = 0;
    v28 = 0;
    goto LABEL_40;
  }
  if (HIDWORD(v24))
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x195779E3CLL);
  }
  v25 = a3[3];
  v26 = *(_QWORD *)a3;
  v27 = (const void *)(v7 + v23);
  v28 = (void *)WTF::fastMalloc((WTF *)(v6 - v23));
  memcpy(v28, v27, v26 + v25 - (_QWORD)v27);
  if ((_DWORD)v24 != 32)
  {
    *a6 = 0;
    return WTF::fastFree((WTF *)v28, v29);
  }
LABEL_40:
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v30;
  *(_BYTE *)(result + 13) = 0;
  *(_BYTE *)(result + 14) = a4;
  *(_QWORD *)result = off_1E3397400;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 24) = v28;
  *(_DWORD *)(result + 32) = v24;
  *(_DWORD *)(result + 36) = 32;
  *a6 = result;
  return result;
}

uint64_t WebCore::CryptoKeyOKP::exportSpki@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char v12;
  size_t v13;
  size_t v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  uint64_t v24;

  if (*(_BYTE *)(this + 13))
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v3 = this;
  v4 = *(unsigned int *)(this + 36);
  v24 = 0;
  if (v4 >= 0xFFFFFFF4)
  {
    __break(0xC471u);
    goto LABEL_32;
  }
  LODWORD(v24) = v4 + 12;
  v23 = (char *)WTF::fastMalloc((WTF *)(v4 + 12));
  *v23 = 48;
  HIDWORD(v24) = 1;
  WebCore::addEncodedASN1Length((uint64_t)&v23, v4 + 10);
  v5 = HIDWORD(v24);
  if (HIDWORD(v24) == (_DWORD)v24)
  {
    v6 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&WebCore::SequenceMark);
    v5 = HIDWORD(v24);
    v7 = v23;
    v8 = *v6;
  }
  else
  {
    v7 = v23;
    v8 = 48;
  }
  v7[v5] = v8;
  ++HIDWORD(v24);
  WebCore::addEncodedASN1Length((uint64_t)&v23, 5uLL);
  WebCore::writeOID((char *)*(unsigned int *)(v3 + 20), (uint64_t)&v23);
  v9 = HIDWORD(v24);
  if (HIDWORD(v24) == (_DWORD)v24)
  {
    v10 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&WebCore::BitStringMark);
    v9 = HIDWORD(v24);
    v11 = v23;
    v12 = *v10;
  }
  else
  {
    v11 = v23;
    v12 = 3;
  }
  v11[v9] = v12;
  ++HIDWORD(v24);
  this = WebCore::addEncodedASN1Length((uint64_t)&v23, v4 + 1);
  if (HIDWORD(v24) == (_DWORD)v24)
  {
    this = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&WebCore::InitialOctet);
    v23[HIDWORD(v24)] = *(_BYTE *)this;
  }
  else
  {
    v23[HIDWORD(v24)] = 0;
  }
  v13 = ++HIDWORD(v24);
  v14 = *(unsigned int *)(v3 + 36);
  if ((_DWORD)v14)
  {
    v15 = *(const void **)(v3 + 24);
    v16 = v14 + v13;
    if (v16 <= v24)
    {
LABEL_15:
      if (v16 < HIDWORD(v24))
      {
        __break(0xC471u);
        JUMPOUT(0x19577A124);
      }
      this = (uint64_t)memcpy(&v23[HIDWORD(v24)], v15, v14);
      LODWORD(v13) = v14 + v13;
      goto LABEL_17;
    }
    v17 = v24 + ((unint64_t)v24 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v16)
      v19 = v14 + v13;
    else
      v19 = v18;
    if (!HIDWORD(v19))
    {
      v20 = v23;
      v21 = (char *)WTF::fastMalloc((WTF *)v19);
      LODWORD(v24) = v19;
      v23 = v21;
      memcpy(v21, v20, v13);
      if (v20)
      {
        if (v23 == v20)
        {
          v23 = 0;
          LODWORD(v24) = 0;
        }
        WTF::fastFree((WTF *)v20, v22);
      }
      goto LABEL_15;
    }
    __break(0xC471u);
LABEL_32:
    JUMPOUT(0x19577A11CLL);
  }
LABEL_17:
  *(_QWORD *)a2 = v23;
  *(_DWORD *)(a2 + 8) = v24;
  *(_DWORD *)(a2 + 12) = v13;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

char *WebCore::writeOID(char *result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char *v5;
  char v6;
  int v7;
  uint64_t v8;
  char *v9;
  char v10;
  int v11;
  uint64_t v12;
  char *v13;
  char v14;
  int v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  char *v22;
  char v23;

  v3 = (int)result;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(a2 + 8))
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v4 + 1), (unint64_t)&WebCore::OKPOIDFirstByte);
    v4 = *(unsigned int *)(a2 + 12);
    v5 = *(char **)a2;
    v6 = *result;
  }
  else
  {
    v5 = *(char **)a2;
    v6 = 6;
  }
  v5[v4] = v6;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v8;
  if ((_DWORD)v8 == v7)
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v8 + 1), (unint64_t)&WebCore::OKPOIDSecondByte);
    v8 = *(unsigned int *)(a2 + 12);
    v9 = *(char **)a2;
    v10 = *result;
  }
  else
  {
    v9 = *(char **)a2;
    v10 = 3;
  }
  v9[v8] = v10;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v12;
  if ((_DWORD)v12 == v11)
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v12 + 1), (unint64_t)&WebCore::OKPOIDThirdByte);
    v12 = *(unsigned int *)(a2 + 12);
    v13 = *(char **)a2;
    v14 = *result;
  }
  else
  {
    v13 = *(char **)a2;
    v14 = 43;
  }
  v13[v12] = v14;
  v15 = *(_DWORD *)(a2 + 8);
  v16 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v16;
  if ((_DWORD)v16 == v15)
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, (WTF *)(v16 + 1), (unint64_t)&WebCore::OKPOIDFourthByte);
    v16 = *(unsigned int *)(a2 + 12);
    v17 = *(char **)a2;
    v18 = *result;
  }
  else
  {
    v17 = *(char **)a2;
    v18 = 101;
  }
  v17[v16] = v18;
  v19 = (*(_DWORD *)(a2 + 12) + 1);
  *(_DWORD *)(a2 + 12) = v19;
  if (v3 == 1)
  {
    if ((_DWORD)v19 != *(_DWORD *)(a2 + 8))
    {
      v22 = *(char **)a2;
      v23 = 112;
      goto LABEL_22;
    }
    v20 = (WTF *)(v19 + 1);
    v21 = &WebCore::OKPOIDEd25519Byte;
  }
  else
  {
    if (v3)
      return result;
    if ((_DWORD)v19 != *(_DWORD *)(a2 + 8))
    {
      v22 = *(char **)a2;
      v23 = 110;
      goto LABEL_22;
    }
    v20 = (WTF *)(v19 + 1);
    v21 = &WebCore::OKPOIDX25519Byte;
  }
  result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v20, (unint64_t)v21);
  v19 = *(unsigned int *)(a2 + 12);
  v22 = *(char **)a2;
  v23 = *result;
LABEL_22:
  v22[v19] = v23;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

uint64_t WebCore::CryptoKeyOKP::importPkcs8@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v40;
  uint64_t v41;
  const void *v42;
  void *v43;
  void *v44;

  if (a2 >= 2)
    goto LABEL_43;
  v6 = a3[3];
  if (v6 <= 1)
    goto LABEL_43;
  v7 = *(_QWORD *)a3;
  v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1);
  v9 = (char)v8;
  v10 = v8 - 127;
  if (v9 >= 0)
    v10 = 1;
  if (v10 + 2 > v6 || v10 + 5 > v6)
    goto LABEL_43;
  v11 = v10 + 4;
  if (v11 >= v6)
    goto LABEL_63;
  v12 = *(unsigned __int8 *)(v7 + v11);
  v13 = (char)v12;
  v14 = v12 - 127;
  if (v13 >= 0)
    v14 = 1;
  v15 = v14 + v11;
  if (v15 + 1 > v6)
    goto LABEL_43;
  if (v15 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A5C0);
  }
  v16 = *(unsigned __int8 *)(v7 + v15);
  v17 = (char)v16;
  v18 = v16 - 127;
  if (v17 >= 0)
    v18 = 1;
  v19 = v18 + v15;
  v20 = v19 + 1;
  if (v19 + 1 > v6)
    goto LABEL_43;
  if (v19 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A5C8);
  }
  if (*(_BYTE *)(v7 + v19) != 6)
    goto LABEL_43;
  if (v20 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A5D0);
  }
  if (*(_BYTE *)(v7 + v20) != 3)
    goto LABEL_43;
  if (v19 + 2 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A5D8);
  }
  if (*(_BYTE *)(v7 + v19 + 2) != 43)
    goto LABEL_43;
  if (v19 + 3 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A5E0);
  }
  if (*(_BYTE *)(v7 + v19 + 3) != 101)
    goto LABEL_43;
  v21 = v19 + 4;
  if (a2 == 1)
  {
    if (v21 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19577A5F0);
    }
    if (*(_BYTE *)(v7 + v21) != 112)
      goto LABEL_43;
  }
  else
  {
    if (v21 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19577A5E8);
    }
    if (*(_BYTE *)(v7 + v21) != 110)
      goto LABEL_43;
  }
  v22 = v19 + 6;
  if (v19 + 6 > v6)
    goto LABEL_43;
  v23 = v19 + 5;
  if (v23 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A5F8);
  }
  if (*(_BYTE *)(v7 + v23) != 4)
  {
LABEL_43:
    *a6 = 0;
    return result;
  }
  if (v22 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A600);
  }
  v25 = *(_QWORD *)a3;
  v26 = *(unsigned __int8 *)(v7 + v22);
  v27 = (char)v26;
  v28 = v26 - 127;
  if (v27 >= 0)
    v28 = 1;
  v29 = v28 + v22;
  v30 = v28 + v22 + 1;
  if (v30 > v6)
    goto LABEL_42;
  v31 = a3[3];
  if (v29 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A608);
  }
  if (*(_BYTE *)(v25 + v29) != 4)
    goto LABEL_42;
  if (v30 >= v31)
  {
    __break(0xC471u);
    JUMPOUT(0x19577A610);
  }
  v32 = *(unsigned __int8 *)(v25 + v30);
  v33 = (char)v32;
  v34 = v32 - 127;
  if (v33 >= 0)
    v34 = 1;
  v35 = v34 + v30;
  if (v35 + 1 > v31)
  {
LABEL_42:
    *a6 = 0;
    return result;
  }
  v36 = result;
  v40 = v31 - v35;
  if (v31 == v35)
  {
    if ((_DWORD)v40 != 32)
      goto LABEL_42;
    LODWORD(v40) = 0;
    v43 = 0;
    goto LABEL_50;
  }
  if (HIDWORD(v40))
  {
LABEL_63:
    __break(0xC471u);
    JUMPOUT(0x19577A5B8);
  }
  v41 = *(_QWORD *)a3;
  v42 = (const void *)(v25 + v35);
  v43 = (void *)WTF::fastMalloc((WTF *)(v31 - v35));
  memcpy(v43, v42, v41 + v31 - (_QWORD)v42);
  if ((_DWORD)v40 != 32)
  {
    *a6 = 0;
    return WTF::fastFree((WTF *)v43, v44);
  }
LABEL_50:
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = v36;
  *(_BYTE *)(result + 13) = 1;
  *(_BYTE *)(result + 14) = a4;
  *(_QWORD *)result = off_1E3397400;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 24) = v43;
  *(_DWORD *)(result + 32) = v40;
  *(_DWORD *)(result + 36) = 32;
  *a6 = result;
  return result;
}

uint64_t WebCore::CryptoKeyOKP::exportPkcs8@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  size_t v41;
  size_t v42;
  const void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  char *v51;
  uint64_t v52;

  if (*(_BYTE *)(this + 13) != 1)
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v3 = this;
  v4 = *(unsigned int *)(this + 36);
  v52 = 0;
  if (v4 >= 0xFFFFFFF0)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  LODWORD(v52) = v4 + 16;
  v51 = (char *)WTF::fastMalloc((WTF *)(v4 + 16));
  *v51 = 48;
  ++HIDWORD(v52);
  WebCore::addEncodedASN1Length((uint64_t)&v51, v4 + 14);
  v5 = HIDWORD(v52);
  if (HIDWORD(v52) == (_DWORD)v52)
  {
    v6 = HIDWORD(v52) + ((unint64_t)HIDWORD(v52) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= (unint64_t)HIDWORD(v52) + 1)
      v8 = HIDWORD(v52) + 1;
    else
      v8 = v7;
    if (HIDWORD(v8))
    {
      __break(0xC471u);
      JUMPOUT(0x19577AA8CLL);
    }
    v9 = v51;
    v10 = (char *)WTF::fastMalloc((WTF *)v8);
    LODWORD(v52) = v8;
    v51 = v10;
    memcpy(v10, v9, v5);
    if (v9)
    {
      if (v51 == v9)
      {
        v51 = 0;
        LODWORD(v52) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v12 = &v51[HIDWORD(v52)];
  }
  else
  {
    v12 = &v51[HIDWORD(v52)];
  }
  *v12 = 2;
  v13 = (HIDWORD(v52) + 1);
  HIDWORD(v52) = v13;
  if ((_DWORD)v13 == (_DWORD)v52)
  {
    v14 = v13 + (v13 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13 + 1)
      v16 = v13 + 1;
    else
      v16 = v15;
    if (HIDWORD(v16))
    {
      __break(0xC471u);
      JUMPOUT(0x19577AA94);
    }
    v17 = v51;
    v18 = (char *)WTF::fastMalloc((WTF *)v16);
    LODWORD(v52) = v16;
    v51 = v18;
    memcpy(v18, v17, v13);
    if (v17)
    {
      if (v51 == v17)
      {
        v51 = 0;
        LODWORD(v52) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
    v20 = &v51[HIDWORD(v52)];
  }
  else
  {
    v20 = &v51[v13];
  }
  *v20 = 1;
  v21 = (HIDWORD(v52) + 1);
  HIDWORD(v52) = v21;
  if ((_DWORD)v21 == (_DWORD)v52)
  {
    v22 = v21 + (v21 >> 2);
    if (v22 >= 0x10)
      v23 = v22 + 1;
    else
      v23 = 16;
    if (v23 <= v21 + 1)
      v24 = v21 + 1;
    else
      v24 = v23;
    if (HIDWORD(v24))
    {
      __break(0xC471u);
      JUMPOUT(0x19577AA9CLL);
    }
    v25 = v51;
    v26 = (char *)WTF::fastMalloc((WTF *)v24);
    LODWORD(v52) = v24;
    v51 = v26;
    memcpy(v26, v25, v21);
    if (v25)
    {
      if (v51 == v25)
      {
        v51 = 0;
        LODWORD(v52) = 0;
      }
      WTF::fastFree((WTF *)v25, v27);
    }
    v28 = &v51[HIDWORD(v52)];
  }
  else
  {
    v28 = &v51[v21];
  }
  *v28 = 0;
  v29 = (HIDWORD(v52) + 1);
  HIDWORD(v52) = v29;
  if ((_DWORD)v29 == (_DWORD)v52)
  {
    v30 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v51, (WTF *)(v29 + 1), (unint64_t)&WebCore::SequenceMark);
    v29 = HIDWORD(v52);
    v31 = v51;
    v32 = *v30;
  }
  else
  {
    v31 = v51;
    v32 = 48;
  }
  v31[v29] = v32;
  ++HIDWORD(v52);
  WebCore::addEncodedASN1Length((uint64_t)&v51, 5uLL);
  WebCore::writeOID((char *)*(unsigned int *)(v3 + 20), (uint64_t)&v51);
  v33 = HIDWORD(v52);
  if (HIDWORD(v52) == (_DWORD)v52)
  {
    v34 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v51, (WTF *)(HIDWORD(v52) + 1), (unint64_t)&WebCore::OctetStringMark);
    v33 = HIDWORD(v52);
    v35 = v51;
    v36 = *v34;
  }
  else
  {
    v35 = v51;
    v36 = 4;
  }
  v35[v33] = v36;
  ++HIDWORD(v52);
  WebCore::addEncodedASN1Length((uint64_t)&v51, v4 + 2);
  v37 = HIDWORD(v52);
  if (HIDWORD(v52) == (_DWORD)v52)
  {
    v38 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v51, (WTF *)(HIDWORD(v52) + 1), (unint64_t)&WebCore::OctetStringMark);
    v37 = HIDWORD(v52);
    v39 = v51;
    v40 = *v38;
  }
  else
  {
    v39 = v51;
    v40 = 4;
  }
  v39[v37] = v40;
  ++HIDWORD(v52);
  this = WebCore::addEncodedASN1Length((uint64_t)&v51, v4);
  v41 = *(unsigned int *)(v3 + 36);
  v42 = HIDWORD(v52);
  if (!(_DWORD)v41)
    goto LABEL_60;
  v43 = *(const void **)(v3 + 24);
  v44 = HIDWORD(v52) + v41;
  if (v44 > v52)
  {
    v45 = v52 + ((unint64_t)v52 >> 2);
    if (v45 >= 0x10)
      v46 = v45 + 1;
    else
      v46 = 16;
    if (v46 <= v44)
      v47 = HIDWORD(v52) + v41;
    else
      v47 = v46;
    if (!HIDWORD(v47))
    {
      v48 = v51;
      v49 = (char *)WTF::fastMalloc((WTF *)v47);
      LODWORD(v52) = v47;
      v51 = v49;
      memcpy(v49, v48, v42);
      if (v48)
      {
        if (v51 == v48)
        {
          v51 = 0;
          LODWORD(v52) = 0;
        }
        WTF::fastFree((WTF *)v48, v50);
      }
      goto LABEL_58;
    }
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x19577AA7CLL);
  }
LABEL_58:
  if (v44 < HIDWORD(v52))
  {
    __break(0xC471u);
    JUMPOUT(0x19577AA84);
  }
  this = (uint64_t)memcpy(&v51[HIDWORD(v52)], v43, v41);
  LODWORD(v42) = v42 + v41;
LABEL_60:
  *(_QWORD *)a2 = v51;
  *(_DWORD *)(a2 + 8) = v52;
  *(_DWORD *)(a2 + 12) = v42;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t WebCore::CryptoKeyRSA::create@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  int v15;
  char v16;

  result = *(unsigned __int8 *)(a4 + 8);
  if (!*(_BYTE *)(a4 + 8))
  {
    if (!*(_DWORD *)(a4 + 180))
      goto LABEL_9;
LABEL_7:
    result = WTFLogAlways();
LABEL_8:
    *a7 = 0;
    return result;
  }
  if (!*(_BYTE *)(a4 + 64) || *(_DWORD *)(a4 + 180))
    goto LABEL_7;
  if (!*(_DWORD *)(a4 + 84))
    goto LABEL_8;
LABEL_9:
  v15 = CCRSACryptorCreateFromData();
  result = 0;
  if (!v15)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    v16 = *(_BYTE *)(a4 + 8);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = a1;
    *(_BYTE *)(result + 13) = v16;
    *(_BYTE *)(result + 14) = a5;
    *(_DWORD *)(result + 16) = a6;
    *(_QWORD *)result = off_1E33972B0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = a3;
    *(_BYTE *)(result + 33) = a2;
  }
  *a7 = result;
  return result;
}

uint64_t WebCore::getPublicKeyComponents(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  if (CCRSAGetKeyType())
    v6 = MEMORY[0x19AEA018C](*a1);
  else
    v6 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if (!(v7 >> 14))
  {
    v8 = *(unsigned int *)(a2 + 8);
    if (!(v8 >> 14))
    {
      v9 = v8 + (v8 >> 2);
      v10 = 0x3FFFLL;
      if (v9 >= 0x4000)
        v10 = v9;
      if (v9 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 0x4000;
      v12 = *(void **)a2;
      v13 = (void *)WTF::fastMalloc((WTF *)v11);
      *(_DWORD *)(a2 + 8) = v11;
      *(_QWORD *)a2 = v13;
      memcpy(v13, v12, v7);
      if (v12)
      {
        if (*(void **)a2 == v12)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v12, v14);
      }
    }
  }
  *(_DWORD *)(a2 + 12) = 0x4000;
  v15 = *(unsigned int *)(a3 + 12);
  if (!(v15 >> 14))
  {
    v16 = *(unsigned int *)(a3 + 8);
    if (!(v16 >> 14))
    {
      v17 = v16 + (v16 >> 2);
      v18 = 0x3FFFLL;
      if (v17 >= 0x4000)
        v18 = v17;
      if (v17 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 0x4000;
      v20 = *(void **)a3;
      v21 = (void *)WTF::fastMalloc((WTF *)v19);
      *(_DWORD *)(a3 + 8) = v19;
      *(_QWORD *)a3 = v21;
      memcpy(v21, v20, v15);
      if (v20)
      {
        if (*(void **)a3 == v20)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        WTF::fastFree((WTF *)v20, v22);
      }
    }
  }
  *(_DWORD *)(a3 + 12) = 0x4000;
  v23 = CCRSAGetKeyComponents();
  if (!(_DWORD)v23)
  {
    *(_DWORD *)(a2 + 12) = 0x4000;
    *(_DWORD *)(a3 + 12) = 0x4000;
  }
  if (v6)
    MEMORY[0x19AEA01A4](v6);
  return v23;
}

WTF *WebCore::CryptoKeyRSA::algorithm@<X0>(WebCore::CryptoKeyRSA *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WTF *v5;
  unint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF *result;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  char *v33;

  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)this + 3, (uint64_t)&v29, (uint64_t)&v27))
  {
    WTFLogAlways();
    v5 = v27;
    if ((_DWORD)v28)
    {
      HIDWORD(v28) = 0;
      if (v27)
      {
        v27 = 0;
        LODWORD(v28) = 0;
        WTF::fastFree(v5, v4);
        v5 = 0;
      }
    }
    v6 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v6 != -1)
    {
      v33 = &v31;
      v32 = (uint64_t *)&v33;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), (_QWORD *)a2);
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(0, (uint64_t *)&v33);
    v8 = 0;
    v9 = (uint64_t)v33;
    goto LABEL_6;
  }
  v8 = 8 * HIDWORD(v30);
  if (!*((_BYTE *)this + 32))
  {
    v18 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
    if (v18 != -1)
    {
      v33 = &v31;
      v32 = (uint64_t *)&v33;
      std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
    }
    WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), &v33);
    v19 = (uint64_t)v33;
    v5 = v27;
    v20 = HIDWORD(v28);
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(HIDWORD(v28), (uint64_t *)&v33);
    if (!v33)
    {
      v9 = 0;
LABEL_52:
      *(_QWORD *)a2 = v19;
LABEL_6:
      v10 = 5;
      goto LABEL_42;
    }
    v21 = *((_QWORD *)v33 + 4);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v23 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v24 = *((_QWORD *)v33 + 3);
          goto LABEL_51;
        }
        if ((v22 & 0x3FFFFFFFFLL) + v23)
        {
          v24 = *((_QWORD *)v33 + 3);
          if (v24 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v24 = (v24 & 0x3FFFFFFFFLL) + v23;
          goto LABEL_51;
        }
      }
    }
    v24 = 0;
LABEL_51:
    memcpy((void *)v24, v5, v20);
    v9 = (uint64_t)v33;
    goto LABEL_52;
  }
  v11 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v11 != -1)
  {
    v33 = &v31;
    v32 = (uint64_t *)&v33;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), &v33);
  v12 = (uint64_t)v33;
  v5 = v27;
  v13 = HIDWORD(v28);
  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(HIDWORD(v28), (uint64_t *)&v33);
  if (v33)
  {
    v14 = *((_QWORD *)v33 + 4);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v16 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v17 = *((_QWORD *)v33 + 3);
          goto LABEL_38;
        }
        if ((v15 & 0x3FFFFFFFFLL) + v16)
        {
          v17 = *((_QWORD *)v33 + 3);
          if (v17 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v17 = (v17 & 0x3FFFFFFFFLL) + v16;
          goto LABEL_38;
        }
      }
    }
    v17 = 0;
LABEL_38:
    memcpy((void *)v17, v5, v13);
    v9 = (uint64_t)v33;
    goto LABEL_39;
  }
  v9 = 0;
LABEL_39:
  v25 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v25 != -1)
  {
    v33 = &v31;
    v32 = (uint64_t *)&v33;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 33), (_QWORD *)(a2 + 24));
  *(_QWORD *)a2 = v12;
  v10 = 4;
LABEL_42:
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 32) = v10;
  if (v5)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v5, v7);
  }
  result = v29;
  if (v29)
    return (WTF *)WTF::fastFree(v29, v7);
  return result;
}

WTF *WebCore::CryptoKeyRSA::exportData@<X0>(WebCore::CryptoKeyRSA *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  WTF *result;
  void *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  _QWORD *v15;
  WTF *v16;
  uint64_t v17;
  char *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  int v22;
  WTF *v23;
  int v24;
  int v25;
  _QWORD *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  __int128 v31;
  __int128 v32;
  void *__src;
  WTF *v34;
  WTF *v35[2];
  WTF *v36[2];
  WTF *v37;
  uint64_t v38;
  WTF *v39[2];
  _QWORD v40[2];
  WTF *v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (_QWORD *)((char *)this + 24);
  result = (WTF *)CCRSAGetKeyType();
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
    {
      *a2 = 0;
      return result;
    }
    __src = 0;
    v34 = 0;
    v29 = 0;
    v30 = 0;
    if (WebCore::getPublicKeyComponents(v3, (uint64_t)&__src, (uint64_t)&v29))
    {
      WTFLogAlways();
      v6 = 0;
    }
    else
    {
      v6 = operator new();
      *(_QWORD *)v6 = &off_1E3397430;
      *(_BYTE *)(v6 + 8) = 0;
      v7 = HIDWORD(v34);
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_DWORD *)(v6 + 28) = v7;
      if ((_DWORD)v7)
      {
        v8 = (void *)WTF::fastMalloc((WTF *)v7);
        *(_DWORD *)(v6 + 24) = v7;
        *(_QWORD *)(v6 + 16) = v8;
        memcpy(v8, __src, v7);
      }
      v9 = HIDWORD(v30);
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      *(_DWORD *)(v6 + 44) = v9;
      if ((_DWORD)v9)
      {
        v10 = (void *)WTF::fastMalloc((WTF *)v9);
        *(_DWORD *)(v6 + 40) = v9;
        *(_QWORD *)(v6 + 32) = v10;
        memcpy(v10, v29, v9);
      }
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
    }
    *a2 = v6;
    if (v29)
      WTF::fastFree(v29, v5);
    result = (WTF *)__src;
    if (__src)
      return (WTF *)WTF::fastFree(result, v5);
    return result;
  }
  v40[0] = 0;
  v40[1] = 0;
  v39[0] = 0;
  v39[1] = 0;
  if (WebCore::getPublicKeyComponents(v3, (uint64_t)v40, (uint64_t)v39))
  {
    WTFLogAlways();
    *a2 = 0;
    goto LABEL_47;
  }
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v31 = 0u;
  v32 = 0u;
  v27 = 0;
  v28 = 0;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
  v47 = 0x4000;
  v37 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
  v38 = 0x400000004000;
  v46 = 0x4000;
  __src = (void *)WTF::fastMalloc((WTF *)0x4000);
  v34 = (WTF *)0x400000004000;
  v45 = 0x4000;
  v29 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
  v30 = (WTF *)0x400000004000;
  v44 = 0x4000;
  if (CCRSAGetKeyComponents())
    goto LABEL_20;
  HIDWORD(v38) = v46;
  HIDWORD(v34) = v45;
  HIDWORD(v30) = v44;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  if (CCRSAGetCRTComponentsSizes())
    goto LABEL_20;
  v22 = (int)v43;
  if (v43)
  {
    if ((unint64_t)v43 >> 32)
      goto LABEL_73;
    v23 = (WTF *)WTF::fastMalloc(v43);
  }
  else
  {
    v23 = 0;
  }
  v24 = (int)v42;
  if (v42)
  {
    if ((unint64_t)v42 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x19577B5E4);
    }
    v13 = (WTF *)WTF::fastMalloc(v42);
  }
  else
  {
    v13 = 0;
  }
  v25 = (int)v41;
  if (!v41)
  {
    v14 = 0;
    goto LABEL_63;
  }
  if ((unint64_t)v41 >> 32)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x19577B5DCLL);
  }
  v14 = (WTF *)WTF::fastMalloc(v41);
LABEL_63:
  if (!CCRSAGetCRTComponents())
  {
    v35[0] = v23;
    LODWORD(v35[1]) = v22;
    HIDWORD(v35[1]) = v22;
    *(_QWORD *)&v31 = v13;
    DWORD2(v31) = v24;
    HIDWORD(v31) = v24;
    *(_QWORD *)&v32 = v14;
    DWORD2(v32) = v25;
    HIDWORD(v32) = v25;
    WTF::fastFree(v11, v12);
    v26 = (_QWORD *)operator new();
    v15 = WebCore::CryptoKeyRSAComponents::CryptoKeyRSAComponents(v26, (uint64_t)v40, (uint64_t)v39, (uint64_t)&v37, (uint64_t)&__src, (const void **)&v29, (unsigned int *)&v27);
    goto LABEL_21;
  }
  if (v14)
    WTF::fastFree(v14, v12);
  if (v13)
    WTF::fastFree(v13, v12);
  if (v23)
    WTF::fastFree(v23, v12);
LABEL_20:
  WTF::fastFree(v11, v12);
  WTFLogAlways();
  v13 = 0;
  v14 = 0;
  v15 = 0;
LABEL_21:
  *a2 = (uint64_t)v15;
  v16 = v27;
  if (HIDWORD(v28))
  {
    v17 = 48 * HIDWORD(v28);
    v18 = (char *)v27 + 24;
    do
    {
      v19 = (WTF *)*((_QWORD *)v18 + 1);
      if (v19)
      {
        *((_QWORD *)v18 + 1) = 0;
        *((_DWORD *)v18 + 4) = 0;
        WTF::fastFree(v19, v5);
      }
      v20 = (WTF *)*((_QWORD *)v18 - 1);
      if (v20)
      {
        *((_QWORD *)v18 - 1) = 0;
        *(_DWORD *)v18 = 0;
        WTF::fastFree(v20, v5);
      }
      v21 = (WTF *)*((_QWORD *)v18 - 3);
      if (v21)
      {
        *((_QWORD *)v18 - 3) = 0;
        *((_DWORD *)v18 - 4) = 0;
        WTF::fastFree(v21, v5);
      }
      v18 += 48;
      v17 -= 48;
    }
    while (v17);
    v16 = v27;
  }
  if (v16)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v16, v5);
  }
  if (v14)
  {
    *(_QWORD *)&v32 = 0;
    DWORD2(v32) = 0;
    WTF::fastFree(v14, v5);
    v13 = (WTF *)v31;
  }
  if (v13)
  {
    *(_QWORD *)&v31 = 0;
    DWORD2(v31) = 0;
    WTF::fastFree(v13, v5);
  }
  if (v29)
    WTF::fastFree(v29, v5);
  if (v36[0])
    WTF::fastFree(v36[0], v5);
  if (v35[0])
    WTF::fastFree(v35[0], v5);
  if (__src)
    WTF::fastFree((WTF *)__src, v5);
  if (v37)
    WTF::fastFree(v37, v5);
LABEL_47:
  if (v39[0])
    WTF::fastFree(v39[0], v5);
  result = (WTF *)v40[0];
  if (v40[0])
    return (WTF *)WTF::fastFree(result, v5);
  return result;
}

uint64_t WebCore::CryptoKeyRSA::generatePair(uint64_t result, char a2, char a3, int a4, uint64_t a5, char a6, int a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  char v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  NSObject *global_queue;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  _QWORD block[4];
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  int v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;

  v15 = result;
  v48 = *MEMORY[0x1E0C80C00];
  v16 = *(unsigned int *)(a5 + 12);
  if (v16 > 4)
  {
    v18 = 0;
    v19 = 0;
    v20 = *(_BYTE **)a5;
    v17 = v16 - 4;
    v21 = *(unsigned int *)(a5 + 12);
    while (v21)
    {
      if (*v20)
        goto LABEL_19;
      v18 = v19 + 5 >= v16;
      ++v20;
      --v21;
      if (++v19 == v17)
        goto LABEL_7;
    }
    __break(0xC471u);
  }
  else
  {
    v17 = v16 - 4;
    v18 = 1;
LABEL_7:
    if (v16 <= 4)
      v17 = 0;
    v22 = v16 > v17;
    v23 = v16 - v17;
    if (v22)
    {
      v24 = 0;
      v25 = (unsigned __int8 *)(*(_QWORD *)a5 + v17);
      do
      {
        v26 = *v25++;
        v24 = v26 | (v24 << 8);
        --v23;
      }
      while (v23);
      if (!v18)
        goto LABEL_20;
    }
    else
    {
LABEL_19:
      v24 = 0;
      if (!v18)
      {
LABEL_20:
        WTFLogAlways();
        return (*(uint64_t (**)(void))(*(_QWORD *)*a9 + 16))();
      }
    }
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3002000000;
    v34[3] = __Block_byref_object_copy__5;
    v34[4] = __Block_byref_object_dispose__5;
    v27 = *a8;
    *a8 = 0;
    v35 = v27;
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x3002000000;
    v32[3] = __Block_byref_object_copy__5;
    v32[4] = __Block_byref_object_dispose__6;
    v28 = *a9;
    *a9 = 0;
    v33 = v28;
    v29 = *(_OWORD *)(a10 + 240);
    v37 = *(_OWORD *)(a10 + 224);
    v38 = v29;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN7WebCore12CryptoKeyRSA12generatePairENS_25CryptoAlgorithmIdentifierES1_bjRKN3WTF6VectorIhLm0ENS2_15CrashOnOverflowELm16ENS2_10FastMallocEEEbiONS2_8FunctionIFvONS_13CryptoKeyPairEEEEONS9_IFvvEEEPNS_22ScriptExecutionContextE_block_invoke;
    block[3] = &unk_1E33972D8;
    v41 = a4;
    v42 = v24;
    v39 = v34;
    v40 = v32;
    v44 = v15;
    v45 = a2;
    v46 = a3;
    v47 = a6;
    v43 = a7;
    dispatch_async(global_queue, block);
    _Block_object_dispose(v32, 8);
    v31 = v33;
    v33 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    _Block_object_dispose(v34, 8);
    result = v35;
    v35 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t __Block_byref_object_dispose__6(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN7WebCore12CryptoKeyRSA12generatePairENS_25CryptoAlgorithmIdentifierES1_bjRKN3WTF6VectorIhLm0ENS2_15CrashOnOverflowELm16ENS2_10FastMallocEEEbiONS2_8FunctionIFvONS_13CryptoKeyPairEEEEONS9_IFvvEEEPNS_22ScriptExecutionContextE_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  if (CCRSACryptorGeneratePair())
  {
    WTFLogAlways();
    v2 = *(_OWORD *)(a1 + 48);
    v30[0] = *(_OWORD *)(a1 + 32);
    v30[1] = v2;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v4 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v6 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E3397308;
    v7[1] = v4;
    v7[2] = v6;
    v25 = v7;
    v26 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
LABEL_8:
      {
        WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
      }
      v20 = (uint64_t *)v30;
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_8;
  }
  v9 = *(_OWORD *)(a1 + 48);
  v29[0] = *(_OWORD *)(a1 + 32);
  v29[1] = v9;
  v10 = *(unsigned int *)(a1 + 92);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v12 = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v14 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  v15 = *(unsigned int *)(a1 + 88);
  v17 = v27;
  v16 = v28;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v18 = &off_1E3397330;
  v18[1] = v10 | (v15 << 32);
  v18[2] = v12;
  v18[3] = v14;
  v18[4] = v16;
  v18[5] = v17;
  v25 = v18;
  v26 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_13;
  }
  if (__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    goto LABEL_12;
LABEL_13:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v20 = (uint64_t *)v29;
LABEL_16:
  v21 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, v20);
  if (v21)
  {
    v22 = v21[4];
    if (v22)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v22 + 336))(v22, &v25);
  }
  v23 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CryptoKeyRSA::exportSpki@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unint64_t v4;
  WTF *v5;
  void *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  WTF *v29;
  char v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  WTF *v40[2];
  WTF *v41;
  uint64_t v42;

  if (*(_BYTE *)(this + 13))
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v41 = 0;
  v42 = 0;
  v40[0] = 0;
  v40[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(this + 24), (uint64_t)&v41, (uint64_t)v40))
  {
    WTFLogAlways();
    v4 = 0;
  }
  else
  {
    v4 = 2 * HIDWORD(v42);
  }
  if (v40[0])
    WTF::fastFree(v40[0], v3);
  if (v41)
  {
    WTF::fastFree(v41, v3);
    if (v4)
      goto LABEL_10;
LABEL_13:
    v5 = 0;
    goto LABEL_14;
  }
  if (!v4)
    goto LABEL_13;
LABEL_10:
  if (HIDWORD(v4))
    goto LABEL_78;
  v5 = (WTF *)WTF::fastMalloc((WTF *)v4);
LABEL_14:
  v40[0] = (WTF *)(v4 & 0xFFFFFFFE);
  this = CCRSACryptorExport();
  if ((_DWORD)this)
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (!v5)
      return this;
    return WTF::fastFree(v5, v6);
  }
  v7 = v40[0];
  v8 = (char *)v40[0] + 1;
  v9 = 20;
  if ((unint64_t)v40[0] + 1 >= 0x10000)
    v9 = 21;
  if ((unint64_t)v8 < 0x100)
    v9 = 19;
  v10 = (unint64_t)v8 >= 0x80;
  v11 = 18;
  if (v10)
    v11 = v9;
  v12 = (char *)v40[0] + v11;
  v41 = 0;
  v42 = 0;
  v10 = (unint64_t)v40[0] + v11 >= 0x10000;
  v13 = 3;
  if (v10)
    v13 = 4;
  if ((unint64_t)v12 < 0x100)
    v13 = 2;
  if ((unint64_t)v12 < 0x80)
    v13 = 1;
  v14 = &v12[v13];
  v15 = (WTF *)(v14 + 1);
  if (v14 == (char *)-1)
  {
    v17 = 0;
LABEL_34:
    v18 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v41, (WTF *)(v17 + 1), (unint64_t)&WebCore::SequenceMark);
    *((_BYTE *)v41 + HIDWORD(v42)) = *v18;
    goto LABEL_36;
  }
  if ((unint64_t)v15 >> 32)
  {
    __break(0xC471u);
    JUMPOUT(0x19577BF10);
  }
  v16 = (WTF *)WTF::fastMalloc(v15);
  LODWORD(v42) = (_DWORD)v15;
  v41 = v16;
  v17 = HIDWORD(v42);
  if (HIDWORD(v42) == (_DWORD)v15)
    goto LABEL_34;
  *((_BYTE *)v16 + HIDWORD(v42)) = 48;
LABEL_36:
  ++HIDWORD(v42);
  WebCore::addEncodedASN1Length((uint64_t)&v41, (unint64_t)v12);
  v19 = HIDWORD(v42);
  v20 = HIDWORD(v42) + 15;
  if (v20 > v42)
  {
    v21 = v42 + ((unint64_t)v42 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v20)
      v23 = HIDWORD(v42) + 15;
    else
      v23 = v22;
    if (HIDWORD(v23))
    {
      __break(0xC471u);
      JUMPOUT(0x19577BF28);
    }
    v24 = v41;
    v25 = (WTF *)WTF::fastMalloc((WTF *)v23);
    LODWORD(v42) = v23;
    v41 = v25;
    memcpy(v25, v24, v19);
    if (v24)
    {
      if (v41 == v24)
      {
        v41 = 0;
        LODWORD(v42) = 0;
      }
      WTF::fastFree(v24, v26);
    }
  }
  if (v20 < HIDWORD(v42))
  {
    __break(0xC471u);
    JUMPOUT(0x19577BF18);
  }
  strcpy((char *)v41 + HIDWORD(v42), "0\r\x06\t*\x86H\x86\xF7\x0D\x01\x01\x01\x05");
  HIDWORD(v42) = v20;
  v27 = v20;
  if ((_DWORD)v42 == (_DWORD)v20)
  {
    v28 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v41, (WTF *)(v20 + 1), (unint64_t)&WebCore::BitStringMark);
    v27 = HIDWORD(v42);
    v29 = v41;
    v30 = *v28;
  }
  else
  {
    v29 = v41;
    v30 = 3;
  }
  *((_BYTE *)v29 + v27) = v30;
  ++HIDWORD(v42);
  this = WebCore::addEncodedASN1Length((uint64_t)&v41, (unint64_t)v40[0] + 1);
  if (HIDWORD(v42) == (_DWORD)v42)
  {
    this = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v41, (WTF *)(HIDWORD(v42) + 1), (unint64_t)&WebCore::InitialOctet);
    *((_BYTE *)v41 + HIDWORD(v42)) = *(_BYTE *)this;
  }
  else
  {
    *((_BYTE *)v41 + HIDWORD(v42)) = 0;
  }
  v31 = ++HIDWORD(v42);
  v32 = v7;
  if (v7)
  {
    v33 = v7 + (unint64_t)v31;
    if (v33 <= v42)
    {
LABEL_57:
      if (v33 < HIDWORD(v42))
      {
        __break(0xC471u);
        JUMPOUT(0x19577BF20);
      }
      this = (uint64_t)memcpy((char *)v41 + HIDWORD(v42), v5, v32);
      LODWORD(v31) = v32 + v31;
      goto LABEL_59;
    }
    v34 = v42 + ((unint64_t)v42 >> 2);
    if (v34 >= 0x10)
      v35 = v34 + 1;
    else
      v35 = 16;
    if (v35 <= v33)
      v36 = v7 + (unint64_t)v31;
    else
      v36 = v35;
    if (!HIDWORD(v36))
    {
      v37 = v41;
      v38 = (WTF *)WTF::fastMalloc((WTF *)v36);
      LODWORD(v42) = v36;
      v41 = v38;
      memcpy(v38, v37, v31);
      if (v37)
      {
        if (v41 == v37)
        {
          v41 = 0;
          LODWORD(v42) = 0;
        }
        WTF::fastFree(v37, v39);
      }
      goto LABEL_57;
    }
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x19577BF08);
  }
LABEL_59:
  *(_QWORD *)a2 = v41;
  *(_DWORD *)(a2 + 8) = v42;
  *(_DWORD *)(a2 + 12) = v31;
  *(_DWORD *)(a2 + 16) = 0;
  if (v5)
    return WTF::fastFree(v5, v6);
  return this;
}

uint64_t WebCore::CryptoKeyRSA::exportPkcs8@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unint64_t v4;
  WTF *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  WTF *v23;
  void *v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  WTF *v36;
  char v37;
  size_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  WTF *v44;
  WTF *v45;
  void *v46;
  WTF *v47[2];
  WTF *v48;
  uint64_t v49;

  if (*(_BYTE *)(this + 13) != 1)
  {
    *(_BYTE *)a2 = 12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v48 = 0;
  v49 = 0;
  v47[0] = 0;
  v47[1] = 0;
  if (WebCore::getPublicKeyComponents((_QWORD *)(this + 24), (uint64_t)&v48, (uint64_t)v47))
  {
    WTFLogAlways();
    v4 = 0;
  }
  else
  {
    v4 = 8 * HIDWORD(v49);
  }
  if (v47[0])
    WTF::fastFree(v47[0], v3);
  if (v48)
  {
    WTF::fastFree(v48, v3);
    if (v4)
      goto LABEL_10;
LABEL_13:
    v5 = 0;
    goto LABEL_14;
  }
  if (!v4)
    goto LABEL_13;
LABEL_10:
  if (HIDWORD(v4))
    goto LABEL_89;
  v5 = (WTF *)WTF::fastMalloc((WTF *)v4);
LABEL_14:
  v47[0] = (WTF *)(v4 & 0xFFFFFFF8);
  this = CCRSACryptorExport();
  if ((_DWORD)this)
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (!v5)
      return this;
    return WTF::fastFree(v5, v6);
  }
  v7 = v47[0];
  v8 = 22;
  if (v47[0] >= (WTF *)0x10000)
    v8 = 23;
  if (v47[0] < (WTF *)0x100)
    v8 = 21;
  if (v47[0] < (WTF *)0x80)
    v8 = 20;
  v9 = (char *)v47[0] + v8;
  v48 = 0;
  v49 = 0;
  v10 = (unint64_t)v47[0] + v8 >= 0x10000;
  v11 = 3;
  if (v10)
    v11 = 4;
  if ((unint64_t)v9 < 0x100)
    v11 = 2;
  if ((unint64_t)v9 < 0x80)
    v11 = 1;
  v12 = &v9[v11];
  v13 = (WTF *)(v12 + 1);
  if (v12 == (char *)-1)
  {
    v15 = 0;
LABEL_33:
    v16 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v48, (WTF *)(v15 + 1), (unint64_t)&WebCore::SequenceMark);
    *((_BYTE *)v48 + HIDWORD(v49)) = *v16;
    goto LABEL_35;
  }
  if ((unint64_t)v13 >> 32)
  {
    __break(0xC471u);
    JUMPOUT(0x19577C378);
  }
  v14 = (WTF *)WTF::fastMalloc(v13);
  LODWORD(v49) = (_DWORD)v13;
  v48 = v14;
  v15 = HIDWORD(v49);
  if (HIDWORD(v49) == (_DWORD)v13)
    goto LABEL_33;
  *((_BYTE *)v14 + HIDWORD(v49)) = 48;
LABEL_35:
  ++HIDWORD(v49);
  WebCore::addEncodedASN1Length((uint64_t)&v48, (unint64_t)v9);
  v17 = HIDWORD(v49);
  v18 = HIDWORD(v49) + 3;
  if (v18 > v49)
  {
    v19 = v49 + ((unint64_t)v49 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v18)
      v21 = HIDWORD(v49) + 3;
    else
      v21 = v20;
    if (HIDWORD(v21))
    {
      __break(0xC471u);
      JUMPOUT(0x19577C398);
    }
    v22 = v48;
    v23 = (WTF *)WTF::fastMalloc((WTF *)v21);
    LODWORD(v49) = v21;
    v48 = v23;
    memcpy(v23, v22, v17);
    if (v22)
    {
      if (v48 == v22)
      {
        v48 = 0;
        LODWORD(v49) = 0;
      }
      WTF::fastFree(v22, v24);
    }
  }
  if (v18 < HIDWORD(v49))
  {
    __break(0xC471u);
    JUMPOUT(0x19577C380);
  }
  v25 = (char *)v48 + HIDWORD(v49);
  v25[2] = 0;
  *(_WORD *)v25 = 258;
  HIDWORD(v49) = v18;
  v26 = v18;
  v27 = v18 + 15;
  if (v27 > v49)
  {
    v28 = v49 + ((unint64_t)v49 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v27)
      v30 = v27;
    else
      v30 = v29;
    if (HIDWORD(v30))
    {
      __break(0xC471u);
      JUMPOUT(0x19577C3A0);
    }
    v31 = v48;
    v32 = (WTF *)WTF::fastMalloc((WTF *)v30);
    LODWORD(v49) = v30;
    v48 = v32;
    memcpy(v32, v31, v26);
    if (v31)
    {
      if (v48 == v31)
      {
        v48 = 0;
        LODWORD(v49) = 0;
      }
      WTF::fastFree(v31, v33);
    }
  }
  if (v27 < HIDWORD(v49))
  {
    __break(0xC471u);
    JUMPOUT(0x19577C388);
  }
  strcpy((char *)v48 + HIDWORD(v49), "0\r\x06\t*\x86H\x86\xF7\x0D\x01\x01\x01\x05");
  HIDWORD(v49) = v27;
  v34 = v27;
  if ((_DWORD)v49 == (_DWORD)v27)
  {
    v35 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v48, (WTF *)(v27 + 1), (unint64_t)&WebCore::OctetStringMark);
    v34 = HIDWORD(v49);
    v36 = v48;
    v37 = *v35;
  }
  else
  {
    v36 = v48;
    v37 = 4;
  }
  *((_BYTE *)v36 + v34) = v37;
  ++HIDWORD(v49);
  this = WebCore::addEncodedASN1Length((uint64_t)&v48, (unint64_t)v47[0]);
  v38 = HIDWORD(v49);
  v39 = v7;
  if (v7)
  {
    v40 = v7 + (unint64_t)HIDWORD(v49);
    if (v40 <= v49)
    {
LABEL_66:
      if (v40 < HIDWORD(v49))
      {
        __break(0xC471u);
        JUMPOUT(0x19577C390);
      }
      this = (uint64_t)memcpy((char *)v48 + HIDWORD(v49), v5, v39);
      LODWORD(v38) = v39 + v38;
      goto LABEL_68;
    }
    v41 = v49 + ((unint64_t)v49 >> 2);
    if (v41 >= 0x10)
      v42 = v41 + 1;
    else
      v42 = 16;
    if (v42 <= v40)
      v43 = v7 + (unint64_t)HIDWORD(v49);
    else
      v43 = v42;
    if (!HIDWORD(v43))
    {
      v44 = v48;
      v45 = (WTF *)WTF::fastMalloc((WTF *)v43);
      LODWORD(v49) = v43;
      v48 = v45;
      memcpy(v45, v44, v38);
      if (v44)
      {
        if (v48 == v44)
        {
          v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(v44, v46);
      }
      goto LABEL_66;
    }
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x19577C370);
  }
LABEL_68:
  *(_QWORD *)a2 = v48;
  *(_DWORD *)(a2 + 8) = v49;
  *(_DWORD *)(a2 + 12) = v38;
  *(_DWORD *)(a2 + 16) = 0;
  if (v5)
    return WTF::fastFree(v5, v6);
  return this;
}

void WebCore::CryptoKeyRSA::~CryptoKeyRSA(WebCore::CryptoKeyRSA *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x19AEA01A4]();
}

void WebCore::CryptoKeyRSA::~CryptoKeyRSA(WebCore::CryptoKeyRSA *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    MEMORY[0x19AEA01A4]();
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CryptoKeyRSA::keyClass(WebCore::CryptoKeyRSA *this)
{
  return 4;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12CryptoKeyRSA12generatePairENS2_25CryptoAlgorithmIdentifierES4_bjRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbiONS_8FunctionIFvONS2_13CryptoKeyPairEEEEONSB_IFvvEEEPNS2_22ScriptExecutionContextEEUb_E3__0vJRSK_EED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3397308;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12CryptoKeyRSA12generatePairENS2_25CryptoAlgorithmIdentifierES4_bjRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbiONS_8FunctionIFvONS2_13CryptoKeyPairEEEEONSB_IFvvEEEPNS2_22ScriptExecutionContextEEUb_E3__0vJRSK_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3397308;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12CryptoKeyRSA12generatePairENS2_25CryptoAlgorithmIdentifierES4_bjRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbiONS_8FunctionIFvONS2_13CryptoKeyPairEEEEONSB_IFvvEEEPNS2_22ScriptExecutionContextEEUb_E3__0vJRSK_EE4callESN_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12CryptoKeyRSA12generatePairENS2_25CryptoAlgorithmIdentifierES4_bjRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbiONS_8FunctionIFvONS2_13CryptoKeyPairEEEEONSB_IFvvEEEPNS2_22ScriptExecutionContextEEUb_E3__1vJRSK_EED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E3397330;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x19AEA01A4]();
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    MEMORY[0x19AEA01A4]();
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12CryptoKeyRSA12generatePairENS2_25CryptoAlgorithmIdentifierES4_bjRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbiONS_8FunctionIFvONS2_13CryptoKeyPairEEEEONSB_IFvvEEEPNS2_22ScriptExecutionContextEEUb_E3__1vJRSK_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3397330;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    MEMORY[0x19AEA01A4]();
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    MEMORY[0x19AEA01A4]();
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12CryptoKeyRSA12generatePairENS2_25CryptoAlgorithmIdentifierES4_bjRKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbiONS_8FunctionIFvONS2_13CryptoKeyPairEEEEONSB_IFvvEEEPNS2_22ScriptExecutionContextEEUb_E3__1vJRSK_EE4callESN_(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 9);
  v4 = *(_BYTE *)(a1 + 10);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  *(_BYTE *)(v6 + 12) = v2;
  *(_WORD *)(v6 + 13) = 256;
  *(_DWORD *)(v6 + 16) = v5;
  *(_QWORD *)v6 = off_1E33972B0;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(v6 + 24) = v7;
  *(_BYTE *)(v6 + 32) = v4;
  *(_BYTE *)(v6 + 33) = v3;
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 9);
  LOBYTE(v5) = *(_BYTE *)(a1 + 10);
  v10 = *(_BYTE *)(a1 + 11);
  v11 = *(_DWORD *)(a1 + 12);
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 12) = v8;
  *(_BYTE *)(v12 + 13) = 1;
  *(_BYTE *)(v12 + 14) = v10;
  *(_DWORD *)(v12 + 16) = v11;
  *(_QWORD *)v12 = off_1E33972B0;
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(v12 + 24) = v13;
  *(_BYTE *)(v12 + 32) = v5;
  *(_BYTE *)(v12 + 33) = v9;
  v22 = (unsigned int *)v6;
  v23 = (unsigned int *)v12;
  (*(void (**)(_QWORD, unsigned int **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v22);
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    v19 = result + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::transformAESCTR@<X0>(uint64_t result@<X0>, unint64_t **a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, size_t a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  CCOperation v18;
  size_t OutputLength;
  size_t v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  void *v27;
  int v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  int v46;
  size_t v47;
  size_t v48;
  WTF *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  int v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t dataOutMoved;
  CCCryptorRef cryptorRef;

  v8 = a3;
  if ((a6 & 0xF) != 0)
    v9 = (a6 >> 4) + 1;
  else
    v9 = a6 >> 4;
  if (a3 <= 0x3F && v9 > 1 << a3)
  {
    *(_BYTE *)a7 = 30;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    return result;
  }
  v10 = *a2;
  v11 = bswap64(**a2);
  v12 = bswap64((*a2)[1]);
  v13 = -1 << a3;
  v14 = -1;
  if (a3 > 0x7F)
    v13 = 0;
  if (a3 <= 0x3F)
  {
    v14 = ~(-1 << a3);
    v13 = -1;
  }
  v15 = v14 & ~v12;
  if ((v13 | v11) == 0xFFFFFFFFFFFFFFFFLL)
    v16 = v15 + 1;
  else
    v16 = -1;
  if (v16 >= v9)
    v17 = a6;
  else
    v17 = 16 * v16;
  cryptorRef = 0;
  v18 = result;
  result = CCCryptorCreateWithMode(result, 4u, 0, 0, v10, *(const void **)a4, *(unsigned int *)(a4 + 12), 0, 0, 0, 2u, &cryptorRef);
  if ((_DWORD)result)
  {
    *(_BYTE *)a7 = 30;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    return result;
  }
  v57 = a4;
  OutputLength = CCCryptorGetOutputLength(cryptorRef, v17, 1);
  v21 = OutputLength;
  v56 = 16 * v16;
  if (OutputLength)
  {
    if (HIDWORD(OutputLength))
    {
      __break(0xC471u);
      goto LABEL_71;
    }
    v22 = OutputLength;
    v23 = WTF::fastMalloc((WTF *)OutputLength);
    v21 = v22;
    v24 = (char *)v23;
  }
  else
  {
    v24 = 0;
  }
  dataOutMoved = 0;
  v25 = v17;
  v26 = v21;
  result = CCCryptorUpdate(cryptorRef, a5, v25, v24, v21, &dataOutMoved);
  if ((_DWORD)result
    || (v28 = (_DWORD)v24 + dataOutMoved,
        result = CCCryptorFinal(cryptorRef, &v24[dataOutMoved], v26 - dataOutMoved, &dataOutMoved),
        (_DWORD)result))
  {
    v29 = (WTF *)v24;
    *(_BYTE *)a7 = 30;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    if (!v24)
      return result;
    return WTF::fastFree(v29, v27);
  }
  v55 = v26;
  LODWORD(v30) = v28 + dataOutMoved - (_DWORD)v24;
  result = CCCryptorRelease(cryptorRef);
  if (v16 >= v9)
  {
    *(_QWORD *)a7 = v24;
    *(_DWORD *)(a7 + 8) = v26;
    *(_DWORD *)(a7 + 12) = (_DWORD)v30;
    *(_DWORD *)(a7 + 16) = 0;
    return result;
  }
  v29 = (WTF *)v24;
  if (v8 > 0x3F)
  {
    v33 = v12;
    v34 = v11;
    if (v8 > 0x7F)
    {
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v32 = 0;
      v31 = -1 << v8;
    }
  }
  else
  {
    v31 = -1;
    v32 = -1 << v8;
    v33 = v12;
    v34 = v11;
  }
  v35 = v31 & v34;
  v36 = v32 & v33;
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v37 = bswap64(v35);
  v37[1] = bswap64(v36);
  if (CCCryptorCreateWithMode(v18, 4u, 0, 0, v37, *(const void **)v57, *(unsigned int *)(v57 + 12), 0, 0, 0, 2u, &cryptorRef))
  {
    *(_BYTE *)a7 = 30;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    goto LABEL_46;
  }
  v39 = a6 - v56;
  v40 = CCCryptorGetOutputLength(cryptorRef, a6 - v56, 1);
  v41 = v40;
  if (v40)
  {
    v42 = a5;
    if (HIDWORD(v40))
    {
      __break(0xC471u);
      JUMPOUT(0x19577CBC8);
    }
    v43 = (char *)WTF::fastMalloc((WTF *)v40);
  }
  else
  {
    v43 = 0;
    v42 = a5;
  }
  if (CCCryptorUpdate(cryptorRef, &v42[v56], v39, v43, v41, &dataOutMoved)
    || (v44 = (_DWORD)v43 + dataOutMoved,
        CCCryptorFinal(cryptorRef, &v43[dataOutMoved], v41 - dataOutMoved, &dataOutMoved)))
  {
    v45 = a7;
    *(_BYTE *)a7 = 30;
    *(_QWORD *)(a7 + 8) = 0;
    v46 = 1;
    goto LABEL_44;
  }
  v47 = (v44 + dataOutMoved - (_DWORD)v43);
  CCCryptorRelease(cryptorRef);
  if (!(_DWORD)v47)
  {
    v49 = v29;
    goto LABEL_52;
  }
  v48 = v30;
  v30 = (WTF *)(v47 + v30);
  if ((unint64_t)v30 > v55)
  {
    v50 = v55 + (v55 >> 2);
    if (v50 >= 0x10)
      v51 = v50 + 1;
    else
      v51 = 16;
    if (v51 <= (unint64_t)v30)
      v52 = (unint64_t)v30;
    else
      v52 = v51;
    if (!HIDWORD(v52))
    {
      v49 = (WTF *)WTF::fastMalloc((WTF *)v52);
      LODWORD(v55) = v52;
      memcpy(v49, v29, v48);
      if (v29)
      {
        if (v49 == v29)
          v54 = 0;
        else
          v54 = v52;
        LODWORD(v55) = v54;
        if (v49 == v29)
          v49 = 0;
        WTF::fastFree(v29, v53);
      }
      goto LABEL_51;
    }
    __break(0xC471u);
LABEL_71:
    JUMPOUT(0x19577CBC0);
  }
  v49 = v29;
LABEL_51:
  memcpy((char *)v49 + v48, v43, v47);
LABEL_52:
  v46 = 0;
  v45 = a7;
  *(_QWORD *)a7 = v49;
  *(_DWORD *)(a7 + 8) = v55;
  *(_DWORD *)(a7 + 12) = (_DWORD)v30;
  v29 = 0;
LABEL_44:
  *(_DWORD *)(v45 + 16) = v46;
  if (v43)
    WTF::fastFree((WTF *)v43, v38);
LABEL_46:
  result = WTF::fastFree((WTF *)v37, v38);
  if (v29)
    return WTF::fastFree(v29, v27);
  return result;
}

void WebCore::deriveHDKFBits(unint64_t a1@<X7>, uint64_t a2@<X8>)
{
  unint64_t v3;
  WTF *v4;
  void *v5;
  int v6;

  v3 = a1 >> 3;
  if (a1 < 8)
  {
    v4 = 0;
  }
  else
  {
    if (a1 >> 35)
    {
      __break(0xC471u);
      return;
    }
    v4 = (WTF *)WTF::fastMalloc((WTF *)(a1 >> 3));
  }
  if (CCKDFParametersCreateHkdf() || (v6 = CCDeriveKey(), CCKDFParametersDestroy(), v6))
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (v4)
      WTF::fastFree(v4, v5);
  }
  else
  {
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 12) = v3;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void WebCore::CryptoKeyAES::~CryptoKeyAES(WebCore::CryptoKeyAES *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CryptoKeyAES::importRaw@<X0>(char a1@<W0>, uint64_t *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v10 = 8 * *((unsigned int *)a2 + 3);
  if (v10 == 128 || v10 == 256 || v10 == 192)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = a1;
    *(_BYTE *)(result + 13) = 2;
    *(_BYTE *)(result + 14) = a3;
    *(_DWORD *)(result + 16) = a4;
    *(_QWORD *)result = off_1E3397370;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v12 = *a2;
    *a2 = 0;
    *(_QWORD *)(result + 24) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 32) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 36) = v12;
  }
  else
  {
    result = 0;
  }
  *a5 = result;
  return result;
}

uint64_t WebCore::CryptoKeyAES::importJwk@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  char v19;

  result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "oct", 3);
  if ((result & 1) != 0 && *(_QWORD *)(a2 + 176) && (result = WTF::base64Decode(), v19))
  {
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, 8 * HIDWORD(v18), a2 + 48)|| a4 && (v14 = *(_QWORD *)(a2 + 8)) != 0 && !MEMORY[0x19AEA53F4](v14, "enc", 3)|| *(_BYTE *)(a2 + 32) && (a4 & ~*(_DWORD *)(a2 + 40)) != 0|| *(_BYTE *)(a2 + 57) && !*(_BYTE *)(a2 + 56) && (a3 & 1) != 0)
    {
      v15 = 0;
    }
    else
    {
      v15 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v15 + 8) = 1;
      *(_BYTE *)(v15 + 12) = a1;
      *(_BYTE *)(v15 + 13) = 2;
      *(_BYTE *)(v15 + 14) = a3;
      *(_DWORD *)(v15 + 16) = a4;
      *(_QWORD *)v15 = off_1E3397370;
      v16 = v17;
      v17 = 0;
      *(_QWORD *)(v15 + 24) = v16;
      *(_QWORD *)(v15 + 32) = v18;
    }
    *a6 = v15;
    result = (uint64_t)v17;
    if (v17)
      return WTF::fastFree(v17, v13);
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

unsigned __int8 *WebCore::CryptoKeyAES::algorithm@<X0>(WebCore::CryptoKeyAES *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 *result;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  result = WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), (_QWORD *)a2);
  *(_WORD *)(a2 + 8) = 8 * *((_WORD *)this + 18);
  *(_DWORD *)(a2 + 32) = 1;
  return result;
}

uint64_t WebCore::CryptoKeyEC::generatePair@<X0>(char a1@<W0>, _QWORD *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t result;
  char v12;
  int v13;
  uint64_t v14;

  if ((MEMORY[0x19AEA53F4](*a2, "P-256", 5) & 1) != 0)
  {
    v10 = 0;
  }
  else if ((MEMORY[0x19AEA53F4](*a2, "P-384", 5) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a2, "P-521", 5);
    if ((result & 1) == 0)
    {
      v12 = 6;
      goto LABEL_9;
    }
    v10 = 2;
  }
  result = CCECCryptorGeneratePair();
  if (!(_DWORD)result)
  {
    v14 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v14 + 8) = 1;
    *(_BYTE *)(v14 + 12) = a1;
    *(_WORD *)(v14 + 13) = 256;
    *(_DWORD *)(v14 + 16) = a4;
    *(_QWORD *)v14 = off_1E33973A0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 32) = v10;
    result = WTF::fastMalloc((WTF *)0x28);
    v13 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = a1;
    *(_BYTE *)(result + 13) = 1;
    *(_BYTE *)(result + 14) = a3;
    *(_DWORD *)(result + 16) = a4;
    *(_QWORD *)result = off_1E33973A0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = v10;
    *(_QWORD *)a5 = v14;
    *(_QWORD *)(a5 + 8) = result;
    goto LABEL_11;
  }
  v12 = 30;
LABEL_9:
  *(_BYTE *)a5 = v12;
  *(_QWORD *)(a5 + 8) = 0;
  v13 = 1;
LABEL_11:
  *(_DWORD *)(a5 + 16) = v13;
  return result;
}

uint64_t WebCore::CryptoKeyEC::importRaw@<X0>(char a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  int v13;
  float v14;
  unint64_t v15;
  int v16;

  result = MEMORY[0x19AEA53F4](*a2, "P-256", 5);
  if ((result & 1) != 0)
  {
    v13 = 0;
    v14 = 32.0;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a2, "P-384", 5);
    if ((result & 1) != 0)
    {
      v13 = 1;
      v14 = 48.0;
    }
    else
    {
      result = MEMORY[0x19AEA53F4](*a2, "P-521", 5);
      if ((result & 1) == 0)
      {
LABEL_13:
        *a6 = 0;
        return result;
      }
      v13 = 2;
      v14 = 65.125;
    }
  }
  v15 = (unint64_t)v14;
  if (v14 > (float)(unint64_t)v14)
    ++v15;
  if (((2 * v15) | 1) != *(_DWORD *)(a3 + 12))
    goto LABEL_13;
  v16 = CCECCryptorImportKey();
  result = 0;
  if (!v16)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = a1;
    *(_BYTE *)(result + 13) = 0;
    *(_BYTE *)(result + 14) = a4;
    *(_DWORD *)(result + 16) = a5;
    *(_QWORD *)result = off_1E33973A0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = v13;
  }
  *a6 = result;
  return result;
}

uint64_t WebCore::CryptoKeyEC::importJwk@<X0>(WTF *a1@<X0>, WTF **a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  unsigned int v15;
  void *v16;
  WTF *v17;
  int v18;
  char v19;
  WTF *v20;
  int v21;
  char v22;
  WTF *v23;
  int v24;
  char v25;

  result = MEMORY[0x19AEA53F4](*(_QWORD *)a3, "EC", 2);
  if ((result & 1) == 0 || *(_BYTE *)(a3 + 32) && (a5 & ~*(_DWORD *)(a3 + 40)) != 0)
    goto LABEL_24;
  if (*(_BYTE *)(a3 + 57) && !*(_BYTE *)(a3 + 56) && a4)
    goto LABEL_24;
  v14 = *(const WTF::StringImpl **)(a3 + 64);
  if (!v14)
    goto LABEL_24;
  result = WTF::equal(*a2, v14, v13);
  if ((result & 1) == 0)
    goto LABEL_24;
  result = MEMORY[0x19AEA53F4](*(_QWORD *)(a3 + 64), "P-256", 5);
  if ((result & 1) != 0)
  {
    v15 = 0;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)(a3 + 64), "P-384", 5);
    if ((result & 1) != 0)
    {
      v15 = 1;
    }
    else
    {
      result = MEMORY[0x19AEA53F4](*(_QWORD *)(a3 + 64), "P-521", 5);
      if ((result & 1) == 0)
      {
LABEL_24:
        *a6 = 0;
        return result;
      }
      v15 = 2;
    }
  }
  if (!*(_QWORD *)(a3 + 72))
    goto LABEL_24;
  if (!*(_QWORD *)(a3 + 80))
    goto LABEL_24;
  result = WTF::base64Decode();
  if (!v25)
    goto LABEL_24;
  result = WTF::base64Decode();
  if (v22)
  {
    if (*(_QWORD *)(a3 + 88))
    {
      result = WTF::base64Decode();
      if (v19)
      {
        result = (uint64_t)WebCore::CryptoKeyEC::platformImportJWKPrivate(a1, v15, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, a4, a5, a6);
        if (v19)
        {
          result = (uint64_t)v17;
          if (v17)
          {
            v17 = 0;
            v18 = 0;
            result = WTF::fastFree((WTF *)result, v16);
          }
        }
      }
      else
      {
        *a6 = 0;
      }
    }
    else
    {
      result = WebCore::CryptoKeyEC::platformImportJWKPublic((uint64_t)a1, v15, (uint64_t)&v23, (uint64_t)&v20, a4, a5, a6);
    }
    if (v22)
    {
      result = (uint64_t)v20;
      if (v20)
      {
        v20 = 0;
        v21 = 0;
        result = WTF::fastFree((WTF *)result, v16);
      }
    }
  }
  else
  {
    *a6 = 0;
  }
  if (v25)
  {
    result = (uint64_t)v23;
    if (v23)
    {
      v23 = 0;
      v24 = 0;
      return WTF::fastFree((WTF *)result, v16);
    }
  }
  return result;
}

uint64_t WebCore::CryptoKeyEC::exportRaw@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  int v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  int v8;
  WTF *v9;
  void *v10;

  if (*(_BYTE *)(result + 13))
  {
    v3 = 12;
    goto LABEL_3;
  }
  v5 = *(int *)(result + 32);
  v6 = 0.0;
  if (v5 <= 2)
    v6 = dbl_1969ED320[v5];
  v7 = vcvtpd_u64_f64(v6);
  if (!(v7 >> 31))
  {
    v8 = (2 * v7) | 1;
    v9 = (WTF *)WTF::fastMalloc((WTF *)((2 * v7) | 1));
    result = CCECCryptorExportKey();
    if (!(_DWORD)result)
    {
      v4 = 0;
      *(_QWORD *)a2 = v9;
      *(_DWORD *)(a2 + 8) = v8;
      *(_DWORD *)(a2 + 12) = v8;
      goto LABEL_10;
    }
    result = WTF::fastFree(v9, v10);
    v3 = 30;
LABEL_3:
    *(_BYTE *)a2 = v3;
    *(_QWORD *)(a2 + 8) = 0;
    v4 = 1;
LABEL_10:
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CryptoKeyEC::exportJwk(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23[2];
  WTF *v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  WTF::StringImpl *v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[32];
  uint64_t v35;
  char v36;
  uint64_t v37;

  v26 = 0;
  v28 = 0;
  v29 = 0;
  v36 = 0;
  v37 = 0;
  v23[1] = 0;
  LOBYTE(v24) = 0;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v34, 0, 25);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23[0] = v21;
  if (*(_DWORD *)(a1 + 32) <= 2u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v30[0];
    v30[0] = v21;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebCore::CryptoKey::usages((char *)a1, (uint64_t)&v21);
  if (v26)
  {
    v7 = v24;
    if (v24)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      WTF::fastFree(v7, v6);
    }
    v24 = v21;
    v25 = v22;
  }
  else
  {
    v24 = v21;
    v25 = v22;
    v26 = 1;
  }
  v29 = *(unsigned __int8 *)(a1 + 14) | 0x100;
  if ((WebCore::CryptoKeyEC::platformAddFieldElements(a1, (WTF::StringImpl *)v23) & 1) != 0)
  {
    v9 = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    *(_OWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (v26)
    {
      *(_QWORD *)(a2 + 16) = v24;
      v10 = v25;
      v24 = 0;
      v25 = 0;
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = 1;
    }
    *(_DWORD *)(a2 + 40) = v27;
    v11 = v28;
    v28 = 0;
    *(_QWORD *)(a2 + 48) = v11;
    *(_WORD *)(a2 + 56) = v29;
    v12 = *(_OWORD *)v30;
    v13 = v31;
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
    *(_OWORD *)(a2 + 64) = v12;
    *(_OWORD *)(a2 + 80) = v13;
    v14 = v32;
    v15 = v33;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 112) = v15;
    v16 = *(_OWORD *)v34;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)(a2 + 128) = v16;
    v17 = *(_QWORD *)&v34[16];
    *(_QWORD *)&v34[16] = 0;
    *(_QWORD *)(a2 + 144) = v17;
    *(_BYTE *)(a2 + 152) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v36)
    {
      *(_QWORD *)(a2 + 152) = *(_QWORD *)&v34[24];
      v18 = v35;
      *(_QWORD *)&v34[24] = 0;
      v35 = 0;
      *(_QWORD *)(a2 + 160) = v18;
      *(_BYTE *)(a2 + 168) = 1;
    }
    v19 = 0;
    v20 = v37;
    v37 = 0;
    *(_QWORD *)(a2 + 176) = v20;
  }
  else
  {
    *(_BYTE *)a2 = 30;
    *(_QWORD *)(a2 + 8) = 0;
    v19 = 1;
  }
  *(_DWORD *)(a2 + 184) = v19;
  WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v23, v8);
}

uint64_t WebCore::CryptoKeyEC::algorithm@<X0>(WebCore::CryptoKeyEC *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  char *v6;
  char *v7;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  result = (uint64_t)WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), &v10);
  v6 = v10;
  if (*((_DWORD *)this + 8) > 2u)
  {
    v7 = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v10;
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 32) = 2;
  return result;
}

void WebCore::CryptoKeyHMAC::~CryptoKeyHMAC(WebCore::CryptoKeyHMAC *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

unint64_t WebCore::CryptoKeyHMAC::generate@<X0>(unint64_t result@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char v7;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  size_t v12;
  void *v13;

  v7 = a2;
  if (!result)
  {
    if ((a2 - 13) < 5)
    {
      v9 = qword_1969ED338[(char)(a2 - 13)];
      v10 = WTF::fastMalloc((WTF *)0x28);
      goto LABEL_7;
    }
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v9 = result;
  if ((result & 7) != 0)
    goto LABEL_10;
  v10 = WTF::fastMalloc((WTF *)0x28);
  if (v9 < 8)
  {
    LODWORD(v11) = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_8;
  }
  if (v9 >> 35)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x19577DAD0);
  }
LABEL_7:
  v11 = (WTF *)(v9 >> 3);
  v13 = (void *)WTF::fastMalloc(v11);
  v12 = (size_t)v11;
LABEL_8:
  result = CCRandomGenerateBytes(v13, v12);
  if ((_DWORD)result)
    goto LABEL_14;
  *(_DWORD *)(v10 + 8) = 1;
  *(_WORD *)(v10 + 12) = 524;
  *(_BYTE *)(v10 + 14) = a3;
  *(_DWORD *)(v10 + 16) = a4;
  *(_QWORD *)v10 = off_1E33973D0;
  *(_BYTE *)(v10 + 20) = v7;
  *(_QWORD *)(v10 + 24) = v13;
  *(_DWORD *)(v10 + 32) = (_DWORD)v11;
  *(_DWORD *)(v10 + 36) = (_DWORD)v11;
LABEL_11:
  *a5 = v10;
  return result;
}

uint64_t WebCore::CryptoKeyHMAC::importJwk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  char v21;

  result = MEMORY[0x19AEA53F4](*(_QWORD *)a3, "oct", 3);
  if ((result & 1) != 0 && *(_QWORD *)(a3 + 176) && (result = WTF::base64Decode(), v21))
  {
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, a2, a3 + 48)
      || a5 && (v16 = *(_QWORD *)(a3 + 8)) != 0 && !MEMORY[0x19AEA53F4](v16, "sig", 3)
      || *(_BYTE *)(a3 + 32) && (a5 & ~*(_DWORD *)(a3 + 40)) != 0
      || *(_BYTE *)(a3 + 57) && !*(_BYTE *)(a3 + 56) && (a4 & 1) != 0
      || !HIDWORD(v20)
      || a1 && 8 * HIDWORD(v20) != a1)
    {
      v17 = 0;
    }
    else
    {
      v17 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v17 + 8) = 1;
      *(_WORD *)(v17 + 12) = 524;
      *(_BYTE *)(v17 + 14) = a4;
      *(_DWORD *)(v17 + 16) = a5;
      *(_QWORD *)v17 = off_1E33973D0;
      *(_BYTE *)(v17 + 20) = a2;
      v18 = v19;
      v19 = 0;
      *(_QWORD *)(v17 + 24) = v18;
      *(_QWORD *)(v17 + 32) = v20;
    }
    *a7 = v17;
    result = (uint64_t)v19;
    if (v19)
      return WTF::fastFree(v19, v15);
  }
  else
  {
    *a7 = 0;
  }
  return result;
}

unsigned __int8 *WebCore::CryptoKeyHMAC::algorithm@<X0>(WebCore::CryptoKeyHMAC *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unsigned __int8 *result;
  int v8;
  char v9;
  char **v10;
  char *v11;

  v4 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v4 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), &v11);
  v5 = v11;
  v6 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v6 != -1)
  {
    v10 = &v11;
    v11 = &v9;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  result = WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 20), (_QWORD *)(a2 + 8));
  v8 = 8 * *((_DWORD *)this + 9);
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 32) = 3;
  return result;
}

void WebCore::CryptoKeyOKP::generatePair(int a1@<W0>, unsigned int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v6;
  char v7;
  __int128 v8;
  char v9;

  if (a2 >= 2)
  {
    v7 = 6;
LABEL_6:
    *(_BYTE *)a5 = v7;
    *(_QWORD *)(a5 + 8) = 0;
    v6 = 1;
    goto LABEL_7;
  }
  WebCore::CryptoKeyOKP::platformGeneratePair(a1, a2, a3, a4, (uint64_t)&v8);
  if (!v9)
  {
    v7 = 30;
    goto LABEL_6;
  }
  v6 = 0;
  *(_OWORD *)a5 = v8;
LABEL_7:
  *(_DWORD *)(a5 + 16) = v6;
}

uint64_t WebCore::CryptoKeyOKP::importRaw@<X0>(char a1@<W0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, char a4@<W3>, unsigned int a5@<W4>, uint64_t *a6@<X8>)
{
  int v12;
  uint64_t result;
  uint64_t v14;

  if (a2 <= 1 && *((_DWORD *)a3 + 3) == 32)
  {
    v12 = (a5 >> 2) & 1;
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = a1;
    *(_BYTE *)(result + 13) = v12;
    *(_BYTE *)(result + 14) = a4;
    *(_QWORD *)result = off_1E3397400;
    *(_DWORD *)(result + 16) = a5;
    *(_DWORD *)(result + 20) = a2;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v14 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 24) = v14;
    LODWORD(v14) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(result + 32) = v14;
    LODWORD(v14) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(result + 36) = v14;
  }
  else
  {
    result = 0;
  }
  *a6 = result;
  return result;
}

uint64_t WebCore::CryptoKeyOKP::importJwk@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  BOOL v17;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  char v24;
  WTF *v25;
  uint64_t v26;
  char v27;

  if (a2 >= 2)
    goto LABEL_40;
  v11 = result;
  if (a2)
  {
    v12 = *(_QWORD *)(a3 + 88);
    if (v12 && *(_DWORD *)(v12 + 4))
      v13 = 251;
    else
      v13 = 247;
    if ((a5 & v13) != 0)
      goto LABEL_40;
    result = MEMORY[0x19AEA53F4](*(_QWORD *)(a3 + 64), "Ed25519", 7);
    if ((result & 1) == 0)
      goto LABEL_40;
    result = *(_QWORD *)(a3 + 48);
    if (result)
    {
      if (*(_DWORD *)(result + 4))
      {
        result = MEMORY[0x19AEA53F4]();
        if ((result & 1) == 0)
          goto LABEL_40;
      }
    }
    if (a5)
    {
      result = *(_QWORD *)(a3 + 8);
      if (result)
      {
        if (*(_DWORD *)(result + 4))
        {
          result = MEMORY[0x19AEA53F4]();
          if ((result & 1) == 0)
            goto LABEL_40;
        }
      }
    }
    if (*(_BYTE *)(a3 + 32) && (a5 & ~*(_DWORD *)(a3 + 40)) != 0 || *(_BYTE *)(a3 + 57) && !*(_BYTE *)(a3 + 56) && a4)
      goto LABEL_40;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)(a3 + 64), "X25519", 6);
    if ((result & 1) == 0)
    {
LABEL_40:
      *a6 = 0;
      return result;
    }
  }
  result = MEMORY[0x19AEA53F4](*(_QWORD *)a3, "OKP", 3);
  if ((result & 1) == 0)
    goto LABEL_40;
  if (!*(_QWORD *)(a3 + 72))
    goto LABEL_40;
  result = WTF::base64Decode();
  if (!v27)
    goto LABEL_40;
  if (!*(_QWORD *)(a3 + 88))
  {
    if (HIDWORD(v26) == 32)
    {
      v15 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v15 + 8) = 1;
      *(_BYTE *)(v15 + 12) = v11;
      *(_BYTE *)(v15 + 13) = 0;
      *(_BYTE *)(v15 + 14) = a4;
      *(_QWORD *)v15 = off_1E3397400;
      *(_DWORD *)(v15 + 16) = a5;
      *(_DWORD *)(v15 + 20) = a2;
      v16 = v25;
      v25 = 0;
      *(_QWORD *)(v15 + 24) = v16;
      *(_QWORD *)(v15 + 32) = v26;
    }
    else
    {
      v15 = 0;
    }
    *a6 = v15;
    goto LABEL_60;
  }
  WTF::base64Decode();
  if (v24)
  {
    if (HIDWORD(v23) != 32 || HIDWORD(v26) != 32)
    {
      *a6 = 0;
      goto LABEL_58;
    }
    if (v11 == 21)
    {
      cccurve25519_make_pub();
    }
    else
    {
      if (v11 != 20)
        goto LABEL_56;
      ccsha512_di();
      if (cced25519_make_pub())
        goto LABEL_56;
    }
    if (*(_QWORD *)v25)
      v17 = 0;
    else
      v17 = *((_QWORD *)v25 + 1) == 0;
    if (v17 && *((_QWORD *)v25 + 2) == 0 && *((_QWORD *)v25 + 3) == 0)
    {
      v20 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v20 + 8) = 1;
      *(_BYTE *)(v20 + 12) = v11;
      *(_BYTE *)(v20 + 13) = 1;
      *(_BYTE *)(v20 + 14) = a4;
      *(_QWORD *)v20 = off_1E3397400;
      *(_DWORD *)(v20 + 16) = a5;
      *(_DWORD *)(v20 + 20) = a2;
      v21 = v22;
      v22 = 0;
      *(_QWORD *)(v20 + 24) = v21;
      *(_QWORD *)(v20 + 32) = v23;
LABEL_57:
      *a6 = v20;
LABEL_58:
      if (v22)
        WTF::fastFree(v22, v14);
      goto LABEL_60;
    }
LABEL_56:
    v20 = 0;
    goto LABEL_57;
  }
  *a6 = 0;
LABEL_60:
  result = (uint64_t)v25;
  if (v25)
    return WTF::fastFree(v25, v14);
  return result;
}

const void **WebCore::CryptoKeyOKP::exportRaw@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  const void **v4;
  int v5;
  void *v6;
  int v7;

  if (*((_BYTE *)this + 13))
  {
    v3 = 12;
LABEL_6:
    *(_BYTE *)a2 = v3;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = 1;
    goto LABEL_7;
  }
  v4 = this;
  v5 = *((_DWORD *)this + 9);
  if (!v5)
  {
    v3 = 30;
    goto LABEL_6;
  }
  v6 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)this + 9));
  this = (const void **)memcpy(v6, v4[3], *((unsigned int *)v4 + 9));
  v7 = 0;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v5;
LABEL_7:
  *(_DWORD *)(a2 + 16) = v7;
  return this;
}

void WebCore::CryptoKeyOKP::exportJwk(WebCore::CryptoKeyOKP *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30[2];
  __int128 v31;
  char v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  WTF::StringImpl *v36[2];
  WTF::StringImpl *v37[2];
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  uint64_t v41;
  char v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v34 = 0;
  v35 = 0;
  v42 = 0;
  v43 = 0;
  v30[1] = 0;
  LOBYTE(v31) = 0;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  memset(v40, 0, 25);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30[0] = *(WTF::StringImpl **)&v44[0];
  if (*((_DWORD *)this + 5) <= 1u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v36[0];
    v36[0] = *(WTF::StringImpl **)&v44[0];
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebCore::CryptoKey::usages((char *)this, (uint64_t)v44);
  if (v32)
  {
    v7 = (WTF *)v31;
    if ((_QWORD)v31)
    {
      *(_QWORD *)&v31 = 0;
      DWORD2(v31) = 0;
      WTF::fastFree(v7, v6);
    }
    v31 = v44[0];
  }
  else
  {
    v31 = v44[0];
    v32 = 1;
  }
  v8 = *((unsigned __int8 *)this + 13);
  v35 = *((unsigned __int8 *)this + 14) | 0x100;
  if (v8)
  {
    if (v8 == 2)
    {
      *(_BYTE *)a2 = 30;
      *(_QWORD *)(a2 + 8) = 0;
      v16 = 1;
      goto LABEL_31;
    }
    if (v8 == 1)
    {
      WTF::base64EncodeToString();
      v10 = *(WTF::StringImpl **)&v44[0];
      *(_QWORD *)&v44[0] = 0;
      v11 = v37[1];
      v37[1] = v10;
      if (!v11)
        goto LABEL_16;
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 != 2)
        goto LABEL_15;
      WTF::StringImpl::destroy(v11, v9);
      v11 = *(WTF::StringImpl **)&v44[0];
      *(_QWORD *)&v44[0] = 0;
      if (v11)
      {
        v12 = *(_DWORD *)v11 - 2;
        if (*(_DWORD *)v11 != 2)
        {
LABEL_15:
          *(_DWORD *)v11 = v12;
          goto LABEL_16;
        }
        WTF::StringImpl::destroy(v11, v28);
      }
LABEL_16:
      if (*((_BYTE *)this + 13))
      {
        ccsha512_di();
        memset(v44, 0, sizeof(v44));
        cced25519_make_pub();
      }
      WTF::base64EncodeToString();
      v14 = v36[1];
      v36[1] = v29;
      if (!v14)
        goto LABEL_26;
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_25:
        *(_DWORD *)v14 = v15;
        goto LABEL_26;
      }
LABEL_38:
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v6);
    }
  }
  else
  {
    WTF::base64EncodeToString();
    v13 = *(WTF::StringImpl **)&v44[0];
    *(_QWORD *)&v44[0] = 0;
    v14 = v36[1];
    v36[1] = v13;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
        goto LABEL_25;
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v6);
      v14 = *(WTF::StringImpl **)&v44[0];
      *(_QWORD *)&v44[0] = 0;
      if (!v14)
        goto LABEL_26;
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
        goto LABEL_25;
      goto LABEL_38;
    }
  }
LABEL_26:
  v17 = *(_OWORD *)v30;
  v30[0] = 0;
  v30[1] = 0;
  *(_OWORD *)a2 = v17;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v32)
  {
    *(_QWORD *)(a2 + 16) = v31;
    v18 = *((_QWORD *)&v31 + 1);
    v31 = 0uLL;
    *(_QWORD *)(a2 + 24) = v18;
    *(_BYTE *)(a2 + 32) = 1;
  }
  *(_DWORD *)(a2 + 40) = v33;
  v19 = v34;
  v34 = 0;
  *(_QWORD *)(a2 + 48) = v19;
  *(_WORD *)(a2 + 56) = v35;
  v20 = *(_OWORD *)v36;
  v21 = *(_OWORD *)v37;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(a2 + 64) = v20;
  *(_OWORD *)(a2 + 80) = v21;
  v22 = v38;
  v23 = v39;
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)(a2 + 96) = v22;
  *(_OWORD *)(a2 + 112) = v23;
  v24 = *(_OWORD *)v40;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(a2 + 128) = v24;
  v25 = *(_QWORD *)&v40[16];
  *(_QWORD *)&v40[16] = 0;
  *(_QWORD *)(a2 + 144) = v25;
  *(_BYTE *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  if (v42)
  {
    *(_QWORD *)(a2 + 152) = *(_QWORD *)&v40[24];
    v26 = v41;
    *(_QWORD *)&v40[24] = 0;
    v41 = 0;
    *(_QWORD *)(a2 + 160) = v26;
    *(_BYTE *)(a2 + 168) = 1;
  }
  v16 = 0;
  v27 = v43;
  v43 = 0;
  *(_QWORD *)(a2 + 176) = v27;
LABEL_31:
  *(_DWORD *)(a2 + 184) = v16;
  WebCore::JsonWebKey::~JsonWebKey((WebCore::JsonWebKey *)v30, (WTF::StringImpl *)v6);
}

unsigned __int8 *WebCore::CryptoKeyOKP::algorithm@<X0>(WebCore::CryptoKeyOKP *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 *result;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  result = WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), (_QWORD *)a2);
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t WebCore::CryptoKeyRSA::importJwk@<X0>(char a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  char *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  WebCore::CryptoKeyRSAComponents *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  WebCore::CryptoKeyRSAComponents *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void *v65;
  int v66;
  uint64_t v67;
  WebCore::CryptoKeyRSAComponents *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *v86;
  WTF *v87;
  uint64_t v88;
  char *v89;
  WTF *v90;
  WTF *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  WTF *v102;
  WTF *v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  WTF *v109[2];
  WTF *v110[2];
  WTF *v111[2];
  WTF *v112;
  WTF *v113;
  char v114;
  WTF *v115;
  WTF *v116;
  char v117;
  WTF *v118;
  WTF *v119;
  char v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  char v125;
  WTF *v126;
  uint64_t v127;
  char v128;
  WTF *v129;
  uint64_t v130;
  char v131;
  WTF *v132;
  uint64_t v133;
  char v134;
  WTF *v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  char v146;

  result = MEMORY[0x19AEA53F4](*(_QWORD *)a3, "RSA", 3);
  if ((result & 1) == 0
    || *(_BYTE *)(a3 + 32) && (a5 & ~*(_DWORD *)(a3 + 40)) != 0
    || *(_BYTE *)(a3 + 57) && !*(_BYTE *)(a3 + 56) && a4
    || !*(_QWORD *)(a3 + 96)
    || !*(_QWORD *)(a3 + 104)
    || (result = WTF::base64Decode(), !v146))
  {
    *a6 = 0;
    return result;
  }
  if (HIDWORD(v145) && !*v144)
  {
    memmove(v144, v144 + 1, HIDWORD(v145) - 1);
    --HIDWORD(v145);
  }
  result = WTF::base64Decode();
  if (v143)
  {
    if (*(_QWORD *)(a3 + 88))
    {
      result = WTF::base64Decode();
      if (v140)
      {
        v14 = *(_QWORD *)(a3 + 120);
        if (*(_QWORD *)(a3 + 112))
        {
          if (v14)
          {
            if (*(_QWORD *)(a3 + 128))
            {
              if (*(_QWORD *)(a3 + 136))
              {
                if (*(_QWORD *)(a3 + 144))
                {
                  result = WTF::base64Decode();
                  if (v137)
                  {
                    result = WTF::base64Decode();
                    if (!v134)
                    {
                      *a6 = 0;
LABEL_134:
                      if (v137)
                      {
                        result = (uint64_t)v135;
                        if (v135)
                        {
                          v135 = 0;
                          LODWORD(v136) = 0;
                          result = WTF::fastFree((WTF *)result, v13);
                        }
                      }
                      goto LABEL_74;
                    }
                    result = WTF::base64Decode();
                    if (!v131)
                    {
                      *a6 = 0;
LABEL_131:
                      if (v134)
                      {
                        result = (uint64_t)v132;
                        if (v132)
                        {
                          v132 = 0;
                          LODWORD(v133) = 0;
                          result = WTF::fastFree((WTF *)result, v13);
                        }
                      }
                      goto LABEL_134;
                    }
                    result = WTF::base64Decode();
                    if (!v128)
                    {
                      *a6 = 0;
LABEL_128:
                      if (v131)
                      {
                        result = (uint64_t)v129;
                        if (v129)
                        {
                          v129 = 0;
                          LODWORD(v130) = 0;
                          result = WTF::fastFree((WTF *)result, v13);
                        }
                      }
                      goto LABEL_131;
                    }
                    result = WTF::base64Decode();
                    if (!v125)
                    {
                      *a6 = 0;
LABEL_125:
                      if (v128)
                      {
                        result = (uint64_t)v126;
                        if (v126)
                        {
                          v126 = 0;
                          LODWORD(v127) = 0;
                          result = WTF::fastFree((WTF *)result, v13);
                        }
                      }
                      goto LABEL_128;
                    }
                    v107 = v135;
                    v15 = v136;
                    v16 = HIDWORD(v136);
                    v135 = 0;
                    v136 = 0;
                    v106 = v132;
                    v17 = v133;
                    v18 = HIDWORD(v133);
                    v132 = 0;
                    v133 = 0;
                    v105 = v129;
                    v20 = v130;
                    v19 = HIDWORD(v130);
                    v129 = 0;
                    v130 = 0;
                    v104 = v126;
                    v126 = 0;
                    v21 = v127;
                    v22 = HIDWORD(v127);
                    v127 = 0;
                    v103 = v123;
                    v123 = 0;
                    v24 = v124;
                    v23 = HIDWORD(v124);
                    v124 = 0;
                    v100 = v19;
                    v101 = v17;
                    v98 = v22;
                    v99 = v20;
                    v96 = v23;
                    v97 = v21;
                    v95 = v24;
                    if (*(_BYTE *)(a3 + 168))
                    {
                      v92 = v18;
                      v93 = v15;
                      v94 = v16;
                      v121 = 0;
                      v122 = 0;
                      v25 = *(_DWORD *)(a3 + 164);
                      if (v25)
                      {
                        v102 = 0;
                        v26 = 0;
                        v27 = *(_QWORD *)(a3 + 152);
                        v108 = v27 + 24 * v25;
                        v28 = v27 + 16;
                        while (1)
                        {
                          v29 = v28 - 16;
                          result = WTF::base64Decode();
                          if (!v120)
                            break;
                          result = WTF::base64Decode();
                          if (v117)
                          {
                            result = WTF::base64Decode();
                            if (v114)
                            {
                              *(_OWORD *)v110 = 0u;
                              *(_OWORD *)v111 = 0u;
                              *(_OWORD *)v109 = 0u;
                              if (!v120)
                                goto LABEL_137;
                              v109[0] = v118;
                              v30 = v119;
                              v118 = 0;
                              v119 = 0;
                              v109[1] = v30;
                              if (!v117)
                                goto LABEL_137;
                              v31 = v115;
                              v115 = 0;
                              v110[0] = v31;
                              v32 = v116;
                              v116 = 0;
                              v110[1] = v32;
                              v33 = v112;
                              v112 = 0;
                              v111[0] = v33;
                              v34 = v113;
                              v113 = 0;
                              v111[1] = v34;
                              if (v26 == (_DWORD)v122)
                              {
                                v35 = WTF::Vector<WebCore::CryptoKeyRSAComponents::PrimeInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, v26 + 1, (unint64_t)v109);
                                v36 = HIDWORD(v122);
                                v102 = v121;
                                v37 = (char *)v121 + 48 * HIDWORD(v122);
                                *(_QWORD *)v37 = 0;
                                *((_QWORD *)v37 + 1) = 0;
                                v38 = *(_QWORD *)v35;
                                *(_QWORD *)v35 = 0;
                                *(_QWORD *)v37 = v38;
                                LODWORD(v38) = *((_DWORD *)v35 + 2);
                                *((_DWORD *)v35 + 2) = 0;
                                *((_DWORD *)v37 + 2) = v38;
                                LODWORD(v38) = *((_DWORD *)v35 + 3);
                                *((_DWORD *)v35 + 3) = 0;
                                *((_DWORD *)v37 + 3) = v38;
                                *((_QWORD *)v37 + 2) = 0;
                                *((_QWORD *)v37 + 3) = 0;
                                v39 = *((_QWORD *)v35 + 2);
                                *((_QWORD *)v35 + 2) = 0;
                                *((_QWORD *)v37 + 2) = v39;
                                LODWORD(v39) = *((_DWORD *)v35 + 6);
                                *((_DWORD *)v35 + 6) = 0;
                                *((_DWORD *)v37 + 6) = v39;
                                LODWORD(v39) = *((_DWORD *)v35 + 7);
                                *((_DWORD *)v35 + 7) = 0;
                                *((_DWORD *)v37 + 7) = v39;
                                *((_QWORD *)v37 + 4) = 0;
                                *((_QWORD *)v37 + 5) = 0;
                                v40 = *((_QWORD *)v35 + 4);
                                *((_QWORD *)v35 + 4) = 0;
                                *((_QWORD *)v37 + 4) = v40;
                                LODWORD(v40) = *((_DWORD *)v35 + 10);
                                *((_DWORD *)v35 + 10) = 0;
                                *((_DWORD *)v37 + 10) = v40;
                                LODWORD(v40) = *((_DWORD *)v35 + 11);
                                *((_DWORD *)v35 + 11) = 0;
                                *((_DWORD *)v37 + 11) = v40;
                              }
                              else
                              {
                                v42 = (char *)v102 + 48 * v26;
                                *(_QWORD *)v42 = 0;
                                *((_QWORD *)v42 + 1) = 0;
                                v43 = v109[0];
                                v109[0] = 0;
                                *(_QWORD *)v42 = v43;
                                LODWORD(v43) = v109[1];
                                LODWORD(v109[1]) = 0;
                                *((_DWORD *)v42 + 2) = (_DWORD)v43;
                                LODWORD(v43) = HIDWORD(v109[1]);
                                HIDWORD(v109[1]) = 0;
                                *((_DWORD *)v42 + 3) = (_DWORD)v43;
                                *((_QWORD *)v42 + 2) = 0;
                                *((_QWORD *)v42 + 3) = 0;
                                v44 = v110[0];
                                v110[0] = 0;
                                *((_QWORD *)v42 + 2) = v44;
                                LODWORD(v44) = v110[1];
                                LODWORD(v110[1]) = 0;
                                *((_DWORD *)v42 + 6) = (_DWORD)v44;
                                LODWORD(v44) = HIDWORD(v110[1]);
                                HIDWORD(v110[1]) = 0;
                                *((_DWORD *)v42 + 7) = (_DWORD)v44;
                                *((_QWORD *)v42 + 4) = 0;
                                *((_QWORD *)v42 + 5) = 0;
                                v45 = v111[0];
                                v111[0] = 0;
                                *((_QWORD *)v42 + 4) = v45;
                                LODWORD(v45) = v111[1];
                                LODWORD(v111[1]) = 0;
                                *((_DWORD *)v42 + 10) = (_DWORD)v45;
                                LODWORD(v45) = HIDWORD(v111[1]);
                                HIDWORD(v111[1]) = 0;
                                *((_DWORD *)v42 + 11) = (_DWORD)v45;
                                v36 = HIDWORD(v122);
                              }
                              v26 = v36 + 1;
                              HIDWORD(v122) = v36 + 1;
                              v46 = v111[0];
                              if (v111[0])
                              {
                                v111[0] = 0;
                                LODWORD(v111[1]) = 0;
                                WTF::fastFree(v46, v13);
                              }
                              v47 = v110[0];
                              if (v110[0])
                              {
                                v110[0] = 0;
                                LODWORD(v110[1]) = 0;
                                WTF::fastFree(v47, v13);
                              }
                              result = (uint64_t)v109[0];
                              if (v109[0])
                              {
                                v109[0] = 0;
                                LODWORD(v109[1]) = 0;
                                result = WTF::fastFree((WTF *)result, v13);
                              }
                              if (v114)
                              {
                                result = (uint64_t)v112;
                                if (v112)
                                {
                                  v112 = 0;
                                  LODWORD(v113) = 0;
                                  result = WTF::fastFree((WTF *)result, v13);
                                }
                              }
                              v41 = 0;
                            }
                            else
                            {
                              *a6 = 0;
                              v41 = 1;
                            }
                            if (v117)
                            {
                              result = (uint64_t)v115;
                              if (v115)
                              {
                                v115 = 0;
                                LODWORD(v116) = 0;
                                result = WTF::fastFree((WTF *)result, v13);
                              }
                            }
                          }
                          else
                          {
                            *a6 = 0;
                            v41 = 1;
                          }
                          if (v120)
                          {
                            result = (uint64_t)v118;
                            if (v118)
                            {
                              v118 = 0;
                              LODWORD(v119) = 0;
                              result = WTF::fastFree((WTF *)result, v13);
                            }
                          }
                          if (v41)
                            goto LABEL_101;
                          v28 += 24;
                          if (v29 + 24 == v108)
                            goto LABEL_92;
                        }
                        *a6 = 0;
LABEL_101:
                        v87 = v121;
                        if (v26)
                        {
                          v88 = 48 * v26;
                          v89 = (char *)v121 + 24;
                          do
                          {
                            v90 = (WTF *)*((_QWORD *)v89 + 1);
                            if (v90)
                            {
                              *((_QWORD *)v89 + 1) = 0;
                              *((_DWORD *)v89 + 4) = 0;
                              WTF::fastFree(v90, v13);
                            }
                            v91 = (WTF *)*((_QWORD *)v89 - 1);
                            if (v91)
                            {
                              *((_QWORD *)v89 - 1) = 0;
                              *(_DWORD *)v89 = 0;
                              WTF::fastFree(v91, v13);
                            }
                            result = *((_QWORD *)v89 - 3);
                            if (result)
                            {
                              *((_QWORD *)v89 - 3) = 0;
                              *((_DWORD *)v89 - 4) = 0;
                              result = WTF::fastFree((WTF *)result, v13);
                            }
                            v89 += 48;
                            v88 -= 48;
                          }
                          while (v88);
                        }
                        if (v87)
                          result = WTF::fastFree(v87, v13);
                        if (v103)
                          result = WTF::fastFree(v103, v13);
                        if (v104)
                          result = WTF::fastFree(v104, v13);
                        if (v105)
                          result = WTF::fastFree(v105, v13);
                        if (v106)
                          result = WTF::fastFree(v106, v13);
                        if (v107)
                          result = WTF::fastFree(v107, v13);
                        goto LABEL_122;
                      }
                      v26 = 0;
LABEL_92:
                      if (!v146 || !v143 || !v140)
                      {
LABEL_137:
                        __break(1u);
                        return result;
                      }
                      v78 = operator new();
                      v68 = (WebCore::CryptoKeyRSAComponents *)v78;
                      *(_QWORD *)v78 = &off_1E3397430;
                      *(_BYTE *)(v78 + 8) = 1;
                      v79 = v144;
                      v144 = 0;
                      *(_QWORD *)(v78 + 16) = v79;
                      v80 = v145;
                      v145 = 0;
                      *(_QWORD *)(v78 + 24) = v80;
                      v81 = v141;
                      v141 = 0;
                      *(_QWORD *)(v78 + 32) = v81;
                      v82 = v142;
                      v142 = 0;
                      *(_QWORD *)(v78 + 40) = v82;
                      v83 = v138;
                      v138 = 0;
                      *(_QWORD *)(v78 + 48) = v83;
                      v84 = v139;
                      v139 = 0;
                      *(_QWORD *)(v78 + 56) = v84;
                      *(_BYTE *)(v78 + 64) = 1;
                      *(_QWORD *)(v78 + 72) = v107;
                      *(_DWORD *)(v78 + 80) = v93;
                      *(_DWORD *)(v78 + 84) = v94;
                      *(_QWORD *)(v78 + 88) = v106;
                      *(_DWORD *)(v78 + 96) = v101;
                      *(_DWORD *)(v78 + 100) = v92;
                      *(_QWORD *)(v78 + 104) = 0;
                      *(_QWORD *)(v78 + 112) = 0;
                      *(_QWORD *)(v78 + 120) = v105;
                      *(_DWORD *)(v78 + 128) = v99;
                      *(_DWORD *)(v78 + 132) = v100;
                      *(_QWORD *)(v78 + 136) = v104;
                      *(_DWORD *)(v78 + 144) = v97;
                      *(_DWORD *)(v78 + 148) = v98;
                      *(_QWORD *)(v78 + 152) = v103;
                      *(_DWORD *)(v78 + 160) = v95;
                      *(_DWORD *)(v78 + 164) = v96;
                      *(_QWORD *)(v78 + 168) = v121;
                      if (HIBYTE(a2))
                        v85 = a2;
                      else
                        v85 = 13;
                      v76 = HIBYTE(a2) != 0;
                      v77 = v85;
                      *(_DWORD *)(v78 + 176) = v122;
                      *(_DWORD *)(v78 + 180) = v26;
                    }
                    else
                    {
                      v66 = v15;
                      v67 = operator new();
                      v68 = (WebCore::CryptoKeyRSAComponents *)v67;
                      *(_QWORD *)v67 = &off_1E3397430;
                      *(_BYTE *)(v67 + 8) = 1;
                      v69 = v144;
                      v144 = 0;
                      *(_QWORD *)(v67 + 16) = v69;
                      v70 = v145;
                      v145 = 0;
                      *(_QWORD *)(v67 + 24) = v70;
                      v71 = v141;
                      v141 = 0;
                      *(_QWORD *)(v67 + 32) = v71;
                      v72 = v142;
                      v142 = 0;
                      *(_QWORD *)(v67 + 40) = v72;
                      v73 = v138;
                      v138 = 0;
                      *(_QWORD *)(v67 + 48) = v73;
                      v74 = v139;
                      v139 = 0;
                      *(_QWORD *)(v67 + 56) = v74;
                      *(_BYTE *)(v67 + 64) = 1;
                      *(_QWORD *)(v67 + 72) = v107;
                      *(_DWORD *)(v67 + 80) = v66;
                      *(_DWORD *)(v67 + 84) = v16;
                      *(_QWORD *)(v67 + 88) = v106;
                      *(_DWORD *)(v67 + 96) = v101;
                      *(_DWORD *)(v67 + 100) = v18;
                      *(_QWORD *)(v67 + 104) = 0;
                      *(_QWORD *)(v67 + 112) = 0;
                      *(_QWORD *)(v67 + 120) = v105;
                      *(_DWORD *)(v67 + 128) = v99;
                      *(_DWORD *)(v67 + 132) = v100;
                      *(_QWORD *)(v67 + 136) = v104;
                      *(_DWORD *)(v67 + 144) = v97;
                      *(_DWORD *)(v67 + 148) = v98;
                      *(_QWORD *)(v67 + 152) = v103;
                      *(_DWORD *)(v67 + 160) = v95;
                      *(_DWORD *)(v67 + 164) = v96;
                      if (HIBYTE(a2))
                        v75 = a2;
                      else
                        v75 = 13;
                      v76 = HIBYTE(a2) != 0;
                      v77 = v75;
                      *(_QWORD *)(v67 + 168) = 0;
                      *(_QWORD *)(v67 + 176) = 0;
                    }
                    WebCore::CryptoKeyRSA::create(a1, v77, v76, (uint64_t)v68, a4, a5, a6);
                    WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents(v68, v86);
                    result = MEMORY[0x19AEA7644]();
LABEL_122:
                    if (v125)
                    {
                      result = (uint64_t)v123;
                      if (v123)
                      {
                        v123 = 0;
                        LODWORD(v124) = 0;
                        result = WTF::fastFree((WTF *)result, v13);
                      }
                    }
                    goto LABEL_125;
                  }
                }
              }
            }
          }
        }
        else if (!v14 && !*(_QWORD *)(a3 + 128) && !*(_QWORD *)(a3 + 144))
        {
          v56 = operator new();
          v57 = (WebCore::CryptoKeyRSAComponents *)v56;
          *(_QWORD *)v56 = &off_1E3397430;
          *(_BYTE *)(v56 + 8) = 1;
          v58 = v144;
          v144 = 0;
          *(_QWORD *)(v56 + 16) = v58;
          v59 = v145;
          v145 = 0;
          *(_QWORD *)(v56 + 24) = v59;
          v60 = v141;
          v141 = 0;
          *(_QWORD *)(v56 + 32) = v60;
          v61 = v142;
          v142 = 0;
          *(_QWORD *)(v56 + 40) = v61;
          v62 = v138;
          v138 = 0;
          *(_QWORD *)(v56 + 48) = v62;
          v63 = v139;
          v139 = 0;
          *(_QWORD *)(v56 + 56) = v63;
          *(_BYTE *)(v56 + 64) = 0;
          *(_OWORD *)(v56 + 168) = 0u;
          *(_OWORD *)(v56 + 152) = 0u;
          *(_OWORD *)(v56 + 136) = 0u;
          *(_OWORD *)(v56 + 120) = 0u;
          *(_OWORD *)(v56 + 104) = 0u;
          *(_OWORD *)(v56 + 88) = 0u;
          if (HIBYTE(a2))
            v64 = a2;
          else
            v64 = 13;
          *(_OWORD *)(v56 + 72) = 0uLL;
          WebCore::CryptoKeyRSA::create(a1, v64, HIBYTE(a2) != 0, v56, a4, a5, a6);
          WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents(v57, v65);
          result = MEMORY[0x19AEA7644]();
LABEL_74:
          if (v140)
          {
            result = v138;
            if (v138)
            {
              v138 = 0;
              LODWORD(v139) = 0;
              result = WTF::fastFree((WTF *)result, v13);
            }
          }
          goto LABEL_77;
        }
        *a6 = 0;
        goto LABEL_74;
      }
      *a6 = 0;
    }
    else
    {
      v48 = operator new();
      v49 = (WebCore::CryptoKeyRSAComponents *)v48;
      *(_QWORD *)v48 = &off_1E3397430;
      *(_BYTE *)(v48 + 8) = 0;
      v50 = v144;
      v144 = 0;
      *(_QWORD *)(v48 + 16) = v50;
      v51 = v145;
      v145 = 0;
      *(_QWORD *)(v48 + 24) = v51;
      v52 = v141;
      v141 = 0;
      *(_QWORD *)(v48 + 32) = v52;
      v53 = v142;
      v142 = 0;
      *(_QWORD *)(v48 + 40) = v53;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_OWORD *)(v48 + 72) = 0u;
      *(_OWORD *)(v48 + 88) = 0u;
      *(_OWORD *)(v48 + 104) = 0u;
      *(_OWORD *)(v48 + 120) = 0u;
      *(_OWORD *)(v48 + 136) = 0u;
      *(_OWORD *)(v48 + 152) = 0u;
      if (HIBYTE(a2))
        v54 = a2;
      else
        v54 = 13;
      *(_OWORD *)(v48 + 168) = 0uLL;
      WebCore::CryptoKeyRSA::create(a1, v54, HIBYTE(a2) != 0, v48, a4, a5, a6);
      WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents(v49, v55);
      result = MEMORY[0x19AEA7644]();
    }
LABEL_77:
    if (v143)
    {
      result = v141;
      if (v141)
      {
        v141 = 0;
        LODWORD(v142) = 0;
        result = WTF::fastFree((WTF *)result, v13);
      }
    }
    goto LABEL_80;
  }
  *a6 = 0;
LABEL_80:
  if (v146)
  {
    result = (uint64_t)v144;
    if (v144)
    {
      v144 = 0;
      LODWORD(v145) = 0;
      return WTF::fastFree((WTF *)result, v13);
    }
  }
  return result;
}

WTF *WebCore::CryptoKeyRSA::exportJwk@<X0>(WebCore::CryptoKeyRSA *this@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;

  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 137) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CryptoKey::usages((char *)this, (uint64_t)&v30);
  *(_QWORD *)(a2 + 16) = v30;
  *(_QWORD *)(a2 + 24) = v31;
  *(_BYTE *)(a2 + 32) = 1;
  *(_WORD *)(a2 + 56) = *((unsigned __int8 *)this + 14) | 0x100;
  result = WebCore::CryptoKeyRSA::exportData(this, (uint64_t *)&v35);
  if (!v35)
    return result;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 96) = v30;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 104) = v30;
  result = v35;
  if (!*((_BYTE *)v35 + 8))
    goto LABEL_35;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 88) = v30;
  result = v35;
  if (!*((_BYTE *)v35 + 64))
    goto LABEL_35;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 112) = v30;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 120) = v30;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 128) = v30;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 136) = v30;
  WTF::base64EncodeToString();
  *(_QWORD *)(a2 + 144) = v30;
  result = v35;
  v5 = *((_DWORD *)v35 + 45);
  if (!v5)
  {
LABEL_35:
    v35 = 0;
    return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
  v33 = 0;
  v34 = 0;
  v6 = *((_QWORD *)v35 + 21);
  v7 = v6 + 48 * v5;
  do
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    WTF::base64EncodeToString();
    v9 = v30;
    v30 = v29;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::base64EncodeToString();
    v11 = v31;
    v31 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WTF::base64EncodeToString();
    v29 = 0;
    v13 = v32;
    v32 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v12);
        v29 = 0;
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
    v14 = HIDWORD(v34);
    if (HIDWORD(v34) == (_DWORD)v34)
    {
      v15 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v30);
      v14 = HIDWORD(v34);
      v16 = (_QWORD *)(v33 + 24 * HIDWORD(v34));
      v17 = *(_QWORD *)v15;
      *(_QWORD *)v15 = 0;
      *v16 = v17;
      v18 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      v16[1] = v18;
      v19 = (WTF::StringImpl **)(v16 + 2);
      v20 = (WTF::StringImpl **)(v15 + 16);
    }
    else
    {
      v21 = (WTF::StringImpl **)(v33 + 24 * HIDWORD(v34));
      v22 = v30;
      v30 = 0;
      *v21 = v22;
      v23 = v31;
      v31 = 0;
      v21[1] = v23;
      v19 = v21 + 2;
      v20 = &v32;
    }
    v24 = *v20;
    *v20 = 0;
    *v19 = v24;
    HIDWORD(v34) = v14 + 1;
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v12);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v12);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v30;
    v30 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v12);
      else
        *(_DWORD *)v27 -= 2;
    }
    v6 += 48;
  }
  while (v6 != v7);
  *(_QWORD *)(a2 + 152) = v33;
  v28 = v34;
  v33 = 0;
  v34 = 0;
  *(_QWORD *)(a2 + 160) = v28;
  *(_BYTE *)(a2 + 168) = 1;
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v33, v12);
  result = v35;
  v35 = 0;
  if (result)
    return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WebCore::CryptoKeyRSAComponents::CryptoKeyRSAComponents(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **this, unsigned int *a7)
{
  _DWORD *v12;
  WTF *v13;
  void *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;

  v12 = result;
  *result = &off_1E3397430;
  *((_BYTE *)result + 8) = 1;
  v13 = (WTF *)*(unsigned int *)(a2 + 12);
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 7) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v15 = (void *)WTF::fastMalloc(v13);
    v12[6] = (_DWORD)v13;
    *((_QWORD *)v12 + 2) = v15;
    result = memcpy(v15, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  v16 = (WTF *)*(unsigned int *)(a3 + 12);
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  v12[11] = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    v12[10] = (_DWORD)v16;
    *((_QWORD *)v12 + 4) = v17;
    result = memcpy(v17, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
  v18 = (WTF *)*(unsigned int *)(a4 + 12);
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = 0;
  v12[15] = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v19 = (void *)WTF::fastMalloc(v18);
    v12[14] = (_DWORD)v18;
    *((_QWORD *)v12 + 6) = v19;
    result = memcpy(v19, *(const void **)a4, *(unsigned int *)(a4 + 12));
  }
  *((_BYTE *)v12 + 64) = 1;
  v20 = (WTF *)*(unsigned int *)(a5 + 12);
  *((_QWORD *)v12 + 9) = 0;
  *((_QWORD *)v12 + 10) = 0;
  v12[21] = (_DWORD)v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)WTF::fastMalloc(v20);
    v12[20] = (_DWORD)v20;
    *((_QWORD *)v12 + 9) = v21;
    result = memcpy(v21, *(const void **)a5, *(unsigned int *)(a5 + 12));
  }
  v22 = (WTF *)*(unsigned int *)(a5 + 28);
  *((_QWORD *)v12 + 11) = 0;
  *((_QWORD *)v12 + 12) = 0;
  v12[25] = (_DWORD)v22;
  if ((_DWORD)v22)
  {
    v23 = (void *)WTF::fastMalloc(v22);
    v12[24] = (_DWORD)v22;
    *((_QWORD *)v12 + 11) = v23;
    result = memcpy(v23, *(const void **)(a5 + 16), *(unsigned int *)(a5 + 28));
  }
  v24 = (WTF *)*(unsigned int *)(a5 + 44);
  *((_QWORD *)v12 + 13) = 0;
  *((_QWORD *)v12 + 14) = 0;
  v12[29] = (_DWORD)v24;
  if ((_DWORD)v24)
  {
    v25 = (void *)WTF::fastMalloc(v24);
    v12[28] = (_DWORD)v24;
    *((_QWORD *)v12 + 13) = v25;
    result = memcpy(v25, *(const void **)(a5 + 32), *(unsigned int *)(a5 + 44));
  }
  v26 = (WTF *)*((unsigned int *)this + 3);
  *((_QWORD *)v12 + 15) = 0;
  *((_QWORD *)v12 + 16) = 0;
  v12[33] = (_DWORD)v26;
  if ((_DWORD)v26)
  {
    v27 = (void *)WTF::fastMalloc(v26);
    v12[32] = (_DWORD)v26;
    *((_QWORD *)v12 + 15) = v27;
    result = memcpy(v27, *this, *((unsigned int *)this + 3));
  }
  v28 = (WTF *)*((unsigned int *)this + 7);
  *((_QWORD *)v12 + 17) = 0;
  *((_QWORD *)v12 + 18) = 0;
  v12[37] = (_DWORD)v28;
  if ((_DWORD)v28)
  {
    v29 = (void *)WTF::fastMalloc(v28);
    v12[36] = (_DWORD)v28;
    *((_QWORD *)v12 + 17) = v29;
    result = memcpy(v29, this[2], *((unsigned int *)this + 7));
  }
  v30 = (WTF *)*((unsigned int *)this + 11);
  *((_QWORD *)v12 + 19) = 0;
  *((_QWORD *)v12 + 20) = 0;
  v12[41] = (_DWORD)v30;
  if ((_DWORD)v30)
  {
    v31 = (void *)WTF::fastMalloc(v30);
    v12[40] = (_DWORD)v30;
    *((_QWORD *)v12 + 19) = v31;
    result = memcpy(v31, this[4], *((unsigned int *)this + 11));
  }
  v32 = a7[3];
  *((_QWORD *)v12 + 21) = 0;
  *((_QWORD *)v12 + 22) = 0;
  v12[45] = v32;
  if (!(_DWORD)v32)
    return v12;
  if (v32 < 0x5555556)
  {
    v33 = 48 * v32;
    v34 = WTF::fastMalloc((WTF *)(48 * v32));
    v12[44] = (v33 & 0xFFFFFFF0) / 0x30;
    *((_QWORD *)v12 + 21) = v34;
    v35 = a7[3];
    if ((_DWORD)v35)
    {
      v36 = (unsigned int *)(*(_QWORD *)a7 + 28);
      v37 = 48 * v35;
      v38 = v34 + 24;
      do
      {
        v39 = (WTF *)*(v36 - 4);
        *(_QWORD *)(v38 - 24) = 0;
        *(_QWORD *)(v38 - 16) = 0;
        *(_DWORD *)(v38 - 12) = (_DWORD)v39;
        if ((_DWORD)v39)
        {
          v40 = (void *)WTF::fastMalloc(v39);
          *(_DWORD *)(v38 - 16) = (_DWORD)v39;
          *(_QWORD *)(v38 - 24) = v40;
          memcpy(v40, *(const void **)(v36 - 7), *(v36 - 4));
        }
        v41 = (WTF *)*v36;
        *(_QWORD *)(v38 - 8) = 0;
        *(_QWORD *)v38 = 0;
        *(_DWORD *)(v38 + 4) = (_DWORD)v41;
        if ((_DWORD)v41)
        {
          v42 = (void *)WTF::fastMalloc(v41);
          *(_DWORD *)v38 = (_DWORD)v41;
          *(_QWORD *)(v38 - 8) = v42;
          memcpy(v42, *(const void **)(v36 - 3), *v36);
        }
        v43 = (WTF *)v36[4];
        *(_QWORD *)(v38 + 8) = 0;
        *(_QWORD *)(v38 + 16) = 0;
        *(_DWORD *)(v38 + 20) = (_DWORD)v43;
        if ((_DWORD)v43)
        {
          v44 = (void *)WTF::fastMalloc(v43);
          *(_DWORD *)(v38 + 16) = (_DWORD)v43;
          *(_QWORD *)(v38 + 8) = v44;
          memcpy(v44, *(const void **)(v36 + 1), v36[4]);
        }
        v36 += 12;
        v38 += 48;
        v37 -= 48;
      }
      while (v37);
    }
    return v12;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents(WebCore::CryptoKeyRSAComponents *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;

  *(_QWORD *)this = &off_1E3397430;
  v3 = *((unsigned int *)this + 45);
  v4 = (WTF *)*((_QWORD *)this + 21);
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    v6 = (char *)v4 + 24;
    do
    {
      v7 = (WTF *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = (WTF *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        *((_QWORD *)v6 - 1) = 0;
        *(_DWORD *)v6 = 0;
        WTF::fastFree(v8, a2);
      }
      v9 = (WTF *)*((_QWORD *)v6 - 3);
      if (v9)
      {
        *((_QWORD *)v6 - 3) = 0;
        *((_DWORD *)v6 - 4) = 0;
        WTF::fastFree(v9, a2);
      }
      v6 += 48;
      v5 -= 48;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 21);
  }
  if (v4)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v4, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 19);
  if (v10)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 17);
  if (v11)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 15);
  if (v12)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 13);
  if (v13)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (WTF *)*((_QWORD *)this + 11);
  if (v14)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 9);
  if (v15)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = (WTF *)*((_QWORD *)this + 6);
  if (v16)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = (WTF *)*((_QWORD *)this + 4);
  if (v17)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = (WTF *)*((_QWORD *)this + 2);
  if (v18)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v18, a2);
  }
}

{
  WebCore::CryptoKeyRSAComponents::~CryptoKeyRSAComponents(this, a2);
  JUMPOUT(0x19AEA7644);
}

unsigned __int8 *WebCore::CryptoKeyRaw::algorithm@<X0>(WebCore::CryptoKeyRaw *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 *result;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebCore::CryptoAlgorithmRegistry::singleton(void)::onceKey, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CryptoAlgorithmRegistry::singleton(void)::$_0 &&>>);
  }
  result = WebCore::CryptoAlgorithmRegistry::name((unsigned __int8 *)&WebCore::CryptoAlgorithmRegistry::singleton(void)::registry, *((unsigned __int8 *)this + 12), (_QWORD *)a2);
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t WebCore::CryptoKeyAES::keyClass(WebCore::CryptoKeyAES *this)
{
  return 0;
}

void WebCore::CryptoKeyEC::~CryptoKeyEC(WebCore::CryptoKeyEC *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x19AEA00D8]();
}

void WebCore::CryptoKeyEC::~CryptoKeyEC(WebCore::CryptoKeyEC *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    MEMORY[0x19AEA00D8]();
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CryptoKeyEC::keyClass(WebCore::CryptoKeyEC *this)
{
  return 1;
}

uint64_t WebCore::CryptoKeyHMAC::keyClass(WebCore::CryptoKeyHMAC *this)
{
  return 2;
}

void WebCore::CryptoKeyOKP::~CryptoKeyOKP(WebCore::CryptoKeyOKP *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CryptoKeyOKP::keyClass(WebCore::CryptoKeyOKP *this)
{
  return 3;
}

void WebCore::CryptoKeyRaw::~CryptoKeyRaw(WebCore::CryptoKeyRaw *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CryptoKeyRaw::keyClass(WebCore::CryptoKeyRaw *this)
{
  return 5;
}

char *WTF::Vector<WebCore::CryptoKeyRSAComponents::PrimeInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19577FFCCLL);
      }
      v17 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::CryptoKeyRSAComponents::PrimeInfo>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19577FFD4);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::CryptoKeyRSAComponents::PrimeInfo>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF *WTF::VectorMover<false,WebCore::CryptoKeyRSAComponents::PrimeInfo>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v6;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v8 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 10) = 0;
      *(_DWORD *)(a3 + 40) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 11) = 0;
      *(_DWORD *)(a3 + 44) = v8;
      v9 = (WTF *)*((_QWORD *)v5 + 4);
      if (v9)
      {
        *((_QWORD *)v5 + 4) = 0;
        *((_DWORD *)v5 + 10) = 0;
        WTF::fastFree(v9, a2);
      }
      v10 = (WTF *)*((_QWORD *)v5 + 2);
      if (v10)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v10, a2);
      }
      result = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v5 = (WTF *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

WTF *WebCore::valueForSVGPath@<X0>(uint64_t a1@<X0>, const WebCore::SVGPathByteStream *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  WTF *v7;
  int v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WTF *result;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  char v22;
  char v23;

  v5 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)a2
    && (WebCore::convertSVGPathByteStreamToAbsoluteCoordinates(*(WebCore **)(a1 + 16), a2, (uint64_t)&v20), v22))
  {
    v7 = v21;
    v8 = (*(_DWORD *)v21)++;
    v18 = 0;
    v19 = v7;
    v21 = 0;
    if (v8)
    {
      *(_DWORD *)v7 = v8;
    }
    else
    {
      v16 = *((unsigned int *)v7 + 22);
      if ((_DWORD)v16 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v16])(&v23, (char *)v7 + 32);
      *((_DWORD *)v7 + 22) = -1;
      v17 = (WTF *)*((_QWORD *)v7 + 1);
      if (v17)
      {
        *((_QWORD *)v7 + 1) = 0;
        *((_DWORD *)v7 + 4) = 0;
        WTF::fastFree(v17, v6);
      }
      WTF::fastFree(v7, v6);
    }
    v9 = v20;
    if (v20)
    {
      *((_QWORD *)v20 + 1) = 0;
      v20 = 0;
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v6);
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    v10 = *(WTF **)(v5 + 8);
    ++*(_DWORD *)v10;
    v18 = 0;
    v19 = v10;
  }
  WebCore::CSSPathValue::create((uint64_t)&v18, *(_BYTE *)(a1 + 28), a3);
  v12 = v19;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v14 = *((unsigned int *)v19 + 22);
      if ((_DWORD)v14 != -1)
        ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(&v20, (char *)v19 + 32);
      *((_DWORD *)v12 + 22) = -1;
      v15 = (WTF *)*((_QWORD *)v12 + 1);
      if (v15)
      {
        *((_QWORD *)v12 + 1) = 0;
        *((_DWORD *)v12 + 4) = 0;
        WTF::fastFree(v15, v11);
      }
      WTF::fastFree(v12, v11);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  result = v18;
  if (v18)
  {
    *((_QWORD *)v18 + 1) = 0;
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v11);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::CSSPathValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  char v12;

  result = WTF::fastCompactMalloc((WTF *)0x20);
  {
    v8 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 2;
  }
  else
  {
    xmmword_1EE2DFB60 = 0u;
    unk_1EE2DFB70 = 0u;
    xmmword_1EE2DFB40 = 0u;
    unk_1EE2DFB50 = 0u;
    WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
    *(_OWORD *)&dword_1EE2DFB30 = 0u;
    v8 = 3;
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
  *(_DWORD *)result = 2;
  v10 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(result + 4) = 26624;
  *(_BYTE *)(result + 6) = BYTE2(v10);
  *(_QWORD *)(result + 8) = 0;
  {
    xmmword_1EE2DFB60 = 0u;
    unk_1EE2DFB70 = 0u;
    xmmword_1EE2DFB40 = 0u;
    unk_1EE2DFB50 = 0u;
    WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
    *(_OWORD *)&dword_1EE2DFB30 = 0u;
    v8 = 2;
  }
  LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v8;
  *(_QWORD *)(result + 16) = v9;
  *(_BYTE *)(result + 24) = a2;
  *a3 = result;
  if (v8 == 1)
  {
    if (dword_1EE2DFB78 != -1)
      ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[dword_1EE2DFB78])(&v12, &xmmword_1EE2DFB40);
    dword_1EE2DFB78 = -1;
    v11 = (WTF *)*((_QWORD *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1);
    if (*((_QWORD *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1))
    {
      *((_QWORD *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1) = 0;
      dword_1EE2DFB30 = 0;
      WTF::fastFree(v11, v7);
    }
    return WTF::fastFree((WTF *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton, v7);
  }
  else
  {
    LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v8 - 1;
  }
  return result;
}

WTF *WebCore::valueForBasicShape@<X0>(const WebCore::Length *a1@<X0>, uint64_t a2@<X1>, const WebCore::SVGPathByteStream *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WebCore::CSSPrimitiveValue *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  WTF *v19;
  WTF *v20;
  WTF *result;
  int v22;
  _DWORD *v23;
  int v24;
  WTF *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF *v33;
  WTF *v35;
  uint64_t v36;
  _DWORD *v37;
  int *v39;
  int v40;
  int *v41;
  int v42;
  int *v43;
  int v44;
  int *v45;
  WTF *v46;
  int *v47;
  int *v48;
  uint64_t v49;
  int v50;
  int *v51;
  float v52;
  WTF *v53;
  float v54;
  WTF *v55;
  int v56;
  int v57;
  int *v58;
  _DWORD *v59;
  int *v60;
  int *v61;
  int v62;
  int *v63;
  WTF *v64;
  int v65;
  char v66;
  int *v67;
  WTF *v68;
  uint64_t v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  char v73;
  int *v74;
  WTF *v75;
  uint64_t v76;
  int v77;
  int *v78;
  WTF *v79;
  uint64_t v80;
  int v81;
  char v82;
  int *v83;
  WTF *v84;
  uint64_t v85;
  int v86;
  char v87;
  WTF *__src;
  uint64_t v89;
  int *v90;
  int *v91;
  int *v92;
  int *v93;
  int *v94;
  WTF *v95;
  uint64_t v96;
  _BYTE v97[32];
  WTF *v98;
  uint64_t v99;
  _BYTE v100[32];
  const WebCore::Length **v101;
  const WebCore::Length *v102;
  int *v103[2];

  v101 = &v102;
  v102 = a1;
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    case 0u:
      v98 = (WTF *)v100;
      v99 = 4;
      v8 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v8)
      {
        v9 = *(WebCore::CSSPrimitiveValue **)(a2 + 16);
        v10 = 8 * v8;
        do
        {
          WebCore::CSSPrimitiveValue::create(v103, v9, a1);
          v11 = HIDWORD(v99);
          if (HIDWORD(v99) == (_DWORD)v99)
          {
            v13 = HIDWORD(v99) + ((unint64_t)HIDWORD(v99) >> 2);
            if (v13 >= 0x10)
              v14 = v13 + 1;
            else
              v14 = 16;
            if (v14 <= (unint64_t)HIDWORD(v99) + 1)
              v15 = HIDWORD(v99) + 1;
            else
              v15 = v14;
            __src = v98;
            if (v15 < 5)
            {
              v98 = (WTF *)v100;
              LODWORD(v99) = 4;
              v16 = (WTF *)v100;
            }
            else
            {
              if (v15 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19578168CLL);
              }
              v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
              LODWORD(v99) = v15;
              v98 = v16;
            }
            memcpy(v16, __src, 8 * HIDWORD(v99));
            if (v100 != (_BYTE *)__src && __src)
            {
              if (v98 == __src)
              {
                v98 = 0;
                LODWORD(v99) = 0;
              }
              WTF::fastFree(__src, v17);
            }
            v11 = HIDWORD(v99);
            *((int **)v98 + HIDWORD(v99)) = v103[0];
          }
          else
          {
            *((int **)v98 + HIDWORD(v99)) = v103[0];
          }
          v12 = v11 + 1;
          HIDWORD(v99) = v11 + 1;
          v9 = (WebCore::CSSPrimitiveValue *)((char *)v9 + 8);
          v10 -= 8;
        }
        while (v10);
        v25 = v98;
        v95 = (WTF *)v97;
        v96 = 4;
        if (v98 != (WTF *)v100)
        {
          v98 = (WTF *)v100;
          v95 = v25;
          v26 = v99;
          LODWORD(v99) = 4;
          LODWORD(v96) = v26;
          goto LABEL_47;
        }
      }
      else
      {
        v12 = 0;
        v95 = (WTF *)v97;
        v96 = 4;
      }
      memcpy(v97, v100, 8 * v12);
LABEL_47:
      HIDWORD(v99) = 0;
      HIDWORD(v96) = v12;
      WebCore::CSSPolygonValue::create((uint64_t)&v95, *(_BYTE *)(a2 + 12), a4);
      if (HIDWORD(v96))
      {
        v30 = v95;
        v31 = 8 * HIDWORD(v96);
        do
        {
          v32 = *(_DWORD **)v30;
          *(_QWORD *)v30 = 0;
          if (v32)
          {
            if (*v32 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v29);
            else
              *v32 -= 2;
          }
          v30 = (WTF *)((char *)v30 + 8);
          v31 -= 8;
        }
        while (v31);
      }
      v33 = v95;
      if (v97 != (_BYTE *)v95 && v95 != 0)
      {
        v95 = 0;
        LODWORD(v96) = 0;
        WTF::fastFree(v33, v29);
      }
      if (HIDWORD(v99))
      {
        v35 = v98;
        v36 = 8 * HIDWORD(v99);
        do
        {
          v37 = *(_DWORD **)v35;
          *(_QWORD *)v35 = 0;
          if (v37)
          {
            if (*v37 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v29);
            else
              *v37 -= 2;
          }
          v35 = (WTF *)((char *)v35 + 8);
          v36 -= 8;
        }
        while (v36);
      }
      result = v98;
      if (v100 != (_BYTE *)v98 && v98 != 0)
      {
        v98 = 0;
        LODWORD(v99) = 0;
        return (WTF *)WTF::fastFree(result, v29);
      }
      return result;
    case 1u:
      return WebCore::valueForSVGPath(a2, a3, a4);
    case 2u:
      if (*(_BYTE *)(a2 + 64) == 2)
      {
        v27 = 0x1700u;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 64))
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 56), a1);
          v19 = v98;
          goto LABEL_130;
        }
        v27 = 0x16F8u;
      }
      v19 = (WTF *)&WebCore::staticCSSValuePool[v27];
      WebCore::staticCSSValuePool[v27] += 2;
LABEL_130:
      if (*(_BYTE *)(a2 + 12))
      {
        result = (WTF *)WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)result = 2;
        v66 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = -12288;
        *((_BYTE *)result + 6) = v66 & 0xFC;
        *((_QWORD *)result + 2) = 0;
        *((_QWORD *)result + 3) = 0;
        *((_QWORD *)result + 1) = v19;
      }
      else
      {
        if (*(_BYTE *)(a2 + 16))
        {
          v67 = &WebCore::staticCSSValuePool[4124];
          *v67 += 2;
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 20), a1);
          v68 = v98;
          v69 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v69 = 2;
          v70 = *(unsigned __int8 *)(v69 + 6) >> 2;
          *(_BYTE *)(v69 + 7) = 1;
          *(_QWORD *)(v69 + 8) = v67;
          *(_QWORD *)(v69 + 16) = v68;
          *(_WORD *)(v69 + 4) = -18432;
          *(_BYTE *)(v69 + 6) = (((v70 & 0x3F) << 18) | 0x1B800u) >> 16;
        }
        else
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 20), a1);
          v69 = (uint64_t)v98;
        }
        if (*(_BYTE *)(a2 + 36))
        {
          v78 = &WebCore::staticCSSValuePool[4108];
          *v78 += 2;
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 40), a1);
          v79 = v98;
          v80 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v80 = 2;
          v81 = *(unsigned __int8 *)(v80 + 6) >> 2;
          *(_BYTE *)(v80 + 7) = 1;
          *(_QWORD *)(v80 + 8) = v78;
          *(_QWORD *)(v80 + 16) = v79;
          *(_WORD *)(v80 + 4) = -18432;
          *(_BYTE *)(v80 + 6) = (((v81 & 0x3F) << 18) | 0x1B800u) >> 16;
        }
        else
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 40), a1);
          v80 = (uint64_t)v98;
        }
        result = (WTF *)WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)result = 2;
        v82 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = -12288;
        *((_BYTE *)result + 6) = v82 & 0xFC;
        *((_QWORD *)result + 1) = v19;
        *((_QWORD *)result + 2) = v69;
        *((_QWORD *)result + 3) = v80;
      }
      goto LABEL_126;
    case 3u:
      if (*(_BYTE *)(a2 + 64) == 2)
      {
        v28 = 0x1700u;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 64))
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 56), a1);
          v20 = v98;
          goto LABEL_136;
        }
        v28 = 0x16F8u;
      }
      v20 = (WTF *)&WebCore::staticCSSValuePool[v28];
      WebCore::staticCSSValuePool[v28] += 2;
LABEL_136:
      if (*(_BYTE *)(a2 + 76) == 2)
      {
        v72 = 0x1700u;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 76))
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 68), a1);
          v71 = v98;
          goto LABEL_142;
        }
        v72 = 0x16F8u;
      }
      v71 = (WTF *)&WebCore::staticCSSValuePool[v72];
      WebCore::staticCSSValuePool[v72] += 2;
LABEL_142:
      if (*(_BYTE *)(a2 + 12))
      {
        result = (WTF *)WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)result = 2;
        v73 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = -4096;
        *((_BYTE *)result + 6) = v73 & 0xFC;
        *((_QWORD *)result + 1) = v20;
        *((_QWORD *)result + 2) = v71;
        *((_QWORD *)result + 3) = 0;
        *((_QWORD *)result + 4) = 0;
      }
      else
      {
        if (*(_BYTE *)(a2 + 16))
        {
          v74 = &WebCore::staticCSSValuePool[4124];
          *v74 += 2;
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 20), a1);
          v75 = v98;
          v76 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v76 = 2;
          v77 = *(unsigned __int8 *)(v76 + 6) >> 2;
          *(_BYTE *)(v76 + 7) = 1;
          *(_QWORD *)(v76 + 8) = v74;
          *(_QWORD *)(v76 + 16) = v75;
          *(_WORD *)(v76 + 4) = -18432;
          *(_BYTE *)(v76 + 6) = (((v77 & 0x3F) << 18) | 0x1B800u) >> 16;
        }
        else
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 20), a1);
          v76 = (uint64_t)v98;
        }
        if (*(_BYTE *)(a2 + 36))
        {
          v83 = &WebCore::staticCSSValuePool[4108];
          *v83 += 2;
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 40), a1);
          v84 = v98;
          v85 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v85 = 2;
          v86 = *(unsigned __int8 *)(v85 + 6) >> 2;
          *(_BYTE *)(v85 + 7) = 1;
          *(_QWORD *)(v85 + 8) = v83;
          *(_QWORD *)(v85 + 16) = v84;
          *(_WORD *)(v85 + 4) = -18432;
          *(_BYTE *)(v85 + 6) = (((v86 & 0x3F) << 18) | 0x1B800u) >> 16;
        }
        else
        {
          WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)(a2 + 40), a1);
          v85 = (uint64_t)v98;
        }
        result = (WTF *)WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)result = 2;
        v87 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = -4096;
        *((_BYTE *)result + 6) = v87 & 0xFC;
        *((_QWORD *)result + 1) = v20;
        *((_QWORD *)result + 2) = v71;
        *((_QWORD *)result + 3) = v76;
        *((_QWORD *)result + 4) = v85;
      }
LABEL_126:
      *a4 = (uint64_t)result;
      return result;
    case 4u:
      v18 = *(unsigned __int8 *)(a2 + 24);
      LODWORD(v98) = 0;
      if (v18)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v18;
        BYTE5(v98) = *(_BYTE *)(a2 + 25);
        if ((v18 - 2) >= 9)
        {
          if (v18 == 11)
          {
            LODWORD(v98) = *(_DWORD *)(a2 + 20);
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 26);
          LODWORD(v98) = *(_DWORD *)(a2 + 20);
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(v103, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v39 = v103[0];
      v103[0] = 0;
      v40 = *(unsigned __int8 *)(a2 + 16);
      LODWORD(v98) = 0;
      if (v40)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v40;
        BYTE5(v98) = *(_BYTE *)(a2 + 17);
        if ((v40 - 2) >= 9)
        {
          if (v40 == 11)
          {
            LODWORD(v98) = *(_DWORD *)(a2 + 12);
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 18);
          LODWORD(v98) = *(_DWORD *)(a2 + 12);
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(&v94, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v41 = v94;
      v42 = *(unsigned __int8 *)(a2 + 32);
      LODWORD(v98) = 0;
      if (v42)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v42;
        BYTE5(v98) = *(_BYTE *)(a2 + 33);
        if ((v42 - 2) >= 9)
        {
          if (v42 == 11)
          {
            LODWORD(v98) = *(_DWORD *)(a2 + 28);
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 34);
          LODWORD(v98) = *(_DWORD *)(a2 + 28);
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(&v93, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v43 = v93;
      v44 = *(unsigned __int8 *)(a2 + 40);
      LODWORD(v98) = 0;
      if (v44)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v44;
        BYTE5(v98) = *(_BYTE *)(a2 + 41);
        if ((v44 - 2) >= 9)
        {
          if (v44 == 11)
          {
            LODWORD(v98) = *(_DWORD *)(a2 + 36);
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 42);
          LODWORD(v98) = *(_DWORD *)(a2 + 36);
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(&v92, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v45 = v92;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v98, &v101, a2 + 44);
      v46 = v98;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v91, &v101, a2 + 60);
      v47 = v91;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v90, &v101, a2 + 76);
      v48 = v90;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()(&v89, &v101, a2 + 92);
      v49 = v89;
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x48);
      *(_DWORD *)result = 2;
      v50 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      *((_WORD *)result + 2) = 20480;
      *((_BYTE *)result + 6) = (v50 | 0x10000u) >> 16;
      *((_QWORD *)result + 1) = v39;
      *((_QWORD *)result + 2) = v41;
      *((_QWORD *)result + 3) = v43;
      goto LABEL_115;
    case 5u:
      v22 = *(unsigned __int8 *)(a2 + 16);
      LODWORD(v98) = 0;
      if (v22)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v22;
        BYTE5(v98) = *(_BYTE *)(a2 + 17);
        if ((v22 - 2) >= 9)
        {
          if (v22 == 11)
          {
            LODWORD(v98) = *(_DWORD *)(a2 + 12);
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 18);
          LODWORD(v98) = *(_DWORD *)(a2 + 12);
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(&v94, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v51 = v94;
      v94 = 0;
      if (*(_BYTE *)(a2 + 24))
      {
        if (*(_BYTE *)(a2 + 24) == 3)
        {
          v52 = *(float *)(a2 + 20);
          if (!*(_BYTE *)(a2 + 26))
            v52 = (float)SLODWORD(v52);
          *(float *)v103 = 100.0 - v52;
          WORD2(v103[0]) = 3;
          BYTE6(v103[0]) = 1;
        }
        else
        {
          LODWORD(v98) = 100;
          WORD2(v98) = 3;
          BYTE6(v98) = 0;
          WebCore::makeCalculated((uint64_t)v103, 45, (unsigned __int8 *)&v98, (unsigned __int8 *)(a2 + 20));
          if (BYTE4(v98) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
          }
        }
        WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)v103, a1);
        v53 = v98;
        if (BYTE4(v103[0]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v103[0]));
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
        LODWORD(v98) = 0;
        WebCore::CSSPrimitiveValue::create(v103, (WebCore::CSSPrimitiveValue *)&v98, v102);
        if (BYTE4(v98) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
        }
        v53 = (WTF *)v103[0];
      }
      if (*(_BYTE *)(a2 + 32))
      {
        if (*(_BYTE *)(a2 + 32) == 3)
        {
          v54 = *(float *)(a2 + 28);
          if (!*(_BYTE *)(a2 + 34))
            v54 = (float)SLODWORD(v54);
          *(float *)v103 = 100.0 - v54;
          WORD2(v103[0]) = 3;
          BYTE6(v103[0]) = 1;
        }
        else
        {
          LODWORD(v98) = 100;
          WORD2(v98) = 3;
          BYTE6(v98) = 0;
          WebCore::makeCalculated((uint64_t)v103, 45, (unsigned __int8 *)&v98, (unsigned __int8 *)(a2 + 28));
          if (BYTE4(v98) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
          }
        }
        WebCore::CSSPrimitiveValue::create((int **)&v98, (WebCore::CSSPrimitiveValue *)v103, a1);
        v55 = v98;
        if (BYTE4(v103[0]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v103[0]));
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
        LODWORD(v98) = 0;
        WebCore::CSSPrimitiveValue::create(v103, (WebCore::CSSPrimitiveValue *)&v98, v102);
        if (BYTE4(v98) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
        }
        v55 = (WTF *)v103[0];
      }
      v56 = *(unsigned __int8 *)(a2 + 40);
      LODWORD(v98) = 0;
      if (v56)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v56;
        BYTE5(v98) = *(_BYTE *)(a2 + 41);
        if ((v56 - 2) >= 9)
        {
          if (v56 == 11)
          {
            LODWORD(v98) = *(_DWORD *)(a2 + 36);
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 42);
          LODWORD(v98) = *(_DWORD *)(a2 + 36);
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(v103, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v45 = v103[0];
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v98, &v101, a2 + 44);
      v46 = v98;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v93, &v101, a2 + 60);
      v47 = v93;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v92, &v101, a2 + 76);
      v48 = v92;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v91, &v101, a2 + 92);
      v49 = (uint64_t)v91;
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x48);
      *(_DWORD *)result = 2;
      v57 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      *((_WORD *)result + 2) = 20480;
      *((_BYTE *)result + 6) = (v57 | 0x10000u) >> 16;
      *((_QWORD *)result + 1) = v51;
      *((_QWORD *)result + 2) = v53;
      *((_QWORD *)result + 3) = v55;
LABEL_115:
      *((_QWORD *)result + 4) = v45;
      *((_QWORD *)result + 5) = v46;
      goto LABEL_125;
    case 6u:
      v23 = (_DWORD *)(a2 + 20);
      v24 = *(unsigned __int8 *)(a2 + 24);
      LODWORD(v98) = 0;
      if (v24)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v24;
        BYTE5(v98) = *(_BYTE *)(a2 + 25);
        if ((v24 - 2) >= 9)
        {
          if (v24 == 11)
          {
            LODWORD(v98) = *v23;
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 26);
          LODWORD(v98) = *v23;
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(v103, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v58 = v103[0];
      v59 = (_DWORD *)(a2 + 12);
      WebCore::convertTo100PercentMinusLengthSum((unsigned __int8 *)(a2 + 12), (const WebCore::Length *)(a2 + 28), (uint64_t)&v98);
      WebCore::CSSPrimitiveValue::create(&v94, (WebCore::CSSPrimitiveValue *)&v98, a1);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v60 = v94;
      WebCore::convertTo100PercentMinusLengthSum((unsigned __int8 *)(a2 + 20), (const WebCore::Length *)(a2 + 36), (uint64_t)&v98);
      WebCore::CSSPrimitiveValue::create(&v93, (WebCore::CSSPrimitiveValue *)&v98, a1);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v61 = v93;
      v62 = *(unsigned __int8 *)(a2 + 16);
      LODWORD(v98) = 0;
      if (v62)
      {
        BYTE6(v98) = 0;
        BYTE4(v98) = v62;
        BYTE5(v98) = *(_BYTE *)(a2 + 17);
        if ((v62 - 2) >= 9)
        {
          if (v62 == 11)
          {
            LODWORD(v98) = *v59;
            WebCore::Length::ref((int *)&v98);
          }
        }
        else
        {
          BYTE6(v98) = *(_BYTE *)(a2 + 18);
          LODWORD(v98) = *v59;
        }
      }
      else
      {
        WORD2(v98) = 3;
        BYTE6(v98) = 0;
      }
      WebCore::CSSPrimitiveValue::create(&v92, (WebCore::CSSPrimitiveValue *)&v98, v102);
      if (BYTE4(v98) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98);
      }
      v63 = v92;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v98, &v101, a2 + 44);
      v64 = v98;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v91, &v101, a2 + 60);
      v47 = v91;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()((uint64_t *)&v90, &v101, a2 + 76);
      v48 = v90;
      WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()(&v89, &v101, a2 + 92);
      v49 = v89;
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x48);
      *(_DWORD *)result = 2;
      v65 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      *((_WORD *)result + 2) = 20480;
      *((_BYTE *)result + 6) = (v65 | 0x10000u) >> 16;
      *((_QWORD *)result + 1) = v58;
      *((_QWORD *)result + 2) = v60;
      *((_QWORD *)result + 3) = v61;
      *((_QWORD *)result + 4) = v63;
      *((_QWORD *)result + 5) = v64;
LABEL_125:
      *((_QWORD *)result + 6) = v47;
      *((_QWORD *)result + 7) = v48;
      *((_QWORD *)result + 8) = v49;
      goto LABEL_126;
    default:
      __break(0xC471u);
      JUMPOUT(0x19578156CLL);
  }
}

WTF *WebCore::CSSPolygonValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *result;
  int v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[32];

  v6 = WTF::fastCompactMalloc((WTF *)0x40);
  v16 = (WTF *)v18;
  v17 = 4;
  v7 = *(void **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v8 = *(unsigned int *)(a1 + 12);
    memcpy(v18, v7, 8 * v8);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    v16 = (WTF *)v7;
    v15 = *(_DWORD *)(a1 + 8);
    LODWORD(v8) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = 4;
    LODWORD(v17) = v15;
  }
  *(_DWORD *)(a1 + 12) = 0;
  HIDWORD(v17) = v8;
  WebCore::CSSPolygonValue::CSSPolygonValue(v6, (uint64_t)&v16, a2);
  *a3 = v6;
  if (HIDWORD(v17))
  {
    v10 = v16;
    v11 = 8 * HIDWORD(v17);
    do
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
        else
          *v12 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  result = v16;
  if (v18 != (_BYTE *)v16 && v16 != 0)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

uint64_t WebCore::CSSInsetShapeValue::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t result;

  v18 = WTF::fastCompactMalloc((WTF *)0x48);
  result = WebCore::CSSInsetShapeValue::CSSInsetShapeValue(v18, a1, a2, a3, a4, a5, a6, a7, a8);
  *a9 = result;
  return result;
}

uint64_t WebCore::valueForBasicShape(WebCore::RenderStyle const&,WebCore::BasicShape const&,WebCore::SVGPathConversion)::$_1::operator()(uint64_t *a1, const WebCore::Length ***a2, uint64_t a3)
{
  const WebCore::Length **v6;
  int v7;
  int *v8;
  const WebCore::Length **v9;
  int v10;
  int *v11;
  uint64_t result;
  int v13;
  int *v14;
  int *v15;
  unsigned int v16;
  __int16 v17;
  char v18;

  v6 = *a2;
  v7 = *(unsigned __int8 *)(a3 + 4);
  v16 = 0;
  if (v7)
  {
    v18 = 0;
    LOBYTE(v17) = v7;
    HIBYTE(v17) = *(_BYTE *)(a3 + 5);
    if ((v7 - 2) >= 9)
    {
      if (v7 == 11)
      {
        v16 = *(_DWORD *)a3;
        WebCore::Length::ref((int *)&v16);
      }
    }
    else
    {
      v18 = *(_BYTE *)(a3 + 6);
      v16 = *(_DWORD *)a3;
    }
  }
  else
  {
    v17 = 3;
    v18 = 0;
  }
  WebCore::CSSPrimitiveValue::create(&v15, (WebCore::CSSPrimitiveValue *)&v16, *v6);
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  v8 = v15;
  v9 = *a2;
  v10 = *(unsigned __int8 *)(a3 + 12);
  v16 = 0;
  if (v10)
  {
    v18 = 0;
    LOBYTE(v17) = v10;
    HIBYTE(v17) = *(_BYTE *)(a3 + 13);
    if ((v10 - 2) >= 9)
    {
      if (v10 == 11)
      {
        v16 = *(_DWORD *)(a3 + 8);
        WebCore::Length::ref((int *)&v16);
      }
    }
    else
    {
      v18 = *(_BYTE *)(a3 + 14);
      v16 = *(_DWORD *)(a3 + 8);
    }
  }
  else
  {
    v17 = 3;
    v18 = 0;
  }
  WebCore::CSSPrimitiveValue::create(&v14, (WebCore::CSSPrimitiveValue *)&v16, *v9);
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
  }
  v11 = v14;
  result = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)result = 2;
  v13 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_BYTE *)(result + 7) = 1;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = v11;
  *(_WORD *)(result + 4) = -18432;
  *(_BYTE *)(result + 6) = (v13 | 0x10000u) >> 16;
  *a1 = result;
  return result;
}

void WebCore::basicShapeForValue(WebCore *this@<X0>, const WebCore::CSSToLengthConversionData *a2@<X1>, float a3@<S0>, uint64_t *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  int v31;
  const WebCore::CSSValue *v32;
  WTF::StringImpl *v33;
  const WebCore::CSSValue *v34;
  WTF::StringImpl *v35;
  const WebCore::CSSValue *v36;
  WTF::StringImpl *v37;
  const WebCore::CSSValue *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  WebCore::CSSCalcValue **v44;
  WTF::StringImpl *v45;
  WebCore::CSSCalcValue **v46;
  WTF::StringImpl *v47;
  const WebCore::CSSValue *v48;
  WTF::StringImpl *v49;
  const WebCore::CSSValue *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  WebCore::CSSCalcValue ***v55;
  WebCore::CSSCalcValue **v56;
  unsigned int v57;
  WebCore::CSSCalcValue ***v58;
  WebCore::CSSCalcValue **v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  WebCore::CSSCalcValue **v62;
  WTF::StringImpl *v63;
  const WebCore::CSSValue *v64;
  WTF::StringImpl *v65;
  const WebCore::CSSValue *v66;
  WTF::StringImpl *v67;
  BOOL v68;
  WebCore::CSSCalcValue **v69;
  WTF::StringImpl *v70;
  WebCore::CSSCalcValue **v71;
  WTF::StringImpl *v72;
  WebCore::CSSCalcValue **v73;
  WTF::StringImpl *v74;
  WebCore::CSSCalcValue **v75;
  WTF::StringImpl *v76;
  const WebCore::CSSValue *v77;
  WTF::StringImpl *v78;
  const WebCore::CSSValue *v79;
  WTF::StringImpl *v80;
  const WebCore::CSSValue *v81;
  WTF::StringImpl *v82;
  const WebCore::CSSValue *v83;
  WTF::StringImpl *v84;
  const WebCore::CSSValue *v85;
  WTF::StringImpl *v86;
  const WebCore::CSSValue *v87;
  WTF::StringImpl *v88;
  const WebCore::CSSValue *v89;
  WTF::StringImpl *v90;
  const WebCore::CSSValue *v91;
  WTF::StringImpl *v92;
  const WebCore::CSSValue *v93;
  WTF::StringImpl *v94;
  const WebCore::CSSValue *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  unsigned int v98[2];
  unsigned int v99;
  __int16 v100;
  char v101;
  unsigned int v102;
  char v103;
  unsigned int v104;
  char v105;
  int v106[2];
  __int16 v107;
  char v108;
  _DWORD v109[2];
  int v110[2];
  __int16 v111;
  char v112;
  _DWORD v113[2];
  unsigned int v114;
  char v115;
  unsigned int v116;
  char v117;
  int v118[2];
  __int16 v119;
  char v120;
  _DWORD v121[2];
  int v122[2];
  __int16 v123;
  char v124;
  _DWORD v125[2];
  unsigned int v126;
  char v127;

  v8 = (*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800;
  if (v8 == 86016)
  {
    v9 = WTF::fastMalloc((WTF *)0x70);
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)v9 = off_1E3441898;
    *(_DWORD *)(v9 + 44) = 0;
    *(_DWORD *)(v9 + 47) = 0;
    *(_DWORD *)(v9 + 52) = 0;
    *(_DWORD *)(v9 + 55) = 0;
    *(_DWORD *)(v9 + 60) = 0;
    *(_DWORD *)(v9 + 63) = 0;
    *(_DWORD *)(v9 + 68) = 0;
    *(_DWORD *)(v9 + 71) = 0;
    *(_DWORD *)(v9 + 76) = 0;
    *(_DWORD *)(v9 + 79) = 0;
    *(_DWORD *)(v9 + 84) = 0;
    *(_DWORD *)(v9 + 87) = 0;
    *(_DWORD *)(v9 + 95) = 0;
    *(_DWORD *)(v9 + 92) = 0;
    *(_DWORD *)(v9 + 103) = 0;
    *(_DWORD *)(v9 + 100) = 0;
    *(_DWORD *)(v9 + 12) = 0;
    v10 = (unsigned int *)(v9 + 12);
    *(_DWORD *)(v9 + 20) = 0;
    v11 = (unsigned int *)(v9 + 20);
    *(_DWORD *)(v9 + 28) = 0;
    v12 = (unsigned int *)(v9 + 28);
    *(_DWORD *)(v9 + 36) = 0;
    v13 = (unsigned int *)(v9 + 36);
    *(_DWORD *)(v9 + 15) = 0;
    *(_DWORD *)(v9 + 23) = 0;
    *(_DWORD *)(v9 + 31) = 0;
    *(_DWORD *)(v9 + 39) = 0;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
    *(_DWORD *)v14 += 2;
    if ((v15 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195782B74);
    }
    v16 = v9;
    WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)v98, (WebCore::CSSCalcValue **)v14, this);
    if (v11 == v98)
    {
      if (LOBYTE(v98[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
      }
LABEL_9:
      if (*(_DWORD *)v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v14, v17);
      else
        *(_DWORD *)v14 -= 2;
      v20 = *((_QWORD *)a2 + 2);
      *(_DWORD *)v20 += 2;
      if (((*(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195782B94);
      }
      WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)v98, (WebCore::CSSCalcValue **)v20, this);
      if (v10 == v98)
      {
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
LABEL_18:
        if (*(_DWORD *)v20 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v20, v21);
        else
          *(_DWORD *)v20 -= 2;
        v24 = *((_QWORD *)a2 + 3);
        *(_DWORD *)v24 += 2;
        if (((*(unsigned __int16 *)(v24 + 4) | (*(unsigned __int8 *)(v24 + 6) << 16)) & 0x3F800) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195782BB4);
        }
        WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)v98, (WebCore::CSSCalcValue **)v24, this);
        if (v12 == v98)
        {
          if (LOBYTE(v98[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
          }
LABEL_27:
          if (*(_DWORD *)v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v24, v25);
          else
            *(_DWORD *)v24 -= 2;
          v28 = *((_QWORD *)a2 + 4);
          *(_DWORD *)v28 += 2;
          if (((*(unsigned __int16 *)(v28 + 4) | (*(unsigned __int8 *)(v28 + 6) << 16)) & 0x3F800) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195782BD4);
          }
          WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)v98, (WebCore::CSSCalcValue **)v28, this);
          if (v13 == v98)
          {
            if (LOBYTE(v98[1]) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
            }
            goto LABEL_36;
          }
          if (*(_BYTE *)(v16 + 40) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
          }
          v30 = LOBYTE(v98[1]);
          *(_WORD *)(v16 + 40) = v98[1];
          if (v30 - 2 >= 9)
          {
            if (v30 > 0xD)
              goto LABEL_35;
            if (((1 << v30) & 0x3003) != 0)
            {
              *v13 = 0;
              goto LABEL_35;
            }
            if (v30 != 11)
              goto LABEL_35;
            v43 = v98[0];
            v98[0] = 0;
          }
          else
          {
            v31 = BYTE2(v98[1]);
            *(_BYTE *)(v16 + 42) = BYTE2(v98[1]);
            if (v31)
            {
              *v13 = v98[0];
LABEL_35:
              LOBYTE(v98[1]) = 0;
LABEL_36:
              if (*(_DWORD *)v28 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v28, v29);
              else
                *(_DWORD *)v28 -= 2;
              v32 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 5);
              if (v32)
              {
                *(_DWORD *)v32 += 2;
                WebCore::convertToLengthSize((WebCore *)v98, this, v32);
                WebCore::BasicShapeInset::setTopLeftRadius(v16, (int *)v98);
                if (v100 == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v99);
                }
                if (LOBYTE(v98[1]) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
                }
                if (*(_DWORD *)v32 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v33);
                else
                  *(_DWORD *)v32 -= 2;
              }
              else
              {
                v98[0] = 0;
                LOWORD(v98[1]) = 4;
                BYTE2(v98[1]) = 0;
                v99 = 0;
                v100 = 4;
                v101 = 0;
                WebCore::BasicShapeInset::setTopLeftRadius(v16, (int *)v98);
                WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
              }
              v34 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 6);
              if (v34)
              {
                *(_DWORD *)v34 += 2;
                WebCore::convertToLengthSize((WebCore *)v98, this, v34);
                WebCore::BasicShapeInset::setTopRightRadius(v16, (int *)v98);
                if (v100 == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v99);
                }
                if (LOBYTE(v98[1]) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
                }
                if (*(_DWORD *)v34 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v35);
                else
                  *(_DWORD *)v34 -= 2;
              }
              else
              {
                v98[0] = 0;
                LOWORD(v98[1]) = 4;
                BYTE2(v98[1]) = 0;
                v99 = 0;
                v100 = 4;
                v101 = 0;
                WebCore::BasicShapeInset::setTopRightRadius(v16, (int *)v98);
                WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
              }
              v36 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 7);
              if (v36)
              {
                *(_DWORD *)v36 += 2;
                WebCore::convertToLengthSize((WebCore *)v98, this, v36);
                WebCore::BasicShapeInset::setBottomRightRadius(v16, (int *)v98);
                if (v100 == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v99);
                }
                if (LOBYTE(v98[1]) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
                }
                if (*(_DWORD *)v36 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v37);
                else
                  *(_DWORD *)v36 -= 2;
              }
              else
              {
                v98[0] = 0;
                LOWORD(v98[1]) = 4;
                BYTE2(v98[1]) = 0;
                v99 = 0;
                v100 = 4;
                v101 = 0;
                WebCore::BasicShapeInset::setBottomRightRadius(v16, (int *)v98);
                WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
              }
              v38 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 8);
              if (v38)
              {
                *(_DWORD *)v38 += 2;
                WebCore::convertToLengthSize((WebCore *)v98, this, v38);
                WebCore::BasicShapeInset::setBottomLeftRadius(v16, (int *)v98);
                if (v100 == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v99);
                }
                if (LOBYTE(v98[1]) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
                }
                goto LABEL_56;
              }
              v98[0] = 0;
              LOWORD(v98[1]) = 4;
              BYTE2(v98[1]) = 0;
              v99 = 0;
              v100 = 4;
              v101 = 0;
              WebCore::BasicShapeInset::setBottomLeftRadius(v16, (int *)v98);
              goto LABEL_254;
            }
            v43 = v98[0];
          }
          *v13 = v43;
          goto LABEL_35;
        }
        if (*(_BYTE *)(v16 + 32) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
        }
        v26 = LOBYTE(v98[1]);
        *(_WORD *)(v16 + 32) = v98[1];
        if (v26 - 2 >= 9)
        {
          if (v26 > 0xD)
            goto LABEL_26;
          if (((1 << v26) & 0x3003) != 0)
          {
            *v12 = 0;
            goto LABEL_26;
          }
          if (v26 != 11)
            goto LABEL_26;
          v42 = v98[0];
          v98[0] = 0;
        }
        else
        {
          v27 = BYTE2(v98[1]);
          *(_BYTE *)(v16 + 34) = BYTE2(v98[1]);
          if (v27)
          {
            *v12 = v98[0];
LABEL_26:
            LOBYTE(v98[1]) = 0;
            goto LABEL_27;
          }
          v42 = v98[0];
        }
        *v12 = v42;
        goto LABEL_26;
      }
      if (*(_BYTE *)(v16 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
      }
      v22 = LOBYTE(v98[1]);
      *(_WORD *)(v16 + 16) = v98[1];
      if (v22 - 2 >= 9)
      {
        if (v22 > 0xD)
          goto LABEL_17;
        if (((1 << v22) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_17;
        }
        if (v22 != 11)
          goto LABEL_17;
        v41 = v98[0];
        v98[0] = 0;
      }
      else
      {
        v23 = BYTE2(v98[1]);
        *(_BYTE *)(v16 + 18) = BYTE2(v98[1]);
        if (v23)
        {
          *v10 = v98[0];
LABEL_17:
          LOBYTE(v98[1]) = 0;
          goto LABEL_18;
        }
        v41 = v98[0];
      }
      *v10 = v41;
      goto LABEL_17;
    }
    if (*(_BYTE *)(v16 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v11);
    }
    v18 = LOBYTE(v98[1]);
    *(_WORD *)(v16 + 24) = v98[1];
    if (v18 - 2 >= 9)
    {
      if (v18 > 0xD)
        goto LABEL_8;
      if (((1 << v18) & 0x3003) != 0)
      {
        *v11 = 0;
        goto LABEL_8;
      }
      if (v18 != 11)
        goto LABEL_8;
      v40 = v98[0];
      v98[0] = 0;
    }
    else
    {
      v19 = BYTE2(v98[1]);
      *(_BYTE *)(v16 + 26) = BYTE2(v98[1]);
      if (v19)
      {
        *v11 = v98[0];
LABEL_8:
        LOBYTE(v98[1]) = 0;
        goto LABEL_9;
      }
      v40 = v98[0];
    }
    *v11 = v40;
    goto LABEL_8;
  }
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800u) >= 0x19000)
  {
    switch(v8)
    {
      case 0x20000:
        v16 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v16 + 8) = 1;
        *(_QWORD *)v16 = off_1E3441838;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_BYTE *)(v16 + 12) = *((_BYTE *)a2 + 56);
        if (*((_DWORD *)a2 + 2))
        {
          v53 = (char *)a2 + 16;
          v54 = -4;
          do
          {
            if (v54 < 0xFFFFFFFC)
              v55 = (WebCore::CSSCalcValue ***)(*((_QWORD *)a2 + 6) + 8 * v54);
            else
              v55 = (WebCore::CSSCalcValue ***)&v53[8 * v54 + 32];
            v56 = *v55;
            if (*v55)
              *(_DWORD *)v56 += 2;
            WebCore::convertToLength((WebCore *)&v104, this, v56);
            v57 = v54 + 5;
            if (*((_DWORD *)a2 + 2) <= v54 + 5)
            {
              v59 = 0;
            }
            else
            {
              if (v57 > 3)
                v58 = (WebCore::CSSCalcValue ***)(*((_QWORD *)a2 + 6) + 8 * (v54 + 1));
              else
                v58 = (WebCore::CSSCalcValue ***)&v53[8 * v57];
              v59 = *v58;
              if (*v58)
                *(_DWORD *)v59 += 2;
            }
            WebCore::convertToLength((WebCore *)&v102, this, v59);
            WebCore::BasicShapePolygon::appendPoint(v16, (unint64_t)&v104, (unint64_t)&v102);
            if (v103 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v102);
            }
            if (*(_DWORD *)v59 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v60);
            else
              *(_DWORD *)v59 -= 2;
            if (v105 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v104);
            }
            if (*(_DWORD *)v56 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v60);
            else
              *(_DWORD *)v56 -= 2;
            v61 = v54 + 6;
            v54 += 2;
          }
          while (v61 < *((_DWORD *)a2 + 2));
        }
        goto LABEL_58;
      case 0x1D000:
        WebCore::BasicShapeXywh::create((WebCore::BasicShapeXywh *)&v97);
        v16 = v97;
        v69 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 1);
        *(_DWORD *)v69 += 2;
        WebCore::convertToLength((WebCore *)v98, this, v69);
        WebCore::BasicShapeXywh::setInsetX((_BYTE *)v16, v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v69 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, v70);
        else
          *(_DWORD *)v69 -= 2;
        v71 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 2);
        *(_DWORD *)v71 += 2;
        WebCore::convertToLength((WebCore *)v98, this, v71);
        WebCore::BasicShapeXywh::setInsetY((_BYTE *)v16, v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v71 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, v72);
        else
          *(_DWORD *)v71 -= 2;
        v73 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 3);
        *(_DWORD *)v73 += 2;
        WebCore::convertToLength((WebCore *)v98, this, v73);
        WebCore::BasicShapeXywh::setWidth((_BYTE *)v16, v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v73 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v73, v74);
        else
          *(_DWORD *)v73 -= 2;
        v75 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 4);
        *(_DWORD *)v75 += 2;
        WebCore::convertToLength((WebCore *)v98, this, v75);
        WebCore::BasicShapeXywh::setHeight((_BYTE *)v16, v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v75 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v75, v76);
        else
          *(_DWORD *)v75 -= 2;
        v77 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 5);
        if (v77)
        {
          *(_DWORD *)v77 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v77);
          WebCore::BasicShapeInset::setTopLeftRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
          if (*(_DWORD *)v77 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, v78);
          else
            *(_DWORD *)v77 -= 2;
        }
        else
        {
          v98[0] = 0;
          LOWORD(v98[1]) = 4;
          BYTE2(v98[1]) = 0;
          v99 = 0;
          v100 = 4;
          v101 = 0;
          WebCore::BasicShapeInset::setTopLeftRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
        }
        v79 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 6);
        if (v79)
        {
          *(_DWORD *)v79 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v79);
          WebCore::BasicShapeInset::setTopRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
          if (*(_DWORD *)v79 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v79, v80);
          else
            *(_DWORD *)v79 -= 2;
        }
        else
        {
          v98[0] = 0;
          LOWORD(v98[1]) = 4;
          BYTE2(v98[1]) = 0;
          v99 = 0;
          v100 = 4;
          v101 = 0;
          WebCore::BasicShapeInset::setTopRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
        }
        v81 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 7);
        if (v81)
        {
          *(_DWORD *)v81 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v81);
          WebCore::BasicShapeInset::setBottomRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
          if (*(_DWORD *)v81 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v81, v82);
          else
            *(_DWORD *)v81 -= 2;
        }
        else
        {
          v98[0] = 0;
          LOWORD(v98[1]) = 4;
          BYTE2(v98[1]) = 0;
          v99 = 0;
          v100 = 4;
          v101 = 0;
          WebCore::BasicShapeInset::setBottomRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
        }
        v38 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 8);
        if (v38)
          goto LABEL_170;
        break;
      case 0x19000:
        WebCore::BasicShapeRect::create((WebCore::BasicShapeRect *)&v97);
        v16 = v97;
        v83 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 1);
        *(_DWORD *)v83 += 2;
        WebCore::convertToLengthOrAuto((WebCore *)v98, this, v83);
        WebCore::BasicShapeRect::setTop(v16, (uint64_t)v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v83 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v83, v84);
        else
          *(_DWORD *)v83 -= 2;
        v85 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 2);
        *(_DWORD *)v85 += 2;
        WebCore::convertToLengthOrAuto((WebCore *)v98, this, v85);
        WebCore::BasicShapeRect::setRight(v16, (uint64_t)v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v85 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v85, v86);
        else
          *(_DWORD *)v85 -= 2;
        v87 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 3);
        *(_DWORD *)v87 += 2;
        WebCore::convertToLengthOrAuto((WebCore *)v98, this, v87);
        WebCore::BasicShapeRect::setBottom(v16, (uint64_t)v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v87 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v87, v88);
        else
          *(_DWORD *)v87 -= 2;
        v89 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 4);
        *(_DWORD *)v89 += 2;
        WebCore::convertToLengthOrAuto((WebCore *)v98, this, v89);
        WebCore::BasicShapeRect::setLeft(v16, (uint64_t)v98);
        if (LOBYTE(v98[1]) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v98[0]);
        }
        if (*(_DWORD *)v89 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v89, v90);
        else
          *(_DWORD *)v89 -= 2;
        v91 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 5);
        if (v91)
        {
          *(_DWORD *)v91 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v91);
          WebCore::BasicShapeInset::setTopLeftRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
          if (*(_DWORD *)v91 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, v92);
          else
            *(_DWORD *)v91 -= 2;
        }
        else
        {
          v98[0] = 0;
          LOWORD(v98[1]) = 4;
          BYTE2(v98[1]) = 0;
          v99 = 0;
          v100 = 4;
          v101 = 0;
          WebCore::BasicShapeInset::setTopLeftRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
        }
        v93 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 6);
        if (v93)
        {
          *(_DWORD *)v93 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v93);
          WebCore::BasicShapeInset::setTopRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
          if (*(_DWORD *)v93 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v93, v94);
          else
            *(_DWORD *)v93 -= 2;
        }
        else
        {
          v98[0] = 0;
          LOWORD(v98[1]) = 4;
          BYTE2(v98[1]) = 0;
          v99 = 0;
          v100 = 4;
          v101 = 0;
          WebCore::BasicShapeInset::setTopRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
        }
        v95 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 7);
        if (v95)
        {
          *(_DWORD *)v95 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v95);
          WebCore::BasicShapeInset::setBottomRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
          if (*(_DWORD *)v95 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v95, v96);
          else
            *(_DWORD *)v95 -= 2;
        }
        else
        {
          v98[0] = 0;
          LOWORD(v98[1]) = 4;
          BYTE2(v98[1]) = 0;
          v99 = 0;
          v100 = 4;
          v101 = 0;
          WebCore::BasicShapeInset::setBottomRightRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
        }
        v38 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 8);
        if (v38)
        {
LABEL_170:
          *(_DWORD *)v38 += 2;
          WebCore::convertToLengthSize((WebCore *)v98, this, v38);
          WebCore::BasicShapeInset::setBottomLeftRadius(v16, (int *)v98);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
LABEL_56:
          if (*(_DWORD *)v38 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v39);
          else
            *(_DWORD *)v38 -= 2;
          goto LABEL_58;
        }
        break;
      default:
        goto LABEL_230;
    }
    v98[0] = 0;
    LOWORD(v98[1]) = 4;
    BYTE2(v98[1]) = 0;
    v99 = 0;
    v100 = 4;
    v101 = 0;
    WebCore::BasicShapeInset::setBottomLeftRadius(v16, (int *)v98);
LABEL_254:
    WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v98);
    goto LABEL_58;
  }
  if (v8 == 53248)
  {
    WebCore::BasicShapeCircle::create((WebCore::BasicShapeCircle *)v98);
    v16 = *(_QWORD *)v98;
    v62 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 1);
    if (v62)
      *(_DWORD *)v62 += 2;
    WebCore::cssValueToBasicShapeRadius((WebCore *)&v126, this, v62);
    WebCore::BasicShapeCircle::setRadius((_BYTE *)v16, &v126);
    if (v127 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v126);
    }
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, v63);
      else
        *(_DWORD *)v62 -= 2;
    }
    v64 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 2);
    if (v64)
    {
      *(_DWORD *)v64 += 2;
      WebCore::convertToCenterCoordinate((WebCore *)v122, this, v64);
      WebCore::BasicShapeCircle::setCenterX(v16, (uint64_t)v122);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v122);
      if (*(_DWORD *)v64 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v65);
      else
        *(_DWORD *)v64 -= 2;
    }
    else
    {
      LOBYTE(v122[0]) = 0;
      v123 = 3;
      v124 = 0;
      v122[1] = 50;
      v125[0] = 0;
      *(_DWORD *)((char *)v125 + 3) = 0;
      WebCore::BasicShapeCenterCoordinate::updateComputedLength(v122);
      WebCore::BasicShapeCircle::setCenterX(v16, (uint64_t)v122);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v122);
    }
    v66 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 3);
    if (v66)
    {
      *(_DWORD *)v66 += 2;
      WebCore::convertToCenterCoordinate((WebCore *)v118, this, v66);
      WebCore::BasicShapeCircle::setCenterY(v16, (uint64_t)v118);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v118);
      if (*(_DWORD *)v66 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v67);
      else
        *(_DWORD *)v66 -= 2;
    }
    else
    {
      LOBYTE(v118[0]) = 0;
      v119 = 3;
      v120 = 0;
      v118[1] = 50;
      v121[0] = 0;
      *(_DWORD *)((char *)v121 + 3) = 0;
      WebCore::BasicShapeCenterCoordinate::updateComputedLength(v118);
      WebCore::BasicShapeCircle::setCenterY(v16, (uint64_t)v118);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v118);
    }
    if (!*((_QWORD *)a2 + 2))
    {
      v52 = *((_QWORD *)a2 + 3);
      goto LABEL_172;
    }
LABEL_145:
    v68 = 0;
LABEL_146:
    *(_BYTE *)(v16 + 12) = v68;
LABEL_58:
    *a4 = v16;
    return;
  }
  if (v8 == 61440)
  {
    WebCore::BasicShapeEllipse::create((WebCore::BasicShapeEllipse *)v98);
    v16 = *(_QWORD *)v98;
    v44 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 1);
    if (v44)
      *(_DWORD *)v44 += 2;
    WebCore::cssValueToBasicShapeRadius((WebCore *)&v116, this, v44);
    WebCore::BasicShapeCircle::setRadius((_BYTE *)v16, &v116);
    if (v117 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v116);
    }
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v45);
      else
        *(_DWORD *)v44 -= 2;
    }
    v46 = (WebCore::CSSCalcValue **)*((_QWORD *)a2 + 2);
    if (v46)
      *(_DWORD *)v46 += 2;
    WebCore::cssValueToBasicShapeRadius((WebCore *)&v114, this, v46);
    WebCore::BasicShapeEllipse::setRadiusY((_BYTE *)v16, &v114);
    if (v115 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v114);
    }
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, v47);
      else
        *(_DWORD *)v46 -= 2;
    }
    v48 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 3);
    if (v48)
    {
      *(_DWORD *)v48 += 2;
      WebCore::convertToCenterCoordinate((WebCore *)v110, this, v48);
      WebCore::BasicShapeCircle::setCenterX(v16, (uint64_t)v110);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v110);
      if (*(_DWORD *)v48 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, v49);
      else
        *(_DWORD *)v48 -= 2;
    }
    else
    {
      LOBYTE(v110[0]) = 0;
      v111 = 3;
      v112 = 0;
      v110[1] = 50;
      v113[0] = 0;
      *(_DWORD *)((char *)v113 + 3) = 0;
      WebCore::BasicShapeCenterCoordinate::updateComputedLength(v110);
      WebCore::BasicShapeCircle::setCenterX(v16, (uint64_t)v110);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v110);
    }
    v50 = (const WebCore::CSSValue *)*((_QWORD *)a2 + 4);
    if (v50)
    {
      *(_DWORD *)v50 += 2;
      WebCore::convertToCenterCoordinate((WebCore *)v106, this, v50);
      WebCore::BasicShapeCircle::setCenterY(v16, (uint64_t)v106);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v106);
      if (*(_DWORD *)v50 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v51);
      else
        *(_DWORD *)v50 -= 2;
    }
    else
    {
      LOBYTE(v106[0]) = 0;
      v107 = 3;
      v108 = 0;
      v106[1] = 50;
      v109[0] = 0;
      *(_DWORD *)((char *)v109 + 3) = 0;
      WebCore::BasicShapeCenterCoordinate::updateComputedLength(v106);
      WebCore::BasicShapeCircle::setCenterY(v16, (uint64_t)v106);
      WebCore::FillSize::~FillSize((WebCore::FillSize *)v106);
    }
    if (!*((_QWORD *)a2 + 3))
    {
      v52 = *((_QWORD *)a2 + 4);
LABEL_172:
      v68 = v52 == 0;
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  if (v8 != 92160)
  {
LABEL_230:
    __break(0xC471u);
    JUMPOUT(0x195782AB0);
  }
  WebCore::basicShapePathForValue((uint64_t)a2, a4, a3);
}

int *WebCore::BasicShapeCircle::create(WebCore::BasicShapeCircle *this)
{
  uint64_t v2;
  int *result;

  v2 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v2 + 8) = 1;
  *(_BYTE *)(v2 + 12) = 0;
  *(_QWORD *)v2 = off_1E3441768;
  *(_BYTE *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = 0;
  *(_WORD *)(v2 + 24) = 13;
  *(_BYTE *)(v2 + 26) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 31) = 0;
  WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v2 + 16));
  *(_BYTE *)(v2 + 36) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 44) = 13;
  *(_BYTE *)(v2 + 46) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 51) = 0;
  result = WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v2 + 36));
  *(_DWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 60) = 13;
  *(_BYTE *)(v2 + 62) = 0;
  *(_BYTE *)(v2 + 64) = 1;
  *(_QWORD *)this = v2;
  return result;
}

_BYTE *WebCore::BasicShapeCircle::setRadius(_BYTE *result, _BYTE *a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;

  v2 = result + 56;
  if (result + 56 != a2)
  {
    if (result[60] == 11)
    {
      v7 = result;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result + 56;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      result = v7;
      a2 = v8;
    }
    v3 = a2[4];
    result[60] = v3;
    result[61] = a2[5];
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = a2[6];
      result[62] = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_6:
        a2[4] = 0;
        goto LABEL_7;
      }
      v5 = *(_DWORD *)a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
LABEL_7:
  result[64] = a2[8];
  return result;
}

void WebCore::cssValueToBasicShapeRadius(WebCore *this, const WebCore::CSSToLengthConversionData *a2, WebCore::CSSCalcValue **a3)
{
  int v4;
  int v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned __int8 v9;
  char v10;
  char v11;

  if (!a3)
    goto LABEL_14;
  v4 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
  if ((v4 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19578385CLL);
  }
  if ((v4 & 0x3F87F) != 0x50)
    goto LABEL_4;
  v6 = *((unsigned __int16 *)a3 + 4);
  if (v6 == 700)
  {
    *(_DWORD *)this = 0;
    *((_WORD *)this + 2) = 13;
    *((_BYTE *)this + 6) = 0;
    v7 = 2;
    goto LABEL_15;
  }
  if (v6 == 698)
  {
LABEL_14:
    *(_DWORD *)this = 0;
    *((_WORD *)this + 2) = 13;
    *((_BYTE *)this + 6) = 0;
    v7 = 1;
LABEL_15:
    *((_BYTE *)this + 8) = v7;
    return;
  }
LABEL_4:
  WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)&v8, a3, a2);
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 6) = 0;
  v5 = v9;
  *((_BYTE *)this + 4) = v9;
  *((_BYTE *)this + 5) = v10;
  if ((v5 - 2) >= 9)
  {
    if (v5 == 11)
    {
      *(_DWORD *)this = v8;
      WebCore::Length::ref((int *)this);
      v5 = v9;
    }
    *((_BYTE *)this + 8) = 0;
    if (v5 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v8);
    }
  }
  else
  {
    *((_BYTE *)this + 6) = v11;
    *(_DWORD *)this = v8;
    *((_BYTE *)this + 8) = 0;
  }
}

uint64_t WebCore::BasicShapeCircle::setCenterX(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(result + 16) = *(_BYTE *)a2;
  if (result + 16 != a2)
  {
    if (*(_BYTE *)(result + 24) == 11)
    {
      v10 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v8 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 20));
      result = v8;
      a2 = v10;
    }
    v2 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(result + 24) = v2;
    *(_BYTE *)(result + 25) = *(_BYTE *)(a2 + 9);
    if (v2 - 2 < 9)
    {
      v3 = *(unsigned __int8 *)(a2 + 10);
      *(_BYTE *)(result + 26) = v3;
      if (v3)
      {
        *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 4);
        goto LABEL_6;
      }
      v6 = *(_DWORD *)(a2 + 4);
      goto LABEL_13;
    }
    if (v2 <= 0xD)
    {
      if (((1 << v2) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 20) = 0;
      }
      else if (v2 == 11)
      {
        v6 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = 0;
LABEL_13:
        *(_DWORD *)(result + 20) = v6;
      }
    }
LABEL_6:
    *(_BYTE *)(a2 + 8) = 0;
    if (*(_BYTE *)(result + 32) == 11)
    {
      v11 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 28));
      result = v9;
      a2 = v11;
    }
    v4 = *(unsigned __int8 *)(a2 + 16);
    *(_BYTE *)(result + 32) = v4;
    *(_BYTE *)(result + 33) = *(_BYTE *)(a2 + 17);
    if (v4 - 2 >= 9)
    {
      if (v4 > 0xD)
        goto LABEL_10;
      if (((1 << v4) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 28) = 0;
        goto LABEL_10;
      }
      if (v4 != 11)
        goto LABEL_10;
      v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = 0;
    }
    else
    {
      v5 = *(unsigned __int8 *)(a2 + 18);
      *(_BYTE *)(result + 34) = v5;
      if (v5)
      {
        *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 12);
LABEL_10:
        *(_BYTE *)(a2 + 16) = 0;
        return result;
      }
      v7 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(result + 28) = v7;
    goto LABEL_10;
  }
  return result;
}

int *WebCore::convertToCenterCoordinate(WebCore *this, const WebCore::CSSToLengthConversionData *a2, const WebCore::CSSValue *a3)
{
  int v4;
  unint64_t v5;
  char v6;
  int v7;
  char v8;
  char v9;
  char v10;
  _DWORD *v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;

  if (!a3)
    goto LABEL_18;
  v4 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
  if ((v4 & 0x3F800) != 0)
  {
    if ((v4 & 0x3F800) != 0x1B800)
    {
      __break(0xC471u);
      JUMPOUT(0x195783C7CLL);
    }
    v12 = 0;
    v14 = *((_QWORD *)a3 + 1);
    if (v14 && ((*(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16)) & 0x3F87F) == 0x50)
      v12 = *(unsigned __int16 *)(v14 + 8);
    v15 = *((_QWORD *)a3 + 2);
    *(_DWORD *)v15 += 2;
    if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195783CF4);
    }
    WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)&v21, (WebCore::CSSCalcValue **)v15, a2);
    v7 = v22;
    v8 = v23;
    if (v22 - 2 >= 9)
    {
      v9 = 0;
      if (v22 == 11)
      {
        v5 = v21;
        v21 = 0;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v9 = v24;
      v5 = v21;
    }
    v22 = 0;
    if (*(_DWORD *)v15 == 2)
    {
      v16 = v15;
      v19 = v5;
      v20 = v23;
      v17 = v7;
      v18 = v9;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v16, (WTF::StringImpl *)v5);
      v9 = v18;
      v5 = v19;
      v8 = v20;
      v7 = v17;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    if ((*((_WORD *)a3 + 2) & 0x7F) != 0x50)
    {
      WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)&v21, (WebCore::CSSCalcValue **)a3, a2);
      v7 = v22;
      v8 = v23;
      if (v22 - 2 >= 9)
      {
        if (v22 != 11)
        {
          v9 = 0;
          LODWORD(v5) = 0;
          goto LABEL_9;
        }
        v9 = 0;
      }
      else
      {
        v9 = v24;
      }
      LODWORD(v5) = v21;
LABEL_9:
      v10 = 0;
      goto LABEL_10;
    }
    if ((v4 & 0x3F87F) != 0x50)
    {
      LODWORD(v5) = 0;
      v6 = 4;
LABEL_19:
      *(_BYTE *)this = 0;
      v11 = (_DWORD *)((char *)this + 4);
      *((_BYTE *)this + 8) = v6;
      *(_WORD *)((char *)this + 9) = 0;
      goto LABEL_20;
    }
    v9 = 0;
    v8 = 0;
    v5 = 0;
    v12 = *((unsigned __int16 *)a3 + 4);
    v7 = 4;
  }
  if (v12 != 255)
  {
    if (v12 != 260)
    {
      if (v12 == 259)
        goto LABEL_16;
      goto LABEL_9;
    }
    if (v7 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5);
    }
LABEL_18:
    LODWORD(v5) = 50;
    v6 = 3;
    goto LABEL_19;
  }
LABEL_16:
  v10 = 1;
LABEL_10:
  *((_DWORD *)this + 1) = 0;
  v11 = (_DWORD *)((char *)this + 4);
  *(_BYTE *)this = v10;
  *((_BYTE *)this + 10) = 0;
  *((_BYTE *)this + 8) = v7;
  *((_BYTE *)this + 9) = v8;
  if ((v7 - 2) >= 9)
  {
    if (v7 != 11)
      goto LABEL_21;
  }
  else
  {
    *((_BYTE *)this + 10) = v9;
  }
LABEL_20:
  *v11 = v5;
LABEL_21:
  *(_DWORD *)((char *)this + 15) = 0;
  *((_DWORD *)this + 3) = 0;
  return WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)this);
}

uint64_t WebCore::BasicShapeCircle::setCenterY(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(result + 36) = *(_BYTE *)a2;
  if (result + 36 != a2)
  {
    if (*(_BYTE *)(result + 44) == 11)
    {
      v10 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v8 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 40));
      result = v8;
      a2 = v10;
    }
    v2 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(result + 44) = v2;
    *(_BYTE *)(result + 45) = *(_BYTE *)(a2 + 9);
    if (v2 - 2 < 9)
    {
      v3 = *(unsigned __int8 *)(a2 + 10);
      *(_BYTE *)(result + 46) = v3;
      if (v3)
      {
        *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 4);
        goto LABEL_6;
      }
      v6 = *(_DWORD *)(a2 + 4);
      goto LABEL_13;
    }
    if (v2 <= 0xD)
    {
      if (((1 << v2) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 40) = 0;
      }
      else if (v2 == 11)
      {
        v6 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = 0;
LABEL_13:
        *(_DWORD *)(result + 40) = v6;
      }
    }
LABEL_6:
    *(_BYTE *)(a2 + 8) = 0;
    if (*(_BYTE *)(result + 52) == 11)
    {
      v11 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 48));
      result = v9;
      a2 = v11;
    }
    v4 = *(unsigned __int8 *)(a2 + 16);
    *(_BYTE *)(result + 52) = v4;
    *(_BYTE *)(result + 53) = *(_BYTE *)(a2 + 17);
    if (v4 - 2 >= 9)
    {
      if (v4 > 0xD)
        goto LABEL_10;
      if (((1 << v4) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 48) = 0;
        goto LABEL_10;
      }
      if (v4 != 11)
        goto LABEL_10;
      v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = 0;
    }
    else
    {
      v5 = *(unsigned __int8 *)(a2 + 18);
      *(_BYTE *)(result + 54) = v5;
      if (v5)
      {
        *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 12);
LABEL_10:
        *(_BYTE *)(a2 + 16) = 0;
        return result;
      }
      v7 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(result + 48) = v7;
    goto LABEL_10;
  }
  return result;
}

int *WebCore::BasicShapeEllipse::create(WebCore::BasicShapeEllipse *this)
{
  uint64_t v2;
  int *result;

  v2 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v2 + 8) = 1;
  *(_BYTE *)(v2 + 12) = 0;
  *(_QWORD *)v2 = off_1E34417D0;
  *(_BYTE *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = 0;
  *(_WORD *)(v2 + 24) = 13;
  *(_BYTE *)(v2 + 26) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 31) = 0;
  WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v2 + 16));
  *(_BYTE *)(v2 + 36) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 44) = 13;
  *(_BYTE *)(v2 + 46) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 51) = 0;
  result = WebCore::BasicShapeCenterCoordinate::updateComputedLength((int *)(v2 + 36));
  *(_DWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 60) = 13;
  *(_BYTE *)(v2 + 62) = 0;
  *(_BYTE *)(v2 + 64) = 1;
  *(_DWORD *)(v2 + 68) = 0;
  *(_WORD *)(v2 + 72) = 13;
  *(_BYTE *)(v2 + 74) = 0;
  *(_BYTE *)(v2 + 76) = 1;
  *(_QWORD *)this = v2;
  return result;
}

_BYTE *WebCore::BasicShapeEllipse::setRadiusY(_BYTE *result, _BYTE *a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;

  v2 = result + 68;
  if (result + 68 != a2)
  {
    if (result[72] == 11)
    {
      v7 = result;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result + 68;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      result = v7;
      a2 = v8;
    }
    v3 = a2[4];
    result[72] = v3;
    result[73] = a2[5];
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = a2[6];
      result[74] = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_6:
        a2[4] = 0;
        goto LABEL_7;
      }
      v5 = *(_DWORD *)a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
LABEL_7:
  result[76] = a2[8];
  return result;
}

unint64_t WebCore::BasicShapePolygon::appendPoint(unint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;

  v4 = result;
  v5 = (_QWORD *)(result + 16);
  v6 = *(unsigned int *)(result + 28);
  if ((_DWORD)v6 == *(_DWORD *)(result + 24))
  {
    result = WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 16, v6 + 1, a2);
    v7 = *(_QWORD *)(v4 + 16) + 8 * *(unsigned int *)(v4 + 28);
    *(_DWORD *)v7 = 0;
    *(_WORD *)(v7 + 5) = 0;
    v8 = (_BYTE *)(result + 4);
    v9 = *(unsigned __int8 *)(result + 4);
    *(_BYTE *)(v7 + 4) = v9;
    *(_BYTE *)(v7 + 5) = *(_BYTE *)(result + 5);
    if (v9 - 2 < 9)
    {
      v10 = *(unsigned __int8 *)(result + 6);
      *(_BYTE *)(v7 + 6) = v10;
      if (v10)
      {
        v11 = *(_DWORD *)result;
LABEL_8:
        *(_DWORD *)v7 = v11;
        goto LABEL_9;
      }
      v23 = *(_DWORD *)result;
      goto LABEL_20;
    }
    if (v9 > 0xD)
      goto LABEL_9;
    if (((1 << v9) & 0x3003) == 0)
    {
      if (v9 == 11)
      {
        v23 = *(_DWORD *)result;
        *(_DWORD *)result = 0;
LABEL_20:
        *(_DWORD *)v7 = v23;
        goto LABEL_9;
      }
      goto LABEL_9;
    }
LABEL_30:
    *(_DWORD *)v7 = 0;
    goto LABEL_9;
  }
  v7 = *v5 + 8 * v6;
  *(_DWORD *)v7 = 0;
  *(_WORD *)(v7 + 5) = 0;
  v8 = (_BYTE *)(a2 + 4);
  v12 = *(unsigned __int8 *)(a2 + 4);
  *(_BYTE *)(v7 + 4) = v12;
  *(_BYTE *)(v7 + 5) = *(_BYTE *)(a2 + 5);
  if (v12 - 2 < 9)
  {
    v13 = *(unsigned __int8 *)(a2 + 6);
    *(_BYTE *)(v7 + 6) = v13;
    if (v13)
    {
      v11 = *(_DWORD *)a2;
      goto LABEL_8;
    }
    v23 = *(_DWORD *)a2;
    goto LABEL_20;
  }
  if (v12 > 0xD)
    goto LABEL_9;
  if (((1 << v12) & 0x3003) != 0)
    goto LABEL_30;
  if (v12 == 11)
  {
    v23 = *(_DWORD *)a2;
    *(_DWORD *)a2 = 0;
    goto LABEL_20;
  }
LABEL_9:
  *v8 = 0;
  v14 = *(_DWORD *)(v4 + 24);
  v15 = (*(_DWORD *)(v4 + 28) + 1);
  *(_DWORD *)(v4 + 28) = v15;
  if ((_DWORD)v15 != v14)
  {
    v16 = *v5 + 8 * v15;
    *(_DWORD *)v16 = 0;
    *(_WORD *)(v16 + 5) = 0;
    v17 = (_BYTE *)(a3 + 4);
    v21 = *(unsigned __int8 *)(a3 + 4);
    *(_BYTE *)(v16 + 4) = v21;
    *(_BYTE *)(v16 + 5) = *(_BYTE *)(a3 + 5);
    if (v21 - 2 < 9)
    {
      v22 = *(unsigned __int8 *)(a3 + 6);
      *(_BYTE *)(v16 + 6) = v22;
      if (v22)
      {
        v20 = *(_DWORD *)a3;
        goto LABEL_16;
      }
      v24 = *(_DWORD *)a3;
LABEL_23:
      *(_DWORD *)v16 = v24;
      goto LABEL_17;
    }
    if (v21 > 0xD)
      goto LABEL_17;
    if (((1 << v21) & 0x3003) == 0)
    {
      if (v21 != 11)
        goto LABEL_17;
      v24 = *(_DWORD *)a3;
      *(_DWORD *)a3 = 0;
      goto LABEL_23;
    }
LABEL_37:
    *(_DWORD *)v16 = 0;
    goto LABEL_17;
  }
  result = WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v15 + 1, a3);
  v16 = *(_QWORD *)(v4 + 16) + 8 * *(unsigned int *)(v4 + 28);
  *(_DWORD *)v16 = 0;
  *(_WORD *)(v16 + 5) = 0;
  v17 = (_BYTE *)(result + 4);
  v18 = *(unsigned __int8 *)(result + 4);
  *(_BYTE *)(v16 + 4) = v18;
  *(_BYTE *)(v16 + 5) = *(_BYTE *)(result + 5);
  if (v18 - 2 >= 9)
  {
    if (v18 > 0xD)
      goto LABEL_17;
    if (((1 << v18) & 0x3003) == 0)
    {
      if (v18 != 11)
        goto LABEL_17;
      v24 = *(_DWORD *)result;
      *(_DWORD *)result = 0;
      goto LABEL_23;
    }
    goto LABEL_37;
  }
  v19 = *(unsigned __int8 *)(result + 6);
  *(_BYTE *)(v16 + 6) = v19;
  if (!v19)
  {
    v24 = *(_DWORD *)result;
    goto LABEL_23;
  }
  v20 = *(_DWORD *)result;
LABEL_16:
  *(_DWORD *)v16 = v20;
LABEL_17:
  *v17 = 0;
  ++*(_DWORD *)(v4 + 28);
  return result;
}

void WebCore::convertToLength(WebCore *this, const WebCore::CSSToLengthConversionData *a2, WebCore::CSSCalcValue **a3)
{
  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0)
    __break(0xC471u);
  else
    WebCore::CSSPrimitiveValue::convertToLength<27>((uint64_t)this, a3, a2);
}

uint64_t WebCore::BasicShapeInset::setTopLeftRadius(uint64_t result, int *a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;

  v2 = (int *)(result + 44);
  if ((int *)(result + 44) != a2)
  {
    if (*(_BYTE *)(result + 48) == 11)
    {
      v11 = result;
      v12 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = (int *)(result + 44);
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v9;
      result = v11;
      a2 = v12;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 48) = v3;
    *(_BYTE *)(result + 49) = *((_BYTE *)a2 + 5);
    if (v3 - 2 < 9)
    {
      v4 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 50) = v4;
      if (v4)
      {
        *v2 = *a2;
        goto LABEL_6;
      }
      v7 = *a2;
      goto LABEL_13;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
      }
      else if (v3 == 11)
      {
        v7 = *a2;
        *a2 = 0;
LABEL_13:
        *v2 = v7;
      }
    }
LABEL_6:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(result + 56) == 11)
    {
      v13 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v10 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 52));
      result = v10;
      a2 = v13;
    }
    v5 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 56) = v5;
    *(_BYTE *)(result + 57) = *((_BYTE *)a2 + 13);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_10;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 52) = 0;
        goto LABEL_10;
      }
      if (v5 != 11)
        goto LABEL_10;
      v8 = a2[2];
      a2[2] = 0;
    }
    else
    {
      v6 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(result + 58) = v6;
      if (v6)
      {
        *(_DWORD *)(result + 52) = a2[2];
LABEL_10:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v8 = a2[2];
    }
    *(_DWORD *)(result + 52) = v8;
    goto LABEL_10;
  }
  return result;
}

void WebCore::convertToLengthSize(WebCore *this, const WebCore::CSSToLengthConversionData *a2, const WebCore::CSSValue *a3)
{
  WebCore::CSSCalcValue **v6;
  WebCore *v7;
  WebCore::CSSCalcValue **v8;
  WTF::StringImpl *v9;

  if (a3)
  {
    if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x1B800
      || (v6 = (WebCore::CSSCalcValue **)*((_QWORD *)a3 + 1),
          *(_DWORD *)v6 += 2,
          WebCore::convertToLength(this, a2, v6),
          ((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0x1B800))
    {
      __break(0xC471u);
      JUMPOUT(0x195784690);
    }
    v7 = (WebCore *)((char *)this + 8);
    v8 = (WebCore::CSSCalcValue **)*((_QWORD *)a3 + 2);
    *(_DWORD *)v8 += 2;
    WebCore::convertToLength(v7, a2, v8);
    if (*(_DWORD *)v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v9);
    else
      *(_DWORD *)v8 -= 2;
    if (*(_DWORD *)v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v9);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    *(_DWORD *)this = 0;
    *((_WORD *)this + 2) = 4;
    *((_BYTE *)this + 6) = 0;
    *((_DWORD *)this + 2) = 0;
    *((_WORD *)this + 6) = 4;
    *((_BYTE *)this + 14) = 0;
  }
}

void WebCore::LengthSize::~LengthSize(WebCore::LengthSize *this)
{
  if (*((_BYTE *)this + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 2));
  }
  if (*((_BYTE *)this + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
  }
}

uint64_t WebCore::BasicShapeInset::setTopRightRadius(uint64_t result, int *a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;

  v2 = (int *)(result + 60);
  if ((int *)(result + 60) != a2)
  {
    if (*(_BYTE *)(result + 64) == 11)
    {
      v11 = result;
      v12 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = (int *)(result + 60);
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v9;
      result = v11;
      a2 = v12;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 64) = v3;
    *(_BYTE *)(result + 65) = *((_BYTE *)a2 + 5);
    if (v3 - 2 < 9)
    {
      v4 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 66) = v4;
      if (v4)
      {
        *v2 = *a2;
        goto LABEL_6;
      }
      v7 = *a2;
      goto LABEL_13;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
      }
      else if (v3 == 11)
      {
        v7 = *a2;
        *a2 = 0;
LABEL_13:
        *v2 = v7;
      }
    }
LABEL_6:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(result + 72) == 11)
    {
      v13 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v10 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 68));
      result = v10;
      a2 = v13;
    }
    v5 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 72) = v5;
    *(_BYTE *)(result + 73) = *((_BYTE *)a2 + 13);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_10;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 68) = 0;
        goto LABEL_10;
      }
      if (v5 != 11)
        goto LABEL_10;
      v8 = a2[2];
      a2[2] = 0;
    }
    else
    {
      v6 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(result + 74) = v6;
      if (v6)
      {
        *(_DWORD *)(result + 68) = a2[2];
LABEL_10:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v8 = a2[2];
    }
    *(_DWORD *)(result + 68) = v8;
    goto LABEL_10;
  }
  return result;
}

uint64_t WebCore::BasicShapeInset::setBottomRightRadius(uint64_t result, int *a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;

  v2 = (int *)(result + 76);
  if ((int *)(result + 76) != a2)
  {
    if (*(_BYTE *)(result + 80) == 11)
    {
      v11 = result;
      v12 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = (int *)(result + 76);
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v9;
      result = v11;
      a2 = v12;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 80) = v3;
    *(_BYTE *)(result + 81) = *((_BYTE *)a2 + 5);
    if (v3 - 2 < 9)
    {
      v4 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 82) = v4;
      if (v4)
      {
        *v2 = *a2;
        goto LABEL_6;
      }
      v7 = *a2;
      goto LABEL_13;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
      }
      else if (v3 == 11)
      {
        v7 = *a2;
        *a2 = 0;
LABEL_13:
        *v2 = v7;
      }
    }
LABEL_6:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(result + 88) == 11)
    {
      v13 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v10 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 84));
      result = v10;
      a2 = v13;
    }
    v5 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 88) = v5;
    *(_BYTE *)(result + 89) = *((_BYTE *)a2 + 13);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_10;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 84) = 0;
        goto LABEL_10;
      }
      if (v5 != 11)
        goto LABEL_10;
      v8 = a2[2];
      a2[2] = 0;
    }
    else
    {
      v6 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(result + 90) = v6;
      if (v6)
      {
        *(_DWORD *)(result + 84) = a2[2];
LABEL_10:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v8 = a2[2];
    }
    *(_DWORD *)(result + 84) = v8;
    goto LABEL_10;
  }
  return result;
}

uint64_t WebCore::BasicShapeInset::setBottomLeftRadius(uint64_t result, int *a2)
{
  int *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;

  v2 = (int *)(result + 92);
  if ((int *)(result + 92) != a2)
  {
    if (*(_BYTE *)(result + 96) == 11)
    {
      v11 = result;
      v12 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v9 = (int *)(result + 92);
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v9;
      result = v11;
      a2 = v12;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 96) = v3;
    *(_BYTE *)(result + 97) = *((_BYTE *)a2 + 5);
    if (v3 - 2 < 9)
    {
      v4 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 98) = v4;
      if (v4)
      {
        *v2 = *a2;
        goto LABEL_6;
      }
      v7 = *a2;
      goto LABEL_13;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
      }
      else if (v3 == 11)
      {
        v7 = *a2;
        *a2 = 0;
LABEL_13:
        *v2 = v7;
      }
    }
LABEL_6:
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(result + 104) == 11)
    {
      v13 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v10 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 100));
      result = v10;
      a2 = v13;
    }
    v5 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 104) = v5;
    *(_BYTE *)(result + 105) = *((_BYTE *)a2 + 13);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_10;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 100) = 0;
        goto LABEL_10;
      }
      if (v5 != 11)
        goto LABEL_10;
      v8 = a2[2];
      a2[2] = 0;
    }
    else
    {
      v6 = *((unsigned __int8 *)a2 + 14);
      *(_BYTE *)(result + 106) = v6;
      if (v6)
      {
        *(_DWORD *)(result + 100) = a2[2];
LABEL_10:
        *((_BYTE *)a2 + 12) = 0;
        return result;
      }
      v8 = a2[2];
    }
    *(_DWORD *)(result + 100) = v8;
    goto LABEL_10;
  }
  return result;
}

uint64_t WebCore::BasicShapeXywh::create(WebCore::BasicShapeXywh *this)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)result = off_1E34418F8;
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 47) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(_DWORD *)(result + 55) = 0;
  *(_DWORD *)(result + 60) = 0;
  *(_DWORD *)(result + 63) = 0;
  *(_DWORD *)(result + 68) = 0;
  *(_DWORD *)(result + 71) = 0;
  *(_DWORD *)(result + 76) = 0;
  *(_DWORD *)(result + 79) = 0;
  *(_DWORD *)(result + 84) = 0;
  *(_DWORD *)(result + 87) = 0;
  *(_DWORD *)(result + 95) = 0;
  *(_DWORD *)(result + 92) = 0;
  *(_DWORD *)(result + 103) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_DWORD *)(result + 15) = 0;
  *(_QWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 23) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 39) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_QWORD *)this = result;
  return result;
}

_BYTE *WebCore::BasicShapeXywh::setInsetX(_BYTE *result, _BYTE *a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;

  v2 = result + 12;
  if (result + 12 != a2)
  {
    if (result[16] == 11)
    {
      v7 = a2;
      v8 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result + 12;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      a2 = v7;
      result = v8;
    }
    v3 = a2[4];
    result[16] = v3;
    result[17] = a2[5];
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = a2[6];
      result[18] = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_6:
        a2[4] = 0;
        return result;
      }
      v5 = *(_DWORD *)a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
  return result;
}

_BYTE *WebCore::BasicShapeXywh::setInsetY(_BYTE *result, _BYTE *a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;

  v2 = result + 20;
  if (result + 20 != a2)
  {
    if (result[24] == 11)
    {
      v7 = a2;
      v8 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result + 20;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      a2 = v7;
      result = v8;
    }
    v3 = a2[4];
    result[24] = v3;
    result[25] = a2[5];
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = a2[6];
      result[26] = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_6:
        a2[4] = 0;
        return result;
      }
      v5 = *(_DWORD *)a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
  return result;
}

_BYTE *WebCore::BasicShapeXywh::setWidth(_BYTE *result, _BYTE *a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;

  v2 = result + 28;
  if (result + 28 != a2)
  {
    if (result[32] == 11)
    {
      v7 = a2;
      v8 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result + 28;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      a2 = v7;
      result = v8;
    }
    v3 = a2[4];
    result[32] = v3;
    result[33] = a2[5];
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = a2[6];
      result[34] = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_6:
        a2[4] = 0;
        return result;
      }
      v5 = *(_DWORD *)a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
  return result;
}

_BYTE *WebCore::BasicShapeXywh::setHeight(_BYTE *result, _BYTE *a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;

  v2 = result + 36;
  if (result + 36 != a2)
  {
    if (result[40] == 11)
    {
      v7 = a2;
      v8 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result + 36;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
      v2 = v6;
      a2 = v7;
      result = v8;
    }
    v3 = a2[4];
    result[40] = v3;
    result[41] = a2[5];
    if (v3 - 2 >= 9)
    {
      if (v3 > 0xD)
        goto LABEL_6;
      if (((1 << v3) & 0x3003) != 0)
      {
        *v2 = 0;
        goto LABEL_6;
      }
      if (v3 != 11)
        goto LABEL_6;
      v5 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v4 = a2[6];
      result[42] = v4;
      if (v4)
      {
        *v2 = *(_DWORD *)a2;
LABEL_6:
        a2[4] = 0;
        return result;
      }
      v5 = *(_DWORD *)a2;
    }
    *v2 = v5;
    goto LABEL_6;
  }
  return result;
}

uint64_t WebCore::BasicShapeRect::create(WebCore::BasicShapeRect *this)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)result = off_1E3441958;
  *(_QWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 15) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 23) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 39) = 0;
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 47) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(_DWORD *)(result + 55) = 0;
  *(_DWORD *)(result + 63) = 0;
  *(_DWORD *)(result + 60) = 0;
  *(_DWORD *)(result + 71) = 0;
  *(_DWORD *)(result + 68) = 0;
  *(_DWORD *)(result + 79) = 0;
  *(_DWORD *)(result + 76) = 0;
  *(_DWORD *)(result + 87) = 0;
  *(_DWORD *)(result + 84) = 0;
  *(_DWORD *)(result + 95) = 0;
  *(_DWORD *)(result + 92) = 0;
  *(_DWORD *)(result + 103) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_QWORD *)this = result;
  return result;
}

int *WebCore::BasicShapeRect::setTop(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int *result;
  unsigned int v4;
  int v5;
  int *v6;
  _BYTE *v7;
  uint64_t v8;

  v2 = (_BYTE *)a1;
  result = (int *)(a1 + 12);
  if (result != (int *)a2)
  {
    if (v2[16] == 11)
    {
      v7 = v2;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v6;
      v2 = v7;
      a2 = v8;
    }
    v4 = *(unsigned __int8 *)(a2 + 4);
    v2[16] = v4;
    v2[17] = *(_BYTE *)(a2 + 5);
    if (v4 <= 0xD)
    {
      v5 = 1 << v4;
      if ((v5 & 0x7FC) != 0)
      {
        v2[18] = *(_BYTE *)(a2 + 6);
        *result = *(_DWORD *)a2;
      }
      else if ((v5 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)a2;
        return WebCore::Length::ref(result);
      }
    }
  }
  return result;
}

void WebCore::convertToLengthOrAuto(WebCore *this, const WebCore::CSSToLengthConversionData *a2, const WebCore::CSSValue *a3)
{
  void *v6;
  BOOL v7;
  WTF *v8;
  WTF *v9;
  __n128 v10;
  _BOOL4 isLength;
  __n128 v12;
  __int16 v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  float v20;
  __int16 v21;
  int v22;
  double v23;
  float v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  double v28;
  BOOL v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  WTF *v45[2];
  WTF *v46[2];
  __int16 v47;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195785564);
  }
  v47 = 0;
  *(_OWORD *)v45 = 0u;
  *(_OWORD *)v46 = 0u;
  WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)a3, (WebCore::ComputedStyleDependencies *)v45);
  v7 = (!HIDWORD(v46[1]) || *((_QWORD *)a2 + 1))
    && (!HIDWORD(v45[1]) || *(_QWORD *)a2)
    && (!(_BYTE)v47 || *((_QWORD *)a2 + 4))
    && (!HIBYTE(v47) || *((_QWORD *)a2 + 3));
  v8 = v46[0];
  if (v46[0])
  {
    v46[0] = 0;
    LODWORD(v46[1]) = 0;
    WTF::fastFree(v8, v6);
  }
  v9 = v45[0];
  if (v45[0])
  {
    v45[0] = 0;
    LODWORD(v45[1]) = 0;
    WTF::fastFree(v9, v6);
    if (!v7)
      goto LABEL_64;
  }
  else if (!v7)
  {
    goto LABEL_64;
  }
  if (WebCore::CSSPrimitiveValue::isLength(a3))
  {
    WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)a3, (uint64_t)a2, (uint64_t)this, v10);
    return;
  }
  isLength = WebCore::CSSPrimitiveValue::isLength(a3);
  v13 = *((_WORD *)a3 + 2);
  if (isLength)
  {
    v14 = v13 & 0x7F;
    if (v14 == 73)
    {
      v25 = *((_QWORD *)a3 + 1);
      v26 = *(_DWORD **)(v25 + 8);
      ++v26[2];
      v19 = (*(double (**)(_DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v26 + 48))(v26, a2);
      v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 8) + 72))(*(_QWORD *)(v25 + 8));
      v28 = fabs(v19);
      if (v27 == 12 && v28 == INFINITY)
      {
        v19 = 0.0;
      }
      else
      {
        if (*(_BYTE *)(v25 + 16))
          v30 = v19 < 0.0;
        else
          v30 = 0;
        if (v30)
          v19 = 0.0;
      }
      if (v26[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[2];
    }
    else
    {
      v15 = v14 - 79;
      if (v14 == 63)
        v16 = 22;
      else
        v16 = v14;
      if (v14 == 77)
        v17 = 20;
      else
        v17 = v16;
      if (v15 >= 2)
        v18 = v17;
      else
        v18 = 22;
      v12.n128_u64[0] = *((_QWORD *)a3 + 1);
      v19 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a2, (void *)v18, v12);
    }
    v20 = v19;
    *(float *)this = v20;
    v21 = 4;
LABEL_33:
    *((_WORD *)this + 2) = v21;
    *((_BYTE *)this + 6) = 1;
    return;
  }
  v22 = v13 & 0x7F;
  if ((v22 - 63) <= 0x11 && ((1 << ((v13 & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_55;
  if (v22 != 73)
    goto LABEL_29;
  v31 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
  v32 = v31[12];
  if (v32 == 1)
    goto LABEL_50;
  if (v32 == 2)
    goto LABEL_30;
  if ((v32 - 5) <= 3)
  {
LABEL_50:
    v22 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v31 + 72))(v31);
    v13 = *((_WORD *)a3 + 2);
LABEL_29:
    if (v22 == 3)
    {
LABEL_30:
      if ((v13 & 0x7F) == 0x49)
      {
        v42 = *((_QWORD *)a3 + 1);
        v45[0] = 0;
        v23 = WebCore::CSSCalcValue::doubleValue(v42, (uint64_t)v45);
        if (v45[0])
          WTF::fastFree((WTF *)((char *)v45[0] - 16), v43);
      }
      else
      {
        v23 = *((double *)a3 + 1);
      }
      v24 = v23;
      *(float *)this = v24;
      v21 = 3;
      goto LABEL_33;
    }
  }
LABEL_55:
  v33 = v13 & 0x7F;
  if (v33 == 80)
  {
    if (*((_WORD *)a3 + 4) == 394)
    {
      *(_DWORD *)((char *)this + 3) = 0;
      *(_DWORD *)this = 0;
      return;
    }
    goto LABEL_64;
  }
  if (v33 != 73)
  {
LABEL_64:
    *(_DWORD *)this = 0;
    *((_WORD *)this + 2) = 13;
    *((_BYTE *)this + 6) = 0;
    return;
  }
  v34 = *((_QWORD *)a3 + 1);
  v35 = *(_DWORD **)(v34 + 8);
  ++v35[2];
  (*(void (**)(WTF **__return_ptr, _DWORD *, const WebCore::CSSToLengthConversionData *))(*(_QWORD *)v35 + 32))(v45, v35, a2);
  v36 = *(_BYTE *)(v34 + 16);
  v37 = WTF::fastMalloc((WTF *)0x18);
  v38 = v45[0];
  *(_DWORD *)v37 = 1;
  *(_QWORD *)(v37 + 8) = v38;
  *(_BYTE *)(v37 + 16) = v36;
  v44 = (WTF *)v37;
  v45[0] = 0;
  if (v35[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
  else
    --v35[2];
  WebCore::Length::Length((uint64_t)this, &v44);
  v40 = v44;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1)
    {
      v41 = *((_QWORD *)v44 + 1);
      *((_QWORD *)v44 + 1) = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      WTF::fastFree(v40, v39);
    }
    else
    {
      --*(_DWORD *)v44;
    }
  }
}

int *WebCore::BasicShapeRect::setRight(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int *result;
  unsigned int v4;
  int v5;
  int *v6;
  _BYTE *v7;
  uint64_t v8;

  v2 = (_BYTE *)a1;
  result = (int *)(a1 + 20);
  if (result != (int *)a2)
  {
    if (v2[24] == 11)
    {
      v7 = v2;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v6;
      v2 = v7;
      a2 = v8;
    }
    v4 = *(unsigned __int8 *)(a2 + 4);
    v2[24] = v4;
    v2[25] = *(_BYTE *)(a2 + 5);
    if (v4 <= 0xD)
    {
      v5 = 1 << v4;
      if ((v5 & 0x7FC) != 0)
      {
        v2[26] = *(_BYTE *)(a2 + 6);
        *result = *(_DWORD *)a2;
      }
      else if ((v5 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)a2;
        return WebCore::Length::ref(result);
      }
    }
  }
  return result;
}

int *WebCore::BasicShapeRect::setBottom(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int *result;
  unsigned int v4;
  int v5;
  int *v6;
  _BYTE *v7;
  uint64_t v8;

  v2 = (_BYTE *)a1;
  result = (int *)(a1 + 28);
  if (result != (int *)a2)
  {
    if (v2[32] == 11)
    {
      v7 = v2;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v6;
      v2 = v7;
      a2 = v8;
    }
    v4 = *(unsigned __int8 *)(a2 + 4);
    v2[32] = v4;
    v2[33] = *(_BYTE *)(a2 + 5);
    if (v4 <= 0xD)
    {
      v5 = 1 << v4;
      if ((v5 & 0x7FC) != 0)
      {
        v2[34] = *(_BYTE *)(a2 + 6);
        *result = *(_DWORD *)a2;
      }
      else if ((v5 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)a2;
        return WebCore::Length::ref(result);
      }
    }
  }
  return result;
}

int *WebCore::BasicShapeRect::setLeft(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int *result;
  unsigned int v4;
  int v5;
  int *v6;
  _BYTE *v7;
  uint64_t v8;

  v2 = (_BYTE *)a1;
  result = (int *)(a1 + 36);
  if (result != (int *)a2)
  {
    if (v2[40] == 11)
    {
      v7 = v2;
      v8 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v6 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*result);
      result = v6;
      v2 = v7;
      a2 = v8;
    }
    v4 = *(unsigned __int8 *)(a2 + 4);
    v2[40] = v4;
    v2[41] = *(_BYTE *)(a2 + 5);
    if (v4 <= 0xD)
    {
      v5 = 1 << v4;
      if ((v5 & 0x7FC) != 0)
      {
        v2[42] = *(_BYTE *)(a2 + 6);
        *result = *(_DWORD *)a2;
      }
      else if ((v5 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)a2;
        return WebCore::Length::ref(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::basicShapePathForValue@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  _QWORD *v6;
  _DWORD *v7;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v7 = *(_DWORD **)(a1 + 16);
  ++*v7;
  *v6 = 0;
  v6[1] = v7;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3441650;
  *(_QWORD *)(result + 16) = v6;
  *a2 = result;
  *(_BYTE *)(result + 28) = *(_BYTE *)(a1 + 24);
  *(float *)(result + 24) = a3;
  return result;
}

WTF::StringImpl *WebCore::CSSAnchorValue::collectAnchorNames(WTF::StringImpl *result, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v5 = 0;
  v6 = (*(_WORD *)(v3 + 4) & 0x7Fu) - 20;
  if (v6 <= 0x3C)
  {
    if (((1 << ((*(_WORD *)(v3 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v5 = *(WTF::StringImpl **)(v3 + 8);
      if (!v5)
        goto LABEL_6;
      goto LABEL_5;
    }
    if (v6 == 60)
    {
      v8 = WebCore::nameString(*(unsigned __int16 *)(v3 + 8));
    }
    else
    {
      if (v6 != 59)
        goto LABEL_6;
      v8 = WebCore::nameString(*(unsigned __int16 *)(v3 + 8));
    }
    v5 = (WTF::StringImpl *)*v8;
    if (*v8)
LABEL_5:
      *(_DWORD *)v5 += 2;
  }
LABEL_6:
  v10 = v5;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v10, a3, (uint64_t)&v9);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int16 **WebCore::CSSAnchorValue::collectComputedStyleDependencies(WebCore::CSSAnchorValue *this, WebCore::ComputedStyleDependencies *a2)
{
  unsigned __int16 **result;

  result = (unsigned __int16 **)*((_QWORD *)this + 3);
  if (result)
    return WebCore::CSSPrimitiveValue::collectComputedStyleDependencies(result, a2);
  return result;
}

WTF::StringImpl *WebCore::CSSAnchorValue::customCSSText@<X0>(WebCore::CSSAnchorValue *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int8x16_t *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  WTF::StringImpl *v10;
  int8x16_t *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  int v32;
  BOOL v33;
  _BYTE *v34;
  _BYTE *v35;
  size_t v36;
  _BYTE *v37;
  unsigned __int128 *v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _DWORD *v47;

  if (*((_QWORD *)this + 1))
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v46);
  else
    v46 = 0;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v45);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v4)
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v44);
  else
    v44 = 0;
  v5 = v46;
  v6 = (int8x16_t *)"";
  if (v46)
  {
    v8 = *((_DWORD *)v46 + 1);
    v9 = v8 == 0;
    if (v8)
      v6 = (int8x16_t *)" ";
    v7 = 1;
    if (!v9)
      v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  v10 = v44;
  v11 = (int8x16_t *)"";
  if (!v44)
  {
    v12 = 1;
    if (!v46)
      goto LABEL_16;
    goto LABEL_15;
  }
  v32 = *((_DWORD *)v44 + 1);
  v33 = v32 == 0;
  if (v32)
    v11 = (int8x16_t *)", ";
  v12 = 3;
  if (v33)
    v12 = 1;
  if (v46)
LABEL_15:
    *(_DWORD *)v46 += 2;
LABEL_16:
  v13 = v45;
  if (v45)
    *(_DWORD *)v45 += 2;
  if (v10)
    *(_DWORD *)v10 += 2;
  v42 = v7 - 1;
  if ((unint64_t)(v7 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195785FB8);
  }
  v43 = v12 - 1;
  if ((unint64_t)(v12 - 1) >> 31)
  {
    __break(0xC471u);
LABEL_112:
    JUMPOUT(0x195785F8CLL);
  }
  if (v5)
  {
    v14 = *((_DWORD *)v5 + 1);
    if (v13)
      goto LABEL_24;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_24:
      v15 = *((_DWORD *)v13 + 1);
      if (v10)
        goto LABEL_25;
LABEL_95:
      v16 = 0;
      goto LABEL_26;
    }
  }
  v15 = 0;
  if (!v10)
    goto LABEL_95;
LABEL_25:
  v16 = *((_DWORD *)v10 + 1);
  if (v16 < 0)
    goto LABEL_107;
LABEL_26:
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    goto LABEL_107;
  v17 = __OFADD__(v43, v18);
  v19 = v43 + v18;
  v20 = v17;
  if (v15 < 0)
    goto LABEL_107;
  if (v20)
    goto LABEL_107;
  v17 = __OFADD__(v15, v19);
  v21 = v15 + v19;
  if (v17)
    goto LABEL_107;
  v17 = __OFADD__(v42, v21);
  v22 = v42 + v21;
  v23 = v17;
  if (v14 < 0)
    goto LABEL_107;
  if (v23)
    goto LABEL_107;
  v17 = __OFADD__(v14, v22);
  v24 = v14 + v22;
  if (v17)
    goto LABEL_107;
  v25 = (v24 + 7);
  if (__OFADD__(v24, 7))
    goto LABEL_107;
  if (v5 && (*((_BYTE *)v5 + 16) & 4) == 0
    || v13 && (*((_BYTE *)v13 + 16) & 4) == 0
    || v10 && (*((_BYTE *)v10 + 16) & 4) == 0)
  {
    if (v24 != -7)
    {
      if (v25 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v25 + 20));
        v27 = v47;
        if (v47)
        {
          v28 = (char *)(v47 + 5);
          *v47 = 2;
          v27[1] = v25;
          *((_QWORD *)v27 + 1) = v27 + 5;
          v27[4] = 0;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v28, (int8x16_t *)"anchor(", 7, (uint64_t)v5, v6, v42, (uint64_t)v13, v26, v11, v43, (uint64_t)v10, 41);
          goto LABEL_50;
        }
      }
LABEL_107:
      *a2 = 0;
      __break(0xC471u);
      goto LABEL_112;
    }
    goto LABEL_97;
  }
  if (v24 == -7)
  {
LABEL_97:
    v27 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_50;
  }
  if ((v25 & 0x80000000) != 0)
    goto LABEL_107;
  WTF::tryFastCompactMalloc((WTF *)(v25 + 20));
  v27 = v47;
  if (!v47)
    goto LABEL_107;
  *v47 = 2;
  v27[1] = v25;
  *((_QWORD *)v27 + 1) = v27 + 5;
  *((_QWORD *)v27 + 2) = 0x68636E6100000004;
  v34 = (char *)v27 + 27;
  *(_DWORD *)((char *)v27 + 23) = 678588264;
  if (v5)
  {
    v35 = (_BYTE *)*((_QWORD *)v5 + 1);
    v36 = *((unsigned int *)v5 + 1);
    if ((*((_BYTE *)v5 + 16) & 4) != 0)
    {
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == 1)
          *v34 = *v35;
        else
          memcpy((char *)v27 + 27, v35, v36);
      }
    }
    else
    {
      if (v36 < 0x10)
      {
        v38 = (unsigned __int128 *)((char *)v27 + 27);
      }
      else
      {
        v38 = (unsigned __int128 *)&v34[v36 & 0xFFFFFFF0];
        v39 = (unsigned __int128 *)((char *)v27 + 27);
        do
        {
          v40 = (unsigned __int128)vld2q_s8(v35);
          v35 += 32;
          *v39++ = v40;
        }
        while (v39 != v38);
      }
      while (v38 != (unsigned __int128 *)&v34[v36])
      {
        v41 = *v35;
        v35 += 2;
        *(_BYTE *)v38 = v41;
        v38 = (unsigned __int128 *)((char *)v38 + 1);
      }
    }
    v37 = &v34[*((unsigned int *)v5 + 1)];
  }
  else
  {
    v37 = (char *)v27 + 27;
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v37, v6, v42, (uint64_t)v13, v11, v43, (uint64_t)v10, 41);
LABEL_50:
  *a2 = v27;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v4);
      if (!v13)
        goto LABEL_56;
      goto LABEL_54;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v13)
    goto LABEL_56;
LABEL_54:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v4);
  else
    *(_DWORD *)v13 -= 2;
LABEL_56:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v29 = v44;
  v44 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v4);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v45;
  v45 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v4);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSAnchorValue::equals(WebCore::CSSAnchorValue *this, const WebCore::CSSAnchorValue *a2)
{
  WebCore::CSSPrimitiveValue *v4;
  const WebCore::CSSPrimitiveValue *v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WebCore::CSSPrimitiveValue *v12;
  const WebCore::CSSPrimitiveValue *v13;
  _BOOL8 v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;

  v4 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 1);
  v5 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 1);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((unint64_t)v4 | (unint64_t)v5)
      return 0;
  }
  else
  {
    v7 = WebCore::CSSPrimitiveValue::equals(v4, v5);
    if ((v7 & 1) == 0)
      return 0;
  }
  v8 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)a2 + 2);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_16:
      v16 = v8;
      while (*(_DWORD *)(v16 + 8) == 1)
      {
        v16 = *(_QWORD *)(v16 + 16);
        v17 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
        if (((v17 ^ v11) & 0x3F800) == 0)
        {
          v22 = v9;
          v23 = &v22;
          v8 = v16;
          goto LABEL_11;
        }
        if ((v17 & 0x3F800) != 0x1D800)
        {
          v14 = 0;
          v18 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
          v8 = v9;
          v9 = v16;
          if (v18 == 120832)
            goto LABEL_16;
          return v14;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_23:
      v19 = v9;
      while (*(_DWORD *)(v19 + 8) == 1)
      {
        v19 = *(_QWORD *)(v19 + 16);
        v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        if (((v20 ^ v10) & 0x3F800) == 0)
        {
          v22 = v8;
          v23 = &v22;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v19, &v23))goto LABEL_12;
          return 0;
        }
        if ((v20 & 0x3F800) != 0x1D800)
        {
          v14 = 0;
          v21 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
          v9 = v8;
          v8 = v19;
          if (v21 == 120832)
            goto LABEL_23;
          return v14;
        }
      }
    }
    return 0;
  }
  v22 = *((_QWORD *)a2 + 2);
  v23 = &v22;
LABEL_11:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, &v23) & 1) == 0)return 0;
LABEL_12:
  v12 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 3);
  v13 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 3);
  v14 = ((unint64_t)v12 | (unint64_t)v13) == 0;
  if (v12 && v13)
    return WebCore::CSSPrimitiveValue::equals(v12, v13);
  return v14;
}

uint64_t WebCore::CSSBackgroundRepeatValue::create@<X0>(__int16 a1@<W0>, __int16 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  char v7;

  result = WTF::fastCompactMalloc((WTF *)0xC);
  *(_DWORD *)result = 2;
  v7 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = -20480;
  *(_BYTE *)(result + 6) = v7 & 0xFC;
  *(_WORD *)(result + 8) = a1;
  *(_WORD *)(result + 10) = a2;
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSBackgroundRepeatValue::customCSSText@<X0>(WebCore::CSSBackgroundRepeatValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  char v15;
  __int128 v16;
  WTF::StringImpl *v17[2];

  result = *((unsigned __int16 *)this + 4);
  v5 = *((unsigned __int16 *)this + 5);
  if ((_DWORD)result == (_DWORD)v5)
  {
    result = (uint64_t)WebCore::nameString(result);
    v6 = *(WTF::StringImpl **)result;
    goto LABEL_3;
  }
  if (__PAIR64__(v5, result) == 0xEA000000E7)
  {
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
LABEL_8:
      WTF::AtomString::AtomString(v17, (uint64_t)"repeat-x", 9uLL);
      v6 = v17[0];
      v17[0] = 0;
      result = qword_1EE2F0120;
      qword_1EE2F0120 = (uint64_t)v6;
      if (!result)
        goto LABEL_3;
      v8 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        result = (uint64_t)v17[0];
        v17[0] = 0;
        if (!result)
          goto LABEL_11;
        v8 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          goto LABEL_11;
        }
      }
      *(_DWORD *)result = v8;
LABEL_11:
      v6 = (WTF::StringImpl *)qword_1EE2F0120;
      goto LABEL_3;
    }
    v6 = (WTF::StringImpl *)qword_1EE2F0120;
    if (!qword_1EE2F0120)
      goto LABEL_8;
LABEL_15:
    *(_DWORD *)v6 += 2;
LABEL_16:
    *a2 = v6;
    return result;
  }
  if (__PAIR64__(v5, result) == 0xE7000000EALL)
  {
    {
      v6 = (WTF::StringImpl *)qword_1EE2F0128;
      if (qword_1EE2F0128)
        goto LABEL_15;
    }
    else
    {
      bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
    }
    WTF::AtomString::AtomString(v17, (uint64_t)"repeat-y", 9uLL);
    v6 = v17[0];
    v17[0] = 0;
    result = qword_1EE2F0128;
    qword_1EE2F0128 = (uint64_t)v6;
    if (!result)
    {
LABEL_3:
      if (!v6)
        goto LABEL_16;
      goto LABEL_15;
    }
    v13 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      result = (uint64_t)v17[0];
      v17[0] = 0;
      if (!result)
        goto LABEL_32;
      v13 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
        goto LABEL_32;
      }
    }
    *(_DWORD *)result = v13;
LABEL_32:
    v6 = (WTF::StringImpl *)qword_1EE2F0128;
    goto LABEL_3;
  }
  v9 = 0uLL;
  v10 = 0uLL;
  if (result <= 0x48D)
    v10 = *((_OWORD *)&WebCore::valueList + result);
  if (v5 <= 0x48D)
    v9 = *((_OWORD *)&WebCore::valueList + v5);
  v16 = v9;
  *(_OWORD *)v17 = v10;
  v15 = 32;
  result = (uint64_t)WTF::tryMakeString<WTF::ASCIILiteral,char,WTF::ASCIILiteral>(v17, &v15, (uint64_t)&v16, a2);
  if (!*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195786348);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSCircleValue::customCSSText@<X0>(WebCore::CSSCircleValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  _WORD *v28;
  int8x16_t *v29;
  uint64_t v30;
  WTF::StringImpl *result;
  int v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int16 v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  int8x16_t v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  char *v63;
  char *v64;
  __int16 v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unsigned __int128 *v68;
  unsigned __int128 *v69;
  unsigned __int128 v70;
  unsigned __int128 *v71;
  unsigned __int128 *v72;
  unsigned __int128 v73;
  char v74;
  char v75;
  size_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int16 v79;
  _DWORD *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  _DWORD *v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;

  v4 = *((_QWORD *)this + 1);
  if (!v4
    || ((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F87F) == 0x50
    && *(_WORD *)(v4 + 8) == 698)
  {
    v5 = 0;
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v81);
    v5 = v81;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    WebCore::buildSerializablePositionOffset((uint64_t)&v81, v6, 258);
    WebCore::buildSerializablePositionOffset((uint64_t)&v79, *((_QWORD *)this + 3), 254);
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      v7 = " ";
      v8 = 2;
    }
    else
    {
      v7 = "";
      v8 = 1;
    }
    v9 = v81;
    v10 = v79;
    WebCore::serializePositionOffset(&v78, v81, (uint64_t)v82, v79);
    WebCore::serializePositionOffset(&v77, v10, (uint64_t)v80, v9);
    v12 = v77;
    v13 = v78;
    v76 = v8 - 1;
    if (v76 >> 31)
    {
      __break(0xC471u);
LABEL_141:
      JUMPOUT(0x195786A6CLL);
    }
    if (v5)
    {
      v14 = *(_DWORD *)(v5 + 4);
      if (v78)
        goto LABEL_12;
    }
    else
    {
      v14 = 0;
      if (v78)
      {
LABEL_12:
        v15 = *((_DWORD *)v78 + 1);
        if (v77)
          goto LABEL_13;
        goto LABEL_71;
      }
    }
    v15 = 0;
    if (v77)
    {
LABEL_13:
      v16 = *((_DWORD *)v77 + 1);
      if (v16 < 0)
        goto LABEL_138;
LABEL_14:
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_138;
      v17 = __OFADD__(v18, 1);
      v19 = v18 + 1;
      v20 = v17;
      if (v15 < 0)
        goto LABEL_138;
      if (v20)
        goto LABEL_138;
      v17 = __OFADD__(v15, v19);
      v21 = v15 + v19;
      if (v17)
        goto LABEL_138;
      v17 = __OFADD__(v21, 3);
      v22 = v21 + 3;
      if (v17)
        goto LABEL_138;
      v17 = __OFADD__((_DWORD)v76, v22);
      v23 = v76 + v22;
      v24 = v17;
      if (v14 < 0)
        goto LABEL_138;
      if (v24)
        goto LABEL_138;
      v17 = __OFADD__(v14, v23);
      v25 = v14 + v23;
      if (v17)
        goto LABEL_138;
      v26 = (v25 + 7);
      if (__OFADD__(v25, 7))
        goto LABEL_138;
      if ((!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0)
        && (!v78 || (*((_BYTE *)v78 + 16) & 4) != 0)
        && (!v77 || (*((_BYTE *)v77 + 16) & 4) != 0))
      {
        if (v25 != -7)
        {
          if ((v26 & 0x80000000) == 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
            v27 = v84;
            if (v84)
            {
              *v84 = 2;
              v27[1] = v26;
              *((_QWORD *)v27 + 1) = v27 + 5;
              *((_QWORD *)v27 + 2) = 0x6372696300000004;
              v35 = (char *)v27 + 27;
              *(_DWORD *)((char *)v27 + 23) = 677735523;
              if (v5)
              {
                v36 = *(_BYTE **)(v5 + 8);
                v37 = *(unsigned int *)(v5 + 4);
                if ((*(_BYTE *)(v5 + 16) & 4) != 0)
                {
                  if ((_DWORD)v37)
                  {
                    if ((_DWORD)v37 == 1)
                      *v35 = *v36;
                    else
                      memcpy((char *)v27 + 27, v36, v37);
                  }
                }
                else
                {
                  if (v37 < 0x10)
                  {
                    v68 = (unsigned __int128 *)((char *)v27 + 27);
                  }
                  else
                  {
                    v68 = (unsigned __int128 *)&v35[v37 & 0xFFFFFFF0];
                    v69 = (unsigned __int128 *)((char *)v27 + 27);
                    do
                    {
                      v70 = (unsigned __int128)vld2q_s8(v36);
                      v36 += 32;
                      *v69++ = v70;
                    }
                    while (v69 != v68);
                  }
                  while (v68 != (unsigned __int128 *)&v35[v37])
                  {
                    v74 = *v36;
                    v36 += 2;
                    *(_BYTE *)v68 = v74;
                    v68 = (unsigned __int128 *)((char *)v68 + 1);
                  }
                }
                v38 = *(unsigned int *)(v5 + 4);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v35[v38];
              if ((_DWORD)v76)
              {
                if ((_DWORD)v76 == 1)
                  *v39 = *v7;
                else
                  memcpy(v39, v7, v76);
              }
              v40 = &v39[v76];
              v40[2] = 32;
              *(_WORD *)v40 = 29793;
              v41 = &v39[v76 + 3];
              if (v13)
              {
                v42 = (char *)*((_QWORD *)v13 + 1);
                v43 = *((unsigned int *)v13 + 1);
                if ((*((_BYTE *)v13 + 16) & 4) != 0)
                {
                  if ((_DWORD)v43)
                  {
                    if ((_DWORD)v43 == 1)
                      *v41 = *v42;
                    else
                      memcpy(v41, v42, v43);
                  }
                }
                else
                {
                  if (v43 < 0x10)
                  {
                    v71 = (unsigned __int128 *)&v39[v76 + 3];
                  }
                  else
                  {
                    v71 = (unsigned __int128 *)&v41[v43 & 0xFFFFFFF0];
                    v72 = (unsigned __int128 *)&v39[v76 + 3];
                    do
                    {
                      v73 = (unsigned __int128)vld2q_s8(v42);
                      v42 += 32;
                      *v72++ = v73;
                    }
                    while (v72 != v71);
                  }
                  while (v71 != (unsigned __int128 *)&v41[v43])
                  {
                    v75 = *v42;
                    v42 += 2;
                    *(_BYTE *)v71 = v75;
                    v71 = (unsigned __int128 *)((char *)v71 + 1);
                  }
                }
                v44 = *((unsigned int *)v13 + 1);
              }
              else
              {
                v44 = 0;
              }
              v41[v44] = 32;
              WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v41[v44 + 1], (uint64_t)v12, 41);
LABEL_89:
              *a2 = v27;
              v66 = v77;
              v77 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, v11);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = v78;
              v78 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                {
                  WTF::StringImpl::destroy(v67, v11);
                  if (!v5)
                    goto LABEL_98;
                  goto LABEL_96;
                }
                *(_DWORD *)v67 -= 2;
              }
              if (!v5)
                goto LABEL_98;
LABEL_96:
              if (*(_DWORD *)v5 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v5, v11);
              else
                *(_DWORD *)v5 -= 2;
LABEL_98:
              if (v80)
              {
                if (*v80 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v80, v11);
                else
                  *v80 -= 2;
              }
              result = v82;
              if (v82)
              {
                v32 = *(_DWORD *)v82 - 2;
                if (*(_DWORD *)v82 == 2)
                {
                  result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, v11);
                  if (!v5)
                    return result;
                  goto LABEL_106;
                }
                goto LABEL_104;
              }
LABEL_105:
              if (!v5)
                return result;
              goto LABEL_106;
            }
          }
LABEL_138:
          *a2 = 0;
          __break(0xC471u);
          goto LABEL_141;
        }
      }
      else if (v25 != -7)
      {
        if (v26 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v26 + 20));
          v27 = v84;
          if (v84)
          {
            *v84 = 2;
            v27[1] = v26;
            *(_QWORD *)(v27 + 5) = 0x63007200690063;
            *((_QWORD *)v27 + 1) = v27 + 5;
            v27[4] = 0;
            v28 = (_WORD *)v27 + 17;
            v27[7] = 6619244;
            *((_WORD *)v27 + 16) = 40;
            if (v5)
            {
              v29 = *(int8x16_t **)(v5 + 8);
              v30 = *(unsigned int *)(v5 + 4);
              if ((*(_BYTE *)(v5 + 16) & 4) != 0)
              {
                v33 = (char *)&v28[v30];
                if (v30 >= 0x40)
                {
                  v34 = (char *)&v28[v30 & 0xFFFFFFC0];
                  v46 = 0uLL;
                  v47 = (char *)v27 + 34;
                  do
                  {
                    v85.val[0] = *v29;
                    v48 = v29[1];
                    v87.val[0] = v29[2];
                    v49 = v29[3];
                    v29 += 4;
                    v50 = v49;
                    v87.val[1] = 0uLL;
                    v89.val[0] = v48;
                    v85.val[1] = 0uLL;
                    v51 = v47;
                    vst2q_s8(v51, v85);
                    v51 += 32;
                    v89.val[1] = 0uLL;
                    vst2q_s8(v51, v89);
                    v52 = v47 + 64;
                    vst2q_s8(v52, v87);
                    v53 = v47 + 96;
                    vst2q_s8(v53, *(int8x16x2_t *)(&v46 - 1));
                    v47 += 128;
                  }
                  while (v47 != v34);
                }
                else
                {
                  v34 = (char *)v27 + 34;
                }
                while (v34 != v33)
                {
                  v54 = v29->u8[0];
                  v29 = (int8x16_t *)((char *)v29 + 1);
                  *(_WORD *)v34 = v54;
                  v34 += 2;
                }
              }
              else if ((_DWORD)v30 == 1)
              {
                *v28 = v29->i16[0];
              }
              else if ((_DWORD)v30)
              {
                memcpy((char *)v27 + 34, v29, 2 * v30);
              }
              v45 = *(unsigned int *)(v5 + 4);
            }
            else
            {
              v45 = 0;
            }
            v55 = (char *)&v28[v45];
            v56 = &v55[2 * v76];
            if ((v76 & 0x7FFFFFC0) != 0)
            {
              v57 = &v55[2 * (v76 & 0x7FFFFFC0)];
              v58 = 0uLL;
              do
              {
                v86.val[0] = *(int8x16_t *)v7;
                v59 = *((int8x16_t *)v7 + 1);
                v88.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
                v60 = *((_OWORD *)v7 + 3);
                v7 += 64;
                v61 = v60;
                v88.val[1] = 0uLL;
                v90.val[0] = v59;
                v86.val[1] = 0uLL;
                v62 = v55;
                vst2q_s8(v62, v86);
                v62 += 32;
                v90.val[1] = 0uLL;
                vst2q_s8(v62, v90);
                v63 = v55 + 64;
                vst2q_s8(v63, v88);
                v64 = v55 + 96;
                vst2q_s8(v64, *(int8x16x2_t *)(&v58 - 1));
                v55 += 128;
              }
              while (v55 != v57);
              v55 = v57;
            }
            while (v55 != v56)
            {
              v65 = *(unsigned __int8 *)v7++;
              *(_WORD *)v55 = v65;
              v55 += 2;
            }
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v56, (int8x16_t *)"at ", 3, (uint64_t)v13, 32, (uint64_t)v12, 41);
            goto LABEL_89;
          }
        }
        goto LABEL_138;
      }
      v27 = (_DWORD *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_89;
    }
LABEL_71:
    v16 = 0;
    goto LABEL_14;
  }
  if (v5)
    *(_DWORD *)v5 += 2;
  v83 = (WTF::StringImpl *)v5;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"circle(", 8, (uint64_t *)&v83, 41, a2);
  result = v83;
  v83 = 0;
  if (!result)
    goto LABEL_105;
  v32 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result != 2)
  {
LABEL_104:
    *(_DWORD *)result = v32;
    goto LABEL_105;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if (!v5)
    return result;
LABEL_106:
  if (*(_DWORD *)v5 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v11);
  *(_DWORD *)v5 -= 2;
  return result;
}

uint64_t WebCore::buildSerializablePositionOffset(uint64_t result, uint64_t a2, int a3)
{
  __int16 v3;
  uint64_t v4;
  WebCore::CSSPrimitiveValue *v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  __int16 v13;
  double v15;
  float v16;
  _BOOL4 v17;
  int v18;
  WTF::StringImpl *v19;
  WebCore::CSSPrimitiveValue *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  void *v24;
  int v25;
  double v26;
  unsigned int v27;
  __int16 v28;
  char v29;
  WebCore::CSSPrimitiveValue *v30;

  v3 = a3;
  v4 = result;
  if (!a2)
    goto LABEL_8;
  v5 = (WebCore::CSSPrimitiveValue *)a2;
  v6 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v6 & 0x3F800) != 0)
  {
    if ((v6 & 0x3F800) == 0x1B800)
    {
      v7 = 0;
      v9 = *(_QWORD *)(a2 + 8);
      if (v9 && ((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F87F) == 0x50)
        v7 = *(unsigned __int16 *)(v9 + 8);
      v5 = *(WebCore::CSSPrimitiveValue **)(a2 + 16);
      if (v5)
      {
        *(_DWORD *)v5 += 2;
        goto LABEL_21;
      }
LABEL_7:
      if (v7 != 260)
        goto LABEL_9;
LABEL_8:
      v8 = 50;
      v7 = 260;
      goto LABEL_10;
    }
LABEL_20:
    *(_DWORD *)a2 += 2;
    v7 = a3;
    goto LABEL_21;
  }
  if ((*(_WORD *)(a2 + 4) & 0x7F) != 0x50)
    goto LABEL_20;
  if ((v6 & 0x3F87F) == 0x50)
  {
    v7 = *(unsigned __int16 *)(a2 + 8);
    goto LABEL_7;
  }
  v7 = 0;
LABEL_9:
  *(float *)&v8 = 0.0;
LABEL_10:
  v27 = v8;
  v28 = 3;
  v29 = 0;
  result = (uint64_t)WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)&v27, (int **)&v30);
  v5 = v30;
  v30 = 0;
  if (v28 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
  }
LABEL_21:
  if (v7 == 260)
    goto LABEL_61;
  v10 = *((unsigned __int16 *)v5 + 2) | (*((unsigned __int8 *)v5 + 6) << 16);
  if ((v10 & 0x3F800) != 0)
    v11 = 0;
  else
    v11 = v5;
  v12 = v7 == 255 || v7 == 259;
  if (!v12 || !v11)
    goto LABEL_46;
  v13 = *((_WORD *)v11 + 2);
  result = v13 & 0x7F;
  if ((result - 63) <= 0x11 && ((1 << ((*((_WORD *)v11 + 2) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_46;
  if ((_DWORD)result != 73)
    goto LABEL_37;
  result = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8);
  v22 = *(unsigned __int8 *)(result + 12);
  if (v22 == 1)
  {
LABEL_67:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
LABEL_37:
    if ((_DWORD)result == 3)
    {
      v13 = *((_WORD *)v11 + 2);
      goto LABEL_39;
    }
    v10 = *((unsigned __int16 *)v5 + 2) | (*((unsigned __int8 *)v5 + 6) << 16);
LABEL_46:
    if ((v10 & 0x3F800) != 0
      || (result = WebCore::CSSPrimitiveValue::isLength(v5), !(_DWORD)result)
      || ((*((_WORD *)v5 + 2) & 0x7F) == 0x49 ? (v17 = 0, v18 = 0) : (v17 = *((double *)v5 + 1) == 0.0, v18 = 1),
          (v17 | (v18 << 8)) != 0x101))
    {
      v3 = v7;
      goto LABEL_61;
    }
    if (v7 == 259 || v7 == 255)
      v27 = 100;
    else
      *(float *)&v27 = 0.0;
    v28 = 3;
    v29 = 0;
    goto LABEL_57;
  }
  if (v22 != 2)
  {
    if ((v22 - 5) > 3)
      goto LABEL_46;
    goto LABEL_67;
  }
LABEL_39:
  if ((v13 & 0x7F) == 0x49)
  {
    v23 = *((_QWORD *)v11 + 1);
    v30 = 0;
    v26 = WebCore::CSSCalcValue::doubleValue(v23, (uint64_t)&v30);
    if (v30)
      WTF::fastFree((WebCore::CSSPrimitiveValue *)((char *)v30 - 16), v24);
    v15 = v26;
  }
  else
  {
    v15 = *((double *)v11 + 1);
  }
  if (v15 >= 3.40282347e38)
  {
    *(float *)&v25 = 3.4028e38;
LABEL_80:
    v16 = *(float *)&v25;
    goto LABEL_44;
  }
  if (v15 <= -3.40282347e38)
  {
    *(float *)&v25 = -3.4028e38;
    goto LABEL_80;
  }
  v16 = v15;
LABEL_44:
  *(float *)&v27 = 100.0 - v16;
  v28 = 3;
  v29 = 1;
LABEL_57:
  result = (uint64_t)WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)&v27, (int **)&v30);
  v20 = v30;
  v30 = 0;
  if (*(_DWORD *)v5 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v19);
    result = (uint64_t)v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_DWORD *)v5 -= 2;
    v30 = 0;
  }
  if (v28 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
  }
  v5 = v20;
LABEL_61:
  *(_WORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = v5;
  return result;
}

WTF::StringImpl *WebCore::serializePositionOffset(_QWORD *a1, unsigned __int16 a2, uint64_t a3, __int16 a4)
{
  WTF::StringImpl *result;
  _UNKNOWN **v6;
  _OWORD *v7;
  void *v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (a2 == 258 && a4 == 254 || a2 == 254 && a4 == 258)
    return (WTF::StringImpl *)_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a1);
  if (a2 >= 0x48Eu)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v15);
    v7 = 0;
    goto LABEL_8;
  }
  v6 = &WebCore::valueList + 2 * a2;
  v7 = *v6;
  v8 = v6[1];
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v15);
  if (!v8)
  {
LABEL_8:
    v9 = 0;
    goto LABEL_9;
  }
  v9 = (_DWORD)v8 - 1;
  if (((unint64_t)v8 - 1) >> 31)
    goto LABEL_27;
LABEL_9:
  if (v15)
  {
    v10 = *((_DWORD *)v15 + 1);
    if (v10 < 0)
    {
LABEL_24:
      *a1 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11 || __OFADD__(v9, v12))
    goto LABEL_24;
  if (v15)
    v13 = (*((unsigned __int8 *)v15 + 16) >> 2) & 1;
  else
    v13 = 1;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9 + v12, v13, v7, v9, 32, (uint64_t)v15, a1);
  if (!*a1)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x195786FC8);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSEllipseValue::customCSSText@<X0>(WebCore::CSSEllipseValue *this@<X0>, WebCore *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD *v10;
  __int16 v11;
  unsigned __int16 v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int16 v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v23 = 0;
  v24 = 0;
  v4 = *((_QWORD *)this + 1);
  if (!v4
    || (((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F87F) == 0x50
      ? (v5 = *(unsigned __int16 *)(v4 + 8))
      : (v5 = 0),
        (v6 = *((_QWORD *)this + 2)) != 0
     && ((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F87F) == 0x50
     && v5 == 698
     && *(_WORD *)(v6 + 8) == 698))
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v21);
    v7 = v21;
    v24 = v21;
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v21);
    v8 = v21;
    v23 = v21;
  }
  v9 = *((_QWORD *)this + 3);
  if (!v9)
  {
    result = WebCore::buildEllipseString(a2, &v24, (const WTF::String *)&v23, MEMORY[0x1E0CBF6F0], MEMORY[0x1E0CBF6F0]);
    if (!v8)
      goto LABEL_32;
    goto LABEL_30;
  }
  WebCore::buildSerializablePositionOffset((uint64_t)&v21, v9, 258);
  WebCore::buildSerializablePositionOffset((uint64_t)&v19, *((_QWORD *)this + 4), 254);
  v10 = v22;
  v11 = (__int16)v21;
  v12 = v19;
  WebCore::serializePositionOffset(&v18, (unsigned __int16)v21, (uint64_t)v22, v19);
  v13 = v20;
  WebCore::serializePositionOffset(&v17, v12, (uint64_t)v20, v11);
  WebCore::buildEllipseString(a2, &v24, (const WTF::String *)&v23, (const WTF::String *)&v18, (const WTF::String *)&v17);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v18;
  v18 = 0;
  if (!result)
  {
LABEL_18:
    if (v13)
      goto LABEL_19;
    goto LABEL_26;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_18;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  if (v13)
  {
LABEL_19:
    if (*v13 == 2)
      result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v14);
    else
      *v13 -= 2;
  }
LABEL_26:
  if (v10)
  {
    if (*v10 == 2)
    {
      result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v14);
      if (!v8)
        goto LABEL_32;
      goto LABEL_30;
    }
    *v10 -= 2;
  }
  if (!v8)
    goto LABEL_32;
LABEL_30:
  if (*(_DWORD *)v8 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v14);
  else
    *(_DWORD *)v8 -= 2;
LABEL_32:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v14);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::buildEllipseString(WebCore *this, WTF::StringImpl **a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  const char *v38;
  int v39;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  WTF::StringBuilder::append();
  v11 = *a2;
  if (!*a2)
  {
    v15 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
    {
      v20 = *(_QWORD *)a4;
      v21 = *(_QWORD *)a5;
      if (!(*(_QWORD *)a4 | *(_QWORD *)a5))
        goto LABEL_34;
      goto LABEL_33;
    }
    goto LABEL_15;
  }
  *(_DWORD *)v11 += 2;
  v12 = v31;
  v31 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      v11 = *a2;
      if (!*a2)
        goto LABEL_6;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  LODWORD(v11) = *((_DWORD *)v11 + 1);
LABEL_6:
  v33 = v11;
  if (!*(_QWORD *)a3)
    goto LABEL_25;
  LOBYTE(v38) = 32;
  if (v32 && ((v13 = v33, v33 < *((_DWORD *)v32 + 1)) ? (v14 = v31 == 0) : (v14 = 0), v14))
  {
    v29 = *((_DWORD *)v32 + 4);
    v30 = *((_QWORD *)v32 + 1);
    ++v33;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v13) = 32;
    else
      *(_WORD *)(v30 + 2 * v13) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v15 = *(_QWORD *)a3;
LABEL_15:
  if (!v33 && !v32)
  {
    if (v15)
      *(_DWORD *)v15 += 2;
    v16 = v31;
    v31 = (WTF::StringImpl *)v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v10);
        v15 = *(_QWORD *)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_24;
        goto LABEL_23;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (!v15)
    {
LABEL_24:
      v33 = v15;
      goto LABEL_25;
    }
LABEL_23:
    LODWORD(v15) = *(_DWORD *)(v15 + 4);
    goto LABEL_24;
  }
  if (v15 && (*(_BYTE *)(v15 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_25:
  if (*(_QWORD *)a4 | *(_QWORD *)a5)
  {
    LOBYTE(v38) = 32;
    if (!v32 || (v17 = v33, v33 >= *((_DWORD *)v32 + 1)) || v31)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v18 = *((_DWORD *)v32 + 4);
      v19 = *((_QWORD *)v32 + 1);
      ++v33;
      if ((v18 & 4) != 0)
        *(_BYTE *)(v19 + v17) = 32;
      else
        *(_WORD *)(v19 + 2 * v17) = 32;
    }
    v20 = *(_QWORD *)a4;
    v21 = *(_QWORD *)a5;
LABEL_33:
    v37 = v20;
    v38 = "at ";
    v39 = 3;
    v36 = 32;
    v35 = v21;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v31, (uint64_t)&v38, &v37, &v36, &v35);
  }
LABEL_34:
  LOBYTE(v38) = 41;
  if (v32 && ((v22 = v33, v33 < *((_DWORD *)v32 + 1)) ? (v23 = v31 == 0) : (v23 = 0), v23))
  {
    v27 = *((_DWORD *)v32 + 4);
    v28 = *((_QWORD *)v32 + 1);
    ++v33;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v22) = 41;
    else
      *(_WORD *)(v28 + 2 * v22) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v24 = v31;
  if (v31
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v31),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v31),
        (v24 = v31) != 0))
  {
    *(_DWORD *)v24 += 2;
  }
  *(_QWORD *)this = v24;
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v10);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSEllipseValue::equals(WebCore::CSSEllipseValue *this, const WebCore::CSSEllipseValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)a2 + 3);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 | v5)
      return 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
    v8 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
    if (((v8 ^ v7) & 0x3F800) != 0)
    {
      if ((v7 & 0x3F800) == 0x1D800)
      {
LABEL_33:
        v27 = v4;
        while (*(_DWORD *)(v27 + 8) == 1)
        {
          v27 = *(_QWORD *)(v27 + 16);
          v28 = *(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16);
          if (((v28 ^ v8) & 0x3F800) == 0)
          {
            v47 = v5;
            goto LABEL_69;
          }
          if ((v28 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v29 = v8 & 0x3F800;
            v8 = *(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16);
            v4 = v5;
            v5 = v27;
            if (v29 == 120832)
              goto LABEL_33;
            return result;
          }
        }
      }
      else if ((v8 & 0x3F800) == 0x1D800)
      {
LABEL_40:
        v27 = v5;
        while (*(_DWORD *)(v27 + 8) == 1)
        {
          v27 = *(_QWORD *)(v27 + 16);
          v30 = *(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16);
          if (((v30 ^ v7) & 0x3F800) == 0)
          {
            v47 = v4;
LABEL_69:
            v48 = &v47;
            v9 = v27;
            goto LABEL_7;
          }
          if ((v30 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v31 = v7 & 0x3F800;
            v7 = *(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16);
            v5 = v4;
            v4 = v27;
            if (v31 == 120832)
              goto LABEL_40;
            return result;
          }
        }
      }
      return 0;
    }
    v47 = *((_QWORD *)a2 + 3);
    v48 = &v47;
    v9 = v4;
LABEL_7:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v9, &v48) & 1) == 0)return 0;
  }
  v10 = *((_QWORD *)this + 4);
  v11 = *((_QWORD *)a2 + 4);
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (v10 | v11)
      return 0;
  }
  else
  {
    v13 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    v14 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
    if (((v14 ^ v13) & 0x3F800) != 0)
    {
      if ((v13 & 0x3F800) == 0x1D800)
      {
LABEL_47:
        v32 = v10;
        while (*(_DWORD *)(v32 + 8) == 1)
        {
          v32 = *(_QWORD *)(v32 + 16);
          v33 = *(unsigned __int16 *)(v32 + 4) | (*(unsigned __int8 *)(v32 + 6) << 16);
          if (((v33 ^ v14) & 0x3F800) == 0)
          {
            v47 = v11;
            goto LABEL_86;
          }
          if ((v33 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v34 = v14 & 0x3F800;
            v14 = *(unsigned __int16 *)(v32 + 4) | (*(unsigned __int8 *)(v32 + 6) << 16);
            v10 = v11;
            v11 = v32;
            if (v34 == 120832)
              goto LABEL_47;
            return result;
          }
        }
      }
      else if ((v14 & 0x3F800) == 0x1D800)
      {
LABEL_55:
        v32 = v11;
        while (*(_DWORD *)(v32 + 8) == 1)
        {
          v32 = *(_QWORD *)(v32 + 16);
          v35 = *(unsigned __int16 *)(v32 + 4) | (*(unsigned __int8 *)(v32 + 6) << 16);
          if (((v35 ^ v13) & 0x3F800) == 0)
          {
            v47 = v10;
LABEL_86:
            v48 = &v47;
            v15 = v32;
            goto LABEL_14;
          }
          if ((v35 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v36 = v13 & 0x3F800;
            v13 = *(unsigned __int16 *)(v32 + 4) | (*(unsigned __int8 *)(v32 + 6) << 16);
            v11 = v10;
            v10 = v32;
            if (v36 == 120832)
              goto LABEL_55;
            return result;
          }
        }
      }
      return 0;
    }
    v47 = *((_QWORD *)a2 + 4);
    v48 = &v47;
    v15 = v10;
LABEL_14:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v15, &v48) & 1) == 0)return 0;
  }
  v16 = *((_QWORD *)this + 1);
  v17 = *((_QWORD *)a2 + 1);
  if (!v16 || !v17)
  {
    if (!(v16 | v17))
      goto LABEL_20;
    return 0;
  }
  v18 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
  v19 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
  if (((v19 ^ v18) & 0x3F800) != 0)
  {
    if ((v18 & 0x3F800) == 0x1D800)
    {
LABEL_62:
      v37 = v16;
      while (*(_DWORD *)(v37 + 8) == 1)
      {
        v37 = *(_QWORD *)(v37 + 16);
        v38 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
        if (((v38 ^ v19) & 0x3F800) == 0)
        {
          v47 = v17;
          goto LABEL_96;
        }
        if ((v38 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v39 = v19 & 0x3F800;
          v19 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
          v16 = v17;
          v17 = v37;
          if (v39 == 120832)
            goto LABEL_62;
          return result;
        }
      }
    }
    else if ((v19 & 0x3F800) == 0x1D800)
    {
LABEL_72:
      v37 = v17;
      while (*(_DWORD *)(v37 + 8) == 1)
      {
        v37 = *(_QWORD *)(v37 + 16);
        v40 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
        if (((v40 ^ v18) & 0x3F800) == 0)
        {
          v47 = v16;
LABEL_96:
          v48 = &v47;
          v20 = v37;
          goto LABEL_19;
        }
        if ((v40 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v41 = v18 & 0x3F800;
          v18 = *(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16);
          v17 = v16;
          v16 = v37;
          if (v41 == 120832)
            goto LABEL_72;
          return result;
        }
      }
    }
    return 0;
  }
  v47 = *((_QWORD *)a2 + 1);
  v48 = &v47;
  v20 = v16;
LABEL_19:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v20, &v48) & 1) == 0)return 0;
LABEL_20:
  v21 = *((_QWORD *)this + 2);
  v22 = *((_QWORD *)a2 + 2);
  result = (v21 | v22) == 0;
  if (!v21 || !v22)
    return result;
  v24 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
  v25 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
  if (((v25 ^ v24) & 0x3F800) != 0)
  {
    if ((v24 & 0x3F800) == 0x1D800)
    {
LABEL_79:
      v42 = v21;
      while (*(_DWORD *)(v42 + 8) == 1)
      {
        v42 = *(_QWORD *)(v42 + 16);
        v43 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
        if (((v43 ^ v25) & 0x3F800) == 0)
        {
          v47 = v22;
          goto LABEL_99;
        }
        if ((v43 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v44 = v25 & 0x3F800;
          v25 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
          v21 = v22;
          v22 = v42;
          if (v44 == 120832)
            goto LABEL_79;
          return result;
        }
      }
    }
    else if ((v25 & 0x3F800) == 0x1D800)
    {
LABEL_89:
      v42 = v22;
      while (*(_DWORD *)(v42 + 8) == 1)
      {
        v42 = *(_QWORD *)(v42 + 16);
        v45 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
        if (((v45 ^ v24) & 0x3F800) == 0)
        {
          v47 = v21;
LABEL_99:
          v48 = &v47;
          v26 = v42;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v26, &v48);
        }
        if ((v45 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v46 = v24 & 0x3F800;
          v24 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
          v22 = v21;
          v21 = v42;
          if (v46 == 120832)
            goto LABEL_89;
          return result;
        }
      }
    }
    return 0;
  }
  v47 = *((_QWORD *)a2 + 2);
  v48 = &v47;
  v26 = v21;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v26, &v48);
}

uint64_t WebCore::CSSXywhValue::equals(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;

  v4 = a1[1];
  v5 = a2[1];
  v6 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
  v7 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  if (((v7 ^ v6) & 0x3F800) != 0)
  {
    if ((v6 & 0x3F800) == 0x1D800)
    {
LABEL_41:
      v45 = v4;
      while (*(_DWORD *)(v45 + 8) == 1)
      {
        v45 = *(_QWORD *)(v45 + 16);
        v46 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
        if (((v46 ^ v7) & 0x3F800) == 0)
        {
          v89 = v5;
          v90 = &v89;
          v8 = v45;
          goto LABEL_3;
        }
        if ((v46 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v47 = v7 & 0x3F800;
          v7 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          v4 = v5;
          v5 = v45;
          if (v47 == 120832)
            goto LABEL_41;
          return result;
        }
      }
    }
    else if ((v7 & 0x3F800) == 0x1D800)
    {
LABEL_48:
      v48 = v5;
      while (*(_DWORD *)(v48 + 8) == 1)
      {
        v48 = *(_QWORD *)(v48 + 16);
        v49 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
        if (((v49 ^ v6) & 0x3F800) == 0)
        {
          v89 = v4;
          v90 = &v89;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v48, &v90);
          if ((_DWORD)result)
            goto LABEL_4;
          return result;
        }
        if ((v49 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v50 = v6 & 0x3F800;
          v6 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
          v5 = v4;
          v4 = v48;
          if (v50 == 120832)
            goto LABEL_48;
          return result;
        }
      }
    }
    return 0;
  }
  v89 = a2[1];
  v90 = &v89;
  v8 = v4;
LABEL_3:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, &v90) & 1) == 0)return 0;
LABEL_4:
  v9 = a1[2];
  v10 = a2[2];
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
  if (((v12 ^ v11) & 0x3F800) != 0)
  {
    if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_55:
      v51 = v9;
      while (*(_DWORD *)(v51 + 8) == 1)
      {
        v51 = *(_QWORD *)(v51 + 16);
        v52 = *(unsigned __int16 *)(v51 + 4) | (*(unsigned __int8 *)(v51 + 6) << 16);
        if (((v52 ^ v12) & 0x3F800) == 0)
        {
          v89 = v10;
          v90 = &v89;
          v13 = v51;
          goto LABEL_6;
        }
        if ((v52 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v53 = v12 & 0x3F800;
          v12 = *(unsigned __int16 *)(v51 + 4) | (*(unsigned __int8 *)(v51 + 6) << 16);
          v9 = v10;
          v10 = v51;
          if (v53 == 120832)
            goto LABEL_55;
          return result;
        }
      }
    }
    else if ((v12 & 0x3F800) == 0x1D800)
    {
LABEL_63:
      v54 = v10;
      while (*(_DWORD *)(v54 + 8) == 1)
      {
        v54 = *(_QWORD *)(v54 + 16);
        v55 = *(unsigned __int16 *)(v54 + 4) | (*(unsigned __int8 *)(v54 + 6) << 16);
        if (((v55 ^ v11) & 0x3F800) == 0)
        {
          v89 = v9;
          v90 = &v89;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v54, &v90);
          if ((_DWORD)result)
            goto LABEL_7;
          return result;
        }
        if ((v55 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v56 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v54 + 4) | (*(unsigned __int8 *)(v54 + 6) << 16);
          v10 = v9;
          v9 = v54;
          if (v56 == 120832)
            goto LABEL_63;
          return result;
        }
      }
    }
    return 0;
  }
  v89 = a2[2];
  v90 = &v89;
  v13 = v9;
LABEL_6:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, &v90) & 1) == 0)return 0;
LABEL_7:
  v14 = a1[3];
  v15 = a2[3];
  v16 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
  v17 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
  if (((v17 ^ v16) & 0x3F800) != 0)
  {
    if ((v16 & 0x3F800) == 0x1D800)
    {
LABEL_70:
      v57 = v14;
      while (*(_DWORD *)(v57 + 8) == 1)
      {
        v57 = *(_QWORD *)(v57 + 16);
        v58 = *(unsigned __int16 *)(v57 + 4) | (*(unsigned __int8 *)(v57 + 6) << 16);
        if (((v58 ^ v17) & 0x3F800) == 0)
        {
          v89 = v15;
          v90 = &v89;
          v18 = v57;
          goto LABEL_9;
        }
        if ((v58 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v59 = v17 & 0x3F800;
          v17 = *(unsigned __int16 *)(v57 + 4) | (*(unsigned __int8 *)(v57 + 6) << 16);
          v14 = v15;
          v15 = v57;
          if (v59 == 120832)
            goto LABEL_70;
          return result;
        }
      }
    }
    else if ((v17 & 0x3F800) == 0x1D800)
    {
LABEL_80:
      v60 = v15;
      while (*(_DWORD *)(v60 + 8) == 1)
      {
        v60 = *(_QWORD *)(v60 + 16);
        v61 = *(unsigned __int16 *)(v60 + 4) | (*(unsigned __int8 *)(v60 + 6) << 16);
        if (((v61 ^ v16) & 0x3F800) == 0)
        {
          v89 = v14;
          v90 = &v89;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v60, &v90);
          if ((_DWORD)result)
            goto LABEL_10;
          return result;
        }
        if ((v61 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v62 = v16 & 0x3F800;
          v16 = *(unsigned __int16 *)(v60 + 4) | (*(unsigned __int8 *)(v60 + 6) << 16);
          v15 = v14;
          v14 = v60;
          if (v62 == 120832)
            goto LABEL_80;
          return result;
        }
      }
    }
    return 0;
  }
  v89 = a2[3];
  v90 = &v89;
  v18 = v14;
LABEL_9:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v18, &v90) & 1) == 0)return 0;
LABEL_10:
  v19 = a1[4];
  v20 = a2[4];
  v21 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
  v22 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
  if (((v22 ^ v21) & 0x3F800) != 0)
  {
    if ((v21 & 0x3F800) == 0x1D800)
    {
LABEL_87:
      v63 = v19;
      while (*(_DWORD *)(v63 + 8) == 1)
      {
        v63 = *(_QWORD *)(v63 + 16);
        v64 = *(unsigned __int16 *)(v63 + 4) | (*(unsigned __int8 *)(v63 + 6) << 16);
        if (((v64 ^ v22) & 0x3F800) == 0)
        {
          v89 = v20;
          v90 = &v89;
          v23 = v63;
          goto LABEL_12;
        }
        if ((v64 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v65 = v22 & 0x3F800;
          v22 = *(unsigned __int16 *)(v63 + 4) | (*(unsigned __int8 *)(v63 + 6) << 16);
          v19 = v20;
          v20 = v63;
          if (v65 == 120832)
            goto LABEL_87;
          return result;
        }
      }
    }
    else if ((v22 & 0x3F800) == 0x1D800)
    {
LABEL_97:
      v66 = v20;
      while (*(_DWORD *)(v66 + 8) == 1)
      {
        v66 = *(_QWORD *)(v66 + 16);
        v67 = *(unsigned __int16 *)(v66 + 4) | (*(unsigned __int8 *)(v66 + 6) << 16);
        if (((v67 ^ v21) & 0x3F800) == 0)
        {
          v89 = v19;
          v90 = &v89;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v66, &v90);
          if ((_DWORD)result)
            goto LABEL_13;
          return result;
        }
        if ((v67 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v68 = v21 & 0x3F800;
          v21 = *(unsigned __int16 *)(v66 + 4) | (*(unsigned __int8 *)(v66 + 6) << 16);
          v20 = v19;
          v19 = v66;
          if (v68 == 120832)
            goto LABEL_97;
          return result;
        }
      }
    }
    return 0;
  }
  v89 = a2[4];
  v90 = &v89;
  v23 = v19;
LABEL_12:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v23, &v90) & 1) == 0)return 0;
LABEL_13:
  v24 = a1[5];
  v25 = a2[5];
  if (v24 && v25)
  {
    v26 = *(unsigned __int16 *)(v24 + 4) | (*(unsigned __int8 *)(v24 + 6) << 16);
    v27 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
    if (((v27 ^ v26) & 0x3F800) != 0)
    {
      if ((v26 & 0x3F800) == 0x1D800)
      {
LABEL_104:
        v69 = v24;
        while (*(_DWORD *)(v69 + 8) == 1)
        {
          v69 = *(_QWORD *)(v69 + 16);
          v70 = *(unsigned __int16 *)(v69 + 4) | (*(unsigned __int8 *)(v69 + 6) << 16);
          if (((v70 ^ v27) & 0x3F800) == 0)
          {
            v89 = v25;
            goto LABEL_145;
          }
          if ((v70 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v71 = v27 & 0x3F800;
            v27 = *(unsigned __int16 *)(v69 + 4) | (*(unsigned __int8 *)(v69 + 6) << 16);
            v24 = v25;
            v25 = v69;
            if (v71 == 120832)
              goto LABEL_104;
            return result;
          }
        }
      }
      else if ((v27 & 0x3F800) == 0x1D800)
      {
LABEL_114:
        v69 = v25;
        while (*(_DWORD *)(v69 + 8) == 1)
        {
          v69 = *(_QWORD *)(v69 + 16);
          v72 = *(unsigned __int16 *)(v69 + 4) | (*(unsigned __int8 *)(v69 + 6) << 16);
          if (((v72 ^ v26) & 0x3F800) == 0)
          {
            v89 = v24;
LABEL_145:
            v90 = &v89;
            v28 = v69;
            goto LABEL_17;
          }
          if ((v72 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v73 = v26 & 0x3F800;
            v26 = *(unsigned __int16 *)(v69 + 4) | (*(unsigned __int8 *)(v69 + 6) << 16);
            v25 = v24;
            v24 = v69;
            if (v73 == 120832)
              goto LABEL_114;
            return result;
          }
        }
      }
      return 0;
    }
    v89 = a2[5];
    v90 = &v89;
    v28 = v24;
LABEL_17:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v28, &v90) & 1) == 0)return 0;
  }
  else if (v24 | v25)
  {
    return 0;
  }
  v29 = a1[6];
  v30 = a2[6];
  if (v29 && v30)
  {
    v31 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
    v32 = *(unsigned __int16 *)(v30 + 4) | (*(unsigned __int8 *)(v30 + 6) << 16);
    if (((v32 ^ v31) & 0x3F800) != 0)
    {
      if ((v31 & 0x3F800) == 0x1D800)
      {
LABEL_121:
        v74 = v29;
        while (*(_DWORD *)(v74 + 8) == 1)
        {
          v74 = *(_QWORD *)(v74 + 16);
          v75 = *(unsigned __int16 *)(v74 + 4) | (*(unsigned __int8 *)(v74 + 6) << 16);
          if (((v75 ^ v32) & 0x3F800) == 0)
          {
            v89 = v30;
            goto LABEL_162;
          }
          if ((v75 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v76 = v32 & 0x3F800;
            v32 = *(unsigned __int16 *)(v74 + 4) | (*(unsigned __int8 *)(v74 + 6) << 16);
            v29 = v30;
            v30 = v74;
            if (v76 == 120832)
              goto LABEL_121;
            return result;
          }
        }
      }
      else if ((v32 & 0x3F800) == 0x1D800)
      {
LABEL_131:
        v74 = v30;
        while (*(_DWORD *)(v74 + 8) == 1)
        {
          v74 = *(_QWORD *)(v74 + 16);
          v77 = *(unsigned __int16 *)(v74 + 4) | (*(unsigned __int8 *)(v74 + 6) << 16);
          if (((v77 ^ v31) & 0x3F800) == 0)
          {
            v89 = v29;
LABEL_162:
            v90 = &v89;
            v33 = v74;
            goto LABEL_22;
          }
          if ((v77 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v78 = v31 & 0x3F800;
            v31 = *(unsigned __int16 *)(v74 + 4) | (*(unsigned __int8 *)(v74 + 6) << 16);
            v30 = v29;
            v29 = v74;
            if (v78 == 120832)
              goto LABEL_131;
            return result;
          }
        }
      }
      return 0;
    }
    v89 = a2[6];
    v90 = &v89;
    v33 = v29;
LABEL_22:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v33, &v90) & 1) == 0)return 0;
  }
  else if (v29 | v30)
  {
    return 0;
  }
  v34 = a1[7];
  v35 = a2[7];
  if (!v34 || !v35)
  {
    if (!(v34 | v35))
      goto LABEL_28;
    return 0;
  }
  v36 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
  v37 = *(unsigned __int16 *)(v35 + 4) | (*(unsigned __int8 *)(v35 + 6) << 16);
  if (((v37 ^ v36) & 0x3F800) != 0)
  {
    if ((v36 & 0x3F800) == 0x1D800)
    {
LABEL_138:
      v79 = v34;
      while (*(_DWORD *)(v79 + 8) == 1)
      {
        v79 = *(_QWORD *)(v79 + 16);
        v80 = *(unsigned __int16 *)(v79 + 4) | (*(unsigned __int8 *)(v79 + 6) << 16);
        if (((v80 ^ v37) & 0x3F800) == 0)
        {
          v89 = v35;
          goto LABEL_172;
        }
        if ((v80 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v81 = v37 & 0x3F800;
          v37 = *(unsigned __int16 *)(v79 + 4) | (*(unsigned __int8 *)(v79 + 6) << 16);
          v34 = v35;
          v35 = v79;
          if (v81 == 120832)
            goto LABEL_138;
          return result;
        }
      }
    }
    else if ((v37 & 0x3F800) == 0x1D800)
    {
LABEL_148:
      v79 = v35;
      while (*(_DWORD *)(v79 + 8) == 1)
      {
        v79 = *(_QWORD *)(v79 + 16);
        v82 = *(unsigned __int16 *)(v79 + 4) | (*(unsigned __int8 *)(v79 + 6) << 16);
        if (((v82 ^ v36) & 0x3F800) == 0)
        {
          v89 = v34;
LABEL_172:
          v90 = &v89;
          v38 = v79;
          goto LABEL_27;
        }
        if ((v82 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v83 = v36 & 0x3F800;
          v36 = *(unsigned __int16 *)(v79 + 4) | (*(unsigned __int8 *)(v79 + 6) << 16);
          v35 = v34;
          v34 = v79;
          if (v83 == 120832)
            goto LABEL_148;
          return result;
        }
      }
    }
    return 0;
  }
  v89 = a2[7];
  v90 = &v89;
  v38 = v34;
LABEL_27:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v38, &v90) & 1) == 0)return 0;
LABEL_28:
  v39 = a1[8];
  v40 = a2[8];
  result = (v39 | v40) == 0;
  if (!v39 || !v40)
    return result;
  v42 = *(unsigned __int16 *)(v39 + 4) | (*(unsigned __int8 *)(v39 + 6) << 16);
  v43 = *(unsigned __int16 *)(v40 + 4) | (*(unsigned __int8 *)(v40 + 6) << 16);
  if (((v43 ^ v42) & 0x3F800) != 0)
  {
    if ((v42 & 0x3F800) == 0x1D800)
    {
LABEL_155:
      v84 = v39;
      while (*(_DWORD *)(v84 + 8) == 1)
      {
        v84 = *(_QWORD *)(v84 + 16);
        v85 = *(unsigned __int16 *)(v84 + 4) | (*(unsigned __int8 *)(v84 + 6) << 16);
        if (((v85 ^ v43) & 0x3F800) == 0)
        {
          v89 = v40;
          goto LABEL_175;
        }
        if ((v85 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v86 = v43 & 0x3F800;
          v43 = *(unsigned __int16 *)(v84 + 4) | (*(unsigned __int8 *)(v84 + 6) << 16);
          v39 = v40;
          v40 = v84;
          if (v86 == 120832)
            goto LABEL_155;
          return result;
        }
      }
    }
    else if ((v43 & 0x3F800) == 0x1D800)
    {
LABEL_165:
      v84 = v40;
      while (*(_DWORD *)(v84 + 8) == 1)
      {
        v84 = *(_QWORD *)(v84 + 16);
        v87 = *(unsigned __int16 *)(v84 + 4) | (*(unsigned __int8 *)(v84 + 6) << 16);
        if (((v87 ^ v42) & 0x3F800) == 0)
        {
          v89 = v39;
LABEL_175:
          v90 = &v89;
          v44 = v84;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v44, &v90);
        }
        if ((v87 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v88 = v42 & 0x3F800;
          v42 = *(unsigned __int16 *)(v84 + 4) | (*(unsigned __int8 *)(v84 + 6) << 16);
          v40 = v39;
          v39 = v84;
          if (v88 == 120832)
            goto LABEL_165;
          return result;
        }
      }
    }
    return 0;
  }
  v89 = a2[8];
  v90 = &v89;
  v44 = v39;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v44, &v90);
}

WTF::StringImpl *WebCore::CSSXywhValue::customCSSText@<X0>(WTF::StringImpl **this@<X0>, WTF::String *a2@<X3>, WTF::StringImpl **a3@<X8>)
{
  WTF::String *v5;
  WTF::String *v6;
  WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  int8x16_t *v51;
  int v52;

  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  WebCore::updateCornerRadiusWidthAndHeight(this[5], &v39, &v38, a2);
  WebCore::updateCornerRadiusWidthAndHeight(this[6], &v37, &v36, v5);
  WebCore::updateCornerRadiusWidthAndHeight(this[7], &v35, &v34, v6);
  WebCore::updateCornerRadiusWidthAndHeight(this[8], &v33, &v32, v7);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v31);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v30);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v29);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v28);
  v40 = 0;
  v41 = 0;
  v43 = 1;
  v42 = 0;
  v50 = v31;
  v51 = (int8x16_t *)"xywh(";
  v52 = 5;
  v49 = 32;
  v48 = v30;
  v47 = 32;
  v46 = v29;
  v45 = 32;
  v44 = v28;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v40, &v51, (uint64_t *)&v50, &v49, (uint64_t *)&v48, &v47, (uint64_t *)&v46, &v45, (uint64_t *)&v44);
  WebCore::buildRadiiString((uint64_t)&v40, &v39, &v38, &v37, &v36, &v35, &v34, &v33, &v32, v27);
  LOBYTE(v51) = 41;
  if (!v41 || (v9 = v42, v42 >= *((_DWORD *)v41 + 1)) || v40)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v10 = *((_DWORD *)v41 + 4);
    v11 = *((_QWORD *)v41 + 1);
    ++v42;
    if ((v10 & 4) != 0)
      *(_BYTE *)(v11 + v9) = 41;
    else
      *(_WORD *)(v11 + 2 * v9) = 41;
  }
  v12 = v40;
  if (v40
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v40),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v40),
        (v12 = v40) != 0))
  {
    *(_DWORD *)v12 += 2;
  }
  *a3 = v12;
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v40;
  v40 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v30;
  v30 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v8);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v8);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v8);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v8);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v8);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v35;
  v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v8);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v8);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v8);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v8);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::updateCornerRadiusWidthAndHeight(WTF::StringImpl *this, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::String *a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (!this)
    return this;
  v4 = this;
  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0x1B800)
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v16);
  v8 = v16;
  v16 = 0;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2)
    {
LABEL_5:
      *(_DWORD *)v9 = v10;
      goto LABEL_6;
    }
    WTF::StringImpl::destroy(v9, v7);
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
        goto LABEL_5;
      WTF::StringImpl::destroy(v9, v14);
    }
  }
LABEL_6:
  if (((*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) & 0x3F800) != 0x1B800)
  {
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x195788AA0);
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v16);
  v12 = v16;
  v16 = 0;
  this = *a3;
  *a3 = v12;
  if (!this)
    return this;
  v13 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this != 2)
    goto LABEL_9;
  WTF::StringImpl::destroy(this, v11);
  this = v16;
  v16 = 0;
  if (this)
  {
    v13 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
LABEL_9:
    *(_DWORD *)this = v13;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSRectShapeValue::customCSSText@<X0>(WTF::StringImpl **this@<X0>, WTF::String *a2@<X3>, WTF::StringImpl **a3@<X8>)
{
  WTF::String *v5;
  WTF::String *v6;
  WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  int8x16_t *v51;
  int v52;

  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  WebCore::updateCornerRadiusWidthAndHeight(this[5], &v39, &v38, a2);
  WebCore::updateCornerRadiusWidthAndHeight(this[6], &v37, &v36, v5);
  WebCore::updateCornerRadiusWidthAndHeight(this[7], &v35, &v34, v6);
  WebCore::updateCornerRadiusWidthAndHeight(this[8], &v33, &v32, v7);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v31);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v30);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v29);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v28);
  v40 = 0;
  v41 = 0;
  v43 = 1;
  v42 = 0;
  v50 = v31;
  v51 = (int8x16_t *)"rect(";
  v52 = 5;
  v49 = 32;
  v48 = v30;
  v47 = 32;
  v46 = v29;
  v45 = 32;
  v44 = v28;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v40, &v51, (uint64_t *)&v50, &v49, (uint64_t *)&v48, &v47, (uint64_t *)&v46, &v45, (uint64_t *)&v44);
  WebCore::buildRadiiString((uint64_t)&v40, &v39, &v38, &v37, &v36, &v35, &v34, &v33, &v32, v27);
  LOBYTE(v51) = 41;
  if (!v41 || (v9 = v42, v42 >= *((_DWORD *)v41 + 1)) || v40)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v10 = *((_DWORD *)v41 + 4);
    v11 = *((_QWORD *)v41 + 1);
    ++v42;
    if ((v10 & 4) != 0)
      *(_BYTE *)(v11 + v9) = 41;
    else
      *(_WORD *)(v11 + 2 * v9) = 41;
  }
  v12 = v40;
  if (v40
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v40),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v40),
        (v12 = v40) != 0))
  {
    *(_DWORD *)v12 += 2;
  }
  *a3 = v12;
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v40;
  v40 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v30;
  v30 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v8);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v8);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v8);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v8);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v8);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v35;
  v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v8);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v8);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v8);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v8);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPathValue::customCSSText@<X0>(WebCore::CSSPathValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringBuilder *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;

  v17 = 0;
  v3 = *((_QWORD *)this + 2);
  v4 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v4)
  {
    v19 = (WTF::StringImpl *)off_1E346F660;
    v20 = 0;
    v21 = *(_QWORD *)(v3 + 8);
    v22 = v21 + v4;
    WebCore::SVGPathParser::parseToString((uint64_t)&v19, &v17, 1, 1);
    if (v20)
    {
      *((_QWORD *)v20 + 1) = 0;
      v6 = v20;
      v20 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, v5);
        else
          --*(_DWORD *)v6;
      }
    }
  }
  v19 = 0;
  v20 = 0;
  LODWORD(v21) = 0;
  BYTE4(v21) = 1;
  WTF::StringBuilder::append();
  WebCore::serializeString((uint64_t)&v17, (const WTF::String *)&v19, v7);
  v18 = 41;
  if (v20 && ((v9 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v10 = v19 == 0) : (v10 = 0), v10))
  {
    v15 = *((_DWORD *)v20 + 4);
    v16 = *((_QWORD *)v20 + 1);
    LODWORD(v21) = v21 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v9) = 41;
    else
      *(_WORD *)(v16 + 2 * v9) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v11 = v19;
  if (v19
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
        (v11 = v19) != 0))
  {
    *(_DWORD *)v11 += 2;
  }
  *a2 = v11;
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPolygonValue::CSSPolygonValue(uint64_t a1, uint64_t a2, char a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  int v16;
  WTF *v17;
  uint64_t v18;
  _BYTE v19[32];

  v17 = (WTF *)v19;
  v18 = 4;
  v7 = (void *)(a2 + 16);
  v6 = *(void **)a2;
  if (v6 == v7)
  {
    v8 = *(unsigned int *)(a2 + 12);
    memcpy(v19, v6, 8 * v8);
  }
  else
  {
    *(_QWORD *)a2 = v7;
    v17 = (WTF *)v6;
    v16 = *(_DWORD *)(a2 + 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 8) = 4;
    LODWORD(v18) = v16;
  }
  *(_DWORD *)(a2 + 12) = 0;
  HIDWORD(v18) = v8;
  WebCore::CSSValueContainingVector::CSSValueContainingVector(a1, 64, 0, (unsigned int *)&v17);
  if (HIDWORD(v18))
  {
    v10 = v17;
    v11 = 8 * HIDWORD(v18);
    do
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
        else
          *v12 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  v13 = v17;
  if (v19 != (_BYTE *)v17 && v17 != 0)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v13, v9);
  }
  *(_BYTE *)(a1 + 56) = a3;
  return a1;
}

WTF::StringImpl *WebCore::CSSPolygonValue::customCSSText@<X0>(WebCore::CSSPolygonValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  const char *v29;
  int v30;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  WTF::StringBuilder::append();
  if (*((_DWORD *)this + 2))
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v21);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
    v30 = 0;
    v28 = v21;
    v29 = "";
    v27 = 32;
    v26 = v20;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v22, (uint64_t)&v29, (uint64_t *)&v28, &v27, (uint64_t *)&v26);
    v5 = v20;
    v20 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    if (*((_DWORD *)this + 2) >= 3u)
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v21);
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
      v30 = 2;
      v28 = v21;
      v29 = ", ";
      v27 = 32;
      v26 = v20;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v22, (uint64_t)&v29, (uint64_t *)&v28, &v27, (uint64_t *)&v26);
      v7 = v20;
      v20 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v4);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = v21;
      v21 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v4);
        else
          *(_DWORD *)v8 -= 2;
      }
      if (*((_DWORD *)this + 2) >= 5u)
      {
        v9 = 0;
        do
        {
          _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v21);
          _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
          v30 = 2;
          v28 = v21;
          v29 = ", ";
          v27 = 32;
          v26 = v20;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v22, (uint64_t)&v29, (uint64_t *)&v28, &v27, (uint64_t *)&v26);
          v10 = v20;
          v20 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = v21;
          v21 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v4);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v9 + 6;
          v9 += 2;
        }
        while (v12 < *((unsigned int *)this + 2));
      }
    }
  }
  LOBYTE(v29) = 41;
  if (v23 && ((v13 = v24, v24 < *((_DWORD *)v23 + 1)) ? (v14 = v22 == 0) : (v14 = 0), v14))
  {
    v18 = *((_DWORD *)v23 + 4);
    v19 = *((_QWORD *)v23 + 1);
    ++v24;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v13) = 41;
    else
      *(_WORD *)(v19 + 2 * v13) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v15 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (v15 = v22) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a2 = v15;
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v4);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSInsetShapeValue::CSSInsetShapeValue(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)result = 2;
  v9 = (((*(unsigned __int8 *)(result + 6) >> 2) & 0x3F) << 18) | 0x15000;
  *(_WORD *)(result + 4) = 20480;
  *(_BYTE *)(result + 6) = BYTE2(v9);
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v10;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v11;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v12;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 32) = v13;
  v14 = *a6;
  *a6 = 0;
  *(_QWORD *)(result + 40) = v14;
  v15 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 48) = v15;
  v16 = *a8;
  *a8 = 0;
  *(_QWORD *)(result + 56) = v16;
  v17 = *a9;
  *a9 = 0;
  *(_QWORD *)(result + 64) = v17;
  return result;
}

WTF::StringImpl *WebCore::CSSInsetShapeValue::customCSSText@<X0>(WTF::StringImpl **this@<X0>, WTF::String *a2@<X3>, _QWORD *a3@<X8>)
{
  WTF::String *v5;
  WTF::String *v6;
  WTF::String *v7;
  const WTF::StringImpl *v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  const WTF::String *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;

  v42 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  WebCore::updateCornerRadiusWidthAndHeight(this[5], &v42, &v41, a2);
  WebCore::updateCornerRadiusWidthAndHeight(this[6], &v40, &v39, v5);
  WebCore::updateCornerRadiusWidthAndHeight(this[7], &v38, &v37, v6);
  WebCore::updateCornerRadiusWidthAndHeight(this[8], &v36, &v35, v7);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v34);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v33);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v32);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v31);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 1;
  v49 = 6;
  v47 = v34;
  v48 = (WTF::StringImpl *)"inset(";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v43, (uint64_t)&v48, (uint64_t *)&v47);
  if (v31)
    v9 = WTF::equal(v31, v33, v8) ^ 1;
  else
    v9 = 0;
  if (v32)
    v10 = WTF::equal(v32, v34, v8) ^ 1 | v9;
  else
    v10 = 0;
  if (v33 && (WTF::equal(v33, v34, v8) ^ 1 | v10) == 1)
  {
    LOBYTE(v47) = 32;
    v48 = v33;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v43, (char *)&v47, (uint64_t *)&v48);
  }
  if (v10)
  {
    LOBYTE(v47) = 32;
    v48 = v32;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v43, (char *)&v47, (uint64_t *)&v48);
  }
  if (v9)
  {
    LOBYTE(v47) = 32;
    v48 = v31;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v43, (char *)&v47, (uint64_t *)&v48);
  }
  WebCore::buildRadiiString((uint64_t)&v43, &v42, &v41, &v40, &v39, &v38, &v37, &v36, &v35, v30);
  LOBYTE(v48) = 41;
  if (!v44 || (v12 = v45, v45 >= *(_DWORD *)(v44 + 4)) || v43)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v13 = *(_DWORD *)(v44 + 16);
    v14 = *(_QWORD *)(v44 + 8);
    ++v45;
    if ((v13 & 4) != 0)
      *(_BYTE *)(v14 + v12) = 41;
    else
      *(_WORD *)(v14 + 2 * v12) = 41;
  }
  v15 = v43;
  if (v43
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v43),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v43),
        (v15 = v43) != 0))
  {
    *v15 += 2;
  }
  *a3 = v15;
  v16 = (WTF::StringImpl *)v44;
  v44 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)v43;
  v43 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v11);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v11);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v11);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v35;
  v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v11);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v11);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v11);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v11);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v39;
  v39 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v11);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v40;
  v40 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v11);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v11);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::createBorderImageValue@<X0>(_DWORD **a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, WTF **a5@<X4>, uint64_t *a6@<X8>)
{
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _DWORD *v18;
  WTF *v19;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *result;
  uint64_t *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  _BYTE v49[32];
  WTF *v50;
  int v51;
  unsigned int v52;
  _BYTE v53[32];
  uint64_t v54;
  WTF *v55;
  int v56;
  unsigned int v57;
  _QWORD v58[4];
  WTF *v59;
  uint64_t v60;
  _QWORD v61[4];

  v59 = (WTF *)v61;
  v60 = 4;
  v8 = *a1;
  if (*a1)
  {
    *v8 += 2;
    v61[0] = v8;
    v9 = 1;
    HIDWORD(v60) = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  if (*a3 | *a4)
  {
    v55 = (WTF *)v58;
    v56 = 4;
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      v58[0] = v11;
      v10 = *a3;
      v12 = 1;
      if (!*a3)
      {
LABEL_8:
        v13 = *a4;
        if (*a4)
        {
          *a4 = 0;
          v58[v12++] = v13;
        }
        v50 = (WTF *)v53;
        v51 = 4;
        memcpy(v53, v58, 8 * v12);
        v57 = 0;
        v52 = v12;
        WebCore::CSSValueList::createSlashSeparated((uint64_t)&v50, &v54);
        v14 = HIDWORD(v60);
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1);
          v14 = HIDWORD(v60);
        }
        *((_QWORD *)v59 + HIDWORD(v60)) = v54;
        HIDWORD(v60) = v14 + 1;
        if (v52)
        {
          v16 = v50;
          v17 = 8 * v52;
          do
          {
            v18 = *(_DWORD **)v16;
            *(_QWORD *)v16 = 0;
            if (v18)
            {
              if (*v18 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, a2);
              else
                *v18 -= 2;
            }
            v16 = (WTF *)((char *)v16 + 8);
            v17 -= 8;
          }
          while (v17);
        }
        v19 = v50;
        if (v53 != (_BYTE *)v50 && v50 != 0)
        {
          v50 = 0;
          v51 = 0;
          WTF::fastFree(v19, a2);
        }
        if (v57)
        {
          v21 = v55;
          v22 = 8 * v57;
          do
          {
            v23 = *(_DWORD **)v21;
            *(_QWORD *)v21 = 0;
            if (v23)
            {
              if (*v23 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, a2);
              else
                *v23 -= 2;
            }
            v21 = (WTF *)((char *)v21 + 8);
            v22 -= 8;
          }
          while (v22);
        }
        v24 = v55;
        if (v58 != (_QWORD *)v55 && v55 != 0)
        {
          v55 = 0;
          v56 = 0;
          WTF::fastFree(v24, a2);
        }
        goto LABEL_38;
      }
    }
    else
    {
      v12 = 0;
      if (!v10)
        goto LABEL_8;
    }
    *a3 = 0;
    v58[v12++] = v10;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    v61[v9] = v15;
    HIDWORD(v60) = v9 + 1;
  }
LABEL_38:
  v26 = *a5;
  if (*a5)
  {
    v55 = *a5;
    *a5 = 0;
    LODWORD(v27) = HIDWORD(v60);
    if (HIDWORD(v60) == (_DWORD)v60)
    {
      v42 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1, (unint64_t)&v55);
      v27 = HIDWORD(v60);
      v43 = v59;
      v44 = *v42;
      *v42 = 0;
      *((_QWORD *)v43 + v27) = v44;
    }
    else
    {
      v55 = 0;
      *((_QWORD *)v59 + HIDWORD(v60)) = v26;
    }
    HIDWORD(v60) = v27 + 1;
    v28 = v55;
    v55 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, a2);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  v46 = (WTF *)v49;
  v47 = 4;
  v29 = v59;
  if (v59 == (WTF *)v61)
  {
    v30 = HIDWORD(v60);
    memcpy(v49, v61, 8 * HIDWORD(v60));
  }
  else
  {
    v59 = (WTF *)v61;
    v46 = v29;
    v45 = v60;
    v30 = HIDWORD(v60);
    LODWORD(v60) = 4;
    v47 = v45;
  }
  HIDWORD(v60) = 0;
  v48 = v30;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v46, a6);
  if (v48)
  {
    v32 = v46;
    v33 = 8 * v48;
    do
    {
      v34 = *(_DWORD **)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v31);
        else
          *v34 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  v35 = v46;
  if (v49 != (_BYTE *)v46 && v46 != 0)
  {
    v46 = 0;
    v47 = 0;
    WTF::fastFree(v35, v31);
  }
  if (HIDWORD(v60))
  {
    v37 = v59;
    v38 = 8 * HIDWORD(v60);
    do
    {
      v39 = *(_DWORD **)v37;
      *(_QWORD *)v37 = 0;
      if (v39)
      {
        if (*v39 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v31);
        else
          *v39 -= 2;
      }
      v37 = (WTF *)((char *)v37 + 8);
      v38 -= 8;
    }
    while (v38);
  }
  result = v59;
  if (v61 != (_QWORD *)v59 && v59 != 0)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    return (WTF *)WTF::fastFree(result, v31);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSBorderImageSliceValue::customCSSText@<X0>(WebCore::CSSBorderImageSliceValue *this@<X0>, const WTF::StringImpl **a2@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (!*((_BYTE *)this + 40))
    return WebCore::Quad::cssText(a2);
  WebCore::Quad::cssText(&v8);
  if (!v8)
  {
    v4 = 5;
LABEL_6:
    v5 = 1;
    goto LABEL_7;
  }
  v3 = *((_DWORD *)v8 + 1);
  if (v3 < 0 || (v4 = (v3 + 5), __OFADD__(v3, 5)))
  {
    *a2 = 0;
    goto LABEL_16;
  }
  if ((*((_BYTE *)v8 + 16) & 4) != 0)
    goto LABEL_6;
  v5 = 0;
LABEL_7:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, v5, (uint64_t)v8, (int8x16_t *)" fill", 5u, a2);
  if (!*a2)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x195789EF0);
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Quad::cssText@<X0>(const WTF::StringImpl **a1@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v11);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v10);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v9);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v8);
  WebCore::Quad::serialize(&v11, &v10, &v9, &v8, a1);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

int *WebCore::CSSBorderImageWidthValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int *result;
  _DWORD *v11;
  char v12;
  int v13;

  v7 = WTF::fastCompactMalloc((WTF *)0x30);
  v8 = *(_DWORD **)a1;
  v9 = *(_DWORD **)(a1 + 8);
  *v8 = **(_DWORD **)a1 + 2;
  *v9 += 2;
  v11 = *(_DWORD **)(a1 + 16);
  result = *(int **)(a1 + 24);
  *v11 += 2;
  *result += 2;
  *(_DWORD *)v7 = 2;
  v12 = *(_BYTE *)(v7 + 6);
  *(_WORD *)(v7 + 4) = -16384;
  *(_BYTE *)(v7 + 6) = v12 & 0xFC;
  *v8 += 2;
  *v9 += 2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = v9;
  *v11 += 2;
  v13 = *result;
  *result += 2;
  *(_QWORD *)(v7 + 24) = v11;
  *(_QWORD *)(v7 + 32) = result;
  *(_BYTE *)(v7 + 40) = a2;
  *a3 = v7;
  if (v13)
    *result = v13;
  else
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
  if (*v11 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
  else
    *v11 -= 2;
  if (*v9 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v6);
  else
    *v9 -= 2;
  if (*v8 == 2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
  *v8 -= 2;
  return result;
}

unint64_t WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  int v11;
  int v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = 8 * v5;
      v9 = v4;
      while (1)
      {
        *(_DWORD *)v6 = 0;
        *(_WORD *)(v6 + 5) = 0;
        v10 = *((unsigned __int8 *)v9 + 4);
        *(_BYTE *)(v6 + 4) = v10;
        *(_BYTE *)(v6 + 5) = *((_BYTE *)v9 + 5);
        if (v10 - 2 >= 9)
          break;
        v11 = *((unsigned __int8 *)v9 + 6);
        *(_BYTE *)(v6 + 6) = v11;
        if (!v11)
        {
          v12 = *(_DWORD *)v9;
LABEL_11:
          *(_DWORD *)v6 = v12;
          goto LABEL_8;
        }
        *(_DWORD *)v6 = *(_DWORD *)v9;
LABEL_8:
        *((_BYTE *)v9 + 4) = 0;
        v6 += 8;
        v9 = (WTF *)((char *)v9 + 8);
        v8 -= 8;
        if (!v8)
          goto LABEL_17;
      }
      if (v10 > 0xD)
        goto LABEL_8;
      if (((1 << v10) & 0x3003) != 0)
      {
        *(_DWORD *)v6 = 0;
        goto LABEL_8;
      }
      if (v10 != 11)
        goto LABEL_8;
      v12 = *(_DWORD *)v9;
      *(_DWORD *)v9 = 0;
      goto LABEL_11;
    }
LABEL_17:
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

float WebCore::CSSPrimitiveValue::convertToLength<27>(uint64_t a1, WebCore::CSSCalcValue **this, const WebCore::CSSToLengthConversionData *a3)
{
  void *v6;
  __n128 v7;
  BOOL v8;
  WTF *v9;
  WTF *v10;
  __n128 v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unsigned __int8 *v15;
  int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  double v21;
  WTF *v22[2];
  WTF *v23[2];
  __int16 v24;

  v24 = 0;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)v23 = 0u;
  WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)this, (WebCore::ComputedStyleDependencies *)v22);
  v8 = (!HIDWORD(v23[1]) || *((_QWORD *)a3 + 1))
    && (!HIDWORD(v22[1]) || *(_QWORD *)a3)
    && (!(_BYTE)v24 || *((_QWORD *)a3 + 4))
    && (!HIBYTE(v24) || *((_QWORD *)a3 + 3));
  v9 = v23[0];
  if (v23[0])
  {
    v23[0] = 0;
    LODWORD(v23[1]) = 0;
    WTF::fastFree(v9, v6);
  }
  v10 = v22[0];
  if (v22[0])
  {
    v22[0] = 0;
    LODWORD(v22[1]) = 0;
    WTF::fastFree(v10, v6);
  }
  if (!v8)
    goto LABEL_31;
  if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)this))
  {
    v7.n128_f32[0] = WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)this, (uint64_t)a3, a1, v11);
    return v7.n128_f32[0];
  }
  if (!WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)this))
  {
    v12 = *((_WORD *)this + 2);
    v13 = v12 & 0x7F;
    if ((v13 - 63) > 0x11 || ((1 << (v13 - 63)) & 0x34001) == 0)
    {
      if (v13 == 73)
      {
        v15 = (unsigned __int8 *)*((_QWORD *)this[1] + 1);
        v16 = v15[12];
        if (v16 != 1)
        {
          if (v16 == 2)
            goto LABEL_17;
          if ((v16 - 5) > 3)
            goto LABEL_29;
        }
        v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v15 + 72))(v15);
        v12 = *((_WORD *)this + 2);
      }
      if (v13 == 3)
      {
LABEL_17:
        if ((v12 & 0x7F) == 0x49)
        {
          v18 = (uint64_t)this[1];
          v22[0] = 0;
          v21 = WebCore::CSSCalcValue::doubleValue(v18, (uint64_t)v22);
          if (v22[0])
            WTF::fastFree((WTF *)((char *)v22[0] - 16), v19);
          v7.n128_f64[0] = v21;
        }
        else
        {
          v7.n128_u64[0] = (unint64_t)this[1];
        }
        v7.n128_f32[0] = v7.n128_f64[0];
        *(_DWORD *)a1 = v7.n128_u32[0];
        v14 = 3;
        goto LABEL_20;
      }
    }
LABEL_29:
    if ((v12 & 0x7F) == 0x49)
    {
      WebCore::CSSCalcValue::createCalculationValue(this[1], a3, v22);
      WebCore::Length::Length(a1, v22);
      WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(v22, v17);
      return v7.n128_f32[0];
    }
LABEL_31:
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 13;
    *(_BYTE *)(a1 + 6) = 0;
    return v7.n128_f32[0];
  }
  v7.n128_f32[0] = WebCore::CSSPrimitiveValue::computeLength<double>((uint64_t)this, (uint64_t)a3, v7);
  *(_DWORD *)a1 = v7.n128_u32[0];
  v14 = 4;
LABEL_20:
  *(_WORD *)(a1 + 4) = v14;
  *(_BYTE *)(a1 + 6) = 1;
  return v7.n128_f32[0];
}

void std::default_delete<WebCore::SVGPathByteStream>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  char v7;

  if (this)
  {
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v4 = *(unsigned int *)(v3 + 88);
        if ((_DWORD)v4 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v4])(&v7, v3 + 32);
        *(_DWORD *)(v3 + 88) = -1;
        v5 = *(WTF **)(v3 + 8);
        if (v5)
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 16) = 0;
          WTF::fastFree(v5, this);
        }
        WTF::fastFree((WTF *)v3, this);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    if (*(_QWORD *)this)
    {
      *(_QWORD *)(*(_QWORD *)this + 8) = 0;
      v6 = *(WTF **)this;
      *(_QWORD *)this = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, this);
        else
          --*(_DWORD *)v6;
      }
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WebCore::buildRadiiString(uint64_t this, const WTF::StringImpl **a2, const WTF::StringImpl **a3, WTF **a4, WTF **a5, WTF **a6, WTF **a7, const WTF::StringImpl **a8, const WTF::StringImpl **a9, const WTF::String *a10)
{
  BOOL v10;
  WTF::StringBuilder *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  unint64_t v21;
  WTF *v22;
  WTF *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  if (*a2)
    v10 = *a3 == 0;
  else
    v10 = 1;
  if (v10)
    return this;
  v14 = (WTF::StringBuilder *)this;
  v36 = 0;
  v37 = 0;
  v15 = WebCore::buildRadii((uint64_t)&v36, a2, a4, a6, a8);
  v34 = 0;
  v35 = 0;
  this = WebCore::buildRadii((uint64_t)&v34, a3, a5, a7, a9);
  if (!v15 || (this & 1) == 0)
  {
    this = WTF::StringBuilder::append();
    if (HIDWORD(v37))
    {
      v17 = v36;
      v18 = 8 * HIDWORD(v37);
      do
      {
        v39 = 32;
        v19 = *(_QWORD *)v17;
        v17 = (WTF *)((char *)v17 + 8);
        v38 = v19;
        this = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, &v39, &v38);
        v18 -= 8;
      }
      while (v18);
      v21 = HIDWORD(v35);
      if (HIDWORD(v35) == HIDWORD(v37))
      {
        if (!HIDWORD(v37))
          goto LABEL_19;
        v22 = v34;
        v23 = v36;
        this = WTF::equal(*(WTF **)v34, *(const WTF::StringImpl **)v36, v20);
        if ((_DWORD)this)
        {
          v25 = 1;
          do
          {
            v26 = v25;
            if (v21 == v25)
              break;
            this = WTF::equal(*((WTF **)v22 + v25), *((const WTF::StringImpl **)v23 + v25), v24);
            v25 = v26 + 1;
          }
          while ((this & 1) != 0);
          if (v26 >= v21)
            goto LABEL_19;
        }
      }
    }
    else if (!HIDWORD(v35))
    {
      goto LABEL_19;
    }
    this = WTF::StringBuilder::append();
    if (HIDWORD(v35))
    {
      v31 = v34;
      v32 = 8 * HIDWORD(v35);
      do
      {
        v39 = 32;
        v33 = *(_QWORD *)v31;
        v31 = (WTF *)((char *)v31 + 8);
        v38 = v33;
        this = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, &v39, &v38);
        v32 -= 8;
      }
      while (v32);
    }
  }
LABEL_19:
  v27 = v34;
  if (HIDWORD(v35))
  {
    v29 = 8 * HIDWORD(v35);
    do
    {
      this = *(_QWORD *)v27;
      *(_QWORD *)v27 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
        else
          *(_DWORD *)this -= 2;
      }
      v27 = (WTF *)((char *)v27 + 8);
      v29 -= 8;
    }
    while (v29);
    v27 = v34;
    if (!v34)
      goto LABEL_21;
    goto LABEL_39;
  }
  if (v34)
  {
LABEL_39:
    v34 = 0;
    LODWORD(v35) = 0;
    this = WTF::fastFree(v27, v16);
  }
LABEL_21:
  v28 = v36;
  if (!HIDWORD(v37))
  {
    if (!v36)
      return this;
LABEL_41:
    v36 = 0;
    LODWORD(v37) = 0;
    return WTF::fastFree(v28, v16);
  }
  v30 = 8 * HIDWORD(v37);
  do
  {
    this = *(_QWORD *)v28;
    *(_QWORD *)v28 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v16);
      else
        *(_DWORD *)this -= 2;
    }
    v28 = (WTF *)((char *)v28 + 8);
    v30 -= 8;
  }
  while (v30);
  v28 = v36;
  if (v36)
    goto LABEL_41;
  return this;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, char *a4, uint64_t *a5, char *a6, uint64_t *a7, char *a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *result;
  int8x16_t *v22;
  int8x16_t *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  int8x16_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  int8x16_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  char *v60;
  _BYTE *v61;
  _BYTE *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int16 v74;
  char *v75;
  unsigned __int128 *v76;
  unsigned __int128 *v77;
  unsigned __int128 v78;
  unsigned __int128 *v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  char v82;
  char v83;
  char v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;

  v16 = *a3;
  v17 = *a5;
  v18 = *a7;
  v19 = *a9;
  v20 = *((_QWORD *)a1 + 1);
  if ((v20 || (v20 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v20 + 16) & 4) == 0
    || v16 && (*(_BYTE *)(v16 + 16) & 4) == 0
    || v17 && (*(_BYTE *)(v17 + 16) & 4) == 0
    || v18 && (*(_BYTE *)(v18 + 16) & 4) == 0
    || v19 && (*(_BYTE *)(v19 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v22 = *a2;
      v23 = a2[1];
      v24 = *a3;
      v25 = *a4;
      v26 = *a5;
      v27 = *a6;
      v28 = *a7;
      v29 = *a8;
      v30 = *a9;
      v31 = &result[2 * v23];
      v32 = v23 & 0xFFFFFFC0;
      if (v32)
      {
        v33 = &result[2 * v32];
        v34 = 0uLL;
        do
        {
          v85.val[0] = *v22;
          v35 = v22[1];
          v87.val[0] = v22[2];
          v36 = v22[3];
          v22 += 4;
          v37 = v36;
          v87.val[1] = 0uLL;
          v89.val[0] = v35;
          v85.val[1] = 0uLL;
          v38 = result;
          vst2q_s8(v38, v85);
          v38 += 32;
          v89.val[1] = 0uLL;
          vst2q_s8(v38, v89);
          v39 = result + 64;
          vst2q_s8(v39, v87);
          v40 = result + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
          result += 128;
        }
        while (result != v33);
        result = v33;
      }
      while (result != v31)
      {
        v41 = v22->u8[0];
        v22 = (int8x16_t *)((char *)v22 + 1);
        *(_WORD *)result = v41;
        result += 2;
      }
      if (v24)
      {
        v42 = *(int8x16_t **)(v24 + 8);
        v43 = *(unsigned int *)(v24 + 4);
        if ((*(_BYTE *)(v24 + 16) & 4) != 0)
        {
          v44 = &v31[2 * v43];
          if (v43 >= 0x40)
          {
            v45 = &v31[2 * (v43 & 0xFFFFFFC0)];
            v66 = 0uLL;
            v67 = v31;
            do
            {
              v86.val[0] = *v42;
              v68 = v42[1];
              v88.val[0] = v42[2];
              v69 = v42[3];
              v42 += 4;
              v70 = v69;
              v88.val[1] = 0uLL;
              v90.val[0] = v68;
              v86.val[1] = 0uLL;
              v71 = v67;
              vst2q_s8(v71, v86);
              v71 += 32;
              v90.val[1] = 0uLL;
              vst2q_s8(v71, v90);
              v72 = v67 + 64;
              vst2q_s8(v72, v88);
              v73 = v67 + 96;
              vst2q_s8(v73, *(int8x16x2_t *)(&v66 - 1));
              v67 += 128;
            }
            while (v67 != v45);
          }
          else
          {
            v45 = v31;
          }
          while (v45 != v44)
          {
            v74 = v42->u8[0];
            v42 = (int8x16_t *)((char *)v42 + 1);
            *(_WORD *)v45 = v74;
            v45 += 2;
          }
        }
        else if ((_DWORD)v43 == 1)
        {
          *(_WORD *)v31 = v42->i16[0];
        }
        else if ((_DWORD)v43)
        {
          memcpy(v31, v42, 2 * v43);
        }
        v65 = *(unsigned int *)(v24 + 4);
      }
      else
      {
        v65 = 0;
      }
      v75 = &v31[2 * v65];
      *(_WORD *)v75 = v25;
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v75 + 2, v26, v27, v28, v29, v30);
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v46 = result;
      v47 = a2[1];
      v48 = v47;
      v49 = *a3;
      v84 = *a4;
      v50 = *a5;
      v51 = *a6;
      v52 = *a7;
      v53 = *a8;
      v54 = *a9;
      if ((_DWORD)v47)
      {
        v55 = (char *)*a2;
        if ((_DWORD)v47 == 1)
          *result = *v55;
        else
          memcpy(result, v55, v47);
      }
      v56 = &v46[v48];
      if (v49)
      {
        v57 = *(char **)(v49 + 8);
        v58 = *(unsigned int *)(v49 + 4);
        if ((*(_BYTE *)(v49 + 16) & 4) != 0)
        {
          if ((_DWORD)v58)
          {
            if ((_DWORD)v58 == 1)
              *v56 = *v57;
            else
              memcpy(&v46[v48], v57, v58);
          }
        }
        else
        {
          if (v58 < 0x10)
          {
            v76 = (unsigned __int128 *)&v46[v48];
          }
          else
          {
            v76 = (unsigned __int128 *)&v56[v58 & 0xFFFFFFF0];
            v77 = (unsigned __int128 *)&v46[v48];
            do
            {
              v78 = (unsigned __int128)vld2q_s8(v57);
              v57 += 32;
              *v77++ = v78;
            }
            while (v77 != v76);
          }
          while (v76 != (unsigned __int128 *)&v56[v58])
          {
            v82 = *v57;
            v57 += 2;
            *(_BYTE *)v76 = v82;
            v76 = (unsigned __int128 *)((char *)v76 + 1);
          }
        }
        v59 = *(unsigned int *)(v49 + 4);
      }
      else
      {
        v59 = 0;
      }
      v60 = &v56[v59];
      *v60 = v84;
      v61 = v60 + 1;
      if (v50)
      {
        v62 = *(_BYTE **)(v50 + 8);
        v63 = *(unsigned int *)(v50 + 4);
        if ((*(_BYTE *)(v50 + 16) & 4) != 0)
        {
          if ((_DWORD)v63)
          {
            if ((_DWORD)v63 == 1)
              *v61 = *v62;
            else
              memcpy(v61, v62, v63);
          }
        }
        else
        {
          if (v63 < 0x10)
          {
            v79 = (unsigned __int128 *)v61;
          }
          else
          {
            v79 = (unsigned __int128 *)&v61[v63 & 0xFFFFFFF0];
            v80 = (unsigned __int128 *)v61;
            do
            {
              v81 = (unsigned __int128)vld2q_s8(v62);
              v62 += 32;
              *v80++ = v81;
            }
            while (v80 != v79);
          }
          while (v79 != (unsigned __int128 *)&v61[v63])
          {
            v83 = *v62;
            v62 += 2;
            *(_BYTE *)v79 = v83;
            v79 = (unsigned __int128 *)((char *)v79 + 1);
          }
        }
        v64 = *(unsigned int *)(v50 + 4);
      }
      else
      {
        v64 = 0;
      }
      v61[v64] = v51;
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61[v64 + 1], v52, v53, v54);
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  int8x16_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  char *v42;
  char *result;
  int8x16_t *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int16 v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  if (a2)
  {
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v14 = &__dst[2 * v13];
      if (v13 >= 0x40)
      {
        v15 = &__dst[2 * (v13 & 0xFFFFFFC0)];
        v17 = 0uLL;
        v18 = __dst;
        do
        {
          v56.val[0] = *v12;
          v19 = v12[1];
          v59.val[0] = v12[2];
          v20 = v12[3];
          v12 += 4;
          v21 = v20;
          v59.val[1] = 0uLL;
          v62.val[0] = v19;
          v56.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v56);
          v22 += 32;
          v62.val[1] = 0uLL;
          vst2q_s8(v22, v62);
          v23 = v18 + 64;
          vst2q_s8(v23, v59);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != v15);
      }
      else
      {
        v15 = __dst;
      }
      while (v15 != v14)
      {
        v25 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v15 = v25;
        v15 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *(_WORD *)__dst = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      memcpy(__dst, v12, 2 * v13);
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v26 = &__dst[2 * v16];
  *(_WORD *)v26 = a3;
  v27 = v26 + 2;
  if (a4)
  {
    v28 = *(int8x16_t **)(a4 + 8);
    v29 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v30 = &v27[2 * v29];
      if (v29 >= 0x40)
      {
        v31 = &v27[2 * (v29 & 0xFFFFFFC0)];
        v33 = 0uLL;
        v34 = v27;
        do
        {
          v57.val[0] = *v28;
          v35 = v28[1];
          v60.val[0] = v28[2];
          v36 = v28[3];
          v28 += 4;
          v37 = v36;
          v60.val[1] = 0uLL;
          v63.val[0] = v35;
          v57.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v57);
          v38 += 32;
          v63.val[1] = 0uLL;
          vst2q_s8(v38, v63);
          v39 = v34 + 64;
          vst2q_s8(v39, v60);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != v31);
      }
      else
      {
        v31 = v27;
      }
      while (v31 != v30)
      {
        v41 = v28->u8[0];
        v28 = (int8x16_t *)((char *)v28 + 1);
        *(_WORD *)v31 = v41;
        v31 += 2;
      }
    }
    else if ((_DWORD)v29 == 1)
    {
      *(_WORD *)v27 = v28->i16[0];
    }
    else if ((_DWORD)v29)
    {
      memcpy(v27, v28, 2 * v29);
    }
    v32 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v32 = 0;
  }
  v42 = &v27[2 * v32];
  *(_WORD *)v42 = a5;
  result = v42 + 2;
  if (a6)
  {
    v44 = *(int8x16_t **)(a6 + 8);
    v45 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v46 = &result[2 * v45];
      if (v45 >= 0x40)
      {
        v47 = &result[2 * (v45 & 0xFFFFFFC0)];
        v48 = 0uLL;
        do
        {
          v58.val[0] = *v44;
          v49 = v44[1];
          v61.val[0] = v44[2];
          v50 = v44[3];
          v44 += 4;
          v51 = v50;
          v61.val[1] = 0uLL;
          v64.val[0] = v49;
          v58.val[1] = 0uLL;
          v52 = result;
          vst2q_s8(v52, v58);
          v52 += 32;
          v64.val[1] = 0uLL;
          vst2q_s8(v52, v64);
          v53 = result + 64;
          vst2q_s8(v53, v61);
          v54 = result + 96;
          vst2q_s8(v54, *(int8x16x2_t *)(&v48 - 1));
          result += 128;
        }
        while (result != v47);
        result = v47;
      }
      while (result != v46)
      {
        v55 = v44->u8[0];
        v44 = (int8x16_t *)((char *)v44 + 1);
        *(_WORD *)result = v55;
        result += 2;
      }
    }
    else if ((_DWORD)v45 == 1)
    {
      *(_WORD *)result = v44->i16[0];
    }
    else if ((_DWORD)v45)
    {
      return (char *)memcpy(result, v44, 2 * v45);
    }
  }
  return result;
}

uint64_t WebCore::buildRadii(uint64_t a1, const WTF::StringImpl **a2, WTF **a3, WTF **a4, const WTF::StringImpl **a5)
{
  int v10;
  const WTF::StringImpl *v11;
  char v12;
  const WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  int v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  WTF *v23;
  const WTF::StringImpl *v24;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD **v29;
  _DWORD *v30;
  _DWORD **v31;
  _DWORD *v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD **v36;
  _DWORD *v37;

  v10 = WTF::equal(*a3, *a5, (const WTF::StringImpl *)a3);
  v12 = v10;
  if (!v10 || !WTF::equal(*a4, *a2, v11))
  {
    v15 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v29 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v15 + 1, (unint64_t)a2);
      v15 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v30 = *v29;
      if (*v29)
        *v30 += 2;
      *(_QWORD *)(v16 + 8 * v15) = v30;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v19 = *a2;
      if (*a2)
        *(_DWORD *)v19 += 2;
      *(_QWORD *)(v16 + 8 * v15) = v19;
    }
    LODWORD(v15) = v15 + 1;
    *(_DWORD *)(a1 + 12) = v15;
    v18 = 1;
LABEL_14:
    v20 = v15;
    v21 = *(_DWORD *)(a1 + 8);
    if ((_DWORD)v15 == v21)
    {
      v26 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v15 + 1, (unint64_t)a3);
      v27 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v28 = *v26;
      if (*v26)
        *v28 += 2;
      LODWORD(v15) = v27 + 1;
      *(_QWORD *)(v16 + 8 * v27) = v28;
      *(_DWORD *)(a1 + 12) = v27 + 1;
      if (!v18)
        goto LABEL_23;
      v21 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      LODWORD(v15) = v15 + 1;
      v22 = *a3;
      if (*a3)
        *(_DWORD *)v22 += 2;
      *(_QWORD *)(v16 + 8 * v20) = v22;
      *(_DWORD *)(a1 + 12) = v15;
      if ((v18 & 1) == 0)
        goto LABEL_23;
    }
    if ((_DWORD)v15 == v21)
    {
      v31 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v15 + 1, (unint64_t)a4);
      v15 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v32 = *v31;
      if (*v31)
        *v32 += 2;
      *(_QWORD *)(v16 + 8 * v15) = v32;
    }
    else
    {
      v23 = *a4;
      if (*a4)
        *(_DWORD *)v23 += 2;
      *(_QWORD *)(v16 + 8 * v15) = v23;
    }
    LODWORD(v15) = v15 + 1;
    *(_DWORD *)(a1 + 12) = v15;
LABEL_23:
    if ((v12 & 1) == 0)
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v33 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v15 + 1, (unint64_t)a5);
        v15 = *(unsigned int *)(a1 + 12);
        v34 = *(_QWORD *)a1;
        v35 = *v33;
        if (*v33)
          *v35 += 2;
        *(_QWORD *)(v34 + 8 * v15) = v35;
      }
      else
      {
        v24 = *a5;
        if (*a5)
          *(_DWORD *)v24 += 2;
        *(_QWORD *)(v16 + 8 * v15) = v24;
      }
      LODWORD(v15) = v15 + 1;
      *(_DWORD *)(a1 + 12) = v15;
    }
    goto LABEL_29;
  }
  v14 = WTF::equal(*a3, *a2, v13);
  v15 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
  {
    v36 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v15 + 1, (unint64_t)a2);
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(_QWORD *)a1;
    v37 = *v36;
    if (*v36)
      *v37 += 2;
    *(_QWORD *)(v16 + 8 * v15) = v37;
  }
  else
  {
    v16 = *(_QWORD *)a1;
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)(v16 + 8 * v15) = v17;
  }
  LODWORD(v15) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v15;
  if ((v14 & 1) == 0)
  {
    v18 = 0;
    goto LABEL_14;
  }
LABEL_29:
  if ((_DWORD)v15 == 1)
    JUMPOUT(0x19AEA53F4);
  return 0;
}

uint64_t WebCore::Quad::serialize@<X0>(const WTF::StringImpl **this@<X0>, WTF **a2@<X1>, WTF **a3@<X2>, WTF **a4@<X3>, const WTF::StringImpl **a5@<X8>)
{
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t result;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF *v20;
  WTF *v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  char v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  char *v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  char *v49;

  if ((WTF::equal(*a4, *a2, (const WTF::StringImpl *)a3) & 1) != 0)
  {
    if ((WTF::equal(*a3, *this, v11) & 1) != 0)
    {
      result = WTF::equal(*a2, *this, v12);
      v14 = *this;
      if ((result & 1) != 0)
      {
        if (v14)
          *(_DWORD *)v14 += 2;
        goto LABEL_6;
      }
      if (v14)
        *(_DWORD *)v14 += 2;
      v20 = *a2;
      if (v20)
        *(_DWORD *)v20 += 2;
      if (v14)
      {
        v35 = *((_DWORD *)v14 + 1);
        if (v20)
          goto LABEL_68;
      }
      else
      {
        v35 = 0;
        if (v20)
        {
LABEL_68:
          v36 = *((_DWORD *)v20 + 1);
          if (v36 < 0)
            goto LABEL_111;
          goto LABEL_69;
        }
      }
      v36 = 0;
LABEL_69:
      v25 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      v38 = v25;
      if ((v35 & 0x80000000) == 0 && (v38 & 1) == 0)
      {
        v39 = (v35 + v37);
        if (!__OFADD__(v35, v37))
        {
          if (v14)
          {
            v40 = *((_DWORD *)v14 + 4);
            v41 = (v40 >> 2) & 1;
            if (!v20 || (v40 & 4) == 0)
            {
LABEL_79:
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v41, (uint64_t)v14, 32, (uint64_t)v20, a5);
              if (*a5)
                goto LABEL_80;
              goto LABEL_112;
            }
LABEL_78:
            v41 = (*((unsigned __int8 *)v20 + 16) >> 2) & 1;
            goto LABEL_79;
          }
          if (v20)
            goto LABEL_78;
          if ((v39 & 0x80000000) == 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
            v14 = (const WTF::StringImpl *)v49;
            if (v49)
            {
              v42 = v49 + 20;
              *(_DWORD *)v49 = 2;
              *((_DWORD *)v14 + 1) = v39;
              *((_QWORD *)v14 + 1) = (char *)v14 + 20;
              *((_DWORD *)v14 + 4) = 4;
              result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v42, 0, 32, 0);
LABEL_6:
              *a5 = v14;
              return result;
            }
          }
        }
      }
LABEL_111:
      *a5 = 0;
      goto LABEL_112;
    }
    v14 = *this;
    if (v14)
      *(_DWORD *)v14 += 2;
    v20 = *a2;
    if (v20)
      *(_DWORD *)v20 += 2;
    v21 = *a3;
    if (v21)
      *(_DWORD *)v21 += 2;
    if (v14)
    {
      v22 = *((_DWORD *)v14 + 1);
      if (v20)
        goto LABEL_36;
    }
    else
    {
      v22 = 0;
      if (v20)
      {
LABEL_36:
        v23 = *((_DWORD *)v20 + 1);
        if (v21)
          goto LABEL_37;
        goto LABEL_98;
      }
    }
    v23 = 0;
    if (v21)
    {
LABEL_37:
      v24 = *((_DWORD *)v21 + 1);
      if (v24 < 0)
        goto LABEL_108;
      goto LABEL_38;
    }
LABEL_98:
    v24 = 0;
LABEL_38:
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    v27 = v25;
    if ((v23 & 0x80000000) == 0 && (v27 & 1) == 0)
    {
      v25 = __OFADD__(v23, v26);
      v28 = v23 + v26;
      if (!v25)
      {
        v25 = __OFADD__(v28, 1);
        v29 = v28 + 1;
        v30 = v25;
        if ((v22 & 0x80000000) == 0 && !v30)
        {
          v31 = (v22 + v29);
          if (!__OFADD__(v22, v29))
          {
            if (v14 && (*((_BYTE *)v14 + 16) & 4) == 0)
            {
              v32 = 0;
              goto LABEL_57;
            }
            if (v20)
            {
              v33 = *((_DWORD *)v20 + 4);
              v32 = (v33 >> 2) & 1;
              if (!v21 || (v33 & 4) == 0)
              {
LABEL_57:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v31, v32, (uint64_t)v14, 32, (uint64_t)v20, 32, (uint64_t)v21, a5);
                if (*a5)
                {
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2)
                    {
                      result = WTF::StringImpl::destroy(v21, v34);
                      if (v20)
                      {
LABEL_81:
                        if (*(_DWORD *)v20 == 2)
                          result = WTF::StringImpl::destroy(v20, v34);
                        else
                          *(_DWORD *)v20 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v21 -= 2;
                      if (v20)
                        goto LABEL_81;
                    }
LABEL_83:
                    if (!v14)
                      return result;
                    v19 = *(_DWORD *)v14 - 2;
                    if (*(_DWORD *)v14 == 2)
                      return WTF::StringImpl::destroy(v14, v34);
                    goto LABEL_85;
                  }
LABEL_80:
                  if (v20)
                    goto LABEL_81;
                  goto LABEL_83;
                }
LABEL_112:
                __break(0xC471u);
                JUMPOUT(0x19578B6C8);
              }
            }
            else if (!v21)
            {
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v31, 1, (uint64_t)v14, 32, 0, 32, 0, a5);
              if (*a5)
                goto LABEL_83;
              goto LABEL_112;
            }
            v32 = (*((unsigned __int8 *)v21 + 16) >> 2) & 1;
            goto LABEL_57;
          }
        }
      }
    }
LABEL_108:
    *a5 = 0;
    goto LABEL_112;
  }
  v14 = *this;
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = *a2;
  if (v15)
    *(_DWORD *)v15 += 2;
  v16 = *a3;
  if (v16)
    *(_DWORD *)v16 += 2;
  v17 = *a4;
  if (v17)
    *(_DWORD *)v17 += 2;
  v49 = (char *)v14;
  v48 = 32;
  v47 = v15;
  v46 = 32;
  v45 = v16;
  v44 = 32;
  v43 = v17;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v49, &v48, (uint64_t *)&v47, &v46, (uint64_t *)&v45, &v44, (uint64_t *)&v43, a5);
  if (!*a5)
  {
    __break(0xC471u);
    JUMPOUT(0x19578B6D0);
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      result = WTF::StringImpl::destroy(v17, v18);
      if (!v16)
        goto LABEL_22;
      goto LABEL_20;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (!v16)
    goto LABEL_22;
LABEL_20:
  if (*(_DWORD *)v16 == 2)
    result = WTF::StringImpl::destroy(v16, v18);
  else
    *(_DWORD *)v16 -= 2;
LABEL_22:
  if (!v15)
    goto LABEL_25;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_25:
    if (!v14)
      return result;
    goto LABEL_26;
  }
  result = WTF::StringImpl::destroy(v15, v18);
  if (v14)
  {
LABEL_26:
    v19 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
      return WTF::StringImpl::destroy(v14, v18);
LABEL_85:
    *(_DWORD *)v14 = v19;
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t *a5@<X4>, char *a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int v29;

  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v12 = *(_DWORD *)(v11 + 4);
  else
    v12 = 0;
  v13 = *a3;
  if (*a3)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *a5;
  if (*a5)
    v16 = *(_DWORD *)(v15 + 4);
  else
    v16 = 0;
  v17 = *a7;
  if (*a7)
  {
    v18 = *(_DWORD *)(v17 + 4);
    if (v18 < 0)
    {
LABEL_44:
      *a8 = 0;
      return result;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  v21 = v19;
  if (v16 < 0)
    goto LABEL_44;
  if ((v21 & 1) != 0)
    goto LABEL_44;
  v19 = __OFADD__(v16, v20);
  v22 = v16 + v20;
  if (v19)
    goto LABEL_44;
  v19 = __OFADD__(v22, 1);
  v23 = v22 + 1;
  v24 = v19;
  if (v14 < 0)
    goto LABEL_44;
  if (v24)
    goto LABEL_44;
  v19 = __OFADD__(v14, v23);
  v25 = v14 + v23;
  if (v19)
    goto LABEL_44;
  v19 = __OFADD__(v25, 1);
  v26 = v25 + 1;
  v27 = v19;
  if (v12 < 0)
    goto LABEL_44;
  if (v27)
    goto LABEL_44;
  result = (v12 + v26);
  if (__OFADD__(v12, v26))
    goto LABEL_44;
  if ((!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0) && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0))
  {
    if (v15)
    {
      v29 = *(_DWORD *)(v15 + 16);
      v28 = (v29 >> 2) & 1;
      if (!v17 || (v29 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v28, v11, *a2, v13, *a4, v15, *a6, a8, v17);
    }
    else if (!v17)
    {
      v28 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v28, v11, *a2, v13, *a4, v15, *a6, a8, v17);
    }
    v28 = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
  }
  else
  {
    v28 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v28, v11, *a2, v13, *a4, v15, *a6, a8, v17);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int v15;
  _QWORD *v16;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  size_t v26;
  uint64_t i;
  uint64_t v28;
  _WORD *v30;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  char *v45;
  unsigned __int128 *v46;
  unsigned __int128 *v47;
  unsigned __int128 v48;
  unsigned __int128 *v49;
  unsigned __int128 *v50;
  unsigned __int128 *v51;
  unsigned __int128 v52;
  char v53;
  char v54;
  uint64_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v15 = result;
  v16 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v19 = v56;
        if (v56)
        {
          v20 = (_BYTE *)(v56 + 20);
          *(_DWORD *)v56 = 2;
          *(_DWORD *)(v56 + 4) = v15;
          *(_QWORD *)(v56 + 8) = v56 + 20;
          *(_DWORD *)(v56 + 16) = 4;
          if (a3)
          {
            v21 = *(_BYTE **)(a3 + 8);
            v22 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v22)
              {
                if ((_DWORD)v22 == 1)
                  *v20 = *v21;
                else
                  memcpy((void *)(v56 + 20), v21, v22);
              }
            }
            else
            {
              if (v22 < 0x10)
              {
                v46 = (unsigned __int128 *)(v56 + 20);
              }
              else
              {
                v46 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
                v47 = (unsigned __int128 *)(v56 + 20);
                do
                {
                  v48 = (unsigned __int128)vld2q_s8(v21);
                  v21 += 32;
                  *v47++ = v48;
                }
                while (v47 != v46);
              }
              while (v46 != (unsigned __int128 *)&v20[v22])
              {
                v53 = *v21;
                v21 += 2;
                *(_BYTE *)v46 = v53;
                v46 = (unsigned __int128 *)((char *)v46 + 1);
              }
            }
            v23 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v23 = 0;
          }
          v20[v23] = a4;
          v24 = &v20[v23 + 1];
          if (a5)
          {
            v25 = *(_BYTE **)(a5 + 8);
            v26 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              v16 = a9;
              i = a7;
              if ((_DWORD)v26)
              {
                if ((_DWORD)v26 == 1)
                  *v24 = *v25;
                else
                  memcpy(v24, v25, v26);
              }
            }
            else
            {
              v49 = (unsigned __int128 *)&v24[v26];
              if (v26 < 0x10)
              {
                v50 = (unsigned __int128 *)v24;
              }
              else
              {
                v50 = (unsigned __int128 *)&v24[v26 & 0xFFFFFFF0];
                v51 = (unsigned __int128 *)v24;
                do
                {
                  v52 = (unsigned __int128)vld2q_s8(v25);
                  v25 += 32;
                  *v51++ = v52;
                }
                while (v51 != v50);
              }
              v16 = a9;
              for (i = a7; v50 != v49; v50 = (unsigned __int128 *)((char *)v50 + 1))
              {
                v54 = *v25;
                v25 += 2;
                *(_BYTE *)v50 = v54;
              }
            }
            v28 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v28 = 0;
            v16 = a9;
            i = a7;
          }
          v24[v28] = a6;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v24[v28 + 1], i, a8, a10);
        }
        goto LABEL_42;
      }
LABEL_44:
      v19 = 0;
      goto LABEL_42;
    }
LABEL_43:
    v19 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_42;
  }
  if (!(_DWORD)result)
    goto LABEL_43;
  if (result > 0x7FFFFFEF)
    goto LABEL_44;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v19 = v56;
  if (v56)
  {
    v30 = (_WORD *)(v56 + 20);
    *(_DWORD *)v56 = 2;
    *(_DWORD *)(v56 + 4) = v15;
    *(_QWORD *)(v56 + 8) = v56 + 20;
    *(_DWORD *)(v56 + 16) = 0;
    if (a3)
    {
      v31 = *(int8x16_t **)(a3 + 8);
      v32 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v33 = (char *)&v30[v32];
        if (v32 >= 0x40)
        {
          v34 = (char *)&v30[v32 & 0xFFFFFFC0];
          v36 = 0uLL;
          v37 = (char *)(v56 + 20);
          do
          {
            v57.val[0] = *v31;
            v38 = v31[1];
            v58.val[0] = v31[2];
            v39 = v31[3];
            v31 += 4;
            v40 = v39;
            v58.val[1] = 0uLL;
            v59.val[0] = v38;
            v57.val[1] = 0uLL;
            v41 = v37;
            vst2q_s8(v41, v57);
            v41 += 32;
            v59.val[1] = 0uLL;
            vst2q_s8(v41, v59);
            v42 = v37 + 64;
            vst2q_s8(v42, v58);
            v43 = v37 + 96;
            vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
            v37 += 128;
          }
          while (v37 != v34);
        }
        else
        {
          v34 = (char *)(v56 + 20);
        }
        while (v34 != v33)
        {
          v44 = v31->u8[0];
          v31 = (int8x16_t *)((char *)v31 + 1);
          *(_WORD *)v34 = v44;
          v34 += 2;
        }
      }
      else if ((_DWORD)v32 == 1)
      {
        *v30 = v31->i16[0];
      }
      else if ((_DWORD)v32)
      {
        memcpy((void *)(v56 + 20), v31, 2 * v32);
      }
      v35 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v35 = 0;
    }
    v45 = (char *)&v30[v35];
    *(_WORD *)v45 = a4;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v45 + 2, a5, a6, a7, a8, a10);
  }
  v16 = a9;
LABEL_42:
  *v16 = v19;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v24;
        if (v24)
        {
          v16 = (_BYTE *)(v24 + 20);
          *(_DWORD *)v24 = 2;
          *(_DWORD *)(v24 + 4) = v13;
          *(_QWORD *)(v24 + 8) = v24 + 20;
          *(_DWORD *)(v24 + 16) = 4;
          if (a3)
          {
            v17 = *(_BYTE **)(a3 + 8);
            v18 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v18)
              {
                if ((_DWORD)v18 == 1)
                  *v16 = *v17;
                else
                  memcpy((void *)(v24 + 20), v17, v18);
              }
            }
            else
            {
              if (v18 < 0x10)
              {
                v20 = (unsigned __int128 *)(v24 + 20);
              }
              else
              {
                v20 = (unsigned __int128 *)&v16[v18 & 0xFFFFFFF0];
                v21 = (unsigned __int128 *)(v24 + 20);
                do
                {
                  v22 = (unsigned __int128)vld2q_s8(v17);
                  v17 += 32;
                  *v21++ = v22;
                }
                while (v21 != v20);
              }
              while (v20 != (unsigned __int128 *)&v16[v18])
              {
                v23 = *v17;
                v17 += 2;
                *(_BYTE *)v20 = v23;
                v20 = (unsigned __int128 *)((char *)v20 + 1);
              }
            }
            v19 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v19 = 0;
          }
          v16[v19] = a4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v16[v19 + 1], a5, a6, a7);
        }
        goto LABEL_16;
      }
LABEL_20:
      v15 = 0;
      goto LABEL_16;
    }
LABEL_19:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_19;
  if (result > 0x7FFFFFEF)
    goto LABEL_20;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v24;
  if (v24)
  {
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = v13;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    *(_DWORD *)(v24 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v24 + 20), a3, a4, a5, a6, a7);
  }
LABEL_16:
  *a8 = v15;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, uint64_t a8, int8x16_t *a9, int a10, uint64_t a11, char a12)
{
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;

  v16 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v17 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v18 = 0uLL;
    do
    {
      v52.val[0] = *a2;
      v19 = a2[1];
      v55.val[0] = a2[2];
      v20 = a2[3];
      a2 += 4;
      v21 = v20;
      v55.val[1] = 0uLL;
      v58.val[0] = v19;
      v52.val[1] = 0uLL;
      v22 = a1;
      vst2q_s8(v22, v52);
      v22 += 32;
      v58.val[1] = 0uLL;
      vst2q_s8(v22, v58);
      v23 = a1 + 64;
      vst2q_s8(v23, v55);
      v24 = a1 + 96;
      vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
      a1 += 128;
    }
    while (a1 != v17);
    a1 = v17;
  }
  while (a1 != v16)
  {
    v25 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v25;
    a1 += 2;
  }
  if (a4)
  {
    v26 = *(int8x16_t **)(a4 + 8);
    v27 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v28 = &v16[2 * v27];
      if (v27 >= 0x40)
      {
        v29 = &v16[2 * (v27 & 0xFFFFFFC0)];
        v31 = 0uLL;
        v32 = v16;
        do
        {
          v53.val[0] = *v26;
          v33 = v26[1];
          v56.val[0] = v26[2];
          v34 = v26[3];
          v26 += 4;
          v35 = v34;
          v56.val[1] = 0uLL;
          v59.val[0] = v33;
          v53.val[1] = 0uLL;
          v36 = v32;
          vst2q_s8(v36, v53);
          v36 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v36, v59);
          v37 = v32 + 64;
          vst2q_s8(v37, v56);
          v38 = v32 + 96;
          vst2q_s8(v38, *(int8x16x2_t *)(&v31 - 1));
          v32 += 128;
        }
        while (v32 != v29);
      }
      else
      {
        v29 = v16;
      }
      while (v29 != v28)
      {
        v39 = v26->u8[0];
        v26 = (int8x16_t *)((char *)v26 + 1);
        *(_WORD *)v29 = v39;
        v29 += 2;
      }
    }
    else if ((_DWORD)v27 == 1)
    {
      *(_WORD *)v16 = v26->i16[0];
    }
    else if ((_DWORD)v27)
    {
      memcpy(v16, v26, 2 * v27);
    }
    v30 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v30 = 0;
  }
  v40 = &v16[2 * v30];
  v41 = &v40[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v42 = &v40[2 * (a6 & 0xFFFFFFC0)];
    v43 = 0uLL;
    do
    {
      v54.val[0] = *a5;
      v44 = a5[1];
      v57.val[0] = a5[2];
      v45 = a5[3];
      a5 += 4;
      v46 = v45;
      v57.val[1] = 0uLL;
      v60.val[0] = v44;
      v54.val[1] = 0uLL;
      v47 = v40;
      vst2q_s8(v47, v54);
      v47 += 32;
      v60.val[1] = 0uLL;
      vst2q_s8(v47, v60);
      v48 = v40 + 64;
      vst2q_s8(v48, v57);
      v49 = v40 + 96;
      vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
      v40 += 128;
    }
    while (v40 != v42);
    v40 = v42;
  }
  while (v40 != v41)
  {
    v50 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v40 = v50;
    v40 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v41, a7, a9, a10, a11, a12);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, uint64_t a2, char a3)
{
  _BYTE *v4;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  unsigned __int128 *v9;
  unsigned __int128 *v10;
  unsigned __int128 v11;
  char v12;

  v4 = __dst;
  if (a2)
  {
    v6 = *(_BYTE **)(a2 + 8);
    v7 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v7)
      {
        if ((_DWORD)v7 == 1)
          *__dst = *v6;
        else
          __dst = memcpy(__dst, v6, v7);
      }
    }
    else
    {
      if (v7 < 0x10)
      {
        v9 = (unsigned __int128 *)__dst;
      }
      else
      {
        v9 = (unsigned __int128 *)&__dst[v7 & 0xFFFFFFF0];
        v10 = (unsigned __int128 *)__dst;
        do
        {
          v11 = (unsigned __int128)vld2q_s8(v6);
          v6 += 32;
          *v10++ = v11;
        }
        while (v10 != v9);
      }
      while (v9 != (unsigned __int128 *)&__dst[v7])
      {
        v12 = *v6;
        v6 += 2;
        *(_BYTE *)v9 = v12;
        v9 = (unsigned __int128 *)((char *)v9 + 1);
      }
    }
    v8 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v8 = 0;
  }
  v4[v8] = a3;
  return __dst;
}

size_t WTF::tryMakeString<float,WTF::ASCIILiteral,float>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  size_t result;
  int v8;
  _OWORD v9[7];
  __int128 v10;
  char __s[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19[8];
  _OWORD v20[8];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  HIDWORD(v18) = strlen(__s);
  v5 = *(_OWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = v4 - 1;
    if ((unint64_t)(v4 - 1) >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
  }
  WTF::numberToString();
  result = strlen((const char *)v9);
  HIDWORD(v10) = result;
  if ((result & 0x80000000) != 0
    || (v8 = v6 + result, __OFADD__(v6, (_DWORD)result))
    || (HIDWORD(v18) & 0x80000000) != 0
    || (result = (HIDWORD(v18) + v8), __OFADD__(HIDWORD(v18), v8)))
  {
    *a2 = 0;
  }
  else
  {
    v20[4] = v15;
    v20[5] = v16;
    v20[6] = v17;
    v20[7] = v18;
    v20[0] = *(_OWORD *)__s;
    v20[1] = v12;
    v20[2] = v13;
    v20[3] = v14;
    v19[2] = v9[2];
    v19[3] = v9[3];
    v19[0] = v9[0];
    v19[1] = v9[1];
    v19[6] = v9[6];
    v19[7] = v10;
    v19[4] = v9[4];
    v19[5] = v9[5];
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<float,void>>(result, 1, v20, v5, v6, v19, a2);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<float,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, _OWORD *a4@<X3>, unsigned int a5@<W4>, __int128 *a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  int8x16_t *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v43;
  char *v44;
  __int128 v45;
  int8x16_t v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  int8x16_t *v54;
  char *v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int16 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[8];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD __src[7];
  size_t __n[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;

  v11 = result;
  v99 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v91;
        if ((_QWORD)v91)
        {
          v14 = (_BYTE *)(v91 + 20);
          *(_DWORD *)v91 = 2;
          *(_DWORD *)(v13 + 4) = v11;
          *(_QWORD *)(v13 + 8) = v13 + 20;
          *(_DWORD *)(v13 + 16) = 4;
          v15 = a3[5];
          __src[4] = a3[4];
          __src[5] = v15;
          v16 = a3[7];
          __src[6] = a3[6];
          *(_OWORD *)__n = v16;
          v17 = a3[1];
          __src[0] = *a3;
          __src[1] = v17;
          v18 = a3[3];
          __src[2] = a3[2];
          __src[3] = v18;
          v19 = *a6;
          v20 = a6[1];
          v21 = a6[3];
          v75 = a6[2];
          v76 = v21;
          v73 = v19;
          v74 = v20;
          v22 = a6[4];
          v23 = a6[5];
          v24 = a6[7];
          v79 = a6[6];
          v80 = v24;
          v77 = v22;
          v78 = v23;
          v25 = HIDWORD(__n[1]);
          if (HIDWORD(__n[1]))
          {
            if (HIDWORD(__n[1]) == 1)
              *v14 = __src[0];
            else
              result = (uint64_t)memcpy((void *)(v13 + 20), __src, HIDWORD(__n[1]));
          }
          v26 = &v14[v25];
          if (a5)
          {
            if (a5 == 1)
              *v26 = *(_BYTE *)a4;
            else
              result = (uint64_t)memcpy(v26, a4, a5);
          }
          v95 = v77;
          v96 = v78;
          v97 = v79;
          v98 = v80;
          v91 = v73;
          v92 = v74;
          v93 = v75;
          v94 = v76;
          if (HIDWORD(v80))
          {
            result = (uint64_t)&v26[a5];
            if (HIDWORD(v80) == 1)
              *(_BYTE *)result = v91;
            else
              result = (uint64_t)memcpy((void *)result, &v91, HIDWORD(v80));
          }
        }
        goto LABEL_40;
      }
LABEL_42:
      v13 = 0;
      goto LABEL_40;
    }
LABEL_41:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_40;
  }
  if (!(_DWORD)result)
    goto LABEL_41;
  if (result > 0x7FFFFFEF)
    goto LABEL_42;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v91;
  if ((_QWORD)v91)
  {
    v27 = (char *)(v91 + 20);
    *(_DWORD *)v91 = 2;
    *(_DWORD *)(v13 + 4) = v11;
    *(_QWORD *)(v13 + 8) = v13 + 20;
    *(_DWORD *)(v13 + 16) = 0;
    v28 = a3[3];
    v72[2] = a3[2];
    v72[3] = v28;
    v29 = a3[5];
    v72[4] = a3[4];
    v72[5] = v29;
    v30 = a3[7];
    v72[6] = a3[6];
    v72[7] = v30;
    v31 = a3[1];
    v72[0] = *a3;
    v72[1] = v31;
    v66 = a6[2];
    v67 = a6[3];
    v64 = *a6;
    v65 = a6[1];
    v70 = a6[6];
    v71 = a6[7];
    v32 = (char *)(v13 + 20 + 2 * HIDWORD(v30));
    v68 = a6[4];
    v69 = a6[5];
    if (HIDWORD(v30) >= 0x40)
    {
      v34 = &v27[2 * (HIDWORD(v30) & 0xFFFFFFC0)];
      v33 = (int8x16_t *)v72;
      v35 = 0uLL;
      do
      {
        v100.val[0] = *v33;
        v36 = v33[1];
        v103.val[0] = v33[2];
        v37 = v33[3];
        v33 += 4;
        v38 = v37;
        v103.val[1] = 0uLL;
        v106.val[0] = v36;
        v100.val[1] = 0uLL;
        v39 = v27;
        vst2q_s8(v39, v100);
        v39 += 32;
        v106.val[1] = 0uLL;
        vst2q_s8(v39, v106);
        v40 = v27 + 64;
        vst2q_s8(v40, v103);
        v41 = v27 + 96;
        vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
        v27 += 128;
      }
      while (v27 != v34);
      v27 = v34;
    }
    else
    {
      v33 = (int8x16_t *)v72;
    }
    while (v27 != v32)
    {
      v42 = v33->u8[0];
      v33 = (int8x16_t *)((char *)v33 + 1);
      *(_WORD *)v27 = v42;
      v27 += 2;
    }
    v87 = v68;
    v88 = v69;
    v89 = v70;
    v90 = v71;
    v83 = v64;
    v84 = v65;
    v43 = &v32[2 * a5];
    v85 = v66;
    v86 = v67;
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v44 = &v32[2 * (a5 & 0xFFFFFFC0)];
      v45 = 0uLL;
      do
      {
        v101.val[0] = (int8x16_t)*a4;
        v46 = *((int8x16_t *)a4 + 1);
        v104.val[0] = (int8x16_t)a4[2];
        v47 = a4[3];
        a4 += 4;
        v48 = v47;
        v104.val[1] = 0uLL;
        v107.val[0] = v46;
        v101.val[1] = 0uLL;
        v49 = v32;
        vst2q_s8(v49, v101);
        v49 += 32;
        v107.val[1] = 0uLL;
        vst2q_s8(v49, v107);
        v50 = v32 + 64;
        vst2q_s8(v50, v104);
        v51 = v32 + 96;
        vst2q_s8(v51, *(int8x16x2_t *)(&v45 - 1));
        v32 += 128;
      }
      while (v32 != v44);
      v32 = v44;
    }
    while (v32 != v43)
    {
      v52 = *(unsigned __int8 *)a4;
      a4 = (_OWORD *)((char *)a4 + 1);
      *(_WORD *)v32 = v52;
      v32 += 2;
    }
    v95 = v87;
    v96 = v88;
    v97 = v89;
    v98 = v90;
    v91 = v83;
    v92 = v84;
    v93 = v85;
    v94 = v86;
    v53 = &v43[2 * HIDWORD(v90)];
    if (HIDWORD(v90) >= 0x40)
    {
      v55 = &v43[2 * (HIDWORD(v90) & 0xFFFFFFC0)];
      v54 = (int8x16_t *)&v91;
      v56 = 0uLL;
      do
      {
        v102.val[0] = *v54;
        v57 = v54[1];
        v105.val[0] = v54[2];
        v58 = v54[3];
        v54 += 4;
        v59 = v58;
        v105.val[1] = 0uLL;
        v108.val[0] = v57;
        v102.val[1] = 0uLL;
        v60 = v43;
        vst2q_s8(v60, v102);
        v60 += 32;
        v108.val[1] = 0uLL;
        vst2q_s8(v60, v108);
        v61 = v43 + 64;
        vst2q_s8(v61, v105);
        v62 = v43 + 96;
        vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
        v43 += 128;
      }
      while (v43 != v55);
      v43 = v55;
    }
    else
    {
      v54 = (int8x16_t *)&v91;
    }
    while (v43 != v53)
    {
      v63 = v54->u8[0];
      v54 = (int8x16_t *)((char *)v54 + 1);
      *(_WORD *)v43 = v63;
      v43 += 2;
    }
  }
LABEL_40:
  *a7 = v13;
  return result;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,char,WTF::ASCIILiteral>@<X0>(_QWORD *result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  size_t v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v6 = (_BYTE *)*result;
  v5 = result[1];
  if (v5)
  {
    v7 = v5 - 1;
    if ((unint64_t)(v5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19578C654);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v10 = *(_BYTE **)a3;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    v11 = v9 - 1;
    if ((unint64_t)(v9 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19578C680);
    }
    v12 = v9 - 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = v12 + 1;
  if (__OFADD__(v12, 1) || (v14 = (v7 + v13), __OFADD__((_DWORD)v7, v13)) || (v14 & 0x80000000) != 0)
  {
    v15 = 0;
  }
  else
  {
    result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
    v15 = v17;
    if (v17)
    {
      v16 = (_BYTE *)(v17 + 20);
      *(_DWORD *)v17 = 2;
      *(_DWORD *)(v17 + 4) = v14;
      *(_QWORD *)(v17 + 8) = v17 + 20;
      *(_DWORD *)(v17 + 16) = 4;
      if ((_DWORD)v7)
      {
        if ((_DWORD)v7 == 1)
          *v16 = *v6;
        else
          memcpy((void *)(v17 + 20), v6, v7);
      }
      v16[v7] = v8;
      result = &v16[v7 + 1];
      if (v12)
      {
        if (v12 == 1)
          *(_BYTE *)result = *v10;
        else
          result = memcpy(result, v10, v11);
      }
    }
  }
  *a4 = v15;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int8x16_t *v19;

  v9 = *a3;
  v10 = *a5;
  v11 = *((_QWORD *)a1 + 1);
  if ((v11 || (v11 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v11 + 16) & 4) == 0
    || v9 && (*(_BYTE *)(v9 + 16) & 4) == 0
    || v10 && (*(_BYTE *)(v10 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *a3, *a4, *a5);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v13 = result;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = v14;
      v16 = *a3;
      v17 = *a4;
      v18 = *a5;
      if ((_DWORD)v14)
      {
        v19 = *(int8x16_t **)a2;
        if ((_DWORD)v14 == 1)
          *result = v19->i8[0];
        else
          memcpy(result, v19, *(_QWORD *)(a2 + 8));
      }
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v13[v15], v16, v17, v18);
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  char *v9;
  char *v10;
  __int128 v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  int8x16_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *result;
  int8x16_t *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  v9 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v10 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v11 = 0uLL;
    do
    {
      v47.val[0] = *a2;
      v12 = a2[1];
      v50.val[0] = a2[2];
      v13 = a2[3];
      a2 += 4;
      v14 = v13;
      v50.val[1] = 0uLL;
      v53.val[0] = v12;
      v47.val[1] = 0uLL;
      v15 = a1;
      vst2q_s8(v15, v47);
      v15 += 32;
      v53.val[1] = 0uLL;
      vst2q_s8(v15, v53);
      v16 = a1 + 64;
      vst2q_s8(v16, v50);
      v17 = a1 + 96;
      vst2q_s8(v17, *(int8x16x2_t *)(&v11 - 1));
      a1 += 128;
    }
    while (a1 != v10);
    a1 = v10;
  }
  while (a1 != v9)
  {
    v18 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v18;
    a1 += 2;
  }
  if (a4)
  {
    v19 = *(int8x16_t **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v21 = &v9[2 * v20];
      if (v20 >= 0x40)
      {
        v22 = &v9[2 * (v20 & 0xFFFFFFC0)];
        v24 = 0uLL;
        v25 = v9;
        do
        {
          v48.val[0] = *v19;
          v26 = v19[1];
          v51.val[0] = v19[2];
          v27 = v19[3];
          v19 += 4;
          v28 = v27;
          v51.val[1] = 0uLL;
          v54.val[0] = v26;
          v48.val[1] = 0uLL;
          v29 = v25;
          vst2q_s8(v29, v48);
          v29 += 32;
          v54.val[1] = 0uLL;
          vst2q_s8(v29, v54);
          v30 = v25 + 64;
          vst2q_s8(v30, v51);
          v31 = v25 + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
          v25 += 128;
        }
        while (v25 != v22);
      }
      else
      {
        v22 = v9;
      }
      while (v22 != v21)
      {
        v32 = v19->u8[0];
        v19 = (int8x16_t *)((char *)v19 + 1);
        *(_WORD *)v22 = v32;
        v22 += 2;
      }
    }
    else if ((_DWORD)v20 == 1)
    {
      *(_WORD *)v9 = v19->i16[0];
    }
    else if ((_DWORD)v20)
    {
      memcpy(v9, v19, 2 * v20);
    }
    v23 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v23 = 0;
  }
  v33 = &v9[2 * v23];
  *(_WORD *)v33 = a5;
  result = v33 + 2;
  if (a6)
  {
    v35 = *(int8x16_t **)(a6 + 8);
    v36 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v37 = &result[2 * v36];
      if (v36 >= 0x40)
      {
        v38 = &result[2 * (v36 & 0xFFFFFFC0)];
        v39 = 0uLL;
        do
        {
          v49.val[0] = *v35;
          v40 = v35[1];
          v52.val[0] = v35[2];
          v41 = v35[3];
          v35 += 4;
          v42 = v41;
          v52.val[1] = 0uLL;
          v55.val[0] = v40;
          v49.val[1] = 0uLL;
          v43 = result;
          vst2q_s8(v43, v49);
          v43 += 32;
          v55.val[1] = 0uLL;
          vst2q_s8(v43, v55);
          v44 = result + 64;
          vst2q_s8(v44, v52);
          v45 = result + 96;
          vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
          result += 128;
        }
        while (result != v38);
        result = v38;
      }
      while (result != v37)
      {
        v46 = v35->u8[0];
        v35 = (int8x16_t *)((char *)v35 + 1);
        *(_WORD *)result = v46;
        result += 2;
      }
    }
    else if ((_DWORD)v36 == 1)
    {
      *(_WORD *)result = v35->i16[0];
    }
    else if ((_DWORD)v36)
    {
      return (char *)memcpy(result, v35, 2 * v36);
    }
  }
  return result;
}

uint64_t WebCore::CSSCanvasValue::createStyleImage@<X0>(WebCore::CSSCanvasValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    if (v6)
      *v6 += 2;
    result = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 4;
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 36) = 1;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)result = off_1E3441BE0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = &unk_1E3441D10;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = v6;
    *(_QWORD *)(result + 88) = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = result;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        result = *((_QWORD *)this + 2);
        if (!result)
          goto LABEL_8;
      }
      else
      {
        --v7[2];
      }
    }
  }
  ++*(_DWORD *)(result + 8);
LABEL_8:
  *a2 = result;
  return result;
}

void *WebCore::CSSComputedStyleDeclaration::bisoHeap(WebCore::CSSComputedStyleDeclaration *this)
{
  return &WebCore::CSSComputedStyleDeclaration::bisoHeap(void)::heap;
}

uint64_t WebCore::CSSComputedStyleDeclaration::operator new(uint64_t this)
{
  if (this == 72)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::CSSComputedStyleDeclaration::~CSSComputedStyleDeclaration(WebCore::CSSComputedStyleDeclaration *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  if (*((_BYTE *)this + 56))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v7 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSComputedStyleDeclaration::~CSSComputedStyleDeclaration(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::CSSComputedStyleDeclaration::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 24) = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E3397498;
  *(_DWORD *)(a1 + 24) += 2;
  *(_QWORD *)(result + 32) = a1;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 65) = a2;
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSComputedStyleDeclaration::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 1;
  *(_QWORD *)result = off_1E3397498;
  *(_DWORD *)(a1 + 24) += 2;
  *(_QWORD *)(result + 32) = a1;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)a2;
    v7 = *(_DWORD **)(a2 + 8);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 48) = v7;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_WORD *)(result + 64) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSComputedStyleDeclaration::createEmpty@<X0>(WebCore::CSSComputedStyleDeclaration *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = bmalloc::api::isoAllocate();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 1;
  *(_QWORD *)result = off_1E3397498;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(result + 32) = this;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_WORD *)(result + 64) = 1;
  *a2 = result;
  return result;
}

void WebCore::CSSComputedStyleDeclaration::cssText(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::CSSComputedStyleDeclaration::setCssText(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

unsigned int *WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::Node *v12;
  int v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;

  v3 = result;
  if (!(_DWORD)a3
    || (v6 = *(_QWORD *)(a2 + 32),
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680),
        (a3 - 304) <= 0x1E)
    && ((1 << (a3 - 48)) & 0x7C010001) != 0
    || v7
    && (result = (unsigned int *)WebCore::isExposedNotInvalidAndNotInternal(a3, *(_QWORD *)(v7 + 664), *(_QWORD *)(v7 + 672), *(_QWORD *)(v7 + 680), *(_QWORD *)(v7 + 688), *(_QWORD *)(v7 + 696), *(_QWORD *)(v7 + 704), *(_QWORD *)(v7 + 712)), !(_DWORD)result)|| *(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)v3 = 0;
  }
  else
  {
    v8 = *(_BYTE *)(a2 + 65);
    *(_DWORD *)(v6 + 24) += 2;
    v12 = (WebCore::Node *)v6;
    LOBYTE(v13) = 0;
    v15 = 0;
    if (*(_BYTE *)(a2 + 56))
    {
      v13 = *(_DWORD *)(a2 + 40);
      v9 = *(WTF::StringImpl **)(a2 + 48);
      if (v9)
        *(_DWORD *)v9 += 2;
      v14 = v9;
      v15 = 1;
    }
    v16 = v8;
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v12, a3, 1, 0, v3);
    if (v15)
    {
      v11 = v14;
      v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    result = (unsigned int *)v12;
    v12 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSComputedStyleDeclaration::settings(WebCore::CSSComputedStyleDeclaration *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 40) + 8) + 680);
}

void WebCore::ComputedStyleExtractor::~ComputedStyleExtractor(WebCore::ComputedStyleExtractor *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  if (*((_BYTE *)this + 24))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

unsigned int *WebCore::CSSComputedStyleDeclaration::copyProperties@<X0>(WebCore::CSSComputedStyleDeclaration *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *result;
  WebCore::Node *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::Node *v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  char v13;

  if (*((_BYTE *)this + 64))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)result = 0x900000001;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = result + 8;
    *((_QWORD *)result + 3) = 4;
    *a2 = (uint64_t)result;
  }
  else
  {
    v4 = (WebCore::Node *)*((_QWORD *)this + 4);
    v5 = *((_BYTE *)this + 65);
    if (v4)
      *((_DWORD *)v4 + 6) += 2;
    v9 = v4;
    LOBYTE(v10) = 0;
    v12 = 0;
    if (*((_BYTE *)this + 56))
    {
      v10 = *((_DWORD *)this + 10);
      v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
      if (v6)
        *(_DWORD *)v6 += 2;
      v11 = v6;
      v12 = 1;
    }
    v13 = v5;
    WebCore::ComputedStyleExtractor::copyProperties((WebCore::ComputedStyleExtractor *)&v9, a2);
    if (v12)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    result = (unsigned int *)v9;
    v9 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSComputedStyleDeclaration::length(WebCore::CSSComputedStyleDeclaration *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[852];

  if (*((_BYTE *)this + 64))
    return 0;
  WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(*((_QWORD *)this + 4), 1, a3);
  result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 4) + 264))(*((_QWORD *)this + 4), (char *)this + 40);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 40) + 8);
    if (*(_BYTE *)(v6 + 2992))
    {
      v7 = *(int **)(v6 + 2984);
      if (v7)
      {
LABEL_6:
        v8 = *v7;
        return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 216) + 24)
                            + v8
                            + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 40) + 288) + 24));
      }
    }
    else
    {
      v9 = 0;
      v10 = *(_QWORD *)(v6 + 680);
      v11 = v16;
      do
      {
        v12 = WebCore::computedPropertyIDs[v9];
        result = WebCore::isExposed(v12, v10);
        if ((_DWORD)result)
        {
          *(_WORD *)v11 = v12;
          v11 += 2;
        }
        ++v9;
      }
      while (v9 != 426);
      if (v16 == v11)
      {
        v7 = 0;
      }
      else
      {
        v13 = v11 - v16;
        if ((unint64_t)(v11 - v16) >> 33)
        {
          __break(0xC471u);
          return result;
        }
        v14 = v13 >> 1;
        v7 = (int *)WTF::fastMalloc((WTF *)((v13 & 0x1FFFFFFFELL) + 4));
        v15 = 0;
        *v7 = v14;
        do
        {
          *(_WORD *)((char *)v7 + v15 + 4) = *(_WORD *)&v16[v15];
          v15 += 2;
        }
        while (&v16[v15] != v11);
      }
      *(_QWORD *)(v6 + 2984) = v7;
      *(_BYTE *)(v6 + 2992) = 1;
      if (v7)
        goto LABEL_6;
    }
    v8 = 0;
    return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 216) + 24)
                        + v8
                        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 40) + 288) + 24));
  }
  return result;
}

int *WebCore::CSSComputedStyleDeclaration::item@<X0>(int *this@<X0>, unsigned int a2@<W1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int16 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int16 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned __int16 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int16 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int16 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  WTF::StringImpl *v79;
  _QWORD v80[108];

  if (*((_BYTE *)this + 64))
    goto LABEL_2;
  v6 = (uint64_t)this;
  WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(*((_QWORD *)this + 4), 1, a3);
  this = (int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 32) + 264))(*(_QWORD *)(v6 + 32), v6 + 40);
  if (!this)
    goto LABEL_2;
  v7 = (uint64_t)this;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 8);
  if (*(_BYTE *)(v8 + 2992))
  {
    this = *(int **)(v8 + 2984);
    if (this)
    {
LABEL_6:
      v9 = *this;
      goto LABEL_19;
    }
  }
  else
  {
    v77 = a2;
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 680);
    v12 = v80;
    do
    {
      v13 = WebCore::computedPropertyIDs[v10];
      if (WebCore::isExposed(v13, v11))
      {
        *(_WORD *)v12 = v13;
        v12 = (_QWORD *)((char *)v12 + 2);
      }
      ++v10;
    }
    while (v10 != 426);
    if (v80 == v12)
    {
      this = 0;
      a2 = v77;
    }
    else
    {
      v14 = (char *)v12 - (char *)v80;
      if ((unint64_t)((char *)v12 - (char *)v80) >> 33)
      {
        __break(0xC471u);
        JUMPOUT(0x19578D8A0);
      }
      v15 = v14 >> 1;
      this = (int *)WTF::fastMalloc((WTF *)((v14 & 0x1FFFFFFFELL) + 4));
      v16 = 0;
      *this = v15;
      a2 = v77;
      do
      {
        *(_WORD *)((char *)this + v16 + 4) = *(_WORD *)((char *)v80 + v16);
        v16 += 2;
      }
      while ((_QWORD *)((char *)v80 + v16) != v12);
    }
    *(_QWORD *)(v8 + 2984) = this;
    *(_BYTE *)(v8 + 2992) = 1;
    if (this)
      goto LABEL_6;
  }
  v9 = 0;
LABEL_19:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 216) + 24)
     + v9
     + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) + 288) + 24) <= a2)
    goto LABEL_2;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 8);
  if (*(_BYTE *)(v17 + 2992))
  {
    v18 = *(unsigned int **)(v17 + 2984);
  }
  else
  {
    v19 = 0;
    v20 = *(_QWORD *)(v17 + 680);
    v21 = v80;
    do
    {
      v22 = WebCore::computedPropertyIDs[v19];
      if (WebCore::isExposed(v22, v20))
      {
        *(_WORD *)v21 = v22;
        v21 = (_QWORD *)((char *)v21 + 2);
      }
      ++v19;
    }
    while (v19 != 426);
    if (v80 == v21)
    {
      v18 = 0;
    }
    else
    {
      v23 = (char *)v21 - (char *)v80;
      if ((unint64_t)((char *)v21 - (char *)v80) >> 33)
      {
        __break(0xC471u);
        JUMPOUT(0x19578D8A8);
      }
      v24 = v23 >> 1;
      v18 = (unsigned int *)WTF::fastMalloc((WTF *)((v23 & 0x1FFFFFFFELL) + 4));
      v25 = 0;
      *v18 = v24;
      do
      {
        *(_WORD *)((char *)v18 + v25 + 4) = *(_WORD *)((char *)v80 + v25);
        v25 += 2;
      }
      while ((_QWORD *)((char *)v80 + v25) != v21);
    }
    *(_QWORD *)(v17 + 2984) = v18;
    *(_BYTE *)(v17 + 2992) = 1;
  }
  v26 = a2;
  if (!v18)
  {
    v28 = *(_QWORD **)(v6 + 32);
LABEL_38:
    this = (int *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v28 + 264))(v28, v6 + 40);
    if (!this)
      goto LABEL_2;
    v31 = (uint64_t)this;
    v32 = *(_QWORD *)(*((_QWORD *)this + 3) + 216);
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 8);
    if (*(_BYTE *)(v33 + 2992))
    {
      v34 = *(_DWORD **)(v33 + 2984);
      if (v34)
      {
LABEL_41:
        v35 = *v34;
        goto LABEL_63;
      }
    }
    else
    {
      v76 = *(_QWORD *)(*((_QWORD *)this + 3) + 216);
      v78 = a2;
      v36 = 0;
      v37 = *(_QWORD *)(v33 + 680);
      v38 = v80;
      do
      {
        v39 = WebCore::computedPropertyIDs[v36];
        if (WebCore::isExposed(v39, v37))
        {
          *(_WORD *)v38 = v39;
          v38 = (_QWORD *)((char *)v38 + 2);
        }
        ++v36;
      }
      while (v36 != 426);
      if (v80 == v38)
      {
        v34 = 0;
      }
      else
      {
        v40 = (char *)v38 - (char *)v80;
        if ((unint64_t)((char *)v38 - (char *)v80) >> 33)
        {
          __break(0xC471u);
          JUMPOUT(0x19578D8B0);
        }
        v41 = v40 >> 1;
        v34 = (_DWORD *)WTF::fastMalloc((WTF *)((v40 & 0x1FFFFFFFELL) + 4));
        v42 = 0;
        *v34 = v41;
        do
        {
          *(_WORD *)((char *)v34 + v42 + 4) = *(_WORD *)((char *)v80 + v42);
          v42 += 2;
        }
        while ((_QWORD *)((char *)v80 + v42) != v38);
      }
      *(_QWORD *)(v33 + 2984) = v34;
      *(_BYTE *)(v33 + 2992) = 1;
      a2 = v78;
      v32 = v76;
      if (v34)
        goto LABEL_41;
    }
    v35 = 0;
LABEL_63:
    v50 = *(unsigned int *)(v32 + 24);
    if (v35 + v50 <= v26)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 40) + 288);
      v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 8);
      if (*(_BYTE *)(v54 + 2992))
      {
        v55 = *(int **)(v54 + 2984);
      }
      else
      {
        v64 = 0;
        v65 = *(_QWORD *)(v54 + 680);
        v66 = v80;
        do
        {
          v67 = WebCore::computedPropertyIDs[v64];
          if (WebCore::isExposed(v67, v65))
          {
            *(_WORD *)v66 = v67;
            v66 = (_QWORD *)((char *)v66 + 2);
          }
          ++v64;
        }
        while (v64 != 426);
        if (v80 == v66)
        {
          v55 = 0;
        }
        else
        {
          v68 = (char *)v66 - (char *)v80;
          if ((unint64_t)((char *)v66 - (char *)v80) >> 33)
            goto LABEL_114;
          v69 = v68 >> 1;
          v55 = (int *)WTF::fastMalloc((WTF *)((v68 & 0x1FFFFFFFELL) + 4));
          v70 = 0;
          *v55 = v69;
          do
          {
            *(_WORD *)((char *)v55 + v70 + 4) = *(_WORD *)((char *)v80 + v70);
            v70 += 2;
          }
          while ((_QWORD *)((char *)v80 + v70) != v66);
        }
        *(_QWORD *)(v54 + 2984) = v55;
        *(_BYTE *)(v54 + 2992) = 1;
      }
      if (v55)
        v75 = *v55;
      else
        v75 = 0;
      WebCore::StyleCustomPropertyData::findKeyAtIndex(v53, (void *)(a2 - ((_DWORD)v50 + v75)), v80);
      this = (int *)v80[0];
      if (v80[0])
      {
        v74 = *(_DWORD *)v80[0];
        *(_DWORD *)v80[0] += 2;
        *a4 = this;
        v80[0] = 0;
        if (!v74)
          return (int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v73);
        goto LABEL_107;
      }
    }
    else
    {
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 40) + 8);
      if (*(_BYTE *)(v51 + 2992))
      {
        v52 = *(int **)(v51 + 2984);
      }
      else
      {
        v56 = v32;
        v57 = 0;
        v58 = *(_QWORD *)(v51 + 680);
        v59 = v80;
        do
        {
          v60 = WebCore::computedPropertyIDs[v57];
          if (WebCore::isExposed(v60, v58))
          {
            *(_WORD *)v59 = v60;
            v59 = (_QWORD *)((char *)v59 + 2);
          }
          ++v57;
        }
        while (v57 != 426);
        if (v80 == v59)
        {
          v52 = 0;
        }
        else
        {
          v61 = (char *)v59 - (char *)v80;
          if ((unint64_t)((char *)v59 - (char *)v80) >> 33)
          {
            __break(0xC471u);
            JUMPOUT(0x19578D8C0);
          }
          v62 = v61 >> 1;
          v52 = (int *)WTF::fastMalloc((WTF *)((v61 & 0x1FFFFFFFELL) + 4));
          v63 = 0;
          *v52 = v62;
          do
          {
            *(_WORD *)((char *)v52 + v63 + 4) = *(_WORD *)((char *)v80 + v63);
            v63 += 2;
          }
          while ((_QWORD *)((char *)v80 + v63) != v59);
        }
        *(_QWORD *)(v51 + 2984) = v52;
        *(_BYTE *)(v51 + 2992) = 1;
        v32 = v56;
      }
      if (v52)
        v72 = *v52;
      else
        v72 = 0;
      WebCore::StyleCustomPropertyData::findKeyAtIndex(v32, (void *)(a2 - v72), &v79);
      this = (int *)v79;
      if (v79)
      {
        v74 = *(_DWORD *)v79;
        *(_DWORD *)v79 += 2;
        *a4 = this;
        v79 = 0;
        if (!v74)
          return (int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v73);
LABEL_107:
        *this = v74;
        return this;
      }
    }
LABEL_2:
    *a4 = 0;
    return this;
  }
  v27 = *v18;
  v28 = *(_QWORD **)(v6 + 32);
  if (v27 <= a2)
    goto LABEL_38;
  v29 = *(_QWORD *)(v28[5] + 8);
  if (*(_BYTE *)(v29 + 2992))
  {
    v30 = *(unsigned int **)(v29 + 2984);
  }
  else
  {
    v43 = 0;
    v44 = *(_QWORD *)(v29 + 680);
    v45 = v80;
    do
    {
      v46 = WebCore::computedPropertyIDs[v43];
      if (WebCore::isExposed(v46, v44))
      {
        *(_WORD *)v45 = v46;
        v45 = (_QWORD *)((char *)v45 + 2);
      }
      ++v43;
    }
    while (v43 != 426);
    if (v80 == v45)
    {
      v30 = 0;
    }
    else
    {
      v47 = (char *)v45 - (char *)v80;
      if ((unint64_t)((char *)v45 - (char *)v80) >> 33)
      {
        __break(0xC471u);
        JUMPOUT(0x19578D8B8);
      }
      v48 = v47 >> 1;
      v30 = (unsigned int *)WTF::fastMalloc((WTF *)((v47 & 0x1FFFFFFFELL) + 4));
      v49 = 0;
      *v30 = v48;
      do
      {
        *(_WORD *)((char *)v30 + v49 + 4) = *(_WORD *)((char *)v80 + v49);
        v49 += 2;
      }
      while ((_QWORD *)((char *)v80 + v49) != v45);
    }
    *(_QWORD *)(v29 + 2984) = v30;
    *(_BYTE *)(v29 + 2992) = 1;
  }
  if (*v30 <= a2)
  {
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x19578D898);
  }
  this = (int *)WebCore::nameString(*((unsigned __int16 *)v30 + a2 + 2));
  v71 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v71 += 2;
  *a4 = v71;
  return this;
}

uint64_t WebCore::CSSComputedStyleDeclaration::cssRules(WebCore::CSSComputedStyleDeclaration *this)
{
  return 0;
}

uint64_t WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WebCore::Node *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::CSSValue *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  WebCore::Node *v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;
  WebCore::CSSValue *v24;
  WTF::StringImpl *v25;

  if (*(_BYTE *)(this + 64))
    goto LABEL_2;
  v5 = this;
  v6 = *a2;
  if (!*a2)
  {
    v17 = 0;
    v18 = 0x100000000;
    goto LABEL_34;
  }
  if (*((_DWORD *)v6 + 1) >= 3u)
  {
    v7 = *((_QWORD *)v6 + 1);
    if ((*((_BYTE *)v6 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v7 == 45)
      {
        v8 = *(unsigned __int8 *)(v7 + 1);
LABEL_11:
        if (v8 == 45)
        {
          v9 = *(WebCore::Node **)(v5 + 32);
          v10 = *(_BYTE *)(v5 + 65);
          if (v9)
            *((_DWORD *)v9 + 6) += 2;
          v19 = v9;
          LOBYTE(v20) = 0;
          v22 = 0;
          if (*(_BYTE *)(v5 + 56))
          {
            v20 = *(_DWORD *)(v5 + 40);
            v11 = *(WTF::StringImpl **)(v5 + 48);
            if (v11)
              *(_DWORD *)v11 += 2;
            v21 = v11;
            v22 = 1;
          }
          v23 = v10;
          if ((*((_BYTE *)v6 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v6 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v6, (WTF::StringImpl *)a2);
            v6 = v25;
          }
          v25 = v6;
          WebCore::ComputedStyleExtractor::customPropertyValue((WebCore::ComputedStyleExtractor *)&v19, (const WTF::AtomString *)&v25, a3, &v24);
          v13 = v25;
          v25 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (v22)
          {
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v12);
              else
                *(_DWORD *)v14 -= 2;
            }
          }
          this = (uint64_t)v19;
          v19 = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 24) == 2)
            {
              if ((*(_WORD *)(this + 30) & 0x400) == 0)
                this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v12);
            }
            else
            {
              *(_DWORD *)(this + 24) -= 2;
            }
          }
          v15 = v24;
          if (!v24)
            goto LABEL_2;
          this = WebCore::CSSValue::createDeprecatedCSSOMWrapper(v24, (WebCore::CSSStyleDeclaration *)v5, a4);
          if (*(_DWORD *)v15 != 2)
          {
            *(_DWORD *)v15 -= 2;
            return this;
          }
          this = (uint64_t)v15;
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v16);
        }
      }
    }
    else if (*(_WORD *)v7 == 45)
    {
      v8 = *(unsigned __int16 *)(v7 + 2);
      goto LABEL_11;
    }
  }
  v17 = *((_QWORD *)v6 + 1);
  v18 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
LABEL_34:
  this = WebCore::cssPropertyID(v17, (const char *)v18);
  if (!(_DWORD)this
    || (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue((unsigned int *)&v19, v5, this),
        (this = (uint64_t)v19) == 0))
  {
LABEL_2:
    *a4 = 0;
    return this;
  }
  WebCore::CSSValue::createDeprecatedCSSOMWrapper(v19, (WebCore::CSSStyleDeclaration *)v5, a4);
  this = (uint64_t)v19;
  v19 = 0;
  if (this)
  {
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      return this;
    }
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v16);
  }
  return this;
}

void WebCore::CSSComputedStyleDeclaration::getPropertyValue(WebCore::CSSComputedStyleDeclaration *this@<X0>, WTF::AtomStringImpl **a2@<X1>, WebCore::ShorthandSerializer *a3@<X8>)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _DWORD *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  char v22;
  char v23;

  if (*((_BYTE *)this + 64))
  {
LABEL_14:
    *(_QWORD *)a3 = 0;
    return;
  }
  v5 = *a2;
  if (!*a2)
  {
    v6 = 0;
    v10 = 0x100000000;
LABEL_9:
    v11 = WebCore::cssPropertyID(v6, (const char *)v10);
    if ((_DWORD)v11)
    {
      WebCore::CSSComputedStyleDeclaration::getPropertyValue(a3, (uint64_t)this, v11);
      return;
    }
    goto LABEL_14;
  }
  v6 = *((_QWORD *)v5 + 1);
  v7 = *((unsigned int *)v5 + 1);
  v8 = *((_DWORD *)v5 + 4);
  if (v7 < 3)
    goto LABEL_8;
  if ((v8 & 4) == 0)
  {
    if (*(_WORD *)v6 == 45)
    {
      v9 = *(unsigned __int16 *)(v6 + 2);
      goto LABEL_7;
    }
LABEL_8:
    v10 = v7 | ((unint64_t)((v8 >> 2) & 1) << 32);
    goto LABEL_9;
  }
  if (*(_BYTE *)v6 != 45)
    goto LABEL_8;
  v9 = *(unsigned __int8 *)(v6 + 1);
LABEL_7:
  if (v9 != 45)
    goto LABEL_8;
  v12 = *((_QWORD *)this + 4);
  v13 = *((_BYTE *)this + 65);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v19 = v12;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)this + 56))
  {
    v20 = *((_DWORD *)this + 10);
    v14 = (_DWORD *)*((_QWORD *)this + 6);
    if (v14)
      *v14 += 2;
    v21 = v14;
    v22 = 1;
  }
  v23 = v13;
  WTF::AtomString::AtomString((WTF::AtomString *)&v18, a2);
  WebCore::ComputedStyleExtractor::customPropertyText((WebCore::ComputedStyleExtractor *)&v19, (const WTF::AtomString *)&v18, v15, a3);
  v17 = v18;
  v18 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::ComputedStyleExtractor::~ComputedStyleExtractor((WebCore::ComputedStyleExtractor *)&v19, v16);
}

void WebCore::CSSComputedStyleDeclaration::getPropertyPriority(_QWORD *a1@<X8>)
{
  _DWORD *v3;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a1 = v3;
}

void WebCore::CSSComputedStyleDeclaration::getPropertyShorthand(_QWORD *a1@<X8>)
{
  _DWORD *v3;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a1 = v3;
}

uint64_t WebCore::CSSComputedStyleDeclaration::isPropertyImplicit(WebCore::CSSComputedStyleDeclaration *this, const WTF::String *a2)
{
  return 0;
}

void WebCore::CSSComputedStyleDeclaration::setProperty(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void WebCore::CSSComputedStyleDeclaration::removeProperty(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
}

void WebCore::CSSComputedStyleDeclaration::setPropertyInternal(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t WebCore::CSSContainerRule::cssText@<X0>(WebCore::CSSContainerRule *this@<X0>, _QWORD *a2@<X8>)
{
  const Condition *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  WTF::StringBuilder::append();
  v5 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v5 + 4) & 0x1F) == 0x12)
  {
    WebCore::CQ::serialize((WTF::String *)&v9, (WTF::StringImpl **)(v5 + 24), v4);
    WebCore::CSSGroupingRule::appendCSSTextForItems(this, (WTF::StringBuilder *)&v9);
    result = (uint64_t)v9;
    if (v9
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v9),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v9),
          (result = (uint64_t)v9) != 0))
    {
      *(_DWORD *)result += 2;
    }
    *a2 = result;
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        result = (uint64_t)v9;
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSContainerRule::conditionText@<X0>(WebCore::CSSContainerRule *this@<X0>, const Condition *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v4 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v4 + 4) & 0x1F) == 0x12)
  {
    WebCore::CQ::serialize((WTF::String *)&v8, (WTF::StringImpl **)(v4 + 24), a2);
    result = (uint64_t)v8;
    if (v8
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8),
          (result = (uint64_t)v8) != 0))
    {
      *(_DWORD *)result += 2;
    }
    *a3 = result;
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        result = (uint64_t)v8;
      }
      else
      {
        *(_DWORD *)v7 -= 2;
      }
    }
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSContainerRule::containerName@<X0>(WebCore::CSSContainerRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v3 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v3 + 4) & 0x1F) != 0x12)
  {
    __break(0xC471u);
    JUMPOUT(0x19578E034);
  }
  v4 = *(WTF::StringImpl **)(v3 + 24);
  if (!v4)
  {
    v10 = 0;
    goto LABEL_5;
  }
  *(_DWORD *)v4 += 2;
  v10 = v4;
  if (!*((_DWORD *)v4 + 1)
    || (WebCore::serializeIdentifier((WTF::String *)&v10, (const WTF::String *)&v11, 0), (v6 = v11) == 0))
  {
LABEL_5:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11);
    v6 = v11;
    if (!v11)
      goto LABEL_7;
  }
  *(_DWORD *)v6 += 2;
LABEL_7:
  *a2 = v6;
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSContainerRule::containerQuery@<X0>(WebCore::CSSContainerRule *this@<X0>, const Condition *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v4 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v4 + 4) & 0x1F) == 0x12)
  {
    WebCore::MQ::serialize((uint64_t)&v8, (WTF::StringBuilder *)(v4 + 32), a2);
    result = (uint64_t)v8;
    if (v8
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8),
          (result = (uint64_t)v8) != 0))
    {
      *(_DWORD *)result += 2;
    }
    *a3 = result;
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        result = (uint64_t)v8;
      }
      else
      {
        *(_DWORD *)v7 -= 2;
      }
    }
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSContentDistributionValue::customCSSText@<X0>(WebCore::CSSContentDistributionValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  const char *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  void **v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t result;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v3 = *((unsigned __int16 *)this + 4);
  v4 = *((unsigned __int16 *)this + 5);
  if (v4 == 516)
  {
    v4 = 248;
    v5 = 931;
  }
  else if (v4 == 517)
  {
    v4 = 248;
    v5 = 933;
  }
  else
  {
    v5 = *((unsigned __int16 *)this + 6);
  }
  v6 = &str_2_41;
  v7 = " ";
  if (*((_WORD *)this + 4))
  {
    if (v3 > 0x48D)
    {
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v8 = (void **)(&WebCore::valueList + 2 * v3);
      v9 = *v8;
      v10 = (uint64_t)v8[1];
    }
    v11 = 1;
    if (!v5)
    {
      v13 = 0;
      v12 = (const char *)&str_2_41;
      v14 = &str_2_41;
      v15 = 1;
      goto LABEL_15;
    }
    v12 = " ";
    v11 = 2;
    v13 = 1;
  }
  else
  {
    v12 = (const char *)&str_2_41;
    v13 = v5 != 0;
    v11 = 1;
    v9 = &str_2_41;
    v10 = 1;
    v14 = &str_2_41;
    v15 = 1;
    if (!v5)
      goto LABEL_15;
  }
  if (v5 > 0x48D)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v16 = (void **)(&WebCore::valueList + 2 * v5);
    v14 = *v16;
    v15 = (uint64_t)v16[1];
  }
LABEL_15:
  v17 = v4 != 0;
  v18 = !v17 || !v13;
  if (!v17 || !v13)
    v7 = (const char *)&str_2_41;
  v19 = 1;
  if (v18)
    v20 = 1;
  else
    v20 = 2;
  if (v4)
  {
    if (v4 > 0x48D)
    {
      v6 = 0;
      v19 = 0;
    }
    else
    {
      v21 = (void **)(&WebCore::valueList + 2 * v4);
      v6 = *v21;
      v19 = (uint64_t)v21[1];
    }
  }
  v27[0] = v9;
  v27[1] = v10;
  v26[0] = v12;
  v26[1] = v11;
  v25[0] = v14;
  v25[1] = v15;
  v24[0] = v7;
  v24[1] = v20;
  v23[0] = v6;
  v23[1] = v19;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v27, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, a2);
  if (!*a2)
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::CSSCounterStyle::counterForSystemSymbolic(WTF::StringImpl *this, uint64_t a2, unsigned int a3)
{
  WTF::StringImpl *v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;

  v3 = this;
  if (a3)
  {
    v5 = *(_DWORD *)(a2 + 156);
    v6 = vcvtps_u32_f32((float)a3 / (float)v5);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    if (v6)
    {
      v7 = (a3 - 1) % v5;
      do
      {
        if (*(_DWORD *)(a2 + 156) <= v7)
        {
          __break(0xC471u);
          return this;
        }
        v8 = *(_QWORD *)(a2 + 144) + 16 * v7;
        v11 = *(WTF::StringImpl **)(v8 + 8);
        v10 = (uint64_t *)(v8 + 8);
        v9 = v11;
        if (v17)
          v12 = 0;
        else
          v12 = v16 == 0;
        if (v12)
        {
          if (v9)
            *(_DWORD *)v9 += 2;
          this = v15;
          v15 = v9;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)this -= 2;
          }
          v13 = *v10;
          if (*v10)
            LODWORD(v13) = *(_DWORD *)(v13 + 4);
          v17 = v13;
        }
        else if (v9 && (*((_BYTE *)v9 + 16) & 4) == 0)
        {
          this = (WTF::StringImpl *)WTF::StringBuilder::append();
        }
        else
        {
          this = (WTF::StringImpl *)WTF::StringBuilder::append();
        }
        --v6;
      }
      while (v6);
      this = v15;
      if (v15)
        goto LABEL_28;
    }
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15);
    this = v15;
    if (v15)
LABEL_28:
      *(_DWORD *)this += 2;
    *(_QWORD *)v3 = this;
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        this = v15;
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    v15 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSCounterStyle::counterForSystemAlphabetic(WTF::StringImpl *this, uint64_t a2, unsigned int a3)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  BOOL v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  WTF *v27;
  uint64_t v28;

  v3 = this;
  if (a3)
  {
    v4 = a3;
    v6 = 0;
    LODWORD(v7) = 0;
    v8 = *(_DWORD *)(a2 + 156);
    v27 = 0;
    v28 = 0;
    do
    {
      v9 = v4 - 1;
      v4 = (v4 - 1) / v8;
      if (v9 % v8 >= *(_DWORD *)(a2 + 156))
      {
        __break(0xC471u);
        return this;
      }
      v10 = (_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * (v9 % v8) + 8);
      if ((_DWORD)v7 == (_DWORD)v28)
      {
        this = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v7 + 1, (unint64_t)v10);
        v7 = HIDWORD(v28);
        v6 = v27;
        v12 = *(_DWORD **)this;
        if (*(_QWORD *)this)
          *v12 += 2;
        *((_QWORD *)v6 + v7) = v12;
      }
      else
      {
        v11 = (_DWORD *)*v10;
        if (*v10)
          *v11 += 2;
        *((_QWORD *)v6 + v7) = v11;
      }
      LODWORD(v7) = v7 + 1;
      HIDWORD(v28) = v7;
    }
    while (v8 <= v9);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 1;
    if ((_DWORD)v7)
    {
      v13 = (WTF *)((char *)v6 + 8 * v7);
      v14 = v13;
      do
      {
        v16 = (WTF::StringImpl *)*((_QWORD *)v14 - 1);
        v14 = (WTF *)((char *)v14 - 8);
        v15 = v16;
        if (v25)
          v17 = 0;
        else
          v17 = v24 == 0;
        if (v17)
        {
          if (v15)
            *(_DWORD *)v15 += 2;
          v18 = v23;
          v23 = v15;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = *((_QWORD *)v13 - 1);
          if (v19)
            LODWORD(v19) = *(_DWORD *)(v19 + 4);
          v25 = v19;
        }
        else if (v15 && (*((_BYTE *)v15 + 16) & 4) == 0)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          WTF::StringBuilder::append();
        }
        v13 = v14;
      }
      while (v14 != v27);
      this = v23;
      if (v23)
        goto LABEL_38;
    }
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v23);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v23);
    this = v23;
    if (v23)
LABEL_38:
      *(_DWORD *)this += 2;
    *(_QWORD *)v3 = this;
    v20 = v24;
    v24 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        this = v23;
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    v23 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)this -= 2;
    }
    v21 = v27;
    if (!HIDWORD(v28))
    {
      if (!v27)
        return this;
      goto LABEL_47;
    }
    v22 = 8 * HIDWORD(v28);
    do
    {
      this = *(WTF::StringImpl **)v21;
      *(_QWORD *)v21 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)this -= 2;
      }
      v21 = (WTF *)((char *)v21 + 8);
      v22 -= 8;
    }
    while (v22);
    v21 = v27;
    if (v27)
    {
LABEL_47:
      v27 = 0;
      LODWORD(v28) = 0;
      return (WTF::StringImpl *)WTF::fastFree(v21, (void *)a2);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSCounterStyle::counterForSystemNumeric(WTF::StringImpl *this, uint64_t a2, unsigned int a3)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  BOOL v11;
  _DWORD **v12;
  _DWORD *v13;
  WTF *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  BOOL v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  _DWORD *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  char v28;
  WTF *v29;
  uint64_t v30;

  v4 = this;
  v5 = *(_DWORD *)(a2 + 156);
  if (!a3)
  {
    if (v5)
    {
      v23 = *(_DWORD **)(*(_QWORD *)(a2 + 144) + 8);
      if (v23)
        *v23 += 2;
      *(_QWORD *)this = v23;
      return this;
    }
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x19578E9A0);
  }
  v6 = a3;
  v7 = 0;
  LODWORD(v8) = 0;
  v29 = 0;
  v30 = 0;
  do
  {
    if (v6 % v5 >= *(_DWORD *)(a2 + 156))
    {
      __break(0xC471u);
      goto LABEL_67;
    }
    v9 = (_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * (v6 % v5) + 8);
    if ((_DWORD)v8 == (_DWORD)v30)
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, v8 + 1, (unint64_t)v9);
      v8 = HIDWORD(v30);
      v7 = v29;
      v13 = *v12;
      if (*v12)
        *v13 += 2;
      *((_QWORD *)v7 + v8) = v13;
    }
    else
    {
      v10 = (_DWORD *)*v9;
      if (*v9)
        *v10 += 2;
      *((_QWORD *)v7 + v8) = v10;
    }
    LODWORD(v8) = v8 + 1;
    HIDWORD(v30) = v8;
    v11 = v5 > v6;
    v6 /= v5;
  }
  while (!v11);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  if ((_DWORD)v8)
  {
    v14 = (WTF *)((char *)v7 + 8 * v8);
    v15 = v14;
    do
    {
      v17 = (WTF::StringImpl *)*((_QWORD *)v15 - 1);
      v15 = (WTF *)((char *)v15 - 8);
      v16 = v17;
      if (v27)
        v18 = 0;
      else
        v18 = v26 == 0;
      if (v18)
      {
        if (v16)
          *(_DWORD *)v16 += 2;
        v19 = v25;
        v25 = v16;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v14 - 1);
        if (v20)
          LODWORD(v20) = *(_DWORD *)(v20 + 4);
        v27 = v20;
      }
      else if (v16 && (*((_BYTE *)v16 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v14 = v15;
    }
    while (v15 != v29);
    this = v25;
    if (v25)
      goto LABEL_39;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25);
  this = v25;
  if (v25)
LABEL_39:
    *(_DWORD *)this += 2;
  *(_QWORD *)v4 = this;
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
      this = v25;
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v25 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)this -= 2;
  }
  v22 = v29;
  if (HIDWORD(v30))
  {
    v24 = 8 * HIDWORD(v30);
    do
    {
      this = *(WTF::StringImpl **)v22;
      *(_QWORD *)v22 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)this -= 2;
      }
      v22 = (WTF *)((char *)v22 + 8);
      v24 -= 8;
    }
    while (v24);
    v22 = v29;
    if (v29)
    {
LABEL_48:
      v29 = 0;
      LODWORD(v30) = 0;
      return (WTF::StringImpl *)WTF::fastFree(v22, (void *)a2);
    }
  }
  else if (v29)
  {
    goto LABEL_48;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSCounterStyle::counterForSystemAdditive(WTF::StringImpl *this, uint64_t a2, unsigned int a3)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;

  v3 = this;
  if (!a3)
  {
    v14 = *(unsigned int *)(a2 + 172);
    if ((_DWORD)v14)
    {
      v15 = (_DWORD *)(*(_QWORD *)(a2 + 160) + 16);
      v16 = 24 * v14;
      do
      {
        if (!*v15)
        {
          v18 = (_DWORD *)*((_QWORD *)v15 - 1);
          if (v18)
            *v18 += 2;
          *(_QWORD *)this = v18;
          return this;
        }
        v15 += 6;
        v16 -= 24;
      }
      while (v16);
    }
    *(_QWORD *)this = 0;
    return this;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v4 = *(_DWORD *)(a2 + 172);
  if (!v4)
    goto LABEL_29;
  v5 = a3;
  v6 = *(_QWORD *)(a2 + 160);
  v7 = v6 + 24 * v4;
  while (2)
  {
    v8 = *(_DWORD *)(v6 + 16);
    if (v8 - 1 >= v5)
      goto LABEL_28;
    v9 = v5 / v8;
    if (v8 > v5)
      goto LABEL_27;
    v10 = v5 / v8;
    do
    {
      if (v21)
      {
        v11 = *(_QWORD *)(v6 + 8);
      }
      else
      {
        v11 = *(_QWORD *)(v6 + 8);
        if (!v20)
        {
          if (v11)
            *(_DWORD *)v11 += 2;
          v12 = v19;
          v19 = (WTF::StringImpl *)v11;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
              v11 = *(_QWORD *)(v6 + 8);
              if (!v11)
                goto LABEL_16;
              goto LABEL_15;
            }
            *(_DWORD *)v12 -= 2;
          }
          if (!v11)
          {
LABEL_16:
            v21 = v11;
            goto LABEL_17;
          }
LABEL_15:
          LODWORD(v11) = *(_DWORD *)(v11 + 4);
          goto LABEL_16;
        }
      }
      if (v11 && (*(_BYTE *)(v11 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
LABEL_17:
      --v10;
    }
    while (v10);
    v8 = *(_DWORD *)(v6 + 16);
LABEL_27:
    v5 -= v8 * v9;
    if (v5)
    {
LABEL_28:
      v6 += 24;
      if (v6 == v7)
      {
LABEL_29:
        v13 = 0;
        goto LABEL_38;
      }
      continue;
    }
    break;
  }
  v13 = v19;
  if (v19
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
        (v13 = v19) != 0))
  {
    *(_DWORD *)v13 += 2;
  }
LABEL_38:
  *(_QWORD *)v3 = v13;
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  this = v19;
  v19 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

_QWORD *WebCore::CSSCounterStyle::counterForSystemDisclosureClosed(_QWORD *result, unsigned __int8 a2)
{
  if (a2 - 2 < 2 || a2 <= 1u)
    return (_QWORD *)WTF::String::String();
  *result = 0;
  return result;
}

_QWORD *WebCore::CSSCounterStyle::counterForSystemDisclosureOpen(_QWORD *result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = (_QWORD *)WTF::String::String();
      break;
    default:
      *result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::counterForSystemCJK(uint64_t a1, int a2, uint64_t a3, char a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _WORD v26[33];
  _OWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return WTF::String::String();
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v5 = v4 / 0x2710;
  v6 = v4 % 0x2710;
  DWORD2(v32) = (unsigned __int16)(v4 % 0x2710 % 0xA + 7);
  v7 = v4 - 10000;
  if (v4 - 10000 < 0xFFFFB1E1 || v6 >= 0xA)
  {
    LODWORD(v32) = (unsigned __int16)(v4 % 0x2710 / 0xA - 10 * ((6554 * (v4 % 0x2710 / 0xA)) >> 16) + 7);
    if (v4 % 0x2710 / 0xA != 10 * ((6554 * (v4 % 0x2710 / 0xA)) >> 16))
      DWORD1(v32) = 4;
  }
  if (v7 < 0xFFFFB1E1 || v6 >= 0x64)
  {
    v8 = ((unsigned __int16)v6 / 0x64u) % 0xAu;
    DWORD2(v31) = v8 + 7;
    if (v8)
      HIDWORD(v31) = 5;
  }
  if (v7 < 0xFFFFB1E1 || v6 >= 0x3E8)
  {
    LODWORD(v31) = (unsigned __int16)v6 / 0x3E8u + 7;
    if (v6 > 0x3E7)
    {
      v9 = 6;
      v10 = 25;
      goto LABEL_21;
    }
  }
  if (v6 <= 0x13 && (a4 & 1) == 0)
  {
    v9 = 0;
    v10 = 28;
LABEL_21:
    *((_DWORD *)v27 + v10) = v9;
  }
  if (v7 >= 0xFFFFB1E1)
    goto LABEL_50;
  v12 = v5 - 10000 * ((429497 * (unint64_t)v5) >> 32);
  if (v12)
    HIDWORD(v30) = 1;
  DWORD2(v30) = (unsigned __int16)((unsigned __int16)v12 % 0xAu + 7);
  v13 = v5 - 10000;
  if (v13 < 0xFFFFB1E1 || v12 >= 0xA)
  {
    LODWORD(v30) = (unsigned __int16)((unsigned __int16)v12 / 0xAu
                                    - 10 * ((6554 * ((unsigned __int16)v12 / 0xAu)) >> 16)
                                    + 7);
    if ((unsigned __int16)v12 / 0xAu != 10 * ((6554 * ((unsigned __int16)v12 / 0xAu)) >> 16))
      DWORD1(v30) = 4;
  }
  if (v13 < 0xFFFFB1E1 || v12 >= 0x64)
  {
    v14 = ((unsigned __int16)v12 / 0x64u) % 0xAu;
    DWORD2(v29) = v14 + 7;
    if (v14)
      HIDWORD(v29) = 5;
  }
  if (v13 < 0xFFFFB1E1 || v12 >= 0x3E8)
  {
    LODWORD(v29) = (unsigned __int16)v12 / 0x3E8u + 7;
    if (v12 > 0x3E7)
    {
      v15 = 6;
      v16 = 17;
      goto LABEL_40;
    }
  }
  if (v12 <= 0x13 && (a4 & 1) == 0)
  {
    v15 = 0;
    v16 = 20;
LABEL_40:
    *((_DWORD *)v27 + v16) = v15;
  }
  if (v13 <= 0xFFFFB1E0)
  {
    v17 = v4 / 0x5F5E100;
    if (v4 >= 0x5F5E100)
    {
      v20 = (205 * v17) >> 11;
      DWORD2(v28) = (v17 - 10 * v20 + 7);
      HIDWORD(v28) = 2;
      if (v4 < 0x3B9ACA00 || (LODWORD(v28) = v20 + 7, v17 < 0xA))
      {
LABEL_47:
        if (v4 <= 0x773593FF && (a4 & 1) == 0)
          LODWORD(v28) = 0;
        goto LABEL_50;
      }
      v18 = 4;
      v19 = 13;
    }
    else
    {
      v18 = (v17 - 10 * ((unsigned __int16)(26 * v17) >> 8) + 7);
      v19 = 14;
    }
    *((_DWORD *)v27 + v19) = v18;
    goto LABEL_47;
  }
LABEL_50:
  if (a2 < 0)
  {
    v26[0] = *(_WORD *)(a3 + 32);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = *(_DWORD *)((char *)v27 + v22);
    if (v24)
    {
      if (v24 == 7 && v23 == 7)
      {
        v23 = 7;
      }
      else
      {
        if (v24 >= 0x12)
          __break(1u);
        v26[v21++] = *(_WORD *)(a3 + 2 * (v24 - 1));
        v23 = v24;
      }
    }
    v22 += 4;
  }
  while (v22 != 128);
  return WTF::String::String();
}

uint64_t WebCore::CSSCounterStyle::counterForSystemEthiopicNumeric(WebCore::CSSCounterStyle *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _WORD v15[15];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    v15[0] = 4969;
    return WTF::String::String();
  }
  v2 = (unsigned __int16)(a2 / 0xF4240 - 100 * ((unsigned __int16)((5243 * (a2 / 0xF4240)) >> 16) >> 3));
  v3 = a2 / 0x5F5E100;
  if (a2 / 0x5F5E100 == 1)
  {
    v4 = 0;
  }
  else
  {
    if (v3 >= 0xA)
    {
      v15[0] = ((429496730 * (unint64_t)v3) >> 32) + 4977;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = v3 - 10 * ((429496730 * (unint64_t)v3) >> 32);
    if (v5)
    {
      v15[v4++] = v5 + 4968;
    }
    else if (!v3)
    {
      goto LABEL_12;
    }
  }
  v15[v4++] = 4988;
LABEL_12:
  v6 = a2 / 0x2710 - 100 * ((42949673 * (unint64_t)(a2 / 0x2710)) >> 32);
  if (v2 != 1)
  {
    if (v2 >= 0xA)
      v15[v4++] = ((unsigned __int16)(a2 / 0xF4240
                                                     - 100 * ((unsigned __int16)((5243 * (a2 / 0xF4240)) >> 16) >> 3))
                                  / 0xAu)
                + 4977;
    v7 = v2 - 10 * ((429496730 * (unint64_t)v2) >> 32);
    if (v7)
    {
      v15[v4++] = v7 + 4968;
    }
    else if (a2 / 0xF4240 == 100 * ((unsigned __int16)((5243 * (a2 / 0xF4240)) >> 16) >> 3))
    {
      goto LABEL_19;
    }
  }
  v15[v4++] = 4987;
LABEL_19:
  v8 = v2 | v3;
  if (v6 != 1 || v8 != 0)
  {
    if (v6 >= 0xA)
      v15[v4++] = (v6 / 0xA) + 4977;
    if (v6 % 0xA)
      v15[v4++] = v6 % 0xA + 4968;
  }
  v10 = a2 / 0x64 - 100 * ((42949673 * (unint64_t)(a2 / 0x64)) >> 32);
  v11 = v8 | v6;
  if (v11)
    v15[v4++] = 4988;
  v12 = a2 % 0x64;
  if (v10 == 1)
    goto LABEL_35;
  if (v10 >= 0xA)
    v15[v4++] = (v10 / 0xA) + 4977;
  if (v10 % 0xA)
  {
    v15[v4++] = v10 % 0xA + 4968;
LABEL_35:
    v15[v4++] = 4987;
    goto LABEL_36;
  }
  if (v10)
    goto LABEL_35;
LABEL_36:
  if (v12 != 1 || v11 | v10)
  {
    if (v12 >= 0xA)
      v15[v4++] = a2 % 0x64 / 0xA + 4977;
    v13 = a2 % 0x64 % 0xA;
    if (v13)
      v15[v4] = v13 + 4968;
  }
  return WTF::String::String();
}

WTF::StringImpl *WebCore::CSSCounterStyle::initialRepresentation@<X0>(WTF::StringImpl *result@<X0>, int a2@<W1>, char a3@<W2>, WTF::StringImpl *a4@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  void *v12;
  uint64_t v13;
  char v14;

  if (a2 >= 0)
    v5 = a2;
  else
    v5 = -a2;
  if (*((_BYTE *)result + 24))
  {
    switch(*((_BYTE *)result + 24))
    {
      case 1:
        return WebCore::CSSCounterStyle::counterForSystemNumeric(a4, (uint64_t)result, v5);
      case 2:
        return WebCore::CSSCounterStyle::counterForSystemAlphabetic(a4, (uint64_t)result, v5);
      case 3:
        return WebCore::CSSCounterStyle::counterForSystemSymbolic(a4, (uint64_t)result, v5);
      case 4:
        return WebCore::CSSCounterStyle::counterForSystemAdditive(a4, (uint64_t)result, v5);
      case 5:
        v10 = *((_DWORD *)result + 48);
        v11 = __OFSUB__(a2, v10);
        v8 = a2 - v10;
        if (((v8 & 0x80000000) != 0) == v11 && *((_DWORD *)result + 39) > v8)
          goto LABEL_8;
        v9 = 0;
        goto LABEL_10;
      case 6:
        return (WTF::StringImpl *)WebCore::CSSCounterStyle::counterForSystemDisclosureClosed(a4, a3);
      case 7:
        return (WTF::StringImpl *)WebCore::CSSCounterStyle::counterForSystemDisclosureOpen(a4, a3);
      case 8:
        v12 = &WebCore::CSSCounterStyle::counterForSystemSimplifiedChineseInformal(int)::simplifiedChineseInformalTable;
        goto LABEL_26;
      case 9:
        v12 = &WebCore::CSSCounterStyle::counterForSystemSimplifiedChineseFormal(int)::simplifiedChineseFormalTable;
        goto LABEL_29;
      case 0xA:
        v12 = &WebCore::CSSCounterStyle::counterForSystemTraditionalChineseInformal(int)::traditionalChineseInformalTable;
LABEL_26:
        v13 = (uint64_t)a4;
        v14 = 0;
        goto LABEL_27;
      case 0xB:
        v12 = &WebCore::CSSCounterStyle::counterForSystemTraditionalChineseFormal(int)::traditionalChineseFormalTable;
LABEL_29:
        v13 = (uint64_t)a4;
        v14 = 1;
LABEL_27:
        result = (WTF::StringImpl *)WebCore::counterForSystemCJK(v13, a2, (uint64_t)v12, v14);
        break;
      case 0xC:
        result = (WTF::StringImpl *)WebCore::CSSCounterStyle::counterForSystemEthiopicNumeric(a4, a2);
        break;
      default:
        *(_QWORD *)a4 = 0;
        break;
    }
  }
  else
  {
    v6 = *((_DWORD *)result + 39);
    v7 = v6 + a2;
    if (a2 > 0)
      v7 = a2;
    v8 = (v7 - 1) % v6;
LABEL_8:
    v9 = *(_DWORD **)(*((_QWORD *)result + 18) + 16 * v8 + 8);
    if (v9)
      *v9 += 2;
LABEL_10:
    *(_QWORD *)a4 = v9;
  }
  return result;
}

uint64_t WebCore::CSSCounterStyle::fallbackText(uint64_t a1, void *a2)
{
  WebCore::CSSCounterStyle *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  unsigned int v18[2];

  if (!*(_BYTE *)(a1 + 232))
  {
    v6 = *(_QWORD *)(a1 + 216);
    if (v6)
    {
      do
        v7 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v7 + 1, (unsigned int *)v6));
      v8 = *(_QWORD *)(v6 + 8);
      do
      {
        v9 = __ldaxr((unsigned int *)v6);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v6));
      if (v10)
      {
        if (v8)
        {
LABEL_11:
          *(_BYTE *)(a1 + 232) = 1;
          v11 = *(_QWORD *)(a1 + 216);
          if (v11)
          {
            do
              v12 = __ldaxr((unsigned int *)v11);
            while (__stlxr(v12 + 1, (unsigned int *)v11));
            result = WebCore::CSSCounterStyle::text(*(_QWORD *)(v11 + 8));
            do
            {
              v14 = __ldaxr((unsigned int *)v11);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, (unsigned int *)v11));
            if (!v15)
            {
              atomic_store(1u, (unsigned int *)v11);
              result = WTF::fastFree((WTF *)v11, v13);
            }
          }
          else
          {
            result = WebCore::CSSCounterStyle::text(0);
          }
          *(_BYTE *)(a1 + 232) = 0;
          return result;
        }
      }
      else
      {
        atomic_store(1u, (unsigned int *)v6);
        WTF::fastFree((WTF *)v6, a2);
        if (v8)
          goto LABEL_11;
      }
    }
  }
  *(_BYTE *)(a1 + 232) = 0;
  WebCore::CSSCounterStyleRegistry::decimalCounter((WebCore::CSSCounterStyleRegistry *)v18);
  v3 = *(WebCore::CSSCounterStyle **)v18;
  result = WebCore::CSSCounterStyle::text(v18[0]);
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::CSSCounterStyle::~CSSCounterStyle(v3, v5);
      return WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleRegistry::decimalCounter(WebCore::CSSCounterStyleRegistry *this)
{
  WTF::StringImpl *v2;
  uint64_t result;
  int v4;
  unsigned int i;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;

  {
    WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters = 0;
  }
  WTF::AtomStringImpl::add();
  result = (uint64_t)v12;
  if (WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters)
  {
    v4 = 0;
    for (i = *((_DWORD *)v12 + 4) >> 8; ; i = v4 + v6)
    {
      v6 = i & *(_DWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 8);
      v7 = *(WTF::StringImpl **)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
                               + 16 * v6);
      if (!v7)
        break;
      if (v7 != (WTF::StringImpl *)-1 && v7 == v12)
      {
        v9 = WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters + 16 * v6;
        if (v12)
          goto LABEL_14;
        goto LABEL_16;
      }
      ++v4;
    }
    v9 = WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
       + 16 * *(unsigned int *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 4);
    if (v12)
      goto LABEL_14;
  }
  else
  {
    v9 = 0;
    if (v12)
    {
LABEL_14:
      if (*(_DWORD *)v12 == 2)
        result = WTF::StringImpl::destroy(v12, v2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
LABEL_16:
  v10 = WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters;
  if (WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters)
    v10 = WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters
        + 16 * *(unsigned int *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 4);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = *(_DWORD **)(v9 + 8);
    if (v11)
      ++*v11;
  }
  *(_QWORD *)this = v11;
  return result;
}

WTF::StringImpl *WebCore::CSSCounterStyle::text@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  WTF::StringImpl *result;
  _DWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v7 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v7)
  {
    v12 = *(_DWORD **)(a1 + 96);
    v13 = &v12[2 * v7];
    while (*v12 > (int)a2 || v12[1] < (int)a2)
    {
      v12 += 2;
      if (v12 == v13)
        return (WTF::StringImpl *)WebCore::CSSCounterStyle::fallbackText(a1, a2);
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 24);
    v9 = v8 >= 2;
    v10 = v8 - 2;
    if (v9)
    {
      switch(v10)
      {
        case 0u:
        case 1u:
        case 0xAu:
          if ((int)a2 <= 0)
            return (WTF::StringImpl *)WebCore::CSSCounterStyle::fallbackText(a1, a2);
          break;
        case 2u:
          if ((a2 & 0x80000000) != 0)
            return (WTF::StringImpl *)WebCore::CSSCounterStyle::fallbackText(a1, a2);
          break;
        case 3u:
        case 4u:
        case 5u:
        case 0xBu:
          break;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
          if (((_DWORD)a2 + 9999) >= 0x4E1F)
            return (WTF::StringImpl *)WebCore::CSSCounterStyle::fallbackText(a1, a2);
          break;
        default:
          return (WTF::StringImpl *)WebCore::CSSCounterStyle::fallbackText(a1, a2);
      }
    }
  }
  WebCore::CSSCounterStyle::initialRepresentation((WTF::StringImpl *)a1, (int)a2, a3, (WTF::StringImpl *)&v16);
  if (v16)
  {
    result = (WTF::StringImpl *)WebCore::CSSCounterStyle::applyPadSymbols((_DWORD *)a1, &v16, (int)a2);
    if ((a2 & 0x80000000) != 0 && *(unsigned __int8 *)(a1 + 24) - 1 <= 3)
      result = WebCore::CSSCounterStyle::applyNegativeSymbols((WebCore::CSSCounterStyle *)a1, (WTF::String *)&v16);
    *a4 = v16;
  }
  else
  {
    WebCore::CSSCounterStyle::fallbackText(a1, a2);
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *WebCore::CSSCounterStyle::applyPadSymbols(_DWORD *this, WTF::StringImpl **a2, int a3)
{
  int v3;
  _DWORD *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v3 = this[28];
  if (!v3)
    return this;
  v6 = this;
  v7 = v3 - WTF::numGraphemeClusters();
  if (a3 < 0 && *((unsigned __int8 *)v6 + 24) - 1 <= 3)
  {
    v22 = WTF::numGraphemeClusters();
    v7 -= v22 + WTF::numGraphemeClusters();
  }
  if (v7 <= 0)
  {
    v8 = 0;
LABEL_44:
    v15 = 1;
    goto LABEL_29;
  }
  v8 = 0;
  do
  {
    v9 = v8;
    if (v8)
      *(_DWORD *)v8 += 2;
    v26 = v8;
    v10 = (WTF::StringImpl *)*((_QWORD *)v6 + 16);
    if (v10)
      *(_DWORD *)v10 += 2;
    v25 = v10;
    WTF::makeString<WTF::String,WTF::String>((uint64_t)&v26, (uint64_t *)&v25, &v27);
    v8 = v27;
    v27 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v11);
        v14 = v27;
        v27 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v11);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v9 -= 2;
        v27 = 0;
      }
    }
    v12 = v25;
    v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v26;
    v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    --v7;
  }
  while (v7);
  if (!v8)
    goto LABEL_44;
  v15 = 0;
  *(_DWORD *)v8 += 2;
LABEL_29:
  v24 = v8;
  v16 = *a2;
  if (*a2)
    *(_DWORD *)v16 += 2;
  v23 = v16;
  WTF::makeString<WTF::String,WTF::String>((uint64_t)&v24, (uint64_t *)&v23, &v27);
  v18 = v27;
  v27 = 0;
  v19 = *a2;
  *a2 = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v17);
      v21 = v27;
      v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v17);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v19 -= 2;
      v27 = 0;
    }
  }
  v20 = v23;
  v23 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  this = v24;
  v24 = 0;
  if (this)
  {
    if (*this == 2)
      this = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
    else
      *this -= 2;
  }
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)v8 == 2)
      return (_DWORD *)WTF::StringImpl::destroy(v8, v17);
    else
      *(_DWORD *)v8 -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSCounterStyle::applyNegativeSymbols(WebCore::CSSCounterStyle *this, WTF::String *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *result;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  char v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v7 = *((_QWORD *)this + 7);
  if (!v7 || (v17 = *(_DWORD *)(v7 + 4)) == 0)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    if (v3)
      *(_DWORD *)v3 += 2;
    v5 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v5 += 2;
    if (v3)
    {
      v8 = *((_DWORD *)v3 + 1);
      if (v5)
      {
LABEL_8:
        v9 = *(_DWORD *)(v5 + 4);
LABEL_9:
        if ((v9 | v8) < 0 || (v10 = (v8 + v9), __OFADD__(v8, v9)))
        {
          v25 = 0;
          goto LABEL_81;
        }
        if (v3)
        {
          v11 = *((_DWORD *)v3 + 4);
          v12 = (v11 >> 2) & 1;
          if (v5 && (v11 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v5)
          {
LABEL_14:
            v12 = (*(unsigned __int8 *)(v5 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v12 = 1;
        }
LABEL_15:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v3, v5, &v25);
        v14 = v25;
        if (v25)
        {
          v15 = 1;
          goto LABEL_17;
        }
        goto LABEL_81;
      }
    }
    else
    {
      v8 = 0;
      if (v5)
        goto LABEL_8;
    }
    v9 = 0;
    goto LABEL_9;
  }
  v2 = *((_QWORD *)this + 5);
  if (v2)
    *(_DWORD *)v2 += 2;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  *(_DWORD *)v7 += 2;
  if (!v2)
  {
    v18 = 0;
    if (v4)
      goto LABEL_44;
LABEL_76:
    v19 = 0;
    goto LABEL_45;
  }
  v18 = *(_DWORD *)(v2 + 4);
  if (!v4)
    goto LABEL_76;
LABEL_44:
  v19 = *(_DWORD *)(v4 + 4);
LABEL_45:
  if ((v19 | v17) < 0
    || ((v20 = __OFADD__(v19, v17), v21 = v19 + v17, !v20) ? (v22 = 0) : (v22 = 1),
        v18 < 0 || (v22 & 1) != 0 || __OFADD__(v18, v21)))
  {
    v25 = 0;
    goto LABEL_81;
  }
  if ((!v2 || (*(_BYTE *)(v2 + 16) & 4) != 0) && (!v4 || (*(_BYTE *)(v4 + 16) & 4) != 0))
    v23 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
  else
    v23 = 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v18 + v21), v23, (_DWORD *)v2, v4, v7, &v25);
  v14 = v25;
  if (!v25)
  {
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x19578FED4);
  }
  v15 = 0;
LABEL_17:
  v25 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v14;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v13);
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *(_DWORD *)result -= 2;
      v25 = 0;
    }
  }
  if ((v15 & 1) == 0)
  {
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v13);
        if (!v4)
          goto LABEL_33;
        goto LABEL_31;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_33;
LABEL_31:
    if (*(_DWORD *)v4 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v4, v13);
    else
      *(_DWORD *)v4 -= 2;
LABEL_33:
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
      {
        v24 = (WTF::StringImpl *)v2;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v13);
      }
      *(_DWORD *)v2 -= 2;
    }
    return result;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v13);
      if (v3)
        goto LABEL_25;
      return result;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (v3)
  {
LABEL_25:
    if (*(_DWORD *)v3 != 2)
    {
      *(_DWORD *)v3 -= 2;
      return result;
    }
    v24 = v3;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v13);
  }
  return result;
}

uint64_t WTF::makeString<WTF::String,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;

  v4 = *(_QWORD *)result;
  v5 = *a2;
  if (*(_QWORD *)result)
    v6 = *(_DWORD *)(v4 + 4);
  else
    v6 = 0;
  if (v5)
    v7 = *(_DWORD *)(v5 + 4);
  else
    v7 = 0;
  if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
  {
    *a3 = 0;
    goto LABEL_18;
  }
  if (v4)
  {
    v8 = *(_DWORD *)(v4 + 16);
    v9 = (v8 >> 2) & 1;
    if (v5 && (v8 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v5)
    {
LABEL_10:
      v9 = (*(unsigned __int8 *)(v5 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v9 = 1;
  }
LABEL_11:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, v4, v5, a3);
  if (!*a3)
LABEL_18:
    __break(0xC471u);
  return result;
}

void WebCore::rangeFromCSSValue(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  WTF *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v18;
  int v19;
  unsigned int v20;
  int v21;
  double v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  WTF *v27;
  unint64_t v28;
  WTF *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  WTF *v38;
  uint64_t v39;
  unint64_t v40;

  v4 = *a1;
  if (*a1)
    v5 = ((*(unsigned __int16 *)(*a1 + 4) | (*(unsigned __int8 *)(*a1 + 6) << 16)) & 0x3F800) == 120832;
  else
    v5 = 0;
  if (!v5)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  v38 = 0;
  v39 = 0;
  v6 = *(_DWORD *)(v4 + 8);
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      if (v10 > 3)
      {
        if (*(_DWORD *)(v4 + 8) <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195790328);
        }
        v12 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 8 * (v11 - 4));
      }
      else
      {
        v12 = (uint64_t *)(v4 + 16 + 8 * v11);
      }
      v13 = *v12;
      if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0x1B800)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v29 = v38;
        if (v38)
        {
          v38 = 0;
          LODWORD(v39) = 0;
          WTF::fastFree(v29, a2);
        }
        return;
      }
      v14 = *(_QWORD *)(v13 + 8);
      if (((*(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195790274);
      }
      v15 = *(_QWORD *)(v13 + 16);
      if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195790294);
      }
      v16 = *(_WORD *)(v14 + 4) & 0x7F;
      if ((v16 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v14 + 4) & 0x7F) - 63)) & 0x34001) != 0)
        goto LABEL_59;
      if (v16 == 73)
      {
        v30 = *(unsigned __int8 **)(*(_QWORD *)(v14 + 8) + 8);
        v31 = v30[12];
        if (v31 != 1 && (v31 - 5) > 3)
          goto LABEL_59;
        v16 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v30 + 72))(v30);
      }
      if (v16 == 2)
      {
        if ((*(_WORD *)(v14 + 4) & 0x7F) == 0x49)
        {
          v34 = *(_QWORD *)(v14 + 8);
          v40 = 0;
          v36 = WebCore::CSSCalcValue::doubleValue(v34, (uint64_t)&v40);
          if (v40)
            WTF::fastFree((WTF *)(v40 - 16), a2);
          v18 = v36;
        }
        else
        {
          v18 = *(double *)(v14 + 8);
        }
        v19 = (int)v18;
        if (v18 <= -2147483650.0)
          v19 = 0x80000000;
        if (v18 < 2147483650.0)
          v20 = v19;
        else
          v20 = 0x7FFFFFFF;
        goto LABEL_28;
      }
LABEL_59:
      v20 = 0x80000000;
LABEL_28:
      v21 = *(_WORD *)(v15 + 4) & 0x7F;
      if ((v21 - 63) <= 0x11 && ((1 << (v21 - 63)) & 0x34001) != 0)
        goto LABEL_44;
      if (v21 == 73)
      {
        v32 = *(unsigned __int8 **)(*(_QWORD *)(v15 + 8) + 8);
        v33 = v32[12];
        if (v33 != 1 && (v33 - 5) > 3)
          goto LABEL_44;
        v21 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v32 + 72))(v32);
      }
      if (v21 != 2)
        goto LABEL_44;
      if ((*(_WORD *)(v15 + 4) & 0x7F) == 0x49)
      {
        v35 = *(_QWORD *)(v15 + 8);
        v40 = 0;
        v37 = WebCore::CSSCalcValue::doubleValue(v35, (uint64_t)&v40);
        if (v40)
          WTF::fastFree((WTF *)(v40 - 16), a2);
        v23 = v37;
      }
      else
      {
        v23 = *(double *)(v15 + 8);
      }
      if (v23 >= 2147483650.0)
      {
LABEL_44:
        v24 = 0x7FFFFFFF;
        goto LABEL_40;
      }
      if (v23 <= -2147483650.0)
        v24 = 0x80000000;
      else
        v24 = (int)v23;
LABEL_40:
      v40 = __PAIR64__(v24, v20);
      v25 = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        v26 = (unint64_t *)WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)&v40);
        v25 = HIDWORD(v39);
        v27 = v38;
        v28 = *v26;
      }
      else
      {
        v27 = v38;
        v28 = v40;
      }
      *((_QWORD *)v27 + v25) = v28;
      v7 = ++HIDWORD(v39);
      v10 = v11 + 1;
      v11 = (v11 + 1);
      if (v6 == v10)
      {
        v9 = v38;
        v8 = v39;
        goto LABEL_45;
      }
    }
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
LABEL_45:
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 12) = v7;
}

void WebCore::additiveSymbolsFromCSSValue(uint64_t *a1@<X0>, void *a2@<X1>, unsigned int *a3@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  if (((*(unsigned __int16 *)(*a1 + 4) | (*(unsigned __int8 *)(*a1 + 6) << 16)) & 0x3F800) != 0x1D800)
  {
    __break(0xC471u);
    JUMPOUT(0x195790634);
  }
  v29 = *a1;
  v4 = *(_DWORD *)(*a1 + 8);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v5 > 3)
      {
        if (*(_DWORD *)(v29 + 8) <= v5)
        {
LABEL_55:
          __break(0xC471u);
          JUMPOUT(0x1957905F4);
        }
        v7 = *(_QWORD *)(v29 + 48) + 8 * (v6 - 4);
      }
      else
      {
        v7 = v29 + 16 + 8 * v6;
      }
      v8 = *(_QWORD *)v7;
      if (((*(unsigned __int16 *)(*(_QWORD *)v7 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v7 + 6) << 16)) & 0x3F800) != 0x1B800)
        goto LABEL_55;
      v9 = *(_QWORD *)(v8 + 8);
      if (((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195790614);
      }
      if ((*(_WORD *)(v9 + 4) & 0x7F) == 0x49)
      {
        v27 = *(_QWORD *)(v9 + 8);
        v30 = 0;
        v10 = WebCore::CSSCalcValue::doubleValue(v27, (uint64_t)&v30);
        if (v30)
        {
          v28 = v10;
          WTF::fastFree((WTF *)(v30 - 16), a2);
          v10 = v28;
        }
      }
      else
      {
        v10 = *(double *)(v9 + 8);
      }
      if (v10 >= 4294967300.0)
      {
        v11 = -1;
      }
      else if (v10 <= 0.0)
      {
        v11 = 0;
      }
      else
      {
        v11 = v10;
      }
      v12 = *(_QWORD *)(v8 + 16);
      if (v12 && ((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) == 0)
      {
        v13 = 0;
        v19 = *(_WORD *)(v12 + 4) & 0x7F;
        v14 = v19 == 63;
        v20 = (v19 - 20);
        if (v20 <= 0x3C)
        {
          if (((1 << v20) & 0x20008000000000BLL) == 0)
          {
            if (v20 == 60)
            {
              v26 = WebCore::nameString(*(unsigned __int16 *)(v12 + 8));
            }
            else
            {
              if (v20 != 59)
                goto LABEL_16;
              v26 = WebCore::nameString(*(unsigned __int16 *)(v12 + 8));
            }
            v13 = (WTF::StringImpl *)*v26;
            if (!*v26)
              goto LABEL_16;
LABEL_28:
            *(_DWORD *)v13 += 2;
            goto LABEL_16;
          }
          v13 = *(WTF::StringImpl **)(v12 + 8);
          if (v13)
            goto LABEL_28;
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
LABEL_16:
      v15 = a3[3];
      if ((_DWORD)v15 == a3[2])
      {
        v21 = v15 + (v15 >> 2);
        if (v21 >= 0x10)
          v22 = v21 + 1;
        else
          v22 = 16;
        if (v22 <= v15 + 1)
          v23 = v15 + 1;
        else
          v23 = v22;
        WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v23);
        LODWORD(v15) = a3[3];
        v24 = *(_QWORD *)a3;
        v25 = *(_QWORD *)a3 + 24 * v15;
        *(_BYTE *)v25 = v14;
        if (v13)
          *(_DWORD *)v13 += 2;
        *(_QWORD *)(v25 + 8) = v13;
        v18 = (unsigned int *)(v24 + 24 * v15 + 16);
      }
      else
      {
        v16 = *(_QWORD *)a3;
        v17 = *(_QWORD *)a3 + 24 * v15;
        *(_BYTE *)v17 = v14;
        if (v13)
          *(_DWORD *)v13 += 2;
        *(_QWORD *)(v17 + 8) = v13;
        v18 = (unsigned int *)(v16 + 24 * v15 + 16);
      }
      *v18 = v11;
      a3[3] = v15 + 1;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v5 = v6 + 1;
      v6 = (v6 + 1);
    }
    while (v4 != v5);
  }
}

uint64_t *WebCore::padFromCSSValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  int v6;
  uint64_t *result;
  WTF::StringImpl *v9;

  v3 = *a1;
  *a1 = 0;
  if (((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F800) != 0x1D800)
  {
    __break(0xC471u);
    JUMPOUT(0x19579076CLL);
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19579078CLL);
  }
  v5 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v4);
  if (v5 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFF;
  }
  else
  {
    v6 = (int)v5;
    if (v5 <= -2147483650.0 || v6 < 1)
      v6 = 0;
  }
  *(_DWORD *)a2 = v6;
  result = WebCore::symbolFromCSSValue((uint64_t *)(a2 + 8), *(const WebCore::CSSValue **)(v3 + 24));
  if (*(_DWORD *)v3 == 2)
    return (uint64_t *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v3, v9);
  *(_DWORD *)v3 -= 2;
  return result;
}

WTF::StringImpl *WebCore::negativeSymbolsFromCSSValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  const WebCore::CSSValue *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WebCore::CSSValue *v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  *(_BYTE *)a2 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *a1;
  if (v4)
    v5 = ((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F800) == 120832;
  else
    v5 = 0;
  if (v5)
  {
    if (*(_DWORD *)(v4 + 8))
      v9 = *(const WebCore::CSSValue **)(v4 + 16);
    else
      v9 = 0;
    WebCore::symbolFromCSSValue(&v13, v9);
    WebCore::CSSCounterStyleDescriptors::Symbol::operator=(a2, (WTF::StringImpl *)&v13);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*(_DWORD *)(v4 + 8) < 2u)
      v12 = 0;
    else
      v12 = *(const WebCore::CSSValue **)(v4 + 24);
    WebCore::symbolFromCSSValue(&v13, v12);
    v6 = a2 + 16;
  }
  else
  {
    WebCore::symbolFromCSSValue(&v13, (const WebCore::CSSValue *)v4);
    v6 = a2;
  }
  WebCore::CSSCounterStyleDescriptors::Symbol::operator=(v6, (WTF::StringImpl *)&v13);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::symbolsFromCSSValue@<X0>(WTF::StringImpl *result@<X0>, WTF::StringImpl *a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17[8];
  WTF::StringImpl *v18;

  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v4 = *(_QWORD *)result;
  if (((*(unsigned __int16 *)(*(_QWORD *)result + 4) | (*(unsigned __int8 *)(*(_QWORD *)result + 6) << 16)) & 0x3F800) != 0x1D800)
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  v5 = *(_DWORD *)(v4 + 8);
  if (v5)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      if (v8 > 3)
      {
        if (*(_DWORD *)(v4 + 8) <= v8)
        {
          __break(0xC471u);
LABEL_33:
          JUMPOUT(0x195790AC0);
        }
        v10 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 8 * (v9 - 4));
      }
      else
      {
        v10 = (uint64_t *)(v4 + 16 + 8 * v9);
      }
      v11 = *v10;
      if (v11)
      {
        if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) == 0)
        {
          v12 = *(_WORD *)(v11 + 4) & 0x7F;
          v17[0] = v12 == 63;
          v13 = (v12 - 20);
          if (v13 <= 0x3C)
          {
            if (((1 << v13) & 0x20008000000000BLL) != 0)
            {
              v14 = *(WTF::StringImpl **)(v11 + 8);
              if (v14)
                goto LABEL_11;
            }
            else
            {
              if (v13 == 60)
              {
                result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(v11 + 8));
              }
              else
              {
                if (v13 != 59)
                  goto LABEL_16;
                result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(v11 + 8));
              }
              v14 = *(WTF::StringImpl **)result;
              if (*(_QWORD *)result)
              {
LABEL_11:
                *(_DWORD *)v14 += 2;
                v18 = v14;
                if ((_DWORD)v7 == a3[2])
                {
                  v16 = WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v7 + 1, (unint64_t)v17);
                  v7 = a3[3];
                  v6 = *(_QWORD *)a3;
                  *(_BYTE *)(*(_QWORD *)a3 + 16 * v7) = *(_BYTE *)v16;
                  v14 = *(WTF::StringImpl **)(v16 + 8);
                  if (v14)
                    *(_DWORD *)v14 += 2;
                  v15 = v6 + 16 * v7;
                }
                else
                {
                  v15 = v6 + 16 * v7;
                  *(_BYTE *)v15 = v17[0];
                  *(_DWORD *)v14 += 2;
                }
                *(_QWORD *)(v15 + 8) = v14;
                LODWORD(v7) = v7 + 1;
                a3[3] = v7;
                result = v18;
                v18 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
            }
          }
        }
      }
LABEL_16:
      v8 = v9 + 1;
      v9 = (v9 + 1);
    }
    while (v5 != v8);
  }
  return result;
}

_DWORD *WebCore::fallbackNameFromCSSValue@<X0>(_QWORD *a1@<X0>, WTF::StringImpl *a2@<X8>)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *result;
  _DWORD *v7;
  WTF::StringImpl *v8;

  v3 = (_DWORD *)*a1;
  *a1 = 0;
  v7 = v3;
  WebCore::nameFromCSSValue((WTF::StringImpl *)&v8, (WTF::StringImpl *)&v7);
  WTF::makeAtomString<WTF::AtomString>(&v8, a2);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  if (v7)
  {
    if (*v7 == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v4);
    else
      *v7 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::nameFromCSSValue(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::AtomString *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = result;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F800) != 0)
  {
    if (*(_DWORD *)v3 == 2)
      result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
    *(_QWORD *)v2 = 0;
  }
  else
  {
    WebCore::CSSPrimitiveValue::stringValue((uint64_t *)v3, &v5);
    WTF::makeAtomString<WTF::String>(&v5, v2);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)v3 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v3, v4);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

uint64_t std::pair<WTF::AtomString,int>::pair[abi:sn180100]<WTF::ASCIILiteral,int,0>(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    WTF::AtomStringImpl::add();
    a4 = v5;
    result = v6;
    v4 = v7;
  }
  else
  {
    v4 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *(_QWORD *)result = v4;
  *(_DWORD *)(result + 8) = *a4;
  return result;
}

uint64_t WebCore::CSSValue::integer(WebCore::CSSValue *this)
{
  double v1;
  uint64_t v3;
  void *v4;
  double v5;
  uint64_t v6;

  if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195790D24);
  }
  if ((*((_WORD *)this + 2) & 0x7F) == 0x49)
  {
    v3 = *((_QWORD *)this + 1);
    v6 = 0;
    v5 = WebCore::CSSCalcValue::doubleValue(v3, (uint64_t)&v6);
    if (v6)
      WTF::fastFree((WTF *)(v6 - 16), v4);
    v1 = v5;
  }
  else
  {
    v1 = *((double *)this + 1);
  }
  if (v1 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v1 <= -2147483650.0)
    return 0x80000000;
  return (int)v1;
}

BOOL WebCore::CSSCounterStyleDescriptors::areSymbolsValidForSystem(int a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int v5;

  result = 1;
  switch(a1)
  {
    case 0:
    case 3:
    case 5:
      v5 = *(_DWORD *)(a2 + 12);
      return v5 != 0;
    case 1:
    case 2:
      return *(_DWORD *)(a2 + 12) > 1u;
    case 4:
      v5 = *(_DWORD *)(a3 + 12);
      return v5 != 0;
    case 6:
    case 7:
      return result;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      if (*(_DWORD *)(a2 + 12))
        goto LABEL_8;
      result = *(_DWORD *)(a3 + 12) == 0;
      break;
    default:
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleDescriptors::setNegative(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a1 + 16) != *a2
    || !WTF::equal(*(WTF **)(a1 + 24), *((const WTF::StringImpl **)a2 + 1), a3)
    || *(unsigned __int8 *)(a1 + 32) != a2[16]
    || (result = WTF::equal(*(WTF **)(a1 + 40), *((const WTF::StringImpl **)a2 + 3), v5), (result & 1) == 0))
  {
    *(_BYTE *)(a1 + 16) = *a2;
    v7 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v8 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    *(_BYTE *)(a1 + 32) = a2[16];
    v9 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    result = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_WORD *)(a1 + 180) |= 2u;
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleDescriptors::setSymbols(uint64_t result, unsigned __int8 **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unint64_t v5;
  WTF **v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF **v9;
  const WTF::StringImpl **v10;
  uint64_t v11;
  unint64_t v12;
  WTF *v13;
  WTF *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v4 = result;
  v5 = *(unsigned int *)(result + 140);
  if ((_DWORD)v5 != *((_DWORD *)a2 + 3))
    goto LABEL_24;
  if ((_DWORD)v5)
  {
    v6 = *(WTF ***)(result + 128);
    v7 = (uint64_t)*a2;
    if (*(unsigned __int8 *)v6 != **a2)
      goto LABEL_24;
    result = WTF::equal(v6[1], *(const WTF::StringImpl **)(v7 + 8), a3);
    if (!(_DWORD)result)
      goto LABEL_24;
    v9 = v6 + 3;
    v10 = (const WTF::StringImpl **)(v7 + 24);
    v11 = 1;
    do
    {
      v12 = v11;
      if (v5 == v11)
        break;
      if (*((unsigned __int8 *)v9 - 8) != *((unsigned __int8 *)v10 - 8))
        break;
      v14 = *v9;
      v9 += 2;
      v13 = v14;
      v15 = *v10;
      v10 += 2;
      result = WTF::equal(v13, v15, v8);
      v11 = v12 + 1;
    }
    while ((result & 1) != 0);
    if (v12 < v5)
    {
LABEL_24:
      result = WebCore::CSSCounterStyleDescriptors::areSymbolsValidForSystem(*(unsigned __int8 *)(v4 + 8), (uint64_t)a2, v4 + 144);
      if ((_DWORD)result)
      {
        v17 = *(unsigned int *)(v4 + 140);
        result = *(_QWORD *)(v4 + 128);
        if ((_DWORD)v17)
        {
          v18 = 16 * v17;
          v19 = (WTF::StringImpl **)(result + 8);
          do
          {
            v20 = *v19;
            *v19 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v16);
              else
                *(_DWORD *)v20 -= 2;
            }
            v19 += 2;
            v18 -= 16;
          }
          while (v18);
          result = *(_QWORD *)(v4 + 128);
        }
        if (result)
        {
          *(_QWORD *)(v4 + 128) = 0;
          *(_DWORD *)(v4 + 136) = 0;
          result = WTF::fastFree((WTF *)result, v16);
        }
        v21 = (uint64_t)*a2;
        *a2 = 0;
        *(_QWORD *)(v4 + 128) = v21;
        LODWORD(v21) = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = 0;
        *(_DWORD *)(v4 + 136) = v21;
        LODWORD(v21) = *((_DWORD *)a2 + 3);
        *((_DWORD *)a2 + 3) = 0;
        *(_DWORD *)(v4 + 140) = v21;
        *(_WORD *)(v4 + 180) |= 0x80u;
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleDescriptors::setAdditiveSymbols(uint64_t result, unsigned __int8 **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unint64_t v5;
  WTF **v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v4 = result;
  v5 = *(unsigned int *)(result + 156);
  if ((_DWORD)v5 != *((_DWORD *)a2 + 3))
    goto LABEL_31;
  if ((_DWORD)v5)
  {
    v6 = *(WTF ***)(result + 144);
    v7 = (uint64_t)*a2;
    if (*(unsigned __int8 *)v6 != **a2)
      goto LABEL_31;
    result = WTF::equal(v6[1], *(const WTF::StringImpl **)(v7 + 8), a3);
    if (!(_DWORD)result || *((_DWORD *)v6 + 4) != *(_DWORD *)(v7 + 16))
      goto LABEL_31;
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      if (24 * v5 - 24 == v10)
        break;
      v13 = (unsigned __int8 *)&v6[v10 / 8];
      v14 = v7 + v10;
      if (LOBYTE(v6[v10 / 8 + 3]) != *(unsigned __int8 *)(v7 + v10 + 24))
        break;
      result = WTF::equal(*((WTF **)v13 + 4), *(const WTF::StringImpl **)(v14 + 32), v8);
      v11 = v12 + 1;
      v10 += 24;
    }
    while ((_DWORD)result && *((_DWORD *)v13 + 10) == *(_DWORD *)(v14 + 40));
    if (v12 < v5)
    {
LABEL_31:
      result = WebCore::CSSCounterStyleDescriptors::areSymbolsValidForSystem(*(unsigned __int8 *)(v4 + 8), v4 + 128, (uint64_t)a2);
      if ((_DWORD)result)
      {
        v17 = *(unsigned int *)(v4 + 156);
        result = *(_QWORD *)(v4 + 144);
        if ((_DWORD)v17)
        {
          v18 = 24 * v17;
          v19 = (WTF::StringImpl **)(result + 8);
          do
          {
            v20 = *v19;
            *v19 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v16);
              else
                *(_DWORD *)v20 -= 2;
            }
            v19 += 3;
            v18 -= 24;
          }
          while (v18);
          result = *(_QWORD *)(v4 + 144);
        }
        if (result)
        {
          *(_QWORD *)(v4 + 144) = 0;
          *(_DWORD *)(v4 + 152) = 0;
          result = WTF::fastFree((WTF *)result, v16);
        }
        v21 = (uint64_t)*a2;
        *a2 = 0;
        *(_QWORD *)(v4 + 144) = v21;
        LODWORD(v21) = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = 0;
        *(_DWORD *)(v4 + 152) = v21;
        LODWORD(v21) = *((_DWORD *)a2 + 3);
        *((_DWORD *)a2 + 3) = 0;
        *(_DWORD *)(v4 + 156) = v21;
        *(_WORD *)(v4 + 180) |= 0x100u;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSCounterStyleDescriptors::Symbol::cssText@<X0>(WebCore::CSSCounterStyleDescriptors::Symbol *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::StringImpl **a3@<X8>)
{
  WTF::String *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  v5 = *(unsigned __int8 *)this;
  v4 = (WebCore::CSSCounterStyleDescriptors::Symbol *)((char *)this + 8);
  if (v5)
    WebCore::serializeIdentifier(v4, (const WTF::String *)&v10, 0);
  else
    WebCore::serializeString((uint64_t)v4, (const WTF::String *)&v10, a2);
  v7 = v10;
  if (v10
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v10),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v10),
        (v7 = v10) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  *a3 = v7;
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleDescriptors::systemCSSText@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;

  if ((*(_WORD *)(this + 180) & 1) == 0)
  {
LABEL_2:
    v3 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v3 += 2;
    goto LABEL_4;
  }
  if (*(_BYTE *)(this + 182))
  {
    v4 = *(WTF::StringImpl **)(this + 168);
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 1);
      *(_DWORD *)v4 += 2;
      if ((v5 & 0x80000000) == 0 && !__OFADD__(v5, 8))
      {
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((v5 + 8), (*((_DWORD *)v4 + 4) >> 2) & 1, "extends ", 8u, v4, a2);
        if (*a2)
          goto LABEL_10;
LABEL_37:
        __break(0xC471u);
        JUMPOUT(0x1957914FCLL);
      }
LABEL_36:
      *a2 = 0;
      goto LABEL_37;
    }
    this = WTF::tryFastCompactMalloc((WTF *)0x1C);
    v3 = v14;
    if (!v14)
      goto LABEL_36;
LABEL_29:
    *(_QWORD *)v3 = 0x800000002;
    *(_QWORD *)(v3 + 20) = 0x2073646E65747865;
    *(_QWORD *)(v3 + 8) = v3 + 20;
    *(_DWORD *)(v3 + 16) = 4;
LABEL_4:
    *a2 = v3;
    return this;
  }
  switch(*(_BYTE *)(this + 8))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    case 5:
      v7 = *(_DWORD *)(this + 176);
      if ((v7 & 0x80000000) != 0)
      {
        v12 = -v7;
        v8 = 1;
        do
        {
          ++v8;
          v13 = v12 >= 0xA;
          v12 /= 0xAu;
        }
        while (v13);
      }
      else
      {
        v8 = 0;
        v9 = *(_DWORD *)(this + 176);
        do
        {
          ++v8;
          v10 = v9 > 9;
          v9 /= 0xAu;
        }
        while (v10);
      }
      if (v8 < 0 || __OFADD__(v8, 6))
      {
        *a2 = 0;
      }
      else
      {
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((v8 + 6), 1, (int8x16_t *)"fixed ", 6u, v7, a2);
        if (*a2)
          return this;
      }
      __break(0xC471u);
      JUMPOUT(0x195791508);
    case 0xD:
      v4 = *(WTF::StringImpl **)(this + 168);
      if (!v4)
      {
        this = WTF::tryFastCompactMalloc((WTF *)0x1C);
        v3 = v14;
        if (v14)
          goto LABEL_29;
        goto LABEL_31;
      }
      v11 = *((_DWORD *)v4 + 1);
      *(_DWORD *)v4 += 2;
      if (v11 < 0 || __OFADD__(v11, 8))
      {
LABEL_31:
        *a2 = 0;
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x1957914C4);
      }
      this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((v11 + 8), (*((_DWORD *)v4 + 4) >> 2) & 1, "extends ", 8u, v4, a2);
      if (!*a2)
        goto LABEL_32;
LABEL_10:
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy(v4, v6);
      *(_DWORD *)v4 -= 2;
      return this;
    default:
      goto LABEL_2;
  }
}

uint64_t WebCore::CSSCounterStyleDescriptors::negativeCSSText@<X0>(uint64_t this@<X0>, WTF::StringBuilder *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((*(_WORD *)(this + 180) & 2) != 0)
  {
    v5 = this;
    WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Symbol *)(this + 16), a2, &v18);
    this = (uint64_t)WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Symbol *)(v5 + 32), v6, &v17);
    v8 = v17;
    v7 = v18;
    if (v18)
    {
      v9 = *((_DWORD *)v18 + 1);
      if (v17)
        goto LABEL_7;
    }
    else
    {
      v9 = 0;
      if (v17)
      {
LABEL_7:
        v10 = *((_DWORD *)v17 + 1);
        if (v10 < 0)
          goto LABEL_34;
        goto LABEL_8;
      }
    }
    v10 = 0;
LABEL_8:
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    v13 = v11;
    if ((v9 & 0x80000000) == 0 && (v13 & 1) == 0)
    {
      this = (v9 + v12);
      if (!__OFADD__(v9, v12))
      {
        if (v18)
        {
          v14 = *((_DWORD *)v18 + 4);
          v15 = (v14 >> 2) & 1;
          if (!v17 || (v14 & 4) == 0)
          {
LABEL_18:
            this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v15, (uint64_t)v18, (int8x16_t *)" ", 1u, (uint64_t)v17, a3);
            if (*a3)
            {
              if (v8)
              {
                if (*(_DWORD *)v8 == 2)
                {
                  this = WTF::StringImpl::destroy(v8, v16);
                  if (!v7)
                    return this;
                  goto LABEL_23;
                }
                *(_DWORD *)v8 -= 2;
              }
              if (!v7)
                return this;
LABEL_23:
              if (*(_DWORD *)v7 == 2)
                return WTF::StringImpl::destroy(v7, v16);
              *(_DWORD *)v7 -= 2;
              return this;
            }
LABEL_35:
            __break(0xC471u);
            return this;
          }
        }
        else if (!v17)
        {
          this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, 1, 0, (int8x16_t *)" ", 1u, 0, a3);
          if (*a3)
            return this;
          goto LABEL_35;
        }
        v15 = (*((unsigned __int8 *)v17 + 16) >> 2) & 1;
        goto LABEL_18;
      }
    }
LABEL_34:
    *a3 = 0;
    goto LABEL_35;
  }
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *a3 = v4;
  return this;
}

uint64_t WebCore::CSSCounterStyleDescriptors::rangesCSSText@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;
  unsigned int v15;

  if ((*(_WORD *)(this + 180) & 0x10) != 0)
  {
    v4 = this;
    if (*(_DWORD *)(this + 92))
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 1;
      v5 = *(unsigned int **)(this + 80);
      if (*v5 == 0x80000000)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v15 = *v5;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v11, &v15);
      }
      WTF::StringBuilder::append();
      if (v5[1] == 0x7FFFFFFF)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v15 = v5[1];
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v11, &v15);
      }
      if (*(_DWORD *)(v4 + 92) < 2u)
      {
LABEL_23:
        this = (uint64_t)v11;
        if (v11
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11),
              (this = (uint64_t)v11) != 0))
        {
          *(_DWORD *)this += 2;
        }
        *a2 = this;
        v10 = v12;
        v12 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            WTF::StringImpl::destroy(v10, v6);
            this = (uint64_t)v11;
          }
          else
          {
            *(_DWORD *)v10 -= 2;
          }
        }
        v11 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
          else
            *(_DWORD *)this -= 2;
        }
      }
      else
      {
        v7 = 0;
        v8 = 1;
        while (1)
        {
          this = WTF::StringBuilder::append();
          if (v8 >= *(unsigned int *)(v4 + 92))
            break;
          v9 = *(_QWORD *)(v4 + 80);
          if (*(_DWORD *)(v9 + v7 + 8) == 0x80000000)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            v15 = *(_DWORD *)(v9 + v7 + 8);
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v11, &v15);
          }
          WTF::StringBuilder::append();
          if (*(_DWORD *)(v9 + v7 + 12) == 0x7FFFFFFF)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            v15 = *(_DWORD *)(v9 + v7 + 12);
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v11, &v15);
          }
          ++v8;
          v7 += 8;
          if (v8 >= *(unsigned int *)(v4 + 92))
            goto LABEL_23;
        }
        __break(0xC471u);
      }
    }
    else
    {
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
  }
  else
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    *a2 = v3;
  }
  return this;
}

uint64_t WebCore::CSSCounterStyleDescriptors::Pad::cssText@<X0>(WebCore::CSSCounterStyleDescriptors::Pad *this@<X0>, WTF::StringBuilder *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  uint64_t result;
  int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *(_DWORD *)this;
  result = (uint64_t)WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Pad *)((char *)this + 8), a2, &v15);
  v6 = 0;
  v7 = v15;
  v8 = v4;
  do
  {
    ++v6;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  if (v15)
  {
    v10 = *((_DWORD *)v15 + 1);
    if (v10 < 0)
    {
LABEL_20:
      *a3 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  v13 = v11;
  if (v6 < 0)
    goto LABEL_20;
  if ((v13 & 1) != 0)
    goto LABEL_20;
  result = (v6 + v12);
  if (__OFADD__(v6, v12))
    goto LABEL_20;
  if (!v15)
  {
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, v4, 32, 0, a3);
    if (*a3)
      return result;
LABEL_21:
    __break(0xC471u);
    return result;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (*((_DWORD *)v15 + 4) >> 2) & 1, v4, 32, (uint64_t)v15, a3);
  if (!*a3)
    goto LABEL_21;
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v14);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::CSSCounterStyleDescriptors::fallbackCSSText@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if ((*(_WORD *)(this + 180) & 0x40) == 0)
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
LABEL_4:
      *a2 = v3;
      return this;
    }
LABEL_3:
    *v3 += 2;
    goto LABEL_4;
  }
  v4 = *(WTF::StringImpl **)(this + 120);
  if (!v4)
  {
    v3 = (_DWORD *)MEMORY[0x1E0CBEF70];
    goto LABEL_3;
  }
  this = *((unsigned int *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if ((this & 0x80000000) != 0)
  {
    *a2 = 0;
    goto LABEL_13;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>>(this, (*((_DWORD *)v4 + 4) >> 2) & 1, v4, a2);
  if (!*a2)
  {
LABEL_13:
    __break(0xC471u);
    return this;
  }
  if (*(_DWORD *)v4 == 2)
    return WTF::StringImpl::destroy(v4, v5);
  *(_DWORD *)v4 -= 2;
  return this;
}

uint64_t WebCore::CSSCounterStyleDescriptors::symbolsCSSText@<X0>(uint64_t this@<X0>, WTF::StringBuilder *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringBuilder *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  char v23;

  if ((*(_WORD *)(this + 180) & 0x80) == 0)
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *a3 = v4;
    return this;
  }
  v5 = this;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  if (!*(_DWORD *)(this + 140))
    goto LABEL_54;
  WebCore::CSSCounterStyleDescriptors::Symbol::cssText(*(WebCore::CSSCounterStyleDescriptors::Symbol **)(this + 128), a2, &v19);
  v8 = v19;
  if (!v22 && !v21)
  {
    if (v19)
      *(_DWORD *)v19 += 2;
    this = (uint64_t)v20;
    v20 = v8;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
        if (v8)
          goto LABEL_14;
        goto LABEL_71;
      }
      *(_DWORD *)this -= 2;
    }
    if (v8)
    {
LABEL_14:
      v9 = *((_DWORD *)v8 + 1);
      goto LABEL_15;
    }
LABEL_71:
    v9 = 0;
LABEL_15:
    v22 = v9;
    if (!v8)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v19 && (*((_BYTE *)v19 + 16) & 4) == 0)
  {
    this = WTF::StringBuilder::append();
  }
  else
  {
    this = WTF::StringBuilder::append();
    if (!v8)
      goto LABEL_18;
  }
LABEL_16:
  if (*(_DWORD *)v8 == 2)
    this = WTF::StringImpl::destroy(v8, v6);
  else
    *(_DWORD *)v8 -= 2;
LABEL_18:
  if (*(_DWORD *)(v5 + 140) >= 2u)
  {
    v10 = 1;
    v11 = 16;
    while (1)
    {
      LOBYTE(v19) = 32;
      if (v21 && ((v12 = v22, v22 < *((_DWORD *)v21 + 1)) ? (v13 = v20 == 0) : (v13 = 0), v13))
      {
        v16 = *((_DWORD *)v21 + 4);
        v17 = *((_QWORD *)v21 + 1);
        ++v22;
        if ((v16 & 4) != 0)
          *(_BYTE *)(v17 + v12) = 32;
        else
          *(_WORD *)(v17 + 2 * v12) = 32;
      }
      else
      {
        this = WTF::StringBuilder::append();
      }
      if (v10 >= *(unsigned int *)(v5 + 140))
      {
        __break(0xC471u);
        return this;
      }
      WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Symbol *)(*(_QWORD *)(v5 + 128) + v11), v7, &v19);
      v14 = v19;
      if (!v22 && !v21)
        break;
      if (v19 && (*((_BYTE *)v19 + 16) & 4) == 0)
      {
        this = WTF::StringBuilder::append();
LABEL_37:
        if (*(_DWORD *)v14 == 2)
          this = WTF::StringImpl::destroy(v14, v6);
        else
          *(_DWORD *)v14 -= 2;
        goto LABEL_39;
      }
      this = WTF::StringBuilder::append();
      if (v14)
        goto LABEL_37;
LABEL_39:
      ++v10;
      v11 += 16;
      if (v10 >= *(unsigned int *)(v5 + 140))
        goto LABEL_53;
    }
    if (v19)
      *(_DWORD *)v19 += 2;
    this = (uint64_t)v20;
    v20 = v14;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
        if (v14)
          goto LABEL_35;
        goto LABEL_50;
      }
      *(_DWORD *)this -= 2;
    }
    if (v14)
    {
LABEL_35:
      v15 = *((_DWORD *)v14 + 1);
      goto LABEL_36;
    }
LABEL_50:
    v15 = 0;
LABEL_36:
    v22 = v15;
    if (v14)
      goto LABEL_37;
    goto LABEL_39;
  }
LABEL_53:
  this = (uint64_t)v20;
  if (v20)
    goto LABEL_55;
LABEL_54:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v20);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v20);
  this = (uint64_t)v20;
  if (v20)
LABEL_55:
    *(_DWORD *)this += 2;
  *a3 = this;
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v6);
      this = (uint64_t)v20;
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v20 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::CSSCounterStyleDescriptors::additiveSymbolsCSSText@<X0>(uint64_t this@<X0>, WTF::StringBuilder *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  WebCore::CSSCounterStyleDescriptors::Symbol *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned int v22;

  if ((*(_WORD *)(this + 180) & 0x100) == 0)
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v4 += 2;
    *a3 = v4;
    return this;
  }
  v5 = this;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  if (!*(_DWORD *)(this + 156))
  {
LABEL_19:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
    this = (uint64_t)v16;
    if (!v16)
    {
LABEL_21:
      *a3 = this;
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v8);
          this = (uint64_t)v16;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      v16 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    }
LABEL_20:
    *(_DWORD *)this += 2;
    goto LABEL_21;
  }
  v6 = *(WebCore::CSSCounterStyleDescriptors::Symbol **)(this + 144);
  WebCore::CSSCounterStyleDescriptors::Symbol::cssText(v6, a2, &v15);
  v22 = *((_DWORD *)v6 + 4);
  v21 = 32;
  v7 = v15;
  v20 = v15;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, &v22, &v21, (uint64_t *)&v20);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(v5 + 156) < 2u)
  {
LABEL_18:
    this = (uint64_t)v16;
    if (v16)
      goto LABEL_20;
    goto LABEL_19;
  }
  v9 = 1;
  v10 = 40;
  while (1)
  {
    this = WTF::StringBuilder::append();
    if (v9 >= *(unsigned int *)(v5 + 156))
      break;
    v12 = (unsigned int *)(*(_QWORD *)(v5 + 144) + v10);
    WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Symbol *)(v12 - 4), v11, &v15);
    v22 = *v12;
    v21 = 32;
    v13 = v15;
    v20 = v15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, &v22, &v21, (uint64_t *)&v20);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    ++v9;
    v10 += 24;
    if (v9 >= *(unsigned int *)(v5 + 156))
      goto LABEL_18;
  }
  __break(0xC471u);
  return this;
}

_QWORD *WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::begin()
{
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters;
  if (!WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters)
    return 0;
  v2 = *(unsigned int *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 4);
  v3 = WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters + 16 * v2;
  if (!*(_DWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters - 12))
    return (_QWORD *)(WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters + 16 * v2);
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return (_QWORD *)v3;
    }
  }
  return result;
}

WebCore::CSSCounterStyle *WebCore::CSSCounterStyleRegistry::resolveFallbackReference(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::CSSCounterStyle *result;
  WTF *v9;
  void *v10;
  unsigned int v11;
  WebCore::CSSCounterStyle *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::CSSCounterStyle *v16;

  WebCore::CSSCounterStyleRegistry::counterStyle((WebCore::CSSCounterStyle *)(a1 + 136), a2, (WebCore::CSSCounterStyleRegistry *)&v16);
  if (v16)
  {
    v4 = *((_QWORD *)v16 + 1);
    if (v4)
      goto LABEL_23;
    v12 = v16;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v12;
    v13 = (unsigned int *)*((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v4;
    if (!v13)
      goto LABEL_23;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v3);
    }
    v4 = *((_QWORD *)v12 + 1);
    if (v4)
    {
LABEL_23:
      do
        v11 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v11 + 1, (unsigned int *)v4));
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned int **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v4;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  result = v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::CSSCounterStyle::~CSSCounterStyle(v16, v3);
      return (WebCore::CSSCounterStyle *)WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  return result;
}

WebCore::CSSCounterStyle *WebCore::CSSCounterStyleRegistry::resolveExtendsReference(WebCore::CSSCounterStyle *a1, uint64_t *a2)
{
  WebCore::CSSCounterStyle *result;
  void *v3;
  uint64_t v4;

  v4 = 0;
  result = WebCore::CSSCounterStyleRegistry::resolveExtendsReference(a1, &v4, a2);
  if (v4)
    return (WebCore::CSSCounterStyle *)WTF::fastFree((WTF *)(v4 - 16), v3);
  return result;
}

WebCore::CSSCounterStyle *WebCore::CSSCounterStyleRegistry::resolveReferencesIfNeeded(WebCore::CSSCounterStyle *this)
{
  WebCore::CSSCounterStyle *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (!*((_BYTE *)this + 8))
    return this;
  v1 = this;
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v4 = *((unsigned int *)v2 - 1);
    v5 = &v2[2 * v4];
    if (*((_DWORD *)v2 - 3))
    {
      v3 = *(_QWORD **)this;
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v3 = *(_QWORD **)this;
        while ((unint64_t)(*v3 + 1) <= 1)
        {
          v3 += 2;
          v7 -= 16;
          if (!v7)
          {
            v3 = v5;
            goto LABEL_5;
          }
        }
      }
      goto LABEL_5;
    }
    v3 = &v2[2 * v4];
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = &v2[2 * v4];
LABEL_5:
  if (v2)
    v6 = &v2[2 * *((unsigned int *)v2 - 1)];
  else
    v6 = 0;
  while (v3 != v6)
  {
    this = (WebCore::CSSCounterStyle *)v3[1];
    v8 = *((_QWORD *)this + 27);
    if (!v8 || !*(_QWORD *)(v8 + 8))
    {
      WebCore::CSSCounterStyleRegistry::resolveFallbackReference((uint64_t)this, (uint64_t *)v1);
      this = (WebCore::CSSCounterStyle *)v3[1];
    }
    if (*((_BYTE *)this + 24) == 13 && !*((_BYTE *)this + 198))
      this = WebCore::CSSCounterStyleRegistry::resolveExtendsReference(this, (uint64_t *)v1);
    v9 = v3 + 2;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        v3 += 2;
        if (v3 == v5)
        {
          v3 = v5;
          break;
        }
      }
    }
  }
  *((_BYTE *)v1 + 8) = 0;
  return this;
}

_QWORD *WTF::HashSet<WebCore::CSSCounterStyle *,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[v1];
  if (!*((_DWORD *)result - 3))
    return &result[v1];
  if ((_DWORD)v1)
  {
    v3 = 8 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v3 -= 8;
      if (!v3)
        return v2;
    }
  }
  return result;
}

WebCore::CSSCounterStyle *WebCore::CSSCounterStyleRegistry::addCounterStyle(WebCore::CSSCounterStyleRegistry *this, const WebCore::CSSCounterStyleDescriptors *a2)
{
  uint64_t v4;
  void *v5;
  WebCore::CSSCounterStyle *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WebCore::CSSCounterStyle *v10;

  *((_BYTE *)this + 8) = 1;
  v4 = WTF::fastMalloc((WTF *)0xF0);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 0;
  WebCore::CSSCounterStyleDescriptors::CSSCounterStyleDescriptors((WebCore::CSSCounterStyleDescriptors *)(v4 + 16), a2);
  *(_BYTE *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_WORD *)(v4 + 232) = 256;
  v10 = (WebCore::CSSCounterStyle *)v4;
  WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>((uint64_t *)this, (WTF::StringImpl **)a2, &v10, (uint64_t)&v9);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::CSSCounterStyle::~CSSCounterStyle(result, v5);
      return (WebCore::CSSCounterStyle *)WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::CSSComputedStyleDeclaration::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

void WebCore::CSSContainerRule::~CSSContainerRule(WebCore::CSSContainerRule *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSContainerRule::styleRuleType(WebCore::CSSContainerRule *this)
{
  return 18;
}

uint64_t WebCore::CSSGroupingRule::isGroupingRule(WebCore::CSSGroupingRule *this)
{
  return 1;
}

uint64_t WebCore::CSSRule::cssTextWithReplacementURLs(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

unsigned int *WTF::Vector<WebCore::CSSCounterStyleDescriptors::Symbol,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int **v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = 16 * v4 - 16 * (_QWORD)a2;
    v6 = (unsigned int **)(*(_QWORD *)result + 16 * (_QWORD)a2 + 8);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v3[3] = v2;
  return result;
}

unsigned int *WTF::Vector<std::pair<WebCore::CSSCounterStyleDescriptors::Symbol,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int **v6;

  v2 = a2;
  v3 = result;
  v4 = (WTF::StringImpl *)result[3];
  if (v4 != a2)
  {
    v5 = 24 * v4 - 24 * (_QWORD)a2;
    v6 = (unsigned int **)(*(_QWORD *)result + 24 * (_QWORD)a2 + 8);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v3[3] = v2;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int8x16_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int8x16_t *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;

  v8 = *(int8x16_t **)result;
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = v9 - 1;
    if ((unint64_t)(v9 - 1) >> 31)
      goto LABEL_24;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195792690);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (v14)
  {
    v15 = v14 - 1;
    if ((unint64_t)(v14 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957926BCLL);
    }
  }
  else
  {
    v15 = 0;
  }
  v17 = *(int8x16_t **)a4;
  v16 = *(_QWORD *)(a4 + 8);
  if (v16)
  {
    if ((unint64_t)--v16 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957926E8);
    }
  }
  v18 = *(_QWORD *)(a5 + 8);
  if (v18)
  {
    if ((unint64_t)--v18 >> 31)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x195792664);
    }
  }
  v19 = v16 + v18;
  if (!__OFADD__((_DWORD)v16, (_DWORD)v18))
  {
    v20 = __OFADD__(v15, v19);
    v21 = v15 + v19;
    if (!v20)
    {
      v20 = __OFADD__(v12, v21);
      v22 = v12 + v21;
      if (!v20)
      {
        result = v10 + v22;
        if (!__OFADD__(v10, v22))
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, v8, v10, *(int8x16_t **)a2, v12, v13, v15, a6, v17, v16, *(int8x16_t **)a5, v18);
      }
    }
  }
  *a6 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, int8x16_t *a7@<X6>, unsigned int a8@<W7>, _QWORD *a9@<X8>, int8x16_t *a10, unsigned int a11, int8x16_t *a12, unsigned int a13)
{
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v30;

  v17 = result;
  v18 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v19 = v30;
        if (v30)
        {
          v20 = (_BYTE *)(v30 + 20);
          *(_DWORD *)v30 = 2;
          *(_DWORD *)(v30 + 4) = v17;
          *(_QWORD *)(v30 + 8) = v30 + 20;
          *(_DWORD *)(v30 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v20 = a3->i8[0];
            else
              result = (uint64_t)memcpy((void *)(v30 + 20), a3, a4);
          }
          v21 = &v20[a4];
          if (a6)
          {
            if (a6 == 1)
              *v21 = a5->i8[0];
            else
              result = (uint64_t)memcpy(v21, a5, a6);
          }
          v22 = &v21[a6];
          if (a8)
          {
            if (a8 == 1)
              *v22 = a7->i8[0];
            else
              result = (uint64_t)memcpy(v22, a7, a8);
          }
          v23 = &v22[a8];
          if (a11)
          {
            if (a11 == 1)
              *v23 = a10->i8[0];
            else
              result = (uint64_t)memcpy(v23, a10, a11);
          }
          if (a13)
          {
            result = (uint64_t)&v23[a11];
            if (a13 == 1)
              *(_BYTE *)result = a12->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a12, a13);
          }
        }
        v18 = a9;
        goto LABEL_25;
      }
LABEL_32:
      v19 = 0;
      goto LABEL_25;
    }
LABEL_31:
    v19 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_25;
  }
  if (!(_DWORD)result)
    goto LABEL_31;
  if (result > 0x7FFFFFEF)
    goto LABEL_32;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v19 = v30;
  if (v30)
  {
    *(_DWORD *)v30 = 2;
    *(_DWORD *)(v30 + 4) = v17;
    *(_QWORD *)(v30 + 8) = v30 + 20;
    *(_DWORD *)(v30 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v30 + 20), a3, a4, a5, a6, a7, a8, v25, a10, a11, a12, a13);
  }
LABEL_25:
  *v18 = v19;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, int8x16_t *a2, int a3, int8x16_t *a4, int a5, int8x16_t *a6, int a7, uint64_t a8, int8x16_t *a9, int a10, int8x16_t *a11, int a12)
{
  char *v12;
  char *v13;
  __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v44;
  char *v45;
  __int128 v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  char *v54;
  char *v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int16 v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;

  v12 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v13 = &result[2 * (a3 & 0xFFFFFFC0)];
    v14 = 0uLL;
    do
    {
      v64.val[0] = *a2;
      v15 = a2[1];
      v69.val[0] = a2[2];
      v16 = a2[3];
      a2 += 4;
      v17 = v16;
      v69.val[1] = 0uLL;
      v74.val[0] = v15;
      v64.val[1] = 0uLL;
      v18 = result;
      vst2q_s8(v18, v64);
      v18 += 32;
      v74.val[1] = 0uLL;
      vst2q_s8(v18, v74);
      v19 = result + 64;
      vst2q_s8(v19, v69);
      v20 = result + 96;
      vst2q_s8(v20, *(int8x16x2_t *)(&v14 - 1));
      result += 128;
    }
    while (result != v13);
    result = v13;
  }
  while (result != v12)
  {
    v21 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v21;
    result += 2;
  }
  v22 = &v12[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v23 = &v12[2 * (a5 & 0xFFFFFFC0)];
    v24 = 0uLL;
    do
    {
      v65.val[0] = *a4;
      v25 = a4[1];
      v70.val[0] = a4[2];
      v26 = a4[3];
      a4 += 4;
      v27 = v26;
      v70.val[1] = 0uLL;
      v75.val[0] = v25;
      v65.val[1] = 0uLL;
      v28 = v12;
      vst2q_s8(v28, v65);
      v28 += 32;
      v75.val[1] = 0uLL;
      vst2q_s8(v28, v75);
      v29 = v12 + 64;
      vst2q_s8(v29, v70);
      v30 = v12 + 96;
      vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
      v12 += 128;
    }
    while (v12 != v23);
    v12 = v23;
  }
  while (v12 != v22)
  {
    v31 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v12 = v31;
    v12 += 2;
  }
  v33 = &v22[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v34 = &v22[2 * (a7 & 0xFFFFFFC0)];
    v35 = 0uLL;
    do
    {
      v66.val[0] = *a6;
      v36 = a6[1];
      v71.val[0] = a6[2];
      v37 = a6[3];
      a6 += 4;
      v38 = v37;
      v71.val[1] = 0uLL;
      v76.val[0] = v36;
      v66.val[1] = 0uLL;
      v39 = v22;
      vst2q_s8(v39, v66);
      v39 += 32;
      v76.val[1] = 0uLL;
      vst2q_s8(v39, v76);
      v40 = v22 + 64;
      vst2q_s8(v40, v71);
      v41 = v22 + 96;
      vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
      v22 += 128;
    }
    while (v22 != v34);
    v22 = v34;
  }
  while (v22 != v33)
  {
    v42 = a6->u8[0];
    a6 = (int8x16_t *)((char *)a6 + 1);
    *(_WORD *)v22 = v42;
    v22 += 2;
  }
  v44 = &v33[2 * a10];
  if ((a10 & 0xFFFFFFC0) != 0)
  {
    v45 = &v33[2 * (a10 & 0xFFFFFFC0)];
    v46 = 0uLL;
    do
    {
      v67.val[0] = *a9;
      v47 = a9[1];
      v72.val[0] = a9[2];
      v48 = a9[3];
      a9 += 4;
      v49 = v48;
      v72.val[1] = 0uLL;
      v77.val[0] = v47;
      v67.val[1] = 0uLL;
      v50 = v33;
      vst2q_s8(v50, v67);
      v50 += 32;
      v77.val[1] = 0uLL;
      vst2q_s8(v50, v77);
      v51 = v33 + 64;
      vst2q_s8(v51, v72);
      v52 = v33 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
      v33 += 128;
    }
    while (v33 != v45);
    v33 = v45;
  }
  while (v33 != v44)
  {
    v53 = a9->u8[0];
    a9 = (int8x16_t *)((char *)a9 + 1);
    *(_WORD *)v33 = v53;
    v33 += 2;
  }
  v54 = &v44[2 * a12];
  if ((a12 & 0xFFFFFFC0) != 0)
  {
    v55 = &v44[2 * (a12 & 0xFFFFFFC0)];
    v56 = 0uLL;
    do
    {
      v68.val[0] = *a11;
      v57 = a11[1];
      v73.val[0] = a11[2];
      v58 = a11[3];
      a11 += 4;
      v59 = v58;
      v73.val[1] = 0uLL;
      v78.val[0] = v57;
      v68.val[1] = 0uLL;
      v60 = v44;
      vst2q_s8(v60, v68);
      v60 += 32;
      v78.val[1] = 0uLL;
      vst2q_s8(v60, v78);
      v61 = v44 + 64;
      vst2q_s8(v61, v73);
      v62 = v44 + 96;
      vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
      v44 += 128;
    }
    while (v44 != v55);
    v44 = v55;
  }
  while (v44 != v54)
  {
    v63 = a11->u8[0];
    a11 = (int8x16_t *)((char *)a11 + 1);
    *(_WORD *)v44 = v63;
    v44 += 2;
  }
  return result;
}

WebCore::CSSCounterStyle *WTF::RefCounted<WebCore::CSSCounterStyle>::deref(WebCore::CSSCounterStyle *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::CSSCounterStyle::~CSSCounterStyle(result, a2);
    return (WebCore::CSSCounterStyle *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::CSSCounterStyle::~CSSCounterStyle(WebCore::CSSCounterStyle *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSCounterStyleDescriptors::~CSSCounterStyleDescriptors((WebCore::CSSCounterStyle *)((char *)this + 16), (WTF::StringImpl *)a2);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

WTF::StringImpl *WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>>(WTF::StringImpl *result, _DWORD *a2)
{
  WTF::AtomString *v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *__dst[17];

  v2 = result;
  __dst[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (!a2)
  {
LABEL_5:
    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>>(__dst, (uint64_t)a2);
    return (WTF::StringImpl *)WTF::AtomStringImpl::add();
  }
  v3 = a2[1];
  if ((v3 & 0x80000000) != 0)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v4 = a2[4];
  if (v3 <= 0x3F)
  {
    if ((v4 & 4) == 0)
    {
      v6 = a2;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v6, (char *)__dst);
      return (WTF::StringImpl *)WTF::AtomStringImpl::add();
    }
    goto LABEL_5;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>>(a2[1], (v4 >> 2) & 1, a2, __dst);
  WTF::AtomString::AtomString(v2, __dst[0]);
  result = __dst[0];
  __dst[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  _DWORD *v7;
  _BYTE *v8;
  size_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  char v14;
  _DWORD *v15;

  v5 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v7 = v15;
        if (v15)
        {
          result = (uint64_t)(v15 + 5);
          *v15 = 2;
          v7[1] = v5;
          *((_QWORD *)v7 + 1) = v7 + 5;
          v7[4] = 4;
          if (a3)
          {
            v8 = (_BYTE *)*((_QWORD *)a3 + 1);
            v9 = a3[1];
            if ((a3[4] & 4) != 0)
            {
              if ((_DWORD)v9)
              {
                if ((_DWORD)v9 == 1)
                  *(_BYTE *)result = *v8;
                else
                  result = (uint64_t)memcpy((void *)result, v8, v9);
              }
            }
            else
            {
              v11 = result + v9;
              if (v9 >= 0x10)
              {
                v12 = result + (v9 & 0xFFFFFFF0);
                do
                {
                  v13 = (unsigned __int128)vld2q_s8(v8);
                  v8 += 32;
                  *(_OWORD *)result = v13;
                  result += 16;
                }
                while (result != v12);
                result = v12;
              }
              while (result != v11)
              {
                v14 = *v8;
                v8 += 2;
                *(_BYTE *)result++ = v14;
              }
            }
          }
        }
        goto LABEL_14;
      }
LABEL_17:
      v7 = 0;
      goto LABEL_14;
    }
LABEL_16:
    v7 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_17;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v7 = v15;
  if (v15)
  {
    v10 = (char *)(v15 + 5);
    *v15 = 2;
    v7[1] = v5;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 0;
    v15 = a3;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v15, v10);
  }
LABEL_14:
  *a4 = v7;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  size_t v26;
  uint64_t v27;
  unsigned __int128 v28;
  char v29;
  _DWORD *v30;
  int8x16x2_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v30;
        if (!v30)
          goto LABEL_23;
        v12 = v30 + 5;
        *v30 = 2;
        v11[1] = v9;
        *((_QWORD *)v11 + 1) = v11 + 5;
        v11[4] = 4;
        if (a4)
        {
          if (a4 == 1)
          {
            *v12 = *(_BYTE *)a3;
            if (!a5)
              goto LABEL_23;
LABEL_9:
            result = (uint64_t)&v12[a4];
            v13 = (_BYTE *)*((_QWORD *)a5 + 1);
            v14 = a5[1];
            if ((a5[4] & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *(_BYTE *)result = *v13;
                else
                  result = (uint64_t)memcpy((void *)result, v13, v14);
              }
            }
            else
            {
              v26 = result + v14;
              if (v14 >= 0x10)
              {
                v27 = result + (v14 & 0xFFFFFFF0);
                do
                {
                  v28 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *(_OWORD *)result = v28;
                  result += 16;
                }
                while (result != v27);
                result = v27;
              }
              while (result != v26)
              {
                v29 = *v13;
                v13 += 2;
                *(_BYTE *)result++ = v29;
              }
            }
            goto LABEL_23;
          }
          result = (uint64_t)memcpy(v11 + 5, a3, a4);
        }
        if (!a5)
          goto LABEL_23;
        goto LABEL_9;
      }
LABEL_28:
      v11 = 0;
      goto LABEL_23;
    }
LABEL_27:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v30;
  if (v30)
  {
    v15 = (char *)(v30 + 5);
    *v30 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v16 = (char *)v11 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v17 = &v15[2 * (a4 & 0xFFFFFFC0)];
      v18 = 0uLL;
      do
      {
        v31.val[0] = (int8x16_t)*a3;
        v19 = *((int8x16_t *)a3 + 1);
        v32.val[0] = (int8x16_t)a3[2];
        v20 = a3[3];
        a3 += 4;
        v21 = v20;
        v32.val[1] = 0uLL;
        v33.val[0] = v19;
        v31.val[1] = 0uLL;
        v22 = v15;
        vst2q_s8(v22, v31);
        v22 += 32;
        v33.val[1] = 0uLL;
        vst2q_s8(v22, v33);
        v23 = v15 + 64;
        vst2q_s8(v23, v32);
        v24 = v15 + 96;
        vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
        v15 += 128;
      }
      while (v15 != v17);
      v15 = v17;
    }
    while (v15 != v16)
    {
      v25 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v15 = v25;
      v15 += 2;
    }
    v30 = a5;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v30, v16);
  }
LABEL_23:
  *a6 = v11;
  return result;
}

unint64_t WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(unint64_t result, void *__dst)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[13];
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v6[v2-- + 12] = (result % 0xA) | 0x30;
    v3 = result > 9;
    result = result / 0xAuLL;
  }
  while (v3);
  v4 = v2 + 12;
  v5 = &v6[v2 + 12];
  *v5 = 45;
  if (v2 + 14 <= 14)
  {
    if (v4 <= 12)
      v4 = 12;
    return (unint64_t)memcpy(__dst, v5, v4 - v2 - 11);
  }
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<int,void>>(_WORD *result, unsigned int a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v5;
  uint64_t v6;
  _BYTE v7[13];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
  {
    v5 = -a2;
    v6 = 12;
    do
    {
      v7[v6--] = (v5 % 0xA) | 0x30;
      v3 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v3);
    v7[v6] = 45;
    if (v6 + 2 <= 14)
    {
      do
      {
        *result++ = v7[v6];
        v3 = v6++ < 12;
      }
      while (v3);
    }
  }
  else
  {
    v2 = 0;
    do
    {
      v7[v2-- + 12] = (a2 % 0xA) | 0x30;
      v3 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v3);
    if (v2 + 14 <= 13)
    {
      do
        *result++ = *((unsigned __int8 *)&v8 + v2);
      while (!__CFADD__(v2++, 1));
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(WTF::StringBuilder *a1, unsigned int *a2)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  _WORD *result;
  unsigned int v8;
  int v9;
  BOOL v10;

  v3 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v8 = -v3;
    v9 = 1;
    do
    {
      ++v9;
      v10 = v8 >= 0xA;
      v8 /= 0xAu;
    }
    while (v10);
  }
  else
  {
    v4 = 0;
    do
    {
      ++v4;
      v5 = v3 > 9;
      v3 /= 0xAu;
    }
    while (v5);
  }
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<int,void>>(result, *a2);
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<int,void>>(result, *a2);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _WORD *v23;
  unsigned int v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unsigned __int128 v29;
  char v30;
  _QWORD v31[3];

  v9 = result;
  v31[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v31[0];
        if (v31[0])
        {
          v12 = 0;
          v13 = v31[0] + 20;
          *(_DWORD *)v31[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(_QWORD *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          v14 = a3;
          do
          {
            *((_BYTE *)&v31[1] + v12-- + 4) = (v14 % 0xA) | 0x30;
            v15 = v14 > 9;
            v14 /= 0xAu;
          }
          while (v15);
          if (v12 + 14 <= 13)
            memcpy((void *)(v11 + 20), (char *)&v31[1] + v12 + 5, -v12);
          v16 = 0;
          do
          {
            ++v16;
            v15 = a3 > 9;
            a3 /= 0xAu;
          }
          while (v15);
          v17 = (_BYTE *)(v13 + v16);
          *v17 = a4;
          result = (uint64_t)(v17 + 1);
          if (a5)
          {
            v18 = *(_BYTE **)(a5 + 8);
            v19 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v19)
              {
                if ((_DWORD)v19 == 1)
                  *(_BYTE *)result = *v18;
                else
                  result = (uint64_t)memcpy((void *)result, v18, v19);
              }
            }
            else
            {
              v27 = result + v19;
              if (v19 >= 0x10)
              {
                v28 = result + (v19 & 0xFFFFFFF0);
                do
                {
                  v29 = (unsigned __int128)vld2q_s8(v18);
                  v18 += 32;
                  *(_OWORD *)result = v29;
                  result += 16;
                }
                while (result != v28);
                result = v28;
              }
              while (result != v27)
              {
                v30 = *v18;
                v18 += 2;
                *(_BYTE *)result++ = v30;
              }
            }
          }
        }
        goto LABEL_28;
      }
LABEL_31:
      v11 = 0;
      goto LABEL_28;
    }
LABEL_30:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_28;
  }
  if (!(_DWORD)result)
    goto LABEL_30;
  if (result > 0x7FFFFFEF)
    goto LABEL_31;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v31[0];
  if (v31[0])
  {
    v20 = 0;
    v21 = v31[0] + 20;
    *(_DWORD *)v31[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    v22 = a3;
    do
    {
      *((_BYTE *)&v31[1] + v20-- + 4) = (v22 % 0xA) | 0x30;
      v15 = v22 > 9;
      v22 /= 0xAu;
    }
    while (v15);
    if (v20 + 14 <= 13)
    {
      v23 = (_WORD *)(v11 + 20);
      do
        *v23++ = *((unsigned __int8 *)&v31[1] + v20 + 5);
      while (!__CFADD__(v20++, 1));
    }
    v25 = 0;
    do
    {
      ++v25;
      v15 = a3 > 9;
      a3 /= 0xAu;
    }
    while (v15);
    v26 = v21 + 2 * v25;
    *(_WORD *)v26 = a4;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v26 + 2), a5);
  }
LABEL_28:
  *a6 = v11;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, unsigned int *a2, char *a3, uint64_t *a4)
{
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  uint64_t v13;
  unsigned int v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  char *v29;
  char *v30;
  size_t v31;
  char *v32;
  char *v33;
  unsigned __int128 v34;
  char v35;
  _BYTE v36[13];
  uint64_t v37;

  v7 = 0;
  v37 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  do
  {
    ++v7;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  v10 = *a4;
  v11 = *((_QWORD *)a1 + 1);
  if ((v11 || (v11 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v11 + 16) & 4) == 0 || v10 && (*(_BYTE *)(v10 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v13 = 0;
      v14 = *a2;
      v15 = *a3;
      v16 = *a4;
      v17 = *a2;
      do
      {
        v36[v13-- + 12] = (v17 % 0xA) | 0x30;
        v9 = v17 > 9;
        v17 /= 0xAu;
      }
      while (v9);
      if (v13 + 14 <= 13)
      {
        v18 = result;
        do
        {
          *(_WORD *)v18 = *((unsigned __int8 *)&v37 + v13);
          v18 += 2;
        }
        while (!__CFADD__(v13++, 1));
      }
      v20 = 0;
      do
      {
        ++v20;
        v9 = v14 > 9;
        v14 /= 0xAu;
      }
      while (v9);
      v21 = &result[2 * v20];
      *(_WORD *)v21 = v15;
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(v21 + 2, v16);
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v22 = result;
      v23 = 0;
      v24 = *a2;
      v25 = *a3;
      v26 = *a4;
      v27 = v24;
      do
      {
        v36[v23-- + 12] = (v27 % 0xA) | 0x30;
        v9 = v27 > 9;
        v27 /= 0xAu;
      }
      while (v9);
      if (v23 + 14 <= 13)
        memcpy(result, &v36[v23 + 13], -v23);
      v28 = 0;
      do
      {
        ++v28;
        v9 = v24 > 9;
        v24 /= 0xAu;
      }
      while (v9);
      v29 = &v22[v28];
      *v29 = v25;
      result = v29 + 1;
      if (v26)
      {
        v30 = *(char **)(v26 + 8);
        v31 = *(unsigned int *)(v26 + 4);
        if ((*(_BYTE *)(v26 + 16) & 4) != 0)
        {
          if ((_DWORD)v31)
          {
            if ((_DWORD)v31 == 1)
              *result = *v30;
            else
              return (char *)memcpy(result, v30, v31);
          }
        }
        else
        {
          v32 = &result[v31];
          if (v31 >= 0x10)
          {
            v33 = &result[v31 & 0xFFFFFFF0];
            do
            {
              v34 = (unsigned __int128)vld2q_s8(v30);
              v30 += 32;
              *(_OWORD *)result = v34;
              result += 16;
            }
            while (result != v33);
            result = v33;
          }
          while (result != v32)
          {
            v35 = *v30;
            v30 += 2;
            *result++ = v35;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::CSSCounterStyle *,WebCore::CSSCounterStyle *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::DefaultHash<WebCore::CSSCounterStyle *>>,WebCore::CSSCounterStyle *>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 8 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 8 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 8 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

WebCore::CSSCounterStyle **WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, WebCore::CSSCounterStyle **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WebCore::CSSCounterStyle **v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WebCore::CSSCounterStyle **v16;
  WTF::StringImpl *v17;
  WebCore::CSSCounterStyle *v18;
  WebCore::CSSCounterStyle **result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WebCore::CSSCounterStyle **)(v8 + 16 * v15);
    v17 = *v16;
    if (!*v16)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = *a2;
        v16 = v11;
      }
      if (v12)
        *(_DWORD *)v12 += 2;
      *v16 = v12;
      v18 = *a3;
      *a3 = 0;
      result = (WebCore::CSSCounterStyle **)v16[1];
      v16[1] = v18;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::CSSCounterStyle::~CSSCounterStyle((WebCore::CSSCounterStyle *)result, a2);
          result = (WebCore::CSSCounterStyle **)WTF::fastFree(v26, v27);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *a1;
      if (*a1)
        v23 = *(_DWORD *)(v22 - 12);
      else
        v23 = 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24)
          goto LABEL_21;
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_21:
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, v16);
      v16 = result;
      v22 = *a1;
      if (*a1)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_21;
    }
    if (v17 != (WTF::StringImpl *)-1)
      break;
    v11 = (WebCore::CSSCounterStyle **)(v8 + 16 * v15);
LABEL_7:
    v13 = i + v15;
  }
  if (v17 != v12)
    goto LABEL_7;
  if ((v9 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v28;
  *(_BYTE *)(a4 + 16) = 0;
  return WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>::operator=<WebCore::CSSCounterStyle>((WebCore::CSSCounterStyle **)(v8 + 16 * v15 + 8), a3);
}

WebCore::CSSCounterStyle **WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>::operator=<WebCore::CSSCounterStyle>(WebCore::CSSCounterStyle **a1, WebCore::CSSCounterStyle **a2)
{
  WebCore::CSSCounterStyle *v3;
  WebCore::CSSCounterStyle *v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::CSSCounterStyle::~CSSCounterStyle(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

WTF::StringImpl ***WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(WTF::StringImpl ***result, void *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::CSSCounterStyle *v6;
  WTF *v7;
  void *v8;

  v2 = *result;
  if (*result)
  {
    *result = 0;
    v3 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v3)
    {
      v4 = v2;
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          v6 = v4[1];
          v4[1] = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::CSSCounterStyle::~CSSCounterStyle(v6, a2);
              WTF::fastFree(v7, v8);
              v5 = *v4;
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    return (WTF::StringImpl ***)WTF::fastFree((WTF *)(v2 - 2), a2);
  }
  return result;
}

void WebCore::CSSCounterStyleRule::~CSSCounterStyleRule(WebCore::CSSCounterStyleRule *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::CSSCounterStyleRule::cssText@<X0>(WebCore::CSSCounterStyleRule *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringBuilder *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringBuilder *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringBuilder *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringBuilder *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  WebCore::CSSCounterStyleRule *v33;
  WTF::StringImpl *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  WTF::StringImpl **v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  BOOL v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int8x16_t *v83;
  int v84;
  int v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  int v94;
  BOOL v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  BOOL v102;
  int v103;
  int v104;
  int v105;
  BOOL v106;
  int v107;
  int v108;
  int v109;
  BOOL v110;
  int v111;
  int v112;
  int v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  _DWORD *ii;
  _WORD *v120;
  uint64_t v121;
  int8x16_t *v122;
  WTF::StringImpl *v123;
  char *v124;
  char *v125;
  _BYTE *v126;
  _BYTE *v127;
  size_t v128;
  char *v129;
  uint64_t v130;
  _WORD *v131;
  char *v132;
  size_t v133;
  char *v134;
  char *v135;
  size_t v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  char *v139;
  size_t v140;
  char *v141;
  size_t v142;
  char *v143;
  char *v144;
  size_t v145;
  size_t j;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  size_t v152;
  size_t k;
  uint64_t v154;
  char *v155;
  size_t v156;
  char *v157;
  char *v158;
  char *v159;
  size_t v160;
  size_t m;
  uint64_t v162;
  char *v163;
  size_t v164;
  char *v165;
  size_t v166;
  size_t v167;
  size_t n;
  size_t v169;
  char *v170;
  WTF::StringImpl *v171;
  char *v172;
  size_t v173;
  char *v174;
  size_t v175;
  char *v176;
  size_t v177;
  char *v178;
  WTF::StringImpl *v179;
  size_t v180;
  char *v181;
  char *v182;
  char *v183;
  size_t v184;
  uint64_t v185;
  char *v186;
  WTF::StringImpl *v187;
  char *v188;
  WTF::StringImpl *v189;
  char *v190;
  size_t v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  char *v194;
  WTF::StringImpl *v195;
  char *v196;
  WTF::StringImpl *v197;
  char *v198;
  size_t v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  char *v202;
  WTF::StringImpl *v203;
  _QWORD *v204;
  uint64_t v205;
  __int128 v206;
  char *v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  char *v211;
  char *v212;
  char *v213;
  __int16 v214;
  _DWORD *v215;
  char *v216;
  char *v217;
  char *v218;
  __int128 v219;
  int8x16_t v220;
  __int128 v221;
  __int128 v222;
  char *v223;
  char *v224;
  char *v225;
  __int16 v226;
  uint64_t v227;
  char *v228;
  char *v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  __int128 v232;
  char *v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  char *v237;
  char *v238;
  char *v239;
  __int16 v240;
  char *v241;
  char *v242;
  char *v243;
  __int128 v244;
  int8x16_t *i;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  char *v249;
  char *v250;
  char *v251;
  __int16 v252;
  char *v253;
  char *v254;
  __int128 v255;
  int8x16_t v256;
  __int128 v257;
  __int128 v258;
  char *v259;
  char *v260;
  char *v261;
  __int16 v262;
  uint64_t v263;
  char *v264;
  char *v265;
  WTF::StringImpl *v266;
  _DWORD *v267;
  uint64_t v268;
  __int128 v269;
  char *v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  char *v274;
  char *v275;
  char *v276;
  __int16 v277;
  char *v278;
  char *v279;
  char *v280;
  __int128 v281;
  int8x16_t v282;
  __int128 v283;
  __int128 v284;
  char *v285;
  char *v286;
  char *v287;
  __int16 v288;
  char *v289;
  char *v290;
  __int128 v291;
  int8x16_t v292;
  __int128 v293;
  __int128 v294;
  char *v295;
  char *v296;
  char *v297;
  __int16 v298;
  uint64_t v299;
  size_t v300;
  char *v301;
  char *v302;
  WTF::StringImpl *v303;
  _DWORD *v304;
  int8x16_t *v305;
  uint64_t v306;
  __int128 v307;
  char *v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  char *v312;
  char *v313;
  char *v314;
  __int16 v315;
  char *v316;
  char *v317;
  char *v318;
  __int128 v319;
  int8x16_t v320;
  __int128 v321;
  __int128 v322;
  char *v323;
  char *v324;
  char *v325;
  __int16 v326;
  char *v327;
  char *v328;
  __int128 v329;
  int8x16_t v330;
  __int128 v331;
  __int128 v332;
  char *v333;
  char *v334;
  char *v335;
  __int16 v336;
  uint64_t v337;
  char *v338;
  char *v339;
  WTF::StringImpl *v340;
  _DWORD *v341;
  int8x16_t *v342;
  uint64_t v343;
  __int128 v344;
  char *v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  char *v349;
  char *v350;
  char *v351;
  __int16 v352;
  char *v353;
  char *v354;
  char *v355;
  __int128 v356;
  int8x16_t v357;
  __int128 v358;
  __int128 v359;
  char *v360;
  char *v361;
  char *v362;
  __int16 v363;
  char *v364;
  size_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  __int128 v370;
  int8x16_t v371;
  __int128 v372;
  __int128 v373;
  char *v374;
  char *v375;
  char *v376;
  __int16 v377;
  uint64_t v378;
  char *v379;
  char *v380;
  WTF::StringImpl *v381;
  _DWORD *v382;
  int8x16_t *v383;
  uint64_t v384;
  __int128 v385;
  char *v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  char *v390;
  char *v391;
  char *v392;
  __int16 v393;
  char *v394;
  char *v395;
  int8x16_t *v396;
  char *v397;
  __int128 v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  char *v402;
  char *v403;
  char *v404;
  __int16 v405;
  char *v406;
  char *v407;
  __int128 v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  char *v412;
  char *v413;
  char *v414;
  __int16 v415;
  uint64_t v416;
  char *v417;
  char *v418;
  WTF::StringImpl *v419;
  _DWORD *v420;
  uint64_t v421;
  __int128 v422;
  char *v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  char *v427;
  char *v428;
  char *v429;
  __int16 v430;
  char *v431;
  char *v432;
  int8x16_t *v433;
  char *v434;
  __int128 v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  char *v439;
  char *v440;
  char *v441;
  __int16 v442;
  char *v443;
  char *v444;
  char *v445;
  __int128 v446;
  __int128 v447;
  unsigned __int8 *v448;
  char *v449;
  char *v450;
  char *v451;
  __int16 v452;
  uint64_t v453;
  char *v454;
  char *v455;
  WTF::StringImpl *v456;
  _DWORD *v457;
  uint64_t v458;
  __int128 v459;
  char *v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  char *v464;
  char *v465;
  char *v466;
  __int16 v467;
  char *v468;
  char *v469;
  int8x16_t *v470;
  char *v471;
  __int128 v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  char *v476;
  char *v477;
  char *v478;
  __int16 v479;
  char *v480;
  char *v481;
  char *v482;
  __int128 v483;
  __int128 v484;
  unsigned __int8 *v485;
  char *v486;
  char *v487;
  char *v488;
  __int16 v489;
  uint64_t v490;
  char *v491;
  char *v492;
  WTF::StringImpl *v493;
  _DWORD *v494;
  uint64_t v495;
  __int128 v496;
  char *v497;
  int8x16_t v498;
  int8x16_t v499;
  int8x16_t v500;
  char *v501;
  char *v502;
  char *v503;
  __int16 v504;
  char *v505;
  char *v506;
  int8x16_t *v507;
  char *v508;
  __int128 v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  char *v513;
  char *v514;
  char *v515;
  __int16 v516;
  char *v517;
  char *v518;
  char *v519;
  __int128 v520;
  __int128 v521;
  unsigned __int8 *v522;
  char *v523;
  char *v524;
  char *v525;
  __int16 v526;
  uint64_t v527;
  char *v528;
  char *v529;
  WTF::StringImpl *v530;
  _DWORD *v531;
  uint64_t v532;
  __int128 v533;
  char *v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  char *v538;
  char *v539;
  char *v540;
  __int16 v541;
  char *v542;
  char *v543;
  int8x16_t *v544;
  char *v545;
  __int128 v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  char *v550;
  char *v551;
  char *v552;
  __int16 v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  WTF::StringImpl *v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  WTF::StringImpl *v559;
  WTF::StringImpl *result;
  WTF::StringImpl *v561;
  WTF::StringImpl *v562;
  unsigned __int128 *v563;
  unsigned __int128 *v564;
  unsigned __int128 *v565;
  unsigned __int128 v566;
  unsigned __int128 *v567;
  unsigned __int128 *v568;
  unsigned __int128 *v569;
  unsigned __int128 v570;
  unsigned __int128 *v571;
  unsigned __int128 *v572;
  unsigned __int128 *v573;
  unsigned __int128 v574;
  unsigned __int128 *v575;
  unsigned __int128 *v576;
  unsigned __int128 *v577;
  unsigned __int128 v578;
  unsigned __int128 *v579;
  unsigned __int128 *v580;
  unsigned __int128 *v581;
  unsigned __int128 v582;
  unsigned __int128 *v583;
  unsigned __int128 *v584;
  unsigned __int128 *v585;
  unsigned __int128 v586;
  unsigned __int128 *v587;
  unsigned __int128 *v588;
  unsigned __int128 *v589;
  unsigned __int128 v590;
  unsigned __int128 *v591;
  unsigned __int128 *v592;
  unsigned __int128 *v593;
  unsigned __int128 v594;
  unsigned __int128 *v595;
  unsigned __int128 *v596;
  unsigned __int128 *v597;
  unsigned __int128 v598;
  unsigned __int128 *v599;
  unsigned __int128 *v600;
  unsigned __int128 *v601;
  unsigned __int128 v602;
  char v603;
  char v604;
  char v605;
  char v606;
  char v607;
  char v608;
  __int8 v609;
  __int8 v610;
  __int8 v611;
  __int8 v612;
  size_t v613;
  char *__src;
  char *v615;
  char *v616;
  char *v617;
  char *v618;
  char *v619;
  char *v620;
  _QWORD *v621;
  char *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  _DWORD *v628;
  _DWORD *v629;
  _DWORD *v630;
  size_t v631;
  size_t v632;
  char *v633;
  WTF::StringImpl *v634;
  char *v635;
  WTF::StringImpl *v636;
  WTF::StringImpl *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  WTF::StringImpl *v640;
  uint64_t v641;
  size_t __n;
  size_t v643;
  size_t v644;
  size_t v645;
  size_t v646;
  size_t v647;
  size_t v648;
  size_t v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  size_t v657;
  size_t v658;
  size_t v659;
  size_t v660;
  uint64_t v661;
  size_t v662;
  uint64_t v663;
  size_t v664;
  uint64_t v665;
  size_t v666;
  uint64_t v667;
  size_t v668;
  WTF::StringImpl *v669;
  WTF::StringImpl *v670;
  WTF::StringImpl *v671;
  WTF::StringImpl *v672;
  WTF::StringImpl *v673;
  WTF::StringImpl *v674;
  WTF::StringImpl *v675;
  WTF::StringImpl *v676;
  WTF::StringImpl *v677;
  WTF::StringImpl *v678;
  WTF::StringImpl *v679;
  _DWORD *v680;
  int8x16x2_t v681;
  int8x16x2_t v682;
  int8x16x2_t v683;
  int8x16x2_t v684;
  int8x16x2_t v685;
  int8x16x2_t v686;
  int8x16x2_t v687;
  int8x16x2_t v688;
  int8x16x2_t v689;
  int8x16x2_t v690;
  int8x16x2_t v691;
  int8x16x2_t v692;
  int8x16x2_t v693;
  int8x16x2_t v694;
  int8x16x2_t v695;
  int8x16x2_t v696;
  int8x16x2_t v697;
  int8x16x2_t v698;
  int8x16x2_t v699;
  int8x16x2_t v700;
  int8x16x2_t v701;
  int8x16x2_t v702;
  int8x16x2_t v703;
  int8x16x2_t v704;
  int8x16x2_t v705;
  int8x16x2_t v706;
  int8x16x2_t v707;
  int8x16x2_t v708;
  int8x16x2_t v709;
  int8x16x2_t v710;
  int8x16x2_t v711;
  int8x16x2_t v712;
  int8x16x2_t v713;
  int8x16x2_t v714;
  int8x16x2_t v715;
  int8x16x2_t v716;
  int8x16x2_t v717;
  int8x16x2_t v718;
  int8x16x2_t v719;
  int8x16x2_t v720;
  int8x16x2_t v721;
  int8x16x2_t v722;
  int8x16x2_t v723;
  int8x16x2_t v724;
  int8x16x2_t v725;
  int8x16x2_t v726;
  int8x16x2_t v727;
  int8x16x2_t v728;
  int8x16x2_t v729;
  int8x16x2_t v730;
  int8x16x2_t v731;
  int8x16x2_t v732;
  int8x16x2_t v733;
  int8x16x2_t v734;
  int8x16x2_t v735;
  int8x16x2_t v736;
  int8x16x2_t v737;
  int8x16x2_t v738;
  int8x16x2_t v739;
  int8x16x2_t v740;
  int8x16x2_t v741;
  int8x16x2_t v742;
  int8x16x2_t v743;
  int8x16x2_t v744;
  int8x16x2_t v745;
  int8x16x2_t v746;
  int8x16x2_t v747;
  int8x16x2_t v748;
  int8x16x2_t v749;
  int8x16x2_t v750;
  int8x16x2_t v751;
  int8x16x2_t v752;
  int8x16x2_t v753;
  int8x16x2_t v754;
  int8x16x2_t v755;
  int8x16x2_t v756;
  int8x16x2_t v757;
  int8x16x2_t v758;
  int8x16x2_t v759;
  int8x16x2_t v760;
  int8x16x2_t v761;
  int8x16x2_t v762;
  int8x16x2_t v763;
  int8x16x2_t v764;

  WebCore::CSSCounterStyleDescriptors::systemCSSText(*((_QWORD *)this + 3) + 16, &v679);
  v5 = &str_66;
  v621 = a2;
  if (v679)
  {
    if (*((_DWORD *)v679 + 1))
      v6 = ";";
    else
      v6 = &str_66;
    if (*((_DWORD *)v679 + 1))
      v5 = " system: ";
    v8 = 10;
    if (!*((_DWORD *)v679 + 1))
      v8 = 1;
    v665 = v8;
    v7 = 1;
    if (*((_DWORD *)v679 + 1))
      v7 = 2;
  }
  else
  {
    v665 = 1;
    v6 = &str_66;
    v7 = 1;
  }
  v667 = v7;
  WebCore::CSSCounterStyleDescriptors::symbolsCSSText(*((_QWORD *)this + 3) + 16, v4, &v678);
  v10 = &str_66;
  if (v678)
  {
    if (*((_DWORD *)v678 + 1))
      v11 = ";";
    else
      v11 = &str_66;
    if (*((_DWORD *)v678 + 1))
      v10 = " symbols: ";
    v13 = 11;
    if (!*((_DWORD *)v678 + 1))
      v13 = 1;
    v661 = v13;
    v12 = 1;
    if (*((_DWORD *)v678 + 1))
      v12 = 2;
  }
  else
  {
    v661 = 1;
    v11 = &str_66;
    v12 = 1;
  }
  v663 = v12;
  WebCore::CSSCounterStyleDescriptors::additiveSymbolsCSSText(*((_QWORD *)this + 3) + 16, v9, &v677);
  v15 = &str_66;
  if (v677)
  {
    if (*((_DWORD *)v677 + 1))
      v16 = ";";
    else
      v16 = &str_66;
    if (*((_DWORD *)v677 + 1))
      v15 = " additive-symbols: ";
    v18 = 20;
    if (!*((_DWORD *)v677 + 1))
      v18 = 1;
    v654 = v18;
    v17 = 1;
    if (*((_DWORD *)v677 + 1))
      v17 = 2;
  }
  else
  {
    v654 = 1;
    v16 = &str_66;
    v17 = 1;
  }
  v656 = v17;
  WebCore::CSSCounterStyleDescriptors::negativeCSSText(*((_QWORD *)this + 3) + 16, v14, &v676);
  v20 = &str_66;
  if (v676)
  {
    if (*((_DWORD *)v676 + 1))
      v22 = ";";
    else
      v22 = &str_66;
    if (*((_DWORD *)v676 + 1))
    {
      v20 = " negative: ";
      v21 = 12;
    }
    else
    {
      v21 = 1;
    }
    v23 = 1;
    if (*((_DWORD *)v676 + 1))
      v23 = 2;
  }
  else
  {
    v21 = 1;
    v22 = &str_66;
    v23 = 1;
  }
  v650 = v21;
  v652 = v23;
  v24 = *((_QWORD *)this + 3);
  v25 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if ((*(_WORD *)(v24 + 196) & 4) != 0)
  {
    v27 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Symbol *)(v24 + 64), v19, &v675);
    v25 = v27;
    v26 = v675;
  }
  else
  {
    v26 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v26 += 2;
    v675 = v26;
  }
  v28 = &str_66;
  if (v26)
  {
    v31 = ";";
    if (!*((_DWORD *)v26 + 1))
      v31 = &str_66;
    __src = v31;
    if (*((_DWORD *)v26 + 1))
    {
      v28 = " prefix: ";
      v29 = 10;
    }
    else
    {
      v29 = 1;
    }
    v30 = 1;
    if (*((_DWORD *)v26 + 1))
      v30 = 2;
  }
  else
  {
    v29 = 1;
    __src = &str_66;
    v30 = 1;
  }
  v646 = v29;
  v648 = v30;
  v622 = v6;
  v32 = *((_QWORD *)this + 3);
  v670 = v26;
  v33 = this;
  if ((*(_WORD *)(v32 + 196) & 8) != 0)
  {
    v35 = v15;
    v36 = v11;
    v37 = v20;
    v38 = v16;
    v39 = v28;
    v40 = v22;
    v41 = v25;
    WebCore::CSSCounterStyleDescriptors::Symbol::cssText((WebCore::CSSCounterStyleDescriptors::Symbol *)(v32 + 80), v19, &v674);
    v25 = v41;
    v22 = v40;
    v28 = v39;
    v16 = v38;
    v20 = v37;
    v11 = v36;
    v15 = v35;
    v34 = v674;
  }
  else
  {
    v34 = *v25;
    if (*v25)
      *(_DWORD *)v34 += 2;
    v674 = v34;
  }
  v42 = &str_66;
  if (v34)
  {
    v44 = ";";
    if (!*((_DWORD *)v34 + 1))
      v44 = &str_66;
    v615 = v44;
    if (*((_DWORD *)v34 + 1))
    {
      v42 = " suffix: ";
      v43 = 10;
    }
    else
    {
      v43 = 1;
    }
    v45 = 1;
    if (*((_DWORD *)v34 + 1))
      v45 = 2;
    v631 = v45;
  }
  else
  {
    v43 = 1;
    v615 = &str_66;
    v631 = 1;
  }
  v627 = v43;
  v46 = *((_QWORD *)v33 + 3);
  v669 = v34;
  v635 = v42;
  if ((*(_WORD *)(v46 + 196) & 0x20) != 0)
  {
    WebCore::CSSCounterStyleDescriptors::Pad::cssText((WebCore::CSSCounterStyleDescriptors::Pad *)(v46 + 112), v19, &v673);
    v47 = v673;
  }
  else
  {
    v47 = *v25;
    if (*v25)
      *(_DWORD *)v47 += 2;
    v673 = v47;
  }
  if (v47)
  {
    v48 = *((_DWORD *)v47 + 1) == 0;
    if (*((_DWORD *)v47 + 1))
      v49 = ";";
    else
      v49 = &str_66;
    if (*((_DWORD *)v47 + 1))
      v50 = " pad: ";
    else
      v50 = &str_66;
    if (v48)
      v51 = 1;
    else
      v51 = 7;
    v52 = 1;
    if (!v48)
      v52 = 2;
    v625 = v51;
    v626 = v52;
    v616 = v50;
    v617 = v49;
  }
  else
  {
    v625 = 1;
    v616 = &str_66;
    v617 = &str_66;
    v626 = 1;
  }
  WebCore::CSSCounterStyleDescriptors::rangesCSSText(*((_QWORD *)v33 + 3) + 16, &v672);
  if (v672)
  {
    if (*((_DWORD *)v672 + 1))
      v53 = ";";
    else
      v53 = &str_66;
    if (*((_DWORD *)v672 + 1))
      v54 = " range: ";
    else
      v54 = &str_66;
    if (*((_DWORD *)v672 + 1))
      v55 = 9;
    else
      v55 = 1;
    v56 = 1;
    if (*((_DWORD *)v672 + 1))
      v56 = 2;
    v623 = v55;
    v624 = v56;
    v618 = v54;
    v619 = v53;
  }
  else
  {
    v623 = 1;
    v618 = &str_66;
    v619 = &str_66;
    v624 = 1;
  }
  WebCore::CSSCounterStyleDescriptors::fallbackCSSText(*((_QWORD *)v33 + 3) + 16, &v671);
  v57 = v671;
  v58 = &str_66;
  if (v671)
  {
    v61 = ";";
    if (!*((_DWORD *)v671 + 1))
      v61 = &str_66;
    v620 = v61;
    if (*((_DWORD *)v671 + 1))
    {
      v58 = " fallback: ";
      v59 = 12;
    }
    else
    {
      v59 = 1;
    }
    v60 = 1;
    if (*((_DWORD *)v671 + 1))
      v60 = 2;
    v633 = v58;
  }
  else
  {
    v59 = 1;
    v633 = &str_66;
    v620 = &str_66;
    v60 = 1;
  }
  v62 = *(_QWORD *)(*((_QWORD *)v33 + 3) + 8);
  if (v62)
    *(_DWORD *)v62 += 2;
  v63 = v679;
  if (v679)
    *(_DWORD *)v679 += 2;
  v64 = v678;
  if (v678)
    *(_DWORD *)v678 += 2;
  v65 = v677;
  if (v677)
    *(_DWORD *)v677 += 2;
  v66 = v676;
  if (v676)
    *(_DWORD *)v676 += 2;
  if (v670)
    *(_DWORD *)v670 += 2;
  if (v669)
    *(_DWORD *)v669 += 2;
  v67 = v673;
  if (v673)
    *(_DWORD *)v673 += 2;
  v68 = v672;
  if (v672)
    *(_DWORD *)v672 += 2;
  if (v57)
    *(_DWORD *)v57 += 2;
  v640 = v63;
  v641 = v62;
  v637 = v64;
  v638 = v66;
  v639 = v65;
  v636 = v57;
  v658 = v665 - 1;
  if ((unint64_t)(v665 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957968ACLL);
  }
  v659 = v667 - 1;
  if ((unint64_t)(v667 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796B70);
  }
  v660 = v661 - 1;
  if ((unint64_t)(v661 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957968DCLL);
  }
  __n = v663 - 1;
  if ((unint64_t)(v663 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19579690CLL);
  }
  v643 = v654 - 1;
  if ((unint64_t)(v654 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19579693CLL);
  }
  v662 = v656 - 1;
  if ((unint64_t)(v656 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19579696CLL);
  }
  v644 = v650 - 1;
  if ((unint64_t)(v650 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19579699CLL);
  }
  v664 = v652 - 1;
  if ((unint64_t)(v652 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957969CCLL);
  }
  v645 = v646 - 1;
  if ((v646 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957969FCLL);
  }
  v666 = v648 - 1;
  if ((v648 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796A2CLL);
  }
  v668 = v627 - 1;
  if ((unint64_t)(v627 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796A5CLL);
  }
  v647 = v631 - 1;
  if ((v631 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796A8CLL);
  }
  v649 = v625 - 1;
  if ((unint64_t)(v625 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796ABCLL);
  }
  v651 = v626 - 1;
  if ((unint64_t)(v626 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796AECLL);
  }
  v653 = v623 - 1;
  if ((unint64_t)(v623 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796B1CLL);
  }
  v655 = v624 - 1;
  if ((unint64_t)(v624 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796D3CLL);
  }
  v657 = v59 - 1;
  if ((unint64_t)(v59 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796DA8);
  }
  v613 = v60 - 1;
  if ((unint64_t)(v60 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195796DF4);
  }
  v118 = v669;
  v117 = v670;
  i = (int8x16_t *)v622;
  if (v62)
  {
    v69 = *(_DWORD *)(v62 + 4);
    if (!v63)
      goto LABEL_904;
LABEL_138:
    v70 = *((_DWORD *)v63 + 1);
    if (!v64)
      goto LABEL_905;
LABEL_139:
    v71 = *((_DWORD *)v64 + 1);
    if (!v65)
      goto LABEL_906;
LABEL_140:
    v72 = *((_DWORD *)v65 + 1);
    if (!v66)
      goto LABEL_907;
LABEL_141:
    v73 = *((_DWORD *)v66 + 1);
    if (!v670)
      goto LABEL_908;
    goto LABEL_142;
  }
  v69 = 0;
  if (v63)
    goto LABEL_138;
LABEL_904:
  v70 = 0;
  if (v64)
    goto LABEL_139;
LABEL_905:
  v71 = 0;
  if (v65)
    goto LABEL_140;
LABEL_906:
  v72 = 0;
  if (v66)
    goto LABEL_141;
LABEL_907:
  v73 = 0;
  if (!v670)
  {
LABEL_908:
    v74 = 0;
    if (!v669)
      goto LABEL_909;
LABEL_143:
    v75 = *((_DWORD *)v669 + 1);
    goto LABEL_144;
  }
LABEL_142:
  v74 = *((_DWORD *)v670 + 1);
  if (v669)
    goto LABEL_143;
LABEL_909:
  v75 = 0;
LABEL_144:
  v634 = v67;
  if (v67)
    LODWORD(v67) = *((_DWORD *)v67 + 1);
  if (v68)
  {
    v76 = *((_DWORD *)v68 + 1);
    if (v57)
    {
LABEL_148:
      v77 = *((_DWORD *)v57 + 1);
      goto LABEL_149;
    }
  }
  else
  {
    v76 = 0;
    if (v57)
      goto LABEL_148;
  }
  v77 = 0;
LABEL_149:
  v632 = v613;
  v78 = __OFADD__((_DWORD)v613, 2);
  v79 = v613 + 2;
  if (v78)
    goto LABEL_772;
  if (v77 < 0)
    goto LABEL_772;
  v78 = __OFADD__(v77, v79);
  v80 = v77 + v79;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v657, v80);
  v81 = v657 + v80;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__(v655, v81);
  v82 = v655 + v81;
  v83 = (int8x16_t *)v78;
  if (v76 < 0)
    goto LABEL_772;
  if ((v83 & 1) != 0)
    goto LABEL_772;
  v78 = __OFADD__(v76, v82);
  v84 = v76 + v82;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__(v653, v84);
  v85 = v653 + v84;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__(v651, v85);
  v86 = v651 + v85;
  v87 = v78;
  if ((v67 & 0x80000000) != 0)
    goto LABEL_772;
  if (v87)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v67, v86);
  v88 = (_DWORD)v67 + v86;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v649, v88);
  v89 = v649 + v88;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v647, v89);
  v90 = v647 + v89;
  v91 = v78;
  if (v75 < 0)
    goto LABEL_772;
  if (v91)
    goto LABEL_772;
  v78 = __OFADD__(v75, v90);
  v92 = v75 + v90;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v668, v92);
  v93 = v668 + v92;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v666, v93);
  v94 = v666 + v93;
  v95 = v78;
  if (v74 < 0)
    goto LABEL_772;
  if (v95)
    goto LABEL_772;
  v78 = __OFADD__(v74, v94);
  v96 = v74 + v94;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v645, v96);
  v97 = v645 + v96;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v664, v97);
  v98 = v664 + v97;
  if (v78)
    goto LABEL_772;
  if (v73 < 0)
    goto LABEL_772;
  v78 = __OFADD__(v73, v98);
  v99 = v73 + v98;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v644, v99);
  v100 = v644 + v99;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v662, v100);
  v101 = v662 + v100;
  v102 = v78;
  if (v72 < 0)
    goto LABEL_772;
  if (v102)
    goto LABEL_772;
  v78 = __OFADD__(v72, v101);
  v103 = v72 + v101;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v643, v103);
  v104 = v643 + v103;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)__n, v104);
  v105 = __n + v104;
  v106 = v78;
  if (v71 < 0)
    goto LABEL_772;
  if (v106)
    goto LABEL_772;
  v78 = __OFADD__(v71, v105);
  v107 = v71 + v105;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v660, v107);
  v108 = v660 + v107;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v659, v108);
  v109 = v659 + v108;
  v110 = v78;
  if (v70 < 0)
    goto LABEL_772;
  if (v110)
    goto LABEL_772;
  v78 = __OFADD__(v70, v109);
  v111 = v70 + v109;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__((_DWORD)v658, v111);
  v112 = v658 + v111;
  if (v78)
    goto LABEL_772;
  v78 = __OFADD__(v112, 2);
  v113 = v112 + 2;
  v114 = v78;
  if (v69 < 0)
    goto LABEL_772;
  if (v114)
    goto LABEL_772;
  v78 = __OFADD__(v69, v113);
  v115 = v69 + v113;
  if (v78)
    goto LABEL_772;
  v116 = (v115 + 15);
  if (__OFADD__(v115, 15))
    goto LABEL_772;
  if (v62 && (*(_BYTE *)(v62 + 16) & 4) == 0
    || v63 && (*((_BYTE *)v63 + 16) & 4) == 0
    || v637 && (*((_BYTE *)v637 + 16) & 4) == 0
    || v65 && (*((_BYTE *)v65 + 16) & 4) == 0
    || v66 && (*((_BYTE *)v66 + 16) & 4) == 0
    || v670 && (*((_BYTE *)v670 + 16) & 4) == 0
    || v669 && (*((_BYTE *)v669 + 16) & 4) == 0
    || v634 && (*((_BYTE *)v634 + 16) & 4) == 0
    || v68 && (*((_BYTE *)v68 + 16) & 4) == 0
    || v57 && (*((_BYTE *)v57 + 16) & 4) == 0)
  {
    if (v115 != -15)
    {
      if (v116 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v116 + 20));
        v57 = v636;
        v66 = v638;
        v65 = v639;
        v63 = v640;
        v62 = v641;
        v118 = v669;
        v117 = v670;
        ii = v680;
        if (v680)
        {
          *v680 = 2;
          ii[1] = v116;
          *(_OWORD *)(ii + 5) = xmmword_1969ED490;
          *((_QWORD *)ii + 1) = ii + 5;
          ii[4] = 0;
          v120 = (_WORD *)ii + 25;
          *(_QWORD *)(ii + 9) = 0x7900740073002DLL;
          ii[11] = 6619244;
          *((_WORD *)ii + 24) = 32;
          if (v641)
          {
            v83 = *(int8x16_t **)(v641 + 8);
            v121 = *(unsigned int *)(v641 + 4);
            v122 = (int8x16_t *)v635;
            if ((*(_BYTE *)(v641 + 16) & 4) != 0)
            {
              v124 = (char *)&v120[v121];
              if (v121 >= 0x40)
              {
                v125 = (char *)&v120[v121 & 0xFFFFFFC0];
                v206 = 0uLL;
                v207 = (char *)ii + 50;
                v123 = v634;
                do
                {
                  v681.val[0] = *v83;
                  v208 = v83[1];
                  v709.val[0] = v83[2];
                  v209 = v83[3];
                  v83 += 4;
                  v210 = v209;
                  v709.val[1] = 0uLL;
                  v737.val[0] = v208;
                  v681.val[1] = 0uLL;
                  v211 = v207;
                  vst2q_s8(v211, v681);
                  v211 += 32;
                  v737.val[1] = 0uLL;
                  vst2q_s8(v211, v737);
                  v212 = v207 + 64;
                  vst2q_s8(v212, v709);
                  v213 = v207 + 96;
                  vst2q_s8(v213, *(int8x16x2_t *)(&v206 - 1));
                  v207 += 128;
                }
                while (v207 != v125);
              }
              else
              {
                v125 = (char *)ii + 50;
                v123 = v634;
              }
              while (v125 != v124)
              {
                v214 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v125 = v214;
                v125 += 2;
              }
            }
            else if ((_DWORD)v121 == 1)
            {
              *v120 = v83->i16[0];
              v123 = v634;
            }
            else
            {
              v123 = v634;
              if ((_DWORD)v121)
              {
                v628 = ii;
                memcpy((char *)ii + 50, v83, 2 * v121);
                v123 = v634;
                v122 = (int8x16_t *)v635;
                ii = v628;
                v57 = v636;
                v66 = v638;
                v65 = v639;
                v63 = v640;
                v62 = v641;
                v118 = v669;
                v117 = v670;
              }
            }
            v205 = *(unsigned int *)(v62 + 4);
          }
          else
          {
            v205 = 0;
            v123 = v634;
            v122 = (int8x16_t *)v635;
          }
          v215 = &v120[v205];
          *v215 = 8060960;
          v216 = (char *)(v215 + 1);
          v217 = &v216[2 * v658];
          if ((v658 & 0x7FFFFFC0) != 0)
          {
            v218 = &v216[2 * (v658 & 0x7FFFFFC0)];
            v219 = 0uLL;
            do
            {
              v682.val[0] = *(int8x16_t *)v5;
              v220 = *((int8x16_t *)v5 + 1);
              v710.val[0] = (int8x16_t)*((_OWORD *)v5 + 2);
              v221 = *((_OWORD *)v5 + 3);
              v5 += 64;
              v222 = v221;
              v710.val[1] = 0uLL;
              v738.val[0] = v220;
              v682.val[1] = 0uLL;
              v223 = v216;
              vst2q_s8(v223, v682);
              v223 += 32;
              v738.val[1] = 0uLL;
              vst2q_s8(v223, v738);
              v224 = v216 + 64;
              vst2q_s8(v224, v710);
              v225 = v216 + 96;
              vst2q_s8(v225, *(int8x16x2_t *)(&v219 - 1));
              v216 += 128;
            }
            while (v216 != v218);
            v216 = v218;
          }
          while (v216 != v217)
          {
            v226 = *v5++;
            *(_WORD *)v216 = v226;
            v216 += 2;
          }
          if (v63)
          {
            v83 = (int8x16_t *)*((_QWORD *)v63 + 1);
            v227 = *((unsigned int *)v63 + 1);
            if ((*((_BYTE *)v63 + 16) & 4) != 0)
            {
              v228 = &v217[2 * v227];
              if (v227 >= 0x40)
              {
                v229 = &v217[2 * (v227 & 0xFFFFFFC0)];
                v232 = 0uLL;
                v233 = v217;
                do
                {
                  v683.val[0] = *v83;
                  v234 = v83[1];
                  v711.val[0] = v83[2];
                  v235 = v83[3];
                  v83 += 4;
                  v236 = v235;
                  v711.val[1] = 0uLL;
                  v739.val[0] = v234;
                  v683.val[1] = 0uLL;
                  v237 = v233;
                  vst2q_s8(v237, v683);
                  v237 += 32;
                  v739.val[1] = 0uLL;
                  vst2q_s8(v237, v739);
                  v238 = v233 + 64;
                  vst2q_s8(v238, v711);
                  v239 = v233 + 96;
                  vst2q_s8(v239, *(int8x16x2_t *)(&v232 - 1));
                  v233 += 128;
                }
                while (v233 != v229);
              }
              else
              {
                v229 = v217;
              }
              while (v229 != v228)
              {
                v240 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v229 = v240;
                v229 += 2;
              }
            }
            else if ((_DWORD)v227 == 1)
            {
              *(_WORD *)v217 = v83->i16[0];
            }
            else if ((_DWORD)v227)
            {
              v230 = v123;
              v630 = ii;
              memcpy(v217, v83, 2 * v227);
              v122 = (int8x16_t *)v635;
              v57 = v636;
              ii = v630;
              v123 = v230;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v231 = *((unsigned int *)v63 + 1);
          }
          else
          {
            v231 = 0;
          }
          v241 = &v217[2 * v231];
          v242 = &v241[2 * v659];
          if ((v659 & 0x7FFFFFC0) != 0)
          {
            v243 = &v241[2 * (v659 & 0x7FFFFFC0)];
            v244 = 0uLL;
            v137 = v637;
            do
            {
              v684.val[0] = *i;
              v246 = i[1];
              v712.val[0] = i[2];
              v247 = i[3];
              i += 4;
              v248 = v247;
              v712.val[1] = 0uLL;
              v740.val[0] = v246;
              v684.val[1] = 0uLL;
              v249 = v241;
              vst2q_s8(v249, v684);
              v249 += 32;
              v740.val[1] = 0uLL;
              vst2q_s8(v249, v740);
              v250 = v241 + 64;
              vst2q_s8(v250, v712);
              v251 = v241 + 96;
              vst2q_s8(v251, *(int8x16x2_t *)(&v244 - 1));
              v241 += 128;
            }
            while (v241 != v243);
            v241 = v243;
          }
          else
          {
            v137 = v637;
          }
          while (v241 != v242)
          {
            v252 = i->u8[0];
            i = (int8x16_t *)((char *)i + 1);
            *(_WORD *)v241 = v252;
            v241 += 2;
          }
          v253 = &v242[2 * v660];
          if ((v660 & 0x7FFFFFC0) != 0)
          {
            v254 = &v242[2 * (v660 & 0x7FFFFFC0)];
            v255 = 0uLL;
            do
            {
              v685.val[0] = *(int8x16_t *)v10;
              v256 = *((int8x16_t *)v10 + 1);
              v713.val[0] = (int8x16_t)*((_OWORD *)v10 + 2);
              v257 = *((_OWORD *)v10 + 3);
              v10 += 64;
              v258 = v257;
              v713.val[1] = 0uLL;
              v741.val[0] = v256;
              v685.val[1] = 0uLL;
              v259 = v242;
              vst2q_s8(v259, v685);
              v259 += 32;
              v741.val[1] = 0uLL;
              vst2q_s8(v259, v741);
              v260 = v242 + 64;
              vst2q_s8(v260, v713);
              v261 = v242 + 96;
              vst2q_s8(v261, *(int8x16x2_t *)(&v255 - 1));
              v242 += 128;
            }
            while (v242 != v254);
            v242 = v254;
          }
          while (v242 != v253)
          {
            v262 = *v10++;
            *(_WORD *)v242 = v262;
            v242 += 2;
          }
          if (v137)
          {
            v83 = (int8x16_t *)*((_QWORD *)v137 + 1);
            v263 = *((unsigned int *)v137 + 1);
            if ((*((_BYTE *)v137 + 16) & 4) != 0)
            {
              v264 = &v253[2 * v263];
              if (v263 >= 0x40)
              {
                v265 = &v253[2 * (v263 & 0xFFFFFFC0)];
                v269 = 0uLL;
                v270 = v253;
                do
                {
                  v686.val[0] = *v83;
                  v271 = v83[1];
                  v714.val[0] = v83[2];
                  v272 = v83[3];
                  v83 += 4;
                  v273 = v272;
                  v714.val[1] = 0uLL;
                  v742.val[0] = v271;
                  v686.val[1] = 0uLL;
                  v274 = v270;
                  vst2q_s8(v274, v686);
                  v274 += 32;
                  v742.val[1] = 0uLL;
                  vst2q_s8(v274, v742);
                  v275 = v270 + 64;
                  vst2q_s8(v275, v714);
                  v276 = v270 + 96;
                  vst2q_s8(v276, *(int8x16x2_t *)(&v269 - 1));
                  v270 += 128;
                }
                while (v270 != v265);
              }
              else
              {
                v265 = v253;
              }
              while (v265 != v264)
              {
                v277 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v265 = v277;
                v265 += 2;
              }
            }
            else if ((_DWORD)v263 == 1)
            {
              *(_WORD *)v253 = v83->i16[0];
            }
            else if ((_DWORD)v263)
            {
              v266 = v123;
              v267 = ii;
              memcpy(v253, v83, 2 * v263);
              v122 = (int8x16_t *)v635;
              v57 = v636;
              ii = v267;
              v123 = v266;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v268 = *((unsigned int *)v137 + 1);
          }
          else
          {
            v268 = 0;
          }
          v278 = &v253[2 * v268];
          v279 = &v278[2 * __n];
          if ((__n & 0x7FFFFFC0) != 0)
          {
            v280 = &v278[2 * (__n & 0x7FFFFFC0)];
            v281 = 0uLL;
            do
            {
              v687.val[0] = *(int8x16_t *)v11;
              v282 = *((int8x16_t *)v11 + 1);
              v715.val[0] = (int8x16_t)*((_OWORD *)v11 + 2);
              v283 = *((_OWORD *)v11 + 3);
              v11 += 64;
              v284 = v283;
              v715.val[1] = 0uLL;
              v743.val[0] = v282;
              v687.val[1] = 0uLL;
              v285 = v278;
              vst2q_s8(v285, v687);
              v285 += 32;
              v743.val[1] = 0uLL;
              vst2q_s8(v285, v743);
              v286 = v278 + 64;
              vst2q_s8(v286, v715);
              v287 = v278 + 96;
              vst2q_s8(v287, *(int8x16x2_t *)(&v281 - 1));
              v278 += 128;
            }
            while (v278 != v280);
            v278 = v280;
          }
          while (v278 != v279)
          {
            v288 = *v11++;
            *(_WORD *)v278 = v288;
            v278 += 2;
          }
          v289 = &v279[2 * v643];
          if ((v643 & 0x7FFFFFC0) != 0)
          {
            v290 = &v279[2 * (v643 & 0x7FFFFFC0)];
            v291 = 0uLL;
            do
            {
              v688.val[0] = *(int8x16_t *)v15;
              v292 = *((int8x16_t *)v15 + 1);
              v716.val[0] = (int8x16_t)*((_OWORD *)v15 + 2);
              v293 = *((_OWORD *)v15 + 3);
              v15 += 64;
              v294 = v293;
              v716.val[1] = 0uLL;
              v744.val[0] = v292;
              v688.val[1] = 0uLL;
              v295 = v279;
              vst2q_s8(v295, v688);
              v295 += 32;
              v744.val[1] = 0uLL;
              vst2q_s8(v295, v744);
              v296 = v279 + 64;
              vst2q_s8(v296, v716);
              v297 = v279 + 96;
              vst2q_s8(v297, *(int8x16x2_t *)(&v291 - 1));
              v279 += 128;
            }
            while (v279 != v290);
            v279 = v290;
          }
          while (v279 != v289)
          {
            v298 = *v15++;
            *(_WORD *)v279 = v298;
            v279 += 2;
          }
          if (v65)
          {
            v83 = (int8x16_t *)*((_QWORD *)v65 + 1);
            v299 = *((unsigned int *)v65 + 1);
            v300 = v647;
            if ((*((_BYTE *)v65 + 16) & 4) != 0)
            {
              v301 = &v289[2 * v299];
              if (v299 >= 0x40)
              {
                v302 = &v289[2 * (v299 & 0xFFFFFFC0)];
                v307 = 0uLL;
                v308 = v289;
                do
                {
                  v689.val[0] = *v83;
                  v309 = v83[1];
                  v717.val[0] = v83[2];
                  v310 = v83[3];
                  v83 += 4;
                  v311 = v310;
                  v717.val[1] = 0uLL;
                  v745.val[0] = v309;
                  v689.val[1] = 0uLL;
                  v312 = v308;
                  vst2q_s8(v312, v689);
                  v312 += 32;
                  v745.val[1] = 0uLL;
                  vst2q_s8(v312, v745);
                  v313 = v308 + 64;
                  vst2q_s8(v313, v717);
                  v314 = v308 + 96;
                  vst2q_s8(v314, *(int8x16x2_t *)(&v307 - 1));
                  v308 += 128;
                }
                while (v308 != v302);
              }
              else
              {
                v302 = v289;
              }
              while (v302 != v301)
              {
                v315 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v302 = v315;
                v302 += 2;
              }
            }
            else if ((_DWORD)v299 == 1)
            {
              *(_WORD *)v289 = v83->i16[0];
            }
            else if ((_DWORD)v299)
            {
              v303 = v123;
              v304 = ii;
              v305 = v122;
              memcpy(v289, v83, 2 * v299);
              v122 = v305;
              ii = v304;
              v57 = v636;
              v123 = v303;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v306 = *((unsigned int *)v65 + 1);
          }
          else
          {
            v306 = 0;
            v300 = v647;
          }
          v316 = &v289[2 * v306];
          v317 = &v316[2 * v662];
          if ((v662 & 0x7FFFFFC0) != 0)
          {
            v318 = &v316[2 * (v662 & 0x7FFFFFC0)];
            v319 = 0uLL;
            do
            {
              v690.val[0] = *(int8x16_t *)v16;
              v320 = *((int8x16_t *)v16 + 1);
              v718.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
              v321 = *((_OWORD *)v16 + 3);
              v16 += 64;
              v322 = v321;
              v718.val[1] = 0uLL;
              v746.val[0] = v320;
              v690.val[1] = 0uLL;
              v323 = v316;
              vst2q_s8(v323, v690);
              v323 += 32;
              v746.val[1] = 0uLL;
              vst2q_s8(v323, v746);
              v324 = v316 + 64;
              vst2q_s8(v324, v718);
              v325 = v316 + 96;
              vst2q_s8(v325, *(int8x16x2_t *)(&v319 - 1));
              v316 += 128;
            }
            while (v316 != v318);
            v316 = v318;
          }
          while (v316 != v317)
          {
            v326 = *v16++;
            *(_WORD *)v316 = v326;
            v316 += 2;
          }
          v327 = &v317[2 * v644];
          if ((v644 & 0x7FFFFFC0) != 0)
          {
            v328 = &v317[2 * (v644 & 0x7FFFFFC0)];
            v329 = 0uLL;
            do
            {
              v691.val[0] = *(int8x16_t *)v20;
              v330 = *((int8x16_t *)v20 + 1);
              v719.val[0] = (int8x16_t)*((_OWORD *)v20 + 2);
              v331 = *((_OWORD *)v20 + 3);
              v20 += 64;
              v332 = v331;
              v719.val[1] = 0uLL;
              v747.val[0] = v330;
              v691.val[1] = 0uLL;
              v333 = v317;
              vst2q_s8(v333, v691);
              v333 += 32;
              v747.val[1] = 0uLL;
              vst2q_s8(v333, v747);
              v334 = v317 + 64;
              vst2q_s8(v334, v719);
              v335 = v317 + 96;
              vst2q_s8(v335, *(int8x16x2_t *)(&v329 - 1));
              v317 += 128;
            }
            while (v317 != v328);
            v317 = v328;
          }
          while (v317 != v327)
          {
            v336 = *v20++;
            *(_WORD *)v317 = v336;
            v317 += 2;
          }
          if (v66)
          {
            v83 = (int8x16_t *)*((_QWORD *)v66 + 1);
            v337 = *((unsigned int *)v66 + 1);
            if ((*((_BYTE *)v66 + 16) & 4) != 0)
            {
              v338 = &v327[2 * v337];
              if (v337 >= 0x40)
              {
                v339 = &v327[2 * (v337 & 0xFFFFFFC0)];
                v344 = 0uLL;
                v345 = v327;
                do
                {
                  v692.val[0] = *v83;
                  v346 = v83[1];
                  v720.val[0] = v83[2];
                  v347 = v83[3];
                  v83 += 4;
                  v348 = v347;
                  v720.val[1] = 0uLL;
                  v748.val[0] = v346;
                  v692.val[1] = 0uLL;
                  v349 = v345;
                  vst2q_s8(v349, v692);
                  v349 += 32;
                  v748.val[1] = 0uLL;
                  vst2q_s8(v349, v748);
                  v350 = v345 + 64;
                  vst2q_s8(v350, v720);
                  v351 = v345 + 96;
                  vst2q_s8(v351, *(int8x16x2_t *)(&v344 - 1));
                  v345 += 128;
                }
                while (v345 != v339);
              }
              else
              {
                v339 = v327;
              }
              while (v339 != v338)
              {
                v352 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v339 = v352;
                v339 += 2;
              }
            }
            else if ((_DWORD)v337 == 1)
            {
              *(_WORD *)v327 = v83->i16[0];
            }
            else if ((_DWORD)v337)
            {
              v340 = v123;
              v341 = ii;
              v342 = v122;
              memcpy(v327, v83, 2 * v337);
              v122 = v342;
              ii = v341;
              v57 = v636;
              v123 = v340;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v343 = *((unsigned int *)v66 + 1);
          }
          else
          {
            v343 = 0;
          }
          v353 = &v327[2 * v343];
          v354 = &v353[2 * v664];
          if ((v664 & 0x7FFFFFC0) != 0)
          {
            v355 = &v353[2 * (v664 & 0x7FFFFFC0)];
            v356 = 0uLL;
            do
            {
              v693.val[0] = *(int8x16_t *)v22;
              v357 = *((int8x16_t *)v22 + 1);
              v721.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
              v358 = *((_OWORD *)v22 + 3);
              v22 += 64;
              v359 = v358;
              v721.val[1] = 0uLL;
              v749.val[0] = v357;
              v693.val[1] = 0uLL;
              v360 = v353;
              vst2q_s8(v360, v693);
              v360 += 32;
              v749.val[1] = 0uLL;
              vst2q_s8(v360, v749);
              v361 = v353 + 64;
              vst2q_s8(v361, v721);
              v362 = v353 + 96;
              vst2q_s8(v362, *(int8x16x2_t *)(&v356 - 1));
              v353 += 128;
            }
            while (v353 != v355);
            v353 = v355;
          }
          while (v353 != v354)
          {
            v363 = *v22++;
            *(_WORD *)v353 = v363;
            v353 += 2;
          }
          v364 = &v354[2 * v645];
          if ((v645 & 0x7FFFFFC0) != 0)
          {
            v369 = &v354[2 * (v645 & 0x7FFFFFC0)];
            v370 = 0uLL;
            v366 = v624 - 1;
            v365 = v657;
            v368 = v626 - 1;
            v367 = v623 - 1;
            do
            {
              v694.val[0] = *(int8x16_t *)v28;
              v371 = *((int8x16_t *)v28 + 1);
              v722.val[0] = (int8x16_t)*((_OWORD *)v28 + 2);
              v372 = *((_OWORD *)v28 + 3);
              v28 += 64;
              v373 = v372;
              v722.val[1] = 0uLL;
              v750.val[0] = v371;
              v694.val[1] = 0uLL;
              v374 = v354;
              vst2q_s8(v374, v694);
              v374 += 32;
              v750.val[1] = 0uLL;
              vst2q_s8(v374, v750);
              v375 = v354 + 64;
              vst2q_s8(v375, v722);
              v376 = v354 + 96;
              vst2q_s8(v376, *(int8x16x2_t *)(&v370 - 1));
              v354 += 128;
            }
            while (v354 != v369);
            v354 = v369;
          }
          else
          {
            v366 = v624 - 1;
            v365 = v657;
            v368 = v626 - 1;
            v367 = v623 - 1;
          }
          while (v354 != v364)
          {
            v377 = *v28++;
            *(_WORD *)v354 = v377;
            v354 += 2;
          }
          if (v117)
          {
            v83 = (int8x16_t *)*((_QWORD *)v117 + 1);
            v378 = *((unsigned int *)v117 + 1);
            if ((*((_BYTE *)v117 + 16) & 4) != 0)
            {
              v379 = &v364[2 * v378];
              if (v378 >= 0x40)
              {
                v380 = &v364[2 * (v378 & 0xFFFFFFC0)];
                v385 = 0uLL;
                v386 = v364;
                do
                {
                  v695.val[0] = *v83;
                  v387 = v83[1];
                  v723.val[0] = v83[2];
                  v388 = v83[3];
                  v83 += 4;
                  v389 = v388;
                  v723.val[1] = 0uLL;
                  v751.val[0] = v387;
                  v695.val[1] = 0uLL;
                  v390 = v386;
                  vst2q_s8(v390, v695);
                  v390 += 32;
                  v751.val[1] = 0uLL;
                  vst2q_s8(v390, v751);
                  v391 = v386 + 64;
                  vst2q_s8(v391, v723);
                  v392 = v386 + 96;
                  vst2q_s8(v392, *(int8x16x2_t *)(&v385 - 1));
                  v386 += 128;
                }
                while (v386 != v380);
              }
              else
              {
                v380 = v364;
              }
              while (v380 != v379)
              {
                v393 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v380 = v393;
                v380 += 2;
              }
            }
            else if ((_DWORD)v378 == 1)
            {
              *(_WORD *)v364 = v83->i16[0];
            }
            else if ((_DWORD)v378)
            {
              v381 = v123;
              v382 = ii;
              v383 = v122;
              memcpy(v364, v83, 2 * v378);
              v122 = v383;
              ii = v382;
              v57 = v636;
              v123 = v381;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v384 = *((unsigned int *)v117 + 1);
          }
          else
          {
            v384 = 0;
          }
          v394 = &v364[2 * v384];
          v395 = &v394[2 * v666];
          if ((v666 & 0x7FFFFFC0) != 0)
          {
            v397 = &v394[2 * (v666 & 0x7FFFFFC0)];
            v398 = 0uLL;
            v396 = (int8x16_t *)__src;
            do
            {
              v696.val[0] = *v396;
              v399 = v396[1];
              v724.val[0] = v396[2];
              v400 = v396[3];
              v396 += 4;
              v401 = v400;
              v724.val[1] = 0uLL;
              v752.val[0] = v399;
              v696.val[1] = 0uLL;
              v402 = v394;
              vst2q_s8(v402, v696);
              v402 += 32;
              v752.val[1] = 0uLL;
              vst2q_s8(v402, v752);
              v403 = v394 + 64;
              vst2q_s8(v403, v724);
              v404 = v394 + 96;
              vst2q_s8(v404, *(int8x16x2_t *)(&v398 - 1));
              v394 += 128;
            }
            while (v394 != v397);
            v394 = v397;
          }
          else
          {
            v396 = (int8x16_t *)__src;
          }
          while (v394 != v395)
          {
            v405 = v396->u8[0];
            v396 = (int8x16_t *)((char *)v396 + 1);
            *(_WORD *)v394 = v405;
            v394 += 2;
          }
          v406 = &v395[2 * v668];
          if ((v668 & 0x7FFFFFC0) != 0)
          {
            v407 = &v395[2 * (v668 & 0x7FFFFFC0)];
            v408 = 0uLL;
            do
            {
              v697.val[0] = *v122;
              v409 = v122[1];
              v725.val[0] = v122[2];
              v410 = v122[3];
              v122 += 4;
              v411 = v410;
              v725.val[1] = 0uLL;
              v753.val[0] = v409;
              v697.val[1] = 0uLL;
              v412 = v395;
              vst2q_s8(v412, v697);
              v412 += 32;
              v753.val[1] = 0uLL;
              vst2q_s8(v412, v753);
              v413 = v395 + 64;
              vst2q_s8(v413, v725);
              v414 = v395 + 96;
              vst2q_s8(v414, *(int8x16x2_t *)(&v408 - 1));
              v395 += 128;
            }
            while (v395 != v407);
            v395 = v407;
          }
          while (v395 != v406)
          {
            v415 = v122->u8[0];
            v122 = (int8x16_t *)((char *)v122 + 1);
            *(_WORD *)v395 = v415;
            v395 += 2;
          }
          if (v118)
          {
            v83 = (int8x16_t *)*((_QWORD *)v118 + 1);
            v416 = *((unsigned int *)v118 + 1);
            if ((*((_BYTE *)v118 + 16) & 4) != 0)
            {
              v417 = &v406[2 * v416];
              if (v416 >= 0x40)
              {
                v418 = &v406[2 * (v416 & 0xFFFFFFC0)];
                v422 = 0uLL;
                v423 = v406;
                do
                {
                  v698.val[0] = *v83;
                  v424 = v83[1];
                  v726.val[0] = v83[2];
                  v425 = v83[3];
                  v83 += 4;
                  v426 = v425;
                  v726.val[1] = 0uLL;
                  v754.val[0] = v424;
                  v698.val[1] = 0uLL;
                  v427 = v423;
                  vst2q_s8(v427, v698);
                  v427 += 32;
                  v754.val[1] = 0uLL;
                  vst2q_s8(v427, v754);
                  v428 = v423 + 64;
                  vst2q_s8(v428, v726);
                  v429 = v423 + 96;
                  vst2q_s8(v429, *(int8x16x2_t *)(&v422 - 1));
                  v423 += 128;
                }
                while (v423 != v418);
              }
              else
              {
                v418 = v406;
              }
              while (v418 != v417)
              {
                v430 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v418 = v430;
                v418 += 2;
              }
            }
            else if ((_DWORD)v416 == 1)
            {
              *(_WORD *)v406 = v83->i16[0];
            }
            else if ((_DWORD)v416)
            {
              v419 = v123;
              v420 = ii;
              memcpy(v406, v83, 2 * v416);
              ii = v420;
              v57 = v636;
              v123 = v419;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v421 = *((unsigned int *)v118 + 1);
          }
          else
          {
            v421 = 0;
          }
          v431 = &v406[2 * v421];
          v432 = &v431[2 * v300];
          if ((v300 & 0x7FFFFFC0) != 0)
          {
            v434 = &v431[2 * (v300 & 0x7FFFFFC0)];
            v435 = 0uLL;
            v433 = (int8x16_t *)v615;
            do
            {
              v699.val[0] = *v433;
              v436 = v433[1];
              v727.val[0] = v433[2];
              v437 = v433[3];
              v433 += 4;
              v438 = v437;
              v727.val[1] = 0uLL;
              v755.val[0] = v436;
              v699.val[1] = 0uLL;
              v439 = v431;
              vst2q_s8(v439, v699);
              v439 += 32;
              v755.val[1] = 0uLL;
              vst2q_s8(v439, v755);
              v440 = v431 + 64;
              vst2q_s8(v440, v727);
              v441 = v431 + 96;
              vst2q_s8(v441, *(int8x16x2_t *)(&v435 - 1));
              v431 += 128;
            }
            while (v431 != v434);
            v431 = v434;
          }
          else
          {
            v433 = (int8x16_t *)v615;
          }
          while (v431 != v432)
          {
            v442 = v433->u8[0];
            v433 = (int8x16_t *)((char *)v433 + 1);
            *(_WORD *)v431 = v442;
            v431 += 2;
          }
          v443 = &v432[2 * v649];
          if ((v649 & 0x7FFFFFC0) != 0)
          {
            v445 = &v432[2 * (v649 & 0x7FFFFFC0)];
            v446 = 0uLL;
            v444 = v616;
            do
            {
              v700.val[0] = *(int8x16_t *)v444;
              v728.val[0] = (int8x16_t)*((_OWORD *)v444 + 2);
              v447 = *((_OWORD *)v444 + 3);
              v728.val[1] = 0uLL;
              v756.val[0] = (int8x16_t)*((_OWORD *)v444 + 1);
              v700.val[1] = 0uLL;
              v448 = (unsigned __int8 *)(v444 + 64);
              v449 = v432;
              vst2q_s8(v449, v700);
              v449 += 32;
              v756.val[1] = 0uLL;
              vst2q_s8(v449, v756);
              v450 = v432 + 64;
              vst2q_s8(v450, v728);
              v451 = v432 + 96;
              vst2q_s8(v451, *(int8x16x2_t *)(&v446 - 1));
              v444 = (char *)v448;
              v432 += 128;
            }
            while (v432 != v445);
            v432 = v445;
          }
          else
          {
            v444 = v616;
          }
          while (v432 != v443)
          {
            v452 = *v444++;
            *(_WORD *)v432 = v452;
            v432 += 2;
          }
          if (v123)
          {
            v83 = (int8x16_t *)*((_QWORD *)v123 + 1);
            v453 = *((unsigned int *)v123 + 1);
            if ((*((_BYTE *)v123 + 16) & 4) != 0)
            {
              v454 = &v443[2 * v453];
              if (v453 >= 0x40)
              {
                v455 = &v443[2 * (v453 & 0xFFFFFFC0)];
                v459 = 0uLL;
                v460 = v443;
                do
                {
                  v701.val[0] = *v83;
                  v461 = v83[1];
                  v729.val[0] = v83[2];
                  v462 = v83[3];
                  v83 += 4;
                  v463 = v462;
                  v729.val[1] = 0uLL;
                  v757.val[0] = v461;
                  v701.val[1] = 0uLL;
                  v464 = v460;
                  vst2q_s8(v464, v701);
                  v464 += 32;
                  v757.val[1] = 0uLL;
                  vst2q_s8(v464, v757);
                  v465 = v460 + 64;
                  vst2q_s8(v465, v729);
                  v466 = v460 + 96;
                  vst2q_s8(v466, *(int8x16x2_t *)(&v459 - 1));
                  v460 += 128;
                }
                while (v460 != v455);
              }
              else
              {
                v455 = v443;
              }
              while (v455 != v454)
              {
                v467 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v455 = v467;
                v455 += 2;
              }
            }
            else if ((_DWORD)v453 == 1)
            {
              *(_WORD *)v443 = v83->i16[0];
            }
            else if ((_DWORD)v453)
            {
              v456 = v123;
              v457 = ii;
              memcpy(v443, v83, 2 * v453);
              ii = v457;
              v57 = v636;
              v123 = v456;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v458 = *((unsigned int *)v123 + 1);
          }
          else
          {
            v458 = 0;
          }
          v468 = &v443[2 * v458];
          v469 = &v468[2 * v368];
          if ((v368 & 0x7FFFFFC0) != 0)
          {
            v471 = &v468[2 * (v368 & 0x7FFFFFC0)];
            v472 = 0uLL;
            v470 = (int8x16_t *)v617;
            do
            {
              v702.val[0] = *v470;
              v473 = v470[1];
              v730.val[0] = v470[2];
              v474 = v470[3];
              v470 += 4;
              v475 = v474;
              v730.val[1] = 0uLL;
              v758.val[0] = v473;
              v702.val[1] = 0uLL;
              v476 = v468;
              vst2q_s8(v476, v702);
              v476 += 32;
              v758.val[1] = 0uLL;
              vst2q_s8(v476, v758);
              v477 = v468 + 64;
              vst2q_s8(v477, v730);
              v478 = v468 + 96;
              vst2q_s8(v478, *(int8x16x2_t *)(&v472 - 1));
              v468 += 128;
            }
            while (v468 != v471);
            v468 = v471;
          }
          else
          {
            v470 = (int8x16_t *)v617;
          }
          while (v468 != v469)
          {
            v479 = v470->u8[0];
            v470 = (int8x16_t *)((char *)v470 + 1);
            *(_WORD *)v468 = v479;
            v468 += 2;
          }
          v480 = &v469[2 * v367];
          if ((v367 & 0x7FFFFFC0) != 0)
          {
            v482 = &v469[2 * (v367 & 0x7FFFFFC0)];
            v483 = 0uLL;
            v481 = v618;
            do
            {
              v703.val[0] = *(int8x16_t *)v481;
              v731.val[0] = (int8x16_t)*((_OWORD *)v481 + 2);
              v484 = *((_OWORD *)v481 + 3);
              v731.val[1] = 0uLL;
              v759.val[0] = (int8x16_t)*((_OWORD *)v481 + 1);
              v703.val[1] = 0uLL;
              v485 = (unsigned __int8 *)(v481 + 64);
              v486 = v469;
              vst2q_s8(v486, v703);
              v486 += 32;
              v759.val[1] = 0uLL;
              vst2q_s8(v486, v759);
              v487 = v469 + 64;
              vst2q_s8(v487, v731);
              v488 = v469 + 96;
              vst2q_s8(v488, *(int8x16x2_t *)(&v483 - 1));
              v481 = (char *)v485;
              v469 += 128;
            }
            while (v469 != v482);
            v469 = v482;
          }
          else
          {
            v481 = v618;
          }
          while (v469 != v480)
          {
            v489 = *v481++;
            *(_WORD *)v469 = v489;
            v469 += 2;
          }
          if (v68)
          {
            v83 = (int8x16_t *)*((_QWORD *)v68 + 1);
            v490 = *((unsigned int *)v68 + 1);
            if ((*((_BYTE *)v68 + 16) & 4) != 0)
            {
              v491 = &v480[2 * v490];
              if (v490 >= 0x40)
              {
                v492 = &v480[2 * (v490 & 0xFFFFFFC0)];
                v496 = 0uLL;
                v497 = v480;
                do
                {
                  v704.val[0] = *v83;
                  v498 = v83[1];
                  v732.val[0] = v83[2];
                  v499 = v83[3];
                  v83 += 4;
                  v500 = v499;
                  v732.val[1] = 0uLL;
                  v760.val[0] = v498;
                  v704.val[1] = 0uLL;
                  v501 = v497;
                  vst2q_s8(v501, v704);
                  v501 += 32;
                  v760.val[1] = 0uLL;
                  vst2q_s8(v501, v760);
                  v502 = v497 + 64;
                  vst2q_s8(v502, v732);
                  v503 = v497 + 96;
                  vst2q_s8(v503, *(int8x16x2_t *)(&v496 - 1));
                  v497 += 128;
                }
                while (v497 != v492);
              }
              else
              {
                v492 = v480;
              }
              while (v492 != v491)
              {
                v504 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v492 = v504;
                v492 += 2;
              }
            }
            else if ((_DWORD)v490 == 1)
            {
              *(_WORD *)v480 = v83->i16[0];
            }
            else if ((_DWORD)v490)
            {
              v493 = v123;
              v494 = ii;
              memcpy(v480, v83, 2 * v490);
              ii = v494;
              v57 = v636;
              v123 = v493;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v495 = *((unsigned int *)v68 + 1);
          }
          else
          {
            v495 = 0;
          }
          v505 = &v480[2 * v495];
          v506 = &v505[2 * v366];
          if ((v366 & 0x7FFFFFC0) != 0)
          {
            v508 = &v505[2 * (v366 & 0x7FFFFFC0)];
            v509 = 0uLL;
            v507 = (int8x16_t *)v619;
            do
            {
              v705.val[0] = *v507;
              v510 = v507[1];
              v733.val[0] = v507[2];
              v511 = v507[3];
              v507 += 4;
              v512 = v511;
              v733.val[1] = 0uLL;
              v761.val[0] = v510;
              v705.val[1] = 0uLL;
              v513 = v505;
              vst2q_s8(v513, v705);
              v513 += 32;
              v761.val[1] = 0uLL;
              vst2q_s8(v513, v761);
              v514 = v505 + 64;
              vst2q_s8(v514, v733);
              v515 = v505 + 96;
              vst2q_s8(v515, *(int8x16x2_t *)(&v509 - 1));
              v505 += 128;
            }
            while (v505 != v508);
            v505 = v508;
          }
          else
          {
            v507 = (int8x16_t *)v619;
          }
          while (v505 != v506)
          {
            v516 = v507->u8[0];
            v507 = (int8x16_t *)((char *)v507 + 1);
            *(_WORD *)v505 = v516;
            v505 += 2;
          }
          v517 = &v506[2 * v365];
          if ((v365 & 0x7FFFFFC0) != 0)
          {
            v519 = &v506[2 * (v365 & 0x7FFFFFC0)];
            v520 = 0uLL;
            v518 = v633;
            do
            {
              v706.val[0] = *(int8x16_t *)v518;
              v734.val[0] = (int8x16_t)*((_OWORD *)v518 + 2);
              v521 = *((_OWORD *)v518 + 3);
              v734.val[1] = 0uLL;
              v762.val[0] = (int8x16_t)*((_OWORD *)v518 + 1);
              v706.val[1] = 0uLL;
              v522 = (unsigned __int8 *)(v518 + 64);
              v523 = v506;
              vst2q_s8(v523, v706);
              v523 += 32;
              v762.val[1] = 0uLL;
              vst2q_s8(v523, v762);
              v524 = v506 + 64;
              vst2q_s8(v524, v734);
              v525 = v506 + 96;
              vst2q_s8(v525, *(int8x16x2_t *)(&v520 - 1));
              v518 = (char *)v522;
              v506 += 128;
            }
            while (v506 != v519);
            v506 = v519;
          }
          else
          {
            v518 = v633;
          }
          while (v506 != v517)
          {
            v526 = *v518++;
            *(_WORD *)v506 = v526;
            v506 += 2;
          }
          if (v57)
          {
            v83 = (int8x16_t *)*((_QWORD *)v57 + 1);
            v527 = *((unsigned int *)v57 + 1);
            if ((*((_BYTE *)v57 + 16) & 4) != 0)
            {
              v528 = &v517[2 * v527];
              if (v527 >= 0x40)
              {
                v529 = &v517[2 * (v527 & 0xFFFFFFC0)];
                v533 = 0uLL;
                v534 = v517;
                do
                {
                  v707.val[0] = *v83;
                  v535 = v83[1];
                  v735.val[0] = v83[2];
                  v536 = v83[3];
                  v83 += 4;
                  v537 = v536;
                  v735.val[1] = 0uLL;
                  v763.val[0] = v535;
                  v707.val[1] = 0uLL;
                  v538 = v534;
                  vst2q_s8(v538, v707);
                  v538 += 32;
                  v763.val[1] = 0uLL;
                  vst2q_s8(v538, v763);
                  v539 = v534 + 64;
                  vst2q_s8(v539, v735);
                  v540 = v534 + 96;
                  vst2q_s8(v540, *(int8x16x2_t *)(&v533 - 1));
                  v534 += 128;
                }
                while (v534 != v529);
              }
              else
              {
                v529 = v517;
              }
              while (v529 != v528)
              {
                v541 = v83->u8[0];
                v83 = (int8x16_t *)((char *)v83 + 1);
                *(_WORD *)v529 = v541;
                v529 += 2;
              }
            }
            else if ((_DWORD)v527 == 1)
            {
              *(_WORD *)v517 = v83->i16[0];
            }
            else if ((_DWORD)v527)
            {
              v530 = v123;
              v531 = ii;
              memcpy(v517, v83, 2 * v527);
              ii = v531;
              v57 = v636;
              v123 = v530;
              v66 = v638;
              v65 = v639;
              v63 = v640;
              v62 = v641;
              v118 = v669;
              v117 = v670;
            }
            v532 = *((unsigned int *)v57 + 1);
          }
          else
          {
            v532 = 0;
          }
          v542 = &v517[2 * v532];
          v543 = &v542[2 * v632];
          if ((v632 & 0x7FFFFFC0) != 0)
          {
            v545 = &v542[2 * (v632 & 0x7FFFFFC0)];
            v546 = 0uLL;
            v544 = (int8x16_t *)v620;
            v204 = v621;
            do
            {
              v708.val[0] = *v544;
              v547 = v544[1];
              v736.val[0] = v544[2];
              v548 = v544[3];
              v544 += 4;
              v549 = v548;
              v736.val[1] = 0uLL;
              v764.val[0] = v547;
              v708.val[1] = 0uLL;
              v550 = v542;
              vst2q_s8(v550, v708);
              v550 += 32;
              v764.val[1] = 0uLL;
              vst2q_s8(v550, v764);
              v551 = v542 + 64;
              vst2q_s8(v551, v736);
              v552 = v542 + 96;
              vst2q_s8(v552, *(int8x16x2_t *)(&v546 - 1));
              v542 += 128;
            }
            while (v542 != v545);
            v542 = v545;
          }
          else
          {
            v544 = (int8x16_t *)v620;
            v204 = v621;
          }
          while (v542 != v543)
          {
            v553 = v544->u8[0];
            v544 = (int8x16_t *)((char *)v544 + 1);
            *(_WORD *)v542 = v553;
            v542 += 2;
          }
          *(_DWORD *)v543 = 8192032;
          goto LABEL_653;
        }
      }
LABEL_772:
      *v621 = 0;
      __break(0xC471u);
      JUMPOUT(0x19579646CLL);
    }
LABEL_735:
    ii = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v204 = v621;
    v137 = v637;
    v123 = v634;
    goto LABEL_653;
  }
  if (v115 == -15)
    goto LABEL_735;
  if ((v116 & 0x80000000) != 0)
    goto LABEL_772;
  WTF::tryFastCompactMalloc((WTF *)(v116 + 20));
  v63 = v640;
  v62 = v641;
  ii = v680;
  if (!v680)
    goto LABEL_772;
  *v680 = 2;
  ii[1] = v116;
  qmemcpy(ii + 5, "@counter-style ", 15);
  *((_QWORD *)ii + 1) = ii + 5;
  ii[4] = 4;
  v126 = (char *)ii + 35;
  v629 = ii;
  if (v641)
  {
    v127 = *(_BYTE **)(v641 + 8);
    v128 = *(unsigned int *)(v641 + 4);
    v129 = v633;
    if ((*(_BYTE *)(v641 + 16) & 4) != 0)
    {
      if ((_DWORD)v128)
      {
        if ((_DWORD)v128 == 1)
          *v126 = *v127;
        else
          memcpy((char *)ii + 35, v127, v128);
        v63 = v640;
        v62 = v641;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v563 = (unsigned __int128 *)&v126[v128];
      if (v128 < 0x10)
      {
        v564 = (unsigned __int128 *)((char *)ii + 35);
      }
      else
      {
        v564 = (unsigned __int128 *)&v126[v128 & 0xFFFFFFF0];
        v565 = (unsigned __int128 *)((char *)ii + 35);
        do
        {
          v566 = (unsigned __int128)vld2q_s8(v127);
          v127 += 32;
          *v565++ = v566;
        }
        while (v565 != v564);
      }
      v63 = v640;
      v62 = v641;
      v129 = v633;
      for (i = (int8x16_t *)v622; v564 != v563; v129 = v633)
      {
        v603 = *v127;
        v127 += 2;
        *(_BYTE *)v564 = v603;
        v564 = (unsigned __int128 *)((char *)v564 + 1);
      }
    }
    v130 = *(unsigned int *)(v62 + 4);
  }
  else
  {
    v130 = 0;
    v129 = v633;
  }
  v131 = &v126[v130];
  *v131 = 31520;
  v132 = (char *)(v131 + 1);
  v133 = v658;
  if ((_DWORD)v658)
  {
    if ((_DWORD)v658 == 1)
    {
      *v132 = *v5;
    }
    else
    {
      memcpy(v132, v5, v658);
      v133 = v658;
    }
    v63 = v640;
    v62 = v641;
    v129 = v633;
    ii = v629;
  }
  v134 = &v132[v133];
  if (v63)
  {
    v135 = (char *)*((_QWORD *)v63 + 1);
    v136 = *((unsigned int *)v63 + 1);
    v137 = v637;
    if ((*((_BYTE *)v63 + 16) & 4) != 0)
    {
      if ((_DWORD)v136)
      {
        if ((_DWORD)v136 == 1)
          *v134 = *v135;
        else
          memcpy(v134, v135, v136);
        v63 = v640;
        v62 = v641;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v567 = (unsigned __int128 *)&v134[v136];
      if (v136 < 0x10)
      {
        v568 = (unsigned __int128 *)v134;
      }
      else
      {
        v568 = (unsigned __int128 *)&v134[v136 & 0xFFFFFFF0];
        v569 = (unsigned __int128 *)v134;
        do
        {
          v570 = (unsigned __int128)vld2q_s8(v135);
          v135 += 32;
          *v569++ = v570;
        }
        while (v569 != v568);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v129 = v633;
      ii = v629;
      for (i = (int8x16_t *)v622; v568 != v567; v129 = v633)
      {
        v604 = *v135;
        v135 += 2;
        *(_BYTE *)v568 = v604;
        v568 = (unsigned __int128 *)((char *)v568 + 1);
      }
    }
    v138 = *((unsigned int *)v63 + 1);
  }
  else
  {
    v138 = 0;
    v137 = v637;
  }
  v139 = &v134[v138];
  v140 = v659;
  if ((_DWORD)v659)
  {
    if ((_DWORD)v659 == 1)
    {
      *v139 = i->i8[0];
    }
    else
    {
      memcpy(v139, i, v659);
      v140 = v659;
    }
    v63 = v640;
    v62 = v641;
    v129 = v633;
    ii = v629;
  }
  v141 = &v139[v140];
  v142 = v660;
  if ((_DWORD)v660)
  {
    if ((_DWORD)v660 == 1)
    {
      *v141 = *v10;
    }
    else
    {
      memcpy(v141, v10, v660);
      v142 = v660;
    }
    v63 = v640;
    v62 = v641;
    v129 = v633;
    ii = v629;
  }
  v143 = &v141[v142];
  if (v137)
  {
    v144 = (char *)*((_QWORD *)v137 + 1);
    v145 = *((unsigned int *)v137 + 1);
    j = __n;
    if ((*((_BYTE *)v137 + 16) & 4) != 0)
    {
      if ((_DWORD)v145)
      {
        if ((_DWORD)v145 == 1)
          *v143 = *v144;
        else
          memcpy(v143, v144, v145);
        v63 = v640;
        v62 = v641;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v571 = (unsigned __int128 *)&v143[v145];
      if (v145 < 0x10)
      {
        v572 = (unsigned __int128 *)v143;
      }
      else
      {
        v572 = (unsigned __int128 *)&v143[v145 & 0xFFFFFFF0];
        v573 = (unsigned __int128 *)v143;
        do
        {
          v574 = (unsigned __int128)vld2q_s8(v144);
          v144 += 32;
          *v573++ = v574;
        }
        while (v573 != v572);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v129 = v633;
      ii = v629;
      for (j = __n; v572 != v571; v129 = v633)
      {
        v605 = *v144;
        v144 += 2;
        *(_BYTE *)v572 = v605;
        v572 = (unsigned __int128 *)((char *)v572 + 1);
      }
    }
    v147 = *((unsigned int *)v137 + 1);
  }
  else
  {
    v147 = 0;
    j = __n;
  }
  v148 = &v143[v147];
  if ((_DWORD)j)
  {
    if ((_DWORD)j == 1)
      *v148 = *v11;
    else
      memcpy(v148, v11, j);
    v63 = v640;
    v62 = v641;
    v129 = v633;
    ii = v629;
  }
  v149 = &v148[j];
  if ((_DWORD)v643)
  {
    if ((_DWORD)v643 == 1)
      *v149 = *v15;
    else
      memcpy(v149, v15, v643);
    v63 = v640;
    v62 = v641;
    v129 = v633;
    ii = v629;
  }
  v150 = &v149[v643];
  v65 = v639;
  if (v639)
  {
    v151 = (char *)*((_QWORD *)v639 + 1);
    v152 = *((unsigned int *)v639 + 1);
    k = v647;
    if ((*((_BYTE *)v639 + 16) & 4) != 0)
    {
      if ((_DWORD)v152)
      {
        if ((_DWORD)v152 == 1)
          *v150 = *v151;
        else
          memcpy(v150, v151, v152);
        v63 = v640;
        v62 = v641;
        v65 = v639;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v575 = (unsigned __int128 *)&v150[v152];
      if (v152 < 0x10)
      {
        v576 = (unsigned __int128 *)v150;
      }
      else
      {
        v576 = (unsigned __int128 *)&v150[v152 & 0xFFFFFFF0];
        v577 = (unsigned __int128 *)v150;
        do
        {
          v578 = (unsigned __int128)vld2q_s8(v151);
          v151 += 32;
          *v577++ = v578;
        }
        while (v577 != v576);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v65 = v639;
      v129 = v633;
      ii = v629;
      for (k = v647; v576 != v575; v129 = v633)
      {
        v606 = *v151;
        v151 += 2;
        *(_BYTE *)v576 = v606;
        v576 = (unsigned __int128 *)((char *)v576 + 1);
      }
    }
    v154 = *((unsigned int *)v65 + 1);
  }
  else
  {
    v154 = 0;
    k = v647;
  }
  v155 = &v150[v154];
  v156 = v662;
  if ((_DWORD)v662)
  {
    if ((_DWORD)v662 == 1)
    {
      *v155 = *v16;
    }
    else
    {
      memcpy(v155, v16, v662);
      v156 = v662;
    }
    v63 = v640;
    v62 = v641;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v157 = &v155[v156];
  if ((_DWORD)v644)
  {
    if ((_DWORD)v644 == 1)
      *v157 = *v20;
    else
      memcpy(v157, v20, v644);
    v63 = v640;
    v62 = v641;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v158 = &v157[v644];
  v66 = v638;
  if (v638)
  {
    v159 = (char *)*((_QWORD *)v638 + 1);
    v160 = *((unsigned int *)v638 + 1);
    m = v625 - 1;
    if ((*((_BYTE *)v638 + 16) & 4) != 0)
    {
      if ((_DWORD)v160)
      {
        if ((_DWORD)v160 == 1)
          *v158 = *v159;
        else
          memcpy(v158, v159, v160);
        v63 = v640;
        v62 = v641;
        v66 = v638;
        v65 = v639;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v579 = (unsigned __int128 *)&v158[v160];
      if (v160 < 0x10)
      {
        v580 = (unsigned __int128 *)v158;
      }
      else
      {
        v580 = (unsigned __int128 *)&v158[v160 & 0xFFFFFFF0];
        v581 = (unsigned __int128 *)v158;
        do
        {
          v582 = (unsigned __int128)vld2q_s8(v159);
          v159 += 32;
          *v581++ = v582;
        }
        while (v581 != v580);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v66 = v638;
      v65 = v639;
      v129 = v633;
      ii = v629;
      k = v647;
      for (m = v625 - 1; v580 != v579; v129 = v633)
      {
        v607 = *v159;
        v159 += 2;
        *(_BYTE *)v580 = v607;
        v580 = (unsigned __int128 *)((char *)v580 + 1);
      }
    }
    v162 = *((unsigned int *)v66 + 1);
  }
  else
  {
    v162 = 0;
    m = v625 - 1;
  }
  v163 = &v158[v162];
  v164 = v664;
  if ((_DWORD)v664)
  {
    if ((_DWORD)v664 == 1)
    {
      *v163 = *v22;
    }
    else
    {
      memcpy(v163, v22, v664);
      v164 = v664;
    }
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v165 = &v163[v164];
  v167 = v624 - 1;
  v166 = v657;
  v169 = v626 - 1;
  n = v623 - 1;
  if ((_DWORD)v645)
  {
    if ((_DWORD)v645 == 1)
      *v165 = *v28;
    else
      memcpy(v165, v28, v645);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v170 = &v165[v645];
  v171 = v670;
  if (v670)
  {
    v172 = (char *)*((_QWORD *)v670 + 1);
    v173 = *((unsigned int *)v670 + 1);
    if ((*((_BYTE *)v670 + 16) & 4) != 0)
    {
      if ((_DWORD)v173)
      {
        if ((_DWORD)v173 == 1)
          *v170 = *v172;
        else
          memcpy(v170, v172, v173);
        v63 = v640;
        v62 = v641;
        v66 = v638;
        v65 = v639;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v583 = (unsigned __int128 *)&v170[v173];
      if (v173 < 0x10)
      {
        v584 = (unsigned __int128 *)v170;
      }
      else
      {
        v584 = (unsigned __int128 *)&v170[v173 & 0xFFFFFFF0];
        v585 = (unsigned __int128 *)v170;
        do
        {
          v586 = (unsigned __int128)vld2q_s8(v172);
          v172 += 32;
          *v585++ = v586;
        }
        while (v585 != v584);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v66 = v638;
      v65 = v639;
      v129 = v633;
      v167 = v624 - 1;
      v166 = v657;
      ii = v629;
      v169 = v626 - 1;
      n = v623 - 1;
      k = v647;
      for (m = v625 - 1; v584 != v583; v129 = v633)
      {
        v608 = *v172;
        v172 += 2;
        *(_BYTE *)v584 = v608;
        v584 = (unsigned __int128 *)((char *)v584 + 1);
      }
    }
    v171 = (WTF::StringImpl *)*((unsigned int *)v670 + 1);
  }
  v174 = (char *)v171 + (_QWORD)v170;
  v175 = v666;
  if ((_DWORD)v666)
  {
    if ((_DWORD)v666 == 1)
    {
      *v174 = *__src;
    }
    else
    {
      memcpy(v174, __src, v666);
      v175 = v666;
    }
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v176 = &v174[v175];
  v83 = (int8x16_t *)v635;
  v177 = v668;
  if ((_DWORD)v668)
  {
    if ((_DWORD)v668 == 1)
    {
      *v176 = *v635;
    }
    else
    {
      memcpy(v176, v635, v668);
      v177 = v668;
    }
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v178 = &v176[v177];
  v179 = v669;
  if (v669)
  {
    v83 = (int8x16_t *)*((_QWORD *)v669 + 1);
    v180 = *((unsigned int *)v669 + 1);
    if ((*((_BYTE *)v669 + 16) & 4) != 0)
    {
      if ((_DWORD)v180)
      {
        if ((_DWORD)v180 == 1)
          *v178 = v83->i8[0];
        else
          memcpy(v178, v83, v180);
        v63 = v640;
        v62 = v641;
        v66 = v638;
        v65 = v639;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v587 = (unsigned __int128 *)&v178[v180];
      if (v180 < 0x10)
      {
        v588 = (unsigned __int128 *)v178;
      }
      else
      {
        v588 = (unsigned __int128 *)&v178[v180 & 0xFFFFFFF0];
        v589 = (unsigned __int128 *)v178;
        do
        {
          v590 = (unsigned __int128)vld2q_s8(v83->i8);
          v83 += 2;
          *v589++ = v590;
        }
        while (v589 != v588);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v66 = v638;
      v65 = v639;
      v129 = v633;
      v167 = v624 - 1;
      v166 = v657;
      ii = v629;
      v169 = v626 - 1;
      n = v623 - 1;
      k = v647;
      for (m = v625 - 1; v588 != v587; v129 = v633)
      {
        v609 = v83->i8[0];
        v83 = (int8x16_t *)((char *)v83 + 2);
        *(_BYTE *)v588 = v609;
        v588 = (unsigned __int128 *)((char *)v588 + 1);
      }
    }
    v179 = (WTF::StringImpl *)*((unsigned int *)v669 + 1);
  }
  v181 = (char *)v179 + (_QWORD)v178;
  if ((_DWORD)k)
  {
    if ((_DWORD)k == 1)
      *v181 = *v615;
    else
      memcpy(v181, v615, k);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v182 = &v181[k];
  if ((_DWORD)m)
  {
    if ((_DWORD)m == 1)
      *v182 = *v616;
    else
      memcpy(v182, v616, m);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v129 = v633;
    ii = v629;
  }
  v183 = &v182[m];
  v123 = v634;
  if (v634)
  {
    v83 = (int8x16_t *)*((_QWORD *)v634 + 1);
    v184 = *((unsigned int *)v634 + 1);
    if ((*((_BYTE *)v634 + 16) & 4) != 0)
    {
      if ((_DWORD)v184)
      {
        if ((_DWORD)v184 == 1)
          *v183 = v83->i8[0];
        else
          memcpy(v183, v83, v184);
        v63 = v640;
        v62 = v641;
        v66 = v638;
        v65 = v639;
        v123 = v634;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v591 = (unsigned __int128 *)&v183[v184];
      if (v184 < 0x10)
      {
        v592 = (unsigned __int128 *)v183;
      }
      else
      {
        v592 = (unsigned __int128 *)&v183[v184 & 0xFFFFFFF0];
        v593 = (unsigned __int128 *)v183;
        do
        {
          v594 = (unsigned __int128)vld2q_s8(v83->i8);
          v83 += 2;
          *v593++ = v594;
        }
        while (v593 != v592);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v66 = v638;
      v65 = v639;
      v129 = v633;
      v167 = v624 - 1;
      v166 = v657;
      ii = v629;
      v169 = v626 - 1;
      for (n = v623 - 1; v592 != v591; v129 = v633)
      {
        v610 = v83->i8[0];
        v83 = (int8x16_t *)((char *)v83 + 2);
        *(_BYTE *)v592 = v610;
        v592 = (unsigned __int128 *)((char *)v592 + 1);
      }
    }
    v185 = *((unsigned int *)v123 + 1);
  }
  else
  {
    v185 = 0;
  }
  v186 = &v183[v185];
  if ((_DWORD)v169)
  {
    v187 = v123;
    if ((_DWORD)v169 == 1)
      *v186 = *v617;
    else
      memcpy(v186, v617, v169);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v123 = v187;
    v129 = v633;
    ii = v629;
  }
  v188 = &v186[v169];
  if ((_DWORD)n)
  {
    v189 = v123;
    if ((_DWORD)n == 1)
      *v188 = *v618;
    else
      memcpy(v188, v618, n);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v123 = v189;
    v129 = v633;
    ii = v629;
  }
  v190 = &v188[n];
  if (v68)
  {
    v83 = (int8x16_t *)*((_QWORD *)v68 + 1);
    v191 = *((unsigned int *)v68 + 1);
    if ((*((_BYTE *)v68 + 16) & 4) != 0)
    {
      if ((_DWORD)v191)
      {
        v192 = v123;
        if ((_DWORD)v191 == 1)
          *v190 = v83->i8[0];
        else
          memcpy(v190, v83, v191);
        v63 = v640;
        v62 = v641;
        v66 = v638;
        v65 = v639;
        v123 = v192;
        v129 = v633;
        ii = v629;
      }
    }
    else
    {
      v595 = (unsigned __int128 *)&v190[v191];
      if (v191 < 0x10)
      {
        v596 = (unsigned __int128 *)v190;
      }
      else
      {
        v596 = (unsigned __int128 *)&v190[v191 & 0xFFFFFFF0];
        v597 = (unsigned __int128 *)v190;
        do
        {
          v598 = (unsigned __int128)vld2q_s8(v83->i8);
          v83 += 2;
          *v597++ = v598;
        }
        while (v597 != v596);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v66 = v638;
      v65 = v639;
      v129 = v633;
      v167 = v624 - 1;
      v166 = v657;
      for (ii = v629; v596 != v595; v129 = v633)
      {
        v611 = v83->i8[0];
        v83 = (int8x16_t *)((char *)v83 + 2);
        *(_BYTE *)v596 = v611;
        v596 = (unsigned __int128 *)((char *)v596 + 1);
      }
    }
    v193 = *((unsigned int *)v68 + 1);
  }
  else
  {
    v193 = 0;
  }
  v194 = &v190[v193];
  if ((_DWORD)v167)
  {
    v195 = v123;
    if ((_DWORD)v167 == 1)
      *v194 = *v619;
    else
      memcpy(v194, v619, v167);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v123 = v195;
    v129 = v633;
    ii = v629;
  }
  v196 = &v194[v167];
  if ((_DWORD)v166)
  {
    v197 = v123;
    if ((_DWORD)v166 == 1)
      *v196 = *v129;
    else
      memcpy(v196, v129, v166);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v123 = v197;
    ii = v629;
  }
  v198 = &v196[v166];
  v57 = v636;
  if (v636)
  {
    v83 = (int8x16_t *)*((_QWORD *)v636 + 1);
    v199 = *((unsigned int *)v636 + 1);
    if ((*((_BYTE *)v636 + 16) & 4) != 0)
    {
      if ((_DWORD)v199)
      {
        v200 = v123;
        if ((_DWORD)v199 == 1)
          *v198 = v83->i8[0];
        else
          memcpy(v198, v83, v199);
        v63 = v640;
        v62 = v641;
        v66 = v638;
        v65 = v639;
        v57 = v636;
        v123 = v200;
        ii = v629;
      }
    }
    else
    {
      v599 = (unsigned __int128 *)&v198[v199];
      if (v199 < 0x10)
      {
        v600 = (unsigned __int128 *)v198;
      }
      else
      {
        v600 = (unsigned __int128 *)&v198[v199 & 0xFFFFFFF0];
        v601 = (unsigned __int128 *)v198;
        do
        {
          v602 = (unsigned __int128)vld2q_s8(v83->i8);
          v83 += 2;
          *v601++ = v602;
        }
        while (v601 != v600);
      }
      v63 = v640;
      v62 = v641;
      v137 = v637;
      v66 = v638;
      v65 = v639;
      v57 = v636;
      for (ii = v629; v600 != v599; v600 = (unsigned __int128 *)((char *)v600 + 1))
      {
        v612 = v83->i8[0];
        v83 = (int8x16_t *)((char *)v83 + 2);
        *(_BYTE *)v600 = v612;
      }
    }
    v201 = *((unsigned int *)v57 + 1);
  }
  else
  {
    v201 = 0;
  }
  v202 = &v198[v201];
  if ((_DWORD)v632)
  {
    v203 = v123;
    if ((_DWORD)v632 == 1)
      *v202 = *v620;
    else
      memcpy(v202, v620, v632);
    v63 = v640;
    v62 = v641;
    v66 = v638;
    v65 = v639;
    v57 = v636;
    v123 = v203;
    ii = v629;
  }
  *(_WORD *)&v202[v632] = 32032;
  v204 = v621;
  v118 = v669;
  v117 = v670;
LABEL_653:
  *v204 = ii;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      v561 = v123;
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v83);
      v123 = v561;
      v66 = v638;
      v65 = v639;
      v63 = v640;
      v62 = v641;
      v118 = v669;
      v117 = v670;
      if (!v68)
        goto LABEL_659;
      goto LABEL_657;
    }
    *(_DWORD *)v57 -= 2;
  }
  if (!v68)
    goto LABEL_659;
LABEL_657:
  if (*(_DWORD *)v68 == 2)
  {
    v562 = v123;
    WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v83);
    v123 = v562;
    v66 = v638;
    v65 = v639;
    v63 = v640;
    v62 = v641;
    v118 = v669;
    v117 = v670;
  }
  else
  {
    *(_DWORD *)v68 -= 2;
  }
LABEL_659:
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v83);
      v66 = v638;
      v65 = v639;
      v63 = v640;
      v62 = v641;
      v118 = v669;
      v117 = v670;
      if (!v669)
        goto LABEL_665;
      goto LABEL_663;
    }
    *(_DWORD *)v123 -= 2;
  }
  if (!v118)
    goto LABEL_665;
LABEL_663:
  if (*(_DWORD *)v118 == 2)
  {
    WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v83);
    v66 = v638;
    v65 = v639;
    v63 = v640;
    v62 = v641;
    v117 = v670;
  }
  else
  {
    *(_DWORD *)v118 -= 2;
  }
LABEL_665:
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v83);
      v66 = v638;
      v65 = v639;
      v63 = v640;
      v62 = v641;
      if (!v638)
        goto LABEL_671;
      goto LABEL_669;
    }
    *(_DWORD *)v117 -= 2;
  }
  if (!v66)
    goto LABEL_671;
LABEL_669:
  if (*(_DWORD *)v66 == 2)
  {
    WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v83);
    v65 = v639;
    v63 = v640;
    v62 = v641;
  }
  else
  {
    *(_DWORD *)v66 -= 2;
  }
LABEL_671:
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v83);
      v63 = v640;
      v62 = v641;
      if (!v137)
        goto LABEL_677;
      goto LABEL_675;
    }
    *(_DWORD *)v65 -= 2;
  }
  if (!v137)
    goto LABEL_677;
LABEL_675:
  if (*(_DWORD *)v137 == 2)
  {
    WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v83);
    v63 = v640;
    v62 = v641;
  }
  else
  {
    *(_DWORD *)v137 -= 2;
  }
LABEL_677:
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v83);
      v62 = v641;
      if (!v641)
        goto LABEL_683;
      goto LABEL_681;
    }
    *(_DWORD *)v63 -= 2;
  }
  if (!v62)
    goto LABEL_683;
LABEL_681:
  if (*(_DWORD *)v62 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v62, (WTF::StringImpl *)v83);
  else
    *(_DWORD *)v62 -= 2;
LABEL_683:
  v554 = v671;
  v671 = 0;
  if (v554)
  {
    if (*(_DWORD *)v554 == 2)
      WTF::StringImpl::destroy(v554, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v554 -= 2;
  }
  v555 = v672;
  v672 = 0;
  if (v555)
  {
    if (*(_DWORD *)v555 == 2)
      WTF::StringImpl::destroy(v555, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v555 -= 2;
  }
  v556 = v673;
  v673 = 0;
  if (v556)
  {
    if (*(_DWORD *)v556 == 2)
      WTF::StringImpl::destroy(v556, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v556 -= 2;
  }
  if (v674)
  {
    if (*(_DWORD *)v674 == 2)
      WTF::StringImpl::destroy(v674, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v674 -= 2;
  }
  if (v675)
  {
    if (*(_DWORD *)v675 == 2)
      WTF::StringImpl::destroy(v675, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v675 -= 2;
  }
  v557 = v676;
  v676 = 0;
  if (v557)
  {
    if (*(_DWORD *)v557 == 2)
      WTF::StringImpl::destroy(v557, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v557 -= 2;
  }
  v558 = v677;
  v677 = 0;
  if (v558)
  {
    if (*(_DWORD *)v558 == 2)
      WTF::StringImpl::destroy(v558, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v558 -= 2;
  }
  v559 = v678;
  v678 = 0;
  if (v559)
  {
    if (*(_DWORD *)v559 == 2)
      WTF::StringImpl::destroy(v559, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)v559 -= 2;
  }
  result = v679;
  v679 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v83);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::CSSCounterStyleRule::reattach(WebCore::CSSCounterStyleRule *this, WebCore::StyleRuleBase *a2)
{
  _DWORD *result;

  if ((*((_BYTE *)a2 + 4) & 0x1F) != 0xB)
  {
    __break(0xC471u);
    JUMPOUT(0x195796EACLL);
  }
  ++*(_DWORD *)a2;
  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      --*result;
  }
  return result;
}

void WebCore::CSSCounterStyleRule::setName(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BYTE v9[32];
  WTF::StringImpl *v10;
  _QWORD v11[2];
  _BYTE v12[48];
  uint64_t v13;
  unsigned int v14;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v12, a2, 0, 0);
  v11[0] = v13;
  v11[1] = v13 + 24 * v14;
  WebCore::CSSPropertyParserHelpers::consumeCounterStyleNameInPrelude((uint64_t)v11, 0, &v10);
  if (!v10)
    goto LABEL_12;
  WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v9, this);
  v5 = *((_QWORD *)this + 3);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    v7 = *(WTF::StringImpl **)(v5 + 16);
    if (v7 == v6)
    {
      if (*(_DWORD *)v6 != 2)
      {
        *(_DWORD *)v6 -= 2;
        goto LABEL_9;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 16) = v6;
      if (!v7)
        goto LABEL_9;
      if (*(_DWORD *)v7 != 2)
      {
        *(_DWORD *)v7 -= 2;
        goto LABEL_9;
      }
      v6 = v7;
    }
    WTF::StringImpl::destroy(v6, v4);
  }
LABEL_9:
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v9, v4);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_12:
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v12, v3);
}

void WebCore::CSSCounterStyleRule::setSystem(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  char *v23;
  _BYTE v24[48];
  WTF::StringImpl *v25;
  unsigned int v26;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v24, a2, 0, 0);
  v22 = v25;
  v23 = (char *)v25 + 24 * v26;
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  if ((WebCore::isExposed(246, (unsigned int *)((char *)v6 + 54)) & 1) != 0 || (WebCore::isInternal(246) & 1) != 0)
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleSystem((__int128 **)&v22, (WebCore::CSSParserTokenRange *)v6, &v21);
  else
    v21 = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v24, v7);
  v8 = (uint64_t)v21;
  if (v21)
  {
    v9 = WebCore::toCounterStyleSystemEnum((uint64_t)v21);
    v20 = (_DWORD *)v8;
    v21 = 0;
    WebCore::extractSystemDataFromCSSValue((uint64_t *)&v20, v9, (uint64_t)&v22);
    v11 = v20;
    v20 = 0;
    if (v11)
    {
      if (*v11 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v10);
      else
        *v11 -= 2;
    }
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v24, this);
    v13 = *((_QWORD *)this + 3);
    v14 = v22;
    v22 = 0;
    v15 = (int)v23;
    v16 = *(WTF::StringImpl **)(v13 + 184);
    if (v16 != v14 || *(_DWORD *)(v13 + 192) != (_DWORD)v23)
    {
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v13 + 184) = v14;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
      *(_DWORD *)(v13 + 192) = v15;
    }
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v24, v12);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v21;
    v21 = 0;
    if (v19)
    {
      if (*v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v17);
      else
        *v19 -= 2;
    }
  }
}

void WebCore::CSSCounterStyleRule::setNegative(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned __int8 v17[8];
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  __int128 *v21[2];
  _BYTE v22[48];
  __int128 *v23;
  unsigned int v24;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v22, a2, 0, 0);
  v21[0] = v23;
  v21[1] = (__int128 *)((char *)v23 + 24 * v24);
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  if ((WebCore::isExposed(175, (unsigned int *)((char *)v6 + 54)) & 1) != 0 || (WebCore::isInternal(175) & 1) != 0)
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleNegative(v21, (WebCore::CSSParserTokenRange *)v6, &v20);
  else
    v20 = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v22, v7);
  if (v20)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v22, this);
    v8 = *((_QWORD *)this + 3) + 16;
    v9 = (_DWORD *)v20;
    v16 = v20;
    v20 = 0;
    WebCore::negativeSymbolsFromCSSValue(&v16, (uint64_t)v17);
    WebCore::CSSCounterStyleDescriptors::setNegative(v8, v17, v10);
    v12 = v19;
    v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (!v9)
          goto LABEL_21;
        goto LABEL_18;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v9)
      goto LABEL_21;
LABEL_18:
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v11);
    else
      *v9 -= 2;
LABEL_21:
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v22, v11);
    v15 = (_DWORD *)v20;
    v20 = 0;
    if (v15)
    {
      if (*v15 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v14);
      else
        *v15 -= 2;
    }
  }
}

void WebCore::CSSCounterStyleRule::setPrefix(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  _BYTE v19[8];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  _BYTE v23[48];
  uint64_t v24;
  unsigned int v25;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v23, a2, 0, 0);
  v22[0] = v24;
  v22[1] = v24 + 24 * v25;
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  WebCore::CSSPropertyParsing::parseCounterStyleDescriptor((uint64_t)v22, 204, (uint64_t)v6, &v21);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v23, v7);
  if (v21)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v23, this);
    v8 = *((_QWORD *)this + 3);
    v9 = (uint64_t *)v21;
    v21 = 0;
    v18 = v9;
    WebCore::symbolFromCSSValue(&v18, (uint64_t)v19);
    v12 = v19[0];
    if (*(unsigned __int8 *)(v8 + 64) == v19[0])
    {
      if ((WTF::equal(*(WTF **)(v8 + 72), v20, v11) & 1) != 0)
        goto LABEL_16;
      v12 = v19[0];
    }
    *(_BYTE *)(v8 + 64) = v12;
    v13 = v20;
    v20 = 0;
    v14 = *(WTF::StringImpl **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_WORD *)(v8 + 196) |= 4u;
LABEL_16:
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v10);
        if (!v9)
          goto LABEL_23;
        goto LABEL_20;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (!v9)
      goto LABEL_23;
LABEL_20:
    if (*(_DWORD *)v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v10);
    else
      *(_DWORD *)v9 -= 2;
LABEL_23:
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v23, v10);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void WebCore::CSSCounterStyleRule::setSuffix(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  _BYTE v19[8];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  _BYTE v23[48];
  uint64_t v24;
  unsigned int v25;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v23, a2, 0, 0);
  v22[0] = v24;
  v22[1] = v24 + 24 * v25;
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  WebCore::CSSPropertyParsing::parseCounterStyleDescriptor((uint64_t)v22, 243, (uint64_t)v6, &v21);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v23, v7);
  if (v21)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v23, this);
    v8 = *((_QWORD *)this + 3);
    v9 = (uint64_t *)v21;
    v21 = 0;
    v18 = v9;
    WebCore::symbolFromCSSValue(&v18, (uint64_t)v19);
    v12 = v19[0];
    if (*(unsigned __int8 *)(v8 + 80) == v19[0])
    {
      if ((WTF::equal(*(WTF **)(v8 + 88), v20, v11) & 1) != 0)
        goto LABEL_16;
      v12 = v19[0];
    }
    *(_BYTE *)(v8 + 80) = v12;
    v13 = v20;
    v20 = 0;
    v14 = *(WTF::StringImpl **)(v8 + 88);
    *(_QWORD *)(v8 + 88) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_WORD *)(v8 + 196) |= 8u;
LABEL_16:
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v10);
        if (!v9)
          goto LABEL_23;
        goto LABEL_20;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (!v9)
      goto LABEL_23;
LABEL_20:
    if (*(_DWORD *)v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v10);
    else
      *(_DWORD *)v9 -= 2;
LABEL_23:
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v23, v10);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void WebCore::CSSCounterStyleRule::setRange(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  WTF *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *__s2;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD v23[2];
  _BYTE v24[48];
  uint64_t v25;
  unsigned int v26;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v24, a2, 0, 0);
  v23[0] = v25;
  v23[1] = v25 + 24 * v26;
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  WebCore::CSSPropertyParsing::parseCounterStyleDescriptor((uint64_t)v23, 208, (uint64_t)v6, &v22);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v24, v7);
  if (v22)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v24, this);
    v8 = *((_QWORD *)this + 3);
    v19 = v22;
    v22 = 0;
    WebCore::rangeFromCSSValue((uint64_t *)&v19, v9, (uint64_t)&__s2);
    v11 = *(unsigned int *)(v8 + 108);
    v12 = HIDWORD(v21);
    if ((_DWORD)v11 == HIDWORD(v21))
    {
      v13 = *(void **)(v8 + 96);
      v14 = (WTF *)__s2;
      if (!memcmp(v13, __s2, 8 * v11))
      {
        if (v14)
        {
          __s2 = 0;
          LODWORD(v21) = 0;
          WTF::fastFree(v14, v10);
        }
LABEL_17:
        v16 = v19;
        v19 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v16 -= 2;
        }
        WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v24, (WTF::StringImpl *)v10);
        v18 = v22;
        v22 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
        return;
      }
    }
    else
    {
      v13 = *(void **)(v8 + 96);
    }
    if (v13)
    {
      *(_QWORD *)(v8 + 96) = 0;
      *(_DWORD *)(v8 + 104) = 0;
      WTF::fastFree((WTF *)v13, v10);
      v12 = HIDWORD(v21);
    }
    *(_QWORD *)(v8 + 96) = __s2;
    v15 = v21;
    __s2 = 0;
    v21 = 0;
    *(_DWORD *)(v8 + 104) = v15;
    *(_DWORD *)(v8 + 108) = v12;
    *(_WORD *)(v8 + 196) |= 0x10u;
    goto LABEL_17;
  }
}

void WebCore::CSSCounterStyleRule::setPad(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  unsigned __int8 v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  _QWORD v22[2];
  _BYTE v23[48];
  uint64_t v24;
  unsigned int v25;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v23, a2, 0, 0);
  v22[0] = v24;
  v22[1] = v24 + 24 * v25;
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  if ((WebCore::isExposed(195, (unsigned int *)((char *)v6 + 54)) & 1) != 0 || (WebCore::isInternal(195) & 1) != 0)
    WebCore::CSSPropertyParserHelpers::consumeCounterStylePad((uint64_t)v22, (WebCore::CSSParserTokenRange *)v6, &v21);
  else
    v21 = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v23, v7);
  if (v21)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v23, this);
    v8 = *((_QWORD *)this + 3);
    v17 = v21;
    v21 = 0;
    WebCore::padFromCSSValue((uint64_t *)&v17, (uint64_t)&v18);
    v11 = v18;
    if (*(_DWORD *)(v8 + 112) == v18)
    {
      v11 = *(_DWORD *)(v8 + 112);
      if (*(unsigned __int8 *)(v8 + 120) == v19)
      {
        if ((WTF::equal(*(WTF **)(v8 + 128), v20, v10) & 1) != 0)
        {
LABEL_19:
          v14 = v20;
          v20 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
          if (v17)
          {
            if (*v17 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
            else
              *v17 -= 2;
          }
          WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v23, v9);
          v16 = v21;
          v21 = 0;
          if (v16)
          {
            if (*v16 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v15);
            else
              *v16 -= 2;
          }
          return;
        }
        v11 = v18;
      }
    }
    *(_DWORD *)(v8 + 112) = v11;
    *(_BYTE *)(v8 + 120) = v19;
    v12 = v20;
    v20 = 0;
    v13 = *(WTF::StringImpl **)(v8 + 128);
    *(_QWORD *)(v8 + 128) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    *(_WORD *)(v8 + 196) |= 0x20u;
    goto LABEL_19;
  }
}

void WebCore::CSSCounterStyleRule::setFallback(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  __int128 *v17[2];
  _BYTE v18[48];
  __int128 *v19;
  unsigned int v20;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v18, a2, 0, 0);
  v17[0] = v19;
  v17[1] = (__int128 *)((char *)v19 + 24 * v20);
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  if ((WebCore::isExposed(112, (unsigned int *)((char *)v6 + 54)) & 1) != 0 || (WebCore::isInternal(112) & 1) != 0)
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleName(v17, (uint64_t *)&v16);
  else
    v16 = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v18, v7);
  if (v16)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v18, this);
    v8 = *((_QWORD *)this + 3);
    v14 = v16;
    v16 = 0;
    WebCore::fallbackNameFromCSSValue(&v14, (WTF::StringImpl *)&v15);
    v10 = *(WTF::StringImpl **)(v8 + 136);
    v11 = v15;
    if (v10 != v15)
    {
      v15 = 0;
      *(_QWORD *)(v8 + 136) = v11;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v9);
          v10 = v15;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
          v10 = 0;
        }
      }
      *(_WORD *)(v8 + 196) |= 0x40u;
    }
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v9);
      else
        *v14 -= 2;
    }
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v18, v9);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v12);
      else
        *v13 -= 2;
    }
  }
}

void WebCore::CSSCounterStyleRule::setSymbols(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  __int128 *v24[2];
  _BYTE v25[48];
  __int128 *v26;
  unsigned int v27;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v25, a2, 0, 0);
  v24[0] = v26;
  v24[1] = (__int128 *)((char *)v26 + 24 * v27);
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  if ((WebCore::isExposed(244, (unsigned int *)((char *)v6 + 54)) & 1) != 0 || (WebCore::isInternal(244) & 1) != 0)
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleSymbols(v24, (WebCore::CSSParserTokenRange *)v6, &v23);
  else
    v23 = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v25, v7);
  if (v23)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v25, this);
    v8 = *((_QWORD *)this + 3) + 16;
    v19 = v23;
    v23 = 0;
    WebCore::symbolsFromCSSValue((WTF::StringImpl *)&v19, v9, (unsigned int *)&v20);
    WebCore::CSSCounterStyleDescriptors::setSymbols(v8, (unsigned __int8 **)&v20, v10);
    v12 = v20;
    if (v22)
    {
      v16 = 16 * v22;
      v17 = (WTF::StringImpl **)((char *)v20 + 8);
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v11);
          else
            *(_DWORD *)v18 -= 2;
        }
        v17 += 2;
        v16 -= 16;
      }
      while (v16);
      v12 = v20;
      if (!v20)
        goto LABEL_13;
    }
    else if (!v20)
    {
LABEL_13:
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v25, v11);
      v15 = v23;
      v23 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      return;
    }
    v20 = 0;
    v21 = 0;
    WTF::fastFree(v12, v11);
    goto LABEL_13;
  }
}

void WebCore::CSSCounterStyleRule::setAdditiveSymbols(WebCore::CSSCounterStyleRule *this, unsigned int **a2)
{
  WebCore::CSSTokenizer *v3;
  WebCore::CSSCounterStyleRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[2];
  _BYTE v25[48];
  uint64_t v26;
  unsigned int v27;

  v3 = WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v25, a2, 0, 0);
  v24[0] = v26;
  v24[1] = v26 + 24 * v27;
  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSCounterStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(v3);
LABEL_8:
  if ((WebCore::isExposed(40, (unsigned int *)((char *)v6 + 54)) & 1) != 0 || (WebCore::isInternal(40) & 1) != 0)
    WebCore::CSSPropertyParserHelpers::consumeCounterStyleAdditiveSymbols((WebCore::CSSPropertyParserHelpers *)v24, (WebCore::CSSParserTokenRange *)v6, &v23);
  else
    v23 = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v25, v7);
  if (v23)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v25, this);
    v8 = *((_QWORD *)this + 3) + 16;
    v19 = (_DWORD *)v23;
    v23 = 0;
    WebCore::additiveSymbolsFromCSSValue((uint64_t *)&v19, v9, (unsigned int *)&v20);
    WebCore::CSSCounterStyleDescriptors::setAdditiveSymbols(v8, (unsigned __int8 **)&v20, v10);
    v12 = v20;
    if (v22)
    {
      v16 = 24 * v22;
      v17 = (WTF::StringImpl **)((char *)v20 + 8);
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v11);
          else
            *(_DWORD *)v18 -= 2;
        }
        v17 += 3;
        v16 -= 24;
      }
      while (v16);
      v12 = v20;
      if (!v20)
        goto LABEL_13;
    }
    else if (!v20)
    {
LABEL_13:
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
        else
          *v13 -= 2;
      }
      WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v25, v11);
      v15 = (_DWORD *)v23;
      v23 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v14);
        else
          *v15 -= 2;
      }
      return;
    }
    v20 = 0;
    v21 = 0;
    WTF::fastFree(v12, v11);
    goto LABEL_13;
  }
}

uint64_t WebCore::CSSCounterValue::customCSSText@<X0>(uint64_t this@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _WORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  WTF::StringBuilder *v30;
  WTF::StringImpl *v31;
  _BYTE *v32;
  size_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  int8x16_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  _WORD *v50;
  char *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  int8x16_t v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  __int16 v66;
  unsigned __int128 *v67;
  unsigned __int128 *v68;
  unsigned __int128 v69;
  unsigned __int128 *v70;
  unsigned __int128 *v71;
  unsigned __int128 v72;
  char v73;
  char v74;
  _DWORD *v75;
  WTF::StringImpl *v76;
  int v77;
  char v78;
  int8x16_t *v79;
  int v80;
  uint64_t v81;
  int8x16_t *v82;
  int v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;

  v3 = (_QWORD *)this;
  v5 = *(_QWORD *)(this + 24);
  v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  v7 = v6 & 0x3F87F;
  if (v5 && v7 == 80)
  {
    if (*(_WORD *)(v5 + 8) != 275)
      goto LABEL_16;
LABEL_12:
    v11 = (int8x16_t *)&str_66;
    v12 = MEMORY[0x1E0CBEF70];
    v13 = 1;
LABEL_24:
    *(_DWORD *)v12 += 2;
    goto LABEL_25;
  }
  if (v7 == 63)
  {
    if ((v6 & 0x3F800) != 0)
    {
      __break(0xC471u);
      goto LABEL_159;
    }
    v8 = (*(unsigned __int16 *)(v5 + 4) & 0x7Fu) - 20;
    if (v8 <= 0x3C)
    {
      if (((1 << ((*(_WORD *)(v5 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
      {
        v9 = *(WTF::StringImpl **)(v5 + 8);
        if (v9)
          goto LABEL_10;
      }
      else
      {
        if (v8 == 60)
        {
          v39 = WebCore::nameString(*(unsigned __int16 *)(v5 + 8));
        }
        else
        {
          if (v8 != 59)
            goto LABEL_140;
          v39 = WebCore::nameString(*(unsigned __int16 *)(v5 + 8));
        }
        v9 = (WTF::StringImpl *)*v39;
        if (*v39)
        {
LABEL_10:
          *(_DWORD *)v9 += 2;
          this = MEMORY[0x19AEA53F4](v9, "decimal", 7);
          v10 = this;
          if (*(_DWORD *)v9 == 2)
          {
            this = WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
            if ((v10 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            *(_DWORD *)v9 -= 2;
            if ((this & 1) != 0)
              goto LABEL_12;
          }
          goto LABEL_14;
        }
      }
    }
LABEL_140:
    this = MEMORY[0x19AEA53F4](0, "decimal", 7);
    if ((this & 1) != 0)
      goto LABEL_12;
LABEL_14:
    v5 = v3[3];
    if (!v5)
    {
LABEL_20:
      v12 = *MEMORY[0x1E0CBF738];
      goto LABEL_22;
    }
    v6 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  }
LABEL_16:
  if ((v6 & 0x3F800) != 0)
    goto LABEL_20;
  if ((v6 & 0x7F) == 0x3F)
  {
    v11 = (int8x16_t *)", ";
    v12 = *(_QWORD *)(v5 + 8);
    goto LABEL_23;
  }
  if ((v6 & 0x7F) != 0x50)
    goto LABEL_20;
  this = (uint64_t)WebCore::nameString(*(unsigned __int16 *)(v5 + 8));
  v12 = *(_QWORD *)this;
LABEL_22:
  v11 = (int8x16_t *)", ";
LABEL_23:
  v13 = 3;
  if (v12)
    goto LABEL_24;
LABEL_25:
  v14 = v3[2];
  if (!v14 || !*(_DWORD *)(v14 + 4))
  {
    v15 = v3[1];
    if (v15)
      *(_DWORD *)v15 += 2;
    if (v12)
      *(_DWORD *)v12 += 2;
    if (v15)
    {
      v16 = *(_DWORD *)(v15 + 4);
      if (v12)
        goto LABEL_32;
    }
    else
    {
      v16 = 0;
      if (v12)
      {
LABEL_32:
        v17 = *(_DWORD *)(v12 + 4);
        if (v17 < 0)
          goto LABEL_158;
        goto LABEL_33;
      }
    }
    v17 = 0;
LABEL_33:
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (!v18)
    {
      v20 = v13 - 1;
      v18 = __OFADD__(v13 - 1, v19);
      v21 = v13 - 1 + v19;
      v22 = v18;
      if ((v16 & 0x80000000) == 0 && !v22)
      {
        v18 = __OFADD__(v16, v21);
        v23 = v16 + v21;
        if (!v18)
        {
          v24 = (v23 + 8);
          if (!__OFADD__(v23, 8))
          {
            if ((!v15 || (*(_BYTE *)(v15 + 16) & 4) != 0) && (!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0))
            {
              if (v23 != -8)
              {
                if ((v24 & 0x80000000) == 0)
                {
                  this = WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
                  v25 = v75;
                  if (v75)
                  {
                    *v75 = 2;
                    v25[1] = v24;
                    *(_QWORD *)(v25 + 5) = 0x287265746E756F63;
                    *((_QWORD *)v25 + 1) = v25 + 5;
                    v25[4] = 4;
                    v32 = v25 + 7;
                    if (v15)
                    {
                      a2 = *(_OWORD **)(v15 + 8);
                      v33 = *(unsigned int *)(v15 + 4);
                      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v33)
                        {
                          if ((_DWORD)v33 == 1)
                            *v32 = *(_BYTE *)a2;
                          else
                            this = (uint64_t)memcpy(v25 + 7, a2, v33);
                        }
                      }
                      else
                      {
                        if (v33 < 0x10)
                        {
                          v67 = (unsigned __int128 *)(v25 + 7);
                        }
                        else
                        {
                          v67 = (unsigned __int128 *)&v32[v33 & 0xFFFFFFF0];
                          v68 = (unsigned __int128 *)(v25 + 7);
                          do
                          {
                            v69 = (unsigned __int128)vld2q_s8((const char *)a2);
                            a2 += 2;
                            *v68++ = v69;
                          }
                          while (v68 != v67);
                        }
                        while (v67 != (unsigned __int128 *)&v32[v33])
                        {
                          v73 = *(_BYTE *)a2;
                          a2 = (_OWORD *)((char *)a2 + 2);
                          *(_BYTE *)v67 = v73;
                          v67 = (unsigned __int128 *)((char *)v67 + 1);
                        }
                      }
                      v34 = *(unsigned int *)(v15 + 4);
                    }
                    else
                    {
                      v34 = 0;
                    }
                    v35 = &v32[v34];
                    if ((_DWORD)v13 != 1)
                      this = (uint64_t)memcpy(v35, v11, v13 - 1);
                    v36 = &v35[v20];
                    if (v12)
                    {
                      a2 = *(_OWORD **)(v12 + 8);
                      v37 = *(unsigned int *)(v12 + 4);
                      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v37)
                        {
                          if ((_DWORD)v37 == 1)
                            *v36 = *(_BYTE *)a2;
                          else
                            this = (uint64_t)memcpy(&v35[v20], a2, v37);
                        }
                      }
                      else
                      {
                        if (v37 < 0x10)
                        {
                          v70 = (unsigned __int128 *)&v35[v20];
                        }
                        else
                        {
                          v70 = (unsigned __int128 *)&v36[v37 & 0xFFFFFFF0];
                          v71 = (unsigned __int128 *)&v35[v20];
                          do
                          {
                            v72 = (unsigned __int128)vld2q_s8((const char *)a2);
                            a2 += 2;
                            *v71++ = v72;
                          }
                          while (v71 != v70);
                        }
                        while (v70 != (unsigned __int128 *)&v36[v37])
                        {
                          v74 = *(_BYTE *)a2;
                          a2 = (_OWORD *)((char *)a2 + 2);
                          *(_BYTE *)v70 = v74;
                          v70 = (unsigned __int128 *)((char *)v70 + 1);
                        }
                      }
                      v38 = *(unsigned int *)(v12 + 4);
                    }
                    else
                    {
                      v38 = 0;
                    }
                    v36[v38] = 41;
LABEL_119:
                    *a3 = v25;
                    if (v12)
                    {
                      if (*(_DWORD *)v12 == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)v12, (WTF::StringImpl *)a2);
                        if (!v15)
                          goto LABEL_125;
LABEL_123:
                        if (*(_DWORD *)v15 != 2)
                        {
                          *(_DWORD *)v15 -= 2;
                          goto LABEL_125;
                        }
                        this = v15;
                        goto LABEL_133;
                      }
                      *(_DWORD *)v12 -= 2;
                    }
                    if (!v15)
                      goto LABEL_125;
                    goto LABEL_123;
                  }
                }
                goto LABEL_158;
              }
            }
            else if (v23 != -8)
            {
              if (v24 <= 0x7FFFFFEF)
              {
                this = WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
                v25 = v75;
                if (v75)
                {
                  *v75 = 2;
                  v25[1] = v24;
                  *(_OWORD *)(v25 + 5) = xmmword_1969ED4A0;
                  *((_QWORD *)v25 + 1) = v25 + 5;
                  v25[4] = 0;
                  v26 = v25 + 9;
                  if (v15)
                  {
                    a2 = *(_OWORD **)(v15 + 8);
                    v27 = *(unsigned int *)(v15 + 4);
                    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
                    {
                      v28 = (char *)&v26[v27];
                      if (v27 >= 0x40)
                      {
                        v29 = (char *)&v26[v27 & 0xFFFFFFC0];
                        v41 = 0uLL;
                        v42 = (char *)(v25 + 9);
                        do
                        {
                          v84.val[0] = (int8x16_t)*a2;
                          v43 = *((int8x16_t *)a2 + 1);
                          v86.val[0] = (int8x16_t)a2[2];
                          v44 = a2[3];
                          a2 += 4;
                          v45 = v44;
                          v86.val[1] = 0uLL;
                          v88.val[0] = v43;
                          v84.val[1] = 0uLL;
                          v46 = v42;
                          vst2q_s8(v46, v84);
                          v46 += 32;
                          v88.val[1] = 0uLL;
                          vst2q_s8(v46, v88);
                          v47 = v42 + 64;
                          vst2q_s8(v47, v86);
                          v48 = v42 + 96;
                          vst2q_s8(v48, *(int8x16x2_t *)(&v41 - 1));
                          v42 += 128;
                        }
                        while (v42 != v29);
                      }
                      else
                      {
                        v29 = (char *)(v25 + 9);
                      }
                      while (v29 != v28)
                      {
                        v49 = *(unsigned __int8 *)a2;
                        a2 = (_OWORD *)((char *)a2 + 1);
                        *(_WORD *)v29 = v49;
                        v29 += 2;
                      }
                    }
                    else if ((_DWORD)v27 == 1)
                    {
                      *v26 = *(_WORD *)a2;
                    }
                    else if ((_DWORD)v27)
                    {
                      this = (uint64_t)memcpy(v25 + 9, a2, 2 * v27);
                    }
                    v40 = *(unsigned int *)(v15 + 4);
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v50 = &v26[v40];
                  v51 = (char *)&v50[v20];
                  if (v13 != 1)
                  {
                    v52 = 2 * v13 - 2;
                    do
                    {
                      v53 = v11->u8[0];
                      v11 = (int8x16_t *)((char *)v11 + 1);
                      *v50++ = v53;
                      v52 -= 2;
                    }
                    while (v52);
                  }
                  if (v12)
                  {
                    a2 = *(_OWORD **)(v12 + 8);
                    v54 = *(unsigned int *)(v12 + 4);
                    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
                    {
                      v55 = &v51[2 * v54];
                      if (v54 >= 0x40)
                      {
                        v56 = &v51[2 * (v54 & 0xFFFFFFC0)];
                        v58 = 0uLL;
                        v59 = v51;
                        do
                        {
                          v85.val[0] = (int8x16_t)*a2;
                          v60 = *((int8x16_t *)a2 + 1);
                          v87.val[0] = (int8x16_t)a2[2];
                          v61 = a2[3];
                          a2 += 4;
                          v62 = v61;
                          v87.val[1] = 0uLL;
                          v89.val[0] = v60;
                          v85.val[1] = 0uLL;
                          v63 = v59;
                          vst2q_s8(v63, v85);
                          v63 += 32;
                          v89.val[1] = 0uLL;
                          vst2q_s8(v63, v89);
                          v64 = v59 + 64;
                          vst2q_s8(v64, v87);
                          v65 = v59 + 96;
                          vst2q_s8(v65, *(int8x16x2_t *)(&v58 - 1));
                          v59 += 128;
                        }
                        while (v59 != v56);
                      }
                      else
                      {
                        v56 = v51;
                      }
                      while (v56 != v55)
                      {
                        v66 = *(unsigned __int8 *)a2;
                        a2 = (_OWORD *)((char *)a2 + 1);
                        *(_WORD *)v56 = v66;
                        v56 += 2;
                      }
                    }
                    else if ((_DWORD)v54 == 1)
                    {
                      *(_WORD *)v51 = *(_WORD *)a2;
                    }
                    else if ((_DWORD)v54)
                    {
                      this = (uint64_t)memcpy(v51, a2, 2 * v54);
                    }
                    v57 = *(unsigned int *)(v12 + 4);
                  }
                  else
                  {
                    v57 = 0;
                  }
                  *(_WORD *)&v51[2 * v57] = 41;
                  goto LABEL_119;
                }
              }
              goto LABEL_158;
            }
            v25 = (_DWORD *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            goto LABEL_119;
          }
        }
      }
    }
LABEL_158:
    *a3 = 0;
    __break(0xC471u);
LABEL_159:
    JUMPOUT(0x1957985CCLL);
  }
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 1;
  v83 = 9;
  v81 = v3[1];
  v82 = (int8x16_t *)"counters(";
  v79 = (int8x16_t *)", ";
  v80 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v75, &v82, &v81, &v79);
  WebCore::serializeString((uint64_t)(v3 + 2), (const WTF::String *)&v75, v30);
  v82 = v11;
  v83 = v13 - 1;
  v79 = (int8x16_t *)v12;
  LOBYTE(v81) = 41;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v75, &v82, (uint64_t *)&v79, (char *)&v81);
  this = (uint64_t)v75;
  if (v75
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v75),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v75),
        (this = (uint64_t)v75) != 0))
  {
    *(_DWORD *)this += 2;
  }
  *a3 = this;
  v31 = v76;
  v76 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
      this = (uint64_t)v75;
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v75 = 0;
  if (this)
  {
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      goto LABEL_125;
    }
LABEL_133:
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
  }
LABEL_125:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  return this;
}

uint64_t *WebCore::CSSCounterValue::counterStyleCSSText@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;

  v3 = this[3];
  if (!v3)
    goto LABEL_7;
  v4 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v4 & 0x3F800) != 0)
    goto LABEL_7;
  if ((*(_WORD *)(v3 + 4) & 0x7F) == 0x3F)
  {
    v6 = *(_DWORD **)(v3 + 8);
    if (!v6)
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((*(_WORD *)(v3 + 4) & 0x7F) != 0x50)
  {
LABEL_7:
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((v4 & 0x3F87F) == 0x50)
    v5 = *(unsigned __int16 *)(v3 + 8);
  else
    v5 = 0;
  this = WebCore::nameString(v5);
  v6 = (_DWORD *)*this;
  if (*this)
LABEL_13:
    *v6 += 2;
LABEL_14:
  *a2 = v6;
  return this;
}

WTF::StringImpl *WebCore::CSSCrossfadeValue::customCSSText@<X0>(WebCore::CSSCrossfadeValue *this@<X0>, _QWORD *a2@<X8>)
{
  int8x16_t *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  int8x16_t *v13[2];
  int8x16_t *v14[2];
  _QWORD v15[2];
  int8x16_t *v16[2];

  if (*((_BYTE *)this + 32))
    v3 = (int8x16_t *)"-webkit-";
  else
    v3 = (int8x16_t *)&str_66;
  if (*((_BYTE *)this + 32))
    v4 = 9;
  else
    v4 = 1;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v11);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v10);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v9);
  v16[0] = v3;
  v16[1] = (int8x16_t *)v4;
  v15[0] = "cross-fade(";
  v15[1] = 12;
  v14[0] = (int8x16_t *)", ";
  v14[1] = (int8x16_t *)3;
  v13[0] = (int8x16_t *)", ";
  v13[1] = (int8x16_t *)3;
  v12 = 41;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>(v16, (uint64_t)v15, (uint64_t *)&v11, v14, (uint64_t *)&v10, v13, (uint64_t *)&v9, &v12, a2);
  if (*a2)
  {
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSCrossfadeValue::createStyleImage@<X0>(const WebCore::CSSValue **this@<X0>, WebCore::Style::BuilderState *a2@<X1>, _QWORD *a3@<X8>)
{
  const WebCore::CSSValue *v6;
  double v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WebCore::Style::BuilderState::createStyleImage(&v14, a2, this[1]);
  WebCore::Style::BuilderState::createStyleImage(&v13, a2, this[2]);
  v6 = this[3];
  if ((*((_WORD *)v6 + 2) & 0x7F) == 0x49)
  {
    v11 = *((_QWORD *)v6 + 1);
    v15 = 0;
    v7 = WebCore::CSSCalcValue::doubleValue(v11, (uint64_t)&v15);
    if (v15)
      WTF::fastFree((WTF *)(v15 - 16), v12);
  }
  else
  {
    v7 = *((double *)v6 + 1);
  }
  v8 = *((_BYTE *)this + 32);
  result = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 5;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = off_1E3441D50;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = &unk_1E3441E68;
  v10 = v14;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = v10;
  *(_QWORD *)(result + 88) = v13;
  *(double *)(result + 96) = v7;
  *(_BYTE *)(result + 104) = v8;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 0;
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::CSSCursorImageValue::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  v8 = *a1;
  if (*a1 && ((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) == 0x800)
  {
    v9 = *(WTF::StringImpl **)(v8 + 16);
    if (v9)
      *(_DWORD *)v9 += 2;
    v20 = v9;
    v10 = *(_OWORD *)(v8 + 40);
    v21 = *(_OWORD *)(v8 + 24);
    v22 = v10;
  }
  else
  {
    v20 = 0;
    WTF::URL::invalidate((WTF::URL *)&v20);
  }
  v11 = WTF::fastCompactMalloc((WTF *)0x48);
  v13 = v20;
  v20 = 0;
  v14 = v21;
  LODWORD(v21) = v21 & 0xFFFFFFFE;
  *(_DWORD *)v11 = 2;
  v15 = *(_BYTE *)(v11 + 6);
  *(_QWORD *)(v11 + 8) = v13;
  v16 = v22;
  *(_WORD *)(v11 + 4) = 6144;
  *(_BYTE *)(v11 + 6) = v15 & 0xFC;
  *(_OWORD *)(v11 + 16) = v14;
  *(_OWORD *)(v11 + 32) = v16;
  v17 = *a1;
  *a1 = 0;
  *(_QWORD *)(v11 + 48) = v17;
  v18 = *a2;
  *(_DWORD *)(v11 + 64) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v11 + 56) = v18;
  *(_BYTE *)(v11 + 68) = a3;
  *a4 = v11;
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSCursorImageValue::customCSSText@<X0>(WebCore::CSSCursorImageValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  char v13;
  WTF::StringImpl *v14;

  result = (WTF::StringImpl *)_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v9);
  v5 = v9;
  if (*((_BYTE *)this + 64))
  {
    if (v9)
      *(_DWORD *)v9 += 2;
    v6 = *((_DWORD *)this + 14);
    v7 = *((_DWORD *)this + 15);
    v14 = v5;
    v13 = 32;
    v12 = v6;
    v11 = 32;
    v10 = v7;
    result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>((uint64_t *)&v14, &v13, &v12, &v11, &v10, a2);
    if (*a2)
    {
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v8);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *a2 = v9;
  }
  return result;
}

uint64_t *WebCore::CSSCursorImageValue::createStyleImage@<X0>(const WebCore::CSSValue **this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  const WebCore::CSSValue *v9;
  const WebCore::CSSValue *v10;
  __int128 v11;
  uint64_t *v12;

  result = WebCore::Style::BuilderState::createStyleImage((uint64_t *)&v12, a2, this[6]);
  v6 = v12;
  if (v12)
  {
    v12 = 0;
    v7 = *((_BYTE *)this + 68);
    v8 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 24) = 1;
    *(_QWORD *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 40) = 1;
    *(_QWORD *)v8 = off_1E3441EE0;
    *(_QWORD *)(v8 + 48) = v6;
    v9 = this[7];
    *(_DWORD *)(v8 + 64) = *((_DWORD *)this + 16);
    *(_QWORD *)(v8 + 56) = v9;
    v10 = this[1];
    if (v10)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)(v8 + 72) = v10;
    v11 = *((_OWORD *)this + 2);
    *(_OWORD *)(v8 + 80) = *((_OWORD *)this + 1);
    *(_OWORD *)(v8 + 96) = v11;
    *(_BYTE *)(v8 + 112) = v7;
    *(_QWORD *)(v8 + 120) = 0;
    *(_QWORD *)(v8 + 128) = 0;
    *a3 = v8;
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t *WebCore::CSSCustomPropertyValue::createEmpty@<X0>(WebCore::CSSCustomPropertyValue *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  _DWORD *v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char *v15[2];
  uint64_t v16;

  {
    v15[0] = 0;
    v15[1] = 0;
    v11 = WebCore::strictCSSParserContext(this);
    v12 = WTF::fastMalloc((WTF *)0x60);
    v13 = WebCore::CSSVariableData::CSSVariableData(v12, v15, (const WebCore::CSSParserContext *)v11);
    v16 = 0;
    WebCore::CSSCustomPropertyValue::createEmpty(WTF::AtomString const&)::empty = v13;
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v16, v14);
  }
  v5 = WebCore::CSSCustomPropertyValue::createEmpty(WTF::AtomString const&)::empty;
  ++*(_DWORD *)WebCore::CSSCustomPropertyValue::createEmpty(WTF::AtomString const&)::empty;
  v6 = WTF::fastCompactMalloc((WTF *)0x60);
  v15[0] = 0;
  *(_DWORD *)v6 = 2;
  v8 = *(_BYTE *)(v6 + 6);
  *(_WORD *)(v6 + 4) = -6144;
  *(_BYTE *)(v6 + 6) = v8 & 0xFC;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v9 += 2;
  *(_QWORD *)(v6 + 8) = v9;
  *(_QWORD *)(v6 + 24) = v5;
  *(_DWORD *)(v6 + 72) = 2;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *a2 = v6;
  return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)v15, v7);
}

uint64_t WebCore::CSSCustomPropertyValue::createWithID@<X0>(_DWORD **a1@<X0>, __int16 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  char v7;
  _DWORD *v8;

  result = WTF::fastCompactMalloc((WTF *)0x60);
  *(_DWORD *)result = 2;
  v7 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = -6144;
  *(_BYTE *)(result + 6) = v7 & 0xFC;
  v8 = *a1;
  if (*a1)
    *v8 += 2;
  *(_QWORD *)(result + 8) = v8;
  *(_WORD *)(result + 24) = a2;
  *(_DWORD *)(result + 72) = 1;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSCustomPropertyValue::equals(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v8;
  WTF::StringImpl **v9;
  _QWORD v10[5];
  _QWORD *v11;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v2 = *(unsigned int *)(a1 + 72);
  v3 = *(_DWORD *)(a2 + 72);
  v4 = v3 == v2;
  v5 = v3 == -1;
  v6 = v3 == -1;
  if (v5)
    v4 = 0;
  if ((_DWORD)v2 != -1)
    v6 = v4;
  if (!v6)
    return 0;
  v10[0] = a2;
  v10[1] = a2;
  v10[2] = a2;
  v10[3] = a2;
  v10[4] = a2;
  if ((_DWORD)v2 == -1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSCustomPropertyValue::customCSSText(v8, v9);
  }
  else
  {
    v11 = v10;
    return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v11, a1 + 24);
  }
}

uint64_t WebCore::CSSCustomPropertyValue::customCSSText@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WebCore::CSSCustomPropertyValue *v9;
  WTF::StringImpl *v10;
  char v11;
  _QWORD v12[2];
  _QWORD *v13;

  v11 = 0;
  v3 = *(WTF::StringImpl **)(this + 80);
  if (v3)
    goto LABEL_8;
  v4 = this;
  v12[0] = &v11;
  v12[1] = &v11;
  v5 = *(unsigned int *)(this + 72);
  if ((_DWORD)v5 != -1)
  {
    v13 = v12;
    ((void (*)(WTF::StringImpl **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZZNK7WebCore22CSSCustomPropertyValue13customCSSTextEvENK3__1clEvEUlRKNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEEE_JZZNKS9_13customCSSTextEvENKSA_clEvEUlRKNS8_10CSSValueIDEE_ZZNKS9_13customCSSTextEvENKSA_clEvEUlRKNSB_INS8_15CSSVariableDataENSD_ISP_EENSF_ISP_EEEEE_ZZNKS9_13customCSSTextEvENKSA_clEvEUlRKNS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSD_IS11_EENSF_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEEE_ZZNKS9_13customCSSTextEvENKSA_clEvEUlRKNS9_15SyntaxValueListEE_EEEEEJRKNS0_6__implIJSH_SL_SS_S18_S1C_EEEEEEDcOT_DpOT0____fmatrix[v5])(&v10, &v13, this + 24);
    v3 = v10;
    v10 = 0;
    this = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v4 + 80) = v3;
    if (!this)
      goto LABEL_7;
    v7 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
      this = (uint64_t)v10;
      v10 = 0;
      if (!this)
        goto LABEL_6;
      v7 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
        goto LABEL_6;
      }
    }
    *(_DWORD *)this = v7;
LABEL_6:
    v3 = *(WTF::StringImpl **)(v4 + 80);
LABEL_7:
    if (!v3)
    {
LABEL_9:
      *a2 = v3;
      return this;
    }
LABEL_8:
    *(_DWORD *)v3 += 2;
    goto LABEL_9;
  }
  v9 = (WebCore::CSSCustomPropertyValue *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CSSCustomPropertyValue::tokens(v9);
}

uint64_t WebCore::CSSCustomPropertyValue::tokens(WebCore::CSSCustomPropertyValue *this)
{
  uint64_t v1;
  WebCore::CSSCustomPropertyValue *v3;
  WebCore::CSSCustomPropertyValue *v4;
  WebCore::CSSCustomPropertyValue **v5;

  {
    WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens = 0;
    *(_QWORD *)algn_1EE2F5698 = 0;
  }
  v4 = this;
  v1 = *((unsigned int *)this + 18);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::CSSCustomPropertyValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSCustomPropertyValue::isCurrentColor(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(WebCore::CSSCustomPropertyValue ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6tokensEvE3__0JZNKS9_6tokensEvE3__1ZNKS9_6tokensEvE3__2ZNKS9_6tokensEvE3__3EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENS8_10CSSValueIDENSH_INS8_15CSSVariableDataENSJ_ISP_EENSL_ISP_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSJ_ISY_EENSL_ISY_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, (char *)this + 24);
  }
}

WTF::StringImpl *WebCore::CSSCustomPropertyValue::isCurrentColor(WebCore::CSSCustomPropertyValue *this)
{
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  char v13;
  char *v14;

  v1 = *((unsigned int *)this + 18);
  if ((_DWORD)v1 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSFilterImageValue::customCSSText(v9);
  }
  else
  {
    v14 = &v13;
    v2 = ((uint64_t (*)(char **, char *))off_1E33977B0[v1])(&v14, (char *)this + 24);
    if ((__int128 *)v2 == v3)
      return 0;
    v4 = (__int128 *)v2;
    do
    {
      v4 = (__int128 *)((char *)v4 + 24);
      v5 = v4;
      if (v4 >= v3)
      {
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v11 = v3;
          v12 = v2;
          v10 = v4;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v4 = v10;
          v3 = v11;
          v2 = v12;
          v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
    }
    while ((*(_DWORD *)v5 & 0x3F) == 0x10);
    v6 = 0;
    if (v4 == v3 && (*(_DWORD *)v2 & 0x3F) == 0)
    {
      v7 = *(_DWORD *)(v2 + 16);
      if (v7 < 0)
        LOWORD(v7) = WebCore::cssValueKeywordID(*(_QWORD *)(v2 + 8), *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)v2 >> 22) & 1) << 32));
      return (WTF::StringImpl *)((unsigned __int16)v7 == 124);
    }
    return (WTF::StringImpl *)v6;
  }
}

WTF::StringImpl *WebCore::CSSFilterImageValue::customCSSText@<X0>(_QWORD *a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  _QWORD v9[2];
  _QWORD v10[2];

  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v7);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v6);
  v10[0] = "filter(";
  v10[1] = 8;
  v9[0] = ", ";
  v9[1] = 3;
  v8 = 41;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>((uint64_t)v10, (uint64_t *)&v7, (uint64_t)v9, (uint64_t *)&v6, &v8, a1);
  if (*a1)
  {
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_DWORD *WebCore::CSSFilterImageValue::createStyleImage@<X0>(const WebCore::CSSValue **this@<X0>, const WebCore::Document **a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  WTF *v11;
  _DWORD *result;
  WTF *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  WTF *v20;
  unint64_t v21;
  char v22;
  _DWORD *v23;

  WebCore::Style::BuilderState::createStyleImage((uint64_t *)&v23, (WebCore::Style::BuilderState *)a2, this[1]);
  WebCore::Style::createFilterOperations(a2[3], a2[2], (WebCore::RenderStyle *)(a2 + 8), this[2], (uint64_t)&v20, v6);
  if (v22)
    v7 = v20;
  else
    v7 = 0;
  if (v22)
  {
    v19 = v21;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    v19 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 3;
  *(_DWORD *)(v8 + 28) = 0;
  *(_DWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 36) = 1;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)v8 = off_1E3441FE0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = &unk_1E34420F8;
  v10 = v23;
  v23 = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 88) = v7;
  *(_OWORD *)(v8 + 96) = v19;
  *(_BYTE *)(v8 + 112) = 0;
  *a3 = v8;
  if (v22)
  {
    if (HIDWORD(v21))
    {
      v13 = v20;
      v14 = (WTF *)((char *)v20 + 8 * HIDWORD(v21));
      do
      {
        v15 = *(unsigned int **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
        }
        v13 = (WTF *)((char *)v13 + 8);
      }
      while (v13 != v14);
    }
    v11 = v20;
    if (v20)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      WTF::fastFree(v11, v9);
    }
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::CSSFontFace::timeoutFired(WebCore::CSSFontFace *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  ++*((_DWORD *)this + 2);
  v2 = *((unsigned __int8 *)this + 138);
  if (v2 == 1)
  {
    v3 = 2;
  }
  else
  {
    if (v2 != 2)
      goto LABEL_6;
    v3 = 4;
  }
  WebCore::CSSFontFace::setStatus((uint64_t)this, v3);
LABEL_6:
  result = WebCore::CSSFontFace::fontLoadEventOccurred(this);
  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::CSSFontFace::~CSSFontFace(this);
    return WTF::fastFree(v5, v6);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return result;
}

void WebCore::CSSFontFace::~CSSFontFace(WebCore::CSSFontFace *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::CSSFontFaceSource **v10;
  uint64_t v11;
  WebCore::CSSFontFaceSource *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  char v26;

  *((_QWORD *)this + 19) = off_1E31F7378;
  v2 = (WebCore::CSSFontFace *)((char *)this + 152);
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = *((_QWORD *)this + 12);
  if (v8)
  {
    v20 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v20)
    {
      for (i = 0; i != v20; ++i)
      {
        v22 = *(unsigned int **)(v8 + 8 * i);
        if (v22 != (unsigned int *)-1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              v25 = v20;
              WTF::fastFree((WTF *)v22, v4);
              v20 = v25;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v8 - 16), v4);
  }
  v9 = *((unsigned int *)this + 23);
  if ((_DWORD)v9)
  {
    v10 = (WebCore::CSSFontFaceSource **)*((_QWORD *)this + 10);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        WebCore::CSSFontFaceSource::~CSSFontFaceSource(v12, (WTF::StringImpl *)v4);
        WTF::fastFree(v13, v14);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v15 = (WTF *)*((_QWORD *)this + 10);
  if (v15)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v15, v4);
  }
  v16 = (WTF *)*((_QWORD *)this + 7);
  if (v16)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v16, v4);
  }
  v17 = (WTF *)*((_QWORD *)this + 5);
  if (v17)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v17, v4);
  }
  v18 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)v4);
    else
      *v18 -= 2;
  }
  v19 = *((unsigned int *)this + 6);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, char *))off_1E33976F0[v19])(&v26, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
}

{
  WTF *v1;
  void *v2;

  WebCore::CSSFontFace::~CSSFontFace(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::CSSFontFace::cssConnection(WebCore::CSSFontFace *this)
{
  uint64_t v1;
  WebCore::CSSFontFace *v3;
  WebCore::CSSValue *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::CSSFontFace *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSFontFace::setStretch(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, (char *)this + 16);
  }
}

uint64_t WebCore::CSSFontFace::setStretch(WebCore::CSSFontFace *this, WebCore::CSSValue *a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  const WebCore::CSSValue *v12;
  __int16 v13;
  __int16 v14;
  uint64_t result;
  void *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  char v24;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 == -1)
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSFontFace::setUnicodeRange(v21);
  }
  v22 = (WTF *)&v24;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, char *))off_1E3397870[v2])(&v22, (char *)this + 16);
  *(_DWORD *)a2 += 2;
  v22 = a2;
  WebCore::MutableStyleProperties::setProperty(v5, 15, (_DWORD **)&v22, 0);
  v7 = v22;
  v22 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800;
  if (v8 == 120832)
  {
    if (*((_DWORD *)a2 + 2) == 2)
    {
      v9 = *((_QWORD *)a2 + 2);
      if (((*(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1957998E4);
      }
      v10 = *((_QWORD *)a2 + 3);
      if (((*(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195799904);
      }
      v11 = (__int16)WebCore::Style::BuilderConverter::convertFontStretchFromValue((WebCore::Style::BuilderConverter *)v9, v6);
      v13 = WebCore::Style::BuilderConverter::convertFontStretchFromValue((WebCore::Style::BuilderConverter *)v10, v12);
      if (v13 >= v11)
        v14 = v11;
      else
        v14 = v13;
      if (v11 <= v13)
        result = v13;
      else
        result = v11;
    }
    else
    {
      result = 400;
      v14 = 400;
    }
  }
  else
  {
    if (v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1957998C4);
    }
    result = WebCore::Style::BuilderConverter::convertFontStretchFromValue(a2, v6);
    v14 = result;
  }
  if (*((_BYTE *)this + 130))
  {
    if ((float)((float)*((__int16 *)this + 63) * 0.25) == (float)((float)v14 * 0.25)
      && (float)((float)*((__int16 *)this + 64) * 0.25) == (float)((float)(__int16)result * 0.25))
    {
      return result;
    }
  }
  else
  {
    *((_BYTE *)this + 130) = 1;
  }
  *(_DWORD *)((char *)this + 126) = ((_DWORD)result << 16) | (unsigned __int16)v14;
  v22 = 0;
  v23 = 0;
  result = WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v22, (_DWORD *)this + 24);
  v17 = v22;
  if (HIDWORD(v23))
  {
    v18 = 8 * HIDWORD(v23);
    do
    {
      v19 = *(_QWORD *)v17;
      v17 = (WTF *)((char *)v17 + 8);
      result = (*(uint64_t (**)(uint64_t, WebCore::CSSFontFace *, _QWORD))(*(_QWORD *)v19 + 32))(v19, this, 0);
      v18 -= 8;
    }
    while (v18);
    v17 = v22;
    if (HIDWORD(v23))
    {
      v20 = 8 * HIDWORD(v23);
      do
      {
        result = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
        v17 = (WTF *)((char *)v17 + 8);
        v20 -= 8;
      }
      while (v20);
      v17 = v22;
    }
  }
  if (v17)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return WTF::fastFree(v17, v16);
  }
  return result;
}

uint64_t WebCore::CSSFontFace::setUnicodeRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  char v26;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_42;
  }
  v24 = (WTF *)&v26;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, uint64_t))off_1E3397870[v2])(&v24, a1 + 16);
  *(_DWORD *)a2 += 2;
  v24 = (WTF *)a2;
  WebCore::MutableStyleProperties::setProperty(v5, 286, (_DWORD **)&v24, 0);
  v7 = v24;
  v24 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
      goto LABEL_42;
    v9 = WTF::fastMalloc((WTF *)(8 * v8));
    v10 = (void *)v9;
    v11 = *(_DWORD *)(a2 + 8);
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        if (v13 > 3)
        {
          if (*(_DWORD *)(a2 + 8) <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x195799B78);
          }
          v15 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 8 * (v14 - 4));
        }
        else
        {
          v15 = (uint64_t *)(a2 + 16 + 8 * v14);
        }
        v16 = *v15;
        if (((*(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16)) & 0x3F800) != 0x1B000)
          break;
        *(_QWORD *)(v9 + 8 * v12++) = *(_QWORD *)(v16 + 8);
        v13 = v14 + 1;
        v14 = (v14 + 1);
        if (v11 == v13)
          goto LABEL_19;
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x195799B58);
    }
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
LABEL_19:
  if (v12 == *(_DWORD *)(a1 + 52))
  {
    v17 = *(void **)(a1 + 40);
    result = memcmp(v10, v17, 8 * v12);
    if (!(_DWORD)result)
    {
      if (!v10)
        return result;
      v19 = (WTF *)v10;
      return WTF::fastFree(v19, v6);
    }
  }
  else
  {
    v17 = *(void **)(a1 + 40);
  }
  if (v17)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree((WTF *)v17, v6);
  }
  *(_QWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 52) = v12;
  v24 = 0;
  v25 = 0;
  result = WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v24, (_DWORD *)(a1 + 96));
  v20 = v24;
  if (HIDWORD(v25))
  {
    v21 = 8 * HIDWORD(v25);
    do
    {
      v22 = *(_QWORD *)v20;
      v20 = (WTF *)((char *)v20 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, a1, 0);
      v21 -= 8;
    }
    while (v21);
    v20 = v24;
    if (HIDWORD(v25))
    {
      v23 = 8 * HIDWORD(v25);
      do
      {
        result = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
        v20 = (WTF *)((char *)v20 + 8);
        v23 -= 8;
      }
      while (v23);
      v20 = v24;
    }
  }
  if (v20)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    v19 = v20;
    return WTF::fastFree(v19, v6);
  }
  return result;
}

uint64_t WebCore::CSSFontFace::setFeatureSettings(WebCore::CSSFontFace *this, WebCore::CSSValue *a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  WTF *v15;
  uint64_t result;
  int v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::CSSFontFace *v22;
  WebCore::CSSValue *v23;
  void *__s2;
  uint64_t v25;
  WTF *p_s2;
  uint64_t v27;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 == -1)
  {
    v22 = (WebCore::CSSFontFace *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSFontFace::setSizeAdjust(v22, v23);
  }
  p_s2 = (WTF *)&__s2;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, char *))off_1E3397870[v2])(&p_s2, (char *)this + 16);
  *(_DWORD *)a2 += 2;
  p_s2 = a2;
  WebCore::MutableStyleProperties::setProperty(v5, 9, (_DWORD **)&p_s2, 0);
  v7 = p_s2;
  p_s2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  __s2 = 0;
  v25 = 0;
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800
    && (v8 = *((_DWORD *)a2 + 2)) != 0)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (v9 > 3)
      {
        if (*((_DWORD *)a2 + 2) <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195799E28);
        }
        v11 = (uint64_t *)(*((_QWORD *)a2 + 6) + 8 * (v10 - 4));
      }
      else
      {
        v11 = (uint64_t *)((char *)a2 + 8 * v10 + 16);
      }
      v12 = *v11;
      if (((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) != 0x11000)
      {
        __break(0xC471u);
        JUMPOUT(0x195799DD4);
      }
      p_s2 = (WTF *)__PAIR64__(*(_DWORD *)(v12 + 12), *(_DWORD *)(v12 + 7));
      WebCore::FontTaggedSettings<int>::insert((uint64_t)&__s2, (unsigned int *)&p_s2);
      v9 = v10 + 1;
      v10 = (v10 + 1);
    }
    while (v8 != v9);
    v13 = HIDWORD(v25);
  }
  else
  {
    v13 = 0;
  }
  if (*((_DWORD *)this + 17) != v13)
  {
    v14 = (void *)*((_QWORD *)this + 7);
    if (!v14)
      goto LABEL_20;
    goto LABEL_37;
  }
  v14 = (void *)*((_QWORD *)this + 7);
  v15 = (WTF *)__s2;
  result = memcmp(v14, __s2, 8 * v13);
  if ((_DWORD)result)
  {
    if (!v14)
      goto LABEL_20;
LABEL_37:
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree((WTF *)v14, v6);
    v13 = HIDWORD(v25);
LABEL_20:
    *((_QWORD *)this + 7) = __s2;
    v17 = v25;
    __s2 = 0;
    v25 = 0;
    *((_DWORD *)this + 16) = v17;
    *((_DWORD *)this + 17) = v13;
    p_s2 = 0;
    v27 = 0;
    result = WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&p_s2, (_DWORD *)this + 24);
    v18 = p_s2;
    if (HIDWORD(v27))
    {
      v19 = 8 * HIDWORD(v27);
      do
      {
        v20 = *(_QWORD *)v18;
        v18 = (WTF *)((char *)v18 + 8);
        result = (*(uint64_t (**)(uint64_t, WebCore::CSSFontFace *, _QWORD))(*(_QWORD *)v20 + 32))(v20, this, 0);
        v19 -= 8;
      }
      while (v19);
      v18 = p_s2;
      if (HIDWORD(v27))
      {
        v21 = 8 * HIDWORD(v27);
        do
        {
          result = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
          v18 = (WTF *)((char *)v18 + 8);
          v21 -= 8;
        }
        while (v21);
        v18 = p_s2;
      }
    }
    if (v18)
    {
      p_s2 = 0;
      LODWORD(v27) = 0;
      result = WTF::fastFree(v18, v6);
    }
    v15 = (WTF *)__s2;
  }
  if (v15)
  {
    __s2 = 0;
    LODWORD(v25) = 0;
    return WTF::fastFree(v15, v6);
  }
  return result;
}

void WebCore::CSSFontFace::setSizeAdjust(WebCore::CSSFontFace *this, WebCore::CSSValue *a2)
{
  WebCore::CSSFontFace *v2;
  uint64_t v3;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  double v8;
  float v9;
  float v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  double v20;
  WTF *v21;
  uint64_t v22;
  char v23;

  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_30:
    *(float *)&v19 = 3.4028e38;
    goto LABEL_32;
  }
  v2 = this;
  v21 = (WTF *)&v23;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, char *))off_1E3397870[v3])(&v21, (char *)this + 16);
  *(_DWORD *)a2 += 2;
  v21 = a2;
  WebCore::MutableStyleProperties::setProperty(v5, 229, (_DWORD **)&v21, 0);
  v7 = v21;
  v21 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195799FE0);
  }
  if ((*((_WORD *)a2 + 2) & 0x7F) == 0x49)
  {
    v17 = *((_QWORD *)a2 + 1);
    v21 = 0;
    v20 = WebCore::CSSCalcValue::doubleValue(v17, (uint64_t)&v21);
    if (v21)
      WTF::fastFree((WTF *)((char *)v21 - 16), v18);
    v8 = v20;
  }
  else
  {
    v8 = *((double *)a2 + 1);
  }
  if (v8 >= 3.40282347e38)
    goto LABEL_30;
  if (v8 > -3.40282347e38)
  {
    v9 = v8;
    goto LABEL_12;
  }
  *(float *)&v19 = -3.4028e38;
LABEL_32:
  v9 = *(float *)&v19;
LABEL_12:
  v10 = v9 / 100.0;
  if (*((float *)v2 + 19) != v10)
  {
    *((float *)v2 + 19) = v10;
    v21 = 0;
    v22 = 0;
    WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v21, (_DWORD *)v2 + 24);
    v12 = v21;
    if (HIDWORD(v22))
    {
      v13 = 8 * HIDWORD(v22);
      do
      {
        v14 = *(_QWORD *)v12;
        v12 = (WTF *)((char *)v12 + 8);
        (*(void (**)(uint64_t, WebCore::CSSFontFace *, _QWORD))(*(_QWORD *)v14 + 32))(v14, v2, 0);
        v13 -= 8;
      }
      while (v13);
      v12 = v21;
      if (HIDWORD(v22))
      {
        v15 = 8 * HIDWORD(v22);
        do
        {
          v16 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
          v12 = (WTF *)((char *)v12 + 8);
          v15 -= 8;
        }
        while (v15);
        v12 = v21;
      }
    }
    if (v12)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      WTF::fastFree(v12, v11);
    }
  }
}

uint64_t WebCore::CSSFontFace::setDisplay(WebCore::CSSFontFace *this, WebCore::CSSPrimitiveValue *a2)
{
  uint64_t v2;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  char v21;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x19579A1D0);
  }
  v19 = (WTF *)&v21;
  v5 = (WebCore::MutableStyleProperties *)((uint64_t (*)(WTF **, char *))off_1E3397870[v2])(&v19, (char *)this + 16);
  *(_DWORD *)a2 += 2;
  v19 = a2;
  WebCore::MutableStyleProperties::setProperty(v5, 126, (_DWORD **)&v19, 0);
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v9 = *((unsigned __int16 *)a2 + 4);
    if (v9 == 969)
      v10 = 4;
    else
      v10 = 0;
    if (v9 == 968)
      v11 = 3;
    else
      v11 = v10;
    if (v9 == 967)
      v12 = 2;
    else
      v12 = 0;
    if (v9 == 367)
      v13 = 1;
    else
      v13 = v12;
    if (*((unsigned __int16 *)a2 + 4) <= 0x3C7u)
      v8 = v13;
    else
      v8 = v11;
  }
  else
  {
    v8 = 0;
  }
  if (*((unsigned __int8 *)this + 72) != v8)
  {
    *((_BYTE *)this + 72) = v8;
    v19 = 0;
    v20 = 0;
    result = WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v19, (_DWORD *)this + 24);
    v15 = v19;
    if (HIDWORD(v20))
    {
      v16 = 8 * HIDWORD(v20);
      do
      {
        v17 = *(_QWORD *)v15;
        v15 = (WTF *)((char *)v15 + 8);
        result = (*(uint64_t (**)(uint64_t, WebCore::CSSFontFace *, _QWORD))(*(_QWORD *)v17 + 32))(v17, this, 0);
        v16 -= 8;
      }
      while (v16);
      v15 = v19;
      if (HIDWORD(v20))
      {
        v18 = 8 * HIDWORD(v20);
        do
        {
          result = *(_QWORD *)v15;
          *(_QWORD *)v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
          v15 = (WTF *)((char *)v15 + 8);
          v18 -= 8;
        }
        while (v18);
        v15 = v19;
      }
    }
    if (v15)
    {
      v19 = 0;
      LODWORD(v20) = 0;
      return WTF::fastFree(v15, v14);
    }
  }
  return result;
}

uint64_t WebCore::CSSFontFace::initializeWrapper(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9[8];
  WTF::StringImpl *v10;

  v1 = this;
  v2 = *(unsigned __int8 *)(this + 138);
  if (v2 == 4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(this + 112) + 8);
    if (v6)
      v7 = v6 - 32;
    else
      v7 = 0;
    this = *(_QWORD *)(v7 + 56);
    if (!*(_BYTE *)(this + 32))
    {
      v9[0] = 15;
      v10 = 0;
      WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::reject(this, (WTF::StringImpl *)v9, 0);
      this = (uint64_t)v10;
      v10 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  else if (v2 == 3)
  {
    v3 = *(_QWORD *)(this + 112);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        v5 = (WTF::StringImpl *)(v4 - 32);
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    this = *((_QWORD *)v5 + 7);
    if (!*(_BYTE *)(this + 32))
      this = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::resolve(this, v5);
  }
  *(_BYTE *)(v1 + 141) = 0;
  return this;
}

WebCore::ScriptExecutionContext *WebCore::CSSFontFace::wrapper@<X0>(WebCore::ScriptExecutionContext *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = (uint64_t)this;
  v5 = *((_QWORD *)this + 14);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    ++*(_DWORD *)(v6 - 8);
    *a3 = v6 - 32;
  }
  else
  {
    WebCore::FontFace::create(a2, this, a3);
    v8 = *a3;
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
      goto LABEL_18;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v8 + 32;
    v10 = *(unsigned int **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
    if (!v10)
      goto LABEL_18;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v7);
    }
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
    {
LABEL_18:
      do
        v13 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v13 + 1, (unsigned int *)v9));
    }
    v14 = *(unsigned int **)(v3 + 112);
    *(_QWORD *)(v3 + 112) = v9;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v7);
      }
    }
    return (WebCore::ScriptExecutionContext *)WebCore::CSSFontFace::initializeWrapper(v3);
  }
  return this;
}

void WebCore::CSSFontFace::purgeable(WebCore::CSSFontFace *this)
{
  uint64_t v1;
  WebCore::CSSFontFaceRule *v2;
  char v3;
  char *v4;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v2 = (WebCore::CSSFontFaceRule *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CSSFontFaceRule::~CSSFontFaceRule(v2);
  }
  else
  {
    v4 = &v3;
    ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, (char *)this + 16);
  }
}

void WebCore::CSSFontFaceRule::~CSSFontFaceRule(WebCore::CSSFontFaceRule *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::StyleRuleCSSStyleDeclaration *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v4, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*v5 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      --*v5;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  uint64_t v3;
  WebCore::StyleRuleCSSStyleDeclaration *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v4, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*v5 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      --*v5;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CSSFontFaceRule::style(WebCore::CSSFontFaceRule *this)
{
  uint64_t v1;
  WebCore::MutableStyleProperties *v3;
  WTF::StringImpl *v4;
  WebCore::StyleRuleCSSStyleDeclaration *v5;
  bmalloc::api *v7;
  void *v8;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v3 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 3));
    v1 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = v3;
    *(_QWORD *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 40) = 1;
    *(_QWORD *)v1 = off_1E3399A08;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 44) = (*(uint64_t (**)(WebCore::CSSFontFaceRule *))(*(_QWORD *)this + 16))(this);
    *(_QWORD *)(v1 + 48) = this;
    ++**(_DWORD **)(v1 + 24);
    v5 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v1;
    if (v5)
    {
      if (*((_DWORD *)v5 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v5, v4);
        bmalloc::api::isoDeallocate(v7, v8);
        return *((_QWORD *)this + 4);
      }
      else
      {
        --*((_DWORD *)v5 + 10);
      }
    }
  }
  return v1;
}

void WebCore::CSSFontFaceRule::cssText(WebCore::CSSFontFaceRule *this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  BOOL v10;
  int v11;
  WTF::StringImpl *v12;

  WebCore::StyleProperties::asText(*(WebCore::StyleProperties **)(*((_QWORD *)this + 3) + 8), a2, a3, &v12, a5);
  v6 = v12;
  if (!v12 || (v9 = *((_DWORD *)v12 + 1)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_3;
  }
  *(_DWORD *)v12 += 2;
  if (v9 < 0 || (v10 = __OFADD__(v9, 2), v11 = v9 + 2, v10) || __OFADD__(v11, 13))
  {
    *a4 = 0;
    goto LABEL_17;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v11 + 13), (*((_DWORD *)v6 + 4) >> 2) & 1, (int8x16_t *)"@font-face { ", 0xDu, (uint64_t)v6, (int8x16_t *)" }", 2u, a4);
  if (!*a4)
  {
LABEL_17:
    __break(0xC471u);
    return;
  }
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v7);
  else
    *(_DWORD *)v6 -= 2;
LABEL_3:
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::CSSFontFaceRule::cssTextWithReplacementURLs(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  const WebCore::StyleProperties *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  const WTF::StringImpl *v9;
  WTF::String *v10;
  uint64_t *v11;
  __n128 v12;
  unint64_t v13;
  unsigned int *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t i;
  unint64_t v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD **v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v33;
  WTF::StringImpl *v34;

  v5 = *(const WebCore::StyleProperties **)(*(_QWORD *)(a1 + 24) + 8);
  v6 = WTF::fastMalloc((WTF *)0x60);
  v7 = 0;
  v11 = (uint64_t *)((char *)WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v6, v5)+ 8);
  while (1)
  {
    v13 = *(unsigned int *)(v6 + 4);
    if ((v13 & 8) != 0)
      break;
    if (v7 >= v13 >> 4)
      goto LABEL_8;
    v14 = (unsigned int *)((char *)v11 + 5 * v7 + ((v13 >> 3) & 0x1FFFFFFE));
    v15 = (WTF::StringImpl *)(*v14 | ((unint64_t)*((unsigned __int8 *)v14 + 4) << 32));
LABEL_5:
    WebCore::CSSValue::setReplacementURLForSubresources(v15, a2, v9);
    v7 = (v7 + 1);
  }
  if (*(_DWORD *)(v6 + 28) > v7)
  {
    v15 = *(WTF::StringImpl **)(*(_QWORD *)(v6 + 16) + 16 * v7 + 8);
    goto LABEL_5;
  }
LABEL_8:
  WebCore::StyleProperties::asText((WebCore::StyleProperties *)v6, v8, v10, &v34, v12);
  for (i = 0; ; i = (i + 1))
  {
    v18 = *(unsigned int *)(v6 + 4);
    if ((v18 & 8) != 0)
      break;
    if (i >= v18 >> 4)
      goto LABEL_15;
    v19 = (unsigned int *)((char *)v11 + 5 * i + ((v18 >> 3) & 0x1FFFFFFE));
    v20 = (WTF::StringImpl *)(*v19 | ((unint64_t)*((unsigned __int8 *)v19 + 4) << 32));
LABEL_12:
    WebCore::CSSValue::clearReplacementURLForSubresources(v20, v16);
  }
  if (*(_DWORD *)(v6 + 28) > i)
  {
    v20 = *(WTF::StringImpl **)(*(_QWORD *)(v6 + 16) + 16 * i + 8);
    goto LABEL_12;
  }
LABEL_15:
  v21 = v34;
  if (!v34 || (v24 = *((_DWORD *)v34 + 1)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_17;
  }
  *(_DWORD *)v34 += 2;
  if (v24 < 0 || (v25 = __OFADD__(v24, 2), v26 = v24 + 2, v25) || __OFADD__(v26, 13))
  {
    *a3 = 0;
    goto LABEL_47;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v26 + 13), (*((_DWORD *)v21 + 4) >> 2) & 1, (int8x16_t *)"@font-face { ", 0xDu, (uint64_t)v21, (int8x16_t *)" }", 2u, a3);
  if (!*a3)
  {
LABEL_47:
    __break(0xC471u);
    return;
  }
  if (*(_DWORD *)v21 == 2)
    WTF::StringImpl::destroy(v21, v22);
  else
    *(_DWORD *)v21 -= 2;
LABEL_17:
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*(_DWORD *)v6 == 1)
  {
    v27 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v27)
    {
      v28 = 16 * v27;
      v29 = (_DWORD **)(*(_QWORD *)(v6 + 16) + 8);
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          if (*v30 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v22);
          else
            *v30 -= 2;
        }
        v29 += 2;
        v28 -= 16;
      }
      while (v28);
    }
    v31 = *(WTF **)(v6 + 16);
    if ((WTF *)(v6 + 32) != v31 && v31 != 0)
    {
      *(_QWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = 0;
      WTF::fastFree(v31, v22);
    }
    v33 = *v11;
    *v11 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    WTF::fastFree((WTF *)v6, v22);
  }
  else
  {
    --*(_DWORD *)v6;
  }
}

uint64_t WebCore::CSSFontFaceRule::reattach(WebCore::CSSFontFaceRule *this, WebCore::StyleRuleBase *a2)
{
  uint64_t result;
  uint64_t v4;
  WebCore::MutableStyleProperties *v5;

  if ((*((_BYTE *)a2 + 4) & 0x1F) == 5)
  {
    ++*(_DWORD *)a2;
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 3));
      return WebCore::StyleRuleCSSStyleDeclaration::reattach(v4, v5);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSCounterStyleRule::styleRuleType(WebCore::CSSCounterStyleRule *this)
{
  return 11;
}

uint64_t WebCore::CSSRule::isGroupingRule(WebCore::CSSRule *this)
{
  return 0;
}

uint64_t WebCore::CSSFontFaceRule::styleRuleType(WebCore::CSSFontFaceRule *this)
{
  return 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSValueID const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSCustomPropertyValue::SyntaxValueList const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>>,WebCore::CSSValueID,WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t *a1@<X1>, WTF::StringBuilder *a2@<X2>, WTF::String *a3@<X3>, WebCore *a4@<X8>, __n128 a5@<Q0>)
{
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a4, *a1, a2, a3, a5);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSValueID const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSCustomPropertyValue::SyntaxValueList const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>>,WebCore::CSSValueID,WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>@<X0>(unsigned __int16 *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  _DWORD *v4;

  result = WebCore::nameString(*a1);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSValueID const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSCustomPropertyValue::SyntaxValueList const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>>,WebCore::CSSValueID,WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v2;
  char *v3[2];

  v2 = (char *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24 * *(unsigned int *)(*(_QWORD *)a1 + 28));
  v3[0] = *(char **)(*(_QWORD *)a1 + 16);
  v3[1] = v2;
  WebCore::CSSParserTokenRange::serialize(v3, 1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSValueID const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSCustomPropertyValue::SyntaxValueList const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>>,WebCore::CSSValueID,WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSValueID const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSCustomPropertyValue::SyntaxValueList const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>>,WebCore::CSSValueID,WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))*(&off_1E33976B8 + v2))(&v6);
  }
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSValueID const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_1::operator() const(void)::{lambda(WebCore::CSSCustomPropertyValue::SyntaxValueList const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableReferenceValue>>,WebCore::CSSValueID,WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  int v13;
  WebCore::Length *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  char v20;
  char *v21;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a1;
    v5 = 48 * v3;
    while (1)
    {
      if (v18)
        WTF::StringBuilder::append();
      v6 = *(unsigned int *)(v4 + 40);
      if ((_DWORD)v6 == -1)
      {
        v13 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(v13, v14);
      }
      v21 = &v20;
      ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))*(&off_1E33976B8 + v6))(&v15, &v21, v4);
      v8 = v15;
      if (v18 || v17)
      {
        if (v15 && (*((_BYTE *)v15 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        goto LABEL_16;
      }
      if (v15)
        *(_DWORD *)v15 += 2;
      v9 = v16;
      v16 = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          WTF::StringImpl::destroy(v9, v7);
          v8 = v15;
          if (!v15)
            goto LABEL_15;
LABEL_14:
          LODWORD(v8) = *((_DWORD *)v8 + 1);
          goto LABEL_15;
        }
        *(_DWORD *)v9 -= 2;
      }
      if (v8)
        goto LABEL_14;
LABEL_15:
      v18 = (int)v8;
LABEL_16:
      v10 = v15;
      v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      v4 += 48;
      v5 -= 48;
      if (!v5)
      {
        result = v16;
        if (v16)
          goto LABEL_31;
        break;
      }
    }
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
  result = v16;
  if (v16)
LABEL_31:
    *(_DWORD *)result += 2;
  *a2 = result;
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v7);
      result = v16;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(WebCore::Length *this@<X1>, WebCore *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  WTF::StringBuilder *v8;
  WTF::String *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  int *v12;
  WTF::StringBuilder *v13;
  WTF::String *v14;
  __n128 v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  int *v20;

  if (*((_BYTE *)this + 4) == 11)
  {
    v4 = WebCore::Length::calculationValue(this);
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    WebCore::createCSS((uint64_t *)&v20, *(_QWORD *)(v4 + 8), (const WebCore::RenderStyle *)&WebCore::RenderStyle::defaultStyle(void)::style);
    if (v20)
    {
      v18 = v20;
      WebCore::CSSCalcOperationNode::simplifyRecursive((uint64_t *)&v18, 0, &v19);
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(void))(*(_QWORD *)v18 + 8))();
        else
          --v18[2];
      }
      v5 = WTF::fastCompactMalloc((WTF *)0x18);
      v6 = *(_BYTE *)(v4 + 16);
      *(_DWORD *)v5 = 2;
      v7 = *(_BYTE *)(v5 + 6);
      *(_WORD *)(v5 + 4) = -14336;
      *(_BYTE *)(v5 + 6) = v7 & 0xFC;
      *(_QWORD *)(v5 + 8) = v19;
      *(_BYTE *)(v5 + 16) = v6;
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a2, v5, v8, v9, v10);
      if (*(_DWORD *)v5 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v5, v11);
      else
        *(_DWORD *)v5 -= 2;
    }
    else
    {
      v17 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v17 += 2;
      *(_QWORD *)a2 = v17;
    }
  }
  else
  {
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    WebCore::CSSPrimitiveValue::create(&v20, this, (const WebCore::Length *)&WebCore::RenderStyle::defaultStyle(void)::style);
    v12 = v20;
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a2, (uint64_t)v20, v13, v14, v15);
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v16);
      else
        *v12 -= 2;
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(uint64_t a1@<X1>, WTF::StringBuilder *a2@<X2>, WTF::String *a3@<X3>, WebCore *a4@<X8>, __n128 a5@<Q0>)
{
  double v6;
  int v7;
  int *v9;
  int *v10;
  int v11;
  char v14;
  WTF::StringImpl *v15;

  v6 = *(double *)a1;
  v7 = *(unsigned __int8 *)(a1 + 8);
  if (v7 == 6)
  {
    a5.n128_f64[0] = (double)(int)v6;
    if ((int)v6 <= 0xFF && *(_QWORD *)&v6 == COERCE__INT64((double)(int)v6))
    {
      v9 = &WebCore::staticCSSValuePool[4 * (int)v6];
      v11 = v9[16];
      v10 = v9 + 16;
      *v10 = v11 + 2;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v7 != 1)
  {
    if (v7 == 3)
    {
      a5.n128_f64[0] = (double)(int)v6;
      if ((int)v6 <= 0xFF && *(_QWORD *)&v6 == COERCE__INT64((double)(int)v6))
      {
        v10 = &WebCore::staticCSSValuePool[4 * (int)v6 + 1040];
        *v10 += 2;
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  a5.n128_f64[0] = (double)(int)v6;
  if ((int)v6 > 0xFF || *(_QWORD *)&v6 != COERCE__INT64((double)(int)v6))
  {
LABEL_20:
    v10 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v10 = 2;
    v14 = *((_BYTE *)v10 + 6);
    *((_WORD *)v10 + 2) = v7 & 0x7F;
    *((_BYTE *)v10 + 6) = v14 & 0xFC;
    *((double *)v10 + 1) = v6;
    goto LABEL_21;
  }
  v10 = &WebCore::staticCSSValuePool[4 * (int)v6 + 2064];
  *v10 += 2;
LABEL_21:
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a4, (uint64_t)v10, a2, a3, a5);
  if (*v10 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v15);
  else
    *v10 -= 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD v6[4];
  _QWORD *v7;

  v6[0] = &v5;
  v6[1] = &v5;
  v6[2] = &v5;
  v6[3] = &v5;
  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(v4);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSI_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSI_INSL_INS8_17HSLFunctionModernEEEEENSI_INSL_INS8_11HWBFunctionEEEEENSI_INSL_INS8_11LabFunctionEEEEENSI_INSL_INS8_11LCHFunctionEEEEENSI_INSL_INS8_13OKLabFunctionEEEEENSI_INSL_INS8_13OKLCHFunctionEEEEENSI_INSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INS8_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSA_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSA_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSA_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__implIJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEESE_OS2T_DpOT0____fmatrix
                                               + v2))(&v7);
  }
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>@<X0>(uint64_t *a1@<X1>, WebCore *a2@<X8>)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  WTF::String *v5;
  __n128 v6;
  WTF::StringImpl *v7;
  _DWORD *result;
  uint64_t v9;
  _DWORD *v10;

  v3 = *a1;
  {
    v9 = *a1;
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    v3 = v9;
  }
  (*(void (**)(_DWORD **__return_ptr, uint64_t, int8x8_t *))(*(_QWORD *)v3 + 24))(&v10, v3, &WebCore::RenderStyle::defaultStyle(void)::style);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a2, (uint64_t)v10, v4, v5, v6);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>@<X0>(WebCore *this@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializeURL(this, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::Length const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::NumericSyntaxValue const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::StyleColor const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>> const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::URL const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WTF::String const&)#1},WebCore::CSSCustomPropertyValue::customCSSText(void)::$_0::operator() const(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::{lambda(WebCore::CSSCustomPropertyValue::TransformSyntaxValue const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>@<X0>(int **a1@<X1>, WebCore *a2@<X8>)
{
  int *v3;
  int *result;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  int *v10;
  int *v11;

  v3 = *a1;
  {
    v10 = *a1;
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    v3 = v10;
  }
  result = WebCore::transformOperationAsCSSValue(v3, (const WebCore::TransformOperation *)&WebCore::RenderStyle::defaultStyle(void)::style, &v11);
  if (v11)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a2, (uint64_t)v11, v5, v6, v7);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*result == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v8);
      else
        *result -= 2;
    }
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 2;
    *(_QWORD *)a2 = v9;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22MutableStylePropertiesENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_17StyleRuleFontFaceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v9;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 28);
      if ((_DWORD)v3)
      {
        v4 = 16 * v3;
        v5 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
        do
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
            else
              *v6 -= 2;
          }
          v5 += 2;
          v4 -= 16;
        }
        while (v4);
      }
      v7 = *(WTF **)(v2 + 16);
      if ((WTF *)(v2 + 32) != v7 && v7 != 0)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      v9 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22MutableStylePropertiesENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_17StyleRuleFontFaceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      --*result;
  }
  return result;
}

BOOL WebCore::FontFeatureValues::isEmpty(WebCore::FontFeatureValues *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (v1 && *(_DWORD *)(v1 - 12))
    return 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12))
      return 0;
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*(_DWORD *)(v3 - 12))
      return 0;
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if (*(_DWORD *)(v4 - 12))
      return 0;
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    if (*(_DWORD *)(v5 - 12))
      return 0;
  }
  v6 = *((_QWORD *)this + 7);
  return !v6 || *(_DWORD *)(v6 - 12) == 0;
}

_DWORD *WebCore::FontCreationContextRareData::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *result;
  _DWORD *v13;

  v10 = WTF::fastMalloc((WTF *)0x48);
  v11 = *a3;
  if (*a3)
    ++*(_DWORD *)(v11 + 8);
  v13 = (_DWORD *)v11;
  *a4 = WebCore::FontCreationContextRareData::FontCreationContextRareData(v10, a1, a2, (uint64_t *)&v13, a5);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::FontCreationContextRareData::FontCreationContextRareData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  void *v22;

  *(_DWORD *)a1 = 1;
  v9 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 29)
      goto LABEL_17;
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 8) = v22;
    memcpy(v22, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
  }
  v10 = *a3;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 24) = v10;
  v11 = *((unsigned int *)a3 + 7);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v11;
  if (!(_DWORD)v11)
    goto LABEL_12;
  if (v11 >> 28)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x19579B6ECLL);
  }
  v12 = WTF::fastMalloc((WTF *)(16 * v11));
  *(_DWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = *((unsigned int *)a3 + 7);
  if ((_DWORD)v13)
  {
    v14 = a3[2];
    v15 = v14 + 16 * v13;
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v12 + 8) = v16;
      if ((v16 & 0x8000000000000) != 0)
      {
        v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      v12 += 16;
      v14 += 16;
    }
    while (v14 != v15);
  }
LABEL_12:
  v19 = *a4;
  if (*a4)
    ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(a1 + 56) = v19;
  *(float *)(a1 + 64) = a5;
  return a1;
}

uint64_t WTF::RefCounted<WebCore::CSSVariableData>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v6;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(WTF::StringImpl **)(this + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF **)(v2 + 16);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v5, a2);
    }
    v6 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, int8x16_t *a7, int a8)
{
  char *v13;
  char *v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  char *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int16 v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;

  v13 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v14 = &result[2 * (a3 & 0xFFFFFFC0)];
    v15 = 0uLL;
    do
    {
      v58.val[0] = *a2;
      v16 = a2[1];
      v62.val[0] = a2[2];
      v17 = a2[3];
      a2 += 4;
      v18 = v17;
      v62.val[1] = 0uLL;
      v66.val[0] = v16;
      v58.val[1] = 0uLL;
      v19 = result;
      vst2q_s8(v19, v58);
      v19 += 32;
      v66.val[1] = 0uLL;
      vst2q_s8(v19, v66);
      v20 = result + 64;
      vst2q_s8(v20, v62);
      v21 = result + 96;
      vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
      result += 128;
    }
    while (result != v14);
    result = v14;
  }
  while (result != v13)
  {
    v22 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v22;
    result += 2;
  }
  if (a4)
  {
    v23 = *(int8x16_t **)(a4 + 8);
    v24 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v25 = &v13[2 * v24];
      if (v24 >= 0x40)
      {
        v26 = &v13[2 * (v24 & 0xFFFFFFC0)];
        v28 = 0uLL;
        v29 = v13;
        do
        {
          v59.val[0] = *v23;
          v30 = v23[1];
          v63.val[0] = v23[2];
          v31 = v23[3];
          v23 += 4;
          v32 = v31;
          v63.val[1] = 0uLL;
          v67.val[0] = v30;
          v59.val[1] = 0uLL;
          v33 = v29;
          vst2q_s8(v33, v59);
          v33 += 32;
          v67.val[1] = 0uLL;
          vst2q_s8(v33, v67);
          v34 = v29 + 64;
          vst2q_s8(v34, v63);
          v35 = v29 + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
          v29 += 128;
        }
        while (v29 != v26);
      }
      else
      {
        v26 = v13;
      }
      while (v26 != v25)
      {
        v36 = v23->u8[0];
        v23 = (int8x16_t *)((char *)v23 + 1);
        *(_WORD *)v26 = v36;
        v26 += 2;
      }
    }
    else if ((_DWORD)v24 == 1)
    {
      *(_WORD *)v13 = v23->i16[0];
    }
    else if ((_DWORD)v24)
    {
      result = (char *)memcpy(v13, v23, 2 * v24);
    }
    v27 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v27 = 0;
  }
  v37 = &v13[2 * v27];
  v38 = &v37[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v39 = &v37[2 * (a6 & 0xFFFFFFC0)];
    v40 = 0uLL;
    do
    {
      v60.val[0] = *a5;
      v41 = a5[1];
      v64.val[0] = a5[2];
      v42 = a5[3];
      a5 += 4;
      v43 = v42;
      v64.val[1] = 0uLL;
      v68.val[0] = v41;
      v60.val[1] = 0uLL;
      v44 = v37;
      vst2q_s8(v44, v60);
      v44 += 32;
      v68.val[1] = 0uLL;
      vst2q_s8(v44, v68);
      v45 = v37 + 64;
      vst2q_s8(v45, v64);
      v46 = v37 + 96;
      vst2q_s8(v46, *(int8x16x2_t *)(&v40 - 1));
      v37 += 128;
    }
    while (v37 != v39);
    v37 = v39;
  }
  while (v37 != v38)
  {
    v47 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v37 = v47;
    v37 += 2;
  }
  v48 = &v38[2 * a8];
  if ((a8 & 0xFFFFFFC0) != 0)
  {
    v49 = &v38[2 * (a8 & 0xFFFFFFC0)];
    v50 = 0uLL;
    do
    {
      v61.val[0] = *a7;
      v51 = a7[1];
      v65.val[0] = a7[2];
      v52 = a7[3];
      a7 += 4;
      v53 = v52;
      v65.val[1] = 0uLL;
      v69.val[0] = v51;
      v61.val[1] = 0uLL;
      v54 = v38;
      vst2q_s8(v54, v61);
      v54 += 32;
      v69.val[1] = 0uLL;
      vst2q_s8(v54, v69);
      v55 = v38 + 64;
      vst2q_s8(v55, v65);
      v56 = v38 + 96;
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      v38 += 128;
    }
    while (v38 != v49);
    v38 = v49;
  }
  while (v38 != v48)
  {
    v57 = a7->u8[0];
    a7 = (int8x16_t *)((char *)a7 + 1);
    *(_WORD *)v38 = v57;
    v38 += 2;
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, int8x16_t **a4)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  int8x16_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t *v32;
  size_t v33;
  int8x16_t *v34;
  char *v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int16 v61;
  unsigned __int128 *v62;
  unsigned __int128 *v63;
  unsigned __int128 v64;
  char v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = *a3;
      v13 = *a4;
      v14 = *((unsigned int *)a4 + 2);
      v15 = &result[2 * v11];
      v16 = v11 & 0xFFFFFFC0;
      if (v16)
      {
        v17 = &result[2 * v16];
        v18 = 0uLL;
        do
        {
          v66.val[0] = *v10;
          v19 = v10[1];
          v69.val[0] = v10[2];
          v20 = v10[3];
          v10 += 4;
          v21 = v20;
          v69.val[1] = 0uLL;
          v72.val[0] = v19;
          v66.val[1] = 0uLL;
          v22 = result;
          vst2q_s8(v22, v66);
          v22 += 32;
          v72.val[1] = 0uLL;
          vst2q_s8(v22, v72);
          v23 = result + 64;
          vst2q_s8(v23, v69);
          v24 = result + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          result += 128;
        }
        while (result != v17);
        result = v17;
      }
      while (result != v15)
      {
        v25 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)result = v25;
        result += 2;
      }
      if (v12)
      {
        v26 = *(int8x16_t **)(v12 + 8);
        v27 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          v39 = &v15[2 * v27];
          if (v27 >= 0x40)
          {
            v40 = &v15[2 * (v27 & 0xFFFFFFC0)];
            v42 = 0uLL;
            v43 = v15;
            do
            {
              v67.val[0] = *v26;
              v44 = v26[1];
              v70.val[0] = v26[2];
              v45 = v26[3];
              v26 += 4;
              v46 = v45;
              v70.val[1] = 0uLL;
              v73.val[0] = v44;
              v67.val[1] = 0uLL;
              v47 = v43;
              vst2q_s8(v47, v67);
              v47 += 32;
              v73.val[1] = 0uLL;
              vst2q_s8(v47, v73);
              v48 = v43 + 64;
              vst2q_s8(v48, v70);
              v49 = v43 + 96;
              vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
              v43 += 128;
            }
            while (v43 != v40);
          }
          else
          {
            v40 = v15;
          }
          while (v40 != v39)
          {
            v50 = v26->u8[0];
            v26 = (int8x16_t *)((char *)v26 + 1);
            *(_WORD *)v40 = v50;
            v40 += 2;
          }
        }
        else if ((_DWORD)v27 == 1)
        {
          *(_WORD *)v15 = v26->i16[0];
        }
        else if ((_DWORD)v27)
        {
          result = (char *)memcpy(v15, v26, 2 * v27);
        }
        v41 = *(unsigned int *)(v12 + 4);
      }
      else
      {
        v41 = 0;
      }
      v51 = &v15[2 * v41];
      v52 = &v51[2 * v14];
      if ((v14 & 0xFFFFFFC0) != 0)
      {
        v53 = &v51[2 * (v14 & 0xFFFFFFC0)];
        v54 = 0uLL;
        do
        {
          v68.val[0] = *v13;
          v55 = v13[1];
          v71.val[0] = v13[2];
          v56 = v13[3];
          v13 += 4;
          v57 = v56;
          v71.val[1] = 0uLL;
          v74.val[0] = v55;
          v68.val[1] = 0uLL;
          v58 = v51;
          vst2q_s8(v58, v68);
          v58 += 32;
          v74.val[1] = 0uLL;
          vst2q_s8(v58, v74);
          v59 = v51 + 64;
          vst2q_s8(v59, v71);
          v60 = v51 + 96;
          vst2q_s8(v60, *(int8x16x2_t *)(&v54 - 1));
          v51 += 128;
        }
        while (v51 != v53);
        v51 = v53;
      }
      while (v51 != v52)
      {
        v61 = v13->u8[0];
        v13 = (int8x16_t *)((char *)v13 + 1);
        *(_WORD *)v51 = v61;
        v51 += 2;
      }
    }
    return result;
  }
  result = (char *)MEMORY[0x19AEA4824]();
  if (!result)
    return result;
  v28 = result;
  v29 = a2[1];
  v30 = v29;
  v31 = *a3;
  v32 = *a4;
  v33 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v29)
  {
    v34 = *a2;
    if ((_DWORD)v29 == 1)
      *result = v34->i8[0];
    else
      result = (char *)memcpy(result, v34, a2[1]);
  }
  v35 = &v28[v30];
  if (!v31)
  {
    v38 = 0;
    if (!(_DWORD)v33)
      return result;
    goto LABEL_27;
  }
  v36 = *(char **)(v31 + 8);
  v37 = *(unsigned int *)(v31 + 4);
  if ((*(_BYTE *)(v31 + 16) & 4) != 0)
  {
    if ((_DWORD)v37)
    {
      if ((_DWORD)v37 == 1)
        *v35 = *v36;
      else
        result = (char *)memcpy(&v28[v30], v36, v37);
    }
  }
  else
  {
    if (v37 < 0x10)
    {
      v62 = (unsigned __int128 *)&v28[v30];
    }
    else
    {
      v62 = (unsigned __int128 *)&v35[v37 & 0xFFFFFFF0];
      v63 = (unsigned __int128 *)&v28[v30];
      do
      {
        v64 = (unsigned __int128)vld2q_s8(v36);
        v36 += 32;
        *v63++ = v64;
      }
      while (v63 != v62);
    }
    while (v62 != (unsigned __int128 *)&v35[v37])
    {
      v65 = *v36;
      v36 += 2;
      *(_BYTE *)v62 = v65;
      v62 = (unsigned __int128 *)((char *)v62 + 1);
    }
  }
  v38 = *(unsigned int *)(v31 + 4);
  if ((_DWORD)v33)
  {
LABEL_27:
    result = &v35[v38];
    if ((_DWORD)v33 == 1)
      *result = v32->i8[0];
    else
      return (char *)memcpy(result, v32, v33);
  }
  return result;
}

